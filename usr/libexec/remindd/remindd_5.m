id sub_100315260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v31;
  char v32;
  void (*v33)(char *, char *, uint64_t);
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  char *v36;
  NSUUID v37;
  Class isa;
  uint64_t v39;
  id v40;
  id v42;
  Class v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  void (*v47)(char *, unint64_t, uint64_t);
  unsigned int (*v48)(char *, uint64_t, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v52 = a2;
  v7 = type metadata accessor for Date(0);
  v50 = *(_QWORD *)(v7 - 8);
  v51 = v7;
  __chkstk_darwin(v7);
  v49 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v9);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v45 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)&v45 - v16;
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v45 - v24;
  if (!*(_QWORD *)(a3 + 16) || (v26 = sub_1002C65F8(a1), (v27 & 1) == 0))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v19 + 56))(v17, 1, 1, v18, v23);
    goto LABEL_10;
  }
  v28 = *(_QWORD *)(v19 + 72);
  v29 = *(_QWORD *)(a3 + 56) + v28 * v26;
  v47 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
  v47(v17, v29, v18);
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
  v30(v17, 0, 1, v18);
  v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v48(v17, 1, v18) == 1)
  {
LABEL_10:
    v39 = (uint64_t)v17;
LABEL_11:
    sub_10000882C(v39, (uint64_t *)&unk_100839C80);
    return 0;
  }
  v46 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  v46(v25, v17, v18);
  if (!*(_QWORD *)(a4 + 16) || (v31 = sub_1002C65F8(v52), (v32 & 1) == 0))
  {
    v30(v14, 1, 1, v18);
    goto LABEL_14;
  }
  v33 = (void (*)(char *, char *, uint64_t))v47;
  v47(v14, *(_QWORD *)(a4 + 56) + v31 * v28, v18);
  v30(v14, 0, 1, v18);
  v34 = v48;
  if (v48(v14, 1, v18) == 1)
  {
LABEL_14:
    (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v18);
    v39 = (uint64_t)v14;
    goto LABEL_11;
  }
  v46(v21, v14, v18);
  v33(v11, v21, v18);
  v35 = ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v30)(v11, 0, 1, v18);
  v36 = v49;
  static Date.now.getter(v35);
  v37.super.isa = UUID._bridgeToObjectiveC()().super.isa;
  if (v34(v11, 1, v18) == 1)
  {
    isa = 0;
  }
  else
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v18);
  }
  v42 = objc_allocWithZone((Class)REMMembership);
  v43 = Date._bridgeToObjectiveC()().super.isa;
  v40 = objc_msgSend(v42, "initWithMemberIdentifier:groupIdentifier:isObsolete:modifiedOn:", v37.super.isa, isa, 0, v43);

  (*(void (**)(char *, uint64_t))(v50 + 8))(v36, v51);
  v44 = *(void (**)(char *, uint64_t))(v19 + 8);
  v44(v21, v18);
  v44(v25, v18);
  return v40;
}

uint64_t sub_100315608()
{
  id *v0;

  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for RDTemplateOperationCopyRemindersFromPublicTemplateToREMList()
{
  return objc_opt_self(_TtC7remindd59RDTemplateOperationCopyRemindersFromPublicTemplateToREMList);
}

void sub_10031565C(void *a1)
{
  sub_1003125FC(a1);
}

uint64_t *sub_10031567C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[7];
  swift_bridgeObjectRetain(a1[6]);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t *sub_100315704(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

unint64_t sub_100315788()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083DA90;
  if (!qword_10083DA90)
  {
    v1 = sub_1000A5A94(&qword_10083DA88);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10083DA90);
  }
  return result;
}

void sub_1003157D4(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __n128 v15;
  int64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(char *, unint64_t, uint64_t, __n128);
  uint64_t v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  unint64_t v56;

  v45 = a2;
  v46 = a3;
  v54 = sub_10001A630(&qword_1008452C0);
  v52 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v44 = (uint64_t)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for UUID(0);
  v51 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v50 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v49 = (char *)&v41 - v7;
  v8 = sub_10001A630(&qword_1008452C8);
  __chkstk_darwin(v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = (unint64_t)_swiftEmptyArrayStorage;
  v11 = *(_QWORD *)(a1 + 64);
  v42 = a1 + 64;
  v12 = 1 << *(_BYTE *)(a1 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v43 = (unint64_t)(v12 + 63) >> 6;
  v53 = a1;
  v15 = swift_bridgeObjectRetain(a1);
  v16 = 0;
  v47 = v10;
  v17 = v48;
  v18 = v49;
  v19 = v50;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v55 = v16;
      v21 = v20 | (v16 << 6);
      goto LABEL_19;
    }
    v22 = __OFADD__(v16, 1);
    v23 = v16 + 1;
    if (v22)
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v23 >= v43)
    {
      v25 = v54;
LABEL_30:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v52 + 56))(v10, 1, 1, v25, v15);
      swift_release(v53);
      return;
    }
    v24 = *(_QWORD *)(v42 + 8 * v23);
    v25 = v54;
    if (!v24)
      break;
LABEL_18:
    v14 = (v24 - 1) & v24;
    v55 = v23;
    v21 = __clz(__rbit64(v24)) + (v23 << 6);
LABEL_19:
    v27 = v53;
    v28 = v51;
    v29 = *(_QWORD *)(v51 + 72) * v21;
    v30 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v51 + 16);
    v30(v18, *(_QWORD *)(v53 + 48) + v29, v17, v15);
    ((void (*)(char *, unint64_t, uint64_t))v30)(v19, *(_QWORD *)(v27 + 56) + v29, v17);
    v31 = v54;
    v10 = v47;
    v32 = &v47[*(int *)(v54 + 48)];
    v33 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
    v33(v47, v18, v17);
    v33(v32, v19, v17);
    v34 = v52;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v10, 0, 1, v31);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v10, 1, v31) == 1)
    {
      swift_release(v53);
      return;
    }
    v35 = v44;
    sub_1000A5CA8((uint64_t)v10, v44, &qword_1008452C0);
    v36 = v45(v35, v35 + *(int *)(v31 + 48));
    v37 = sub_10000882C(v35, &qword_1008452C0);
    v16 = v55;
    if (v36)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v37);
      v39 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v38 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v39 >= v38 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1);
      v40 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v39, v36);
      specialized Array._endMutation()(v40);
    }
  }
  v26 = v23 + 1;
  if (v23 + 1 >= v43)
    goto LABEL_30;
  v24 = *(_QWORD *)(v42 + 8 * v26);
  if (v24)
    goto LABEL_17;
  v26 = v23 + 2;
  if (v23 + 2 >= v43)
    goto LABEL_30;
  v24 = *(_QWORD *)(v42 + 8 * v26);
  if (v24)
    goto LABEL_17;
  v26 = v23 + 3;
  if (v23 + 3 >= v43)
    goto LABEL_30;
  v24 = *(_QWORD *)(v42 + 8 * v26);
  if (v24)
    goto LABEL_17;
  v26 = v23 + 4;
  if (v23 + 4 >= v43)
    goto LABEL_30;
  v24 = *(_QWORD *)(v42 + 8 * v26);
  if (v24)
  {
LABEL_17:
    v23 = v26;
    goto LABEL_18;
  }
  while (1)
  {
    v23 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v23 >= v43)
      goto LABEL_30;
    v24 = *(_QWORD *)(v42 + 8 * v23);
    ++v26;
    if (v24)
      goto LABEL_18;
  }
LABEL_32:
  __break(1u);
}

unint64_t sub_100315BDC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, __n128);
  __n128 v25;
  uint64_t v26;
  void (*v27)(unint64_t, uint64_t);
  void (*v28)(char *, _QWORD, uint64_t, uint64_t);
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  void (*v30)(uint64_t, char *, uint64_t);
  unint64_t v31;
  char v32;
  NSString v33;
  id v34;
  id v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  __n128 v48;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  __n128 v59;
  Class isa;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  id v68;
  id v69;
  char *v70;
  void (*v71)(char *, unint64_t, uint64_t);
  id v72;
  id v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t, uint64_t, __n128);
  uint64_t v78;
  unint64_t v79;

  v68 = a3;
  v69 = a4;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v65 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v62 - v10;
  __chkstk_darwin(v12);
  v75 = (char *)&v62 - v13;
  v14 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v14);
  v64 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v67 = (char *)&v62 - v17;
  __chkstk_darwin(v18);
  v20 = (char *)&v62 - v19;
  v79 = (unint64_t)_swiftEmptyArrayStorage;
  v21 = sub_1002B01C8((uint64_t)_swiftEmptyArrayStorage);
  v22 = *(_QWORD *)(a1 + 16);
  if (v22)
  {
    v74 = v21;
    v70 = v11;
    v23 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v24 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16);
    v76 = *(_QWORD *)(v7 + 72);
    v77 = v24;
    v62 = a1;
    v25 = swift_bridgeObjectRetain(a1);
    v26 = (uint64_t)v75;
    v66 = a2;
    while (1)
    {
      v77(v20, v23, v6, v25);
      v28 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56);
      v28(v20, 0, 1, v6);
      v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
      if (v29(v20, 1, v6) == 1)
        break;
      v30 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
      v30(v26, v20, v6);
      if (*(_QWORD *)(a2 + 16) && (v31 = sub_1002C65F8(v26), (v32 & 1) != 0))
      {
        v71 = (void (*)(char *, unint64_t, uint64_t))v30;
        swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v31 + 8));
        v33 = String._bridgeToObjectiveC()();
        v34 = objc_msgSend(v68, "addListSectionWithDisplayName:toListSectionContextChangeItem:", v33, v69, swift_bridgeObjectRelease().n128_f64[0]);

        v73 = v34;
        v35 = objc_msgSend(v34, "objectID");
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v35);
        v37 = *(_QWORD *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v36 = *(_QWORD *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v37 >= v36 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1);
        v38 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v35);
        specialized Array._endMutation()(v38);
        v39 = v35;
        v40 = (uint64_t)v70;
        ((void (*)(char *, char *, uint64_t))v77)(v70, v75, v6);
        v72 = v39;
        v41 = objc_msgSend(v39, "uuid");
        v42 = (uint64_t)v67;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v41);

        v43 = v42;
        v28((char *)v42, 0, 1, v6);
        if (v29((char *)v42, 1, v6) == 1)
        {
          sub_10000882C(v42, (uint64_t *)&unk_100839C80);
          v44 = v74;
          swift_bridgeObjectRetain(v74);
          v45 = sub_1002C65F8(v40);
          v47 = v46;
          v48 = swift_bridgeObjectRelease();
          if ((v47 & 1) != 0)
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v44);
            v78 = v44;
            v26 = (uint64_t)v75;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_1002D712C();
              v44 = v78;
            }
            v50 = *(_QWORD *)(v44 + 48);
            v63 = v45;
            v51 = v45 * v76;
            v27 = *(void (**)(unint64_t, uint64_t))(v7 + 8);
            v27(v50 + v51, v6);
            v52 = v78;
            v53 = *(_QWORD *)(v78 + 56) + v51;
            v54 = (uint64_t)v64;
            v71(v64, v53, v6);
            v74 = v52;
            sub_10028A1C4(v63, v52);
            v55 = swift_bridgeObjectRelease();
            ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))v28)(v54, 0, 1, v6, v55);
          }
          else
          {
            v54 = (uint64_t)v64;
            ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v28)(v64, 1, 1, v6, v48);
            v27 = *(void (**)(unint64_t, uint64_t))(v7 + 8);
            v26 = (uint64_t)v75;
          }
          v27((unint64_t)v70, v6);
          sub_10000882C(v54, (uint64_t *)&unk_100839C80);
        }
        else
        {
          v56 = (uint64_t)v65;
          v71(v65, v43, v6);
          v57 = v74;
          v58 = swift_isUniquelyReferenced_nonNull_native(v74);
          v78 = v57;
          sub_10028C430(v56, v40, v58);
          v74 = v78;
          v59 = swift_bridgeObjectRelease();
          v27 = *(void (**)(unint64_t, uint64_t))(v7 + 8);
          ((void (*)(uint64_t, uint64_t, __n128))v27)(v40, v6, v59);
          v26 = (uint64_t)v75;
        }

        a2 = v66;
      }
      else
      {
        v27 = *(void (**)(unint64_t, uint64_t))(v7 + 8);
      }
      v27(v26, v6);
      v23 += v76;
      if (!--v22)
      {
        v28(v20, 1, 1, v6);
        break;
      }
    }
    swift_bridgeObjectRelease();
    sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v69, "setUnsavedSectionIDsOrdering:", isa, swift_bridgeObjectRelease().n128_f64[0]);

    return v74;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_1002B01C8((uint64_t)_swiftEmptyArrayStorage);
  }
}

void sub_100316174(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  NSURL *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t ObjCClassFromMetadata;
  NSString v24;
  uint64_t v25;
  _QWORD v26[2];
  uint64_t v27;

  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RDSavedURLAttachment(0);
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)&v11 = __chkstk_darwin(v9).n128_u64[0];
  v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend(a2, "attachmentContext", v11);
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 16);
    if (v15)
    {
      v26[0] = a1;
      v26[1] = v2;
      v16 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
      v27 = *(_QWORD *)(v10 + 72);
      v17 = v14;
      swift_bridgeObjectRetain(a1);
      do
      {
        sub_1000151E8(v16, (uint64_t)v13, type metadata accessor for RDSavedURLAttachment);
        (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v13, v5);
        sub_10001C744((uint64_t)v13, type metadata accessor for RDSavedURLAttachment);
        URL._bridgeToObjectiveC()(v18);
        v20 = v19;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);

        v16 += v27;
        --v15;
      }
      while (v15);

      swift_bridgeObjectRelease();
    }
    else
    {

    }
  }
  else
  {
    v21 = (void *)objc_opt_self(REMError);
    v22 = sub_1000151B0(0, &qword_1008452B8, REMReminderChangeItem_ptr);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v22);
    v24 = String._bridgeToObjectiveC()();
    objc_msgSend(v21, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v24);

    swift_willThrow(v25);
  }
}

double sub_10031639C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  id v6;
  Class isa;
  id v8;
  double result;
  _QWORD v10[6];

  v10[2] = a3;
  v10[3] = a2;
  sub_1003157D4(a1, (uint64_t (*)(uint64_t, uint64_t))sub_100316490, (uint64_t)v10);
  if ((unint64_t)v5 >> 62)
  {
    if (v5 >= 0)
      v5 &= 0xFFFFFFFFFFFFFF8uLL;
    if (!_CocoaArrayWrapper.endIndex.getter(v5))
      goto LABEL_8;
  }
  else if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_8;
  }
  if (a4)
  {
    v6 = objc_allocWithZone((Class)REMMemberships);
    sub_1000151B0(0, (unint64_t *)&qword_10083BF98, REMMembership_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    v8 = objc_msgSend(v6, "initWithMemberships:", isa, swift_bridgeObjectRelease().n128_f64[0]);

    objc_msgSend(a4, "setUnsavedMembershipsOfRemindersInSections:", v8);
    return result;
  }
LABEL_8:
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

id sub_100316490(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100315260(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100316498()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008452D0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008452D0);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100316528(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10031655C + 4 * byte_1006B4510[a1]))(0x44497463656A626FLL, 0xE800000000000000);
}

uint64_t sub_10031655C()
{
  return 0x6E65727275636572;
}

uint64_t sub_100316580()
{
  return 0x636E657571657266;
}

uint64_t sub_10031659C()
{
  return 0x6C61767265746E69;
}

unint64_t sub_1003165B0()
{
  return 0xD000000000000011;
}

uint64_t sub_1003165CC()
{
  return 0x6854664F73796164;
}

uint64_t sub_100316614()
{
  return 0x664F7368746E6F6DLL;
}

uint64_t sub_100316638()
{
  return 0x7469736F50746573;
}

uint64_t sub_100316658()
{
  return 0x54664F736B656577;
}

uint64_t sub_10031667C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = sub_100316528(*a1);
  v5 = v4;
  v6 = sub_100316528(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_100316704()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  v2 = sub_100316528(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

double sub_100316764(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = sub_100316528(*v1);
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

Swift::Int sub_1003167A4(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  v3 = sub_100316528(v2);
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_100316800@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100318010(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10031682C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100316528(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100316854(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DF590;
}

unint64_t sub_100316864@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100318010(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100316888()
{
  unsigned __int8 *v0;

  return sub_100316528(*v0);
}

uint64_t sub_100316890@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DEF88, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_1003168EC(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E04A8;
}

uint64_t sub_1003168FC@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DEF88, v3);
  result = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_10031695C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  char v17;

  v7 = sub_10001A630(&qword_100845548);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10000A388(a1, v11);
  v13 = sub_100319098();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for REMRecurrenceRuleCDIngestor.DayOfWeek.CodingKeys, &type metadata for REMRecurrenceRuleCDIngestor.DayOfWeek.CodingKeys, v13, v11, v12);
  v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v17, v7);
  if (!v3)
  {
    v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a3, &v16, v7);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100316A78()
{
  _BYTE *v0;

  if (*v0)
    return 0x626D754E6B656577;
  else
    return 0x656854664F796164;
}

uint64_t sub_100316AC0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1003190DC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100316AE4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100319098();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100316B0C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100319098();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100316B34(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10031695C(a1, *v1, v1[1]);
}

uint64_t sub_100316B4C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1003191F0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t type metadata accessor for REMRecurrenceRuleCDIngestor()
{
  return objc_opt_self(_TtC7remindd27REMRecurrenceRuleCDIngestor);
}

_UNKNOWN **sub_100316B94()
{
  return &off_1007EE480;
}

_UNKNOWN **sub_100316BA0()
{
  return &off_1007EE450;
}

id sub_100316BAC(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  NSArray v18;
  uint64_t v19;
  NSArray v20;
  uint64_t v21;
  NSArray v22;
  uint64_t v23;
  NSArray v24;
  uint64_t v25;
  NSArray v26;
  void *v27;
  NSArray v28;
  id v29;
  void *v31;

  if (a7)
  {
    sub_1000151B0(0, &qword_100842588, REMRecurrenceDayOfWeek_ptr);
    v18.super.isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&a9 = swift_bridgeObjectRelease(a7).n128_u64[0];
    v19 = a10;
    if (a8)
      goto LABEL_3;
  }
  else
  {
    v18.super.isa = 0;
    v19 = a10;
    if (a8)
    {
LABEL_3:
      sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
      v20.super.isa = Array._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)&a9 = swift_bridgeObjectRelease(a8).n128_u64[0];
      v21 = a11;
      if (v19)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  v20.super.isa = 0;
  v21 = a11;
  if (v19)
  {
LABEL_4:
    sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
    v22.super.isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&a9 = swift_bridgeObjectRelease(v19).n128_u64[0];
    v23 = a12;
    if (v21)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  v22.super.isa = 0;
  v23 = a12;
  if (v21)
  {
LABEL_5:
    sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
    v24.super.isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&a9 = swift_bridgeObjectRelease(v21).n128_u64[0];
    v25 = a13;
    if (v23)
      goto LABEL_6;
LABEL_12:
    v26.super.isa = 0;
    v27 = a14;
    if (v25)
      goto LABEL_7;
LABEL_13:
    v28.super.isa = 0;
    goto LABEL_14;
  }
LABEL_11:
  v24.super.isa = 0;
  v25 = a13;
  if (!v23)
    goto LABEL_12;
LABEL_6:
  sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  v26.super.isa = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&a9 = swift_bridgeObjectRelease(v23).n128_u64[0];
  v27 = a14;
  if (!v25)
    goto LABEL_13;
LABEL_7:
  sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  v28.super.isa = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&a9 = swift_bridgeObjectRelease(v25).n128_u64[0];
LABEL_14:
  v29 = objc_msgSend(v31, "initRecurrenceRuleWithObjectID:accountID:reminderID:frequency:interval:firstDayOfTheWeek:daysOfTheWeek:daysOfTheMonth:monthsOfTheYear:weeksOfTheYear:daysOfTheYear:setPositions:end:", a1, a2, a3, a4, a5, a6, a9, v18.super.isa, v20.super.isa, v22.super.isa, v24.super.isa, v26.super.isa, v28.super.isa, v27);

  return v29;
}

_QWORD *sub_100316E08(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = 0;
  if (a2 >> 60 != 15)
  {
    v5 = type metadata accessor for JSONDecoder(0);
    swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
    v6 = sub_1000A70E4(a1, a2);
    v7 = JSONDecoder.init()(v6);
    v8 = sub_10001A630(&qword_1008454E8);
    v9 = sub_100318E24(&qword_100845508, (void (*)(void))sub_100318E8C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v8, a1, a2, v8, v9);
    v10 = *(_QWORD *)(v17 + 16);
    if (v10)
    {
      specialized ContiguousArray.reserveCapacity(_:)(v10);
      v11 = (void *)objc_opt_self(REMRecurrenceDayOfWeek);
      v12 = (_QWORD *)(v17 + 40);
      do
      {
        v13 = objc_msgSend(v11, "dayOfWeek:weekNumber:", *(v12 - 1), *v12);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v14 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        specialized ContiguousArray._endMutation()(v15);
        v12 += 2;
        --v10;
      }
      while (v10);
      v2 = _swiftEmptyArrayStorage;
      swift_release(v7);
      sub_1000A71B4(a1, a2);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release(v7);
      sub_1000A71B4(a1, a2);
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return v2;
}

void sub_100316FE4(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  NSObject *v36;
  _QWORD *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  NSObject *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  _QWORD *v45;
  NSObject *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t ObjCClassFromMetadata;
  NSString v51;
  uint64_t v52;
  id v53;
  char **v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  Class isa;
  id v61;
  id v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  void *v72;
  Class v73;
  id v74;
  id v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  void *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  void *v85;
  Class v86;
  id v87;
  id v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  void *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  void *v98;
  Class v99;
  id v100;
  id v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  void *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  void *v111;
  Class v112;
  id v113;
  id v114;
  uint64_t v115;
  _QWORD *v116;
  char *v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  void *v124;
  void (*v125)(char *, char *, _QWORD *);
  char *v126;
  Class v127;
  id v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  id v134;
  double v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  id v144;
  id v145;
  id v146;
  id v147;
  void *v148;
  void *v149;
  char *v150;
  char *v151;
  _QWORD *v152;
  uint64_t v153;
  id v154[3];
  uint64_t v155;
  __int128 v156;
  __int128 v157;

  v2 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v2);
  v4 = (char *)&v136 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v136 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v10 = __chkstk_darwin(v9).n128_u64[0];
  v12 = (char *)&v136 - v11;
  *(_QWORD *)&v156 = 0;
  v13 = objc_msgSend(a1, "remObjectIDWithError:", &v156, v10);
  v14 = v156;
  if (!v13)
  {
    v28 = (id)v156;
    _convertNSErrorToError(_:)(v14);

    swift_willThrow(v29);
    return;
  }
  v15 = v13;
  v150 = v12;
  v151 = v8;
  v152 = (_QWORD *)v5;
  v16 = (id)v156;
  v17 = objc_msgSend(a1, "account");
  if (!v17)
    goto LABEL_10;
  v18 = v17;
  v19 = objc_msgSend(v17, "remObjectID");

  v149 = v19;
  if (!v19)
    goto LABEL_10;
  v20 = objc_msgSend(a1, "reminder");
  if (!v20
    || (v21 = v20, v22 = objc_msgSend(v20, "remObjectID"), v21, !v22))
  {

LABEL_10:
    v30 = objc_msgSend(a1, "account");

    if (!v30)
    {
      if (qword_100837188 != -1)
        swift_once(&qword_100837188, sub_100316498);
      v31 = type metadata accessor for Logger(0);
      sub_10001AAA8(v31, (uint64_t)qword_1008452D0);
      v32 = v15;
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v33, v34))
      {
        v35 = (uint8_t *)swift_slowAlloc(12, -1);
        v152 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v35 = 138412290;
        *(_QWORD *)&v156 = v32;
        v36 = v32;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, (char *)&v156 + 8);
        v37 = v152;
        *v152 = v15;

        _os_log_impl((void *)&_mh_execute_header, v33, v34, "REMRecurrenceRuleCDIngestor: cdRecurrenceRule.account is nil {cdRecurrenceRule.remObjectID: %@}", v35, 0xCu);
        v38 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v37, 1, v38);
        swift_slowDealloc(v37, -1, -1);
        swift_slowDealloc(v35, -1, -1);
      }
      else
      {

        v33 = v32;
      }

    }
    v39 = objc_msgSend(a1, "reminder");

    if (!v39)
    {
      swift_bridgeObjectRelease();
      if (qword_100837188 != -1)
        swift_once(&qword_100837188, sub_100316498);
      v40 = type metadata accessor for Logger(0);
      sub_10001AAA8(v40, (uint64_t)qword_1008452D0);
      v41 = v15;
      v42 = Logger.logObject.getter(v41);
      v43 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v42, v43))
      {
        v44 = (uint8_t *)swift_slowAlloc(12, -1);
        v45 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v44 = 138412290;
        *(_QWORD *)&v156 = v41;
        v46 = v41;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, (char *)&v156 + 8);
        *v45 = v15;

        _os_log_impl((void *)&_mh_execute_header, v42, v43, "REMRecurrenceRuleCDIngestor: cdRecurrenceRule.reminder is nil {cdRecurrenceRule.remObjectID: %@}", v44, 0xCu);
        v47 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v45, 1, v47);
        swift_slowDealloc(v45, -1, -1);
        swift_slowDealloc(v44, -1, -1);
      }
      else
      {

        v42 = v41;
      }

    }
    v48 = (void *)objc_opt_self(REMError);
    v49 = sub_1000151B0(0, (unint64_t *)&qword_100841620, off_1007D6700);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v49);
    v51 = String._bridgeToObjectiveC()();
    objc_msgSend(v48, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v51, swift_bridgeObjectRelease().n128_f64[0]);

    swift_willThrow(v52);
    return;
  }
  v146 = objc_msgSend(a1, "frequency");
  v145 = objc_msgSend(a1, "interval");
  v144 = objc_msgSend(a1, "firstDayOfTheWeek");
  v23 = objc_msgSend(a1, "daysOfTheWeek");
  v147 = v22;
  if (v23)
  {
    v24 = v23;
    v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v27 = v26;

  }
  else
  {
    v25 = 0;
    v27 = 0xF000000000000000;
  }
  v143 = sub_100316E08(v25, v27);
  sub_1000A71B4(v25, v27);
  v53 = objc_msgSend(a1, "daysOfTheMonth");
  v54 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
  v148 = v15;
  v141 = v6;
  if (!v53)
  {
    v142 = 0;
    goto LABEL_37;
  }
  v55 = v53;
  v56 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v53);
  v58 = v57;

  v59 = (void *)objc_opt_self(NSJSONSerialization);
  sub_1000A70E4(v56, v58);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v154[0] = 0;
  v61 = objc_msgSend(v59, "JSONObjectWithData:options:error:", isa, 0, v154);

  v62 = v154[0];
  if (v61)
  {
    _bridgeAnyObjectToAny(_:)(&v156, v61);
    sub_1000A71C8(v56, v58);
    swift_unknownObjectRelease(v61);
  }
  else
  {
    v63 = v62;
    v64 = _convertNSErrorToError(_:)(v62);

    swift_willThrow(v65);
    sub_1000A71C8(v56, v58);
    swift_errorRelease(v64);
    v156 = 0u;
    v157 = 0u;
  }
  sub_10001A5E8((uint64_t)&v156, (uint64_t)v154);
  v15 = v148;
  if (!v155)
  {
    sub_10000882C((uint64_t)v154, (uint64_t *)&unk_10083D5B0);
    goto LABEL_35;
  }
  v66 = sub_10001A630(&qword_100845500);
  if ((swift_dynamicCast(&v153, v154, (char *)&type metadata for Any + 8, v66, 6) & 1) == 0)
  {
LABEL_35:
    sub_1000A71C8(v56, v58);
    v142 = 0;
    goto LABEL_36;
  }
  v142 = v153;
  sub_1000A71C8(v56, v58);
LABEL_36:
  v54 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
LABEL_37:
  v67 = objc_msgSend(a1, "monthsOfTheYear");
  if (!v67)
  {
    v140 = 0;
    goto LABEL_47;
  }
  v68 = v67;
  v69 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v67);
  v71 = v70;

  v72 = (void *)objc_opt_self(NSJSONSerialization);
  sub_1000A70E4(v69, v71);
  v73 = Data._bridgeToObjectiveC()().super.isa;
  v154[0] = 0;
  v74 = objc_msgSend(v72, v54[69], v73, 0, v154);

  v75 = v154[0];
  if (v74)
  {
    _bridgeAnyObjectToAny(_:)(&v156, v74);
    sub_1000A71C8(v69, v71);
    swift_unknownObjectRelease(v74);
  }
  else
  {
    v76 = v75;
    v77 = _convertNSErrorToError(_:)(v75);

    swift_willThrow(v78);
    sub_1000A71C8(v69, v71);
    swift_errorRelease(v77);
    v156 = 0u;
    v157 = 0u;
  }
  sub_10001A5E8((uint64_t)&v156, (uint64_t)v154);
  v15 = v148;
  if (v155)
  {
    v79 = sub_10001A630(&qword_100845500);
    if ((swift_dynamicCast(&v153, v154, (char *)&type metadata for Any + 8, v79, 6) & 1) != 0)
    {
      v140 = v153;
      sub_1000A71C8(v69, v71);
      goto LABEL_47;
    }
  }
  else
  {
    sub_10000882C((uint64_t)v154, (uint64_t *)&unk_10083D5B0);
  }
  sub_1000A71C8(v69, v71);
  v140 = 0;
LABEL_47:
  v80 = objc_msgSend(a1, "weeksOfTheYear");
  if (!v80)
  {
    v139 = 0;
    goto LABEL_57;
  }
  v81 = v80;
  v82 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v80);
  v84 = v83;

  v85 = (void *)objc_opt_self(NSJSONSerialization);
  sub_1000A70E4(v82, v84);
  v86 = Data._bridgeToObjectiveC()().super.isa;
  v154[0] = 0;
  v87 = objc_msgSend(v85, v54[69], v86, 0, v154);

  v88 = v154[0];
  if (v87)
  {
    _bridgeAnyObjectToAny(_:)(&v156, v87);
    sub_1000A71C8(v82, v84);
    swift_unknownObjectRelease(v87);
  }
  else
  {
    v89 = v88;
    v90 = _convertNSErrorToError(_:)(v88);

    swift_willThrow(v91);
    sub_1000A71C8(v82, v84);
    swift_errorRelease(v90);
    v156 = 0u;
    v157 = 0u;
  }
  sub_10001A5E8((uint64_t)&v156, (uint64_t)v154);
  v15 = v148;
  if (v155)
  {
    v92 = sub_10001A630(&qword_100845500);
    if ((swift_dynamicCast(&v153, v154, (char *)&type metadata for Any + 8, v92, 6) & 1) != 0)
    {
      v139 = v153;
      sub_1000A71C8(v82, v84);
      goto LABEL_57;
    }
  }
  else
  {
    sub_10000882C((uint64_t)v154, (uint64_t *)&unk_10083D5B0);
  }
  sub_1000A71C8(v82, v84);
  v139 = 0;
LABEL_57:
  v93 = objc_msgSend(a1, "daysOfTheYear");
  if (!v93)
  {
    v138 = 0;
    goto LABEL_68;
  }
  v94 = v93;
  v95 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v93);
  v97 = v96;

  v98 = (void *)objc_opt_self(NSJSONSerialization);
  sub_1000A70E4(v95, v97);
  v99 = Data._bridgeToObjectiveC()().super.isa;
  v154[0] = 0;
  v100 = objc_msgSend(v98, "JSONObjectWithData:options:error:", v99, 0, v154);

  v101 = v154[0];
  if (v100)
  {
    _bridgeAnyObjectToAny(_:)(&v156, v100);
    sub_1000A71C8(v95, v97);
    swift_unknownObjectRelease(v100);
  }
  else
  {
    v102 = v101;
    v103 = _convertNSErrorToError(_:)(v101);

    swift_willThrow(v104);
    sub_1000A71C8(v95, v97);
    swift_errorRelease(v103);
    v156 = 0u;
    v157 = 0u;
  }
  sub_10001A5E8((uint64_t)&v156, (uint64_t)v154);
  v15 = v148;
  if (!v155)
  {
    sub_10000882C((uint64_t)v154, (uint64_t *)&unk_10083D5B0);
    goto LABEL_66;
  }
  v105 = sub_10001A630(&qword_100845500);
  if ((swift_dynamicCast(&v153, v154, (char *)&type metadata for Any + 8, v105, 6) & 1) == 0)
  {
LABEL_66:
    sub_1000A71C8(v95, v97);
    v138 = 0;
    goto LABEL_67;
  }
  v138 = v153;
  sub_1000A71C8(v95, v97);
LABEL_67:
  v54 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
LABEL_68:
  v106 = objc_msgSend(a1, "setPositions");
  if (v106)
  {
    v107 = v106;
    v137 = v4;
    v108 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v106);
    v110 = v109;

    v111 = (void *)objc_opt_self(NSJSONSerialization);
    sub_1000A70E4(v108, v110);
    v112 = Data._bridgeToObjectiveC()().super.isa;
    v154[0] = 0;
    v113 = objc_msgSend(v111, v54[69], v112, 0, v154);

    v114 = v154[0];
    if (v113)
    {
      _bridgeAnyObjectToAny(_:)(&v156, v113);
      sub_1000A71C8(v108, v110);
      swift_unknownObjectRelease(v113);
    }
    else
    {
      v119 = v114;
      v120 = _convertNSErrorToError(_:)(v114);

      swift_willThrow(v121);
      sub_1000A71C8(v108, v110);
      swift_errorRelease(v120);
      v156 = 0u;
      v157 = 0u;
    }
    sub_10001A5E8((uint64_t)&v156, (uint64_t)v154);
    v15 = v148;
    v117 = v151;
    v116 = v152;
    v118 = v141;
    if (v155)
    {
      v122 = sub_10001A630(&qword_100845500);
      if ((swift_dynamicCast(&v153, v154, (char *)&type metadata for Any + 8, v122, 6) & 1) != 0)
      {
        v115 = v153;
        sub_1000A71C8(v108, v110);
LABEL_78:
        v4 = v137;
        goto LABEL_79;
      }
    }
    else
    {
      sub_10000882C((uint64_t)v154, (uint64_t *)&unk_10083D5B0);
    }
    sub_1000A71C8(v108, v110);
    v115 = 0;
    goto LABEL_78;
  }
  v115 = 0;
  v117 = v151;
  v116 = v152;
  v118 = v141;
LABEL_79:
  v123 = objc_msgSend(a1, "endDate");
  if (v123)
  {
    v124 = v123;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v123);

    v125 = *(void (**)(char *, char *, _QWORD *))(v118 + 32);
    v125(v4, v117, v116);
    (*(void (**)(char *, _QWORD, uint64_t, _QWORD *))(v118 + 56))(v4, 0, 1, v116);
    if ((*(unsigned int (**)(char *, uint64_t, _QWORD *))(v118 + 48))(v4, 1, v116) != 1)
    {
      v126 = v150;
      v125(v150, v4, v116);
      v127 = Date._bridgeToObjectiveC()().super.isa;
      v128 = objc_msgSend((id)objc_opt_self(REMRecurrenceEnd), "recurrenceEndWithEndDate:", v127);

      (*(void (**)(char *, _QWORD *))(v118 + 8))(v126, v116);
LABEL_87:
      v130 = v147;
      v131 = (int)v146;
      v132 = (int)v145;
      v133 = (int)v144;
      v134 = objc_allocWithZone((Class)REMRecurrenceRule);
      sub_100316BAC(v15, v149, v130, v131, v132, v133, (uint64_t)v143, v142, v135, v140, v139, v138, v115, v128);
      return;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, _QWORD *))(v118 + 56))(v4, 1, 1, v116);
  }
  sub_10000882C((uint64_t)v4, (uint64_t *)&unk_1008380D0);
  if ((uint64_t)objc_msgSend(a1, "occurrenceCount") < 1)
  {
    v128 = 0;
    goto LABEL_87;
  }
  v129 = (unint64_t)objc_msgSend(a1, "occurrenceCount");
  if ((v129 & 0x8000000000000000) == 0)
  {
    v128 = objc_msgSend((id)objc_opt_self(REMRecurrenceEnd), "recurrenceEndWithOccurrenceCount:", v129);
    goto LABEL_87;
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
}

unint64_t sub_100318010(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DE948, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xB)
    return 11;
  else
    return v3;
}

void sub_100318058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[12];
  uint64_t v15;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v14[3] = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v9);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v14[8] = *(_QWORD *)(v12 - 8);
  v14[9] = v12;
  __chkstk_darwin(v12);
  v14[7] = (char *)v14 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a3 + 16))
  {
    v15 = a3 + 32;
    swift_bridgeObjectRetain(a3);
    v14[4] = v6;
    v14[5] = a1;
    v14[11] = v7;
    v14[6] = v11;
    v14[1] = a2;
    v14[2] = a3;
    __asm { BR              X9 }
  }
}

void sub_100318D10(void *a1, void *a2, char a3, uint64_t a4)
{
  uint64_t v4;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;

  if ((a3 & 1) != 0)
  {
    v10 = objc_msgSend(a1, "reminderID");
    sub_1003FD8D8(1, v10, a4);
    v9 = v11;

    if (v4)
      return;
    objc_msgSend(a2, "setReminder:", v9);
  }
  else
  {
    v7 = objc_msgSend(a1, "accountID");
    sub_1003FD8AC(0, v7, a4);
    v9 = v8;

    if (v4)
      return;
    objc_msgSend(a2, "setAccount:", v9);
  }

}

unint64_t sub_100318DE0()
{
  unint64_t result;

  result = qword_1008454F8;
  if (!qword_1008454F8)
  {
    result = swift_getWitnessTable(&unk_1006B4778, &type metadata for REMRecurrenceRuleCDIngestor.DayOfWeek);
    atomic_store(result, (unint64_t *)&qword_1008454F8);
  }
  return result;
}

uint64_t sub_100318E24(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_1000A5A94(&qword_1008454E8);
    a2();
    result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100318E8C()
{
  unint64_t result;

  result = qword_100845510;
  if (!qword_100845510)
  {
    result = swift_getWitnessTable(&unk_1006B4750, &type metadata for REMRecurrenceRuleCDIngestor.DayOfWeek);
    atomic_store(result, (unint64_t *)&qword_100845510);
  }
  return result;
}

ValueMetadata *type metadata accessor for REMRecurrenceRuleCDIngestor.DayOfWeek()
{
  return &type metadata for REMRecurrenceRuleCDIngestor.DayOfWeek;
}

ValueMetadata *type metadata accessor for REMRecurrenceRuleCDIngestor.RelationshipKey()
{
  return &type metadata for REMRecurrenceRuleCDIngestor.RelationshipKey;
}

uint64_t storeEnumTagSinglePayload for REMRecurrenceRuleCDIngestor.ValueKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_100318F40 + 4 * byte_1006B4520[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_100318F74 + 4 * byte_1006B451B[v4]))();
}

uint64_t sub_100318F74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100318F7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100318F84);
  return result;
}

uint64_t sub_100318F90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100318F98);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_100318F9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100318FA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMRecurrenceRuleCDIngestor.ValueKey()
{
  return &type metadata for REMRecurrenceRuleCDIngestor.ValueKey;
}

uint64_t sub_100318FC0()
{
  return sub_1000BAEEC(&qword_100845518, &qword_100845520);
}

unint64_t sub_100318FE8()
{
  unint64_t result;

  result = qword_100845528;
  if (!qword_100845528)
  {
    result = swift_getWitnessTable(&unk_1006B4650, &type metadata for REMRecurrenceRuleCDIngestor.ValueKey);
    atomic_store(result, (unint64_t *)&qword_100845528);
  }
  return result;
}

uint64_t sub_10031902C()
{
  return sub_1000BAEEC(&qword_100845530, &qword_100845538);
}

unint64_t sub_100319054()
{
  unint64_t result;

  result = qword_100845540;
  if (!qword_100845540)
  {
    result = swift_getWitnessTable(&unk_1006B4728, &type metadata for REMRecurrenceRuleCDIngestor.RelationshipKey);
    atomic_store(result, (unint64_t *)&qword_100845540);
  }
  return result;
}

unint64_t sub_100319098()
{
  unint64_t result;

  result = qword_100845550;
  if (!qword_100845550)
  {
    result = swift_getWitnessTable(&unk_1006B4864, &type metadata for REMRecurrenceRuleCDIngestor.DayOfWeek.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100845550);
  }
  return result;
}

uint64_t sub_1003190DC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x656854664F796164 && a2 == 0xEC0000006B656557)
  {
    v5 = 0xEC0000006B656557;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656854664F796164, 0xEC0000006B656557, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x626D754E6B656577 && a2 == 0xEA00000000007265)
  {
    swift_bridgeObjectRelease(0xEA00000000007265);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x626D754E6B656577, 0xEA00000000007265, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1003191F0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  char v12;
  char v13;

  v3 = sub_10001A630(&qword_100845558);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10000A388(a1, v7);
  v9 = sub_100319098();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for REMRecurrenceRuleCDIngestor.DayOfWeek.CodingKeys, &type metadata for REMRecurrenceRuleCDIngestor.DayOfWeek.CodingKeys, v9, v7, v8);
  if (!v1)
  {
    v13 = 0;
    v7 = KeyedDecodingContainer.decode(_:forKey:)(&v13, v3);
    v12 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v12, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  return v7;
}

uint64_t _s7remindd27REMRecurrenceRuleCDIngestorC15RelationshipKeyOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10031938C + 4 * byte_1006B452A[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1003193C0 + 4 * byte_1006B4525[v4]))();
}

uint64_t sub_1003193C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003193C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003193D0);
  return result;
}

uint64_t sub_1003193DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003193E4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1003193E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003193F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMRecurrenceRuleCDIngestor.DayOfWeek.CodingKeys()
{
  return &type metadata for REMRecurrenceRuleCDIngestor.DayOfWeek.CodingKeys;
}

unint64_t sub_100319410()
{
  unint64_t result;

  result = qword_100845560;
  if (!qword_100845560)
  {
    result = swift_getWitnessTable(&unk_1006B483C, &type metadata for REMRecurrenceRuleCDIngestor.DayOfWeek.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100845560);
  }
  return result;
}

unint64_t sub_100319458()
{
  unint64_t result;

  result = qword_100845568;
  if (!qword_100845568)
  {
    result = swift_getWitnessTable(&unk_1006B47AC, &type metadata for REMRecurrenceRuleCDIngestor.DayOfWeek.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100845568);
  }
  return result;
}

unint64_t sub_1003194A0()
{
  unint64_t result;

  result = qword_100845570;
  if (!qword_100845570)
  {
    result = swift_getWitnessTable(&unk_1006B47D4, &type metadata for REMRecurrenceRuleCDIngestor.DayOfWeek.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100845570);
  }
  return result;
}

uint64_t sub_1003194E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100845580);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100845580);
  if (qword_100837608 != -1)
    swift_once(&qword_100837608, sub_1004A17C8);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_UNKNOWN **static REMCDAttachment.recordTypes()()
{
  return &off_1007E0538;
}

uint64_t static REMCDAttachment.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  id v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t result;

  v7 = a1;
  swift_bridgeObjectRetain(a3);
  v8 = a4;
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v10 = objc_msgSend((id)objc_opt_self(REMCDAttachment), "objectWithRecordID:accountID:context:", v7, v9, v8);

  if (v10)
  {
    result = swift_dynamicCastUnknownClass(v10, v4);
    if (result)
      return result;

  }
  return 0;
}

uint64_t static REMCDAttachment.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  Swift::String v13;
  Swift::Int v14;
  unint64_t *v15;
  __objc2_class **v16;
  id v17;
  NSString v18;
  id v19;
  id v20;
  void *v21;
  uint64_t result;
  uint64_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t MetatypeMetadata;
  uint64_t v30;
  unint64_t v31;
  double v32;
  id v33;
  void *v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;

  v4 = v3;
  v8 = sub_1000151B0(0, (unint64_t *)&unk_10083AE20, off_1007D6698);
  v9 = CKRecord.subscript.getter(1701869908, 0xE400000000000000);
  if (v9)
  {
    v48 = v9;
    v10 = sub_10001A630(&qword_1008398E0);
    if ((swift_dynamicCast(&v46, &v48, v10, &type metadata for String, 6) & 1) != 0)
    {
      v12 = v46;
      v11 = v47;
      swift_bridgeObjectRetain(v47);
      v13._countAndFlagsBits = v12;
      v13._object = v11;
      v14 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007E04D0, v13);
      swift_bridgeObjectRelease();
      switch(v14)
      {
        case 0:
          swift_bridgeObjectRelease();
          v15 = (unint64_t *)&unk_10083AE00;
          v16 = off_1007D66C0;
          goto LABEL_9;
        case 2:
          swift_bridgeObjectRelease();
          v15 = (unint64_t *)&unk_100845598;
          v16 = off_1007D6728;
          goto LABEL_9;
        case 1:
          swift_bridgeObjectRelease();
          v15 = (unint64_t *)&unk_1008455A0;
          v16 = off_1007D66D8;
LABEL_9:
          v8 = sub_1000151B0(0, v15, v16);
          goto LABEL_10;
      }
      if (qword_100837190 != -1)
        swift_once(&qword_100837190, sub_1003194E4);
      v39 = type metadata accessor for Logger(0);
      sub_10001AAA8(v39, (uint64_t)qword_100845580);
      swift_bridgeObjectRetain(v11);
      v41 = Logger.logObject.getter(v40);
      v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc(12, -1);
        v45 = swift_slowAlloc(32, -1);
        v46 = v45;
        *(_DWORD *)v43 = 136315138;
        v44 = v43 + 4;
        swift_bridgeObjectRetain(v11);
        v48 = sub_10001A820(v12, (unint64_t)v11, &v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
        swift_bridgeObjectRelease_n(v11, 3);
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "newCloudObject: Unknown attachment type {type: %s}", v43, 0xCu);
        swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v45, -1, -1);
        swift_slowDealloc(v43, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v11, 2);
      }
    }
  }
LABEL_10:
  v17 = objc_msgSend(a1, "recordID", v44);
  v18 = objc_msgSend(v17, "recordName");

  if (!v18)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  v19 = objc_msgSend((id)swift_getObjCClassFromMetadata(v8), "newObjectWithCKRecordName:context:account:", v18, a3, a2);

  if (!v19)
    return 0;
  v20 = objc_msgSend(a2, "ckIdentifier");
  if (v20)
  {
    v21 = v20;
    objc_msgSend(v19, "mergeDataFromRecord:accountID:", a1, v20);

    objc_msgSend(v19, "setCkServerRecord:", a1);
    objc_msgSend(v19, "setInCloud:", 1);
    objc_msgSend(v19, "updateParentReferenceIfNecessary");
    result = swift_dynamicCastUnknownClass(v19, v4);
    if (result)
      return result;
  }
  else
  {
    if (qword_100837190 != -1)
      swift_once(&qword_100837190, sub_1003194E4);
    v23 = type metadata accessor for Logger(0);
    sub_10001AAA8(v23, (uint64_t)qword_100845580);
    v24 = a2;
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc(22, -1);
      v28 = swift_slowAlloc(64, -1);
      v48 = v28;
      *(_DWORD *)v27 = 136446466;
      v46 = v4;
      MetatypeMetadata = swift_getMetatypeMetadata(v4);
      v30 = String.init<A>(describing:)(&v46, MetatypeMetadata);
      v46 = sub_10001A820(v30, v31, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47);
      *(_QWORD *)&v32 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v27 + 12) = 2082;
      v33 = objc_msgSend(v24, "remObjectID", v32);
      if (v33)
      {
        v34 = v33;
        v35 = objc_msgSend(v33, "description");

        v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
        v38 = v37;

      }
      else
      {
        v38 = 0xE300000000000000;
        v36 = 7104878;
      }
      v46 = sub_10001A820(v36, v38, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy(v28, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      return 0;
    }

  }
  return 0;
}

Swift::String __swiftcall REMCDAttachment.recordType()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = 0x656D686361747441;
  v1 = (void *)0xEA0000000000746ELL;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

void sub_100319DD4(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  id v36;
  NSString v37;
  void *v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  NSObject **v44;
  NSObject *v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  void *v49;
  id v50;
  id v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void *v55;
  id v56;
  void *v57;
  void (**v58)(_QWORD, _QWORD, _QWORD, _QWORD);
  NSObject *v59;
  void (*v60)(NSObject *, char *, uint64_t);
  int v61;
  NSObject *v62;
  os_log_t v63;
  uint64_t v64;
  NSString v65;
  id v66;
  Class isa;
  NSObject *v68;
  char *v69;
  Class v70;
  NSString v71;
  NSString v72;
  NSURL *v73;
  void *v74;
  void *v75;
  id v76;
  unsigned int v77;
  id v78;
  char *v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  id v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  uint64_t v93;
  id v94;
  void *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  NSObject *v105;
  os_log_type_t v106;
  uint64_t v107;
  _QWORD *v108;
  id v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  NSObject *v114;
  os_log_type_t v115;
  uint8_t *v116;
  _QWORD *v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  NSObject **v124;
  char *v125;
  uint64_t v126;
  id v127;
  id v128;
  id v129;
  id v130;
  id v131;
  NSObject *v132;
  os_log_type_t v133;
  int v134;
  uint64_t v135;
  _QWORD *v136;
  id v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  __n128 v141;
  NSObject *v142;
  id v143;
  NSObject *v144;
  uint64_t v145;
  char *v146;
  NSObject *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  NSObject **v151;
  char *v152;
  uint64_t v153;
  id v154;
  id v155;
  id v156;
  id v157;
  id v158;
  NSObject *v159;
  os_log_type_t v160;
  int v161;
  uint64_t v162;
  _QWORD *v163;
  NSObject *v164;
  unint64_t v165;
  char *v166;
  uint64_t v167;
  unint64_t v168;
  __n128 v169;
  id v170;
  NSObject *v171;
  uint64_t v172;
  id v173;
  uint64_t v174;
  NSObject **v175;
  uint64_t v176;
  char *v177;
  id v178;
  id v179;
  id v180;
  id v181;
  id v182;
  NSObject *v183;
  os_log_type_t v184;
  int v185;
  uint64_t v186;
  _QWORD *v187;
  id v188;
  unint64_t v189;
  NSObject *v190;
  uint64_t v191;
  unint64_t v192;
  __n128 v193;
  NSObject *v194;
  NSObject *v195;
  id v196;
  os_log_t v197;
  uint64_t v198;
  id v199;
  uint64_t v200;
  NSObject **v201;
  id v202;
  id v203;
  id v204;
  id v205;
  id v206;
  NSObject *v207;
  os_log_type_t v208;
  uint64_t v209;
  _QWORD *v210;
  NSObject *v211;
  unint64_t v212;
  char *v213;
  uint64_t v214;
  unint64_t v215;
  __n128 v216;
  NSObject *v217;
  id v218;
  NSObject *v219;
  uint64_t v220;
  id v221;
  void *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  char *v228;
  id v229;
  id v230;
  id v231;
  id v232;
  id v233;
  uint64_t v234;
  NSObject *v235;
  os_log_type_t v236;
  int v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  unint64_t v241;
  id v242;
  unint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  unint64_t v247;
  __n128 v248;
  uint64_t v249;
  id v250;
  uint64_t v251;
  NSObject **v252;
  NSObject *v253;
  id v254;
  id v255;
  uint64_t v256;
  id v257;
  char *v258;
  uint64_t v259;
  char *v260;
  char *v261;
  os_log_t v262;
  NSObject *v263;
  void (**v264)(_QWORD, _QWORD, _QWORD, _QWORD);
  NSObject *v265;
  id v266;
  char *v267;
  id v268;
  NSObject **v269;
  _QWORD v270[3];
  char v271[16];
  id v272;
  uint64_t v273;
  uint64_t ObjectType;
  _QWORD v275[2];

  v3 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v3);
  v263 = ((char *)&v254 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for URL(0);
  v264 = *(void (***)(_QWORD, _QWORD, _QWORD, _QWORD))(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v254 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v262 = (os_log_t)((char *)&v254 - v9);
  v10 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v10);
  v12 = (char *)&v254 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v269 = *(NSObject ***)(v13 - 8);
  __chkstk_darwin(v13);
  v260 = (char *)&v254 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v254 - v16;
  __chkstk_darwin(v18);
  v267 = (char *)&v254 - v19;
  __chkstk_darwin(v20);
  v265 = ((char *)&v254 - v21);
  __chkstk_darwin(v22);
  v261 = (char *)&v254 - v23;
  __chkstk_darwin(v24);
  v26 = (char *)&v254 - v25;
  __chkstk_darwin(v27);
  v29 = (char *)&v254 - v28;
  v30 = objc_opt_self(REMCDFileAttachment);
  v31 = swift_dynamicCastObjCClass(v1, v30);
  if (!v31)
  {
    if (qword_100837190 != -1)
      swift_once(&qword_100837190, sub_1003194E4);
    v80 = type metadata accessor for Logger(0);
    sub_10001AAA8(v80, (uint64_t)qword_100845580);
    v269 = v1;
    v81 = Logger.logObject.getter(v269);
    v82 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v81, v82))
    {
      v83 = (uint8_t *)swift_slowAlloc(12, -1);
      v84 = (void *)swift_slowAlloc(32, -1);
      v272 = v84;
      *(_DWORD *)v83 = 136315138;
      ObjectType = swift_getObjectType();
      v85 = sub_10001A630(&qword_1008455B0);
      v86 = String.init<A>(describing:)(&ObjectType, v85);
      ObjectType = sub_10001A820(v86, v87, (uint64_t *)&v272);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v275);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "Not a file attachment {Type: %s}", v83, 0xCu);
      swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v84, -1, -1);
      swift_slowDealloc(v83, -1, -1);

    }
    else
    {

    }
    return;
  }
  v32 = (void *)v31;
  v258 = v29;
  v259 = v13;
  v33 = v1;
  v266 = a1;
  v34 = objc_msgSend(a1, "encryptedValues");
  v35 = swift_getObjectType();
  CKRecordKeyValueSetting.subscript.getter(0x656D614E656C6946, 0xE800000000000000, v35, &type metadata for String, &protocol witness table for String);
  swift_unknownObjectRelease(v34);
  if (!v273)
  {
    if (qword_100837190 != -1)
      swift_once(&qword_100837190, sub_1003194E4);
    v88 = type metadata accessor for Logger(0);
    sub_10001AAA8(v88, (uint64_t)qword_100845580);
    v89 = v33;
    v90 = Logger.logObject.getter(v89);
    v91 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v90, v91))
    {
      v92 = (uint8_t *)swift_slowAlloc(12, -1);
      v93 = swift_slowAlloc(32, -1);
      ObjectType = v93;
      *(_DWORD *)v92 = 136315138;
      v94 = objc_msgSend(v32, "fileName");
      if (v94)
      {
        v95 = v94;
        v96 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
        v98 = v97;

      }
      else
      {
        v96 = 0;
        v98 = 0;
      }
      v272 = v96;
      v273 = v98;
      v120 = sub_10001A630((uint64_t *)&unk_10083A370);
      v121 = String.init<A>(describing:)(&v272, v120);
      v272 = (id)sub_10001A820(v121, v122, &ObjectType);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, &v273);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v90, v91, "Filename is not a string {value: %s}", v92, 0xCu);
      swift_arrayDestroy(v93, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v93, -1, -1);
      swift_slowDealloc(v92, -1, -1);

    }
    else
    {

    }
    return;
  }
  v36 = v272;
  v37 = String._bridgeToObjectiveC()();
  v268 = v33;
  v38 = v37;
  objc_msgSend(v32, "setFileName:", v37);

  v39 = v268;
  v257 = objc_msgSend(v268, "remObjectID");
  if (!v257)
  {
    swift_bridgeObjectRelease();
    if (qword_100837190 != -1)
      swift_once(&qword_100837190, sub_1003194E4);
    v112 = type metadata accessor for Logger(0);
    sub_10001AAA8(v112, (uint64_t)qword_100845580);
    v113 = v266;
    v114 = Logger.logObject.getter(v113);
    v115 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v114, v115))
    {
      v116 = (uint8_t *)swift_slowAlloc(12, -1);
      v117 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v116 = 138412290;
      v272 = v113;
      v118 = v113;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, &v273);
      *v117 = v113;

      _os_log_impl((void *)&_mh_execute_header, v114, v115, "File attachment has no remObjectID {record: %@}", v116, 0xCu);
      v119 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v117, 1, v119);
      swift_slowDealloc(v117, -1, -1);
      swift_slowDealloc(v116, -1, -1);

    }
    else
    {

    }
    return;
  }
  v40 = objc_msgSend(v39, "account");
  if (!v40
    || (v41 = v40, v42 = objc_msgSend(v40, "remObjectID"), v41, !v42))
  {
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v269[7])(v12, 1, 1, v259);
    goto LABEL_27;
  }
  v256 = v5;
  v43 = objc_msgSend(v42, "uuid");

  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v43);
  v44 = v269;
  v45 = v269[4];
  v46 = v259;
  ((void (*)(char *, char *, uint64_t))v45)(v12, v26, v259);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v44[7])(v12, 0, 1, v46);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v44[6])(v12, 1, v46) == 1)
  {
LABEL_27:
    swift_bridgeObjectRelease();
    sub_10000882C((uint64_t)v12, (uint64_t *)&unk_100839C80);
    if (qword_100837190 != -1)
      swift_once(&qword_100837190, sub_1003194E4);
    v99 = type metadata accessor for Logger(0);
    sub_10001AAA8(v99, (uint64_t)qword_100845580);
    v100 = v257;
    v101 = v257;
    v102 = v266;
    v103 = v101;
    v104 = v102;
    v105 = Logger.logObject.getter(v104);
    v106 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v105, v106))
    {
      v107 = swift_slowAlloc(22, -1);
      v108 = (_QWORD *)swift_slowAlloc(16, -1);
      *(_DWORD *)v107 = 138543618;
      v272 = v103;
      v109 = v103;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, &v273);
      *v108 = v100;

      *(_WORD *)(v107 + 12) = 2112;
      v272 = v104;
      v110 = v104;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, &v273);
      v108[1] = v104;

      _os_log_impl((void *)&_mh_execute_header, v105, v106, "File attachment has no account {remObjectID: %{public}@, record: %@}", (uint8_t *)v107, 0x16u);
      v111 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v108, 2, v111);
      swift_slowDealloc(v108, -1, -1);
      swift_slowDealloc(v107, -1, -1);

    }
    else
    {

    }
    return;
  }
  ((void (*)(char *, char *, uint64_t))v45)(v258, v12, v46);
  v47 = objc_msgSend(v268, "storeControllerManagedObjectContext");
  v48 = v256;
  if (!v47
    || (v49 = v47,
        v50 = objc_msgSend(v47, "storeController"),
        v49,
        !v50))
  {
    swift_bridgeObjectRelease();
    if (qword_100837190 != -1)
      swift_once(&qword_100837190, sub_1003194E4);
    v123 = type metadata accessor for Logger(0);
    sub_10001AAA8(v123, (uint64_t)qword_100845580);
    v124 = v269;
    v125 = v258;
    v126 = v259;
    ((void (*)(char *, char *, uint64_t))v269[2])(v17, v258, v259);
    v127 = v257;
    v128 = v257;
    v129 = v266;
    v130 = v128;
    v131 = v129;
    v132 = Logger.logObject.getter(v131);
    v133 = static os_log_type_t.error.getter();
    v134 = v133;
    if (os_log_type_enabled(v132, v133))
    {
      v135 = swift_slowAlloc(32, -1);
      v136 = (_QWORD *)swift_slowAlloc(16, -1);
      v267 = (char *)swift_slowAlloc(32, -1);
      v272 = v267;
      *(_DWORD *)v135 = 138543874;
      v265 = v132;
      ObjectType = (uint64_t)v130;
      LODWORD(v264) = v134;
      v137 = v130;
      v266 = v137;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v275);
      *v136 = v127;

      *(_WORD *)(v135 + 12) = 2082;
      v138 = sub_10031EA80();
      v139 = dispatch thunk of CustomStringConvertible.description.getter(v126, v138);
      ObjectType = sub_10001A820(v139, v140, (uint64_t *)&v272);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v275);
      v141 = swift_bridgeObjectRelease();
      v142 = v269[1];
      ((void (*)(char *, uint64_t, __n128))v142)(v17, v126, v141);
      *(_WORD *)(v135 + 22) = 2112;
      ObjectType = (uint64_t)v131;
      v143 = v131;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v275);
      v136[1] = v131;

      v144 = v265;
      _os_log_impl((void *)&_mh_execute_header, v265, (os_log_type_t)v264, "No store controller for updating file attachment {remObjectID: %{public}@, accountUUID: (%{public}s, record: %@}", (uint8_t *)v135, 0x20u);
      v145 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v136, 2, v145);
      swift_slowDealloc(v136, -1, -1);
      v146 = v267;
      swift_arrayDestroy(v267, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v146, -1, -1);
      swift_slowDealloc(v135, -1, -1);

      ((void (*)(char *, uint64_t))v142)(v258, v126);
      return;
    }

    v147 = v124[1];
    ((void (*)(char *, uint64_t))v147)(v17, v126);

    v148 = v125;
    v149 = v126;
    goto LABEL_58;
  }
  v51 = v266;
  v52 = CKRecord.subscript.getter(0x65737341656C6946, 0xE900000000000074);
  v255 = v50;
  if (!v52)
    goto LABEL_46;
  v53 = (char *)v52;
  v54 = objc_opt_self(CKAsset);
  v55 = (void *)swift_dynamicCastObjCClass(v53, v54);
  if (!v55)
  {
    swift_unknownObjectRelease(v53);
LABEL_46:
    swift_bridgeObjectRelease();
    if (qword_100837190 != -1)
      swift_once(&qword_100837190, sub_1003194E4);
    v150 = type metadata accessor for Logger(0);
    sub_10001AAA8(v150, (uint64_t)qword_100845580);
    v151 = v269;
    v152 = v267;
    v153 = v259;
    ((void (*)(char *, char *, uint64_t))v269[2])(v267, v258, v259);
    v154 = v257;
    v155 = v257;
    v156 = v51;
    v157 = v155;
    v158 = v156;
    v159 = Logger.logObject.getter(v158);
    v160 = static os_log_type_t.error.getter();
    v161 = v160;
    if (os_log_type_enabled(v159, v160))
    {
      v162 = swift_slowAlloc(32, -1);
      v163 = (_QWORD *)swift_slowAlloc(16, -1);
      v266 = (id)swift_slowAlloc(32, -1);
      v272 = v266;
      *(_DWORD *)v162 = 138543874;
      v265 = v159;
      ObjectType = (uint64_t)v157;
      LODWORD(v264) = v161;
      v164 = v157;
      v263 = v164;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v275);
      *v163 = v154;

      *(_WORD *)(v162 + 12) = 2082;
      v165 = sub_10031EA80();
      v166 = v267;
      v167 = dispatch thunk of CustomStringConvertible.description.getter(v153, v165);
      ObjectType = sub_10001A820(v167, v168, (uint64_t *)&v272);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v275);
      v169 = swift_bridgeObjectRelease();
      v269 = (NSObject **)v151[1];
      ((void (*)(char *, uint64_t, __n128))v269)(v166, v153, v169);
      *(_WORD *)(v162 + 22) = 2112;
      ObjectType = (uint64_t)v158;
      v170 = v158;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v275);
      v163[1] = v158;

      v171 = v265;
      _os_log_impl((void *)&_mh_execute_header, v265, (os_log_type_t)v264, "File asset missing for file attachment {remObjectID: %{public}@, accountUUID: (%{public}s, record: %@}", (uint8_t *)v162, 0x20u);
      v172 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v163, 2, v172);
      swift_slowDealloc(v163, -1, -1);
      v173 = v266;
      swift_arrayDestroy(v266, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v173, -1, -1);
      swift_slowDealloc(v162, -1, -1);

      ((void (*)(char *, uint64_t))v269)(v258, v153);
      return;
    }

    v147 = v151[1];
    ((void (*)(char *, uint64_t))v147)(v152, v153);

LABEL_51:
    v148 = v258;
    v149 = v153;
LABEL_58:
    ((void (*)(char *, uint64_t))v147)(v148, v149);
    return;
  }
  v267 = v53;
  v56 = objc_msgSend(v55, "fileURL");
  if (!v56)
  {
    v59 = v263;
    ((void (**)(NSObject *, uint64_t, uint64_t, uint64_t))v264)[7](v263, 1, 1, v48);
    v62 = v265;
    goto LABEL_53;
  }
  v57 = v56;
  v254 = v36;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v56);

  v59 = v263;
  v58 = v264;
  v60 = (void (*)(NSObject *, char *, uint64_t))v264[4];
  v60(v263, v7, v48);
  ((void (**)(NSObject *, _QWORD, uint64_t, uint64_t))v58)[7](v59, 0, 1, v48);
  v61 = ((uint64_t (*)(NSObject *, uint64_t, uint64_t))v58[6])(v59, 1, v48);
  v62 = v265;
  if (v61 == 1)
  {
LABEL_53:
    swift_bridgeObjectRelease();
    sub_10000882C((uint64_t)v59, (uint64_t *)&unk_100839C70);
    if (qword_100837190 != -1)
      swift_once(&qword_100837190, sub_1003194E4);
    v174 = type metadata accessor for Logger(0);
    sub_10001AAA8(v174, (uint64_t)qword_100845580);
    v175 = v269;
    v177 = v258;
    v176 = v259;
    ((void (*)(NSObject *, char *, uint64_t))v269[2])(v62, v258, v259);
    v178 = v257;
    v179 = v257;
    v180 = v51;
    v181 = v179;
    v182 = v180;
    v183 = Logger.logObject.getter(v182);
    v184 = static os_log_type_t.error.getter();
    v185 = v184;
    if (os_log_type_enabled(v183, v184))
    {
      v186 = swift_slowAlloc(32, -1);
      v187 = (_QWORD *)swift_slowAlloc(16, -1);
      v266 = (id)swift_slowAlloc(32, -1);
      v272 = v266;
      *(_DWORD *)v186 = 138543874;
      v262 = v183;
      LODWORD(v263) = v185;
      ObjectType = (uint64_t)v181;
      v188 = v181;
      v264 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))v188;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v275);
      *v187 = v178;

      *(_WORD *)(v186 + 12) = 2082;
      v189 = sub_10031EA80();
      v190 = v265;
      v191 = dispatch thunk of CustomStringConvertible.description.getter(v176, v189);
      ObjectType = sub_10001A820(v191, v192, (uint64_t *)&v272);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v275);
      v193 = swift_bridgeObjectRelease();
      v194 = v175[1];
      ((void (*)(NSObject *, uint64_t, __n128))v194)(v190, v176, v193);
      v195 = v194;
      *(_WORD *)(v186 + 22) = 2112;
      ObjectType = (uint64_t)v182;
      v196 = v182;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v275);
      v187[1] = v182;

      v197 = v262;
      _os_log_impl((void *)&_mh_execute_header, v262, (os_log_type_t)v263, "File asset missing fileURL for file attachment {remObjectID: %{public}@, accountUUID: %{public}s, record: %@}", (uint8_t *)v186, 0x20u);
      v198 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v187, 2, v198);
      swift_slowDealloc(v187, -1, -1);
      v199 = v266;
      swift_arrayDestroy(v266, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v199, -1, -1);
      swift_slowDealloc(v186, -1, -1);

      swift_unknownObjectRelease(v267);
      ((void (*)(char *, uint64_t))v195)(v258, v176);
      return;
    }

    swift_unknownObjectRelease(v267);
    v147 = v175[1];
    ((void (*)(NSObject *, uint64_t))v147)(v265, v176);

    v148 = v177;
    v149 = v176;
    goto LABEL_58;
  }
  v63 = v262;
  v60(v262, (char *)v59, v48);
  static REMFileDigester.sha512Sum(url:)(v63);
  if (!v64)
  {
    swift_bridgeObjectRelease();
    if (qword_100837190 != -1)
      swift_once(&qword_100837190, sub_1003194E4);
    v200 = type metadata accessor for Logger(0);
    sub_10001AAA8(v200, (uint64_t)qword_100845580);
    v201 = v269;
    v153 = v259;
    ((void (*)(char *, char *, uint64_t))v269[2])(v261, v258, v259);
    v202 = v257;
    v203 = v257;
    v204 = v51;
    v205 = v203;
    v206 = v204;
    v207 = Logger.logObject.getter(v206);
    v208 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v207, v208))
    {
      v209 = swift_slowAlloc(32, -1);
      v210 = (_QWORD *)swift_slowAlloc(16, -1);
      v266 = (id)swift_slowAlloc(32, -1);
      v272 = v266;
      *(_DWORD *)v209 = 138543874;
      v263 = v207;
      ObjectType = (uint64_t)v205;
      v211 = v205;
      v265 = v211;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v275);
      *v210 = v202;

      *(_WORD *)(v209 + 12) = 2082;
      v212 = sub_10031EA80();
      v213 = v261;
      v214 = dispatch thunk of CustomStringConvertible.description.getter(v153, v212);
      ObjectType = sub_10001A820(v214, v215, (uint64_t *)&v272);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v275);
      v216 = swift_bridgeObjectRelease();
      v217 = v269[1];
      ((void (*)(char *, uint64_t, __n128))v217)(v213, v153, v216);
      *(_WORD *)(v209 + 22) = 2112;
      ObjectType = (uint64_t)v206;
      v218 = v206;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v275);
      v210[1] = v206;

      v219 = v263;
      _os_log_impl((void *)&_mh_execute_header, v263, v208, "Could not generate sha512Sum from file asset {remObjectID: %{public}@, accountUUID: %{public}s, record: %@}", (uint8_t *)v209, 0x20u);
      v220 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v210, 2, v220);
      swift_slowDealloc(v210, -1, -1);
      v221 = v266;
      swift_arrayDestroy(v266, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v221, -1, -1);
      swift_slowDealloc(v209, -1, -1);

      swift_unknownObjectRelease(v267);
      ((void (*)(os_log_t, uint64_t))v264[1])(v262, v256);
      ((void (*)(char *, uint64_t))v217)(v258, v153);
      return;
    }

    swift_unknownObjectRelease(v267);
    v147 = v201[1];
    ((void (*)(char *, uint64_t))v147)(v261, v153);

    ((void (*)(os_log_t, uint64_t))v264[1])(v262, v48);
    goto LABEL_51;
  }
  v65 = String._bridgeToObjectiveC()();
  objc_msgSend(v32, "setSha512Sum:", v65);

  v66 = objc_msgSend(v257, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v66);

  isa = UUID._bridgeToObjectiveC()().super.isa;
  v68 = v269[1];
  ((void (*)(char *, uint64_t))v68)(v26, v259);
  v69 = v258;
  v70 = UUID._bridgeToObjectiveC()().super.isa;
  v71 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v72 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  URL._bridgeToObjectiveC()(v73);
  v75 = v74;
  v272 = 0;
  v76 = v255;
  v77 = objc_msgSend(v255, "updateAttachmentFile:accountID:fileName:sha512Sum:fileURL:keepSource:error:", isa, v70, v71, v72, v74, 0, &v272);

  v78 = v272;
  if (v77)
  {

    swift_unknownObjectRelease(v267);
    ((void (*)(os_log_t, uint64_t))v264[1])(v262, v256);
    v79 = v69;
LABEL_67:
    ((void (*)(char *, uint64_t))v68)(v79, v259);
    return;
  }
  v222 = v78;
  v265 = v68;
  v223 = _convertNSErrorToError(_:)(v78);

  swift_willThrow(v224);
  if (qword_100837190 != -1)
    swift_once(&qword_100837190, sub_1003194E4);
  v225 = type metadata accessor for Logger(0);
  sub_10001AAA8(v225, (uint64_t)qword_100845580);
  v227 = v259;
  v226 = v260;
  v228 = v258;
  ((void (*)(char *, char *, uint64_t))v269[2])(v260, v258, v259);
  v229 = v257;
  v230 = v257;
  v231 = v266;
  swift_errorRetain(v223);
  v232 = v230;
  v233 = v231;
  v234 = swift_errorRetain(v223);
  v235 = Logger.logObject.getter(v234);
  v236 = static os_log_type_t.error.getter();
  v237 = v236;
  if (os_log_type_enabled(v235, v236))
  {
    v238 = swift_slowAlloc(42, -1);
    v239 = (_QWORD *)swift_slowAlloc(16, -1);
    v269 = (NSObject **)swift_slowAlloc(64, -1);
    v272 = v269;
    *(_DWORD *)v238 = 136315906;
    swift_getErrorValue(v223, v271, v270);
    LODWORD(v263) = v237;
    v240 = Error.rem_errorDescription.getter(v270[1], v270[2]);
    ObjectType = sub_10001A820(v240, v241, (uint64_t *)&v272);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v275);
    swift_bridgeObjectRelease();
    swift_errorRelease(v223);
    swift_errorRelease(v223);
    *(_WORD *)(v238 + 12) = 2114;
    ObjectType = (uint64_t)v232;
    v242 = v232;
    v266 = v242;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v275);
    *v239 = v229;

    *(_WORD *)(v238 + 22) = 2082;
    v243 = sub_10031EA80();
    v244 = v259;
    v245 = v260;
    v246 = dispatch thunk of CustomStringConvertible.description.getter(v259, v243);
    ObjectType = sub_10001A820(v246, v247, (uint64_t *)&v272);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v275);
    v248 = swift_bridgeObjectRelease();
    v249 = v244;
    v68 = v265;
    ((void (*)(char *, uint64_t, __n128))v265)(v245, v249, v248);
    *(_WORD *)(v238 + 32) = 2112;
    ObjectType = (uint64_t)v233;
    v250 = v233;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v275);
    v239[1] = v233;

    _os_log_impl((void *)&_mh_execute_header, v235, (os_log_type_t)v263, "Failed to update attachment file {error: %s, remObjectID: %{public}@, accountUUID: (%{public}s, record: %@}", (uint8_t *)v238, 0x2Au);
    v251 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v239, 2, v251);
    swift_slowDealloc(v239, -1, -1);
    v252 = v269;
    swift_arrayDestroy(v269, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v252, -1, -1);
    swift_slowDealloc(v238, -1, -1);

    swift_unknownObjectRelease(v267);
    swift_errorRelease(v223);

    ((void (*)(os_log_t, uint64_t))v264[1])(v262, v256);
    v79 = v258;
    goto LABEL_67;
  }

  swift_unknownObjectRelease(v267);
  v253 = v265;
  ((void (*)(char *, uint64_t))v265)(v226, v227);

  swift_errorRelease(v223);
  swift_errorRelease(v223);
  swift_errorRelease(v223);

  ((void (*)(os_log_t, uint64_t))v264[1])(v262, v256);
  ((void (*)(char *, uint64_t))v253)(v228, v227);
}

void sub_10031BAF8(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  char v19;
  uint64_t ObjectType;
  uint64_t v21;

  v3 = objc_opt_self(REMCDFileAttachment);
  v4 = swift_dynamicCastObjCClass(v1, v3);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = v1;
    sub_100319DD4(a1);
    v15 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
    CKRecordKeyValueSetting.subscript.getter(0x657A6953656C6946, 0xE800000000000000, v15, &type metadata for Int64, &protocol witness table for Int64);
    if (v19)
      v16 = 0;
    else
      v16 = v18;
    objc_msgSend(v5, "setFileSize:", v16);

  }
  else
  {
    if (qword_100837190 != -1)
      swift_once(&qword_100837190, sub_1003194E4);
    v7 = type metadata accessor for Logger(0);
    sub_10001AAA8(v7, (uint64_t)qword_100845580);
    v17 = v1;
    v8 = Logger.logObject.getter(v17);
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v18 = v11;
      *(_DWORD *)v10 = 136315138;
      ObjectType = swift_getObjectType();
      v12 = sub_10001A630(&qword_1008455B0);
      v13 = String.init<A>(describing:)(&ObjectType, v12);
      ObjectType = sub_10001A820(v13, v14, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v21);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Record.type is file but this is not a file attachment object {type: %s}", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

    }
    else
    {

    }
  }
}

void sub_10031BE10()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  id v17;
  uint64_t ObjectType;
  uint64_t v19;

  v1 = objc_opt_self(REMCDImageAttachment);
  v2 = swift_dynamicCastObjCClass(v0, v1);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = v0;
    v13 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
    CKRecordKeyValueSetting.subscript.getter(0x746867696548, 0xE600000000000000, v13, &type metadata for Int16, &protocol witness table for Int16);
    if (BYTE2(v19))
      v14 = 0;
    else
      v14 = v19;
    objc_msgSend(v3, "setHeight:", v14);
    v15 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
    CKRecordKeyValueSetting.subscript.getter(0x6874646957, 0xE500000000000000, v15, &type metadata for Int16, &protocol witness table for Int16);
    if (BYTE2(v19))
      v16 = 0;
    else
      v16 = v19;
    objc_msgSend(v3, "setWidth:", v16);

  }
  else
  {
    if (qword_100837190 != -1)
      swift_once(&qword_100837190, sub_1003194E4);
    v5 = type metadata accessor for Logger(0);
    sub_10001AAA8(v5, (uint64_t)qword_100845580);
    v17 = v0;
    v6 = Logger.logObject.getter(v17);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v19 = v9;
      *(_DWORD *)v8 = 136315138;
      ObjectType = swift_getObjectType();
      v10 = sub_10001A630(&qword_1008455B0);
      v11 = String.init<A>(describing:)(&ObjectType, v10);
      ObjectType = sub_10001A820(v11, v12, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v19);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Record.type is image but this is not an image attachment {type: %s}", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

    }
    else
    {

    }
  }
}

void sub_10031C1BC(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t i;
  id v12;
  NSString v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSURL *v18;
  void *v19;
  void *v20;
  unint64_t v21;
  Class isa;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  __int128 v33;
  uint64_t ObjectType;
  uint64_t v35;

  v2 = v1;
  v4 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_opt_self(REMCDURLAttachment);
  v8 = swift_dynamicCastObjCClass(v2, v7);
  if (v8)
  {
    v9 = (void *)v8;
    v10 = v2;
    for (i = 0; i != 3; ++i)
    {
      if (*((_BYTE *)&off_1007E05E8 + i + 32))
      {
        if (*((_BYTE *)&off_1007E05E8 + i + 32) != 1)
        {
          v12 = objc_msgSend(a1, "encryptedValues");
          v13 = String._bridgeToObjectiveC()();
          v14 = objc_msgSend(v12, "objectForKeyedSubscript:", v13);
          swift_unknownObjectRelease(v12);

          if (v14
            && (ObjectType = (uint64_t)v14,
                v15 = sub_10001A630(&qword_1008398E0),
                (swift_dynamicCast(&v33, &ObjectType, v15, &type metadata for String, 6) & 1) != 0))
          {
            URL.init(string:)(v33, *((_QWORD *)&v33 + 1));
            swift_bridgeObjectRelease();
            v16 = type metadata accessor for URL(0);
            v17 = *(_QWORD *)(v16 - 8);
            v19 = 0;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v6, 1, v16) != 1)
            {
              URL._bridgeToObjectiveC()(v18);
              v19 = v20;
              (*(void (**)(char *, uint64_t))(v17 + 8))(v6, v16);
            }
            objc_msgSend(v9, "setUrl:", v19);

          }
          else
          {
            objc_msgSend(v9, "setUrl:", 0);
          }
        }
      }
      else
      {
        sub_10043F934(a1, 0x617461646174654DLL, 0xE800000000000000, 0x617461646174654DLL, 0xED00007465737341, 1, &v33);
        v21 = *((_QWORD *)&v33 + 1);
        if (*((_QWORD *)&v33 + 1) >> 60 == 15)
        {
          isa = 0;
        }
        else
        {
          v23 = v33;
          isa = Data._bridgeToObjectiveC()().super.isa;
          sub_1000A71B4(v23, v21);
        }
        objc_msgSend(v9, "setMetadata:", isa);

      }
    }

  }
  else
  {
    if (qword_100837190 != -1)
      swift_once(&qword_100837190, sub_1003194E4);
    v24 = type metadata accessor for Logger(0);
    sub_10001AAA8(v24, (uint64_t)qword_100845580);
    v32 = v2;
    v25 = Logger.logObject.getter(v32);
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v33 = v28;
      *(_DWORD *)v27 = 136315138;
      ObjectType = swift_getObjectType();
      v29 = sub_10001A630(&qword_1008455B0);
      v30 = String.init<A>(describing:)(&ObjectType, v29);
      ObjectType = sub_10001A820(v30, v31, (uint64_t *)&v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v35);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Record.type is url but this is not a URL attachment {type: %s}", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

    }
    else
    {

    }
  }
}

Swift::Void __swiftcall REMCDAttachment.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  void *v2;
  void *v3;
  NSString v5;
  id v6;
  NSString v7;
  double v8;
  NSString v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  double v20;
  NSString v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  Swift::String v26;
  Swift::Int v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  objc_super v38;

  v3 = v2;
  v5 = String._bridgeToObjectiveC()();
  v38.receiver = v3;
  v38.super_class = (Class)REMCDAttachment;
  objc_msgSendSuper2(&v38, "mergeDataFromRecord:accountID:", from.super.isa, v5);

  v6 = -[objc_class recordID](from.super.isa, "recordID");
  v7 = objc_msgSend(v6, "recordName");

  if (!v7)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v7 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v8 = swift_bridgeObjectRelease().n128_u64[0];
  }
  v9 = objc_msgSend(v3, "ckIdentifierFromRecordName:", v7, v8);

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v9 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v10 = swift_bridgeObjectRelease().n128_u64[0];
  }
  objc_msgSend(v3, "setCkIdentifier:", v9, v10);

  v11 = CKRecord.subscript.getter(0x7265646E696D6552, 0xE800000000000000);
  if (v11)
  {
    v12 = v11;
    v13 = objc_opt_self(CKReference);
    v14 = (void *)swift_dynamicCastObjCClass(v12, v13);
    if (!v14)
      swift_unknownObjectRelease(v12);
  }
  else
  {
    v14 = 0;
  }
  v15 = sub_1000C8F4C(v14);
  if (v15)
  {
    v16 = v15;
    v17 = objc_opt_self(REMCDReminder);
    v18 = (void *)swift_dynamicCastObjCClass(v16, v17);
    if (!v18)

  }
  else
  {
    v18 = 0;
  }

  objc_msgSend(v3, "setReminder:", v18);
  v19 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  CKRecordKeyValueSetting.subscript.getter(4805717, 0xE300000000000000, v19, &type metadata for String, &protocol witness table for String);
  if (v36)
  {
    v21 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v20 = swift_bridgeObjectRelease().n128_u64[0];
  }
  else
  {
    v21 = 0;
  }
  objc_msgSend(v3, "setUti:", v21, v20);

  v22 = CKRecord.subscript.getter(1701869908, 0xE400000000000000);
  if (v22
    && (v37 = v22,
        v23 = sub_10001A630(&qword_1008398E0),
        (swift_dynamicCast(&v35, &v37, v23, &type metadata for String, 6) & 1) != 0))
  {
    v25 = v35;
    v24 = v36;
    swift_bridgeObjectRetain(v36);
    v26._countAndFlagsBits = v25;
    v26._object = v24;
    v27 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007E04D0, v26);
    swift_bridgeObjectRelease();
    switch(v27)
    {
      case 0:
        swift_bridgeObjectRelease();
        sub_10031BAF8(from.super.isa);
        return;
      case 2:
        swift_bridgeObjectRelease();
        sub_10031C1BC(from.super.isa);
        return;
      case 1:
        swift_bridgeObjectRelease();
        sub_10031BAF8(from.super.isa);
        sub_10031BE10();
        return;
    }
  }
  else
  {
    v25 = 0;
    v24 = 0;
  }
  if (qword_100837190 != -1)
    swift_once(&qword_100837190, sub_1003194E4);
  v28 = type metadata accessor for Logger(0);
  sub_10001AAA8(v28, (uint64_t)qword_100845580);
  swift_bridgeObjectRetain(v24);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = swift_slowAlloc(32, -1);
    v35 = v33;
    *(_DWORD *)v32 = 136315138;
    if (v24)
    {
      v34 = (unint64_t)v24;
    }
    else
    {
      v25 = 7104878;
      v34 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain(v24);
    v37 = sub_10001A820(v25, v34, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
    swift_bridgeObjectRelease_n(v24, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "mergeData: Unknown attachment type {type: %s}", v32, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v24, 2);
  }
}

void sub_10031CC60(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t ObjectType;
  id v35;
  void *v36;
  id v37;
  void *v38;
  NSObject *v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  Class isa;
  void (*v52)(char *, uint64_t);
  char *v53;
  Class v54;
  id v55;
  id v56;
  char *v57;
  id v58;
  NSURL *v59;
  void *v60;
  void *v61;
  id v62;
  id v63;
  uint64_t v64;
  id v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  _QWORD *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  id v74;
  id v75;
  NSObject *v76;
  id v77;
  NSObject *v78;
  os_log_type_t v79;
  uint64_t v80;
  _QWORD *v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  _QWORD *v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  id v99;
  __int128 v100;
  __int128 v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v7);
  v9 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v98 = (char *)&v92 - v15;
  v16 = objc_opt_self(REMCDFileAttachment);
  v17 = swift_dynamicCastObjCClass(v1, v16);
  if (v17)
  {
    v18 = (void *)v17;
    v96 = v3;
    v97 = v10;
    v94 = v6;
    v95 = v4;
    v99 = v1;
    v19 = objc_msgSend(a1, "encryptedValues");
    v20 = objc_msgSend(v18, "fileName");
    if (v20)
    {
      v21 = v20;
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v23 = a1;
      v25 = v24;

      *((_QWORD *)&v101 + 1) = &type metadata for String;
      v102 = &protocol witness table for String;
      *(_QWORD *)&v100 = v22;
      *((_QWORD *)&v100 + 1) = v25;
      a1 = v23;
    }
    else
    {
      v102 = 0;
      v100 = 0u;
      v101 = 0u;
    }
    ObjectType = swift_getObjectType();
    CKRecordKeyValueSetting.subscript.setter(&v100, 0x656D614E656C6946, 0xE800000000000000, ObjectType);
    swift_unknownObjectRelease(v19);
    v35 = objc_msgSend(v18, "fileName");
    if (!v35)
      goto LABEL_38;
    v36 = v35;
    v37 = objc_msgSend(v99, "storeControllerManagedObjectContext");
    if (!v37
      || (v38 = v37,
          v39 = objc_msgSend(v37, "storeController"),
          v38,
          !v39))
    {

      if (qword_100837190 != -1)
        swift_once(&qword_100837190, sub_1003194E4);
      v64 = type metadata accessor for Logger(0);
      sub_10001AAA8(v64, (uint64_t)qword_100845580);
      v65 = a1;
      v66 = Logger.logObject.getter(v65);
      v67 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v66, v67))
      {
        v68 = (uint8_t *)swift_slowAlloc(12, -1);
        v69 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v68 = 138412290;
        *(_QWORD *)&v100 = v65;
        v70 = v65;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, (char *)&v100 + 8);
        *v69 = v65;

        _os_log_impl((void *)&_mh_execute_header, v66, v67, "No store controller for updating file attachment {record: %@}", v68, 0xCu);
        v71 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v69, 1, v71);
        swift_slowDealloc(v69, -1, -1);
        swift_slowDealloc(v68, -1, -1);

      }
      else
      {

      }
      goto LABEL_38;
    }
    v40 = objc_msgSend(v99, "remObjectID");
    if (v40)
    {
      v41 = v40;
      v93 = a1;
      v42 = objc_msgSend(v99, "account");
      if (v42
        && (v43 = v42, v44 = objc_msgSend(v42, "remObjectID"),
                       v43,
                       v44))
      {
        v45 = objc_msgSend(v44, "uuid");

        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v45);
        v46 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
        v47 = v97;
        v46(v9, v13, v97);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v47);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v47) != 1)
        {
          v46(v98, v9, v47);
          v48 = v41;
          v49 = objc_msgSend(v41, "uuid");
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v49);

          v50 = v47;
          isa = UUID._bridgeToObjectiveC()().super.isa;
          v52 = *(void (**)(char *, uint64_t))(v11 + 8);
          v52(v13, v50);
          v53 = v98;
          v54 = UUID._bridgeToObjectiveC()().super.isa;
          v55 = objc_msgSend(v18, "sha512Sum");
          v56 = -[NSObject URLForAttachmentFile:accountID:fileName:sha512Sum:](v39, "URLForAttachmentFile:accountID:fileName:sha512Sum:", isa, v54, v36, v55);

          v57 = v94;
          static URL._unconditionallyBridgeFromObjectiveC(_:)(v56);

          v58 = objc_allocWithZone((Class)CKAsset);
          URL._bridgeToObjectiveC()(v59);
          v61 = v60;
          v62 = objc_msgSend(v58, "initWithFileURL:", v60);

          (*(void (**)(char *, uint64_t))(v95 + 8))(v57, v96);
          v52(v53, v50);
          v63 = v62;
          CKRecord.subscript.setter(v62, 0x65737341656C6946, 0xE900000000000074);

          goto LABEL_23;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v97);
      }

      sub_10000882C((uint64_t)v9, (uint64_t *)&unk_100839C80);
      if (qword_100837190 != -1)
        swift_once(&qword_100837190, sub_1003194E4);
      v72 = type metadata accessor for Logger(0);
      sub_10001AAA8(v72, (uint64_t)qword_100845580);
      v73 = v41;
      v74 = v41;
      v75 = v93;
      v76 = v74;
      v77 = v75;
      v78 = Logger.logObject.getter(v77);
      v79 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v78, v79))
      {
        v80 = swift_slowAlloc(22, -1);
        v81 = (_QWORD *)swift_slowAlloc(16, -1);
        *(_DWORD *)v80 = 138543618;
        v98 = (char *)v39;
        *(_QWORD *)&v100 = v76;
        v76 = v76;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, (char *)&v100 + 8);
        *v81 = v73;

        *(_WORD *)(v80 + 12) = 2112;
        *(_QWORD *)&v100 = v77;
        v82 = v77;
        v39 = v98;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, (char *)&v100 + 8);
        v81[1] = v77;

        _os_log_impl((void *)&_mh_execute_header, v78, v79, "File attachment has no account {remObjectID: %{public}@, record: %@}", (uint8_t *)v80, 0x16u);
        v83 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v81, 2, v83);
        swift_slowDealloc(v81, -1, -1);
        swift_slowDealloc(v80, -1, -1);
      }
      else
      {

        v78 = v76;
        v39 = v76;
      }

    }
    else
    {

      if (qword_100837190 != -1)
        swift_once(&qword_100837190, sub_1003194E4);
      v84 = type metadata accessor for Logger(0);
      sub_10001AAA8(v84, (uint64_t)qword_100845580);
      v85 = a1;
      v86 = Logger.logObject.getter(v85);
      v87 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v86, v87))
      {
        v88 = (uint8_t *)swift_slowAlloc(12, -1);
        v89 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v88 = 138412290;
        *(_QWORD *)&v100 = v85;
        v90 = v85;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, (char *)&v100 + 8);
        *v89 = v85;

        _os_log_impl((void *)&_mh_execute_header, v86, v87, "File attachment has no remObjectID {record: %@}", v88, 0xCu);
        v91 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v89, 1, v91);
        swift_slowDealloc(v89, -1, -1);
        swift_slowDealloc(v88, -1, -1);

LABEL_38:
        CKRecord.subscript.setter(0, 0x65737341656C6946, 0xE900000000000074);
        goto LABEL_23;
      }

    }
    goto LABEL_38;
  }
  if (qword_100837190 != -1)
    swift_once(&qword_100837190, sub_1003194E4);
  v26 = type metadata accessor for Logger(0);
  sub_10001AAA8(v26, (uint64_t)qword_100845580);
  v99 = v1;
  v27 = Logger.logObject.getter(v99);
  v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v100 = v30;
    *(_DWORD *)v29 = 136315138;
    v103 = swift_getObjectType();
    v31 = sub_10001A630(&qword_1008455B0);
    v32 = String.init<A>(describing:)(&v103, v31);
    v103 = sub_10001A820(v32, v33, (uint64_t *)&v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Not a file attachment {Type: %s}", v29, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);

    return;
  }

LABEL_23:
}

CKRecord_optional __swiftcall REMCDAttachment.newlyCreatedRecord()()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  Swift::Bool v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned __int16 v33;
  unsigned __int16 v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t ObjectType;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  objc_class *v55;
  char *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  void *v62;
  objc_super v63;
  CKRecord_optional result;

  v1 = v0;
  v58 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v4 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v5);
  v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v9 = __chkstk_darwin(v8).n128_u64[0];
  v11 = (char *)&v56 - v10;
  v63.receiver = v1;
  v63.super_class = (Class)REMCDAttachment;
  v13 = objc_msgSendSuper2(&v63, "newlyCreatedRecord", v9);
  if (v13)
  {
    v56 = v4;
    v14 = objc_msgSend(v1, "uti");
    if (v14)
    {
      v15 = v14;
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v18 = v17;

      *((_QWORD *)&v61 + 1) = &type metadata for String;
      v62 = &protocol witness table for String;
      *(_QWORD *)&v60 = v16;
      *((_QWORD *)&v60 + 1) = v18;
    }
    else
    {
      v62 = 0;
      v60 = 0u;
      v61 = 0u;
    }
    v59 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
    CKRecordKeyValueSetting.subscript.setter(&v60, 4805717, 0xE300000000000000, v59);
    v19 = objc_msgSend(v1, "reminder");
    if (v19)
    {
      v20 = v19;
      v21 = objc_msgSend(v19, "recordID");

    }
    else
    {
      v21 = 0;
    }
    v22 = objc_msgSend(v1, "cloudKitReferenceWithRecordIDAndValidateAction:", v21);

    CKRecord.subscript.setter(v22, 0x7265646E696D6552, 0xE800000000000000);
    v23 = objc_opt_self(REMCDFileAttachment);
    v24 = swift_dynamicCastObjCClass(v1, v23);
    if (v24)
    {
      v25 = (void *)v24;
      *((_QWORD *)&v61 + 1) = &type metadata for String;
      v62 = &protocol witness table for String;
      *(_QWORD *)&v60 = 1701603654;
      *((_QWORD *)&v60 + 1) = 0xE400000000000000;
      v26 = v1;
      v27 = v59;
      CKRecordKeyValueSetting.subscript.setter(&v60, 1701869908, 0xE400000000000000, v59);
      v28 = objc_msgSend(v25, "fileSize");
      *((_QWORD *)&v61 + 1) = &type metadata for Int64;
      v62 = &protocol witness table for Int64;
      *(_QWORD *)&v60 = v28;
      CKRecordKeyValueSetting.subscript.setter(&v60, 0x657A6953656C6946, 0xE800000000000000, v27);
      sub_10031CC60(v13);

    }
    v29 = objc_opt_self(REMCDImageAttachment);
    v30 = swift_dynamicCastObjCClass(v1, v29);
    if (v30)
    {
      v31 = (void *)v30;
      *((_QWORD *)&v61 + 1) = &type metadata for String;
      v62 = &protocol witness table for String;
      *(_QWORD *)&v60 = 0x6567616D49;
      *((_QWORD *)&v60 + 1) = 0xE500000000000000;
      v57 = v1;
      v32 = v59;
      CKRecordKeyValueSetting.subscript.setter(&v60, 1701869908, 0xE400000000000000, v59);
      v33 = (unsigned __int16)objc_msgSend(v31, "width");
      *((_QWORD *)&v61 + 1) = &type metadata for Int16;
      v62 = &protocol witness table for Int16;
      LOWORD(v60) = v33;
      CKRecordKeyValueSetting.subscript.setter(&v60, 0x6874646957, 0xE500000000000000, v32);
      v34 = (unsigned __int16)objc_msgSend(v31, "height");
      *((_QWORD *)&v61 + 1) = &type metadata for Int16;
      v62 = &protocol witness table for Int16;
      LOWORD(v60) = v34;
      CKRecordKeyValueSetting.subscript.setter(&v60, 0x746867696548, 0xE600000000000000, v32);

    }
    v35 = objc_opt_self(REMCDURLAttachment);
    v36 = swift_dynamicCastObjCClass(v1, v35);
    if (v36)
    {
      v37 = (void *)v36;
      *((_QWORD *)&v61 + 1) = &type metadata for String;
      v62 = &protocol witness table for String;
      *(_QWORD *)&v60 = 5001813;
      *((_QWORD *)&v60 + 1) = 0xE300000000000000;
      v38 = v1;
      CKRecordKeyValueSetting.subscript.setter(&v60, 1701869908, 0xE400000000000000, v59);
      v39 = objc_msgSend(v13, "encryptedValues");
      v40 = objc_msgSend(v37, "url");
      if (v40)
      {
        v41 = v40;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v40);

        v42 = 0;
      }
      else
      {
        v42 = 1;
      }
      v43 = v58;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v7, v42, 1, v58);
      sub_10031E6C0((uint64_t)v7, (uint64_t)v11);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v11, 1, v43))
      {
        sub_10000882C((uint64_t)v11, (uint64_t *)&unk_100839C70);
        v60 = 0u;
        v61 = 0u;
        v62 = 0;
      }
      else
      {
        v44 = v56;
        v45 = v58;
        (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v56, v11, v58);
        v46 = sub_10000882C((uint64_t)v11, (uint64_t *)&unk_100839C70);
        v47 = URL.absoluteString.getter(v46);
        v49 = v48;
        (*(void (**)(char *, uint64_t))(v2 + 8))(v44, v45);
        *((_QWORD *)&v61 + 1) = &type metadata for String;
        v62 = &protocol witness table for String;
        *(_QWORD *)&v60 = v47;
        *((_QWORD *)&v60 + 1) = v49;
      }
      ObjectType = swift_getObjectType();
      CKRecordKeyValueSetting.subscript.setter(&v60, 5001813, 0xE300000000000000, ObjectType);
      swift_unknownObjectRelease(v39);
      v51 = objc_msgSend(v37, "metadata");
      if (v51)
      {
        v52 = v51;
        static Data._unconditionallyBridgeFromObjectiveC(_:)(v51);
        v54 = v53;

        __asm { BR              X10 }
      }
      sub_10044E6BC(0, 0xF000000000000000, 0, v13, 0x617461646174654DLL, 0xE800000000000000, 0x617461646174654DLL, 0xED00007465737341, 1, 1uLL);
      sub_1000A71B4(0, 0xF000000000000000);

    }
  }
  v55 = (objc_class *)v13;
  result.value.super.isa = v55;
  result.is_nil = v12;
  return result;
}

Swift::Void __swiftcall REMCDAttachment.cleanUpAfterLocalObjectMerge()()
{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t ObjectType;
  uint64_t v11;

  if (qword_100837190 != -1)
    swift_once(&qword_100837190, sub_1003194E4);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_100845580);
  v9 = v0;
  v2 = Logger.logObject.getter(v9);
  v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v11 = v5;
    *(_DWORD *)v4 = 136315138;
    ObjectType = swift_getObjectType();
    v6 = sub_10001A630(&qword_1008455B0);
    v7 = String.init<A>(describing:)(&ObjectType, v6);
    ObjectType = sub_10001A820(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v11);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);

  }
  else
  {

  }
}

Swift::Void __swiftcall REMCDAttachment.fixBrokenReferences()()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  double v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  if (qword_100837190 != -1)
    swift_once(&qword_100837190, sub_1003194E4);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_100845580);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  v5 = &selRef_isConcealed;
  if (!os_log_type_enabled(v3, v4))
  {

    goto LABEL_14;
  }
  v6 = swift_slowAlloc(22, -1);
  v7 = swift_slowAlloc(64, -1);
  v50 = v7;
  *(_DWORD *)v6 = 136446466;
  v8 = objc_msgSend(v2, "remObjectID");
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(v8, "description");

    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

  }
  else
  {
    v13 = 0xE300000000000000;
    v11 = 7104878;
  }
  v49 = sub_10001A820(v11, v13, &v50);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

  *(_QWORD *)&v14 = swift_bridgeObjectRelease().n128_u64[0];
  *(_WORD *)(v6 + 12) = 2082;
  v15 = objc_msgSend(v2, "reminder", v14);
  if (!v15)
    goto LABEL_12;
  v16 = v15;
  v17 = objc_msgSend(v15, "remObjectID");
  if (!v17)
  {

LABEL_12:
    v24 = 0xE300000000000000;
    v5 = &selRef_isConcealed;
    v25 = 7104878;
    goto LABEL_13;
  }
  v18 = v17;
  v19 = objc_msgSend(v17, "description");

  v20 = v4;
  v21 = v7;
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v24 = v23;

  v25 = v22;
  v7 = v21;
  v4 = v20;
  v5 = &selRef_isConcealed;
LABEL_13:
  v49 = sub_10001A820(v25, v24, &v50);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fixing broken references for attachment {attachmentID: %{public}s, reminderID: %{public}s}", (uint8_t *)v6, 0x16u);
  swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v7, -1, -1);
  swift_slowDealloc(v6, -1, -1);

LABEL_14:
  v26 = objc_msgSend(v2, v5[453]);
  if (v26)
  {
    v27 = v26;
    if (objc_msgSend(v26, "markedForDeletion")
      && (objc_msgSend(v2, "markedForDeletion") & 1) == 0)
    {
      v28 = v2;
      v29 = v27;
      v30 = v28;
      v31 = v29;
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = swift_slowAlloc(22, -1);
        v48 = swift_slowAlloc(64, -1);
        v50 = v48;
        *(_DWORD *)v34 = 136446466;
        v35 = objc_msgSend(v30, "remObjectID");
        if (v35)
        {
          v36 = v35;
          v37 = objc_msgSend(v35, "description");

          v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
          v40 = v39;

        }
        else
        {
          v40 = 0xE300000000000000;
          v38 = 7104878;
        }
        v49 = sub_10001A820(v38, v40, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

        *(_QWORD *)&v41 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v34 + 12) = 2082;
        v42 = objc_msgSend(v31, "remObjectID", v41);
        if (v42)
        {
          v43 = v42;
          v44 = objc_msgSend(v42, "description");

          v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
          v47 = v46;

        }
        else
        {
          v47 = 0xE300000000000000;
          v45 = 7104878;
        }
        v49 = sub_10001A820(v45, v47, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Reminder is marked for deletion but attachment is not {attachmentID: %{public}s, reminderID: %{public}s}", (uint8_t *)v34, 0x16u);
        swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v48, -1, -1);
        swift_slowDealloc(v34, -1, -1);

      }
      else
      {

      }
      objc_msgSend(v30, "markForDeletion");
    }
    objc_msgSend(v27, "forcePushToCloud");

  }
}

uint64_t sub_10031E6C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_100839C70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _sSo15REMCDAttachmentC7reminddE26existingLocalObjectToMerge4withSo11REMCDObjectCSgSo11NSPredicateCSg_tF_0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t ObjectType;
  uint64_t v12;

  if (qword_100837190 != -1)
    swift_once(&qword_100837190, sub_1003194E4);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_100845580);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType();
    v7 = sub_10001A630(&qword_1008455B0);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    ObjectType = sub_10001A820(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t _sSo15REMCDAttachmentC7reminddE5merge15withLocalObjectSbSo11REMCDObjectC_tF_0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t ObjectType;
  uint64_t v12;

  if (qword_100837190 != -1)
    swift_once(&qword_100837190, sub_1003194E4);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_100845580);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType();
    v7 = sub_10001A630(&qword_1008455B0);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    ObjectType = sub_10001A820(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

unint64_t sub_10031EA80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083FA40;
  if (!qword_10083FA40)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_10083FA40);
  }
  return result;
}

id static REMCDTemplate.fetchRequest()()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  NSString v4;
  id v5;

  v0 = objc_msgSend((id)objc_opt_self(REMTemplate), "cdEntityName");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
  v2 = v1;

  v3 = objc_allocWithZone((Class)NSFetchRequest);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  v5 = objc_msgSend(v3, "initWithEntityName:", v4);

  return v5;
}

uint64_t sub_10031EB64(_QWORD *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v9 = sub_10001A630(&qword_1008455D0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_10000A388(a1, v13);
  v15 = sub_10031F2B0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RDSavedDueDateDeltaAlert.CodingKeys, &type metadata for RDSavedDueDateDeltaAlert.CodingKeys, v15, v13, v14);
  v20 = a2;
  HIBYTE(v19) = 0;
  v16 = type metadata accessor for REMDueDateDeltaInterval_Codable(0);
  v17 = sub_10031F2F4(&qword_1008455D8, (uint64_t)&protocol conformance descriptor for REMDueDateDeltaInterval_Codable);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, (char *)&v19 + 7, v9, v16, v17);
  if (!v4)
  {
    BYTE6(v19) = 1;
    KeyedEncodingContainer.encode(_:forKey:)((char *)&v19 + 6, v9, a4);
    BYTE5(v19) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(a3, (char *)&v19 + 5, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_10031ECE4()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000026;
  if (*v0 != 1)
    v1 = 0xD00000000000001ALL;
  if (*v0)
    return v1;
  else
    return 0x4465746144657564;
}

uint64_t sub_10031ED54@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10031EF68(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10031ED78(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10031F2B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10031EDA0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10031F2B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_10031EDC8(double *a1, uint64_t a2)
{
  double v2;
  double v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char v7;
  _BOOL8 result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_QWORD *)a1 + 2);
  v5 = *(double *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  sub_100017004();
  v7 = static NSObject.== infix(_:_:)(*(_QWORD *)&v2);
  result = 0;
  if ((v7 & 1) != 0 && v3 == v5)
    return v4 == v6;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for RDSavedDueDateDeltaAlert(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for RDSavedDueDateDeltaAlert(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for RDSavedDueDateDeltaAlert(uint64_t a1, _QWORD *a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = a2[2];
  return a1;
}

ValueMetadata *type metadata accessor for RDSavedDueDateDeltaAlert()
{
  return &type metadata for RDSavedDueDateDeltaAlert;
}

void sub_10031EF18(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v6 = sub_10031F0CC(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = v4;
    *(double *)(a2 + 8) = v6;
    *(_QWORD *)(a2 + 16) = v5;
  }
}

uint64_t sub_10031EF48(_QWORD *a1)
{
  uint64_t v1;

  return sub_10031EB64(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 16), *(double *)(v1 + 8));
}

uint64_t sub_10031EF68(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x4465746144657564 && a2 == 0xEC00000061746C65)
  {
    v5 = 0xEC00000061746C65;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4465746144657564, 0xEC00000061746C65, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000026 && a2 == 0x80000001006FFFE0)
  {
    v7 = 0x80000001006FFFE0;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000026, 0x80000001006FFFE0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x80000001006F47E0)
  {
    swift_bridgeObjectRelease(0x80000001006F47E0);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000001006F47E0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

double sub_10031F0CC(_QWORD *a1)
{
  uint64_t v1;
  double v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  id v19;

  v4 = sub_10001A630(&qword_1008455B8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10000A388(a1, v8);
  v10 = sub_10031F2B0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RDSavedDueDateDeltaAlert.CodingKeys, &type metadata for RDSavedDueDateDeltaAlert.CodingKeys, v10, v8, v9);
  if (v1)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  }
  else
  {
    v11 = type metadata accessor for REMDueDateDeltaInterval_Codable(0);
    v18 = 0;
    v12 = sub_10031F2F4(&qword_1008455C8, (uint64_t)&protocol conformance descriptor for REMDueDateDeltaInterval_Codable);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v19, v11, &v18, v4, v11, v12);
    v17 = 1;
    v14 = v19;
    v2 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v4);
    v16 = 2;
    KeyedDecodingContainer.decode(_:forKey:)(&v16, v4);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);

  }
  return v2;
}

unint64_t sub_10031F2B0()
{
  unint64_t result;

  result = qword_1008455C0;
  if (!qword_1008455C0)
  {
    result = swift_getWitnessTable(&unk_1006B4A28, &type metadata for RDSavedDueDateDeltaAlert.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008455C0);
  }
  return result;
}

uint64_t sub_10031F2F4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for REMDueDateDeltaInterval_Codable(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RDSavedDueDateDeltaAlert.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10031F380 + 4 * byte_1006B48C5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10031F3B4 + 4 * byte_1006B48C0[v4]))();
}

uint64_t sub_10031F3B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10031F3BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10031F3C4);
  return result;
}

uint64_t sub_10031F3D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10031F3D8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10031F3DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10031F3E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDSavedDueDateDeltaAlert.CodingKeys()
{
  return &type metadata for RDSavedDueDateDeltaAlert.CodingKeys;
}

unint64_t sub_10031F404()
{
  unint64_t result;

  result = qword_1008455E0;
  if (!qword_1008455E0)
  {
    result = swift_getWitnessTable(&unk_1006B4A00, &type metadata for RDSavedDueDateDeltaAlert.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008455E0);
  }
  return result;
}

unint64_t sub_10031F44C()
{
  unint64_t result;

  result = qword_1008455E8;
  if (!qword_1008455E8)
  {
    result = swift_getWitnessTable(&unk_1006B4970, &type metadata for RDSavedDueDateDeltaAlert.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008455E8);
  }
  return result;
}

unint64_t sub_10031F494()
{
  unint64_t result;

  result = qword_1008455F0;
  if (!qword_1008455F0)
  {
    result = swift_getWitnessTable(&unk_1006B4998, &type metadata for RDSavedDueDateDeltaAlert.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008455F0);
  }
  return result;
}

uint64_t sub_10031F4DC(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_100845630, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersInCalendarDataView.Invocation, (uint64_t)&protocol conformance descriptor for REMRemindersInCalendarDataView.Invocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10031F518()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008455F8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008455F8);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_10031F5A8(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a3;
  v28 = a4;
  v29 = a2;
  v24 = type metadata accessor for REMRemindersInCalendarDataView.RemindersInCalendarResult.RemindersResult.IncrementalResult(0);
  v6 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = _s10PredicatesOMa(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for REMRemindersInCalendarDataView.RemindersInCalendarResult.RemindersResult(0, v10);
  v26 = *(_QWORD *)(v13 - 8);
  v27 = v13;
  __chkstk_darwin(v13);
  v25 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v24 - v16);
  v18 = sub_10031F7B8(a1);
  if (!v4)
  {
    if ((v18 & 1) != 0)
    {
      sub_10031FB2C((uint64_t)a1, (uint64_t)v8);
      (*(void (**)(uint64_t *, char *, uint64_t))(v6 + 32))(v17, v8, v24);
      v20 = (unsigned int *)&enum case for REMRemindersInCalendarDataView.RemindersInCalendarResult.RemindersResult.incremental(_:);
    }
    else
    {
      swift_storeEnumTagMultiPayload(v12, v9, 66);
      v19 = sub_10031FE1C((uint64_t)a1);
      sub_1000CACA8((uint64_t)v12);
      *v17 = v19;
      v20 = (unsigned int *)&enum case for REMRemindersInCalendarDataView.RemindersInCalendarResult.RemindersResult.reload(_:);
    }
    v22 = v26;
    v21 = v27;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v26 + 104))(v17, *v20, v27);
    v23 = v25;
    (*(void (**)(char *, uint64_t *, uint64_t))(v22 + 16))(v25, v17, v21);
    REMRemindersInCalendarDataView.Invocation.Result.init(remindersResult:predicateVersion:)(v23, 1);
    (*(void (**)(uint64_t *, uint64_t))(v22 + 8))(v17, v21);
  }
}

uint64_t sub_10031F7B8(void *a1)
{
  void *v1;
  id v3;
  void *v4;
  uint64_t Predicate;
  char v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = objc_msgSend(v1, "fetchResultTokenToDiffAgainst");
  if (!v3)
  {
    if (qword_100837198 != -1)
      swift_once(&qword_100837198, sub_10031F518);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10001AAA8(v9, (uint64_t)qword_1008455F8);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "RemindersInCalendarInvocation: missing fetchResultTokenToDiffAgainst, will use reload mode", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    return 0;
  }
  v4 = v3;
  Predicate = REMRemindersInCalendarDataView.Invocation.Parameters.lastFetchPredicateVersion.getter();
  if ((v6 & 1) != 0)
  {
    if (qword_100837198 != -1)
      swift_once(&qword_100837198, sub_10031F518);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_10001AAA8(v14, (uint64_t)qword_1008455F8);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter(v16);
    if (!os_log_type_enabled(v16, v17))
      goto LABEL_25;
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    v19 = "RemindersInCalendarInvocation: missing lastFetchPredicateVersion, will use reload mode";
    goto LABEL_23;
  }
  v7 = Predicate;
  if (Predicate == 1)
  {
    if (objc_msgSend(a1, "canAccessAllPersistentStoresReferencedByFetchResultToken:", v4))
    {

      return 1;
    }
    if (qword_100837198 != -1)
      swift_once(&qword_100837198, sub_10031F518);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_10001AAA8(v25, (uint64_t)qword_1008455F8);
    v16 = Logger.logObject.getter(v26);
    v17 = static os_log_type_t.default.getter(v16);
    if (!os_log_type_enabled(v16, v17))
      goto LABEL_25;
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    v19 = "RemindersInCalendarInvocation: one or more persistent stores are no longer accessible since last fetch, will use reload mode";
LABEL_23:
    _os_log_impl((void *)&_mh_execute_header, v16, v17, v19, v18, 2u);
    v24 = (uint64_t)v18;
    goto LABEL_24;
  }
  if (qword_100837198 != -1)
    swift_once(&qword_100837198, sub_10031F518);
  v20 = type metadata accessor for Logger(0);
  v21 = sub_10001AAA8(v20, (uint64_t)qword_1008455F8);
  v16 = Logger.logObject.getter(v21);
  v22 = static os_log_type_t.default.getter(v16);
  if (!os_log_type_enabled(v16, v22))
    goto LABEL_25;
  v23 = swift_slowAlloc(22, -1);
  *(_DWORD *)v23 = 134349312;
  v27 = v7;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
  *(_WORD *)(v23 + 12) = 2050;
  v27 = 1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
  _os_log_impl((void *)&_mh_execute_header, v16, v22, "RemindersInCalendarInvocation: lastFetchPredicateVersion(%{public}ld) does not equal currentPredicateVersion(%{public}ld), will use reload mode", (uint8_t *)v23, 0x16u);
  v24 = v23;
LABEL_24:
  swift_slowDealloc(v24, -1, -1);
LABEL_25:

  return 0;
}

void sub_10031FB2C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = a2;
  v5 = _s10PredicatesOMa(0);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)&v10 = __chkstk_darwin(v8).n128_u64[0];
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(v2, "fetchResultTokenToDiffAgainst", v10);
  sub_100493C24(v13, a1, (uint64_t)v12);

  if (!v3)
  {
    v30 = v5;
    v31 = v9;
    v32 = v8;
    v15 = (void *)REMRemindersListDataView.Diff.updatedReminderObjectIDs.getter(v14);
    v16 = REMRemindersListDataView.Diff.insertedReminderObjectIDs.getter(v15);
    sub_10059DA70(v16, v15);
    v18 = v17;
    swift_bridgeObjectRetain(v17);
    v20 = (uint64_t)sub_1001E8984(v19);
    swift_bridgeObjectRelease();
    if (v20 < 0 || (v20 & 0x4000000000000000) != 0)
    {
      v27 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      swift_bridgeObjectRetain(v20);
      v22 = _bridgeCocoaArray<A>(_:)(v28, v27);
      swift_release(v20);
    }
    else
    {
      swift_bridgeObjectRetain(v20);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v21);
      sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v22 = v20;
    }
    v23 = v31;
    swift_release(v20);
    *v7 = v22;
    swift_storeEnumTagMultiPayload(v7, v30, 45);
    v24 = sub_10031FE1C(a1);
    v25 = sub_1004D4260(v24, v18);
    v26 = REMRemindersListDataView.Diff.updatedListObjectIDs.getter();
    REMRemindersInCalendarDataView.RemindersInCalendarResult.RemindersResult.IncrementalResult.init(matchedReminderIDs:removedReminderIDs:updatedListIDs:)(v24, v25, v26);
    sub_1000CACA8((uint64_t)v7);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v32);
  }
}

void sub_10031FD58(void **a1@<X0>, uint64_t *a2@<X8>)
{
  void *v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;

  v3 = *a1;
  v10 = 0;
  v4 = objc_msgSend(v3, "remObjectIDWithError:", &v10);
  v5 = v10;
  if (v4)
  {
    v6 = v4;
    v7 = REMObjectID.codable.getter(v10);

    *a2 = v7;
  }
  else
  {
    v8 = v10;
    _convertNSErrorToError(_:)(v5);

    swift_willThrow(v9);
  }
}

uint64_t sub_10031FE1C(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t KeyPath;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE v17[40];
  uint64_t v18;

  sub_10000D2C0();
  v4 = v3;
  v5 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v5, v17);
  *(_OWORD *)(inited + 16) = xmmword_1006A7330;
  KeyPath = swift_getKeyPath(&unk_1006B4AB0);
  *(_QWORD *)(inited + 32) = KeyPath;
  v18 = inited;
  specialized Array._endMutation()(KeyPath);
  v8 = (void *)sub_100358798(v18, 0, 0, (uint64_t)v4);
  swift_bridgeObjectRelease();

  v9 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v10 = a1;
  v11 = NSManagedObjectContext.fetch<A>(_:)(v8, v9);
  if (!v1)
  {
    v18 = v11;
    v12 = sub_10001A630(&qword_10083D590);
    v13 = type metadata accessor for REMObjectID_Codable(0);
    v14 = sub_10031FFA8();
    v15 = sub_10009FC50((unint64_t *)&unk_100840EC0, (uint64_t (*)(uint64_t))&type metadata accessor for REMObjectID_Codable, (uint64_t)&protocol conformance descriptor for NSObject);
    v10 = Sequence.mapToSet<A>(_:)(sub_10031FD58, 0, v12, v13, v14, v15);
    swift_bridgeObjectRelease();
  }

  return v10;
}

unint64_t sub_10031FFA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083FB70;
  if (!qword_10083FB70)
  {
    v1 = sub_1000A5A94(&qword_10083D590);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10083FB70);
  }
  return result;
}

void RDLaunchAnalyticsPostNotifyd(_:)(void *a1)
{
  const char *string;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  NSObject *oslog;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];

  string = xpc_dictionary_get_string(a1, _xpc_event_key_name);
  if (string)
  {
    v2 = String.init(cString:)(string);
    v4 = v3;
    if (qword_1008371A8 != -1)
      swift_once(&qword_1008371A8, sub_1003201E8);
    v10 = xmmword_1006AF2A0;
    v12 = 0;
    v13[0] = 0;
    v11 = 0;
    *(_QWORD *)((char *)v13 + 6) = 0;
    sub_10001B228((uint64_t)&v10, v2, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_1008371A0 != -1)
      swift_once(&qword_1008371A0, sub_100320158);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10001AAA8(v5, (uint64_t)qword_100845638);
    oslog = Logger.logObject.getter(v6);
    v7 = static os_log_type_t.default.getter(oslog);
    if (os_log_type_enabled(oslog, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Failed to get name from xpc event. Not posting analytics for notifyd notification", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

  }
}

uint64_t sub_100320158()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100845638);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100845638);
  if (qword_1008375E8 != -1)
    swift_once(&qword_1008375E8, sub_1004A1758);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871F98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1003201E8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;

  v0 = type metadata accessor for UnfairLock.Options(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for RDLaunchAnalytics();
  v4 = swift_allocObject(v3, 25, 7);
  v11 = _swiftEmptyArrayStorage;
  v5 = sub_10015EB64();
  v6 = sub_10001A630((uint64_t *)&unk_10083DBB0);
  v7 = sub_10032031C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v11, v6, v7, v0, v5);
  v8 = type metadata accessor for UnfairLock(0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  result = UnfairLock.init(options:)(v2);
  *(_QWORD *)(v4 + 16) = result;
  *(_BYTE *)(v4 + 24) = 0;
  qword_100871D98 = v4;
  return result;
}

uint64_t sub_1003202D8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 25, 7);
}

uint64_t type metadata accessor for RDLaunchAnalytics()
{
  return objc_opt_self(_TtC7remindd17RDLaunchAnalytics);
}

unint64_t sub_10032031C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100838130;
  if (!qword_100838130)
  {
    v1 = sub_1000A5A94((uint64_t *)&unk_10083DBB0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100838130);
  }
  return result;
}

uint64_t sub_100320368(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_100845718, (uint64_t (*)(uint64_t))&type metadata accessor for REMSiriSearchDataView.RemindersByCriteriaInvocation, (uint64_t)&protocol conformance descriptor for REMSiriSearchDataView.RemindersByCriteriaInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *sub_1003203A4(unint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;

  v6 = a1;
  v24 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_18;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      v8 = 0;
      v9 = v6 & 0xC000000000000001;
      v21 = v6;
      v22 = v6 & 0xFFFFFFFFFFFFFF8;
      v20 = v7;
      while (v9)
      {
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
LABEL_9:
        v11 = v10;
        v12 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_17;
        v23 = v10;
        v13 = sub_10032112C(&v23, a2, (uint64_t)a3);
        if (v3)
        {
          swift_bridgeObjectRelease();

          swift_release(v24);
          return a3;
        }
        if ((v13 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
          v14 = v9;
          v15 = v24[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v15);
          v16 = v15;
          v9 = v14;
          v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v11);
          specialized ContiguousArray._endMutation()(v17);
          v7 = v20;
          v6 = v21;
        }
        else
        {

        }
        ++v8;
        if (v12 == v7)
        {
          a3 = v24;
          goto LABEL_23;
        }
      }
      if (v8 < *(_QWORD *)(v22 + 16))
        break;
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      if (v6 < 0)
        v18 = v6;
      else
        v18 = v6 & 0xFFFFFFFFFFFFFF8;
      v7 = _CocoaArrayWrapper.endIndex.getter(v18);
      if (!v7)
        goto LABEL_22;
    }
    v10 = *(id *)(v6 + 8 * v8 + 32);
    goto LABEL_9;
  }
LABEL_22:
  a3 = _swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease();
  return a3;
}

void sub_100320548(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t, uint64_t, __n128);
  uint64_t v29;
  __n128 v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  id v44;
  id v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  id v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(char *, uint64_t, uint64_t);
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t i;
  id v84;
  void *v85;
  id v86;
  void *v87;
  id v88;
  id v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t j;
  id v98;
  void *v99;
  id v100;
  void *v101;
  id v102;
  id v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  void (*v109)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  __n128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  unint64_t *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;

  v143 = a7;
  v140 = a6;
  v138 = a5;
  v142 = a4;
  v134 = a2;
  v135 = a3;
  v8 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v8);
  v136 = (uint64_t)&v133 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v137 = (char *)&v133 - v11;
  __chkstk_darwin(v12);
  v14 = (char *)&v133 - v13;
  __chkstk_darwin(v15);
  v139 = (char *)&v133 - v16;
  __chkstk_darwin(v17);
  v19 = (char *)&v133 - v18;
  __chkstk_darwin(v20);
  v22 = (char *)&v133 - v21;
  v23 = type metadata accessor for REMSearchCriterion(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v133 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v24 + 16);
  v28(v27, a1, v23, v25);
  v29 = (*(uint64_t (**)(char *, uint64_t))(v24 + 88))(v27, v23);
  if ((_DWORD)v29 == enum case for REMSearchCriterion.hasLocation(_:))
  {
    (*(void (**)(char *, uint64_t))(v24 + 96))(v27, v23);
    if (*v27 != 1)
    {
      *(_BYTE *)v140 = 1;
LABEL_67:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v24 + 56))(v143, 1, 1, v23, v30);
      return;
    }
    v145 = (unint64_t)_swiftEmptyArrayStorage;
    KeyPath = swift_getKeyPath(&unk_1006B4B68);
    v32 = sub_100341F24(KeyPath);
    v33 = swift_release(KeyPath);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v33);
    v35 = *(_QWORD *)(v145 + 16);
    v34 = *(_QWORD *)(v145 + 24);
    v36 = v144;
    if (v35 >= v34 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1);
    v37 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v35, v32);
    specialized Array._endMutation()(v37);
    v38 = sub_1000153F4(0);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v38);
    v40 = *(_QWORD *)(v145 + 16);
    v39 = *(_QWORD *)(v145 + 24);
    if (v40 >= v39 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1);
    v41 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v40, v38);
    specialized Array._endMutation()(v41);
    v42 = (char *)sub_10000D2BC(v145);
    v43 = sub_1000151B0(0, &qword_100840C10, off_1007D6670);
    v44 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    v45 = objc_msgSend((id)swift_getObjCClassFromMetadata(v43), "entity");
    objc_msgSend(v44, "setEntity:", v45);

    v46 = v42;
    objc_msgSend(v44, "setAffectedStores:", 0);
    objc_msgSend(v44, "setPredicate:", v42);
    v47 = NSManagedObjectContext.fetch<A>(_:)(v44, v43);
    if (v36)
    {

      return;
    }
    v81 = v47;

    v145 = (unint64_t)_swiftEmptyArrayStorage;
    v139 = v46;
    if ((unint64_t)v81 >> 62)
    {
      if (v81 < 0)
        v121 = v81;
      else
        v121 = v81 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v81);
      v82 = _CocoaArrayWrapper.endIndex.getter(v121);
      if (v82)
        goto LABEL_23;
    }
    else
    {
      v82 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v81);
      if (v82)
      {
LABEL_23:
        v140 = v24;
        v141 = v23;
        v144 = 0;
        if (v82 >= 1)
        {
          for (i = 0; i != v82; ++i)
          {
            if ((v81 & 0xC000000000000001) != 0)
              v84 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v81);
            else
              v84 = *(id *)(v81 + 8 * i + 32);
            v85 = v84;
            v86 = objc_msgSend(v84, "alarm");
            if (v86
              && (v87 = v86,
                  v88 = objc_msgSend(v86, "reminder"),
                  v87,
                  v88))
            {
              v89 = objc_msgSend(v88, "remObjectID");

              if (v89)
              {
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v90);
                v92 = *(_QWORD *)((v145 & 0xFFFFFFFFFFFFFF8) + 0x10);
                v91 = *(_QWORD *)((v145 & 0xFFFFFFFFFFFFFF8) + 0x18);
                if (v92 >= v91 >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v91 > 1);
                v93 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v92, v89);
                specialized Array._endMutation()(v93);
              }
            }
            else
            {

            }
          }
          swift_bridgeObjectRelease();
          v119 = (_QWORD *)v145;
          v24 = v140;
          v23 = v141;
          goto LABEL_63;
        }
        __break(1u);
        goto LABEL_78;
      }
    }
    swift_bridgeObjectRelease();
    v119 = _swiftEmptyArrayStorage;
LABEL_63:
    swift_bridgeObjectRelease();
    v122 = v138;
    v123 = *v138;
    if (*v138)
      v124 = (_QWORD *)*v138;
    else
      v124 = _swiftEmptyArrayStorage;
    v145 = (unint64_t)v124;
    swift_bridgeObjectRetain(v123);
    swift_bridgeObjectRetain(v124);
    swift_bridgeObjectRetain(v119);
    sub_1001E0B58(v125);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    *v122 = v145;
    v30 = swift_bridgeObjectRelease();
    goto LABEL_67;
  }
  v48 = v29;
  v140 = v24;
  v141 = v23;
  if ((_DWORD)v29 == enum case for REMSearchCriterion.location(_:))
  {
    v49 = v140;
    (*(void (**)(char *, uint64_t))(v140 + 96))(v27, v141);
    v51 = *(_QWORD *)v27;
    v50 = *((_QWORD *)v27 + 1);
    v145 = (unint64_t)_swiftEmptyArrayStorage;
    v52 = swift_getKeyPath(&unk_1006B4B68);
    swift_bridgeObjectRetain(v50);
    v53 = sub_100341F48(v52, v51, v50, 6);
    v54 = swift_release(v52);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v54);
    v56 = *(_QWORD *)(v145 + 16);
    v55 = *(_QWORD *)(v145 + 24);
    if (v56 >= v55 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1);
    v57 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v56, v53);
    specialized Array._endMutation()(v57);
    v58 = sub_1000153F4(0);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v58);
    v60 = *(_QWORD *)(v145 + 16);
    v59 = *(_QWORD *)(v145 + 24);
    v61 = v144;
    if (v60 >= v59 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1);
    v62 = &v27[*(int *)(sub_10001A630((uint64_t *)&unk_100845750) + 48)];
    v63 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v60, v58);
    specialized Array._endMutation()(v63);
    v64 = (char *)sub_10000D2BC(v145);
    swift_bridgeObjectRelease();
    v65 = sub_1000151B0(0, &qword_100840C10, off_1007D6670);
    v66 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    v67 = objc_msgSend((id)swift_getObjCClassFromMetadata(v65), "entity");
    objc_msgSend(v66, "setEntity:", v67);

    objc_msgSend(v66, "setAffectedStores:", 0);
    objc_msgSend(v66, "setPredicate:", v64);
    v68 = NSManagedObjectContext.fetch<A>(_:)(v66, v65);
    if (v61)
    {

      v69 = type metadata accessor for REMStringMatchingStyle(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v69 - 8) + 8))(v62, v69);
      return;
    }
    v94 = v68;
    v142 = (uint64_t)v62;

    v145 = (unint64_t)_swiftEmptyArrayStorage;
    v139 = v64;
    if ((unint64_t)v94 >> 62)
    {
      if (v94 < 0)
        v126 = v94;
      else
        v126 = v94 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v94);
      v95 = _CocoaArrayWrapper.endIndex.getter(v126);
      v96 = v141;
      if (v95)
        goto LABEL_38;
    }
    else
    {
      v95 = *(_QWORD *)((v94 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v94);
      v96 = v141;
      if (v95)
      {
LABEL_38:
        v144 = 0;
        if (v95 < 1)
        {
LABEL_78:
          __break(1u);
          return;
        }
        for (j = 0; j != v95; ++j)
        {
          if ((v94 & 0xC000000000000001) != 0)
            v98 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v94);
          else
            v98 = *(id *)(v94 + 8 * j + 32);
          v99 = v98;
          v100 = objc_msgSend(v98, "alarm");
          if (v100
            && (v101 = v100,
                v102 = objc_msgSend(v100, "reminder"),
                v101,
                v102))
          {
            v103 = objc_msgSend(v102, "remObjectID");

            if (v103)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v104);
              v106 = *(_QWORD *)((v145 & 0xFFFFFFFFFFFFFF8) + 0x10);
              v105 = *(_QWORD *)((v145 & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v106 >= v105 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v105 > 1);
              v107 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v106, v103);
              specialized Array._endMutation()(v107);
            }
          }
          else
          {

          }
        }
        swift_bridgeObjectRelease();
        v120 = (_QWORD *)v145;
        v49 = v140;
        v96 = v141;
        goto LABEL_73;
      }
    }
    swift_bridgeObjectRelease();
    v120 = _swiftEmptyArrayStorage;
LABEL_73:
    swift_bridgeObjectRelease();
    v127 = v138;
    v128 = *v138;
    if (*v138)
      v129 = (_QWORD *)*v138;
    else
      v129 = _swiftEmptyArrayStorage;
    v145 = (unint64_t)v129;
    swift_bridgeObjectRetain(v128);
    swift_bridgeObjectRetain(v129);
    swift_bridgeObjectRetain(v120);
    sub_1001E0B58(v130);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    *v127 = v145;
    v131 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v49 + 56))(v143, 1, 1, v96, v131);
    v132 = type metadata accessor for REMStringMatchingStyle(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v132 - 8) + 8))(v142, v132);
    return;
  }
  if ((_DWORD)v29 == enum case for REMSearchCriterion.dueDate(_:))
  {
    (*(void (**)(char *, uint64_t))(v140 + 96))(v27, v141);
    v142 = sub_10001A630((uint64_t *)&unk_10084C100);
    v70 = (uint64_t)&v27[*(int *)(v142 + 48)];
    sub_1000CDA74((uint64_t)v27, (uint64_t)v22);
    sub_1000CDA74(v70, (uint64_t)v19);
    sub_10032289C((uint64_t)v22, v134);
    sub_10032289C((uint64_t)v19, v135);
    sub_1000CDA2C((uint64_t)v22, (uint64_t)v14);
    v71 = type metadata accessor for Date(0);
    v72 = *(_QWORD *)(v71 - 8);
    v73 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v72 + 48);
    v74 = v73(v14, 1, v71);
    if ((_DWORD)v74 == 1)
    {
      sub_10000882C((uint64_t)v14, (uint64_t *)&unk_1008380D0);
      v75 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56);
      v76 = v139;
      v77 = 1;
    }
    else
    {
      v108 = v139;
      Date.addingTimeInterval(_:)(v74, -172800.0);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v14, v71);
      v75 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56);
      v76 = v108;
      v77 = 0;
    }
    v109 = v75;
    v75((uint64_t)v76, v77, 1, v71);
    v110 = v136;
    sub_1000CDA2C((uint64_t)v19, v136);
    v111 = v73((char *)v110, 1, v71);
    if ((_DWORD)v111 == 1)
    {
      sub_10000882C((uint64_t)v19, (uint64_t *)&unk_1008380D0);
      sub_10000882C((uint64_t)v22, (uint64_t *)&unk_1008380D0);
      sub_10000882C(v110, (uint64_t *)&unk_1008380D0);
      v112 = 1;
      v113 = (uint64_t)v137;
    }
    else
    {
      v114 = v110;
      v113 = (uint64_t)v137;
      Date.addingTimeInterval(_:)(v111, 172800.0);
      sub_10000882C((uint64_t)v19, (uint64_t *)&unk_1008380D0);
      sub_10000882C((uint64_t)v22, (uint64_t *)&unk_1008380D0);
      (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v114, v71);
      v112 = 0;
    }
    v109(v113, v112, 1, v71);
    v115 = v143;
    v116 = v143 + *(int *)(v142 + 48);
    sub_1000CDA74((uint64_t)v139, v143);
    sub_1000CDA74(v113, v116);
    v118 = v140;
    v117 = v141;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v140 + 104))(v115, v48, v141);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v118 + 56))(v115, 0, 1, v117);
  }
  else
  {
    v78 = v143;
    v79 = v141;
    ((void (*)(uint64_t, uint64_t, uint64_t))v28)(v143, a1, v141);
    v80 = v140;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v140 + 56))(v78, 0, 1, v79);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v27, v79);
  }
}

uint64_t sub_10032112C(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  char *v41;
  void *v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  void *v64;
  Class isa;
  Class v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(uint64_t, uint64_t, uint64_t);
  char v72;
  void (*v73)(char *, uint64_t, uint64_t);
  char *v74;
  uint64_t v75;
  char *v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  unsigned int v79;
  char *v80;
  void (*v81)(char *, uint64_t, uint64_t);
  uint64_t v82;
  char *v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t);
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;

  v102 = a3;
  v96 = a2;
  v97 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v87 = (char *)&v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v103 = (char *)&v87 - v7;
  __chkstk_darwin(v8);
  v89 = (char *)&v87 - v9;
  __chkstk_darwin(v10);
  v106 = (char *)&v87 - v11;
  v12 = sub_10001A630((uint64_t *)&unk_100841610);
  __chkstk_darwin(v12);
  v14 = (char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DateComponents(0);
  v104 = *(_QWORD *)(v15 - 8);
  v105 = v15;
  __chkstk_darwin(v15);
  v93 = (char *)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v92 = (char *)&v87 - v18;
  v19 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v19);
  v90 = (uint64_t)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v101 = (uint64_t)&v87 - v22;
  __chkstk_darwin(v23);
  v95 = (char *)&v87 - v24;
  __chkstk_darwin(v25);
  v94 = (char *)&v87 - v26;
  __chkstk_darwin(v27);
  v91 = (char *)&v87 - v28;
  __chkstk_darwin(v29);
  v99 = (char *)&v87 - v30;
  v31 = sub_10001A630(&qword_1008401F8);
  __chkstk_darwin(v31);
  v33 = (char *)&v87 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for TimeZone(0);
  v35 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v37 = (char *)&v87 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v39 = __chkstk_darwin(v38).n128_u64[0];
  v41 = (char *)&v87 - v40;
  v42 = *a1;
  v43 = objc_msgSend(v42, "timeZone", v39);
  v107 = v41;
  v100 = v34;
  v98 = v35;
  if (v43)
  {
    v44 = v43;
    v88 = v4;
    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    v47 = v46;

    TimeZone.init(identifier:)(v45, v47);
    v48 = swift_bridgeObjectRelease();
    v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v35 + 48))(v33, 1, v34, v48);
    if ((_DWORD)v49 == 1)
    {
      static TimeZone.current.getter(v49);
      sub_10000882C((uint64_t)v33, &qword_1008401F8);
      v50 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    }
    else
    {
      v50 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
      v50(v37, v33, v34);
    }
    v53 = (uint64_t)v95;
    v50(v107, v37, v34);
    v4 = v88;
    v51 = v97;
    v52 = v106;
  }
  else
  {
    static TimeZone.current.getter(0);
    v51 = v97;
    v52 = v106;
    v53 = (uint64_t)v95;
  }
  v54 = (uint64_t)v94;
  v55 = objc_msgSend(v42, "dueDateComponents");
  if (!v55)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v104 + 56))(v14, 1, 1, v105);
    goto LABEL_12;
  }
  v56 = v55;
  v57 = v93;
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v55);

  v58 = v104;
  v59 = *(void (**)(char *, char *, uint64_t))(v104 + 32);
  v60 = v57;
  v61 = v105;
  v59(v14, v60, v105);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v14, 0, 1, v61);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v14, 1, v61) == 1)
  {
LABEL_12:
    sub_10000882C((uint64_t)v14, (uint64_t *)&unk_100841610);
    v68 = (uint64_t)v99;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v99, 1, 1, v51);
    goto LABEL_15;
  }
  v62 = v4;
  v63 = v92;
  v59(v92, v14, v61);
  v64 = (void *)objc_opt_self(NSDateComponents);
  isa = DateComponents._bridgeToObjectiveC()().super.isa;
  v66 = TimeZone._bridgeToObjectiveC()().super.isa;
  v67 = objc_msgSend(v64, "rem_dateWithDateComponents:timeZone:", isa, v66);

  v68 = (uint64_t)v99;
  if (v67)
  {
    v69 = (uint64_t)v91;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v67);

    v70 = 0;
    v4 = v62;
  }
  else
  {
    v70 = 1;
    v4 = v62;
    v69 = (uint64_t)v91;
  }
  (*(void (**)(char *, uint64_t))(v104 + 8))(v63, v105);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v69, v70, 1, v51);
  sub_1000CDA74(v69, v68);
  v52 = v106;
LABEL_15:
  sub_1000CDA2C(v96, v54);
  v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v71(v54, 1, v51) == 1)
  {
    sub_10000882C(v54, (uint64_t *)&unk_1008380D0);
    v72 = 1;
  }
  else
  {
    v73 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
    v73(v52, v54, v51);
    sub_1000CDA2C(v68, v53);
    if (v71(v53, 1, v51) == 1)
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v52, v51);
      sub_10000882C(v53, (uint64_t *)&unk_1008380D0);
      v72 = 0;
    }
    else
    {
      v74 = v89;
      v73(v89, v53, v51);
      v75 = sub_10009FC50((unint64_t *)&qword_100842190, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v72 = dispatch thunk of static Comparable.< infix(_:_:)(v74, v52, v51, v75) ^ 1;
      v76 = v52;
      v77 = *(void (**)(char *, uint64_t))(v4 + 8);
      v77(v74, v51);
      v77(v76, v51);
    }
  }
  v78 = v101;
  sub_1000CDA2C(v102, v101);
  v79 = v71(v78, 1, v51);
  v80 = v103;
  if (v79 == 1)
  {
    sub_10000882C(v68, (uint64_t *)&unk_1008380D0);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v107, v100);
    sub_10000882C(v78, (uint64_t *)&unk_1008380D0);
  }
  else
  {
    v81 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
    v81(v103, v78, v51);
    if ((v72 & 1) != 0)
    {
      v82 = v90;
      sub_1000CDA2C(v68, v90);
      if (v71(v82, 1, v51) != 1)
      {
        v83 = v87;
        v81(v87, v82, v51);
        v84 = sub_10009FC50((unint64_t *)&qword_100842190, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v72 = dispatch thunk of static Comparable.< infix(_:_:)(v80, v83, v51, v84) ^ 1;
        v85 = *(void (**)(char *, uint64_t))(v4 + 8);
        v85(v83, v51);
        v85(v80, v51);
        sub_10000882C(v68, (uint64_t *)&unk_1008380D0);
        (*(void (**)(char *, uint64_t))(v98 + 8))(v107, v100);
        return v72 & 1;
      }
      (*(void (**)(char *, uint64_t))(v4 + 8))(v80, v51);
      sub_10000882C(v68, (uint64_t *)&unk_1008380D0);
      (*(void (**)(char *, uint64_t))(v98 + 8))(v107, v100);
      sub_10000882C(v82, (uint64_t *)&unk_1008380D0);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v80, v51);
      sub_10000882C(v68, (uint64_t *)&unk_1008380D0);
      (*(void (**)(char *, uint64_t))(v98 + 8))(v107, v100);
    }
    v72 = 0;
  }
  return v72 & 1;
}

uint64_t sub_100321960(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_100845740, (uint64_t (*)(uint64_t))&type metadata accessor for REMSiriSearchDataView.ListsByCriteriaInvocation, (uint64_t)&protocol conformance descriptor for REMSiriSearchDataView.ListsByCriteriaInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_10032199C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __n128 v19;
  uint64_t v20;

  v7 = _s10PredicatesOMa_3(0);
  v8 = __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = REMSiriSearchDataView.ListsByCriteriaInvocation.Parameters.criteria.getter(v8);
  v12 = sub_1003229C0(v11, a2);
  v13 = swift_bridgeObjectRelease();
  if (!v4)
  {
    v14 = REMSiriSearchDataView.ListsByCriteriaInvocation.Parameters.criteria.getter(v13);
    *v10 = v14;
    swift_storeEnumTagMultiPayload(v10, v7, 2);
    swift_bridgeObjectRetain(v14);
    v15 = sub_10058C44C((uint64_t)v10, a2, 0);
    sub_10001C744((uint64_t)v10, _s10PredicatesOMa_3);
    swift_bridgeObjectRelease();
    sub_1004A87E4(v12, a4);
    v17 = v16;
    swift_bridgeObjectRelease();
    v18 = sub_10058CE80(v15, a4);
    v19 = swift_bridgeObjectRelease();
    REMSiriSearchDataView.ListsResult_Codable.init(lists:smartLists:)(v17, v18, v19);
  }
}

char *sub_100321B24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _QWORD v31[2];
  unint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;

  v39 = a3;
  v40 = a4;
  v38 = a2;
  v10 = sub_10001A630(&qword_100845748);
  __chkstk_darwin(v10);
  v12 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for REMSearchCriterion(0);
  __chkstk_darwin(v13);
  v37 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v35 = (char *)v31 - v18;
  v19 = *(_QWORD *)(a1 + 16);
  if (!v19)
    return (char *)_swiftEmptyArrayStorage;
  v41 = v16;
  v20 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v31[1] = a1;
  v32 = v20;
  v21 = a1 + v20;
  v36 = v17;
  v22 = *(_QWORD *)(v17 + 72);
  swift_bridgeObjectRetain(a1);
  v42 = (char *)_swiftEmptyArrayStorage;
  v33 = a5;
  v34 = a6;
  do
  {
    sub_100320548(v21, v38, v39, v40, a5, a6, (uint64_t)v12);
    if (v6)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v42;
    }
    v23 = v36;
    v24 = v41;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v12, 1, v41) == 1)
    {
      sub_10000882C((uint64_t)v12, &qword_100845748);
    }
    else
    {
      v25 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
      v26 = v35;
      v25(v35, v12, v24);
      v25(v37, v26, v24);
      if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
        v42 = (char *)sub_1002C84DC(0, *((_QWORD *)v42 + 2) + 1, 1, (unint64_t)v42);
      v28 = *((_QWORD *)v42 + 2);
      v27 = *((_QWORD *)v42 + 3);
      if (v28 >= v27 >> 1)
        v42 = (char *)sub_1002C84DC(v27 > 1, v28 + 1, 1, (unint64_t)v42);
      v29 = v42;
      *((_QWORD *)v42 + 2) = v28 + 1;
      v25(&v29[v32 + v28 * v22], v37, v41);
      a5 = v33;
      a6 = v34;
    }
    v21 += v22;
    --v19;
  }
  while (v19);
  swift_bridgeObjectRelease();
  return v42;
}

void *sub_100321D9C(uint64_t a1, _QWORD *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  id v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  id v58;
  id v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  id v67;
  void *v68;
  id v69;
  void *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  id v76;
  void *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  id v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  unint64_t v107;

  v104 = a1;
  v99 = a3;
  v97 = a2;
  v98 = (id)_s10PredicatesOMa(0);
  __chkstk_darwin(v98);
  v102 = (uint64_t *)((char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for REMSearchCriterion(0);
  v100 = *(_QWORD **)(v6 - 8);
  v101 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v9);
  v11 = (char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v91 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)&v91 - v16;
  __chkstk_darwin(v18);
  v20 = (char *)&v91 - v19;
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
  v23(v20, 1, 1, v21);
  v23(v17, 1, 1, v21);
  v24 = v17;
  v25 = (uint64_t)v20;
  v107 = 0;
  v106 = 0;
  v26 = a4;
  v28 = v103;
  v27 = v104;
  v104 = v25;
  v29 = sub_100321B24(v27, v25, (uint64_t)v24, (uint64_t)v26, &v107, (uint64_t)&v106);

  if (v28)
    goto LABEL_12;
  v103 = v8;
  v92 = v21;
  v93 = v22;
  v30 = v98;
  v31 = v99;
  v94 = v14;
  v95 = (unint64_t)v11;
  v32 = v29;
  v33 = v107;
  v96 = v24;
  if (v107)
  {
    *v103 = v107;
    ((void (*)(void))v100[13])();
    swift_bridgeObjectRetain(v33);
    v34 = v31;
    if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
      v32 = (_QWORD *)sub_1002C84DC(0, *((_QWORD *)v29 + 2) + 1, 1, (unint64_t)v29);
    v35 = v97;
    v37 = v32[2];
    v36 = v32[3];
    v38 = v100;
    if (v37 >= v36 >> 1)
    {
      v84 = sub_1002C84DC(v36 > 1, v37 + 1, 1, (unint64_t)v32);
      v38 = v100;
      v32 = (_QWORD *)v84;
    }
    v32[2] = v37 + 1;
    ((void (*)(unint64_t))v38[4])((unint64_t)v32+ ((*((unsigned __int8 *)v38 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v38 + 80))+ v38[9] * v37);
  }
  else
  {
    v34 = v99;
    v35 = v97;
  }
  v39 = v102;
  *v102 = v32;
  swift_storeEnumTagMultiPayload(v39, v30, 32);
  v40 = qword_100837260;
  swift_bridgeObjectRetain(v32);
  v41 = 0;
  v42 = v95;
  if (v40 != -1)
LABEL_106:
    swift_once(&qword_100837260, sub_10033CFDC);
  v43 = sub_100340EC0((uint64_t)v39, (objc_class *)qword_100871E48, (uint64_t)v26, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)v35, v34, 0, (uint64_t)_swiftEmptyArrayStorage, 0);
  v103 = (_QWORD *)v41;
  v44 = v93;
  v45 = (uint64_t)v94;
  if (!v41)
  {
    v41 = v43;
    v35 = v32;
    sub_1000CDA2C((uint64_t)v96, (uint64_t)v94);
    v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
    v49 = v92;
    v50 = v48(v45, 1, v92);
    v51 = v45;
    v52 = v50;
    sub_10000882C(v51, (uint64_t *)&unk_1008380D0);
    if (v52 != 1
      || (sub_1000CDA2C(v104, v42), v53 = v48(v42, 1, v49), sub_10000882C(v42, (uint64_t *)&unk_1008380D0), v53 != 1))
    {
      v54 = v103;
      v41 = (uint64_t)sub_1003203A4(v41, v104, v96);
      v103 = v54;
    }
    v105 = v41;
    v32 = v35;
    if (v106 != 1)
    {
LABEL_134:
      sub_10001C744((uint64_t)v39, _s10PredicatesOMa);
      swift_bridgeObjectRelease();
      v46 = (void *)v105;
      swift_bridgeObjectRelease();
      sub_10000882C((uint64_t)v96, (uint64_t *)&unk_1008380D0);
      sub_10000882C(v104, (uint64_t *)&unk_1008380D0);
      return v46;
    }
    if ((unint64_t)v41 >> 62)
      goto LABEL_114;
    v55 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v41);
    if (v55)
      goto LABEL_20;
LABEL_118:
    swift_bridgeObjectRelease();
LABEL_119:
    if (!((unint64_t)v41 >> 62))
    {
      v42 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_132;
    }
    if (v41 < 0)
      v90 = v41;
    else
      v90 = v41 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v41);
    v42 = _CocoaArrayWrapper.endIndex.getter(v90);
    swift_bridgeObjectRelease();
    v41 = v105;
    if (v105 >> 62)
      goto LABEL_121;
LABEL_132:
    while (2)
    {
      v87 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v87 >= v42)
        goto LABEL_133;
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      if (v41 < 0)
        v88 = v41;
      else
        v88 = v41 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v41);
      v89 = _CocoaArrayWrapper.endIndex.getter(v88);
      swift_bridgeObjectRelease();
      if (v34 == v89)
      {
LABEL_131:
        v39 = v102;
        if (!((unint64_t)v41 >> 62))
          continue;
LABEL_121:
        if (v41 < 0)
          v86 = v41;
        else
          v86 = v41 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v41);
        v87 = _CocoaArrayWrapper.endIndex.getter(v86);
        swift_bridgeObjectRelease();
        if (v87 < v42)
          goto LABEL_125;
LABEL_133:
        sub_1001CED34(v42, v87);
        goto LABEL_134;
      }
      break;
    }
    while (1)
    {
LABEL_46:
      if ((v41 & 0xC000000000000001) != 0)
      {
        v67 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v41);
      }
      else
      {
        if ((v34 & 0x8000000000000000) != 0)
          goto LABEL_102;
        if (v34 >= *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_103;
        v67 = *(id *)(v41 + 8 * v34 + 32);
      }
      v68 = v67;
      v69 = objc_msgSend(v67, "alarms");
      if (v69)
      {
        v70 = v69;
        v41 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v69, v99);

        if ((unint64_t)v41 >> 62)
        {
          if (v41 < 0)
            v83 = v41;
          else
            v83 = v41 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v41);
          v71 = _CocoaArrayWrapper.endIndex.getter(v83);
          v101 = v42;
          if (v71)
          {
LABEL_53:
            v35 = (_QWORD *)(v41 & 0xC000000000000001);
            v42 = 4;
            while (1)
            {
              v39 = (id)(v42 - 4);
              if (v35)
                v72 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v42 - 4, v41);
              else
                v72 = *(id *)(v41 + 8 * v42);
              v32 = v72;
              v26 = (id)(v42 - 3);
              if (__OFADD__(v39, 1))
              {
                __break(1u);
                goto LABEL_101;
              }
              v39 = objc_msgSend(v72, "trigger");
              v73 = objc_opt_self(REMAlarmLocationTrigger);
              if (swift_dynamicCastObjCClass(v39, v73))
                break;

              ++v42;
              if (v26 == (id)v71)
                goto LABEL_60;
            }

            swift_bridgeObjectRelease_n(v41, 2);
            v32 = v100;
            v42 = v101;
            v65 = __OFADD__(v34++, 1);
            if (v65)
              goto LABEL_104;
            goto LABEL_82;
          }
        }
        else
        {
          v71 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain(v41);
          v101 = v42;
          if (v71)
            goto LABEL_53;
        }
LABEL_60:
        swift_bridgeObjectRelease_n(v41, 2);

        v32 = v100;
        v42 = v101;
        if (v101 != v34)
        {
          v41 = v105;
LABEL_63:
          if ((v41 & 0xC000000000000001) != 0)
          {
            v75 = specialized _ArrayBuffer._getElementSlowPath(_:)(v42, v41);
            v76 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v41);
          }
          else
          {
            if (v42 < 0)
            {
              __break(1u);
LABEL_108:
              __break(1u);
LABEL_109:
              __break(1u);
LABEL_110:
              __break(1u);
LABEL_111:
              __break(1u);
LABEL_112:
              __break(1u);
LABEL_113:
              __break(1u);
LABEL_114:
              if (v41 < 0)
                v85 = v41;
              else
                v85 = v41 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v41);
              v55 = _CocoaArrayWrapper.endIndex.getter(v85);
              if (!v55)
                goto LABEL_118;
LABEL_20:
              v56 = 0;
              v57 = v41 & 0xC000000000000001;
              v94 = (char *)(v41 + 32);
              v95 = v41 & 0xC000000000000001;
              v100 = v32;
              v97 = (_QWORD *)v55;
              while (1)
              {
                v35 = v32;
                if (v57)
                  v58 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v56, v41);
                else
                  v58 = *(id *)&v94[8 * v56];
                v34 = (unint64_t)v58;
                v59 = objc_msgSend(v58, "alarms");
                if (v59)
                {
                  v60 = v59;
                  v99 = sub_1000151B0(0, &qword_10083C2F0, REMAlarm_ptr);
                  v61 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v60, v99);

                  if ((unint64_t)v61 >> 62)
                  {
                    if (v61 < 0)
                      v66 = v61;
                    else
                      v66 = v61 & 0xFFFFFFFFFFFFFF8;
                    swift_bridgeObjectRetain_n(v61, 2);
                    v32 = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v66);
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    v32 = *(_QWORD **)((v61 & 0xFFFFFFFFFFFFF8) + 0x10);
                    swift_bridgeObjectRetain(v61);
                  }
                  v98 = (id)v34;
                  v101 = v56;
                  if (v32)
                  {
                    v34 = v61 & 0xC000000000000001;
                    v62 = 4;
                    while (1)
                    {
                      v35 = (_QWORD *)(v62 - 4);
                      if (v34)
                        v63 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v62 - 4, v61);
                      else
                        v63 = *(id *)(v61 + 8 * v62);
                      v39 = v63;
                      v42 = v62 - 3;
                      if (__OFADD__(v35, 1))
                      {
LABEL_101:
                        __break(1u);
LABEL_102:
                        __break(1u);
LABEL_103:
                        __break(1u);
LABEL_104:
                        __break(1u);
LABEL_105:
                        __break(1u);
                        goto LABEL_106;
                      }
                      v35 = objc_msgSend(v63, "trigger");
                      v64 = objc_opt_self(REMAlarmLocationTrigger);
                      if (swift_dynamicCastObjCClass(v35, v64))
                        break;

                      ++v62;
                      if ((_QWORD *)v42 == v32)
                        goto LABEL_35;
                    }
                    swift_bridgeObjectRelease();

                    swift_bridgeObjectRelease_n(v61, 2);
                    v42 = v101;
                    v34 = v101 + 1;
                    if (__OFADD__(v101, 1))
                      goto LABEL_126;
                    v41 = v105;
                    v32 = v100;
                    if (!(v105 >> 62))
                    {
                      if (v34 != *(_QWORD *)((v105 & 0xFFFFFFFFFFFFF8) + 0x10))
                        goto LABEL_46;
                      goto LABEL_131;
                    }
                    goto LABEL_127;
                  }
LABEL_35:
                  swift_bridgeObjectRelease_n(v61, 2);
                  v56 = v101;
                  v39 = v102;
                  v32 = v100;
                  v55 = (uint64_t)v97;
                  v34 = (unint64_t)v98;
                  v57 = v95;
                }

                v65 = __OFADD__(v56++, 1);
                if (v65)
                  goto LABEL_113;
                if (v56 == v55)
                {
                  swift_bridgeObjectRelease();
                  v41 = v105;
                  goto LABEL_119;
                }
              }
            }
            v39 = v32;
            v32 = *(_QWORD **)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (v42 >= (unint64_t)v32)
              goto LABEL_108;
            v74 = *(id *)(v41 + 32 + 8 * v42);
            if ((v34 & 0x8000000000000000) != 0)
              goto LABEL_109;
            if (v34 >= (unint64_t)v32)
              goto LABEL_110;
            v75 = (uint64_t)v74;
            v76 = *(id *)(v41 + 32 + 8 * v34);
            v32 = v39;
          }
          if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v41)
            || v41 < 0
            || (v41 & 0x4000000000000000) != 0)
          {
            v41 = sub_1001CEBEC(v41);
            v105 = v41;
          }
          v77 = *(void **)((v41 & 0xFFFFFFFFFFFFFF8) + 8 * v42 + 0x20);
          *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 8 * v42 + 0x20) = v76;

          specialized Array._endMutation()(v78);
          v41 = v105;
          if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v105)
            || v41 < 0
            || (v41 & 0x4000000000000000) != 0)
          {
            v41 = sub_1001CEBEC(v41);
            v105 = v41;
          }
          if ((v34 & 0x8000000000000000) != 0)
            goto LABEL_111;
          if (v34 >= *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_112;
          v79 = *(void **)((v41 & 0xFFFFFFFFFFFFFF8) + 8 * v34 + 0x20);
          *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 8 * v34 + 0x20) = v75;

          v41 = (uint64_t)&v105;
          specialized Array._endMutation()(v80);
        }
      }
      else
      {

        if (v42 != v34)
          goto LABEL_63;
      }
      v65 = __OFADD__(v42++, 1);
      if (v65)
        goto LABEL_105;
      v65 = __OFADD__(v34++, 1);
      if (v65)
        goto LABEL_104;
LABEL_82:
      v41 = v105;
      if (v105 >> 62)
      {
        if ((v105 & 0x8000000000000000) != 0)
          v81 = v105;
        else
          v81 = v105 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v105);
        v82 = _CocoaArrayWrapper.endIndex.getter(v81);
        swift_bridgeObjectRelease();
        if (v34 == v82)
          goto LABEL_131;
      }
      else if (v34 == *(_QWORD *)((v105 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_131;
      }
    }
  }
  sub_10001C744((uint64_t)v39, _s10PredicatesOMa);
  swift_bridgeObjectRelease();
  v24 = v96;
LABEL_12:
  swift_bridgeObjectRelease();
  v46 = &unk_1008380D0;
  sub_10000882C((uint64_t)v24, (uint64_t *)&unk_1008380D0);
  sub_10000882C(v104, (uint64_t *)&unk_1008380D0);
  return v46;
}

uint64_t sub_10032289C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void *sub_1003228E4(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;

  v5 = REMSiriSearchDataView.RemindersByCriteriaInvocation.Parameters.criteria.getter();
  v6 = REMSiriSearchDataView.RemindersByCriteriaInvocation.Parameters.fetchOffset.getter();
  if ((v7 & 1) != 0)
    v8 = 0;
  else
    v8 = (_QWORD *)v6;
  v9 = REMSiriSearchDataView.RemindersByCriteriaInvocation.Parameters.fetchLimit.getter();
  if ((v10 & 1) != 0)
    v11 = 0;
  else
    v11 = v9;
  v12 = sub_100321D9C(v5, v8, v11, a1);
  swift_bridgeObjectRelease();
  if (!v2)
  {
    v13 = objc_msgSend((id)objc_opt_self(REMReminderFetchOptions), "defaultFetchOptions");
    sub_100340768((uint64_t)v12, v13, (uint64_t)a1, a2);
    a2 = v14;
    swift_bridgeObjectRelease();

  }
  return a2;
}

uint64_t sub_1003229C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  Class isa;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v20[2];

  v5 = _s10PredicatesOMa_1(0);
  __chkstk_darwin(v5);
  v7 = (_QWORD *)((char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v7 = a1;
  swift_storeEnumTagMultiPayload(v7, v8, 16);
  swift_bridgeObjectRetain(a1);
  sub_10000A3AC();
  v10 = v9;
  v11 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v12 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v13 = objc_msgSend((id)swift_getObjCClassFromMetadata(v11), "entity");
  objc_msgSend(v12, "setEntity:", v13);

  objc_msgSend(v12, "setAffectedStores:", 0);
  objc_msgSend(v12, "setPredicate:", v10);

  if (qword_1008376D0 != -1)
    swift_once(&qword_1008376D0, sub_1004A7024);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v12, "setSortDescriptors:", isa);

  v15 = a2;
  v16 = NSManagedObjectContext.fetch<A>(_:)(v12, v11);
  if (!v2)
  {
    v20[1] = v16;
    v17 = sub_10001A630(&qword_10083FF50);
    v18 = sub_1000EC4D8();
    v15 = Sequence.elements<A>(ofType:)(v11, v17, v11, v18);
    swift_bridgeObjectRelease();
  }

  sub_10001C744((uint64_t)v7, _s10PredicatesOMa_1);
  return v15;
}

uint64_t sub_100322BF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100845760);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100845760);
  if (qword_100837608 != -1)
    swift_once(&qword_100837608, sub_1004A17C8);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_100322C88()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(REMLog), "cloudkit");
  qword_100845778 = (uint64_t)result;
  return result;
}

_QWORD *sub_100322CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  char *v9;
  uint64_t v10;

  v4[3] = 0;
  swift_unknownObjectWeakInit(v4 + 2, 0);
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_cancellables) = &_swiftEmptySetSingleton;
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_osTransactionForHandlingEvent) = 0;
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_osTransactionForDebouncingEvent) = 0;
  *((_BYTE *)v4 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_isHandlingEvent) = 0;
  *((_BYTE *)v4 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_isDebouncingEvent) = 0;
  v4[4] = a1;
  v4[5] = a2;
  v9 = (char *)v4 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_debounceInterval;
  v10 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, a3, v10);
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_notificationCenter) = a4;
  return v4;
}

uint64_t sub_100322D8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48[3];

  v1 = sub_10001A630(&qword_10083A970);
  __chkstk_darwin(v1);
  v3 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v40 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_10001A630((uint64_t *)&unk_10084A290);
  v43 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630(&qword_1008458B0);
  v10 = *(_QWORD *)(v9 - 8);
  v44 = v9;
  v45 = v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A630(&qword_1008458B8);
  v14 = *(_QWORD *)(v13 - 8);
  v46 = v13;
  v47 = v14;
  __chkstk_darwin(v13);
  v42 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = v0;
  NSNotificationCenter.publisher(for:object:)(CFSTR("com.apple.remindd.SharedToMeList.pinnedStateDidBecomeStale"), 0);
  v48[0] = *(id *)(v0 + 40);
  v16 = v48[0];
  v17 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v39(v3, 1, 1, v17);
  v18 = sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v38 = v18;
  v19 = sub_10009FC50((unint64_t *)&qword_10084A2A0, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
  v20 = sub_1000A5E70();
  v21 = v16;
  Publisher.receive<A>(on:options:)(v48, v3, v4, v18, v19, v20);
  sub_10000882C((uint64_t)v3, &qword_10083A970);

  (*(void (**)(char *, uint64_t))(v40 + 8))(v6, v4);
  v22 = swift_allocObject(&unk_1007EEA08, 24, 7);
  v23 = v37;
  swift_weakInit(v22 + 16, v37);
  v24 = sub_1000A5F84((unint64_t *)&qword_10083AA10, (uint64_t *)&unk_10084A290, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v25 = v41;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)(0, 0, sub_1003255D0, v22, 0, 0, 0, 0, 0, 0, v41, v24);
  swift_release(v22);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v8, v25);
  v26 = v23 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_debounceInterval;
  v48[0] = v21;
  v39(v3, 1, 1, v17);
  v27 = sub_1000A5F84(&qword_1008458C0, &qword_1008458B0, (uint64_t)&protocol conformance descriptor for Publishers.HandleEvents<A>);
  v28 = v21;
  v29 = v42;
  v30 = v44;
  Publisher.debounce<A>(for:scheduler:options:)(v26, v48, v3, v44, v38, v27, v20);
  sub_10000882C((uint64_t)v3, &qword_10083A970);

  (*(void (**)(char *, uint64_t))(v45 + 8))(v12, v30);
  v31 = swift_allocObject(&unk_1007EEA08, 24, 7);
  swift_weakInit(v31 + 16, v23);
  v32 = sub_1000A5F84((unint64_t *)&unk_1008458C8, &qword_1008458B8, (uint64_t)&protocol conformance descriptor for Publishers.Debounce<A, B>);
  v33 = v46;
  v34 = Publisher<>.sink(receiveValue:)(sub_1003255D8, v31, v46, v32);
  swift_release(v31);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v29, v33);
  v35 = v23 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_cancellables;
  swift_beginAccess(v35, v48, 33, 0);
  AnyCancellable.store(in:)(v35);
  swift_endAccess(v48);
  return swift_release(v34);
}

uint64_t sub_100323204(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  _BYTE v6[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    v5 = *(_BYTE *)(result + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_isDebouncingEvent);
    *(_BYTE *)(v4 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_isDebouncingEvent) = 1;
    sub_1003238FC(v5);
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_10032326C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _BYTE v9[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    sub_100323300();
    swift_release(v4);
  }
  swift_beginAccess(v2, &v8, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v6 = result;
    v7 = *(_BYTE *)(result + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_isDebouncingEvent);
    *(_BYTE *)(v6 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_isDebouncingEvent) = 0;
    sub_1003238FC(v7);
    return swift_release(v6);
  }
  return result;
}

void sub_100323300()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  id v13;
  _QWORD aBlock[5];
  _QWORD *v15;

  v1 = *v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (_QWORD *)((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = (void *)v0[5];
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    if ((*((_BYTE *)v0 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_isHandlingEvent) & 1) == 0)
    {
      *((_BYTE *)v0 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_isHandlingEvent) = 1;
      sub_1003234B0(0);
      v8 = objc_msgSend((id)v0[4], "newBackgroundContextWithAuthor:", RDStalePinnedListsEventHandlerAuthor);
      v9 = swift_allocObject(&unk_1007EEA08, 24, 7);
      swift_weakInit(v9 + 16, v0);
      v10 = (_QWORD *)swift_allocObject(&unk_1007EEA30, 40, 7);
      v10[2] = v9;
      v10[3] = v8;
      v10[4] = v1;
      aBlock[4] = sub_10032560C;
      v15 = v10;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000094C8;
      aBlock[3] = &unk_1007EEA48;
      v11 = _Block_copy(aBlock);
      v12 = v15;
      v13 = v8;
      swift_release(v12);
      objc_msgSend(v13, "performBlock:", v11);
      _Block_release(v11);

    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1003234B0(char a1)
{
  uint64_t *v1;
  uint64_t *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t MetatypeMetadata;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = v1;
  v3 = a1 & 1;
  v4 = *v2;
  v5 = type metadata accessor for OSSignpostID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*((unsigned __int8 *)v2 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_isHandlingEvent) != v3)
  {
    if (*((_BYTE *)v2 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_isHandlingEvent))
    {
      v9 = os_transaction_create("com.apple.remindd.RDStalePinnedListsEventHandler.handleEvent");
      v10 = *(uint64_t *)((char *)v2
                       + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_osTransactionForHandlingEvent);
      *(uint64_t *)((char *)v2 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_osTransactionForHandlingEvent) = v9;
      v11 = swift_unknownObjectRelease(v10);
      v12 = static os_signpost_type_t.begin.getter(v11);
      if (qword_1008371B8 != -1)
        swift_once(&qword_1008371B8, sub_100322C88);
      v13 = qword_100845778;
      static OSSignpostID.exclusive.getter();
      os_signpost(_:dso:log:name:signpostID:)(v12, &_mh_execute_header, v13, "RDStalePinnedListsEventHandler.handleEvent", 42, 2, v8);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if (qword_1008371B0 != -1)
        swift_once(&qword_1008371B0, sub_100322BF8);
      v14 = type metadata accessor for Logger(0);
      v15 = sub_10001AAA8(v14, (uint64_t)qword_100845760);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.default.getter(v16);
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(12, -1);
        v19 = swift_slowAlloc(32, -1);
        v38 = v19;
        v39 = v4;
        *(_DWORD *)v18 = 136315138;
        MetatypeMetadata = swift_getMetatypeMetadata(v4);
        v21 = String.init<A>(describing:)(&v39, MetatypeMetadata);
        v23 = v22;
        v39 = sub_10001A820(v21, v22, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
        swift_bridgeObjectRelease(v23);
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s: Started handling event", v18, 0xCu);
        swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v19, -1, -1);
        swift_slowDealloc(v18, -1, -1);
      }

    }
    else
    {
      if (qword_1008371B0 != -1)
        swift_once(&qword_1008371B0, sub_100322BF8);
      v24 = type metadata accessor for Logger(0);
      v25 = sub_10001AAA8(v24, (uint64_t)qword_100845760);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.default.getter(v26);
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc(12, -1);
        v29 = swift_slowAlloc(32, -1);
        *(_DWORD *)v28 = 136315138;
        v37[1] = v28 + 4;
        v38 = v29;
        v39 = v4;
        v30 = swift_getMetatypeMetadata(v4);
        v31 = String.init<A>(describing:)(&v39, v30);
        v33 = v32;
        v39 = sub_10001A820(v31, v32, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
        swift_bridgeObjectRelease(v33);
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s: Finished handling event", v28, 0xCu);
        swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v29, -1, -1);
        swift_slowDealloc(v28, -1, -1);
      }

      v34 = static os_signpost_type_t.end.getter();
      if (qword_1008371B8 != -1)
        swift_once(&qword_1008371B8, sub_100322C88);
      v35 = qword_100845778;
      static OSSignpostID.exclusive.getter();
      os_signpost(_:dso:log:name:signpostID:)(v34, &_mh_execute_header, v35, "RDStalePinnedListsEventHandler.handleEvent", 42, 2, v8);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v36 = *(uint64_t *)((char *)v2
                       + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_osTransactionForHandlingEvent);
      *(uint64_t *)((char *)v2 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_osTransactionForHandlingEvent) = 0;
      swift_unknownObjectRelease(v36);
    }
  }
}

void sub_1003238FC(char a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t MetatypeMetadata;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *oslog;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (*((_BYTE *)v1 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_isDebouncingEvent) != (a1 & 1))
  {
    v2 = v1;
    v3 = *v1;
    if (*((_BYTE *)v1 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_isDebouncingEvent))
    {
      v4 = os_transaction_create("com.apple.remindd.RDStalePinnedListsEventHandler.debounceEvent");
      v5 = *(_QWORD *)((char *)v1
                     + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_osTransactionForDebouncingEvent);
      *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_osTransactionForDebouncingEvent) = v4;
      swift_unknownObjectRelease(v5);
      if (qword_1008371B0 != -1)
        swift_once(&qword_1008371B0, sub_100322BF8);
      v6 = type metadata accessor for Logger(0);
      v7 = sub_10001AAA8(v6, (uint64_t)qword_100845760);
      oslog = Logger.logObject.getter(v7);
      v8 = static os_log_type_t.default.getter(oslog);
      if (os_log_type_enabled(oslog, v8))
      {
        v9 = (uint8_t *)swift_slowAlloc(12, -1);
        v10 = swift_slowAlloc(32, -1);
        v27 = v10;
        v28 = v3;
        *(_DWORD *)v9 = 136315138;
        MetatypeMetadata = swift_getMetatypeMetadata(v3);
        v12 = String.init<A>(describing:)(&v28, MetatypeMetadata);
        v14 = v13;
        v28 = sub_10001A820(v12, v13, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
        swift_bridgeObjectRelease(v14);
        _os_log_impl((void *)&_mh_execute_header, oslog, v8, "%s: Started debouncing event", v9, 0xCu);
        swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v10, -1, -1);
        swift_slowDealloc(v9, -1, -1);

      }
      else
      {

      }
    }
    else
    {
      if (qword_1008371B0 != -1)
        swift_once(&qword_1008371B0, sub_100322BF8);
      v15 = type metadata accessor for Logger(0);
      v16 = sub_10001AAA8(v15, (uint64_t)qword_100845760);
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.default.getter(v17);
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(12, -1);
        v20 = swift_slowAlloc(32, -1);
        v27 = v20;
        v28 = v3;
        *(_DWORD *)v19 = 136315138;
        v21 = swift_getMetatypeMetadata(v3);
        v22 = String.init<A>(describing:)(&v28, v21);
        v24 = v23;
        v28 = sub_10001A820(v22, v23, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
        swift_bridgeObjectRelease(v24);
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s: Finished debouncing event", v19, 0xCu);
        swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v20, -1, -1);
        swift_slowDealloc(v19, -1, -1);
      }

      v25 = *(_QWORD *)((char *)v2
                      + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_osTransactionForDebouncingEvent);
      *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_osTransactionForDebouncingEvent) = 0;
      swift_unknownObjectRelease(v25);
    }
  }
}

uint64_t sub_100323C44(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t MetatypeMetadata;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  id v55;
  id v56;
  Class isa;
  _QWORD *v58;
  unint64_t v59;
  void *v60;
  __n128 v61;
  id v62;
  void *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  _BOOL4 v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  id v81;
  void *v82;
  id v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  __n128 v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  id v105;
  void *v106;
  char *v107;
  uint64_t v108;
  unsigned int (*v109)(uint64_t, uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(char *, unint64_t, uint64_t);
  char *v119;
  uint64_t v120;
  void (*v121)(char *, uint64_t);
  char *v122;
  NSObject *v123;
  os_log_type_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  double v130;
  id v131;
  void *v132;
  id v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  double v137;
  unsigned __int8 v138;
  double v139;
  id v140;
  unsigned int v141;
  id v142;
  id v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  NSObject *v149;
  os_log_type_t v150;
  _QWORD *v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  __n128 v176;
  _QWORD *v177;
  char *v178;
  id v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  unint64_t v193;
  char *v194;
  uint64_t v195;
  id v196;
  _QWORD *v197;
  char *v198;
  char *v199;
  char *v200;
  uint64_t v201;
  char v202[8];
  uint64_t v203;
  uint64_t v204;
  char v205[8];
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  unint64_t aBlock;
  _QWORD v213[4];
  uint64_t v214;
  char v215[8];
  char v216[8];
  _QWORD v217[5];

  v193 = a3;
  v196 = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v191 = (char *)&v174 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = type metadata accessor for DispatchQoS(0);
  v189 = *(_QWORD *)(v190 - 8);
  __chkstk_darwin(v190);
  v188 = (char *)&v174 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v8);
  v194 = (char *)&v174 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v201 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v199 = (char *)&v174 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v200 = (char *)&v174 - v13;
  v197 = (_QWORD *)_s10PredicatesOMa_1(0);
  __chkstk_darwin(v197);
  v198 = (char *)&v174 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for REMManualOrdering.ManualOrderingID(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v174 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for REMManualOrdering.Predefined(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v174 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v215, 0, 0);
  result = swift_weakLoadStrong(a1);
  v187 = result;
  if (!result)
    return result;
  v192 = v15;
  v195 = v10;
  v184 = v5;
  v185 = v4;
  (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v22, enum case for REMManualOrdering.Predefined.pinned(_:), v19);
  if (qword_100837960 != -1)
    goto LABEL_81;
LABEL_3:
  v24 = qword_100872290;
  v25 = swift_retain(qword_100872290);
  REMManualOrdering.Predefined.manualOrderingID.getter(v25);
  v26 = v196;
  v27 = sub_100300818();
  v28 = &qword_100837000;
  if (!v27)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v192);
    v34 = v195;
LABEL_6:
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    swift_release(v24);
    v20 = 0;
    v179 = 0;
    goto LABEL_7;
  }
  v29 = (void *)v27;
  v30 = (void *)REMManualOrdering.ManualOrderingID.listType.getter();
  v31 = REMManualOrdering.ManualOrderingID.listID.getter();
  v33 = v32;
  v60 = sub_1000D19A0(v30, v31, v32, v29, v26, 0, v24);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v192);

  v61 = swift_bridgeObjectRelease(v33);
  if (!v60)
  {
    v34 = v195;
    v28 = &qword_100837000;
    goto LABEL_6;
  }
  (*(void (**)(char *, uint64_t, __n128))(v20 + 8))(v22, v19, v61);
  swift_release(v24);
  v62 = v60;
  sub_10019CD04((uint64_t)v216);
  v63 = v60;
  v34 = v195;
  v179 = v63;

  sub_100325620((uint64_t)v216, (uint64_t)v217);
  if (v217[0])
  {
    v90 = v217[2];
    v91 = v217[3];
    v92 = v217[4];
    v206 = v217[0];
    v207 = v217[1];
    sub_1000F4320(&v207);
    v208 = v90;
    sub_1000F4320(&v208);
    v209 = v91;
    sub_1000F4320(&v209);
    v210 = v92;
    sub_1000F4320(&v210);
    aBlock = v206;
    v93 = sub_10001A630((uint64_t *)&unk_10083AE10);
    v94 = sub_1000A5F84((unint64_t *)&unk_1008458F0, (uint64_t *)&unk_10083AE10, (uint64_t)&protocol conformance descriptor for [A]);
    v95 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v20 = Sequence.compactMapToSet<A>(_:)(sub_10032531C, 0, v93, v34, v94, v95);
    sub_1000F4320(&v206);
  }
  else
  {
    v20 = 0;
  }
  v28 = &qword_100837000;
LABEL_7:
  v35 = v197;
  v197 = 0;
  if (v28[54] != -1)
    swift_once(&qword_1008371B0, sub_100322BF8);
  v36 = type metadata accessor for Logger(0);
  v37 = sub_10001AAA8(v36, (uint64_t)qword_100845760);
  v38 = swift_bridgeObjectRetain_n(v20, 2);
  v181 = v37;
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.default.getter(v39);
  if (os_log_type_enabled(v39, v40))
  {
    v41 = swift_slowAlloc(22, -1);
    v42 = (_QWORD *)swift_slowAlloc(64, -1);
    v211 = v42;
    *(_DWORD *)v41 = 136315394;
    aBlock = v193;
    MetatypeMetadata = swift_getMetatypeMetadata(v193);
    v44 = String.init<A>(describing:)(&aBlock, MetatypeMetadata);
    v46 = v45;
    aBlock = sub_10001A820(v44, v45, (uint64_t *)&v211);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v213);
    swift_bridgeObjectRelease(v46);
    *(_WORD *)(v41 + 12) = 2082;
    aBlock = v20;
    v47 = sub_10001A630(&qword_1008458D8);
    v48 = Optional.descriptionOrNil.getter(v47);
    v50 = v49;
    aBlock = sub_10001A820(v48, v49, (uint64_t *)&v211);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v213);
    swift_bridgeObjectRelease_n(v20, 2);
    swift_bridgeObjectRelease(v50);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "%s: Did fetch pinned lists' manual ordering {identifiersInPinnedListsOrdering: %{public}s}", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v41, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v20, 2);
  }
  v51 = (uint64_t)v198;
  swift_storeEnumTagMultiPayload(v198, v35, 23);
  sub_10000A3AC();
  v53 = v52;
  v54 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v55 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v56 = objc_msgSend((id)swift_getObjCClassFromMetadata(v54), "entity");
  objc_msgSend(v55, "setEntity:", v56);

  objc_msgSend(v55, "setAffectedStores:", 0);
  objc_msgSend(v55, "setPredicate:", v53);

  if (qword_1008376D0 != -1)
    swift_once(&qword_1008376D0, sub_1004A7024);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v55, "setSortDescriptors:", isa);

  v58 = v197;
  v59 = NSManagedObjectContext.fetch<A>(_:)(v55, v54);
  if (v58)
  {

    sub_1000EC49C(v51);
    swift_bridgeObjectRelease(v20);

    goto LABEL_91;
  }
  v64 = v59;
  aBlock = v59;
  v65 = sub_10001A630(&qword_10083FF50);
  v66 = sub_1000A5F84((unint64_t *)&qword_10083A838, &qword_10083FF50, (uint64_t)&protocol conformance descriptor for [A]);
  v16 = Sequence.elements<A>(ofType:)(v54, v65, v54, v66);
  swift_bridgeObjectRelease(v64);

  sub_1000EC49C(v51);
  v67 = swift_bridgeObjectRetain_n(v16, 4);
  v68 = Logger.logObject.getter(v67);
  v19 = static os_log_type_t.default.getter(v68);
  v69 = os_log_type_enabled(v68, (os_log_type_t)v19);
  v70 = (unint64_t)v16 >> 62;
  v192 = v16;
  if (!v69)
  {

    swift_bridgeObjectRelease_n(v16, 4);
    v88 = (uint64_t)v194;
    goto LABEL_44;
  }
  LODWORD(v198) = v19;
  v71 = swift_slowAlloc(32, -1);
  v197 = (_QWORD *)swift_slowAlloc(64, -1);
  v211 = v197;
  *(_DWORD *)v71 = 136315650;
  aBlock = v193;
  v72 = swift_getMetatypeMetadata(v193);
  v73 = String.init<A>(describing:)(&aBlock, v72);
  v75 = v74;
  aBlock = sub_10001A820(v73, v74, (uint64_t *)&v211);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v213);
  swift_bridgeObjectRelease(v75);
  *(_WORD *)(v71 + 12) = 2050;
  if (v70)
  {
    if (v16 < 0)
      v173 = v16;
    else
      v173 = v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v16);
    v76 = _CocoaArrayWrapper.endIndex.getter(v173);
    swift_bridgeObjectRelease(v16);
  }
  else
  {
    v76 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v16);
  aBlock = v76;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v213);
  swift_bridgeObjectRelease(v16);
  *(_WORD *)(v71 + 22) = 2082;
  aBlock = (unint64_t)_swiftEmptyArrayStorage;
  if (v70)
  {
    if (v16 < 0)
      v96 = v16;
    else
      v96 = v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v16);
    v77 = _CocoaArrayWrapper.endIndex.getter(v96);
    if (v77)
      goto LABEL_23;
  }
  else
  {
    v77 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v16);
    if (v77)
    {
LABEL_23:
      v186 = v20;
      if (v77 < 1)
        __break(1u);
      v78 = 0;
      v79 = v16 & 0xC000000000000001;
      do
      {
        if (v79)
          v81 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v78, v192);
        else
          v81 = *(id *)(v192 + 8 * v78 + 32);
        v82 = v81;
        v83 = objc_msgSend(v81, "remObjectID");

        if (v83)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v84);
          v86 = *(_QWORD *)((aBlock & 0xFFFFFFFFFFFFFF8) + 0x10);
          v85 = *(_QWORD *)((aBlock & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v86 >= v85 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v85 > 1);
          v80 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v86, v83);
          specialized Array._endMutation()(v80);
          v34 = v195;
        }
        ++v78;
      }
      while (v77 != v78);
      v16 = v192;
      swift_bridgeObjectRelease(v192);
      v89 = (_QWORD *)aBlock;
      v20 = v186;
      goto LABEL_43;
    }
  }
  swift_bridgeObjectRelease(v16);
  v89 = _swiftEmptyArrayStorage;
LABEL_43:
  v97 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v98 = Array.description.getter(v89, v97);
  v100 = v99;
  swift_bridgeObjectRelease(v89);
  aBlock = sub_10001A820(v98, v100, (uint64_t *)&v211);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v213);
  swift_bridgeObjectRelease_n(v16, 2);
  swift_bridgeObjectRelease(v100);
  _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v198, "%s: Did fetch lists shared to current user {count: %{public}ld, objectIDs: %{public}s)}", (uint8_t *)v71, 0x20u);
  v19 = (uint64_t)v197;
  swift_arrayDestroy(v197, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v19, -1, -1);
  swift_slowDealloc(v71, -1, -1);

  v88 = (uint64_t)v194;
LABEL_44:
  if (!v70)
  {
    v22 = *(char **)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v22)
      goto LABEL_86;
    goto LABEL_46;
  }
  if (v16 < 0)
    v19 = v16;
  else
    v19 = v16 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v16);
  v22 = (char *)_CocoaArrayWrapper.endIndex.getter(v19);
  v87 = swift_bridgeObjectRelease(v16);
  if (v22)
  {
LABEL_46:
    v101 = 0;
    v18 = (char *)(v16 & 0xC000000000000001);
    v183 = v16 & 0xFFFFFFFFFFFFFF8;
    v182 = v16 + 32;
    v197 = (_QWORD *)(v20 + 56);
    v87.n128_u64[0] = 136315650;
    v176 = v87;
    v175 = (char *)&type metadata for Any + 8;
    v178 = v22;
    v180 = v16 & 0xC000000000000001;
    do
    {
      if (v18)
      {
        v102 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v101, v16);
      }
      else
      {
        if (v101 >= *(_QWORD *)(v183 + 16))
          goto LABEL_80;
        v102 = (char *)*(id *)(v182 + 8 * v101);
      }
      v103 = v102;
      if (__OFADD__(v101++, 1))
      {
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        swift_once(&qword_100837960, sub_1005B8A54);
        goto LABEL_3;
      }
      v105 = objc_msgSend(v102, "identifier");
      if (v105)
      {
        v106 = v105;
        v107 = v199;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v105);

        v198 = v103;
        v108 = v201;
        v19 = *(_QWORD *)(v201 + 32);
        ((void (*)(uint64_t, char *, uint64_t))v19)(v88, v107, v34);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v108 + 56))(v88, 0, 1, v34);
        v109 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v108 + 48);
        v103 = v198;
        if (v109(v88, 1, v34) != 1)
        {
          ((void (*)(char *, uint64_t, uint64_t))v19)(v200, v88, v34);
          if (v20 && *(_QWORD *)(v20 + 16))
          {
            v186 = v101;
            v19 = *(_QWORD *)(v20 + 40);
            v110 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            swift_bridgeObjectRetain(v20);
            v111 = v34;
            v112 = dispatch thunk of Hashable._rawHashValue(seed:)(v19, v34, v110);
            v113 = v20;
            v114 = -1 << *(_BYTE *)(v20 + 32);
            v115 = v112 & ~v114;
            if (((*(_QWORD *)((char *)v197 + ((v115 >> 3) & 0xFFFFFFFFFFFFF8)) >> v115) & 1) != 0)
            {
              v116 = ~v114;
              v117 = *(_QWORD *)(v201 + 72);
              v118 = *(void (**)(char *, unint64_t, uint64_t))(v201 + 16);
              while (1)
              {
                v119 = v199;
                v118(v199, *(_QWORD *)(v113 + 48) + v117 * v115, v111);
                v120 = sub_10009FC50((unint64_t *)&qword_10083B380, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
                v19 = dispatch thunk of static Equatable.== infix(_:_:)(v119, v200, v111, v120);
                v121 = *(void (**)(char *, uint64_t))(v201 + 8);
                v121(v119, v111);
                if ((v19 & 1) != 0)
                  break;
                v115 = (v115 + 1) & v116;
                if (((*(_QWORD *)((char *)v197 + ((v115 >> 3) & 0xFFFFFFFFFFFFF8)) >> v115) & 1) == 0)
                  goto LABEL_63;
              }
              v20 = v113;
              *(_QWORD *)&v137 = swift_bridgeObjectRelease(v113).n128_u64[0];
              v103 = v198;
              v138 = objc_msgSend(v198, "isPinnedByCurrentUser", v137);
              v34 = v111;
              v16 = v192;
              v22 = v178;
              v101 = v186;
              v18 = (char *)v180;
              if ((v138 & 1) == 0)
              {
                v19 = 1;
                v88 = (uint64_t)v194;
                goto LABEL_66;
              }
LABEL_70:
              v121(v200, v34);

              v88 = (uint64_t)v194;
              continue;
            }
LABEL_63:
            v20 = v113;
            swift_bridgeObjectRelease(v113);
            v34 = v111;
            v16 = v192;
            v22 = v178;
            v88 = (uint64_t)v194;
            v101 = v186;
            v18 = (char *)v180;
            v103 = v198;
          }
          if ((objc_msgSend(v103, "isPinnedByCurrentUser") & 1) != 0)
          {
            v186 = v101;
            v19 = 0;
LABEL_66:
            objc_msgSend(v103, "setIsPinnedByCurrentUser:", v19);
            v122 = v103;
            v123 = Logger.logObject.getter(v122);
            v124 = static os_log_type_t.default.getter(v123);
            if (os_log_type_enabled(v123, v124))
            {
              LODWORD(v198) = v19;
              v125 = swift_slowAlloc(28, -1);
              v177 = (_QWORD *)swift_slowAlloc(64, -1);
              v211 = v177;
              *(_DWORD *)v125 = v176.n128_u32[0];
              aBlock = v193;
              v126 = swift_getMetatypeMetadata(v193);
              v127 = String.init<A>(describing:)(&aBlock, v126);
              v129 = v128;
              *(_QWORD *)(v125 + 4) = sub_10001A820(v127, v128, (uint64_t *)&v211);
              *(_QWORD *)&v130 = swift_bridgeObjectRelease(v129).n128_u64[0];
              *(_WORD *)(v125 + 12) = 2082;
              v131 = objc_msgSend(v122, "remObjectID", v130);
              if (v131)
              {
                v132 = v131;
                v133 = objc_msgSend(v131, "description");

                v134 = static String._unconditionallyBridgeFromObjectiveC(_:)(v133);
                v136 = v135;

                v22 = v178;
                v88 = (uint64_t)v194;
              }
              else
              {
                v136 = 0xE300000000000000;
                v134 = 7104878;
              }
              *(_QWORD *)(v125 + 14) = sub_10001A820(v134, v136, (uint64_t *)&v211);

              swift_bridgeObjectRelease(v136);
              *(_WORD *)(v125 + 22) = 1026;
              *(_DWORD *)(v125 + 24) = (_DWORD)v198;
              _os_log_impl((void *)&_mh_execute_header, v123, v124, "%s: Updated pin state {list: %{public}s, isPinnedByCurrentUser: %{BOOL,public}d}", (uint8_t *)v125, 0x1Cu);
              v19 = (uint64_t)v177;
              swift_arrayDestroy(v177, 2, v175);
              swift_slowDealloc(v19, -1, -1);
              swift_slowDealloc(v125, -1, -1);

              v34 = v195;
              (*(void (**)(char *, uint64_t))(v201 + 8))(v200, v195);
            }
            else
            {

              (*(void (**)(char *, uint64_t))(v201 + 8))(v200, v34);
            }
            v101 = v186;
            v18 = (char *)v180;
            continue;
          }
          v121 = *(void (**)(char *, uint64_t))(v201 + 8);
          goto LABEL_70;
        }
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v201 + 56))(v88, 1, 1, v34);
      }

      sub_10000882C(v88, (uint64_t *)&unk_100839C80);
    }
    while ((char *)v101 != v22);
  }
LABEL_86:
  swift_bridgeObjectRelease(v20);
  *(_QWORD *)&v139 = swift_bridgeObjectRelease(v16).n128_u64[0];
  v140 = v196;
  if ((objc_msgSend(v196, "hasChanges", v139) & 1) == 0
    || (aBlock = 0,
        v141 = objc_msgSend(v140, "save:", &aBlock),
        v142 = (id)aBlock,
        v143 = v179,
        v141))
  {

    goto LABEL_96;
  }
  v144 = v142;
  v145 = _convertNSErrorToError(_:)(v142);

  swift_willThrow(v146);
  v58 = (_QWORD *)v145;

LABEL_91:
  if (qword_1008371B0 != -1)
    swift_once(&qword_1008371B0, sub_100322BF8);
  v147 = type metadata accessor for Logger(0);
  sub_10001AAA8(v147, (uint64_t)qword_100845760);
  swift_errorRetain(v58);
  v148 = swift_errorRetain(v58);
  v149 = Logger.logObject.getter(v148);
  v150 = static os_log_type_t.default.getter(v149);
  if (os_log_type_enabled(v149, v150))
  {
    v151 = v58;
    v152 = swift_slowAlloc(22, -1);
    v153 = (_QWORD *)swift_slowAlloc(64, -1);
    v211 = v153;
    *(_DWORD *)v152 = 136315394;
    aBlock = v193;
    v154 = swift_getMetatypeMetadata(v193);
    v155 = String.init<A>(describing:)(&aBlock, v154);
    v157 = v156;
    aBlock = sub_10001A820(v155, v156, (uint64_t *)&v211);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v213);
    swift_bridgeObjectRelease(v157);
    *(_WORD *)(v152 + 12) = 2082;
    swift_getErrorValue(v151, v205, v202);
    v158 = Error.rem_errorDescription.getter(v203, v204);
    v160 = v159;
    aBlock = sub_10001A820(v158, v159, (uint64_t *)&v211);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v213);
    swift_bridgeObjectRelease(v160);
    swift_errorRelease(v151);
    swift_errorRelease(v151);
    _os_log_impl((void *)&_mh_execute_header, v149, v150, "%s: Failed to handle event {error: %{public}s}", (uint8_t *)v152, 0x16u);
    swift_arrayDestroy(v153, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v153, -1, -1);
    swift_slowDealloc(v152, -1, -1);

    swift_errorRelease(v151);
  }
  else
  {
    swift_errorRelease(v58);
    swift_errorRelease(v58);
    swift_errorRelease(v58);

  }
LABEL_96:
  v161 = v187;
  v162 = swift_allocObject(&unk_1007EEA08, 24, 7);
  swift_weakInit(v162 + 16, v161);
  v213[3] = sub_100325618;
  v214 = v162;
  aBlock = (unint64_t)_NSConcreteStackBlock;
  v213[0] = 1107296256;
  v213[1] = sub_1000094C8;
  v213[2] = &unk_1007EEA70;
  v163 = _Block_copy(&aBlock);
  v164 = swift_retain(v162);
  v165 = v188;
  static DispatchQoS.unspecified.getter(v164);
  v211 = _swiftEmptyArrayStorage;
  v166 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v167 = sub_10001A630((uint64_t *)&unk_100838000);
  v168 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  v169 = v191;
  v170 = v167;
  v171 = v185;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v211, v170, v168, v185, v166);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v165, v169, v163);
  _Block_release(v163);
  (*(void (**)(char *, uint64_t))(v184 + 8))(v169, v171);
  (*(void (**)(char *, uint64_t))(v189 + 8))(v165, v190);
  swift_release(v161);
  v172 = v214;
  swift_release(v162);
  return swift_release(v172);
}

uint64_t sub_10032531C(_QWORD *a1)
{
  return UUID.init(uuidString:)(*a1, a1[1]);
}

uint64_t sub_100325348(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  _BYTE v10[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    v4 = *(_BYTE *)(result + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_isHandlingEvent);
    *(_BYTE *)(v3 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_isHandlingEvent) = 0;
    sub_1003234B0(v4);
    Strong = swift_unknownObjectWeakLoadStrong(v3 + 16, v5);
    if (Strong)
    {
      v7 = Strong;
      v8 = *(_QWORD *)(v3 + 24);
      ObjectType = swift_getObjectType(Strong);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 8))(v3, ObjectType, v8);
      swift_release(v3);
      return swift_unknownObjectRelease(v7);
    }
    else
    {
      return swift_release(v3);
    }
  }
  return result;
}

uint64_t sub_1003253F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100008EFC(v0 + 16);

  v1 = v0 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_debounceInterval;
  v2 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease(*(_QWORD *)(v0
                                       + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_osTransactionForHandlingEvent));
  swift_unknownObjectRelease(*(_QWORD *)(v0
                                       + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_osTransactionForDebouncingEvent));
  return v0;
}

uint64_t sub_100325494()
{
  uint64_t v0;

  sub_1003253F8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1003254B8()
{
  return type metadata accessor for RDStalePinnedListsEventHandler(0);
}

uint64_t type metadata accessor for RDStalePinnedListsEventHandler(uint64_t a1)
{
  uint64_t result;

  result = qword_1008457E0;
  if (!qword_1008457E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDStalePinnedListsEventHandler);
  return result;
}

uint64_t sub_1003254FC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[10];

  v4[0] = &unk_1006B4BF0;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[6] = &unk_1006B4C08;
    v4[7] = &unk_1006B4C08;
    v4[8] = &unk_1006B4C20;
    v4[9] = &unk_1006B4C20;
    result = swift_updateClassMetadata2(a1, 256, 10, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1003255AC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003255D0(uint64_t a1)
{
  uint64_t v1;

  return sub_100323204(a1, v1);
}

uint64_t sub_1003255D8(uint64_t a1)
{
  uint64_t v1;

  return sub_10032326C(a1, v1);
}

uint64_t sub_1003255E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10032560C()
{
  uint64_t v0;

  return sub_100323C44(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100325618()
{
  uint64_t v0;

  return sub_100325348(v0);
}

uint64_t sub_100325620(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_1008458E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100325670()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100845900);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100845900);
  if (qword_1008376A0 != -1)
    swift_once(&qword_1008376A0, sub_1004A19DC);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_1008721C0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100325700(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void *v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, uint64_t);
  _BYTE v34[24];
  char v35[80];

  v3 = v2;
  v32 = a1;
  v5 = sub_10001A630((uint64_t *)&unk_10083A360);
  __chkstk_darwin(v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v2 + OBJC_IVAR____TtC7remindd21RDWidgetRefreshEngine_storeControllerNotificationCenterToken;
  v9 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v33(v8, 1, 1, v9);
  v10 = sub_10001A630((uint64_t *)&unk_10083A340);
  inited = swift_initStackObject(v10, v35);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C20;
  v12 = objc_msgSend((id)objc_opt_self(REMAccount), "cdEntityName");
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  *(_QWORD *)(inited + 32) = v13;
  *(_QWORD *)(inited + 40) = v15;
  v16 = objc_msgSend((id)objc_opt_self(REMList), "cdEntityName");
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v19 = v18;

  *(_QWORD *)(inited + 48) = v17;
  *(_QWORD *)(inited + 56) = v19;
  v20 = objc_msgSend((id)objc_opt_self(REMReminder), "cdEntityName");
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  *(_QWORD *)(inited + 64) = v21;
  *(_QWORD *)(inited + 72) = v23;
  v24 = sub_1002E6C54(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 3, &type metadata for String);
  v25 = v32;
  *(_QWORD *)(v3 + 16) = v32;
  v26 = type metadata accessor for REMWidgetRefresh(0);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  v27 = v25;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC7remindd21RDWidgetRefreshEngine_widgetRefresh) = REMWidgetRefresh.init(interval:queue:)(5.0);
  *(_QWORD *)(v3 + 24) = a2;
  v28 = swift_allocObject(&unk_1007EEAA8, 24, 7);
  swift_weakInit(v28 + 16, v3);
  swift_retain(a2);
  swift_retain(v28);
  sub_100395434(v24, v27, (uint64_t)sub_100325ED8, v28, (uint64_t)v7);
  swift_release_n(v28, 2);
  swift_bridgeObjectRelease(v24);

  swift_release(a2);
  v33((uint64_t)v7, 0, 1, v9);
  v29 = v3 + OBJC_IVAR____TtC7remindd21RDWidgetRefreshEngine_storeControllerNotificationCenterToken;
  swift_beginAccess(v3 + OBJC_IVAR____TtC7remindd21RDWidgetRefreshEngine_storeControllerNotificationCenterToken, v34, 33, 0);
  sub_1000E5374((uint64_t)v7, v29);
  swift_endAccess(v34);
  return v3;
}

void sub_1003259BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  _BYTE v19[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v19, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    switch(a1)
    {
      case -1:
      case 9:
      case 17:
        if (qword_1008371C0 != -1)
          swift_once(&qword_1008371C0, sub_100325670);
        v6 = type metadata accessor for Logger(0);
        v7 = sub_10001AAA8(v6, (uint64_t)qword_100845900);
        v8 = Logger.logObject.getter(v7);
        v9 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v8, v9))
        {
          v10 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v10 = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, v9, "requested widget refresh", v10, 2u);
          swift_slowDealloc(v10, -1, -1);
        }

        v11 = *(_QWORD *)(v5 + OBJC_IVAR____TtC7remindd21RDWidgetRefreshEngine_widgetRefresh);
        v12 = swift_retain(v11);
        dispatch thunk of REMWidgetRefresh.refresh()(v12);
        swift_release(v11);
        goto LABEL_8;
      case 25:
      case 33:
        goto LABEL_8;
      default:
        if (qword_1008371C0 != -1)
          swift_once(&qword_1008371C0, sub_100325670);
        v13 = type metadata accessor for Logger(0);
        v14 = sub_10001AAA8(v13, (uint64_t)qword_100845900);
        v15 = Logger.logObject.getter(v14);
        v16 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v15, v16))
        {
          v17 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v17 = 134349056;
          v18 = a1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19);
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "RDWidgetRefreshEngine: Unknown QoS. {qualityOfService: %{public}ld}", v17, 0xCu);
          swift_slowDealloc(v17, -1, -1);
          swift_release(v5);

        }
        else
        {

LABEL_8:
          swift_release(v5);
        }
        break;
    }
  }
}

void sub_100325BF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[16];
  _BYTE v16[24];
  _BYTE v17[24];

  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_10083A360);
  __chkstk_darwin(v2);
  v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = v1 + OBJC_IVAR____TtC7remindd21RDWidgetRefreshEngine_storeControllerNotificationCenterToken;
  swift_beginAccess(v1 + OBJC_IVAR____TtC7remindd21RDWidgetRefreshEngine_storeControllerNotificationCenterToken, v17, 0, 0);
  sub_1000E542C(v9, (uint64_t)v4);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1000E5474((uint64_t)v4);
LABEL_5:

    swift_release(*(_QWORD *)(v1 + 24));
    sub_1000E5474(v9);
    swift_release(*(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd21RDWidgetRefreshEngine_widgetRefresh));
    return;
  }
  sub_1000E54B4((uint64_t)v4, (uint64_t)v8);
  v10 = *(_QWORD *)(v1 + 24);
  v11 = *(os_unfair_lock_s **)(v10 + 40);
  os_unfair_lock_lock(v11);
  __chkstk_darwin(v12);
  *(_QWORD *)&v15[-16] = v8;
  swift_beginAccess(v10 + 48, v16, 33, 0);
  sub_1001CE554((uint64_t (*)(unint64_t, __n128))sub_1000E54F8, (uint64_t)&v15[-32]);
  v14 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 16);
  if (v14 >= v13)
  {
    sub_1001CED20(v13, v14);
    swift_endAccess(v16);
    os_unfair_lock_unlock(v11);
    sub_1000A3F78((uint64_t)v8);
    goto LABEL_5;
  }
  __break(1u);
}

uint64_t sub_100325DC4()
{
  uint64_t v0;

  sub_100325BF8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100325DE8()
{
  return type metadata accessor for RDWidgetRefreshEngine(0);
}

uint64_t type metadata accessor for RDWidgetRefreshEngine(uint64_t a1)
{
  uint64_t result;

  result = qword_100845948;
  if (!qword_100845948)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDWidgetRefreshEngine);
  return result;
}

void sub_100325E2C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_1000DFA6C(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
  }
}

uint64_t sub_100325EB4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100325ED8(uint64_t a1)
{
  uint64_t v1;

  sub_1003259BC(a1, v1);
}

uint64_t sub_100325EE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100845A00);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100845A00);
  if (qword_1008375F0 != -1)
    swift_once(&qword_1008375F0, sub_1004A1774);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FB0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

double sub_10032605C(void *a1, int a2, uint64_t a3, void *aBlock, const char *a5, SEL *a6)
{
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  double result;

  v10 = _Block_copy(aBlock);
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v13 = v12;
  _Block_copy(v10);
  v14 = a1;
  sub_100327DE4(v11, v13, (uint64_t)v14, (uint64_t)v10, a5, a6);
  _Block_release(v10);
  _Block_release(v10);

  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_1003260F4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t aBlock[5];
  uint64_t v26;

  v4 = v3;
  if (qword_1008371C8 != -1)
    swift_once(&qword_1008371C8, sub_100325EE0);
  v8 = type metadata accessor for Logger(0);
  sub_10001AAA8(v8, (uint64_t)qword_100845A00);
  v9 = swift_unknownObjectRetain_n(a1, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v23 = a2;
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    aBlock[0] = v22;
    *(_DWORD *)v12 = 136446210;
    v13 = v4;
    v14 = objc_msgSend(a1, "description");
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    v4 = v13;
    v24 = sub_10001A820(v15, v17, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, aBlock);
    swift_unknownObjectRelease_n(a1, 2);
    a2 = v23;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "getTrackingState with {clientID: %{public}s}", v12, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    swift_unknownObjectRelease_n(a1, 2);
  }
  v18 = *(void **)(v4 + OBJC_IVAR____TtC7remindd28RDXPCChangeTrackingPerformer_implementation);
  v19 = swift_allocObject(&unk_1007EECB0, 32, 7);
  *(_QWORD *)(v19 + 16) = a2;
  *(_QWORD *)(v19 + 24) = a3;
  aBlock[4] = (uint64_t)sub_1000098EC;
  v26 = v19;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000FF8C4;
  aBlock[3] = (uint64_t)&unk_1007EECC8;
  v20 = _Block_copy(aBlock);
  v21 = v26;
  swift_retain();
  swift_release(v21);
  objc_msgSend(v18, "getTrackingStateWithClientID:completionHandler:", a1, v20);
  _Block_release(v20);
}

void sub_100326404(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  double v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t aBlock[5];
  uint64_t v34;

  v5 = v4;
  if (qword_1008371C8 != -1)
    swift_once(&qword_1008371C8, sub_100325EE0);
  v10 = type metadata accessor for Logger(0);
  sub_10001AAA8(v10, (uint64_t)qword_100845A00);
  swift_unknownObjectRetain_n(a2, 2);
  v11 = a1;
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(22, -1);
    v28 = swift_slowAlloc(64, -1);
    aBlock[0] = v28;
    *(_DWORD *)v14 = 136446466;
    v29 = v5;
    v15 = objc_msgSend(a2, "description");
    v30 = a3;
    v31 = a4;
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

    v32 = sub_10001A820(v16, v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, aBlock);
    swift_unknownObjectRelease_n(a2, 2);
    *(_QWORD *)&v19 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v14 + 12) = 2082;
    v20 = objc_msgSend(v11, "description", v19);
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    a4 = v31;
    v32 = sub_10001A820(v21, v23, aBlock);
    v5 = v29;
    a3 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, aBlock);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "saveTrackingState with {clientID: %{public}s, trackingState: %{public}s}", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v28, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_unknownObjectRelease_n(a2, 2);
  }
  v24 = *(void **)(v5 + OBJC_IVAR____TtC7remindd28RDXPCChangeTrackingPerformer_implementation);
  v25 = swift_allocObject(&unk_1007EEC60, 32, 7);
  *(_QWORD *)(v25 + 16) = a3;
  *(_QWORD *)(v25 + 24) = a4;
  aBlock[4] = (uint64_t)sub_100119B20;
  v34 = v25;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000E18E4;
  aBlock[3] = (uint64_t)&unk_1007EEC78;
  v26 = _Block_copy(aBlock);
  v27 = v34;
  swift_retain();
  swift_release(v27);
  objc_msgSend(v24, "saveTrackingState:withClientID:completionHandler:", v11, a2, v26);
  _Block_release(v26);
}

void sub_1003267B4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  Class isa;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t aBlock[5];
  uint64_t v31;

  v6 = v5;
  if (qword_1008371C8 != -1)
    swift_once(&qword_1008371C8, sub_100325EE0);
  v11 = type metadata accessor for Logger(0);
  sub_10001AAA8(v11, (uint64_t)qword_100845A00);
  v12 = a1;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v26 = v6;
    v27 = a4;
    v28 = a3;
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    aBlock[0] = v16;
    *(_DWORD *)v15 = 136446210;
    if (a1)
    {
      v17 = objc_msgSend(v12, "description");
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v20 = v19;

    }
    else
    {
      v20 = 0xE300000000000000;
      v18 = 7104878;
    }
    v29 = sub_10001A820(v18, v20, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, aBlock);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "fetchHistory after {token: %{public}s}", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    a4 = v27;
    a3 = v28;
    v6 = v26;
  }
  else
  {

  }
  v21 = *(void **)(v6 + OBJC_IVAR____TtC7remindd28RDXPCChangeTrackingPerformer_implementation);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v23 = swift_allocObject(&unk_1007EEC10, 32, 7);
  *(_QWORD *)(v23 + 16) = a4;
  *(_QWORD *)(v23 + 24) = a5;
  aBlock[4] = (uint64_t)sub_100119B20;
  v31 = v23;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100326A64;
  aBlock[3] = (uint64_t)&unk_1007EEC28;
  v24 = _Block_copy(aBlock);
  v25 = v31;
  swift_retain();
  swift_release(v25);
  objc_msgSend(v21, "fetchHistoryAfterToken:entityNames:transactionFetchLimit:completionHandler:", v12, isa, a3, v24);
  _Block_release(v24);

}

void sub_100326A64(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(id, void *);
  id v7;
  id v8;

  v6 = *(void (**)(id, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(v8, a3);
  swift_release(v5);

}

void sub_100326B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint8_t *v27;
  void *v28;
  Class isa;
  Class v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t aBlock[5];
  uint64_t v44;

  v6 = v5;
  v40 = a2;
  v41 = a5;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1008371C8 != -1)
    swift_once(&qword_1008371C8, sub_100325EE0);
  v14 = type metadata accessor for Logger(0);
  sub_10001AAA8(v14, (uint64_t)qword_100845A00);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v39 = a1;
  v16 = v15(v13, a1, v10);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(12, -1);
    v38 = a3;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v37 = a4;
    v22 = v21;
    aBlock[0] = v21;
    v36 = v5;
    *(_DWORD *)v20 = 136446210;
    v23 = Date.description.getter(v21);
    v42 = sub_10001A820(v23, v24, aBlock);
    v6 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, aBlock);
    v25 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v13, v10, v25);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "fetchHistory after {date: %{public}s}", v20, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    v26 = v22;
    a4 = v37;
    swift_slowDealloc(v26, -1, -1);
    v27 = v20;
    a3 = v38;
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

  v28 = *(void **)(v6 + OBJC_IVAR____TtC7remindd28RDXPCChangeTrackingPerformer_implementation);
  isa = Date._bridgeToObjectiveC()().super.isa;
  v30 = Array._bridgeToObjectiveC()().super.isa;
  v31 = swift_allocObject(&unk_1007EEBC0, 32, 7);
  v32 = v41;
  *(_QWORD *)(v31 + 16) = a4;
  *(_QWORD *)(v31 + 24) = v32;
  aBlock[4] = (uint64_t)sub_100119B20;
  v44 = v31;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100326A64;
  aBlock[3] = (uint64_t)&unk_1007EEBD8;
  v33 = _Block_copy(aBlock);
  v34 = v44;
  swift_retain();
  swift_release(v34);
  objc_msgSend(v28, "fetchHistoryAfterDate:entityNames:transactionFetchLimit:completionHandler:", isa, v30, a3, v33);
  _Block_release(v33);

}

void sub_100326F8C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t aBlock[5];
  uint64_t v25;

  v4 = v3;
  if (qword_1008371C8 != -1)
    swift_once(&qword_1008371C8, sub_100325EE0);
  v8 = type metadata accessor for Logger(0);
  sub_10001AAA8(v8, (uint64_t)qword_100845A00);
  v9 = a1;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v22 = v4;
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = swift_slowAlloc(32, -1);
    aBlock[0] = v21;
    *(_DWORD *)v12 = 136446210;
    v13 = objc_msgSend(v9, "description");
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v16 = v15;

    v23 = sub_10001A820(v14, v16, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, aBlock);

    v4 = v22;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "fetchHistory after {token: %{public}s}", v12, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

  }
  v17 = *(void **)(v4 + OBJC_IVAR____TtC7remindd28RDXPCChangeTrackingPerformer_implementation);
  v18 = swift_allocObject(&unk_1007EEB70, 32, 7);
  *(_QWORD *)(v18 + 16) = a2;
  *(_QWORD *)(v18 + 24) = a3;
  aBlock[4] = (uint64_t)sub_100119B20;
  v25 = v18;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000E18E4;
  aBlock[3] = (uint64_t)&unk_1007EEB88;
  v19 = _Block_copy(aBlock);
  v20 = v25;
  swift_retain();
  swift_release(v20);
  objc_msgSend(v17, "deleteHistoryBeforeToken:completionHandler:", v9, v19);
  _Block_release(v19);
}

void sub_10032728C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __n128 v22;
  uint64_t v23;
  void *v24;
  Class isa;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t aBlock[5];
  uint64_t v35;

  v4 = v3;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1008371C8 != -1)
    swift_once(&qword_1008371C8, sub_100325EE0);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845A00);
  v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v30 = v3;
    v16 = swift_slowAlloc(12, -1);
    v29[1] = a1;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc(32, -1);
    v31 = a2;
    v19 = v18;
    aBlock[0] = v18;
    v32 = a3;
    *(_DWORD *)v17 = 136446210;
    v20 = Date.description.getter(v18);
    v33 = sub_10001A820(v20, v21, aBlock);
    v4 = v30;
    a3 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, aBlock);
    v22 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v11, v8, v22);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "fetchHistory after {date: %{public}s}", v17, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    v23 = v19;
    a2 = v31;
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  v24 = *(void **)(v4 + OBJC_IVAR____TtC7remindd28RDXPCChangeTrackingPerformer_implementation);
  isa = Date._bridgeToObjectiveC()().super.isa;
  v26 = swift_allocObject(&unk_1007EEB20, 32, 7);
  *(_QWORD *)(v26 + 16) = a2;
  *(_QWORD *)(v26 + 24) = a3;
  aBlock[4] = (uint64_t)sub_1000098EC;
  v35 = v26;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000E18E4;
  aBlock[3] = (uint64_t)&unk_1007EEB38;
  v27 = _Block_copy(aBlock);
  v28 = v35;
  swift_retain();
  swift_release(v28);
  objc_msgSend(v24, "deleteHistoryBeforeDate:completionHandler:", isa, v27);
  _Block_release(v27);

}

void sub_100327628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  Class isa;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t aBlock[5];
  uint64_t v29;

  v4 = v3;
  if (qword_1008371C8 != -1)
    swift_once(&qword_1008371C8, sub_100325EE0);
  v8 = type metadata accessor for Logger(0);
  sub_10001AAA8(v8, (uint64_t)qword_100845A00);
  v9 = swift_bridgeObjectRetain_n(a1, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v26 = v4;
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    aBlock[0] = v13;
    *(_DWORD *)v12 = 136446210;
    v14 = sub_1001A9820();
    swift_bridgeObjectRetain(a1);
    v16 = Array.description.getter(v15, v14);
    v17 = a2;
    v19 = v18;
    swift_bridgeObjectRelease();
    v20 = v16;
    v4 = v26;
    v27 = sub_10001A820(v20, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, aBlock);
    swift_bridgeObjectRelease_n(a1, 2);
    a2 = v17;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "fetchAuxiliaryChangeInfos with {auxiliaryChangeInfoObjectIDs: %{public}s}", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  v21 = *(void **)(v4 + OBJC_IVAR____TtC7remindd28RDXPCChangeTrackingPerformer_implementation);
  sub_1001A9820();
  isa = Array._bridgeToObjectiveC()().super.isa;
  v23 = swift_allocObject(&unk_1007EEAD0, 32, 7);
  *(_QWORD *)(v23 + 16) = a2;
  *(_QWORD *)(v23 + 24) = a3;
  aBlock[4] = (uint64_t)sub_100119B20;
  v29 = v23;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1003278CC;
  aBlock[3] = (uint64_t)&unk_1007EEAE8;
  v24 = _Block_copy(aBlock);
  v25 = v29;
  swift_retain();
  swift_release(v25);
  objc_msgSend(v21, "fetchAuxiliaryChangeInfos:completionHandler:", isa, v24);
  _Block_release(v24);

}

void sub_1003278CC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = sub_1001A9820();
  v8 = sub_10011A5DC();
  v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, v7, &type metadata for Data, v8);
  swift_retain();
  v10 = a3;
  v6(v9, a3);
  swift_release(v5);
  swift_bridgeObjectRelease();

}

void sub_1003279FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSDictionary v5;
  uint64_t v6;
  id v7;

  sub_1001A9820();
  sub_10011A5DC();
  v5.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (a2)
    v6 = _convertErrorToNSError(_:)(a2);
  else
    v6 = 0;
  v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);

}

id sub_100327ABC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDXPCChangeTrackingPerformer();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RDXPCChangeTrackingPerformer()
{
  return objc_opt_self(_TtC7remindd28RDXPCChangeTrackingPerformer);
}

uint64_t sub_100327B1C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100327B40()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100327B64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1003279FC(a1, a2, *(_QWORD *)(v2 + 16));
}

void sub_100327B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100009450(a1, a2, *(_QWORD *)(v2 + 16));
}

void sub_100327B74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  id v9;

  if (qword_1008371C8 != -1)
    swift_once(&qword_1008371C8, sub_100325EE0);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001AAA8(v4, (uint64_t)qword_100845A00);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "currentChangeToken initiated", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  v9 = objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC7remindd28RDXPCChangeTrackingPerformer_implementation), "currentChangeToken");
  (*(void (**)(uint64_t, id))(a2 + 16))(a2, v9);

}

void sub_100327C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;

  if (qword_1008371C8 != -1)
    swift_once(&qword_1008371C8, sub_100325EE0);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001AAA8(v6, (uint64_t)qword_100845A00);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v10 = 134217984;
    v12 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "currentChangeToken for {accountTypes: %ld}", v10, 0xCu);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = objc_msgSend(*(id *)(a2 + OBJC_IVAR____TtC7remindd28RDXPCChangeTrackingPerformer_implementation), "currentChangeTokenForAccountTypes:", a1);
  (*(void (**)(uint64_t, id))(a3 + 16))(a3, v11);

}

void sub_100327DE4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, const char *a5, SEL *a6)
{
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint8_t *v18;
  void *v19;
  NSString v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (qword_1008371C8 != -1)
    swift_once(&qword_1008371C8, sub_100325EE0);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845A00);
  v13 = swift_bridgeObjectRetain_n(a2, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v22 = a3;
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v24 = v17;
    *(_DWORD *)v16 = 136446210;
    swift_bridgeObjectRetain(a2);
    v23 = sub_10001A820(a1, a2, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, a5, v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    v18 = v16;
    a3 = v22;
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v19 = *(void **)(a3 + OBJC_IVAR____TtC7remindd28RDXPCChangeTrackingPerformer_implementation);
  v20 = String._bridgeToObjectiveC()();
  v21 = objc_msgSend(v19, *a6, v20);

  (*(void (**)(uint64_t, id))(a4 + 16))(a4, v21);
}

uint64_t sub_10032805C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100845AB0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100845AB0);
  if (qword_100837608 != -1)
    swift_once(&qword_100837608, sub_1004A17C8);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_1003280EC()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(REMLog), "cloudkit");
  qword_100845AC8 = (uint64_t)result;
  return result;
}

_QWORD *sub_100328124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  char *v9;
  uint64_t v10;

  v4[3] = 0;
  swift_unknownObjectWeakInit(v4 + 2, 0);
  *(_QWORD *)((char *)v4
            + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_cancellables) = &_swiftEmptySetSingleton;
  *(_QWORD *)((char *)v4
            + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_osTransactionForHandlingEvent) = 0;
  *(_QWORD *)((char *)v4
            + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_osTransactionForDebouncingEvent) = 0;
  *((_BYTE *)v4
  + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_isHandlingEvent) = 0;
  *((_BYTE *)v4
  + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_isDebouncingEvent) = 0;
  v4[4] = a1;
  v4[5] = a2;
  v9 = (char *)v4
     + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_debounceInterval;
  v10 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, a3, v10);
  *(_QWORD *)((char *)v4
            + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_notificationCenter) = a4;
  return v4;
}

uint64_t sub_1003281F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48[3];

  v1 = sub_10001A630(&qword_10083A970);
  __chkstk_darwin(v1);
  v3 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v40 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_10001A630((uint64_t *)&unk_10084A290);
  v43 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630(&qword_1008458B0);
  v10 = *(_QWORD *)(v9 - 8);
  v44 = v9;
  v45 = v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A630(&qword_1008458B8);
  v14 = *(_QWORD *)(v13 - 8);
  v46 = v13;
  v47 = v14;
  __chkstk_darwin(v13);
  v42 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = v0;
  NSNotificationCenter.publisher(for:object:)(CFSTR("com.apple.remindd.SharedToMeList.mostRecentTargetTemplateIdentifierByCurrentUserDidBecomeStale"), 0);
  v48[0] = *(id *)(v0 + 40);
  v16 = v48[0];
  v17 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v39(v3, 1, 1, v17);
  v18 = sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v38 = v18;
  v19 = sub_10009FC50((unint64_t *)&qword_10084A2A0, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
  v20 = sub_1000A5E70();
  v21 = v16;
  Publisher.receive<A>(on:options:)(v48, v3, v4, v18, v19, v20);
  sub_10000882C((uint64_t)v3, &qword_10083A970);

  (*(void (**)(char *, uint64_t))(v40 + 8))(v6, v4);
  v22 = swift_allocObject(&unk_1007EEE18, 24, 7);
  v23 = v37;
  swift_weakInit(v22 + 16, v37);
  v24 = sub_1000A5F84((unint64_t *)&qword_10083AA10, (uint64_t *)&unk_10084A290, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v25 = v41;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)(0, 0, sub_10032A68C, v22, 0, 0, 0, 0, 0, 0, v41, v24);
  swift_release(v22);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v8, v25);
  v26 = v23
      + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_debounceInterval;
  v48[0] = v21;
  v39(v3, 1, 1, v17);
  v27 = sub_1000A5F84(&qword_1008458C0, &qword_1008458B0, (uint64_t)&protocol conformance descriptor for Publishers.HandleEvents<A>);
  v28 = v21;
  v29 = v42;
  v30 = v44;
  Publisher.debounce<A>(for:scheduler:options:)(v26, v48, v3, v44, v38, v27, v20);
  sub_10000882C((uint64_t)v3, &qword_10083A970);

  (*(void (**)(char *, uint64_t))(v45 + 8))(v12, v30);
  v31 = swift_allocObject(&unk_1007EEE18, 24, 7);
  swift_weakInit(v31 + 16, v23);
  v32 = sub_1000A5F84((unint64_t *)&unk_1008458C8, &qword_1008458B8, (uint64_t)&protocol conformance descriptor for Publishers.Debounce<A, B>);
  v33 = v46;
  v34 = Publisher<>.sink(receiveValue:)(sub_10032A694, v31, v46, v32);
  swift_release(v31);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v29, v33);
  v35 = v23
      + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_cancellables;
  swift_beginAccess(v35, v48, 33, 0);
  AnyCancellable.store(in:)(v35);
  swift_endAccess(v48);
  return swift_release(v34);
}

uint64_t sub_100328668(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  _BYTE v6[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    v5 = *(_BYTE *)(result
                  + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_isDebouncingEvent);
    *(_BYTE *)(v4
             + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_isDebouncingEvent) = 1;
    sub_100328D60(v5);
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_1003286D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _BYTE v9[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    sub_100328764();
    swift_release(v4);
  }
  swift_beginAccess(v2, &v8, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v6 = result;
    v7 = *(_BYTE *)(result
                  + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_isDebouncingEvent);
    *(_BYTE *)(v6
             + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_isDebouncingEvent) = 0;
    sub_100328D60(v7);
    return swift_release(v6);
  }
  return result;
}

void sub_100328764()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  id v13;
  _QWORD aBlock[5];
  _QWORD *v15;

  v1 = *v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (_QWORD *)((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = (void *)v0[5];
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    if ((*((_BYTE *)v0
          + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_isHandlingEvent) & 1) == 0)
    {
      *((_BYTE *)v0
      + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_isHandlingEvent) = 1;
      sub_100328914(0);
      v8 = objc_msgSend((id)v0[4], "newBackgroundContextWithAuthor:", RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandlerAuthor);
      v9 = swift_allocObject(&unk_1007EEE18, 24, 7);
      swift_weakInit(v9 + 16, v0);
      v10 = (_QWORD *)swift_allocObject(&unk_1007EEE40, 40, 7);
      v10[2] = v9;
      v10[3] = v8;
      v10[4] = v1;
      aBlock[4] = sub_10032A6C8;
      v15 = v10;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000094C8;
      aBlock[3] = &unk_1007EEE58;
      v11 = _Block_copy(aBlock);
      v12 = v15;
      v13 = v8;
      swift_release(v12);
      objc_msgSend(v13, "performBlock:", v11);
      _Block_release(v11);

    }
  }
  else
  {
    __break(1u);
  }
}

void sub_100328914(char a1)
{
  uint64_t *v1;
  uint64_t *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t MetatypeMetadata;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = v1;
  v3 = a1 & 1;
  v4 = *v2;
  v5 = type metadata accessor for OSSignpostID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*((unsigned __int8 *)v2
       + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_isHandlingEvent) != v3)
  {
    if (*((_BYTE *)v2
         + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_isHandlingEvent))
    {
      v9 = os_transaction_create("com.apple.remindd.RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler.handleEvent");
      v10 = *(uint64_t *)((char *)v2
                       + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_osTransactionForHandlingEvent);
      *(uint64_t *)((char *)v2
                 + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_osTransactionForHandlingEvent) = v9;
      v11 = swift_unknownObjectRelease(v10);
      v12 = static os_signpost_type_t.begin.getter(v11);
      if (qword_1008371D8 != -1)
        swift_once(&qword_1008371D8, sub_1003280EC);
      v13 = qword_100845AC8;
      static OSSignpostID.exclusive.getter();
      os_signpost(_:dso:log:name:signpostID:)(v12, &_mh_execute_header, v13, "RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler.handleEvent", 92, 2, v8);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if (qword_1008371D0 != -1)
        swift_once(&qword_1008371D0, sub_10032805C);
      v14 = type metadata accessor for Logger(0);
      v15 = sub_10001AAA8(v14, (uint64_t)qword_100845AB0);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.default.getter(v16);
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(12, -1);
        v19 = swift_slowAlloc(32, -1);
        v38 = v19;
        v39 = v4;
        *(_DWORD *)v18 = 136315138;
        MetatypeMetadata = swift_getMetatypeMetadata(v4);
        v21 = String.init<A>(describing:)(&v39, MetatypeMetadata);
        v23 = v22;
        v39 = sub_10001A820(v21, v22, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
        swift_bridgeObjectRelease(v23);
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s: Started handling event", v18, 0xCu);
        swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v19, -1, -1);
        swift_slowDealloc(v18, -1, -1);
      }

    }
    else
    {
      if (qword_1008371D0 != -1)
        swift_once(&qword_1008371D0, sub_10032805C);
      v24 = type metadata accessor for Logger(0);
      v25 = sub_10001AAA8(v24, (uint64_t)qword_100845AB0);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.default.getter(v26);
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc(12, -1);
        v29 = swift_slowAlloc(32, -1);
        *(_DWORD *)v28 = 136315138;
        v37[1] = v28 + 4;
        v38 = v29;
        v39 = v4;
        v30 = swift_getMetatypeMetadata(v4);
        v31 = String.init<A>(describing:)(&v39, v30);
        v33 = v32;
        v39 = sub_10001A820(v31, v32, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
        swift_bridgeObjectRelease(v33);
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s: Finished handling event", v28, 0xCu);
        swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v29, -1, -1);
        swift_slowDealloc(v28, -1, -1);
      }

      v34 = static os_signpost_type_t.end.getter();
      if (qword_1008371D8 != -1)
        swift_once(&qword_1008371D8, sub_1003280EC);
      v35 = qword_100845AC8;
      static OSSignpostID.exclusive.getter();
      os_signpost(_:dso:log:name:signpostID:)(v34, &_mh_execute_header, v35, "RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler.handleEvent", 92, 2, v8);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v36 = *(uint64_t *)((char *)v2
                       + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_osTransactionForHandlingEvent);
      *(uint64_t *)((char *)v2
                 + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_osTransactionForHandlingEvent) = 0;
      swift_unknownObjectRelease(v36);
    }
  }
}

void sub_100328D60(char a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t MetatypeMetadata;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *oslog;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (*((_BYTE *)v1
       + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_isDebouncingEvent) != (a1 & 1))
  {
    v2 = v1;
    v3 = *v1;
    if (*((_BYTE *)v1
         + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_isDebouncingEvent))
    {
      v4 = os_transaction_create("com.apple.remindd.RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler.debounceEvent");
      v5 = *(_QWORD *)((char *)v1
                     + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_osTransactionForDebouncingEvent);
      *(_QWORD *)((char *)v1
                + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_osTransactionForDebouncingEvent) = v4;
      swift_unknownObjectRelease(v5);
      if (qword_1008371D0 != -1)
        swift_once(&qword_1008371D0, sub_10032805C);
      v6 = type metadata accessor for Logger(0);
      v7 = sub_10001AAA8(v6, (uint64_t)qword_100845AB0);
      oslog = Logger.logObject.getter(v7);
      v8 = static os_log_type_t.default.getter(oslog);
      if (os_log_type_enabled(oslog, v8))
      {
        v9 = (uint8_t *)swift_slowAlloc(12, -1);
        v10 = swift_slowAlloc(32, -1);
        v27 = v10;
        v28 = v3;
        *(_DWORD *)v9 = 136315138;
        MetatypeMetadata = swift_getMetatypeMetadata(v3);
        v12 = String.init<A>(describing:)(&v28, MetatypeMetadata);
        v14 = v13;
        v28 = sub_10001A820(v12, v13, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
        swift_bridgeObjectRelease(v14);
        _os_log_impl((void *)&_mh_execute_header, oslog, v8, "%s: Started debouncing event", v9, 0xCu);
        swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v10, -1, -1);
        swift_slowDealloc(v9, -1, -1);

      }
      else
      {

      }
    }
    else
    {
      if (qword_1008371D0 != -1)
        swift_once(&qword_1008371D0, sub_10032805C);
      v15 = type metadata accessor for Logger(0);
      v16 = sub_10001AAA8(v15, (uint64_t)qword_100845AB0);
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.default.getter(v17);
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(12, -1);
        v20 = swift_slowAlloc(32, -1);
        v27 = v20;
        v28 = v3;
        *(_DWORD *)v19 = 136315138;
        v21 = swift_getMetatypeMetadata(v3);
        v22 = String.init<A>(describing:)(&v28, v21);
        v24 = v23;
        v28 = sub_10001A820(v22, v23, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
        swift_bridgeObjectRelease(v24);
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s: Finished debouncing event", v19, 0xCu);
        swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v20, -1, -1);
        swift_slowDealloc(v19, -1, -1);
      }

      v25 = *(_QWORD *)((char *)v2
                      + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_osTransactionForDebouncingEvent);
      *(_QWORD *)((char *)v2
                + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_osTransactionForDebouncingEvent) = 0;
      swift_unknownObjectRelease(v25);
    }
  }
}

uint64_t sub_1003290A8(uint64_t a1, id a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t MetatypeMetadata;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  unsigned __int32 v84;
  BOOL v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  __n128 v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  id v98;
  void *v99;
  id v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  os_log_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  void *v113;
  id v114;
  void *v115;
  _BYTE *v116;
  void (*v117)(_QWORD);
  void (*v118)(_BYTE *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v119)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v120;
  uint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  void *v129;
  _BYTE *v130;
  _BYTE *v131;
  uint64_t v132;
  unsigned int v133;
  _BYTE *v134;
  _BYTE *v135;
  Class isa;
  _BYTE *v137;
  id v138;
  uint64_t v139;
  NSObject *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  double v148;
  id v149;
  void *v150;
  id v151;
  id v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  _BYTE *v156;
  _BYTE *v157;
  uint64_t v158;
  char v159;
  void (*v160)(_BYTE *, uint64_t);
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  double v166;
  id v167;
  unsigned __int8 v168;
  unsigned int v169;
  unint64_t v170;
  id v171;
  id v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _BYTE v176[4];
  int v177;
  char *v178;
  __n128 v179;
  uint64_t v180;
  id v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _BYTE *v187;
  uint64_t v188;
  _BYTE *v189;
  _BYTE *v190;
  uint64_t v191;
  _BYTE *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  _BYTE *v196;
  _BYTE *v197;
  _QWORD *v198;
  os_log_t v199;
  _BYTE *v200;
  _BYTE *v201;
  _BYTE *v202;
  uint64_t v203;
  _BYTE *v204;
  _QWORD v205[3];
  char v206[4];
  unint64_t aBlock;
  _QWORD v208[4];
  uint64_t v209;
  _QWORD *v210;
  char v211[8];

  v194 = a3;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v176[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v196 = &v176[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v193 = sub_10001A630((uint64_t *)&unk_10083B370);
  __chkstk_darwin(v193);
  v197 = &v176[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = sub_10001A630((uint64_t *)&unk_100839C80);
  v14 = __chkstk_darwin(v13);
  v192 = &v176[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = __chkstk_darwin(v14);
  v190 = &v176[-v17];
  v18 = __chkstk_darwin(v16);
  v189 = &v176[-v19];
  v20 = __chkstk_darwin(v18);
  v200 = &v176[-v21];
  v22 = __chkstk_darwin(v20);
  v204 = &v176[-v23];
  __chkstk_darwin(v22);
  v25 = &v176[-v24];
  v26 = type metadata accessor for UUID(0);
  v203 = *(_QWORD *)(v26 - 8);
  v27 = __chkstk_darwin(v26);
  v202 = &v176[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v27);
  v201 = &v176[-v29];
  a1 += 16;
  swift_beginAccess(a1, v211, 0, 0);
  result = swift_weakLoadStrong(a1);
  v195 = result;
  if (!result)
    return result;
  v184 = v10;
  v185 = v9;
  v187 = v8;
  v188 = v6;
  v186 = v5;
  sub_10032A9E8();
  v31 = 0;
  v33 = v32;
  if (qword_1008371D0 != -1)
    swift_once(&qword_1008371D0, sub_10032805C);
  v34 = type metadata accessor for Logger(0);
  v35 = sub_10001AAA8(v34, (uint64_t)qword_100845AB0);
  v36 = swift_bridgeObjectRetain_n(v33, 2);
  v182 = v35;
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.default.getter(v37);
  v39 = v38;
  v40 = os_log_type_enabled(v37, v38);
  v181 = a2;
  v183 = v33;
  v180 = v13;
  if (v40)
  {
    v41 = swift_slowAlloc(22, -1);
    LODWORD(v199) = v39;
    v42 = v41;
    v198 = (_QWORD *)swift_slowAlloc(64, -1);
    v210 = v198;
    *(_DWORD *)v42 = 136315394;
    aBlock = v194;
    MetatypeMetadata = swift_getMetatypeMetadata(v194);
    v44 = String.init<A>(describing:)(&aBlock, MetatypeMetadata);
    v46 = v45;
    aBlock = sub_10001A820(v44, v45, (uint64_t *)&v210);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v208);
    swift_bridgeObjectRelease(v46);
    *(_WORD *)(v42 + 12) = 2082;
    v47 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    swift_bridgeObjectRetain(v33);
    v49 = Dictionary.description.getter(v48, v26, v26, v47);
    v51 = v50;
    swift_bridgeObjectRelease(v33);
    aBlock = sub_10001A820(v49, v51, (uint64_t *)&v210);
    a2 = v181;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v208);
    swift_bridgeObjectRelease_n(v33, 2);
    swift_bridgeObjectRelease(v51);
    _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v199, "%s: Did fetch expected mapping of 'mostRecentTargetTemplateIdentifierByCurrentUser' by 'sourceListIdentifier' {mapping: %{public}s}", (uint8_t *)v42, 0x16u);
    v52 = v198;
    swift_arrayDestroy(v198, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v42, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v33, 2);
  }
  v53 = v203;
  v54 = sub_10032B0E8((uint64_t)a2);
  v81 = v54;
  v82 = swift_bridgeObjectRetain_n(v54, 4);
  v83 = Logger.logObject.getter(v82);
  v84 = static os_log_type_t.default.getter(v83);
  v85 = os_log_type_enabled(v83, (os_log_type_t)v84);
  v86 = (_QWORD *)((unint64_t)v81 >> 62);
  v191 = v81;
  if (!v85)
  {

    swift_bridgeObjectRelease_n(v81, 4);
    goto LABEL_40;
  }
  v179.n128_u32[0] = v84;
  v31 = swift_slowAlloc(32, -1);
  v178 = (char *)swift_slowAlloc(64, -1);
  v210 = v178;
  *(_DWORD *)v31 = 136315650;
  aBlock = v194;
  v87 = swift_getMetatypeMetadata(v194);
  v88 = String.init<A>(describing:)(&aBlock, v87);
  v90 = v89;
  aBlock = sub_10001A820(v88, v89, (uint64_t *)&v210);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v208);
  swift_bridgeObjectRelease(v90);
  *(_WORD *)(v31 + 12) = 2050;
  if (v86)
    goto LABEL_86;
  v91 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease(v81);
    aBlock = v91;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v208);
    swift_bridgeObjectRelease(v81);
    *(_WORD *)(v31 + 22) = 2082;
    aBlock = (unint64_t)_swiftEmptyArrayStorage;
    if (v86)
    {
      v94 = v81 < 0 ? v81 : v81 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v81);
      v92 = _CocoaArrayWrapper.endIndex.getter(v94);
    }
    else
    {
      v92 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v81);
    }
    v199 = v83;
    v198 = v86;
    if (v92)
    {
      if (v92 < 1)
        __break(1u);
      v95 = 0;
      v96 = v81 & 0xC000000000000001;
      do
      {
        if (v96)
          v98 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v95, v81);
        else
          v98 = *(id *)(v81 + 8 * v95 + 32);
        v99 = v98;
        v100 = objc_msgSend(v98, "remObjectID");

        if (v100)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v101);
          v103 = *(_QWORD *)((aBlock & 0xFFFFFFFFFFFFFF8) + 0x10);
          v102 = *(_QWORD *)((aBlock & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v103 >= v102 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v102 > 1);
          v97 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v103, v100);
          specialized Array._endMutation()(v97);
          v81 = v191;
        }
        ++v95;
      }
      while (v92 != v95);
      swift_bridgeObjectRelease(v81);
      v104 = (_QWORD *)aBlock;
    }
    else
    {
      swift_bridgeObjectRelease(v81);
      v104 = _swiftEmptyArrayStorage;
    }
    v105 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    v83 = Array.description.getter(v104, v105);
    v107 = v106;
    swift_bridgeObjectRelease(v104);
    aBlock = sub_10001A820((uint64_t)v83, v107, (uint64_t *)&v210);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v208);
    swift_bridgeObjectRelease_n(v81, 2);
    swift_bridgeObjectRelease(v107);
    v108 = v199;
    _os_log_impl((void *)&_mh_execute_header, v199, (os_log_type_t)v179.n128_u8[0], "%s: Did fetch lists shared to current user {count: %{public}ld, objectIDs: %{public}s)}", (uint8_t *)v31, 0x20u);
    v109 = v178;
    swift_arrayDestroy(v178, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v109, -1, -1);
    swift_slowDealloc(v31, -1, -1);

    v53 = v203;
    v86 = v198;
LABEL_40:
    if (v86)
      break;
    v110 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v110)
      goto LABEL_81;
LABEL_42:
    if (v110 >= 1)
    {
      v111 = 0;
      v198 = (_QWORD *)(v81 & 0xC000000000000001);
      v93.n128_u64[0] = 136315650;
      v179 = v93;
      v178 = (char *)&type metadata for Any + 8;
      v199 = (os_log_t)v110;
      while (1)
      {
        v112 = v198
             ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v111, v81)
             : *(id *)(v81 + 8 * v111 + 32);
        v113 = v112;
        v114 = objc_msgSend(v112, "identifier");
        if (!v114)
          break;
        v115 = v114;
        v116 = v202;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v114);

        v117 = *(void (**)(_QWORD))(v53 + 32);
        ((void (*)(_BYTE *, _BYTE *, uint64_t))v117)(v25, v116, v26);
        v118 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v53 + 56);
        v118(v25, 0, 1, v26);
        v119 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v53 + 48);
        if (v119(v25, 1, v26) == 1)
          goto LABEL_45;
        v120 = v25;
        v121 = (uint64_t)v201;
        v122 = v120;
        v117(v201);
        v123 = v183;
        if (*(_QWORD *)(v183 + 16) && (v124 = sub_1002C65F8(v121), (v125 & 1) != 0))
        {
          (*(void (**)(_BYTE *, unint64_t, uint64_t))(v53 + 16))(v204, *(_QWORD *)(v123 + 56) + *(_QWORD *)(v53 + 72) * v124, v26);
          v126 = 0;
        }
        else
        {
          v126 = 1;
        }
        v25 = v122;
        v127 = 1;
        v118(v204, v126, 1, v26);
        v128 = objc_msgSend(v113, "mostRecentTargetTemplateIdentifierByCurrentUser");
        if (v128)
        {
          v129 = v128;
          v130 = v200;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v128);

          v127 = 0;
        }
        else
        {
          v130 = v200;
        }
        v118(v130, v127, 1, v26);
        v131 = v197;
        v132 = (uint64_t)&v197[*(int *)(v193 + 48)];
        sub_10011D420((uint64_t)v130, (uint64_t)v197);
        sub_10011D420((uint64_t)v204, v132);
        if (v119(v131, 1, v26) == 1)
        {
          sub_10000882C((uint64_t)v130, (uint64_t *)&unk_100839C80);
          v133 = v119((_BYTE *)v132, 1, v26);
          v81 = v191;
          if (v133 != 1)
            goto LABEL_64;
          sub_10000882C((uint64_t)v131, (uint64_t *)&unk_100839C80);
        }
        else
        {
          v134 = v189;
          sub_10011D420((uint64_t)v131, (uint64_t)v189);
          if (v119((_BYTE *)v132, 1, v26) == 1)
          {
            sub_10000882C((uint64_t)v200, (uint64_t *)&unk_100839C80);
            (*(void (**)(_BYTE *, uint64_t))(v203 + 8))(v134, v26);
LABEL_64:
            sub_10000882C((uint64_t)v131, (uint64_t *)&unk_10083B370);
LABEL_65:
            v135 = v190;
            sub_10011D420((uint64_t)v204, (uint64_t)v190);
            if (v119(v135, 1, v26) == 1)
            {
              isa = 0;
            }
            else
            {
              isa = UUID._bridgeToObjectiveC()().super.isa;
              (*(void (**)(_BYTE *, uint64_t))(v203 + 8))(v135, v26);
            }
            v141 = (uint64_t)v192;
            objc_msgSend(v113, "setMostRecentTargetTemplateIdentifierByCurrentUser:", isa);

            v137 = v204;
            sub_10011D420((uint64_t)v204, v141);
            v138 = v113;
            v139 = v141;
            v140 = Logger.logObject.getter(v138);
            LODWORD(v141) = static os_log_type_t.default.getter(v140);
            if (os_log_type_enabled(v140, (os_log_type_t)v141))
            {
              v142 = swift_slowAlloc(32, -1);
              v143 = (_QWORD *)swift_slowAlloc(96, -1);
              v210 = v143;
              *(_DWORD *)v142 = v179.n128_u32[0];
              aBlock = v194;
              v144 = swift_getMetatypeMetadata(v194);
              v145 = String.init<A>(describing:)(&aBlock, v144);
              v147 = v146;
              *(_QWORD *)(v142 + 4) = sub_10001A820(v145, v146, (uint64_t *)&v210);
              *(_QWORD *)&v148 = swift_bridgeObjectRelease(v147).n128_u64[0];
              *(_WORD *)(v142 + 12) = 2082;
              v149 = objc_msgSend(v138, "remObjectID", v148);
              if (v149)
              {
                v150 = v149;
                v151 = objc_msgSend(v149, "description");
                v177 = v141;
                v141 = (uint64_t)v143;
                v152 = v151;

                v153 = static String._unconditionallyBridgeFromObjectiveC(_:)(v152);
                v155 = v154;

                v143 = (_QWORD *)v141;
                LOBYTE(v141) = v177;
              }
              else
              {
                v155 = 0xE300000000000000;
                v153 = 7104878;
              }
              *(_QWORD *)(v142 + 14) = sub_10001A820(v153, v155, (uint64_t *)&v210);

              swift_bridgeObjectRelease(v155);
              *(_WORD *)(v142 + 22) = 2082;
              v161 = (uint64_t)v192;
              v162 = Optional.descriptionOrNil.getter(v180);
              v164 = v163;
              *(_QWORD *)(v142 + 24) = sub_10001A820(v162, v163, (uint64_t *)&v210);
              swift_bridgeObjectRelease(v164);
              sub_10000882C(v161, (uint64_t *)&unk_100839C80);
              _os_log_impl((void *)&_mh_execute_header, v140, (os_log_type_t)v141, "%s: Updated mostRecentTargetTemplateIdentifierByCurrentUser of shared-to-me list {list: %{public}s, mostRecentTargetTemplateIdentifierByCurrentUser: %{public}s}", (uint8_t *)v142, 0x20u);
              swift_arrayDestroy(v143, 3, v178);
              swift_slowDealloc(v143, -1, -1);
              swift_slowDealloc(v142, -1, -1);

              v156 = v204;
            }
            else
            {

              sub_10000882C(v139, (uint64_t *)&unk_100839C80);
              v156 = v137;
            }
            sub_10000882C((uint64_t)v156, (uint64_t *)&unk_100839C80);
            v53 = v203;
            (*(void (**)(_BYTE *, uint64_t))(v203 + 8))(v201, v26);
            v81 = v191;
            goto LABEL_46;
          }
          v157 = v202;
          ((void (*)(_BYTE *, uint64_t, uint64_t))v117)(v202, v132, v26);
          v158 = sub_10009FC50((unint64_t *)&qword_10083B380, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v159 = dispatch thunk of static Equatable.== infix(_:_:)(v134, v157, v26, v158);
          v160 = *(void (**)(_BYTE *, uint64_t))(v203 + 8);
          v160(v157, v26);
          sub_10000882C((uint64_t)v200, (uint64_t *)&unk_100839C80);
          v160(v134, v26);
          sub_10000882C((uint64_t)v197, (uint64_t *)&unk_100839C80);
          v81 = v191;
          if ((v159 & 1) == 0)
            goto LABEL_65;
        }

        sub_10000882C((uint64_t)v204, (uint64_t *)&unk_100839C80);
        v53 = v203;
        (*(void (**)(_BYTE *, uint64_t))(v203 + 8))(v201, v26);
LABEL_46:
        if (v199 == (os_log_t)++v111)
          goto LABEL_81;
      }
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v53 + 56))(v25, 1, 1, v26);
LABEL_45:

      sub_10000882C((uint64_t)v25, (uint64_t *)&unk_100839C80);
      goto LABEL_46;
    }
    __break(1u);
LABEL_86:
    if (v81 < 0)
      v175 = v81;
    else
      v175 = v81 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v81);
    v91 = _CocoaArrayWrapper.endIndex.getter(v175);
    swift_bridgeObjectRelease(v81);
  }
  if (v81 < 0)
    v165 = v81;
  else
    v165 = v81 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v81);
  v110 = _CocoaArrayWrapper.endIndex.getter(v165);
  v93 = swift_bridgeObjectRelease(v81);
  if (v110)
    goto LABEL_42;
LABEL_81:
  swift_bridgeObjectRelease(v183);
  *(_QWORD *)&v166 = swift_bridgeObjectRelease(v81).n128_u64[0];
  v167 = v181;
  v168 = objc_msgSend(v181, "hasChanges", v166);
  v68 = v188;
  v69 = v187;
  if ((v168 & 1) != 0)
  {
    aBlock = 0;
    v169 = objc_msgSend(v167, "save:", &aBlock);
    v170 = aBlock;
    if (v169)
    {
      v171 = (id)aBlock;
    }
    else
    {
      v172 = (id)aBlock;
      v173 = _convertNSErrorToError(_:)(v170);

      swift_willThrow(v174);
      if (qword_1008371D0 != -1)
        swift_once(&qword_1008371D0, sub_10032805C);
      v55 = type metadata accessor for Logger(0);
      sub_10001AAA8(v55, (uint64_t)qword_100845AB0);
      swift_errorRetain(v173);
      v56 = swift_errorRetain(v173);
      v57 = Logger.logObject.getter(v56);
      v58 = static os_log_type_t.default.getter(v57);
      if (os_log_type_enabled(v57, v58))
      {
        v59 = swift_slowAlloc(22, -1);
        v60 = (_QWORD *)swift_slowAlloc(64, -1);
        v210 = v60;
        *(_DWORD *)v59 = 136315394;
        aBlock = v194;
        v61 = swift_getMetatypeMetadata(v194);
        v62 = String.init<A>(describing:)(&aBlock, v61);
        v64 = v63;
        aBlock = sub_10001A820(v62, v63, (uint64_t *)&v210);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v208);
        swift_bridgeObjectRelease(v64);
        *(_WORD *)(v59 + 12) = 2082;
        swift_getErrorValue(v173, v206, v205);
        v65 = Error.rem_errorDescription.getter(v205[1], v205[2]);
        v67 = v66;
        aBlock = sub_10001A820(v65, v66, (uint64_t *)&v210);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v208);
        swift_bridgeObjectRelease(v67);
        swift_errorRelease(v173);
        swift_errorRelease(v173);
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "%s: Failed to handle event {error: %{public}s}", (uint8_t *)v59, 0x16u);
        swift_arrayDestroy(v60, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v60, -1, -1);
        swift_slowDealloc(v59, -1, -1);

        swift_errorRelease(v173);
      }
      else
      {
        swift_errorRelease(v173);
        swift_errorRelease(v173);
        swift_errorRelease(v173);

      }
      v68 = v188;
      v69 = v187;
    }
  }
  v70 = v195;
  v71 = swift_allocObject(&unk_1007EEE18, 24, 7);
  swift_weakInit(v71 + 16, v70);
  v208[3] = sub_10032B0E0;
  v209 = v71;
  aBlock = (unint64_t)_NSConcreteStackBlock;
  v208[0] = 1107296256;
  v208[1] = sub_1000094C8;
  v208[2] = &unk_1007EEE80;
  v72 = _Block_copy(&aBlock);
  v73 = swift_retain(v71);
  v74 = v196;
  static DispatchQoS.unspecified.getter(v73);
  v210 = _swiftEmptyArrayStorage;
  v75 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v76 = sub_10001A630((uint64_t *)&unk_100838000);
  v77 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  v78 = v76;
  v79 = v186;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v210, v78, v77, v186, v75);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v74, v69, v72);
  _Block_release(v72);
  (*(void (**)(_BYTE *, uint64_t))(v68 + 8))(v69, v79);
  (*(void (**)(_BYTE *, uint64_t))(v184 + 8))(v74, v185);
  swift_release(v70);
  v80 = v209;
  swift_release(v71);
  return swift_release(v80);
}

uint64_t sub_10032A404(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  _BYTE v10[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    v4 = *(_BYTE *)(result
                  + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_isHandlingEvent);
    *(_BYTE *)(v3
             + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_isHandlingEvent) = 0;
    sub_100328914(v4);
    Strong = swift_unknownObjectWeakLoadStrong(v3 + 16, v5);
    if (Strong)
    {
      v7 = Strong;
      v8 = *(_QWORD *)(v3 + 24);
      ObjectType = swift_getObjectType(Strong);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 8))(v3, ObjectType, v8);
      swift_release(v3);
      return swift_unknownObjectRelease(v7);
    }
    else
    {
      return swift_release(v3);
    }
  }
  return result;
}

uint64_t sub_10032A4B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100008EFC(v0 + 16);

  v1 = v0
     + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_debounceInterval;
  v2 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_notificationCenter));
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease(*(_QWORD *)(v0
                                       + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_osTransactionForHandlingEvent));
  swift_unknownObjectRelease(*(_QWORD *)(v0
                                       + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_osTransactionForDebouncingEvent));
  return v0;
}

uint64_t sub_10032A550()
{
  uint64_t v0;

  sub_10032A4B4();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10032A574()
{
  return type metadata accessor for RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler(0);
}

uint64_t type metadata accessor for RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler(uint64_t a1)
{
  uint64_t result;

  result = qword_100845B30;
  if (!qword_100845B30)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler);
  return result;
}

uint64_t sub_10032A5B8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[10];

  v4[0] = &unk_1006B4D98;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[6] = &unk_1006B4DB0;
    v4[7] = &unk_1006B4DB0;
    v4[8] = &unk_1006B4DC8;
    v4[9] = &unk_1006B4DC8;
    result = swift_updateClassMetadata2(a1, 256, 10, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10032A668()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10032A68C(uint64_t a1)
{
  uint64_t v1;

  return sub_100328668(a1, v1);
}

uint64_t sub_10032A694(uint64_t a1)
{
  uint64_t v1;

  return sub_1003286D0(a1, v1);
}

uint64_t sub_10032A69C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10032A6C8()
{
  uint64_t v0;

  return sub_1003290A8(*(_QWORD *)(v0 + 16), *(id *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_10032A6D4()
{
  uint64_t KeyPath;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  Class isa;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;

  KeyPath = swift_getKeyPath(&unk_1006B4E88);
  v1 = sub_100341904(KeyPath);
  v2 = swift_release(KeyPath);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v2);
  v4 = _swiftEmptyArrayStorage[2];
  v3 = _swiftEmptyArrayStorage[3];
  if (v4 >= v3 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1);
  v5 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, v1);
  specialized Array._endMutation()(v5);
  v6 = sub_1000153F4(0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
  v8 = _swiftEmptyArrayStorage[2];
  v7 = _swiftEmptyArrayStorage[3];
  if (v8 >= v7 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1);
  v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v6);
  specialized Array._endMutation()(v9);
  v10 = (void *)sub_10000D2BC(_swiftEmptyArrayStorage);
  v11 = type metadata accessor for REMCDTemplate();
  v12 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v13 = objc_msgSend((id)swift_getObjCClassFromMetadata(v11), "entity");
  objc_msgSend(v12, "setEntity:", v13);

  objc_msgSend(v12, "setAffectedStores:", 0);
  objc_msgSend(v12, "setPredicate:", v10);

  v14 = sub_10001A630((uint64_t *)&unk_100839E80);
  v15 = swift_allocObject(v14, 96, 7);
  *(_OWORD *)(v15 + 16) = xmmword_1006A3C40;
  *(_QWORD *)(v15 + 32) = 0x696669746E656469;
  *(_QWORD *)(v15 + 40) = 0xEA00000000007265;
  *(_QWORD *)(v15 + 88) = &type metadata for String;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  *(_QWORD *)(v15 + 64) = 0x694C656372756F73;
  *(_QWORD *)(v15 + 72) = 0xEF4C525544497473;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v12, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease(v15).n128_f64[0]);

  v17 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v18 = swift_allocObject(v17, 40, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1006A7330;
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  v19 = swift_getKeyPath(&unk_1006B4EC0);
  v20 = NSSortDescriptor.init<A, B>(keyPath:ascending:)(v19, 1);
  *(_QWORD *)(v18 + 32) = v20;
  specialized Array._endMutation()(v20);
  v21 = v18;
  v22 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v12, "setSortDescriptors:", v22, swift_bridgeObjectRelease(v21).n128_f64[0]);

  v23 = NSManagedObjectContext.fetch<A>(_:)(v12, v11);
  return v23;
}

void sub_10032A9E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  id v36;
  void *v37;
  id v38;
  void *v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  void (*v41)(uint64_t, _QWORD, uint64_t, uint64_t);
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  id v43;
  void *v44;
  char *v45;
  char *v46;
  void (*v47)(char *, char *, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  NSURL *v55;
  void *v56;
  void *v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  char v64;
  char v65;
  __n128 v66;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v68;
  unint64_t v69;
  void (*v70)(unint64_t, uint64_t);
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int64_t v74;
  __n128 v75;
  uint64_t v76;
  _QWORD *v77;
  char v78;
  __n128 v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  id v84;
  char *v85;
  _QWORD *v86;
  void (*v87)(char *, unint64_t, uint64_t);
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  void (*v95)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;

  v0 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v0);
  v96 = (char *)&v82 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for URL(0);
  v97 = *(_QWORD *)(v2 - 8);
  v98 = v2;
  v3 = __chkstk_darwin(v2);
  v91 = (char *)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v92 = (char *)&v82 - v5;
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v82 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v82 - v13;
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v82 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v82 - v23;
  v25 = v102;
  v26 = sub_10032A6D4();
  v88 = v25;
  if (v25)
  {
    swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
    return;
  }
  v27 = v26;
  v99 = v24;
  v93 = v22;
  v94 = v15;
  v85 = v19;
  v89 = v14;
  v90 = v16;
  v83 = v12;
  if ((unint64_t)v26 >> 62)
  {
    if (v26 < 0)
      v81 = v26;
    else
      v81 = v26 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v26);
    v28 = _CocoaArrayWrapper.endIndex.getter(v81);
    swift_bridgeObjectRelease(v27);
  }
  else
  {
    v28 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v29 = (uint64_t)v93;
  v30 = v94;
  v31 = v90;
  if (v28)
  {
    v82 = v9;
    if (v28 >= 1)
    {
      v32 = 0;
      v100 = v27 & 0xC000000000000001;
      v86 = &_swiftEmptyDictionarySingleton;
      v33 = (uint64_t)v89;
      v101 = v28;
      v102 = v27;
      while (1)
      {
        v36 = v100
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v32, v27)
            : *(id *)(v27 + 8 * v32 + 32);
        v37 = v36;
        v38 = objc_msgSend(v36, "identifier", v82);
        if (!v38)
          break;
        v39 = v38;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v38);

        v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32);
        v40(v33, v29, v30);
        v41 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56);
        v41(v33, 0, 1, v30);
        v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
        if (v42(v33, 1, v30) == 1)
          goto LABEL_9;
        v95 = v41;
        v40((uint64_t)v99, v33, v30);
        v43 = objc_msgSend(v37, "sourceListIDURL");
        if (v43)
        {
          v44 = v43;
          v87 = (void (*)(char *, unint64_t, uint64_t))v40;
          v45 = v91;
          static URL._unconditionallyBridgeFromObjectiveC(_:)(v43);

          v46 = v96;
          v47 = *(void (**)(char *, char *, uint64_t))(v97 + 32);
          v48 = v45;
          v49 = v97;
          v50 = v98;
          v47(v96, v48, v98);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v50);
          v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48);
          v52 = v50;
          v29 = (uint64_t)v93;
          v30 = v94;
          v33 = (uint64_t)v89;
          v31 = v90;
          if (v51(v46, 1, v52) != 1)
          {
            v53 = v46;
            v54 = v98;
            v47(v92, v53, v98);
            URL._bridgeToObjectiveC()(v55);
            v57 = v56;
            v58 = objc_msgSend((id)objc_opt_self(REMObjectID), "objectIDWithURL:", v56);

            if (v58)
            {
              v84 = v58;
              v59 = objc_msgSend(v58, "uuid");
              v60 = (uint64_t)v85;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)(v59);

              v61 = (uint64_t)v83;
              v30 = v94;
              (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v83, v99, v94);
              v95(v61, 0, 1, v30);
              if (v42(v61, 1, v30) == 1)
              {
                sub_10000882C(v61, (uint64_t *)&unk_100839C80);
                v62 = v86;
                swift_bridgeObjectRetain(v86);
                v63 = sub_1002C65F8(v60);
                v65 = v64;
                v66 = swift_bridgeObjectRelease(v62);
                if ((v65 & 1) != 0)
                {
                  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v62);
                  v103 = v62;
                  v29 = (uint64_t)v93;
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  {
                    sub_1002D712C();
                    v62 = v103;
                  }
                  v68 = v62[6];
                  v69 = *(_QWORD *)(v31 + 72) * v63;
                  v70 = *(void (**)(unint64_t, uint64_t))(v31 + 8);
                  v70(v68 + v69, v30);
                  v86 = (_QWORD *)v63;
                  v71 = (uint64_t)v103;
                  v72 = v103[7] + v69;
                  v73 = (uint64_t)v82;
                  v87(v82, v72, v30);
                  v74 = (int64_t)v86;
                  v86 = (_QWORD *)v71;
                  sub_10028A1C4(v74, v71);
                  v75 = swift_bridgeObjectRelease(0x8000000000000000);
                  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))v95)(v73, 0, 1, v30, v75);
                }
                else
                {
                  v73 = (uint64_t)v82;
                  ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v95)(v82, 1, 1, v30, v66);
                  v70 = *(void (**)(unint64_t, uint64_t))(v31 + 8);
                  v29 = (uint64_t)v93;
                }
                v70((unint64_t)v85, v30);
                sub_10000882C(v73, (uint64_t *)&unk_100839C80);
              }
              else
              {
                v76 = (uint64_t)v93;
                v87(v93, v61, v30);
                v77 = v86;
                v78 = swift_isUniquelyReferenced_nonNull_native(v86);
                v103 = v77;
                sub_10028C430(v76, v60, v78);
                v86 = v103;
                v79 = swift_bridgeObjectRelease(0x8000000000000000);
                v70 = *(void (**)(unint64_t, uint64_t))(v31 + 8);
                v80 = v60;
                v29 = v76;
                ((void (*)(uint64_t, uint64_t, __n128))v70)(v80, v30, v79);
              }

              (*(void (**)(char *, uint64_t))(v97 + 8))(v92, v98);
              v70((unint64_t)v99, v30);
            }
            else
            {

              (*(void (**)(char *, uint64_t))(v97 + 8))(v92, v54);
              v30 = v94;
              (*(void (**)(char *, uint64_t))(v31 + 8))(v99, v94);
            }
            goto LABEL_11;
          }
        }
        else
        {
          v46 = v96;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v97 + 56))(v96, 1, 1, v98);
        }

        (*(void (**)(char *, uint64_t))(v31 + 8))(v99, v30);
        v34 = (uint64_t)v46;
        v35 = (uint64_t *)&unk_100839C70;
LABEL_10:
        sub_10000882C(v34, v35);
LABEL_11:
        ++v32;
        v27 = v102;
        if (v101 == v32)
        {
          swift_bridgeObjectRelease(v102);
          return;
        }
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56))(v33, 1, 1, v30);
LABEL_9:

      v34 = v33;
      v35 = (uint64_t *)&unk_100839C80;
      goto LABEL_10;
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease(v27);
  }
}

uint64_t sub_10032B0E0()
{
  uint64_t v0;

  return sub_10032A404(v0);
}

uint64_t sub_10032B0E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Class isa;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = _s10PredicatesOMa_1(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v7 = swift_allocObject(v6, 48, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1006A8550;
  *(_QWORD *)(v7 + 32) = swift_getKeyPath(&unk_1006B4DF8);
  KeyPath = swift_getKeyPath(&unk_1006B4E50);
  *(_QWORD *)(v7 + 40) = KeyPath;
  v26 = v7;
  specialized Array._endMutation()(KeyPath);
  v9 = v26;
  swift_storeEnumTagMultiPayload(v5, v3, 26);
  if ((unint64_t)v9 >> 62)
  {
    if (v9 < 0)
      v23 = v9;
    else
      v23 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v24 = sub_10001A630(&qword_100843760);
    v11 = _bridgeCocoaArray<A>(_:)(v23, v24);
    swift_bridgeObjectRelease_n(v9, 2);
    v9 = v11;
  }
  else
  {
    swift_bridgeObjectRetain(v9);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v10);
    swift_bridgeObjectRelease(v9);
    v11 = v9;
  }
  sub_10000A3AC();
  v13 = (void *)v12;
  v14 = (void *)sub_100358F8C(v11, 0, 0, v12);

  if (qword_1008376D0 != -1)
    swift_once(&qword_1008376D0, sub_1004A7024);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v14, "setSortDescriptors:", isa);

  v16 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v17 = a1;
  v18 = NSManagedObjectContext.fetch<A>(_:)(v14, v16);
  if (!v1)
  {
    v19 = v18;
    v26 = v18;
    v20 = sub_10001A630(&qword_10083FF50);
    v21 = sub_1000A5F84((unint64_t *)&qword_10083A838, &qword_10083FF50, (uint64_t)&protocol conformance descriptor for [A]);
    v17 = Sequence.elements<A>(ofType:)(v16, v20, v16, v21);
    swift_bridgeObjectRelease(v19);
  }

  sub_1000EC49C((uint64_t)v5);
  swift_bridgeObjectRelease(v9);
  return v17;
}

const char *sub_10032B394()
{
  return "mostRecentTargetTemplateIdentifierByCurrentUser";
}

uint64_t *sub_10032B3C0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *((_QWORD *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    else
    {
      v13 = *(_QWORD *)v10;
      sub_1000A70E4(*(_QWORD *)v10, *((_QWORD *)v10 + 1));
      *(_QWORD *)v9 = v13;
      *((_QWORD *)v9 + 1) = v11;
    }
  }
  return a1;
}

uint64_t sub_10032B478(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  unint64_t v7;

  v4 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v6 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  v7 = v6[1];
  if (v7 >> 60 != 15)
    return sub_1000A71C8(*v6, v7);
  return result;
}

uint64_t sub_10032B4DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    sub_1000A70E4(*v9, v9[1]);
    *(_QWORD *)v8 = v11;
    *(_QWORD *)(v8 + 8) = v10;
  }
  return a1;
}

uint64_t sub_10032B568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  if (*(_QWORD *)(a1 + v7 + 8) >> 60 != 15)
  {
    if (v10 >> 60 != 15)
    {
      v12 = *v9;
      sub_1000A70E4(v12, v10);
      v13 = *v8;
      v14 = v8[1];
      *v8 = v12;
      v8[1] = v10;
      sub_1000A71C8(v13, v14);
      return a1;
    }
    sub_1000EA68C((uint64_t)v8);
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    return a1;
  }
  v11 = *v9;
  sub_1000A70E4(v11, v10);
  *v8 = v11;
  v8[1] = v10;
  return a1;
}

uint64_t sub_10032B638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10032B694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a1 + v7 + 8);
  if (v10 >> 60 != 15)
  {
    v11 = v9[1];
    if (v11 >> 60 != 15)
    {
      v12 = *v8;
      *v8 = *v9;
      v8[1] = v11;
      sub_1000A71C8(v12, v10);
      return a1;
    }
    sub_1000EA68C((uint64_t)v8);
  }
  *(_OWORD *)v8 = *(_OWORD *)v9;
  return a1;
}

uint64_t sub_10032B734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10032B740);
}

uint64_t sub_10032B740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
  v10 = ((4 * (_DWORD)v9) & 0xC) == 0;
  v11 = ((4 * v9) & 0xC | (v9 >> 2)) ^ 0xF;
  if (v10)
    return 0;
  else
    return v11;
}

uint64_t sub_10032B7C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10032B7D4);
}

uint64_t sub_10032B7D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;

  result = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  v10 = (_QWORD *)(a1 + *(int *)(a4 + 20));
  *v10 = 0;
  v10[1] = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
  return result;
}

uint64_t type metadata accessor for RDSavedURLAttachment(uint64_t a1)
{
  uint64_t result;

  result = qword_100845C58;
  if (!qword_100845C58)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDSavedURLAttachment);
  return result;
}

uint64_t sub_10032B898(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1006B4F18;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10032B908(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  char v17;
  __int128 v18;

  v3 = v1;
  v5 = sub_10001A630(&qword_100845CA8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000A388(a1, v9);
  v11 = sub_10032BEC4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RDSavedURLAttachment.CodingKeys, &type metadata for RDSavedURLAttachment.CodingKeys, v11, v9, v10);
  LOBYTE(v18) = 0;
  v12 = type metadata accessor for URL(0);
  v13 = sub_10032BF88(&qword_100845CB0, (uint64_t)&protocol conformance descriptor for URL);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v18, v5, v12, v13);
  if (!v2)
  {
    v18 = *(_OWORD *)(v3 + *(int *)(type metadata accessor for RDSavedURLAttachment(0) + 20));
    v17 = 1;
    v14 = sub_1000EAC40();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v18, &v17, v5, &type metadata for Data, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10032BA68@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  char v31;

  v25 = a2;
  v29 = type metadata accessor for URL(0);
  v26 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v27 = (uint64_t *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = sub_10001A630(&qword_100845C90);
  v5 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RDSavedURLAttachment(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_10000A388(a1, v12);
  v13 = sub_10032BEC4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RDSavedURLAttachment.CodingKeys, &type metadata for RDSavedURLAttachment.CodingKeys, v13, v12, v11);
  if (v2)
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  v23 = a1;
  v24 = v5;
  v14 = (uint64_t)v10;
  v15 = v26;
  LOBYTE(v30) = 0;
  v16 = sub_10032BF88(&qword_100845CA0, (uint64_t)&protocol conformance descriptor for URL);
  v18 = v27;
  v17 = v28;
  v19 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v27, v29, &v30, v28, v29, v16);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v15 + 32))(v14, v18, v19);
  v31 = 1;
  v20 = sub_1000EABB4();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v30, &type metadata for Data, &v31, v17, &type metadata for Data, v20);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v17);
  *(_OWORD *)(v14 + *(int *)(v8 + 20)) = v30;
  sub_10032BF08(v14, v25);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v23);
  return sub_10032BF4C(v14);
}

uint64_t sub_10032BCE8()
{
  _BYTE *v0;

  if (*v0)
    return 0x617461646174656DLL;
  else
    return 7107189;
}

uint64_t sub_10032BD1C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10032C16C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10032BD40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10032BEC4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10032BD68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10032BEC4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10032BD94@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10032BA68(a1, a2);
}

uint64_t sub_10032BDA8(_QWORD *a1)
{
  return sub_10032B908(a1);
}

BOOL sub_10032BDBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;

  if ((static URL.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v4 = *(int *)(type metadata accessor for RDSavedURLAttachment(0) + 20);
  v5 = a1 + v4;
  v6 = *(_QWORD *)(a1 + v4);
  v7 = *(_QWORD *)(v5 + 8);
  v8 = (uint64_t *)(a2 + v4);
  v9 = *v8;
  v10 = v8[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 == 15)
      return 1;
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
LABEL_6:
    sub_1000A70D0(v6, *(_QWORD *)(v5 + 8));
    sub_1000A70D0(v9, v10);
    sub_1000A71B4(v6, v7);
    sub_1000A71B4(v9, v10);
    return 0;
  }
  sub_1000A70D0(v6, *(_QWORD *)(v5 + 8));
  sub_1000A70D0(v9, v10);
  sub_100140BAC(v6, v7);
  v12 = v11;
  sub_1000A71B4(v9, v10);
  sub_1000A71B4(v6, v7);
  return (v12 & 1) != 0;
}

unint64_t sub_10032BEC4()
{
  unint64_t result;

  result = qword_100845C98;
  if (!qword_100845C98)
  {
    result = swift_getWitnessTable(&unk_1006B506C, &type metadata for RDSavedURLAttachment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100845C98);
  }
  return result;
}

uint64_t sub_10032BF08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RDSavedURLAttachment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10032BF4C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RDSavedURLAttachment(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10032BF88(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RDSavedURLAttachment.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10032C014 + 4 * byte_1006B4EF5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10032C048 + 4 * byte_1006B4EF0[v4]))();
}

uint64_t sub_10032C048(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10032C050(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10032C058);
  return result;
}

uint64_t sub_10032C064(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10032C06CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10032C070(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10032C078(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDSavedURLAttachment.CodingKeys()
{
  return &type metadata for RDSavedURLAttachment.CodingKeys;
}

unint64_t sub_10032C098()
{
  unint64_t result;

  result = qword_100845CB8;
  if (!qword_100845CB8)
  {
    result = swift_getWitnessTable(&unk_1006B5044, &type metadata for RDSavedURLAttachment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100845CB8);
  }
  return result;
}

unint64_t sub_10032C0E0()
{
  unint64_t result;

  result = qword_100845CC0;
  if (!qword_100845CC0)
  {
    result = swift_getWitnessTable(&unk_1006B4FB4, &type metadata for RDSavedURLAttachment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100845CC0);
  }
  return result;
}

unint64_t sub_10032C128()
{
  unint64_t result;

  result = qword_100845CC8;
  if (!qword_100845CC8)
  {
    result = swift_getWitnessTable(&unk_1006B4FDC, &type metadata for RDSavedURLAttachment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100845CC8);
  }
  return result;
}

uint64_t sub_10032C16C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 7107189 && a2 == 0xE300000000000000)
  {
    v5 = 0xE300000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7107189, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x617461646174656DLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x617461646174656DLL, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10032C24C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100845CD0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100845CD0);
  if (qword_100837680 != -1)
    swift_once(&qword_100837680, sub_1004A196C);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872160);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10032C2DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = type metadata accessor for URL(0);
  __chkstk_darwin(v3);
  if (!*(_QWORD *)(*(_QWORD *)(v1
                              + OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_postMigrationDataUpdateByModelVersionIdentifier)
                  + 16))
    return 0;
  v4 = sub_10032C5B4(a1);
  if (!v5)
    return 0;
  sub_10032C694((uint64_t)v4, v5);
  v7 = v6;
  swift_bridgeObjectRelease();
  if (!v7)
    return 0;
  swift_bridgeObjectRelease();
  return 1;
}

char *sub_10032C5B4(uint64_t a1)
{
  uint64_t v1;
  char *result;
  char *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];
  uint64_t v8;

  result = sub_10032E73C(a1);
  if (!v1)
  {
    v3 = result;
    v4 = objc_msgSend(result, "versionIdentifiers");
    v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v4, &type metadata for AnyHashable, &protocol witness table for AnyHashable);

    sub_10027BAF8(v5, (uint64_t)v7);
    swift_bridgeObjectRelease();

    if (v8)
    {
      if (swift_dynamicCast(&v6, v7, &type metadata for AnyHashable, &type metadata for String, 6))
        return (char *)v6;
      else
        return 0;
    }
    else
    {
      sub_10000882C((uint64_t)v7, (uint64_t *)&unk_100845DB0);
      return 0;
    }
  }
  return result;
}

void sub_10032C694(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *(_QWORD *)(v2
                 + OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_allModelVersionIdentifiers);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v17 = OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_postMigrationDataUpdateByModelVersionIdentifier;
    swift_bridgeObjectRetain(v3);
    v7 = 0;
    v8 = 0;
    v9 = (uint64_t *)(v3 + 40);
    v10 = v4 - 1;
    while (1)
    {
      v11 = *(v9 - 1);
      v12 = *v9;
      if ((v8 & 1) != 0)
        break;
      v16 = v11 == a1 && v12 == a2;
      if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(v9 - 1), *v9, a1, a2, 0) & 1) != 0)
        goto LABEL_15;
      if (v10 == v7)
        goto LABEL_17;
      v8 = 0;
LABEL_5:
      ++v7;
      v9 += 2;
      if (v7 >= *(_QWORD *)(v3 + 16))
      {
        __break(1u);
        return;
      }
    }
    v13 = *(_QWORD *)(v18 + v17);
    if (*(_QWORD *)(v13 + 16))
    {
      swift_bridgeObjectRetain(*v9);
      swift_bridgeObjectRetain(v13);
      sub_10001A6DC(v11, v12);
      v15 = v14;
      swift_bridgeObjectRelease();
      if ((v15 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return;
      }
      swift_bridgeObjectRelease();
    }
LABEL_15:
    if (v10 == v7)
    {
LABEL_17:
      swift_bridgeObjectRelease();
      return;
    }
    v8 = 1;
    goto LABEL_5;
  }
}

void sub_10032C890(uint64_t a1, uint64_t a2, void *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t, uint64_t, __n128);
  objc_class *v23;
  char *v24;
  char *v25;
  id v26;
  void (*v27)(char *, uint64_t);
  id v28;
  uint64_t v29;
  NSObject *v30;
  char *v31;
  NSObject *v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  NSObject *v41;
  NSObject *v42;
  os_log_type_t v43;
  os_log_t v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  __n128 v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  __n128 v65;
  NSObject *v66;
  Class isa;
  void (*v68)(char *, uint64_t, uint64_t, __n128);
  unint64_t v69;
  NSObject *v70;
  objc_class *v71;
  NSObject *v72;
  NSObject *v73;
  NSObject *v74;
  NSObject *v75;
  objc_class *v76;
  char *v77;
  char v78;
  char *v79;
  NSObject *v80;
  NSObject *v81;
  objc_class *v82;
  char v83;
  char v84;
  char v86;
  NSObject *v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  Class v93;
  NSObject *v94;
  Class v95;
  uint64_t v96;
  NSObject *v97;
  BOOL v98;
  uint64_t v99;
  char *v100;
  char *v101;
  NSObject *v102;
  NSObject *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  __n128 v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  Class v113;
  void (*v114)(char *, uint64_t);
  NSObject *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  double v124;
  void (*v125)(char *, uint64_t);
  void *v126;
  void *v127;
  uint64_t v128;
  NSObject *v129;
  os_log_t v130;
  uint64_t v131;
  id v132;
  uint64_t v133;
  void (*v134)(char *, uint64_t, __n128);
  char *v135;
  uint64_t v136;
  void (*v137)(char *, uint64_t, uint64_t);
  NSObject *v138;
  char *v139;
  uint64_t ObjectType;
  void *v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  NSObject *v149;
  uint64_t v150;
  uint64_t v151;
  Class v152;
  void *v153;
  NSObject *v154;
  unint64_t v155;
  objc_super v156;

  v141 = a3;
  v142 = a4;
  v144 = a2;
  ObjectType = swift_getObjectType();
  v148 = type metadata accessor for Date(0);
  v146 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148);
  v143 = (char *)&v129 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v145 = (char *)&v129 - v8;
  __chkstk_darwin(v9);
  v147 = (char *)&v129 - v10;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v129 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v129 - v16;
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v129 - v20;
  v22 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16);
  v150 = a1;
  v22((char *)&v129 - v20, a1, v11, v19);
  v23 = (objc_class *)type metadata accessor for RDStagedLightweightCoreDataMigrationCoordinator.BabysitTarget(0);
  v24 = (char *)objc_allocWithZone(v23);
  v25 = &v24[OBJC_IVAR____TtCC7remindd47RDStagedLightweightCoreDataMigrationCoordinatorP33_D88389F778BE955B340162F613733C4913BabysitTarget_crashDetectedAnalyticsEventName];
  *(_QWORD *)v25 = 0xD00000000000004FLL;
  *((_QWORD *)v25 + 1) = 0x80000001007008F0;
  ((void (*)(char *, char *, uint64_t))v22)(&v24[OBJC_IVAR____TtCC7remindd47RDStagedLightweightCoreDataMigrationCoordinatorP33_D88389F778BE955B340162F613733C4913BabysitTarget_storeURL], v21, v11);
  v156.receiver = v24;
  v156.super_class = v23;
  v26 = objc_msgSendSuper2(&v156, "init");
  v27 = *(void (**)(char *, uint64_t))(v12 + 8);
  v27(v21, v11);
  v28 = sub_10032FDD0();

  if (v4)
    return;
  v137 = (void (*)(char *, uint64_t, uint64_t))v22;
  v135 = v14;
  v136 = v11;
  v30 = v149;
  v29 = v150;
  v31 = sub_10032C5B4(v150);
  if (!v32)
  {

    return;
  }
  v139 = v31;
  v33 = v32;
  v134 = (void (*)(char *, uint64_t, __n128))v27;
  v132 = v28;
  if (qword_1008371E0 != -1)
    swift_once(&qword_1008371E0, sub_10032C24C);
  v34 = type metadata accessor for Logger(0);
  v35 = sub_10001AAA8(v34, (uint64_t)qword_100845CD0);
  v36 = v17;
  v37 = v17;
  v38 = v136;
  v137(v37, v29, v136);
  v39 = v144;
  swift_bridgeObjectRetain_n(v144, 2);
  v40 = v30;
  v149 = v33;
  swift_bridgeObjectRetain_n(v33, 2);
  v41 = v40;
  v131 = v35;
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.default.getter(v42);
  v44 = (os_log_t)v43;
  v45 = os_log_type_enabled(v42, v43);
  v133 = 0;
  if (v45)
  {
    v46 = swift_slowAlloc(42, -1);
    v130 = v42;
    v47 = v46;
    v138 = swift_slowAlloc(128, -1);
    v154 = v138;
    *(_DWORD *)v47 = 136446978;
    v48 = sub_10032BF88((unint64_t *)&qword_100845D78, (uint64_t)&protocol conformance descriptor for URL);
    LODWORD(v129) = (_DWORD)v44;
    v49 = dispatch thunk of CustomStringConvertible.description.getter(v38, v48);
    v151 = sub_10001A820(v49, v50, (uint64_t *)&v154);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);
    v51 = swift_bridgeObjectRelease();
    v134(v36, v38, v51);
    *(_WORD *)(v47 + 12) = 2082;
    v52 = v41;
    v53 = v39;
    v54 = *(uint64_t *)((char *)&v52->isa
                     + OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName);
    v55 = *(unint64_t *)((char *)&v52[1].isa
                              + OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName);
    swift_bridgeObjectRetain(v55);
    v151 = sub_10001A820(v54, v55, (uint64_t *)&v154);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);

    swift_bridgeObjectRelease();
    *(_WORD *)(v47 + 22) = 2082;
    v56 = (unint64_t)v149;
    swift_bridgeObjectRetain(v149);
    v57 = v139;
    v151 = sub_10001A820((uint64_t)v139, v56, (uint64_t *)&v154);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);
    swift_bridgeObjectRelease_n(v56, 3);
    *(_WORD *)(v47 + 32) = 2080;
    v151 = v53;
    v58 = sub_10001A630(&qword_100845D88);
    v59 = Optional.descriptionOrNil.getter(v58);
    v151 = sub_10001A820(v59, v60, (uint64_t *)&v154);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);
    swift_bridgeObjectRelease_n(v53, 2);
    swift_bridgeObjectRelease();
    v44 = v130;
    _os_log_impl((void *)&_mh_execute_header, v130, (os_log_type_t)v129, "Will perform staged lightweight migration {storeURL: %{public}s, modelName: %{public}s, initialVersionIdentifier: %{public}s, persistentStoreDescriptionOptionsOverride: %s}", (uint8_t *)v47, 0x2Au);
    v61 = v138;
    swift_arrayDestroy(v138, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v61, -1, -1);
    swift_slowDealloc(v47, -1, -1);

    v63 = v148;
  }
  else
  {
    ((void (*)(char *, uint64_t))v134)(v36, v38);

    swift_bridgeObjectRelease_n(v39, 2);
    v56 = (unint64_t)v149;
    swift_bridgeObjectRelease_n(v149, 2);

    v52 = v41;
    v63 = v148;
    v57 = v139;
  }
  v64 = v147;
  Date.init()(v62);
  v154 = v57;
  v155 = v56;
  v138 = v52;
  v66 = *(NSObject **)((char *)&v52->isa
                     + OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_allModelVersionIdentifiers);
  isa = v66[2].isa;
  v68 = (void (*)(char *, uint64_t, uint64_t, __n128))v137;
  v149 = v66;
  if (!isa)
  {
    v89 = 0;
    v90 = 1;
    v92 = v136;
    v91 = v146;
    goto LABEL_40;
  }
  v69 = v56;
  v139 = (char *)OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_postMigrationDataUpdateByModelVersionIdentifier;
  v130 = v66 + 4;
  v70 = v66 + 5;
  v129 = v66 + 5;
  while (2)
  {
    v71 = (objc_class *)v69;
    v72 = v57;
    swift_bridgeObjectRetain(v69);
    swift_bridgeObjectRetain(v149);
    v74 = v73;
    v75 = v57;
    v76 = v71;
    v77 = 0;
    v78 = 0;
    v79 = (char *)isa - 1;
    v80 = v70;
    v81 = v138;
    while (1)
    {
      v57 = v80[-1].isa;
      v82 = v80->isa;
      if ((v78 & 1) != 0)
        break;
      if (v57 == v75 && v82 == v76)
        goto LABEL_25;
      v86 = _stringCompareWithSmolCheck(_:_:expecting:)(v80[-1].isa, v80->isa, v72, v71, 0);
      v74 = v149;
      v75 = v72;
      v76 = v71;
      if ((v86 & 1) != 0)
        goto LABEL_25;
      if (v79 == v77)
        goto LABEL_30;
      v78 = 0;
LABEL_15:
      ++v77;
      v80 += 2;
      if ((Class)v77 >= v74[2].isa)
      {
        __break(1u);
        goto LABEL_53;
      }
    }
    v44 = *(os_log_t *)&v139[(_QWORD)v81];
    if (!v44[2].isa)
    {
LABEL_25:
      if (v79 == v77)
      {
LABEL_30:
        v93 = v76;
        swift_bridgeObjectRelease();
        v65 = swift_bridgeObjectRelease();
        v89 = (unint64_t)v149[2].isa;
        if (v89)
        {
          v94 = &v130[2 * v89];
          v96 = (uint64_t)v94[-2].isa;
          v95 = v94[-1].isa;
          v97 = v72;
          v98 = v72 == v96 && v93 == v95;
          v64 = v147;
          v63 = v148;
          v99 = v146;
          v92 = v136;
          v68 = (void (*)(char *, uint64_t, uint64_t, __n128))v137;
          if (v98 || (_stringCompareWithSmolCheck(_:_:expecting:)(v97, v93, v96, v95, 0) & 1) != 0)
          {
            v90 = 0;
            v91 = v99;
            break;
          }
          swift_bridgeObjectRetain(v95);
          v127 = objc_autoreleasePoolPush();
          v128 = v133;
          sub_10032E3E4((uint64_t)v138, v96, v95, v150, v144);
          v133 = v128;
          v91 = v99;
          if (v128)
          {
            objc_autoreleasePoolPop(v127);
            (*(void (**)(char *, uint64_t))(v99 + 8))(v64, v63);
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            return;
          }
          objc_autoreleasePoolPop(v127);
          v65 = swift_bridgeObjectRelease();
          v90 = 0;
        }
        else
        {
          v90 = 1;
          v64 = v147;
          v63 = v148;
          v91 = v146;
          v92 = v136;
        }
        v68 = (void (*)(char *, uint64_t, uint64_t, __n128))v137;
        break;
      }
      v78 = 1;
      goto LABEL_15;
    }
    swift_bridgeObjectRetain(v80->isa);
    swift_bridgeObjectRetain(v44);
    sub_10001A6DC((uint64_t)v57, (uint64_t)v82);
    v84 = v83;
    swift_bridgeObjectRelease();
    if ((v84 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      v81 = v138;
      v76 = v71;
      v75 = v72;
      v74 = v149;
      goto LABEL_25;
    }
    swift_bridgeObjectRelease();
    v87 = v149;
    swift_bridgeObjectRelease();
    v44 = (os_log_t)objc_autoreleasePoolPush();
    v88 = v133;
    sub_10032D50C(v138, v57, v82, v150, v144, v141, (void *)v142, (uint64_t *)&v154);
    if (v88)
    {
LABEL_53:
      objc_autoreleasePoolPop(v44);
      (*(void (**)(char *, uint64_t))(v146 + 8))(v147, v148);
      swift_bridgeObjectRelease();

      goto LABEL_47;
    }
    v133 = 0;
    objc_autoreleasePoolPop(v44);
    v65 = swift_bridgeObjectRelease();
    v89 = 0;
    v154 = v57;
    v155 = (unint64_t)v82;
    v90 = 1;
    v69 = (unint64_t)v82;
    isa = v87[2].isa;
    v64 = v147;
    v63 = v148;
    v91 = v146;
    v92 = v136;
    v68 = (void (*)(char *, uint64_t, uint64_t, __n128))v137;
    v70 = v129;
    if (isa)
      continue;
    break;
  }
LABEL_40:
  LODWORD(v144) = v90;
  v142 = v89;
  v100 = v135;
  v68(v135, v150, v92, v65);
  v101 = v145;
  (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v145, v64, v63);
  v102 = v138;
  v103 = Logger.logObject.getter(v102);
  v104 = static os_log_type_t.default.getter(v103);
  if (!os_log_type_enabled(v103, (os_log_type_t)v104))
  {

    v114 = *(void (**)(char *, uint64_t))(v91 + 8);
    v114(v101, v63);

    ((void (*)(char *, uint64_t))v134)(v100, v92);
    v114(v64, v63);
    goto LABEL_47;
  }
  LODWORD(v150) = v104;
  v105 = swift_slowAlloc(42, -1);
  v141 = (void *)swift_slowAlloc(96, -1);
  v153 = v141;
  *(_DWORD *)v105 = 136446978;
  v106 = sub_10032BF88((unint64_t *)&qword_100845D78, (uint64_t)&protocol conformance descriptor for URL);
  v107 = dispatch thunk of CustomStringConvertible.description.getter(v92, v106);
  v151 = sub_10001A820(v107, v108, (uint64_t *)&v153);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);
  v109 = swift_bridgeObjectRelease();
  v134(v100, v92, v109);
  *(_WORD *)(v105 + 12) = 2082;
  v110 = *(uint64_t *)((char *)&v102->isa
                    + OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName);
  v111 = *(unint64_t *)((char *)&v102[1].isa
                             + OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName);
  swift_bridgeObjectRetain(v111);
  v151 = sub_10001A820(v110, v111, (uint64_t *)&v153);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);

  swift_bridgeObjectRelease();
  *(_WORD *)(v105 + 22) = 2082;
  if ((v144 & 1) != 0)
  {
    v112 = 0;
    v113 = 0;
    goto LABEL_46;
  }
  if ((Class)v142 > v149[2].isa)
  {
    __break(1u);
  }
  else
  {
    v115 = &v149[2 * v142];
    v112 = (uint64_t)v115[2].isa;
    v113 = v115[3].isa;
    swift_bridgeObjectRetain(v113);
LABEL_46:
    v116 = v148;
    v151 = v112;
    v152 = v113;
    v117 = sub_10001A630((uint64_t *)&unk_10083A370);
    v118 = Optional.descriptionOrNil.getter(v117);
    v120 = v119;
    swift_bridgeObjectRelease();
    v151 = sub_10001A820(v118, v120, (uint64_t *)&v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);

    swift_bridgeObjectRelease();
    *(_WORD *)(v105 + 32) = 2048;
    v121 = v143;
    Date.init()(v122);
    v123 = v145;
    v124 = Date.timeIntervalSince(_:)(v145);
    v125 = *(void (**)(char *, uint64_t))(v146 + 8);
    v125(v121, v116);
    v151 = *(_QWORD *)&v124;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);
    v125(v123, v116);
    _os_log_impl((void *)&_mh_execute_header, v103, (os_log_type_t)v150, "Did perform staged lightweight migration {storeURL: %{public}s, modelName: %{public}s, finalVersionIdentifier: %{public}s, elapsedSeconds: %f}", (uint8_t *)v105, 0x2Au);
    v126 = v141;
    swift_arrayDestroy(v141, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v126, -1, -1);
    swift_slowDealloc(v105, -1, -1);

    v125(v147, v116);
LABEL_47:
    swift_bridgeObjectRelease();
  }
}

void sub_10032D50C(NSObject *a1, NSObject *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  __n128 v25;
  uint64_t v26;
  void *v27;
  id v28;
  double v29;
  void *v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  NSString v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  NSObject *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  __n128 v56;
  NSObject *v57;
  void *v58;
  uint64_t v59;
  char *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  void *v65;
  double v66;
  id v67;
  unsigned int v68;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  __n128 v85;
  uint64_t v86;
  unint64_t v87;
  os_log_t v88;
  char *v89;
  os_log_t v90;
  id v91;
  NSString v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  char *v97;
  char *v98;
  NSObject *v99;
  os_log_type_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  __n128 v106;
  unint64_t v107;
  os_log_t v108;
  void *v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  __n128 v113;
  uint64_t v114;
  void (*v115)(os_log_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  void *v118;
  char *v119;
  void (*v120)(char *, void *);
  uint64_t v121;
  uint64_t v122;
  os_log_t v123;
  NSObject *v124;
  __int128 v125;
  uint64_t v126;
  id v127;
  void *v128;
  id v129;
  uint64_t v130;
  char *v131;
  uint64_t *v132;
  void *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  id v138;
  os_log_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  _QWORD v143[3];
  char v144[8];
  uint64_t v145;
  id v146[2];

  v132 = a8;
  v133 = a6;
  v138 = a7;
  v14 = type metadata accessor for Date(0);
  v135 = *(_QWORD *)(v14 - 8);
  v136 = v14;
  __chkstk_darwin(v14);
  v134 = (char *)&v117 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v139 = (os_log_t)((char *)&v117 - v17);
  v140 = type metadata accessor for URL(0);
  v142 = *(_QWORD *)(v140 - 8);
  __chkstk_darwin(v140);
  v141 = (char *)&v117 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v131 = (char *)&v117 - v20;
  __chkstk_darwin(v21);
  v137 = (char *)&v117 - v22;
  sub_1000151B0(0, (unint64_t *)&unk_100845D90, NSManagedObjectModel_ptr);
  v23 = *(uint64_t *)((char *)&a1->isa
                   + OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName);
  v24 = *(Class *)((char *)&a1[1].isa
                 + OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName);
  v26 = static NSManagedObjectModel.rem_loadManagedObjectModel(withModelName:versionIdentifier:from:)(v23, v24, a2, a3, *(Class *)((char *)&a1->isa + OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_bundle), v25);
  if (!v26)
  {
    v30 = (void *)objc_opt_self(REMError);
    v146[0] = 0;
    v146[1] = (id)0xE000000000000000;
    _StringGuts.grow(_:)(81);
    v31._countAndFlagsBits = 0xD00000000000002CLL;
    v31._object = (void *)0x8000000100700940;
    String.append(_:)(v31);
    swift_bridgeObjectRetain(v24);
    v32._countAndFlagsBits = v23;
    v32._object = v24;
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._object = (void *)0x8000000100700970;
    v33._countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v33);
    v34._countAndFlagsBits = (uint64_t)a2;
    v34._object = a3;
    String.append(_:)(v34);
    v35._countAndFlagsBits = 125;
    v35._object = (void *)0xE100000000000000;
    String.append(_:)(v35);
    v36 = String._bridgeToObjectiveC()();
    objc_msgSend(v30, "internalErrorWithDebugDescription:", v36, swift_bridgeObjectRelease().n128_f64[0]);

    swift_willThrow(v37);
    return;
  }
  v27 = (void *)v26;
  v130 = v23;
  v28 = sub_10032FFA4(a4, v26, a5);
  if (v8)
  {

    return;
  }
  v38 = v28;
  v128 = (void *)a4;
  v127 = v27;
  v39 = *(uint64_t *)((char *)&a1->isa
                   + OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_postMigrationDataUpdateByModelVersionIdentifier);
  v40 = *(_QWORD *)(v39 + 16);
  v129 = v28;
  if (!v40)
  {
LABEL_11:
    v60 = v141;
    v24 = v128;
    goto LABEL_12;
  }
  a4 = (uint64_t)a3;
  swift_bridgeObjectRetain(a3);
  v41 = sub_10001A6DC((uint64_t)a2, (uint64_t)a3);
  if ((v42 & 1) == 0)
  {
    *(_QWORD *)&v29 = swift_bridgeObjectRelease().n128_u64[0];
    goto LABEL_11;
  }
  v123 = a2;
  v125 = *(_OWORD *)(*(_QWORD *)(v39 + 56) + 16 * v41);
  swift_retain();
  swift_bridgeObjectRelease();
  v126 = swift_allocObject(&unk_1007EEFF8, 32, 7);
  *(_OWORD *)(v126 + 16) = v125;
  if (qword_1008371E0 != -1)
    goto LABEL_39;
  while (1)
  {
    v43 = type metadata accessor for Logger(0);
    v44 = sub_10001AAA8(v43, (uint64_t)qword_100845CD0);
    v45 = v137;
    v46 = v140;
    v120 = *(void (**)(char *, void *))(v142 + 16);
    v120(v137, v128);
    swift_bridgeObjectRetain_n(a4, 2);
    v47 = a1;
    v121 = v44;
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.default.getter(v48);
    v124 = v48;
    LODWORD(v122) = v49;
    v50 = os_log_type_enabled(v48, v49);
    *(_QWORD *)&v125 = v24;
    v119 = v47;
    if (v50)
    {
      v51 = v47;
      v52 = swift_slowAlloc(32, -1);
      v118 = (void *)swift_slowAlloc(96, -1);
      v146[0] = v118;
      *(_DWORD *)v52 = 136446722;
      v117 = v52 + 4;
      v53 = sub_10032BF88((unint64_t *)&qword_100845D78, (uint64_t)&protocol conformance descriptor for URL);
      v54 = dispatch thunk of CustomStringConvertible.description.getter(v46, v53);
      v145 = sub_10001A820(v54, v55, (uint64_t *)v146);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v146);
      v56 = swift_bridgeObjectRelease();
      v137 = *(char **)(v142 + 8);
      ((void (*)(char *, uint64_t, __n128))v137)(v45, v46, v56);
      *(_WORD *)(v52 + 12) = 2082;
      swift_bridgeObjectRetain(v125);
      v145 = sub_10001A820(v130, v125, (uint64_t *)v146);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v146);

      swift_bridgeObjectRelease();
      *(_WORD *)(v52 + 22) = 2082;
      swift_bridgeObjectRetain(a4);
      v145 = sub_10001A820((uint64_t)v123, a4, (uint64_t *)v146);
      v38 = v129;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v146);
      swift_bridgeObjectRelease_n(a4, 3);
      v57 = v124;
      _os_log_impl((void *)&_mh_execute_header, v124, (os_log_type_t)v122, "Will perform post-migration data update {storeURL: %{public}s, modelName: %{public}s, versionIdentifier: %{public}s}", (uint8_t *)v52, 0x20u);
      v58 = v118;
      swift_arrayDestroy(v118, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v52, -1, -1);

      v46 = v140;
    }
    else
    {
      v137 = *(char **)(v142 + 8);
      ((void (*)(char *, uint64_t))v137)(v45, v46);

      swift_bridgeObjectRelease_n(a4, 2);
    }
    v90 = v139;
    Date.init()(v59);
    v91 = objc_msgSend(objc_allocWithZone((Class)NSManagedObjectContext), "initWithConcurrencyType:", 1);
    objc_msgSend(v91, "setPersistentStoreCoordinator:", v38);
    v92 = v138 ? String._bridgeToObjectiveC()() : 0;
    objc_msgSend(v91, "setTransactionAuthor:", v92);

    __chkstk_darwin(v93);
    v94 = v126;
    *(&v117 - 4) = (uint64_t)sub_100330F7C;
    *(&v117 - 3) = v94;
    *(&v117 - 2) = (uint64_t)v91;
    v95 = NSManagedObjectContext.performAndWait<A>(_:)(sub_100330FA4);
    v138 = v91;
    static Date.now.getter(v95);
    v96 = Date.timeIntervalSince(_:)(v90);
    v97 = v131;
    ((void (*)(char *, void *, uint64_t))v120)(v131, v128, v46);
    swift_bridgeObjectRetain_n(a4, 2);
    v98 = v119;
    v99 = Logger.logObject.getter(v98);
    v100 = static os_log_type_t.default.getter(v99);
    v101 = v100;
    if (os_log_type_enabled(v99, v100))
    {
      v102 = swift_slowAlloc(42, -1);
      v133 = (void *)swift_slowAlloc(96, -1);
      v146[0] = v133;
      *(_DWORD *)v102 = 136446978;
      v122 = v102 + 4;
      v103 = sub_10032BF88((unint64_t *)&qword_100845D78, (uint64_t)&protocol conformance descriptor for URL);
      LODWORD(v124) = v101;
      v104 = dispatch thunk of CustomStringConvertible.description.getter(v46, v103);
      v145 = sub_10001A820(v104, v105, (uint64_t *)v146);
      v123 = v99;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v146);
      v106 = swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t, __n128))v137)(v97, v46, v106);
      *(_WORD *)(v102 + 12) = 2082;
      v107 = v125;
      swift_bridgeObjectRetain(v125);
      v145 = sub_10001A820(v130, v107, (uint64_t *)v146);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v146);

      swift_bridgeObjectRelease();
      *(_WORD *)(v102 + 22) = 2082;
      swift_bridgeObjectRetain(a4);
      v145 = sub_10001A820((uint64_t)a2, a4, (uint64_t *)v146);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v146);
      swift_bridgeObjectRelease_n(a4, 3);
      *(_WORD *)(v102 + 32) = 2048;
      v145 = *(_QWORD *)&v96;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v146);
      v108 = v123;
      _os_log_impl((void *)&_mh_execute_header, v123, (os_log_type_t)v124, "Did perform post-migration data update {storeURL: %{public}s, modelName: %{public}s, versionIdentifier: %{public}s, elapsedSeconds: %f}", (uint8_t *)v102, 0x2Au);
      v109 = v133;
      swift_arrayDestroy(v133, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v109, -1, -1);
      swift_slowDealloc(v102, -1, -1);

      v60 = v141;
    }
    else
    {
      ((void (*)(char *, uint64_t))v137)(v97, v46);

      swift_bridgeObjectRelease_n(a4, 2);
      v60 = v141;
      a2 = v123;
    }
    v110 = objc_autoreleasePoolPush();
    v112 = *v132;
    v111 = v132[1];
    v113 = swift_bridgeObjectRetain(v111);
    v24 = v128;
    a1 = v134;
    v113.n128_f64[0] = v96;
    sub_1003301D4((uint64_t)v128, v112, v111, (uint64_t)a2, a4, (uint64_t)v134, v113);
    swift_bridgeObjectRelease();
    objc_autoreleasePoolPop(v110);
    v114 = v136;
    v115 = *(void (**)(os_log_t, uint64_t))(v135 + 8);
    v115(v139, v136);

    swift_release(v126);
    v115(a1, v114);
    v38 = v129;
LABEL_12:
    v61 = objc_msgSend(v38, "persistentStores", v29);
    v62 = sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
    v63 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v61, v62);

    if ((unint64_t)v63 >> 62)
    {
      if (v63 < 0)
        v116 = v63;
      else
        v116 = v63 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v63);
      v38 = (id)_CocoaArrayWrapper.endIndex.getter(v116);
      swift_bridgeObjectRelease();
      if (!v38)
      {
LABEL_36:

        swift_bridgeObjectRelease();
        return;
      }
    }
    else
    {
      v38 = *(id *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v38)
        goto LABEL_36;
    }
    if ((v63 & 0xC000000000000001) != 0)
      break;
    if (*(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v64 = *(id *)(v63 + 32);
      goto LABEL_17;
    }
    __break(1u);
LABEL_39:
    swift_once(&qword_1008371E0, sub_10032C24C);
  }
  v64 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v63);
LABEL_17:
  v65 = v64;
  *(_QWORD *)&v66 = swift_bridgeObjectRelease().n128_u64[0];
  v146[0] = 0;
  v67 = v129;
  v68 = objc_msgSend(v129, "removePersistentStore:error:", v65, v146, v66);
  v69 = v146[0];
  if (v68)
  {
    v70 = v146[0];

  }
  else
  {
    v71 = v146[0];
    v72 = _convertNSErrorToError(_:)(v69);

    swift_willThrow(v73);
    if (qword_1008371E0 != -1)
      swift_once(&qword_1008371E0, sub_10032C24C);
    v74 = type metadata accessor for Logger(0);
    sub_10001AAA8(v74, (uint64_t)qword_100845CD0);
    v75 = v142;
    v76 = v140;
    (*(void (**)(char *, void *, uint64_t))(v142 + 16))(v60, v24, v140);
    swift_errorRetain(v72);
    v77 = swift_errorRetain(v72);
    v78 = Logger.logObject.getter(v77);
    v79 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v78, v79))
    {
      v80 = v76;
      v81 = swift_slowAlloc(22, -1);
      v141 = (char *)swift_slowAlloc(64, -1);
      v146[0] = v141;
      *(_DWORD *)v81 = 136446466;
      v82 = sub_10032BF88((unint64_t *)&qword_100845D78, (uint64_t)&protocol conformance descriptor for URL);
      v139 = v78;
      v83 = dispatch thunk of CustomStringConvertible.description.getter(v80, v82);
      v145 = sub_10001A820(v83, v84, (uint64_t *)v146);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v146);
      v85 = swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, __n128))(v142 + 8))(v60, v80, v85);
      *(_WORD *)(v81 + 12) = 2082;
      swift_getErrorValue(v72, v144, v143);
      v86 = Error.rem_errorDescription.getter(v143[1], v143[2]);
      v145 = sub_10001A820(v86, v87, (uint64_t *)v146);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v146);
      swift_bridgeObjectRelease();
      swift_errorRelease(v72);
      swift_errorRelease(v72);
      v88 = v139;
      _os_log_impl((void *)&_mh_execute_header, v139, v79, "Failed to remove persistent store from persistent store coordinator after staged migration {storeURL: %{public}s, error: %{public}s}", (uint8_t *)v81, 0x16u);
      v89 = v141;
      swift_arrayDestroy(v141, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v89, -1, -1);
      swift_slowDealloc(v81, -1, -1);

      swift_errorRelease(v72);
    }
    else
    {

      swift_errorRelease(v72);
      (*(void (**)(char *, uint64_t))(v75 + 8))(v60, v76);
      swift_errorRelease(v72);
      swift_errorRelease(v72);

    }
  }
}

void sub_10032E3E4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  NSString v23;
  uint64_t v24;

  sub_1000151B0(0, (unint64_t *)&unk_100845D90, NSManagedObjectModel_ptr);
  v12 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName);
  v11 = *(void **)(a1 + OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName + 8);
  v14 = static NSManagedObjectModel.rem_loadManagedObjectModel(withModelName:versionIdentifier:from:)(v12, v11, a2, a3, *(_QWORD *)(a1 + OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_bundle), v13);
  if (v14)
  {
    v15 = (void *)v14;
    v16 = sub_10032FFA4(a4, v14, a5);

    if (!v5)
  }
  else
  {
    v17 = (void *)objc_opt_self(REMError);
    _StringGuts.grow(_:)(81);
    v18._countAndFlagsBits = 0xD00000000000002CLL;
    v18._object = (void *)0x8000000100700940;
    String.append(_:)(v18);
    swift_bridgeObjectRetain(v11);
    v19._countAndFlagsBits = v12;
    v19._object = v11;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._object = (void *)0x8000000100700970;
    v20._countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v20);
    v21._countAndFlagsBits = a2;
    v21._object = a3;
    String.append(_:)(v21);
    v22._countAndFlagsBits = 125;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    v23 = String._bridgeToObjectiveC()();
    objc_msgSend(v17, "internalErrorWithDebugDescription:", v23, swift_bridgeObjectRelease().n128_f64[0], 0, 0xE000000000000000);

    swift_willThrow(v24);
  }
}

char *sub_10032E73C(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  Class isa;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  __int128 v44;
  __int128 v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  char *v53;
  NSObject *v54;
  os_log_type_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  __n128 v61;
  unint64_t v62;
  const char *v63;
  uint64_t v64;
  char *v65;
  os_log_type_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  __n128 v71;
  unint64_t v72;
  os_log_t v73;
  uint64_t v74;
  uint64_t v76;
  id v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  NSObject *v82;
  os_log_type_t v83;
  char *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  __n128 v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  void *v94;
  Swift::String v95;
  uint64_t v96;
  Swift::String v97;
  Swift::String v98;
  void *v99;
  uint64_t v100;
  Swift::String v101;
  Swift::String v102;
  NSString v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  NSString *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  os_log_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  _QWORD *v132;

  v111 = type metadata accessor for URL(0);
  v112 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v3 = (char *)&v105 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v105 - v5;
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v105 - v9;
  v11 = type metadata accessor for NSPersistentStore.StoreType(0, v8);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v105 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000151B0(0, &qword_100845DA0, NSPersistentStoreCoordinator_ptr);
  static NSPersistentStore.StoreType.sqlite.getter();
  v15 = v126;
  v16 = static NSPersistentStoreCoordinator.metadataForPersistentStore(type:at:options:)(v14, a1, 0);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return v6;
  }
  v120 = v16;
  v108 = v10;
  v107 = v6;
  v106 = v3;
  v110 = a1;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v17 = v113;
  v18 = *(_QWORD *)&v113[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_allModelVersionIdentifiers];
  v19 = *(_QWORD *)(v18 + 16);
  if (!v19)
    goto LABEL_42;
  v109 = 0;
  v20 = sub_1000151B0(0, (unint64_t *)&unk_100845D90, NSManagedObjectModel_ptr);
  v21 = *(_QWORD *)&v17[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName + 8];
  v125 = *(_QWORD *)&v17[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName];
  v126 = v21;
  v122 = *(os_log_t *)&v17[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_bundle];
  v123 = v20;
  v121 = v18 + 32;
  v117 = NSStoreModelVersionIdentifiersKey;
  swift_bridgeObjectRetain(v18);
  v119 = (char *)&type metadata for Any + 8;
  v124 = v18;
  while (v19 <= *(_QWORD *)(v18 + 16))
  {
    --v19;
    v22 = (uint64_t *)(v121 + 16 * v19);
    v24 = *v22;
    v23 = v22[1];
    v25 = swift_bridgeObjectRetain(v23);
    v26 = static NSManagedObjectModel.rem_loadManagedObjectModel(withModelName:versionIdentifier:from:)(v125, v126, v24, v23, v122, v25);
    if (!v26)
      goto LABEL_6;
    v6 = (char *)v26;
    v118 = v24;
    v27 = v120;
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v29 = objc_msgSend(v6, "isConfiguration:compatibleWithStoreMetadata:", 0, isa);

    if ((v29 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_1008371E0 != -1)
        swift_once(&qword_1008371E0, sub_10032C24C);
      v47 = type metadata accessor for Logger(0);
      sub_10001AAA8(v47, (uint64_t)qword_100845CD0);
      v48 = v112;
      v49 = v108;
      v50 = v111;
      (*(void (**)(char *, uint64_t, uint64_t))(v112 + 16))(v108, v110, v111);
      v51 = v113;
      v52 = v23;
      swift_bridgeObjectRetain(v23);
      v53 = v51;
      v54 = Logger.logObject.getter(v53);
      v55 = static os_log_type_t.default.getter(v54);
      v56 = v55;
      if (os_log_type_enabled(v54, v55))
      {
        v57 = swift_slowAlloc(32, -1);
        v124 = swift_slowAlloc(96, -1);
        *(_QWORD *)&v129 = v124;
        *(_DWORD *)v57 = 136446722;
        v116 = v6;
        v58 = sub_10032BF88((unint64_t *)&qword_100845D78, (uint64_t)&protocol conformance descriptor for URL);
        LODWORD(v123) = v56;
        v59 = dispatch thunk of CustomStringConvertible.description.getter(v50, v58);
        v122 = v54;
        v127 = sub_10001A820(v59, v60, (uint64_t *)&v129);
        v6 = v116;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128);
        v61 = swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t, __n128))(v48 + 8))(v49, v50, v61);
        *(_WORD *)(v57 + 12) = 2082;
        v62 = v126;
        swift_bridgeObjectRetain(v126);
        v127 = sub_10001A820(v125, v62, (uint64_t *)&v129);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128);

        swift_bridgeObjectRelease();
        *(_WORD *)(v57 + 22) = 2082;
        swift_bridgeObjectRetain(v52);
        v127 = sub_10001A820(v118, v52, (uint64_t *)&v129);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128);
        swift_bridgeObjectRelease_n(v52, 3);
        v63 = "Found compatible managed object model of store {storeURL: %{public}s, modelName: %{public}s, versionIdenti"
              "fier: %{public}s}";
LABEL_37:
        v73 = v122;
        _os_log_impl((void *)&_mh_execute_header, v122, (os_log_type_t)v123, v63, (uint8_t *)v57, 0x20u);
        v74 = v124;
        swift_arrayDestroy(v124, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v74, -1, -1);
        swift_slowDealloc(v57, -1, -1);

        return v6;
      }
      goto LABEL_38;
    }
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v117);
    if (*(_QWORD *)(v27 + 16) && (v32 = sub_10001A6DC(v30, v31), (v33 & 1) != 0))
    {
      sub_10001A670(*(_QWORD *)(v27 + 56) + 32 * v32, (uint64_t)&v129);
    }
    else
    {
      v129 = 0u;
      v130 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((_QWORD *)&v130 + 1))
    {

      swift_bridgeObjectRelease();
      sub_10000882C((uint64_t)&v129, (uint64_t *)&unk_10083D5B0);
      goto LABEL_7;
    }
    v34 = sub_10001A630((uint64_t *)&unk_10083AE10);
    if ((swift_dynamicCast(&v127, &v129, (char *)&type metadata for Any + 8, v34, 6) & 1) == 0)
    {

LABEL_6:
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    v35 = v127;
    v116 = v6;
    v36 = objc_msgSend(v6, "versionIdentifiers");
    v115 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v36, &type metadata for AnyHashable, &protocol witness table for AnyHashable);

    v37 = *(_QWORD *)(v35 + 16);
    if (v37)
    {
      v132 = _swiftEmptyArrayStorage;
      sub_1001C229C(0, v37, 0);
      v38 = v132;
      v114 = v35;
      v39 = (uint64_t *)(v35 + 40);
      do
      {
        v40 = *v39;
        v127 = *(v39 - 1);
        v128 = v40;
        swift_bridgeObjectRetain(v40);
        swift_dynamicCast(&v129, &v127, &type metadata for String, &type metadata for AnyHashable, 7);
        if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0)
        {
          sub_1001C229C(0, v38[2] + 1, 1);
          v38 = v132;
        }
        v42 = v38[2];
        v41 = v38[3];
        if (v42 >= v41 >> 1)
        {
          sub_1001C229C(v41 > 1, v42 + 1, 1);
          v38 = v132;
        }
        v39 += 2;
        v38[2] = v42 + 1;
        v43 = &v38[5 * v42];
        v44 = v129;
        v45 = v130;
        v43[8] = v131;
        *((_OWORD *)v43 + 2) = v44;
        *((_OWORD *)v43 + 3) = v45;
        --v37;
      }
      while (v37);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v38 = _swiftEmptyArrayStorage;
    }
    v46 = sub_10032F954((uint64_t)v38, v115);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = v116;
    if ((v46 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_1008371E0 != -1)
        swift_once(&qword_1008371E0, sub_10032C24C);
      v64 = type metadata accessor for Logger(0);
      sub_10001AAA8(v64, (uint64_t)qword_100845CD0);
      v48 = v112;
      v49 = v107;
      v50 = v111;
      (*(void (**)(char *, uint64_t, uint64_t))(v112 + 16))(v107, v110, v111);
      v65 = v113;
      v52 = v23;
      swift_bridgeObjectRetain(v23);
      v53 = v65;
      v54 = Logger.logObject.getter(v53);
      v66 = static os_log_type_t.default.getter(v54);
      v67 = v66;
      if (os_log_type_enabled(v54, v66))
      {
        v57 = swift_slowAlloc(32, -1);
        v124 = swift_slowAlloc(96, -1);
        *(_QWORD *)&v129 = v124;
        *(_DWORD *)v57 = 136446722;
        v68 = sub_10032BF88((unint64_t *)&qword_100845D78, (uint64_t)&protocol conformance descriptor for URL);
        LODWORD(v123) = v67;
        v69 = dispatch thunk of CustomStringConvertible.description.getter(v50, v68);
        v122 = v54;
        v127 = sub_10001A820(v69, v70, (uint64_t *)&v129);
        v6 = v116;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128);
        v71 = swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t, __n128))(v48 + 8))(v49, v50, v71);
        *(_WORD *)(v57 + 12) = 2082;
        v72 = v126;
        swift_bridgeObjectRetain(v126);
        v127 = sub_10001A820(v125, v72, (uint64_t *)&v129);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128);

        swift_bridgeObjectRelease();
        *(_WORD *)(v57 + 22) = 2082;
        swift_bridgeObjectRetain(v52);
        v127 = sub_10001A820(v118, v52, (uint64_t *)&v129);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128);
        swift_bridgeObjectRelease_n(v52, 3);
        v63 = "Found managed object model with matching version identifier {storeURL: %{public}s, modelName: %{public}s, "
              "versionIdentifier: %{public}s}";
        goto LABEL_37;
      }
LABEL_38:
      (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);

      swift_bridgeObjectRelease_n(v52, 2);
      return v6;
    }
    swift_bridgeObjectRelease();

LABEL_7:
    v18 = v124;
    if (!v19)
      goto LABEL_41;
  }
  __break(1u);
LABEL_41:
  swift_bridgeObjectRelease();
LABEL_42:
  v6 = (char *)v111;
  swift_bridgeObjectRelease();
  v76 = v110;
  v77 = v113;
  v78 = v106;
  if (qword_1008371E0 != -1)
    swift_once(&qword_1008371E0, sub_10032C24C);
  v79 = type metadata accessor for Logger(0);
  sub_10001AAA8(v79, (uint64_t)qword_100845CD0);
  v80 = v112;
  (*(void (**)(char *, uint64_t, char *))(v112 + 16))(v78, v76, v6);
  v81 = (char *)v77;
  v82 = Logger.logObject.getter(v81);
  v83 = static os_log_type_t.error.getter();
  v84 = v78;
  v85 = v83;
  if (os_log_type_enabled(v82, v83))
  {
    v86 = swift_slowAlloc(22, -1);
    v126 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v129 = v126;
    *(_DWORD *)v86 = 136446466;
    v87 = sub_10032BF88((unint64_t *)&qword_100845D78, (uint64_t)&protocol conformance descriptor for URL);
    LODWORD(v125) = v85;
    v88 = dispatch thunk of CustomStringConvertible.description.getter(v6, v87);
    v127 = sub_10001A820(v88, v89, (uint64_t *)&v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128);
    v90 = swift_bridgeObjectRelease();
    (*(void (**)(char *, char *, __n128))(v80 + 8))(v84, v6, v90);
    *(_WORD *)(v86 + 12) = 2082;
    v91 = *(_QWORD *)&v81[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName];
    v92 = *(_QWORD *)&v81[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName + 8];
    swift_bridgeObjectRetain(v92);
    v127 = sub_10001A820(v91, v92, (uint64_t *)&v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v82, (os_log_type_t)v125, "Failed to find managed object model with matching version identifier {storeURL: %{public}s, modelName: %{public}s}", (uint8_t *)v86, 0x16u);
    v93 = v126;
    swift_arrayDestroy(v126, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v93, -1, -1);
    swift_slowDealloc(v86, -1, -1);

  }
  else
  {
    (*(void (**)(char *, char *))(v80 + 8))(v78, v6);

  }
  v94 = (void *)objc_opt_self(REMError);
  *(_QWORD *)&v129 = 0;
  *((_QWORD *)&v129 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(99);
  v95._countAndFlagsBits = 0xD000000000000045;
  v95._object = (void *)0x8000000100700AA0;
  String.append(_:)(v95);
  v96 = sub_10032BF88((unint64_t *)&qword_100845D78, (uint64_t)&protocol conformance descriptor for URL);
  v97._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v6, v96);
  String.append(_:)(v97);
  swift_bridgeObjectRelease();
  v98._object = (void *)0x8000000100700AF0;
  v98._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v98);
  v100 = *(_QWORD *)&v81[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName];
  v99 = *(void **)&v81[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName + 8];
  swift_bridgeObjectRetain(v99);
  v101._countAndFlagsBits = v100;
  v101._object = v99;
  String.append(_:)(v101);
  swift_bridgeObjectRelease();
  v102._countAndFlagsBits = 125;
  v102._object = (void *)0xE100000000000000;
  String.append(_:)(v102);
  v103 = String._bridgeToObjectiveC()();
  objc_msgSend(v94, "invalidParameterErrorWithDescription:", v103, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v104);
  return v6;
}

uint64_t sub_10032F634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE v7[24];

  swift_beginAccess(a3 + 16, v7, 1, 0);
  v5 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = a2;
  swift_errorRetain(a2);
  return swift_errorRelease(v5);
}

id sub_10032F76C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStagedLightweightCoreDataMigrationCoordinator.BabysitTarget(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RDStagedLightweightCoreDataMigrationCoordinator()
{
  return objc_opt_self(_TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator);
}

uint64_t sub_10032F89C()
{
  return type metadata accessor for RDStagedLightweightCoreDataMigrationCoordinator.BabysitTarget(0);
}

uint64_t type metadata accessor for RDStagedLightweightCoreDataMigrationCoordinator.BabysitTarget(uint64_t a1)
{
  uint64_t result;

  result = qword_100845D68;
  if (!qword_100845D68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDStagedLightweightCoreDataMigrationCoordinator.BabysitTarget);
  return result;
}

uint64_t sub_10032F8E0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1006B5100;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10032F954(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE v13[40];
  _BYTE v14[40];

  if (!*(_QWORD *)(a2 + 16))
    return 1;
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return 1;
  v5 = a2 + 56;
  swift_bridgeObjectRetain(a1);
  v6 = 0;
  while (1)
  {
    sub_1002933E0(a1 + 32 + 40 * v6, (uint64_t)v14);
    if (*(_QWORD *)(a2 + 16))
    {
      v7 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
      v8 = -1 << *(_BYTE *)(a2 + 32);
      v9 = v7 & ~v8;
      if (((*(_QWORD *)(v5 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
        break;
    }
LABEL_4:
    ++v6;
    sub_10020DA24((uint64_t)v14);
    if (v6 == v3)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  v10 = ~v8;
  while (1)
  {
    sub_1002933E0(*(_QWORD *)(a2 + 48) + 40 * v9, (uint64_t)v13);
    v11 = static AnyHashable.== infix(_:_:)(v13, v14);
    sub_10020DA24((uint64_t)v13);
    if ((v11 & 1) != 0)
      break;
    v9 = (v9 + 1) & v10;
    if (((*(_QWORD *)(v5 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
      goto LABEL_4;
  }
  sub_10020DA24((uint64_t)v14);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_10032FA94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t i;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v25;
  _QWORD v26[9];

  if (!*(_QWORD *)(a2 + 16))
    return 1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 1;
  v25 = a1 + 32;
  v4 = a2 + 56;
  swift_bridgeObjectRetain(a1);
  for (i = 0; i != v2; ++i)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v6 = (uint64_t *)(v25 + 16 * i);
      v8 = *v6;
      v7 = v6[1];
      Hasher.init(_seed:)(v26, *(_QWORD *)(a2 + 40));
      swift_bridgeObjectRetain(v7);
      String.hash(into:)(v26, v8, v7);
      v9 = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(a2 + 32);
      v11 = v9 & ~v10;
      if (((*(_QWORD *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
      {
        v12 = *(_QWORD *)(a2 + 48);
        v13 = (_QWORD *)(v12 + 16 * v11);
        v14 = v13[1];
        v15 = *v13 == v8 && v14 == v7;
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v13, v14, v8, v7, 0) & 1) != 0)
        {
LABEL_22:
          swift_bridgeObjectRelease(a1);
          v22 = 0;
          goto LABEL_23;
        }
        v16 = ~v10;
        for (j = v11 + 1; ; j = v18 + 1)
        {
          v18 = j & v16;
          if (((*(_QWORD *)(v4 + (((j & v16) >> 3) & 0xFFFFFFFFFFFFF8)) >> (j & v16)) & 1) == 0)
            break;
          v19 = (_QWORD *)(v12 + 16 * v18);
          v20 = v19[1];
          v21 = *v19 == v8 && v20 == v7;
          if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, v8, v7, 0) & 1) != 0)
            goto LABEL_22;
        }
      }
      swift_bridgeObjectRelease(v7);
    }
  }
  v22 = 1;
  v7 = a1;
LABEL_23:
  swift_bridgeObjectRelease(v7);
  return v22;
}

uint64_t sub_10032FC20(uint64_t a1, void (*a2)(uint64_t, uint64_t, id))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;

  v20 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v7)
      return swift_release(a1);
    v18 = *(_QWORD *)(v20 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v7)
        return swift_release(a1);
      v18 = *(_QWORD *)(v20 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v7)
          return swift_release(a1);
        v18 = *(_QWORD *)(v20 + 8 * v9);
        if (!v18)
        {
          v9 = v17 + 3;
          if (v17 + 3 >= v7)
            return swift_release(a1);
          v18 = *(_QWORD *)(v20 + 8 * v9);
          if (!v18)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v18 - 1) & v18;
    v11 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_5:
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v13 = *v12;
    v14 = v12[1];
    v15 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v11);
    swift_bridgeObjectRetain(v14);
    v16 = v15;
    a2(v13, v14, v16);

    result = swift_bridgeObjectRelease(v14);
  }
  v19 = v17 + 4;
  if (v19 >= v7)
    return swift_release(a1);
  v18 = *(_QWORD *)(v20 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v7)
      return swift_release(a1);
    v18 = *(_QWORD *)(v20 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

id sub_10032FDD0()
{
  uint64_t v0;
  id result;
  void *v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t inited;
  unint64_t v7;
  void *v8;
  NSString v9;
  id v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  _BYTE v18[56];

  result = objc_msgSend((id)objc_opt_self(DABabysitter), "sharedBabysitter");
  if (result)
  {
    v2 = result;
    v3 = String._bridgeToObjectiveC()();
    v4 = objc_msgSend(v2, "tokenByRegisteringAccount:forOperationWithName:", v0, v3);

    if (!v4)
    {
      v5 = sub_10001A630((uint64_t *)&unk_10083DAB0);
      inited = swift_initStackObject(v5, v18);
      *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
      *(_QWORD *)(inited + 32) = 0x696669746E656469;
      *(_QWORD *)(inited + 40) = 0xEA00000000007265;
      *(_QWORD *)(inited + 48) = String._bridgeToObjectiveC()();
      v7 = sub_1002AFCB4(inited);
      v8 = (void *)objc_opt_self(REMError);
      v9 = String._bridgeToObjectiveC()();
      v10 = objc_msgSend(v8, "babySatErrorWithOperationName:", v9);

      type metadata accessor for Analytics(0, v11);
      v12 = v0
          + OBJC_IVAR____TtCC7remindd47RDStagedLightweightCoreDataMigrationCoordinatorP33_D88389F778BE955B340162F613733C4913BabysitTarget_crashDetectedAnalyticsEventName;
      v13 = *(_QWORD *)(v0
                      + OBJC_IVAR____TtCC7remindd47RDStagedLightweightCoreDataMigrationCoordinatorP33_D88389F778BE955B340162F613733C4913BabysitTarget_crashDetectedAnalyticsEventName);
      v14 = *(_QWORD *)(v12 + 8);
      v15 = sub_1003B0B84(v7);
      swift_bridgeObjectRelease();
      v16 = v10;
      static Analytics.postEvent(_:payload:error:performAutoBugCaptureOnError:)(v13, v14, v15, v10, 1);
      swift_bridgeObjectRelease();

      swift_willThrow(v17);
    }
    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10032FFA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  NSURL *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD aBlock[5];
  uint64_t v20;

  v5 = objc_allocWithZone((Class)NSPersistentStoreDescription);
  URL._bridgeToObjectiveC()(v6);
  v8 = v7;
  v9 = objc_msgSend(v5, "initWithURL:", v7);

  objc_msgSend(v9, "setType:", NSSQLiteStoreType);
  objc_msgSend(v9, "setShouldMigrateStoreAutomatically:", 1);
  objc_msgSend(v9, "setShouldInferMappingModelAutomatically:", 1);
  v10 = objc_msgSend(v9, "setShouldAddStoreAsynchronously:", 0);
  if (a3)
  {
    __chkstk_darwin(v10);
    swift_bridgeObjectRetain(a3);
    sub_10032FC20(v11, (void (*)(uint64_t, uint64_t, id))sub_100330FF8);
    swift_bridgeObjectRelease();
  }
  v12 = objc_msgSend(objc_allocWithZone((Class)NSPersistentStoreCoordinator), "initWithManagedObjectModel:", a2);
  v13 = swift_allocObject(&unk_1007EF020, 24, 7);
  *(_QWORD *)(v13 + 16) = 0;
  aBlock[4] = sub_100330FF0;
  v20 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100326A64;
  aBlock[3] = &unk_1007EF038;
  v14 = _Block_copy(aBlock);
  v15 = v20;
  swift_retain();
  swift_release(v15);
  objc_msgSend(v12, "addPersistentStoreWithDescription:completionHandler:", v9, v14);
  _Block_release(v14);
  swift_beginAccess(v13 + 16, aBlock, 0, 0);
  v16 = *(_QWORD *)(v13 + 16);
  if (v16)
  {
    v17 = swift_errorRetain(v16);
    swift_willThrow(v17);

  }
  else
  {

  }
  swift_release(v13);
  return v12;
}

void sub_1003301D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __n128 a7)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t inited;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD v54[2];
  uint64_t v55;
  __int128 v56;
  __int128 v57;

  v8 = a7.n128_u64[0];
  v51 = a5;
  v52 = a6;
  v48 = a3;
  v49 = a4;
  v50 = a2;
  v10 = type metadata accessor for NSPersistentStore.StoreType(0, a7);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v42 - v15;
  v17 = sub_1000151B0(0, &qword_100845DA0, NSPersistentStoreCoordinator_ptr);
  ((void (*)(void))static NSPersistentStore.StoreType.sqlite.getter)();
  v18 = static NSPersistentStoreCoordinator.metadataForPersistentStore(type:at:options:)(v16, a1, 0);
  if (v7)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    return;
  }
  v19 = v18;
  v44 = v13;
  v46 = v17;
  v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v16, v10);
  v21 = *(_QWORD *)(v19 + 16);
  v47 = a1;
  v45 = v20;
  v42 = v19;
  v43 = v10;
  if (!v21)
  {
    v56 = 0u;
    v57 = 0u;
LABEL_11:
    sub_10000882C((uint64_t)&v56, (uint64_t *)&unk_10083D5B0);
    goto LABEL_12;
  }
  swift_bridgeObjectRetain(v19);
  v22 = sub_10001A6DC(0xD000000000000056, 0x80000001007009A0);
  if ((v23 & 1) != 0)
  {
    sub_10001A670(*(_QWORD *)(v19 + 56) + 32 * v22, (uint64_t)&v56);
  }
  else
  {
    v56 = 0u;
    v57 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v57 + 1))
    goto LABEL_11;
  v24 = sub_10001A630(&qword_100845DA8);
  if (!swift_dynamicCast(v54, &v56, (char *)&type metadata for Any + 8, v24, 6))
  {
LABEL_12:
    v25 = _swiftEmptyArrayStorage;
    goto LABEL_13;
  }
  v25 = *(_QWORD **)&v54[0];
LABEL_13:
  v26 = v48;
  v27 = v49;
  v28 = v50;
  v29 = sub_10001A630((uint64_t *)&unk_10083A280);
  inited = swift_initStackObject(v29, &v55);
  *(_QWORD *)(inited + 32) = 0xD000000000000017;
  *(_QWORD *)(inited + 40) = 0x8000000100700A00;
  *(_OWORD *)(inited + 16) = xmmword_1006A5130;
  *(_QWORD *)(inited + 48) = v28;
  *(_QWORD *)(inited + 56) = v26;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 80) = 0xD00000000000001CLL;
  *(_QWORD *)(inited + 88) = 0x8000000100700A20;
  *(_QWORD *)(inited + 96) = v27;
  v31 = v51;
  *(_QWORD *)(inited + 104) = v51;
  *(_QWORD *)(inited + 120) = &type metadata for String;
  strcpy((char *)(inited + 128), "completionDate");
  *(_BYTE *)(inited + 143) = -18;
  v32 = type metadata accessor for Date(0);
  *(_QWORD *)(inited + 168) = v32;
  v33 = sub_1000087F0((_QWORD *)(inited + 144));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v33, v52, v32);
  *(_QWORD *)(inited + 176) = 0xD00000000000001CLL;
  *(_QWORD *)(inited + 184) = 0x8000000100700A40;
  *(_QWORD *)(inited + 216) = &type metadata for Double;
  *(_QWORD *)(inited + 192) = v8;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v31);
  v34 = sub_10016E7E4(inited);
  if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0)
    v25 = sub_1002C8EEC(0, v25[2] + 1, 1, v25);
  v35 = v44;
  v36 = v42;
  v38 = v25[2];
  v37 = v25[3];
  if (v38 >= v37 >> 1)
    v25 = sub_1002C8EEC((_QWORD *)(v37 > 1), v38 + 1, 1, v25);
  v25[2] = v38 + 1;
  v25[v38 + 4] = v34;
  *((_QWORD *)&v57 + 1) = sub_10001A630(&qword_100845DA8);
  *(_QWORD *)&v56 = v25;
  sub_10001A6CC(&v56, v54);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v36);
  v53 = v36;
  sub_10028CB74(v54, 0xD000000000000056, 0x80000001007009A0, isUniquelyReferenced_nonNull_native);
  v40 = v53;
  v41 = swift_bridgeObjectRelease();
  static NSPersistentStore.StoreType.sqlite.getter(v41);
  static NSPersistentStoreCoordinator.setMetadata(_:type:at:options:)(v40, v35, v47, 0);
  v45(v35, v43);
  swift_bridgeObjectRelease();
}

void sub_1003305F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSString v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  Swift::String v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  NSString v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  Swift::String v34;
  Swift::String v35;
  NSString v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  Swift::String v42;
  uint64_t v43;
  Swift::String v44;
  Swift::String v45;
  char v46;
  NSString v47;
  unsigned __int8 v48;
  NSURL *v49;
  void *v50;
  Swift::String v51;
  uint64_t v52;
  Swift::String v53;
  Swift::String v54;
  void *v55;
  void *v56;
  NSURL *v57;
  void *v58;
  void *v59;
  unsigned int v60;
  id v61;
  char *v62;
  uint64_t (*v63)(char *, uint64_t);
  uint64_t v64;
  char *v65;
  uint64_t v66;
  NSString v67;
  unsigned int v68;
  id v69;
  NSURL *v70;
  void *v71;
  void *v72;
  NSURL *v73;
  void *v74;
  void *v75;
  unsigned int v76;
  char *v77;
  NSString v78;
  unsigned int v79;
  NSURL *v80;
  void *v81;
  void *v82;
  NSURL *v83;
  void *v84;
  void *v85;
  unsigned __int8 v86;
  id v87;
  void *v88;
  uint64_t v89;
  char *v90;
  void *v91;
  Swift::String v92;
  uint64_t v93;
  Swift::String v94;
  Swift::String v95;
  uint64_t v96;
  id v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  id v103;
  uint64_t v104;
  id v105;
  unint64_t v106;

  v104 = a2;
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v102 = (char *)&v100 - v8;
  __chkstk_darwin(v9);
  v11 = (char *)&v100 - v10;
  __chkstk_darwin(v12);
  v101 = (char *)&v100 - v13;
  v14 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL.path.getter(v14);
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(v14, "fileExistsAtPath:", v15, swift_bridgeObjectRelease().n128_f64[0]);

  if (!v16)
  {
    v19 = (void *)objc_opt_self(REMError);
    v105 = 0;
    v106 = 0xE000000000000000;
    _StringGuts.grow(_:)(53);
    v20._countAndFlagsBits = 0xD000000000000032;
    v20._object = (void *)0x8000000100700750;
    String.append(_:)(v20);
    v22._countAndFlagsBits = URL.path.getter(v21);
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 125;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    v24 = String._bridgeToObjectiveC()();
    objc_msgSend(v19, "invalidParameterErrorWithDescription:", v24, swift_bridgeObjectRelease().n128_f64[0]);

    swift_willThrow(v25);
    return;
  }
  v103 = v14;
  v17 = URL.pathExtension.getter();
  if (v17 == 0x6574696C7173 && v18 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, 0x6574696C7173, 0xE600000000000000, 0);
    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0)
    {
      v41 = (void *)objc_opt_self(REMError);
      v105 = 0;
      v106 = 0xE000000000000000;
      _StringGuts.grow(_:)(69);
      v42._countAndFlagsBits = 0xD000000000000042;
      v42._object = (void *)0x8000000100700790;
      String.append(_:)(v42);
      v44._countAndFlagsBits = URL.path.getter(v43);
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      v45._countAndFlagsBits = 125;
      v45._object = (void *)0xE100000000000000;
      String.append(_:)(v45);
      v36 = String._bridgeToObjectiveC()();
      v37 = objc_msgSend(v41, "invalidParameterErrorWithDescription:", v36, swift_bridgeObjectRelease().n128_f64[0]);
      goto LABEL_24;
    }
  }
  v27 = sub_10032BF88(&qword_100844730, (uint64_t)&protocol conformance descriptor for URL);
  if ((dispatch thunk of static Equatable.== infix(_:_:)(a1, v104, v3, v27) & 1) != 0)
  {
    v28 = (void *)objc_opt_self(REMError);
    v105 = 0;
    v106 = 0xE000000000000000;
    _StringGuts.grow(_:)(104);
    v29._object = (void *)0x8000000100700880;
    v29._countAndFlagsBits = 0xD00000000000004CLL;
    String.append(_:)(v29);
    v31._countAndFlagsBits = URL.path.getter(v30);
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = 0xD000000000000017;
    v32._object = (void *)0x80000001007008D0;
    String.append(_:)(v32);
    v34._countAndFlagsBits = URL.path.getter(v33);
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 125;
    v35._object = (void *)0xE100000000000000;
    String.append(_:)(v35);
    v36 = String._bridgeToObjectiveC()();
    v37 = objc_msgSend(v28, "invalidParameterErrorWithDescription:", v36, swift_bridgeObjectRelease().n128_f64[0]);
LABEL_24:
    v37;

LABEL_25:
    swift_willThrow(v96);

    return;
  }
  v38 = URL.pathExtension.getter();
  if (v38 == 0x6574696C7173 && v39 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v39, 0x6574696C7173, 0xE600000000000000, 0);
    swift_bridgeObjectRelease();
    if ((v46 & 1) == 0)
    {
      v91 = (void *)objc_opt_self(REMError);
      v105 = 0;
      v106 = 0xE000000000000000;
      _StringGuts.grow(_:)(79);
      v92._object = (void *)0x80000001007007E0;
      v92._countAndFlagsBits = 0xD00000000000004CLL;
      String.append(_:)(v92);
      v94._countAndFlagsBits = URL.path.getter(v93);
      String.append(_:)(v94);
      swift_bridgeObjectRelease();
      v95._countAndFlagsBits = 125;
      v95._object = (void *)0xE100000000000000;
      String.append(_:)(v95);
      v36 = String._bridgeToObjectiveC()();
      v37 = objc_msgSend(v91, "invalidParameterErrorWithDescription:", v36, swift_bridgeObjectRelease().n128_f64[0]);
      goto LABEL_24;
    }
  }
  URL.path.getter(v40);
  v47 = String._bridgeToObjectiveC()();
  v48 = objc_msgSend(v103, "fileExistsAtPath:", v47, swift_bridgeObjectRelease().n128_f64[0]);

  if ((v48 & 1) != 0)
  {
    v50 = (void *)objc_opt_self(REMError);
    v105 = 0;
    v106 = 0xE000000000000000;
    _StringGuts.grow(_:)(70);
    v51._countAndFlagsBits = 0xD000000000000043;
    v51._object = (void *)0x8000000100700830;
    String.append(_:)(v51);
    v53._countAndFlagsBits = URL.path.getter(v52);
    String.append(_:)(v53);
    swift_bridgeObjectRelease();
    v54._countAndFlagsBits = 125;
    v54._object = (void *)0xE100000000000000;
    String.append(_:)(v54);
    v36 = String._bridgeToObjectiveC()();
    v37 = objc_msgSend(v50, "invalidParameterErrorWithDescription:", v36, swift_bridgeObjectRelease().n128_f64[0]);
    goto LABEL_24;
  }
  URL._bridgeToObjectiveC()(v49);
  v56 = v55;
  URL._bridgeToObjectiveC()(v57);
  v59 = v58;
  v105 = 0;
  v60 = objc_msgSend(v103, "copyItemAtURL:toURL:error:", v56, v58, &v105);

  v61 = v105;
  if (!v60)
  {
    v97 = v105;
    _convertNSErrorToError(_:)(v61);

    goto LABEL_25;
  }
  URL.deletingPathExtension()(v105);
  v62 = v101;
  URL.appendingPathExtension(_:)(0x772D6574696C7173, 0xEA00000000006C61);
  v63 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
  v64 = v63(v11, v3);
  v65 = v62;
  URL.deletingPathExtension()(v64);
  URL.appendingPathExtension(_:)(0x732D6574696C7173, 0xEA00000000006D68);
  v66 = v63(v11, v3);
  URL.path.getter(v66);
  v67 = String._bridgeToObjectiveC()();
  v68 = objc_msgSend(v103, "fileExistsAtPath:", v67, swift_bridgeObjectRelease().n128_f64[0]);

  if (!v68)
    goto LABEL_19;
  URL._bridgeToObjectiveC()(v70);
  v72 = v71;
  URL.deletingPathExtension()(v71);
  URL.appendingPathExtension(_:)(0x772D6574696C7173, 0xEA00000000006C61);
  v63(v6, v3);
  URL._bridgeToObjectiveC()(v73);
  v75 = v74;
  v63(v11, v3);
  v105 = 0;
  v76 = objc_msgSend(v103, "copyItemAtURL:toURL:error:", v72, v75, &v105);

  v69 = v105;
  if (!v76)
  {
    v98 = v69;
    _convertNSErrorToError(_:)(v69);

    swift_willThrow(v99);
    v63(v102, v3);
    v90 = v65;
  }
  else
  {
LABEL_19:
    v77 = v102;
    URL.path.getter(v69);
    v78 = String._bridgeToObjectiveC()();
    v79 = objc_msgSend(v103, "fileExistsAtPath:", v78, swift_bridgeObjectRelease().n128_f64[0]);

    if (v79)
    {
      URL._bridgeToObjectiveC()(v80);
      v82 = v81;
      URL.deletingPathExtension()(v81);
      URL.appendingPathExtension(_:)(0x732D6574696C7173, 0xEA00000000006D68);
      v63(v6, v3);
      URL._bridgeToObjectiveC()(v83);
      v85 = v84;
      v63(v11, v3);
      v105 = 0;
      v86 = objc_msgSend(v103, "copyItemAtURL:toURL:error:", v82, v85, &v105);

      v87 = v105;
      if ((v86 & 1) == 0)
      {
        v88 = v87;
        _convertNSErrorToError(_:)(v87);

        swift_willThrow(v89);
      }
    }

    v63(v77, v3);
    v90 = v101;
  }
  v63(v90, v3);
}

uint64_t sub_100330F58()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100330F7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t sub_100330FA4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32));
}

uint64_t sub_100330FCC()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100330FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10032F634(a1, a2, v2);
}

void sub_100330FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v5;
  id v6;

  v5 = *(void **)(v3 + 16);
  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "setOption:forKey:", a3, v6);

}

uint64_t sub_100331044(uint64_t a1, __n128 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __n128 v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  v3 = type metadata accessor for NSPersistentStore.StoreType(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000151B0(0, &qword_100845DA0, NSPersistentStoreCoordinator_ptr);
  static NSPersistentStore.StoreType.sqlite.getter(v7);
  v8 = static NSPersistentStoreCoordinator.metadataForPersistentStore(type:at:options:)(v6, a1, 0);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (*(_QWORD *)(v8 + 16) && (v9 = sub_10001A6DC(0xD000000000000056, 0x80000001007009A0), (v10 & 1) != 0))
  {
    sub_10001A670(*(_QWORD *)(v8 + 56) + 32 * v9, (uint64_t)&v15);
  }
  else
  {
    v15 = 0u;
    v16 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((_QWORD *)&v16 + 1))
  {
    v11 = sub_10001A630(&qword_100845DA8);
    if (swift_dynamicCast(&v14, &v15, (char *)&type metadata for Any + 8, v11, 6))
      return v14;
    else
      return 0;
  }
  else
  {
    sub_10000882C((uint64_t)&v15, (uint64_t *)&unk_10083D5B0);
    return 0;
  }
}

void sub_1003311C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  _QWORD v33[5];
  unint64_t v34;

  v1 = a1;
  v34 = (unint64_t)_swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_100332A84();
    v5 = sub_100332AC0();
    v6 = Set.Iterator.init(_cocoa:)(v33, v3, v4, v5);
    v1 = v33[0];
    v30 = v33[1];
    v7 = v33[2];
    v8 = v33[3];
    v9 = v33[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v30 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v13 = (unint64_t)(v7 + 64) >> 6;
  while (v1 < 0)
  {
    v17 = __CocoaSet.Iterator.next()(v6);
    if (!v17)
      goto LABEL_40;
    v18 = v17;
    v31 = v17;
    v19 = sub_100332A84();
    swift_unknownObjectRetain(v18);
    swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
    v20 = v32;
    swift_unknownObjectRelease(v18);
    v16 = v8;
    v14 = v9;
    if (!v20)
      goto LABEL_40;
LABEL_36:
    v24 = objc_opt_self(REMCDObject);
    v25 = swift_dynamicCastObjCClass(v20, v24);
    if (v25)
    {
      v26 = v25;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v25);
      v28 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v27 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v28 >= v27 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1);
      v29 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v26);
      v6 = (_QWORD *)specialized Array._endMutation()(v29);
    }
    else
    {

    }
    v8 = v16;
    v9 = v14;
  }
  if (v9)
  {
    v14 = (v9 - 1) & v9;
    v15 = __clz(__rbit64(v9)) | (v8 << 6);
    v16 = v8;
LABEL_35:
    v20 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    if (!v20)
      goto LABEL_40;
    goto LABEL_36;
  }
  v21 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v21 >= v13)
      goto LABEL_40;
    v22 = *(_QWORD *)(v30 + 8 * v21);
    v16 = v8 + 1;
    if (!v22)
    {
      v16 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_40;
      v22 = *(_QWORD *)(v30 + 8 * v16);
      if (!v22)
      {
        v16 = v8 + 3;
        if (v8 + 3 >= v13)
          goto LABEL_40;
        v22 = *(_QWORD *)(v30 + 8 * v16);
        if (!v22)
        {
          v16 = v8 + 4;
          if (v8 + 4 >= v13)
            goto LABEL_40;
          v22 = *(_QWORD *)(v30 + 8 * v16);
          if (!v22)
          {
            v16 = v8 + 5;
            if (v8 + 5 >= v13)
              goto LABEL_40;
            v22 = *(_QWORD *)(v30 + 8 * v16);
            if (!v22)
            {
              v23 = v8 + 6;
              while (v13 != v23)
              {
                v22 = *(_QWORD *)(v30 + 8 * v23++);
                if (v22)
                {
                  v16 = v23 - 1;
                  goto LABEL_34;
                }
              }
LABEL_40:
              sub_1000C6560(v1);
              return;
            }
          }
        }
      }
    }
LABEL_34:
    v14 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v16 << 6);
    goto LABEL_35;
  }
  __break(1u);
}

id sub_1003314C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __n128 v14;
  id v15;
  void *v16;
  Class isa;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v20 - v12;
  UUID.init(uuidString:)(a1, a2);
  v14 = swift_bridgeObjectRelease(a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v8 + 48))(v6, 1, v7, v14) == 1)
  {
    sub_10011E85C((uint64_t)v6);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v7);
    v16 = (void *)objc_opt_self(REMCDAccount);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v15 = objc_msgSend(v16, "objectIDWithUUID:", isa);

    v18 = *(void (**)(char *, uint64_t))(v8 + 8);
    v18(v10, v7);
    v18(v13, v7);
  }
  return v15;
}

uint64_t sub_100331650()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100845DC0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100845DC0);
  if (qword_100837690 != -1)
    swift_once(&qword_100837690, sub_1004A19A4);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872190);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1003316E0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocClassInstance(v0, 64, 7);
}

void *sub_100331724(uint64_t a1, void *a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  NSString v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  NSString v28;
  uint64_t v29;
  id v31;
  unint64_t v32;
  char v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD v38[3];

  v4 = v3;
  swift_bridgeObjectRetain(a2);
  v7 = sub_1003314C0(a1, (uint64_t)a2);
  if (!v7)
  {
    v19 = (void *)objc_opt_self(REMError);
    v38[0] = 0;
    v38[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(100);
    v20._object = (void *)0x8000000100700DE0;
    v20._countAndFlagsBits = 0xD000000000000061;
    String.append(_:)(v20);
    v21._countAndFlagsBits = a1;
    v21._object = a2;
    String.append(_:)(v21);
    v22._countAndFlagsBits = 125;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    v23 = String._bridgeToObjectiveC()();
    objc_msgSend(v19, "internalErrorWithDebugDescription:", v23, swift_bridgeObjectRelease().n128_f64[0]);

    swift_willThrow(v24);
    return v4;
  }
  v8 = v7;
  swift_beginAccess(v2 + 144, v38, 0, 0);
  v9 = *(_QWORD *)(v2 + 144);
  if (!*(_QWORD *)(v9 + 16))
  {
LABEL_8:
    v4 = (void *)objc_opt_self(REMError);
    v36 = 0;
    v37 = 0xE000000000000000;
    _StringGuts.grow(_:)(105);
    v25._countAndFlagsBits = 0xD000000000000066;
    v25._object = (void *)0x8000000100700E50;
    String.append(_:)(v25);
    v26._countAndFlagsBits = a1;
    v26._object = a2;
    String.append(_:)(v26);
    v27._countAndFlagsBits = 125;
    v27._object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    v28 = String._bridgeToObjectiveC()();
    objc_msgSend(v4, "internalErrorWithDebugDescription:", v28, swift_bridgeObjectRelease().n128_f64[0]);

    swift_willThrow(v29);
    return v4;
  }
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v9);
  v10 = sub_10001A6DC(a1, (uint64_t)a2);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v10);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13 = sub_10001A630(&qword_10083FD08);
  inited = swift_initStackObject(v13, &v35);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  *(_QWORD *)(inited + 32) = v8;
  v36 = inited;
  specialized Array._endMutation()(inited);
  v15 = v36;
  v16 = v8;
  sub_100647C90(v15, v12);
  v18 = v17;
  swift_bridgeObjectRelease();
  if (!v3)
  {
    if (*(_QWORD *)(v18 + 16))
    {
      v31 = v16;
      v32 = sub_1002C672C(v31);
      if ((v33 & 1) != 0)
      {
        v4 = *(void **)(*(_QWORD *)(v18 + 56) + 8 * v32);
        v34 = v4;
        swift_release(v12);
        swift_bridgeObjectRelease();

LABEL_16:
        return v4;
      }
      swift_release(v12);
      swift_bridgeObjectRelease();

    }
    else
    {
      swift_release(v12);
      swift_bridgeObjectRelease();
    }
    v4 = 0;
    goto LABEL_16;
  }

  swift_release(v12);
  return v4;
}

void sub_100331A50()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  _BYTE v16[24];
  _BYTE v17[24];
  _BYTE v18[24];
  _BYTE v19[24];

  v2 = v0 + 14;
  swift_beginAccess(v0 + 14, v19, 0, 0);
  if (*(_QWORD *)(v0[14] + 16))
  {
    while (1)
    {
      v3 = objc_autoreleasePoolPush();
      swift_beginAccess(v2, v18, 33, 0);
      v4 = *v2;
      if (!*(_QWORD *)(*v2 + 16))
        break;
      v6 = *(void (**)(uint64_t))(v4 + 32);
      v5 = *(_QWORD *)(v4 + 40);
      swift_retain();
      sub_1001CF260(0, 1);
      v7 = swift_endAccess(v18);
      v6(v7);
      if (v1)
      {
LABEL_14:
        swift_release(v5);
        goto LABEL_15;
      }
      swift_release(v5);
      objc_autoreleasePoolPop(v3);
      if (!*(_QWORD *)(*v2 + 16))
        goto LABEL_5;
    }
    __break(1u);
    goto LABEL_17;
  }
LABEL_5:
  v8 = v0 + 15;
  swift_beginAccess(v0 + 15, v18, 0, 0);
  if (*(_QWORD *)(v0[15] + 16))
  {
    while (1)
    {
      v3 = objc_autoreleasePoolPush();
      swift_beginAccess(v0 + 15, v17, 33, 0);
      v9 = *v8;
      if (!*(_QWORD *)(*v8 + 16))
        break;
      v10 = *(void (**)(uint64_t))(v9 + 32);
      v5 = *(_QWORD *)(v9 + 40);
      swift_retain();
      sub_1001CF260(0, 1);
      v11 = swift_endAccess(v17);
      v10(v11);
      if (v1)
        goto LABEL_14;
      swift_release(v5);
      objc_autoreleasePoolPop(v3);
      if (!*(_QWORD *)(*v8 + 16))
        goto LABEL_9;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    return;
  }
LABEL_9:
  v12 = v0 + 16;
  swift_beginAccess(v0 + 16, v17, 0, 0);
  if (*(_QWORD *)(v0[16] + 16))
  {
    do
    {
      v3 = objc_autoreleasePoolPush();
      swift_beginAccess(v0 + 16, v16, 33, 0);
      v13 = *v12;
      if (!*(_QWORD *)(*v12 + 16))
        goto LABEL_18;
      v14 = *(void (**)(uint64_t))(v13 + 32);
      v5 = *(_QWORD *)(v13 + 40);
      swift_retain();
      sub_1001CF260(0, 1);
      v15 = swift_endAccess(v16);
      v14(v15);
      if (v1)
        goto LABEL_14;
      swift_release(v5);
      objc_autoreleasePoolPop(v3);
    }
    while (*(_QWORD *)(*v12 + 16));
  }
  v3 = objc_autoreleasePoolPush();
  sub_100332468();
LABEL_15:
  objc_autoreleasePoolPop(v3);
}

void sub_100331CAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  void *v9;
  void *v10;
  _BYTE v11[24];
  _BYTE v12[24];

  v2 = v0;
  v3 = (uint64_t *)(v0 + 136);
  swift_beginAccess(v0 + 136, v12, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)(v0 + 136) + 16))
  {
    while (1)
    {
      v4 = objc_autoreleasePoolPush();
      swift_beginAccess(v3, v11, 33, 0);
      v5 = *v3;
      if (!*(_QWORD *)(*v3 + 16))
        break;
      v7 = *(void (**)(uint64_t))(v5 + 32);
      v6 = *(_QWORD *)(v5 + 40);
      swift_retain();
      sub_1001CF260(0, 1);
      v8 = swift_endAccess(v11);
      v7(v8);
      if (v1)
      {
        swift_release(v6);
        v10 = v4;
        goto LABEL_7;
      }
      swift_release(v6);
      objc_autoreleasePoolPop(v4);
      if (!*(_QWORD *)(*v3 + 16))
        goto LABEL_5;
    }
    __break(1u);
  }
  else
  {
LABEL_5:
    v9 = objc_autoreleasePoolPush();
    swift_beginAccess(v2 + 144, v11, 1, 0);
    *(_QWORD *)(v2 + 144) = _swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    v10 = v9;
LABEL_7:
    objc_autoreleasePoolPop(v10);
  }
}

void sub_100331DD8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  char v9;
  void *v10;
  NSString v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t inited;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Class isa;
  uint64_t v43;
  void *v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  unint64_t v48;
  NSString v49;
  uint64_t v50;
  _BYTE v51[40];
  uint64_t v52;
  unint64_t v53;
  _BYTE v54[48];
  _BYTE v55[24];
  uint64_t v56;
  uint64_t v57;

  v5 = *a1;
  v4 = (void *)a1[1];
  v6 = (uint64_t *)(a2 + 144);
  swift_beginAccess(a2 + 144, v55, 0, 0);
  v7 = *(_QWORD *)(a2 + 144);
  if (!*(_QWORD *)(v7 + 16)
    || (swift_bridgeObjectRetain(v4),
        swift_bridgeObjectRetain(v7),
        sub_10001A6DC(v5, (uint64_t)v4),
        v9 = v8,
        swift_bridgeObjectRelease(v4),
        swift_bridgeObjectRelease(v7),
        (v9 & 1) == 0))
  {
    v10 = *(void **)(a2 + 80);
    v11 = String._bridgeToObjectiveC()();
    v12 = objc_msgSend(v10, "storeForAccountIdentifier:", v11);

    if (v12)
    {
      v13 = type metadata accessor for CDIngestionCoordinator.IngestionContext();
      v14 = (_QWORD *)swift_allocObject(v13, 64, 7);
      swift_bridgeObjectRetain(v4);
      v15 = v12;
      v14[5] = sub_1002B109C((uint64_t)_swiftEmptyArrayStorage);
      v14[6] = sub_1002B109C((uint64_t)_swiftEmptyArrayStorage);
      v14[7] = sub_1002B10B0((uint64_t)_swiftEmptyArrayStorage);
      v14[2] = v5;
      v14[3] = v4;
      v14[4] = v15;
      swift_beginAccess(v6, &v52, 33, 0);
      swift_bridgeObjectRetain(v4);
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
      v56 = *v6;
      *v6 = 0x8000000000000000;
      sub_10028D5AC((uint64_t)v14, v5, (uint64_t)v4, isUniquelyReferenced_nonNull_native);
      v17 = *v6;
      *v6 = v56;
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(v17);
      swift_endAccess(&v52);
      swift_bridgeObjectRetain(v4);
      v18 = sub_1003314C0(v5, (uint64_t)v4);
      if (v18)
      {
        v19 = v18;
        v20 = sub_10001A630(&qword_10083FD08);
        inited = swift_initStackObject(v20, v51);
        *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
        *(_QWORD *)(inited + 32) = v19;
        v52 = inited;
        specialized Array._endMutation()(inited);
        v22 = v52;
        v23 = v19;
        sub_100647C90(v22, (uint64_t)v14);
        v25 = v24;
        swift_bridgeObjectRelease(v22);
        if (!v2)
          swift_bridgeObjectRelease(v25);

        swift_release(v14);
      }
      else
      {
        if (qword_1008371E8 != -1)
          swift_once(&qword_1008371E8, sub_100331650);
        v32 = type metadata accessor for Logger(0);
        sub_10001AAA8(v32, (uint64_t)qword_100845DC0);
        v33 = swift_bridgeObjectRetain_n(v4, 2);
        v34 = Logger.logObject.getter(v33);
        v35 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v34, v35))
        {
          v36 = (uint8_t *)swift_slowAlloc(12, -1);
          v37 = swift_slowAlloc(32, -1);
          v52 = v37;
          *(_DWORD *)v36 = 136446210;
          swift_bridgeObjectRetain(v4);
          v56 = sub_10001A820(v5, (unint64_t)v4, &v52);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
          swift_bridgeObjectRelease_n(v4, 3);
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "Could not convert accountIdentifier to CDObjectID to initializeIngestionContexts {accountIdentifier: %{public}s}", v36, 0xCu);
          swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v37, -1, -1);
          swift_slowDealloc(v36, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v4, 2);
        }
        v44 = (void *)objc_opt_self(REMError);
        v52 = 0;
        v53 = 0xE000000000000000;
        _StringGuts.grow(_:)(104);
        v45._object = (void *)0x8000000100700D50;
        v45._countAndFlagsBits = 0xD000000000000065;
        String.append(_:)(v45);
        v46._countAndFlagsBits = v5;
        v46._object = v4;
        String.append(_:)(v46);
        v47._countAndFlagsBits = 125;
        v47._object = (void *)0xE100000000000000;
        String.append(_:)(v47);
        v48 = v53;
        v49 = String._bridgeToObjectiveC()();
        objc_msgSend(v44, "internalErrorWithDebugDescription:", v49, swift_bridgeObjectRelease(v48).n128_f64[0]);

        swift_willThrow(v50);
        swift_release(v14);
      }
    }
    else
    {
      if (qword_1008371E8 != -1)
        swift_once(&qword_1008371E8, sub_100331650);
      v26 = type metadata accessor for Logger(0);
      sub_10001AAA8(v26, (uint64_t)qword_100845DC0);
      v27 = swift_bridgeObjectRetain_n(v4, 2);
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc(12, -1);
        v31 = swift_slowAlloc(32, -1);
        v52 = v31;
        *(_DWORD *)v30 = 136446210;
        swift_bridgeObjectRetain(v4);
        v56 = sub_10001A820(v5, (unint64_t)v4, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
        swift_bridgeObjectRelease_n(v4, 3);
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Persistent store not found for some ingestables, the store may have been removed before this save request. Aborting the entire save for integrity. {accountIdentifier: %{public}s}", v30, 0xCu);
        swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v31, -1, -1);
        swift_slowDealloc(v30, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v4, 2);
      }
      v38 = (void *)objc_opt_self(REMError);
      v39 = sub_10001A630((uint64_t *)&unk_10083A340);
      v40 = swift_initStackObject(v39, v54);
      *(_OWORD *)(v40 + 16) = xmmword_1006A3C00;
      *(_QWORD *)(v40 + 32) = v5;
      *(_QWORD *)(v40 + 40) = v4;
      swift_bridgeObjectRetain(v4);
      v41 = sub_10011EE40(v40);
      swift_setDeallocating(v40);
      swift_arrayDestroy(v40 + 32, 1, &type metadata for String);
      isa = Set._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v38, "accountStoreMissingError:", isa, swift_bridgeObjectRelease(v41).n128_f64[0]);

      swift_willThrow(v43);
    }
  }
}

void sub_100332468()
{
  uint64_t v0;
  void *v1;
  id v2;
  unint64_t v3;
  unint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;

  v1 = *(void **)(v0 + 88);
  v2 = objc_msgSend(v1, "updatedObjects");
  v3 = sub_100332A84();
  v4 = sub_100332AC0();
  v5 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v2, v3, v4);

  v6 = objc_msgSend(v1, "insertedObjects");
  v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v6, v3, v4);

  sub_10059DD04(v7, v5);
  v9 = v8;
  sub_1003311C4(v8);
  v11 = v10;
  swift_bridgeObjectRelease(v9);
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  v13 = swift_bridgeObjectRetain_n(v11, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter(v14);
  v16 = (unint64_t)v11 >> 62;
  if (!os_log_type_enabled(v14, v15))
  {

    swift_bridgeObjectRelease_n(v11, 2);
    goto LABEL_8;
  }
  v17 = swift_slowAlloc(22, -1);
  v5 = (void *)swift_slowAlloc(32, -1);
  v25 = v5;
  *(_DWORD *)v17 = 136446466;
  v24 = sub_10001A820(0xD000000000000010, 0x8000000100700DC0, (uint64_t *)&v25);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
  *(_WORD *)(v17 + 12) = 2048;
  if (v16)
    goto LABEL_22;
  v18 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease(v11);
    v24 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "[%{public}s] Updated objects to inspect for orphan {count: %ld}", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v17, -1, -1);

LABEL_8:
    v14 = objc_msgSend(objc_allocWithZone((Class)NSMutableDictionary), "init");
    if (v16)
    {
      if (v11 < 0)
        v22 = v11;
      else
        v22 = v11 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v11);
      v17 = _CocoaArrayWrapper.endIndex.getter(v22);
      swift_bridgeObjectRelease(v11);
      if (!v17)
        goto LABEL_20;
    }
    else
    {
      v17 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v17)
        goto LABEL_20;
    }
    if (v17 >= 1)
      break;
    __break(1u);
LABEL_22:
    if (v11 < 0)
      v23 = v11;
    else
      v23 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v18 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v11);
  }
  for (i = 0; i != v17; ++i)
  {
    if ((v11 & 0xC000000000000001) != 0)
      v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v11);
    else
      v20 = *(id *)(v11 + 8 * i + 32);
    v21 = v20;
    objc_msgSend(v20, "updateDeletedFlagAccordingToOrphanState:", v14);

  }
LABEL_20:

  swift_bridgeObjectRelease(v11);
}

uint64_t sub_1003327CC()
{
  uint64_t v0;

  sub_1000178E8(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(unsigned int *)(v0 + 64) | ((unint64_t)*(unsigned __int16 *)(v0 + 68) << 32));
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 80));

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10033283C()
{
  uint64_t v0;

  sub_1003327CC();
  return swift_deallocClassInstance(v0, 152, 7);
}

uint64_t type metadata accessor for CDIngestionCoordinator()
{
  return objc_opt_self(_TtC7remindd22CDIngestionCoordinator);
}

uint64_t type metadata accessor for CDIngestionCoordinator.IngestionContext()
{
  return objc_opt_self(_TtCC7remindd22CDIngestionCoordinator16IngestionContext);
}

void sub_10033289C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;

  v22 = a6;
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_WORD *)(a7 + 16) = 0;
  *(_QWORD *)(a7 + 112) = _swiftEmptyArrayStorage;
  *(_QWORD *)(a7 + 120) = _swiftEmptyArrayStorage;
  *(_QWORD *)(a7 + 128) = _swiftEmptyArrayStorage;
  *(_QWORD *)(a7 + 136) = _swiftEmptyArrayStorage;
  *(_QWORD *)(a7 + 72) = a1;
  *(_QWORD *)(a7 + 80) = a2;
  *(_QWORD *)(a7 + 88) = a3;
  sub_1000184A8(a4, a7 + 24);
  swift_unknownObjectRetain(a2);
  v17 = a3;
  *(_QWORD *)(a7 + 144) = sub_1002B05A4((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(a7 + 96) = a5;
  *(_BYTE *)(a7 + 104) = v22;
  switch(a5)
  {
    case 0:
      goto LABEL_5;
    case 1:
    case 2:
    case 3:
      swift_unknownObjectRelease(a2);

      *(_WORD *)(a7 + 16) = 257;
      break;
    case 4:
      swift_unknownObjectRelease(a2);

      *(_BYTE *)(a7 + 17) = 1;
      break;
    default:
      if (a5 == 4499 || a5 == 4599)
      {
LABEL_5:
        swift_unknownObjectRelease(a2);

      }
      else
      {
        if (qword_1008371E8 != -1)
          swift_once(&qword_1008371E8, sub_100331650);
        v18 = sub_10001AAA8(v13, (uint64_t)qword_100845DC0);
        (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v18, v13);
        v19 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
        v20 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
        sub_1004A14D8((uint64_t)"unknown mode", 12, 2uLL, v19, v20);
        __break(1u);
      }
      break;
  }
}

unint64_t sub_100332A84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100839930;
  if (!qword_100839930)
  {
    v1 = objc_opt_self(NSManagedObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100839930);
  }
  return result;
}

unint64_t sub_100332AC0()
{
  unint64_t result;
  unint64_t v1;

  result = qword_100846120;
  if (!qword_100846120)
  {
    v1 = sub_100332A84();
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100846120);
  }
  return result;
}

uint64_t TantorMigrationAPI.PingOperation.__allocating_init(request:)(uint64_t a1)
{
  return sub_100332B78(a1, &qword_100846130, 1735289200, 0xE400000000000000);
}

uint64_t TantorMigrationAPI.PingOperation.init(request:)(uint64_t a1)
{
  return sub_100332C4C(a1, &qword_100846130, 1735289200, 0xE400000000000000);
}

void TantorMigrationAPI.PingOperation.init(functionName:request:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100332E30(a1, a2, a3, (uint64_t)"remindd.PingOperation", 21);
}

uint64_t TantorMigrationAPI.SubmitAllHubbleKpisOperation.__allocating_init(request:)(uint64_t a1)
{
  return sub_100332B78(a1, &qword_100846138, 0xD000000000000013, 0x8000000100700FB0);
}

uint64_t sub_100332B78(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v15;

  v9 = sub_10001A630(a2);
  __chkstk_darwin(v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_allocWithZone(v4);
  sub_100008868(a1, (uint64_t)v11, a2);
  v13 = CKCodeOperation.init(functionName:request:)(a3, a4, v11);
  sub_10000882C(a1, a2);
  return v13;
}

uint64_t TantorMigrationAPI.SubmitAllHubbleKpisOperation.init(request:)(uint64_t a1)
{
  return sub_100332C4C(a1, &qword_100846138, 0xD000000000000013, 0x8000000100700FB0);
}

uint64_t sub_100332C4C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v8 = sub_10001A630(a2);
  __chkstk_darwin(v8);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008868(a1, (uint64_t)v10, a2);
  v11 = CKCodeOperation.init(functionName:request:)(a3, a4, v10);
  sub_10000882C(a1, a2);
  return v11;
}

void TantorMigrationAPI.SubmitAllHubbleKpisOperation.init(functionName:request:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100332E30(a1, a2, a3, (uint64_t)"remindd.SubmitAllHubbleKpisOperation", 36);
}

uint64_t TantorMigrationAPI.StartMigrationOperation.__allocating_init(request:)(uint64_t a1)
{
  return sub_100332B78(a1, &qword_100846140, 0x67694D7472617473, 0xEE006E6F69746172);
}

uint64_t TantorMigrationAPI.StartMigrationOperation.init(request:)(uint64_t a1)
{
  return sub_100332C4C(a1, &qword_100846140, 0x67694D7472617473, 0xEE006E6F69746172);
}

void TantorMigrationAPI.StartMigrationOperation.init(functionName:request:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100332E30(a1, a2, a3, (uint64_t)"remindd.StartMigrationOperation", 31);
}

uint64_t TantorMigrationAPI.MigrateOperation.__allocating_init(request:)(uint64_t a1)
{
  return sub_100332B78(a1, &qword_100846148, 0x6574617267696DLL, 0xE700000000000000);
}

uint64_t TantorMigrationAPI.MigrateOperation.init(request:)(uint64_t a1)
{
  return sub_100332C4C(a1, &qword_100846148, 0x6574617267696DLL, 0xE700000000000000);
}

void TantorMigrationAPI.MigrateOperation.init(functionName:request:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100332E30(a1, a2, a3, (uint64_t)"remindd.MigrateOperation", 24);
}

uint64_t TantorMigrationAPI.UnmigrateOperation.__allocating_init(request:)(uint64_t a1)
{
  return sub_100332B78(a1, &qword_100846150, 0x74617267696D6E75, 0xE900000000000065);
}

uint64_t TantorMigrationAPI.UnmigrateOperation.init(request:)(uint64_t a1)
{
  return sub_100332C4C(a1, &qword_100846150, 0x74617267696D6E75, 0xE900000000000065);
}

void TantorMigrationAPI.UnmigrateOperation.init(functionName:request:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100332E30(a1, a2, a3, (uint64_t)"remindd.UnmigrateOperation", 26);
}

void sub_100332E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _swift_stdlib_reportUnimplementedInitializer(a4, a5, "init(functionName:request:)", 27, 0);
  __break(1u);
}

uint64_t TantorMigrationAPIAsync.ping(message:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;

  v12 = type metadata accessor for PingRequest(0);
  __chkstk_darwin(v12);
  v14 = &v17[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = a1;
  v19 = a2;
  v15 = sub_10009FC50(&qword_100838830, type metadata accessor for PingRequest, (uint64_t)&protocol conformance descriptor for PingRequest);
  static Message.with(_:)(sub_1003345D4, v17, v12, v15);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 8))(v14, a3, a4, a5, a6);
  return sub_10001C744((uint64_t)v14, type metadata accessor for PingRequest);
}

uint64_t TantorMigrationAPIAsync.submitAllHubbleKpis(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v8 = type metadata accessor for EmptyRequest(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnknownStorage.init()(v9);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 16))(v11, a1, a2, a3, a4);
  return sub_10001C744((uint64_t)v11, type metadata accessor for EmptyRequest);
}

uint64_t TantorMigrationAPIAsync.startMigration(archivePath:credential:embeddedTestData:disableCache:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t started;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(uint64_t);
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  v25 = a8;
  v24 = a7;
  started = type metadata accessor for StartMigrationRequest(0);
  __chkstk_darwin(started);
  v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = a1;
  v28 = a2;
  v29 = a3;
  v30 = a4;
  v31 = a5;
  v32 = a6;
  v20 = v19;
  v21 = sub_10009FC50(&qword_100838698, v19, (uint64_t)&protocol conformance descriptor for StartMigrationRequest);
  static Message.with(_:)(sub_1003345E8, v26, started, v21);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a10 + 24))(v18, v24, v25, a9, a10);
  return sub_10001C744((uint64_t)v18, v20);
}

uint64_t TantorMigrationAPIAsync.migrate(user:archivePath:embeddedTestData:options:userInitiated:simulatedError:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t (*v23)(uint64_t);
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39;
  char v40;
  int v41;
  char v42;

  v29 = a10;
  v30 = a9;
  v31 = a11;
  v28 = a12;
  v20 = type metadata accessor for MigrateRequest(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = a1;
  v34 = a2;
  v35 = a3;
  v36 = a4;
  v37 = a5;
  v38 = a6;
  v39 = BYTE4(a6) & 1;
  v40 = a7;
  v41 = a8;
  v42 = BYTE4(a8) & 1;
  v24 = v23;
  v25 = sub_10009FC50(&qword_100838710, v23, (uint64_t)&protocol conformance descriptor for MigrateRequest);
  static Message.with(_:)(sub_1003345FC, v32, v20, v25);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 32))(v22, v30, v29, v31);
  return sub_10001C744((uint64_t)v22, v24);
}

uint64_t TantorMigrationAPIAsync.unmigrate(options:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE v15[16];
  int v16;
  char v17;

  v10 = type metadata accessor for UnmigrateRequest(0);
  __chkstk_darwin(v10);
  v12 = &v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = a1;
  v17 = BYTE4(a1) & 1;
  v13 = sub_10009FC50(&qword_1008387A0, type metadata accessor for UnmigrateRequest, (uint64_t)&protocol conformance descriptor for UnmigrateRequest);
  static Message.with(_:)(sub_100334610, v15, v10, v13);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 40))(v12, a2, a3, a4, a5);
  return sub_10001C744((uint64_t)v12, type metadata accessor for UnmigrateRequest);
}

uint64_t TantorMigrationAPIAsyncClient.__allocating_init(codeService:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_allocObject(v1, 24, 7);
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t TantorMigrationAPIAsyncClient.init(codeService:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

void TantorMigrationAPIAsyncClient.ping(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;

  v6 = sub_10001A630(&qword_100846130);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v16 - v10;
  sub_1000151E8(a1, (uint64_t)&v16 - v10, type metadata accessor for PingRequest);
  v12 = type metadata accessor for PingRequest(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 0, 1, v12);
  v13 = objc_allocWithZone((Class)type metadata accessor for TantorMigrationAPI.PingOperation(0));
  sub_100008868((uint64_t)v11, (uint64_t)v8, &qword_100846130);
  v14 = (void *)CKCodeOperation.init(functionName:request:)(1735289200, 0xE400000000000000, v8);
  sub_10000882C((uint64_t)v11, &qword_100846130);
  v15 = v14;
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);

  CKCodeService.add<A, B>(_:)(v15);
}

void TantorMigrationAPIAsyncClient.submitAllHubbleKpis(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;

  v6 = sub_10001A630(&qword_100846138);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v16 - v10;
  sub_1000151E8(a1, (uint64_t)&v16 - v10, type metadata accessor for EmptyRequest);
  v12 = type metadata accessor for EmptyRequest(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 0, 1, v12);
  v13 = objc_allocWithZone((Class)type metadata accessor for TantorMigrationAPI.SubmitAllHubbleKpisOperation(0));
  sub_100008868((uint64_t)v11, (uint64_t)v8, &qword_100846138);
  v14 = (void *)CKCodeOperation.init(functionName:request:)(0xD000000000000013, 0x8000000100700FB0, v8);
  sub_10000882C((uint64_t)v11, &qword_100846138);
  v15 = v14;
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);

  CKCodeService.add<A, B>(_:)(v15);
}

void TantorMigrationAPIAsyncClient.startMigration(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t started;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;

  v6 = sub_10001A630(&qword_100846140);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v16 - v10;
  sub_1000151E8(a1, (uint64_t)&v16 - v10, type metadata accessor for StartMigrationRequest);
  started = type metadata accessor for StartMigrationRequest(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 56))(v11, 0, 1, started);
  v13 = objc_allocWithZone((Class)type metadata accessor for TantorMigrationAPI.StartMigrationOperation(0));
  sub_100008868((uint64_t)v11, (uint64_t)v8, &qword_100846140);
  v14 = (void *)CKCodeOperation.init(functionName:request:)(0x67694D7472617473, 0xEE006E6F69746172, v8);
  sub_10000882C((uint64_t)v11, &qword_100846140);
  v15 = v14;
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);

  CKCodeService.add<A, B>(_:)(v15);
}

void TantorMigrationAPIAsyncClient.migrate(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;

  v6 = sub_10001A630(&qword_100846148);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v16 - v10;
  sub_1000151E8(a1, (uint64_t)&v16 - v10, type metadata accessor for MigrateRequest);
  v12 = type metadata accessor for MigrateRequest(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 0, 1, v12);
  v13 = objc_allocWithZone((Class)type metadata accessor for TantorMigrationAPI.MigrateOperation(0));
  sub_100008868((uint64_t)v11, (uint64_t)v8, &qword_100846148);
  v14 = (void *)CKCodeOperation.init(functionName:request:)(0x6574617267696DLL, 0xE700000000000000, v8);
  sub_10000882C((uint64_t)v11, &qword_100846148);
  v15 = v14;
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);

  CKCodeService.add<A, B>(_:)(v15);
}

void TantorMigrationAPIAsyncClient.unmigrate(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;

  v6 = sub_10001A630(&qword_100846150);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v16 - v10;
  sub_1000151E8(a1, (uint64_t)&v16 - v10, type metadata accessor for UnmigrateRequest);
  v12 = type metadata accessor for UnmigrateRequest(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 0, 1, v12);
  v13 = objc_allocWithZone((Class)type metadata accessor for TantorMigrationAPI.UnmigrateOperation(0));
  sub_100008868((uint64_t)v11, (uint64_t)v8, &qword_100846150);
  v14 = (void *)CKCodeOperation.init(functionName:request:)(0x74617267696D6E75, 0xE900000000000065, v8);
  sub_10000882C((uint64_t)v11, &qword_100846150);
  v15 = v14;
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);

  CKCodeService.add<A, B>(_:)(v15);
}

uint64_t TantorMigrationAPIAsyncClient.deinit()
{
  uint64_t v0;

  return v0;
}

void sub_100333A7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  TantorMigrationAPIAsyncClient.ping(_:completion:)(a1, a2, a3);
}

void sub_100333A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  TantorMigrationAPIAsyncClient.submitAllHubbleKpis(_:completion:)(a1, a2, a3);
}

void sub_100333ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  TantorMigrationAPIAsyncClient.startMigration(_:completion:)(a1, a2, a3);
}

void sub_100333ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  TantorMigrationAPIAsyncClient.migrate(_:completion:)(a1, a2, a3);
}

void sub_100333AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  TantorMigrationAPIAsyncClient.unmigrate(_:completion:)(a1, a2, a3);
}

uint64_t TantorMigrationAPIAsyncOperation.ping(message:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;

  v12 = type metadata accessor for PingRequest(0);
  __chkstk_darwin(v12);
  v14 = &v18[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = a1;
  v20 = a2;
  v15 = sub_10009FC50(&qword_100838830, type metadata accessor for PingRequest, (uint64_t)&protocol conformance descriptor for PingRequest);
  static Message.with(_:)(sub_1003345D4, v18, v12, v15);
  v16 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 8))(v14, a3, a4, a5, a6);
  sub_10001C744((uint64_t)v14, type metadata accessor for PingRequest);
  return v16;
}

uint64_t TantorMigrationAPIAsyncOperation.submitAllHubbleKpis(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v8 = type metadata accessor for EmptyRequest(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnknownStorage.init()(v9);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 16))(v11, a1, a2, a3, a4);
  sub_10001C744((uint64_t)v11, type metadata accessor for EmptyRequest);
  return v12;
}

uint64_t TantorMigrationAPIAsyncOperation.startMigration(archivePath:credential:embeddedTestData:disableCache:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t started;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(uint64_t);
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[16];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  v26 = a8;
  v25 = a7;
  started = type metadata accessor for StartMigrationRequest(0);
  __chkstk_darwin(started);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = a1;
  v29 = a2;
  v30 = a3;
  v31 = a4;
  v32 = a5;
  v33 = a6;
  v20 = v19;
  v21 = sub_10009FC50(&qword_100838698, v19, (uint64_t)&protocol conformance descriptor for StartMigrationRequest);
  static Message.with(_:)(sub_1003345E8, v27, started, v21);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a10 + 24))(v18, v25, v26, a9, a10);
  sub_10001C744((uint64_t)v18, v20);
  return v22;
}

uint64_t sub_100333E00(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t started;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;

  v30 = a7;
  v28 = a5;
  v29 = a6;
  v11 = sub_10001A630(&qword_100839830);
  __chkstk_darwin(v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  started = type metadata accessor for StartMigrationRequest.Credential(0);
  v15 = *(_QWORD *)(started - 8);
  __chkstk_darwin(started);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v27 - v19;
  if (a3)
  {
    swift_bridgeObjectRetain(a3);
    sub_10000882C((uint64_t)a1, &qword_100838570);
    *a1 = a2;
    a1[1] = a3;
    v21 = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
    swift_storeEnumTagMultiPayload(a1, v21, 0);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a1, 0, 1, v21);
  }
  sub_100008868(a4, (uint64_t)v13, &qword_100839830);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, started) != 1)
  {
    sub_1000B8680((uint64_t)v13, (uint64_t)v20, type metadata accessor for StartMigrationRequest.Credential);
    sub_1000151E8((uint64_t)v20, (uint64_t)v17, type metadata accessor for StartMigrationRequest.Credential);
    sub_10000882C((uint64_t)a1, &qword_100838570);
    sub_1000B8680((uint64_t)v17, (uint64_t)a1, type metadata accessor for StartMigrationRequest.Credential);
    v24 = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
    swift_storeEnumTagMultiPayload(a1, v24, 1);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a1, 0, 1, v24);
    result = sub_10001C744((uint64_t)v20, type metadata accessor for StartMigrationRequest.Credential);
    v23 = v29;
    if (!v29)
      goto LABEL_8;
    goto LABEL_7;
  }
  result = sub_10000882C((uint64_t)v13, &qword_100839830);
  v23 = v29;
  if (v29)
  {
LABEL_7:
    swift_bridgeObjectRetain(v23);
    sub_10000882C((uint64_t)a1, &qword_100838570);
    *a1 = v28;
    a1[1] = v23;
    v25 = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
    swift_storeEnumTagMultiPayload(a1, v25, 2);
    result = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a1, 0, 1, v25);
  }
LABEL_8:
  if (v30 != 2)
  {
    v26 = v30 & 1;
    result = type metadata accessor for StartMigrationRequest(0);
    *((_BYTE *)a1 + *(int *)(result + 20)) = v26;
  }
  return result;
}

uint64_t TantorMigrationAPIAsyncOperation.migrate(user:archivePath:embeddedTestData:options:userInitiated:simulatedError:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t (*v23)(uint64_t);
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[16];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char v40;
  char v41;
  int v42;
  char v43;

  v30 = a10;
  v31 = a9;
  v32 = a11;
  v29 = a12;
  v20 = type metadata accessor for MigrateRequest(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = a1;
  v35 = a2;
  v36 = a3;
  v37 = a4;
  v38 = a5;
  v39 = a6;
  v40 = BYTE4(a6) & 1;
  v41 = a7;
  v42 = a8;
  v43 = BYTE4(a8) & 1;
  v24 = v23;
  v25 = sub_10009FC50(&qword_100838710, v23, (uint64_t)&protocol conformance descriptor for MigrateRequest);
  static Message.with(_:)(sub_1003345FC, v33, v20, v25);
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 32))(v22, v31, v30, v32);
  sub_10001C744((uint64_t)v22, v24);
  return v26;
}

int *sub_1003341EC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;

  v34 = a8;
  v32 = a6;
  v33 = a7;
  v30 = a3;
  v31 = a5;
  v12 = sub_10001A630(&qword_100839808);
  __chkstk_darwin(v12);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for MigrateRequest.User(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v29 - v20;
  sub_100008868(a2, (uint64_t)v14, &qword_100839808);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) != 1)
  {
    sub_1000B8680((uint64_t)v14, (uint64_t)v21, type metadata accessor for MigrateRequest.User);
    sub_1000151E8((uint64_t)v21, (uint64_t)v18, type metadata accessor for MigrateRequest.User);
    sub_10000882C((uint64_t)a1, &qword_100838580);
    sub_1000B8680((uint64_t)v18, (uint64_t)a1, type metadata accessor for MigrateRequest.User);
    v24 = type metadata accessor for MigrateRequest.OneOf_Source(0);
    swift_storeEnumTagMultiPayload(a1, v24, 0);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a1, 0, 1, v24);
    result = (int *)sub_10001C744((uint64_t)v21, type metadata accessor for MigrateRequest.User);
    v23 = v33;
    if (!a4)
      goto LABEL_6;
    goto LABEL_5;
  }
  result = (int *)sub_10000882C((uint64_t)v14, &qword_100839808);
  v23 = v33;
  if (a4)
  {
LABEL_5:
    swift_bridgeObjectRetain(a4);
    sub_10000882C((uint64_t)a1, &qword_100838580);
    *a1 = v30;
    a1[1] = a4;
    v25 = type metadata accessor for MigrateRequest.OneOf_Source(0);
    swift_storeEnumTagMultiPayload(a1, v25, 1);
    result = (int *)(*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a1, 0, 1, v25);
  }
LABEL_6:
  v26 = v32;
  if (v32)
  {
    swift_bridgeObjectRetain(v32);
    sub_10000882C((uint64_t)a1, &qword_100838580);
    *a1 = v31;
    a1[1] = v26;
    v27 = type metadata accessor for MigrateRequest.OneOf_Source(0);
    swift_storeEnumTagMultiPayload(a1, v27, 2);
    result = (int *)(*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(a1, 0, 1, v27);
  }
  if ((v23 & 0x100000000) == 0)
  {
    result = (int *)type metadata accessor for MigrateRequest(0);
    *(_DWORD *)((char *)a1 + result[5]) = v23;
  }
  if (v34 != 2)
  {
    v28 = v34 & 1;
    result = (int *)type metadata accessor for MigrateRequest(0);
    *((_BYTE *)a1 + result[6]) = v28;
  }
  if ((a9 & 0x100000000) == 0)
  {
    result = (int *)type metadata accessor for MigrateRequest(0);
    *(_DWORD *)((char *)a1 + result[7]) = a9;
  }
  return result;
}

uint64_t TantorMigrationAPIAsyncOperation.unmigrate(options:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[16];
  int v17;
  char v18;

  v10 = type metadata accessor for UnmigrateRequest(0);
  __chkstk_darwin(v10);
  v12 = &v16[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = a1;
  v18 = BYTE4(a1) & 1;
  v13 = sub_10009FC50(&qword_1008387A0, type metadata accessor for UnmigrateRequest, (uint64_t)&protocol conformance descriptor for UnmigrateRequest);
  static Message.with(_:)(sub_100334610, v16, v10, v13);
  v14 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 40))(v12, a2, a3, a4, a5);
  sub_10001C744((uint64_t)v12, type metadata accessor for UnmigrateRequest);
  return v14;
}

uint64_t sub_1003345D4(uint64_t a1)
{
  return sub_100334688(a1);
}

uint64_t sub_1003345E8(_QWORD *a1)
{
  return sub_1003346D8(a1);
}

int *sub_1003345FC(_QWORD *a1)
{
  return sub_1003346FC(a1);
}

_DWORD *sub_100334610(_DWORD *a1)
{
  return sub_100334754(a1);
}

uint64_t type metadata accessor for TantorMigrationAPI.PingOperation(uint64_t a1)
{
  return sub_10001522C(a1, (uint64_t *)&unk_100846158, (uint64_t)&nominal type descriptor for TantorMigrationAPI.PingOperation);
}

uint64_t type metadata accessor for TantorMigrationAPI.SubmitAllHubbleKpisOperation(uint64_t a1)
{
  return sub_10001522C(a1, (uint64_t *)&unk_1008461A8, (uint64_t)&nominal type descriptor for TantorMigrationAPI.SubmitAllHubbleKpisOperation);
}

uint64_t type metadata accessor for TantorMigrationAPI.StartMigrationOperation(uint64_t a1)
{
  return sub_10001522C(a1, (uint64_t *)&unk_1008461F8, (uint64_t)&nominal type descriptor for TantorMigrationAPI.StartMigrationOperation);
}

uint64_t type metadata accessor for TantorMigrationAPI.MigrateOperation(uint64_t a1)
{
  return sub_10001522C(a1, (uint64_t *)&unk_100846248, (uint64_t)&nominal type descriptor for TantorMigrationAPI.MigrateOperation);
}

uint64_t type metadata accessor for TantorMigrationAPI.UnmigrateOperation(uint64_t a1)
{
  return sub_10001522C(a1, (uint64_t *)&unk_100846298, (uint64_t)&nominal type descriptor for TantorMigrationAPI.UnmigrateOperation);
}

uint64_t sub_100334688(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v1 + 24);
  if (v2)
  {
    v3 = (_QWORD *)result;
    v4 = *(_QWORD *)(v1 + 16);
    v5 = *(_QWORD *)(result + 8);
    swift_bridgeObjectRetain(v2);
    result = swift_bridgeObjectRelease(v5);
    *v3 = v4;
    v3[1] = v2;
  }
  return result;
}

uint64_t sub_1003346D8(_QWORD *a1)
{
  uint64_t v1;

  return sub_100333E00(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(unsigned __int8 *)(v1 + 56));
}

int *sub_1003346FC(_QWORD *a1)
{
  uint64_t v1;

  return sub_1003341EC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(unsigned int *)(v1 + 56) | ((unint64_t)*(unsigned __int8 *)(v1 + 60) << 32), *(unsigned __int8 *)(v1 + 61), *(unsigned int *)(v1 + 64) | ((unint64_t)*(unsigned __int8 *)(v1 + 68) << 32));
}

_DWORD *sub_100334754(_DWORD *result)
{
  uint64_t v1;

  if ((*(_BYTE *)(v1 + 20) & 1) == 0)
    *result = *(_DWORD *)(v1 + 16);
  return result;
}

id TantorMigrationAPIAsyncOperationClient.ping(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v22;

  v4 = v3;
  v8 = sub_10001A630(&qword_100846130);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v22 - v12;
  sub_1000151E8(a1, (uint64_t)&v22 - v12, type metadata accessor for PingRequest);
  v14 = type metadata accessor for PingRequest(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 0, 1, v14);
  v15 = objc_allocWithZone((Class)type metadata accessor for TantorMigrationAPI.PingOperation(0));
  sub_100008868((uint64_t)v13, (uint64_t)v10, &qword_100846130);
  v16 = (void *)CKCodeOperation.init(functionName:request:)(1735289200, 0xE400000000000000, v10);
  sub_10000882C((uint64_t)v13, &qword_100846130);
  v17 = v16;
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);

  v18 = *(void **)(v4 + 16);
  v19 = v17;
  v20 = v18;
  dispatch thunk of CKCodeOperation.codeService.setter(v18);

  return v19;
}

id TantorMigrationAPIAsyncOperationClient.submitAllHubbleKpis(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v22;

  v4 = v3;
  v8 = sub_10001A630(&qword_100846138);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v22 - v12;
  sub_1000151E8(a1, (uint64_t)&v22 - v12, type metadata accessor for EmptyRequest);
  v14 = type metadata accessor for EmptyRequest(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 0, 1, v14);
  v15 = objc_allocWithZone((Class)type metadata accessor for TantorMigrationAPI.SubmitAllHubbleKpisOperation(0));
  sub_100008868((uint64_t)v13, (uint64_t)v10, &qword_100846138);
  v16 = (void *)CKCodeOperation.init(functionName:request:)(0xD000000000000013, 0x8000000100700FB0, v10);
  sub_10000882C((uint64_t)v13, &qword_100846138);
  v17 = v16;
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);

  v18 = *(void **)(v4 + 16);
  v19 = v17;
  v20 = v18;
  dispatch thunk of CKCodeOperation.codeService.setter(v18);

  return v19;
}

id TantorMigrationAPIAsyncOperationClient.startMigration(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t started;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v22;

  v4 = v3;
  v8 = sub_10001A630(&qword_100846140);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v22 - v12;
  sub_1000151E8(a1, (uint64_t)&v22 - v12, type metadata accessor for StartMigrationRequest);
  started = type metadata accessor for StartMigrationRequest(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 56))(v13, 0, 1, started);
  v15 = objc_allocWithZone((Class)type metadata accessor for TantorMigrationAPI.StartMigrationOperation(0));
  sub_100008868((uint64_t)v13, (uint64_t)v10, &qword_100846140);
  v16 = (void *)CKCodeOperation.init(functionName:request:)(0x67694D7472617473, 0xEE006E6F69746172, v10);
  sub_10000882C((uint64_t)v13, &qword_100846140);
  v17 = v16;
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);

  v18 = *(void **)(v4 + 16);
  v19 = v17;
  v20 = v18;
  dispatch thunk of CKCodeOperation.codeService.setter(v18);

  return v19;
}

id TantorMigrationAPIAsyncOperationClient.migrate(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v22;

  v4 = v3;
  v8 = sub_10001A630(&qword_100846148);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v22 - v12;
  sub_1000151E8(a1, (uint64_t)&v22 - v12, type metadata accessor for MigrateRequest);
  v14 = type metadata accessor for MigrateRequest(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 0, 1, v14);
  v15 = objc_allocWithZone((Class)type metadata accessor for TantorMigrationAPI.MigrateOperation(0));
  sub_100008868((uint64_t)v13, (uint64_t)v11, &qword_100846148);
  v16 = (void *)CKCodeOperation.init(functionName:request:)(0x6574617267696DLL, 0xE700000000000000, v11);
  sub_10000882C((uint64_t)v13, &qword_100846148);
  v17 = v16;
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);

  v18 = *(void **)(v4 + 16);
  v19 = v17;
  v20 = v18;
  dispatch thunk of CKCodeOperation.codeService.setter(v18);

  return v19;
}

id TantorMigrationAPIAsyncOperationClient.unmigrate(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v22;

  v4 = v3;
  v8 = sub_10001A630(&qword_100846150);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v22 - v12;
  sub_1000151E8(a1, (uint64_t)&v22 - v12, type metadata accessor for UnmigrateRequest);
  v14 = type metadata accessor for UnmigrateRequest(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 0, 1, v14);
  v15 = objc_allocWithZone((Class)type metadata accessor for TantorMigrationAPI.UnmigrateOperation(0));
  sub_100008868((uint64_t)v13, (uint64_t)v10, &qword_100846150);
  v16 = (void *)CKCodeOperation.init(functionName:request:)(0x74617267696D6E75, 0xE900000000000065, v10);
  sub_10000882C((uint64_t)v13, &qword_100846150);
  v17 = v16;
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);

  v18 = *(void **)(v4 + 16);
  v19 = v17;
  v20 = v18;
  dispatch thunk of CKCodeOperation.codeService.setter(v18);

  return v19;
}

id sub_100334E5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TantorMigrationAPIAsyncOperationClient.ping(_:completion:)(a1, a2, a3);
}

id sub_100334E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TantorMigrationAPIAsyncOperationClient.submitAllHubbleKpis(_:completion:)(a1, a2, a3);
}

id sub_100334E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TantorMigrationAPIAsyncOperationClient.startMigration(_:completion:)(a1, a2, a3);
}

id sub_100334EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TantorMigrationAPIAsyncOperationClient.migrate(_:completion:)(a1, a2, a3);
}

id sub_100334EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TantorMigrationAPIAsyncOperationClient.unmigrate(_:completion:)(a1, a2, a3);
}

ValueMetadata *type metadata accessor for TantorMigrationAPI()
{
  return &type metadata for TantorMigrationAPI;
}

uint64_t sub_100334F0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100334F68(a1, a2, a3, class metadata base offset for TantorMigrationAPI.PingOperation);
}

uint64_t sub_100334F18()
{
  return type metadata accessor for TantorMigrationAPI.PingOperation(0);
}

uint64_t sub_100334F20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100334F68(a1, a2, a3, class metadata base offset for TantorMigrationAPI.SubmitAllHubbleKpisOperation);
}

uint64_t sub_100334F2C()
{
  return type metadata accessor for TantorMigrationAPI.SubmitAllHubbleKpisOperation(0);
}

uint64_t sub_100334F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100334F68(a1, a2, a3, class metadata base offset for TantorMigrationAPI.StartMigrationOperation);
}

uint64_t sub_100334F40()
{
  return type metadata accessor for TantorMigrationAPI.StartMigrationOperation(0);
}

uint64_t sub_100334F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100334F68(a1, a2, a3, class metadata base offset for TantorMigrationAPI.MigrateOperation);
}

uint64_t sub_100334F54()
{
  return type metadata accessor for TantorMigrationAPI.MigrateOperation(0);
}

uint64_t sub_100334F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100334F68(a1, a2, a3, class metadata base offset for TantorMigrationAPI.UnmigrateOperation);
}

uint64_t sub_100334F68(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _BYTE v5[8];

  return swift_initClassMetadata2(a1, 0, 0, v5, a1 + *a4);
}

uint64_t sub_100334FA0()
{
  return type metadata accessor for TantorMigrationAPI.UnmigrateOperation(0);
}

uint64_t type metadata accessor for TantorMigrationAPIAsyncClient()
{
  return objc_opt_self(_TtC7remindd29TantorMigrationAPIAsyncClient);
}

uint64_t type metadata accessor for TantorMigrationAPIAsyncOperationClient()
{
  return objc_opt_self(_TtC7remindd38TantorMigrationAPIAsyncOperationClient);
}

uint64_t sub_100334FF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100846478);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100846478);
  if (qword_1008375F8 != -1)
    swift_once(&qword_1008375F8, sub_1004A1790);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FC8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_100335088()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(REMLog), "alarmEngine");
  qword_100846490 = (uint64_t)result;
  return result;
}

void sub_100335144()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;

  v1 = v0;
  v2 = type metadata accessor for OSSignpostID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1008371F0 != -1)
    swift_once(&qword_1008371F0, sub_100334FF8);
  v6 = type metadata accessor for Logger(0);
  v30 = sub_10001AAA8(v6, (uint64_t)qword_100846478);
  v7 = Logger.logObject.getter(v30);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "os_transaction INIT {name: com.apple.remindd.RDTimeAlarmProducer.reload}", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  v29 = os_transaction_create("com.apple.remindd.RDTimeAlarmProducer.reload");
  v10 = static os_signpost_type_t.begin.getter(v29);
  if (qword_1008371F8 != -1)
    swift_once(&qword_1008371F8, sub_100335088);
  v11 = qword_100846490;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v10, &_mh_execute_header, v11, "RDTimeAlarmProducer.reload", 26, 2, v5);
  v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12(v5, v2);
  v13 = sub_10000A388((_QWORD *)(v1 + OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_dataSource), *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_dataSource + 24));
  v14 = *v13;
  v15 = static os_signpost_type_t.begin.getter(v13);
  if (qword_100837290 != -1)
    swift_once(&qword_100837290, sub_10035A7C8);
  v16 = qword_100846A58;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v15, &_mh_execute_header, v16, "RDAlarmProducerDataSource.fetchAllTimeDataSourceAlarms", 54, 2, v5);
  v12(v5, v2);
  v17 = swift_retain();
  v18 = (_QWORD *)sub_100365FF8(v17);
  swift_release(v14);
  v20 = static os_signpost_type_t.end.getter(v19);
  v21 = qword_100846A58;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v20, &_mh_execute_header, v21, "RDAlarmProducerDataSource.fetchAllTimeDataSourceAlarms", 54, 2, v5);
  v12(v5, v2);
  sub_1003354C0((uint64_t)v18);
  sub_100335954(v18);
  v22 = swift_bridgeObjectRelease();
  v23 = static os_signpost_type_t.end.getter(v22);
  v24 = qword_100846490;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v23, &_mh_execute_header, v24, "RDTimeAlarmProducer.reload", 26, 2, v5);
  v25 = ((uint64_t (*)(char *, uint64_t))v12)(v5, v2);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "os_transaction RELEASE {name: com.apple.remindd.RDTimeAlarmProducer.reload}", v28, 2u);
    swift_slowDealloc(v28, -1, -1);
  }
  swift_unknownObjectRelease(v29);

}

void sub_1003354C0(uint64_t a1)
{
  char *v1;
  char *v2;
  NSObject *v4;
  Class isa;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  __n128 v26;
  uint64_t Strong;
  char *v28;
  _QWORD *v29;
  __n128 v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  NSObject *v40;
  uint64_t v41;
  char v42[16];

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  isa = v4[-1].isa;
  __chkstk_darwin(v4);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v2[OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_started] == 1)
  {
    v40 = v4;
    v13 = static os_signpost_type_t.begin.getter(v10);
    if (qword_1008371F8 != -1)
      swift_once(&qword_1008371F8, sub_100335088);
    v14 = qword_100846490;
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:)(v13, &_mh_execute_header, v14, "RDTimeAlarmProducer.produceExpiredAlarms", 40, 2, v12);
    v39 = *(void (**)(char *, uint64_t))(v9 + 8);
    v39(v12, v8);
    if (qword_1008371F0 != -1)
      swift_once(&qword_1008371F0, sub_100334FF8);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_10001AAA8(v15, (uint64_t)qword_100846478);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "RDTimeAlarmProducer is firing expired alarms", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    v21 = Date.init(timeIntervalSinceNow:)(v20, 3.0);
    __chkstk_darwin(v21);
    *(&v38 - 2) = (uint64_t)v7;
    v22 = sub_100351A84((void (*)(_QWORD, __n128))sub_100337A74, (uint64_t)(&v38 - 4), a1);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v25 = 134217984;
      v41 = v22[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "RDTimeAlarmProducer is firing expired alarms, count = %ld", v25, 0xCu);
      swift_slowDealloc(v25, -1, -1);
    }

    Strong = swift_unknownObjectUnownedLoadStrong(&v2[OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_delegate], v26);
    __chkstk_darwin(Strong);
    *(&v38 - 2) = (uint64_t)v7;
    v28 = v2;
    v29 = sub_100200C48((void (*)(uint64_t *__return_ptr, uint64_t))sub_100337A8C, (uint64_t)(&v38 - 4), (uint64_t)v22);
    swift_bridgeObjectRelease();
    sub_100203424(v28, (uint64_t)v29, Strong);
    swift_unknownObjectRelease(Strong);
    v30 = swift_bridgeObjectRelease();
    (*((void (**)(char *, NSObject *, __n128))isa + 1))(v7, v40, v30);

    v32 = static os_signpost_type_t.end.getter(v31);
    v33 = qword_100846490;
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:)(v32, &_mh_execute_header, v33, "RDTimeAlarmProducer.produceExpiredAlarms", 40, 2, v12);
    v39(v12, v8);
  }
  else
  {
    if (qword_1008371F0 != -1)
      swift_once(&qword_1008371F0, sub_100334FF8);
    v34 = type metadata accessor for Logger(0);
    v35 = sub_10001AAA8(v34, (uint64_t)qword_100846478);
    v40 = Logger.logObject.getter(v35);
    v36 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v40, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v36, "RDTimeAlarmProducer.start() must be called before fireExpiredAlarms", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

  }
}

void sub_100335954(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  Class isa;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint8_t *v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  void (*v70)(void);
  id v71;
  id v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  void (*v79)(char *, uint64_t, uint64_t);
  id v80;
  char *v81;
  void (*v82)(char *, uint64_t, __n128);
  char *v83;
  uint64_t v84;
  id v85;
  NSObject *v86;
  os_log_type_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  __n128 v94;
  uint64_t v95;
  char *v96;
  char *v97;
  _QWORD *v98;
  char *v99;
  void *v100;
  void *v101;
  id v102;
  id v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  id v107;
  uint64_t v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  os_log_t v112;
  uint64_t v113;
  _QWORD *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  uint8_t *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  __n128 v126;
  uint8_t *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  os_log_t v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(uint64_t, uint64_t);
  void (*v137)(char *, char *, uint64_t);
  _QWORD *v138;
  char *v139;
  void (*v140)(char *, NSObject *);
  char *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  char *v152;
  NSObject *v153;
  uint64_t v154;
  void *v155;
  char *v156;
  uint64_t v157;

  v151 = a1;
  v2 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v2);
  v4 = (char *)&v132 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A630(&qword_1008464F8);
  __chkstk_darwin(v5);
  v7 = (void **)((char *)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_10001A630((uint64_t *)&unk_100843790);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v142 = (uint64_t)&v132 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v132 - v12;
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)&v132 - v15);
  __chkstk_darwin(v17);
  v146 = (char *)&v132 - v18;
  __chkstk_darwin(v19);
  v147 = (uint64_t *)((char *)&v132 - v20);
  v148 = type metadata accessor for Date(0);
  v150 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148);
  v141 = (char *)&v132 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v143 = (char *)&v132 - v23;
  __chkstk_darwin(v24);
  v144 = (char *)&v132 - v25;
  __chkstk_darwin(v26);
  v28 = (char *)&v132 - v27;
  __chkstk_darwin(v29);
  v31 = (char *)&v132 - v30;
  v153 = type metadata accessor for OSSignpostID(0);
  isa = v153[-1].isa;
  __chkstk_darwin(v153);
  v152 = (char *)&v132 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_started) == 1)
  {
    v139 = v4;
    v145 = v31;
    v149 = v1;
    v35 = static os_signpost_type_t.begin.getter(v33);
    if (qword_1008371F8 != -1)
      swift_once(&qword_1008371F8, sub_100335088);
    v138 = v13;
    v36 = qword_100846490;
    v37 = v152;
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:)(v35, &_mh_execute_header, v36, "RDTimeAlarmProducer.addNextAlarmTimeEvent", 41, 2, v37);
    v140 = (void (*)(char *, NSObject *))*((_QWORD *)isa + 1);
    v140(v37, v153);
    if (qword_1008371F0 != -1)
      swift_once(&qword_1008371F0, sub_100334FF8);
    v38 = type metadata accessor for Logger(0);
    v39 = sub_10001AAA8(v38, (uint64_t)qword_100846478);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.default.getter(v40);
    v42 = os_log_type_enabled(v40, v41);
    v43 = v149;
    if (v42)
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "RDTimeAlarmProducer is setting up the timers", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }

    v45 = (uint64_t)v145;
    Date.init()(v46);
    sub_10000A388((_QWORD *)(v43 + OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_dataSource), *(_QWORD *)(v43 + OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_dataSource + 24));
    sub_10035CFCC(v45, (uint64_t)v151, (uint64_t)v7);
    if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      v47 = sub_10000882C((uint64_t)v7, &qword_1008464F8);
      v48 = Logger.logObject.getter(v47);
      v49 = static os_log_type_t.default.getter(v48);
      v50 = os_log_type_enabled(v48, v49);
      v51 = v148;
      v52 = (uint64_t)v139;
      if (v50)
      {
        v53 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "No alarm with future fireDate -- Done", v53, 2u);
        v54 = v53;
        v45 = (uint64_t)v145;
        swift_slowDealloc(v54, -1, -1);
      }

      v55 = v150;
      if (*(_QWORD *)(v149 + OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_beforeFirstUnlockNotificationEngine))
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v150 + 56))(v52, 1, 1, v51);
        sub_100263D90(v52);
        sub_10000882C(v52, (uint64_t *)&unk_1008380D0);
      }
      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v45, v51);
    }
    else
    {
      v135 = v39;
      v61 = *(int *)(v8 + 48);
      v62 = v147;
      v63 = v148;
      v64 = (char *)v147 + v61;
      v65 = (char *)v7 + v61;
      v66 = v45;
      v68 = *v7;
      v67 = v7[1];
      *v147 = v68;
      v62[1] = v67;
      v69 = v150;
      v70 = *(void (**)(void))(v150 + 32);
      ((void (*)(char *, char *, uint64_t))v70)((char *)v62 + v61, v65, v63);
      v71 = v68;
      v72 = v67;
      Date.init()(v72);
      v136 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
      v136(v66, v63);
      ((void (*)(uint64_t, char *, uint64_t))v70)(v66, v28, v63);
      v134 = v8;
      v73 = &v146[*(int *)(v8 + 48)];
      v137 = *(void (**)(char *, char *, uint64_t))(v69 + 16);
      v137(v73, v64, v63);
      v74 = (uint64_t)v144;
      v70();
      if ((static Date.> infix(_:_:)(v74, v66) & 1) != 0)
      {
        v75 = v134;
        v76 = *(int *)(v134 + 48);
        v77 = v146;
        v78 = &v146[v76];
        *(_QWORD *)v146 = v71;
        *((_QWORD *)v77 + 1) = v72;
        v79 = (void (*)(char *, uint64_t, uint64_t))v137;
        v137(&v77[v76], v64, v63);
        v80 = v71;
        v81 = v78;
        v82 = (void (*)(char *, uint64_t, __n128))v136;
        v136((uint64_t)v81, v63);
        v79(v143, v74, v63);
        v83 = (char *)v16 + *(int *)(v75 + 48);
        *v16 = v80;
        v16[1] = v72;
        v79(v83, (uint64_t)v64, v63);
        sub_1003379E4((uint64_t)v16, (uint64_t)v138);
        v84 = v142;
        sub_100337A2C((uint64_t)v16, v142);
        v85 = v80;
        v86 = Logger.logObject.getter(v85);
        v87 = static os_log_type_t.default.getter(v86);
        v88 = v87;
        if (os_log_type_enabled(v86, v87))
        {
          v89 = swift_slowAlloc(52, -1);
          v151 = (_QWORD *)swift_slowAlloc(8, -1);
          v141 = (char *)swift_slowAlloc(128, -1);
          v156 = v141;
          *(_DWORD *)v89 = 136447234;
          LODWORD(v135) = v88;
          v90 = sub_1002040FC((unint64_t *)&qword_100846B70, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          v133 = v86;
          v91 = v143;
          v92 = dispatch thunk of CustomStringConvertible.description.getter(v63, v90);
          v154 = sub_10001A820(v92, v93, (uint64_t *)&v156);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155);
          v94 = swift_bridgeObjectRelease();
          v82(v91, v63, v94);
          *(_WORD *)(v89 + 12) = 2080;
          v95 = *(int *)(v134 + 48);
          v96 = v146;
          v97 = &v146[v95];
          v98 = v138;
          v99 = (char *)v138 + v95;
          v100 = (void *)*v138;
          v101 = (void *)v138[1];
          *(_QWORD *)v146 = *v138;
          *((_QWORD *)v96 + 1) = v101;
          v137(&v96[v95], v99, v63);
          v154 = (uint64_t)v100;
          v155 = v101;
          v102 = v100;
          v103 = v101;
          v104 = String.init<A>(describing:)(&v154, &type metadata for RDDataSourceAlarm);
          v106 = v105;
          v136((uint64_t)v97, v63);
          v154 = sub_10001A820(v104, v106, (uint64_t *)&v156);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155);
          swift_bridgeObjectRelease();
          sub_10000882C(v84, (uint64_t *)&unk_100843790);
          sub_10000882C((uint64_t)v98, (uint64_t *)&unk_100843790);
          *(_WORD *)(v89 + 22) = 2114;
          v107 = objc_msgSend(v85, "objectID");
          v154 = (uint64_t)v107;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155);
          *v151 = v107;

          *(_WORD *)(v89 + 32) = 2082;
          if (objc_msgSend(v85, "isRecurrent"))
            v108 = 89;
          else
            v108 = 78;
          v154 = sub_10001A820(v108, 0xE100000000000000, (uint64_t *)&v156);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155);

          *(_QWORD *)&v109 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v89 + 42) = 2082;
          v82 = (void (*)(char *, uint64_t, __n128))v136;
          v110 = v149;
          if (objc_msgSend(v85, "isOverdue", v109))
            v111 = 89;
          else
            v111 = 78;
          v74 = (uint64_t)v144;
          v154 = sub_10001A820(v111, 0xE100000000000000, (uint64_t *)&v156);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155);

          swift_bridgeObjectRelease();
          v112 = v133;
          _os_log_impl((void *)&_mh_execute_header, v133, (os_log_type_t)v135, "Scheduling next alarm {fireDate: %{public}s, nextAlarm: %s, reminderID: %{public}@, recurrent: %{public}s, overdue: %{public}s}", (uint8_t *)v89, 0x34u);
          v113 = sub_10001A630((uint64_t *)&unk_100839E70);
          v114 = v151;
          swift_arrayDestroy(v151, 1, v113);
          swift_slowDealloc(v114, -1, -1);
          v115 = v141;
          swift_arrayDestroy(v141, 4, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v115, -1, -1);
          swift_slowDealloc(v89, -1, -1);

          v116 = v145;
          v117 = (uint64_t)v139;
        }
        else
        {
          ((void (*)(char *, uint64_t))v82)(v143, v63);
          sub_10000882C(v84, (uint64_t *)&unk_100843790);
          sub_10000882C((uint64_t)v138, (uint64_t *)&unk_100843790);

          v116 = v145;
          v117 = (uint64_t)v139;
          v110 = v149;
        }
        if (*(_QWORD *)(v110 + OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_beforeFirstUnlockNotificationEngine))
        {
          v137((char *)v117, (char *)v74, v63);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v150 + 56))(v117, 0, 1, v63);
          sub_100263D90(v117);
          sub_10000882C(v117, (uint64_t *)&unk_1008380D0);
        }
        sub_100310AA0(v74);

        ((void (*)(uint64_t, uint64_t))v82)(v74, v63);
        sub_10000882C((uint64_t)v147, (uint64_t *)&unk_100843790);
        v128 = v116;
      }
      else
      {
        v82 = (void (*)(char *, uint64_t, __n128))v136;

        v118 = v141;
        v119 = ((uint64_t (*)(char *, uint64_t, uint64_t))v137)(v141, v74, v63);
        v120 = Logger.logObject.getter(v119);
        v121 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v120, v121))
        {
          v122 = (uint8_t *)swift_slowAlloc(12, -1);
          v123 = swift_slowAlloc(32, -1);
          v154 = v123;
          *(_DWORD *)v122 = 136446210;
          v124 = Date.description.getter(v123);
          v156 = (char *)sub_10001A820(v124, v125, &v154);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &v157);
          v126 = swift_bridgeObjectRelease();
          v82(v118, v63, v126);
          _os_log_impl((void *)&_mh_execute_header, v120, v121, "Next alarm is in the past -- Not adding event {fireDate: %{public}s}", v122, 0xCu);
          swift_arrayDestroy(v123, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v123, -1, -1);
          v127 = v122;
          v74 = (uint64_t)v144;
          swift_slowDealloc(v127, -1, -1);
        }
        else
        {
          ((void (*)(char *, uint64_t))v82)(v118, v63);
        }

        sub_1003354C0((uint64_t)v151);
        ((void (*)(uint64_t, uint64_t))v82)(v74, v63);
        sub_10000882C((uint64_t)v147, (uint64_t *)&unk_100843790);
        v128 = v145;
      }
      v56.n128_f64[0] = ((double (*)(char *, uint64_t))v82)(v128, v63);
    }
    v129 = static os_signpost_type_t.end.getter(v56);
    v130 = qword_100846490;
    v131 = v152;
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:)(v129, &_mh_execute_header, v130, "RDTimeAlarmProducer.addNextAlarmTimeEvent", 41, 2, v131);
    v140(v131, v153);
  }
  else
  {
    if (qword_1008371F0 != -1)
      swift_once(&qword_1008371F0, sub_100334FF8);
    v57 = type metadata accessor for Logger(0);
    v58 = sub_10001AAA8(v57, (uint64_t)qword_100846478);
    v153 = Logger.logObject.getter(v58);
    v59 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v153, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v153, v59, "RDTimeAlarmProducer.start() must be called before setupTimers", v60, 2u);
      swift_slowDealloc(v60, -1, -1);
    }

  }
}

uint64_t sub_1003366A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void (*v21)(char *, __n128);
  void (*v22)(char *, uint64_t);
  id v23;
  id v24;
  char *v25;
  char *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  double v30;
  char *v31;
  char *v32;
  int v33;
  uint64_t v34;
  char *v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  __n128 v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  double v51;
  uint64_t v52;
  os_log_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t result;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  os_log_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void *v74;
  _QWORD *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;

  v75 = a3;
  v73 = a2;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v72 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v71 = (char *)&v67 - v8;
  __chkstk_darwin(v9);
  v76 = (char *)&v67 - v10;
  v11 = sub_10001A630((uint64_t *)&unk_100843790);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(int *)(v15 + 48);
  v17 = &v14[v16];
  v70 = (os_log_t)(a1 + v16);
  v18 = *(void **)a1;
  v19 = *(void **)(a1 + 8);
  *(_QWORD *)v14 = *(_QWORD *)a1;
  *((_QWORD *)v14 + 1) = v19;
  v20 = v5;
  v21 = *(void (**)(char *, __n128))(v5 + 16);
  v21(&v14[v16], v12);
  v22 = *(void (**)(char *, uint64_t))(v5 + 8);
  v23 = v18;
  v24 = v19;
  v25 = v76;
  v74 = v24;
  v22(v17, v4);
  v26 = &v14[*(int *)(v11 + 48)];
  v27 = v4;
  ((void (*)(char *, os_log_t, uint64_t))v21)(v26, v70, v4);
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v25, v26, v4);
  sub_100337AA8();
  v28 = v23;
  v74 = v74;
  v29 = static NSDateInterval.remNotificationFireDateGracePeriod.getter();
  v31 = v71;
  Date.addingTimeInterval(_:)(v29, -v30);
  v32 = v31;
  v33 = static Date.> infix(_:_:)(v25, v31);
  v22(v32, v4);
  if (qword_1008371F0 != -1)
    swift_once(&qword_1008371F0, sub_100334FF8);
  LODWORD(v73) = v33;
  v34 = type metadata accessor for Logger(0);
  sub_10001AAA8(v34, (uint64_t)qword_100846478);
  v35 = v72;
  ((void (*)(char *, char *, uint64_t))v21)(v72, v76, v4);
  v36 = v28;
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.default.getter(v37);
  v39 = v38;
  if (os_log_type_enabled(v37, v38))
  {
    v40 = swift_slowAlloc(42, -1);
    v41 = swift_slowAlloc(8, -1);
    v70 = v37;
    v42 = (_QWORD *)v41;
    v68 = v41;
    v71 = (char *)swift_slowAlloc(96, -1);
    v79 = v71;
    *(_DWORD *)v40 = 138544130;
    v69 = v39;
    v43 = objc_msgSend(v36, "objectID");
    v77 = (uint64_t)v43;
    v44 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
    *v42 = v43;
    *(_WORD *)(v40 + 12) = 2082;
    v45 = Date.description.getter(v44);
    v77 = sub_10001A820(v45, v46, (uint64_t *)&v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
    v47 = swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t, __n128))v22)(v35, v27, v47);
    *(_WORD *)(v40 + 22) = 2082;
    v48 = v73;
    if ((v73 & 1) != 0)
      v49 = 0x657669746361;
    else
      v49 = 0x65766973736170;
    if ((v73 & 1) != 0)
      v50 = 0xE600000000000000;
    else
      v50 = 0xE700000000000000;
    v77 = sub_10001A820(v49, v50, (uint64_t *)&v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
    *(_QWORD *)&v51 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v40 + 32) = 2082;
    if (objc_msgSend(v36, "isRecurrent", v51))
      v52 = 89;
    else
      v52 = 78;
    v77 = sub_10001A820(v52, 0xE100000000000000, (uint64_t *)&v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);

    swift_bridgeObjectRelease();
    v53 = v70;
    _os_log_impl((void *)&_mh_execute_header, v70, (os_log_type_t)v69, "RDTimeAlarmProducer expiredAlarm {reminderID: %{public}@, fireDate: %{public}s alarmType: %{public}s, recurrent: %{public}s}", (uint8_t *)v40, 0x2Au);
    v54 = sub_10001A630((uint64_t *)&unk_100839E70);
    v55 = v68;
    swift_arrayDestroy(v68, 1, v54);
    swift_slowDealloc(v55, -1, -1);
    v56 = v71;
    swift_arrayDestroy(v71, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v40, -1, -1);

  }
  else
  {
    v22(v35, v27);

    v48 = v73;
  }
  v57 = v74;
  v58 = sub_1005BB458(v74);
  v60 = v59;
  v62 = v61;
  v64 = v63;

  result = ((uint64_t (*)(char *, uint64_t))v22)(v76, v27);
  v66 = v75;
  *v75 = v36;
  v66[1] = v58;
  v66[2] = v60;
  v66[3] = v62;
  *((_BYTE *)v66 + 32) = v64;
  *((_BYTE *)v66 + 33) = (v48 & 1) == 0;
  *((_BYTE *)v66 + 34) = 1;
  return result;
}

void sub_100336C48()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t ObjectType;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void (*)(), uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (uint64_t *)((char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)&v0[OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_queue];
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1, v3);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if ((v0[OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_started] & 1) != 0)
  {
    if (qword_1008371F0 == -1)
    {
LABEL_4:
      v8 = type metadata accessor for Logger(0);
      v9 = sub_10001AAA8(v8, (uint64_t)qword_100846478);
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDTimeAlarmProducer.start() must be called exactly once", v12, 2u);
        swift_slowDealloc(v12, -1, -1);
      }

      return;
    }
LABEL_14:
    swift_once(&qword_1008371F0, sub_100334FF8);
    goto LABEL_4;
  }
  v0[OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_started] = 1;
  if (qword_1008371F0 != -1)
    swift_once(&qword_1008371F0, sub_100334FF8);
  v13 = type metadata accessor for Logger(0);
  sub_10001AAA8(v13, (uint64_t)qword_100846478);
  v14 = v0;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    *(_DWORD *)v17 = 136315138;
    v27 = 60;
    v28 = 0xE100000000000000;
    v29 = v18;
    v19._countAndFlagsBits = sub_1004E8C68((uint64_t)v14);
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 62;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    v27 = sub_10001A820(v27, v28, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Starting time alarm producer {producer: %s}", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

  }
  v21 = *(_QWORD *)&v14[OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_timeEventStream + 8];
  ObjectType = swift_getObjectType();
  v23 = swift_allocObject(&unk_1007EF1E0, 24, 7);
  swift_unknownObjectWeakInit(v23 + 16, v14);
  v24 = *(_QWORD *)(v21 + 8);
  v25 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v24 + 16);
  swift_retain();
  v25(sub_100337B08, v23, ObjectType, v24);
  swift_release(v23);
  sub_100335144();
}

void sub_100336FE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  _BYTE v14[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v14, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    v4 = Strong;
    if (qword_1008371F0 != -1)
      swift_once(&qword_1008371F0, sub_100334FF8);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10001AAA8(v5, (uint64_t)qword_100846478);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Received RDTimeEventHandler event on RDTimeAlarmProducer, reloading alarms.", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    sub_100335144();
  }
  else
  {
    if (qword_1008371F0 != -1)
      swift_once(&qword_1008371F0, sub_100334FF8);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_10001AAA8(v10, (uint64_t)qword_100846478);
    v4 = Logger.logObject.getter(v11);
    v12 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v4, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v12, "Received RDTimeEventHandler event on deallocated RDTimeAlarmProducer", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }
  }

}

unint64_t sub_10033718C()
{
  return 0xD000000000000013;
}

void sub_1003371A8()
{
  sub_100336C48();
}

void sub_1003371C8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if (qword_1008371F0 != -1)
    swift_once(&qword_1008371F0, sub_100334FF8);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100846478);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Alarm trigger did change for time alarm producer", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  sub_100335144();
}

uint64_t sub_1003372A0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  double v24;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v5);
  v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100455538(a1, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10000882C((uint64_t)v7, (uint64_t *)&unk_1008380D0);
    if (qword_1008371F0 != -1)
      swift_once(&qword_1008371F0, sub_100334FF8);
    v12 = type metadata accessor for Logger(0);
    sub_10001AAA8(v12, (uint64_t)qword_100846478);
    v13 = a1;
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v28 = a2;
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v30 = v27;
      *(_DWORD *)v16 = 136315138;
      v26[1] = v16 + 4;
      v17 = objc_msgSend(v13, "description");
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v20 = v19;

      v29 = sub_10001A820(v18, v20, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);

      a2 = v28;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Tried to fire timeInterval alarm with nil dueDate {reminder: %s}", v16, 0xCu);
      v21 = 1;
      v22 = v27;
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {

      v21 = 1;
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    v23 = objc_msgSend(v2, "timeInterval");
    Date.addingTimeInterval(_:)(v23, v24);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v21 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, v21, 1, v8);
}

uint64_t sub_100337588@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t, char *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  double v23;
  id v25;
  uint64_t v26;

  v26 = a4;
  v7 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v25 - v11;
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v14 + 56);
  v18(v9, 1, 1, v13, v15);
  a3(a1, a2, v9);
  sub_10000882C((uint64_t)v9, (uint64_t *)&unk_1008380D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_10000882C((uint64_t)v12, (uint64_t *)&unk_1008380D0);
    v19 = 1;
    v20 = v26;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v12, v13);
    v21 = objc_msgSend(v25, "timeInterval");
    v22 = v26;
    Date.addingTimeInterval(_:)(v21, v23);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    v19 = 0;
    v20 = v22;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v18)(v20, v19, 1, v13);
}

uint64_t sub_100337730@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003372A0(a1, a2);
}

uint64_t sub_100337750@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100337588(a1, a2, (void (*)(uint64_t, uint64_t, char *))sub_1004552F4, a3);
}

uint64_t sub_100337778@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100337588(a1, a2, (void (*)(uint64_t, uint64_t, char *))sub_100454FEC, a3);
}

uint64_t sub_1003377A0@<X0>(uint64_t a1@<X8>)
{
  id *v1;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v10;

  v3 = type metadata accessor for DateComponents(0);
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)&v5 = __chkstk_darwin(v3).n128_u64[0];
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(*v1, "dateComponents", v5);
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v8);

  sub_1004556F0(a1);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_10033784C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100337864(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, char *))sub_1004552F4);
}

uint64_t sub_100337858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100337864(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, char *))sub_100454FEC);
}

uint64_t sub_100337864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, char *))
{
  id *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t v19;

  v9 = type metadata accessor for DateComponents(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A630((uint64_t *)&unk_1008380D0);
  *(_QWORD *)&v14 = __chkstk_darwin(v13).n128_u64[0];
  v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = objc_msgSend(*v5, "dateComponents", v14);
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v17);

  sub_1004556F0((uint64_t)v16);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  a5(a1, a2, v16);
  return sub_10000882C((uint64_t)v16, (uint64_t *)&unk_1008380D0);
}

uint64_t type metadata accessor for RDTimeAlarmProducer()
{
  return objc_opt_self(_TtC7remindd19RDTimeAlarmProducer);
}

uint64_t sub_1003379A8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1002040FC(&qword_1008464F0, a2, (uint64_t (*)(uint64_t))type metadata accessor for RDTimeAlarmProducer, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1003379E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_100843790);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100337A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_100843790);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100337A74@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_10035E030(a1, *(NSObject **)(v2 + 16), a2);
}

uint64_t sub_100337A8C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1003366A4(a1, *(_QWORD *)(v2 + 16), a2);
}

unint64_t sub_100337AA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100850D70;
  if (!qword_100850D70)
  {
    v1 = objc_opt_self(NSDateInterval);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100850D70);
  }
  return result;
}

uint64_t sub_100337AE4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100337B08()
{
  uint64_t v0;

  sub_100336FE0(v0);
}

NSString sub_100337B10(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  void *v6;
  objc_class *v7;
  char *v8;
  char *v9;
  id v10;
  id v11;
  NSString v12;
  void *v13;
  uint64_t v14;
  objc_super v16;
  char v17[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v17, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3, v4);
  if (Strong)
  {
    v6 = (void *)Strong;
    v7 = (objc_class *)type metadata accessor for RDDaemonController();
    v8 = (char *)objc_allocWithZone(v7);
    v9 = &v8[OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon];
    *(_QWORD *)v9 = v6;
    *((_QWORD *)v9 + 1) = &off_1007EF200;
    sub_1000184A8(a2, (uint64_t)&v8[OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity]);
    *(_QWORD *)&v8[OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken] = 0;
    v10 = v6;
    sub_10001BAE8(a2);
    v16.receiver = v8;
    v16.super_class = v7;
    v11 = objc_msgSendSuper2(&v16, "init");
    v12 = objc_msgSend(objc_allocWithZone((Class)REMStore), "initWithDaemonController:", v11);

  }
  else
  {
    v13 = (void *)objc_opt_self(REMError);
    v12 = String._bridgeToObjectiveC()();
    objc_msgSend(v13, "internalErrorWithDebugDescription:", v12);

    swift_willThrow(v14);
  }
  return v12;
}

id sub_100337CAC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDXPCDaemon();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RDXPCDaemon()
{
  return objc_opt_self(_TtC7remindd11RDXPCDaemon);
}

id sub_100337D94(uint64_t a1, void *a2)
{
  return sub_100338A58(a2);
}

char *sub_100337D9C(uint64_t a1, void *a2)
{
  return sub_100338BD4(a2);
}

id sub_100337DA4(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v5 = swift_allocObject(&unk_1007EF248, 24, 7);
  swift_unknownObjectWeakInit(v5 + 16, v2);
  v6 = swift_allocObject(&unk_1007EF270, 70, 7);
  *(_QWORD *)(v6 + 16) = v5;
  sub_1000184A8(a1, v6 + 24);
  sub_10001BAE8(a1);
  v7 = sub_100133244((uint64_t)sub_100337F08, v6, a1, a2);
  swift_release(v6);
  return v7;
}

void *sub_100337E60()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC7remindd11RDXPCDaemon_indexingPerformer);
  v2 = v1;
  return v1;
}

unint64_t sub_100337E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  _QWORD *v5;

  Strong = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC7remindd11RDXPCDaemon_daemon, a2);
  if (!Strong)
    return sub_1002AF320((uint64_t)_swiftEmptyArrayStorage);
  v4 = (void *)Strong;
  v5 = sub_10051EF04();

  return (unint64_t)v5;
}

uint64_t sub_100337EE0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

NSString sub_100337F08()
{
  uint64_t v0;

  return sub_100337B10(*(_QWORD *)(v0 + 16), v0 + 24);
}

uint64_t sub_100337F24(void *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  NSString v22;
  double v23;
  id v24;
  dispatch_queue_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *p_isa;
  void (*v31)(uint64_t, char *, id);
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t isEscapingClosureAtFileLocation;
  void (*v37)(char *, id);
  id v38;
  void (*v39)();
  uint64_t v40;
  char *v41;
  id v42;
  int v43;
  void *v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  id v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  id v63;
  char v64;
  uint64_t result;
  id v66;
  id v67;
  char *v68;
  void (**v69)(char *, id);
  void (*v70)(uint64_t, char *, id);
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  dispatch_queue_t v79;
  id v80;
  void **aBlock;
  unint64_t v82;
  uint64_t (*v83)(uint64_t);
  void *v84;
  __int128 v85;
  id v86;
  _QWORD v87[4];
  __int16 v88;
  NSURL v89;

  v79 = a3;
  v73 = a2;
  v4 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  __chkstk_darwin(v4);
  v77 = (uint64_t)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v6);
  v69 = (void (**)(char *, id))((char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)type metadata accessor for URL(0);
  v13 = (char *)*(v12 - 1);
  v14 = *((_QWORD *)v13 + 8);
  v15 = __chkstk_darwin(v12);
  v16 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v67 - v17;
  v80 = (id)objc_opt_self(RDPaths);
  v74 = a1;
  v19 = objc_msgSend(a1, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

  UUID.uuidString.getter();
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v22 = String._bridgeToObjectiveC()();
  *(_QWORD *)&v23 = swift_bridgeObjectRelease(v21).n128_u64[0];
  v24 = objc_msgSend(v80, "urlForIsolatedContainerWithIdentifier:", v22, v23);

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v86 = 0;
  v25 = v79;
  v26 = *(NSObject **)((char *)&v79->isa + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_accessQueue);
  v71 = *((_QWORD *)v13 + 2);
  ((void (*)(char *, char *, _QWORD *))v71)(v16, v18, v12);
  v27 = v13[80];
  v28 = (v27 + 32) & ~v27;
  v76 = v14;
  v72 = v27 | 7;
  v29 = swift_allocObject(&unk_1007EF298, v28 + v14, v27 | 7);
  *(_QWORD *)(v29 + 16) = &v86;
  *(_QWORD *)(v29 + 24) = v25;
  p_isa = &v25->isa;
  v31 = (void (*)(uint64_t, char *, id))*((_QWORD *)v13 + 4);
  v75 = v16;
  v80 = v12;
  v70 = v31;
  v31(v29 + v28, v16, v12);
  v32 = swift_allocObject(&unk_1007EF2C0, 32, 7);
  *(_QWORD *)(v32 + 16) = sub_100338D64;
  *(_QWORD *)(v32 + 24) = v29;
  v78 = v29;
  *(_QWORD *)&v85 = sub_1000098E4;
  *((_QWORD *)&v85 + 1) = v32;
  aBlock = _NSConcreteStackBlock;
  v82 = 1107296256;
  v83 = sub_1000098C4;
  v84 = &unk_1007EF2D8;
  v33 = _Block_copy(&aBlock);
  v34 = *((_QWORD *)&v85 + 1);
  v35 = p_isa;
  swift_retain(v32);
  swift_release(v34);
  v79 = v26;
  dispatch_sync(v26, v33);
  _Block_release(v33);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v32, "", 105, 849, 26, 1);
  swift_release(v32);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_12:
    swift_once(&qword_100836F18, sub_1001BA744);
    goto LABEL_8;
  }
  if (v86)
  {
    v37 = (void (*)(char *, id))*((_QWORD *)v13 + 1);
    v38 = v86;
    v37(v18, v80);
    v39 = 0;
    v40 = 0;
LABEL_10:
    v66 = v86;
    swift_release(v78);

    sub_1000A5C24((uint64_t)v39, v40);
    return (uint64_t)v38;
  }
  v67 = v35;
  v41 = (char *)v69;
  v42 = v80;
  v26 = v71;
  ((void (*)(void (**)(char *, id), char *, id))v71)(v69, v18, v80);
  (*((void (**)(char *, _QWORD, uint64_t, id))v13 + 7))(v41, 0, 1, v42);
  v43 = (*((uint64_t (**)(char *, uint64_t, id))v13 + 6))(v41, 1, v42);
  v68 = v18;
  if (v43 == 1)
  {
    v44 = 0;
  }
  else
  {
    URL._bridgeToObjectiveC()(&v89);
    v44 = v45;
    (*((void (**)(char *, id))v13 + 1))(v41, v80);
  }
  v69 = (void (**)(char *, id))v13;
  v34 = ~v27;
  v46 = objc_msgSend(objc_allocWithZone((Class)RDStoreController), "initWithIsolatedReminderDataContainerURL:", v44);

  v47 = type metadata accessor for RDAccountUtils();
  v48 = swift_allocObject(v47, 48, 7);
  *(_QWORD *)(v48 + 24) = 0;
  swift_unknownObjectWeakInit(v48 + 16, 0);
  swift_unknownObjectWeakInit(v48 + 32, 0);
  *(_QWORD *)(v48 + 24) = &off_1007EF200;
  swift_unknownObjectWeakAssign(v48 + 16, v73);
  swift_unknownObjectWeakAssign(v48 + 32, v46);
  v49 = v74;
  *(_QWORD *)(v48 + 40) = v74;
  v50 = v49;
  objc_msgSend(v46, "setAccountUtils:", v48);
  swift_release(v48);
  v87[0] = 0x4014000000000000;
  v51 = type metadata accessor for RDStoreControllerNotificationCenter();
  memset(&v87[1], 0, 24);
  v88 = 0;
  swift_allocObject(v51, 64, 7);
  isEscapingClosureAtFileLocation = (uint64_t)v46;
  p_isa = sub_100393A5C(0, 0, (void *)isEscapingClosureAtFileLocation, (uint64_t)v87);
  if (qword_100836F18 != -1)
    goto LABEL_12;
LABEL_8:
  v52 = v77;
  sub_100395434(0, (void *)qword_100871CD8, (uint64_t)sub_1000FD1C8, 0, v77);
  sub_1000A3F78(v52);
  v53 = v75;
  v54 = v80;
  ((void (*)(char *, char *, id))v26)(v75, v68, v80);
  v55 = (v27 + 16) & v34;
  v56 = (v76 + v55 + 7) & 0xFFFFFFFFFFFFFFF8;
  v57 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8;
  v58 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8;
  v40 = swift_allocObject(&unk_1007EF310, v58 + 8, v72);
  v70(v40 + v55, v53, v54);
  v59 = v67;
  *(_QWORD *)(v40 + v56) = v67;
  *(_QWORD *)(v40 + v57) = isEscapingClosureAtFileLocation;
  *(_QWORD *)(v40 + v58) = p_isa;
  v60 = swift_allocObject(&unk_1007EF338, 32, 7);
  *(_QWORD *)(v60 + 16) = sub_100338E40;
  *(_QWORD *)(v60 + 24) = v40;
  *(_QWORD *)&v85 = sub_1000A66B8;
  *((_QWORD *)&v85 + 1) = v60;
  aBlock = _NSConcreteStackBlock;
  v82 = 1107296256;
  v83 = sub_1000098C4;
  v84 = &unk_1007EF350;
  v61 = _Block_copy(&aBlock);
  v62 = *((_QWORD *)&v85 + 1);
  v63 = v59;
  v38 = (id)isEscapingClosureAtFileLocation;
  swift_retain(p_isa);
  swift_retain(v60);
  swift_release(v62);
  dispatch_sync(v79, v61);
  _Block_release(v61);
  v64 = swift_isEscapingClosureAtFileLocation(v60, "", 105, 866, 30, 1);
  result = swift_release(v60);
  if ((v64 & 1) == 0)
  {
    aBlock = (void **)0xD000000000000025;
    v82 = 0x80000001007014A0;
    v84 = 0;
    *(_QWORD *)&v85 = 0;
    v83 = 0;
    *(_QWORD *)((char *)&v85 + 6) = 0;
    __chkstk_darwin(result);
    *(&v67 - 2) = v38;
    sub_10035288C((uint64_t)&aBlock, (uint64_t)sub_100338EA8, (uint64_t)(&v67 - 4));
    v69[1](v68, v80);
    swift_release(p_isa);
    v39 = sub_100338E40;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

id sub_1003386EC(void *a1, void *a2, void *a3, void *a4, char *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void *v30;
  void *v31;
  char *v32;
  void *v33;
  void *v34;
  char *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  objc_class *v40;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  objc_super v51;
  _QWORD *v52;

  v49 = a3;
  v50 = a4;
  v47 = a1;
  v48 = a2;
  v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v45 = *(_QWORD *)(v6 - 8);
  v46 = v6;
  __chkstk_darwin(v6);
  v44 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v8);
  v43 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS.QoSClass(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = &a5[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_xpcDaemon];
  *((_QWORD *)v17 + 1) = 0;
  swift_unknownObjectWeakInit(v17, 0);
  v18 = OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_q_storeControllerByContainerURL;
  v19 = (void *)objc_opt_self(NSMapTable);
  v20 = a5;
  *(_QWORD *)&a5[v18] = objc_msgSend(v19, "strongToWeakObjectsMapTable");
  v21 = OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_q_storeControllerNotificationCenterByContainerURL;
  *(_QWORD *)&v20[v21] = objc_msgSend((id)objc_opt_self(NSMapTable), "strongToStrongObjectsMapTable");
  v22 = OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_accessQueue;
  sub_1000D30A4();
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.utility(_:), v13);
  v23 = static OS_dispatch_queue.global(qos:)(v16);
  v24 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  static DispatchQoS.unspecified.getter(v24);
  v52 = _swiftEmptyArrayStorage;
  v25 = sub_10009FC50((unint64_t *)&qword_10083A990, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v26 = sub_10001A630((uint64_t *)&unk_10083DBD0);
  v27 = sub_1000C4C0C((unint64_t *)&qword_10083A9A0, (uint64_t *)&unk_10083DBD0);
  v28 = v43;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v26, v27, v8, v25);
  v29 = v44;
  (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v44, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v46);
  *(_QWORD *)&v20[v22] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000025, 0x8000000100701470, v12, v28, v29, v23);
  *(_QWORD *)&v20[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_manualHashtagLabelUpdater] = 0;
  v31 = v47;
  v30 = v48;
  *(_QWORD *)&v20[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController] = v47;
  *(_QWORD *)&v20[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeContainerToken] = v30;
  v32 = &v20[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_notificationCenter];
  v34 = v49;
  v33 = v50;
  *(_QWORD *)v32 = v49;
  *((_QWORD *)v32 + 1) = &off_1007F5570;
  v35 = &v20[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_locationManager];
  *(_QWORD *)v35 = v33;
  *((_QWORD *)v35 + 1) = (char *)&_sMXM_2.Parent + 3;
  v36 = v30;
  v37 = v34;
  v38 = v33;
  v39 = v31;

  v40 = (objc_class *)type metadata accessor for RDXPCDebugPerformer();
  v51.receiver = v20;
  v51.super_class = v40;
  return objc_msgSendSuper2(&v51, "init");
}

id sub_100338A58(void *a1)
{
  uint64_t v1;
  NSObject *v2;
  id v3;
  void *v4;
  objc_class *v5;
  id v6;
  objc_class *v7;
  char *v8;
  char *v9;
  id v10;
  id v11;
  void *v12;
  objc_class *v13;
  id v14;
  objc_class *v15;
  char *v16;
  char *v17;
  objc_super v19;
  objc_super v20;
  objc_super v21;
  objc_super v22;

  if (a1)
  {
    v2 = *(NSObject **)(v1 + OBJC_IVAR____TtC7remindd11RDXPCDaemon_debugPerformer);
    v3 = a1;
    v4 = (void *)sub_100337F24(v3, v1, v2);
    v5 = (objc_class *)type metadata accessor for RDXPCChangeTrackingPerformer();
    v6 = objc_allocWithZone(v5);
    v7 = (objc_class *)type metadata accessor for REMNSPersistentHistoryTracking();
    v8 = (char *)objc_allocWithZone(v7);
    *(_QWORD *)&v8[OBJC_IVAR____TtC7remindd30REMNSPersistentHistoryTracking_storeController] = v4;
    v20.receiver = v8;
    v20.super_class = v7;
    v9 = (char *)v6;
    v10 = v4;
    *(_QWORD *)&v9[OBJC_IVAR____TtC7remindd28RDXPCChangeTrackingPerformer_implementation] = objc_msgSendSuper2(&v20, "init");

    v19.receiver = v9;
    v19.super_class = v5;
    v11 = objc_msgSendSuper2(&v19, "init");

  }
  else
  {
    v12 = *(void **)(v1 + OBJC_IVAR____TtC7remindd11RDXPCDaemon_storeController);
    v13 = (objc_class *)type metadata accessor for RDXPCChangeTrackingPerformer();
    v14 = objc_allocWithZone(v13);
    v15 = (objc_class *)type metadata accessor for REMNSPersistentHistoryTracking();
    v16 = (char *)objc_allocWithZone(v15);
    *(_QWORD *)&v16[OBJC_IVAR____TtC7remindd30REMNSPersistentHistoryTracking_storeController] = v12;
    v22.receiver = v16;
    v22.super_class = v15;
    v10 = v12;
    v17 = (char *)v14;
    *(_QWORD *)&v17[OBJC_IVAR____TtC7remindd28RDXPCChangeTrackingPerformer_implementation] = objc_msgSendSuper2(&v22, "init");

    v21.receiver = v17;
    v21.super_class = v13;
    v11 = objc_msgSendSuper2(&v21, "init");
  }

  return v11;
}

char *sub_100338BD4(void *a1)
{
  uint64_t v1;
  NSObject *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  char *v8;
  id v9;
  char *v10;
  char *v11;

  if (!a1)
    return (char *)*(id *)(v1 + OBJC_IVAR____TtC7remindd11RDXPCDaemon_debugPerformer);
  v3 = *(NSObject **)(v1 + OBJC_IVAR____TtC7remindd11RDXPCDaemon_debugPerformer);
  v4 = a1;
  v5 = (void *)sub_100337F24(v4, v1, v3);
  v6 = *(Class *)((char *)&v3->isa + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_notificationCenter);
  v7 = *(Class *)((char *)&v3->isa + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_locationManager);
  v8 = (char *)objc_allocWithZone((Class)type metadata accessor for RDXPCDebugPerformer());
  v9 = v4;
  swift_unknownObjectRetain(v6);
  swift_unknownObjectRetain(v7);
  v10 = (char *)sub_1003386EC(v5, a1, v6, v7, v8);

  swift_unknownObjectRelease(v6);
  swift_unknownObjectRelease(v7);
  v11 = &v10[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_xpcDaemon];
  *((_QWORD *)v11 + 1) = &off_1007EF200;
  swift_unknownObjectWeakAssign(v11, v1);

  return v10;
}

uint64_t sub_100338CF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100338D64()
{
  uint64_t v0;

  type metadata accessor for URL(0);
  sub_1000FD154(*(void ***)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100338D94()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100338DA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release(*(_QWORD *)(v0 + v8));
  return swift_deallocObject(v0, v8 + 8, v5);
}

void sub_100338E40()
{
  uint64_t v0;
  uint64_t v1;
  NSURL *v2;

  v1 = type metadata accessor for URL(0);
  v2 = (NSURL *)((*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64)
                + ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80))
                + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_1000FD2A0(*(uint64_t *)((char *)&v2->super.isa + v0), *(_QWORD *)(v0 + (((unint64_t)&v2->_urlString + 7) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + (((((unint64_t)&v2->_urlString + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)), v2);
}

uint64_t sub_100338E98()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100338EA8(uint64_t a1)
{
  return sub_1000FD320(a1);
}

uint64_t sub_100338EC4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  sub_1000178E8(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(unsigned int *)(v0 + 64) | ((unint64_t)*(unsigned __int16 *)(v0 + 68) << 32));
  return swift_deallocObject(v0, 70, 7);
}

id sub_100338F04(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  objc_class *v27;
  id v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  objc_super v34;
  _QWORD *v35;
  _QWORD v36[5];

  v32 = a6;
  v33 = a8;
  v30 = a2;
  v31 = a3;
  v13 = type metadata accessor for UnfairLock.Options(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[3] = type metadata accessor for RDCoreSuggestionsController();
  v36[4] = &off_1007EF3A0;
  v36[0] = a7;
  *(_QWORD *)&a9[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_sharingObserverForAccountID] = &_swiftEmptyDictionarySingleton;
  v16 = OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_shareRecordIDToRootRecordID;
  v17 = a9;
  *(_QWORD *)&a9[v16] = sub_10001BB64((uint64_t)_swiftEmptyArrayStorage);
  v18 = OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_shareRecordIDToRootRecordIDLock;
  v35 = _swiftEmptyArrayStorage;
  v19 = sub_10009FC50((unint64_t *)&qword_100838120, (uint64_t (*)(uint64_t))&type metadata accessor for UnfairLock.Options, (uint64_t)&protocol conformance descriptor for UnfairLock.Options);
  v20 = sub_10001A630((uint64_t *)&unk_10083DBB0);
  v21 = sub_1000C4C0C((unint64_t *)&qword_100838130, (uint64_t *)&unk_10083DBB0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v20, v21, v13, v19);
  v22 = type metadata accessor for UnfairLock(0);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  *(_QWORD *)&v17[v18] = UnfairLock.init(options:)(v15);
  *(_QWORD *)&v17[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController] = a1;
  sub_1000184A8(v30, (uint64_t)&v17[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity]);
  v23 = &v17[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeProvider];
  v24 = v32;
  *(_QWORD *)v23 = v31;
  *((_QWORD *)v23 + 1) = a4;
  *(_QWORD *)&v17[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_dataAccessRequestsWriter] = a5;
  *(_QWORD *)&v17[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_contactInteractionWriter] = v24;
  sub_100018618((uint64_t)v36, (uint64_t)&v17[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_coreSuggestionsHandler]);
  v25 = v33;
  sub_10001BAA0(v33, (uint64_t)&v17[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_publicCloudDatabaseController]);
  v26 = a1;
  swift_retain(a4);
  swift_retain(a5);
  swift_retain(v24);

  v27 = (objc_class *)type metadata accessor for RDXPCStorePerformer();
  v34.receiver = v17;
  v34.super_class = v27;
  v28 = objc_msgSendSuper2(&v34, "init");
  sub_10001BA60(v25);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v36);
  return v28;
}

NSString sub_100339160()
{
  return sub_100337F08();
}

uint64_t sub_10033917C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100846570);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100846570);
  if (qword_100837650 != -1)
    swift_once(&qword_100837650, sub_1004A18C4);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_1008720D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10033920C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

void sub_100339230(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  unint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __n128 v20;
  void **v21;
  BOOL v22;
  id v23;
  void *v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  _QWORD *v47;
  id v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  NSObject *v60;
  void *v61;
  void *v62;
  void *v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  __n128 v77;
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  void **v81;
  void **v82;
  void **v83;
  NSObject *v84;
  uint64_t v85;
  void **v86;
  uint64_t v87;
  void **v88;
  unint64_t v89;
  uint64_t v90;
  void **aBlock;
  uint64_t v92;
  void (*v93)(uint64_t, void *);
  void *v94;
  void (*v95)(uint64_t);
  uint64_t v96;

  v2 = type metadata accessor for Logger(0);
  v74 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v76 = (char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100837200 != -1)
    goto LABEL_46;
  while (1)
  {
    v75 = v2;
    v4 = sub_10001AAA8(v2, (uint64_t)qword_100846570);
    v5 = swift_bridgeObjectRetain_n(a1, 4);
    v87 = v4;
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter(v6);
    v8 = os_log_type_enabled(v6, v7);
    v9 = (unint64_t)a1 >> 62;
    v80 = a1;
    if (v8)
    {
      v10 = swift_slowAlloc(22, -1);
      v11 = (void **)swift_slowAlloc(32, -1);
      aBlock = v11;
      *(_DWORD *)v10 = 134218242;
      if (v9)
      {
        v12 = v80;
        v70 = v80 < 0 ? v80 : v80 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v80);
        v13 = _CocoaArrayWrapper.endIndex.getter(v70);
        swift_bridgeObjectRelease();
      }
      else
      {
        v12 = v80;
        v13 = *(_QWORD *)((v80 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      v90 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &aBlock);
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2080;
      v14 = sub_1000151B0(0, &qword_10083FEE8, REMReminderStorage_ptr);
      swift_bridgeObjectRetain(v12);
      v16 = Array.description.getter(v15, v14);
      v18 = v17;
      swift_bridgeObjectRelease();
      v90 = sub_10001A820(v16, v18, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &aBlock);
      swift_bridgeObjectRelease_n(v12, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Processing %ld reminderStorages {reminderStorages: %s}", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

      a1 = v12;
    }
    else
    {

      swift_bridgeObjectRelease_n(a1, 4);
    }
    if (v9)
      break;
    v19 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v20 = swift_bridgeObjectRetain(a1);
    if (!v19)
      goto LABEL_51;
LABEL_9:
    v86 = 0;
    v81 = 0;
    v82 = 0;
    v83 = 0;
    v21 = 0;
    v89 = a1 & 0xC000000000000001;
    v2 = 4;
    v20.n128_u64[0] = 138412546;
    v77 = v20;
    v20.n128_u64[0] = 138412290;
    v78 = v20;
    v85 = v19;
    while (1)
    {
      v23 = v89 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v2 - 4, a1) : *(id *)(a1 + 8 * v2);
      v24 = v23;
      v25 = v2 - 3;
      if (__OFADD__(v2 - 4, 1))
        break;
      v26 = objc_msgSend(v23, "siriFoundInAppsData");
      if (v26)
      {
        v27 = v26;
        v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);
        v30 = v29;

        sub_1000151B0(0, &qword_100846628, SGRecordId_ptr);
        v31 = static SGRecordId.createFrom(data:)(v28, v30);
        if (v31)
        {
          v32 = (void *)v31;
          v33 = objc_msgSend(v24, "siriFoundInAppsUserConfirmation");
          if (v33)
          {
            if (v33 == (id)2)
            {
              v84 = v32;
              v34 = Logger.logObject.getter(v84);
              v35 = static os_log_type_t.default.getter(v34);
              if (os_log_type_enabled(v34, v35))
              {
                v36 = swift_slowAlloc(12, -1);
                v88 = v21;
                v37 = v36;
                v38 = (_QWORD *)swift_slowAlloc(8, -1);
                *(_DWORD *)v37 = v78.n128_u32[0];
                *(_QWORD *)(v37 + 4) = v84;
                *v38 = v32;
                _os_log_impl((void *)&_mh_execute_header, v34, v35, "CoreSuggestions rejectReminder sent {sgRecordID: %@}", (uint8_t *)v37, 0xCu);
                v39 = sub_10001A630((uint64_t *)&unk_100839E70);
                swift_arrayDestroy(v38, 1, v39);
                v40 = v38;
                a1 = v80;
                swift_slowDealloc(v40, -1, -1);
                v41 = v37;
                v21 = v88;
                swift_slowDealloc(v41, -1, -1);
              }
              else
              {

                v34 = v84;
              }
              v19 = v85;

              v57 = *(void **)(v79 + 16);
              v95 = sub_100339CC0;
              v96 = 0;
              aBlock = _NSConcreteStackBlock;
              v92 = 1107296256;
              v93 = sub_1000E18E4;
              v94 = &unk_1007EF3E0;
              v58 = _Block_copy(&aBlock);
              v59 = v57;
              v60 = v84;
              objc_msgSend(v59, "rejectReminderByRecordId:withCompletion:", v84, v58);

              sub_1000A71C8(v28, v30);
              _Block_release(v58);
              v22 = __OFADD__(v83, 1);
              v83 = (void **)((char *)v83 + 1);
              if (v22)
                goto LABEL_44;
            }
            else
            {
              if (v33 != (id)1)
              {
                (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v76, v87, v75);
                v71 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
                v72 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
                sub_1004A14D8((uint64_t)"unknown siriFoundInAppsUserConfirmation", 39, 2uLL, v71, v72);
                __break(1u);
                JUMPOUT(0x100339C9CLL);
              }
              v84 = v32;
              v49 = Logger.logObject.getter(v84);
              v50 = static os_log_type_t.default.getter(v49);
              if (os_log_type_enabled(v49, v50))
              {
                v51 = swift_slowAlloc(12, -1);
                v88 = v21;
                v52 = v51;
                v53 = (_QWORD *)swift_slowAlloc(8, -1);
                *(_DWORD *)v52 = v78.n128_u32[0];
                *(_QWORD *)(v52 + 4) = v84;
                *v53 = v32;
                _os_log_impl((void *)&_mh_execute_header, v49, v50, "CoreSuggestions confirmReminder sent {sgRecordID: %@}", (uint8_t *)v52, 0xCu);
                v54 = sub_10001A630((uint64_t *)&unk_100839E70);
                swift_arrayDestroy(v53, 1, v54);
                v55 = v53;
                a1 = v80;
                swift_slowDealloc(v55, -1, -1);
                v56 = v52;
                v21 = v88;
                swift_slowDealloc(v56, -1, -1);
              }
              else
              {

                v49 = v84;
              }
              v19 = v85;

              v61 = *(void **)(v79 + 16);
              v95 = sub_100339CAC;
              v96 = 0;
              aBlock = _NSConcreteStackBlock;
              v92 = 1107296256;
              v93 = sub_1000E18E4;
              v94 = &unk_1007EF408;
              v62 = _Block_copy(&aBlock);
              v63 = v61;
              v64 = v84;
              objc_msgSend(v63, "confirmReminderByRecordId:withCompletion:", v84, v62);

              sub_1000A71C8(v28, v30);
              _Block_release(v62);
              v22 = __OFADD__(v82, 1);
              v82 = (void **)((char *)v82 + 1);
              if (v22)
                goto LABEL_45;
            }
          }
          else
          {

            sub_1000A71C8(v28, v30);
            if (__OFADD__(v81, 1))
              goto LABEL_43;
            v81 = (void **)((char *)v81 + 1);
          }
        }
        else
        {
          v88 = v21;
          v42 = v24;
          v43 = sub_1000A70E4(v28, v30);
          v44 = Logger.logObject.getter(v43);
          v45 = static os_log_type_t.error.getter(v44);
          if (os_log_type_enabled(v44, v45))
          {
            v46 = swift_slowAlloc(22, -1);
            v47 = (_QWORD *)swift_slowAlloc(8, -1);
            *(_DWORD *)v46 = v77.n128_u32[0];
            v48 = objc_msgSend(v42, "objectID");
            *(_QWORD *)(v46 + 4) = v48;
            *v47 = v48;

            *(_WORD *)(v46 + 12) = 2048;
            __asm { BR              X9 }
          }
          sub_1000A71C8(v28, v30);

          sub_1000A71C8(v28, v30);
          v22 = __OFADD__(v86, 1);
          v86 = (void **)((char *)v86 + 1);
          v21 = v88;
          if (v22)
          {
            __break(1u);
            break;
          }
        }
      }
      else
      {

        v22 = __OFADD__(v21, 1);
        v21 = (void **)((char *)v21 + 1);
        if (v22)
          goto LABEL_42;
      }
      ++v2;
      if (v25 == v19)
        goto LABEL_52;
    }
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    swift_once(&qword_100837200, sub_10033917C);
  }
  if (a1 < 0)
    v65 = a1;
  else
    v65 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v19 = _CocoaArrayWrapper.endIndex.getter(v65);
  if (v19)
    goto LABEL_9;
LABEL_51:
  v86 = 0;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v21 = 0;
LABEL_52:
  swift_bridgeObjectRelease();
  v67 = Logger.logObject.getter(v66);
  v68 = static os_log_type_t.default.getter(v67);
  if (os_log_type_enabled(v67, v68))
  {
    v69 = swift_slowAlloc(52, -1);
    *(_DWORD *)v69 = 134219008;
    aBlock = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v92);
    *(_WORD *)(v69 + 12) = 2048;
    aBlock = v83;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v92);
    *(_WORD *)(v69 + 22) = 2048;
    aBlock = v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v92);
    *(_WORD *)(v69 + 32) = 2048;
    aBlock = v86;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v92);
    *(_WORD *)(v69 + 42) = 2048;
    aBlock = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v92);
    _os_log_impl((void *)&_mh_execute_header, v67, v68, "Done processing reminderStorages, counts {confirm: %ld, reject: %ld, none: %ld, error: %ld, irrelevant: %ld}", (uint8_t *)v69, 0x34u);
    swift_slowDealloc(v69, -1, -1);
  }

}

void sub_100339CAC(uint64_t a1)
{
  sub_10033A68C(a1, "CoreSuggestions confirmReminder completed with error {error: %s}", "CoreSuggestions confirmReminder completed");
}

void sub_100339CC0(uint64_t a1)
{
  sub_10033A68C(a1, "CoreSuggestions rejectReminder completed with error {error: %s}", "CoreSuggestions rejectReminder completed");
}

void sub_100339CD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  NSObject *v18;
  BOOL v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  _QWORD *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  _QWORD *v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  _QWORD *v51;
  id v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  _QWORD *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void **v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void **aBlock;
  _QWORD v73[6];

  if (qword_100837200 != -1)
    goto LABEL_39;
  while (1)
  {
    v2 = type metadata accessor for Logger(0);
    sub_10001AAA8(v2, (uint64_t)qword_100846570);
    v3 = swift_bridgeObjectRetain_n(a1, 4);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    v6 = (unint64_t)a1 >> 62;
    v66 = a1;
    if (os_log_type_enabled(v4, v5))
    {
      v7 = swift_slowAlloc(22, -1);
      v8 = (void **)swift_slowAlloc(32, -1);
      aBlock = v8;
      *(_DWORD *)v7 = 134218242;
      if (v6)
      {
        v64 = a1 < 0 ? a1 : a1 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a1);
        v9 = _CocoaArrayWrapper.endIndex.getter(v64);
        swift_bridgeObjectRelease();
      }
      else
      {
        v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      v71 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &aBlock);
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2080;
      v10 = sub_1000151B0(0, &qword_100846630, REMReminder_ptr);
      swift_bridgeObjectRetain(a1);
      v12 = Array.description.getter(v11, v10);
      v14 = v13;
      swift_bridgeObjectRelease();
      v71 = sub_10001A820(v12, v14, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &aBlock);
      swift_bridgeObjectRelease_n(v66, 2);
      a1 = v66;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Processing %ld expiredReminders {reminders: %s}", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a1, 4);
    }
    if (v6)
      break;
    v15 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    v16 = 0;
    if (!v15)
      goto LABEL_44;
LABEL_9:
    v68 = 0;
    v70 = a1 & 0xC000000000000001;
    v17 = 4;
    v67 = v15;
    while (1)
    {
      v20 = v70 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17 - 4, a1) : *(id *)(a1 + 8 * v17);
      v21 = v20;
      v22 = v17 - 3;
      if (__OFADD__(v17 - 4, 1))
        break;
      v23 = objc_msgSend(v20, "siriFoundInAppsData");
      if (v23)
      {
        v24 = v23;
        v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v23);
        v27 = v26;

        sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
        v28 = objc_msgSend(v21, "list");
        v29 = objc_msgSend(v28, "objectID");

        v30 = objc_msgSend((id)objc_opt_self(REMList), "siriFoundInAppsListID");
        LOBYTE(v24) = static NSObject.== infix(_:_:)(v29);

        if ((v24 & 1) != 0)
        {
          sub_1000151B0(0, &qword_100846628, SGRecordId_ptr);
          v31 = static SGRecordId.createFrom(data:)(v25, v27);
          if (v31)
          {
            v32 = (void *)v31;
            v33 = *(void **)(v65 + 16);
            v73[3] = sub_10033A678;
            v73[4] = 0;
            aBlock = _NSConcreteStackBlock;
            v73[0] = 1107296256;
            v73[1] = sub_1000E18E4;
            v73[2] = &unk_1007EF3B8;
            v34 = _Block_copy(&aBlock);
            objc_msgSend(v33, "reminderAlarmTriggeredForRecordId:withCompletion:", v32, v34);

            sub_1000A71C8(v25, v27);
            _Block_release(v34);
            v19 = __OFADD__(v68, 1);
            v68 = (void **)((char *)v68 + 1);
            if (v19)
              goto LABEL_38;
            v22 = v17 - 3;
          }
          else
          {
            v52 = v21;
            v53 = sub_1000A70E4(v25, v27);
            v54 = Logger.logObject.getter(v53);
            v55 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v54, v55))
            {
              v56 = swift_slowAlloc(22, -1);
              v57 = (_QWORD *)swift_slowAlloc(8, -1);
              *(_DWORD *)v56 = 138412546;
              v58 = objc_msgSend(v52, "objectID");
              *(_QWORD *)(v56 + 4) = v58;
              *v57 = v58;

              *(_WORD *)(v56 + 12) = 2048;
              __asm { BR              X9 }
            }
            sub_1000A71C8(v25, v27);

            sub_1000A71C8(v25, v27);
            v19 = __OFADD__(v16, 1);
            v16 = (void **)((char *)v16 + 1);
            v22 = v17 - 3;
            if (v19)
            {
              __break(1u);
              break;
            }
          }
        }
        else
        {
          v69 = v25;
          v42 = v21;
          v43 = Logger.logObject.getter(v42);
          v44 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v43, v44))
          {
            v45 = swift_slowAlloc(22, -1);
            v46 = (_QWORD *)swift_slowAlloc(16, -1);
            *(_DWORD *)v45 = 138412546;
            v47 = objc_msgSend(v42, "objectID");
            *(_QWORD *)(v45 + 4) = v47;
            *v46 = v47;

            *(_WORD *)(v45 + 12) = 2112;
            v48 = objc_msgSend(v42, "list");
            v49 = objc_msgSend(v48, "objectID");

            v15 = v67;
            *(_QWORD *)(v45 + 14) = v49;
            v46[1] = v49;

            _os_log_impl((void *)&_mh_execute_header, v43, v44, "Reminder is not in SiriFoundInApps list {reminderID: %@, listID: %@}", (uint8_t *)v45, 0x16u);
            v50 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v46, 2, v50);
            v51 = v46;
            a1 = v66;
            swift_slowDealloc(v51, -1, -1);
            swift_slowDealloc(v45, -1, -1);

            sub_1000A71C8(v69, v27);
          }
          else
          {
            sub_1000A71C8(v25, v27);

          }
          v22 = v17 - 3;

          v19 = __OFADD__(v16, 1);
          v16 = (void **)((char *)v16 + 1);
          if (v19)
            goto LABEL_37;
        }
      }
      else
      {
        v35 = v21;
        v18 = Logger.logObject.getter(v35);
        v36 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v18, v36))
        {
          v37 = swift_slowAlloc(12, -1);
          v38 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v37 = 138412290;
          v39 = -[NSObject objectID](v35, "objectID");
          *(_QWORD *)(v37 + 4) = v39;
          *v38 = v39;

          _os_log_impl((void *)&_mh_execute_header, v18, v36, "Unable to find siriFoundInAppsData. {reminderID: %@}", (uint8_t *)v37, 0xCu);
          v40 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v38, 1, v40);
          swift_slowDealloc(v38, -1, -1);
          v41 = v37;
          v15 = v67;
          swift_slowDealloc(v41, -1, -1);
        }
        else
        {

          v18 = v35;
        }

        v19 = __OFADD__(v16, 1);
        v16 = (void **)((char *)v16 + 1);
        if (v19)
          goto LABEL_36;
      }
      ++v17;
      if (v22 == v15)
        goto LABEL_45;
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    swift_once(&qword_100837200, sub_10033917C);
  }
  if (a1 < 0)
    v59 = a1;
  else
    v59 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v15 = _CocoaArrayWrapper.endIndex.getter(v59);
  v16 = 0;
  if (v15)
    goto LABEL_9;
LABEL_44:
  v68 = 0;
LABEL_45:
  swift_bridgeObjectRelease();
  v61 = Logger.logObject.getter(v60);
  v62 = static os_log_type_t.default.getter(v61);
  if (os_log_type_enabled(v61, v62))
  {
    v63 = swift_slowAlloc(22, -1);
    *(_DWORD *)v63 = 134218240;
    aBlock = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v73);
    *(_WORD *)(v63 + 12) = 2048;
    aBlock = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v73);
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "Done processing expiredReminders, counts {expire: %ld, error: %ld}", (uint8_t *)v63, 0x16u);
    swift_slowDealloc(v63, -1, -1);
  }

}

void sub_10033A678(uint64_t a1)
{
  sub_10033A68C(a1, "CoreSuggestions reminderAlarmTriggered(for:) completed with error {error: %s}", "CoreSuggestions reminderAlarmTriggered(for:) completed");
}

void sub_10033A68C(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  NSObject *oslog;
  uint64_t v18;
  _QWORD v19[3];
  _BYTE v20[8];
  uint64_t v21;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_100837200 != -1)
      swift_once(&qword_100837200, sub_10033917C);
    v5 = type metadata accessor for Logger(0);
    sub_10001AAA8(v5, (uint64_t)qword_100846570);
    swift_errorRetain(a1);
    v6 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v6);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v21 = v9;
      *(_DWORD *)v8 = 136315138;
      swift_getErrorValue(a1, v20, v19);
      v10 = Error.localizedDescription.getter(v19[1], v19[2]);
      v18 = sub_10001A820(v10, v11, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, a2, v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      swift_errorRelease(a1);
      return;
    }
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_100837200 != -1)
      swift_once(&qword_100837200, sub_10033917C);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_10001AAA8(v13, (uint64_t)qword_100846570);
    oslog = Logger.logObject.getter(v14);
    v15 = static os_log_type_t.default.getter(oslog);
    if (os_log_type_enabled(oslog, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v15, a3, v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }
  }

}

uint64_t sub_10033A928(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_allocObject(a2, 24, 7);
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t sub_10033A968(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!((unint64_t)a1 >> 62))
    return *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (a1 < 0)
    v3 = a1;
  else
    v3 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v4 = _CocoaArrayWrapper.endIndex.getter(v3);
  swift_bridgeObjectRelease(a1);
  return v4;
}

uint64_t sub_10033A9C4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v8 = result;
    v9 = (_QWORD *)(swift_bridgeObjectRetain(result) + 40);
    do
    {
      v11 = (void (*)(uint64_t, uint64_t, uint64_t))*(v9 - 1);
      v10 = *v9;
      swift_retain(*v9);
      v11(a2, a3, a4);
      swift_release(v10);
      v9 += 2;
      --v4;
    }
    while (v4);
    return swift_bridgeObjectRelease(v8);
  }
  return result;
}

uint64_t sub_10033AA54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  _QWORD *v19;

  v2 = v1;
  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v9 = _swiftEmptyArrayStorage;
    if (!v8)
      return (uint64_t)v9;
    v19 = _swiftEmptyArrayStorage;
    result = sub_1001C1BB8(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0)
      break;
    v18[1] = v2;
    v2 = 0;
    v9 = v19;
    while (v8 != v2)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v2, a1);
      else
        v11 = *(id *)(a1 + 8 * v2 + 32);
      v12 = v11;
      v13 = objc_msgSend(v11, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v13);

      v14 = type metadata accessor for UUID(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v7, 0, 1, v14);

      v19 = v9;
      v16 = v9[2];
      v15 = v9[3];
      if (v16 >= v15 >> 1)
      {
        sub_1001C1BB8(v15 > 1, v16 + 1, 1);
        v9 = v19;
      }
      ++v2;
      v9[2] = v16 + 1;
      sub_1000A5CA8((uint64_t)v7, (uint64_t)v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v16, (uint64_t *)&unk_100839C80);
      if (v8 == v2)
        return (uint64_t)v9;
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v17 = a1;
    else
      v17 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v8 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(a1);
  }
  __break(1u);
  return result;
}

_QWORD *sub_10033AC44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  char v13;
  uint64_t v14;
  char **v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  unsigned __int8 v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  void (*v35)(_BYTE *, _QWORD);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[32];
  _QWORD *v42;
  uint64_t v43;
  unsigned __int8 v44;
  _QWORD *v45;

  v2 = sub_10001A630((uint64_t *)&unk_100839C80);
  v40 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = a1;
  v6 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v7 = a1;
    else
      v7 = a1 & 0xFFFFFFFFFFFFFF8;
    v8 = __CocoaSet.count.getter(v7);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
  }
  result = _swiftEmptyArrayStorage;
  if (v8)
  {
    v45 = _swiftEmptyArrayStorage;
    sub_1001C1BB8(0, v8 & ~(v8 >> 63), 0);
    if (v6)
    {
      if (a1 < 0)
        v10 = a1;
      else
        v10 = a1 & 0xFFFFFFFFFFFFFF8;
      result = (_QWORD *)__CocoaSet.startIndex.getter(v10);
      v12 = 1;
    }
    else
    {
      result = (_QWORD *)sub_100364E8C(a1);
      v12 = v13 & 1;
    }
    v42 = result;
    v43 = v11;
    v44 = v12;
    if (v8 < 0)
    {
      __break(1u);
LABEL_32:
      __break(1u);
    }
    else
    {
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
      if (a1 < 0)
        v14 = a1;
      v38 = v4;
      v39 = v14;
      v15 = &selRef_subscriptionOwnerUserRecordID;
      do
      {
        while (1)
        {
          sub_100364660((uint64_t)v42, v43, v44, v5);
          v26 = v25;
          v27 = objc_msgSend(v25, v15[121]);
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v27);

          v28 = type metadata accessor for UUID(0);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v4, 0, 1, v28);

          v29 = v45;
          if ((swift_isUniquelyReferenced_nonNull_native(v45) & 1) == 0)
          {
            sub_1001C1BB8(0, v29[2] + 1, 1);
            v29 = v45;
          }
          v31 = v29[2];
          v30 = v29[3];
          if (v31 >= v30 >> 1)
          {
            sub_1001C1BB8(v30 > 1, v31 + 1, 1);
            v29 = v45;
          }
          v29[2] = v31 + 1;
          result = (_QWORD *)sub_1000A5CA8((uint64_t)v4, (uint64_t)v29+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(_QWORD *)(v40 + 72) * v31, (uint64_t *)&unk_100839C80);
          if (v6)
            break;
          v16 = (uint64_t)v42;
          v17 = v43;
          v18 = v44;
          v19 = sub_10036456C(v42, v43, v44, v5);
          v21 = v20;
          v23 = v22;
          sub_1000E515C(v16, v17, v18);
          v42 = (_QWORD *)v19;
          v43 = v21;
          v6 = 0;
          v24 = v23 & 1;
          v15 = &selRef_subscriptionOwnerUserRecordID;
          v4 = v38;
          v44 = v24;
          if (!--v8)
            goto LABEL_29;
        }
        if ((v44 & 1) == 0)
          goto LABEL_32;
        v32 = __CocoaSet.Index.handleBitPattern.getter(v42, v43);
        if (v32)
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v32);
        else
          isUniquelyReferenced_nonNull_native = 1;
        v34 = sub_10001A630(&qword_1008466D8);
        v35 = (void (*)(_BYTE *, _QWORD))Set.Index._asCocoa.modify(v41, v34);
        __CocoaSet.formIndex(after:isUnique:)(v36, isUniquelyReferenced_nonNull_native, v39);
        v35(v41, 0);
        --v8;
      }
      while (v8);
LABEL_29:
      sub_1000E515C((uint64_t)v42, v43, v44);
      return v45;
    }
  }
  return result;
}

_QWORD *sub_10033AF50(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t v20;
  _QWORD *v21;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v21 = _swiftEmptyArrayStorage;
    sub_1001C1B0C(0, v1, 0);
    v4 = (unsigned int *)(a1 + 32);
    v2 = _swiftEmptyArrayStorage;
    do
    {
      v6 = *v4++;
      v5 = v6;
      if (v6 > 0x7F)
      {
        v14 = (v5 & 0x3F) << 8;
        if (v5 >= 0x800)
        {
          v15 = v5 >> 12;
          v16 = (v14 | (v5 >> 6) & 0x3F) << 8;
          v17 = HIWORD(v5);
          v7 = (((v16 | (v5 >> 12) & 0x3F) << 8) | (v5 >> 18)) - 2122219023;
          v18 = (v16 | v15) + 8487393;
          if (!v17)
            v7 = v18;
        }
        else
        {
          v7 = (v14 | (v5 >> 6)) + 33217;
        }
      }
      else
      {
        v7 = v5 + 1;
      }
      v20 = (v7 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v7) >> 3))));
      v8 = static String._uncheckedFromUTF8(_:)(&v20);
      v10 = v9;
      v21 = v2;
      v12 = v2[2];
      v11 = v2[3];
      if (v12 >= v11 >> 1)
      {
        sub_1001C1B0C(v11 > 1, v12 + 1, 1);
        v2 = v21;
      }
      v2[2] = v12 + 1;
      v13 = &v2[2 * v12];
      v13[4] = v8;
      v13[5] = v10;
      --v1;
    }
    while (v1);
  }
  return v2;
}

_QWORD *sub_10033B0D8(uint64_t a1)
{
  int64_t v2;
  _QWORD *result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_1001C1C10(0, v2, 0);
    result = _swiftEmptyArrayStorage;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v6 = *v4++;
      v5 = v6;
      if (v6 >= 0x7FFF)
        v5 = 0x7FFFLL;
      if (v5 <= -32768)
        v7 = 0x8000;
      else
        v7 = v5;
      v11 = result;
      v9 = result[2];
      v8 = result[3];
      if (v9 >= v8 >> 1)
      {
        sub_1001C1C10(v8 > 1, v9 + 1, 1);
        result = v11;
      }
      result[2] = v9 + 1;
      v10 = (char *)result + 4 * v9;
      *((_WORD *)v10 + 16) = v7;
      v10[34] = 0;
      --v2;
    }
    while (v2);
  }
  return result;
}

_QWORD *sub_10033B1B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  char v13;
  uint64_t v14;
  char **v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  unsigned __int8 v26;
  void *v27;
  void *v28;
  id v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  void (*v36)(_BYTE *, _QWORD);
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[32];
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  _QWORD *v47;

  v42 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    v7 = __CocoaSet.count.getter(v6);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 16);
  }
  result = _swiftEmptyArrayStorage;
  if (v7)
  {
    v47 = _swiftEmptyArrayStorage;
    sub_1001C1BE4(0, v7 & ~(v7 >> 63), 0);
    if (v5)
    {
      if (a1 < 0)
        v9 = a1;
      else
        v9 = a1 & 0xFFFFFFFFFFFFFF8;
      v10 = __CocoaSet.startIndex.getter(v9);
      v12 = 1;
    }
    else
    {
      v10 = sub_100364E8C(a1);
      v12 = v13 & 1;
    }
    v44 = v10;
    v45 = v11;
    v46 = v12;
    if (v7 < 0)
    {
      __break(1u);
LABEL_32:
      __break(1u);
      JUMPOUT(0x10033B48CLL);
    }
    v14 = a1 & 0xFFFFFFFFFFFFFF8;
    if (a1 < 0)
      v14 = a1;
    v40 = v2;
    v41 = v14;
    v15 = &selRef_subscriptionOwnerUserRecordID;
    v39 = a1 & 0xC000000000000001;
    do
    {
      while (1)
      {
        sub_100364660(v44, v45, v46, a1);
        v28 = v27;
        v29 = objc_msgSend(v27, v15[121]);
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v29);

        v30 = v47;
        if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
        {
          sub_1001C1BE4(0, v30[2] + 1, 1);
          v30 = v47;
        }
        v32 = v30[2];
        v31 = v30[3];
        if (v32 >= v31 >> 1)
        {
          sub_1001C1BE4(v31 > 1, v32 + 1, 1);
          v30 = v47;
        }
        v30[2] = v32 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))((unint64_t)v30+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v32, v4, v42);
        v47 = v30;
        if (v5)
          break;
        v16 = v44;
        v17 = v45;
        v18 = v46;
        v19 = sub_10036456C(v44, v45, v46, a1);
        v20 = v4;
        v22 = v21;
        v23 = a1;
        v25 = v24;
        sub_1000E515C(v16, v17, v18);
        v44 = v19;
        v45 = v22;
        v15 = &selRef_subscriptionOwnerUserRecordID;
        v4 = v20;
        v26 = v25 & 1;
        a1 = v23;
        v5 = v39;
        v2 = v40;
        v46 = v26;
        if (!--v7)
          goto LABEL_29;
      }
      if ((v46 & 1) == 0)
        goto LABEL_32;
      v33 = __CocoaSet.Index.handleBitPattern.getter(v44, v45);
      if (v33)
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v33);
      else
        isUniquelyReferenced_nonNull_native = 1;
      v35 = sub_10001A630(&qword_1008466D8);
      v36 = (void (*)(_BYTE *, _QWORD))Set.Index._asCocoa.modify(v43, v35);
      __CocoaSet.formIndex(after:isUnique:)(v37, isUniquelyReferenced_nonNull_native, v41);
      v36(v43, 0);
      --v7;
    }
    while (v7);
LABEL_29:
    sub_1000E515C(v44, v45, v46);
    return v47;
  }
  return result;
}

void sub_10033B5C4(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_ckIdentifier, a2);
}

void sub_10033B5D0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setCkIdentifier_);
}

id sub_10033B5DC@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "completed");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10033B60C(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setCompleted:", *a1);
}

id sub_10033B620@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "parentReminder");
  *a2 = result;
  return result;
}

id sub_10033B658(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setParentReminder:", *a1);
}

void sub_10033B66C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_notes, a2);
}

void sub_10033B678(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setNotes_);
}

uint64_t sub_10033B684@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_displayDateDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_10033B6A0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_1008380D0, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t (*)(void))&Date._bridgeToObjectiveC(), (SEL *)&selRef_setDisplayDateDate_);
}

id sub_10033B6C4@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "flagged");
  *a2 = result;
  return result;
}

id sub_10033B6F4(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setFlagged:", *a1);
}

id sub_10033B708@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "alarmStorage");
  *a2 = result;
  return result;
}

id sub_10033B740(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setAlarmStorage:", *a1);
}

id sub_10033B754@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "inactive");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10033B784(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setInactive:", *a1);
}

id sub_10033B798@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "recurrenceRules");
  *a2 = result;
  return result;
}

id sub_10033B7D0(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setRecurrenceRules:", *a1);
}

uint64_t sub_10033B7E4@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_creationDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_10033B800(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_1008380D0, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t (*)(void))&Date._bridgeToObjectiveC(), (SEL *)&selRef_setCreationDate_);
}

void sub_10033B824(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = objc_msgSend(*a1, "contactHandles");
  if (v3)
  {
    v4 = v3;
    v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0xF000000000000000;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_10033B888(uint64_t a1, void **a2)
{
  void *v2;
  Class isa;
  Class v4;

  v2 = *a2;
  if (*(_QWORD *)(a1 + 8) >> 60 == 15)
    isa = 0;
  else
    isa = Data._bridgeToObjectiveC()().super.isa;
  v4 = isa;
  objc_msgSend(v2, "setContactHandles:");

}

id sub_10033B8EC(char a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  Class isa;
  id v7;

  if ((a1 & 1) != 0)
    v1 = 0xE700000000000000;
  else
    v1 = 0xE800000000000000;
  v2 = sub_10001A630((uint64_t *)&unk_100839E80);
  v3 = swift_allocObject(v2, 96, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1006A3C40;
  *(_QWORD *)(v3 + 56) = &type metadata for String;
  *(_QWORD *)(v3 + 32) = 0xD000000000000023;
  *(_QWORD *)(v3 + 40) = 0x80000001006FC190;
  v4 = rem_currentRuntimeVersion();
  *(_QWORD *)(v3 + 88) = &type metadata for Int;
  *(_QWORD *)(v3 + 64) = v4;
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  v7 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v5, isa);

  return v7;
}

id sub_10033BA14()
{
  uint64_t v0;
  uint64_t v1;
  NSString v2;
  Class isa;
  id v4;

  v0 = sub_10001A630((uint64_t *)&unk_100839E80);
  v1 = swift_allocObject(v0, 64, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v1 + 56) = &type metadata for String;
  *(_QWORD *)(v1 + 32) = 0xD000000000000011;
  *(_QWORD *)(v1 + 40) = 0x80000001006B5D90;
  v2 = String._bridgeToObjectiveC()();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v1);
  v4 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v2, isa);

  return v4;
}

uint64_t sub_10033BAF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100846638);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100846638);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10033BB88()
{
  uint64_t v0;

  if (qword_100837208 != -1)
    swift_once(&qword_100837208, sub_10033BAF8);
  v0 = type metadata accessor for Logger(0);
  return sub_10001AAA8(v0, (uint64_t)qword_100846638);
}

uint64_t sub_10033BBD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  Swift::Int v18;
  __n128 v19;
  uint64_t v20;

  v4 = _s10PredicatesO19CompletionPredicateOMa(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  v11 = (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 88))(v10, v7);
  if (v11 == enum case for REMRemindersListDataView.ShowCompleted.after(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
    (*(void (**)(uint64_t *, uint64_t))(v8 + 96))(v10, v7);
    v12 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a2, v10, v12);
    v13 = a2;
    v14 = v4;
    v15 = 0;
    return swift_storeEnumTagMultiPayload(v13, v14, v15);
  }
  if (v11 == enum case for REMRemindersListDataView.ShowCompleted.allowlist(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v8 + 96))(v10, v7);
    v17 = *v10;
    v18 = sub_1002EBC10(v17);
    v19 = swift_bridgeObjectRelease(v17);
    (*(void (**)(uint64_t, uint64_t, __n128))(v8 + 8))(a1, v7, v19);
    *v6 = v18;
    swift_storeEnumTagMultiPayload(v6, v4, 2);
    return sub_10033E95C((uint64_t)v6, a2);
  }
  else
  {
    if (v11 == enum case for REMRemindersListDataView.ShowCompleted.off(_:))
    {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
      v13 = a2;
      v14 = v4;
      v15 = 3;
      return swift_storeEnumTagMultiPayload(v13, v14, v15);
    }
    if (v11 == enum case for REMRemindersListDataView.ShowCompleted.on(_:))
    {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
      v13 = a2;
      v14 = v4;
      v15 = 5;
      return swift_storeEnumTagMultiPayload(v13, v14, v15);
    }
    result = _diagnoseUnexpectedEnumCase<A>(type:)(v7, v7);
    __break(1u);
  }
  return result;
}

uint64_t sub_10033BDEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v69 = a1;
  v71 = a2;
  v56 = type metadata accessor for Date(0);
  v70 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v57 = (char *)&v52 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Calendar.SearchDirection(0);
  v67 = *(_QWORD *)(v3 - 8);
  v68 = v3;
  __chkstk_darwin(v3);
  v66 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Calendar.RepeatedTimePolicy(0);
  v64 = *(_QWORD *)(v5 - 8);
  v65 = v5;
  __chkstk_darwin(v5);
  v60 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for Calendar.MatchingPolicy(0);
  v55 = *(_QWORD *)(v72 - 8);
  v7 = v55;
  __chkstk_darwin(v72);
  v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Calendar(0);
  v11 = *(_QWORD *)(v10 - 8);
  v58 = v10;
  v59 = v11;
  v12 = v11;
  __chkstk_darwin(v10);
  v54 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v14);
  v63 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A630(&qword_1008401F8);
  __chkstk_darwin(v16);
  v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A630(&qword_1008466E0);
  __chkstk_darwin(v19);
  v21 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DateComponents(0);
  v61 = *(_QWORD *)(v22 - 8);
  v62 = v22;
  __chkstk_darwin(v22);
  v24 = (char *)&v52 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v21, 1, 1, v10);
  v25 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v18, 1, 1, v25);
  v51 = 1;
  v50 = 1;
  v49 = 1;
  v48 = 1;
  v47 = 1;
  v46 = 1;
  v45 = 1;
  v44 = 0;
  v43 = 0;
  v42 = 0;
  v41 = 1;
  v53 = v24;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v21, v18, 0, 1, 0, 1, 0, 1, 0, v41, 0, v42, 0, v43, 0, v44, 0, v45, 0,
    v46,
    0,
    v47,
    0,
    v48,
    0,
    v49,
    0,
    v50,
    0,
    v51);
  v26 = objc_msgSend((id)objc_opt_self(NSCalendar), "currentCalendar");
  static Calendar._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for Calendar.MatchingPolicy.nextTime(_:), v72);
  v27 = v64;
  v28 = v65;
  v29 = v60;
  (*(void (**)(char *, _QWORD, uint64_t))(v64 + 104))(v60, enum case for Calendar.RepeatedTimePolicy.first(_:), v65);
  v31 = v66;
  v30 = v67;
  v32 = v68;
  (*(void (**)(char *, _QWORD, uint64_t))(v67 + 104))(v66, enum case for Calendar.SearchDirection.forward(_:), v68);
  v33 = (uint64_t)v63;
  v34 = v24;
  v35 = v54;
  Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)(v69, v34, v9, v29, v31);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v32);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v28);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v9, v72);
  v36 = v35;
  v37 = v70;
  (*(void (**)(char *, uint64_t))(v59 + 8))(v36, v58);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v53, v62);
  v38 = v56;
  v39 = v57;
  (*(void (**)(void))(v37 + 16))();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v33, 1, v38) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v71, v39, v38);
    return sub_10000882C(v33, (uint64_t *)&unk_1008380D0);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v38);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v71, v33, v38);
  }
}

uint64_t sub_10033C2B4(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  unsigned __int8 v24;
  id v25;
  id v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char **v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  unsigned __int8 v43;
  void *v44;
  void *v45;
  id v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v52;
  void (*v53)(uint64_t *, _QWORD);
  uint64_t v54;
  uint64_t v55;
  uint64_t inited;
  uint64_t v57;
  id v58;
  uint64_t KeyPath;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  id v72;
  uint64_t v73;
  __int128 v74;
  char v75[48];
  char v76[48];
  uint64_t v77[4];
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 v80;
  _QWORD *v81;

  v72 = a2;
  *(_QWORD *)&v74 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v6 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (uint64_t)&v68 - v12;
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v14((char *)&v68 - v12, v2, v7);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 88))(v13, v7);
  if (v15 == enum case for REMRemindersListDataView.ShowCompleted.after(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v13, v7);
LABEL_23:
    v14(v11, v2, v7);
    sub_10033BBD0((uint64_t)v11, a1);
    v25 = v72;
    v26 = v72;
    return (uint64_t)v25;
  }
  if (v15 != enum case for REMRemindersListDataView.ShowCompleted.allowlist(_:))
  {
    if (v15 == enum case for REMRemindersListDataView.ShowCompleted.off(_:)
      || v15 == enum case for REMRemindersListDataView.ShowCompleted.on(_:))
    {
      goto LABEL_23;
    }
    _diagnoseUnexpectedEnumCase<A>(type:)(v7, v7);
    __break(1u);
LABEL_16:
    v17 = *(_QWORD *)(v13 + 16);
    if (v17)
      goto LABEL_17;
LABEL_22:
    swift_bridgeObjectRelease(v13);
    a1 = v69;
    goto LABEL_23;
  }
  v69 = a1;
  (*(void (**)(uint64_t, uint64_t))(v8 + 96))(v13, v7);
  v13 = *(_QWORD *)v13;
  v71 = v13 & 0xC000000000000001;
  if ((v13 & 0xC000000000000001) == 0)
    goto LABEL_16;
  if (v13 < 0)
    v16 = v13;
  else
    v16 = v13 & 0xFFFFFFFFFFFFFF8;
  if (!__CocoaSet.count.getter(v16))
    goto LABEL_22;
  v17 = __CocoaSet.count.getter(v16);
  if (!v17)
  {
    swift_bridgeObjectRelease(v13);
    v18 = _swiftEmptyArrayStorage;
LABEL_42:
    v55 = sub_10001A630(&qword_10083C4C0);
    inited = swift_initStackObject(v55, v76);
    v74 = xmmword_1006A3C40;
    *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
    v57 = swift_initStackObject(v55, v75);
    *(_OWORD *)(v57 + 16) = v74;
    v58 = v72;
    *(_QWORD *)(v57 + 32) = v72;
    KeyPath = swift_getKeyPath(&unk_1006B5778);
    v60 = v58;
    v61 = sub_1003436A4(KeyPath, 0x4F4E203D3D204B25, 0xE800000000000000, (uint64_t *)&unk_10083AEC0);
    v62 = swift_release(KeyPath);
    *(_QWORD *)(v57 + 40) = v61;
    v77[0] = v57;
    specialized Array._endMutation()(v62);
    *(_QWORD *)(inited + 32) = sub_10000D2BC(v77[0]);
    v63 = swift_getKeyPath(&unk_1006B59F0);
    v64 = sub_1001DF8D0((uint64_t)v18);
    swift_bridgeObjectRelease(v18);
    v65 = sub_10034297C(v63, (uint64_t)v64, &qword_1008466F8, (uint64_t *)&unk_10083AEC0);
    v66 = swift_release(v63);
    *(_QWORD *)(inited + 40) = v65;
    v77[0] = inited;
    specialized Array._endMutation()(v66);
    v25 = sub_1000153F8(v77[0]);
    v67 = _s10PredicatesO19CompletionPredicateOMa(0);
    swift_storeEnumTagMultiPayload(v69, v67, 5);
    return (uint64_t)v25;
  }
LABEL_17:
  v81 = _swiftEmptyArrayStorage;
  sub_1001C1BE4(0, v17 & ~(v17 >> 63), 0);
  v20 = v71;
  if (v71)
  {
    if (v13 < 0)
      v21 = v13;
    else
      v21 = v13 & 0xFFFFFFFFFFFFFF8;
    result = __CocoaSet.startIndex.getter(v21);
    v24 = 1;
  }
  else
  {
    result = sub_100364E8C(v13);
    v24 = v27 & 1;
  }
  v28 = v74;
  v78 = result;
  v79 = v23;
  v80 = v24;
  if ((v17 & 0x8000000000000000) == 0)
  {
    v29 = v13 & 0xFFFFFFFFFFFFFF8;
    if (v13 < 0)
      v29 = v13;
    v73 = v29;
    v30 = &selRef_subscriptionOwnerUserRecordID;
    v70 = v4;
    do
    {
      while (1)
      {
        sub_100364654(v78, v79, v80, v13);
        v45 = v44;
        v46 = objc_msgSend(v44, v30[121]);
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v46);

        v47 = v81;
        if ((swift_isUniquelyReferenced_nonNull_native(v81) & 1) == 0)
        {
          sub_1001C1BE4(0, v47[2] + 1, 1);
          v47 = v81;
        }
        v49 = v47[2];
        v48 = v47[3];
        if (v49 >= v48 >> 1)
        {
          sub_1001C1BE4(v48 > 1, v49 + 1, 1);
          v47 = v81;
        }
        v47[2] = v49 + 1;
        result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v47+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v49, v6, v28);
        v81 = v47;
        if (v20)
          break;
        v31 = v78;
        v32 = v79;
        v33 = v80;
        v34 = sub_10036456C(v78, v79, v80, v13);
        v35 = v6;
        v36 = v13;
        v37 = v30;
        v38 = v34;
        v40 = v39;
        v42 = v41;
        sub_1000E515C(v31, v32, v33);
        v78 = v38;
        v79 = v40;
        v30 = v37;
        v13 = v36;
        v6 = v35;
        v4 = v70;
        v43 = v42 & 1;
        v20 = v71;
        v28 = v74;
        v80 = v43;
        if (!--v17)
          goto LABEL_41;
      }
      if ((v80 & 1) == 0)
        goto LABEL_44;
      v50 = __CocoaSet.Index.handleBitPattern.getter(v78, v79);
      if (v50)
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v50);
      else
        isUniquelyReferenced_nonNull_native = 1;
      v52 = sub_10001A630(&qword_10083FC38);
      v53 = (void (*)(uint64_t *, _QWORD))Set.Index._asCocoa.modify(v77, v52);
      __CocoaSet.formIndex(after:isUnique:)(v54, isUniquelyReferenced_nonNull_native, v73);
      v53(v77, 0);
      --v17;
    }
    while (v17);
LABEL_41:
    sub_1000E515C(v78, v79, v80);
    swift_bridgeObjectRelease(v13);
    v18 = v81;
    goto LABEL_42;
  }
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

void sub_10033C874(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_externalIdentifier, a2);
}

void sub_10033C880(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setExternalIdentifier_);
}

uint64_t sub_10033C88C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_completionDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_10033C8A8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_1008380D0, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t (*)(void))&Date._bridgeToObjectiveC(), (SEL *)&selRef_setCompletionDate_);
}

id sub_10033C8CC@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "shouldCategorizeGroceryItems");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10033C8FC(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setShouldCategorizeGroceryItems:", *a1);
}

uint64_t sub_10033C910(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for REMSearchCriterion(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v4, a1, v2);
  return String.init<A>(describing:)(v4, v2);
}

void sub_10033C990(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10033CCC0(a1, (SEL *)&selRef_children, (unint64_t *)&qword_10083AE90, off_1007D6708, (unint64_t *)&qword_1008448D0, a2);
}

void sub_10033C9B4(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_10033CD80(a1, a2, a3, a4, (unint64_t *)&qword_10083AE90, off_1007D6708, (unint64_t *)&qword_1008448D0, (SEL *)&selRef_setChildren_);
}

id sub_10033C9D8@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "parentList");
  *a2 = result;
  return result;
}

id sub_10033CA10(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setParentList:", *a1);
}

uint64_t sub_10033CA24@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  uint64_t v4;

  v3 = objc_msgSend(*a1, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v3);

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a2, 0, 1, v4);
}

uint64_t sub_10033CA9C@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;

  v3 = *a1;
  if (*a1 > 0x7F)
  {
    v7 = (*a1 & 0x3F) << 8;
    if (v3 >= 0x800)
    {
      v8 = v3 >> 12;
      v9 = (v7 | (v3 >> 6) & 0x3F) << 8;
      v10 = HIWORD(v3);
      v4 = (((v9 | (v3 >> 12) & 0x3F) << 8) | (v3 >> 18)) - 2122219023;
      v11 = (v9 | v8) + 8487393;
      if (!v10)
        v4 = v11;
    }
    else
    {
      v4 = (v7 | (v3 >> 6)) + 33217;
    }
  }
  else
  {
    v4 = v3 + 1;
  }
  v12 = (v4 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v4) >> 3))));
  result = static String._uncheckedFromUTF8(_:)(&v12);
  *a2 = result;
  a2[1] = v6;
  return result;
}

id sub_10033CB7C@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "sharingStatus");
  *a2 = (_WORD)result;
  return result;
}

id sub_10033CBAC(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, "setSharingStatus:", *a1);
}

void sub_10033CBC0(id *a1)
{
  id v1;

  v1 = objc_msgSend(*a1, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v1);

}

id sub_10033CC14@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "daIsEventOnlyContainer");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10033CC44(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setDaIsEventOnlyContainer:", *a1);
}

id sub_10033CC58@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "daIsNotificationsCollection");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10033CC88(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setDaIsNotificationsCollection:", *a1);
}

void sub_10033CC9C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10033CCC0(a1, (SEL *)&selRef_hashtags, (unint64_t *)&qword_10083DA60, off_1007D66C8, (unint64_t *)&qword_10083BDF0, a2);
}

void sub_10033CCC0(id *a1@<X0>, SEL *a2@<X3>, unint64_t *a3@<X4>, _QWORD *a4@<X5>, unint64_t *a5@<X6>, uint64_t *a6@<X8>)
{
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v10 = objc_msgSend(*a1, *a2);
  if (v10)
  {
    v11 = v10;
    v12 = sub_1000151B0(0, a3, a4);
    v13 = sub_1000EC524(a5, a3, a4);
    v14 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v11, v12, v13);

  }
  else
  {
    v14 = 0;
  }
  *a6 = v14;
}

void sub_10033CD5C(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_10033CD80(a1, a2, a3, a4, (unint64_t *)&qword_10083DA60, off_1007D66C8, (unint64_t *)&qword_10083BDF0, (SEL *)&selRef_setHashtags_);
}

void sub_10033CD80(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4, unint64_t *a5, _QWORD *a6, unint64_t *a7, SEL *a8)
{
  void *v9;
  NSSet v13;
  Class isa;

  v9 = *a2;
  if (*a1)
  {
    sub_1000151B0(0, a5, a6);
    sub_1000EC524(a7, a5, a6);
    v13.super.isa = Set._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v13.super.isa = 0;
  }
  isa = v13.super.isa;
  objc_msgSend(v9, *a8);

}

uint64_t sub_10033CE28(uint64_t a1)
{
  return sub_10033CE58(a1, (uint64_t)&unk_1006B6150, 1, &qword_100871DF8);
}

uint64_t sub_10033CE40(uint64_t a1)
{
  return sub_10033CE58(a1, (uint64_t)&unk_1006B6188, 0, &qword_100871E00);
}

uint64_t sub_10033CE58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t KeyPath;
  uint64_t result;

  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  KeyPath = swift_getKeyPath(a2);
  result = NSSortDescriptor.init<A, B>(keyPath:ascending:)(KeyPath, a3);
  *a4 = result;
  return result;
}

uint64_t sub_10033CEB8(uint64_t a1)
{
  return sub_10033CE58(a1, (uint64_t)&unk_1006B6188, 1, &qword_100871E08);
}

uint64_t sub_10033CED0(uint64_t a1)
{
  return sub_10033CE58(a1, (uint64_t)&unk_1006B5F38, 1, &qword_100871E10);
}

uint64_t sub_10033CEE8(uint64_t a1)
{
  return sub_10033CE58(a1, (uint64_t)&unk_1006B5F38, 0, &qword_100871E18);
}

uint64_t sub_10033CF00(uint64_t a1)
{
  return sub_10033CE58(a1, (uint64_t)&unk_1006B5C28, 0, &qword_100871E20);
}

uint64_t sub_10033CF18(uint64_t a1)
{
  return sub_10033CE58(a1, (uint64_t)&unk_1006B6008, 0, &qword_100871E28);
}

void sub_10033CF30()
{
  id v0;
  NSString v1;
  id v2;

  v0 = objc_allocWithZone((Class)NSSortDescriptor);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "initWithKey:ascending:reverseNullOrder:", v1, 1, 1);

  qword_100871E30 = (uint64_t)v2;
}

uint64_t sub_10033CFAC(uint64_t a1)
{
  return sub_10033CE58(a1, (uint64_t)&unk_1006B5740, 0, &qword_100871E38);
}

uint64_t sub_10033CFC4(uint64_t a1)
{
  return sub_10033CE58(a1, (uint64_t)&unk_1006B5A28, 0, &qword_100871E40);
}

id sub_10033CFDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v1 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006A7330;
  if (qword_100837210 != -1)
    swift_once(&qword_100837210, sub_10033CE28);
  v2 = qword_100871DF8;
  v4 = (void *)qword_100871DF8;
  *(_QWORD *)(v1 + 32) = qword_100871DF8;
  specialized Array._endMutation()(v2);
  qword_100871E48 = v1;
  return v4;
}

char *sub_10033D070@<X0>(void **a1@<X0>, char **a2@<X8>)
{
  uint64_t v2;
  char *result;

  result = sub_100223CB4(*a1);
  if (!v2)
    *a2 = result;
  return result;
}

void sub_10033D09C(uint64_t a1, id a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v5 = v4;
  if (!objc_msgSend(a2, "includeDueDateDeltaAlerts"))
    return;
  if ((unint64_t)a4 >> 62)
  {
LABEL_18:
    if (a4 < 0)
      v19 = a4;
    else
      v19 = a4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a4);
    v20 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease();
    if (!v20)
      return;
  }
  else if (!*(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return;
  }
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v21 = a1;
    else
      v21 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v10 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease();
    if (!v10)
      return;
  }
  else
  {
    v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v10)
      return;
  }
  v22 = a4;
  v23 = a3;
  v24 = v5;
  swift_bridgeObjectRetain(a1);
  a3 = 4;
  a4 = (uint64_t)&selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
      v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a3 - 4, a1);
    else
      v11 = *(id *)(a1 + 8 * a3);
    v12 = v11;
    v5 = a3 - 3;
    if (__OFADD__(a3 - 4, 1))
    {
      __break(1u);
      goto LABEL_18;
    }
    v13 = objc_msgSend(v11, "dueDateDeltaAlertsData");
    if (v13)
      break;

    ++a3;
    if (v5 == v10)
    {
      swift_bridgeObjectRelease();
      return;
    }
  }
  v14 = v13;
  v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v17 = v16;

  sub_1000A71C8(v15, v17);
  swift_bridgeObjectRelease();

  v18 = sub_1001A483C(a1, (int)objc_msgSend(a2, "includeConcealed"), v23);
  if (!v24)
  {
    sub_10033D2C4(v22, v18);
    swift_bridgeObjectRelease();
  }
}

id sub_10033D28C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "remObjectID");
  *a2 = result;
  return result;
}

void sub_10033D2C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  NSArray v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = a2;
    if ((unint64_t)a1 >> 62)
      goto LABEL_20;
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v17))
    {
      v7 = 4;
      v18 = v6;
      v19 = v4;
      while (1)
      {
        v9 = (a1 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a1)
           : *(id *)(a1 + 8 * v7);
        v10 = v9;
        v11 = v7 - 3;
        if (__OFADD__(v7 - 4, 1))
          break;
        v12 = sub_1005CBC20(objc_msgSend(v9, "remObjectID"));
        if (v3)
        {

          goto LABEL_17;
        }
        v13 = v12;
        if (*(_QWORD *)(v4 + 16))
        {
          v14 = v12;
          v15 = sub_1002C672C(v14);
          if ((v16 & 1) != 0)
          {
            swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15));

            sub_1000151B0(0, (unint64_t *)&unk_100850AA0, REMDueDateDeltaAlert_ptr);
            v8.super.isa = Array._bridgeToObjectiveC()().super.isa;
            objc_msgSend(v10, "setFetchedDueDateDeltaAlerts:", v8.super.isa, swift_bridgeObjectRelease().n128_f64[0]);
          }
          else
          {
            v8.super.isa = (Class)v10;
            v10 = v14;
          }

          v6 = v18;
          v4 = v19;
        }

        ++v7;
        if (v11 == v6)
          goto LABEL_17;
      }
      __break(1u);
LABEL_20:
      if (a1 < 0)
        v17 = a1;
      else
        v17 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
    }
LABEL_17:
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_10033D480(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  a1(&v5);
  v1 = v5;
  v2 = type metadata accessor for REMSearchCriterion(0);
  v3 = Array.description.getter(v1, v2);
  swift_bridgeObjectRelease(v1);
  return v3;
}

id sub_10033D4E4@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;

  v4 = *a1;
  sub_10001A670((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  *a2 = v4;
  return v4;
}

uint64_t sub_10033D520(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  void *i;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  _QWORD v44[4];
  _OWORD v45[2];
  _OWORD v46[2];
  void *v47;
  _OWORD v48[2];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v8 = -1 << *(_BYTE *)(a1 + 32);
  v9 = ~v8;
  v10 = *(_QWORD *)(a1 + 64);
  v11 = -v8;
  v49 = a1;
  v50 = a1 + 64;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  else
    v12 = -1;
  v51 = v9;
  v52 = 0;
  v53 = v12 & v10;
  v54 = a2;
  v55 = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100190944((uint64_t)&v47);
  v13 = v47;
  if (!v47)
    goto LABEL_26;
  sub_10001A6CC(v48, v46);
  v14 = *(_QWORD **)a5;
  v16 = sub_1002C66DC((uint64_t)v13);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v20 = v15;
  if (v14[3] >= v19)
  {
    if ((a4 & 1) != 0)
    {
      if ((v15 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      sub_1002D616C();
      if ((v20 & 1) != 0)
        goto LABEL_12;
    }
LABEL_14:
    v24 = *(_QWORD **)a5;
    *(_QWORD *)(*(_QWORD *)a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    *(_QWORD *)(v24[6] + 8 * v16) = v13;
    sub_10001A6CC(v46, (_OWORD *)(v24[7] + 32 * v16));
    v25 = v24[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v24[2] = v27;
LABEL_16:
    sub_100190944((uint64_t)&v47);
    for (i = v47; v47; i = v47)
    {
      sub_10001A6CC(v48, v46);
      v31 = *(_QWORD **)a5;
      v32 = sub_1002C66DC((uint64_t)i);
      v34 = v31[2];
      v35 = (v33 & 1) == 0;
      v26 = __OFADD__(v34, v35);
      v36 = v34 + v35;
      if (v26)
        goto LABEL_27;
      v37 = v33;
      if (v31[3] < v36)
      {
        sub_1002CC888(v36, 1);
        v32 = sub_1002C66DC((uint64_t)i);
        if ((v37 & 1) != (v38 & 1))
          goto LABEL_29;
      }
      if ((v37 & 1) != 0)
      {
        v29 = 32 * v32;
        sub_10001A670(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v32, (uint64_t)v44);
        sub_10001A670((uint64_t)v44, (uint64_t)v45);
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v44);
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v46);

        v30 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + v29);
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v30);
        sub_10001A6CC(v45, v30);
      }
      else
      {
        v39 = *(_QWORD **)a5;
        *(_QWORD *)(*(_QWORD *)a5 + 8 * (v32 >> 6) + 64) |= 1 << v32;
        *(_QWORD *)(v39[6] + 8 * v32) = i;
        sub_10001A6CC(v46, (_OWORD *)(v39[7] + 32 * v32));
        v40 = v39[2];
        v26 = __OFADD__(v40, 1);
        v41 = v40 + 1;
        if (v26)
          goto LABEL_28;
        v39[2] = v41;
      }
      sub_100190944((uint64_t)&v47);
    }
LABEL_26:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_1000C6560(v49);
    return swift_release(v55);
  }
  sub_1002CC888(v19, a4 & 1);
  v21 = sub_1002C66DC((uint64_t)v13);
  if ((v20 & 1) == (v22 & 1))
  {
    v16 = v21;
    if ((v20 & 1) == 0)
      goto LABEL_14;
LABEL_12:
    sub_10001A670(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v16, (uint64_t)v44);
    sub_10001A670((uint64_t)v44, (uint64_t)v45);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v44);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v46);

    v23 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v16);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v23);
    sub_10001A6CC(v45, v23);
    goto LABEL_16;
  }
LABEL_29:
  v43 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v43);
  __break(1u);
  return result;
}

uint64_t sub_10033D894@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_displayDateDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_10033D8C0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_1008380D0, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t (*)(void))&Date._bridgeToObjectiveC(), (SEL *)&selRef_setDisplayDateDate_);
}

uint64_t sub_10033D8F4(uint64_t a1, uint64_t a2)
{
  return sub_10037EB08(a2);
}

_QWORD *sub_10033D900(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = _swiftEmptyArrayStorage;
    if (!v4)
      break;
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v4);
    if (v4 < 0)
    {
      __break(1u);
      return result;
    }
    v6 = 0;
    while (v4 != v6)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
      else
        v7 = *(id *)(a1 + 8 * v6 + 32);
      v8 = v7;
      v9 = objc_msgSend(v7, "objectID");
      v10 = dispatch thunk of REMStoreObjectsContainer.storedReminder(with:)();

      if (v2)
        return (_QWORD *)swift_release(_swiftEmptyArrayStorage);
      ++v6;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      v12 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
      v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v10);
      specialized ContiguousArray._endMutation()(v13);
      if (v4 == v6)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_16:
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(a1);
  }
  return result;
}

uint64_t sub_10033DA6C(uint64_t a1)
{
  return sub_1003436A4(a1, 0x696E203D3D204B25, 0xE90000000000006CLL, (uint64_t *)&unk_10083AEC0);
}

uint64_t sub_10033DA90(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_1008466F8, (uint64_t *)&unk_10083AEC0);
}

uint64_t sub_10033DAA4(uint64_t a1, uint64_t a2)
{
  return sub_10033DAF4(a1, a2, (uint64_t *)&unk_1008380D0, 0x4025203D3C204B25, 0xE800000000000000, (uint64_t *)&unk_10083AEC0);
}

uint64_t sub_10033DACC(uint64_t a1, uint64_t a2)
{
  return sub_10033DAF4(a1, a2, (uint64_t *)&unk_1008380D0, 0x4025203D3E204B25, 0xE800000000000000, (uint64_t *)&unk_10083AEC0);
}

uint64_t sub_10033DAF4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  NSString v15;
  Class isa;
  id v17;
  uint64_t result;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v10 = sub_10001A630((uint64_t *)&unk_100839E80);
  v11 = swift_allocObject(v10, 96, 7);
  *(_OWORD *)(v11 + 16) = xmmword_1006A3C40;
  v12 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v11);
  if (v13)
  {
    *(_QWORD *)(v11 + 56) = &type metadata for String;
    *(_QWORD *)(v11 + 32) = v12;
    *(_QWORD *)(v11 + 40) = v13;
    *(_QWORD *)(v11 + 88) = sub_10001A630(a3);
    v14 = sub_1000087F0((_QWORD *)(v11 + 64));
    sub_100008868(a2, (uint64_t)v14, a3);
    v15 = String._bridgeToObjectiveC()();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v11);
    v17 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v15, isa);

    sub_10000882C(a2, a3);
    return (uint64_t)v17;
  }
  else
  {
    v22 = 0;
    v23 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v19._object = (void *)0x80000001006F8C10;
    v19._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v19);
    v21 = a1;
    v20 = sub_10001A630(a6);
    _print_unlocked<A, B>(_:_:)(&v21, &v22, v20, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v22, v23, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_10033DCC4(uint64_t a1)
{
  return sub_1003436A4(a1, 0x4F4E203D3D204B25, 0xE800000000000000, (uint64_t *)&unk_10083AEC0);
}

uint64_t sub_10033DCE4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100341F54(a1, a2, a3, a4, (uint64_t *)&unk_10083AEC0);
}

uint64_t sub_10033DCF0(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_1008466F8, &qword_100843760);
}

uint64_t sub_10033DD04(uint64_t a1)
{
  return sub_100342DE4(a1, &qword_100843760);
}

uint64_t sub_10033DD10(uint64_t a1, __int16 a2)
{
  return sub_10033EFC4(a1, a2, &qword_100843760);
}

uint64_t sub_10033DD1C(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_1008466E8, &qword_100843760);
}

uint64_t sub_10033DD30(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100341F54(a1, a2, a3, a4, &qword_100843760);
}

uint64_t sub_10033DD3C(uint64_t a1)
{
  return sub_1003436A4(a1, 0x4559203D3D204B25, 0xE900000000000053, &qword_100843760);
}

uint64_t sub_10033DD60(uint64_t a1, uint64_t a2)
{
  return sub_100342C2C(a1, a2, (uint64_t)&type metadata for Int, 0x6E756F63402E4B25, 0xEF4025203D3D2074, &qword_100843760);
}

uint64_t sub_10033DD94(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100341F54(a1, a2, a3, a4, &qword_10083FD40);
}

uint64_t sub_10033DDA0(uint64_t a1)
{
  return sub_1003436A4(a1, 0x696E203D3D204B25, 0xE90000000000006CLL, &qword_10083FD40);
}

uint64_t sub_10033DDC4(uint64_t a1)
{
  return sub_1003436A4(a1, 0x696E203D21204B25, 0xE90000000000006CLL, &qword_10083FD40);
}

uint64_t sub_10033DDE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  Class isa;
  id v12;
  uint64_t result;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v6 = sub_10001A630((uint64_t *)&unk_100839E80);
  v7 = swift_allocObject(v6, 96, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1006A3C40;
  v8 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v7);
  if (v9)
  {
    *(_QWORD *)(v7 + 56) = &type metadata for String;
    *(_QWORD *)(v7 + 32) = v8;
    *(_QWORD *)(v7 + 40) = v9;
    *(_QWORD *)(v7 + 88) = sub_10001A630((uint64_t *)&unk_10083A370);
    *(_QWORD *)(v7 + 64) = a2;
    *(_QWORD *)(v7 + 72) = a3;
    swift_bridgeObjectRetain(a3);
    v10 = String._bridgeToObjectiveC()();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v7);
    v12 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v10, isa);

    return (uint64_t)v12;
  }
  else
  {
    v17 = 0;
    v18 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v14._object = (void *)0x80000001006F8C10;
    v14._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v14);
    v16 = a1;
    v15 = sub_10001A630(&qword_10083FD40);
    _print_unlocked<A, B>(_:_:)(&v16, &v17, v15, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v17, v18, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_10033DF9C(uint64_t a1)
{
  return sub_1003436A4(a1, 0x696E203D21204B25, 0xE90000000000006CLL, (uint64_t *)&unk_10083AEC0);
}

id sub_10033DFC0@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "completed");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10033DFF0(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setCompleted:", *a1);
}

id sub_10033E004@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "recurrenceRules");
  *a2 = result;
  return result;
}

id sub_10033E03C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setRecurrenceRules:", *a1);
}

uint64_t sub_10033E050(uint64_t a1, uint64_t a2)
{
  return sub_100342C2C(a1, a2, (uint64_t)&type metadata for Int64, 0x4025203D3E204B25, 0xE800000000000000, (uint64_t *)&unk_10083AEC0);
}

uint64_t sub_10033E078(uint64_t a1)
{
  return sub_100342DE4(a1, (uint64_t *)&unk_10083AEC0);
}

uint64_t sub_10033E084(uint64_t a1, uint64_t a2)
{
  return sub_100342C2C(a1, a2, (uint64_t)&type metadata for Int64, 0x4025203D3C204B25, 0xE800000000000000, (uint64_t *)&unk_10083AEC0);
}

uint64_t sub_10033E0AC(uint64_t a1, uint64_t a2)
{
  return sub_100342C2C(a1, a2, (uint64_t)&type metadata for Int, 0x6E756F63402E4B25, 0xEE004025203E2074, (uint64_t *)&unk_10083AEC0);
}

id sub_10033E0E0@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "list");
  *a2 = result;
  return result;
}

id sub_10033E118(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setList:", *a1);
}

id sub_10033E12C@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "markedForDeletion");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10033E15C(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setMarkedForDeletion:", *a1);
}

uint64_t sub_10033E170(uint64_t a1, uint64_t a2)
{
  return sub_100342C2C(a1, a2, (uint64_t)&type metadata for Int, 0x6E756F63402E4B25, 0xEF4025203D3D2074, (uint64_t *)&unk_10083AEC0);
}

uint64_t sub_10033E1A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  NSString v12;
  Class isa;
  id v14;
  uint64_t result;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v4 = sub_10001A630((uint64_t *)&unk_100839E80);
  v5 = swift_allocObject(v4, 96, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1006A3C40;
  v6 = swift_retain(a1);
  v7 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v6);
  if (v8)
  {
    v9 = v7;
    v10 = v8;
    swift_release(a1);
    *(_QWORD *)(v5 + 56) = &type metadata for String;
    *(_QWORD *)(v5 + 32) = v9;
    *(_QWORD *)(v5 + 40) = v10;
    *(_QWORD *)(v5 + 88) = sub_10001A630((uint64_t *)&unk_100839C80);
    v11 = sub_1000087F0((_QWORD *)(v5 + 64));
    sub_100008868(a2, (uint64_t)v11, (uint64_t *)&unk_100839C80);
    v12 = String._bridgeToObjectiveC()();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v5);
    v14 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v12, isa);

    sub_10000882C(a2, (uint64_t *)&unk_100839C80);
    return (uint64_t)v14;
  }
  else
  {
    v19 = 0;
    v20 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v16._object = (void *)0x80000001006F8C10;
    v16._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v16);
    v18 = a1;
    v17 = sub_10001A630((uint64_t *)&unk_10083AEC0);
    _print_unlocked<A, B>(_:_:)(&v18, &v19, v17, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v19, v20, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_10033E38C(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_1008466E8, (uint64_t *)&unk_10083AEC0);
}

id sub_10033E3A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  void (*v14)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t inited;
  uint64_t v33;
  __int128 v34;
  _BYTE v35[48];
  uint64_t v36;
  _BYTE v37[56];
  _BYTE v38[56];

  v31 = a2;
  v30 = a1;
  v3 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630(&qword_10083C4C0);
  v33 = v6;
  inited = swift_initStackObject(v6, v38);
  v34 = xmmword_1006A3C40;
  *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
  v7 = swift_initStackObject(v6, v37);
  *(_OWORD *)(v7 + 16) = xmmword_1006A3C20;
  KeyPath = swift_getKeyPath(&unk_1006B5778);
  v9 = sub_100342DE4(KeyPath, (uint64_t *)&unk_10083AEC0);
  swift_release(KeyPath);
  *(_QWORD *)(v7 + 32) = v9;
  v10 = swift_getKeyPath(&unk_1006B5A28);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v13(v5, a1, v11);
  v14 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56);
  v14(v5, 0, 1, v11);
  v15 = sub_10033DAF4(v10, (uint64_t)v5, (uint64_t *)&unk_1008380D0, 0x4025203D3E204B25, 0xE800000000000000, (uint64_t *)&unk_10083AEC0);
  swift_release(v10);
  *(_QWORD *)(v7 + 40) = v15;
  v16 = swift_getKeyPath(&unk_1006B5A28);
  v17 = v31;
  v13(v5, v31, v11);
  v14(v5, 0, 1, v11);
  v18 = sub_10033DAF4(v16, (uint64_t)v5, (uint64_t *)&unk_1008380D0, 0x4025203D3C204B25, 0xE800000000000000, (uint64_t *)&unk_10083AEC0);
  v19 = swift_release(v16);
  *(_QWORD *)(v7 + 48) = v18;
  v36 = v7;
  specialized Array._endMutation()(v19);
  v20 = sub_10000D2BC(v36);
  v21 = inited;
  *(_QWORD *)(inited + 32) = v20;
  v22 = swift_initStackObject(v33, v35);
  *(_OWORD *)(v22 + 16) = v34;
  v23 = swift_getKeyPath(&unk_1006B5F38);
  v13(v5, v30, v11);
  v14(v5, 0, 1, v11);
  v24 = sub_10033DAF4(v23, (uint64_t)v5, (uint64_t *)&unk_1008380D0, 0x4025203D3E204B25, 0xE800000000000000, (uint64_t *)&unk_10083AEC0);
  swift_release(v23);
  *(_QWORD *)(v22 + 32) = v24;
  v25 = swift_getKeyPath(&unk_1006B5F38);
  v13(v5, v17, v11);
  v14(v5, 0, 1, v11);
  v26 = sub_10033DAF4(v25, (uint64_t)v5, (uint64_t *)&unk_1008380D0, 0x4025203D3C204B25, 0xE800000000000000, (uint64_t *)&unk_10083AEC0);
  v27 = swift_release(v25);
  *(_QWORD *)(v22 + 40) = v26;
  v36 = v22;
  specialized Array._endMutation()(v27);
  v28 = sub_10000D2BC(v36);
  *(_QWORD *)(v21 + 40) = v28;
  v36 = v21;
  specialized Array._endMutation()(v28);
  return sub_1000153F8(v36);
}

const char *sub_10033E700()
{
  return "parentList";
}

id sub_10033E70C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "parentList");
  *a2 = result;
  return result;
}

id sub_10033E744(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setParentList:", *a1);
}

id sub_10033E758@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "parentReminder");
  *a2 = result;
  return result;
}

id sub_10033E790(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setParentReminder:", *a1);
}

const char *sub_10033E7AC()
{
  return "completionDate";
}

uint64_t sub_10033E7B8@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_completionDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_10033E7E4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_1008380D0, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t (*)(void))&Date._bridgeToObjectiveC(), (SEL *)&selRef_setCompletionDate_);
}

id sub_10033E830@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "inactive");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10033E860(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setInactive:", *a1);
}

id sub_10033E874@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "daIsEventOnlyContainer");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10033E8A4(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setDaIsEventOnlyContainer:", *a1);
}

id sub_10033E8B8@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "daIsNotificationsCollection");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10033E8E8(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setDaIsNotificationsCollection:", *a1);
}

uint64_t sub_10033E8FC@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_lastModifiedDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_10033E928(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_1008380D0, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t (*)(void))&Date._bridgeToObjectiveC(), (SEL *)&selRef_setLastModifiedDate_);
}

uint64_t sub_10033E95C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s10PredicatesO19CompletionPredicateOMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10033E9A8(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_notes, a2);
}

void sub_10033E9C4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setNotes_);
}

const char *sub_10033E9E0()
{
  return "sharingStatus";
}

id sub_10033E9EC@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "sharingStatus");
  *a2 = (_WORD)result;
  return result;
}

id sub_10033EA1C(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, "setSharingStatus:", *a1);
}

void sub_10033EA30(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_ckIdentifier, a2);
}

void sub_10033EA4C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setCkIdentifier_);
}

uint64_t sub_10033EA68@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_identifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_10033EA94(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_100839C80, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(void))&UUID._bridgeToObjectiveC(), (SEL *)&selRef_setIdentifier_);
}

const char *sub_10033EAC8()
{
  return "children";
}

void sub_10033EAD4(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10033CCC0(a1, (SEL *)&selRef_children, (unint64_t *)&qword_10083AE90, off_1007D6708, (unint64_t *)&qword_1008448D0, a2);
}

void sub_10033EB08(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_10033CD80(a1, a2, a3, a4, (unint64_t *)&qword_10083AE90, off_1007D6708, (unint64_t *)&qword_1008448D0, (SEL *)&selRef_setChildren_);
}

id sub_10033EB3C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "flagged");
  *a2 = result;
  return result;
}

id sub_10033EB6C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setFlagged:", *a1);
}

const char *sub_10033EB80()
{
  return "shouldCategorizeGroceryItems";
}

id sub_10033EB8C@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "shouldCategorizeGroceryItems");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10033EBBC(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setShouldCategorizeGroceryItems:", *a1);
}

uint64_t sub_10033EBD8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10033EBE8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10033EBF8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

const char *sub_10033EC1C()
{
  return "daCalendarItemUniqueIdentifier";
}

void sub_10033EC28(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_daCalendarItemUniqueIdentifier, a2);
}

void sub_10033EC44(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setDaCalendarItemUniqueIdentifier_);
}

uint64_t sub_10033EC60@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_creationDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_10033EC8C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_1008380D0, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t (*)(void))&Date._bridgeToObjectiveC(), (SEL *)&selRef_setCreationDate_);
}

uint64_t sub_10033ECC0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10033ECE4()
{
  uint64_t v0;

  return sub_10033D480(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_10033ECEC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10033ECFC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10033ED0C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10033ED18()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10033ED28()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10033ED3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for REMSearchCriterion(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10033ED9C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for REMSearchCriterion(0) - 8) + 80);
  return sub_10033C910(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_10033EDCC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10033EDDC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

id sub_10033EDF4@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "alarmStorage");
  *a2 = result;
  return result;
}

id sub_10033EE2C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setAlarmStorage:", *a1);
}

const char *sub_10033EE50()
{
  return "externalIdentifier";
}

void sub_10033EE5C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_externalIdentifier, a2);
}

void sub_10033EE78(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setExternalIdentifier_);
}

void sub_10033EE94(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10033CCC0(a1, (SEL *)&selRef_hashtags, (unint64_t *)&qword_10083DA60, off_1007D66C8, (unint64_t *)&qword_10083BDF0, a2);
}

void sub_10033EEC8(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_10033CD80(a1, a2, a3, a4, (unint64_t *)&qword_10083DA60, off_1007D66C8, (unint64_t *)&qword_10083BDF0, (SEL *)&selRef_setHashtags_);
}

id sub_10033EEFC@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "ckDirtyFlags");
  *a2 = (_WORD)result;
  return result;
}

id sub_10033EF2C(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, "setCkDirtyFlags:", *a1);
}

uint64_t sub_10033EF48(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_1008466F8, &qword_10083FCA0);
}

uint64_t sub_10033EF5C(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_1008466E8, &qword_10083FCA0);
}

uint64_t sub_10033EF70(uint64_t a1)
{
  return sub_1003436A4(a1, 0x4F4E203D3D204B25, 0xE800000000000000, &qword_10083FCA0);
}

uint64_t sub_10033EF90(uint64_t a1, uint64_t a2)
{
  return sub_10033DAF4(a1, a2, (uint64_t *)&unk_100839C80, 0x4025203D21204B25, 0xE800000000000000, &qword_10083FCA0);
}

uint64_t sub_10033EFB8(uint64_t a1, __int16 a2)
{
  return sub_10033EFC4(a1, a2, &qword_10083FCA0);
}

uint64_t sub_10033EFC4(uint64_t a1, __int16 a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  Class isa;
  id v12;
  uint64_t result;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v6 = sub_10001A630((uint64_t *)&unk_100839E80);
  v7 = swift_allocObject(v6, 96, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1006A3C40;
  v8 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v7);
  if (v9)
  {
    *(_QWORD *)(v7 + 56) = &type metadata for String;
    *(_QWORD *)(v7 + 32) = v8;
    *(_QWORD *)(v7 + 40) = v9;
    *(_QWORD *)(v7 + 88) = &type metadata for Int16;
    *(_WORD *)(v7 + 64) = a2;
    v10 = String._bridgeToObjectiveC()();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v7);
    v12 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v10, isa);

    return (uint64_t)v12;
  }
  else
  {
    v17 = 0;
    v18 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v14._object = (void *)0x80000001006F8C10;
    v14._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v14);
    v16 = a1;
    v15 = sub_10001A630(a3);
    _print_unlocked<A, B>(_:_:)(&v16, &v17, v15, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v17, v18, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

_QWORD *sub_10033F168(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v23;
  void *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, unint64_t, uint64_t);
  uint64_t v36;
  char v37;
  void (*v38)(char *, uint64_t);
  id v39;
  uint64_t v40;
  uint64_t Predicate;
  uint64_t v42;
  uint64_t v44;
  _QWORD v45[2];
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;

  v4 = v3;
  v50 = a3;
  v59 = a2;
  v6 = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicate.FilterableReminder(0);
  v48 = *(_QWORD *)(v6 - 8);
  v49 = v6;
  __chkstk_darwin(v6);
  v47 = (uint64_t)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v8);
  v10 = (char *)v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v58 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v57 = (char *)v45 - v15;
  v62 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
    goto LABEL_28;
  v16 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v16)
  {
    while (1)
    {
      v45[0] = a1;
      v45[1] = v4;
      v17 = 0;
      v54 = a1 & 0xFFFFFFFFFFFFFF8;
      v55 = a1 & 0xC000000000000001;
      v51 = a1 + 32;
      v52 = v16;
      v56 = v59 + 7;
      v53 = v10;
      while (v55)
      {
        v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v45[0]);
LABEL_10:
        v19 = v21;
        if (__OFADD__(v17++, 1))
          goto LABEL_27;
        if (v59[2])
        {
          v23 = objc_msgSend(v21, "identifier");
          if (!v23)
          {
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56))(v10, 1, 1, v11);
LABEL_21:
            sub_10000882C((uint64_t)v10, (uint64_t *)&unk_100839C80);
            goto LABEL_22;
          }
          v24 = v23;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v23);

          v25 = v58;
          v26 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
          v26(v10, v13, v11);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v10, 0, 1, v11);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v10, 1, v11) == 1)
            goto LABEL_21;
          v46 = v19;
          v26(v57, v10, v11);
          if (v59[2])
          {
            v27 = v59;
            v28 = v59[5];
            v29 = sub_100342670((unint64_t *)&qword_100843670, (uint64_t)&protocol conformance descriptor for UUID);
            v30 = dispatch thunk of Hashable._rawHashValue(seed:)(v28, v11, v29);
            v31 = -1 << *((_BYTE *)v27 + 32);
            v32 = v30 & ~v31;
            if (((*(_QWORD *)((char *)v56 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) != 0)
            {
              v33 = ~v31;
              v34 = *(_QWORD *)(v58 + 72);
              v35 = *(void (**)(char *, unint64_t, uint64_t))(v58 + 16);
              while (1)
              {
                v35(v13, v59[6] + v34 * v32, v11);
                v36 = sub_100342670((unint64_t *)&qword_10083B380, (uint64_t)&protocol conformance descriptor for UUID);
                v37 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v57, v11, v36);
                v38 = *(void (**)(char *, uint64_t))(v58 + 8);
                v38(v13, v11);
                if ((v37 & 1) != 0)
                  break;
                v32 = (v32 + 1) & v33;
                if (((*(_QWORD *)((char *)v56 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
                  goto LABEL_19;
              }
              v18 = ((uint64_t (*)(char *, uint64_t))v38)(v57, v11);
              v19 = v46;
              goto LABEL_5;
            }
          }
LABEL_19:
          (*(void (**)(char *, uint64_t))(v58 + 8))(v57, v11);
          v19 = v46;
        }
LABEL_22:
        v60 = v50;
        v61 = v50;
        v39 = v19;
        v40 = sub_10001A630(&qword_100846700);
        a1 = sub_1000C4C0C(&qword_100846708, &qword_100846700);
        Predicate = Sequence<>.postFetchPredicateTypes.getter(v40, a1);
        v42 = v47;
        sub_1004E1940(v39, Predicate, v47);
        v4 = Sequence<>.evaluate(with:)(v42, v40, a1);
        v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 8))(v42, v49);
        if ((v4 & 1) == 0)
        {

          goto LABEL_6;
        }
LABEL_5:
        v4 = (uint64_t)&v62;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v18);
        a1 = v62[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1);
        v20 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(a1, v19);
        specialized ContiguousArray._endMutation()(v20);
LABEL_6:
        v10 = v53;
        if (v17 == v52)
          return v62;
      }
      if (v17 < *(_QWORD *)(v54 + 16))
        break;
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      if (a1 < 0)
        v44 = a1;
      else
        v44 = a1 & 0xFFFFFFFFFFFFFF8;
      v16 = _CocoaArrayWrapper.endIndex.getter(v44);
      if (!v16)
        return _swiftEmptyArrayStorage;
    }
    v21 = *(id *)(v51 + 8 * v17);
    goto LABEL_10;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10033F5F0(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_1008466F8, &qword_10083F300);
}

uint64_t sub_10033F604(uint64_t a1)
{
  return sub_1003436A4(a1, 0x696E203D3D204B25, 0xE90000000000006CLL, &qword_10083F300);
}

uint64_t sub_10033F628(uint64_t a1)
{
  return sub_1003436A4(a1, 0x4F4E203D3D204B25, 0xE800000000000000, &qword_10083F300);
}

void sub_10033F648()
{
  sub_1001C1B0C(0, 7, 0);
  __asm { BR              X9 }
}

uint64_t sub_10033F874(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_10083DA88, &qword_100843880);
}

uint64_t sub_10033F888(uint64_t a1, uint64_t a2)
{
  return sub_100342C2C(a1, a2, (uint64_t)&type metadata for Int64, 0x4025203D3C204B25, 0xE800000000000000, &qword_100843880);
}

void sub_10033F8B0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t, __n128);
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t **v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t (*v62)(char *, uint64_t, uint64_t, __n128);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t **v78;
  uint64_t v79;
  unsigned __int8 v80;
  uint64_t v81;
  uint64_t i;
  uint64_t v83;
  uint64_t v84;
  id v85;
  void *v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __n128 v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  id v108;
  void *v109;
  id v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  double v122;
  id v123;
  uint64_t v124;
  void *v125;
  void *v126;
  Swift::String v127;
  Swift::String v128;
  NSString v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  uint64_t (*v142)(char *, uint64_t, uint64_t, __n128);
  char *v143;
  void (*v144)(char *, uint64_t);
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  id v149;
  _QWORD *v150;
  unint64_t v151;
  _QWORD *v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t (*v157)(char *, uint64_t, uint64_t, __n128);

  v4 = v3;
  v147 = a3;
  v149 = a2;
  v6 = type metadata accessor for Logger(0);
  v144 = *(void (**)(char *, uint64_t))(v6 - 8);
  __chkstk_darwin(v6);
  v140 = (char *)&v134 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v141 = (char *)&v134 - v9;
  __chkstk_darwin(v10);
  v143 = (char *)&v134 - v11;
  v156 = (char *)&_swiftEmptySetSingleton;
  v157 = (uint64_t (*)(char *, uint64_t, uint64_t, __n128))&_swiftEmptySetSingleton;
  v154 = (uint64_t)_swiftEmptyArrayStorage;
  v155 = (uint64_t)_swiftEmptyArrayStorage;
  v139 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
    goto LABEL_53;
  v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (1)
  {
    v148 = a1;
    v146 = v6;
    if (!v12)
      break;
    v13 = a1 & 0xC000000000000001;
    v14 = 4;
    while (1)
    {
      v6 = v14 - 4;
      v16 = v13 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14 - 4, a1) : *(id *)(a1 + 8 * v14);
      v17 = v16;
      v18 = v14 - 3;
      if (__OFADD__(v6, 1))
        break;
      if ((objc_msgSend(v149, "includeConcealed") & 1) != 0
        || !objc_msgSend(v17, "isConcealed"))
      {
        v19 = objc_msgSend(v17, "list");
        if (v19)
        {
          v153 = 0;
          v20 = v19;
          v21 = objc_msgSend(v20, "remObjectIDWithError:", &v153);
          v22 = v153;
          if (!v21)
            goto LABEL_31;
          v23 = v21;
          v24 = v153;
          v25 = sub_1005CCB64(v23);
          if (v4)
            goto LABEL_32;
          v26 = v25;

          sub_1002DB59C(&v150, v26);
          v27 = v20;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v27);
          v29 = *(_QWORD *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v28 = *(_QWORD *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v29 >= v28 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1);
          v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v27);
          specialized Array._endMutation()(v30);

          a1 = v148;
        }
        v31 = objc_msgSend(v17, "parentReminder");
        if (v31)
        {
          v153 = 0;
          v20 = v31;
          v32 = objc_msgSend(v20, "remObjectIDWithError:", &v153);
          v22 = v153;
          if (!v32)
          {
LABEL_31:
            v56 = v22;
            _convertNSErrorToError(_:)(v22);

            swift_willThrow(v57);
LABEL_32:
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_33:
            swift_bridgeObjectRelease();
            goto LABEL_34;
          }
          v33 = v32;
          v34 = v153;
          v35 = sub_1005CBC20(v33);
          if (v4)
            goto LABEL_32;
          v36 = v35;

          sub_1002DB588(&v150, v36);
          v37 = v20;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v37);
          v39 = *(_QWORD *)((v154 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v38 = *(_QWORD *)((v154 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v39 >= v38 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1);
          v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v39, v37);
          specialized Array._endMutation()(v15);

          a1 = v148;
        }
      }

      ++v14;
      if (v18 == v12)
      {
        swift_bridgeObjectRelease();
        v40 = v157;
        v41 = v155;
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_53:
    if (a1 < 0)
      v88 = a1;
    else
      v88 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v12 = _CocoaArrayWrapper.endIndex.getter(v88);
  }
  swift_bridgeObjectRelease();
  v40 = (uint64_t (*)(char *, uint64_t, uint64_t, __n128))&_swiftEmptySetSingleton;
  v41 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_26:
  swift_bridgeObjectRetain(v40);
  v43 = sub_1001E8898(v42);
  swift_bridgeObjectRelease();
  v142 = v40;
  v145 = (unint64_t)v43;
  if ((unint64_t)v41 >> 62)
  {
    if (v41 < 0)
      v89 = v41;
    else
      v89 = v41 & 0xFFFFFFFFFFFFFF8;
    v90 = sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
    swift_bridgeObjectRetain(v41);
    v45 = (_QWORD *)_bridgeCocoaArray<A>(_:)(v89, v90);
  }
  else
  {
    v44 = swift_bridgeObjectRetain_n(v41, 2);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v44);
    sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
    v45 = (_QWORD *)v41;
  }
  swift_bridgeObjectRelease();
  v150 = v45;
  v46 = sub_10001A630(&qword_10083FCF0);
  v47 = sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
  v48 = sub_1000C4C0C((unint64_t *)&qword_10083FC48, &qword_10083FCF0);
  v49 = sub_1000EC524((unint64_t *)&qword_10083FE40, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
  v138 = v46;
  v50 = Sequence.compactMapToSet<A>(_:)(sub_100303BB8, 0, v46, v47, v48, v49);
  v51 = sub_1001E8870(v50);
  swift_bridgeObjectRelease();
  v52 = v145;
  v53 = sub_1005CEADC(v145, 0, 1, 0, (objc_class *)v51);
  if (v4)
  {
    swift_bridgeObjectRelease();
    swift_release(v52);
    swift_release(v51);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  v54 = v53;
  v136 = v49;
  v137 = v48;
  swift_bridgeObjectRelease();
  swift_release(v52);
  swift_release(v51);
  v55 = sub_1004A8268((uint64_t)v54);
  v59 = v58;
  v145 = (unint64_t)v55;
  if (qword_100837208 != -1)
    swift_once(&qword_100837208, sub_10033BAF8);
  v60 = sub_10001AAA8(v146, (uint64_t)qword_100846638);
  v61 = v143;
  v62 = (uint64_t (*)(char *, uint64_t, uint64_t, __n128))*((_QWORD *)v144 + 2);
  v135 = v60;
  v142 = v62;
  v63 = ((uint64_t (*)(char *))v62)(v143);
  v150 = v54;
  __chkstk_darwin(v63);
  *(&v134 - 2) = (uint64_t)v61;
  v64 = sub_10001A630(&qword_10083FF50);
  v65 = sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
  v66 = sub_1000C4C0C((unint64_t *)&qword_10083A838, &qword_10083FF50);
  v67 = (void *)Sequence.map<A>(skippingError:_:)(sub_1000F5264, &v134 - 4, sub_1000F4B44, 0, v64, v65, v66);
  v68 = v47;
  v69 = (void (*)(char *, uint64_t))*((_QWORD *)v144 + 1);
  v70 = v146;
  v69(v143, v146);
  swift_bridgeObjectRelease();
  v153 = v67;
  sub_1001E1A5C(v59);
  v71 = v156;
  swift_bridgeObjectRetain(v156);
  v73 = sub_1001E888C(v72);
  swift_bridgeObjectRelease();
  v74 = (_QWORD *)v154;
  if ((unint64_t)v154 >> 62)
  {
    if (v154 < 0)
      v91 = v154;
    else
      v91 = v154 & 0xFFFFFFFFFFFFFF8;
    v92 = sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
    swift_bridgeObjectRetain(v74);
    v76 = (_QWORD *)_bridgeCocoaArray<A>(_:)(v91, v92);
  }
  else
  {
    v75 = swift_bridgeObjectRetain_n(v154, 2);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v75);
    sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
    v76 = v74;
  }
  swift_bridgeObjectRelease();
  v150 = v76;
  v77 = Sequence.compactMapToSet<A>(_:)(sub_100303BB8, 0, v138, v68, v137, v136);
  v78 = sub_1001E8870(v77);
  swift_bridgeObjectRelease();
  v79 = (uint64_t)sub_1005CEA9C((uint64_t)v73, 0, 1, 0, (objc_class *)v78);
  swift_bridgeObjectRelease();
  swift_release(v73);
  swift_release(v78);
  v80 = objc_msgSend(v149, "includeConcealed");
  v144 = v69;
  if ((v80 & 1) == 0)
  {
    v150 = _swiftEmptyArrayStorage;
    if ((unint64_t)v79 >> 62)
    {
      if (v79 < 0)
        v93 = v79;
      else
        v93 = v79 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v79);
      v81 = _CocoaArrayWrapper.endIndex.getter(v93);
      swift_bridgeObjectRelease();
      if (v81)
        goto LABEL_42;
    }
    else
    {
      v81 = *(_QWORD *)((v79 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v81)
      {
LABEL_42:
        v143 = v71;
        if (v81 < 1)
        {
          __break(1u);
LABEL_98:
          __break(1u);
        }
        for (i = 0; i != v81; ++i)
        {
          if ((v79 & 0xC000000000000001) != 0)
            v85 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v79);
          else
            v85 = *(id *)(v79 + 8 * i + 32);
          v86 = v85;
          v87 = objc_msgSend(v85, "isConcealed");
          if ((v87 & 1) != 0)
          {

          }
          else
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v87);
            v83 = v150[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v83);
            v84 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v83, v86);
            specialized ContiguousArray._endMutation()(v84);
          }
        }
        swift_bridgeObjectRelease();
        v79 = (uint64_t)v150;
        v70 = v146;
        goto LABEL_70;
      }
    }
    swift_bridgeObjectRelease();
    v79 = (uint64_t)_swiftEmptyArrayStorage;
  }
LABEL_70:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v94 = swift_bridgeObjectRelease();
  v95 = v141;
  v96 = v142(v141, v135, v70, v94);
  v150 = (_QWORD *)v79;
  __chkstk_darwin(v96);
  *(&v134 - 2) = (uint64_t)v95;
  swift_bridgeObjectRetain(v79);
  v97 = sub_10001A630(&qword_10083D590);
  v98 = sub_1000151B0(0, &qword_10083FEE8, REMReminderStorage_ptr);
  v99 = sub_1000C4C0C((unint64_t *)&qword_10083FB70, &qword_10083D590);
  v100 = Sequence.map<A>(skippingError:_:)(sub_100343838, &v134 - 4, sub_10033D070, 0, v97, v98, v99);
  v101 = v147;
  v144(v141, v70);
  swift_bridgeObjectRelease();
  sub_10033D09C(v79, v149, v101, v100);
  swift_bridgeObjectRelease();
  v102 = v145;
  if (v145 >> 62)
    goto LABEL_92;
  if (*(_QWORD *)((v145 & 0xFFFFFFFFFFFFF8) + 0x10))
    return;
LABEL_72:
  v103 = swift_bridgeObjectRelease();
  if (v139)
  {
    if (v148 < 0)
      v105 = v148;
    else
      v105 = v148 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v148);
    v104 = _CocoaArrayWrapper.endIndex.getter(v105);
    v103 = swift_bridgeObjectRelease();
  }
  else
  {
    v104 = *(_QWORD *)((v148 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v106 = _swiftEmptyArrayStorage;
  if (!v104)
    goto LABEL_88;
  v152 = _swiftEmptyArrayStorage;
  v102 = specialized ContiguousArray.reserveCapacity(_:)(v104);
  if (v104 < 0)
    goto LABEL_98;
  v70 = 0;
  v107 = v148 & 0xC000000000000001;
  while (1)
  {
    if (v104 == v70)
    {
      __break(1u);
LABEL_92:
      if (v102 < 0)
        v132 = v102;
      else
        v132 = v102 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v145);
      v133 = _CocoaArrayWrapper.endIndex.getter(v132);
      swift_bridgeObjectRelease();
      if (v133)
        return;
      goto LABEL_72;
    }
    v108 = v107
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v70, v148)
         : *(id *)(v148 + 8 * v70 + 32);
    v109 = v108;
    v110 = objc_msgSend(v108, "account");
    if (!v110)
      break;
    v111 = v110;
    ++v70;

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v112);
    v113 = v152[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v113);
    v114 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v113, v111);
    v102 = specialized ContiguousArray._endMutation()(v114);
    if (v104 == v70)
    {
      v106 = v152;
      v70 = v146;
LABEL_88:
      v115 = v140;
      v116 = v70;
      v117 = v142(v140, v135, v70, v103);
      v150 = v106;
      __chkstk_darwin(v117);
      *(&v134 - 2) = (uint64_t)v115;
      v118 = sub_10001A630(&qword_10083FE60);
      v119 = sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
      v120 = sub_1000C4C0C((unint64_t *)&qword_100843190, &qword_10083FE60);
      Sequence.map<A>(skippingError:_:)(sub_100343840, &v134 - 4, sub_1002A6DFC, 0, v118, v119, v120);
      v144(v140, v116);
      swift_bridgeObjectRelease();
      return;
    }
  }
  v121 = (void *)objc_opt_self(REMError);
  v150 = 0;
  v151 = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  *(_QWORD *)&v122 = swift_bridgeObjectRelease().n128_u64[0];
  v150 = (_QWORD *)0xD000000000000021;
  v151 = 0x8000000100701610;
  v123 = objc_msgSend(v109, "description", v122);
  v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(v123);
  v126 = v125;

  v127._countAndFlagsBits = v124;
  v127._object = v126;
  String.append(_:)(v127);
  swift_bridgeObjectRelease();
  v128._countAndFlagsBits = 125;
  v128._object = (void *)0xE100000000000000;
  String.append(_:)(v128);
  v129 = String._bridgeToObjectiveC()();
  objc_msgSend(v121, "internalErrorWithDebugDescription:", v129, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v130);
  v131 = v152;
  swift_bridgeObjectRelease();
  swift_release(v131);
LABEL_34:
  swift_bridgeObjectRelease();
}

void sub_100340768(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  double v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  id v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  char *v38;
  uint64_t KeyPath;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  void *v69;
  _QWORD *v70;
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  char *v81;
  char v82[16];
  _QWORD *v83;

  v80 = a3;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD **)(v8 - 8);
  *(_QWORD *)&v10 = __chkstk_darwin(v8).n128_u64[0];
  v81 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = a2;
  v12 = objc_msgSend(a2, "includeConcealed", v10);
  v76 = a4;
  v78 = v4;
  if (v12)
  {
    swift_bridgeObjectRetain(a1);
    goto LABEL_20;
  }
  v83 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v20 = a1;
    else
      v20 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v13 = _CocoaArrayWrapper.endIndex.getter(v20);
    if (v13)
      goto LABEL_5;
LABEL_19:
    swift_bridgeObjectRelease();
    a1 = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_20;
  }
  v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v13)
    goto LABEL_19;
LABEL_5:
  if (v13 < 1)
  {
    __break(1u);
    swift_bridgeObjectRelease();
    __break(1u);
    return;
  }
  v75 = v9;
  v77 = v8;
  for (i = 0; i != v13; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0)
      v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
    else
      v17 = *(id *)(a1 + 8 * i + 32);
    v18 = v17;
    v19 = objc_msgSend(v17, "isConcealed");
    if ((v19 & 1) != 0)
    {

    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v19);
      v15 = v83[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v15);
      v16 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v18);
      specialized ContiguousArray._endMutation()(v16);
    }
  }
  swift_bridgeObjectRelease();
  a1 = (uint64_t)v83;
  v8 = v77;
  v9 = v75;
LABEL_20:
  v21 = type metadata accessor for REMReminderStorageCDIngestor();
  inited = swift_initStackObject(v21, v82);
  v23 = qword_100837208;
  swift_bridgeObjectRetain(a1);
  if (v23 != -1)
    swift_once(&qword_100837208, sub_10033BAF8);
  v24 = sub_10001AAA8(v8, (uint64_t)qword_100846638);
  v25 = v81;
  v26 = ((uint64_t (*)(char *, uint64_t, uint64_t))v9[2])(v81, v24, v8);
  v83 = (_QWORD *)a1;
  __chkstk_darwin(v26);
  *(&v74 - 2) = (uint64_t)v25;
  v27 = sub_10001A630(&qword_10083D590);
  v28 = sub_1000151B0(0, &qword_10083FEE8, REMReminderStorage_ptr);
  v29 = sub_1000C4C0C((unint64_t *)&qword_10083FB70, &qword_10083D590);
  v77 = inited;
  v30 = v78;
  v31 = Sequence.map<A>(skippingError:_:)(sub_100347E34, &v74 - 4, sub_10033D070, inited, v27, v28, v29);
  if (v30)
  {
    swift_errorRelease(v30);
    v32 = _swiftEmptyArrayStorage;
  }
  else
  {
    v32 = (_QWORD *)v31;
  }
  ((void (*)(char *, uint64_t))v9[1])(v81, v8);
  swift_bridgeObjectRelease();
  v34 = v79;
  v33 = v80;
  sub_10033D09C(a1, v79, v80, (uint64_t)v32);
  sub_10033F8B0(a1, v34, v33);
  v36 = v35;
  v75 = v37;
  v81 = v38;
  swift_bridgeObjectRelease();
  v83 = v32;
  KeyPath = swift_getKeyPath(&unk_1006B61C0);
  v40 = swift_getKeyPath(&unk_1006B61F0);
  v41 = sub_10001A630(&qword_10083FEF0);
  v42 = (void *)sub_1000C4C0C(&qword_100846730, &qword_10083FEF0);
  v78 = sub_1000EC524((unint64_t *)&qword_10083A1F0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v79 = v42;
  v43 = Sequence.indexBy<A, B>(key:value:)(KeyPath, v40, v41, v42);
  swift_release(KeyPath);
  swift_release(v40);
  v44 = sub_1003B0334(v43);
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  v83 = _swiftEmptyDictionarySingleton;
  sub_10033D520(v44, (uint64_t)sub_10033D4E4, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v83);
  v80 = v41;
  v46 = v83;
  swift_bridgeObjectRelease();
  v83 = v36;
  v47 = swift_getKeyPath(&unk_1006B6208);
  v48 = swift_getKeyPath(&unk_1006B6230);
  v49 = sub_10001A630(&qword_10083FFE0);
  v50 = sub_1000C4C0C(&qword_100846738, &qword_10083FFE0);
  v51 = Sequence.indexBy<A, B>(key:value:)(v47, v48, v49, v50);
  swift_bridgeObjectRelease();
  swift_release(v47);
  swift_release(v48);
  v52 = sub_1003B0348(v51);
  swift_bridgeObjectRelease();
  v53 = swift_isUniquelyReferenced_nonNull_native(v46);
  v83 = v46;
  sub_10033D520(v52, (uint64_t)sub_10033D4E4, 0, v53, (uint64_t)&v83);
  v54 = v83;
  swift_bridgeObjectRelease();
  v83 = v75;
  v55 = swift_getKeyPath(&unk_1006B6248);
  v56 = swift_getKeyPath(&unk_1006B6270);
  v57 = sub_10001A630(&qword_10083FEA0);
  v58 = sub_1000C4C0C(&qword_10083AC20, &qword_10083FEA0);
  v59 = Sequence.indexBy<A, B>(key:value:)(v55, v56, v57, v58);
  swift_bridgeObjectRelease();
  swift_release(v55);
  swift_release(v56);
  v60 = sub_1003B07B8(v59);
  swift_bridgeObjectRelease();
  v61 = swift_isUniquelyReferenced_nonNull_native(v54);
  v83 = v54;
  sub_10033D520(v60, (uint64_t)sub_10033D4E4, 0, v61, (uint64_t)&v83);
  v62 = v77;
  v63 = v83;
  swift_bridgeObjectRelease();
  v83 = v81;
  v64 = swift_getKeyPath(&unk_1006B61C0);
  v65 = swift_getKeyPath(&unk_1006B61F0);
  v66 = Sequence.indexBy<A, B>(key:value:)(v64, v65, v80, v79);
  swift_bridgeObjectRelease();
  swift_release(v64);
  swift_release(v65);
  v67 = sub_1003B0334(v66);
  swift_bridgeObjectRelease();
  v68 = swift_isUniquelyReferenced_nonNull_native(v63);
  v83 = v63;
  sub_10033D520(v67, (uint64_t)sub_10033D4E4, 0, v68, (uint64_t)&v83);
  v69 = v76;
  v70 = v83;
  v71 = swift_bridgeObjectRelease();
  v72 = type metadata accessor for REMStoreObjectsContainer(0, v71);
  swift_allocObject(v72, *(unsigned int *)(v72 + 48), *(unsigned __int16 *)(v72 + 52));
  v73 = REMStoreObjectsContainer.init(store:storages:)(v69, v70);
  sub_10033D900((uint64_t)v32);
  swift_bridgeObjectRelease();
  swift_release(v73);
  swift_release(v62);
}

uint64_t sub_100340EC0(uint64_t a1, objc_class *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  NSArray v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Predicate;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Class isa;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  Class v67;
  Class v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t result;
  Swift::String v73;
  uint64_t v74;
  uint64_t **v75;
  Swift::String v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  id v83;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;

  sub_10000D2C0();
  v13 = v12;
  v14 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v15 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v81 = v14;
  v16 = objc_msgSend((id)swift_getObjCClassFromMetadata(v14), "entity");
  objc_msgSend(v15, "setEntity:", v16);

  if (a9)
  {
    sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
    v17.super.isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v17.super.isa = 0;
  }
  objc_msgSend(v15, "setAffectedStores:", v17.super.isa);

  objc_msgSend(v15, "setPredicate:", v13);
  objc_msgSend(v15, "setFetchLimit:", a6);
  objc_msgSend(v15, "setFetchOffset:", a5);
  v92 = a4;
  v18 = &qword_100846700;
  v19 = sub_10001A630(&qword_100846700);
  v20 = sub_1000C4C0C(&qword_100846708, &qword_100846700);
  Predicate = Sequence<>.postFetchPredicateTypes.getter(v19, v20);
  v22 = _swiftEmptyArrayStorage;
  v83 = v15;
  if (a7)
  {
    v23 = a7 & 0xFFFFFFFFFFFFFF8;
    if ((unint64_t)a7 >> 62)
      goto LABEL_20;
    v24 = *(_QWORD *)((a7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a7);
    if (v24)
    {
      while (1)
      {
        v94 = v22;
        sub_1001C1B0C(0, v24 & ~(v24 >> 63), 0);
        if (v24 < 0)
          break;
        v78 = Predicate;
        Predicate = 0;
        v25 = v94;
        v23 = a7 & 0xC000000000000001;
        v87 = a7 & 0xC000000000000001;
        v22 = (_QWORD *)a7;
        while (v24 != Predicate)
        {
          if (v87)
          {
            v26 = specialized _ArrayBuffer._getElementSlowPath(_:)(Predicate, a7);
            v18 = (uint64_t *)v26;
          }
          else
          {
            v18 = *(uint64_t **)(a7 + 8 * Predicate + 32);
            v26 = swift_retain();
          }
          v27 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v26);
          if (!v28)
            goto LABEL_73;
          v29 = v27;
          v30 = v28;
          swift_release(v18);
          v94 = v25;
          v32 = v25[2];
          v31 = v25[3];
          v18 = (uint64_t *)(v32 + 1);
          if (v32 >= v31 >> 1)
          {
            sub_1001C1B0C(v31 > 1, v32 + 1, 1);
            v25 = v94;
          }
          ++Predicate;
          v25[2] = v18;
          v23 = (unint64_t)&v25[2 * v32];
          *(_QWORD *)(v23 + 32) = v29;
          *(_QWORD *)(v23 + 40) = v30;
          a7 = (uint64_t)v22;
          if (v24 == Predicate)
          {
            swift_bridgeObjectRelease();
            v15 = v83;
            v22 = _swiftEmptyArrayStorage;
            Predicate = v78;
            goto LABEL_25;
          }
        }
        __break(1u);
LABEL_20:
        if (a7 >= 0)
          v33 = v23;
        else
          v33 = a7;
        swift_bridgeObjectRetain(a7);
        v24 = _CocoaArrayWrapper.endIndex.getter(v33);
        if (!v24)
          goto LABEL_24;
      }
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    v25 = _swiftEmptyArrayStorage;
    v15 = v83;
  }
  else
  {
    v25 = _swiftEmptyArrayStorage;
  }
LABEL_25:
  v95 = v25;
  v77 = *(_QWORD *)(a4 + 16);
  if (v77)
  {
    sub_1001A8790(Predicate);
    v18 = (uint64_t *)v34;
    v35 = (unint64_t)sub_1001E8AA8(v34);
    swift_bridgeObjectRelease();
    if ((v35 & 0x8000000000000000) != 0 || (v35 & 0x4000000000000000) != 0)
      goto LABEL_41;
    v36 = *(_QWORD *)(v35 + 16);
    if (v36)
    {
      while (1)
      {
        v94 = v22;
        sub_1001C1B0C(0, v36 & ~(v36 >> 63), 0);
        if (v36 < 0)
          break;
        v79 = Predicate;
        Predicate = 0;
        v37 = v94;
        v88 = v35 & 0xC000000000000001;
        while (v36 != Predicate)
        {
          if (v88)
          {
            v38 = specialized _ArrayBuffer._getElementSlowPath(_:)(Predicate, v35);
            v18 = (uint64_t *)v38;
          }
          else
          {
            v18 = *(uint64_t **)(v35 + 8 * Predicate + 32);
            v38 = swift_retain();
          }
          v22 = (_QWORD *)v35;
          v39 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v38);
          if (!v40)
            goto LABEL_73;
          v41 = v39;
          v42 = v40;
          swift_release(v18);
          v94 = v37;
          v44 = v37[2];
          v43 = v37[3];
          v18 = (uint64_t *)(v44 + 1);
          if (v44 >= v43 >> 1)
          {
            sub_1001C1B0C(v43 > 1, v44 + 1, 1);
            v37 = v94;
          }
          ++Predicate;
          v37[2] = v18;
          v45 = &v37[2 * v44];
          v45[4] = v41;
          v45[5] = v42;
          v35 = (unint64_t)v22;
          if (v36 == Predicate)
          {
            swift_release(v22);
            v22 = _swiftEmptyArrayStorage;
            Predicate = v79;
            goto LABEL_43;
          }
        }
        __break(1u);
LABEL_41:
        swift_bridgeObjectRetain(v35);
        v36 = _CocoaArrayWrapper.endIndex.getter(v46);
        swift_release(v35);
        if (!v36)
          goto LABEL_42;
      }
LABEL_72:
      __break(1u);
LABEL_73:
      v92 = 0;
      v93 = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      v73._object = (void *)0x80000001006F8C10;
      v73._countAndFlagsBits = 0xD00000000000002CLL;
      String.append(_:)(v73);
      v91 = v18;
      v74 = sub_10001A630((uint64_t *)&unk_10083AEC0);
      v75 = &v91;
      goto LABEL_75;
    }
LABEL_42:
    swift_release(v35);
    v37 = _swiftEmptyArrayStorage;
LABEL_43:
    sub_1001E190C((uint64_t)v37);
    v25 = v95;
    v15 = v83;
  }
  if (v25[2])
  {
    v47 = sub_10001A630((uint64_t *)&unk_10083AE10);
    Array<A>.removeDuplicates()(v47, &protocol witness table for String);
    v25 = v95;
    swift_bridgeObjectRetain(v95);
    sub_1001DFBD0(v48);
    swift_bridgeObjectRelease();
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v15, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  }
  sub_10033F648();
  v92 = v50;
  swift_bridgeObjectRetain(a8);
  sub_1001E190C(v51);
  v94 = (_QWORD *)v92;
  sub_1001A879C(Predicate);
  v18 = v52;
  swift_bridgeObjectRelease();
  v53 = (unint64_t)sub_1001E8AA8((uint64_t)v18);
  swift_bridgeObjectRelease();
  if ((v53 & 0x8000000000000000) != 0 || (v53 & 0x4000000000000000) != 0)
  {
LABEL_61:
    swift_bridgeObjectRetain(v53);
    v54 = _CocoaArrayWrapper.endIndex.getter(v65);
    swift_release(v53);
    if (v54)
      goto LABEL_49;
  }
  else
  {
    v54 = *(_QWORD *)(v53 + 16);
    if (v54)
    {
LABEL_49:
      v91 = v22;
      sub_1001C1B0C(0, v54 & ~(v54 >> 63), 0);
      if ((v54 & 0x8000000000000000) == 0)
      {
        v55 = 0;
        v56 = v91;
        v86 = v53 & 0xC000000000000001;
        v89 = (_QWORD *)v53;
        while (1)
        {
          if (v54 == v55)
          {
            __break(1u);
            goto LABEL_61;
          }
          if (v86)
          {
            v57 = specialized _ArrayBuffer._getElementSlowPath(_:)(v55, v53);
            v58 = v57;
          }
          else
          {
            v58 = *(_QWORD *)(v53 + 8 * v55 + 32);
            v57 = swift_retain();
          }
          v59 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v57);
          if (!v60)
            break;
          v61 = v59;
          v22 = v60;
          swift_release(v58);
          v91 = v56;
          v63 = v56[2];
          v62 = v56[3];
          v18 = (uint64_t *)(v63 + 1);
          if (v63 >= v62 >> 1)
          {
            sub_1001C1B0C(v62 > 1, v63 + 1, 1);
            v56 = v91;
          }
          ++v55;
          v56[2] = (uint64_t)v18;
          v64 = &v56[2 * v63];
          v64[4] = v61;
          v64[5] = (uint64_t)v22;
          v53 = (unint64_t)v89;
          if (v54 == v55)
          {
            swift_bridgeObjectRelease();
            swift_release(v89);
            goto LABEL_63;
          }
        }
        v92 = 0;
        v93 = 0xE000000000000000;
        _StringGuts.grow(_:)(46);
        v76._object = (void *)0x80000001006F8C10;
        v76._countAndFlagsBits = 0xD00000000000002CLL;
        String.append(_:)(v76);
        v90 = v58;
        v74 = sub_10001A630((uint64_t *)&unk_10083AEC0);
        v75 = (uint64_t **)&v90;
LABEL_75:
        _print_unlocked<A, B>(_:_:)(v75, &v92, v74, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v92, v93, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
        __break(1u);
        return result;
      }
      __break(1u);
      goto LABEL_71;
    }
  }
  swift_bridgeObjectRelease();
  swift_release(v53);
  v56 = _swiftEmptyArrayStorage;
LABEL_63:
  sub_1001E190C((uint64_t)v56);
  v66 = sub_10001A630((uint64_t *)&unk_10083AE10);
  Array<A>.removeDuplicates()(v66, &protocol witness table for String);
  v67 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v83, "setRelationshipKeyPathsForPrefetching:", v67, swift_bridgeObjectRelease().n128_f64[0]);

  v68 = a2;
  if (a2)
  {
    sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
    v68 = Array._bridgeToObjectiveC()().super.isa;
  }
  objc_msgSend(v83, "setSortDescriptors:", v68);

  v69 = NSManagedObjectContext.fetch<A>(_:)(v83, v81);
  if (v82 || (v25 = (_QWORD *)v69, !v77))
  {

  }
  else
  {
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(v25);
    v71 = sub_10033F168(v70, &_swiftEmptySetSingleton, a4);

    swift_bridgeObjectRelease_n(v25, 2);
    swift_bridgeObjectRelease();
    return (uint64_t)v71;
  }
  return (uint64_t)v25;
}

uint64_t sub_10034176C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100341F54(a1, a2, a3, a4, (uint64_t *)&unk_100843800);
}

uint64_t sub_100341778(uint64_t a1)
{
  return sub_1003436A4(a1, 0x696E203D21204B25, 0xE90000000000006CLL, (uint64_t *)&unk_100843800);
}

id sub_10034179C(uint64_t a1, uint64_t a2)
{
  return sub_1003417DC(a1, a2, (uint64_t *)&unk_100839C80);
}

id sub_1003417BC(uint64_t a1, uint64_t a2)
{
  return sub_1003417DC(a1, a2, (uint64_t *)&unk_1008380D0);
}

id sub_1003417DC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  NSString v10;
  Class isa;
  id v12;

  v5 = sub_10001A630((uint64_t *)&unk_100839E80);
  v6 = swift_allocObject(v5, 96, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1006A3C40;
  v7 = sub_10026BE00(v6);
  *(_QWORD *)(v6 + 56) = &type metadata for String;
  *(_QWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 40) = v8;
  *(_QWORD *)(v6 + 88) = sub_10001A630(a3);
  v9 = sub_1000087F0((_QWORD *)(v6 + 64));
  sub_100008868(a2, (uint64_t)v9, a3);
  v10 = String._bridgeToObjectiveC()();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v12 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v10, isa);

  sub_10000882C(a2, a3);
  return v12;
}

uint64_t sub_1003418F0(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_1008466F8, &qword_10083FD70);
}

uint64_t sub_100341904(uint64_t a1)
{
  return sub_1003436A4(a1, 0x696E203D21204B25, 0xE90000000000006CLL, &qword_10083FD70);
}

uint64_t sub_100341928(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_1008466F8, &qword_1008437F0);
}

uint64_t sub_10034193C(uint64_t a1)
{
  return sub_1003436A4(a1, 0x696E203D3D204B25, 0xE90000000000006CLL, &qword_1008437F0);
}

uint64_t sub_100341960(uint64_t a1)
{
  return sub_1003436A4(a1, 0x696E203D21204B25, 0xE90000000000006CLL, &qword_1008437F0);
}

uint64_t sub_100341984(uint64_t a1)
{
  return sub_100342DE4(a1, &qword_1008437F0);
}

uint64_t sub_100341990(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_1008466F8, (uint64_t *)&unk_1008437D8);
}

uint64_t sub_1003419A4(uint64_t a1)
{
  return sub_1003436A4(a1, 0x696E203D3D204B25, 0xE90000000000006CLL, (uint64_t *)&unk_1008437D8);
}

uint64_t sub_1003419C8(uint64_t a1)
{
  return sub_1003436A4(a1, 0x4F4E203D3D204B25, 0xE800000000000000, (uint64_t *)&unk_1008437D8);
}

uint64_t sub_1003419E8(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_1008466F8, &qword_1008438A0);
}

uint64_t sub_1003419FC(uint64_t a1)
{
  return sub_1003436A4(a1, 0x696E203D3D204B25, 0xE90000000000006CLL, &qword_1008438A0);
}

uint64_t sub_100341A20(uint64_t a1)
{
  return sub_100342DE4(a1, &qword_1008438A0);
}

uint64_t sub_100341A2C(uint64_t a1)
{
  return sub_1003436A4(a1, 0x4559203D3D204B25, 0xE900000000000053, &qword_1008438A0);
}

uint64_t sub_100341A50(uint64_t a1)
{
  return sub_1003436A4(a1, 0x4F4E203D3D204B25, 0xE800000000000000, &qword_1008438A0);
}

uint64_t sub_100341A70(uint64_t a1, uint64_t a2)
{
  return sub_10033DAF4(a1, a2, (uint64_t *)&unk_100839C80, 0x4025203D21204B25, 0xE800000000000000, &qword_1008438A0);
}

uint64_t sub_100341A98(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_1008466F8, &qword_1008438C8);
}

uint64_t sub_100341AAC(uint64_t a1)
{
  return sub_1003436A4(a1, 0x696E203D3D204B25, 0xE90000000000006CLL, &qword_1008438C8);
}

uint64_t sub_100341AD0(uint64_t a1)
{
  return sub_100342DE4(a1, &qword_1008438C8);
}

uint64_t sub_100341ADC(uint64_t a1)
{
  return sub_1003436A4(a1, 0x4559203D3D204B25, 0xE900000000000053, &qword_1008438C8);
}

uint64_t sub_100341B00(uint64_t a1)
{
  return sub_1003436A4(a1, 0x4F4E203D3D204B25, 0xE800000000000000, &qword_1008438C8);
}

uint64_t sub_100341B20(uint64_t a1, uint64_t a2)
{
  return sub_10033DAF4(a1, a2, (uint64_t *)&unk_100839C80, 0x4025203D21204B25, 0xE800000000000000, &qword_1008438C8);
}

uint64_t sub_100341B48(uint64_t a1)
{
  return sub_1003436A4(a1, 0x696E203D3D204B25, 0xE90000000000006CLL, &qword_10083DAA0);
}

uint64_t sub_100341B6C(uint64_t a1)
{
  return sub_1003436A4(a1, 0x696E203D21204B25, 0xE90000000000006CLL, &qword_10083DAA0);
}

uint64_t sub_100341B90(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_1008466F8, &qword_10083DAA0);
}

uint64_t sub_100341BA4(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_1008466F8, &qword_100846740);
}

uint64_t sub_100341BB8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  return sub_100341BC4(a1, a2, a3, a4, a5, a6, a7, &qword_10083DAA8);
}

uint64_t sub_100341BC4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  void *object;
  NSString v25;
  Class isa;
  id v27;
  uint64_t result;
  Swift::String v29;
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;

  v15 = sub_10001A630((uint64_t *)&unk_100839E80);
  v16 = swift_allocObject(v15, 64, 7);
  *(_OWORD *)(v16 + 16) = xmmword_1006A3C00;
  v17 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v16);
  if (v18)
  {
    *(_QWORD *)(v16 + 56) = &type metadata for String;
    *(_QWORD *)(v16 + 32) = v17;
    *(_QWORD *)(v16 + 40) = v18;
    v32 = v16;
    if (a7)
      sub_1001E09F4(a7);
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease(0xE000000000000000);
    strcpy((char *)v31, "SUBQUERY(%K, ");
    HIWORD(v31[1]) = -4864;
    v19._countAndFlagsBits = a2;
    v19._object = a3;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(a3);
    v20._countAndFlagsBits = 8236;
    v20._object = (void *)0xE200000000000000;
    String.append(_:)(v20);
    v21._countAndFlagsBits = a4;
    v21._object = a5;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(a5);
    v22._countAndFlagsBits = 0x746E756F63402E29;
    v22._object = (void *)0xEB00000000203E20;
    String.append(_:)(v22);
    v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v23._object;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(object);
    v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v31[1]);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v32);
    v27 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v25, isa);

    return (uint64_t)v27;
  }
  else
  {
    v31[0] = 0;
    v31[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v29._object = (void *)0x80000001006F8C10;
    v29._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v29);
    v32 = a1;
    v30 = sub_10001A630(a8);
    _print_unlocked<A, B>(_:_:)(&v32, v31, v30, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v31[0], v31[1], "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_100341E64(uint64_t a1, uint64_t a2)
{
  return sub_100342C2C(a1, a2, (uint64_t)&type metadata for Int, 0x6E756F63402E4B25, 0xEE004025203E2074, &qword_10083DAA8);
}

uint64_t sub_100341E98(uint64_t a1, uint64_t a2)
{
  return sub_100342C2C(a1, a2, (uint64_t)&type metadata for Int, 0x6E756F63402E4B25, 0xEF4025203D3D2074, &qword_10083DAA8);
}

uint64_t sub_100341ECC(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_1008466F8, &qword_100843740);
}

uint64_t sub_100341EE0(uint64_t a1)
{
  return sub_1003436A4(a1, 0x696E203D3D204B25, 0xE90000000000006CLL, &qword_100843740);
}

uint64_t sub_100341F04(uint64_t a1)
{
  return sub_1003436A4(a1, 0x4F4E203D3D204B25, 0xE800000000000000, &qword_100843740);
}

uint64_t sub_100341F24(uint64_t a1)
{
  return sub_1003436A4(a1, 0x696E203D21204B25, 0xE90000000000006CLL, &qword_1008438C8);
}

uint64_t sub_100341F48(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100341F54(a1, a2, a3, a4, &qword_1008438C8);
}

uint64_t sub_100341F54(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  Swift::String v10;
  void *object;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  Class isa;
  id v22;
  uint64_t result;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(0xE000000000000000);
  v27 = 0x41544E4F43204B25;
  v10._countAndFlagsBits = sub_100303B04(a4);
  object = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(object);
  v12._countAndFlagsBits = 4203808;
  v12._object = (void *)0xE300000000000000;
  String.append(_:)(v12);
  v13 = sub_10001A630((uint64_t *)&unk_100839E80);
  v14 = swift_allocObject(v13, 96, 7);
  *(_OWORD *)(v14 + 16) = xmmword_1006A3C40;
  v15 = swift_retain(a1);
  v16 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v15);
  if (v17)
  {
    v18 = v16;
    v19 = v17;
    swift_release(a1);
    *(_QWORD *)(v14 + 32) = v18;
    *(_QWORD *)(v14 + 40) = v19;
    *(_QWORD *)(v14 + 88) = &type metadata for String;
    *(_QWORD *)(v14 + 56) = &type metadata for String;
    *(_QWORD *)(v14 + 64) = a2;
    *(_QWORD *)(v14 + 72) = a3;
    v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(0xEB00000000534E49);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v14);
    v22 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v20, isa);

    return (uint64_t)v22;
  }
  else
  {
    v27 = 0;
    v28 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v24._object = (void *)0x80000001006F8C10;
    v24._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v24);
    v26 = a1;
    v25 = sub_10001A630(a5);
    _print_unlocked<A, B>(_:_:)(&v26, &v27, v25, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v27, v28, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

void sub_100342188(void *a1, uint64_t a2)
{
  uint64_t KeyPath;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t **v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;

  KeyPath = swift_getKeyPath(&unk_1006B6150);
  v5 = a1;
  v6 = (void *)sub_1002E7220(KeyPath, a1);
  swift_release(KeyPath);

  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = v5;
  v29 = (void *)v8;
  specialized Array._endMutation()(v8);
  v9 = v5;
  v10 = sub_10001A630(&qword_10083FCF0);
  v11 = sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
  v12 = sub_1000C4C0C((unint64_t *)&qword_10083FC48, &qword_10083FCF0);
  v13 = sub_1000EC524((unint64_t *)&qword_10083FE40, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
  v14 = Sequence.compactMapToSet<A>(_:)(sub_100303BB8, 0, v10, v11, v12, v13);
  v15 = sub_1001E8870(v14);
  swift_bridgeObjectRelease();
  v16 = (void *)sub_100358798(a2, 0, (uint64_t)v15, (uint64_t)v6);
  swift_bridgeObjectRelease();
  swift_release(v15);
  v28 = objc_msgSend(v9, "managedObjectContext");
  v17 = sub_10001A630(&qword_100846720);
  Optional.tryUnwrap(_:file:line:)(&v29, 0x636F6D2E7473696CLL, 0xE800000000000000, 0xD000000000000064, 0x80000001007015A0, 1463, v17);

  v18 = v29;
  v19 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v20 = NSManagedObjectContext.fetch<A>(_:)(v16, v19);

  if (qword_100837208 != -1)
    swift_once(&qword_100837208, sub_10033BAF8);
  v21 = type metadata accessor for Logger(0);
  sub_10001AAA8(v21, (uint64_t)qword_100846638);
  swift_bridgeObjectRetain(v20);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v25 = 134217984;
    if ((unint64_t)v20 >> 62)
    {
      if (v20 < 0)
        v27 = v20;
      else
        v27 = v20 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v20);
      v26 = _CocoaArrayWrapper.endIndex.getter(v27);
      swift_bridgeObjectRelease();
    }
    else
    {
      v26 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v29 = (void *)v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Pre-fetching {result.count: %ld}", v25, 0xCu);
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v20, 2);
  }

}

uint64_t sub_1003425C0(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_1008466F8, &qword_1008436D0);
}

uint64_t sub_1003425D4(uint64_t a1)
{
  return sub_1003436A4(a1, 0x696E203D3D204B25, 0xE90000000000006CLL, &qword_1008436D0);
}

uint64_t sub_1003425F8(uint64_t a1)
{
  return sub_100342DE4(a1, &qword_1008436D0);
}

uint64_t sub_100342604(uint64_t a1)
{
  return sub_1003436A4(a1, 0x4559203D3D204B25, 0xE900000000000053, &qword_1008436D0);
}

uint64_t sub_100342628(uint64_t a1)
{
  return sub_1003436A4(a1, 0x4F4E203D3D204B25, 0xE800000000000000, &qword_1008436D0);
}

uint64_t sub_100342648(uint64_t a1, uint64_t a2)
{
  return sub_10033DAF4(a1, a2, (uint64_t *)&unk_100839C80, 0x4025203D21204B25, 0xE800000000000000, &qword_1008436D0);
}

uint64_t sub_100342670(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1003426B0(uint64_t a1)
{
  return sub_1003436A4(a1, 0x4F4E203D3D204B25, 0xE800000000000000, (uint64_t *)&unk_100843800);
}

uint64_t sub_1003426D0(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  Class isa;
  id v10;
  uint64_t result;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v4 = sub_10001A630((uint64_t *)&unk_100839E80);
  v5 = swift_allocObject(v4, 96, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1006A3C40;
  v6 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v5);
  if (v7)
  {
    *(_QWORD *)(v5 + 56) = &type metadata for String;
    *(_QWORD *)(v5 + 32) = v6;
    *(_QWORD *)(v5 + 40) = v7;
    *(_QWORD *)(v5 + 88) = &type metadata for Int32;
    *(_DWORD *)(v5 + 64) = a2;
    v8 = String._bridgeToObjectiveC()();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v5);
    v10 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v8, isa);

    return (uint64_t)v10;
  }
  else
  {
    v15 = 0;
    v16 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v12._object = (void *)0x80000001006F8C10;
    v12._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v12);
    v14 = a1;
    v13 = sub_10001A630((uint64_t *)&unk_100843800);
    _print_unlocked<A, B>(_:_:)(&v14, &v15, v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v15, v16, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_10034286C(uint64_t a1)
{
  return sub_1003436A4(a1, 0x4F4E203D3D204B25, 0xE800000000000000, &qword_100846728);
}

uint64_t sub_10034288C(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_1008466F8, &qword_1008437E8);
}

uint64_t sub_1003428A0(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_1008466F8, &qword_1008441B8);
}

uint64_t sub_1003428B4(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_100846718, &qword_100846728);
}

uint64_t sub_1003428C8(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_1008466F8, &qword_100846728);
}

uint64_t sub_1003428DC(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_100846718, &qword_100844328);
}

uint64_t sub_1003428F0(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_1008466E8, &qword_10083DAA0);
}

uint64_t sub_100342904(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_1008466F8, (uint64_t *)&unk_10083DA70);
}

uint64_t sub_100342918(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_100846718, &qword_100846710);
}

uint64_t sub_10034292C(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_1008466F8, &qword_100846710);
}

uint64_t sub_100342940(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_1008466F8, &qword_100844130);
}

uint64_t sub_100342954(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_1008466E8, &qword_1008440C8);
}

uint64_t sub_100342968(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, &qword_1008466F8, (uint64_t *)&unk_100844290);
}

uint64_t sub_10034297C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  Class isa;
  id v14;
  uint64_t result;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v8 = sub_10001A630((uint64_t *)&unk_100839E80);
  v9 = swift_allocObject(v8, 96, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1006A3C40;
  v10 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v9);
  if (v11)
  {
    *(_QWORD *)(v9 + 56) = &type metadata for String;
    *(_QWORD *)(v9 + 32) = v10;
    *(_QWORD *)(v9 + 40) = v11;
    *(_QWORD *)(v9 + 88) = sub_10001A630(a3);
    *(_QWORD *)(v9 + 64) = a2;
    v12 = String._bridgeToObjectiveC()();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v9);
    v14 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v12, isa);

    return (uint64_t)v14;
  }
  else
  {
    v19 = 0;
    v20 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v16._object = (void *)0x80000001006F8C10;
    v16._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v16);
    v18 = a1;
    v17 = sub_10001A630(a4);
    _print_unlocked<A, B>(_:_:)(&v18, &v19, v17, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v19, v20, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_100342B24(uint64_t a1)
{
  return sub_1003436A4(a1, 0x4F4E203D3D204B25, 0xE800000000000000, &qword_100846710);
}

uint64_t sub_100342B44(uint64_t a1)
{
  return sub_1003436A4(a1, 0x4F4E203D3D204B25, 0xE800000000000000, &qword_100844130);
}

uint64_t sub_100342B64(uint64_t a1)
{
  return sub_100342DE4(a1, &qword_100846710);
}

uint64_t sub_100342B70(uint64_t a1)
{
  return sub_1003436A4(a1, 0x696E203D3D204B25, 0xE90000000000006CLL, &qword_100844130);
}

uint64_t sub_100342B94(uint64_t a1)
{
  return sub_1003436A4(a1, 0x696E203D3D204B25, 0xE90000000000006CLL, &qword_1008441B8);
}

uint64_t sub_100342BB8(uint64_t a1)
{
  return sub_1003436A4(a1, 0x696E203D3D204B25, 0xE90000000000006CLL, &qword_1008437E8);
}

uint64_t sub_100342BDC(uint64_t a1, uint64_t a2)
{
  return sub_10033DAF4(a1, a2, (uint64_t *)&unk_100839C80, 0x4025203D21204B25, 0xE800000000000000, &qword_100844130);
}

uint64_t sub_100342C04(uint64_t a1, uint64_t a2)
{
  return sub_100342C2C(a1, a2, (uint64_t)&type metadata for Int64, 0x4025203D21204B25, 0xE800000000000000, (uint64_t *)&unk_10083AEC0);
}

uint64_t sub_100342C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSString v14;
  Class isa;
  id v16;
  uint64_t result;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v10 = sub_10001A630((uint64_t *)&unk_100839E80);
  v11 = swift_allocObject(v10, 96, 7);
  *(_OWORD *)(v11 + 16) = xmmword_1006A3C40;
  v12 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v11);
  if (v13)
  {
    *(_QWORD *)(v11 + 32) = v12;
    *(_QWORD *)(v11 + 40) = v13;
    *(_QWORD *)(v11 + 88) = a3;
    *(_QWORD *)(v11 + 56) = &type metadata for String;
    *(_QWORD *)(v11 + 64) = a2;
    v14 = String._bridgeToObjectiveC()();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v11);
    v16 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v14, isa);

    return (uint64_t)v16;
  }
  else
  {
    v21 = 0;
    v22 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v18._object = (void *)0x80000001006F8C10;
    v18._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v18);
    v20 = a1;
    v19 = sub_10001A630(a6);
    _print_unlocked<A, B>(_:_:)(&v20, &v21, v19, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v21, v22, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_100342DCC(uint64_t a1)
{
  return sub_100342DE4(a1, &qword_100846728);
}

uint64_t sub_100342DD8(uint64_t a1)
{
  return sub_100342DE4(a1, &qword_100844130);
}

uint64_t sub_100342DE4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  Class isa;
  id v18;
  uint64_t result;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v4 = sub_10001A630((uint64_t *)&unk_100839E80);
  v5 = swift_allocObject(v4, 96, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1006A3C40;
  v6 = swift_retain(a1);
  v7 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v6);
  if (!v8)
    goto LABEL_4;
  v9 = v7;
  v10 = v8;
  swift_release(a1);
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  *(_QWORD *)(v5 + 32) = v9;
  *(_QWORD *)(v5 + 40) = v10;
  v11 = swift_retain(a1);
  v12 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v11);
  if (v13)
  {
    v14 = v12;
    v15 = v13;
    swift_release(a1);
    *(_QWORD *)(v5 + 88) = &type metadata for String;
    *(_QWORD *)(v5 + 64) = v14;
    *(_QWORD *)(v5 + 72) = v15;
    v16 = String._bridgeToObjectiveC()();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v5);
    v18 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v16, isa);

    return (uint64_t)v18;
  }
  else
  {
LABEL_4:
    v23 = 0;
    v24 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v20._object = (void *)0x80000001006F8C10;
    v20._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v20);
    v22 = a1;
    v21 = sub_10001A630(a2);
    _print_unlocked<A, B>(_:_:)(&v22, &v23, v21, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v23, v24, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

id sub_100342FBC(void *a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t inited;
  uint64_t v38;
  Class isa;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  Class v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  char v57[104];
  __int128 v58;
  __int128 v59;

  v54 = a2;
  v49 = a1;
  v50 = (id)_s10PredicatesOMa(0);
  __chkstk_darwin(v50);
  v3 = (char *)&v48 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Calendar.Component(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Calendar(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v12);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for Date(0);
  v52 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = Date.init()(v17);
  static Calendar.current.getter(v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Calendar.Component.day(_:), v4);
  if (v54 < 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  Calendar.date(byAdding:value:to:wrappingComponents:)(v7, -v54, v16, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v19 = *(int *)(sub_10001A630(&qword_1008466A0) + 48);
  sub_100008868((uint64_t)v14, (uint64_t)v3, (uint64_t *)&unk_1008380D0);
  v3[v19] = 1;
  swift_storeEnumTagMultiPayload(v3, v50, 17);
  sub_10000D2C0();
  v21 = v20;
  sub_10001C744((uint64_t)v3, _s10PredicatesOMa);
  v22 = v51;
  v23 = sub_1004BB6A4((uint64_t)v21);
  if (!v22)
  {
    v3 = (char *)v23;
    v7 = v14;

    v14 = (char *)objc_msgSend(objc_allocWithZone((Class)NSBatchDeleteRequest), "initWithFetchRequest:", v3);
    objc_msgSend(v14, "setResultType:", 1);
    v55 = 0;
    v25 = objc_msgSend(v49, "executeRequest:error:", v14, &v55);
    v21 = v55;
    if (!v25)
    {
      v29 = v55;
      _convertNSErrorToError(_:)(v21);

      swift_willThrow(v30);
      v24 = (uint64_t)v7;
      goto LABEL_11;
    }
    v26 = v25;
    *((_QWORD *)&v59 + 1) = sub_1000151B0(0, (unint64_t *)&unk_100846CA0, NSPersistentStoreResult_ptr);
    *(_QWORD *)&v58 = v26;
    v27 = sub_1000151B0(0, (unint64_t *)&unk_10083AE80, NSBatchDeleteResult_ptr);
    v28 = v21;
    throwingCast<A>(_:as:failureMessage:)(&v56, &v58, v27, 0, 0, v27);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v58);
    v31 = v56;
    v32 = objc_msgSend(v56, "result");
    if (v32)
    {
      v33 = v32;
      _bridgeAnyObjectToAny(_:)(&v58, v32);
      swift_unknownObjectRelease(v33);
    }
    else
    {
      v58 = 0u;
      v59 = 0u;
    }
    v34 = sub_10001A630((uint64_t *)&unk_100846CB0);
    throwingCast<A>(_:as:failureMessage:)(&v56, &v58, v34, 0, 0, v34);
    v50 = v31;
    v51 = v16;
    sub_10000882C((uint64_t)&v58, (uint64_t *)&unk_10083D5B0);
    v4 = (uint64_t)v56;
    v54 = objc_opt_self(NSManagedObjectContext);
    v36 = sub_10001A630(&qword_10083ADC0);
    inited = swift_initStackObject(v36, v57);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
    *(_QWORD *)&v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSDeletedObjectsKey);
    *((_QWORD *)&v58 + 1) = v38;
    AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), &v58, &type metadata for String, &protocol witness table for String);
    *(_QWORD *)(inited + 96) = v34;
    *(_QWORD *)(inited + 72) = v4;
    swift_bridgeObjectRetain(v4);
    sub_1002B007C(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v40 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v41 = swift_allocObject(v40, 40, 7);
    *(_OWORD *)(v41 + 16) = xmmword_1006A7330;
    v42 = v49;
    *(_QWORD *)(v41 + 32) = v49;
    *(_QWORD *)&v58 = v41;
    specialized Array._endMutation()(v41);
    sub_1000151B0(0, (unint64_t *)&unk_100846CC0, NSManagedObjectContext_ptr);
    v43 = v42;
    v44 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend((id)v54, "mergeChangesFromRemoteContextSave:intoContexts:", isa, v44, swift_bridgeObjectRelease().n128_f64[0]);

    if (!((unint64_t)v4 >> 62))
    {
      v21 = *(id *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);

LABEL_15:
      v45 = v51;
      v46 = v52;

      swift_bridgeObjectRelease();
      sub_10000882C((uint64_t)v7, (uint64_t *)&unk_1008380D0);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v53);
      return v21;
    }
LABEL_17:
    if (v4 < 0)
      v47 = v4;
    else
      v47 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v21 = (id)_CocoaArrayWrapper.endIndex.getter(v47);

    swift_bridgeObjectRelease();
    goto LABEL_15;
  }

  v24 = (uint64_t)v14;
LABEL_11:
  sub_10000882C(v24, (uint64_t *)&unk_1008380D0);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v16, v53);
  return v21;
}

uint64_t sub_100343680(uint64_t a1)
{
  return sub_1003436A4(a1, 0x4559203D3D204B25, 0xE900000000000053, &qword_100844130);
}

uint64_t sub_1003436A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  Class isa;
  id v12;
  uint64_t result;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v6 = sub_10001A630((uint64_t *)&unk_100839E80);
  v7 = swift_allocObject(v6, 64, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1006A3C00;
  v8 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v7);
  if (v9)
  {
    *(_QWORD *)(v7 + 56) = &type metadata for String;
    *(_QWORD *)(v7 + 32) = v8;
    *(_QWORD *)(v7 + 40) = v9;
    v10 = String._bridgeToObjectiveC()();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v7);
    v12 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v10, isa);

    return (uint64_t)v12;
  }
  else
  {
    v17 = 0;
    v18 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v14._object = (void *)0x80000001006F8C10;
    v14._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v14);
    v16 = a1;
    v15 = sub_10001A630(a4);
    _print_unlocked<A, B>(_:_:)(&v16, &v17, v15, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v17, v18, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_100343838(uint64_t a1, uint64_t a2)
{
  return sub_1003D5C94(a1, a2);
}

uint64_t sub_100343840(uint64_t a1, uint64_t a2)
{
  return sub_10037EB08(a2);
}

const char *sub_10034384C()
{
  return "remObjectID";
}

id sub_100343858@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "remObjectID");
  *a2 = result;
  return result;
}

uint64_t _s10PredicatesO18ConcealedPredicateOwet(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
  {
    v6 = *a1;
    if (v6 >= 2)
    {
      v7 = (v6 + 2147483646) & 0x7FFFFFFF;
      result = v7 - 4;
      if (v7 > 4)
        return result;
    }
    return 0;
  }
  v2 = a2 + 6;
  if (a2 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if (v2 >> 8 < 0xFF)
    v3 = 1;
  if (v2 >= 0x100)
    v4 = v3;
  else
    v4 = 0;
  return ((uint64_t (*)(void))((char *)&loc_1003438E0 + 4 * byte_1006B5527[v4]))();
}

uint64_t _s10PredicatesO18ConcealedPredicateOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 6;
  if (a3 + 6 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFA)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_10034398C + 4 * byte_1006B5531[v5]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1003439C0 + 4 * byte_1006B552C[v5]))();
}

uint64_t sub_1003439C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003439C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003439D0);
  return result;
}

uint64_t sub_1003439DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003439E4);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1003439E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003439F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003439FC(unsigned __int8 *a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *a1;
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

_BYTE *sub_100343A18(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 1;
  return result;
}

ValueMetadata *_s10PredicatesO18ConcealedPredicateOMa()
{
  return &_s10PredicatesO18ConcealedPredicateON;
}

uint64_t *sub_100343A40(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v10);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v11 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v11);
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v12 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v9 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t *sub_100343B54(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_10001C744((uint64_t)a1, _s10PredicatesO19CompletionPredicateOMa);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v8 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v8);
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v9 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

void *sub_100343C58(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    v8 = type metadata accessor for Date(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

void *sub_100343D1C(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_10001C744((uint64_t)a1, _s10PredicatesO19CompletionPredicateOMa);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v8 = type metadata accessor for Date(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for Date(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_100343DF8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 3, v4);
    return 0;
  }
  return result;
}

char *sub_100343E6C(char *a1, char **a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  char *v8;
  char *v9;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int (*v93)(char *, uint64_t, uint64_t);
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t *v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  void (*v166)(char *, char **, uint64_t);
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int (*v175)(char *, uint64_t, uint64_t);
  uint64_t v176;
  char *v177;
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v9[(v6 + 16) & ~(unint64_t)v6];
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v8 = *a2;
        *(_QWORD *)a1 = *a2;
        a1[8] = *((_BYTE *)a2 + 8);
        swift_bridgeObjectRetain(v8);
        swift_storeEnumTagMultiPayload(a1, a3, 0);
        break;
      case 1u:
        v11 = *a2;
        *(_QWORD *)a1 = *a2;
        a1[8] = *((_BYTE *)a2 + 8);
        v12 = v11;
        swift_storeEnumTagMultiPayload(a1, a3, 1);
        break;
      case 2u:
        v13 = *a2;
        *(_QWORD *)a1 = *a2;
        a1[8] = *((_BYTE *)a2 + 8);
        v14 = v13;
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 3u:
        v15 = *a2;
        *(_QWORD *)a1 = *a2;
        swift_bridgeObjectRetain(v15);
        v16 = sub_10001A630(&qword_1008466D0);
        v17 = *(int *)(v16 + 48);
        v18 = &a1[v17];
        v19 = (uint64_t *)((char *)a2 + v17);
        v20 = _s10PredicatesO19CompletionPredicateOMa(0);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v19, v20);
        if (EnumCaseMultiPayload == 2)
        {
          v195 = *v19;
          *(_QWORD *)v18 = *v19;
          swift_bridgeObjectRetain(v195);
          swift_storeEnumTagMultiPayload(v18, v20, 2);
        }
        else if (EnumCaseMultiPayload == 1)
        {
          v196 = type metadata accessor for Date(0);
          (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v196 - 8) + 16))(v18, v19, v196);
          swift_storeEnumTagMultiPayload(v18, v20, 1);
        }
        else if (EnumCaseMultiPayload)
        {
          memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
        }
        else
        {
          v22 = type metadata accessor for Date(0);
          (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v18, v19, v22);
          swift_storeEnumTagMultiPayload(v18, v20, 0);
        }
        a1[*(int *)(v16 + 64)] = *((_BYTE *)a2 + *(int *)(v16 + 64));
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 4u:
        v23 = *a2;
        *(_QWORD *)a1 = *a2;
        swift_bridgeObjectRetain(v23);
        v24 = sub_10001A630(&qword_1008466C8);
        v25 = *(int *)(v24 + 48);
        v26 = &a1[v25];
        v27 = (char *)a2 + v25;
        v28 = type metadata accessor for Date(0);
        v29 = *(_QWORD *)(v28 - 8);
        v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
        if (v30(v27, 1, v28))
        {
          v31 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
        }
        v182 = *(int *)(v24 + 64);
        v183 = &a1[v182];
        v184 = (char *)a2 + v182;
        if (v30(v184, 1, v28))
        {
          v185 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v183, v184, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v183, v184, v28);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v183, 0, 1, v28);
        }
        swift_storeEnumTagMultiPayload(a1, a3, 4);
        break;
      case 5u:
        v32 = *a2;
        *(_QWORD *)a1 = *a2;
        a1[8] = *((_BYTE *)a2 + 8);
        *((_QWORD *)a1 + 2) = a2[2];
        v33 = v32;
        swift_storeEnumTagMultiPayload(a1, a3, 5);
        break;
      case 6u:
        v140 = *a2;
        *(_QWORD *)a1 = *a2;
        v141 = v140;
        swift_storeEnumTagMultiPayload(a1, a3, 6);
        break;
      case 7u:
        v142 = *a2;
        *(_QWORD *)a1 = *a2;
        v143 = v142;
        swift_storeEnumTagMultiPayload(a1, a3, 7);
        break;
      case 8u:
        v34 = *a2;
        *(_QWORD *)a1 = *a2;
        v35 = v34;
        v36 = *(int *)(sub_10001A630(&qword_100846690) + 48);
        v37 = &a1[v36];
        v38 = (uint64_t)a2 + v36;
        v39 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
        swift_storeEnumTagMultiPayload(a1, a3, 8);
        break;
      case 9u:
        v144 = *a2;
        *(_QWORD *)a1 = *a2;
        v145 = v144;
        v146 = sub_10001A630(&qword_1008466C0);
        v147 = *(int *)(v146 + 48);
        v148 = &a1[v147];
        v149 = (uint64_t)a2 + v147;
        v150 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v150 - 8) + 16))(v148, v149, v150);
        a1[*(int *)(v146 + 64)] = *((_BYTE *)a2 + *(int *)(v146 + 64));
        swift_storeEnumTagMultiPayload(a1, a3, 9);
        break;
      case 0xAu:
        v40 = *a2;
        *(_QWORD *)a1 = *a2;
        swift_bridgeObjectRetain(v40);
        v41 = *(int *)(sub_10001A630(&qword_1008466B8) + 48);
        v42 = &a1[v41];
        v43 = (uint64_t)a2 + v41;
        v44 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
        swift_storeEnumTagMultiPayload(a1, a3, 10);
        break;
      case 0xBu:
        v45 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(a1, a2, v45);
        swift_storeEnumTagMultiPayload(a1, a3, 11);
        break;
      case 0xCu:
        v46 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(a1, a2, v46);
        swift_storeEnumTagMultiPayload(a1, a3, 12);
        break;
      case 0xDu:
        v47 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(a1, a2, v47);
        v48 = *(int *)(sub_10001A630(&qword_1008466B0) + 48);
        v49 = &a1[v48];
        v50 = (uint64_t)a2 + v48;
        v51 = type metadata accessor for Date(0);
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v49, v50, v51);
        swift_storeEnumTagMultiPayload(a1, a3, 13);
        break;
      case 0xEu:
        v151 = type metadata accessor for Date(0);
        (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v151 - 8) + 16))(a1, a2, v151);
        swift_storeEnumTagMultiPayload(a1, a3, 14);
        break;
      case 0xFu:
        v152 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v152 - 8) + 16))(a1, a2, v152);
        swift_storeEnumTagMultiPayload(a1, a3, 15);
        break;
      case 0x10u:
        v153 = *a2;
        *(_QWORD *)a1 = *a2;
        a1[8] = *((_BYTE *)a2 + 8);
        v154 = v153;
        v155 = *(int *)(sub_10001A630(&qword_1008466A8) + 64);
        v156 = &a1[v155];
        v157 = (char *)a2 + v155;
        v158 = type metadata accessor for Date(0);
        v159 = *(_QWORD *)(v158 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v159 + 48))(v157, 1, v158))
        {
          v160 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v156, v157, *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v159 + 16))(v156, v157, v158);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v159 + 56))(v156, 0, 1, v158);
        }
        swift_storeEnumTagMultiPayload(a1, a3, 16);
        break;
      case 0x11u:
        v161 = type metadata accessor for Date(0);
        v162 = *(_QWORD *)(v161 - 8);
        if ((*(unsigned int (**)(char **, uint64_t, uint64_t))(v162 + 48))(a2, 1, v161))
        {
          v163 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char **, uint64_t))(v162 + 16))(a1, a2, v161);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v162 + 56))(a1, 0, 1, v161);
        }
        v190 = sub_10001A630(&qword_1008466A0);
        a1[*(int *)(v190 + 48)] = *((_BYTE *)a2 + *(int *)(v190 + 48));
        swift_storeEnumTagMultiPayload(a1, a3, 17);
        break;
      case 0x12u:
        v52 = *a2;
        v53 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v53;
        v54 = v52;
        v55 = v53;
        v56 = *(int *)(sub_10001A630(&qword_100846698) + 64);
        v57 = &a1[v56];
        v58 = (uint64_t)a2 + v56;
        v59 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v57, v58, v59);
        swift_storeEnumTagMultiPayload(a1, a3, 18);
        break;
      case 0x13u:
        v60 = *a2;
        *(_QWORD *)a1 = *a2;
        swift_bridgeObjectRetain(v60);
        v61 = *(int *)(sub_10001A630(&qword_10083E368) + 48);
        v62 = &a1[v61];
        v63 = (uint64_t)a2 + v61;
        v64 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v62, v63, v64);
        swift_storeEnumTagMultiPayload(a1, a3, 19);
        break;
      case 0x14u:
        v164 = *a2;
        *(_QWORD *)a1 = *a2;
        swift_bridgeObjectRetain(v164);
        swift_storeEnumTagMultiPayload(a1, a3, 20);
        break;
      case 0x15u:
        v65 = *a2;
        *(_QWORD *)a1 = *a2;
        swift_bridgeObjectRetain(v65);
        v66 = *(int *)(sub_10001A630(&qword_100842300) + 48);
        v67 = &a1[v66];
        v68 = (uint64_t)a2 + v66;
        v69 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 16))(v67, v68, v69);
        swift_storeEnumTagMultiPayload(a1, a3, 21);
        break;
      case 0x16u:
        v70 = *a2;
        *(_QWORD *)a1 = *a2;
        swift_bridgeObjectRetain(v70);
        swift_storeEnumTagMultiPayload(a1, a3, 22);
        break;
      case 0x17u:
        v71 = *a2;
        *(_QWORD *)a1 = *a2;
        v72 = v71;
        v73 = *(int *)(sub_10001A630(&qword_100846690) + 48);
        v74 = &a1[v73];
        v75 = (uint64_t)a2 + v73;
        v76 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v74, v75, v76);
        swift_storeEnumTagMultiPayload(a1, a3, 23);
        break;
      case 0x18u:
        v77 = *a2;
        v78 = a2[1];
        *(_QWORD *)a1 = v77;
        *((_QWORD *)a1 + 1) = v78;
        swift_bridgeObjectRetain(v77);
        v79 = v78;
        swift_storeEnumTagMultiPayload(a1, a3, 24);
        break;
      case 0x19u:
        v80 = *a2;
        v81 = a2[1];
        *(_QWORD *)a1 = v80;
        *((_QWORD *)a1 + 1) = v81;
        swift_bridgeObjectRetain(v80);
        v82 = v81;
        swift_storeEnumTagMultiPayload(a1, a3, 25);
        break;
      case 0x1Au:
        v83 = *a2;
        *(_QWORD *)a1 = *a2;
        v84 = v83;
        swift_storeEnumTagMultiPayload(a1, a3, 26);
        break;
      case 0x1Bu:
        v165 = type metadata accessor for Date(0);
        v166 = *(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v165 - 8) + 16);
        v166(a1, a2, v165);
        v167 = sub_10001A630(&qword_100846688);
        v166(&a1[*(int *)(v167 + 48)], (char **)((char *)a2 + *(int *)(v167 + 48)), v165);
        swift_storeEnumTagMultiPayload(a1, a3, 27);
        break;
      case 0x1Cu:
        v85 = *a2;
        *(_QWORD *)a1 = *a2;
        swift_bridgeObjectRetain(v85);
        swift_storeEnumTagMultiPayload(a1, a3, 28);
        break;
      case 0x1Du:
        v86 = *a2;
        *(_QWORD *)a1 = *a2;
        swift_bridgeObjectRetain(v86);
        v87 = sub_10001A630(&qword_100846680);
        v88 = *(int *)(v87 + 48);
        v89 = &a1[v88];
        v90 = (char *)a2 + v88;
        v91 = type metadata accessor for Date(0);
        v92 = *(_QWORD *)(v91 - 8);
        v93 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48);
        if (v93(v90, 1, v91))
        {
          v94 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v89, v90, v91);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
        }
        v186 = *(int *)(v87 + 64);
        v187 = &a1[v186];
        v188 = (char *)a2 + v186;
        if (v93(v188, 1, v91))
        {
          v189 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v187, v188, *(_QWORD *)(*(_QWORD *)(v189 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v187, v188, v91);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v187, 0, 1, v91);
        }
        swift_storeEnumTagMultiPayload(a1, a3, 29);
        break;
      case 0x1Eu:
        v168 = *a2;
        *(_QWORD *)a1 = *a2;
        swift_bridgeObjectRetain(v168);
        v169 = sub_10001A630(&qword_100846680);
        v170 = *(int *)(v169 + 48);
        v171 = &a1[v170];
        v172 = (char *)a2 + v170;
        v173 = type metadata accessor for Date(0);
        v174 = *(_QWORD *)(v173 - 8);
        v175 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v174 + 48);
        if (v175(v172, 1, v173))
        {
          v176 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v171, v172, *(_QWORD *)(*(_QWORD *)(v176 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v174 + 16))(v171, v172, v173);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v174 + 56))(v171, 0, 1, v173);
        }
        v191 = *(int *)(v169 + 64);
        v192 = &a1[v191];
        v193 = (char *)a2 + v191;
        if (v175(v193, 1, v173))
        {
          v194 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v192, v193, *(_QWORD *)(*(_QWORD *)(v194 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v174 + 16))(v192, v193, v173);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v174 + 56))(v192, 0, 1, v173);
        }
        swift_storeEnumTagMultiPayload(a1, a3, 30);
        break;
      case 0x20u:
        v95 = *a2;
        *(_QWORD *)a1 = *a2;
        swift_bridgeObjectRetain(v95);
        swift_storeEnumTagMultiPayload(a1, a3, 32);
        break;
      case 0x21u:
        v96 = *a2;
        *(_QWORD *)a1 = *a2;
        a1[8] = *((_BYTE *)a2 + 8);
        v97 = v96;
        swift_storeEnumTagMultiPayload(a1, a3, 33);
        break;
      case 0x22u:
        v98 = *a2;
        *(_QWORD *)a1 = *a2;
        v99 = v98;
        swift_storeEnumTagMultiPayload(a1, a3, 34);
        break;
      case 0x23u:
        v177 = *a2;
        *(_QWORD *)a1 = *a2;
        v178 = v177;
        swift_storeEnumTagMultiPayload(a1, a3, 35);
        break;
      case 0x24u:
        v179 = *a2;
        *(_QWORD *)a1 = *a2;
        v180 = v179;
        swift_storeEnumTagMultiPayload(a1, a3, 36);
        break;
      case 0x25u:
        v100 = *a2;
        *(_QWORD *)a1 = *a2;
        v101 = v100;
        swift_storeEnumTagMultiPayload(a1, a3, 37);
        break;
      case 0x26u:
        v102 = *a2;
        *(_QWORD *)a1 = *a2;
        v103 = v102;
        v104 = sub_10001A630(&qword_10083AEB0);
        v105 = *(int *)(v104 + 48);
        v106 = &a1[v105];
        v107 = (uint64_t *)((char *)a2 + v105);
        v108 = _s10PredicatesO19CompletionPredicateOMa(0);
        v109 = swift_getEnumCaseMultiPayload(v107, v108);
        if (v109 == 2)
        {
          v197 = *v107;
          *(_QWORD *)v106 = *v107;
          swift_bridgeObjectRetain(v197);
          swift_storeEnumTagMultiPayload(v106, v108, 2);
        }
        else if (v109 == 1)
        {
          v198 = type metadata accessor for Date(0);
          (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v198 - 8) + 16))(v106, v107, v198);
          swift_storeEnumTagMultiPayload(v106, v108, 1);
        }
        else if (v109)
        {
          memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
        }
        else
        {
          v110 = type metadata accessor for Date(0);
          (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v110 - 8) + 16))(v106, v107, v110);
          swift_storeEnumTagMultiPayload(v106, v108, 0);
        }
        a1[*(int *)(v104 + 64)] = *((_BYTE *)a2 + *(int *)(v104 + 64));
        swift_storeEnumTagMultiPayload(a1, a3, 38);
        break;
      case 0x27u:
        v111 = *a2;
        *(_QWORD *)a1 = *a2;
        swift_bridgeObjectRetain(v111);
        v112 = *(int *)(sub_10001A630(&qword_100846670) + 48);
        v113 = &a1[v112];
        v114 = (char *)a2 + v112;
        v115 = type metadata accessor for Date(0);
        v116 = *(_QWORD *)(v115 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115))
        {
          v117 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v116 + 16))(v113, v114, v115);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v113, 0, 1, v115);
        }
        swift_storeEnumTagMultiPayload(a1, a3, 39);
        break;
      case 0x28u:
        v118 = *a2;
        v119 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v119;
        v120 = v118;
        v121 = v119;
        v122 = *(int *)(sub_10001A630(&qword_100846668) + 64);
        v123 = &a1[v122];
        v124 = (char *)a2 + v122;
        v125 = type metadata accessor for Date(0);
        v126 = *(_QWORD *)(v125 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v126 + 48))(v124, 1, v125))
        {
          v127 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v126 + 16))(v123, v124, v125);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v126 + 56))(v123, 0, 1, v125);
        }
        swift_storeEnumTagMultiPayload(a1, a3, 40);
        break;
      case 0x29u:
        v128 = *a2;
        *(_QWORD *)a1 = *a2;
        swift_bridgeObjectRetain(v128);
        v129 = *(int *)(sub_10001A630(&qword_100846660) + 48);
        v130 = &a1[v129];
        v131 = (char *)a2 + v129;
        v132 = type metadata accessor for Date(0);
        v133 = *(_QWORD *)(v132 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v133 + 48))(v131, 1, v132))
        {
          v134 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v133 + 16))(v130, v131, v132);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v133 + 56))(v130, 0, 1, v132);
        }
        swift_storeEnumTagMultiPayload(a1, a3, 41);
        break;
      case 0x2Au:
        v135 = *a2;
        *(_QWORD *)a1 = *a2;
        swift_bridgeObjectRetain(v135);
        swift_storeEnumTagMultiPayload(a1, a3, 42);
        break;
      case 0x2Cu:
        v181 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v181;
        a1[16] = *((_BYTE *)a2 + 16);
        swift_bridgeObjectRetain(v181);
        swift_storeEnumTagMultiPayload(a1, a3, 44);
        break;
      case 0x2Du:
        v136 = *a2;
        *(_QWORD *)a1 = *a2;
        swift_bridgeObjectRetain(v136);
        swift_storeEnumTagMultiPayload(a1, a3, 45);
        break;
      case 0x2Eu:
        v137 = type metadata accessor for Date(0);
        v138 = *(_QWORD *)(v137 - 8);
        if ((*(unsigned int (**)(char **, uint64_t, uint64_t))(v138 + 48))(a2, 1, v137))
        {
          v139 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char **, uint64_t))(v138 + 16))(a1, a2, v137);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v138 + 56))(a1, 0, 1, v137);
        }
        swift_storeEnumTagMultiPayload(a1, a3, 46);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_100344F98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(const void *, uint64_t, uint64_t);
  uint64_t v30;
  void *v31;
  id v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  id v78;
  void *v79;
  void *v80;
  id v81;
  void *v82;
  id v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  const void *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int (*v92)(const void *, uint64_t, uint64_t);
  uint64_t v93;
  void *v94;
  void *v95;
  id v96;
  void *v97;
  id v98;
  void *v99;
  id v100;
  void *v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  void *v112;
  const void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  void *v118;
  id v119;
  id v120;
  uint64_t v121;
  void *v122;
  const void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  void *v129;
  const void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  id v140;
  void *v141;
  id v142;
  void *v143;
  id v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  id v153;
  uint64_t v154;
  void *v155;
  const void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  void (*v165)(uint64_t, uint64_t, uint64_t);
  uint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  const void *v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int (*v174)(const void *, uint64_t, uint64_t);
  uint64_t v175;
  void *v176;
  id v177;
  void *v178;
  id v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  const void *v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  const void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  const void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;

  if (a1 != a2)
  {
    sub_10001C744(a1, _s10PredicatesOMa);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
        swift_bridgeObjectRetain(v6);
        v7 = a1;
        v8 = a3;
        v9 = 0;
        goto LABEL_99;
      case 1u:
        v10 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
        v11 = v10;
        v7 = a1;
        v8 = a3;
        v9 = 1;
        goto LABEL_99;
      case 2u:
        v12 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
        v13 = v12;
        v7 = a1;
        v8 = a3;
        v9 = 2;
        goto LABEL_99;
      case 3u:
        v14 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v14);
        v15 = sub_10001A630(&qword_1008466D0);
        v16 = *(int *)(v15 + 48);
        v17 = (uint64_t *)(a1 + v16);
        v18 = (uint64_t *)(a2 + v16);
        v19 = _s10PredicatesO19CompletionPredicateOMa(0);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18, v19);
        if (EnumCaseMultiPayload == 2)
        {
          v194 = *v18;
          *v17 = *v18;
          swift_bridgeObjectRetain(v194);
          swift_storeEnumTagMultiPayload(v17, v19, 2);
        }
        else if (EnumCaseMultiPayload == 1)
        {
          v195 = type metadata accessor for Date(0);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v195 - 8) + 16))(v17, v18, v195);
          swift_storeEnumTagMultiPayload(v17, v19, 1);
        }
        else if (EnumCaseMultiPayload)
        {
          memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
        }
        else
        {
          v21 = type metadata accessor for Date(0);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v17, v18, v21);
          swift_storeEnumTagMultiPayload(v17, v19, 0);
        }
        *(_BYTE *)(a1 + *(int *)(v15 + 64)) = *(_BYTE *)(a2 + *(int *)(v15 + 64));
        v7 = a1;
        v8 = a3;
        v9 = 3;
        goto LABEL_99;
      case 4u:
        v22 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v22);
        v23 = sub_10001A630(&qword_1008466C8);
        v24 = *(int *)(v23 + 48);
        v25 = (void *)(a1 + v24);
        v26 = (const void *)(a2 + v24);
        v27 = type metadata accessor for Date(0);
        v28 = *(_QWORD *)(v27 - 8);
        v29 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
        if (v29(v26, 1, v27))
        {
          v30 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v25, v26, v27);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
        }
        v181 = *(int *)(v23 + 64);
        v182 = (void *)(a1 + v181);
        v183 = (const void *)(a2 + v181);
        if (v29(v183, 1, v27))
        {
          v184 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v182, v183, *(_QWORD *)(*(_QWORD *)(v184 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v182, v183, v27);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v182, 0, 1, v27);
        }
        v7 = a1;
        v8 = a3;
        v9 = 4;
        goto LABEL_99;
      case 5u:
        v31 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        v32 = v31;
        v7 = a1;
        v8 = a3;
        v9 = 5;
        goto LABEL_99;
      case 6u:
        v139 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v140 = v139;
        v7 = a1;
        v8 = a3;
        v9 = 6;
        goto LABEL_99;
      case 7u:
        v141 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v142 = v141;
        v7 = a1;
        v8 = a3;
        v9 = 7;
        goto LABEL_99;
      case 8u:
        v33 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v34 = v33;
        v35 = *(int *)(sub_10001A630(&qword_100846690) + 48);
        v36 = a1 + v35;
        v37 = a2 + v35;
        v38 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
        v7 = a1;
        v8 = a3;
        v9 = 8;
        goto LABEL_99;
      case 9u:
        v143 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v144 = v143;
        v145 = sub_10001A630(&qword_1008466C0);
        v146 = *(int *)(v145 + 48);
        v147 = a1 + v146;
        v148 = a2 + v146;
        v149 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v149 - 8) + 16))(v147, v148, v149);
        *(_BYTE *)(a1 + *(int *)(v145 + 64)) = *(_BYTE *)(a2 + *(int *)(v145 + 64));
        v7 = a1;
        v8 = a3;
        v9 = 9;
        goto LABEL_99;
      case 0xAu:
        v39 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v39);
        v40 = *(int *)(sub_10001A630(&qword_1008466B8) + 48);
        v41 = a1 + v40;
        v42 = a2 + v40;
        v43 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
        v7 = a1;
        v8 = a3;
        v9 = 10;
        goto LABEL_99;
      case 0xBu:
        v44 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(a1, a2, v44);
        v7 = a1;
        v8 = a3;
        v9 = 11;
        goto LABEL_99;
      case 0xCu:
        v45 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(a1, a2, v45);
        v7 = a1;
        v8 = a3;
        v9 = 12;
        goto LABEL_99;
      case 0xDu:
        v46 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(a1, a2, v46);
        v47 = *(int *)(sub_10001A630(&qword_1008466B0) + 48);
        v48 = a1 + v47;
        v49 = a2 + v47;
        v50 = type metadata accessor for Date(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
        v7 = a1;
        v8 = a3;
        v9 = 13;
        goto LABEL_99;
      case 0xEu:
        v150 = type metadata accessor for Date(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v150 - 8) + 16))(a1, a2, v150);
        v7 = a1;
        v8 = a3;
        v9 = 14;
        goto LABEL_99;
      case 0xFu:
        v151 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v151 - 8) + 16))(a1, a2, v151);
        v7 = a1;
        v8 = a3;
        v9 = 15;
        goto LABEL_99;
      case 0x10u:
        v152 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
        v153 = v152;
        v154 = *(int *)(sub_10001A630(&qword_1008466A8) + 64);
        v155 = (void *)(a1 + v154);
        v156 = (const void *)(a2 + v154);
        v157 = type metadata accessor for Date(0);
        v158 = *(_QWORD *)(v157 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v158 + 48))(v156, 1, v157))
        {
          v159 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v158 + 16))(v155, v156, v157);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v158 + 56))(v155, 0, 1, v157);
        }
        v7 = a1;
        v8 = a3;
        v9 = 16;
        goto LABEL_99;
      case 0x11u:
        v160 = type metadata accessor for Date(0);
        v161 = *(_QWORD *)(v160 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v161 + 48))(a2, 1, v160))
        {
          v162 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v161 + 16))(a1, a2, v160);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v161 + 56))(a1, 0, 1, v160);
        }
        v189 = sub_10001A630(&qword_1008466A0);
        *(_BYTE *)(a1 + *(int *)(v189 + 48)) = *(_BYTE *)(a2 + *(int *)(v189 + 48));
        v7 = a1;
        v8 = a3;
        v9 = 17;
        goto LABEL_99;
      case 0x12u:
        v51 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v52 = *(void **)(a2 + 8);
        *(_QWORD *)(a1 + 8) = v52;
        v53 = v51;
        v54 = v52;
        v55 = *(int *)(sub_10001A630(&qword_100846698) + 64);
        v56 = a1 + v55;
        v57 = a2 + v55;
        v58 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v56, v57, v58);
        v7 = a1;
        v8 = a3;
        v9 = 18;
        goto LABEL_99;
      case 0x13u:
        v59 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v59);
        v60 = *(int *)(sub_10001A630(&qword_10083E368) + 48);
        v61 = a1 + v60;
        v62 = a2 + v60;
        v63 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v61, v62, v63);
        v7 = a1;
        v8 = a3;
        v9 = 19;
        goto LABEL_99;
      case 0x14u:
        v163 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v163);
        v7 = a1;
        v8 = a3;
        v9 = 20;
        goto LABEL_99;
      case 0x15u:
        v64 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v64);
        v65 = *(int *)(sub_10001A630(&qword_100842300) + 48);
        v66 = a1 + v65;
        v67 = a2 + v65;
        v68 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v66, v67, v68);
        v7 = a1;
        v8 = a3;
        v9 = 21;
        goto LABEL_99;
      case 0x16u:
        v69 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v69);
        v7 = a1;
        v8 = a3;
        v9 = 22;
        goto LABEL_99;
      case 0x17u:
        v70 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v71 = v70;
        v72 = *(int *)(sub_10001A630(&qword_100846690) + 48);
        v73 = a1 + v72;
        v74 = a2 + v72;
        v75 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 16))(v73, v74, v75);
        v7 = a1;
        v8 = a3;
        v9 = 23;
        goto LABEL_99;
      case 0x18u:
        v76 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v77 = *(void **)(a2 + 8);
        *(_QWORD *)(a1 + 8) = v77;
        swift_bridgeObjectRetain(v76);
        v78 = v77;
        v7 = a1;
        v8 = a3;
        v9 = 24;
        goto LABEL_99;
      case 0x19u:
        v79 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v80 = *(void **)(a2 + 8);
        *(_QWORD *)(a1 + 8) = v80;
        swift_bridgeObjectRetain(v79);
        v81 = v80;
        v7 = a1;
        v8 = a3;
        v9 = 25;
        goto LABEL_99;
      case 0x1Au:
        v82 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v83 = v82;
        v7 = a1;
        v8 = a3;
        v9 = 26;
        goto LABEL_99;
      case 0x1Bu:
        v164 = type metadata accessor for Date(0);
        v165 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v164 - 8) + 16);
        v165(a1, a2, v164);
        v166 = sub_10001A630(&qword_100846688);
        v165(a1 + *(int *)(v166 + 48), a2 + *(int *)(v166 + 48), v164);
        v7 = a1;
        v8 = a3;
        v9 = 27;
        goto LABEL_99;
      case 0x1Cu:
        v84 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v84);
        v7 = a1;
        v8 = a3;
        v9 = 28;
        goto LABEL_99;
      case 0x1Du:
        v85 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v85);
        v86 = sub_10001A630(&qword_100846680);
        v87 = *(int *)(v86 + 48);
        v88 = (void *)(a1 + v87);
        v89 = (const void *)(a2 + v87);
        v90 = type metadata accessor for Date(0);
        v91 = *(_QWORD *)(v90 - 8);
        v92 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v91 + 48);
        if (v92(v89, 1, v90))
        {
          v93 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v91 + 16))(v88, v89, v90);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v88, 0, 1, v90);
        }
        v185 = *(int *)(v86 + 64);
        v186 = (void *)(a1 + v185);
        v187 = (const void *)(a2 + v185);
        if (v92(v187, 1, v90))
        {
          v188 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v186, v187, *(_QWORD *)(*(_QWORD *)(v188 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v91 + 16))(v186, v187, v90);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v186, 0, 1, v90);
        }
        v7 = a1;
        v8 = a3;
        v9 = 29;
        goto LABEL_99;
      case 0x1Eu:
        v167 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v167);
        v168 = sub_10001A630(&qword_100846680);
        v169 = *(int *)(v168 + 48);
        v170 = (void *)(a1 + v169);
        v171 = (const void *)(a2 + v169);
        v172 = type metadata accessor for Date(0);
        v173 = *(_QWORD *)(v172 - 8);
        v174 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v173 + 48);
        if (v174(v171, 1, v172))
        {
          v175 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v175 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v173 + 16))(v170, v171, v172);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v173 + 56))(v170, 0, 1, v172);
        }
        v190 = *(int *)(v168 + 64);
        v191 = (void *)(a1 + v190);
        v192 = (const void *)(a2 + v190);
        if (v174(v192, 1, v172))
        {
          v193 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v191, v192, *(_QWORD *)(*(_QWORD *)(v193 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v173 + 16))(v191, v192, v172);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v173 + 56))(v191, 0, 1, v172);
        }
        v7 = a1;
        v8 = a3;
        v9 = 30;
        goto LABEL_99;
      case 0x20u:
        v94 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v94);
        v7 = a1;
        v8 = a3;
        v9 = 32;
        goto LABEL_99;
      case 0x21u:
        v95 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
        v96 = v95;
        v7 = a1;
        v8 = a3;
        v9 = 33;
        goto LABEL_99;
      case 0x22u:
        v97 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v98 = v97;
        v7 = a1;
        v8 = a3;
        v9 = 34;
        goto LABEL_99;
      case 0x23u:
        v176 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v177 = v176;
        v7 = a1;
        v8 = a3;
        v9 = 35;
        goto LABEL_99;
      case 0x24u:
        v178 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v179 = v178;
        v7 = a1;
        v8 = a3;
        v9 = 36;
        goto LABEL_99;
      case 0x25u:
        v99 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v100 = v99;
        v7 = a1;
        v8 = a3;
        v9 = 37;
        goto LABEL_99;
      case 0x26u:
        v101 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v102 = v101;
        v103 = sub_10001A630(&qword_10083AEB0);
        v104 = *(int *)(v103 + 48);
        v105 = (uint64_t *)(a1 + v104);
        v106 = (uint64_t *)(a2 + v104);
        v107 = _s10PredicatesO19CompletionPredicateOMa(0);
        v108 = swift_getEnumCaseMultiPayload(v106, v107);
        if (v108 == 2)
        {
          v196 = *v106;
          *v105 = *v106;
          swift_bridgeObjectRetain(v196);
          swift_storeEnumTagMultiPayload(v105, v107, 2);
        }
        else if (v108 == 1)
        {
          v197 = type metadata accessor for Date(0);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v197 - 8) + 16))(v105, v106, v197);
          swift_storeEnumTagMultiPayload(v105, v107, 1);
        }
        else if (v108)
        {
          memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
        }
        else
        {
          v109 = type metadata accessor for Date(0);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v109 - 8) + 16))(v105, v106, v109);
          swift_storeEnumTagMultiPayload(v105, v107, 0);
        }
        *(_BYTE *)(a1 + *(int *)(v103 + 64)) = *(_BYTE *)(a2 + *(int *)(v103 + 64));
        v7 = a1;
        v8 = a3;
        v9 = 38;
        goto LABEL_99;
      case 0x27u:
        v110 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v110);
        v111 = *(int *)(sub_10001A630(&qword_100846670) + 48);
        v112 = (void *)(a1 + v111);
        v113 = (const void *)(a2 + v111);
        v114 = type metadata accessor for Date(0);
        v115 = *(_QWORD *)(v114 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v115 + 48))(v113, 1, v114))
        {
          v116 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v115 + 16))(v112, v113, v114);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v115 + 56))(v112, 0, 1, v114);
        }
        v7 = a1;
        v8 = a3;
        v9 = 39;
        goto LABEL_99;
      case 0x28u:
        v117 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v118 = *(void **)(a2 + 8);
        *(_QWORD *)(a1 + 8) = v118;
        v119 = v117;
        v120 = v118;
        v121 = *(int *)(sub_10001A630(&qword_100846668) + 64);
        v122 = (void *)(a1 + v121);
        v123 = (const void *)(a2 + v121);
        v124 = type metadata accessor for Date(0);
        v125 = *(_QWORD *)(v124 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v125 + 48))(v123, 1, v124))
        {
          v126 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v125 + 16))(v122, v123, v124);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v122, 0, 1, v124);
        }
        v7 = a1;
        v8 = a3;
        v9 = 40;
        goto LABEL_99;
      case 0x29u:
        v127 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v127);
        v128 = *(int *)(sub_10001A630(&qword_100846660) + 48);
        v129 = (void *)(a1 + v128);
        v130 = (const void *)(a2 + v128);
        v131 = type metadata accessor for Date(0);
        v132 = *(_QWORD *)(v131 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v132 + 48))(v130, 1, v131))
        {
          v133 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v129, v130, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v132 + 16))(v129, v130, v131);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v132 + 56))(v129, 0, 1, v131);
        }
        v7 = a1;
        v8 = a3;
        v9 = 41;
        goto LABEL_99;
      case 0x2Au:
        v134 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v134);
        v7 = a1;
        v8 = a3;
        v9 = 42;
        goto LABEL_99;
      case 0x2Cu:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v180 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 8) = v180;
        *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
        swift_bridgeObjectRetain(v180);
        v7 = a1;
        v8 = a3;
        v9 = 44;
        goto LABEL_99;
      case 0x2Du:
        v135 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v135);
        v7 = a1;
        v8 = a3;
        v9 = 45;
        goto LABEL_99;
      case 0x2Eu:
        v136 = type metadata accessor for Date(0);
        v137 = *(_QWORD *)(v136 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v137 + 48))(a2, 1, v136))
        {
          v138 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v137 + 16))(a1, a2, v136);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v137 + 56))(a1, 0, 1, v136);
        }
        v7 = a1;
        v8 = a3;
        v9 = 46;
LABEL_99:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

char *sub_10034602C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int (*v75)(char *, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(char *, char *, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int (*v110)(char *, uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 3u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v6 = sub_10001A630(&qword_1008466D0);
      v7 = *(int *)(v6 + 48);
      v8 = &a1[v7];
      v9 = &a2[v7];
      v10 = _s10PredicatesO19CompletionPredicateOMa(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v10);
      if (EnumCaseMultiPayload == 1)
      {
        v127 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v127 - 8) + 32))(v8, v9, v127);
        swift_storeEnumTagMultiPayload(v8, v10, 1);
      }
      else if (EnumCaseMultiPayload)
      {
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        v12 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v8, v9, v12);
        swift_storeEnumTagMultiPayload(v8, v10, 0);
      }
      a1[*(int *)(v6 + 64)] = a2[*(int *)(v6 + 64)];
      v25 = a1;
      v26 = a3;
      v27 = 3;
      goto LABEL_73;
    case 4u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v13 = sub_10001A630(&qword_1008466C8);
      v14 = *(int *)(v13 + 48);
      v15 = &a1[v14];
      v16 = &a2[v14];
      v17 = type metadata accessor for Date(0);
      v18 = *(_QWORD *)(v17 - 8);
      v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
      if (v19(v16, 1, v17))
      {
        v20 = sub_10001A630((uint64_t *)&unk_1008380D0);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      v118 = *(int *)(v13 + 64);
      v119 = &a1[v118];
      v120 = &a2[v118];
      if (v19(v120, 1, v17))
      {
        v121 = sub_10001A630((uint64_t *)&unk_1008380D0);
        memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v119, v120, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v119, 0, 1, v17);
      }
      v25 = a1;
      v26 = a3;
      v27 = 4;
      goto LABEL_73;
    case 8u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v21 = *(int *)(sub_10001A630(&qword_100846690) + 48);
      v22 = &a1[v21];
      v23 = &a2[v21];
      v24 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
      v25 = a1;
      v26 = a3;
      v27 = 8;
      goto LABEL_73;
    case 9u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v28 = sub_10001A630(&qword_1008466C0);
      v29 = *(int *)(v28 + 48);
      v30 = &a1[v29];
      v31 = &a2[v29];
      v32 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v30, v31, v32);
      a1[*(int *)(v28 + 64)] = a2[*(int *)(v28 + 64)];
      v25 = a1;
      v26 = a3;
      v27 = 9;
      goto LABEL_73;
    case 0xAu:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v33 = *(int *)(sub_10001A630(&qword_1008466B8) + 48);
      v34 = &a1[v33];
      v35 = &a2[v33];
      v36 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
      v25 = a1;
      v26 = a3;
      v27 = 10;
      goto LABEL_73;
    case 0xBu:
      v37 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(a1, a2, v37);
      v25 = a1;
      v26 = a3;
      v27 = 11;
      goto LABEL_73;
    case 0xCu:
      v38 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(a1, a2, v38);
      v25 = a1;
      v26 = a3;
      v27 = 12;
      goto LABEL_73;
    case 0xDu:
      v39 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(a1, a2, v39);
      v40 = *(int *)(sub_10001A630(&qword_1008466B0) + 48);
      v41 = &a1[v40];
      v42 = &a2[v40];
      v43 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v41, v42, v43);
      v25 = a1;
      v26 = a3;
      v27 = 13;
      goto LABEL_73;
    case 0xEu:
      v99 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v99 - 8) + 32))(a1, a2, v99);
      v25 = a1;
      v26 = a3;
      v27 = 14;
      goto LABEL_73;
    case 0xFu:
      v100 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 32))(a1, a2, v100);
      v25 = a1;
      v26 = a3;
      v27 = 15;
      goto LABEL_73;
    case 0x10u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      v44 = *(int *)(sub_10001A630(&qword_1008466A8) + 64);
      v45 = &a1[v44];
      v46 = &a2[v44];
      v47 = type metadata accessor for Date(0);
      v48 = *(_QWORD *)(v47 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
      {
        v49 = sub_10001A630((uint64_t *)&unk_1008380D0);
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v45, v46, v47);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      }
      v25 = a1;
      v26 = a3;
      v27 = 16;
      goto LABEL_73;
    case 0x11u:
      v50 = type metadata accessor for Date(0);
      v51 = *(_QWORD *)(v50 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(a2, 1, v50))
      {
        v52 = sub_10001A630((uint64_t *)&unk_1008380D0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v51 + 32))(a1, a2, v50);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(a1, 0, 1, v50);
      }
      v122 = sub_10001A630(&qword_1008466A0);
      a1[*(int *)(v122 + 48)] = a2[*(int *)(v122 + 48)];
      v25 = a1;
      v26 = a3;
      v27 = 17;
      goto LABEL_73;
    case 0x12u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v53 = *(int *)(sub_10001A630(&qword_100846698) + 64);
      v54 = &a1[v53];
      v55 = &a2[v53];
      v56 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v54, v55, v56);
      v25 = a1;
      v26 = a3;
      v27 = 18;
      goto LABEL_73;
    case 0x13u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v57 = *(int *)(sub_10001A630(&qword_10083E368) + 48);
      v58 = &a1[v57];
      v59 = &a2[v57];
      v60 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 32))(v58, v59, v60);
      v25 = a1;
      v26 = a3;
      v27 = 19;
      goto LABEL_73;
    case 0x15u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v61 = *(int *)(sub_10001A630(&qword_100842300) + 48);
      v62 = &a1[v61];
      v63 = &a2[v61];
      v64 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 32))(v62, v63, v64);
      v25 = a1;
      v26 = a3;
      v27 = 21;
      goto LABEL_73;
    case 0x17u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v65 = *(int *)(sub_10001A630(&qword_100846690) + 48);
      v66 = &a1[v65];
      v67 = &a2[v65];
      v68 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 32))(v66, v67, v68);
      v25 = a1;
      v26 = a3;
      v27 = 23;
      goto LABEL_73;
    case 0x1Bu:
      v101 = type metadata accessor for Date(0);
      v102 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 32);
      v102(a1, a2, v101);
      v103 = sub_10001A630(&qword_100846688);
      v102(&a1[*(int *)(v103 + 48)], &a2[*(int *)(v103 + 48)], v101);
      v25 = a1;
      v26 = a3;
      v27 = 27;
      goto LABEL_73;
    case 0x1Du:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v104 = sub_10001A630(&qword_100846680);
      v105 = *(int *)(v104 + 48);
      v106 = &a1[v105];
      v107 = &a2[v105];
      v108 = type metadata accessor for Date(0);
      v109 = *(_QWORD *)(v108 - 8);
      v110 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v109 + 48);
      if (v110(v107, 1, v108))
      {
        v111 = sub_10001A630((uint64_t *)&unk_1008380D0);
        memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v106, v107, v108);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v109 + 56))(v106, 0, 1, v108);
      }
      v129 = *(int *)(v104 + 64);
      v130 = &a1[v129];
      v131 = &a2[v129];
      if (v110(v131, 1, v108))
      {
        v132 = sub_10001A630((uint64_t *)&unk_1008380D0);
        memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v130, v131, v108);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v109 + 56))(v130, 0, 1, v108);
      }
      v25 = a1;
      v26 = a3;
      v27 = 29;
      goto LABEL_73;
    case 0x1Eu:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v69 = sub_10001A630(&qword_100846680);
      v70 = *(int *)(v69 + 48);
      v71 = &a1[v70];
      v72 = &a2[v70];
      v73 = type metadata accessor for Date(0);
      v74 = *(_QWORD *)(v73 - 8);
      v75 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48);
      if (v75(v72, 1, v73))
      {
        v76 = sub_10001A630((uint64_t *)&unk_1008380D0);
        memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v71, v72, v73);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
      }
      v123 = *(int *)(v69 + 64);
      v124 = &a1[v123];
      v125 = &a2[v123];
      if (v75(v125, 1, v73))
      {
        v126 = sub_10001A630((uint64_t *)&unk_1008380D0);
        memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v124, v125, v73);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v124, 0, 1, v73);
      }
      v25 = a1;
      v26 = a3;
      v27 = 30;
      goto LABEL_73;
    case 0x26u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v77 = sub_10001A630(&qword_10083AEB0);
      v78 = *(int *)(v77 + 48);
      v79 = &a1[v78];
      v80 = &a2[v78];
      v81 = _s10PredicatesO19CompletionPredicateOMa(0);
      v82 = swift_getEnumCaseMultiPayload(v80, v81);
      if (v82 == 1)
      {
        v128 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v128 - 8) + 32))(v79, v80, v128);
        swift_storeEnumTagMultiPayload(v79, v81, 1);
      }
      else if (v82)
      {
        memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
      }
      else
      {
        v83 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 32))(v79, v80, v83);
        swift_storeEnumTagMultiPayload(v79, v81, 0);
      }
      a1[*(int *)(v77 + 64)] = a2[*(int *)(v77 + 64)];
      v25 = a1;
      v26 = a3;
      v27 = 38;
      goto LABEL_73;
    case 0x27u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v112 = *(int *)(sub_10001A630(&qword_100846670) + 48);
      v113 = &a1[v112];
      v114 = &a2[v112];
      v115 = type metadata accessor for Date(0);
      v116 = *(_QWORD *)(v115 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115))
      {
        v117 = sub_10001A630((uint64_t *)&unk_1008380D0);
        memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v116 + 32))(v113, v114, v115);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v113, 0, 1, v115);
      }
      v25 = a1;
      v26 = a3;
      v27 = 39;
      goto LABEL_73;
    case 0x28u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v84 = *(int *)(sub_10001A630(&qword_100846668) + 64);
      v85 = &a1[v84];
      v86 = &a2[v84];
      v87 = type metadata accessor for Date(0);
      v88 = *(_QWORD *)(v87 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87))
      {
        v89 = sub_10001A630((uint64_t *)&unk_1008380D0);
        memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v85, v86, v87);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v85, 0, 1, v87);
      }
      v25 = a1;
      v26 = a3;
      v27 = 40;
      goto LABEL_73;
    case 0x29u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v90 = *(int *)(sub_10001A630(&qword_100846660) + 48);
      v91 = &a1[v90];
      v92 = &a2[v90];
      v93 = type metadata accessor for Date(0);
      v94 = *(_QWORD *)(v93 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v92, 1, v93))
      {
        v95 = sub_10001A630((uint64_t *)&unk_1008380D0);
        memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v91, v92, v93);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v91, 0, 1, v93);
      }
      v25 = a1;
      v26 = a3;
      v27 = 41;
      goto LABEL_73;
    case 0x2Eu:
      v96 = type metadata accessor for Date(0);
      v97 = *(_QWORD *)(v96 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(a2, 1, v96))
      {
        v98 = sub_10001A630((uint64_t *)&unk_1008380D0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v97 + 32))(a1, a2, v96);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(a1, 0, 1, v96);
      }
      v25 = a1;
      v26 = a3;
      v27 = 46;
LABEL_73:
      swift_storeEnumTagMultiPayload(v25, v26, v27);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *sub_100346D5C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int (*v75)(char *, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(char *, char *, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int (*v110)(char *, uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;

  if (a1 != a2)
  {
    sub_10001C744((uint64_t)a1, _s10PredicatesOMa);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 3u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v6 = sub_10001A630(&qword_1008466D0);
        v7 = *(int *)(v6 + 48);
        v8 = &a1[v7];
        v9 = &a2[v7];
        v10 = _s10PredicatesO19CompletionPredicateOMa(0);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v10);
        if (EnumCaseMultiPayload == 1)
        {
          v127 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v127 - 8) + 32))(v8, v9, v127);
          swift_storeEnumTagMultiPayload(v8, v10, 1);
        }
        else if (EnumCaseMultiPayload)
        {
          memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
        }
        else
        {
          v12 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v8, v9, v12);
          swift_storeEnumTagMultiPayload(v8, v10, 0);
        }
        a1[*(int *)(v6 + 64)] = a2[*(int *)(v6 + 64)];
        v25 = a1;
        v26 = a3;
        v27 = 3;
        goto LABEL_74;
      case 4u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v13 = sub_10001A630(&qword_1008466C8);
        v14 = *(int *)(v13 + 48);
        v15 = &a1[v14];
        v16 = &a2[v14];
        v17 = type metadata accessor for Date(0);
        v18 = *(_QWORD *)(v17 - 8);
        v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
        if (v19(v16, 1, v17))
        {
          v20 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
        }
        v118 = *(int *)(v13 + 64);
        v119 = &a1[v118];
        v120 = &a2[v118];
        if (v19(v120, 1, v17))
        {
          v121 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v119, v120, v17);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v119, 0, 1, v17);
        }
        v25 = a1;
        v26 = a3;
        v27 = 4;
        goto LABEL_74;
      case 8u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v21 = *(int *)(sub_10001A630(&qword_100846690) + 48);
        v22 = &a1[v21];
        v23 = &a2[v21];
        v24 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
        v25 = a1;
        v26 = a3;
        v27 = 8;
        goto LABEL_74;
      case 9u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v28 = sub_10001A630(&qword_1008466C0);
        v29 = *(int *)(v28 + 48);
        v30 = &a1[v29];
        v31 = &a2[v29];
        v32 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v30, v31, v32);
        a1[*(int *)(v28 + 64)] = a2[*(int *)(v28 + 64)];
        v25 = a1;
        v26 = a3;
        v27 = 9;
        goto LABEL_74;
      case 0xAu:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v33 = *(int *)(sub_10001A630(&qword_1008466B8) + 48);
        v34 = &a1[v33];
        v35 = &a2[v33];
        v36 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
        v25 = a1;
        v26 = a3;
        v27 = 10;
        goto LABEL_74;
      case 0xBu:
        v37 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(a1, a2, v37);
        v25 = a1;
        v26 = a3;
        v27 = 11;
        goto LABEL_74;
      case 0xCu:
        v38 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(a1, a2, v38);
        v25 = a1;
        v26 = a3;
        v27 = 12;
        goto LABEL_74;
      case 0xDu:
        v39 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(a1, a2, v39);
        v40 = *(int *)(sub_10001A630(&qword_1008466B0) + 48);
        v41 = &a1[v40];
        v42 = &a2[v40];
        v43 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v41, v42, v43);
        v25 = a1;
        v26 = a3;
        v27 = 13;
        goto LABEL_74;
      case 0xEu:
        v99 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v99 - 8) + 32))(a1, a2, v99);
        v25 = a1;
        v26 = a3;
        v27 = 14;
        goto LABEL_74;
      case 0xFu:
        v100 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 32))(a1, a2, v100);
        v25 = a1;
        v26 = a3;
        v27 = 15;
        goto LABEL_74;
      case 0x10u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = a2[8];
        v44 = *(int *)(sub_10001A630(&qword_1008466A8) + 64);
        v45 = &a1[v44];
        v46 = &a2[v44];
        v47 = type metadata accessor for Date(0);
        v48 = *(_QWORD *)(v47 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
        {
          v49 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v45, v46, v47);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
        }
        v25 = a1;
        v26 = a3;
        v27 = 16;
        goto LABEL_74;
      case 0x11u:
        v50 = type metadata accessor for Date(0);
        v51 = *(_QWORD *)(v50 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(a2, 1, v50))
        {
          v52 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v51 + 32))(a1, a2, v50);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(a1, 0, 1, v50);
        }
        v122 = sub_10001A630(&qword_1008466A0);
        a1[*(int *)(v122 + 48)] = a2[*(int *)(v122 + 48)];
        v25 = a1;
        v26 = a3;
        v27 = 17;
        goto LABEL_74;
      case 0x12u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v53 = *(int *)(sub_10001A630(&qword_100846698) + 64);
        v54 = &a1[v53];
        v55 = &a2[v53];
        v56 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v54, v55, v56);
        v25 = a1;
        v26 = a3;
        v27 = 18;
        goto LABEL_74;
      case 0x13u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v57 = *(int *)(sub_10001A630(&qword_10083E368) + 48);
        v58 = &a1[v57];
        v59 = &a2[v57];
        v60 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 32))(v58, v59, v60);
        v25 = a1;
        v26 = a3;
        v27 = 19;
        goto LABEL_74;
      case 0x15u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v61 = *(int *)(sub_10001A630(&qword_100842300) + 48);
        v62 = &a1[v61];
        v63 = &a2[v61];
        v64 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 32))(v62, v63, v64);
        v25 = a1;
        v26 = a3;
        v27 = 21;
        goto LABEL_74;
      case 0x17u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v65 = *(int *)(sub_10001A630(&qword_100846690) + 48);
        v66 = &a1[v65];
        v67 = &a2[v65];
        v68 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 32))(v66, v67, v68);
        v25 = a1;
        v26 = a3;
        v27 = 23;
        goto LABEL_74;
      case 0x1Bu:
        v101 = type metadata accessor for Date(0);
        v102 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 32);
        v102(a1, a2, v101);
        v103 = sub_10001A630(&qword_100846688);
        v102(&a1[*(int *)(v103 + 48)], &a2[*(int *)(v103 + 48)], v101);
        v25 = a1;
        v26 = a3;
        v27 = 27;
        goto LABEL_74;
      case 0x1Du:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v104 = sub_10001A630(&qword_100846680);
        v105 = *(int *)(v104 + 48);
        v106 = &a1[v105];
        v107 = &a2[v105];
        v108 = type metadata accessor for Date(0);
        v109 = *(_QWORD *)(v108 - 8);
        v110 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v109 + 48);
        if (v110(v107, 1, v108))
        {
          v111 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v106, v107, v108);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v109 + 56))(v106, 0, 1, v108);
        }
        v129 = *(int *)(v104 + 64);
        v130 = &a1[v129];
        v131 = &a2[v129];
        if (v110(v131, 1, v108))
        {
          v132 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v130, v131, v108);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v109 + 56))(v130, 0, 1, v108);
        }
        v25 = a1;
        v26 = a3;
        v27 = 29;
        goto LABEL_74;
      case 0x1Eu:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v69 = sub_10001A630(&qword_100846680);
        v70 = *(int *)(v69 + 48);
        v71 = &a1[v70];
        v72 = &a2[v70];
        v73 = type metadata accessor for Date(0);
        v74 = *(_QWORD *)(v73 - 8);
        v75 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48);
        if (v75(v72, 1, v73))
        {
          v76 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v71, v72, v73);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
        }
        v123 = *(int *)(v69 + 64);
        v124 = &a1[v123];
        v125 = &a2[v123];
        if (v75(v125, 1, v73))
        {
          v126 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v124, v125, v73);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v124, 0, 1, v73);
        }
        v25 = a1;
        v26 = a3;
        v27 = 30;
        goto LABEL_74;
      case 0x26u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v77 = sub_10001A630(&qword_10083AEB0);
        v78 = *(int *)(v77 + 48);
        v79 = &a1[v78];
        v80 = &a2[v78];
        v81 = _s10PredicatesO19CompletionPredicateOMa(0);
        v82 = swift_getEnumCaseMultiPayload(v80, v81);
        if (v82 == 1)
        {
          v128 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v128 - 8) + 32))(v79, v80, v128);
          swift_storeEnumTagMultiPayload(v79, v81, 1);
        }
        else if (v82)
        {
          memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
        }
        else
        {
          v83 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 32))(v79, v80, v83);
          swift_storeEnumTagMultiPayload(v79, v81, 0);
        }
        a1[*(int *)(v77 + 64)] = a2[*(int *)(v77 + 64)];
        v25 = a1;
        v26 = a3;
        v27 = 38;
        goto LABEL_74;
      case 0x27u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v112 = *(int *)(sub_10001A630(&qword_100846670) + 48);
        v113 = &a1[v112];
        v114 = &a2[v112];
        v115 = type metadata accessor for Date(0);
        v116 = *(_QWORD *)(v115 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115))
        {
          v117 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v116 + 32))(v113, v114, v115);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v113, 0, 1, v115);
        }
        v25 = a1;
        v26 = a3;
        v27 = 39;
        goto LABEL_74;
      case 0x28u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v84 = *(int *)(sub_10001A630(&qword_100846668) + 64);
        v85 = &a1[v84];
        v86 = &a2[v84];
        v87 = type metadata accessor for Date(0);
        v88 = *(_QWORD *)(v87 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87))
        {
          v89 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v85, v86, v87);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v85, 0, 1, v87);
        }
        v25 = a1;
        v26 = a3;
        v27 = 40;
        goto LABEL_74;
      case 0x29u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v90 = *(int *)(sub_10001A630(&qword_100846660) + 48);
        v91 = &a1[v90];
        v92 = &a2[v90];
        v93 = type metadata accessor for Date(0);
        v94 = *(_QWORD *)(v93 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v92, 1, v93))
        {
          v95 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v91, v92, v93);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v91, 0, 1, v93);
        }
        v25 = a1;
        v26 = a3;
        v27 = 41;
        goto LABEL_74;
      case 0x2Eu:
        v96 = type metadata accessor for Date(0);
        v97 = *(_QWORD *)(v96 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(a2, 1, v96))
        {
          v98 = sub_10001A630((uint64_t *)&unk_1008380D0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v97 + 32))(a1, a2, v96);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(a1, 0, 1, v96);
        }
        v25 = a1;
        v26 = a3;
        v27 = 46;
LABEL_74:
        swift_storeEnumTagMultiPayload(v25, v26, v27);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void sub_100347AA4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE v14[32];
  _BYTE v15[32];
  _BYTE v16[32];
  _BYTE v17[32];
  _BYTE v18[32];
  _BYTE v19[32];
  _BYTE v20[32];
  _BYTE v21[32];
  _BYTE v22[32];
  _BYTE v23[32];
  _BYTE v24[32];
  _BYTE v25[32];
  _BYTE v26[32];
  _BYTE v27[32];
  _BYTE v28[32];
  _BYTE v29[32];
  _BYTE v30[32];
  _BYTE v31[32];
  _BYTE v32[32];
  _QWORD v33[48];

  v33[0] = "\t";
  v33[1] = &unk_1006B62F0;
  v33[2] = "\t";
  v2 = _s10PredicatesO19CompletionPredicateOMa(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_getTupleTypeLayout3(v32, (char *)&value witness table for Builtin.BridgeObject + 64, v4, &unk_1006B6308);
    v33[3] = v32;
    sub_1000D7B50(319);
    if (v6 <= 0x3F)
    {
      v7 = *(_QWORD *)(v5 - 8) + 64;
      swift_getTupleTypeLayout3(v31, (char *)&value witness table for Builtin.BridgeObject + 64, v7, v7);
      v33[4] = v31;
      v33[5] = &unk_1006B6320;
      v33[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v33[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v8 = type metadata accessor for REMRemindersListDataView.ShowCompleted(319);
      if (v9 <= 0x3F)
      {
        v10 = *(_QWORD *)(v8 - 8) + 64;
        swift_getTupleTypeLayout2(v30, (char *)&value witness table for Builtin.UnknownObject + 64, v10);
        v33[8] = v30;
        swift_getTupleTypeLayout3(v29, (char *)&value witness table for Builtin.UnknownObject + 64, v10, &unk_1006B6308);
        v33[9] = v29;
        swift_getTupleTypeLayout2(v28, (char *)&value witness table for Builtin.BridgeObject + 64, v10);
        v33[10] = v28;
        v33[11] = v10;
        v33[12] = v10;
        v11 = type metadata accessor for Date(319);
        if (v12 <= 0x3F)
        {
          v13 = *(_QWORD *)(v11 - 8) + 64;
          swift_getTupleTypeLayout2(v27, v10, v13);
          v33[13] = v27;
          v33[14] = v13;
          v33[15] = v10;
          swift_getTupleTypeLayout3(v26, (char *)&value witness table for Builtin.UnknownObject + 64, &unk_1006B6308, v7);
          v33[16] = v26;
          swift_getTupleTypeLayout2(v25, v7, &unk_1006B6308);
          v33[17] = v25;
          swift_getTupleTypeLayout3(v24, (char *)&value witness table for Builtin.UnknownObject + 64, (char *)&value witness table for Builtin.UnknownObject + 64, v10);
          v33[18] = v24;
          swift_getTupleTypeLayout2(v23, (char *)&value witness table for Builtin.BridgeObject + 64, v10);
          v33[19] = v23;
          v33[20] = (char *)&value witness table for Builtin.BridgeObject + 64;
          swift_getTupleTypeLayout2(v22, (char *)&value witness table for Builtin.BridgeObject + 64, v10);
          v33[21] = v22;
          v33[22] = (char *)&value witness table for Builtin.BridgeObject + 64;
          swift_getTupleTypeLayout2(v21, (char *)&value witness table for Builtin.UnknownObject + 64, v10);
          v33[23] = v21;
          v33[24] = &unk_1006B6338;
          v33[25] = &unk_1006B6338;
          v33[26] = (char *)&value witness table for Builtin.UnknownObject + 64;
          swift_getTupleTypeLayout2(v20, v13, v13);
          v33[27] = v20;
          v33[28] = (char *)&value witness table for Builtin.BridgeObject + 64;
          swift_getTupleTypeLayout3(v19, (char *)&value witness table for Builtin.BridgeObject + 64, v7, v7);
          v33[29] = v19;
          swift_getTupleTypeLayout3(v18, (char *)&value witness table for Builtin.BridgeObject + 64, v7, v7);
          v33[30] = v18;
          v33[31] = (char *)&value witness table for Builtin.Int64 + 64;
          v33[32] = (char *)&value witness table for Builtin.BridgeObject + 64;
          v33[33] = "\t";
          v33[34] = (char *)&value witness table for Builtin.UnknownObject + 64;
          v33[35] = (char *)&value witness table for Builtin.UnknownObject + 64;
          v33[36] = (char *)&value witness table for Builtin.UnknownObject + 64;
          v33[37] = (char *)&value witness table for Builtin.UnknownObject + 64;
          swift_getTupleTypeLayout3(v17, (char *)&value witness table for Builtin.UnknownObject + 64, v4, &unk_1006B6308);
          v33[38] = v17;
          swift_getTupleTypeLayout2(v16, (char *)&value witness table for Builtin.BridgeObject + 64, v7);
          v33[39] = v16;
          swift_getTupleTypeLayout3(v15, (char *)&value witness table for Builtin.UnknownObject + 64, (char *)&value witness table for Builtin.UnknownObject + 64, v7);
          v33[40] = v15;
          swift_getTupleTypeLayout2(v14, (char *)&value witness table for Builtin.BridgeObject + 64, v7);
          v33[41] = v14;
          v33[42] = (char *)&value witness table for Builtin.BridgeObject + 64;
          v33[43] = &unk_1006B6350;
          v33[44] = &unk_1006B6368;
          v33[45] = (char *)&value witness table for Builtin.BridgeObject + 64;
          v33[46] = v7;
          swift_initEnumMetadataMultiPayload(a1, 256, 47, v33);
        }
      }
    }
  }
}

uint64_t REMOwlEmbeddingClassifier.__allocating_init(locale:embeddingVersion:headerModelURL:numOfClasses:labels:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v9 = v7;
  v28 = a7;
  v26 = a6;
  v27 = a4;
  v24 = a1;
  v25 = a3;
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_msgSend(objc_allocWithZone((Class)MLModelConfiguration), "init");
  objc_msgSend(v16, "setComputeUnits:", 2);
  sub_1000151B0(0, &qword_1008468B0, MLModel_ptr);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a5, v12);
  v17 = v16;
  v18 = sub_100349F58((uint64_t)v15, (uint64_t)v17);
  if (v8)
  {

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a5, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  else
  {
    v19 = v18;

    v9 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    *(_QWORD *)(v9 + 24) = objc_msgSend(objc_allocWithZone((Class)CDMClient), "init");
    Locale.init(identifier:)(v24, a2);

    v20 = (_QWORD *)(v9 + OBJC_IVAR____TtC7remindd25REMOwlEmbeddingClassifier_embeddingVersion);
    v21 = v27;
    *v20 = v25;
    v20[1] = v21;
    v22 = v26;
    *(_QWORD *)(v9 + 32) = v19;
    *(_QWORD *)(v9 + 40) = v22;
    *(_QWORD *)(v9 + 16) = v28;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a5, v12);
  }
  return v9;
}

uint64_t sub_100348060()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100846898);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100846898);
  if (qword_100837638 != -1)
    swift_once(&qword_100837638, sub_1004A1870);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872088);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t REMOwlEmbeddingClassifier.predict(_:thresholds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[42] = a3;
  v4[43] = v3;
  v4[40] = a1;
  v4[41] = a2;
  return swift_task_switch(sub_10034810C, 0, 0);
}

uint64_t sub_10034810C(int32x2_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int32x4_t *v5;
  uint64_t v6;
  void *v7;
  Class isa;
  NSString v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;

  v2 = *(_QWORD *)(v1 + 336);
  v3 = *(_QWORD *)(v1 + 344);
  if (!v2)
  {
    v4 = *(_QWORD *)(v3 + 40);
    a1.i32[0] = 0.5;
    v5 = sub_1001BC1F4(v4, a1);
    v2 = 0;
    v3 = *(_QWORD *)(v1 + 344);
    goto LABEL_5;
  }
  v4 = *(_QWORD *)(v2 + 16);
  if (v4 == *(_QWORD *)(v3 + 40))
  {
    v5 = *(int32x4_t **)(v1 + 336);
LABEL_5:
    v6 = v1 + 80;
    *(_QWORD *)(v1 + 352) = v5;
    *(_QWORD *)(v1 + 360) = v4;
    v7 = *(void **)(v3 + 24);
    *(_QWORD *)(v1 + 368) = v7;
    swift_bridgeObjectRetain(v2);
    isa = Locale._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v1 + 376) = isa;
    v9 = String._bridgeToObjectiveC()();
    *(_QWORD *)(v1 + 384) = v9;
    *(_QWORD *)(v1 + 80) = v1;
    *(_QWORD *)(v1 + 88) = sub_100348274;
    v10 = swift_continuation_init(v1 + 80, 1);
    *(_QWORD *)(v1 + 224) = _NSConcreteStackBlock;
    v11 = (_QWORD *)(v1 + 224);
    v11[1] = 0x40000000;
    v11[2] = sub_100348E30;
    v11[3] = &unk_1007EF830;
    v11[4] = v10;
    objc_msgSend(v7, "setupWithLocale:embeddingVersion:completionHandler:", isa, v9, v11);
    return swift_continuation_await(v6);
  }
  v13 = sub_10034A074();
  v14 = swift_allocError(&type metadata for REMOwlEmbeddingClassifierError, v13, 0, 0);
  *v15 = 0;
  swift_willThrow(v14);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100348274()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  *(_QWORD *)(*(_QWORD *)v0 + 392) = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    v2 = sub_100348D58;
  }
  else
  {
    v2 = sub_1003482DC;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003482DC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  NSString v3;

  v1 = *(void **)(v0 + 376);
  v2 = *(void **)(v0 + 368);

  v3 = String._bridgeToObjectiveC()();
  *(_QWORD *)(v0 + 400) = v3;
  *(_QWORD *)(v0 + 56) = v0 + 304;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_1003483B4;
  *(_QWORD *)(v0 + 296) = swift_continuation_init(v0 + 16, 1);
  *(_QWORD *)(v0 + 264) = _NSConcreteStackBlock;
  *(_QWORD *)(v0 + 272) = 0x40000000;
  *(_QWORD *)(v0 + 280) = sub_100348EA4;
  *(_QWORD *)(v0 + 288) = &unk_1007EF848;
  objc_msgSend(v2, "processEmbeddingRequest:completionHandler:", v3, v0 + 264);
  return swift_continuation_await(v0 + 16);
}

uint64_t sub_1003483B4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 408) = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    v2 = sub_100348DA0;
  }
  else
  {
    v2 = sub_10034841C;
  }
  return swift_task_switch(v2, 0, 0);
}

void sub_10034841C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSNumber v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  unint64_t v24;
  void *v25;
  uint64_t i;
  id v27;
  NSNumber v28;
  Class isa;
  uint64_t v30;
  uint64_t j;
  id v32;
  Class v33;
  uint64_t v34;
  uint64_t inited;
  id v36;
  unint64_t v37;
  id v38;
  id v39;
  void *v40;
  id v41;
  id v42;
  id v43;
  _QWORD *v44;
  id v45;
  uint64_t v46;

  v1 = *(void **)(v0 + 400);
  v2 = *(void **)(v0 + 304);
  *(_QWORD *)(v0 + 416) = v2;

  v3 = objc_msgSend(v2, "subwordTokenEmbedding");
  v4 = v3;
  *(_QWORD *)(v0 + 424) = v3;
  if (!v3)
    goto LABEL_11;
  v5 = v3;
  v6 = objc_msgSend(v5, "embeddingTensor");
  if (!v6)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v7 = v6;
  v8 = objc_msgSend(v6, "values");

  if (!v8)
  {

LABEL_11:
    swift_bridgeObjectRelease();
    v17 = sub_10034A074();
    v18 = swift_allocError(&type metadata for REMOwlEmbeddingClassifierError, v17, 0, 0);
    *v19 = 2;
    swift_willThrow(v18);
LABEL_15:

    (*(void (**)(void))(v0 + 8))();
    return;
  }
  if (objc_msgSend(v5, "embeddingDim") != (id)192)
  {
    swift_bridgeObjectRelease();
    v20 = sub_10034A074();
    v21 = swift_allocError(&type metadata for REMOwlEmbeddingClassifierError, v20, 0, 0);
    v23 = 1;
LABEL_14:
    *v22 = v23;
    swift_willThrow(v21);

    v4 = v5;
    goto LABEL_15;
  }
  v9 = objc_msgSend(v5, "embeddingTensor");
  if (!v9)
  {
LABEL_30:
    __break(1u);
    return;
  }
  v10 = v9;
  v11 = (uint64_t)objc_msgSend(v9, "numToken");

  if ((v11 & 0x8000000000000000) == 0)
  {
    if (v11)
      goto LABEL_8;
    swift_bridgeObjectRelease();
    v24 = sub_10034A074();
    v21 = swift_allocError(&type metadata for REMOwlEmbeddingClassifierError, v24, 0, 0);
    v23 = 3;
    goto LABEL_14;
  }
  v11 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_8:
  v12 = 192 * v11;
  if ((unsigned __int128)(v11 * (__int128)192) >> 64 != (192 * v11) >> 63)
  {
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v13 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v14 = swift_allocObject(v13, 48, 7);
  *(_OWORD *)(v14 + 16) = xmmword_1006A8550;
  sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  *(NSNumber *)(v14 + 32) = NSNumber.init(integerLiteral:)(1);
  v15.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
  *(NSNumber *)(v14 + 40) = v15;
  specialized Array._endMutation()(v15.super.super.isa);
  objc_allocWithZone((Class)MLMultiArray);
  v16 = sub_1003492DC(v14, 65600);
  *(_QWORD *)(v0 + 432) = v16;
  v45 = v5;
  if (v12 < 0)
    goto LABEL_28;
  v25 = v16;
  v46 = v0 + 144;
  if (v12)
  {
    for (i = 0; i != v12; ++i)
    {
      v30 = i % 192;
      if (i > 191)
      {
        v27 = objc_msgSend(v25, "objectAtIndexedSubscript:", i % 192, v45, v46);
        objc_msgSend(v27, "doubleValue");

        v28.super.super.isa = Double._bridgeToObjectiveC()().super.super.isa;
      }
      else
      {
        v28.super.super.isa = Float._bridgeToObjectiveC()().super.super.isa;
      }
      isa = v28.super.super.isa;
      objc_msgSend(v25, "setObject:atIndexedSubscript:", v28.super.super.isa, v30, v45);

    }
  }
  for (j = 0; j != 192; ++j)
  {
    v32 = objc_msgSend(v25, "objectAtIndexedSubscript:", j, v45);
    objc_msgSend(v32, "doubleValue");

    v33 = Double._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v25, "setObject:atIndexedSubscript:", v33, j);

  }
  v34 = sub_10001A630((uint64_t *)&unk_10083A280);
  inited = swift_initStackObject(v34, v46);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  *(_QWORD *)(inited + 32) = 0x7475706E69;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  v36 = objc_msgSend((id)objc_opt_self(MLFeatureValue), "featureValueWithMultiArray:", v25);
  *(_QWORD *)(inited + 72) = sub_1000151B0(0, (unint64_t *)&unk_1008468D8, MLFeatureValue_ptr);
  *(_QWORD *)(inited + 48) = v36;
  v37 = sub_10016E7E4(inited);
  v38 = objc_allocWithZone((Class)MLDictionaryFeatureProvider);
  v39 = sub_1003493D4(v37);
  *(_QWORD *)(v0 + 440) = v39;
  v40 = v39;
  v41 = objc_allocWithZone((Class)MLPredictionOptions);
  v42 = v40;
  v43 = objc_msgSend(v41, "init");
  *(_QWORD *)(v0 + 448) = v43;
  v44 = (_QWORD *)swift_task_alloc(async function pointer to MLModel.prediction(from:options:)[1]);
  *(_QWORD *)(v0 + 456) = v44;
  *v44 = v0;
  v44[1] = sub_100348954;
  MLModel.prediction(from:options:)(v42, v43);
}

uint64_t sub_100348954(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 456);
  v3[58] = a1;
  v3[59] = v1;
  swift_task_dealloc(v4);
  v5 = (void *)v3[55];
  v6 = (void *)v3[56];
  if (v1)
  {
    swift_bridgeObjectRelease();

    v7 = sub_100348DE0;
  }
  else
  {

    v7 = sub_1003489E4;
  }
  return swift_task_switch(v7, 0, 0);
}

void sub_1003489E4()
{
  uint64_t v0;
  void *v1;
  NSString v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  id v8;
  float v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  _QWORD *v29;
  int64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  void *v42;
  _QWORD *v43;
  uint64_t v44;
  void *v45;
  id v46;
  uint64_t v47;
  _QWORD *v48;

  v1 = *(void **)(v0 + 464);
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "featureValueForName:", v2);

  if (!v3 || (v4 = objc_msgSend(v3, "multiArrayValue"), v3, !v4))
  {
    v13 = *(_QWORD *)(v0 + 464);
    v14 = *(void **)(v0 + 440);
    v15 = *(void **)(v0 + 416);

    swift_unknownObjectRelease(v13);
    v16 = _swiftEmptyArrayStorage;
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v0 + 360);
  if ((v5 & 0x8000000000000000) == 0)
  {
    if (v5)
    {
      v6 = 0;
      v7 = (float *)_swiftEmptyArrayStorage;
      do
      {
        v8 = objc_msgSend(v4, "objectAtIndexedSubscript:", v6);
        v9 = Float.init(truncating:)();

        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
          v7 = (float *)sub_1002C963C(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
        v11 = *((_QWORD *)v7 + 2);
        v10 = *((_QWORD *)v7 + 3);
        if (v11 >= v10 >> 1)
          v7 = (float *)sub_1002C963C((_QWORD *)(v10 > 1), v11 + 1, 1, v7);
        ++v6;
        v12 = *(_QWORD *)(v0 + 360);
        *((_QWORD *)v7 + 2) = v11 + 1;
        v7[v11 + 8] = v9;
      }
      while (v6 != v12);
    }
    else
    {
      v7 = (float *)_swiftEmptyArrayStorage;
    }
    v18 = *(_QWORD *)(v0 + 472);
    v19 = *(_QWORD *)(v0 + 344);
    v20 = *(_QWORD *)(v0 + 352);
    v21 = swift_bridgeObjectRetain(v7);
    v22 = Array<A>.softmax()(v21);
    swift_bridgeObjectRelease();
    v23 = swift_task_alloc(32);
    *(_QWORD *)(v23 + 16) = v19;
    *(_QWORD *)(v23 + 24) = v20;
    v24 = sub_100349E30(v22, (uint64_t (*)(float))sub_10034A0B8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc(v23);
    v48 = v24;
    swift_bridgeObjectRetain(v24);
    sub_100349274((uint64_t *)&v48);
    if (v18)
    {
      swift_release(v48);
      return;
    }
    v25 = *(_QWORD *)(v0 + 464);
    v26 = *(void **)(v0 + 432);
    v27 = *(void **)(v0 + 440);
    v28 = *(void **)(v0 + 416);
    v47 = *(_QWORD *)(v0 + 344);
    swift_bridgeObjectRelease();
    v29 = v48;
    v30 = v48[2];
    v16 = _swiftEmptyArrayStorage;
    if (v30)
    {
      v42 = v28;
      v44 = v25;
      v45 = v26;
      v46 = v4;
      v48 = _swiftEmptyArrayStorage;
      sub_1001C2088(0, v30, 0);
      v16 = v48;
      v43 = v29;
      v31 = v29 + 5;
      do
      {
        v32 = sub_10034903C(*(v31 - 1), v47);
        v34 = v33;
        v36 = v35;
        v38 = v37;
        v48 = v16;
        v40 = v16[2];
        v39 = v16[3];
        if (v40 >= v39 >> 1)
        {
          sub_1001C2088(v39 > 1, v40 + 1, 1);
          v16 = v48;
        }
        v16[2] = v40 + 1;
        v41 = &v16[4 * v40];
        v41[4] = v32;
        v41[5] = v34;
        v41[6] = v36;
        *((_DWORD *)v41 + 14) = v38;
        v31 += 2;
        --v30;
      }
      while (v30);
      v26 = v45;
      v4 = v46;
      v25 = v44;
      v28 = v42;
      v29 = v43;
    }

    swift_unknownObjectRelease(v25);
    swift_release(v29);
LABEL_13:
    swift_bridgeObjectRelease();
    v17 = *(void **)(v0 + 424);

    (*(void (**)(_QWORD *))(v0 + 8))(v16);
    return;
  }
  __break(1u);
}

uint64_t sub_100348D58(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v2 = *(void **)(v1 + 384);
  v3 = *(void **)(v1 + 376);
  swift_willThrow(a1);

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100348DA0(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 400);
  swift_willThrow(a1);

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100348DE0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;

  v1 = *(void **)(v0 + 432);
  v3 = *(void **)(v0 + 416);
  v2 = *(void **)(v0 + 424);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100348E30(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (!a2)
    return swift_continuation_throwingResume(*(_QWORD *)(a1 + 32));
  v4 = sub_10001A630((uint64_t *)&unk_10083AA20);
  v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0, 0);
  *v6 = a2;
  v7 = a2;
  return swift_continuation_throwingResumeWithError(v2, v5);
}

uint64_t sub_100348EA4(uint64_t result, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v9;

  v3 = *(_QWORD *)(result + 32);
  if (a3)
  {
    v5 = sub_10001A630((uint64_t *)&unk_10083AA20);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    v9 = a2;
    return swift_continuation_throwingResume(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL sub_100348F30(unint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;

  if (*(_QWORD *)(*(_QWORD *)(a2 + 16) + 16) > (int64_t)a1)
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(a3 + 16) > a1)
    {
      return *(float *)(a3 + 4 * a1 + 32) < a4;
    }
    __break(1u);
    goto LABEL_11;
  }
  if (qword_100837268 != -1)
LABEL_11:
    swift_once(&qword_100837268, sub_100348060);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10001AAA8(v5, (uint64_t)qword_100846898);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Label index out of range. Mismatched model and labels.", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  return 0;
}

unint64_t sub_10034903C(unint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v2 = result;
    v3 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(v3 + 16) > result)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v3 + 16 * result + 40));
      return v2;
    }
  }
  __break(1u);
  return result;
}

uint64_t REMOwlEmbeddingClassifier.labels.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t REMOwlEmbeddingClassifier.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  v1 = v0 + OBJC_IVAR____TtC7remindd25REMOwlEmbeddingClassifier_locale;
  v2 = type metadata accessor for Locale(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd25REMOwlEmbeddingClassifier_embeddingVersion + 8));
  return v0;
}

uint64_t REMOwlEmbeddingClassifier.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  v1 = v0 + OBJC_IVAR____TtC7remindd25REMOwlEmbeddingClassifier_locale;
  v2 = type metadata accessor for Locale(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd25REMOwlEmbeddingClassifier_embeddingVersion + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10034919C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;

  v8 = *v3;
  v9 = (_QWORD *)swift_task_alloc(dword_1008468CC);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_100349214;
  v9[42] = a3;
  v9[43] = v8;
  v9[40] = a1;
  v9[41] = a2;
  return swift_task_switch(sub_10034810C, 0, 0);
}

uint64_t sub_100349214(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *v2;
  v6 = swift_task_dealloc(v4);
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_100349268()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)v0 + 16));
}

void sub_100349274(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_1001D60D4(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v4[0] = v2 + 32;
  v4[1] = v3;
  sub_1003494B8(v4);
  *a1 = v2;
}

id sub_1003492DC(uint64_t a1, uint64_t a2)
{
  void *v2;
  Class isa;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  id v11;

  sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v11 = 0;
  v5 = objc_msgSend(v2, "initWithShape:dataType:error:", isa, a2, &v11, swift_bridgeObjectRelease().n128_f64[0]);

  v6 = v11;
  if (v5)
  {
    v7 = v11;
  }
  else
  {
    v8 = v11;
    _convertNSErrorToError(_:)(v6);

    swift_willThrow(v9);
  }
  return v5;
}

id sub_1003493D4(uint64_t a1)
{
  void *v1;
  Class isa;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id v10;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v10 = 0;
  v4 = objc_msgSend(v1, "initWithDictionary:error:", isa, &v10);

  v5 = v10;
  if (v4)
  {
    v6 = v10;
  }
  else
  {
    v7 = v10;
    _convertNSErrorToError(_:)(v5);

    swift_willThrow(v8);
  }
  return v4;
}

void sub_1003494B8(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  Swift::Int v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  Swift::Int v15;
  float v16;
  uint64_t v17;
  float v18;
  float *v19;
  uint64_t v20;
  Swift::Int v21;
  Swift::Int v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  int v27;
  Swift::Int v28;
  float *v29;
  float *v30;
  Swift::Int v31;
  float v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  char v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t i;
  uint64_t v89;
  uint64_t v90;
  float v91;
  uint64_t v92;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  Swift::Int v106;
  Swift::Int v107;
  uint64_t v108;
  float *__dst;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_141;
    if ((unint64_t)v3 >= 2)
    {
      v85 = *a1;
      v86 = *a1 + 16;
      v87 = -1;
      for (i = 1; i != v3; ++i)
      {
        v89 = v87;
        v90 = v86;
        do
        {
          v91 = *(float *)(v90 + 8);
          if (*(float *)(v90 - 8) >= v91)
            break;
          if (!v85)
            goto LABEL_145;
          v92 = *(_QWORD *)v90;
          *(_OWORD *)v90 = *(_OWORD *)(v90 - 16);
          *(float *)(v90 - 8) = v91;
          *(_QWORD *)(v90 - 16) = v92;
          v90 -= 16;
        }
        while (!__CFADD__(v89++, 1));
        v86 += 16;
        --v87;
      }
    }
    return;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_150;
  v6 = v4;
  v102 = a1;
  if (v3 < 2)
  {
    v10 = _swiftEmptyArrayStorage;
    __dst = (float *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v14 = _swiftEmptyArrayStorage[2];
      v13 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
      v94 = v13;
      v105 = v10;
      if (v14 >= 2)
      {
        v95 = *v102;
        do
        {
          v96 = v14 - 2;
          if (v14 < 2)
            goto LABEL_136;
          if (!v95)
            goto LABEL_149;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v14 + 24];
          sub_100349BA8((float *)(v95 + 16 * v98), (float *)(v95 + 16 * *(_QWORD *)&v94[16 * v14 + 16]), v95 + 16 * v99, __dst);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_137;
          if ((swift_isUniquelyReferenced_nonNull_native(v97) & 1) == 0)
            v97 = sub_1001D52E4((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_138;
          v100 = &v97[16 * v96 + 32];
          *(_QWORD *)v100 = v98;
          *((_QWORD *)v100 + 1) = v99;
          v101 = *((_QWORD *)v97 + 2);
          if (v14 > v101)
            goto LABEL_139;
          memmove(&v97[16 * v14 + 16], &v97[16 * v14 + 32], 16 * (v101 - v14));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v101 - 1;
          v14 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_97:
      swift_bridgeObjectRelease();
      v105[2] = 0;
      swift_bridgeObjectRelease();
      return;
    }
    v105 = _swiftEmptyArrayStorage;
  }
  else
  {
    v7 = v5 >> 1;
    v8 = sub_10001A630(&qword_1008469C8);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(_QWORD *)(v9 + 16) = v7;
    v105 = (_QWORD *)v9;
    __dst = (float *)(v9 + 32);
  }
  v11 = 0;
  v12 = *a1;
  v103 = *a1 + 40;
  v104 = *a1 + 8;
  v13 = (char *)_swiftEmptyArrayStorage;
  v106 = v6;
  v107 = v3;
  v108 = v12;
  while (1)
  {
    v15 = v11++;
    if (v11 < v3)
    {
      v16 = *(float *)(v104 + 16 * v11);
      v17 = 16 * v15;
      v18 = *(float *)(v104 + 16 * v15);
      v11 = v15 + 2;
      if (v15 + 2 < v3)
      {
        v19 = (float *)(v103 + 16 * v15);
        while (v18 < v16 != *(v19 - 4) >= *v19)
        {
          ++v11;
          v19 += 4;
          if (v3 == v11)
          {
            v11 = v3;
            break;
          }
        }
      }
      if (v18 < v16)
      {
        if (v11 < v15)
          goto LABEL_142;
        if (v15 < v11)
        {
          v20 = 16 * v11 - 16;
          v21 = v11;
          v22 = v15;
          do
          {
            if (v22 != --v21)
            {
              if (!v12)
                goto LABEL_148;
              v24 = (_OWORD *)(v12 + v17);
              v25 = (_OWORD *)(v12 + v20);
              v26 = *(_QWORD *)(v12 + v17);
              v27 = *(_DWORD *)(v12 + v17 + 8);
              if (v17 != v20 || v24 >= v25 + 1)
                *v24 = *v25;
              v23 = v12 + v20;
              *(_QWORD *)v23 = v26;
              *(_DWORD *)(v23 + 8) = v27;
            }
            ++v22;
            v20 -= 16;
            v17 += 16;
          }
          while (v22 < v21);
        }
      }
    }
    if (v11 >= v3)
      goto LABEL_50;
    if (__OFSUB__(v11, v15))
      goto LABEL_140;
    if (v11 - v15 >= v6)
      goto LABEL_50;
    v28 = v15 + v6;
    if (__OFADD__(v15, v6))
      goto LABEL_143;
    if (v28 >= v3)
      v28 = v3;
    if (v28 < v15)
      break;
    if (v11 != v28)
    {
      v29 = (float *)(v12 + 16 * v11);
      do
      {
        v30 = v29;
        v31 = v15;
        do
        {
          v32 = v30[2];
          if (*(v30 - 2) >= v32)
            break;
          if (!v12)
            goto LABEL_146;
          v33 = *(_QWORD *)v30;
          *(_OWORD *)v30 = *((_OWORD *)v30 - 1);
          *(v30 - 2) = v32;
          *((_QWORD *)v30 - 2) = v33;
          v30 -= 4;
          ++v31;
        }
        while (v11 != v31);
        ++v11;
        v29 += 4;
      }
      while (v11 != v28);
      v11 = v28;
    }
LABEL_50:
    if (v11 < v15)
      goto LABEL_135;
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
      v13 = sub_1001D4DF0(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    v35 = *((_QWORD *)v13 + 2);
    v34 = *((_QWORD *)v13 + 3);
    v14 = v35 + 1;
    v12 = v108;
    if (v35 >= v34 >> 1)
    {
      v84 = sub_1001D4DF0((char *)(v34 > 1), v35 + 1, 1, v13);
      v12 = v108;
      v13 = v84;
    }
    *((_QWORD *)v13 + 2) = v14;
    v36 = v13 + 32;
    v37 = &v13[16 * v35 + 32];
    *(_QWORD *)v37 = v15;
    *((_QWORD *)v37 + 1) = v11;
    if (v35)
    {
      while (1)
      {
        v38 = v14 - 1;
        if (v14 >= 4)
        {
          v43 = &v36[16 * v14];
          v44 = *((_QWORD *)v43 - 8);
          v45 = *((_QWORD *)v43 - 7);
          v49 = __OFSUB__(v45, v44);
          v46 = v45 - v44;
          if (v49)
            goto LABEL_124;
          v48 = *((_QWORD *)v43 - 6);
          v47 = *((_QWORD *)v43 - 5);
          v49 = __OFSUB__(v47, v48);
          v41 = v47 - v48;
          v42 = v49;
          if (v49)
            goto LABEL_125;
          v50 = v14 - 2;
          v51 = &v36[16 * v14 - 32];
          v53 = *(_QWORD *)v51;
          v52 = *((_QWORD *)v51 + 1);
          v49 = __OFSUB__(v52, v53);
          v54 = v52 - v53;
          if (v49)
            goto LABEL_127;
          v49 = __OFADD__(v41, v54);
          v55 = v41 + v54;
          if (v49)
            goto LABEL_130;
          if (v55 >= v46)
          {
            v73 = &v36[16 * v38];
            v75 = *(_QWORD *)v73;
            v74 = *((_QWORD *)v73 + 1);
            v49 = __OFSUB__(v74, v75);
            v76 = v74 - v75;
            if (v49)
              goto LABEL_134;
            v66 = v41 < v76;
            goto LABEL_87;
          }
        }
        else
        {
          if (v14 != 3)
          {
            v67 = *((_QWORD *)v13 + 4);
            v68 = *((_QWORD *)v13 + 5);
            v49 = __OFSUB__(v68, v67);
            v60 = v68 - v67;
            v61 = v49;
            goto LABEL_81;
          }
          v40 = *((_QWORD *)v13 + 4);
          v39 = *((_QWORD *)v13 + 5);
          v49 = __OFSUB__(v39, v40);
          v41 = v39 - v40;
          v42 = v49;
        }
        if ((v42 & 1) != 0)
          goto LABEL_126;
        v50 = v14 - 2;
        v56 = &v36[16 * v14 - 32];
        v58 = *(_QWORD *)v56;
        v57 = *((_QWORD *)v56 + 1);
        v59 = __OFSUB__(v57, v58);
        v60 = v57 - v58;
        v61 = v59;
        if (v59)
          goto LABEL_129;
        v62 = &v36[16 * v38];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v49 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if (v49)
          goto LABEL_132;
        if (__OFADD__(v60, v65))
          goto LABEL_133;
        if (v60 + v65 >= v41)
        {
          v66 = v41 < v65;
LABEL_87:
          if (v66)
            v38 = v50;
          goto LABEL_89;
        }
LABEL_81:
        if ((v61 & 1) != 0)
          goto LABEL_128;
        v69 = &v36[16 * v38];
        v71 = *(_QWORD *)v69;
        v70 = *((_QWORD *)v69 + 1);
        v49 = __OFSUB__(v70, v71);
        v72 = v70 - v71;
        if (v49)
          goto LABEL_131;
        if (v72 < v60)
          goto LABEL_15;
LABEL_89:
        v77 = v38 - 1;
        if (v38 - 1 >= v14)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!v12)
          goto LABEL_147;
        v78 = v13;
        v79 = &v36[16 * v77];
        v80 = *(_QWORD *)v79;
        v81 = &v36[16 * v38];
        v82 = *((_QWORD *)v81 + 1);
        sub_100349BA8((float *)(v12 + 16 * *(_QWORD *)v79), (float *)(v12 + 16 * *(_QWORD *)v81), v12 + 16 * v82, __dst);
        if (v1)
          goto LABEL_97;
        if (v82 < v80)
          goto LABEL_121;
        if (v38 > *((_QWORD *)v78 + 2))
          goto LABEL_122;
        *(_QWORD *)v79 = v80;
        *(_QWORD *)&v36[16 * v77 + 8] = v82;
        v83 = *((_QWORD *)v78 + 2);
        if (v38 >= v83)
          goto LABEL_123;
        v13 = v78;
        v14 = v83 - 1;
        memmove(&v36[16 * v38], v81 + 16, 16 * (v83 - 1 - v38));
        *((_QWORD *)v78 + 2) = v83 - 1;
        v12 = v108;
        if (v83 <= 2)
          goto LABEL_15;
      }
    }
    v14 = 1;
LABEL_15:
    v6 = v106;
    v3 = v107;
    if (v11 >= v107)
    {
      v10 = v105;
      goto LABEL_107;
    }
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

uint64_t sub_100349BA8(float *__src, float *a2, unint64_t a3, float *__dst)
{
  float *v4;
  float *v6;
  float *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  uint64_t v19;
  float *v20;
  float *v21;
  float *v22;
  float *v23;
  uint64_t result;
  char v25;
  float *v26;
  float *v27;
  float *v28;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v27 = __dst;
  v28 = __src;
  if (v10 >= v13)
  {
    if (v11 >= -15)
    {
      v19 = 4 * v13;
      if (__dst != a2 || &a2[v19] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v20 = &v4[v19];
      v26 = &v4[v19];
      v28 = v6;
      if (v7 < v6 && (unint64_t)(v11 - 16) <= 0xFFFFFFFFFFFFFFE0)
      {
        v21 = (float *)(a3 - 16);
        do
        {
          v22 = v21 + 4;
          if (*(v6 - 2) >= *(v20 - 2))
          {
            v26 = v20 - 4;
            if (v22 < v20 || v21 >= v20 || v22 != v20)
              *(_OWORD *)v21 = *((_OWORD *)v20 - 1);
            v23 = v6;
            v20 -= 4;
            if (v6 <= v7)
              break;
          }
          else
          {
            v23 = v6 - 4;
            if (v22 != v6 || v21 >= v6)
              *(_OWORD *)v21 = *(_OWORD *)v23;
            v28 = v6 - 4;
            if (v23 <= v7)
              break;
          }
          v21 -= 4;
          v6 = v23;
        }
        while (v20 > v4);
      }
LABEL_44:
      sub_1001D5104((void **)&v28, (const void **)&v27, &v26);
      return 1;
    }
  }
  else if (v8 >= -15)
  {
    v14 = 4 * v10;
    if (__dst != __src || &__src[v14] <= __dst)
      memmove(__dst, __src, v14 * 4);
    v15 = &v4[v14];
    v26 = &v4[v14];
    if ((unint64_t)v6 < a3 && (unint64_t)(v8 - 16) <= 0xFFFFFFFFFFFFFFE0)
    {
      v16 = v4;
      while (1)
      {
        if (v16[2] >= v6[2])
        {
          v4 = v16 + 4;
          v18 = v16;
          v17 = v6;
          if (v7 == v16)
          {
            v16 += 4;
            if (v7 < v4)
              goto LABEL_22;
          }
          else
          {
            v16 += 4;
          }
        }
        else
        {
          v17 = v6 + 4;
          v18 = v6;
          if (v7 == v6 && v7 < v17)
            goto LABEL_22;
        }
        *(_OWORD *)v7 = *(_OWORD *)v18;
LABEL_22:
        v7 += 4;
        if (v16 < v15)
        {
          v6 = v17;
          if ((unint64_t)v17 < a3)
            continue;
        }
        v27 = v4;
        v28 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  v25 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v25, 1046, 0);
  __break(1u);
  return result;
}

_QWORD *sub_100349E30(uint64_t a1, uint64_t (*a2)(float))
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  float v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  float *v14;
  uint64_t v15;

  v3 = v2;
  v5 = 0;
  v6 = *(_QWORD **)(a1 + 16);
  v7 = a1 + 32;
LABEL_2:
  if (v5 <= v6)
    v8 = v6;
  else
    v8 = v5;
  result = v5;
  while (1)
  {
    if (v6 == result)
      return _swiftEmptyArrayStorage;
    if (v8 == result)
      break;
    v10 = *(float *)(v7 + 4 * (_QWORD)result);
    v5 = (_QWORD *)((char *)result + 1);
    v11 = a2(v10);
    result = v5;
    if ((v11 & 1) != 0)
    {
      v15 = v3;
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_1001C20A4(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v13 = _swiftEmptyArrayStorage[2];
      v12 = _swiftEmptyArrayStorage[3];
      if (v13 >= v12 >> 1)
        sub_1001C20A4(v12 > 1, v13 + 1, 1);
      _swiftEmptyArrayStorage[2] = v13 + 1;
      v14 = (float *)&_swiftEmptyArrayStorage[2 * v13];
      *((_QWORD *)v14 + 4) = (char *)v5 - 1;
      v14[10] = v10;
      v3 = v15;
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

id sub_100349F58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v17;

  v3 = v2;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  v7 = v6;
  v17 = 0;
  v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(v3), "modelWithContentsOfURL:configuration:error:", v6, a2, &v17);

  v9 = v17;
  if (v8)
  {
    v10 = type metadata accessor for URL(0);
    v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
    v12 = v9;
    v11(a1, v10);
  }
  else
  {
    v13 = v17;
    _convertNSErrorToError(_:)(v9);

    swift_willThrow(v14);
    v15 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a1, v15);
  }
  return v8;
}

unint64_t sub_10034A074()
{
  unint64_t result;

  result = qword_1008468D0;
  if (!qword_1008468D0)
  {
    result = swift_getWitnessTable(&unk_1006B64B8, &type metadata for REMOwlEmbeddingClassifierError);
    atomic_store(result, (unint64_t *)&qword_1008468D0);
  }
  return result;
}

BOOL sub_10034A0B8(unint64_t a1, float a2)
{
  uint64_t v2;

  return sub_100348F30(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_10034A0C0()
{
  return type metadata accessor for REMOwlEmbeddingClassifier(0);
}

uint64_t type metadata accessor for REMOwlEmbeddingClassifier(uint64_t a1)
{
  uint64_t result;

  result = qword_100846910;
  if (!qword_100846910)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for REMOwlEmbeddingClassifier);
  return result;
}

uint64_t sub_10034A104(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for Locale(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    v4[5] = &unk_1006B6410;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for REMOwlEmbeddingClassifierError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10034A1F0 + 4 * byte_1006B6395[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10034A224 + 4 * byte_1006B6390[v4]))();
}

uint64_t sub_10034A224(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10034A22C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10034A234);
  return result;
}

uint64_t sub_10034A240(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10034A248);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10034A24C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10034A254(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMOwlEmbeddingClassifierError()
{
  return &type metadata for REMOwlEmbeddingClassifierError;
}

unint64_t sub_10034A274()
{
  unint64_t result;

  result = qword_1008469C0;
  if (!qword_1008469C0)
  {
    result = swift_getWitnessTable(&unk_1006B6490, &type metadata for REMOwlEmbeddingClassifierError);
    atomic_store(result, (unint64_t *)&qword_1008469C0);
  }
  return result;
}

uint64_t sub_10034A2B8(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_100846A08, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ScheduledFlatInvocation, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.ScheduledFlatInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_10034A2F4(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Configuration;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  NSString v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  void *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  void *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;

  v94 = a4;
  v85 = a3;
  v92 = a2;
  v88 = a5;
  v84 = type metadata accessor for REMRemindersListDataView.FlatModel(0, a6);
  v91 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v86 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v87 = (char *)&v72 - v9;
  v10 = sub_10001A630(&qword_100839A98);
  __chkstk_darwin(v10);
  v79 = (uint64_t)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch(0);
  v90 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v83 = (uint64_t *)((char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  v89 = (char *)&v72 - v14;
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v80 = *(_QWORD *)(Configuration - 8);
  v81 = Configuration;
  __chkstk_darwin(Configuration);
  v17 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v72 - v23;
  v25 = sub_10001A630(&qword_100839AA0);
  __chkstk_darwin(v25);
  v27 = (char *)&v72 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v30 = (char *)&v72 - v29;
  v31 = a1;
  v32 = v95;
  v33 = sub_10034AB3C(a1, v94);
  if (!v32)
  {
    v95 = (uint64_t)v33;
    v75 = v27;
    v76 = v21;
    v77 = v19;
    v78 = v24;
    v74 = v18;
    v34 = v93;
    sub_10034A90C(a1, (uint64_t)v30);
    v35 = objc_msgSend(v34, "fetchResultTokenToDiffAgainst");
    v36 = (uint64_t)v78;
    sub_100493C24(v35, v31, (uint64_t)v78);
    v93 = 0;
    v37 = v31;

    v39 = REMRemindersListDataView.ScheduledFlatInvocation.Parameters.configuration.getter(v38);
    v40 = v89;
    REMRemindersListDataView.FetchConfiguration.remindersPrefetch.getter(v39);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v17, v81);
    v41 = v90;
    v43 = v82;
    v42 = v83;
    (*(void (**)(uint64_t *, char *, uint64_t))(v90 + 16))(v83, v40, v82);
    v44 = (*(uint64_t (**)(uint64_t *, uint64_t))(v41 + 88))(v42, v43);
    v73 = v30;
    if (v44 == enum case for REMRemindersListDataView.RemindersPrefetch.initial(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v41 + 96))(v42, v43);
      v46 = *v42;
      v47 = v95;
      swift_bridgeObjectRetain(v95);
      v48 = sub_10049BB18(v46, v47, v31, v85, 0);
    }
    else
    {
      v49 = v85;
      if (v44 != enum case for REMRemindersListDataView.RemindersPrefetch.updatedInserted(_:))
      {
        v54 = v76;
        if (v44 != enum case for REMRemindersListDataView.RemindersPrefetch.initialAndDateRange(_:))
        {
          v55 = v91;
          v56 = v86;
          v53 = v77;
          if (v44 != enum case for REMRemindersListDataView.RemindersPrefetch.none(_:))
          {
            _diagnoseUnexpectedEnumCase<A>(type:)(v43, v43);
            __break(1u);
            return;
          }
          v52 = _swiftEmptyArrayStorage;
          v51 = _swiftEmptyArrayStorage;
          v47 = v95;
          goto LABEL_8;
        }
        (*(void (**)(uint64_t *, uint64_t))(v41 + 96))(v42, v43);
        v67 = *v42;
        v68 = sub_10001A630(&qword_100839AA8);
        v69 = v79;
        sub_100128FE0((uint64_t)v42 + *(int *)(v68 + 48), v79);
        v47 = v95;
        swift_bridgeObjectRetain(v95);
        v70 = v67;
        v71 = v37;
        v51 = sub_10049BB18(v70, v47, v37, v49, 0);
        v52 = sub_10049CB18(v69, v47, v71, v49, 0);
        sub_10000882C(v69, &qword_100839A98);
        v53 = v77;
LABEL_7:
        v45 = swift_bridgeObjectRelease();
        v55 = v91;
        v56 = v86;
LABEL_8:
        (*(void (**)(char *, uint64_t, __n128))(v90 + 8))(v89, v43, v45);
        v57 = (uint64_t)v75;
        sub_100129028((uint64_t)v73, (uint64_t)v75);
        v58 = v87;
        REMRemindersListDataView.FlatModel.init(reminders:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)(v47, v57, 2, v51, v52);
        v59 = v84;
        (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v56, v58, v84);
        v60 = v54;
        v61 = v54;
        v62 = (uint64_t)v78;
        v63 = v74;
        (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v60, v78, v74);
        v64 = v53;
        v65 = sub_10009FC50(&qword_10083BAE8, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlatModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.FlatModel);
        v66 = sub_10009FC50((unint64_t *)&unk_10083BAF0, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlatModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.FlatModel);
        REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)(v56, v61, v59, v65, v66);
        (*(void (**)(char *, uint64_t))(v91 + 8))(v58, v59);
        (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v62, v63);
        sub_10000882C((uint64_t)v73, &qword_100839AA0);
        return;
      }
      (*(void (**)(uint64_t *, uint64_t))(v41 + 96))(v42, v43);
      v50 = *v42;
      v47 = v95;
      swift_bridgeObjectRetain(v95);
      v48 = sub_10049C4C8(v50, v36, v31, v49, 0);
    }
    v51 = v48;
    v52 = _swiftEmptyArrayStorage;
    v54 = v76;
    v53 = v77;
    goto LABEL_7;
  }
}

void sub_10034A90C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Configuration;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v5 = _s10PredicatesOMa(0);
  __chkstk_darwin(v5);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v9 = *(_QWORD *)(Configuration - 8);
  v10 = __chkstk_darwin(Configuration);
  v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = REMRemindersListDataView.ScheduledFlatInvocation.Parameters.configuration.getter(v10);
  v14 = REMRemindersListDataView.FetchConfiguration.countCompleted.getter(v13);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, Configuration);
  if ((v14 & 1) != 0)
  {
    v15 = enum case for REMRemindersListDataView.ShowCompleted.on(_:);
    v16 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v7, v15, v16);
    swift_storeEnumTagMultiPayload(v7, v5, 11);
    sub_10000D2C0();
    v18 = v17;
    sub_10001C744((uint64_t)v7, _s10PredicatesOMa);
    sub_1004934D8(a1, (uint64_t)v18);
    if (!v2)
    {
      v19 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a2, 0, 1, v19);
    }

  }
  else
  {
    v20 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a2, 1, 1, v20);
  }
}

uint64_t sub_10034AAB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = _s9UtilitiesO12SortingStyleOMa(0);
  sub_10009EF3C(v0, qword_1008469D0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008469D0);
  v2 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  v3 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(v1, v2, v3);
  return swift_storeEnumTagMultiPayload(v1, v0, 0);
}

NSString sub_10034AB3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t Subtasks;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t Configuration;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  double (*v30)(char *, uint64_t);
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  __n128 v33;
  void *v34;
  NSString v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  __n128 v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;

  v67 = a1;
  v72 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v71 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v70 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  __chkstk_darwin(v4);
  v62 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v63);
  v64 = (uint64_t)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v68 = (uint64_t)&v58 - v8;
  v59 = _s10PredicatesOMa(0);
  __chkstk_darwin(v59);
  v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v12 = *(_QWORD *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  v66 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v58 - v15;
  __chkstk_darwin(v17);
  v19 = (char *)&v58 - v18;
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v21 = *(_QWORD *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  v61 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v60 = (char *)&v58 - v24;
  v26 = __chkstk_darwin(v25);
  v28 = (char *)&v58 - v27;
  v65 = a2;
  v29 = REMRemindersListDataView.ScheduledFlatInvocation.Parameters.configuration.getter(v26);
  REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter(v29);
  v30 = *(double (**)(char *, uint64_t))(v21 + 8);
  v30(v28, Configuration);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v16, enum case for REMRemindersListDataView.FetchSubtasks.on(_:), Subtasks);
  v31 = sub_10009FC50(&qword_100841010, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FetchSubtasks, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.FetchSubtasks);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)(v19, v16, Subtasks, v31);
  v32 = *(void (**)(char *, uint64_t))(v12 + 8);
  v32(v16, Subtasks);
  v32(v19, Subtasks);
  if ((a2 & 1) != 0)
  {
    v34 = (void *)objc_opt_self(REMError);
    v35 = String._bridgeToObjectiveC()();
    objc_msgSend(v34, "internalErrorWithDebugDescription:", v35);

    swift_willThrow(v36);
  }
  else
  {
    v58 = (void (*)(uint64_t, uint64_t))v32;
    v37 = REMRemindersListDataView.ScheduledFlatInvocation.Parameters.configuration.getter(v33);
    REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v37);
    v30(v28, Configuration);
    swift_storeEnumTagMultiPayload(v10, v59, 11);
    sub_10000D2C0();
    v39 = v38;
    sub_10001C744((uint64_t)v10, _s10PredicatesOMa);
    v41 = REMRemindersListDataView.ScheduledFlatInvocation.Parameters.configuration.getter(v40);
    v42 = v62;
    REMRemindersListDataView.FetchConfiguration.sortingStyle.getter(v41);
    v30(v28, Configuration);
    v43 = (uint64_t)v42;
    if (qword_100837270 != -1)
      swift_once(&qword_100837270, sub_10034AAB8);
    v44 = sub_10001AAA8(v63, (uint64_t)qword_1008469D0);
    v45 = v64;
    sub_1001D8AD8(v44, v64);
    v46 = v68;
    sub_1004957D0(v43, v45, v68);
    v47 = v60;
    v49 = REMRemindersListDataView.ScheduledFlatInvocation.Parameters.configuration.getter(v48);
    v50 = (uint64_t)v70;
    REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v49);
    v51.n128_f64[0] = v30(v47, Configuration);
    v52 = v61;
    v53 = REMRemindersListDataView.ScheduledFlatInvocation.Parameters.configuration.getter(v51);
    v54 = (uint64_t)v66;
    v35 = v52;
    REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter(v53);
    v30(v52, Configuration);
    v55 = v69;
    v56 = sub_100496780(v67, (uint64_t)v39, v46, 0, 0, v50, v54, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
    if (!v55)
    {
      v35 = v56;
      swift_bridgeObjectRelease();
    }

    v58(v54, Subtasks);
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v50, v72);
    sub_10001C744(v46, _s9UtilitiesO12SortingStyleOMa);
  }
  return v35;
}

void sub_10034B07C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  v5 = __chkstk_darwin(v4);
  v6 = __chkstk_darwin(v5);
  __chkstk_darwin(v6);
  __asm { BR              X10 }
}

uint64_t sub_10034B140()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;

  KeyPath = swift_getKeyPath(&unk_1006B6648);
  sub_10034D600(v1, v0, 0);
  v4 = sub_1002E78E0(KeyPath, v1, v0);
  sub_100268FCC(v1, v0, 0);
  v5 = swift_release(KeyPath);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v5);
  v6 = *(_QWORD *)(v2 - 88);
  v8 = *(_QWORD *)(v6 + 16);
  v7 = *(_QWORD *)(v6 + 24);
  if (v8 >= v7 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1);
  v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v4);
  specialized Array._endMutation()(v9);
  v10 = sub_1000153F4(0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
  v11 = *(_QWORD *)(v2 - 88);
  v13 = *(_QWORD *)(v11 + 16);
  v12 = *(_QWORD *)(v11 + 24);
  if (v13 >= v12 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1);
  v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v10);
  specialized Array._endMutation()(v14);
  v15 = swift_getKeyPath(&unk_1006B65D0);
  v16 = sub_10033EF70(v15);
  v17 = swift_release(v15);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v17);
  v18 = *(_QWORD *)(v2 - 88);
  v20 = *(_QWORD *)(v18 + 16);
  v19 = *(_QWORD *)(v18 + 24);
  if (v20 >= v19 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1);
  v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v16);
  specialized Array._endMutation()(v21);
  v22 = swift_getKeyPath(&unk_1006B6560);
  v23 = ((uint64_t (*)(_QWORD))REMAccountType.asInt16.getter)(0);
  v24 = sub_10033EFB8(v22, v23);
  v25 = swift_release(v22);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v25);
  v26 = *(_QWORD *)(v2 - 88);
  v28 = *(_QWORD *)(v26 + 16);
  v27 = *(_QWORD *)(v26 + 24);
  if (v28 >= v27 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1);
  v29 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v24);
  specialized Array._endMutation()(v29);
  return sub_10000D2BC(*(_QWORD *)(v2 - 88));
}

uint64_t sub_10034BA18(_QWORD *a1)
{
  return sub_10034BAB0(a1, 2);
}

uint64_t sub_10034BA64(_QWORD *a1)
{
  return sub_10034BAB0(a1, 1);
}

uint64_t sub_10034BAB0(_QWORD *a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  void *v5;
  uint64_t v7;
  double v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t v25;
  id v26;
  id v27;
  Class isa;
  Class v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  Class v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t result;
  Swift::String v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  unint64_t v60;
  uint64_t v61;
  id v62;
  unint64_t v63;
  _QWORD *v64;

  v5 = v2;
  v7 = _s10PredicatesOMa_1(0);
  *(_QWORD *)&v8 = __chkstk_darwin(v7).n128_u64[0];
  v10 = (uint64_t *)((char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v62 = 0;
  v11 = objc_msgSend(v5, "remObjectIDWithError:", &v62, v8);
  v12 = v62;
  if (!v11)
  {
    v42 = v62;
    _convertNSErrorToError(_:)(v12);

    swift_willThrow(v43);
    return (uint64_t)v42;
  }
  *v10 = v11;
  swift_storeEnumTagMultiPayload(v10, v7, a2);
  v13 = v12;
  sub_10000A3AC();
  v15 = v14;
  sub_10001C744((uint64_t)v10, _s10PredicatesOMa_1);
  v16 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v17 = swift_allocObject(v16, 40, 7);
  *(_OWORD *)(v17 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v17 + 32) = v5;
  v62 = (id)v17;
  specialized Array._endMutation()(v17);
  v18 = v5;
  v19 = sub_10001A630(&qword_10083FCF0);
  v20 = sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
  v21 = sub_1000C4C0C((unint64_t *)&qword_10083FC48, &qword_10083FCF0);
  v22 = sub_1001DF600();
  v23 = Sequence.compactMapToSet<A>(_:)(sub_100303BB8, 0, v19, v20, v21, v22);
  v56 = v3;
  v24 = sub_1001E8870(v23);
  swift_bridgeObjectRelease();
  v25 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v26 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v57 = v25;
  v27 = objc_msgSend((id)swift_getObjCClassFromMetadata(v25), "entity");
  objc_msgSend(v26, "setEntity:", v27);

  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v26, "setAffectedStores:", isa);

  v58 = v15;
  objc_msgSend(v26, "setPredicate:", v15);
  swift_bridgeObjectRelease();
  swift_release(v24);
  if (qword_1008376D0 != -1)
LABEL_20:
    swift_once(&qword_1008376D0, sub_1004A7024);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  v29 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v26, "setSortDescriptors:", v29);

  if (qword_1008376D8 != -1)
    swift_once(&qword_1008376D8, sub_1004A7104);
  v30 = qword_1008721E0;
  if (!((unint64_t)qword_1008721E0 >> 62))
  {
    v31 = *(_QWORD *)((qword_1008721E0 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(qword_1008721E0);
    v59 = a1;
    if (v31)
      goto LABEL_7;
    goto LABEL_25;
  }
  if (qword_1008721E0 < 0)
    v44 = qword_1008721E0;
  else
    v44 = qword_1008721E0 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(qword_1008721E0, 2);
  v31 = _CocoaArrayWrapper.endIndex.getter(v44);
  swift_bridgeObjectRelease();
  v59 = a1;
  if (!v31)
  {
LABEL_25:
    swift_bridgeObjectRelease();
LABEL_26:
    v45 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v26, "setRelationshipKeyPathsForPrefetching:", v45, swift_bridgeObjectRelease().n128_f64[0]);

    v46 = v56;
    v47 = v57;
    v42 = v59;
    v48 = (void *)NSManagedObjectContext.fetch<A>(_:)(v26, v57);
    if (!v46)
    {
      v62 = v48;
      v49 = sub_10001A630(&qword_10083FF50);
      v50 = sub_1000C4C0C((unint64_t *)&qword_10083A838, &qword_10083FF50);
      v42 = (id)Sequence.elements<A>(ofType:)(v47, v49, v47, v50);
      swift_bridgeObjectRelease();
    }

    return (uint64_t)v42;
  }
LABEL_7:
  v64 = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, v31 & ~(v31 >> 63), 0);
  if (v31 < 0)
    __break(1u);
  v55 = v26;
  v32 = 0;
  a1 = v64;
  v60 = v30 & 0xC000000000000001;
  v26 = (id)v30;
  while (1)
  {
    if (v31 == v32)
    {
      __break(1u);
      goto LABEL_20;
    }
    if (v60)
    {
      v33 = specialized _ArrayBuffer._getElementSlowPath(_:)(v32, v30);
      v34 = v33;
    }
    else
    {
      v34 = *(_QWORD *)(v30 + 8 * v32 + 32);
      v33 = swift_retain();
    }
    v35 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v33);
    if (!v36)
      break;
    v37 = v35;
    v38 = v36;
    swift_release(v34);
    v64 = a1;
    v40 = a1[2];
    v39 = a1[3];
    if (v40 >= v39 >> 1)
    {
      sub_1001C1B0C(v39 > 1, v40 + 1, 1);
      a1 = v64;
    }
    ++v32;
    a1[2] = v40 + 1;
    v41 = &a1[2 * v40];
    v41[4] = v37;
    v41[5] = v38;
    v30 = (uint64_t)v26;
    if (v31 == v32)
    {
      swift_bridgeObjectRelease();
      v26 = v55;
      goto LABEL_26;
    }
  }
  v62 = 0;
  v63 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v52._object = (void *)0x80000001006F8C10;
  v52._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v52);
  v61 = v34;
  v53 = sub_10001A630(&qword_100843760);
  _print_unlocked<A, B>(_:_:)(&v61, &v62, v53, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v62, v63, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
  __break(1u);
  return result;
}

uint64_t sub_10034C0CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100846A10);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100846A10);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_10034C15C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_name, a2);
}

void sub_10034C168(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setName_);
}

uint64_t sub_10034C174(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t v26;
  id v27;
  id v28;
  Class isa;
  Class v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  Class v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  Swift::String v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  id v69;
  unint64_t v70;
  _QWORD *v71;

  v3 = v1;
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v66 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = _s10PredicatesOMa_1(0);
  *(_QWORD *)&v9 = __chkstk_darwin(v8).n128_u64[0];
  v11 = (uint64_t *)((char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v69 = 0;
  v12 = objc_msgSend(v3, "remObjectIDWithError:", &v69, v9);
  v13 = v69;
  if (!v12)
  {
    v40 = v69;
    _convertNSErrorToError(_:)(v13);

    swift_willThrow(v41);
    return (uint64_t)v11;
  }
  v61 = v6;
  v62 = v5;
  *v11 = v12;
  swift_storeEnumTagMultiPayload(v11, v8, 0);
  v14 = v13;
  sub_10000A3AC();
  v16 = v15;
  sub_10001C744((uint64_t)v11, _s10PredicatesOMa_1);
  v17 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v18 = swift_allocObject(v17, 40, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v18 + 32) = v3;
  v69 = (id)v18;
  specialized Array._endMutation()(v18);
  v19 = (unint64_t)v69;
  v60 = v3;
  v20 = sub_10001A630(&qword_10083FCF0);
  v21 = sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
  v22 = sub_1000C4C0C((unint64_t *)&qword_10083FC48, &qword_10083FCF0);
  v23 = sub_1001DF600();
  v24 = Sequence.compactMapToSet<A>(_:)(sub_100303BB8, 0, v20, v21, v22, v23);
  v64 = v2;
  v25 = sub_1001E8870(v24);
  swift_bridgeObjectRelease();
  v26 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v27 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v65 = v26;
  v28 = objc_msgSend((id)swift_getObjCClassFromMetadata(v26), "entity");
  objc_msgSend(v27, "setEntity:", v28);

  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v27, "setAffectedStores:", isa);

  objc_msgSend(v27, "setPredicate:", v16);
  swift_bridgeObjectRelease();
  swift_release(v25);
  if (qword_1008376D0 != -1)
LABEL_20:
    swift_once(&qword_1008376D0, sub_1004A7024);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  v30 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v27, "setSortDescriptors:", v30);

  if (qword_1008376D8 != -1)
    swift_once(&qword_1008376D8, sub_1004A7104);
  v31 = qword_1008721E0;
  if (!((unint64_t)qword_1008721E0 >> 62))
  {
    v32 = *(_QWORD *)((qword_1008721E0 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(qword_1008721E0);
    v63 = v16;
    if (v32)
      goto LABEL_7;
    goto LABEL_25;
  }
  if (qword_1008721E0 < 0)
    v42 = qword_1008721E0;
  else
    v42 = qword_1008721E0 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(qword_1008721E0, 2);
  v32 = _CocoaArrayWrapper.endIndex.getter(v42);
  swift_bridgeObjectRelease();
  v63 = v16;
  if (!v32)
  {
LABEL_25:
    swift_bridgeObjectRelease();
LABEL_26:
    v43 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v27, "setRelationshipKeyPathsForPrefetching:", v43, swift_bridgeObjectRelease().n128_f64[0]);

    v44 = v64;
    v19 = v65;
    v11 = (_QWORD *)a1;
    v45 = (void *)NSManagedObjectContext.fetch<A>(_:)(v27, v65);
    v32 = v44;
    if (!v44)
    {
      v69 = v45;
      v21 = sub_10001A630(&qword_10083FF50);
      a1 = sub_1000C4C0C((unint64_t *)&qword_10083A838, &qword_10083FF50);
      v16 = (id)Sequence.elements<A>(ofType:)(v19, v21, v19, a1);
      swift_bridgeObjectRelease();
      if (qword_100837278 == -1)
      {
LABEL_29:
        v46 = v62;
        v47 = sub_10001AAA8(v62, (uint64_t)qword_100846A10);
        v48 = v66;
        v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v61 + 16))(v66, v47, v46);
        __chkstk_darwin(v49);
        v69 = v16;
        __chkstk_darwin(v50);
        v56 = v48;
        v52 = Sequence.map<A>(skippingError:_:)(sub_10034E2C8, &v57 - 4, sub_10034E2B0, v51, v21, v19, a1);
        if (v32)
        {
          swift_errorRelease(v32);

          v11 = _swiftEmptyArrayStorage;
        }
        else
        {
          v11 = (_QWORD *)v52;

        }
        (*(void (**)(char *, uint64_t))(v61 + 8))(v66, v62);
        swift_bridgeObjectRelease();
        return (uint64_t)v11;
      }
LABEL_35:
      swift_once(&qword_100837278, sub_10034C0CC);
      goto LABEL_29;
    }

    return (uint64_t)v11;
  }
LABEL_7:
  v71 = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, v32 & ~(v32 >> 63), 0);
  if (v32 < 0)
  {
    __break(1u);
    goto LABEL_35;
  }
  v58 = v27;
  v59 = a1;
  a1 = 0;
  v21 = (uint64_t)v71;
  v67 = v31 & 0xC000000000000001;
  v27 = (id)v31;
  while (1)
  {
    if (v32 == a1)
    {
      __break(1u);
      goto LABEL_20;
    }
    if (v67)
    {
      v33 = specialized _ArrayBuffer._getElementSlowPath(_:)(a1, v31);
      v34 = v33;
    }
    else
    {
      v34 = *(_QWORD *)(v31 + 8 * a1 + 32);
      v33 = swift_retain();
    }
    v35 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v33);
    if (!v36)
      break;
    v37 = v35;
    v16 = v36;
    swift_release(v34);
    v71 = (_QWORD *)v21;
    v19 = *(_QWORD *)(v21 + 16);
    v38 = *(_QWORD *)(v21 + 24);
    if (v19 >= v38 >> 1)
    {
      sub_1001C1B0C(v38 > 1, v19 + 1, 1);
      v21 = (uint64_t)v71;
    }
    ++a1;
    *(_QWORD *)(v21 + 16) = v19 + 1;
    v39 = v21 + 16 * v19;
    *(_QWORD *)(v39 + 32) = v37;
    *(_QWORD *)(v39 + 40) = v16;
    v31 = (uint64_t)v27;
    if (v32 == a1)
    {
      swift_bridgeObjectRelease();
      v16 = v63;
      v27 = v58;
      a1 = v59;
      goto LABEL_26;
    }
  }
  v69 = 0;
  v70 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v54._object = (void *)0x80000001006F8C10;
  v54._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v54);
  v68 = v34;
  v55 = sub_10001A630(&qword_100843760);
  _print_unlocked<A, B>(_:_:)(&v68, &v69, v55, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v69, v70, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
  __break(1u);
  return result;
}

id sub_10034C8F4@<X0>(id *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  id v5;
  id v6;
  Swift::String v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  NSString v25;
  uint64_t v26;

  v5 = *a1;
  v6 = objc_msgSend(*a1, "remObjectID");

  if (v6)
  {
    *a3 = v5;
    return v5;
  }
  else
  {
    _StringGuts.grow(_:)(98);
    v8._object = (void *)0x8000000100701770;
    v8._countAndFlagsBits = 0xD000000000000055;
    String.append(_:)(v8);
    v9 = objc_msgSend(a2, "remObjectID", 0);
    if (v9)
    {
      v10 = v9;
      v11 = objc_msgSend(v9, "description");

      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v14 = v13;

    }
    else
    {
      v14 = (void *)0xE300000000000000;
      v12 = 7104878;
    }
    v15 = (void *)objc_opt_self(REMError);
    v16._countAndFlagsBits = v12;
    v16._object = v14;
    String.append(_:)(v16);
    swift_bridgeObjectRelease(v14);
    v17._countAndFlagsBits = 0x203A44496F6D202CLL;
    v17._object = (void *)0xE800000000000000;
    String.append(_:)(v17);
    v18 = objc_msgSend(v5, "objectID");
    v19 = objc_msgSend(v18, "description");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    v23._countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);

    swift_bridgeObjectRelease(v22);
    v24._countAndFlagsBits = 125;
    v24._object = (void *)0xE100000000000000;
    String.append(_:)(v24);
    v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(0xE000000000000000);
    objc_msgSend(v15, "internalErrorWithDebugDescription:", v25);

    return (id)swift_willThrow(v26);
  }
}

uint64_t sub_10034CAF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t result;

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v1 = swift_allocObject(v0, 216, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006B6530;
  *(_QWORD *)(v1 + 32) = swift_getKeyPath(&unk_1006B6680);
  *(_QWORD *)(v1 + 40) = swift_getKeyPath(&unk_1006B66B8);
  *(_QWORD *)(v1 + 48) = swift_getKeyPath(&unk_1006B6708);
  *(_QWORD *)(v1 + 56) = swift_getKeyPath(&unk_1006B6618);
  *(_QWORD *)(v1 + 64) = swift_getKeyPath(&unk_1006B6748);
  *(_QWORD *)(v1 + 72) = swift_getKeyPath(&unk_1006B6598);
  *(_QWORD *)(v1 + 80) = swift_getKeyPath(&unk_1006B6790);
  *(_QWORD *)(v1 + 88) = swift_getKeyPath(&unk_1006B67E0);
  *(_QWORD *)(v1 + 96) = swift_getKeyPath(&unk_1006B6830);
  *(_QWORD *)(v1 + 104) = swift_getKeyPath(&unk_1006B6880);
  *(_QWORD *)(v1 + 112) = swift_getKeyPath(&unk_1006B68D0);
  *(_QWORD *)(v1 + 120) = swift_getKeyPath(&unk_1006B6908);
  *(_QWORD *)(v1 + 128) = swift_getKeyPath(&unk_1006B6948);
  *(_QWORD *)(v1 + 136) = swift_getKeyPath(&unk_1006B6988);
  *(_QWORD *)(v1 + 144) = swift_getKeyPath(&unk_1006B69D0);
  *(_QWORD *)(v1 + 152) = swift_getKeyPath(&unk_1006B6A18);
  *(_QWORD *)(v1 + 160) = swift_getKeyPath(&unk_1006B65D0);
  *(_QWORD *)(v1 + 168) = swift_getKeyPath(&unk_1006B6A60);
  *(_QWORD *)(v1 + 176) = swift_getKeyPath(&unk_1006B6648);
  *(_QWORD *)(v1 + 184) = swift_getKeyPath(&unk_1006B6AB0);
  *(_QWORD *)(v1 + 192) = swift_getKeyPath(&unk_1006B6AE8);
  *(_QWORD *)(v1 + 200) = swift_getKeyPath(&unk_1006B6B20);
  KeyPath = swift_getKeyPath(&unk_1006B6560);
  *(_QWORD *)(v1 + 208) = KeyPath;
  result = specialized Array._endMutation()(KeyPath);
  qword_100871E50 = v1;
  return result;
}

void sub_10034CCC8(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

unint64_t sub_10034CCD0@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s7remindd27RDSynchronizedKeyValueStoreC11ChangeEventV6ReasonO05ubkvsfhC0AGSgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

id sub_10034CCF8@<X0>(id *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  id v5;
  id v6;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  NSString v25;
  uint64_t v26;

  v5 = *a1;
  v6 = objc_msgSend(*a1, "remObjectID");

  if (v6)
  {
    *a3 = v5;
    return v5;
  }
  else
  {
    v8 = 7104878;
    if (a2 && (v9 = objc_msgSend(a2, "remObjectID")) != 0)
    {
      v10 = v9;
      v11 = objc_msgSend(v9, "description");

      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v13 = v12;

    }
    else
    {
      v13 = (void *)0xE300000000000000;
    }
    v14 = (void *)objc_opt_self(REMError);
    _StringGuts.grow(_:)(106);
    v15._object = (void *)0x8000000100701710;
    v15._countAndFlagsBits = 0xD00000000000005DLL;
    String.append(_:)(v15);
    v16._countAndFlagsBits = v8;
    v16._object = v13;
    String.append(_:)(v16);
    swift_bridgeObjectRelease(v13);
    v17._countAndFlagsBits = 0x203A44496F4D202CLL;
    v17._object = (void *)0xE800000000000000;
    String.append(_:)(v17);
    v18 = objc_msgSend(v5, "objectID", 0);
    v19 = objc_msgSend(v18, "description");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    v23._countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);

    swift_bridgeObjectRelease(v22);
    v24._countAndFlagsBits = 125;
    v24._object = (void *)0xE100000000000000;
    String.append(_:)(v24);
    v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(0xE000000000000000);
    objc_msgSend(v14, "internalErrorWithDebugDescription:", v25);

    return (id)swift_willThrow(v26);
  }
}

void sub_10034CF08(char a1@<W0>, char a2@<W1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *ObjCClassFromMetadata;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSString v21;
  id v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  Class isa;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  id v41;
  int v42;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  void *v54;
  Class v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  id v65;
  id v66;
  char *v67;
  char *v68;
  char *v69;
  _QWORD *v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  _OWORD v74[2];
  _QWORD v75[4];
  _QWORD *v76;

  v70 = a4;
  v71 = a3;
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v6);
  v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v73 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v67 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v72 = (char *)&v62 - v13;
  __chkstk_darwin(v12);
  v68 = (char *)&v62 - v14;
  v15 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v15);
  v17 = objc_msgSend(ObjCClassFromMetadata, "cdEntityName");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v19 = v18;

  v20 = objc_allocWithZone((Class)NSFetchRequest);
  v21 = String._bridgeToObjectiveC()();
  v22 = objc_msgSend(v20, "initWithEntityName:", v21, swift_bridgeObjectRelease(v19).n128_f64[0]);

  sub_10034B07C(a2 & 1, 0, a1 + 3);
  v24 = v23;
  objc_msgSend(v22, "setPredicate:", v23);
  v25 = sub_10001A630((uint64_t *)&unk_100839E80);
  v26 = swift_allocObject(v25, 64, 7);
  *(_OWORD *)(v26 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v26 + 56) = &type metadata for String;
  *(_QWORD *)(v26 + 32) = 0x696669746E656469;
  *(_QWORD *)(v26 + 40) = 0xEA00000000007265;
  isa = Array._bridgeToObjectiveC()().super.isa;
  v28 = v26;
  v29 = v22;
  objc_msgSend(v22, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease(v28).n128_f64[0]);

  objc_msgSend(v22, "setResultType:", 2);
  v30 = sub_1000151B0(0, &qword_10083E320, NSDictionary_ptr);
  v31 = v76;
  v32 = NSManagedObjectContext.fetch<A>(_:)(v22, v30);
  if (v31)
  {

    return;
  }
  v33 = v32;
  v65 = v24;
  v63 = ObjCClassFromMetadata;
  if ((unint64_t)v32 >> 62)
  {
    if (v32 < 0)
      v61 = v32;
    else
      v61 = v32 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v32);
    v34 = _CocoaArrayWrapper.endIndex.getter(v61);
  }
  else
  {
    v34 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v32);
  }
  v35 = v70;
  v36 = v73;
  v66 = v29;
  v64 = 0;
  if (v34)
  {
    if (v34 < 1)
    {
      __break(1u);
      return;
    }
    v37 = 0;
    v71 = v33 & 0xC000000000000001;
    v76 = _swiftEmptyArrayStorage;
    v69 = (char *)&type metadata for Any + 8;
    do
    {
      if (v71)
        v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v37, v33);
      else
        v38 = *(id *)(v33 + 8 * v37 + 32);
      v39 = v38;
      *(_QWORD *)&v74[0] = 0x696669746E656469;
      *((_QWORD *)&v74[0] + 1) = 0xEA00000000007265;
      v40 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v74, &type metadata for String);
      v41 = objc_msgSend(v39, "__swift_objectForKeyedSubscript:", v40);
      swift_unknownObjectRelease(v40);
      if (v41)
      {
        _bridgeAnyObjectToAny(_:)(v74, v41);
        swift_unknownObjectRelease(v41);
      }
      else
      {
        memset(v74, 0, sizeof(v74));
      }
      v36 = v73;
      sub_1000A5CA8((uint64_t)v74, (uint64_t)v75, (uint64_t *)&unk_10083D5B0);
      if (v75[3])
      {
        v42 = swift_dynamicCast(v8, v75, v69, v9, 6);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v8, v42 ^ 1u, 1, v9);
      }
      else
      {
        sub_10000882C((uint64_t)v75, (uint64_t *)&unk_10083D5B0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56))(v8, 1, 1, v9);
      }

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v8, 1, v9) == 1)
      {
        sub_10000882C((uint64_t)v8, (uint64_t *)&unk_100839C80);
      }
      else
      {
        v43 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
        v44 = v68;
        v43(v68, v8, v9);
        v43(v72, v44, v9);
        if ((swift_isUniquelyReferenced_nonNull_native(v76) & 1) != 0)
          v45 = (unint64_t)v76;
        else
          v45 = sub_1002C8EC4(0, v76[2] + 1, 1, (unint64_t)v76);
        v47 = *(_QWORD *)(v45 + 16);
        v46 = *(_QWORD *)(v45 + 24);
        if (v47 >= v46 >> 1)
          v45 = sub_1002C8EC4(v46 > 1, v47 + 1, 1, v45);
        *(_QWORD *)(v45 + 16) = v47 + 1;
        v48 = (*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
        v76 = (_QWORD *)v45;
        v43((char *)(v45 + v48 + *(_QWORD *)(v36 + 72) * v47), v72, v9);
        v35 = v70;
      }
      ++v37;
    }
    while (v34 != v37);
  }
  else
  {
    v76 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease_n(v33, 2);
  v49 = v76[2];
  if (v49)
  {
    v75[0] = _swiftEmptyArrayStorage;
    v50 = v76;
    specialized ContiguousArray.reserveCapacity(_:)(v49);
    v51 = (char *)v50 + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
    v52 = *(_QWORD *)(v36 + 72);
    v72 = *(char **)(v36 + 16);
    v73 = v52;
    v53 = v67;
    v54 = v63;
    do
    {
      ((void (*)(char *, char *, uint64_t))v72)(v53, v51, v9);
      v55 = UUID._bridgeToObjectiveC()().super.isa;
      v56 = objc_msgSend(v54, "objectIDWithUUID:", v55);

      v57 = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v53, v9);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v57);
      v58 = *(_QWORD *)(v75[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v58);
      v59 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v58, v56);
      specialized ContiguousArray._endMutation()(v59);
      v51 += v73;
      --v49;
    }
    while (v49);
    v60 = v75[0];
    swift_bridgeObjectRelease(v76);

    *v70 = v60;
  }
  else
  {
    swift_bridgeObjectRelease(v76);

    *v35 = _swiftEmptyArrayStorage;
  }
}

void sub_10034D590(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_externalIdentifier, a2);
}

void sub_10034D5AC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setExternalIdentifier_);
}

void sub_10034D5C8(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_name, a2);
}

void sub_10034D5E4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setName_);
}

uint64_t sub_10034D600(uint64_t result, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
      goto LABEL_3;
    case 1:
    case 2:
    case 6:
      a2 = result;
LABEL_3:
      result = swift_bridgeObjectRetain(a2);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10034D638(uint64_t a1, _QWORD *a2, Class a3)
{
  void *v3;
  id v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  Class isa;
  _QWORD *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  Class v47;
  Class v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t result;
  Swift::String v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  id v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t *v70;
  uint64_t v71;
  id v72;
  unint64_t v73;
  _QWORD *v74;

  v4 = v3;
  v69 = a2;
  v7 = type metadata accessor for Logger(0);
  v67 = *(_QWORD *)(v7 - 8);
  v68 = v7;
  __chkstk_darwin(v7);
  v66 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = _s10PredicatesOMa_3(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v62 - v13;
  if (a1)
  {
    v72 = 0;
    v15 = (id)a1;
    v16 = objc_msgSend(v15, "remObjectIDWithError:", &v72);
    v17 = v72;
    if (!v16)
    {
      v44 = v72;
      _convertNSErrorToError(_:)(v17);

      swift_willThrow(v45);
      goto LABEL_32;
    }
    v18 = v16;
    v65 = a1;
    *(_QWORD *)v14 = v16;
    swift_storeEnumTagMultiPayload(v14, v9, 3);
    v19 = v17;
    v70 = v18;
    sub_1000069D8();
    v21 = v20;
    v22 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v23 = swift_allocObject(v22, 40, 7);
    *(_OWORD *)(v23 + 16) = xmmword_1006A7330;
    *(_QWORD *)(v23 + 32) = v15;
    v72 = (id)v23;
    specialized Array._endMutation()(v23);
    v64 = v15;
    v24 = sub_10001A630(&qword_10083FCF0);
    a1 = sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
    v15 = (id)sub_1000C4C0C((unint64_t *)&qword_10083FC48, &qword_10083FCF0);
    v25 = sub_1001DF600();
    v26 = Sequence.compactMapToSet<A>(_:)(sub_100303BB8, 0, v24, a1, v15, v25);
    v27 = sub_1001E8870(v26);
    swift_bridgeObjectRelease();
    v28 = sub_1000151B0(0, (unint64_t *)&unk_100840000, off_1007D6720);
    v29 = (unint64_t)objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    v30 = objc_msgSend((id)swift_getObjCClassFromMetadata(v28), "entity");
    objc_msgSend((id)v29, "setEntity:", v30);

    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend((id)v29, "setAffectedStores:", isa);

    objc_msgSend((id)v29, "setPredicate:", v21);
    swift_bridgeObjectRelease();
    swift_release(v27);
    v11 = v14;
  }
  else
  {
    swift_storeEnumTagMultiPayload(v11, v9, 8);
    sub_1000069D8();
    v21 = v32;
    v33 = sub_1000151B0(0, (unint64_t *)&unk_100840000, off_1007D6720);
    v29 = (unint64_t)objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    v34 = objc_msgSend((id)swift_getObjCClassFromMetadata(v33), "entity");
    v15 = (id)v29;
    objc_msgSend((id)v29, "setEntity:", v34);

    v65 = 0;
    if (a3)
    {
      sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
      a3 = Array._bridgeToObjectiveC()().super.isa;
    }
    objc_msgSend((id)v29, "setAffectedStores:", a3);

    objc_msgSend((id)v29, "setPredicate:", v21);
  }
  sub_10001C744((uint64_t)v11, _s10PredicatesOMa_3);
  if (qword_1008378F8 != -1)
LABEL_23:
    swift_once(&qword_1008378F8, sub_10058B568);
  v35 = qword_100872278;
  if (!((unint64_t)qword_100872278 >> 62))
  {
    v36 = *(_QWORD *)((qword_100872278 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(qword_100872278);
    if (v36)
      goto LABEL_10;
    goto LABEL_28;
  }
  if (qword_100872278 < 0)
    v46 = qword_100872278;
  else
    v46 = qword_100872278 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(qword_100872278, 2);
  v36 = _CocoaArrayWrapper.endIndex.getter(v46);
  swift_bridgeObjectRelease();
  if (!v36)
  {
LABEL_28:
    swift_bridgeObjectRelease();
LABEL_29:
    v47 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend((id)v29, "setRelationshipKeyPathsForPrefetching:", v47, swift_bridgeObjectRelease().n128_f64[0]);

    if (qword_100837900 != -1)
      swift_once(&qword_100837900, sub_10058B5F8);
    sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
    v48 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend((id)v29, "setSortDescriptors:", v48);

    v21 = (_QWORD *)sub_1000151B0(0, (unint64_t *)&unk_100840000, off_1007D6720);
    v15 = (id)v29;
    v44 = v69;
    v49 = NSManagedObjectContext.fetch<A>(_:)(v29, v21);
    a1 = (uint64_t)v4;
    if (!v4)
    {
      v36 = v49;
      if (qword_100837278 == -1)
      {
LABEL_34:
        v50 = v68;
        v51 = sub_10001AAA8(v68, (uint64_t)qword_100846A10);
        v52 = v66;
        v53 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 16))(v66, v51, v50);
        v70 = &v62;
        __chkstk_darwin(v53);
        v72 = (id)v36;
        __chkstk_darwin(v54);
        v61 = v52;
        v55 = sub_10001A630((uint64_t *)&unk_100851970);
        v56 = sub_1000C4C0C((unint64_t *)&qword_100840F90, (uint64_t *)&unk_100851970);
        v57 = Sequence.map<A>(skippingError:_:)(sub_10034E2A4, &v62 - 4, sub_10034E28C, &v62 - 4, v55, v21, v56);
        if (a1)
        {
          swift_errorRelease(a1);

          v44 = _swiftEmptyArrayStorage;
        }
        else
        {
          v44 = (_QWORD *)v57;

        }
        (*(void (**)(char *, uint64_t))(v67 + 8))(v66, v68);
        swift_bridgeObjectRelease();
        return (uint64_t)v44;
      }
LABEL_40:
      swift_once(&qword_100837278, sub_10034C0CC);
      goto LABEL_34;
    }
LABEL_32:

    return (uint64_t)v44;
  }
LABEL_10:
  v74 = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, v36 & ~(v36 >> 63), 0);
  if (v36 < 0)
  {
    __break(1u);
    goto LABEL_40;
  }
  v63 = v29;
  v64 = v4;
  a1 = 0;
  v21 = v74;
  v70 = (uint64_t *)(v35 & 0xC000000000000001);
  v15 = (id)v35;
  while (1)
  {
    if (v36 == a1)
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v70)
    {
      v37 = specialized _ArrayBuffer._getElementSlowPath(_:)(a1, v35);
      v38 = v37;
    }
    else
    {
      v38 = *(_QWORD *)(v35 + 8 * a1 + 32);
      v37 = swift_retain();
    }
    v39 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v37);
    if (!v40)
      break;
    v4 = (id)v39;
    v41 = v40;
    swift_release(v38);
    v74 = v21;
    v29 = v21[2];
    v42 = v21[3];
    if (v29 >= v42 >> 1)
    {
      sub_1001C1B0C(v42 > 1, v29 + 1, 1);
      v21 = v74;
    }
    ++a1;
    v21[2] = v29 + 1;
    v43 = &v21[2 * v29];
    v43[4] = v4;
    v43[5] = v41;
    v35 = (uint64_t)v15;
    if (v36 == a1)
    {
      swift_bridgeObjectRelease();
      v29 = v63;
      v4 = v64;
      goto LABEL_29;
    }
  }
  v72 = 0;
  v73 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v59._object = (void *)0x80000001006F8C10;
  v59._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v59);
  v71 = v38;
  v60 = sub_10001A630(&qword_10083FD40);
  _print_unlocked<A, B>(_:_:)(&v71, &v72, v60, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v72, v73, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
  __break(1u);
  return result;
}

uint64_t sub_10034DEDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t inited;
  char v22[16];
  uint64_t v23;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
  v10 = NSManagedObjectContext.fetch<A>(_:)(a1, v9);
  if (!v2)
  {
    v11 = v10;
    v12 = type metadata accessor for REMAccountStorageCDIngestor();
    inited = swift_initStackObject(v12, v22);
    if (qword_100837278 != -1)
      swift_once(&qword_100837278, sub_10034C0CC);
    v13 = sub_10001AAA8(v5, (uint64_t)qword_100846A10);
    v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v13, v5);
    v20 = (uint64_t)&v20;
    v23 = v11;
    __chkstk_darwin(v14);
    *(&v20 - 2) = (uint64_t)v8;
    v15 = sub_10001A630(&qword_10083FE60);
    v16 = sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
    v17 = sub_1000C4C0C((unint64_t *)&qword_100843190, &qword_10083FE60);
    v18 = inited;
    a2 = Sequence.map<A>(skippingError:_:)(sub_1002A7AD0, &v20 - 4, sub_1002A6DFC, inited, v15, v16, v17);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_release(v18);
  }
  return a2;
}

id sub_10034E0EC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v12;

  if (qword_100837958 != -1)
    goto LABEL_16;
  while (1)
  {
    v2 = qword_100872288;
    v3 = (void *)swift_retain();
    v4 = sub_1003011F8(v3);
    swift_release(v2);
    if (v4)
      return v4;
    v5 = objc_msgSend((id)objc_opt_self(REMCDAccount), "allCloudKitAccountsInContext:", a1);
    v6 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
    a1 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

    if ((unint64_t)a1 >> 62)
    {
      if (a1 < 0)
        v12 = a1;
      else
        v12 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v7 = _CocoaArrayWrapper.endIndex.getter(v12);
      if (!v7)
      {
LABEL_12:
        swift_bridgeObjectRelease_n(a1, 2);
        return 0;
      }
    }
    else
    {
      v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a1);
      if (!v7)
        goto LABEL_12;
    }
    v8 = 4;
    while (1)
    {
      v9 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a1)
         : *(id *)(a1 + 8 * v8);
      v4 = v9;
      v10 = v8 - 3;
      if (__OFADD__(v8 - 4, 1))
        break;
      if ((objc_msgSend(v9, "inactive") & 1) == 0)
      {
        swift_bridgeObjectRelease_n(a1, 2);
        return v4;
      }

      ++v8;
      if (v10 == v7)
        goto LABEL_12;
    }
    __break(1u);
LABEL_16:
    swift_once(&qword_100837958, sub_1005B83A8);
  }
}

id sub_10034E28C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_10034CCF8(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_10034E2A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10037F210(a2, *(_QWORD *)(v2 + 16));
}

id sub_10034E2B0@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_10034C8F4(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_10034E2C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100381520(a2, *(_QWORD *)(v2 + 16));
}

const char *sub_10034E2D4()
{
  return "daPushKey";
}

void sub_10034E2E0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_daPushKey, a2);
}

void sub_10034E2FC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setDaPushKey_);
}

const char *sub_10034E318()
{
  return "daSyncToken";
}

void sub_10034E324(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_daSyncToken, a2);
}

void sub_10034E340(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setDaSyncToken_);
}

const char *sub_10034E35C()
{
  return "effectiveMinimumSupportedAppVersion";
}

id sub_10034E368@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "effectiveMinimumSupportedAppVersion");
  *a2 = result;
  return result;
}

id sub_10034E398(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setEffectiveMinimumSupportedAppVersion:", *a1);
}

const char *sub_10034E3AC()
{
  return "externalModificationTag";
}

void sub_10034E3B8(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_externalModificationTag, a2);
}

void sub_10034E3D4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setExternalModificationTag_);
}

id sub_10034E3F0@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "minimumSupportedAppVersion");
  *a2 = result;
  return result;
}

id sub_10034E420(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setMinimumSupportedAppVersion:", *a1);
}

void sub_10034E434(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100166024(a1, (SEL *)&selRef_resolutionTokenMap_v3_JSONData, a2);
}

void sub_10034E450(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_100166084(a1, a2, a3, a4, (SEL *)&selRef_setResolutionTokenMap_v3_JSONData_);
}

const char *sub_10034E46C()
{
  return "daAllowsCalendarAddDeleteModify";
}

id sub_10034E478@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "daAllowsCalendarAddDeleteModify");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10034E4A8(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setDaAllowsCalendarAddDeleteModify:", *a1);
}

const char *sub_10034E4BC()
{
  return "daConstraintsDescriptionPath";
}

void sub_10034E4C8(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_daConstraintsDescriptionPath, a2);
}

void sub_10034E4E4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setDaConstraintsDescriptionPath_);
}

const char *sub_10034E500()
{
  return "daSupportsSharedCalendars";
}

id sub_10034E50C@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "daSupportsSharedCalendars");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10034E53C(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setDaSupportsSharedCalendars:", *a1);
}

const char *sub_10034E550()
{
  return "daWasMigrated";
}

id sub_10034E55C@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "daWasMigrated");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10034E58C(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setDaWasMigrated:", *a1);
}

const char *sub_10034E5A0()
{
  return "debugSyncDisabled";
}

id sub_10034E5AC@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "debugSyncDisabled");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10034E5DC(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setDebugSyncDisabled:", *a1);
}

const char *sub_10034E5F0()
{
  return "didChooseToMigrate";
}

id sub_10034E5FC@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "didChooseToMigrate");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10034E62C(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setDidChooseToMigrate:", *a1);
}

const char *sub_10034E640()
{
  return "didChooseToMigrateLocally";
}

id sub_10034E64C@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "didChooseToMigrateLocally");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10034E67C(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setDidChooseToMigrateLocally:", *a1);
}

const char *sub_10034E690()
{
  return "didFinishMigration";
}

id sub_10034E69C@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "didFinishMigration");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10034E6CC(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setDidFinishMigration:", *a1);
}

const char *sub_10034E6E0()
{
  return "listIDsMergeableOrdering_v2";
}

void sub_10034E6EC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100166024(a1, (SEL *)&selRef_listIDsMergeableOrdering_v2, a2);
}

void sub_10034E708(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_100166084(a1, a2, a3, a4, (SEL *)&selRef_setListIDsMergeableOrdering_v2_);
}

const char *sub_10034E724()
{
  return "persistenceCloudSchemaVersion";
}

id sub_10034E730@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "persistenceCloudSchemaVersion");
  *a2 = result;
  return result;
}

id sub_10034E760(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setPersistenceCloudSchemaVersion:", *a1);
}

const char *sub_10034E77C()
{
  return "personIDSalt_v1";
}

uint64_t _s16AccountSortOrderOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10034E7DC + 4 * byte_1006B6553[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10034E810 + 4 * byte_1006B654E[v4]))();
}

uint64_t sub_10034E810(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10034E818(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10034E820);
  return result;
}

uint64_t sub_10034E82C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10034E834);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10034E838(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10034E840(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s16AccountSortOrderOMa()
{
  return &_s16AccountSortOrderON;
}

unint64_t sub_10034E860()
{
  unint64_t result;

  result = qword_100846A30;
  if (!qword_100846A30)
  {
    result = swift_getWitnessTable(&unk_1006B6BDC, &_s16AccountSortOrderON);
    atomic_store(result, (unint64_t *)&qword_100846A30);
  }
  return result;
}

uint64_t sub_10034E8A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  Class isa;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  NSString v35;
  id v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t result;
  uint64_t v52;
  Swift::String v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  id v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _OWORD v66[2];
  __int128 v67;
  void *v68;
  char v69[48];
  _QWORD *v70;

  v2 = v1;
  v4 = (_QWORD *)sub_10001A630((uint64_t *)&unk_100839C80);
  v61 = *(v4 - 1);
  __chkstk_darwin(v4);
  v65 = (uint64_t)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10020B5C4(a1, 64);
  v7 = v6;
  v8 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v9 = sub_1000151B0(0, &qword_100840C00, off_1007D6688);
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v9), "entity");
  objc_msgSend(v8, "setEntity:", v10);

  objc_msgSend(v8, "setAffectedStores:", 0);
  objc_msgSend(v8, "setPredicate:", v7);
  objc_msgSend(v8, "setResultType:", 2);

  v60 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v60, v69);
  v59 = xmmword_1006A7330;
  *(_OWORD *)(inited + 16) = xmmword_1006A7330;
  KeyPath = swift_getKeyPath(&unk_1006B6CE0);
  *(_QWORD *)(inited + 32) = KeyPath;
  *(_QWORD *)&v67 = inited;
  specialized Array._endMutation()(KeyPath);
  v13 = v67;
  *(_QWORD *)&v66[0] = _swiftEmptyArrayStorage;
  sub_1001C1C48(0, 1, 0);
  v14 = *(_QWORD *)&v66[0];
  if ((v13 & 0xC000000000000001) != 0)
  {
    v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v13);
    v16 = v15;
  }
  else
  {
    v16 = *(_QWORD *)(v13 + 32);
    v15 = swift_retain();
  }
  v17 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v15);
  if (v18)
  {
    v19 = v17;
    v20 = v18;
    v68 = &type metadata for String;
    swift_release(v16);
    *(_QWORD *)&v67 = v19;
    *((_QWORD *)&v67 + 1) = v20;
    v22 = *(_QWORD *)(v14 + 16);
    v21 = *(_QWORD *)(v14 + 24);
    v16 = v22 + 1;
    if (v22 >= v21 >> 1)
    {
LABEL_39:
      sub_1001C1C48(v21 > 1, v16, 1);
      v14 = *(_QWORD *)&v66[0];
    }
    *(_QWORD *)(v14 + 16) = v16;
    sub_10001A6CC(&v67, (_OWORD *)(v14 + 32 * v22 + 32));
    swift_bridgeObjectRelease();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_release(v14);
    objc_msgSend(v8, "setPropertiesToFetch:", isa);

    v24 = sub_1000151B0(0, &qword_10083E320, NSDictionary_ptr);
    v25 = NSManagedObjectContext.fetch<A>(_:)(v8, v24);
    if (v2)
    {

    }
    else
    {
      v2 = v25;
      v70 = _swiftEmptyDictionarySingleton;
      if ((unint64_t)v25 >> 62)
      {
        if (v25 < 0)
          v52 = v25;
        else
          v52 = v25 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v25);
        v26 = _CocoaArrayWrapper.endIndex.getter(v52);
        swift_bridgeObjectRelease();
      }
      else
      {
        v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v57 = 0;
      v58 = v8;
      if (v26)
      {
        v56 = v4;
        v64 = v2 & 0xC000000000000001;
        v4 = _swiftEmptyDictionarySingleton;
        v22 = 4;
        v62 = (char *)&type metadata for Any + 8;
        v63 = 0x80000001006B6CA0;
        v27 = v65;
        while (1)
        {
          if (v64)
            v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22 - 4, v2);
          else
            v33 = *(id *)(v2 + 8 * v22);
          v34 = v33;
          v8 = (id)(v22 - 3);
          if (__OFADD__(v22 - 4, 1))
          {
            __break(1u);
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            goto LABEL_39;
          }
          v16 = v26;
          v35 = String._bridgeToObjectiveC()();
          v36 = objc_msgSend(v34, "valueForKey:", v35);

          if (v36)
          {
            _bridgeAnyObjectToAny(_:)(v66, v36);
            swift_unknownObjectRelease(v36);
          }
          else
          {
            memset(v66, 0, sizeof(v66));
          }
          sub_1000A5CA8((uint64_t)v66, (uint64_t)&v67, (uint64_t *)&unk_10083D5B0);
          if (v68)
          {
            v37 = type metadata accessor for UUID(0);
            v38 = swift_dynamicCast(v27, &v67, v62, v37, 6);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v27, v38 ^ 1u, 1, v37);
          }
          else
          {
            sub_10000882C((uint64_t)&v67, (uint64_t *)&unk_10083D5B0);
            v39 = type metadata accessor for UUID(0);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v27, 1, 1, v39);
          }
          v41 = sub_1002C6CCC(v27);
          v21 = v4[2];
          v42 = (v40 & 1) == 0;
          v43 = v21 + v42;
          if (__OFADD__(v21, v42))
            goto LABEL_37;
          v44 = v40;
          if (v4[3] < v43)
          {
            sub_1002D0CE4(v43, 1);
            v4 = v70;
            v45 = sub_1002C6CCC(v65);
            if ((v44 & 1) != (v46 & 1))
            {
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v56);
              __break(1u);
              goto LABEL_45;
            }
            v41 = v45;
          }
          if ((v44 & 1) != 0)
          {
            v27 = v65;
            v28 = sub_10000882C(v65, (uint64_t *)&unk_100839C80);
            v4 = v70;
            v29 = (_QWORD *)(v70[7] + 8 * v41);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v28);
            v31 = *(_QWORD *)((*v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v30 = *(_QWORD *)((*v29 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v31 >= v30 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1);
            v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v34);
            specialized Array._endMutation()(v32);
          }
          else
          {
            v47 = swift_allocObject(v60, 40, 7);
            *(_OWORD *)(v47 + 16) = v59;
            *(_QWORD *)(v47 + 32) = v34;
            *(_QWORD *)&v67 = v47;
            specialized Array._endMutation()(v47);
            v48 = v67;
            v4[(v41 >> 6) + 8] |= 1 << v41;
            v27 = v65;
            sub_1000A5CA8(v65, v4[6] + *(_QWORD *)(v61 + 72) * v41, (uint64_t *)&unk_100839C80);
            *(_QWORD *)(v4[7] + 8 * v41) = v48;
            v49 = v4[2];
            v50 = __OFADD__(v49, 1);
            v21 = v49 + 1;
            if (v50)
              goto LABEL_38;
            v4[2] = v21;
          }
          ++v22;
          v26 = v16;
          if (v8 == (id)v16)
            goto LABEL_34;
        }
      }
      v4 = _swiftEmptyDictionarySingleton;
LABEL_34:

      swift_bridgeObjectRelease();
    }
    return (uint64_t)v4;
  }
  else
  {
LABEL_45:
    *(_QWORD *)&v67 = 0;
    *((_QWORD *)&v67 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v53._countAndFlagsBits = 0xD00000000000002CLL;
    v53._object = (void *)0x80000001006F8C10;
    String.append(_:)(v53);
    v70 = (_QWORD *)v16;
    v54 = sub_10001A630(&qword_1008436D0);
    _print_unlocked<A, B>(_:_:)(&v70, &v67, v54, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v67, *((_QWORD *)&v67 + 1), "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_10034EF84(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  Class isa;
  double v53;
  id v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  id v62;
  NSString v63;
  id v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  _QWORD *v68;
  _BOOL8 v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t result;
  uint64_t v78;
  Swift::String v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  Swift::String v83;
  uint64_t v84;
  _QWORD v85[2];
  uint64_t v86;
  id v87;
  __int128 v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  void *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  _OWORD v96[2];
  _BYTE v97[40];
  void *v98;
  __int128 v99;
  void *v100;
  _BYTE v101[40];
  _QWORD *v102;

  v94 = a2;
  v3 = sub_10001A630((uint64_t *)&unk_100839C80);
  v89 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10020B528(a1, 32);
  v7 = v6;
  v8 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v9 = sub_1000151B0(0, &qword_100840C10, off_1007D6670);
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v9), "entity");
  objc_msgSend(v8, "setEntity:", v10);

  objc_msgSend(v8, "setAffectedStores:", 0);
  objc_msgSend(v8, "setPredicate:", v7);
  v87 = v8;
  objc_msgSend(v8, "setResultType:", 2);

  v91 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v91, v101);
  *(_OWORD *)(inited + 16) = xmmword_1006AAD80;
  *(_QWORD *)(inited + 32) = swift_getKeyPath(&unk_1006B6C30);
  *(_QWORD *)(inited + 40) = swift_getKeyPath(&unk_1006B6C60);
  KeyPath = swift_getKeyPath(&unk_1006B6C98);
  *(_QWORD *)(inited + 48) = KeyPath;
  *(_QWORD *)&v99 = inited;
  specialized Array._endMutation()(KeyPath);
  v13 = v99;
  v14 = _swiftEmptyArrayStorage;
  v102 = _swiftEmptyArrayStorage;
  sub_1001C1C48(0, 3, 0);
  v15 = v102;
  v16 = v13 & 0xC000000000000001;
  v86 = v3;
  if ((v13 & 0xC000000000000001) != 0)
  {
    v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v13);
    v18 = (void *)v17;
  }
  else
  {
    v18 = *(void **)(v13 + 32);
    v17 = swift_retain();
  }
  v19 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v17);
  if (!v20)
    goto LABEL_63;
  v21 = v19;
  v22 = v20;
  v23 = &type metadata for String;
  v100 = &type metadata for String;
  swift_release(v18);
  *(_QWORD *)&v99 = v21;
  *((_QWORD *)&v99 + 1) = v22;
  v25 = v15[2];
  v24 = v15[3];
  v18 = (void *)(v25 + 1);
  if (v25 >= v24 >> 1)
  {
LABEL_57:
    sub_1001C1C48(v24 > 1, (int64_t)v18, 1);
    v15 = v102;
  }
  v15[2] = v18;
  sub_10001A6CC(&v99, &v15[4 * v25 + 4]);
  if (v16)
  {
    v26 = specialized _ArrayBuffer._getElementSlowPath(_:)(1, v13);
    v18 = (void *)v26;
  }
  else
  {
    v18 = *(void **)(v13 + 40);
    v26 = swift_retain();
  }
  v27 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v26);
  if (!v28)
    goto LABEL_63;
  v29 = v27;
  v30 = v28;
  v100 = v23;
  swift_release(v18);
  *(_QWORD *)&v99 = v29;
  *((_QWORD *)&v99 + 1) = v30;
  v102 = v15;
  v32 = v15[2];
  v31 = v15[3];
  if (v32 >= v31 >> 1)
  {
    sub_1001C1C48(v31 > 1, v32 + 1, 1);
    v15 = v102;
  }
  v15[2] = v32 + 1;
  sub_10001A6CC(&v99, &v15[4 * v32 + 4]);
  if (v16)
  {
    v33 = specialized _ArrayBuffer._getElementSlowPath(_:)(2, v13);
    v18 = (void *)v33;
  }
  else
  {
    v18 = *(void **)(v13 + 48);
    v33 = swift_retain();
  }
  v34 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v33);
  if (!v35)
  {
LABEL_63:
    *(_QWORD *)&v96[0] = 0;
    *((_QWORD *)&v96[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v79._object = (void *)0x80000001006F8C10;
    v79._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v79);
    v98 = v18;
    v80 = sub_10001A630(&qword_1008438C8);
    _print_unlocked<A, B>(_:_:)(&v98, v96, v80, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v82 = *((_QWORD *)&v96[0] + 1);
    v81 = *(_QWORD *)&v96[0];
LABEL_65:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v81, v82, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
    return result;
  }
  v36 = v34;
  v37 = v35;
  v100 = v23;
  swift_release(v18);
  *(_QWORD *)&v99 = v36;
  *((_QWORD *)&v99 + 1) = v37;
  v102 = v15;
  v39 = v15[2];
  v38 = v15[3];
  if (v39 >= v38 >> 1)
  {
    sub_1001C1C48(v38 > 1, v39 + 1, 1);
    v15 = v102;
  }
  v15[2] = v39 + 1;
  sub_10001A6CC(&v99, &v15[4 * v39 + 4]);
  swift_bridgeObjectRelease();
  v40 = swift_initStackObject(v91, v97);
  v88 = xmmword_1006A7330;
  *(_OWORD *)(v40 + 16) = xmmword_1006A7330;
  v41 = swift_getKeyPath(&unk_1006B6CE0);
  *(_QWORD *)(v40 + 32) = v41;
  *(_QWORD *)&v99 = v40;
  specialized Array._endMutation()(v41);
  v42 = v99;
  *(_QWORD *)&v96[0] = v14;
  sub_1001C1C48(0, 1, 0);
  v43 = *(_QWORD *)&v96[0];
  if ((v42 & 0xC000000000000001) != 0)
  {
    v44 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v42);
    v45 = (_QWORD *)v44;
  }
  else
  {
    v45 = *(_QWORD **)(v42 + 32);
    v44 = swift_retain();
  }
  v46 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v44);
  if (!v47)
  {
    *(_QWORD *)&v99 = 0;
    *((_QWORD *)&v99 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v83._object = (void *)0x80000001006F8C10;
    v83._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v83);
    v102 = v45;
    v84 = sub_10001A630(&qword_1008436D0);
    _print_unlocked<A, B>(_:_:)(&v102, &v99, v84, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v82 = *((_QWORD *)&v99 + 1);
    v81 = v99;
    goto LABEL_65;
  }
  v48 = v46;
  v49 = v47;
  v100 = v23;
  swift_release(v45);
  *(_QWORD *)&v99 = v48;
  *((_QWORD *)&v99 + 1) = v49;
  v51 = *(_QWORD *)(v43 + 16);
  v50 = *(_QWORD *)(v43 + 24);
  if (v51 >= v50 >> 1)
  {
    sub_1001C1C48(v50 > 1, v51 + 1, 1);
    v43 = *(_QWORD *)&v96[0];
  }
  *(_QWORD *)(v43 + 16) = v51 + 1;
  sub_10001A6CC(&v99, (_OWORD *)(v43 + 32 * v51 + 32));
  swift_bridgeObjectRelease();
  *(_QWORD *)&v99 = v15;
  sub_1001E09F4(v43);
  isa = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v53 = swift_bridgeObjectRelease().n128_u64[0];
  v54 = v87;
  objc_msgSend(v87, "setPropertiesToFetch:", isa, v53);

  v55 = sub_1000151B0(0, &qword_10083E320, NSDictionary_ptr);
  v56 = v95;
  v57 = NSManagedObjectContext.fetch<A>(_:)(v54, v55);
  if (v56)
  {

  }
  else
  {
    v16 = v57;
    v102 = _swiftEmptyDictionarySingleton;
    if ((unint64_t)v57 >> 62)
    {
      if (v57 < 0)
        v78 = v57;
      else
        v78 = v57 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v57);
      v25 = _CocoaArrayWrapper.endIndex.getter(v78);
      swift_bridgeObjectRelease();
    }
    else
    {
      v25 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v85[1] = 0;
    if (v25)
    {
      v95 = v16 & 0xC000000000000001;
      v15 = _swiftEmptyDictionarySingleton;
      v13 = 4;
      v94 = 0xD000000000000019;
      v93 = 0x80000001006B6CA0;
      v14 = &unk_10083D5B0;
      v90 = (char *)&type metadata for Any + 8;
      v92 = (void *)v25;
      while (1)
      {
        if (v95)
          v62 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, v16);
        else
          v62 = *(id *)(v16 + 8 * v13);
        v18 = v62;
        v23 = (void *)(v13 - 3);
        if (__OFADD__(v13 - 4, 1))
        {
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
          goto LABEL_57;
        }
        v63 = String._bridgeToObjectiveC()();
        v64 = objc_msgSend(v18, "valueForKey:", v63);

        if (v64)
        {
          _bridgeAnyObjectToAny(_:)(v96, v64);
          swift_unknownObjectRelease(v64);
        }
        else
        {
          memset(v96, 0, sizeof(v96));
        }
        sub_1000A5CA8((uint64_t)v96, (uint64_t)&v99, (uint64_t *)&unk_10083D5B0);
        if (v100)
        {
          v65 = type metadata accessor for UUID(0);
          v66 = swift_dynamicCast(v5, &v99, v90, v65, 6);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v5, v66 ^ 1u, 1, v65);
        }
        else
        {
          sub_10000882C((uint64_t)&v99, (uint64_t *)&unk_10083D5B0);
          v67 = type metadata accessor for UUID(0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v5, 1, 1, v67);
        }
        v25 = sub_1002C6CCC((uint64_t)v5);
        v24 = v15[2];
        v69 = (v68 & 1) == 0;
        v70 = v24 + v69;
        if (__OFADD__(v24, v69))
          goto LABEL_55;
        v14 = v68;
        if (v15[3] < v70)
        {
          sub_1002D0CE4(v70, 1);
          v15 = v102;
          v71 = sub_1002C6CCC((uint64_t)v5);
          if ((v14 & 1) != (v72 & 1))
          {
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v86);
            __break(1u);
            goto LABEL_63;
          }
          v25 = v71;
        }
        if ((v14 & 1) != 0)
        {
          v58 = sub_10000882C((uint64_t)v5, (uint64_t *)&unk_100839C80);
          v15 = v102;
          v59 = (_QWORD *)(v102[7] + 8 * v25);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v58);
          v25 = *(_QWORD *)((*v59 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v60 = *(_QWORD *)((*v59 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v25 >= v60 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v60 > 1);
          v61 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v18);
          specialized Array._endMutation()(v61);
        }
        else
        {
          v73 = swift_allocObject(v91, 40, 7);
          *(_OWORD *)(v73 + 16) = v88;
          *(_QWORD *)(v73 + 32) = v18;
          *(_QWORD *)&v99 = v73;
          specialized Array._endMutation()(v73);
          v74 = v99;
          v15[(v25 >> 6) + 8] |= 1 << v25;
          sub_1000A5CA8((uint64_t)v5, v15[6] + *(_QWORD *)(v89 + 72) * v25, (uint64_t *)&unk_100839C80);
          *(_QWORD *)(v15[7] + 8 * v25) = v74;
          v75 = v15[2];
          v76 = __OFADD__(v75, 1);
          v24 = v75 + 1;
          if (v76)
            goto LABEL_56;
          v15[2] = v24;
        }
        v14 = &unk_10083D5B0;
        ++v13;
        if (v23 == v92)
          goto LABEL_52;
      }
    }
    v15 = _swiftEmptyDictionarySingleton;
LABEL_52:

    swift_bridgeObjectRelease();
  }
  return (uint64_t)v15;
}

const char *sub_10034F974()
{
  return "contactLabel";
}

void sub_10034F980(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_contactLabel, a2);
}

void sub_10034F99C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setContactLabel_);
}

const char *sub_10034F9C0()
{
  return "proximity";
}

id sub_10034F9CC@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "proximity");
  *a2 = (_WORD)result;
  return result;
}

id sub_10034F9FC(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, "setProximity:", *a1);
}

id sub_10034FA18@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "reminder");
  *a2 = result;
  return result;
}

id sub_10034FA50(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setReminder:", *a1);
}

_QWORD *sub_10034FA6C(unint64_t a1)
{
  uint64_t v1;
  char *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  Class isa;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  Class v62;
  id v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  id v73;
  void *v74;
  NSString v75;
  int v76;
  uint64_t v77;
  char v78;
  _BOOL8 v79;
  uint64_t v80;
  char v81;
  unint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v88;
  Swift::String v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  Swift::String v94;
  uint64_t v95;
  Swift::String v96;
  _QWORD v97[2];
  uint64_t v98;
  id v99;
  __int128 v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  unint64_t v106;
  unint64_t v107;
  _QWORD v108[4];
  _BYTE v109[48];
  unint64_t v110;
  _BYTE v111[48];
  __int128 v112;
  void *v113;
  _BYTE v114[8];
  _QWORD *v115;

  v106 = a1;
  v98 = sub_10001A630((uint64_t *)&unk_100839C80);
  v101 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v2 = (char *)v97 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10020B528(4, 160);
  v4 = v3;
  v5 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v6 = sub_1000151B0(0, &qword_100840C10, off_1007D6670);
  v7 = objc_msgSend((id)swift_getObjCClassFromMetadata(v6), "entity");
  objc_msgSend(v5, "setEntity:", v7);

  objc_msgSend(v5, "setAffectedStores:", 0);
  objc_msgSend(v5, "setPredicate:", v4);
  v99 = v5;
  objc_msgSend(v5, "setResultType:", 2);

  v103 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v103, v114);
  *(_OWORD *)(inited + 16) = xmmword_1006B6C10;
  *(_QWORD *)(inited + 32) = swift_getKeyPath(&unk_1006B6D50);
  *(_QWORD *)(inited + 40) = swift_getKeyPath(&unk_1006B6D88);
  *(_QWORD *)(inited + 48) = swift_getKeyPath(&unk_1006B6DB8);
  KeyPath = swift_getKeyPath(&unk_1006B6DF0);
  *(_QWORD *)(inited + 56) = KeyPath;
  *(_QWORD *)&v112 = inited;
  specialized Array._endMutation()(KeyPath);
  v10 = v112;
  v108[0] = _swiftEmptyArrayStorage;
  sub_1001C1C48(0, 4, 0);
  v11 = 0;
  v12 = v108[0];
  v13 = (uint64_t)&type metadata for String;
  do
  {
    if ((v10 & 0xC000000000000001) != 0)
    {
      v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v10);
      v15 = v14;
    }
    else
    {
      v15 = *(_QWORD *)(v10 + 8 * v11 + 32);
      v14 = swift_retain();
    }
    v16 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v14);
    if (!v17)
    {
      *(_QWORD *)&v112 = 0;
      *((_QWORD *)&v112 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      v89._object = (void *)0x80000001006F8C10;
      v89._countAndFlagsBits = 0xD00000000000002CLL;
      String.append(_:)(v89);
      v115 = (_QWORD *)v15;
      v90 = &qword_1008438C8;
LABEL_71:
      v91 = sub_10001A630(v90);
      _print_unlocked<A, B>(_:_:)(&v115, &v112, v91, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v93 = *((_QWORD *)&v112 + 1);
      v92 = v112;
      goto LABEL_72;
    }
    v18 = v16;
    v19 = v17;
    v113 = &type metadata for String;
    swift_release(v15);
    *(_QWORD *)&v112 = v18;
    *((_QWORD *)&v112 + 1) = v19;
    v108[0] = v12;
    v21 = *(_QWORD *)(v12 + 16);
    v20 = *(_QWORD *)(v12 + 24);
    if (v21 >= v20 >> 1)
    {
      sub_1001C1C48(v20 > 1, v21 + 1, 1);
      v12 = v108[0];
    }
    ++v11;
    *(_QWORD *)(v12 + 16) = v21 + 1;
    sub_10001A6CC(&v112, (_OWORD *)(v12 + 32 * v21 + 32));
  }
  while (v11 != 4);
  swift_bridgeObjectRelease();
  v22 = swift_initStackObject(v103, v111);
  v105 = xmmword_1006A8550;
  *(_OWORD *)(v22 + 16) = xmmword_1006A8550;
  *(_QWORD *)(v22 + 32) = swift_getKeyPath(&unk_1006B6CE0);
  v23 = swift_getKeyPath(&unk_1006B6E40);
  *(_QWORD *)(v22 + 40) = v23;
  *(_QWORD *)&v112 = v22;
  specialized Array._endMutation()(v23);
  v24 = v112;
  v115 = _swiftEmptyArrayStorage;
  sub_1001C1C48(0, 2, 0);
  v25 = (uint64_t)v115;
  v26 = (_QWORD *)(v24 & 0xC000000000000001);
  if ((v24 & 0xC000000000000001) != 0)
  {
    v27 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v24);
    v15 = v27;
  }
  else
  {
    v15 = *(_QWORD *)(v24 + 32);
    v27 = swift_retain();
  }
  v28 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v27);
  if (!v29)
    goto LABEL_74;
  v30 = v28;
  v31 = v29;
  v113 = &type metadata for String;
  swift_release(v15);
  *(_QWORD *)&v112 = v30;
  *((_QWORD *)&v112 + 1) = v31;
  v33 = *(_QWORD *)(v25 + 16);
  v32 = *(_QWORD *)(v25 + 24);
  v15 = v33 + 1;
  if (v33 >= v32 >> 1)
    goto LABEL_65;
  while (1)
  {
    *(_QWORD *)(v25 + 16) = v15;
    sub_10001A6CC(&v112, (_OWORD *)(v25 + 32 * v33 + 32));
    if (v26)
    {
      v34 = specialized _ArrayBuffer._getElementSlowPath(_:)(1, v24);
      v15 = v34;
    }
    else
    {
      v15 = *(_QWORD *)(v24 + 40);
      v34 = swift_retain();
    }
    v35 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v34);
    v37 = v99;
    if (!v36)
      goto LABEL_74;
    v38 = v35;
    v39 = v36;
    v113 = (void *)v13;
    swift_release(v15);
    *(_QWORD *)&v112 = v38;
    *((_QWORD *)&v112 + 1) = v39;
    v115 = (_QWORD *)v25;
    v41 = *(_QWORD *)(v25 + 16);
    v40 = *(_QWORD *)(v25 + 24);
    if (v41 >= v40 >> 1)
    {
      sub_1001C1C48(v40 > 1, v41 + 1, 1);
      v25 = (uint64_t)v115;
    }
    *(_QWORD *)(v25 + 16) = v41 + 1;
    sub_10001A6CC(&v112, (_OWORD *)(v25 + 32 * v41 + 32));
    swift_bridgeObjectRelease();
    *(_QWORD *)&v112 = v12;
    sub_1001E09F4(v25);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v37, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease().n128_f64[0]);

    v43 = swift_initStackObject(v103, v109);
    *(_OWORD *)(v43 + 16) = v105;
    *(_QWORD *)(v43 + 32) = swift_getKeyPath(&unk_1006B6ED0);
    v44 = swift_getKeyPath(&unk_1006B6F38);
    *(_QWORD *)(v43 + 40) = v44;
    *(_QWORD *)&v112 = v43;
    specialized Array._endMutation()(v44);
    v45 = v112;
    v108[0] = _swiftEmptyArrayStorage;
    sub_1001C1B0C(0, 2, 0);
    v46 = v108[0];
    if ((v45 & 0xC000000000000001) != 0)
    {
      v47 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v45);
      v15 = v47;
    }
    else
    {
      v15 = *(_QWORD *)(v45 + 32);
      v47 = swift_retain();
    }
    v48 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v47);
    if (!v49)
      goto LABEL_75;
    v50 = v48;
    v51 = v49;
    swift_release(v15);
    v53 = *(_QWORD *)(v46 + 16);
    v52 = *(_QWORD *)(v46 + 24);
    if (v53 >= v52 >> 1)
    {
      sub_1001C1B0C(v52 > 1, v53 + 1, 1);
      v46 = v108[0];
    }
    *(_QWORD *)(v46 + 16) = v53 + 1;
    v54 = v46 + 16 * v53;
    *(_QWORD *)(v54 + 32) = v50;
    *(_QWORD *)(v54 + 40) = v51;
    if ((v45 & 0xC000000000000001) != 0)
    {
      v55 = specialized _ArrayBuffer._getElementSlowPath(_:)(1, v45);
      v15 = v55;
    }
    else
    {
      v15 = *(_QWORD *)(v45 + 40);
      v55 = swift_retain();
    }
    v56 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v55);
    if (!v57)
    {
LABEL_75:
      *(_QWORD *)&v112 = 0;
      *((_QWORD *)&v112 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      v96._object = (void *)0x80000001006F8C10;
      v96._countAndFlagsBits = 0xD00000000000002CLL;
      String.append(_:)(v96);
      v115 = (_QWORD *)v15;
      v90 = &qword_1008436D0;
      goto LABEL_71;
    }
    v58 = v56;
    v26 = v57;
    swift_release(v15);
    v108[0] = v46;
    v60 = *(_QWORD *)(v46 + 16);
    v59 = *(_QWORD *)(v46 + 24);
    if (v60 >= v59 >> 1)
    {
      sub_1001C1B0C(v59 > 1, v60 + 1, 1);
      v46 = v108[0];
    }
    *(_QWORD *)(v46 + 16) = v60 + 1;
    v61 = v46 + 16 * v60;
    *(_QWORD *)(v61 + 32) = v58;
    *(_QWORD *)(v61 + 40) = v26;
    swift_bridgeObjectRelease();
    v62 = Array._bridgeToObjectiveC()().super.isa;
    swift_release(v46);
    v63 = v99;
    objc_msgSend(v99, "setRelationshipKeyPathsForPrefetching:", v62);

    v64 = sub_1000151B0(0, &qword_10083E320, NSDictionary_ptr);
    v65 = v107;
    v66 = NSManagedObjectContext.fetch<A>(_:)(v63, v64);
    if (v65)
    {

      return v26;
    }
    v13 = v66;
    v115 = &_swiftEmptyDictionarySingleton;
    if ((unint64_t)v66 >> 62)
    {
      v88 = v66 < 0 ? v66 : v66 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v66);
      v67 = _CocoaArrayWrapper.endIndex.getter(v88);
      swift_bridgeObjectRelease();
    }
    else
    {
      v67 = *(_QWORD *)((v66 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v97[1] = 0;
    if (!v67)
      break;
    v107 = v13 & 0xC000000000000001;
    v26 = &_swiftEmptyDictionarySingleton;
    v33 = 4;
    v106 = 0xD000000000000019;
    *(_QWORD *)&v105 = 0x80000001006B6CA0;
    v15 = (unint64_t)&unk_10083D5B0;
    v100 = xmmword_1006A7330;
    v102 = (char *)&type metadata for Any + 8;
    v104 = v67;
    while (1)
    {
      v24 = v33 - 4;
      v73 = v107
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v33 - 4, v13)
          : *(id *)(v13 + 8 * v33);
      v74 = v73;
      v12 = v33 - 3;
      if (__OFADD__(v24, 1))
        break;
      v75 = String._bridgeToObjectiveC()();
      v24 = (uint64_t)objc_msgSend(v74, "valueForKey:", v75);

      if (v24)
      {
        _bridgeAnyObjectToAny(_:)(v108, v24);
        swift_unknownObjectRelease(v24);
      }
      else
      {
        memset(v108, 0, sizeof(v108));
      }
      sub_1000A5CA8((uint64_t)v108, (uint64_t)&v112, (uint64_t *)&unk_10083D5B0);
      if (v113)
      {
        v24 = type metadata accessor for UUID(0);
        v76 = swift_dynamicCast(v2, &v112, v102, v24, 6);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v2, v76 ^ 1u, 1, v24);
      }
      else
      {
        sub_10000882C((uint64_t)&v112, (uint64_t *)&unk_10083D5B0);
        v77 = type metadata accessor for UUID(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v2, 1, 1, v77);
      }
      v15 = sub_1002C6CCC((uint64_t)v2);
      v32 = v26[2];
      v79 = (v78 & 1) == 0;
      v80 = v32 + v79;
      if (__OFADD__(v32, v79))
        goto LABEL_63;
      v81 = v78;
      if (v26[3] < v80)
      {
        sub_1002D0CE4(v80, 1);
        v26 = v115;
        v82 = sub_1002C6CCC((uint64_t)v2);
        if ((v81 & 1) != (v83 & 1))
        {
          while (1)
          {
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v98);
            __break(1u);
LABEL_74:
            v108[0] = 0;
            v108[1] = 0xE000000000000000;
            _StringGuts.grow(_:)(46);
            v94._object = (void *)0x80000001006F8C10;
            v94._countAndFlagsBits = 0xD00000000000002CLL;
            String.append(_:)(v94);
            v110 = v15;
            v95 = sub_10001A630(&qword_1008436D0);
            _print_unlocked<A, B>(_:_:)(&v110, v108, v95, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
            v93 = v108[1];
            v92 = v108[0];
LABEL_72:
            _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v92, v93, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
            __break(1u);
          }
        }
        v15 = v82;
      }
      if ((v81 & 1) != 0)
      {
        v68 = sub_10000882C((uint64_t)v2, (uint64_t *)&unk_100839C80);
        v26 = v115;
        v69 = (_QWORD *)(v115[7] + 8 * v15);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v68);
        v71 = *(_QWORD *)((*v69 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v70 = *(_QWORD *)((*v69 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v71 >= v70 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v70 > 1);
        v72 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v71, v74);
        specialized Array._endMutation()(v72);
      }
      else
      {
        v84 = swift_allocObject(v103, 40, 7);
        *(_OWORD *)(v84 + 16) = v100;
        *(_QWORD *)(v84 + 32) = v74;
        *(_QWORD *)&v112 = v84;
        specialized Array._endMutation()(v84);
        v24 = v112;
        v26[(v15 >> 6) + 8] |= 1 << v15;
        sub_1000A5CA8((uint64_t)v2, v26[6] + *(_QWORD *)(v101 + 72) * v15, (uint64_t *)&unk_100839C80);
        *(_QWORD *)(v26[7] + 8 * v15) = v24;
        v85 = v26[2];
        v86 = __OFADD__(v85, 1);
        v32 = v85 + 1;
        if (v86)
          goto LABEL_64;
        v26[2] = v32;
      }
      v15 = (unint64_t)&unk_10083D5B0;
      ++v33;
      if (v12 == v104)
        goto LABEL_60;
    }
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    sub_1001C1C48(v32 > 1, v15, 1);
    v25 = (uint64_t)v115;
  }
  v26 = &_swiftEmptyDictionarySingleton;
LABEL_60:

  swift_bridgeObjectRelease();
  return v26;
}

const char *sub_100350680()
{
  return "latitude";
}

id sub_10035068C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(*a1, "latitude");
  *a2 = v4;
  return result;
}

id sub_1003506BC(double *a1, id *a2)
{
  return objc_msgSend(*a2, "setLatitude:", *a1);
}

const char *sub_1003506D0()
{
  return "longitude";
}

id sub_1003506DC@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(*a1, "longitude");
  *a2 = v4;
  return result;
}

id sub_10035070C(double *a1, id *a2)
{
  return objc_msgSend(*a2, "setLongitude:", *a1);
}

const char *sub_100350720()
{
  return "radius";
}

id sub_10035072C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(*a1, "radius");
  *a2 = v4;
  return result;
}

id sub_10035075C(double *a1, id *a2)
{
  return objc_msgSend(*a2, "setRadius:", *a1);
}

const char *sub_100350770()
{
  return "locationUID";
}

void sub_10035077C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_locationUID, a2);
}

void sub_100350798(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setLocationUID_);
}

void sub_1003507E4(void (*a1)(unsigned __int8 **), uint64_t a2, uint64_t a3)
{
  sub_100350C3C(a1, a2, a3, (uint64_t *)&unk_100846C08, &qword_100844170, (uint64_t)sub_1002C8464);
}

char *sub_100350810(void (*a1)(_QWORD, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  void (*v28)(_QWORD, __n128);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  v33 = a2;
  v6 = sub_10001A630(&qword_100846C28);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for REMListPickerDataView.Model.Account(0, v7);
  v10 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v32 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v29 = (char *)&v27 - v13;
  v14 = *(_QWORD *)(a3 + 16);
  if (!v14)
    return (char *)_swiftEmptyArrayStorage;
  v15 = *(_QWORD *)(type metadata accessor for REMAccountsListDataView.Model.Account(0) - 8);
  v16 = a3 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  v31 = *(_QWORD *)(v15 + 72);
  v27 = a3;
  v17 = swift_bridgeObjectRetain(a3);
  v18 = (char *)_swiftEmptyArrayStorage;
  v28 = a1;
  v19 = v30;
  do
  {
    a1(v16, v17);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v18;
    }
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v19) == 1)
    {
      sub_10000882C((uint64_t)v9, &qword_100846C28);
    }
    else
    {
      v20 = v10;
      v21 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      v22 = v29;
      v21(v29, v9, v19);
      v21(v32, v22, v19);
      swift_isUniquelyReferenced_nonNull_native(v18);
      if ((v23 & 1) == 0)
        v18 = (char *)sub_1002C84C8(0, *((_QWORD *)v18 + 2) + 1, 1, (unint64_t)v18);
      v25 = *((_QWORD *)v18 + 2);
      v24 = *((_QWORD *)v18 + 3);
      if (v25 >= v24 >> 1)
        v18 = (char *)sub_1002C84C8(v24 > 1, v25 + 1, 1, (unint64_t)v18);
      *((_QWORD *)v18 + 2) = v25 + 1;
      v19 = v30;
      v21(&v18[((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))+ *(_QWORD *)(v20 + 72) * v25], v32, v30);
      v10 = v20;
      a1 = v28;
    }
    v16 += v31;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  return v18;
}

_QWORD *sub_100350A88(void (*a1)(uint64_t *__return_ptr, _QWORD *, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  void (*v20)(uint64_t *__return_ptr, _QWORD *, __n128);

  v20 = a1;
  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  if (!v5)
    return _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a3);
  v7 = (uint64_t *)(a3 + 40);
  v8 = _swiftEmptyArrayStorage;
  do
  {
    v10 = *v7;
    v19[0] = *(v7 - 1);
    v19[1] = v10;
    v11 = swift_bridgeObjectRetain(v10);
    v20(&v17, v19, v11);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }
    swift_bridgeObjectRelease();
    v12 = v18;
    if (v18)
    {
      v13 = v17;
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        v8 = sub_1002C8224(0, v8[2] + 1, 1, v8);
      v15 = v8[2];
      v14 = v8[3];
      if (v15 >= v14 >> 1)
        v8 = sub_1002C8224((_QWORD *)(v14 > 1), v15 + 1, 1, v8);
      v8[2] = v15 + 1;
      v9 = &v8[2 * v15];
      v9[4] = v13;
      v9[5] = v12;
    }
    v7 += 2;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  return v8;
}

void sub_100350BE4(void (*a1)(unsigned __int8 **), uint64_t a2, uint64_t a3)
{
  sub_1003522CC(a1, a2, a3, &qword_10083FB68, (uint64_t (*)(_QWORD))&type metadata accessor for REMRemindersListDataView.ReminderLite, (uint64_t)sub_1002C8478);
}

void sub_100350C10(void (*a1)(unsigned __int8 **), uint64_t a2, uint64_t a3)
{
  sub_100350C3C(a1, a2, a3, &qword_100846B68, &qword_100846B60, (uint64_t)sub_1002C8504);
}

void sub_100350C3C(void (*a1)(unsigned __int8 **), uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(BOOL, uint64_t, uint64_t);
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  void (*v39)(unsigned __int8 **);
  uint64_t v40;
  _QWORD *v41;
  unsigned __int8 *v42;

  v9 = v6;
  v39 = a1;
  v34 = a4;
  v11 = sub_10001A630(a4);
  __chkstk_darwin(v11);
  v38 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A630(a5);
  v14 = *(unsigned __int8 **)(v13 - 8);
  __chkstk_darwin(v13);
  v37 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v33 = (char *)&v30 - v17;
  if ((unint64_t)a3 >> 62)
    goto LABEL_21;
  v18 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v18; v18 = _CocoaArrayWrapper.endIndex.getter(v29))
  {
    v31 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))a6;
    v36 = a3 & 0xC000000000000001;
    v40 = v13;
    v41 = _swiftEmptyArrayStorage;
    a6 = 4;
    v32 = a3;
    v35 = v18;
    while (1)
    {
      v19 = v14;
      v20 = v36
          ? (unsigned __int8 *)specialized _ArrayBuffer._getElementSlowPath(_:)(a6 - 4, a3)
          : (unsigned __int8 *)*(id *)(a3 + 8 * a6);
      v14 = v20;
      v21 = a6 - 3;
      if (__OFADD__(a6 - 4, 1))
        break;
      v42 = v20;
      v22 = (uint64_t)v38;
      v39(&v42);
      if (v9)
      {
        swift_bridgeObjectRelease(v41);
        swift_bridgeObjectRelease(a3);

        return;
      }

      v14 = v19;
      if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v19 + 6))(v22, 1, v13) == 1)
      {
        sub_10000882C(v22, v34);
      }
      else
      {
        v23 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v19 + 4);
        v24 = v33;
        v23(v33, v22, v13);
        v23(v37, (uint64_t)v24, v13);
        if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) != 0)
          v25 = (uint64_t)v41;
        else
          v25 = v31(0, v41[2] + 1, 1);
        v27 = *(_QWORD *)(v25 + 16);
        v26 = *(_QWORD *)(v25 + 24);
        if (v27 >= v26 >> 1)
          v25 = v31(v26 > 1, v27 + 1, 1);
        *(_QWORD *)(v25 + 16) = v27 + 1;
        v28 = (v19[80] + 32) & ~(unint64_t)v19[80];
        v41 = (_QWORD *)v25;
        v23((char *)(v25 + v28 + *((_QWORD *)v19 + 9) * v27), (uint64_t)v37, v40);
        v14 = v19;
        a3 = v32;
      }
      ++a6;
      if (v21 == v35)
        goto LABEL_25;
    }
    __break(1u);
LABEL_21:
    if (a3 < 0)
      v29 = a3;
    else
      v29 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
  }
LABEL_25:
  swift_bridgeObjectRelease(a3);
}

char *sub_100350F2C(void (*a1)(_QWORD, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  void (*v26)(_QWORD, __n128);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v31 = a2;
  v6 = sub_10001A630(&qword_10083FB68);
  __chkstk_darwin(v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
  v9 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v30 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v27 = (char *)&v25 - v12;
  v13 = *(_QWORD *)(a3 + 16);
  if (!v13)
    return (char *)_swiftEmptyArrayStorage;
  v14 = *(_QWORD *)(sub_10001A630(&qword_100846B60) - 8);
  v15 = a3 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v29 = *(_QWORD *)(v14 + 72);
  v25 = a3;
  v16 = swift_bridgeObjectRetain(a3);
  v17 = (char *)_swiftEmptyArrayStorage;
  v26 = a1;
  v18 = v28;
  do
  {
    a1(v15, v16);
    if (v3)
    {
      swift_bridgeObjectRelease(v17);
      swift_bridgeObjectRelease(v25);
      return v17;
    }
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v18) == 1)
    {
      sub_10000882C((uint64_t)v8, &qword_10083FB68);
    }
    else
    {
      v19 = v9;
      v20 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v21 = v27;
      v20(v27, v8, v18);
      v20(v30, v21, v18);
      if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        v17 = (char *)sub_1002C8478(0, *((_QWORD *)v17 + 2) + 1, 1, (unint64_t)v17);
      v23 = *((_QWORD *)v17 + 2);
      v22 = *((_QWORD *)v17 + 3);
      if (v23 >= v22 >> 1)
        v17 = (char *)sub_1002C8478(v22 > 1, v23 + 1, 1, (unint64_t)v17);
      *((_QWORD *)v17 + 2) = v23 + 1;
      v18 = v28;
      v20(&v17[((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(_QWORD *)(v19 + 72) * v23], v30, v28);
      v9 = v19;
      a1 = v26;
    }
    v15 += v29;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease(v25);
  return v17;
}

_QWORD *sub_1003511A8(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  void (*v20)(uint64_t *, _QWORD);
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t, uint64_t, __n128);
  uint64_t v36;
  void (*v37)(uint64_t *__return_ptr, uint64_t *);
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v37 = a1;
  v5 = sub_10001A630((uint64_t *)&unk_100840780);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630((uint64_t *)&unk_100846C40);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16);
  v36 = v6;
  v35(v8, v2, v5, v10);
  v13 = sub_10036655C(&qword_100841D00, (uint64_t)&protocol conformance descriptor for OrderedSet<A>);
  dispatch thunk of Sequence.makeIterator()(v5, v13);
  v14 = &v12[*(int *)(v9 + 36)];
  v15 = sub_10036655C(&qword_100846C50, (uint64_t)&protocol conformance descriptor for OrderedSet<A>);
  v16 = *(_QWORD *)v14;
  dispatch thunk of Collection.endIndex.getter(&v39, v5, v15);
  if (v16 == v39)
  {
    v38 = _swiftEmptyArrayStorage;
LABEL_3:
    sub_10000882C((uint64_t)v12, (uint64_t *)&unk_100846C40);
  }
  else
  {
    v34 = v8;
    v38 = _swiftEmptyArrayStorage;
    v32 = v12;
    v33 = a2;
    v31 = v14;
    while (1)
    {
      v20 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read(&v39, v14, v5, v15);
      v22 = *v21;
      v20(&v39, 0);
      v23 = v34;
      ((void (*)(char *, char *, uint64_t))v35)(v34, v12, v5);
      dispatch thunk of Collection.formIndex(after:)(v14, v5, v15);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v23, v5);
      v43 = v22;
      v37(&v39, &v43);
      if (v3)
        break;
      v24 = v40;
      if (v40)
      {
        v25 = v39;
        v26 = v41;
        v27 = v42;
        if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0)
          v38 = sub_1002C87D8(0, v38[2] + 1, 1, v38);
        v29 = v38[2];
        v28 = v38[3];
        if (v29 >= v28 >> 1)
          v38 = sub_1002C87D8((_QWORD *)(v28 > 1), v29 + 1, 1, v38);
        v17 = v38;
        v38[2] = v29 + 1;
        v18 = &v17[4 * v29];
        v18[4] = v25;
        v18[5] = v24;
        v18[6] = v26;
        v18[7] = v27;
        v12 = v32;
        v14 = v31;
      }
      v19 = *(_QWORD *)v14;
      dispatch thunk of Collection.endIndex.getter(&v39, v5, v15);
      if (v19 == v39)
        goto LABEL_3;
    }
    sub_10000882C((uint64_t)v12, (uint64_t *)&unk_100846C40);
    swift_bridgeObjectRelease();
  }
  return v38;
}

_QWORD *sub_100351480(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  return sub_1003526B8(a1, a2, a3, (unint64_t)sub_1002C9150);
}

_QWORD *sub_10035149C(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  return sub_1003526B8(a1, a2, a3, (unint64_t)sub_1002C918C);
}

_QWORD *sub_1003514B8(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  return sub_1003526B8(a1, a2, a3, (unint64_t)sub_1002C91DC);
}

_QWORD *sub_1003514D4(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  return sub_1003526B8(a1, a2, a3, (unint64_t)sub_1002C9344);
}

_QWORD *sub_1003514F0(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  return sub_1003526B8(a1, a2, a3, (unint64_t)sub_1002C936C);
}

_QWORD *sub_10035150C(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  return sub_1003526B8(a1, a2, a3, (unint64_t)sub_1002C9394);
}

_QWORD *sub_100351528(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  return sub_1003526B8(a1, a2, a3, (unint64_t)sub_1002C93BC);
}

void sub_100351544(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  id v14;
  NSString v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v2 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  while (v5)
  {
    v8 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v9 = v8 | (v7 << 6);
LABEL_22:
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v9 + 8);
    v14 = objc_allocWithZone((Class)CNPhoneNumber);
    swift_bridgeObjectRetain(v13);
    v15 = String._bridgeToObjectiveC()();
    v16 = objc_msgSend(v14, "initWithStringValue:", v15);
    swift_bridgeObjectRelease(v13);

    if (v16)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v17);
      v19 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v18 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v19 >= v18 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1);
      v20 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v16);
      specialized Array._endMutation()(v20);
    }
  }
  v10 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v10 >= v6)
    goto LABEL_26;
  v11 = *(_QWORD *)(v2 + 8 * v10);
  ++v7;
  if (v11)
    goto LABEL_21;
  v7 = v10 + 1;
  if (v10 + 1 >= v6)
    goto LABEL_26;
  v11 = *(_QWORD *)(v2 + 8 * v7);
  if (v11)
    goto LABEL_21;
  v7 = v10 + 2;
  if (v10 + 2 >= v6)
    goto LABEL_26;
  v11 = *(_QWORD *)(v2 + 8 * v7);
  if (v11)
    goto LABEL_21;
  v7 = v10 + 3;
  if (v10 + 3 >= v6)
    goto LABEL_26;
  v11 = *(_QWORD *)(v2 + 8 * v7);
  if (v11)
  {
LABEL_21:
    v5 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v7 << 6);
    goto LABEL_22;
  }
  v12 = v10 + 4;
  if (v12 >= v6)
  {
LABEL_26:
    swift_release(a1);
    return;
  }
  v11 = *(_QWORD *)(v2 + 8 * v12);
  if (v11)
  {
    v7 = v12;
    goto LABEL_21;
  }
  while (1)
  {
    v7 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v7 >= v6)
      goto LABEL_26;
    v11 = *(_QWORD *)(v2 + 8 * v7);
    ++v12;
    if (v11)
      goto LABEL_21;
  }
LABEL_28:
  __break(1u);
}

_QWORD *sub_100351750(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  return sub_1003526B8(a1, a2, a3, (unint64_t)sub_1002C9F88);
}

_QWORD *sub_10035176C(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  return sub_1003526B8(a1, a2, a3, (unint64_t)sub_1002C9FB0);
}

_QWORD *sub_100351788(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  return sub_1003526B8(a1, a2, a3, (unint64_t)sub_1002C9FD8);
}

_QWORD *sub_1003517A4(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  return sub_1003526B8(a1, a2, a3, (unint64_t)sub_1002CA000);
}

_QWORD *sub_1003517C0(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  return sub_1003526B8(a1, a2, a3, (unint64_t)sub_1002CA028);
}

_QWORD *sub_1003517DC(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  return sub_1003526B8(a1, a2, a3, (unint64_t)sub_1002CA050);
}

_QWORD *sub_1003517F8(void (*a1)(_QWORD, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD v22[2];
  void (*v23)(_QWORD, __n128);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = sub_10001A630(&qword_100846C58);
  __chkstk_darwin(v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for RDIntentsRelevantShortcutsHandlerItem(0);
  v9 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v26 = (uint64_t)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v24 = (uint64_t)v22 - v12;
  v13 = *(_QWORD *)(a3 + 16);
  if (!v13)
    return _swiftEmptyArrayStorage;
  v14 = *(_QWORD *)(type metadata accessor for RDTimelineEngineDueReminder(0) - 8);
  v15 = a3 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v25 = *(_QWORD *)(v14 + 72);
  v22[1] = a3;
  v16 = swift_bridgeObjectRetain(a3);
  v17 = _swiftEmptyArrayStorage;
  v23 = a1;
  do
  {
    a1(v15, v16);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v17;
    }
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v27) == 1)
    {
      sub_10000882C((uint64_t)v8, &qword_100846C58);
    }
    else
    {
      v18 = v24;
      sub_10023DB78((uint64_t)v8, v24);
      sub_10023DB78(v18, v26);
      if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        v17 = (_QWORD *)sub_1002CA0A0(0, v17[2] + 1, 1, (unint64_t)v17);
      v20 = v17[2];
      v19 = v17[3];
      if (v20 >= v19 >> 1)
        v17 = (_QWORD *)sub_1002CA0A0(v19 > 1, v20 + 1, 1, (unint64_t)v17);
      v17[2] = v20 + 1;
      sub_10023DB78(v26, (uint64_t)v17+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v20);
      a1 = v23;
    }
    v15 += v25;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v17;
}

_QWORD *sub_100351A4C(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  return sub_1003526B8(a1, a2, a3, (unint64_t)sub_1002CA5C4);
}

_QWORD *sub_100351A68(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  return sub_1003526B8(a1, a2, a3, (unint64_t)sub_1002CA5EC);
}

_QWORD *sub_100351A84(void (*a1)(_QWORD, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(_QWORD, __n128);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = sub_10001A630(&qword_1008464F8);
  __chkstk_darwin(v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_10001A630((uint64_t *)&unk_100843790);
  __chkstk_darwin(v29);
  v28 = (uint64_t)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v26 = (uint64_t)&v23 - v12;
  v13 = *(_QWORD *)(a3 + 16);
  if (!v13)
    return _swiftEmptyArrayStorage;
  v14 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v23 = a3;
  v24 = v14;
  v15 = a3 + v14;
  v27 = v11;
  v16 = *(_QWORD *)(v11 + 72);
  v17 = swift_bridgeObjectRetain(a3);
  v18 = _swiftEmptyArrayStorage;
  v25 = a1;
  do
  {
    a1(v15, v17);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v18;
    }
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v8, 1, v29) == 1)
    {
      sub_10000882C((uint64_t)v8, &qword_1008464F8);
    }
    else
    {
      v19 = v26;
      sub_1000A5CA8((uint64_t)v8, v26, (uint64_t *)&unk_100843790);
      sub_1000A5CA8(v19, v28, (uint64_t *)&unk_100843790);
      if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
        v18 = (_QWORD *)sub_1002CA614(0, v18[2] + 1, 1, (unint64_t)v18);
      v21 = v18[2];
      v20 = v18[3];
      if (v21 >= v20 >> 1)
        v18 = (_QWORD *)sub_1002CA614(v20 > 1, v21 + 1, 1, (unint64_t)v18);
      v18[2] = v21 + 1;
      sub_1000A5CA8(v28, (uint64_t)v18 + v24 + v21 * v16, (uint64_t *)&unk_100843790);
      a1 = v25;
    }
    v15 += v16;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v18;
}

char *sub_100351CDC(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  _QWORD v36[2];
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void (*v42)(_QWORD *);
  char *v43;
  char *v44;
  uint64_t v45;
  _QWORD v46[6];
  char v47;
  uint64_t v48;

  v4 = v3;
  v42 = a1;
  v6 = sub_10001A630(&qword_100841D10);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for REMSuggestedAttributeOutput(0, v7);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v41 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v37 = (char *)v36 - v14;
  v15 = *(_QWORD *)(a3 + 16);
  if (!v15)
    return (char *)_swiftEmptyArrayStorage;
  v40 = v9;
  v48 = v4;
  swift_bridgeObjectRetain(a3);
  v36[1] = a3;
  v16 = (char *)(a3 + 80);
  v43 = (char *)_swiftEmptyArrayStorage;
  v38 = v11;
  v39 = v10;
  do
  {
    v44 = v16;
    v45 = v15;
    v17 = *((_QWORD *)v16 - 6);
    v18 = *((_QWORD *)v16 - 5);
    v19 = *((_QWORD *)v16 - 4);
    v20 = *((_QWORD *)v16 - 3);
    v21 = *((_QWORD *)v16 - 2);
    v22 = *((_QWORD *)v16 - 1);
    v23 = *v16;
    v46[0] = v17;
    v46[1] = v18;
    v46[2] = v19;
    v46[3] = v20;
    v46[4] = v21;
    v46[5] = v22;
    v47 = v23;
    sub_100256288(v17, v18, v19, v20, v21, v22, v23);
    v24 = (uint64_t)v40;
    v25 = v48;
    v42(v46);
    v48 = v25;
    if (v25)
    {
      sub_1002562EC(v17, v18, v19, v20, v21, v22, v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v43;
    }
    sub_1002562EC(v17, v18, v19, v20, v21, v22, v23);
    v27 = v38;
    v26 = v39;
    v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v24, 1, v39);
    v29 = v24;
    if (v28 == 1)
    {
      sub_10000882C(v24, &qword_100841D10);
    }
    else
    {
      v30 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 32);
      v31 = v37;
      v30(v37, v29, v26);
      v30(v41, (uint64_t)v31, v26);
      if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
        v43 = (char *)sub_1002CA774(0, *((_QWORD *)v43 + 2) + 1, 1, (unint64_t)v43);
      v33 = *((_QWORD *)v43 + 2);
      v32 = *((_QWORD *)v43 + 3);
      if (v33 >= v32 >> 1)
        v43 = (char *)sub_1002CA774(v32 > 1, v33 + 1, 1, (unint64_t)v43);
      v34 = v43;
      *((_QWORD *)v43 + 2) = v33 + 1;
      v30(&v34[((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(_QWORD *)(v27 + 72) * v33], (uint64_t)v41, v26);
    }
    v16 = v44 + 56;
    v15 = v45 - 1;
  }
  while (v45 != 1);
  swift_bridgeObjectRelease();
  return v43;
}

_QWORD *sub_100351FAC(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  return sub_1003526B8(a1, a2, a3, (unint64_t)sub_1002CAC80);
}

_QWORD *sub_100351FC8(void (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(id *);
  uint64_t v30;
  id v31;

  v4 = v3;
  v29 = a1;
  v6 = sub_10001A630((uint64_t *)&unk_100846BD0);
  __chkstk_darwin(v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_10001A630((uint64_t *)&unk_100850D60);
  v30 = *(_QWORD *)(v28 - 8);
  v9 = __chkstk_darwin(v28);
  v27 = (uint64_t)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v25 = (uint64_t)&v23 - v11;
  if ((unint64_t)a3 >> 62)
    goto LABEL_20;
  v12 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v12; v12 = _CocoaArrayWrapper.endIndex.getter(v21))
  {
    v13 = _swiftEmptyArrayStorage;
    v26 = a3 & 0xC000000000000001;
    v14 = 4;
    v24 = a3;
    while (1)
    {
      v15 = v26 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14 - 4, a3) : *(id *)(a3 + 8 * v14);
      v16 = v15;
      v17 = v14 - 3;
      if (__OFADD__(v14 - 4, 1))
        break;
      v31 = v15;
      v29(&v31);
      if (v4)
      {
        swift_bridgeObjectRelease(v13);
        swift_bridgeObjectRelease(a3);

        return v13;
      }

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v8, 1, v28) == 1)
      {
        sub_10000882C((uint64_t)v8, (uint64_t *)&unk_100846BD0);
      }
      else
      {
        v18 = v25;
        sub_1000A5CA8((uint64_t)v8, v25, (uint64_t *)&unk_100850D60);
        sub_1000A5CA8(v18, v27, (uint64_t *)&unk_100850D60);
        if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
          v13 = (_QWORD *)sub_1002CAC94(0, v13[2] + 1, 1, (unint64_t)v13);
        v20 = v13[2];
        v19 = v13[3];
        if (v20 >= v19 >> 1)
          v13 = (_QWORD *)sub_1002CAC94(v19 > 1, v20 + 1, 1, (unint64_t)v13);
        v13[2] = v20 + 1;
        sub_1000A5CA8(v27, (uint64_t)v13+ ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(_QWORD *)(v30 + 72) * v20, (uint64_t *)&unk_100850D60);
        a3 = v24;
      }
      ++v14;
      if (v17 == v12)
      {
        swift_bridgeObjectRelease(a3);
        return v13;
      }
    }
    __break(1u);
LABEL_20:
    if (a3 < 0)
      v21 = a3;
    else
      v21 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
  }
  swift_bridgeObjectRelease(a3);
  return _swiftEmptyArrayStorage;
}

void sub_1003522A0(void (*a1)(unsigned __int8 **), uint64_t a2, uint64_t a3)
{
  sub_1003522CC(a1, a2, a3, (uint64_t *)&unk_1008380D0, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t)sub_1002C87C4);
}

void sub_1003522CC(void (*a1)(unsigned __int8 **), uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(_QWORD), uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(BOOL, uint64_t, uint64_t);
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  void (*v39)(unsigned __int8 **);
  uint64_t v40;
  _QWORD *v41;
  unsigned __int8 *v42;

  v9 = v6;
  v39 = a1;
  v34 = a4;
  v11 = sub_10001A630(a4);
  __chkstk_darwin(v11);
  v38 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a5(0);
  v14 = *(unsigned __int8 **)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v37 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v33 = (char *)&v30 - v17;
  if ((unint64_t)a3 >> 62)
    goto LABEL_21;
  v18 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v18; v18 = _CocoaArrayWrapper.endIndex.getter(v29))
  {
    v31 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))a6;
    v36 = a3 & 0xC000000000000001;
    v40 = v13;
    v41 = _swiftEmptyArrayStorage;
    a6 = 4;
    v32 = a3;
    v35 = v18;
    while (1)
    {
      v19 = v14;
      v20 = v36
          ? (unsigned __int8 *)specialized _ArrayBuffer._getElementSlowPath(_:)(a6 - 4, a3)
          : (unsigned __int8 *)*(id *)(a3 + 8 * a6);
      v14 = v20;
      v21 = a6 - 3;
      if (__OFADD__(a6 - 4, 1))
        break;
      v42 = v20;
      v22 = (uint64_t)v38;
      v39(&v42);
      if (v9)
      {
        swift_bridgeObjectRelease(v41);
        swift_bridgeObjectRelease(a3);

        return;
      }

      v14 = v19;
      if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v19 + 6))(v22, 1, v13) == 1)
      {
        sub_10000882C(v22, v34);
      }
      else
      {
        v23 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v19 + 4);
        v24 = v33;
        v23(v33, v22, v13);
        v23(v37, (uint64_t)v24, v13);
        if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) != 0)
          v25 = (uint64_t)v41;
        else
          v25 = v31(0, v41[2] + 1, 1);
        v27 = *(_QWORD *)(v25 + 16);
        v26 = *(_QWORD *)(v25 + 24);
        if (v27 >= v26 >> 1)
          v25 = v31(v26 > 1, v27 + 1, 1);
        *(_QWORD *)(v25 + 16) = v27 + 1;
        v28 = (v19[80] + 32) & ~(unint64_t)v19[80];
        v41 = (_QWORD *)v25;
        v23((char *)(v25 + v28 + *((_QWORD *)v19 + 9) * v27), (uint64_t)v37, v40);
        v14 = v19;
        a3 = v32;
      }
      ++a6;
      if (v21 == v35)
        goto LABEL_25;
    }
    __break(1u);
LABEL_21:
    if (a3 < 0)
      v29 = a3;
    else
      v29 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
  }
LABEL_25:
  swift_bridgeObjectRelease(a3);
}

_QWORD *sub_1003525BC(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  return sub_1003526B8(a1, a2, a3, (unint64_t)sub_1002CACBC);
}

_QWORD *sub_1003525D8(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  return sub_1003526B8(a1, a2, a3, (unint64_t)sub_1002CACE4);
}

_QWORD *sub_1003525F4(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  return sub_1003526B8(a1, a2, a3, (unint64_t)sub_1002CAD0C);
}

_QWORD *sub_100352610(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  return sub_1003526B8(a1, a2, a3, (unint64_t)sub_1002CAD34);
}

_QWORD *sub_10035262C(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  return sub_1003526B8(a1, a2, a3, (unint64_t)sub_1002CAD5C);
}

_QWORD *sub_100352648(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  return sub_1003526B8(a1, a2, a3, (unint64_t)sub_1002CAD84);
}

_QWORD *sub_100352664(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  return sub_1003526B8(a1, a2, a3, (unint64_t)sub_1002CADAC);
}

_QWORD *sub_100352680(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  return sub_1003526B8(a1, a2, a3, (unint64_t)sub_1002CADD4);
}

_QWORD *sub_10035269C(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  return sub_1003526B8(a1, a2, a3, (unint64_t)sub_1002CADE8);
}

_QWORD *sub_1003526B8(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t i;
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v19)(BOOL, unint64_t, uint64_t, _QWORD *, __n128);
  __n128 v21;
  __n128 v22;
  id v23;

  v6 = v4;
  if ((unint64_t)a3 >> 62)
    goto LABEL_19;
  v8 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v8; v8 = _CocoaArrayWrapper.endIndex.getter(v17))
  {
    v19 = (uint64_t (*)(BOOL, unint64_t, uint64_t, _QWORD *, __n128))a4;
    v9 = _swiftEmptyArrayStorage;
    for (i = 4; ; ++i)
    {
      v11 = (a3 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a3)
          : *(id *)(a3 + 8 * i);
      v12 = v11;
      v13 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v23 = v11;
      a1(&v22, &v23);
      if (v6)
      {
        swift_bridgeObjectRelease(v9);
        swift_bridgeObjectRelease(a3);

        return v9;
      }

      if (v22.n128_u64[0])
      {
        v21 = v22;
        if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
          v9 = (_QWORD *)((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD *))v19)(0, v9[2] + 1, 1, v9);
        a4 = v9[2];
        v14 = v9[3];
        v15 = v21;
        if (a4 >= v14 >> 1)
        {
          v16 = v19(v14 > 1, a4 + 1, 1, v9, v21);
          v15 = v21;
          v9 = (_QWORD *)v16;
        }
        v9[2] = a4 + 1;
        *(__n128 *)&v9[2 * a4 + 4] = v15;
      }
      if (v13 == v8)
      {
        swift_bridgeObjectRelease(a3);
        return v9;
      }
    }
    __break(1u);
LABEL_19:
    if (a3 < 0)
      v17 = a3;
    else
      v17 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
  }
  swift_bridgeObjectRelease(a3);
  return _swiftEmptyArrayStorage;
}

void sub_10035288C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  _BYTE v11[40];
  char v13;

  v4 = v3;
  v6 = type metadata accessor for UUID(0);
  __chkstk_darwin(v6);
  v13 = 1;
  sub_1000181B8();
  v8 = v7;
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "newBackgroundContextWithAuthor:", v9, swift_bridgeObjectRelease(v8).n128_f64[0], a3);

  sub_1000184A8(a1, (uint64_t)v11);
  __asm { BR              X11 }
}

uint64_t sub_10035296C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  uint64_t v10;

  *(_DWORD *)(v3 - 88) = a1;
  *(_WORD *)(v3 - 84) = WORD2(a1) & 0x3FFF;
  v4 = (_QWORD *)swift_allocObject(&unk_1007EFC68, 56, 7);
  v4[2] = v3 - 65;
  v4[3] = v1;
  v4[4] = *(_QWORD *)(v3 - 192);
  v4[5] = v2;
  v4[6] = v3 - 136;
  v5 = swift_allocObject(&unk_1007EFC90, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_100366278;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v3 - 152) = sub_100119B20;
  *(_QWORD *)(v3 - 144) = v5;
  *(_QWORD *)(v3 - 184) = _NSConcreteStackBlock;
  *(_QWORD *)(v3 - 176) = 1107296256;
  *(_QWORD *)(v3 - 168) = sub_1000098C4;
  *(_QWORD *)(v3 - 160) = &unk_1007EFCA8;
  v6 = _Block_copy((const void *)(v3 - 184));
  v7 = *(_QWORD *)(v3 - 144);
  v8 = v2;
  swift_retain();
  swift_release(v7);
  objc_msgSend(v8, "performBlockAndWait:", v6);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 109, 25, 45, 1);
  swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(_QWORD *)(v3 - 136))
  {
    v10 = swift_errorRetain(*(_QWORD *)(v3 - 136));
    swift_willThrow(v10);

    swift_errorRelease(*(_QWORD *)(v3 - 136));
    return swift_release(v4);
  }
  if ((*(_BYTE *)(v3 - 65) & 1) != 0)
  {
LABEL_7:
    __break(1u);
    JUMPOUT(0x100352C80);
  }

  swift_errorRelease(*(_QWORD *)(v3 - 136));
  return swift_release(v4);
}

void sub_100352C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  _BYTE v11[40];
  uint64_t v13;

  v4 = v3;
  v6 = type metadata accessor for UUID(0);
  __chkstk_darwin(v6);
  v13 = 0;
  sub_1000181B8();
  v8 = v7;
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "newBackgroundContextWithAuthor:", v9, swift_bridgeObjectRelease(v8).n128_f64[0], a3);

  sub_1000184A8(a1, (uint64_t)v11);
  __asm { BR              X11 }
}

uint64_t sub_100352D6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  uint64_t v10;

  *(_DWORD *)(v3 - 88) = a1;
  *(_WORD *)(v3 - 84) = WORD2(a1) & 0x3FFF;
  v4 = (_QWORD *)swift_allocObject(&unk_1007F0118, 56, 7);
  v4[2] = v3 - 72;
  v4[3] = v1;
  v4[4] = *(_QWORD *)(v3 - 192);
  v4[5] = v2;
  v4[6] = v3 - 136;
  v5 = swift_allocObject(&unk_1007F0140, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_100365D44;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v3 - 152) = sub_100119B20;
  *(_QWORD *)(v3 - 144) = v5;
  *(_QWORD *)(v3 - 184) = _NSConcreteStackBlock;
  *(_QWORD *)(v3 - 176) = 1107296256;
  *(_QWORD *)(v3 - 168) = sub_1000098C4;
  *(_QWORD *)(v3 - 160) = &unk_1007F0158;
  v6 = _Block_copy((const void *)(v3 - 184));
  v7 = *(_QWORD *)(v3 - 144);
  v8 = v2;
  swift_retain();
  swift_release(v7);
  objc_msgSend(v8, "performBlockAndWait:", v6);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 109, 25, 45, 1);
  swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v3 - 136))
  {
    v5 = *(_QWORD *)(v3 - 72);
    if (v5)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v3 - 72));

      swift_errorRelease(*(_QWORD *)(v3 - 136));
      swift_release(v4);
      swift_bridgeObjectRelease();
      return v5;
    }
LABEL_8:
    __break(1u);
    JUMPOUT(0x1003530A4);
  }
  v10 = swift_errorRetain(*(_QWORD *)(v3 - 136));
  swift_willThrow(v10);

  swift_errorRelease(*(_QWORD *)(v3 - 136));
  swift_release(v4);
  swift_bridgeObjectRelease();
  return v5;
}

void sub_1003530B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  _BYTE v11[40];
  uint64_t v13;

  v4 = v3;
  v6 = type metadata accessor for UUID(0);
  __chkstk_darwin(v6);
  v13 = 1;
  sub_1000181B8();
  v8 = v7;
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "newBackgroundContextWithAuthor:", v9, swift_bridgeObjectRelease(v8).n128_f64[0], a3);

  sub_1000184A8(a1, (uint64_t)v11);
  __asm { BR              X11 }
}

uint64_t sub_100353194@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  uint64_t v10;

  *(_DWORD *)(v3 - 88) = a1;
  *(_WORD *)(v3 - 84) = WORD2(a1) & 0x3FFF;
  v4 = (_QWORD *)swift_allocObject(&unk_1007F0370, 56, 7);
  v4[2] = v3 - 72;
  v4[3] = v1;
  v4[4] = *(_QWORD *)(v3 - 192);
  v4[5] = v2;
  v4[6] = v3 - 136;
  v5 = swift_allocObject(&unk_1007F0398, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_100366530;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v3 - 152) = sub_100119B20;
  *(_QWORD *)(v3 - 144) = v5;
  *(_QWORD *)(v3 - 184) = _NSConcreteStackBlock;
  *(_QWORD *)(v3 - 176) = 1107296256;
  *(_QWORD *)(v3 - 168) = sub_1000098C4;
  *(_QWORD *)(v3 - 160) = &unk_1007F03B0;
  v6 = _Block_copy((const void *)(v3 - 184));
  v7 = *(_QWORD *)(v3 - 144);
  v8 = v2;
  swift_retain();
  swift_release(v7);
  objc_msgSend(v8, "performBlockAndWait:", v6);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 109, 25, 45, 1);
  swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v3 - 136))
  {
    v5 = *(_QWORD *)(v3 - 72);
    if (v5 != 1)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v3 - 72));

      swift_errorRelease(*(_QWORD *)(v3 - 136));
      sub_10036654C(*(_QWORD *)(v3 - 72));
      swift_release(v4);
      return v5;
    }
LABEL_8:
    __break(1u);
    JUMPOUT(0x1003534C8);
  }
  v10 = swift_errorRetain(*(_QWORD *)(v3 - 136));
  swift_willThrow(v10);

  swift_errorRelease(*(_QWORD *)(v3 - 136));
  sub_10036654C(*(_QWORD *)(v3 - 72));
  swift_release(v4);
  return v5;
}

void sub_1003534D8(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  _BYTE v8[40];
  uint64_t v10;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  __chkstk_darwin(v4);
  v10 = 0;
  sub_1000181B8();
  v6 = v5;
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "newBackgroundContextWithAuthor:", v7, swift_bridgeObjectRelease(v6).n128_f64[0]);

  sub_1000184A8(a1, (uint64_t)v8);
  __asm { BR              X11 }
}

uint64_t sub_1003535B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t v11;
  void *v12;

  *(_DWORD *)(v4 - 88) = a1;
  *(_WORD *)(v4 - 84) = WORD2(a1) & 0x3FFF;
  v5 = (_QWORD *)swift_allocObject(&unk_1007F02F8, 56, 7);
  v5[2] = v4 - 152;
  v5[3] = v2;
  v5[4] = v1;
  v5[5] = v3;
  v5[6] = v4 - 72;
  v6 = swift_allocObject(&unk_1007F0320, 32, 7);
  *(_QWORD *)(v6 + 16) = sub_1003664E4;
  *(_QWORD *)(v6 + 24) = v5;
  *(_QWORD *)(v4 - 168) = sub_100119B20;
  *(_QWORD *)(v4 - 160) = v6;
  *(_QWORD *)(v4 - 200) = _NSConcreteStackBlock;
  *(_QWORD *)(v4 - 192) = 1107296256;
  *(_QWORD *)(v4 - 184) = sub_1000098C4;
  *(_QWORD *)(v4 - 176) = &unk_1007F0338;
  v7 = _Block_copy((const void *)(v4 - 200));
  v8 = *(_QWORD *)(v4 - 160);
  v9 = v3;
  swift_retain();
  swift_release(v8);
  objc_msgSend(v9, "performBlockAndWait:", v7);
  _Block_release(v7);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v6, "", 109, 25, 45, 1);
  swift_release(v6);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v4 - 72))
  {
    if (*(_QWORD *)(v4 - 144))
    {
      v12 = *(void **)(v4 - 136);
      isEscapingClosureAtFileLocation = *(_QWORD *)(v4 - 152);
      swift_bridgeObjectRetain(*(_QWORD *)(v4 - 144));
      v12;

      swift_errorRelease(*(_QWORD *)(v4 - 72));
      sub_100366500(*(_QWORD *)(v4 - 152), *(_QWORD *)(v4 - 144), *(void **)(v4 - 136));
      swift_release(v5);
      return isEscapingClosureAtFileLocation;
    }
LABEL_8:
    __break(1u);
    JUMPOUT(0x100353904);
  }
  v11 = swift_errorRetain(*(_QWORD *)(v4 - 72));
  swift_willThrow(v11);

  swift_errorRelease(*(_QWORD *)(v4 - 72));
  sub_100366500(*(_QWORD *)(v4 - 152), *(_QWORD *)(v4 - 144), *(void **)(v4 - 136));
  swift_release(v5);
  return isEscapingClosureAtFileLocation;
}

void sub_100353914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  _BYTE v11[40];
  uint64_t v13;

  v4 = v3;
  v6 = type metadata accessor for UUID(0);
  __chkstk_darwin(v6);
  v13 = 0;
  sub_1000181B8();
  v8 = v7;
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "newBackgroundContextWithAuthor:", v9, swift_bridgeObjectRelease(v8).n128_f64[0], a3);

  sub_1000184A8(a1, (uint64_t)v11);
  __asm { BR              X11 }
}

uint64_t sub_1003539F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  uint64_t v10;

  *(_DWORD *)(v3 - 88) = a1;
  *(_WORD *)(v3 - 84) = WORD2(a1) & 0x3FFF;
  v4 = (_QWORD *)swift_allocObject(&unk_1007F0280, 56, 7);
  v4[2] = v3 - 72;
  v4[3] = v1;
  v4[4] = *(_QWORD *)(v3 - 192);
  v4[5] = v2;
  v4[6] = v3 - 136;
  v5 = swift_allocObject(&unk_1007F02A8, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_100365D44;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v3 - 152) = sub_100119B20;
  *(_QWORD *)(v3 - 144) = v5;
  *(_QWORD *)(v3 - 184) = _NSConcreteStackBlock;
  *(_QWORD *)(v3 - 176) = 1107296256;
  *(_QWORD *)(v3 - 168) = sub_1000098C4;
  *(_QWORD *)(v3 - 160) = &unk_1007F02C0;
  v6 = _Block_copy((const void *)(v3 - 184));
  v7 = *(_QWORD *)(v3 - 144);
  v8 = v2;
  swift_retain();
  swift_release(v7);
  objc_msgSend(v8, "performBlockAndWait:", v6);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 109, 25, 45, 1);
  swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v3 - 136))
  {
    v5 = *(_QWORD *)(v3 - 72);
    if (v5)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v3 - 72));

      swift_errorRelease(*(_QWORD *)(v3 - 136));
      swift_release(v4);
      swift_bridgeObjectRelease();
      return v5;
    }
LABEL_8:
    __break(1u);
    JUMPOUT(0x100353D28);
  }
  v10 = swift_errorRetain(*(_QWORD *)(v3 - 136));
  swift_willThrow(v10);

  swift_errorRelease(*(_QWORD *)(v3 - 136));
  swift_release(v4);
  swift_bridgeObjectRelease();
  return v5;
}

void sub_100353D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  _BYTE v11[40];
  uint64_t v13;

  v4 = v3;
  v6 = type metadata accessor for UUID(0);
  __chkstk_darwin(v6);
  v13 = 0;
  sub_1000181B8();
  v8 = v7;
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "newBackgroundContextWithAuthor:", v9, swift_bridgeObjectRelease(v8).n128_f64[0], a3);

  sub_1000184A8(a1, (uint64_t)v11);
  __asm { BR              X11 }
}

uint64_t sub_100353E14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  uint64_t v10;

  *(_DWORD *)(v3 - 88) = a1;
  *(_WORD *)(v3 - 84) = WORD2(a1) & 0x3FFF;
  v4 = (_QWORD *)swift_allocObject(&unk_1007F0208, 56, 7);
  v4[2] = v3 - 72;
  v4[3] = v1;
  v4[4] = *(_QWORD *)(v3 - 192);
  v4[5] = v2;
  v4[6] = v3 - 136;
  v5 = swift_allocObject(&unk_1007F0230, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_100365D44;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v3 - 152) = sub_100119B20;
  *(_QWORD *)(v3 - 144) = v5;
  *(_QWORD *)(v3 - 184) = _NSConcreteStackBlock;
  *(_QWORD *)(v3 - 176) = 1107296256;
  *(_QWORD *)(v3 - 168) = sub_1000098C4;
  *(_QWORD *)(v3 - 160) = &unk_1007F0248;
  v6 = _Block_copy((const void *)(v3 - 184));
  v7 = *(_QWORD *)(v3 - 144);
  v8 = v2;
  swift_retain();
  swift_release(v7);
  objc_msgSend(v8, "performBlockAndWait:", v6);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 109, 25, 45, 1);
  swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v3 - 136))
  {
    v5 = *(_QWORD *)(v3 - 72);
    if (v5)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v3 - 72));

      swift_errorRelease(*(_QWORD *)(v3 - 136));
      swift_release(v4);
      swift_bridgeObjectRelease();
      return v5;
    }
LABEL_8:
    __break(1u);
    JUMPOUT(0x10035414CLL);
  }
  v10 = swift_errorRetain(*(_QWORD *)(v3 - 136));
  swift_willThrow(v10);

  swift_errorRelease(*(_QWORD *)(v3 - 136));
  swift_release(v4);
  swift_bridgeObjectRelease();
  return v5;
}

void sub_10035415C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  _BYTE v11[40];
  uint64_t v13;

  v4 = v3;
  v6 = type metadata accessor for UUID(0);
  __chkstk_darwin(v6);
  v13 = 0;
  sub_1000181B8();
  v8 = v7;
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "newBackgroundContextWithAuthor:", v9, swift_bridgeObjectRelease(v8).n128_f64[0], a3);

  sub_1000184A8(a1, (uint64_t)v11);
  __asm { BR              X11 }
}

uint64_t sub_100354238@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  uint64_t v10;

  *(_DWORD *)(v3 - 88) = a1;
  *(_WORD *)(v3 - 84) = WORD2(a1) & 0x3FFF;
  v4 = (_QWORD *)swift_allocObject(&unk_1007F0190, 56, 7);
  v4[2] = v3 - 72;
  v4[3] = v1;
  v4[4] = *(_QWORD *)(v3 - 192);
  v4[5] = v2;
  v4[6] = v3 - 136;
  v5 = swift_allocObject(&unk_1007F01B8, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_100365D44;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v3 - 152) = sub_100119B20;
  *(_QWORD *)(v3 - 144) = v5;
  *(_QWORD *)(v3 - 184) = _NSConcreteStackBlock;
  *(_QWORD *)(v3 - 176) = 1107296256;
  *(_QWORD *)(v3 - 168) = sub_1000098C4;
  *(_QWORD *)(v3 - 160) = &unk_1007F01D0;
  v6 = _Block_copy((const void *)(v3 - 184));
  v7 = *(_QWORD *)(v3 - 144);
  v8 = v2;
  swift_retain();
  swift_release(v7);
  objc_msgSend(v8, "performBlockAndWait:", v6);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 109, 25, 45, 1);
  swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v3 - 136))
  {
    v5 = *(_QWORD *)(v3 - 72);
    if (v5)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v3 - 72));

      swift_errorRelease(*(_QWORD *)(v3 - 136));
      swift_release(v4);
      swift_bridgeObjectRelease();
      return v5;
    }
LABEL_8:
    __break(1u);
    JUMPOUT(0x100354570);
  }
  v10 = swift_errorRetain(*(_QWORD *)(v3 - 136));
  swift_willThrow(v10);

  swift_errorRelease(*(_QWORD *)(v3 - 136));
  swift_release(v4);
  swift_bridgeObjectRelease();
  return v5;
}

void sub_100354580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  NSString v7;
  _BYTE v9[40];
  uint64_t v11;

  v4 = v3;
  v6 = type metadata accessor for UUID(0);
  __chkstk_darwin(v6);
  v11 = 0;
  sub_1000181B8();
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "newBackgroundContextWithAuthor:", v7, swift_bridgeObjectRelease().n128_f64[0], a3);

  sub_1000184A8(a1, (uint64_t)v9);
  __asm { BR              X11 }
}

uint64_t sub_10035465C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  uint64_t v10;

  *(_DWORD *)(v3 - 88) = a1;
  *(_WORD *)(v3 - 84) = WORD2(a1) & 0x3FFF;
  v4 = (_QWORD *)swift_allocObject(&unk_1007EFB78, 56, 7);
  v4[2] = v3 - 72;
  v4[3] = v1;
  v4[4] = *(_QWORD *)(v3 - 192);
  v4[5] = v2;
  v4[6] = v3 - 136;
  v5 = swift_allocObject(&unk_1007EFBA0, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_100365D44;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v3 - 152) = sub_100119B20;
  *(_QWORD *)(v3 - 144) = v5;
  *(_QWORD *)(v3 - 184) = _NSConcreteStackBlock;
  *(_QWORD *)(v3 - 176) = 1107296256;
  *(_QWORD *)(v3 - 168) = sub_1000098C4;
  *(_QWORD *)(v3 - 160) = &unk_1007EFBB8;
  v6 = _Block_copy((const void *)(v3 - 184));
  v7 = *(_QWORD *)(v3 - 144);
  v8 = v2;
  swift_retain();
  swift_release(v7);
  objc_msgSend(v8, "performBlockAndWait:", v6);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 109, 25, 45, 1);
  swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v3 - 136))
  {
    v5 = *(_QWORD *)(v3 - 72);
    if (v5)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v3 - 72));

      swift_errorRelease(*(_QWORD *)(v3 - 136));
      swift_release(v4);
      swift_bridgeObjectRelease();
      return v5;
    }
LABEL_8:
    __break(1u);
    JUMPOUT(0x100354994);
  }
  v10 = swift_errorRetain(*(_QWORD *)(v3 - 136));
  swift_willThrow(v10);

  swift_errorRelease(*(_QWORD *)(v3 - 136));
  swift_release(v4);
  swift_bridgeObjectRelease();
  return v5;
}

void sub_1003549A4(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  NSString v5;
  _BYTE v6[40];
  uint64_t v8;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  __chkstk_darwin(v4);
  v8 = 0;
  sub_1000181B8();
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "newBackgroundContextWithAuthor:", v5, swift_bridgeObjectRelease().n128_f64[0]);

  sub_1000184A8(a1, (uint64_t)v6);
  __asm { BR              X11 }
}

uint64_t sub_100354A84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;

  *(_DWORD *)(v3 - 88) = a1;
  *(_WORD *)(v3 - 84) = WORD2(a1) & 0x3FFF;
  v4 = (_QWORD *)swift_allocObject(&unk_1007EFFB0, 56, 7);
  v4[2] = v3 - 152;
  v4[3] = v1;
  v4[4] = *(_QWORD *)(v3 - 208);
  v4[5] = v2;
  v4[6] = v3 - 72;
  v5 = swift_allocObject(&unk_1007EFFD8, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_10036643C;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v3 - 168) = sub_100119B20;
  *(_QWORD *)(v3 - 160) = v5;
  *(_QWORD *)(v3 - 200) = _NSConcreteStackBlock;
  *(_QWORD *)(v3 - 192) = 1107296256;
  *(_QWORD *)(v3 - 184) = sub_1000098C4;
  *(_QWORD *)(v3 - 176) = &unk_1007EFFF0;
  v6 = _Block_copy((const void *)(v3 - 200));
  v7 = *(_QWORD *)(v3 - 160);
  v8 = v2;
  swift_retain();
  swift_release(v7);
  objc_msgSend(v8, "performBlockAndWait:", v6);
  _Block_release(v6);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation(v5, "", 109, 25, 45, 1);
  swift_release(v5);
  if ((v6 & 1) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(_QWORD *)(v3 - 72))
  {
    v9 = swift_errorRetain(*(_QWORD *)(v3 - 72));
    swift_willThrow(v9);

    swift_errorRelease(*(_QWORD *)(v3 - 72));
    sub_100366458(*(_QWORD *)(v3 - 152), *(_QWORD *)(v3 - 144), *(_QWORD *)(v3 - 136));
    return swift_release(v4);
  }
  v11 = *(_QWORD *)(v3 - 136);
  if (!v11)
  {
LABEL_7:
    __break(1u);
    JUMPOUT(0x100354DD4);
  }
  v13 = *(_QWORD *)(v3 - 152);
  v12 = *(_QWORD *)(v3 - 144);
  sub_1000A70E4(v13, v12);
  swift_bridgeObjectRetain(v11);

  v14 = *(uint64_t **)(v3 - 216);
  *v14 = v13;
  v14[1] = v12;
  v14[2] = v11;
  swift_errorRelease(*(_QWORD *)(v3 - 72));
  sub_100366458(*(_QWORD *)(v3 - 152), *(_QWORD *)(v3 - 144), *(_QWORD *)(v3 - 136));
  return swift_release(v4);
}

void sub_100354DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  NSString v7;
  _BYTE v9[40];
  uint64_t v11;

  v4 = v3;
  v6 = type metadata accessor for UUID(0);
  __chkstk_darwin(v6);
  v11 = 0;
  sub_1000181B8();
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "newBackgroundContextWithAuthor:", v7, swift_bridgeObjectRelease().n128_f64[0], a3);

  sub_1000184A8(a1, (uint64_t)v9);
  __asm { BR              X11 }
}

uint64_t sub_100354EC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  uint64_t v10;

  *(_DWORD *)(v3 - 88) = a1;
  *(_WORD *)(v3 - 84) = WORD2(a1) & 0x3FFF;
  v4 = (_QWORD *)swift_allocObject(&unk_1007EFEC0, 56, 7);
  v4[2] = v3 - 72;
  v4[3] = v1;
  v4[4] = *(_QWORD *)(v3 - 192);
  v4[5] = v2;
  v4[6] = v3 - 136;
  v5 = swift_allocObject(&unk_1007EFEE8, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_100365D44;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v3 - 152) = sub_100119B20;
  *(_QWORD *)(v3 - 144) = v5;
  *(_QWORD *)(v3 - 184) = _NSConcreteStackBlock;
  *(_QWORD *)(v3 - 176) = 1107296256;
  *(_QWORD *)(v3 - 168) = sub_1000098C4;
  *(_QWORD *)(v3 - 160) = &unk_1007EFF00;
  v6 = _Block_copy((const void *)(v3 - 184));
  v7 = *(_QWORD *)(v3 - 144);
  v8 = v2;
  swift_retain();
  swift_release(v7);
  objc_msgSend(v8, "performBlockAndWait:", v6);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 109, 25, 45, 1);
  swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v3 - 136))
  {
    v5 = *(_QWORD *)(v3 - 72);
    if (v5)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v3 - 72));

      swift_errorRelease(*(_QWORD *)(v3 - 136));
      swift_release(v4);
      swift_bridgeObjectRelease();
      return v5;
    }
LABEL_8:
    __break(1u);
    JUMPOUT(0x1003551F8);
  }
  v10 = swift_errorRetain(*(_QWORD *)(v3 - 136));
  swift_willThrow(v10);

  swift_errorRelease(*(_QWORD *)(v3 - 136));
  swift_release(v4);
  swift_bridgeObjectRelease();
  return v5;
}

void sub_100355208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  NSString v7;
  _BYTE v9[40];
  uint64_t v11;

  v4 = v3;
  v6 = type metadata accessor for UUID(0);
  __chkstk_darwin(v6);
  v11 = 0;
  sub_1000181B8();
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "newBackgroundContextWithAuthor:", v7, swift_bridgeObjectRelease().n128_f64[0], a3);

  sub_1000184A8(a1, (uint64_t)v9);
  __asm { BR              X11 }
}

uint64_t sub_1003552E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  uint64_t v10;

  *(_DWORD *)(v3 - 88) = a1;
  *(_WORD *)(v3 - 84) = WORD2(a1) & 0x3FFF;
  v4 = (_QWORD *)swift_allocObject(&unk_1007F04D8, 56, 7);
  v4[2] = v3 - 72;
  v4[3] = v1;
  v4[4] = *(_QWORD *)(v3 - 192);
  v4[5] = v2;
  v4[6] = v3 - 136;
  v5 = swift_allocObject(&unk_1007F0500, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_100365D44;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v3 - 152) = sub_100119B20;
  *(_QWORD *)(v3 - 144) = v5;
  *(_QWORD *)(v3 - 184) = _NSConcreteStackBlock;
  *(_QWORD *)(v3 - 176) = 1107296256;
  *(_QWORD *)(v3 - 168) = sub_1000098C4;
  *(_QWORD *)(v3 - 160) = &unk_1007F0518;
  v6 = _Block_copy((const void *)(v3 - 184));
  v7 = *(_QWORD *)(v3 - 144);
  v8 = v2;
  swift_retain();
  swift_release(v7);
  objc_msgSend(v8, "performBlockAndWait:", v6);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 109, 25, 45, 1);
  swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v3 - 136))
  {
    v5 = *(_QWORD *)(v3 - 72);
    if (v5)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v3 - 72));

      swift_errorRelease(*(_QWORD *)(v3 - 136));
      swift_release(v4);
      swift_bridgeObjectRelease();
      return v5;
    }
LABEL_8:
    __break(1u);
    JUMPOUT(0x10035561CLL);
  }
  v10 = swift_errorRetain(*(_QWORD *)(v3 - 136));
  swift_willThrow(v10);

  swift_errorRelease(*(_QWORD *)(v3 - 136));
  swift_release(v4);
  swift_bridgeObjectRelease();
  return v5;
}

void sub_10035562C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  NSString v7;
  _BYTE v9[40];
  uint64_t v11;

  v4 = v3;
  v6 = type metadata accessor for UUID(0);
  __chkstk_darwin(v6);
  v11 = 0;
  sub_1000181B8();
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "newBackgroundContextWithAuthor:", v7, swift_bridgeObjectRelease().n128_f64[0], a3);

  sub_1000184A8(a1, (uint64_t)v9);
  __asm { BR              X11 }
}

uint64_t sub_100355708@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  uint64_t v10;

  *(_DWORD *)(v3 - 88) = a1;
  *(_WORD *)(v3 - 84) = WORD2(a1) & 0x3FFF;
  v4 = (_QWORD *)swift_allocObject(&unk_1007F0460, 56, 7);
  v4[2] = v3 - 72;
  v4[3] = v1;
  v4[4] = *(_QWORD *)(v3 - 192);
  v4[5] = v2;
  v4[6] = v3 - 136;
  v5 = swift_allocObject(&unk_1007F0488, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_100365D44;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v3 - 152) = sub_100119B20;
  *(_QWORD *)(v3 - 144) = v5;
  *(_QWORD *)(v3 - 184) = _NSConcreteStackBlock;
  *(_QWORD *)(v3 - 176) = 1107296256;
  *(_QWORD *)(v3 - 168) = sub_1000098C4;
  *(_QWORD *)(v3 - 160) = &unk_1007F04A0;
  v6 = _Block_copy((const void *)(v3 - 184));
  v7 = *(_QWORD *)(v3 - 144);
  v8 = v2;
  swift_retain();
  swift_release(v7);
  objc_msgSend(v8, "performBlockAndWait:", v6);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 109, 25, 45, 1);
  swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v3 - 136))
  {
    v5 = *(_QWORD *)(v3 - 72);
    if (v5)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v3 - 72));

      swift_errorRelease(*(_QWORD *)(v3 - 136));
      swift_release(v4);
      swift_bridgeObjectRelease();
      return v5;
    }
LABEL_8:
    __break(1u);
    JUMPOUT(0x100355A40);
  }
  v10 = swift_errorRetain(*(_QWORD *)(v3 - 136));
  swift_willThrow(v10);

  swift_errorRelease(*(_QWORD *)(v3 - 136));
  swift_release(v4);
  swift_bridgeObjectRelease();
  return v5;
}

void sub_100355A50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  _BYTE v11[40];
  uint64_t v13;

  v4 = v3;
  v6 = type metadata accessor for UUID(0);
  __chkstk_darwin(v6);
  v13 = 0;
  sub_1000181B8();
  v8 = v7;
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "newBackgroundContextWithAuthor:", v9, swift_bridgeObjectRelease(v8).n128_f64[0], a3);

  sub_1000184A8(a1, (uint64_t)v11);
  __asm { BR              X11 }
}

uint64_t sub_100355B2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  uint64_t v10;

  *(_DWORD *)(v3 - 88) = a1;
  *(_WORD *)(v3 - 84) = WORD2(a1) & 0x3FFF;
  v4 = (_QWORD *)swift_allocObject(&unk_1007F03E8, 56, 7);
  v4[2] = v3 - 72;
  v4[3] = v1;
  v4[4] = *(_QWORD *)(v3 - 192);
  v4[5] = v2;
  v4[6] = v3 - 136;
  v5 = swift_allocObject(&unk_1007F0410, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_100365D44;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v3 - 152) = sub_100119B20;
  *(_QWORD *)(v3 - 144) = v5;
  *(_QWORD *)(v3 - 184) = _NSConcreteStackBlock;
  *(_QWORD *)(v3 - 176) = 1107296256;
  *(_QWORD *)(v3 - 168) = sub_1000098C4;
  *(_QWORD *)(v3 - 160) = &unk_1007F0428;
  v6 = _Block_copy((const void *)(v3 - 184));
  v7 = *(_QWORD *)(v3 - 144);
  v8 = v2;
  swift_retain();
  swift_release(v7);
  objc_msgSend(v8, "performBlockAndWait:", v6);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 109, 25, 45, 1);
  swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v3 - 136))
  {
    v5 = *(_QWORD *)(v3 - 72);
    if (v5)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v3 - 72));

      swift_errorRelease(*(_QWORD *)(v3 - 136));
      swift_release(v4);
      swift_bridgeObjectRelease();
      return v5;
    }
LABEL_8:
    __break(1u);
    JUMPOUT(0x100355E64);
  }
  v10 = swift_errorRetain(*(_QWORD *)(v3 - 136));
  swift_willThrow(v10);

  swift_errorRelease(*(_QWORD *)(v3 - 136));
  swift_release(v4);
  swift_bridgeObjectRelease();
  return v5;
}

void sub_100355E84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  _BYTE v11[40];
  uint64_t v13;

  v4 = v3;
  v6 = type metadata accessor for UUID(0);
  __chkstk_darwin(v6);
  v13 = 0;
  sub_1000181B8();
  v8 = v7;
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "newBackgroundContextWithAuthor:", v9, swift_bridgeObjectRelease(v8).n128_f64[0], a3);

  sub_1000184A8(a1, (uint64_t)v11);
  __asm { BR              X11 }
}

uint64_t sub_100355F60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  uint64_t v10;

  *(_DWORD *)(v3 - 88) = a1;
  *(_WORD *)(v3 - 84) = WORD2(a1) & 0x3FFF;
  v4 = (_QWORD *)swift_allocObject(&unk_1007EFD58, 56, 7);
  v4[2] = v3 - 72;
  v4[3] = v1;
  v4[4] = *(_QWORD *)(v3 - 192);
  v4[5] = v2;
  v4[6] = v3 - 136;
  v5 = swift_allocObject(&unk_1007EFD80, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_100365D00;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v3 - 152) = sub_100119B20;
  *(_QWORD *)(v3 - 144) = v5;
  *(_QWORD *)(v3 - 184) = _NSConcreteStackBlock;
  *(_QWORD *)(v3 - 176) = 1107296256;
  *(_QWORD *)(v3 - 168) = sub_1000098C4;
  *(_QWORD *)(v3 - 160) = &unk_1007EFD98;
  v6 = _Block_copy((const void *)(v3 - 184));
  v7 = *(_QWORD *)(v3 - 144);
  v8 = v2;
  swift_retain();
  swift_release(v7);
  objc_msgSend(v8, "performBlockAndWait:", v6);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 109, 25, 45, 1);
  swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v3 - 136))
  {
    v5 = *(_QWORD *)(v3 - 72);
    if (v5)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v3 - 72));

      swift_errorRelease(*(_QWORD *)(v3 - 136));
      swift_release(v4);
      swift_bridgeObjectRelease();
      return v5;
    }
LABEL_8:
    __break(1u);
    JUMPOUT(0x100356298);
  }
  v10 = swift_errorRetain(*(_QWORD *)(v3 - 136));
  swift_willThrow(v10);

  swift_errorRelease(*(_QWORD *)(v3 - 136));
  swift_release(v4);
  swift_bridgeObjectRelease();
  return v5;
}

void sub_1003562A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  NSString v7;
  _BYTE v9[40];
  uint64_t v11;

  v4 = v3;
  v6 = type metadata accessor for UUID(0);
  __chkstk_darwin(v6);
  v11 = 0;
  sub_1000181B8();
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "newBackgroundContextWithAuthor:", v7, swift_bridgeObjectRelease().n128_f64[0], a3);

  sub_1000184A8(a1, (uint64_t)v9);
  __asm { BR              X11 }
}

uint64_t sub_100356384@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  uint64_t v10;

  *(_DWORD *)(v3 - 88) = a1;
  *(_WORD *)(v3 - 84) = WORD2(a1) & 0x3FFF;
  v4 = (_QWORD *)swift_allocObject(&unk_1007EFCE0, 56, 7);
  v4[2] = v3 - 72;
  v4[3] = v1;
  v4[4] = *(_QWORD *)(v3 - 192);
  v4[5] = v2;
  v4[6] = v3 - 136;
  v5 = swift_allocObject(&unk_1007EFD08, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_100365D00;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v3 - 152) = sub_100119B20;
  *(_QWORD *)(v3 - 144) = v5;
  *(_QWORD *)(v3 - 184) = _NSConcreteStackBlock;
  *(_QWORD *)(v3 - 176) = 1107296256;
  *(_QWORD *)(v3 - 168) = sub_1000098C4;
  *(_QWORD *)(v3 - 160) = &unk_1007EFD20;
  v6 = _Block_copy((const void *)(v3 - 184));
  v7 = *(_QWORD *)(v3 - 144);
  v8 = v2;
  swift_retain();
  swift_release(v7);
  objc_msgSend(v8, "performBlockAndWait:", v6);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 109, 25, 45, 1);
  swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v3 - 136))
  {
    v5 = *(_QWORD *)(v3 - 72);
    if (v5)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v3 - 72));

      swift_errorRelease(*(_QWORD *)(v3 - 136));
      swift_release(v4);
      swift_bridgeObjectRelease();
      return v5;
    }
LABEL_8:
    __break(1u);
    JUMPOUT(0x1003566BCLL);
  }
  v10 = swift_errorRetain(*(_QWORD *)(v3 - 136));
  swift_willThrow(v10);

  swift_errorRelease(*(_QWORD *)(v3 - 136));
  swift_release(v4);
  swift_bridgeObjectRelease();
  return v5;
}

void sub_1003566CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  _BYTE v11[40];
  uint64_t v13;

  v4 = v3;
  v6 = type metadata accessor for UUID(0);
  __chkstk_darwin(v6);
  v13 = 0;
  sub_1000181B8();
  v8 = v7;
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "newBackgroundContextWithAuthor:", v9, swift_bridgeObjectRelease(v8).n128_f64[0], a3);

  sub_1000184A8(a1, (uint64_t)v11);
  __asm { BR              X11 }
}

uint64_t sub_1003567A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  uint64_t v10;

  *(_DWORD *)(v3 - 88) = a1;
  *(_WORD *)(v3 - 84) = WORD2(a1) & 0x3FFF;
  v4 = (_QWORD *)swift_allocObject(&unk_1007EFB00, 56, 7);
  v4[2] = v3 - 72;
  v4[3] = v1;
  v4[4] = *(_QWORD *)(v3 - 192);
  v4[5] = v2;
  v4[6] = v3 - 136;
  v5 = swift_allocObject(&unk_1007EFB28, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_100365D00;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v3 - 152) = sub_1000098EC;
  *(_QWORD *)(v3 - 144) = v5;
  *(_QWORD *)(v3 - 184) = _NSConcreteStackBlock;
  *(_QWORD *)(v3 - 176) = 1107296256;
  *(_QWORD *)(v3 - 168) = sub_1000098C4;
  *(_QWORD *)(v3 - 160) = &unk_1007EFB40;
  v6 = _Block_copy((const void *)(v3 - 184));
  v7 = *(_QWORD *)(v3 - 144);
  v8 = v2;
  swift_retain();
  swift_release(v7);
  objc_msgSend(v8, "performBlockAndWait:", v6);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 109, 25, 45, 1);
  swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v3 - 136))
  {
    v5 = *(_QWORD *)(v3 - 72);
    if (v5)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v3 - 72));

      swift_errorRelease(*(_QWORD *)(v3 - 136));
      swift_release(v4);
      swift_bridgeObjectRelease();
      return v5;
    }
LABEL_8:
    __break(1u);
    JUMPOUT(0x100356AE0);
  }
  v10 = swift_errorRetain(*(_QWORD *)(v3 - 136));
  swift_willThrow(v10);

  swift_errorRelease(*(_QWORD *)(v3 - 136));
  swift_release(v4);
  swift_bridgeObjectRelease();
  return v5;
}

void sub_100356AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  NSString v7;
  _BYTE v9[40];
  uint64_t v11;

  v4 = v3;
  v6 = type metadata accessor for UUID(0);
  __chkstk_darwin(v6);
  v11 = 0;
  sub_1000181B8();
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "newBackgroundContextWithAuthor:", v7, swift_bridgeObjectRelease().n128_f64[0], a3);

  sub_1000184A8(a1, (uint64_t)v9);
  __asm { BR              X11 }
}

uint64_t sub_100356BCC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  uint64_t v10;

  *(_DWORD *)(v3 - 88) = a1;
  *(_WORD *)(v3 - 84) = WORD2(a1) & 0x3FFF;
  v4 = (_QWORD *)swift_allocObject(&unk_1007EFBF0, 56, 7);
  v4[2] = v3 - 72;
  v4[3] = v1;
  v4[4] = *(_QWORD *)(v3 - 192);
  v4[5] = v2;
  v4[6] = v3 - 136;
  v5 = swift_allocObject(&unk_1007EFC18, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_100365D00;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v3 - 152) = sub_100119B20;
  *(_QWORD *)(v3 - 144) = v5;
  *(_QWORD *)(v3 - 184) = _NSConcreteStackBlock;
  *(_QWORD *)(v3 - 176) = 1107296256;
  *(_QWORD *)(v3 - 168) = sub_1000098C4;
  *(_QWORD *)(v3 - 160) = &unk_1007EFC30;
  v6 = _Block_copy((const void *)(v3 - 184));
  v7 = *(_QWORD *)(v3 - 144);
  v8 = v2;
  swift_retain();
  swift_release(v7);
  objc_msgSend(v8, "performBlockAndWait:", v6);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 109, 25, 45, 1);
  swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v3 - 136))
  {
    v5 = *(_QWORD *)(v3 - 72);
    if (v5)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v3 - 72));

      swift_errorRelease(*(_QWORD *)(v3 - 136));
      swift_release(v4);
      swift_bridgeObjectRelease();
      return v5;
    }
LABEL_8:
    __break(1u);
    JUMPOUT(0x100356F04);
  }
  v10 = swift_errorRetain(*(_QWORD *)(v3 - 136));
  swift_willThrow(v10);

  swift_errorRelease(*(_QWORD *)(v3 - 136));
  swift_release(v4);
  swift_bridgeObjectRelease();
  return v5;
}

void sub_100356F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  _BYTE v11[40];
  char v13;

  v4 = v3;
  v6 = type metadata accessor for UUID(0);
  __chkstk_darwin(v6);
  v13 = 2;
  sub_1000181B8();
  v8 = v7;
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "newBackgroundContextWithAuthor:", v9, swift_bridgeObjectRelease(v8).n128_f64[0], a3);

  sub_1000184A8(a1, (uint64_t)v11);
  __asm { BR              X11 }
}

uint64_t sub_100356FF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  uint64_t v10;
  int v11;

  *(_DWORD *)(v3 - 88) = a1;
  *(_WORD *)(v3 - 84) = WORD2(a1) & 0x3FFF;
  v4 = (_QWORD *)swift_allocObject(&unk_1007EFDD0, 56, 7);
  v4[2] = v3 - 65;
  v4[3] = v1;
  v4[4] = *(_QWORD *)(v3 - 192);
  v4[5] = v2;
  v4[6] = v3 - 136;
  v5 = swift_allocObject(&unk_1007EFDF8, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_1003663E4;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v3 - 152) = sub_100119B20;
  *(_QWORD *)(v3 - 144) = v5;
  *(_QWORD *)(v3 - 184) = _NSConcreteStackBlock;
  *(_QWORD *)(v3 - 176) = 1107296256;
  *(_QWORD *)(v3 - 168) = sub_1000098C4;
  *(_QWORD *)(v3 - 160) = &unk_1007EFE10;
  v6 = _Block_copy((const void *)(v3 - 184));
  v7 = *(_QWORD *)(v3 - 144);
  v8 = v2;
  swift_retain();
  swift_release(v7);
  objc_msgSend(v8, "performBlockAndWait:", v6);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 109, 25, 45, 1);
  swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v3 - 136))
  {
    v11 = *(unsigned __int8 *)(v3 - 65);
    if (v11 != 2)
    {

      LOBYTE(v8) = v11 & 1;
      swift_errorRelease(*(_QWORD *)(v3 - 136));
      swift_release(v4);
      return v8 & 1;
    }
LABEL_8:
    __break(1u);
    JUMPOUT(0x100357314);
  }
  v10 = swift_errorRetain(*(_QWORD *)(v3 - 136));
  swift_willThrow(v10);

  swift_errorRelease(*(_QWORD *)(v3 - 136));
  swift_release(v4);
  return v8 & 1;
}

void sub_100357324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  NSString v7;
  _BYTE v9[40];
  uint64_t v11;

  v4 = v3;
  v6 = type metadata accessor for UUID(0);
  __chkstk_darwin(v6);
  v11 = 0;
  sub_1000181B8();
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "newBackgroundContextWithAuthor:", v7, swift_bridgeObjectRelease().n128_f64[0], a3);

  sub_1000184A8(a1, (uint64_t)v9);
  __asm { BR              X11 }
}

uint64_t sub_100357400@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  uint64_t v10;

  *(_DWORD *)(v3 - 88) = a1;
  *(_WORD *)(v3 - 84) = WORD2(a1) & 0x3FFF;
  v4 = (_QWORD *)swift_allocObject(&unk_1007EFF38, 56, 7);
  v4[2] = v3 - 72;
  v4[3] = v1;
  v4[4] = *(_QWORD *)(v3 - 192);
  v4[5] = v2;
  v4[6] = v3 - 136;
  v5 = swift_allocObject(&unk_1007EFF60, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_100365D00;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v3 - 152) = sub_100119B20;
  *(_QWORD *)(v3 - 144) = v5;
  *(_QWORD *)(v3 - 184) = _NSConcreteStackBlock;
  *(_QWORD *)(v3 - 176) = 1107296256;
  *(_QWORD *)(v3 - 168) = sub_1000098C4;
  *(_QWORD *)(v3 - 160) = &unk_1007EFF78;
  v6 = _Block_copy((const void *)(v3 - 184));
  v7 = *(_QWORD *)(v3 - 144);
  v8 = v2;
  swift_retain();
  swift_release(v7);
  objc_msgSend(v8, "performBlockAndWait:", v6);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 109, 25, 45, 1);
  swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v3 - 136))
  {
    v5 = *(_QWORD *)(v3 - 72);
    if (v5)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v3 - 72));

      swift_errorRelease(*(_QWORD *)(v3 - 136));
      swift_release(v4);
      swift_bridgeObjectRelease();
      return v5;
    }
LABEL_8:
    __break(1u);
    JUMPOUT(0x100357738);
  }
  v10 = swift_errorRetain(*(_QWORD *)(v3 - 136));
  swift_willThrow(v10);

  swift_errorRelease(*(_QWORD *)(v3 - 136));
  swift_release(v4);
  swift_bridgeObjectRelease();
  return v5;
}

void sub_100357748(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  NSString v5;
  _BYTE v6[40];
  uint64_t v8;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  __chkstk_darwin(v4);
  v8 = 0;
  sub_1000181B8();
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "newBackgroundContextWithAuthor:", v5, swift_bridgeObjectRelease().n128_f64[0]);

  sub_1000184A8(a1, (uint64_t)v6);
  __asm { BR              X11 }
}

void sub_100357824(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  char isEscapingClosureAtFileLocation;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;

  *(_DWORD *)(v4 - 88) = a1;
  *(_WORD *)(v4 - 84) = WORD2(a1) & 0x3FFF;
  v5 = (_QWORD *)swift_allocObject(&unk_1007F00A0, 56, 7);
  v5[2] = v4 - 72;
  v5[3] = v2;
  v5[4] = v1;
  v5[5] = v3;
  v5[6] = v4 - 136;
  v6 = swift_allocObject(&unk_1007F00C8, 32, 7);
  *(_QWORD *)(v6 + 16) = sub_100366400;
  *(_QWORD *)(v6 + 24) = v5;
  *(_QWORD *)(v4 - 152) = sub_100119B20;
  *(_QWORD *)(v4 - 144) = v6;
  *(_QWORD *)(v4 - 184) = _NSConcreteStackBlock;
  *(_QWORD *)(v4 - 176) = 1107296256;
  *(_QWORD *)(v4 - 168) = sub_1000098C4;
  *(_QWORD *)(v4 - 160) = &unk_1007F00E0;
  v7 = _Block_copy((const void *)(v4 - 184));
  v8 = *(_QWORD *)(v4 - 144);
  v9 = v3;
  swift_retain();
  swift_release(v8);
  objc_msgSend(v9, "performBlockAndWait:", v7);
  _Block_release(v7);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v6, "", 109, 25, 45, 1);
  swift_release(v6);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(_QWORD *)(v4 - 136))
  {
    v11 = swift_errorRetain(*(_QWORD *)(v4 - 136));
    swift_willThrow(v11);

    swift_errorRelease(*(_QWORD *)(v4 - 136));
    v12 = *(void **)(v4 - 72);
    swift_release(v5);

    return;
  }
  v13 = *(void **)(v4 - 72);
  if (!v13)
  {
LABEL_7:
    __break(1u);
    JUMPOUT(0x100357B50);
  }
  v13;

  swift_errorRelease(*(_QWORD *)(v4 - 136));
  v14 = *(void **)(v4 - 72);
  swift_release(v5);

}

void sub_100357B60(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  _BYTE v8[40];
  uint64_t v10;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  __chkstk_darwin(v4);
  v10 = 0;
  sub_1000181B8();
  v6 = v5;
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "newBackgroundContextWithAuthor:", v7, swift_bridgeObjectRelease(v6).n128_f64[0]);

  sub_1000184A8(a1, (uint64_t)v8);
  __asm { BR              X11 }
}

void sub_100357C3C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  char isEscapingClosureAtFileLocation;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;

  *(_DWORD *)(v4 - 88) = a1;
  *(_WORD *)(v4 - 84) = WORD2(a1) & 0x3FFF;
  v5 = (_QWORD *)swift_allocObject(&unk_1007EFE48, 56, 7);
  v5[2] = v4 - 72;
  v5[3] = v2;
  v5[4] = v1;
  v5[5] = v3;
  v5[6] = v4 - 136;
  v6 = swift_allocObject(&unk_1007EFE70, 32, 7);
  *(_QWORD *)(v6 + 16) = sub_100366400;
  *(_QWORD *)(v6 + 24) = v5;
  *(_QWORD *)(v4 - 152) = sub_100119B20;
  *(_QWORD *)(v4 - 144) = v6;
  *(_QWORD *)(v4 - 184) = _NSConcreteStackBlock;
  *(_QWORD *)(v4 - 176) = 1107296256;
  *(_QWORD *)(v4 - 168) = sub_1000098C4;
  *(_QWORD *)(v4 - 160) = &unk_1007EFE88;
  v7 = _Block_copy((const void *)(v4 - 184));
  v8 = *(_QWORD *)(v4 - 144);
  v9 = v3;
  swift_retain();
  swift_release(v8);
  objc_msgSend(v9, "performBlockAndWait:", v7);
  _Block_release(v7);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v6, "", 109, 25, 45, 1);
  swift_release(v6);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(_QWORD *)(v4 - 136))
  {
    v11 = swift_errorRetain(*(_QWORD *)(v4 - 136));
    swift_willThrow(v11);

    swift_errorRelease(*(_QWORD *)(v4 - 136));
    v12 = *(void **)(v4 - 72);
    swift_release(v5);

    return;
  }
  v13 = *(void **)(v4 - 72);
  if (!v13)
  {
LABEL_7:
    __break(1u);
    JUMPOUT(0x100357F68);
  }
  v13;

  swift_errorRelease(*(_QWORD *)(v4 - 136));
  v14 = *(void **)(v4 - 72);
  swift_release(v5);

}

uint64_t sub_100357F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100358008(a1, a2, a3, a4, (unint64_t *)&unk_100840000, off_1007D6720, (unint64_t)sub_1002DB290, &qword_10083FD40, &qword_100846BB8);
}

uint64_t sub_100357FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100358008(a1, a2, a3, a4, &qword_10083AA30, off_1007D6658, (unint64_t)sub_1002DB2A4, &qword_10083FCA0, (uint64_t *)&unk_100846B50);
}

uint64_t sub_100358008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, _QWORD *a6, unint64_t a7, uint64_t *a8, uint64_t *a9)
{
  uint64_t v9;
  uint64_t v15;
  id v16;
  id v17;
  NSArray v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  Class isa;
  uint64_t v34;
  uint64_t j;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned __int8 v45;
  _QWORD *v46;
  char v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v66;
  void (*v67)(__int128 *, _QWORD);
  uint64_t v68;
  Class v69;
  uint64_t result;
  Swift::String v71;
  uint64_t v72;
  uint64_t *v73;
  Swift::String v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(_QWORD, _QWORD);
  uint64_t v80;
  __int128 v81;
  void *v82;
  _QWORD *v83;
  uint64_t v84;
  unsigned __int8 v85;
  _QWORD *v86;
  uint64_t v87;

  v15 = sub_1000151B0(0, a5, a6);
  v16 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v17 = objc_msgSend((id)swift_getObjCClassFromMetadata(v15), "entity");
  objc_msgSend(v16, "setEntity:", v17);

  if (a3)
  {
    sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
    v18.super.isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v18.super.isa = 0;
  }
  objc_msgSend(v16, "setAffectedStores:", v18.super.isa);

  objc_msgSend(v16, "setPredicate:", a4);
  v87 = (uint64_t)&_swiftEmptySetSingleton;
  v75 = v16;
  if (!a2)
    goto LABEL_36;
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0)
      v22 = a2;
    else
      v22 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v19 = _CocoaArrayWrapper.endIndex.getter(v22);
    if (v19)
      goto LABEL_7;
  }
  else
  {
    v19 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a2);
    if (v19)
    {
LABEL_7:
      if (v19 < 1)
      {
        __break(1u);
        goto LABEL_84;
      }
      for (i = 0; i != v19; ++i)
      {
        if ((a2 & 0xC000000000000001) != 0)
        {
          v21 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a2);
        }
        else
        {
          v21 = *(_QWORD *)(a2 + 8 * i + 32);
          swift_retain(v21);
        }
        ((void (*)(__int128 *, uint64_t))a7)(&v81, v21);
        swift_release(v81);
      }
    }
  }
  swift_bridgeObjectRelease(a2);
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0)
      v24 = a2;
    else
      v24 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v23 = _CocoaArrayWrapper.endIndex.getter(v24);
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v23 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v25 = _swiftEmptyArrayStorage;
  if (v23)
  {
    v83 = _swiftEmptyArrayStorage;
    sub_1001C1B0C(0, v23 & ~(v23 >> 63), 0);
    if ((v23 & 0x8000000000000000) == 0)
    {
      v76 = a1;
      v78 = (void (*)(_QWORD, _QWORD))a7;
      a1 = 0;
      v25 = v83;
      while (v23 != a1)
      {
        if ((a2 & 0xC000000000000001) != 0)
        {
          v27 = specialized _ArrayBuffer._getElementSlowPath(_:)(a1, a2);
          v9 = v27;
        }
        else
        {
          v9 = *(_QWORD *)(a2 + 8 * a1 + 32);
          v27 = swift_retain(v9);
        }
        v28 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v27);
        if (!v29)
          goto LABEL_88;
        v30 = v28;
        v31 = v29;
        swift_release(v9);
        v83 = v25;
        a7 = v25[2];
        v32 = v25[3];
        v9 = a7 + 1;
        if (a7 >= v32 >> 1)
        {
          sub_1001C1B0C(v32 > 1, a7 + 1, 1);
          v25 = v83;
        }
        ++a1;
        v25[2] = v9;
        v26 = (uint64_t)&v25[2 * a7];
        *(_QWORD *)(v26 + 32) = v30;
        *(_QWORD *)(v26 + 40) = v31;
        if (v23 == a1)
        {
          v16 = v75;
          a1 = v76;
          a7 = (unint64_t)v78;
          goto LABEL_35;
        }
      }
      __break(1u);
      goto LABEL_47;
    }
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
LABEL_35:
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v16, "setRelationshipKeyPathsForPrefetching:", isa, swift_bridgeObjectRelease(v25).n128_f64[0]);

LABEL_36:
  if (!a1)
  {
    swift_bridgeObjectRelease(v87);
    return (uint64_t)v16;
  }
  v26 = a1 & 0xFFFFFFFFFFFFFF8;
  if (!((unint64_t)a1 >> 62))
  {
    v34 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (!v34)
      goto LABEL_51;
    goto LABEL_39;
  }
LABEL_47:
  if (a1 >= 0)
    v37 = v26;
  else
    v37 = a1;
  swift_bridgeObjectRetain(a1);
  v34 = _CocoaArrayWrapper.endIndex.getter(v37);
  if (!v34)
    goto LABEL_51;
LABEL_39:
  if (v34 < 1)
  {
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    *(_QWORD *)&v81 = 0;
    *((_QWORD *)&v81 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v71._object = (void *)0x80000001006F8C10;
    v71._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v71);
    v86 = (_QWORD *)v9;
    v72 = sub_10001A630(a8);
    v73 = (uint64_t *)&v86;
    goto LABEL_90;
  }
  for (j = 0; j != v34; ++j)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v36 = specialized _ArrayBuffer._getElementSlowPath(_:)(j, a1);
    }
    else
    {
      v36 = *(_QWORD *)(a1 + 8 * j + 32);
      swift_retain(v36);
    }
    ((void (*)(__int128 *, uint64_t))a7)(&v81, v36);
    swift_release(v81);
  }
LABEL_51:
  swift_bridgeObjectRelease(a1);
  v38 = v87;
  v39 = v87 & 0xC000000000000001;
  if ((v87 & 0xC000000000000001) != 0)
  {
    if (v87 < 0)
      v40 = v87;
    else
      v40 = v87 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v87);
    v41 = __CocoaSet.count.getter(v40);
    if (v41)
      goto LABEL_56;
    goto LABEL_62;
  }
  v41 = *(_QWORD *)(v87 + 16);
  swift_bridgeObjectRetain(v87);
  if (!v41)
  {
LABEL_62:
    swift_bridgeObjectRelease(v38);
    v46 = _swiftEmptyArrayStorage;
LABEL_81:
    swift_bridgeObjectRelease(v38);
    v69 = Array._bridgeToObjectiveC()().super.isa;
    v16 = v75;
    objc_msgSend(v75, "setPropertiesToFetch:", v69, swift_bridgeObjectRelease(v46).n128_f64[0]);

    return (uint64_t)v16;
  }
LABEL_56:
  v86 = _swiftEmptyArrayStorage;
  sub_1001C1C48(0, v41 & ~(v41 >> 63), 0);
  if (v39)
  {
    if (v38 < 0)
      v42 = v38;
    else
      v42 = v38 & 0xFFFFFFFFFFFFFF8;
    v43 = (_QWORD *)__CocoaSet.startIndex.getter(v42);
    v45 = 1;
  }
  else
  {
    v43 = (_QWORD *)sub_100364E90(v38);
    v45 = v47 & 1;
  }
  v83 = v43;
  v84 = v44;
  v85 = v45;
  if (v41 < 0)
    goto LABEL_86;
  v48 = v38 & 0xFFFFFFFFFFFFFF8;
  if (v38 < 0)
    v48 = v38;
  v77 = v48;
  while (1)
  {
    v55 = (int64_t)v83;
    v54 = v84;
    v9 = v85;
    v56 = sub_100364C28((uint64_t)v83, v84, v85, v38, a8);
    v57 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v56);
    if (!v58)
      break;
    v59 = v57;
    v60 = v58;
    v82 = &type metadata for String;
    swift_release(v56);
    *(_QWORD *)&v81 = v59;
    *((_QWORD *)&v81 + 1) = v60;
    v61 = v86;
    if ((swift_isUniquelyReferenced_nonNull_native(v86) & 1) == 0)
    {
      sub_1001C1C48(0, v61[2] + 1, 1);
      v61 = v86;
    }
    v63 = v61[2];
    v62 = v61[3];
    if (v63 >= v62 >> 1)
    {
      sub_1001C1C48(v62 > 1, v63 + 1, 1);
      v61 = v86;
    }
    v61[2] = v63 + 1;
    sub_10001A6CC(&v81, &v61[4 * v63 + 4]);
    if (v39)
    {
      if ((v9 & 1) == 0)
        goto LABEL_87;
      v64 = __CocoaSet.Index.handleBitPattern.getter(v55, v54);
      if (v64)
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v64);
      else
        isUniquelyReferenced_nonNull_native = 1;
      v66 = sub_10001A630(a9);
      v67 = (void (*)(__int128 *, _QWORD))Set.Index._asCocoa.modify(&v81, v66);
      __CocoaSet.formIndex(after:isUnique:)(v68, isUniquelyReferenced_nonNull_native, v77);
      v67(&v81, 0);
      if (!--v41)
      {
LABEL_80:
        sub_1000E515C((uint64_t)v83, v84, v85);
        swift_bridgeObjectRelease(v38);
        v46 = v86;
        v38 = v87;
        goto LABEL_81;
      }
    }
    else
    {
      v49 = (_QWORD *)sub_100364570(v55, v54, v9, v38);
      v51 = v50;
      v53 = v52;
      sub_1000E515C(v55, v54, v9);
      v83 = v49;
      v84 = v51;
      v85 = v53 & 1;
      if (!--v41)
        goto LABEL_80;
    }
  }
  *(_QWORD *)&v81 = 0;
  *((_QWORD *)&v81 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v74._object = (void *)0x80000001006F8C10;
  v74._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v74);
  v80 = v56;
  v72 = sub_10001A630(a8);
  v73 = &v80;
LABEL_90:
  _print_unlocked<A, B>(_:_:)(v73, &v81, v72, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v81, *((_QWORD *)&v81 + 1), "remindd/TypedPredicate.swift", 28, 2, 19, 0);
  __break(1u);
  return result;
}

uint64_t sub_100358798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100358008(a1, a2, a3, a4, (unint64_t *)&qword_10083AE90, off_1007D6708, (unint64_t)sub_1002DB2B8, (uint64_t *)&unk_10083AEC0, (uint64_t *)&unk_100846B20);
}

uint64_t sub_1003587E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100358804(a1, a2, a3, a4, (uint64_t (*)(_QWORD))type metadata accessor for REMCDDueDateDeltaAlert, (unint64_t)sub_1002DB574, &qword_100843880, &qword_100846B80);
}

uint64_t sub_100358804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), unint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v13;
  uint64_t j;
  id v15;
  NSArray v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  Class isa;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;
  char v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  int64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v64;
  void (*v65)(__int128 *, _QWORD);
  uint64_t v66;
  Class v67;
  uint64_t result;
  Swift::String v69;
  uint64_t v70;
  uint64_t *v71;
  Swift::String v72;
  uint64_t v73;
  id v74;
  void (*v75)(_QWORD, _QWORD);
  uint64_t v76;
  uint64_t v79;
  __int128 v80;
  void *v81;
  _QWORD *v82;
  uint64_t v83;
  char v84;
  _QWORD *v85;
  uint64_t v86;

  v13 = a5(0);
  j = (uint64_t)objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v15 = objc_msgSend((id)swift_getObjCClassFromMetadata(v13), "entity");
  objc_msgSend((id)j, "setEntity:", v15);

  if (a3)
  {
    sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
    v16.super.isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v16.super.isa = 0;
  }
  objc_msgSend((id)j, "setAffectedStores:", v16.super.isa);

  objc_msgSend((id)j, "setPredicate:", a4);
  v86 = (uint64_t)&_swiftEmptySetSingleton;
  v74 = (id)j;
  if (!a2)
    goto LABEL_36;
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0)
      v20 = a2;
    else
      v20 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v17 = _CocoaArrayWrapper.endIndex.getter(v20);
    if (v17)
      goto LABEL_7;
  }
  else
  {
    v17 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a2);
    if (v17)
    {
LABEL_7:
      if (v17 < 1)
      {
        __break(1u);
        goto LABEL_84;
      }
      for (i = 0; i != v17; ++i)
      {
        if ((a2 & 0xC000000000000001) != 0)
        {
          v19 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a2);
        }
        else
        {
          v19 = *(_QWORD *)(a2 + 8 * i + 32);
          swift_retain();
        }
        ((void (*)(__int128 *, uint64_t))a6)(&v80, v19);
        swift_release(v80);
      }
    }
  }
  swift_bridgeObjectRelease(a2);
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0)
      v22 = a2;
    else
      v22 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v21 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v21 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  j = (uint64_t)v74;
  v23 = _swiftEmptyArrayStorage;
  if (v21)
  {
    v82 = _swiftEmptyArrayStorage;
    sub_1001C1B0C(0, v21 & ~(v21 >> 63), 0);
    if ((v21 & 0x8000000000000000) == 0)
    {
      v73 = a1;
      v75 = (void (*)(_QWORD, _QWORD))a6;
      a1 = 0;
      v23 = v82;
      while (v21 != a1)
      {
        if ((a2 & 0xC000000000000001) != 0)
        {
          v25 = specialized _ArrayBuffer._getElementSlowPath(_:)(a1, a2);
          j = v25;
        }
        else
        {
          j = *(_QWORD *)(a2 + 8 * a1 + 32);
          v25 = swift_retain();
        }
        v26 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v25);
        if (!v27)
          goto LABEL_88;
        v28 = v26;
        v29 = v27;
        swift_release(j);
        v82 = v23;
        a6 = v23[2];
        v30 = v23[3];
        j = a6 + 1;
        if (a6 >= v30 >> 1)
        {
          sub_1001C1B0C(v30 > 1, a6 + 1, 1);
          v23 = v82;
        }
        ++a1;
        v23[2] = j;
        v24 = (uint64_t)&v23[2 * a6];
        *(_QWORD *)(v24 + 32) = v28;
        *(_QWORD *)(v24 + 40) = v29;
        if (v21 == a1)
        {
          j = (uint64_t)v74;
          a6 = (unint64_t)v75;
          a1 = v73;
          goto LABEL_35;
        }
      }
      __break(1u);
      goto LABEL_47;
    }
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
LABEL_35:
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend((id)j, "setRelationshipKeyPathsForPrefetching:", isa, swift_bridgeObjectRelease(v23).n128_f64[0]);

LABEL_36:
  if (!a1)
  {
    swift_bridgeObjectRelease(v86);
    return j;
  }
  v24 = a1 & 0xFFFFFFFFFFFFFF8;
  if (!((unint64_t)a1 >> 62))
  {
    v32 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (!v32)
      goto LABEL_51;
    goto LABEL_39;
  }
LABEL_47:
  if (a1 >= 0)
    v34 = v24;
  else
    v34 = a1;
  swift_bridgeObjectRetain(a1);
  v32 = _CocoaArrayWrapper.endIndex.getter(v34);
  if (!v32)
    goto LABEL_51;
LABEL_39:
  if (v32 < 1)
  {
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    *(_QWORD *)&v80 = 0;
    *((_QWORD *)&v80 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v69._object = (void *)0x80000001006F8C10;
    v69._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v69);
    v85 = (_QWORD *)j;
    v70 = sub_10001A630(a7);
    v71 = (uint64_t *)&v85;
    goto LABEL_90;
  }
  for (j = 0; j != v32; ++j)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v33 = specialized _ArrayBuffer._getElementSlowPath(_:)(j, a1);
    }
    else
    {
      v33 = *(_QWORD *)(a1 + 8 * j + 32);
      swift_retain();
    }
    ((void (*)(__int128 *, uint64_t))a6)(&v80, v33);
    swift_release(v80);
  }
LABEL_51:
  swift_bridgeObjectRelease(a1);
  v35 = v86;
  v36 = v86 & 0xC000000000000001;
  if ((v86 & 0xC000000000000001) != 0)
  {
    if (v86 < 0)
      v37 = v86;
    else
      v37 = v86 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v86);
    v38 = __CocoaSet.count.getter(v37);
    if (v38)
      goto LABEL_56;
    goto LABEL_62;
  }
  v38 = *(_QWORD *)(v86 + 16);
  swift_bridgeObjectRetain(v86);
  if (!v38)
  {
LABEL_62:
    swift_bridgeObjectRelease(v35);
    v43 = _swiftEmptyArrayStorage;
LABEL_81:
    swift_bridgeObjectRelease(v35);
    v67 = Array._bridgeToObjectiveC()().super.isa;
    j = (uint64_t)v74;
    objc_msgSend(v74, "setPropertiesToFetch:", v67, swift_bridgeObjectRelease(v43).n128_f64[0]);

    return j;
  }
LABEL_56:
  v85 = _swiftEmptyArrayStorage;
  sub_1001C1C48(0, v38 & ~(v38 >> 63), 0);
  if (v36)
  {
    if (v35 < 0)
      v39 = v35;
    else
      v39 = v35 & 0xFFFFFFFFFFFFFF8;
    v40 = (_QWORD *)__CocoaSet.startIndex.getter(v39);
    v42 = 1;
  }
  else
  {
    v40 = (_QWORD *)sub_100364E90(v35);
    v42 = v44 & 1;
  }
  v82 = v40;
  v83 = v41;
  v84 = v42;
  if (v38 < 0)
    goto LABEL_86;
  v45 = v35 & 0xFFFFFFFFFFFFFF8;
  if (v35 < 0)
    v45 = v35;
  v76 = v45;
  while (1)
  {
    v52 = (int64_t)v82;
    v51 = v83;
    v53 = v84;
    v54 = sub_100364C28((uint64_t)v82, v83, v84, v35, a7);
    v55 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v54);
    if (!v56)
      break;
    v57 = v55;
    v58 = v56;
    v81 = &type metadata for String;
    swift_release(v54);
    *(_QWORD *)&v80 = v57;
    *((_QWORD *)&v80 + 1) = v58;
    v59 = v85;
    if ((swift_isUniquelyReferenced_nonNull_native(v85) & 1) == 0)
    {
      sub_1001C1C48(0, v59[2] + 1, 1);
      v59 = v85;
    }
    v61 = v59[2];
    v60 = v59[3];
    j = v61 + 1;
    if (v61 >= v60 >> 1)
    {
      sub_1001C1C48(v60 > 1, v61 + 1, 1);
      v59 = v85;
    }
    v59[2] = j;
    sub_10001A6CC(&v80, &v59[4 * v61 + 4]);
    if (v36)
    {
      if ((v53 & 1) == 0)
        goto LABEL_87;
      v62 = __CocoaSet.Index.handleBitPattern.getter(v52, v51);
      if (v62)
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v62);
      else
        isUniquelyReferenced_nonNull_native = 1;
      v64 = sub_10001A630(a8);
      v65 = (void (*)(__int128 *, _QWORD))Set.Index._asCocoa.modify(&v80, v64);
      __CocoaSet.formIndex(after:isUnique:)(v66, isUniquelyReferenced_nonNull_native, v76);
      v65(&v80, 0);
      if (!--v38)
      {
LABEL_80:
        sub_1000E515C((uint64_t)v82, v83, v84);
        swift_bridgeObjectRelease(v35);
        v43 = v85;
        v35 = v86;
        goto LABEL_81;
      }
    }
    else
    {
      v46 = (_QWORD *)sub_100364570(v52, v51, v53, v35);
      v48 = v47;
      v50 = v49;
      sub_1000E515C(v52, v51, v53);
      v82 = v46;
      v83 = v48;
      v84 = v50 & 1;
      if (!--v38)
        goto LABEL_80;
    }
  }
  *(_QWORD *)&v80 = 0;
  *((_QWORD *)&v80 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v72._object = (void *)0x80000001006F8C10;
  v72._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v72);
  v79 = v54;
  v70 = sub_10001A630(a7);
  v71 = &v79;
LABEL_90:
  _print_unlocked<A, B>(_:_:)(v71, &v80, v70, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v80, *((_QWORD *)&v80 + 1), "remindd/TypedPredicate.swift", 28, 2, 19, 0);
  __break(1u);
  return result;
}

uint64_t sub_100358F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100358008(a1, a2, a3, a4, (unint64_t *)&qword_100839900, off_1007D66E0, (unint64_t)sub_1002DB80C, &qword_100843760, &qword_100846B38);
}

uint64_t sub_100358FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100358804(a1, a2, a3, a4, (uint64_t (*)(_QWORD))type metadata accessor for REMCDAccountListData, (unint64_t)sub_1002DBCD8, &qword_100846BC0, &qword_100846BC8);
}

uint64_t sub_100358FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100358008(a1, a2, a3, a4, (unint64_t *)&qword_10083DA60, off_1007D66C8, (unint64_t)sub_1002DBE3C, &qword_10083DAA0, &qword_100846C00);
}

uint64_t sub_100359040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100358008(a1, a2, a3, a4, &qword_100844930, off_1007D6710, (unint64_t)sub_1002DBE50, (uint64_t *)&unk_10083DA70, &qword_100846C18);
}

uint64_t sub_100359088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100358008(a1, a2, a3, a4, (unint64_t *)&unk_100846BE0, off_1007D66E8, (unint64_t)sub_1002DC3FC, &qword_100843F00, (uint64_t *)&unk_100846BF0);
}

id sub_1003590D0@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "minimumSupportedAppVersion");
  *a2 = result;
  return result;
}

id sub_100359100(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setMinimumSupportedAppVersion:", *a1);
}

_QWORD *sub_100359114(_BYTE *a1, _QWORD *(*a2)(uint64_t *__return_ptr, uint64_t), uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v6;

  result = a2(&v6, a4);
  *a1 = 0;
  return result;
}

uint64_t sub_1003593CC(uint64_t *a1, void (*a2)(uint64_t *__return_ptr, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  a2(&v7, a4);
  v5 = *a1;
  *a1 = v7;
  return sub_10036654C(v5);
}

void sub_100359690(uint64_t *a1, void (*a2)(__int128 *__return_ptr, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  uint64_t v10;

  a2(&v9, a4);
  v5 = v10;
  v6 = *a1;
  v7 = a1[1];
  v8 = (void *)a1[2];
  *(_OWORD *)a1 = v9;
  a1[2] = v5;
  sub_100366500(v6, v7, v8);
}

double sub_100359960(_QWORD *a1, void (*a2)(uint64_t *__return_ptr, uint64_t), uint64_t a3, uint64_t a4)
{
  double result;
  uint64_t v6;

  a2(&v6, a4);
  *a1 = v6;
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

double sub_100359C24(uint64_t *a1, void (*a2)(__int128 *__return_ptr, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;

  a2(&v10, a4);
  v5 = v11;
  v6 = *a1;
  v7 = a1[1];
  v8 = a1[2];
  *(_OWORD *)a1 = v10;
  a1[2] = v5;
  return sub_100366458(v6, v7, v8);
}

void sub_100359EF4(_QWORD *a1, void (*a2)(uint64_t *__return_ptr, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  a2(&v6, a4);
  v5 = v6;
  swift_bridgeObjectRelease();
  *a1 = v5;
}

_QWORD *sub_10035A1B8(_BYTE *a1, _QWORD *(*a2)(uint64_t *__return_ptr, uint64_t), uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v6;

  result = a2(&v6, a4);
  *a1 = v6;
  return result;
}

void sub_10035A474(id *a1, void (*a2)(void **__return_ptr, uint64_t), uint64_t a3, uint64_t a4)
{
  void *v5;
  void *v6;

  a2(&v6, a4);
  v5 = v6;

  *a1 = v5;
}

uint64_t sub_10035A738()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100846A40);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100846A40);
  if (qword_1008375F8 != -1)
    swift_once(&qword_1008375F8, sub_1004A1790);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FC8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_10035A7C8()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(REMLog), "alarmEngine");
  qword_100846A58 = (uint64_t)result;
  return result;
}

uint64_t sub_10035A800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  objc_class *v8;
  char *v9;
  char *v10;
  char *v11;
  objc_super v13;

  *(_OWORD *)(v4 + 40) = xmmword_1006B6FA0;
  *(_QWORD *)(v4 + 56) = 0xED00007265637564;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 86) = 0;
  *(_QWORD *)(v4 + 16) = a1;
  v8 = (objc_class *)type metadata accessor for RDDaemonController();
  v9 = (char *)objc_allocWithZone(v8);
  v10 = &v9[OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon];
  *(_QWORD *)v10 = a2;
  *((_QWORD *)v10 + 1) = a3;
  v11 = &v9[OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity];
  *(_OWORD *)v11 = xmmword_1006B6FB0;
  *(_QWORD *)(v11 + 38) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken] = 0;
  v13.receiver = v9;
  v13.super_class = v8;
  *(_QWORD *)(v4 + 24) = objc_msgSendSuper2(&v13, "init");
  *(_QWORD *)(v4 + 32) = a4;
  return v4;
}

void sub_10035A8E0(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t KeyPath;
  void *v11;
  id v12;
  unsigned __int8 v13;
  Class isa;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  id v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  Class v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  id v41;
  _QWORD *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  void *v47;
  unint64_t v48;
  _BYTE v49[40];

  v5 = objc_msgSend(objc_allocWithZone((Class)REMStore), "initWithDaemonController:", *(_QWORD *)(a1 + 24));
  sub_10020B528(1, 160);
  v7 = v6;
  v8 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v8, v49);
  *(_OWORD *)(inited + 16) = xmmword_1006A7330;
  KeyPath = swift_getKeyPath(L"(\x1B");
  *(_QWORD *)(inited + 32) = KeyPath;
  v48 = inited;
  specialized Array._endMutation()(KeyPath);
  v11 = (void *)sub_100358008(inited, 0, 0, (uint64_t)v7, &qword_100840C10, off_1007D6670, (unint64_t)sub_1002DC764, &qword_1008438C8, &qword_100846BB0);
  swift_bridgeObjectRelease(inited);
  v12 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
  v13 = objc_msgSend(v12, "disableAlarmEngineDataSourcePrefetching");

  if ((v13 & 1) == 0)
  {
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v11, "setRelationshipKeyPathsForPrefetching:", isa);

  }
  v15 = sub_1000151B0(0, &qword_100840C10, off_1007D6670);
  v16 = NSManagedObjectContext.fetch<A>(_:)(v11, v15);
  if (v2)
  {
    v17 = v5;
    v5 = v11;
LABEL_5:

    return;
  }
  v18 = v16;
  v47 = v11;
  v45 = a1;
  v48 = (unint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v16 >> 62)
  {
    if (v16 < 0)
      v32 = v16;
    else
      v32 = v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v16);
    v19 = _CocoaArrayWrapper.endIndex.getter(v32);
    v46 = a2;
    if (v19)
      goto LABEL_8;
LABEL_26:
    swift_bridgeObjectRelease(v18);
    v31 = _swiftEmptyArrayStorage;
    goto LABEL_27;
  }
  v19 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v16);
  v46 = a2;
  if (!v19)
    goto LABEL_26;
LABEL_8:
  if (v19 < 1)
    __break(1u);
  for (i = 0; i != v19; ++i)
  {
    if ((v18 & 0xC000000000000001) != 0)
      v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v18);
    else
      v21 = *(id *)(v18 + 8 * i + 32);
    v22 = v21;
    v23 = objc_msgSend(v21, "alarm");
    if (v23
      && (v24 = v23, v25 = objc_msgSend(v23, "reminder"), v24, v25))
    {
      v26 = objc_msgSend(v25, "remObjectID");

      if (v26)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v27);
        v29 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v28 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v29 >= v28 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1);
        v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v26);
        specialized Array._endMutation()(v30);
      }
    }
    else
    {

    }
  }
  swift_bridgeObjectRelease(v18);
  v31 = (_QWORD *)v48;
LABEL_27:
  v17 = objc_msgSend(objc_allocWithZone((Class)REMRemindersDataView), "initWithStore:", v5);
  v33 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v34 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v31);
  v35 = objc_msgSend((id)objc_opt_self(REMReminderFetchOptions), "defaultFetchOptions");
  v48 = 0;
  v36 = objc_msgSend(v17, "fetchRemindersWithObjectIDs:fetchOptions:error:", v34, v35, &v48);

  v37 = (id)v48;
  if (!v36)
  {
    v43 = (id)v48;
    swift_bridgeObjectRelease(v18);
    _convertNSErrorToError(_:)(v37);

    swift_willThrow(v44);
    goto LABEL_5;
  }
  v38 = sub_1000151B0(0, &qword_100846630, REMReminder_ptr);
  v39 = sub_10011A5DC();
  v40 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v36, v33, v38, v39);
  v41 = v37;

  swift_bridgeObjectRetain(v40);
  swift_retain(v45);
  v42 = sub_1003652DC(v18, v40, v45);
  swift_bridgeObjectRelease(v18);

  swift_bridgeObjectRelease_n(v40, 2);
  swift_release(v45);

  *v46 = v42;
}

void sub_10035AE00(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  NSObject *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  _QWORD *v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  _QWORD *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  os_log_type_t v54;
  uint8_t *v55;
  _QWORD *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  id v64;
  void *v65;
  id v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  NSObject *v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  _QWORD *v75;
  id v76;
  uint64_t v77;
  NSObject *v78;
  NSObject *v79;
  uint64_t v80;
  id v81;
  id v82;
  NSObject *v83;
  NSObject *v84;
  NSObject *v85;
  os_log_type_t v86;
  uint64_t v87;
  _QWORD *v88;
  id v89;
  id v90;
  _QWORD *v91;
  NSObject *v92;
  uint64_t v93;
  NSObject *v94;
  NSObject *v95;
  uint64_t v96;
  NSObject *v97;
  _QWORD *v98;
  _QWORD *v99;
  os_log_type_t v100;
  NSObject *v101;
  NSObject *v102;
  _QWORD *typec;
  void *type;
  os_log_type_t typea[8];
  _QWORD *typeb;
  NSObject *v107;
  __int128 v108[2];
  uint64_t v109;
  uint64_t v110;
  _BYTE v111[16];
  uint64_t v112;
  uint64_t v113;
  id v114;

  v7 = *a1;
  v8 = objc_msgSend(*a1, "alarm");
  if (!v8)
  {
    if (qword_100837288 != -1)
      swift_once(&qword_100837288, sub_10035A738);
    v40 = type metadata accessor for Logger(0);
    sub_10001AAA8(v40, (uint64_t)qword_100846A40);
    v41 = v7;
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      typec = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v44 = 138412290;
      v110 = (uint64_t)v41;
      v45 = a4;
      v46 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, v111);
      *typec = v41;

      a4 = v45;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "LocationDataSourceAlarms: Failed to get cdAlarm from trigger. {cdTrigger: %@}", v44, 0xCu);
      v47 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(typec, 1, v47);
      swift_slowDealloc(typec, -1, -1);
      swift_slowDealloc(v44, -1, -1);

    }
    else
    {

    }
    goto LABEL_47;
  }
  v9 = v8;
  v10 = objc_msgSend(v8, "reminder");
  if (!v10
    || (v11 = v10, v12 = objc_msgSend(v10, "remObjectID"), v11, !v12))
  {
    if (qword_100837288 != -1)
      swift_once(&qword_100837288, sub_10035A738);
    v32 = type metadata accessor for Logger(0);
    sub_10001AAA8(v32, (uint64_t)qword_100846A40);
    v33 = v9;
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v34, v35))
    {

      goto LABEL_47;
    }
    v36 = (uint8_t *)swift_slowAlloc(12, -1);
    v37 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v36 = 138412290;
    v110 = (uint64_t)v33;
    v38 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, v111);
    *v37 = v9;

    _os_log_impl((void *)&_mh_execute_header, v34, v35, "LocationDataSourceAlarms: Failed to get reminderID from cdAlarm.reminder. {cdAlarm: %@}", v36, 0xCu);
    v39 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v37, 1, v39);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v36, -1, -1);
    goto LABEL_16;
  }
  v13 = v12;
  v14 = sub_1002B1B30(v13, a2);

  if (!v14)
  {
    type = v9;
    if (qword_100837288 != -1)
      swift_once(&qword_100837288, sub_10035A738);
    v48 = type metadata accessor for Logger(0);
    sub_10001AAA8(v48, (uint64_t)qword_100846A40);
    v49 = v13;
    v34 = Logger.logObject.getter(v49);
    v50 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v34, v50))
    {

      goto LABEL_40;
    }
    v51 = (uint8_t *)swift_slowAlloc(12, -1);
    v98 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v51 = 138543362;
    v110 = (uint64_t)v49;
    v38 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, v111);
    *v98 = v12;

    _os_log_impl((void *)&_mh_execute_header, v34, v50, "LocationDataSourceAlarms: Failed to get remReminder from dataView result {reminderID: %{public}@}", v51, 0xCu);
    v52 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v98, 1, v52);
    swift_slowDealloc(v98, -1, -1);
    swift_slowDealloc(v51, -1, -1);

LABEL_16:
LABEL_47:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  v15 = objc_msgSend(v14, "assignmentContext");
  v16 = objc_msgSend(v15, "currentAssignment");

  if (v16)
  {

    v17 = *(void **)(a3 + 40);
    v18 = v17;
    LOBYTE(v17) = sub_1004D3090(v17);

    if ((v17 & 1) == 0)
    {
      type = v9;
      if (qword_100837288 != -1)
        swift_once(&qword_100837288, sub_10035A738);
      v53 = type metadata accessor for Logger(0);
      sub_10001AAA8(v53, (uint64_t)qword_100846A40);
      v38 = v14;
      v34 = Logger.logObject.getter(v38);
      v54 = static os_log_type_t.info.getter(v34);
      if (os_log_type_enabled(v34, v54))
      {
        v55 = (uint8_t *)swift_slowAlloc(12, -1);
        v99 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v55 = 138543362;
        v56 = a4;
        v57 = -[NSObject objectID](v38, "objectID");
        v110 = (uint64_t)v57;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, v111);
        *v99 = v57;
        a4 = v56;

        _os_log_impl((void *)&_mh_execute_header, v34, v54, "LocationDataSourceAlarms: remReminder is not assigned to current user. Skipping {reminderID: %{public}@}", v55, 0xCu);
        v58 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v99, 1, v58);
        swift_slowDealloc(v99, -1, -1);
        swift_slowDealloc(v55, -1, -1);

        goto LABEL_16;
      }

LABEL_40:
      goto LABEL_47;
    }
  }
  v19 = objc_msgSend(v14, "alarms");
  v107 = v13;
  if (!v19)
  {
LABEL_33:
    if (qword_100837288 != -1)
      swift_once(&qword_100837288, sub_10035A738);
    v59 = type metadata accessor for Logger(0);
    sub_10001AAA8(v59, (uint64_t)qword_100846A40);
    v60 = v9;
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      v100 = v62;
      *(_QWORD *)typea = a4;
      v63 = (uint8_t *)swift_slowAlloc(12, -1);
      v96 = swift_slowAlloc(32, -1);
      v110 = v96;
      *(_DWORD *)v63 = 136446210;
      v64 = objc_msgSend(v60, "remObjectID");
      if (v64)
      {
        v65 = v64;
        v66 = objc_msgSend(v64, "description");

        v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        v69 = v68;

      }
      else
      {
        v69 = 0xE300000000000000;
        v67 = 7104878;
      }
      *(_QWORD *)&v108[0] = sub_10001A820(v67, v69, &v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v108, (char *)v108 + 8);

      swift_bridgeObjectRelease(v69);
      _os_log_impl((void *)&_mh_execute_header, v61, v100, "LocationDataSourceAlarms: Failed to get remAlarm from remReminder.alarms {alarmID: %{public}s}", v63, 0xCu);
      swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v96, -1, -1);
      swift_slowDealloc(v63, -1, -1);

      a4 = *(_QWORD **)typea;
    }
    else
    {

    }
    goto LABEL_47;
  }
  v20 = v19;
  v21 = sub_1000151B0(0, (unint64_t *)&qword_10083C2F0, REMAlarm_ptr);
  v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v20, v21);

  v23 = v9;
  v24 = v9;
  v25 = sub_100365114(v22, v23);
  swift_bridgeObjectRelease(v22);

  if (!v25)
  {
    v9 = v24;
    goto LABEL_33;
  }
  v114 = objc_msgSend(v25, "trigger");
  v26 = sub_1000151B0(0, (unint64_t *)&unk_100840E60, REMAlarmTrigger_ptr);
  v27 = sub_10001A630((uint64_t *)&qword_100846B98);
  if ((swift_dynamicCast(v108, &v114, v26, v27, 6) & 1) != 0)
  {
    sub_10001BCA8(v108, (uint64_t)&v110);
    v28 = v112;
    v29 = v113;
    sub_10000A388(&v110, v112);
    v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v29 + 8))(v14, v28, v29);
    if (v30)
    {
      v31 = v30;

      *a4 = v14;
      a4[1] = v25;
      a4[2] = v31;
    }
    else
    {
      if (qword_100837288 != -1)
        swift_once(&qword_100837288, sub_10035A738);
      v80 = type metadata accessor for Logger(0);
      sub_10001AAA8(v80, (uint64_t)qword_100846A40);
      v81 = v25;
      v82 = v14;
      v83 = v81;
      v84 = v82;
      v85 = Logger.logObject.getter(v84);
      v86 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v85, v86))
      {
        v87 = swift_slowAlloc(22, -1);
        v97 = v85;
        v88 = (_QWORD *)swift_slowAlloc(16, -1);
        *(_DWORD *)v87 = 138412546;
        v102 = v23;
        v89 = -[NSObject trigger](v83, "trigger");
        *(_QWORD *)&v108[0] = v89;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v108, (char *)v108 + 8);
        *v88 = v89;

        *(_WORD *)(v87 + 12) = 2114;
        v90 = -[NSObject objectID](v84, "objectID");
        *(_QWORD *)&v108[0] = v90;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v108, (char *)v108 + 8);
        v91 = v88;
        v92 = v97;
        v91[1] = v90;

        _os_log_impl((void *)&_mh_execute_header, v97, v86, "LocationDataSourceAlarms: Unable to get CLRegion from remAlarm.trigger {remAlarm.trigger: %@, reminderID: %{public}@}", (uint8_t *)v87, 0x16u);
        v93 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v91, 2, v93);
        swift_slowDealloc(v91, -1, -1);
        swift_slowDealloc(v87, -1, -1);
        v94 = v102;
        v95 = v107;
      }
      else
      {

        v94 = v83;
        v95 = v83;
        v84 = v83;
        v83 = v107;
        v92 = v23;
      }

      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v110);
  }
  else
  {
    typeb = a4;
    v109 = 0;
    memset(v108, 0, sizeof(v108));
    sub_10000882C((uint64_t)v108, (uint64_t *)&unk_100846BA0);
    if (qword_100837288 != -1)
      swift_once(&qword_100837288, sub_10035A738);
    v70 = type metadata accessor for Logger(0);
    sub_10001AAA8(v70, (uint64_t)qword_100846A40);
    v71 = v25;
    v72 = Logger.logObject.getter(v71);
    v73 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v72, v73))
    {
      v101 = v23;
      v74 = (uint8_t *)swift_slowAlloc(12, -1);
      v75 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v74 = 138412290;
      v76 = -[NSObject trigger](v71, "trigger");
      v110 = (uint64_t)v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, v111);
      *v75 = v76;

      _os_log_impl((void *)&_mh_execute_header, v72, v73, "LocationDataSourceAlarms: remAlarm.trigger is not a RDCLRegionSource (REMAlarmLocationTrigger) {remAlarm.trigger: %@}", v74, 0xCu);
      v77 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v75, 1, v77);
      swift_slowDealloc(v75, -1, -1);
      swift_slowDealloc(v74, -1, -1);
      v78 = v101;
      v79 = v107;
    }
    else
    {

      v78 = v71;
      v79 = v71;
      v14 = v71;
      v71 = v107;
      v72 = v23;
    }

    *typeb = 0;
    typeb[1] = 0;
    typeb[2] = 0;
  }
}

void sub_10035BC00(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t KeyPath;
  void *v11;
  id v12;
  unsigned __int8 v13;
  Class isa;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  id v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Class v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  id v40;
  _QWORD *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  unint64_t v47;
  _BYTE v48[40];

  v5 = objc_msgSend(objc_allocWithZone((Class)REMStore), "initWithDaemonController:", *(_QWORD *)(a1 + 24));
  sub_10020B5C4(2, 160);
  v7 = v6;
  v8 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v8, v48);
  *(_OWORD *)(inited + 16) = xmmword_1006A7330;
  KeyPath = swift_getKeyPath(L"H\x1B");
  *(_QWORD *)(inited + 32) = KeyPath;
  v47 = inited;
  specialized Array._endMutation()(KeyPath);
  v11 = (void *)sub_100358008(inited, 0, 0, (uint64_t)v7, &qword_100840C00, off_1007D6688, (unint64_t)sub_1002DC7B4, &qword_1008438A0, (uint64_t *)&unk_100846B88);
  swift_bridgeObjectRelease();
  v12 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
  v13 = objc_msgSend(v12, "disableAlarmEngineDataSourcePrefetching");

  if ((v13 & 1) == 0)
  {
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v11, "setRelationshipKeyPathsForPrefetching:", isa);

  }
  v15 = sub_1000151B0(0, &qword_100840C00, off_1007D6688);
  v16 = NSManagedObjectContext.fetch<A>(_:)(v11, v15);
  if (v2)
  {
    v17 = v5;
    v5 = v11;
LABEL_5:

    return;
  }
  v18 = v16;
  v46 = v11;
  v44 = a1;
  v47 = (unint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v16 >> 62)
  {
    if (v16 < 0)
      v31 = v16;
    else
      v31 = v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v16);
    v19 = _CocoaArrayWrapper.endIndex.getter(v31);
    v45 = a2;
    if (!v19)
      goto LABEL_26;
  }
  else
  {
    v19 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v16);
    v45 = a2;
    if (!v19)
      goto LABEL_26;
  }
  if (v19 < 1)
    __break(1u);
  for (i = 0; i != v19; ++i)
  {
    if ((v18 & 0xC000000000000001) != 0)
      v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v18);
    else
      v21 = *(id *)(v18 + 8 * i + 32);
    v22 = v21;
    v23 = objc_msgSend(v21, "alarm");
    if (v23
      && (v24 = v23, v25 = objc_msgSend(v23, "reminder"), v24, v25))
    {
      v26 = objc_msgSend(v25, "remObjectID");

      if (v26)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v27);
        v29 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v28 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v29 >= v28 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1);
        v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v26);
        specialized Array._endMutation()(v30);
      }
    }
    else
    {

    }
  }
LABEL_26:
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(objc_allocWithZone((Class)REMRemindersDataView), "initWithStore:", v5);
  v32 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v33 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v34 = objc_msgSend((id)objc_opt_self(REMReminderFetchOptions), "defaultFetchOptions");
  v47 = 0;
  v35 = objc_msgSend(v17, "fetchRemindersWithObjectIDs:fetchOptions:error:", v33, v34, &v47);

  v36 = (id)v47;
  if (!v35)
  {
    v42 = (id)v47;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)(v36);

    swift_willThrow(v43);
    goto LABEL_5;
  }
  v37 = sub_1000151B0(0, &qword_100846630, REMReminder_ptr);
  v38 = sub_10011A5DC();
  v39 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v35, v32, v37, v38);
  v40 = v36;

  swift_bridgeObjectRetain(v39);
  swift_retain();
  v41 = sub_1003654AC(v18, v39, v44);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease_n(v39, 2);
  swift_release(v44);

  *v45 = v41;
}

void sub_10035C120(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  _QWORD *v31;
  id v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  id v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  id v45;
  uint64_t v46;
  _QWORD *v47;
  id v48;
  NSObject *v49;
  void *v50;
  _QWORD *v51;
  void *v52;
  id v53;
  uint64_t v54;

  v7 = *a1;
  v8 = objc_msgSend(*a1, "alarm");
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(v8, "reminder");
    if (v10)
    {
      v11 = v10;
      v12 = objc_msgSend(v10, "remObjectID");

      if (v12)
      {
        v13 = v12;
        v14 = sub_1002B1B30(v13, a2);

        if (v14)
        {
          v15 = objc_msgSend(v14, "alarms");
          if (!v15)
            goto LABEL_11;
          v16 = v15;
          v17 = sub_1000151B0(0, &qword_10083C2F0, REMAlarm_ptr);
          v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

          v9 = v9;
          v19 = sub_100365114(v18, v9);
          swift_bridgeObjectRelease();

          if (v19)
          {
            v52 = v13;
            v20 = objc_msgSend(v19, "trigger");
            v21 = objc_opt_self(REMAlarmVehicleTrigger);
            v22 = swift_dynamicCastObjCClass(v20, v21);
            v23 = v19;
            if (v22)
            {
              v48 = (id)v22;
              v50 = v19;
              v24 = objc_msgSend(v14, "assignmentContext");
              v25 = objc_msgSend(v24, "currentAssignment");

              if (!v25
                || (v25,
                    v26 = *(void **)(a3 + 40),
                    v27 = v26,
                    LOBYTE(v26) = sub_1004D3090(v26),
                    v27,
                    (v26 & 1) != 0))
              {
                v28 = v14;
                v29 = v50;
                v30 = objc_msgSend(v48, "event");

                *a4 = v14;
                a4[1] = v50;
                a4[2] = v30;
                return;
              }
              if (qword_100837288 != -1)
                swift_once(&qword_100837288, sub_10035A738);
              v40 = type metadata accessor for Logger(0);
              sub_10001AAA8(v40, (uint64_t)qword_100846A40);
              v41 = v14;
              v42 = Logger.logObject.getter(v41);
              v43 = static os_log_type_t.info.getter(v42);
              if (os_log_type_enabled(v42, v43))
              {
                v49 = v42;
                v44 = (uint8_t *)swift_slowAlloc(12, -1);
                v47 = (_QWORD *)swift_slowAlloc(8, -1);
                *(_DWORD *)v44 = 138543362;
                v45 = objc_msgSend(v41, "objectID");
                v53 = v45;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
                *v47 = v45;

                _os_log_impl((void *)&_mh_execute_header, v49, v43, "Fetched reminder is not assigned to current user. Skipping {reminderID: %{public}@}", v44, 0xCu);
                v46 = sub_10001A630((uint64_t *)&unk_100839E70);
                swift_arrayDestroy(v47, 1, v46);
                swift_slowDealloc(v47, -1, -1);
                swift_slowDealloc(v44, -1, -1);

              }
              else
              {

              }
              goto LABEL_20;
            }
            v31 = a4;

            v39 = v14;
            v14 = v23;
            v9 = v20;
            v13 = v39;
          }
          else
          {
LABEL_11:
            v31 = a4;
          }
          v32 = v9;

          v9 = v14;
          v13 = v32;
          a4 = v31;
        }

        v9 = v13;
      }
    }

  }
  if (qword_100837288 != -1)
    swift_once(&qword_100837288, sub_10035A738);
  v33 = type metadata accessor for Logger(0);
  sub_10001AAA8(v33, (uint64_t)qword_100846A40);
  v9 = v7;
  v34 = Logger.logObject.getter(v9);
  v35 = static os_log_type_t.error.getter(v34);
  if (!os_log_type_enabled(v34, v35))
  {

LABEL_20:
    goto LABEL_21;
  }
  v36 = (uint8_t *)swift_slowAlloc(12, -1);
  v51 = (_QWORD *)swift_slowAlloc(8, -1);
  *(_DWORD *)v36 = 138412290;
  v53 = v9;
  v37 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
  *v51 = v9;

  _os_log_impl((void *)&_mh_execute_header, v34, v35, "VehicleDataSourceAlarms: Failed to get REMReminder, REMAlarm or triggerEvent from cdTrigger -- skipping {cdTrigger: %@}", v36, 0xCu);
  v38 = sub_10001A630((uint64_t *)&unk_100839E70);
  swift_arrayDestroy(v51, 1, v38);
  swift_slowDealloc(v51, -1, -1);
  swift_slowDealloc(v36, -1, -1);

LABEL_21:
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
}

void sub_10035C6C0(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t i;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  Class isa;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  id v52;
  id v53;
  id v54;
  _QWORD *v55;
  uint64_t v56;
  char v57[40];

  v55 = a2;
  v4 = _s10PredicatesOMa(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(objc_allocWithZone((Class)REMStore), "initWithDaemonController:", *(_QWORD *)(a1 + 24));
  swift_storeEnumTagMultiPayload(v6, v4, 59);
  sub_10000D2C0();
  v9 = v8;
  sub_1000CACA8((uint64_t)v6);
  v10 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v10, v57);
  *(_OWORD *)(inited + 16) = xmmword_1006A7330;
  KeyPath = swift_getKeyPath(&unk_1006B7068);
  *(_QWORD *)(inited + 32) = KeyPath;
  v56 = inited;
  specialized Array._endMutation()(KeyPath);
  v13 = v56;
  v14 = sub_100358008(v56, 0, 0, (uint64_t)v9, (unint64_t *)&qword_10083AE90, off_1007D6708, (unint64_t)sub_1002DB2B8, (uint64_t *)&unk_10083AEC0, (uint64_t *)&unk_100846B20);
  v15 = v13;
  v16 = (id)v14;
  swift_bridgeObjectRelease(v15);
  v17 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v18 = NSManagedObjectContext.fetch<A>(_:)(v16, v17);
  if (v2)
  {
    v19 = v7;
LABEL_3:

    return;
  }
  v20 = v18;
  v21 = v55;
  v53 = v16;
  v22 = objc_allocWithZone((Class)REMRemindersDataView);
  v54 = v7;
  v52 = objc_msgSend(v22, "initWithStore:", v7);
  v56 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v20 >> 62)
  {
    if (v20 < 0)
      v48 = v20;
    else
      v48 = v20 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v20);
    v23 = _CocoaArrayWrapper.endIndex.getter(v48);
  }
  else
  {
    v23 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v20);
  }
  v24 = v21;
  v51 = a1;
  if (v23)
  {
    v50 = v9;
    if (v23 < 1)
      __break(1u);
    for (i = 0; i != v23; ++i)
    {
      if ((v20 & 0xC000000000000001) != 0)
        v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v20);
      else
        v27 = *(id *)(v20 + 8 * i + 32);
      v28 = v27;
      v29 = objc_msgSend(v27, "remObjectID");

      if (v29)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v30);
        v32 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v31 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v32 >= v31 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1);
        v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v29);
        specialized Array._endMutation()(v26);
      }
    }
    swift_bridgeObjectRelease(v20);
    v24 = v55;
    v33 = (_QWORD *)v56;
    v9 = v50;
  }
  else
  {
    swift_bridgeObjectRelease(v20);
    v33 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v20);
  v34 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v33);
  v36 = objc_msgSend((id)objc_opt_self(REMReminderFetchOptions), "defaultFetchOptions");
  v56 = 0;
  v19 = v52;
  v37 = objc_msgSend(v52, "fetchRemindersWithObjectIDs:fetchOptions:error:", isa, v36, &v56);

  v38 = (id)v56;
  if (!v37)
  {
    v46 = (id)v56;
    _convertNSErrorToError(_:)(v38);

    swift_willThrow(v47);
    v16 = v54;
    goto LABEL_3;
  }
  v39 = sub_1000151B0(0, &qword_100846630, REMReminder_ptr);
  v40 = sub_10011A5DC();
  v41 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v37, v34, v39, v40);
  v42 = v38;

  v43 = v51;
  swift_retain(v51);
  sub_10036567C(v41, v43);
  v45 = v44;
  swift_bridgeObjectRelease(v41);

  swift_release(v43);
  *v24 = v45;
}

void sub_10035CB54(id *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  _QWORD *v27;
  id v28;
  uint64_t v29;
  id v30;
  uint64_t v31;

  v5 = *a1;
  v6 = objc_msgSend(*a1, "contactHandles");
  if (v6)
  {
    v7 = v6;
    v8 = objc_msgSend(v5, "assignmentContext");
    v9 = objc_msgSend(v8, "currentAssignment");

    if (!v9
      || (v9,
          v10 = *(void **)(a2 + 40),
          v11 = v10,
          LOBYTE(v10) = sub_1004D3090(v10),
          v11,
          (v10 & 1) != 0))
    {
      v12 = objc_msgSend(objc_allocWithZone((Class)REMAlarmContactTrigger), "initWithContactRepresentation:", v7);
      v13 = objc_msgSend(objc_allocWithZone((Class)REMAlarm), "initWithTrigger:", v12);

      *a3 = v5;
      a3[1] = v13;
      a3[2] = v7;
      v14 = v5;
      return;
    }
    if (qword_100837288 != -1)
      swift_once(&qword_100837288, sub_10035A738);
    v22 = type metadata accessor for Logger(0);
    sub_10001AAA8(v22, (uint64_t)qword_100846A40);
    v23 = v5;
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.info.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v26 = 138543362;
      v28 = objc_msgSend(v23, "objectID");
      v30 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
      *v27 = v28;

      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Fetched reminder is not assigned to current user. Skipping {reminderID: %{public}@}", v26, 0xCu);
      v29 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v27, 1, v29);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      goto LABEL_16;
    }

LABEL_15:
    goto LABEL_16;
  }
  if (qword_100837288 != -1)
    swift_once(&qword_100837288, sub_10035A738);
  v15 = type metadata accessor for Logger(0);
  sub_10001AAA8(v15, (uint64_t)qword_100846A40);
  v7 = v5;
  v16 = Logger.logObject.getter(v7);
  v17 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v16, v17))
  {

    goto LABEL_15;
  }
  v18 = (uint8_t *)swift_slowAlloc(12, -1);
  v19 = (_QWORD *)swift_slowAlloc(8, -1);
  *(_DWORD *)v18 = 138543362;
  v20 = objc_msgSend(v7, "objectID");
  v30 = v20;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
  *v19 = v20;

  _os_log_impl((void *)&_mh_execute_header, v16, v17, "Fetched reminder is missing contact handle. Skipping {reminderID: %{public}@}", v18, 0xCu);
  v21 = sub_10001A630((uint64_t *)&unk_100839E70);
  swift_arrayDestroy(v19, 1, v21);
  swift_slowDealloc(v19, -1, -1);
  swift_slowDealloc(v18, -1, -1);

LABEL_16:
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

uint64_t sub_10035CF54()
{
  uint64_t v0;

  sub_1000178E8(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(unsigned int *)(v0 + 88) | ((unint64_t)*(unsigned __int16 *)(v0 + 92) << 32));
  return swift_deallocClassInstance(v0, 94, 7);
}

uint64_t type metadata accessor for RDAlarmProducerDataSource()
{
  return objc_opt_self(_TtC7remindd25RDAlarmProducerDataSource);
}

void sub_10035CFCC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  sub_1003604F8(a1, a2, (void (*)(_QWORD, __n128))sub_100365D60, a3);
}

uint64_t sub_10035CFD8@<X0>(NSObject *a1@<X0>, uint64_t a2@<X1>, objc_class **a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  Class *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  Class isa;
  Class v42;
  void (*v43)(_QWORD, __n128);
  void (*v44)(_QWORD, _QWORD);
  objc_class *v45;
  objc_class *v46;
  uint64_t v47;
  objc_class *v48;
  objc_class *v49;
  uint64_t v50;
  uint64_t v51;
  objc_class *v52;
  objc_class *v53;
  objc_class *v54;
  objc_class *v55;
  objc_class *v56;
  NSObject *v57;
  os_log_type_t v58;
  _BOOL4 v59;
  char **v60;
  uint64_t v61;
  _QWORD *v62;
  id v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _OWORD *v72;
  uint64_t v73;
  void (*v74)(_QWORD, _QWORD, _QWORD, _QWORD);
  unsigned __int8 v75;
  _OWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  __int128 *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  void (*v91)(_QWORD, _QWORD, _QWORD);
  uint64_t v92;
  char *v93;
  Class v94;
  Class v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  objc_class *v99;
  objc_class *v100;
  NSObject *v101;
  os_log_type_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  _QWORD *v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  _OWORD *v111;
  char *v112;
  Class v113;
  uint64_t v114;
  void (*v115)(_QWORD, _QWORD);
  os_log_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(_QWORD, _QWORD, _QWORD);
  objc_class *v126;
  objc_class *v127;
  uint64_t v128;
  uint64_t v129;
  objc_class **v130;
  char *v131;
  objc_class *v133;
  NSObject *v134;
  os_log_type_t v135;
  char *v136;
  uint64_t v137;
  _QWORD *v138;
  id v139;
  Class v140;
  uint64_t v141;
  objc_class *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  void (*v146)(_QWORD, _QWORD, _QWORD);
  uint64_t v147;
  char *v148;
  Class v149;
  Class v150;
  char *v151;
  NSObject *v152;
  objc_class *v153;
  NSObject *v154;
  os_log_type_t v155;
  int v156;
  uint64_t v157;
  NSObject *v158;
  objc_class *v159;
  uint64_t v160;
  uint64_t v161;
  _OWORD *v162;
  char *v163;
  objc_class *v164;
  void (*v165)(_QWORD, _QWORD);
  os_log_t v166;
  char *v167;
  Class v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  NSObject *v173;
  char *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  NSObject *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  char *v182;
  char *v183;
  os_log_t v184;
  char *v185;
  objc_class *v186;
  objc_class *v187;
  uint64_t v188;
  objc_class **v189;
  uint64_t v190;
  void (*v191)(_QWORD, _QWORD);
  uint64_t v192;
  _OWORD *v193;
  uint64_t v194;
  void (*v195)(_QWORD, _QWORD, _QWORD);
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  __int128 v200[2];
  uint64_t v201;
  uint64_t v202;
  char v203;
  uint64_t v204;
  uint64_t v205;
  id v206;

  v190 = a2;
  v189 = (objc_class **)a3;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v171 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v181 = (char *)&v171 - v9;
  __chkstk_darwin(v10);
  v174 = (char *)&v171 - v11;
  __chkstk_darwin(v12);
  v176 = (char *)&v171 - v13;
  v14 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v14);
  v180 = (char *)&v171 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v177 = (char *)&v171 - v17;
  __chkstk_darwin(v18);
  v20 = (char *)&v171 - v19;
  v21 = sub_10001A630((uint64_t *)&unk_100843790);
  v188 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v192 = (uint64_t)&v171 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v179 = (uint64_t)&v171 - v24;
  __chkstk_darwin(v25);
  v178 = ((char *)&v171 - v26);
  __chkstk_darwin(v27);
  v175 = (uint64_t)&v171 - v28;
  __chkstk_darwin(v29);
  v185 = (char *)&v171 - v30;
  __chkstk_darwin(v31);
  v173 = ((char *)&v171 - v32);
  v34 = __chkstk_darwin(v33);
  v36 = (Class *)((char *)&v171 - v35);
  v198 = v37;
  v38 = *(int *)(v37 + 48);
  v39 = (char *)&v171 + v38 - v35;
  v40 = (char *)a1 + v38;
  v184 = a1;
  isa = a1->isa;
  v42 = a1[1].isa;
  *v36 = isa;
  v36[1] = v42;
  v193 = (_OWORD *)((char *)&v171 - v35);
  v43 = *(void (**)(_QWORD, __n128))(v5 + 16);
  v183 = v40;
  v195 = (void (*)(_QWORD, _QWORD, _QWORD))v43;
  v43(v39, v34);
  v196 = v5;
  v44 = *(void (**)(_QWORD, _QWORD))(v5 + 8);
  v45 = isa;
  v46 = v42;
  v199 = v4;
  v191 = v44;
  v44(v39, v4);
  v47 = qword_100837288;
  v48 = v45;
  v49 = v46;
  if (v47 != -1)
    swift_once(&qword_100837288, sub_10035A738);
  v50 = type metadata accessor for Logger(0);
  v51 = sub_10001AAA8(v50, (uint64_t)qword_100846A40);
  v52 = v49;
  v53 = v48;
  v54 = v52;
  v55 = v53;
  v56 = v54;
  v194 = v51;
  v57 = Logger.logObject.getter(v56);
  v58 = static os_log_type_t.info.getter(v57);
  v59 = os_log_type_enabled(v57, v58);
  v60 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
  v197 = v20;
  v182 = v7;
  if (v59)
  {
    v61 = swift_slowAlloc(32, -1);
    v62 = (_QWORD *)swift_slowAlloc(8, -1);
    v172 = swift_slowAlloc(64, -1);
    v202 = v172;
    *(_DWORD *)v61 = 138543874;
    v63 = -[objc_class objectID](v56, "objectID");
    *(_QWORD *)&v200[0] = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v200, (char *)v200 + 8);
    *v62 = v63;
    *(_WORD *)(v61 + 12) = 2082;
    if (-[objc_class isSnooze](v56, "isSnooze"))
      v64 = 89;
    else
      v64 = 78;
    *(_QWORD *)&v200[0] = sub_10001A820(v64, 0xE100000000000000, &v202);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v200, (char *)v200 + 8);

    *(_QWORD *)&v65 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v61 + 22) = 2082;
    if (-[objc_class isRecurrent](v55, "isRecurrent", v65))
      v66 = 89;
    else
      v66 = 78;
    v67 = (uint64_t)v197;
    *(_QWORD *)&v200[0] = sub_10001A820(v66, 0xE100000000000000, &v202);
    v68 = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v200, (char *)v200 + 8);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "RDTimeAlarmProducerDataSource: nextProducerAlarmFiringAfter alarm {alarmID: %{public}@ isSnooze: %{public}s isRecurring: %{public}s}", (uint8_t *)v61, 0x20u);
    v69 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v62, 1, v69);
    v70 = v62;
    v60 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
    swift_slowDealloc(v70, -1, -1);
    v71 = v172;
    swift_arrayDestroy(v172, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v71, -1, -1);
    swift_slowDealloc(v61, -1, -1);

  }
  else
  {
    v68 = (uint64_t)v20;

  }
  v72 = v185;
  v73 = v196;
  v74 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v196 + 56);
  v74(v68, 1, 1, v199);
  v75 = objc_msgSend(v56, v60[184]);
  v76 = v193;
  v187 = v55;
  v186 = v56;
  if ((v75 & 1) != 0 || !-[objc_class isOverdue](v55, "isOverdue"))
  {
    v85 = (uint64_t *)&unk_1008380D0;
    v86 = (__int128 *)v68;
LABEL_18:
    sub_10000882C((uint64_t)v86, v85);
    goto LABEL_19;
  }
  v206 = -[objc_class trigger](v56, "trigger");
  v77 = sub_1000151B0(0, (unint64_t *)&unk_100840E60, REMAlarmTrigger_ptr);
  v78 = sub_10001A630((uint64_t *)&unk_100846B40);
  if ((swift_dynamicCast(v200, &v206, v77, v78, 6) & 1) == 0)
  {
    v201 = 0;
    memset(v200, 0, sizeof(v200));
    sub_10000882C(v68, (uint64_t *)&unk_1008380D0);
    v85 = &qword_100840E70;
    v86 = v200;
    goto LABEL_18;
  }
  sub_10001BCA8(v200, (uint64_t)&v202);
  v79 = v204;
  v80 = v205;
  sub_10000A388(&v202, v204);
  v81 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v80 + 16);
  v82 = v79;
  v83 = (uint64_t)v177;
  v84 = v80;
  v68 = (uint64_t)v197;
  v81(v55, v190, v82, v84);
  sub_10000882C(v68, (uint64_t *)&unk_1008380D0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v83, 1, v199) != 1)
  {
    v143 = *(char **)(v73 + 32);
    v144 = v176;
    v145 = v199;
    v185 = v143;
    ((void (*)(char *, uint64_t, uint64_t))v143)(v176, v83, v199);
    v146 = v195;
    v195(v68, v144, v145);
    v74(v68, 0, 1, v145);
    v147 = (uint64_t)v173;
    v148 = (char *)v173 + *(int *)(v198 + 48);
    v149 = v184->isa;
    v150 = v184[1].isa;
    v173->isa = v184->isa;
    *(_QWORD *)(v147 + 8) = v150;
    v146(v148, v183, v145);
    sub_100008868(v147, (uint64_t)v72, (uint64_t *)&unk_100843790);
    sub_1000A5CA8(v147, v175, (uint64_t *)&unk_100843790);
    v151 = v174;
    v146(v174, v144, v145);
    v152 = v56;
    v153 = v149;
    v154 = Logger.logObject.getter(v150);
    v155 = static os_log_type_t.info.getter(v154);
    v156 = v155;
    if (os_log_type_enabled(v154, v155))
    {
      v157 = swift_slowAlloc(32, -1);
      v158 = swift_slowAlloc(24, -1);
      v184 = v158;
      *(_DWORD *)v157 = 138543874;
      LODWORD(v192) = v156;
      v159 = (objc_class *)-[NSObject objectID](v152, "objectID");
      *(_QWORD *)&v200[0] = v159;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v200, (char *)v200 + 8);
      v158->isa = v159;

      *(_WORD *)(v157 + 12) = 2114;
      v160 = v199;
      v161 = *(int *)(v198 + 48);
      v162 = v193;
      v163 = (char *)v193 + v161;
      *v193 = *v72;
      v146((char *)v162 + v161, (char *)v72 + v161, v160);
      v164 = Date._bridgeToObjectiveC()().super.isa;
      v165 = v191;
      v191(v163, v160);
      *(_QWORD *)&v200[0] = v164;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v200, (char *)v200 + 8);
      v166 = v184;
      v184[1].isa = v164;
      sub_10000882C(v175, (uint64_t *)&unk_100843790);
      sub_10000882C((uint64_t)v72, (uint64_t *)&unk_100843790);
      *(_WORD *)(v157 + 22) = 2114;
      v167 = v174;
      v168 = Date._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)&v200[0] = v168;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v200, (char *)v200 + 8);
      v166[2].isa = v168;
      v169 = v160;
      v115 = v165;
      v165(v167, v169);
      _os_log_impl((void *)&_mh_execute_header, v154, (os_log_type_t)v192, "RDTimeAlarmProducerDataSource: nextProducerAlarmFiringAfter is calculating fireDate for overdue recurring alarm {alarmID: %{public}@ dataSourceAlarm.fireDate: %{public}@ nextFireDate: %{public}@}", (uint8_t *)v157, 0x20u);
      v170 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v166, 3, v170);
      swift_slowDealloc(v166, -1, -1);
      swift_slowDealloc(v157, -1, -1);
    }
    else
    {

      v115 = v191;
      v191(v151, v199);
      sub_10000882C(v175, (uint64_t *)&unk_100843790);
      sub_10000882C((uint64_t)v72, (uint64_t *)&unk_100843790);

      v154 = v152;
    }
    v119 = v182;
    v121 = v181;
    v123 = (uint64_t)v180;

    v115(v176, v199);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v202);
    v120 = v190;
    v122 = v196;
    goto LABEL_22;
  }
  sub_10000882C(v83, (uint64_t *)&unk_1008380D0);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v202);
LABEL_19:
  v87 = v198;
  v88 = v199;
  v89 = (char *)v76 + *(int *)(v198 + 48);
  v90 = v183;
  v91 = v195;
  v195(v89, v183, v199);
  v185 = *(char **)(v73 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v185)(v68, v89, v88);
  v74(v68, 0, 1, v88);
  v92 = (uint64_t)v178;
  v93 = (char *)v178 + *(int *)(v87 + 48);
  v94 = v184->isa;
  v95 = v184[1].isa;
  v178->isa = v184->isa;
  *(_QWORD *)(v92 + 8) = v95;
  v91(v93, v90, v88);
  v96 = v179;
  sub_100008868(v92, v179, (uint64_t *)&unk_100843790);
  v97 = v92;
  v98 = v192;
  sub_1000A5CA8(v97, v192, (uint64_t *)&unk_100843790);
  v99 = v56;
  v100 = v94;
  v101 = Logger.logObject.getter(v95);
  v102 = static os_log_type_t.info.getter(v101);
  v103 = v102;
  if (os_log_type_enabled(v101, v102))
  {
    v104 = swift_slowAlloc(22, -1);
    v105 = swift_slowAlloc(16, -1);
    v184 = v101;
    v106 = (_OWORD *)v96;
    v107 = (_QWORD *)v105;
    *(_DWORD *)v104 = 138543618;
    LODWORD(v183) = v103;
    v108 = -[objc_class objectID](v99, "objectID");
    v202 = (uint64_t)v108;
    v109 = v199;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, &v203);
    *v107 = v108;

    *(_WORD *)(v104 + 12) = 2114;
    v110 = *(int *)(v198 + 48);
    v111 = v193;
    v112 = (char *)v193 + v110;
    *v193 = *v106;
    v91((char *)v111 + v110, (char *)v106 + v110, v109);
    v113 = Date._bridgeToObjectiveC()().super.isa;
    v114 = v109;
    v115 = v191;
    v191(v112, v114);
    v202 = (uint64_t)v113;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, &v203);
    v107[1] = v113;
    sub_10000882C(v192, (uint64_t *)&unk_100843790);
    sub_10000882C((uint64_t)v106, (uint64_t *)&unk_100843790);
    v116 = v184;
    _os_log_impl((void *)&_mh_execute_header, v184, (os_log_type_t)v183, "RDTimeAlarmProducerDataSource: nextProducerAlarmFiringAfter is using default fireDate for alarm {alarmID: %{public}@ dataSourceAlarm.fireDate: %{public}@}", (uint8_t *)v104, 0x16u);
    v117 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v107, 2, v117);
    v118 = (uint64_t)v197;
    swift_slowDealloc(v107, -1, -1);
    swift_slowDealloc(v104, -1, -1);

    v119 = v182;
    v120 = v190;
    v121 = v181;
    v122 = v196;
    v123 = (uint64_t)v180;
    goto LABEL_23;
  }

  sub_10000882C(v98, (uint64_t *)&unk_100843790);
  sub_10000882C(v96, (uint64_t *)&unk_100843790);

  v119 = v182;
  v120 = v190;
  v115 = v191;
  v121 = v181;
  v122 = v196;
  v123 = (uint64_t)v180;
LABEL_22:
  v118 = (uint64_t)v197;
LABEL_23:
  v124 = v118;
  sub_100008868(v118, v123, (uint64_t *)&unk_1008380D0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v122 + 48))(v123, 1, v199) == 1)
  {
    sub_10000882C(v123, (uint64_t *)&unk_1008380D0);
  }
  else
  {
    v125 = (void (*)(_QWORD, _QWORD, _QWORD))v185;
    ((void (*)(char *, uint64_t, uint64_t))v185)(v121, v123, v199);
    if ((static Date.> infix(_:_:)(v121, v120) & 1) != 0)
    {
      sub_10000882C(v124, (uint64_t *)&unk_1008380D0);
      v126 = v187;

      v127 = v186;
      v129 = v198;
      v128 = v199;
      v130 = v189;
      v131 = (char *)v189 + *(int *)(v198 + 48);
      *v189 = v126;
      v130[1] = v127;
      v125(v131, v121, v128);
      return (*(uint64_t (**)(objc_class **, _QWORD, uint64_t, uint64_t))(v188 + 56))((objc_class **)v130, 0, 1, v129);
    }
    v115(v121, v199);
  }
  v195(v119, v120, v199);
  v133 = v186;
  v134 = Logger.logObject.getter(v133);
  v135 = static os_log_type_t.info.getter(v134);
  if (os_log_type_enabled(v134, v135))
  {
    v136 = v119;
    v137 = swift_slowAlloc(22, -1);
    v138 = (_QWORD *)swift_slowAlloc(16, -1);
    *(_DWORD *)v137 = 138543618;
    v139 = -[objc_class objectID](v133, "objectID");
    v202 = (uint64_t)v139;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, &v203);
    *v138 = v139;

    *(_WORD *)(v137 + 12) = 2114;
    v140 = Date._bridgeToObjectiveC()().super.isa;
    v202 = (uint64_t)v140;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, &v203);
    v138[1] = v140;
    v191(v136, v199);
    _os_log_impl((void *)&_mh_execute_header, v134, v135, "RDTimeAlarmProducerDataSource: nextProducerAlarmFiringAfter fireDate is earlier than now for alarm. Skipping {alarmID: %{public}@ nowDate: %{public}@}", (uint8_t *)v137, 0x16u);
    v141 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v138, 2, v141);
    swift_slowDealloc(v138, -1, -1);
    swift_slowDealloc(v137, -1, -1);

    v133 = v187;
  }
  else
  {

    v142 = v187;
    v115(v119, v199);

  }
  sub_10000882C((uint64_t)v197, (uint64_t *)&unk_1008380D0);
  return (*(uint64_t (**)(objc_class **, uint64_t, uint64_t, uint64_t))(v188 + 56))(v189, 1, 1, v198);
}

uint64_t sub_10035E030@<X0>(void **a1@<X0>, NSObject *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  NSObject *v52;
  void *v53;
  void *v54;
  void (*isa)(char *, os_log_t, uint64_t);
  void (*v56)(char *, uint64_t);
  id v57;
  id v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  id v64;
  id v65;
  id v66;
  NSObject *v67;
  os_log_type_t v68;
  _BOOL4 v69;
  char **v70;
  uint64_t v71;
  _QWORD *v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  Class v81;
  uint64_t v82;
  id v83;
  Class v84;
  unsigned __int8 v85;
  _OWORD *v86;
  uint64_t *v87;
  __int128 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  os_log_t v95;
  uint64_t v96;
  void (*v97)(char *, os_log_t, uint64_t);
  uint64_t v98;
  char *v99;
  void *v100;
  void *v101;
  _OWORD *v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  id v106;
  NSObject *v107;
  os_log_type_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  Class *v112;
  Class v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  Class v118;
  uint64_t v119;
  Class *v120;
  char *v121;
  id v122;
  uint64_t v123;
  Class v124;
  NSObject *v125;
  uint64_t v126;
  void (*v127)(char *, char *, uint64_t);
  uint64_t v128;
  char *v129;
  id v130;
  NSObject *v131;
  os_log_type_t v132;
  uint64_t v133;
  Class *v134;
  Class v135;
  Class v136;
  uint64_t v137;
  id v139;
  void *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  void *v148;
  void (*v149)(char *, char *, uint64_t);
  char *v150;
  id v151;
  NSObject *v152;
  os_log_type_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  Class v158;
  uint64_t v159;
  Class v160;
  char *v161;
  void (*v162)(char *, uint64_t);
  Class v163;
  os_log_t v164;
  uint64_t v165;
  NSObject *v166;
  uint64_t v167;
  void (*v168)(char *, os_log_t, uint64_t);
  uint64_t v169;
  char *v170;
  void *v171;
  void *v172;
  char *v173;
  char *v174;
  uint64_t v175;
  void (*v176)(char *, char *, uint64_t);
  NSObject *v177;
  id v178;
  NSObject *v179;
  os_log_type_t v180;
  int v181;
  uint64_t v182;
  void **v183;
  id v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  Class v189;
  void (*v190)(char *, uint64_t);
  void **v191;
  char *v192;
  Class v193;
  uint64_t v194;
  void (*v195)(char *, uint64_t);
  uint64_t v196;
  _QWORD *v197;
  char *v198;
  char *v199;
  uint64_t v200;
  void (*v201)(char *, uint64_t);
  char *v202;
  char *v203;
  char *v204;
  void **v205;
  char *v206;
  char *v207;
  char *v208;
  uint64_t v209;
  char *v210;
  NSObject *v211;
  objc_class *v212;
  Class v213;
  char *v214;
  void **v215;
  _OWORD *v216;
  char *v217;
  uint64_t v218;
  _QWORD *v219;
  os_log_t v220;
  void **v221;
  char *v222;
  uint64_t v223;
  _OWORD *v224;
  NSObject *v225;
  void (*v226)(char *, uint64_t);
  __int128 *v227;
  uint64_t v228;
  void (*v229)(char *, os_log_t, uint64_t);
  id v230;
  uint64_t v231;
  os_log_t v232;
  id v233;
  uint64_t v234;
  __int128 v235[2];
  uint64_t v236;
  Class v237;
  char v238[8];
  uint64_t v239;
  uint64_t v240;
  id v241;

  v225 = a2;
  v219 = a3;
  v4 = type metadata accessor for Date(0);
  v5 = *(NSObject **)(v4 - 8);
  __chkstk_darwin(v4);
  v214 = (char *)&v202 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v203 = (char *)&v202 - v8;
  __chkstk_darwin(v9);
  v202 = (char *)&v202 - v10;
  __chkstk_darwin(v11);
  v207 = (char *)&v202 - v12;
  __chkstk_darwin(v13);
  v204 = (char *)&v202 - v14;
  __chkstk_darwin(v15);
  v17 = (char *)&v202 - v16;
  __chkstk_darwin(v18);
  v208 = (char *)&v202 - v19;
  __chkstk_darwin(v20);
  v211 = ((char *)&v202 - v21);
  v22 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v22);
  v210 = (char *)&v202 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v26 = (char *)&v202 - v25;
  __chkstk_darwin(v27);
  v29 = (char *)&v202 - v28;
  __chkstk_darwin(v30);
  v32 = (__int128 *)((char *)&v202 - v31);
  v33 = sub_10001A630((uint64_t *)&unk_100843790);
  v218 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v223 = (uint64_t)&v202 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v216 = (_OWORD *)((char *)&v202 - v36);
  __chkstk_darwin(v37);
  v215 = (void **)((char *)&v202 - v38);
  __chkstk_darwin(v39);
  v209 = (uint64_t)&v202 - v40;
  __chkstk_darwin(v41);
  v206 = (char *)&v202 - v42;
  __chkstk_darwin(v43);
  v205 = (void **)((char *)&v202 - v44);
  v46 = __chkstk_darwin(v45);
  v48 = (char **)((char *)&v202 - v47);
  v231 = v49;
  v50 = *(int *)(v49 + 48);
  v51 = (char *)&v202 + v50 - v47;
  v52 = ((char *)a1 + v50);
  v221 = a1;
  v53 = *a1;
  v54 = a1[1];
  *v48 = v53;
  v48[1] = v54;
  v224 = (_OWORD *)((char *)&v202 - v47);
  isa = (void (*)(char *, os_log_t, uint64_t))v5[2].isa;
  v220 = v52;
  v229 = isa;
  ((void (*)(char *, __n128))isa)(v51, v46);
  v232 = v5;
  v56 = (void (*)(char *, uint64_t))v5[1].isa;
  v57 = v53;
  v58 = v54;
  v234 = v4;
  v226 = v56;
  v56(v51, v4);
  v59 = qword_100837288;
  v60 = v58;
  if (v59 != -1)
    swift_once(&qword_100837288, sub_10035A738);
  v61 = type metadata accessor for Logger(0);
  v62 = sub_10001AAA8(v61, (uint64_t)qword_100846A40);
  v63 = v60;
  v64 = v57;
  v65 = v63;
  v230 = v64;
  v66 = v65;
  v228 = v62;
  v67 = Logger.logObject.getter(v66);
  v68 = static os_log_type_t.info.getter(v67);
  v69 = os_log_type_enabled(v67, v68);
  v70 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
  v227 = v32;
  v233 = v66;
  v222 = v17;
  v217 = v26;
  if (v69)
  {
    v71 = swift_slowAlloc(32, -1);
    v72 = (_QWORD *)swift_slowAlloc(8, -1);
    v213 = (Class)swift_slowAlloc(64, -1);
    v237 = v213;
    *(_DWORD *)v71 = 138543874;
    v73 = objc_msgSend(v233, "objectID");
    v74 = v230;
    v75 = v73;
    *(_QWORD *)&v235[0] = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v235, (char *)v235 + 8);
    *v72 = v75;
    *(_WORD *)(v71 + 12) = 2082;
    if (objc_msgSend(v233, "isSnooze"))
      v76 = 89;
    else
      v76 = 78;
    *(_QWORD *)&v235[0] = sub_10001A820(v76, 0xE100000000000000, (uint64_t *)&v237);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v235, (char *)v235 + 8);

    *(_QWORD *)&v77 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v71 + 22) = 2082;
    if (objc_msgSend(v74, "isRecurrent", v77))
      v78 = 89;
    else
      v78 = 78;
    *(_QWORD *)&v235[0] = sub_10001A820(v78, 0xE100000000000000, (uint64_t *)&v237);
    v70 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v235, (char *)v235 + 8);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v67, v68, "RDTimeAlarmProducerDataSource: expiredProducerAlarmsBefore alarm {alarmID: %{public}@ isSnooze: %{public}s isRecurring: %{public}s}", (uint8_t *)v71, 0x20u);
    v79 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v72, 1, v79);
    v80 = v72;
    v66 = v233;
    swift_slowDealloc(v80, -1, -1);
    v81 = v213;
    swift_arrayDestroy(v213, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v81, -1, -1);
    v82 = v71;
    v32 = v227;
    swift_slowDealloc(v82, -1, -1);

  }
  else
  {

    v83 = v230;
  }
  v84 = v232[7].isa;
  ((void (*)(__int128 *, uint64_t, uint64_t, uint64_t))v84)(v32, 1, 1, v234);
  v85 = objc_msgSend(v66, v70[184]);
  v86 = v224;
  v212 = v84;
  if ((v85 & 1) != 0)
  {
    v87 = (uint64_t *)&unk_1008380D0;
    v88 = v32;
LABEL_18:
    sub_10000882C((uint64_t)v88, v87);
    goto LABEL_19;
  }
  v241 = objc_msgSend(v66, "trigger");
  v89 = sub_1000151B0(0, (unint64_t *)&unk_100840E60, REMAlarmTrigger_ptr);
  v90 = sub_10001A630((uint64_t *)&unk_100846B40);
  if ((swift_dynamicCast(v235, &v241, v89, v90, 6) & 1) == 0)
  {
    v236 = 0;
    memset(v235, 0, sizeof(v235));
    sub_10000882C((uint64_t)v32, (uint64_t *)&unk_1008380D0);
    v87 = &qword_100840E70;
    v88 = v235;
    goto LABEL_18;
  }
  sub_10001BCA8(v235, (uint64_t)&v237);
  v91 = v239;
  v92 = v240;
  sub_10000A388(&v237, v239);
  (*(void (**)(id, NSObject *, uint64_t, uint64_t))(v92 + 24))(v230, v225, v91, v92);
  sub_10000882C((uint64_t)v32, (uint64_t *)&unk_1008380D0);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v232[6].isa)(v29, 1, v234) == 1)
  {
    sub_10000882C((uint64_t)v29, (uint64_t *)&unk_1008380D0);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v237);
    v84 = v212;
LABEL_19:
    v93 = v231;
    v94 = (char *)v86 + *(int *)(v231 + 48);
    v95 = v220;
    v96 = v234;
    v97 = v229;
    v229(v94, v220, v234);
    v213 = v232[4].isa;
    ((void (*)(__int128 *, char *, uint64_t))v213)(v32, v94, v96);
    ((void (*)(__int128 *, _QWORD, uint64_t, uint64_t))v84)(v32, 0, 1, v96);
    v98 = (uint64_t)v215;
    v99 = (char *)v215 + *(int *)(v93 + 48);
    v100 = *v221;
    v101 = v221[1];
    *v215 = *v221;
    *(_QWORD *)(v98 + 8) = v101;
    v97(v99, v95, v96);
    v102 = v216;
    sub_100008868(v98, (uint64_t)v216, (uint64_t *)&unk_100843790);
    v103 = v98;
    v104 = v223;
    sub_1000A5CA8(v103, v223, (uint64_t *)&unk_100843790);
    v105 = v66;
    v106 = v100;
    v107 = Logger.logObject.getter(v101);
    v108 = static os_log_type_t.info.getter(v107);
    v109 = v108;
    if (os_log_type_enabled(v107, v108))
    {
      v110 = swift_slowAlloc(22, -1);
      LODWORD(v221) = v109;
      v111 = v110;
      v112 = (Class *)swift_slowAlloc(16, -1);
      *(_DWORD *)v111 = 138543618;
      v220 = v107;
      v113 = (Class)objc_msgSend(v105, "objectID");
      v237 = v113;
      v114 = v234;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, v238);
      *v112 = v113;

      *(_WORD *)(v111 + 12) = 2114;
      v115 = *(int *)(v231 + 48);
      v116 = (char *)v224;
      v117 = (char *)v224 + v115;
      *v224 = *v102;
      v97(&v116[v115], (os_log_t)((char *)v102 + v115), v114);
      v118 = Date._bridgeToObjectiveC()().super.isa;
      v226(v117, v114);
      v237 = v118;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, v238);
      v112[1] = v118;
      sub_10000882C(v223, (uint64_t *)&unk_100843790);
      sub_10000882C((uint64_t)v102, (uint64_t *)&unk_100843790);
      v107 = v220;
      _os_log_impl((void *)&_mh_execute_header, v220, (os_log_type_t)v221, "RDTimeAlarmProducerDataSource: expiredProducerAlarmsBefore is using default fireDate for alarm {alarmID: %{public}@ dataSourceAlarm.fireDate: %{public}@}", (uint8_t *)v111, 0x16u);
      v119 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v112, 2, v119);
      v120 = v112;
      v32 = v227;
      swift_slowDealloc(v120, -1, -1);
      swift_slowDealloc(v111, -1, -1);
    }
    else
    {

      sub_10000882C(v104, (uint64_t *)&unk_100843790);
      sub_10000882C((uint64_t)v102, (uint64_t *)&unk_100843790);
    }

    v121 = v222;
    v122 = v233;
    v123 = (uint64_t)v217;
    goto LABEL_23;
  }
  v166 = v211;
  v167 = v234;
  v213 = v232[4].isa;
  ((void (*)(NSObject *, char *, uint64_t))v213)(v211, v29, v234);
  v168 = v229;
  v229((char *)v32, v166, v167);
  ((void (*)(__int128 *, _QWORD, uint64_t, uint64_t))v212)(v32, 0, 1, v167);
  v169 = (uint64_t)v205;
  v170 = (char *)v205 + *(int *)(v231 + 48);
  v171 = *v221;
  v172 = v221[1];
  *v205 = *v221;
  *(_QWORD *)(v169 + 8) = v172;
  v168(v170, v220, v167);
  v173 = v206;
  sub_100008868(v169, (uint64_t)v206, (uint64_t *)&unk_100843790);
  sub_1000A5CA8(v169, v209, (uint64_t *)&unk_100843790);
  v174 = v208;
  v175 = v167;
  v176 = (void (*)(char *, char *, uint64_t))v168;
  v168(v208, v166, v175);
  v177 = v233;
  v178 = v171;
  v179 = Logger.logObject.getter(v172);
  v180 = static os_log_type_t.info.getter(v179);
  v181 = v180;
  if (os_log_type_enabled(v179, v180))
  {
    v182 = swift_slowAlloc(32, -1);
    v183 = (void **)swift_slowAlloc(24, -1);
    v221 = v183;
    *(_DWORD *)v182 = 138543874;
    LODWORD(v223) = v181;
    v184 = -[NSObject objectID](v177, "objectID");
    *(_QWORD *)&v235[0] = v184;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v235, (char *)v235 + 8);
    *v183 = v184;

    *(_WORD *)(v182 + 12) = 2114;
    v185 = *(int *)(v231 + 48);
    v186 = (char *)v224;
    v187 = (char *)v224 + v185;
    *v224 = *(_OWORD *)v173;
    v188 = v234;
    v176(&v186[v185], &v173[v185], v234);
    v189 = Date._bridgeToObjectiveC()().super.isa;
    v190 = v226;
    v226(v187, v188);
    *(_QWORD *)&v235[0] = v189;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v235, (char *)v235 + 8);
    v191 = v221;
    v221[1] = v189;
    sub_10000882C(v209, (uint64_t *)&unk_100843790);
    sub_10000882C((uint64_t)v173, (uint64_t *)&unk_100843790);
    *(_WORD *)(v182 + 22) = 2114;
    v192 = v208;
    v193 = Date._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v235[0] = v193;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v235, (char *)v235 + 8);
    v191[2] = v193;
    v190(v192, v188);
    _os_log_impl((void *)&_mh_execute_header, v179, (os_log_type_t)v223, "RDTimeAlarmProducerDataSource: expiredProducerAlarmsBefore is calculating fireDate for alarm {alarmID: %{public}@ dataSourceAlarm.fireDate: %{public}@ previousFireDate: %{public}@}", (uint8_t *)v182, 0x20u);
    v194 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v191, 3, v194);
    v32 = v227;
    swift_slowDealloc(v191, -1, -1);
    v195 = v190;
    swift_slowDealloc(v182, -1, -1);
  }
  else
  {

    v195 = v226;
    v226(v174, v234);
    sub_10000882C(v209, (uint64_t *)&unk_100843790);
    sub_10000882C((uint64_t)v173, (uint64_t *)&unk_100843790);

    v179 = v177;
  }
  v121 = v222;
  v123 = (uint64_t)v217;

  v195((char *)v211, v234);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v237);
  v122 = v233;
LABEL_23:
  sub_100008868((uint64_t)v32, v123, (uint64_t *)&unk_1008380D0);
  v124 = v232[6].isa;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v124)(v123, 1, v234) == 1)
  {
    v125 = v225;
    sub_10000882C(v123, (uint64_t *)&unk_1008380D0);
    goto LABEL_27;
  }
  v126 = v234;
  v127 = (void (*)(char *, char *, uint64_t))v213;
  ((void (*)(char *, uint64_t, uint64_t))v213)(v121, v123, v234);
  v128 = sub_10009FC50((unint64_t *)&qword_100842190, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  if ((dispatch thunk of static Comparable.< infix(_:_:)(v225, v121, v126, v128) & 1) != 0)
  {
    v125 = v225;
    v226(v121, v234);
LABEL_27:
    v129 = v214;
    v229(v214, v125, v234);
    v130 = v122;
    v131 = Logger.logObject.getter(v130);
    v132 = static os_log_type_t.info.getter(v131);
    if (os_log_type_enabled(v131, v132))
    {
      v133 = swift_slowAlloc(22, -1);
      v134 = (Class *)swift_slowAlloc(16, -1);
      *(_DWORD *)v133 = 138543618;
      v135 = (Class)objc_msgSend(v130, "objectID");
      v237 = v135;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, v238);
      *v134 = v135;

      *(_WORD *)(v133 + 12) = 2114;
      v136 = Date._bridgeToObjectiveC()().super.isa;
      v237 = v136;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, v238);
      v134[1] = v136;
      v226(v129, v234);
      _os_log_impl((void *)&_mh_execute_header, v131, v132, "RDTimeAlarmProducerDataSource: expiredProducerAlarmsBefore fireDate is later than now for alarm. Skipping {alarmID: %{public}@ nowDate: %{public}@}", (uint8_t *)v133, 0x16u);
      v137 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v134, 2, v137);
      swift_slowDealloc(v134, -1, -1);
      swift_slowDealloc(v133, -1, -1);

    }
    else
    {

      v226(v129, v234);
    }
LABEL_30:
    sub_10000882C((uint64_t)v227, (uint64_t *)&unk_1008380D0);
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v218 + 56))(v219, 1, 1, v231);
  }
  v139 = objc_msgSend(v122, "acknowledgedDate");
  if (!v139)
  {
    v142 = (uint64_t)v210;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v212)(v210, 1, 1, v234);
    goto LABEL_39;
  }
  v140 = v139;
  v141 = v207;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v139);

  v142 = (uint64_t)v210;
  v143 = v141;
  v122 = v233;
  v144 = v234;
  v127(v210, v143, v234);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v212)(v142, 0, 1, v144);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v124)(v142, 1, v144) == 1)
  {
LABEL_39:

    sub_10000882C((uint64_t)v32, (uint64_t *)&unk_1008380D0);
    goto LABEL_40;
  }
  v145 = v204;
  v127(v204, (char *)v142, v234);
  if ((static Date.< infix(_:_:)(v121, v145) & 1) != 0)
  {
    v146 = v202;
    v147 = v234;
    v148 = v122;
    v149 = (void (*)(char *, char *, uint64_t))v229;
    v229(v202, (os_log_t)v121, v234);
    v150 = v203;
    v149(v203, v145, v147);
    v151 = v148;
    v152 = Logger.logObject.getter(v151);
    v153 = static os_log_type_t.info.getter(v152);
    v154 = v153;
    if (os_log_type_enabled(v152, v153))
    {
      v155 = swift_slowAlloc(32, -1);
      v156 = swift_slowAlloc(24, -1);
      LODWORD(v233) = v154;
      v157 = (_QWORD *)v156;
      *(_DWORD *)v155 = 138543874;
      v232 = v152;
      v158 = (Class)objc_msgSend(v151, "objectID");
      v237 = v158;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, v238);
      *v157 = v158;

      v159 = v234;
      *(_WORD *)(v155 + 12) = 2114;
      v160 = Date._bridgeToObjectiveC()().super.isa;
      v237 = v160;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, v238);
      v157[1] = v160;
      v161 = v146;
      v162 = v226;
      v226(v161, v159);
      *(_WORD *)(v155 + 22) = 2114;
      v163 = Date._bridgeToObjectiveC()().super.isa;
      v237 = v163;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, v238);
      v157[2] = v163;
      v162(v150, v159);
      v164 = v232;
      _os_log_impl((void *)&_mh_execute_header, v232, (os_log_type_t)v233, "RDTimeAlarmProducerDataSource: expiredProducerAlarmsBefore fireDate is earlier than ackDate for alarm. Skipping {alarmID: %{public}@ finalFireDate: %{public}@ ackDate: %{public}@}", (uint8_t *)v155, 0x20u);
      v165 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v157, 3, v165);
      swift_slowDealloc(v157, -1, -1);
      swift_slowDealloc(v155, -1, -1);

      v162(v204, v159);
      v162(v222, v159);
    }
    else
    {

      v199 = v150;
      v200 = v234;
      v201 = v226;
      v226(v199, v234);
      v201(v146, v200);

      v201(v145, v200);
      v201(v121, v200);
    }
    goto LABEL_30;
  }

  v226(v145, v234);
  v142 = (uint64_t)v32;
LABEL_40:
  sub_10000882C(v142, (uint64_t *)&unk_1008380D0);
  v196 = v231;
  v197 = v219;
  v198 = (char *)v219 + *(int *)(v231 + 48);
  *v219 = v230;
  v197[1] = v122;
  v127(v198, v121, v234);
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v218 + 56))(v197, 0, 1, v196);
}

void sub_10035F4B0(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t KeyPath;
  void *v11;
  id v12;
  unsigned __int8 v13;
  Class isa;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  id v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Class v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  id v40;
  _QWORD *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  unint64_t v47;
  _BYTE v48[40];

  v5 = objc_msgSend(objc_allocWithZone((Class)REMStore), "initWithDaemonController:", *(_QWORD *)(a1 + 24));
  sub_10020B48C(3, 160);
  v7 = v6;
  v8 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v8, v48);
  *(_OWORD *)(inited + 16) = xmmword_1006A7330;
  KeyPath = swift_getKeyPath(&unk_1006B7090);
  *(_QWORD *)(inited + 32) = KeyPath;
  v47 = inited;
  specialized Array._endMutation()(KeyPath);
  v11 = (void *)sub_100358008(inited, 0, 0, (uint64_t)v7, (unint64_t *)&unk_100840BD0, off_1007D6680, (unint64_t)sub_1002DBD54, &qword_1008436D0, &qword_100846B30);
  swift_bridgeObjectRelease();
  v12 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
  v13 = objc_msgSend(v12, "disableAlarmEngineDataSourcePrefetching");

  if ((v13 & 1) == 0)
  {
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v11, "setRelationshipKeyPathsForPrefetching:", isa);

  }
  v15 = sub_1000151B0(0, (unint64_t *)&unk_100840BD0, off_1007D6680);
  v16 = NSManagedObjectContext.fetch<A>(_:)(v11, v15);
  if (v2)
  {
    v17 = v5;
    v5 = v11;
LABEL_5:

    return;
  }
  v18 = v16;
  v46 = v11;
  v44 = a1;
  v47 = (unint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v16 >> 62)
  {
    if (v16 < 0)
      v31 = v16;
    else
      v31 = v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v16);
    v19 = _CocoaArrayWrapper.endIndex.getter(v31);
    v45 = a2;
    if (!v19)
      goto LABEL_26;
  }
  else
  {
    v19 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v16);
    v45 = a2;
    if (!v19)
      goto LABEL_26;
  }
  if (v19 < 1)
    __break(1u);
  for (i = 0; i != v19; ++i)
  {
    if ((v18 & 0xC000000000000001) != 0)
      v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v18);
    else
      v21 = *(id *)(v18 + 8 * i + 32);
    v22 = v21;
    v23 = objc_msgSend(v21, "alarm");
    if (v23
      && (v24 = v23, v25 = objc_msgSend(v23, "reminder"), v24, v25))
    {
      v26 = objc_msgSend(v25, "remObjectID");

      if (v26)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v27);
        v29 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v28 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v29 >= v28 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1);
        v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v26);
        specialized Array._endMutation()(v30);
      }
    }
    else
    {

    }
  }
LABEL_26:
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(objc_allocWithZone((Class)REMRemindersDataView), "initWithStore:", v5);
  v32 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v33 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v34 = objc_msgSend((id)objc_opt_self(REMReminderFetchOptions), "defaultFetchOptions");
  v47 = 0;
  v35 = objc_msgSend(v17, "fetchRemindersWithObjectIDs:fetchOptions:error:", v33, v34, &v47);

  v36 = (id)v47;
  if (!v35)
  {
    v42 = (id)v47;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)(v36);

    swift_willThrow(v43);
    goto LABEL_5;
  }
  v37 = sub_1000151B0(0, &qword_100846630, REMReminder_ptr);
  v38 = sub_10011A5DC();
  v39 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v35, v32, v37, v38);
  v40 = v36;

  swift_bridgeObjectRetain(v39);
  swift_retain();
  v41 = sub_1003659E0(v18, v39, v44, (void (*)(_QWORD, _QWORD, _QWORD))sub_10035F9D8);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease_n(v39, 2);
  swift_release(v44);

  *v45 = v41;
}

uint64_t sub_10035F9D8@<X0>(id *a1@<X0>, uint64_t a2@<X1>, NSObject *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  NSObject **v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v43)(char *, char *, uint64_t);
  id v44;
  id v45;
  Class isa;
  objc_class *v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  id v51;
  uint64_t v52;
  id v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  _QWORD *v57;
  id v58;
  NSObject *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[2];
  id v63;
  id v64;
  id v65;
  NSObject *v66;
  _QWORD *v67;
  uint64_t v68;
  __int128 v69[2];
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;

  v67 = a4;
  v7 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v7);
  v9 = (char *)v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)&v12 = __chkstk_darwin(v10).n128_u64[0];
  v14 = (char *)v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  v16 = objc_msgSend(*a1, "alarm", v12);
  if (!v16)
    goto LABEL_15;
  v17 = v16;
  v66 = a3;
  v18 = objc_msgSend(v16, "reminder");
  if (!v18)
    goto LABEL_14;
  v19 = v18;
  v20 = objc_msgSend(v18, "remObjectID");

  if (!v20)
    goto LABEL_14;
  v21 = v20;
  v22 = sub_1002B1B30(v21, a2);

  if (!v22)
  {

    goto LABEL_15;
  }
  v23 = objc_msgSend(v22, "alarms");
  if (!v23)
  {

LABEL_13:
LABEL_14:

    goto LABEL_15;
  }
  v24 = v23;
  v65 = v21;
  v25 = sub_1000151B0(0, &qword_10083C2F0, REMAlarm_ptr);
  v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v24, v25);

  v17 = v17;
  v27 = v68;
  v28 = sub_100365114(v26, v17);
  v68 = v27;
  swift_bridgeObjectRelease();

  if (!v28)
  {

    goto LABEL_13;
  }
  v75 = objc_msgSend(v28, "trigger");
  v29 = sub_1000151B0(0, (unint64_t *)&unk_100840E60, REMAlarmTrigger_ptr);
  v30 = sub_10001A630((uint64_t *)&unk_100846B40);
  if ((swift_dynamicCast(v69, &v75, v29, v30, 6) & 1) == 0)
  {
    v70 = 0;
    memset(v69, 0, sizeof(v69));

    sub_10000882C((uint64_t)v69, &qword_100840E70);
    goto LABEL_15;
  }
  v63 = v28;
  v64 = v17;
  sub_10001BCA8(v69, (uint64_t)&v71);
  v31 = v73;
  v32 = v74;
  sub_10000A388(&v71, v73);
  (*(void (**)(void *, uint64_t, uint64_t))(v32 + 8))(v22, v31, v32);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {

    sub_10000882C((uint64_t)v9, (uint64_t *)&unk_1008380D0);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v71);
LABEL_15:
    if (qword_100837288 != -1)
      swift_once(&qword_100837288, sub_10035A738);
    v33 = type metadata accessor for Logger(0);
    sub_10001AAA8(v33, (uint64_t)qword_100846A40);
    v34 = v15;
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v37 = 138412290;
      v71 = v34;
      v39 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
      *v38 = v34;

      _os_log_impl((void *)&_mh_execute_header, v35, v36, "TimeDataSourceAlarms: Failed to get REMReminder, REMAlarm or triggerEvent from cdTrigger -- skipping {cdTrigger: %@}", v37, 0xCu);
      v40 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v38, 1, v40);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);
    }
    else
    {

      v35 = v34;
    }

    v41 = sub_10001A630((uint64_t *)&unk_100843790);
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v67, 1, 1, v41);
  }
  v43 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v43(v14, v9, v10);
  v44 = objc_msgSend(v22, "assignmentContext");
  v45 = objc_msgSend(v44, "currentAssignment");

  if (v45
    && (v45,
        isa = v66[5].isa,
        v47 = isa,
        LOBYTE(isa) = sub_1004D3090(isa),
        v47,
        (isa & 1) == 0))
  {
    if (qword_100837288 != -1)
      swift_once(&qword_100837288, sub_10035A738);
    v52 = type metadata accessor for Logger(0);
    sub_10001AAA8(v52, (uint64_t)qword_100846A40);
    v53 = v22;
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.info.getter(v54);
    v66 = v54;
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(12, -1);
      v57 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v56 = 138543362;
      v62[1] = v56 + 4;
      v58 = objc_msgSend(v53, "objectID");
      *(_QWORD *)&v69[0] = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v69, (char *)v69 + 8);
      *v57 = v58;

      v59 = v66;
      _os_log_impl((void *)&_mh_execute_header, v66, v55, "Fetched reminder is not assigned to current user. Skipping {reminderID: %{public}@}", v56, 0xCu);
      v60 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v57, 1, v60);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v56, -1, -1);

    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    v61 = sub_10001A630((uint64_t *)&unk_100843790);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v67, 1, 1, v61);
  }
  else
  {

    v48 = sub_10001A630((uint64_t *)&unk_100843790);
    v49 = v67;
    v50 = (char *)v67 + *(int *)(v48 + 48);
    v51 = v63;
    *v67 = v22;
    v49[1] = v51;
    v43(v50, v14, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v49, 0, 1, v48);
  }
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v71);
}

void sub_100360110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7;
  id v8;
  uint64_t v9;
  double v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSString v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  unsigned __int8 v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;

  v7 = *(id *)(a1 + 16);
  v8 = objc_msgSend(v7, "phones");
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, &type metadata for String);

  LOBYTE(a2) = sub_10032FA94(v9, a2);
  *(_QWORD *)&v10 = swift_bridgeObjectRelease(v9).n128_u64[0];
  if ((a2 & 1) == 0)
  {

    return;
  }
  v42 = a4;
  v43 = v7;
  v11 = objc_msgSend(v7, "phones", v10);
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, &type metadata for String);

  v13 = *(_QWORD *)(v12 + 16);
  v44 = a3;
  if (v13)
  {
    swift_bridgeObjectRetain(v12);
    v14 = (uint64_t *)(v12 + 40);
    do
    {
      v16 = *v14;
      v17 = objc_allocWithZone((Class)CNPhoneNumber);
      swift_bridgeObjectRetain(v16);
      v18 = String._bridgeToObjectiveC()();
      v19 = objc_msgSend(v17, "initWithStringValue:", v18, swift_bridgeObjectRelease(v16).n128_f64[0]);

      if (v19)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
        v22 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v21 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v22 >= v21 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1);
        v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v19);
        specialized Array._endMutation()(v15);
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease(v12);
  }
  swift_bridgeObjectRelease(v12);
  if ((unint64_t)a3 >> 62)
  {
LABEL_36:
    if (a3 < 0)
      v36 = a3;
    else
      v36 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v23 = _CocoaArrayWrapper.endIndex.getter(v36);
    if (v23)
      goto LABEL_13;
LABEL_32:
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    v34 = objc_msgSend(v43, "emails", swift_bridgeObjectRelease(a3).n128_f64[0]);
    v35 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v34, &type metadata for String);

    sub_10032FA94(v35, v42);
    swift_bridgeObjectRelease(v35);

    return;
  }
  v23 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  if (!v23)
    goto LABEL_32;
LABEL_13:
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
  {
    if ((uint64_t)_swiftEmptyArrayStorage < 0)
      v37 = _swiftEmptyArrayStorage;
    else
      v37 = (_QWORD *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    v24 = _CocoaArrayWrapper.endIndex.getter(v37);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  }
  else
  {
    v24 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v25 = 0;
  v26 = a3 & 0xC000000000000001;
  v40 = a3 + 32;
  v41 = a3 & 0xFFFFFFFFFFFFFF8;
  v38 = a3 & 0xC000000000000001;
  v39 = v23;
  while (1)
  {
    if (v26)
    {
      v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25, a3);
      goto LABEL_20;
    }
    if (v25 >= *(_QWORD *)(v41 + 16))
      break;
    v27 = *(id *)(v40 + 8 * v25);
LABEL_20:
    a3 = (uint64_t)v27;
    if (__OFADD__(v25++, 1))
      goto LABEL_35;
    if (v24)
    {
      swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
      v29 = 4;
      while (1)
      {
        v30 = ((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v29 - 4, _swiftEmptyArrayStorage)
            : (id)_swiftEmptyArrayStorage[v29];
        v31 = v30;
        v32 = v29 - 3;
        if (__OFADD__(v29 - 4, 1))
          break;
        v33 = objc_msgSend((id)a3, "isLikePhoneNumber:", v30);

        if ((v33 & 1) != 0)
        {
          swift_bridgeObjectRelease(v44);
          swift_bridgeObjectRelease_n(_swiftEmptyArrayStorage, 2);

          return;
        }
        ++v29;
        if (v32 == v24)
        {

          swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
          v26 = v38;
          v23 = v39;
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }

LABEL_31:
    a3 = v44;
    if (v25 == v23)
      goto LABEL_32;
  }
  __break(1u);
}

void sub_1003604EC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  sub_1003604F8(a1, a2, (void (*)(_QWORD, __n128))sub_100366294, a3);
}

void sub_1003604F8(uint64_t a1@<X1>, uint64_t a2@<X2>, void (*a3)(_QWORD, __n128)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE v21[16];
  uint64_t v22;

  v8 = sub_10001A630((uint64_t *)&unk_100843790);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v14 = &v21[-v13];
  v22 = a1;
  v15 = sub_100351A84(a3, (uint64_t)v21, a2);
  v16 = v15;
  v17 = v15[2];
  if (!v17)
  {
    v19 = 1;
    goto LABEL_5;
  }
  v18 = (uint64_t)v15 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  sub_100008868(v18, (uint64_t)v14, (uint64_t *)&unk_100843790);
  if (v17 == 1)
  {
LABEL_3:
    sub_1000A5CA8((uint64_t)v14, a4, (uint64_t *)&unk_100843790);
    v19 = 0;
LABEL_5:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a4, v19, 1, v8);
    swift_bridgeObjectRelease();
    return;
  }
  v20 = 1;
  while (v20 < v16[2])
  {
    sub_100008868(v18 + *(_QWORD *)(v9 + 72) * v20, (uint64_t)v11, (uint64_t *)&unk_100843790);
    if ((static Date.< infix(_:_:)(&v11[*(int *)(v8 + 48)], &v14[*(int *)(v8 + 48)]) & 1) != 0)
    {
      sub_10000882C((uint64_t)v14, (uint64_t *)&unk_100843790);
      sub_1000A5CA8((uint64_t)v11, (uint64_t)v14, (uint64_t *)&unk_100843790);
    }
    else
    {
      sub_10000882C((uint64_t)v11, (uint64_t *)&unk_100843790);
    }
    if (v17 == ++v20)
      goto LABEL_3;
  }
  __break(1u);
}

uint64_t sub_1003606AC@<X0>(NSObject *a1@<X0>, uint64_t a2@<X1>, objc_class **a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  Class *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  Class isa;
  Class v42;
  void (*v43)(_QWORD, __n128);
  void (*v44)(_QWORD, _QWORD);
  objc_class *v45;
  objc_class *v46;
  uint64_t v47;
  objc_class *v48;
  objc_class *v49;
  uint64_t v50;
  uint64_t v51;
  objc_class *v52;
  objc_class *v53;
  objc_class *v54;
  objc_class *v55;
  NSObject *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  uint64_t v59;
  _QWORD *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  objc_class *v65;
  uint64_t v66;
  void (*v67)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v68;
  unsigned int v69;
  _OWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(_QWORD, _QWORD, _QWORD);
  uint64_t *v76;
  __int128 *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  Class v83;
  Class v84;
  uint64_t v85;
  uint64_t v86;
  objc_class *v87;
  objc_class *v88;
  NSObject *v89;
  void (*v90)(_QWORD, _QWORD, _QWORD);
  os_log_type_t v91;
  void (*v92)(_QWORD, _QWORD, _QWORD);
  uint64_t v93;
  Class *v94;
  _OWORD *v95;
  Class v96;
  uint64_t v97;
  _OWORD *v98;
  char *v99;
  Class v100;
  uint64_t v101;
  Class *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  objc_class *v108;
  objc_class *v109;
  objc_class *v110;
  uint64_t v111;
  objc_class **v112;
  char *v113;
  objc_class *v115;
  objc_class *v116;
  NSObject *v117;
  os_log_type_t v118;
  uint64_t v119;
  Class *v120;
  Class v121;
  char *v122;
  Class v123;
  uint64_t v124;
  objc_class *v125;
  uint64_t v126;
  objc_class *v127;
  objc_class *v128;
  char *v129;
  void (*v130)(_QWORD, _QWORD, _QWORD);
  uint64_t v131;
  char *v132;
  Class v133;
  Class v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  NSObject *v139;
  objc_class *v140;
  NSObject *v141;
  os_log_type_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _OWORD *v147;
  id v148;
  uint64_t v149;
  _OWORD *v150;
  char *v151;
  Class v152;
  char *v153;
  void (*v154)(_QWORD, _QWORD);
  _QWORD *v155;
  NSObject *v156;
  void (*v157)(_QWORD, _QWORD);
  char *v158;
  Class v159;
  uint64_t v160;
  void (*v161)(_QWORD, _QWORD);
  NSObject *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  objc_class *v167;
  NSObject *v168;
  uint64_t v169;
  char *v170;
  char *v171;
  char *v172;
  os_log_t v173;
  uint64_t v174;
  objc_class **v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  objc_class *v179;
  void (*v180)(_QWORD, _QWORD);
  uint64_t v181;
  _OWORD *v182;
  uint64_t v183;
  void (*v184)(_QWORD, _QWORD, _QWORD);
  __int128 *v185;
  uint64_t v186;
  objc_class *v187;
  uint64_t v188;
  __int128 v189[2];
  uint64_t v190;
  Class v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  id v195;

  v176 = a2;
  v175 = (objc_class **)a3;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v178 = (char *)&v162 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v171 = (char *)&v162 - v8;
  __chkstk_darwin(v9);
  v165 = (char *)&v162 - v10;
  __chkstk_darwin(v11);
  v166 = (char *)&v162 - v12;
  v13 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v13);
  v170 = (char *)&v162 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v162 - v16;
  __chkstk_darwin(v18);
  v20 = (__int128 *)((char *)&v162 - v19);
  v21 = sub_10001A630((uint64_t *)&unk_100843790);
  v174 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v177 = (uint64_t)&v162 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v169 = (uint64_t)&v162 - v24;
  __chkstk_darwin(v25);
  v168 = ((char *)&v162 - v26);
  __chkstk_darwin(v27);
  v164 = (uint64_t)&v162 - v28;
  __chkstk_darwin(v29);
  v163 = (uint64_t)&v162 - v30;
  __chkstk_darwin(v31);
  v162 = ((char *)&v162 - v32);
  v34 = __chkstk_darwin(v33);
  v36 = (Class *)((char *)&v162 - v35);
  v186 = v37;
  v38 = *(int *)(v37 + 48);
  v39 = (char *)&v162 + v38 - v35;
  v40 = (char *)a1 + v38;
  v173 = a1;
  isa = a1->isa;
  v42 = a1[1].isa;
  *v36 = isa;
  v36[1] = v42;
  v182 = (_OWORD *)((char *)&v162 - v35);
  v43 = *(void (**)(_QWORD, __n128))(v5 + 16);
  v172 = v40;
  v184 = (void (*)(_QWORD, _QWORD, _QWORD))v43;
  v43(v39, v34);
  v181 = v5;
  v44 = *(void (**)(_QWORD, _QWORD))(v5 + 8);
  v45 = isa;
  v46 = v42;
  v188 = v4;
  v180 = v44;
  v44(v39, v4);
  v47 = qword_100837288;
  v48 = v45;
  v49 = v46;
  if (v47 != -1)
    swift_once(&qword_100837288, sub_10035A738);
  v50 = type metadata accessor for Logger(0);
  v51 = sub_10001AAA8(v50, (uint64_t)qword_100846A40);
  v52 = v48;
  v53 = v49;
  v54 = v52;
  v55 = v53;
  v183 = v51;
  v56 = Logger.logObject.getter(v55);
  v57 = static os_log_type_t.info.getter(v56);
  v58 = os_log_type_enabled(v56, v57);
  v179 = v54;
  v185 = v20;
  v187 = v55;
  if (v58)
  {
    v59 = swift_slowAlloc(22, -1);
    v60 = (_QWORD *)swift_slowAlloc(8, -1);
    v167 = (objc_class *)swift_slowAlloc(32, -1);
    v191 = v167;
    *(_DWORD *)v59 = 138543618;
    v61 = -[objc_class objectID](v55, "objectID");
    *(_QWORD *)&v189[0] = v61;
    v54 = v179;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v189, (char *)v189 + 8);
    *v60 = v61;
    *(_WORD *)(v59 + 12) = 2082;
    if (-[objc_class isRecurrent](v54, "isRecurrent"))
      v62 = 89;
    else
      v62 = 78;
    *(_QWORD *)&v189[0] = sub_10001A820(v62, 0xE100000000000000, (uint64_t *)&v191);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v189, (char *)v189 + 8);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "RDDueDateDeltaAlarmProducerDataSource: nextProducerDueDateDeltaAlarmFiringAfter alarm {alarmID: %{public}@ isRecurring: %{public}s}", (uint8_t *)v59, 0x16u);
    v63 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v60, 1, v63);
    v64 = v60;
    v20 = v185;
    swift_slowDealloc(v64, -1, -1);
    v65 = v167;
    swift_arrayDestroy(v167, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v65, -1, -1);
    swift_slowDealloc(v59, -1, -1);

  }
  else
  {

  }
  v66 = v181;
  v67 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v181 + 56);
  v68 = v188;
  v67(v20, 1, 1, v188);
  v69 = -[objc_class isOverdue](v54, "isOverdue");
  v70 = v182;
  if (!v69)
  {
    v76 = (uint64_t *)&unk_1008380D0;
    v77 = v20;
LABEL_15:
    sub_10000882C((uint64_t)v77, v76);
    v75 = v184;
    goto LABEL_16;
  }
  v195 = -[objc_class trigger](v187, "trigger");
  v71 = sub_1000151B0(0, (unint64_t *)&unk_100840E60, REMAlarmTrigger_ptr);
  v72 = sub_10001A630((uint64_t *)&unk_100846B40);
  if ((swift_dynamicCast(v189, &v195, v71, v72, 6) & 1) == 0)
  {
    v190 = 0;
    memset(v189, 0, sizeof(v189));
    sub_10000882C((uint64_t)v20, (uint64_t *)&unk_1008380D0);
    v76 = &qword_100840E70;
    v77 = v189;
    goto LABEL_15;
  }
  sub_10001BCA8(v189, (uint64_t)&v191);
  v73 = v193;
  v74 = v194;
  sub_10000A388(&v191, v193);
  (*(void (**)(objc_class *, uint64_t, uint64_t, uint64_t))(v74 + 16))(v54, v176, v73, v74);
  sub_10000882C((uint64_t)v20, (uint64_t *)&unk_1008380D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v17, 1, v68) == 1)
  {
    sub_10000882C((uint64_t)v17, (uint64_t *)&unk_1008380D0);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v191);
    v75 = v184;
    v70 = v182;
LABEL_16:
    v78 = v186;
    v79 = (char *)v70 + *(int *)(v186 + 48);
    v80 = v172;
    v75(v79, v172, v68);
    v167 = *(objc_class **)(v66 + 32);
    ((void (*)(__int128 *, char *, uint64_t))v167)(v20, v79, v68);
    v67(v20, 0, 1, v68);
    v81 = (uint64_t)v168;
    v82 = (char *)v168 + *(int *)(v78 + 48);
    v83 = v173->isa;
    v84 = v173[1].isa;
    v168->isa = v173->isa;
    *(_QWORD *)(v81 + 8) = v84;
    v75(v82, v80, v68);
    v85 = v169;
    sub_100008868(v81, v169, (uint64_t *)&unk_100843790);
    v86 = v177;
    sub_1000A5CA8(v81, v177, (uint64_t *)&unk_100843790);
    v87 = v187;
    v88 = v83;
    v89 = Logger.logObject.getter(v84);
    v90 = v75;
    v91 = static os_log_type_t.info.getter(v89);
    if (os_log_type_enabled(v89, v91))
    {
      v92 = v90;
      v93 = swift_slowAlloc(22, -1);
      v94 = (Class *)swift_slowAlloc(16, -1);
      *(_DWORD *)v93 = 138543618;
      v173 = v89;
      v95 = (_OWORD *)v85;
      v96 = (Class)-[objc_class objectID](v87, "objectID");
      v191 = v96;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, &v192);
      *v94 = v96;

      *(_WORD *)(v93 + 12) = 2114;
      v97 = *(int *)(v186 + 48);
      v98 = v182;
      v99 = (char *)v182 + v97;
      *v182 = *v95;
      v92((char *)v98 + v97, (char *)v95 + v97, v188);
      v100 = Date._bridgeToObjectiveC()().super.isa;
      v180(v99, v188);
      v191 = v100;
      v68 = v188;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, &v192);
      v94[1] = v100;
      sub_10000882C(v177, (uint64_t *)&unk_100843790);
      sub_10000882C((uint64_t)v95, (uint64_t *)&unk_100843790);
      v89 = v173;
      _os_log_impl((void *)&_mh_execute_header, v173, v91, "RDDueDateDeltaAlarmProducerDataSource: nextProducerDueDateDeltaAlarmFiringAfter is using default fireDate for alarm {alarmID: %{public}@ dataSourceAlarm.fireDate: %{public}@}", (uint8_t *)v93, 0x16u);
      v101 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v94, 2, v101);
      v102 = v94;
      v66 = v181;
      swift_slowDealloc(v102, -1, -1);
      swift_slowDealloc(v93, -1, -1);
    }
    else
    {

      sub_10000882C(v86, (uint64_t *)&unk_100843790);
      sub_10000882C(v85, (uint64_t *)&unk_100843790);
    }

    v20 = v185;
    v103 = v178;
    v104 = v176;
    v105 = v171;
    v106 = (uint64_t)v170;
    goto LABEL_20;
  }
  v128 = *(objc_class **)(v66 + 32);
  v129 = v166;
  v167 = v128;
  ((void (*)(char *, char *, uint64_t))v128)(v166, v17, v68);
  v130 = v184;
  v184(v20, v129, v68);
  v67(v20, 0, 1, v68);
  v131 = (uint64_t)v162;
  v132 = (char *)v162 + *(int *)(v186 + 48);
  v133 = v173->isa;
  v134 = v173[1].isa;
  v162->isa = v173->isa;
  *(_QWORD *)(v131 + 8) = v134;
  v130(v132, v172, v68);
  v135 = v163;
  sub_100008868(v131, v163, (uint64_t *)&unk_100843790);
  v136 = v131;
  v137 = v164;
  sub_1000A5CA8(v136, v164, (uint64_t *)&unk_100843790);
  v138 = v165;
  v130(v165, v129, v68);
  v139 = v187;
  v140 = v133;
  v141 = Logger.logObject.getter(v134);
  v142 = static os_log_type_t.info.getter(v141);
  v143 = v142;
  if (os_log_type_enabled(v141, v142))
  {
    v144 = swift_slowAlloc(32, -1);
    v145 = swift_slowAlloc(24, -1);
    v173 = v141;
    v146 = (_QWORD *)v145;
    *(_DWORD *)v144 = 138543874;
    LODWORD(v177) = v143;
    v147 = (_OWORD *)v135;
    v148 = -[NSObject objectID](v139, "objectID");
    *(_QWORD *)&v189[0] = v148;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v189, (char *)v189 + 8);
    *v146 = v148;

    *(_WORD *)(v144 + 12) = 2114;
    v149 = *(int *)(v186 + 48);
    v150 = v182;
    v151 = (char *)v182 + v149;
    *v182 = *v147;
    v130((char *)v150 + v149, (char *)v147 + v149, v68);
    v152 = Date._bridgeToObjectiveC()().super.isa;
    v153 = v151;
    v154 = v180;
    v180(v153, v68);
    *(_QWORD *)&v189[0] = v152;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v189, (char *)v189 + 8);
    v155 = v146;
    v156 = v173;
    v155[1] = v152;
    v157 = v154;
    sub_10000882C(v164, (uint64_t *)&unk_100843790);
    sub_10000882C((uint64_t)v147, (uint64_t *)&unk_100843790);
    *(_WORD *)(v144 + 22) = 2114;
    v158 = v165;
    v159 = Date._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v189[0] = v159;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v189, (char *)v189 + 8);
    v155[2] = v159;
    v157(v158, v68);
    _os_log_impl((void *)&_mh_execute_header, v156, (os_log_type_t)v177, "RDDueDateDeltaAlarmProducerDataSource: nextProducerDueDateDeltaAlarmFiringAfter is calculating fireDate for overdue recurring alarm {alarmID: %{public}@ dataSourceAlarm.fireDate: %{public}@ nextFireDate: %{public}@}", (uint8_t *)v144, 0x20u);
    v160 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v155, 3, v160);
    v20 = v185;
    swift_slowDealloc(v155, -1, -1);
    swift_slowDealloc(v144, -1, -1);
  }
  else
  {

    v161 = v180;
    v180(v138, v68);
    sub_10000882C(v137, (uint64_t *)&unk_100843790);
    sub_10000882C(v135, (uint64_t *)&unk_100843790);

    v156 = v139;
    v157 = v161;
  }
  v103 = v178;
  v104 = v176;
  v105 = v171;
  v106 = (uint64_t)v170;

  v157(v166, v68);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v191);
  v66 = v181;
LABEL_20:
  sub_100008868((uint64_t)v20, v106, (uint64_t *)&unk_1008380D0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v106, 1, v68) == 1)
  {
    sub_10000882C(v106, (uint64_t *)&unk_1008380D0);
  }
  else
  {
    v107 = v106;
    v108 = v167;
    ((void (*)(char *, uint64_t, uint64_t))v167)(v105, v107, v68);
    if ((static Date.> infix(_:_:)(v105, v104) & 1) != 0)
    {
      sub_10000882C((uint64_t)v20, (uint64_t *)&unk_1008380D0);
      v109 = v179;

      v110 = v187;
      v111 = v186;
      v112 = v175;
      v113 = (char *)v175 + *(int *)(v186 + 48);
      *v175 = v109;
      v112[1] = v110;
      ((void (*)(char *, char *, uint64_t))v108)(v113, v105, v68);
      return (*(uint64_t (**)(objc_class **, _QWORD, uint64_t, uint64_t))(v174 + 56))((objc_class **)v112, 0, 1, v111);
    }
    v180(v105, v68);
  }
  v115 = v187;
  v184(v103, v104, v68);
  v116 = v115;
  v117 = Logger.logObject.getter(v116);
  v118 = static os_log_type_t.info.getter(v117);
  if (os_log_type_enabled(v117, v118))
  {
    v119 = swift_slowAlloc(22, -1);
    v120 = (Class *)swift_slowAlloc(16, -1);
    *(_DWORD *)v119 = 138543618;
    v121 = (Class)-[objc_class objectID](v116, "objectID");
    v191 = v121;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, &v192);
    *v120 = v121;

    *(_WORD *)(v119 + 12) = 2114;
    v122 = v178;
    v123 = Date._bridgeToObjectiveC()().super.isa;
    v191 = v123;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, &v192);
    v120[1] = v123;
    v180(v122, v188);
    _os_log_impl((void *)&_mh_execute_header, v117, v118, "RDDueDateDeltaAlarmProducerDataSource: nextProducerDueDateDeltaAlarmFiringAfter fireDate is earlier than now for alarm. Skipping {alarmID: %{public}@ nowDate: %{public}@}", (uint8_t *)v119, 0x16u);
    v124 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v120, 2, v124);
    swift_slowDealloc(v120, -1, -1);
    swift_slowDealloc(v119, -1, -1);

    v125 = v179;
    v126 = (uint64_t)v185;
  }
  else
  {

    v127 = v179;
    v180(v103, v68);

    v126 = (uint64_t)v20;
  }
  sub_10000882C(v126, (uint64_t *)&unk_1008380D0);
  return (*(uint64_t (**)(objc_class **, uint64_t, uint64_t, uint64_t))(v174 + 56))(v175, 1, 1, v186);
}

uint64_t sub_100361688@<X0>(void **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void (*isa)(char *, uint64_t, uint64_t);
  void (*v61)(char *, uint64_t);
  id v62;
  id v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  id v69;
  id v70;
  NSObject *v71;
  NSObject *v72;
  os_log_type_t v73;
  _BOOL4 v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t, uint64_t);
  os_log_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(id, uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t, uint64_t);
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  void *v99;
  void *v100;
  _OWORD *v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  id v105;
  NSObject *v106;
  os_log_type_t v107;
  uint64_t v108;
  objc_class **v109;
  objc_class *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  Class v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  void *v119;
  void *v120;
  char *v121;
  NSObject *v122;
  id v123;
  NSObject *v124;
  os_log_type_t v125;
  int v126;
  uint64_t v127;
  void **v128;
  id v129;
  uint64_t v130;
  char *v131;
  char *v132;
  _OWORD *v133;
  char *v134;
  Class v135;
  void (*v136)(char *, uint64_t);
  void **v137;
  char *v138;
  Class v139;
  uint64_t v140;
  char *v141;
  os_log_t v142;
  void (*v143)(char *, char *, uint64_t);
  uint64_t v144;
  unsigned int (*v145)(uint64_t, uint64_t, uint64_t);
  uint64_t v146;
  char *v147;
  NSObject *v148;
  NSObject *v149;
  os_log_type_t v150;
  uint64_t v151;
  objc_class **v152;
  objc_class *v153;
  Class v154;
  uint64_t v155;
  uint64_t v156;
  NSObject *v158;
  id v159;
  uint64_t v160;
  void *v161;
  void *v162;
  id v163;
  void *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  NSObject *v169;
  NSObject *v170;
  os_log_type_t v171;
  int v172;
  uint64_t v173;
  NSObject *v174;
  objc_class *v175;
  char *v176;
  Class v177;
  char *v178;
  uint64_t v179;
  void (*v180)(char *, uint64_t);
  char *v181;
  objc_class *v182;
  os_log_t v183;
  NSObject *v184;
  uint64_t v185;
  char **v186;
  id v187;
  unsigned __int8 v188;
  char *v189;
  id v190;
  NSObject *v191;
  os_log_type_t v192;
  int v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  __n128 v199;
  char *v200;
  void (*v201)(char *, uint64_t);
  id v202;
  id v203;
  os_log_t v204;
  uint64_t v205;
  void (*v206)(char *, uint64_t, uint64_t);
  NSObject *v207;
  id v208;
  id v209;
  Class v210;
  id v211;
  char *v212;
  NSObject *v213;
  os_log_type_t v214;
  int v215;
  uint64_t v216;
  NSObject *v217;
  objc_class *v218;
  char *v219;
  Class v220;
  char *v221;
  char *v222;
  objc_class *v223;
  os_log_t v224;
  NSObject *v225;
  uint64_t v226;
  void (*v227)(char *, uint64_t);
  NSObject *v228;
  id v229;
  uint64_t v230;
  _QWORD *v231;
  char *v232;
  void (*v233)(char *, uint64_t);
  uint64_t v234;
  char *v235;
  char *v236;
  char *v237;
  char *v238;
  char *v239;
  char *v240;
  char *v241;
  char *v242;
  char *v243;
  void **v244;
  char *v245;
  uint64_t v246;
  _OWORD *v247;
  char *v248;
  _OWORD *v249;
  char *v250;
  void (*v251)(uint64_t, char *, uint64_t);
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  void **v255;
  uint64_t v256;
  char *v257;
  uint64_t v258;
  Class v259;
  char *v260;
  id v261;
  void (*v262)(char *, uint64_t);
  uint64_t v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  os_log_t v267;
  uint64_t v268;
  void (*v269)(char *, uint64_t, uint64_t);
  NSObject *v270;
  __int128 v271[2];
  uint64_t v272;
  objc_class *v273;
  char v274[8];
  uint64_t v275;
  uint64_t v276;
  id v277;

  v263 = a2;
  v253 = a3;
  v4 = type metadata accessor for Date(0);
  v5 = *(NSObject **)(v4 - 8);
  __chkstk_darwin(v4);
  v250 = (char *)&v234 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v240 = (char *)&v234 - v8;
  __chkstk_darwin(v9);
  v237 = (char *)&v234 - v10;
  __chkstk_darwin(v11);
  v239 = (char *)&v234 - v12;
  __chkstk_darwin(v13);
  v241 = (char *)&v234 - v14;
  __chkstk_darwin(v15);
  v235 = (char *)&v234 - v16;
  __chkstk_darwin(v17);
  v236 = (char *)&v234 - v18;
  __chkstk_darwin(v19);
  v242 = (char *)&v234 - v20;
  __chkstk_darwin(v21);
  v238 = (char *)&v234 - v22;
  __chkstk_darwin(v23);
  v257 = (char *)&v234 - v24;
  __chkstk_darwin(v25);
  v245 = (char *)&v234 - v26;
  __chkstk_darwin(v27);
  v248 = (char *)&v234 - v28;
  v29 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v29);
  v243 = (char *)&v234 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v256 = (uint64_t)&v234 - v32;
  __chkstk_darwin(v33);
  v251 = (void (*)(uint64_t, char *, uint64_t))((char *)&v234 - v34);
  __chkstk_darwin(v35);
  v265 = (char *)&v234 - v36;
  v37 = sub_10001A630((uint64_t *)&unk_100843790);
  v252 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v258 = (uint64_t)&v234 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v249 = (_OWORD *)((char *)&v234 - v40);
  __chkstk_darwin(v41);
  v43 = (void **)((char *)&v234 - v42);
  __chkstk_darwin(v44);
  v246 = (uint64_t)&v234 - v45;
  __chkstk_darwin(v46);
  v247 = (_OWORD *)((char *)&v234 - v47);
  __chkstk_darwin(v48);
  v244 = (void **)((char *)&v234 - v49);
  v51 = __chkstk_darwin(v50);
  v53 = (uint64_t *)((char *)&v234 - v52);
  v266 = v54;
  v55 = *(int *)(v54 + 48);
  v56 = (char *)&v234 + v55 - v52;
  v57 = (uint64_t)a1 + v55;
  v255 = a1;
  v58 = *a1;
  v59 = a1[1];
  *v53 = v58;
  v53[1] = v59;
  isa = (void (*)(char *, uint64_t, uint64_t))v5[2].isa;
  v254 = v57;
  v269 = isa;
  ((void (*)(char *, __n128))isa)(v56, v51);
  v267 = v5;
  v61 = (void (*)(char *, uint64_t))v5[1].isa;
  v62 = v58;
  v63 = v59;
  v268 = v4;
  v262 = v61;
  v61(v56, v4);
  v64 = qword_100837288;
  v65 = v63;
  if (v64 != -1)
    swift_once(&qword_100837288, sub_10035A738);
  v66 = type metadata accessor for Logger(0);
  v67 = sub_10001AAA8(v66, (uint64_t)qword_100846A40);
  v68 = v62;
  v69 = v65;
  v70 = v68;
  v71 = v69;
  v264 = v67;
  v72 = Logger.logObject.getter(v71);
  v73 = static os_log_type_t.info.getter(v72);
  v74 = os_log_type_enabled(v72, v73);
  v261 = v70;
  v270 = v71;
  v260 = v53;
  if (v74)
  {
    v75 = swift_slowAlloc(22, -1);
    v76 = (_QWORD *)swift_slowAlloc(8, -1);
    v77 = swift_slowAlloc(32, -1);
    v273 = (objc_class *)v77;
    *(_DWORD *)v75 = 138543618;
    v78 = -[NSObject objectID](v270, "objectID");
    *(_QWORD *)&v271[0] = v78;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v271, (char *)v271 + 8);
    *v76 = v78;
    v70 = v261;
    *(_WORD *)(v75 + 12) = 2082;
    if (objc_msgSend(v70, "isRecurrent"))
      v79 = 89;
    else
      v79 = 78;
    *(_QWORD *)&v271[0] = sub_10001A820(v79, 0xE100000000000000, (uint64_t *)&v273);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v271, (char *)v271 + 8);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v72, v73, "RDDueDateDeltaAlarmProducerDataSource: expiredProducerDueDateDeltaAlarmsBefore alarm {alarmID: %{public}@ isRecurring: %{public}s}", (uint8_t *)v75, 0x16u);
    v80 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v76, 1, v80);
    v81 = v76;
    v71 = v270;
    swift_slowDealloc(v81, -1, -1);
    swift_arrayDestroy(v77, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v77, -1, -1);
    swift_slowDealloc(v75, -1, -1);

  }
  else
  {

  }
  v82 = (uint64_t)v265;
  v83 = v268;
  v84 = v269;
  v85 = v267;
  v259 = v267[7].isa;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v259)(v265, 1, 1, v268);
  v277 = -[NSObject trigger](v71, "trigger");
  v86 = sub_1000151B0(0, (unint64_t *)&unk_100840E60, REMAlarmTrigger_ptr);
  v87 = sub_10001A630((uint64_t *)&unk_100846B40);
  if ((swift_dynamicCast(v271, &v277, v86, v87, 6) & 1) == 0)
  {
    v94 = v84;
    v272 = 0;
    memset(v271, 0, sizeof(v271));
    sub_10000882C(v82, (uint64_t *)&unk_1008380D0);
    sub_10000882C((uint64_t)v271, &qword_100840E70);
    goto LABEL_13;
  }
  sub_10001BCA8(v271, (uint64_t)&v273);
  v88 = v275;
  v89 = v276;
  sub_10000A388(&v273, v275);
  v90 = *(void (**)(id, uint64_t, uint64_t, uint64_t))(v89 + 24);
  v91 = v88;
  v92 = (uint64_t)v251;
  v93 = v89;
  v85 = v267;
  v90(v70, v263, v91, v93);
  sub_10000882C(v82, (uint64_t *)&unk_1008380D0);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v85[6].isa)(v92, 1, v83) == 1)
  {
    v94 = v84;
    sub_10000882C(v92, (uint64_t *)&unk_1008380D0);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v273);
LABEL_13:
    v95 = v266;
    v96 = (char *)v260 + *(int *)(v266 + 48);
    v97 = v254;
    v94(v96, v254, v83);
    v251 = (void (*)(uint64_t, char *, uint64_t))v85[4].isa;
    v251(v82, v96, v83);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v259)(v82, 0, 1, v83);
    v98 = (char *)v43 + *(int *)(v95 + 48);
    v99 = *v255;
    v100 = v255[1];
    *v43 = *v255;
    v43[1] = v100;
    v94(v98, v97, v83);
    v101 = v249;
    sub_100008868((uint64_t)v43, (uint64_t)v249, (uint64_t *)&unk_100843790);
    v102 = (uint64_t)v43;
    v103 = v258;
    sub_1000A5CA8(v102, v258, (uint64_t *)&unk_100843790);
    v104 = v71;
    v105 = v99;
    v106 = Logger.logObject.getter(v100);
    v107 = static os_log_type_t.info.getter(v106);
    if (os_log_type_enabled(v106, v107))
    {
      v108 = swift_slowAlloc(22, -1);
      v109 = (objc_class **)swift_slowAlloc(16, -1);
      *(_DWORD *)v108 = 138543618;
      v110 = (objc_class *)-[NSObject objectID](v104, "objectID");
      v273 = v110;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v273, v274);
      *v109 = v110;

      *(_WORD *)(v108 + 12) = 2114;
      v111 = *(int *)(v266 + 48);
      v112 = (char *)v260;
      v113 = (char *)v260 + v111;
      *v260 = *v101;
      v269(&v112[v111], (uint64_t)v101 + v111, v268);
      v114 = Date._bridgeToObjectiveC()().super.isa;
      v262(v113, v268);
      v273 = v114;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v273, v274);
      v109[1] = v114;
      v83 = v268;
      sub_10000882C(v258, (uint64_t *)&unk_100843790);
      sub_10000882C((uint64_t)v101, (uint64_t *)&unk_100843790);
      _os_log_impl((void *)&_mh_execute_header, v106, v107, "RDDueDateDeltaAlarmProducerDataSource: expiredProducerDueDateDeltaAlarmsBefore is using default fireDate for alarm {alarmID: %{public}@ dataSourceAlarm.fireDate: %{public}@}", (uint8_t *)v108, 0x16u);
      v115 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v109, 2, v115);
      swift_slowDealloc(v109, -1, -1);
      swift_slowDealloc(v108, -1, -1);
    }
    else
    {

      sub_10000882C(v103, (uint64_t *)&unk_100843790);
      sub_10000882C((uint64_t)v101, (uint64_t *)&unk_100843790);
    }

    v82 = (uint64_t)v265;
    goto LABEL_21;
  }
  v116 = v248;
  v251 = (void (*)(uint64_t, char *, uint64_t))v85[4].isa;
  v251((uint64_t)v248, (char *)v92, v83);
  v84((char *)v82, (uint64_t)v116, v83);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v259)(v82, 0, 1, v83);
  v117 = (uint64_t)v244;
  v118 = (char *)v244 + *(int *)(v266 + 48);
  v119 = *v255;
  v120 = v255[1];
  *v244 = *v255;
  *(_QWORD *)(v117 + 8) = v120;
  v84(v118, v254, v83);
  sub_100008868(v117, (uint64_t)v247, (uint64_t *)&unk_100843790);
  sub_1000A5CA8(v117, v246, (uint64_t *)&unk_100843790);
  v121 = v245;
  v84(v245, (uint64_t)v116, v83);
  v122 = v71;
  v123 = v119;
  v124 = Logger.logObject.getter(v120);
  v125 = static os_log_type_t.info.getter(v124);
  v126 = v125;
  if (os_log_type_enabled(v124, v125))
  {
    v127 = swift_slowAlloc(32, -1);
    v128 = (void **)swift_slowAlloc(24, -1);
    v255 = v128;
    *(_DWORD *)v127 = 138543874;
    LODWORD(v258) = v126;
    v129 = -[NSObject objectID](v122, "objectID");
    *(_QWORD *)&v271[0] = v129;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v271, (char *)v271 + 8);
    *v128 = v129;

    *(_WORD *)(v127 + 12) = 2114;
    v130 = *(int *)(v266 + 48);
    v131 = (char *)v260;
    v132 = (char *)v260 + v130;
    v133 = v247;
    v134 = (char *)v247 + v130;
    *v260 = *v247;
    v84(&v131[v130], (uint64_t)v134, v268);
    v135 = Date._bridgeToObjectiveC()().super.isa;
    v136 = v262;
    v262(v132, v268);
    *(_QWORD *)&v271[0] = v135;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v271, (char *)v271 + 8);
    v137 = v255;
    v255[1] = v135;
    sub_10000882C(v246, (uint64_t *)&unk_100843790);
    sub_10000882C((uint64_t)v133, (uint64_t *)&unk_100843790);
    *(_WORD *)(v127 + 22) = 2114;
    v138 = v245;
    v139 = Date._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v271[0] = v139;
    v83 = v268;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v271, (char *)v271 + 8);
    v137[2] = v139;
    v136(v138, v83);
    _os_log_impl((void *)&_mh_execute_header, v124, (os_log_type_t)v258, "RDDueDateDeltaAlarmProducerDataSource: expiredProducerDueDateDeltaAlarmsBefore is calculating fireDate for alarm {alarmID: %{public}@ dataSourceAlarm.fireDate: %{public}@ previousFireDate: %{public}@}", (uint8_t *)v127, 0x20u);
    v140 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v137, 3, v140);
    v82 = (uint64_t)v265;
    swift_slowDealloc(v137, -1, -1);
    swift_slowDealloc(v127, -1, -1);
  }
  else
  {

    v136 = v262;
    v262(v121, v83);
    sub_10000882C(v246, (uint64_t *)&unk_100843790);
    sub_10000882C((uint64_t)v247, (uint64_t *)&unk_100843790);

    v124 = v122;
  }

  v136(v248, v83);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v273);
LABEL_21:
  v141 = v257;
  v142 = v267;
  v143 = (void (*)(char *, char *, uint64_t))v269;
  v144 = v256;
  sub_100008868(v82, v256, (uint64_t *)&unk_1008380D0);
  v145 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v142[6].isa;
  if (v145(v144, 1, v83) == 1)
  {
    sub_10000882C(v144, (uint64_t *)&unk_1008380D0);
LABEL_25:
    v147 = v250;
    v269(v250, v263, v83);
    v148 = v270;
    v149 = Logger.logObject.getter(v148);
    v150 = static os_log_type_t.info.getter(v149);
    if (os_log_type_enabled(v149, v150))
    {
      v151 = swift_slowAlloc(22, -1);
      v152 = (objc_class **)swift_slowAlloc(16, -1);
      *(_DWORD *)v151 = 138543618;
      v153 = (objc_class *)-[NSObject objectID](v148, "objectID");
      v273 = v153;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v273, v274);
      *v152 = v153;

      *(_WORD *)(v151 + 12) = 2114;
      v154 = Date._bridgeToObjectiveC()().super.isa;
      v273 = v154;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v273, v274);
      v152[1] = v154;
      v262(v147, v268);
      _os_log_impl((void *)&_mh_execute_header, v149, v150, "RDDueDateDeltaAlarmProducerDataSource: expiredProducerDueDateDeltaAlarmsBefore fireDate is later than now for alarm. Skipping {alarmID: %{public}@ nowDate: %{public}@}", (uint8_t *)v151, 0x16u);
      v155 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v152, 2, v155);
      swift_slowDealloc(v152, -1, -1);
      swift_slowDealloc(v151, -1, -1);

LABEL_27:
      v156 = (uint64_t)v265;
LABEL_30:
      sub_10000882C(v156, (uint64_t *)&unk_1008380D0);
      return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v252 + 56))(v253, 1, 1, v266);
    }

    v262(v147, v83);
LABEL_29:
    v156 = v82;
    goto LABEL_30;
  }
  v251((uint64_t)v141, (char *)v144, v83);
  v146 = sub_10009FC50((unint64_t *)&qword_100842190, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  if ((dispatch thunk of static Comparable.< infix(_:_:)(v263, v141, v83, v146) & 1) != 0)
  {
    v262(v141, v83);
    goto LABEL_25;
  }
  v158 = v270;
  v159 = -[NSObject trigger](v270, "trigger");
  v160 = objc_opt_self(REMAlarmDueDateDeltaAlertTrigger);
  v161 = (void *)swift_dynamicCastObjCClass(v159, v160);
  if (!v161)
  {

    goto LABEL_49;
  }
  v162 = v161;
  v163 = objc_msgSend(v161, "acknowledgedDate");
  if (v163)
  {
    v164 = v163;
    v165 = v242;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v163);

    v166 = (uint64_t)v243;
    v251((uint64_t)v243, v165, v83);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v259)(v166, 0, 1, v83);
    if (v145(v166, 1, v83) != 1)
    {
      v167 = v238;
      v251((uint64_t)v238, (char *)v166, v83);
      if ((static Date.< infix(_:_:)(v141, v167) & 1) != 0)
      {
        v143(v236, v141, v83);
        v168 = v235;
        v143(v235, v167, v83);
        v169 = v270;
        v170 = Logger.logObject.getter(v169);
        v171 = static os_log_type_t.info.getter(v170);
        v172 = v171;
        if (os_log_type_enabled(v170, v171))
        {
          v173 = swift_slowAlloc(32, -1);
          v174 = swift_slowAlloc(24, -1);
          *(_DWORD *)v173 = 138543874;
          v270 = v170;
          v175 = (objc_class *)-[NSObject objectID](v169, "objectID");
          v273 = v175;
          LODWORD(v269) = v172;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v273, v274);
          v267 = v174;
          v174->isa = v175;

          *(_WORD *)(v173 + 12) = 2114;
          v176 = v236;
          v177 = Date._bridgeToObjectiveC()().super.isa;
          v273 = v177;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v273, v274);
          v174[1].isa = v177;
          v178 = v176;
          v179 = v268;
          v180 = v262;
          v262(v178, v268);
          *(_WORD *)(v173 + 22) = 2114;
          v181 = v235;
          v182 = Date._bridgeToObjectiveC()().super.isa;
          v273 = v182;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v273, v274);
          v183 = v267;
          v267[2].isa = v182;
          v180(v181, v179);
          v184 = v270;
          _os_log_impl((void *)&_mh_execute_header, v270, (os_log_type_t)v269, "RDDueDateDeltaAlarmProducerDataSource: expiredProducerDueDateDeltaAlarmsBefore fireDate is earlier than ackDate for alarm. Skipping {alarmID: %{public}@ finalFireDate: %{public}@ ackDate: %{public}@}", (uint8_t *)v173, 0x20u);
          v185 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v183, 3, v185);
          swift_slowDealloc(v183, -1, -1);
          swift_slowDealloc(v173, -1, -1);

          v186 = (char **)&v269;
LABEL_46:
          v180(*(v186 - 32), v179);
          v180(v257, v179);
          goto LABEL_27;
        }

        v233 = v262;
        v262(v168, v83);
        v233(v236, v83);

        goto LABEL_53;
      }
      v262(v167, v83);
      goto LABEL_40;
    }
  }
  else
  {
    v166 = (uint64_t)v243;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v259)(v243, 1, 1, v83);
  }
  sub_10000882C(v166, (uint64_t *)&unk_1008380D0);
LABEL_40:
  v187 = objc_msgSend(v162, "dueDateDelta");
  v188 = objc_msgSend(v187, "isEmpty");

  if ((v188 & 1) != 0)
  {
    v189 = v240;
    v143(v240, v141, v83);
    v190 = v159;
    v191 = Logger.logObject.getter(v190);
    v192 = static os_log_type_t.error.getter(v191);
    v193 = v192;
    if (os_log_type_enabled(v191, v192))
    {
      v194 = swift_slowAlloc(32, -1);
      v195 = (_QWORD *)swift_slowAlloc(16, -1);
      v269 = (void (*)(char *, uint64_t, uint64_t))swift_slowAlloc(32, -1);
      v273 = (objc_class *)v269;
      *(_DWORD *)v194 = 136446722;
      v196 = sub_10009FC50((unint64_t *)&qword_100846B70, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v267 = v191;
      LODWORD(v264) = v193;
      v197 = dispatch thunk of CustomStringConvertible.description.getter(v83, v196);
      *(_QWORD *)&v271[0] = sub_10001A820(v197, v198, (uint64_t *)&v273);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v271, (char *)v271 + 8);
      v199 = swift_bridgeObjectRelease();
      v200 = v189;
      v201 = v262;
      ((void (*)(char *, uint64_t, __n128))v262)(v200, v83, v199);
      *(_WORD *)(v194 + 12) = 2114;
      v202 = objc_msgSend(v162, "dueDateDelta");
      *(_QWORD *)&v271[0] = v202;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v271, (char *)v271 + 8);
      *v195 = v202;

      *(_WORD *)(v194 + 22) = 2114;
      v203 = objc_msgSend(v162, "objectID");
      *(_QWORD *)&v271[0] = v203;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v271, (char *)v271 + 8);
      v195[1] = v203;

      v204 = v267;
      _os_log_impl((void *)&_mh_execute_header, v267, (os_log_type_t)v264, "RDDueDateDeltaAlarmProducerDataSource: unable to calculate dueDate fireDate {finalFireDate: %{public}s, un-inverted dueDateDelta: %{public}@, triggerID: %{public}@}", (uint8_t *)v194, 0x20u);
      v205 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v195, 2, v205);
      swift_slowDealloc(v195, -1, -1);
      v206 = v269;
      swift_arrayDestroy(v269, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v206, -1, -1);
      swift_slowDealloc(v194, -1, -1);
      v207 = v270;

      v201(v257, v268);
      v156 = (uint64_t)v265;
    }
    else
    {

      v227 = v262;
      v262(v189, v83);
      v228 = v270;

      v227(v141, v83);
      v156 = v82;
    }
    goto LABEL_30;
  }
  v208 = objc_msgSend(v162, "dueDateDelta");
  v209 = objc_msgSend(v208, "inverted");

  v210 = Date._bridgeToObjectiveC()().super.isa;
  v211 = objc_msgSend(v209, "addedTo:", v210);

  v167 = v241;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v211);

  if ((static Date.< infix(_:_:)(v167, v263) & 1) != 0)
  {
    v143(v239, v141, v83);
    v212 = v237;
    v143(v237, v167, v83);
    v169 = v270;
    v213 = Logger.logObject.getter(v169);
    v214 = static os_log_type_t.info.getter(v213);
    v215 = v214;
    if (os_log_type_enabled(v213, v214))
    {
      v216 = swift_slowAlloc(32, -1);
      v217 = swift_slowAlloc(24, -1);
      *(_DWORD *)v216 = 138543874;
      v270 = v213;
      v218 = (objc_class *)-[NSObject objectID](v169, "objectID");
      v273 = v218;
      LODWORD(v269) = v215;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v273, v274);
      v267 = v217;
      v217->isa = v218;

      *(_WORD *)(v216 + 12) = 2114;
      v219 = v239;
      v220 = Date._bridgeToObjectiveC()().super.isa;
      v273 = v220;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v273, v274);
      v217[1].isa = v220;
      v221 = v219;
      v179 = v268;
      v180 = v262;
      v262(v221, v268);
      *(_WORD *)(v216 + 22) = 2114;
      v222 = v237;
      v223 = Date._bridgeToObjectiveC()().super.isa;
      v273 = v223;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v273, v274);
      v224 = v267;
      v267[2].isa = v223;
      v180(v222, v179);
      v225 = v270;
      _os_log_impl((void *)&_mh_execute_header, v270, (os_log_type_t)v269, "RDDueDateDeltaAlarmProducerDataSource: expiredProducerAlarmsBefore dueDate alarm notification has already past. Skipping {alarmID: %{public}@ finalFireDate: %{public}@ calculatedDueDateFireDate: %{public}@}", (uint8_t *)v216, 0x20u);
      v226 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v224, 3, v226);
      swift_slowDealloc(v224, -1, -1);
      swift_slowDealloc(v216, -1, -1);

      v186 = (char **)v271 + 1;
      goto LABEL_46;
    }

    v233 = v262;
    v262(v212, v83);
    v233(v239, v83);

LABEL_53:
    v233(v167, v83);
    v233(v141, v83);
    goto LABEL_29;
  }
  v158 = v270;

  v262(v167, v83);
LABEL_49:
  v229 = v261;
  sub_10000882C(v82, (uint64_t *)&unk_1008380D0);
  v230 = v266;
  v231 = v253;
  v232 = (char *)v253 + *(int *)(v266 + 48);
  *v253 = v229;
  v231[1] = v158;
  v251((uint64_t)v232, v141, v83);
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v252 + 56))(v231, 0, 1, v230);
}

void sub_10036313C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v3 = type metadata accessor for UUID(0);
  __chkstk_darwin(v3);
  v4 = rem_currentRuntimeVersion(objc_msgSend(objc_allocWithZone((Class)REMStore), "initWithDaemonController:", *(_QWORD *)(a2 + 24)));
  KeyPath = swift_getKeyPath(L"h\x1B");
  v6 = sub_10033F888(KeyPath, v4);
  v7 = swift_release(KeyPath);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v7);
  v9 = _swiftEmptyArrayStorage[2];
  v8 = _swiftEmptyArrayStorage[3];
  if (v9 >= v8 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1);
  v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v6);
  specialized Array._endMutation()(v10);
  sub_10000D2BC(_swiftEmptyArrayStorage);
  sub_100677FF4();
}

void sub_10036379C(id *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  id v11;
  double v12;
  id v13;
  uint64_t v14;
  Swift::String v15;
  __n128 v16;
  void (*v17)(char *, uint64_t, __n128);
  Swift::String v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  Class isa;
  id v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  id v39;
  unint64_t v40;
  void *v41;
  id v42;

  v37 = a3;
  v38 = a2;
  v4 = v3;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v8 = __chkstk_darwin(v6).n128_u64[0];
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v42 = objc_msgSend(*a1, "account", v8);
  v39 = 0;
  v40 = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  *(_QWORD *)&v12 = swift_bridgeObjectRelease().n128_u64[0];
  v39 = (id)0xD000000000000025;
  v40 = 0x8000000100701830;
  v13 = objc_msgSend(v11, "identifier", v12);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v13);

  v14 = sub_10009FC50((unint64_t *)&qword_10083FA40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v6, v14);
  String.append(_:)(v15);
  v16 = swift_bridgeObjectRelease();
  v17 = *(void (**)(char *, uint64_t, __n128))(v7 + 8);
  v17(v10, v6, v16);
  v18._countAndFlagsBits = 8317;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  v19 = v39;
  v20 = v40;
  v21 = sub_10001A630((uint64_t *)&unk_10083ADA0);
  Optional.tryUnwrap(_:file:line:)(&v41, v19, v20, 0xD00000000000006DLL, 0x8000000100701860, 493, v21);
  v22 = v42;
  swift_bridgeObjectRelease();

  if (v3)
    goto LABEL_2;
  v23 = v41;
  v24 = (void *)objc_opt_self(REMReminder);
  v25 = objc_msgSend(v11, "reminderIdentifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v25);

  isa = UUID._bridgeToObjectiveC()().super.isa;
  ((void (*)(char *, uint64_t))v17)(v10, v6);
  v27 = objc_msgSend(v24, "objectIDWithUUID:", isa);

  v39 = 0;
  v28 = objc_msgSend(v23, "remObjectIDWithError:", &v39);
  v29 = v39;
  if (!v28)
  {
    v34 = v39;
    v4 = _convertNSErrorToError(_:)(v29);

    swift_willThrow(v35);
LABEL_2:
    *v38 = v4;
    return;
  }
  v30 = v28;
  v31 = v39;
  v32 = v27;
  v33 = sub_1006776CC(v11);

  *v37 = v33;
}

uint64_t sub_100363AAC@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint8_t *a3@<X2>, NSObject **a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  id v18;
  id v19;
  NSObject *v20;
  id v21;
  unsigned __int8 v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  NSObject **v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  _QWORD *v37;
  NSObject *v38;
  uint64_t v39;
  _QWORD *v40;
  id v41;
  objc_class *v42;
  Class isa;
  id v44;
  int v45;
  NSObject *v46;
  uint64_t v47;
  NSObject **v49;
  uint64_t v50;
  NSObject *v51;
  id v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  _QWORD *v64;
  NSObject *v65;
  NSObject *v66;
  uint64_t v67;
  _QWORD *v68;
  NSObject *v69;
  NSObject *v70;
  NSObject **v71;
  uint64_t v72;
  NSObject *v73;
  void (*v74)(_QWORD, _QWORD, _QWORD);
  id v75;
  id v76;
  void *v77;
  id v78;
  uint64_t v79;
  NSObject **v80;
  char *v81;
  NSObject *v82;
  uint64_t v83;
  NSObject *v84;
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  _QWORD *v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  NSObject *v94;
  uint8_t *v95;
  char *v96;
  NSObject *v97;
  uint64_t v98;
  NSObject **v99;
  __int128 v100[2];
  uint64_t v101;
  NSObject *v102;
  _BYTE v103[16];
  uint64_t v104;
  uint64_t v105;
  id v106;

  v95 = a3;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v96 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v11);
  v13 = (char *)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v15 = __chkstk_darwin(v14).n128_u64[0];
  v17 = (char *)&v92 - v16;
  v18 = *a1;
  v19 = objc_msgSend(*a1, "reminderID", v15);
  v20 = sub_1002B1B30(v19, a2);

  if (v20)
  {
    v97 = v20;
    v99 = a4;
    v21 = objc_msgSend(v18, "dueDateDelta");
    v22 = objc_msgSend(v21, "isEmpty");

    if ((v22 & 1) != 0)
    {
      if (qword_100837288 != -1)
        swift_once(&qword_100837288, sub_10035A738);
      v23 = type metadata accessor for Logger(0);
      sub_10001AAA8(v23, (uint64_t)qword_100846A40);
      v24 = v18;
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.error.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        v98 = v4;
        v27 = (uint8_t *)swift_slowAlloc(12, -1);
        v28 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v27 = 138412290;
        v102 = v24;
        v29 = v24;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, v103);
        *v28 = v24;

        _os_log_impl((void *)&_mh_execute_header, v25, v26, "DueDateDeltaDataSourceAlarms: Invalid dueDateDelta of 0 for remEarlyAlert -- skipping {remEarlyAlert: %@}", v27, 0xCu);
        v30 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy((NSObject **)v28, 1, v30);
        swift_slowDealloc((NSObject **)v28, -1, -1);
        swift_slowDealloc(v27, -1, -1);

      }
      else
      {

      }
      v49 = v99;
      v50 = sub_10001A630((uint64_t *)&unk_100843790);
      return (*(uint64_t (**)(NSObject **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v49, 1, 1, v50);
    }
    v98 = v4;
    v41 = objc_msgSend(v18, "dueDateDelta");
    v42 = (objc_class *)objc_msgSend(v18, "acknowledgedDate");
    isa = v42;
    if (v42)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v42);

      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v17, 0, 1, v8);
      v44 = objc_allocWithZone((Class)REMAlarmDueDateDeltaAlertTrigger);
      v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v17, 1, v8);
      v46 = v97;
      if (v45 == 1)
      {
        isa = 0;
      }
      else
      {
        isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v8);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v17, 1, 1, v8);
      v44 = objc_allocWithZone((Class)REMAlarmDueDateDeltaAlertTrigger);
      v46 = v97;
    }
    v51 = objc_msgSend(v44, "initWithDueDateDelta:acknowledgedDate:", v41, isa);

    v52 = objc_allocWithZone((Class)REMAlarm);
    v94 = v51;
    v53 = objc_msgSend(v52, "initWithTrigger:", v51);
    v106 = -[NSObject trigger](v53, "trigger");
    v54 = sub_1000151B0(0, (unint64_t *)&unk_100840E60, REMAlarmTrigger_ptr);
    v55 = sub_10001A630((uint64_t *)&unk_100846B40);
    if ((swift_dynamicCast(v100, &v106, v54, v55, 6) & 1) == 0)
    {
      v101 = 0;
      memset(v100, 0, sizeof(v100));
      sub_10000882C((uint64_t)v100, &qword_100840E70);
      goto LABEL_24;
    }
    v93 = v53;
    sub_10001BCA8(v100, (uint64_t)&v102);
    v56 = v104;
    v57 = v105;
    sub_10000A388(&v102, v104);
    (*(void (**)(NSObject *, uint64_t, uint64_t))(v57 + 8))(v46, v56, v57);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8) == 1)
    {
      sub_10000882C((uint64_t)v13, (uint64_t *)&unk_1008380D0);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v102);
      v53 = v93;
LABEL_24:
      if (qword_100837288 != -1)
        swift_once(&qword_100837288, sub_10035A738);
      v58 = type metadata accessor for Logger(0);
      sub_10001AAA8(v58, (uint64_t)qword_100846A40);
      v59 = v18;
      v60 = Logger.logObject.getter(v59);
      v61 = static os_log_type_t.error.getter(v60);
      if (os_log_type_enabled(v60, v61))
      {
        v62 = (uint8_t *)swift_slowAlloc(12, -1);
        v63 = swift_slowAlloc(8, -1);
        v93 = v53;
        v64 = (_QWORD *)v63;
        *(_DWORD *)v62 = 138412290;
        v102 = v59;
        v65 = v59;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, v103);
        *v64 = v59;

        v66 = v97;
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "DueDateDeltaDataSourceAlarms: Failed to get fireDate from remEarlyAlert -- skipping {remEarlyAlert: %@}", v62, 0xCu);
        v67 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v64, 1, v67);
        v68 = v64;
        v69 = v93;
        swift_slowDealloc(v68, -1, -1);
        swift_slowDealloc(v62, -1, -1);
        v59 = v94;
      }
      else
      {
        v70 = v46;

        v66 = v53;
        v60 = v70;
        v69 = v94;
      }
      v71 = v99;

      v72 = sub_10001A630((uint64_t *)&unk_100843790);
      return (*(uint64_t (**)(NSObject **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v71, 1, 1, v72);
    }
    v73 = v46;
    v74 = *(void (**)(_QWORD, _QWORD, _QWORD))(v9 + 32);
    v74(v96, v13, v8);
    v75 = -[NSObject assignmentContext](v73, "assignmentContext");
    v76 = objc_msgSend(v75, "currentAssignment");

    if (v76
      && (v76,
          v77 = (void *)*((_QWORD *)v95 + 5),
          v78 = v77,
          LOBYTE(v77) = sub_1004D3090(v77),
          v78,
          (v77 & 1) == 0))
    {
      if (qword_100837288 != -1)
        swift_once(&qword_100837288, sub_10035A738);
      v83 = type metadata accessor for Logger(0);
      sub_10001AAA8(v83, (uint64_t)qword_100846A40);
      v84 = v97;
      v85 = Logger.logObject.getter(v84);
      v86 = static os_log_type_t.info.getter(v85);
      if (os_log_type_enabled(v85, v86))
      {
        v97 = v85;
        v87 = (uint8_t *)swift_slowAlloc(12, -1);
        v88 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v87 = 138543362;
        v95 = v87 + 4;
        v89 = -[NSObject objectID](v84, "objectID");
        *(_QWORD *)&v100[0] = v89;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v100, (char *)v100 + 8);
        *v88 = v89;

        v85 = v97;
        _os_log_impl((void *)&_mh_execute_header, v97, v86, "Fetched reminder is not assigned to current user. Skipping {reminderID: %{public}@}", v87, 0xCu);
        v90 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v88, 1, v90);
        swift_slowDealloc(v88, -1, -1);
        swift_slowDealloc(v87, -1, -1);

      }
      else
      {

      }
      (*(void (**)(char *, uint64_t))(v9 + 8))(v96, v8);
      v91 = sub_10001A630((uint64_t *)&unk_100843790);
      (*(void (**)(NSObject **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 56))(v99, 1, 1, v91);
    }
    else
    {

      v79 = sub_10001A630((uint64_t *)&unk_100843790);
      v80 = v99;
      v81 = (char *)v99 + *(int *)(v79 + 48);
      v82 = v93;
      *v99 = v73;
      v80[1] = v82;
      v74(v81, v96, v8);
      (*(void (**)(NSObject **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v80, 0, 1, v79);
    }
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v102);
  }
  else
  {
    if (qword_100837288 != -1)
      swift_once(&qword_100837288, sub_10035A738);
    v31 = type metadata accessor for Logger(0);
    sub_10001AAA8(v31, (uint64_t)qword_100846A40);
    v32 = v18;
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v98 = v4;
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = swift_slowAlloc(8, -1);
      v99 = a4;
      v37 = (_QWORD *)v36;
      *(_DWORD *)v35 = 138412290;
      v102 = v32;
      v38 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, v103);
      *v37 = v32;

      _os_log_impl((void *)&_mh_execute_header, v33, v34, "DueDateDeltaDataSourceAlarms: Failed to get REMReminder from remEarlyAlert -- skipping {remEarlyAlert: %@}", v35, 0xCu);
      v39 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v37, 1, v39);
      v40 = v37;
      a4 = v99;
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v35, -1, -1);

    }
    else
    {

    }
    v47 = sub_10001A630((uint64_t *)&unk_100843790);
    return (*(uint64_t (**)(NSObject **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(a4, 1, 1, v47);
  }
}

int64_t sub_100364570(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void sub_100364654(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_10036491C(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for REMObjectID_Codable);
}

void sub_100364660(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_100364674(a1, a2, a3, a4, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
}

void sub_100364674(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t *a5, _QWORD *a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  id v18;
  char v19;
  uint64_t v20;
  id v21;
  char v22;
  id v23;
  uint64_t v24;
  unint64_t *v25;

  v10 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        v14 = __CocoaSet.Index.element.getter(v10, a2);
        v24 = v14;
        v15 = sub_1000151B0(0, a5, a6);
        swift_unknownObjectRetain(v14);
        swift_dynamicCast(&v25, &v24, (char *)&type metadata for Swift.AnyObject + 8, v15, 7);
        a5 = v25;
        swift_unknownObjectRelease(v14);
        v16 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v17 = -1 << *(_BYTE *)(a4 + 32);
        v10 = v16 & ~v17;
        if (((*(_QWORD *)(a4 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
        {
          v18 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v10);
          v19 = static NSObject.== infix(_:_:)(v18);

          if ((v19 & 1) == 0)
          {
            v20 = ~v17;
            do
            {
              v10 = (v10 + 1) & v20;
              if (((*(_QWORD *)(a4 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
                goto LABEL_24;
              v21 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v10);
              v22 = static NSObject.== infix(_:_:)(v21);

            }
            while ((v22 & 1) == 0);
          }

LABEL_20:
          v23 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v10);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v11 = a4;
  else
    v11 = a4 & 0xFFFFFFFFFFFFFF8;
  v12 = __CocoaSet.element(at:)(a1, a2, v11);
  v24 = v12;
  v13 = sub_1000151B0(0, a5, a6);
  swift_unknownObjectRetain(v12);
  swift_dynamicCast(&v25, &v24, (char *)&type metadata for Swift.AnyObject + 8, v13, 7);
  swift_unknownObjectRelease(v12);
}

void sub_1003648D4(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_100364674(a1, a2, a3, a4, (unint64_t *)&qword_10083AE90, off_1007D6708);
}

void sub_1003648E8(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_100364674(a1, a2, a3, a4, (unint64_t *)&unk_100846C30, NSPropertyDescription_ptr);
}

void sub_1003648FC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_100364674(a1, a2, a3, a4, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
}

void sub_100364910(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_10036491C(a1, a2, a3, a4, (uint64_t (*)(_QWORD))type metadata accessor for RDClientConnection);
}

void sub_10036491C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  void *v5;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  char v21;
  id v22;
  uint64_t v23;
  void *v24;

  v9 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        v13 = __CocoaSet.Index.element.getter(v9, a2);
        v23 = v13;
        v14 = a5(0);
        swift_unknownObjectRetain(v13);
        swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v14, 7);
        v5 = v24;
        swift_unknownObjectRelease(v13);
        v15 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v16 = -1 << *(_BYTE *)(a4 + 32);
        v9 = v15 & ~v16;
        if (((*(_QWORD *)(a4 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
        {
          v17 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v9);
          v18 = static NSObject.== infix(_:_:)();

          if ((v18 & 1) == 0)
          {
            v19 = ~v16;
            do
            {
              v9 = (v9 + 1) & v19;
              if (((*(_QWORD *)(a4 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
                goto LABEL_24;
              v20 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v9);
              v21 = static NSObject.== infix(_:_:)();

            }
            while ((v21 & 1) == 0);
          }

LABEL_20:
          v22 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v9);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v10 = a4;
  else
    v10 = a4 & 0xFFFFFFFFFFFFFF8;
  v11 = __CocoaSet.element(at:)(a1, a2, v10);
  v23 = v11;
  v12 = a5(0);
  swift_unknownObjectRetain(v11);
  swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
  swift_unknownObjectRelease(v11);
}

void sub_100364B68(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_100364674(a1, a2, a3, a4, (unint64_t *)&qword_100846C20, CLRegion_ptr);
}

void sub_100364B7C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_100364674(a1, a2, a3, a4, &qword_10083DAC0, REMHashtag_ptr);
}

void sub_100364B90(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_100364674(a1, a2, a3, a4, (unint64_t *)&qword_10083DA60, off_1007D66C8);
}

void sub_100364BA4(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_100364674(a1, a2, a3, a4, &qword_10083AA30, off_1007D6658);
}

void sub_100364BB8(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_100364674(a1, a2, a3, a4, (unint64_t *)&unk_10083FDE0, REMAssignment_ptr);
}

uint64_t sub_100364BCC@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (result < 0 || 1 << *(_BYTE *)(a3 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a3 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
    return sub_1002933E0(*(_QWORD *)(a3 + 48) + 40 * result, a4);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_100364C28(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = result;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) == 0)
    {
      if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
      {
        __break(1u);
      }
      else if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) != 0)
      {
        if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        {
LABEL_20:
          v12 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v8);
          swift_retain(v12);
          return v12;
        }
        __break(1u);
        goto LABEL_13;
      }
      __break(1u);
      goto LABEL_24;
    }
LABEL_13:
    result = __CocoaSet.Index.age.getter(result, a2);
    if ((_DWORD)result == *(_DWORD *)(a4 + 36))
    {
      v13 = __CocoaSet.Index.element.getter(v8, a2);
      v19 = v13;
      swift_unknownObjectRetain(v13);
      v14 = sub_10001A630(a5);
      swift_dynamicCast(&v20, &v19, (char *)&type metadata for Swift.AnyObject + 8, v14, 7);
      v15 = v20;
      swift_unknownObjectRelease(v13);
      v21 = v15;
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(*(_QWORD *)(a4 + 40), v14, &protocol witness table for AnyKeyPath);
      v17 = -1 << *(_BYTE *)(a4 + 32);
      v8 = v16 & ~v17;
      if (((*(_QWORD *)(a4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
      {
        v18 = ~v17;
        while (1)
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v8);
          if ((dispatch thunk of static Equatable.== infix(_:_:)(&v20, &v21, v14, &protocol witness table for AnyKeyPath) & 1) != 0)break;
          v8 = (v8 + 1) & v18;
          if (((*(_QWORD *)(a4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
            goto LABEL_18;
        }
      }
      else
      {
LABEL_18:
        swift_release(v15);
        __break(1u);
      }
      swift_release(v15);
      goto LABEL_20;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((a3 & 1) != 0)
  {
    if (a4 < 0)
      v9 = a4;
    else
      v9 = a4 & 0xFFFFFFFFFFFFFF8;
    v10 = __CocoaSet.element(at:)(result, a2, v9);
    v20 = v10;
    swift_unknownObjectRetain(v10);
    v11 = sub_10001A630(a5);
    swift_dynamicCast(&v21, &v20, (char *)&type metadata for Swift.AnyObject + 8, v11, 7);
    v12 = v21;
    swift_unknownObjectRelease(v10);
    return v12;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_100364E50(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_100364674(a1, a2, a3, a4, (unint64_t *)&unk_1008479F0, NSEntityDescription_ptr);
}

void sub_100364E64(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_100364674(a1, a2, a3, a4, &qword_10083FF70, REMAccountStorage_ptr);
}

void sub_100364E78(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_100364674(a1, a2, a3, a4, (unint64_t *)&unk_10083FE30, NSString_ptr);
}

uint64_t sub_100364E90(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_100364F18(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return *(_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * result);
LABEL_8:
  __break(1u);
  return result;
}

void sub_100364F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  _QWORD *v9;
  id v10;
  id v11;
  id v12;
  char v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  __int128 v21;
  id v22;
  __int128 v23;
  _QWORD *v24;

  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v7 = 0;
    v8 = (_OWORD *)(a1 + 40);
    v9 = _swiftEmptyArrayStorage;
    while (v7 < *(_QWORD *)(a1 + 16))
    {
      v21 = *v8;
      v22 = (id)*((_QWORD *)v8 - 1);
      v23 = v21;
      v10 = v22;
      v11 = (id)v21;
      v12 = *((id *)&v21 + 1);
      sub_100360110((uint64_t)&v22, a2, a3, a4);
      if (v4)
      {
        swift_release(v9);
        swift_bridgeObjectRelease(a1);

        return;
      }
      if ((v13 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
        v24 = v9;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1001C2108(0, v9[2] + 1, 1);
          v9 = v24;
        }
        v16 = v9[2];
        v15 = v9[3];
        if (v16 >= v15 >> 1)
        {
          sub_1001C2108(v15 > 1, v16 + 1, 1);
          v9 = v24;
        }
        v9[2] = v16 + 1;
        v17 = &v9[3 * v16];
        v17[4] = v10;
        *(_OWORD *)(v17 + 5) = v21;
      }
      else
      {

      }
      ++v7;
      v8 = (_OWORD *)((char *)v8 + 24);
      if (v6 == v7)
        goto LABEL_13;
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease(a1);
  }
}

void *sub_100365114(unint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_19;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v4)
  {
    v18 = v3;
    v19 = v3 & 0xC000000000000001;
    v5 = 4;
    while (1)
    {
      v7 = v19 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, v3) : *(id *)(v3 + 8 * v5);
      v6 = v7;
      v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      v9 = objc_msgSend(v7, "remObjectID");
      v10 = objc_msgSend(a2, "remObjectID");
      v11 = v10;
      if (!v9)
      {
        if (!v10)
          goto LABEL_17;
        goto LABEL_5;
      }
      if (!v10)
      {
        v11 = v9;
LABEL_5:

        v6 = v11;
        goto LABEL_6;
      }
      sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v12 = v4;
      v13 = a2;
      v14 = v9;
      v15 = static NSObject.== infix(_:_:)(v14);

      a2 = v13;
      v4 = v12;
      v3 = v18;

      if ((v15 & 1) != 0)
      {
LABEL_17:
        swift_bridgeObjectRelease(v3);
        return v6;
      }
LABEL_6:

      ++v5;
      if (v8 == v4)
        goto LABEL_23;
    }
    __break(1u);
LABEL_19:
    if (v3 < 0)
      v16 = v3;
    else
      v16 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v16);
  }
LABEL_23:
  swift_bridgeObjectRelease(v3);
  return 0;
}

_QWORD *sub_1003652DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t i;
  _QWORD *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  id v25;

  v4 = v3;
  if ((unint64_t)a1 >> 62)
    goto LABEL_19;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v18))
  {
    v7 = _swiftEmptyArrayStorage;
    for (i = 4; ; ++i)
    {
      v10 = (a1 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1)
          : *(id *)(a1 + 8 * i);
      v11 = v10;
      v12 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v25 = v10;
      sub_10035AE00(&v25, a2, a3, &v23);
      if (v4)
      {
        swift_bridgeObjectRelease(v7);
        swift_bridgeObjectRelease(a1);

        return v7;
      }

      if ((_QWORD)v23)
      {
        v22 = v23;
        v13 = v24;
        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
          v7 = sub_1002CA628(0, v7[2] + 1, 1, v7);
        v15 = v7[2];
        v14 = v7[3];
        v16 = v22;
        if (v15 >= v14 >> 1)
        {
          v17 = sub_1002CA628((_QWORD *)(v14 > 1), v15 + 1, 1, v7);
          v16 = v22;
          v7 = v17;
        }
        v7[2] = v15 + 1;
        v9 = &v7[3 * v15];
        *((_OWORD *)v9 + 2) = v16;
        v9[6] = v13;
      }
      if (v12 == v6)
      {
        swift_bridgeObjectRelease(a1);
        return v7;
      }
    }
    __break(1u);
LABEL_19:
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_1003654AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t i;
  _QWORD *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  id v25;

  v4 = v3;
  if ((unint64_t)a1 >> 62)
    goto LABEL_19;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v18))
  {
    v7 = _swiftEmptyArrayStorage;
    for (i = 4; ; ++i)
    {
      v10 = (a1 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1)
          : *(id *)(a1 + 8 * i);
      v11 = v10;
      v12 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v25 = v10;
      sub_10035C120(&v25, a2, a3, &v23);
      if (v4)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v7;
      }

      if ((_QWORD)v23)
      {
        v22 = v23;
        v13 = v24;
        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
          v7 = sub_1002CA63C(0, v7[2] + 1, 1, v7);
        v15 = v7[2];
        v14 = v7[3];
        v16 = v22;
        if (v15 >= v14 >> 1)
        {
          v17 = sub_1002CA63C((_QWORD *)(v14 > 1), v15 + 1, 1, v7);
          v16 = v22;
          v7 = v17;
        }
        v7[2] = v15 + 1;
        v9 = &v7[3 * v15];
        *((_OWORD *)v9 + 2) = v16;
        v9[6] = v13;
      }
      if (v12 == v6)
      {
        swift_bridgeObjectRelease();
        return v7;
      }
    }
    __break(1u);
LABEL_19:
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void sub_10036567C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t isUniquelyReferenced_nonNull_native;
  int64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  id v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  int64_t v29;
  int64_t v30;
  uint64_t v31;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  id v36;

  v3 = v2;
  v4 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v31 = 0;
    v5 = 0;
    v6 = 0;
    v7 = __CocoaDictionary.makeIterator()(a1) | 0x8000000000000000;
  }
  else
  {
    v8 = -1 << *(_BYTE *)(a1 + 32);
    v5 = ~v8;
    v31 = a1 + 64;
    v9 = -v8;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v6 = v10 & *(_QWORD *)(a1 + 64);
    v7 = a1;
  }
  isUniquelyReferenced_nonNull_native = swift_bridgeObjectRetain(v4);
  v12 = 0;
  v30 = (unint64_t)(v5 + 64) >> 6;
  v13 = _swiftEmptyArrayStorage;
  while ((v7 & 0x8000000000000000) != 0)
  {
    v18 = __CocoaDictionary.Iterator.next()(isUniquelyReferenced_nonNull_native);
    if (!v18)
      goto LABEL_43;
    v20 = v19;
    swift_unknownObjectRelease(v18);
    v36 = v20;
    v21 = sub_1000151B0(0, &qword_100846630, REMReminder_ptr);
    swift_unknownObjectRetain(v20);
    swift_dynamicCast(&v34, &v36, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
    v22 = (id)v34;
    swift_unknownObjectRelease(v20);
    v17 = v12;
    v15 = v6;
    if (!v22)
      goto LABEL_43;
LABEL_30:
    v36 = v22;
    sub_10035CB54(&v36, a2, &v34);
    if (v3)
    {

      sub_1000C6560(v7);
      swift_bridgeObjectRelease(v13);
      return;
    }

    if ((_QWORD)v34)
    {
      v33 = v34;
      v25 = v35;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_1002CA760(0, v13[2] + 1, 1, v13);
        v13 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v27 = v13[2];
      v26 = v13[3];
      v28 = v33;
      if (v27 >= v26 >> 1)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_1002CA760((_QWORD *)(v26 > 1), v27 + 1, 1, v13);
        v28 = v33;
        v13 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v13[2] = v27 + 1;
      v14 = &v13[3 * v27];
      *((_OWORD *)v14 + 2) = v28;
      v14[6] = v25;
    }
    v12 = v17;
    v6 = v15;
  }
  if (v6)
  {
    v15 = (v6 - 1) & v6;
    v16 = __clz(__rbit64(v6)) | (v12 << 6);
    v17 = v12;
LABEL_29:
    v22 = *(id *)(*(_QWORD *)(v7 + 56) + 8 * v16);
    if (!v22)
      goto LABEL_43;
    goto LABEL_30;
  }
  v17 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v17 >= v30)
      goto LABEL_43;
    v23 = *(_QWORD *)(v31 + 8 * v17);
    if (!v23)
    {
      v24 = v12 + 2;
      if (v12 + 2 >= v30)
        goto LABEL_43;
      v23 = *(_QWORD *)(v31 + 8 * v24);
      if (v23)
        goto LABEL_27;
      v24 = v12 + 3;
      if (v12 + 3 >= v30)
        goto LABEL_43;
      v23 = *(_QWORD *)(v31 + 8 * v24);
      if (v23)
        goto LABEL_27;
      v24 = v12 + 4;
      if (v12 + 4 >= v30)
        goto LABEL_43;
      v23 = *(_QWORD *)(v31 + 8 * v24);
      if (v23)
      {
LABEL_27:
        v17 = v24;
      }
      else
      {
        v17 = v12 + 5;
        if (v12 + 5 >= v30)
          goto LABEL_43;
        v23 = *(_QWORD *)(v31 + 8 * v17);
        if (!v23)
        {
          v29 = v12 + 6;
          while (v30 != v29)
          {
            v23 = *(_QWORD *)(v31 + 8 * v29++);
            if (v23)
            {
              v17 = v29 - 1;
              goto LABEL_28;
            }
          }
LABEL_43:
          sub_1000C6560(v7);
          return;
        }
      }
    }
LABEL_28:
    v15 = (v23 - 1) & v23;
    v16 = __clz(__rbit64(v23)) + (v17 << 6);
    goto LABEL_29;
  }
  __break(1u);
}

_QWORD *sub_1003659E0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v25)(_QWORD, _QWORD, _QWORD);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;

  v6 = v4;
  v31 = a2;
  v32 = a3;
  v8 = sub_10001A630(&qword_1008464F8);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_10001A630((uint64_t *)&unk_100843790);
  v11 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v29 = (uint64_t)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v26 = (uint64_t)&v25 - v14;
  if ((unint64_t)a1 >> 62)
    goto LABEL_20;
  v15 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v15; v15 = _CocoaArrayWrapper.endIndex.getter(v23))
  {
    v16 = _swiftEmptyArrayStorage;
    v27 = a1;
    v28 = a1 & 0xC000000000000001;
    v17 = 4;
    v25 = a4;
    while (1)
    {
      v18 = v28 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17 - 4, a1) : *(id *)(a1 + 8 * v17);
      a1 = (uint64_t)v18;
      v19 = v17 - 3;
      if (__OFADD__(v17 - 4, 1))
        break;
      v33 = v18;
      a4(&v33, v31, v32);
      if (v6)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v16;
      }

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v30) == 1)
      {
        sub_10000882C((uint64_t)v10, &qword_1008464F8);
      }
      else
      {
        v20 = v26;
        sub_1000A5CA8((uint64_t)v10, v26, (uint64_t *)&unk_100843790);
        sub_1000A5CA8(v20, v29, (uint64_t *)&unk_100843790);
        if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
          v16 = (_QWORD *)sub_1002CA614(0, v16[2] + 1, 1, (unint64_t)v16);
        v22 = v16[2];
        v21 = v16[3];
        if (v22 >= v21 >> 1)
          v16 = (_QWORD *)sub_1002CA614(v21 > 1, v22 + 1, 1, (unint64_t)v16);
        v16[2] = v22 + 1;
        sub_1000A5CA8(v29, (uint64_t)v16+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v22, (uint64_t *)&unk_100843790);
        a4 = v25;
      }
      ++v17;
      a1 = v27;
      if (v19 == v15)
      {
        swift_bridgeObjectRelease();
        return v16;
      }
    }
    __break(1u);
LABEL_20:
    if (a1 < 0)
      v23 = a1;
    else
      v23 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100365CB0(uint64_t a1)
{
  return sub_10036600C(a1, (uint64_t)sub_100365CC4, (uint64_t (*)(_BYTE *, uint64_t, uint64_t))sub_1003566CC);
}

void sub_100365CC4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_10035C6C0(v1, a1);
}

uint64_t sub_100365CDC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100365D00()
{
  return sub_1003665C0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100359EF4);
}

uint64_t sub_100365D0C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100365D1C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100209D20(a1, a2);
}

void sub_100365D30(uint64_t a1, void **a2)
{
  sub_100209DA4(a1, a2);
}

uint64_t sub_100365D44()
{
  return sub_1003665C0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100359960);
}

uint64_t sub_100365D50()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100365D60@<X0>(NSObject *a1@<X0>, objc_class **a2@<X8>)
{
  uint64_t v2;

  return sub_10035CFD8(a1, *(_QWORD *)(v2 + 16), a2);
}

void sub_100365D78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = swift_retain(v1);
  v4 = sub_10036600C(v3, (uint64_t)sub_100365CC4, (uint64_t (*)(_BYTE *, uint64_t, uint64_t))sub_1003566CC);
  swift_release(v1);
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v11 = a1;
    else
      v11 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = _CocoaArrayWrapper.endIndex.getter(v11);
    v22 = v4;
    if (!v5)
      goto LABEL_14;
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    v22 = v4;
    if (!v5)
      goto LABEL_14;
  }
  if (v5 < 1)
  {
    __break(1u);
    __break(1u);
    return;
  }
  v6 = 0;
  do
  {
    if ((a1 & 0xC000000000000001) != 0)
      v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
    else
      v7 = *(id *)(a1 + 8 * v6 + 32);
    v8 = v7;
    ++v6;
    v9 = objc_msgSend(v7, "phones");
    v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, &type metadata for String);

    sub_1001E190C(v10);
  }
  while (v5 != v6);
LABEL_14:
  swift_bridgeObjectRelease(a1);
  v12 = sub_10011EE40((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  sub_100351544(v12);
  v14 = v13;
  if (v5)
  {
    v21 = v13;
    swift_bridgeObjectRetain(a1);
    v15 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, a1);
      else
        v16 = *(id *)(a1 + 8 * v15 + 32);
      v17 = v16;
      ++v15;
      v18 = objc_msgSend(v16, "emails");
      v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, &type metadata for String);

      sub_1001E190C(v19);
    }
    while (v5 != v15);
    swift_bridgeObjectRelease(a1);
    v14 = v21;
  }
  v20 = sub_10011EE40((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  sub_100364F70(v22, v12, v14, v20);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v20);
}

uint64_t sub_100365FF8(uint64_t a1)
{
  return sub_10036600C(a1, (uint64_t)sub_100366228, (uint64_t (*)(_BYTE *, uint64_t, uint64_t))sub_100356AF0);
}

uint64_t sub_10036600C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_BYTE *, uint64_t, uint64_t))
{
  void *v6;
  uint64_t v7;
  _BYTE v9[48];

  v6 = objc_autoreleasePoolPush();
  sub_1000184A8(a1 + 48, (uint64_t)v9);
  v7 = a3(v9, a2, a1);
  objc_autoreleasePoolPop(v6);
  return v7;
}

void sub_100366228(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_10035F4B0(v1, a1);
}

uint64_t sub_100366240()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100366250@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100209D20(a1, a2);
}

void sub_100366264(uint64_t a1, void **a2)
{
  sub_100209DA4(a1, a2);
}

uint64_t sub_100366278()
{
  return sub_10000A020((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100359114);
}

uint64_t sub_100366284()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100366294@<X0>(NSObject *a1@<X0>, objc_class **a2@<X8>)
{
  uint64_t v2;

  return sub_1003606AC(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1003662AC(uint64_t a1)
{
  return sub_10036600C(a1, (uint64_t)sub_1003662C0, (uint64_t (*)(_BYTE *, uint64_t, uint64_t))sub_100356AF0);
}

void sub_1003662C0(uint64_t a1)
{
  uint64_t v1;

  sub_10036313C(a1, v1);
}

id sub_1003662D8@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "minimumSupportedAppVersion");
  *a2 = result;
  return result;
}

id sub_100366308(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setMinimumSupportedAppVersion:", *a1);
}

uint64_t sub_10036631C(uint64_t a1)
{
  return sub_10036600C(a1, (uint64_t)sub_100366394, (uint64_t (*)(_BYTE *, uint64_t, uint64_t))sub_100355E84);
}

uint64_t sub_100366330(uint64_t a1)
{
  return sub_10036600C(a1, (uint64_t)sub_100366344, (uint64_t (*)(_BYTE *, uint64_t, uint64_t))sub_1003562A8);
}

void sub_100366344(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_10035BC00(v1, a1);
}

uint64_t sub_10036635C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10036636C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100209D20(a1, a2);
}

void sub_100366380(uint64_t a1, void **a2)
{
  sub_100209DA4(a1, a2);
}

void sub_100366394(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_10035A8E0(v1, a1);
}

uint64_t sub_1003663AC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003663BC@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100209D20(a1, a2);
}

void sub_1003663D0(uint64_t a1, void **a2)
{
  sub_100209DA4(a1, a2);
}

uint64_t sub_1003663E4()
{
  return sub_10000A020((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10035A1B8);
}

uint64_t sub_1003663F0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100366400()
{
  return sub_1003665C0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10035A474);
}

uint64_t sub_10036640C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10036641C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10036642C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10036643C()
{
  return sub_10000A020((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100359C24);
}

uint64_t sub_100366448()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

double sub_100366458(uint64_t a1, unint64_t a2, uint64_t a3)
{
  double result;

  if (a3)
  {
    sub_1000A71C8(a1, a2);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  }
  return result;
}

uint64_t sub_100366484()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100366494()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003664A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003664B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003664C4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003664D4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003664E4()
{
  return sub_10000A020((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100359690);
}

uint64_t sub_1003664F0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100366500(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);

  }
}

uint64_t sub_100366530()
{
  return sub_10000A020((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003593CC);
}

uint64_t sub_10036653C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10036654C(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_10036655C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1000A5A94((uint64_t *)&unk_100840780);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1003665A0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003665B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003665C0(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1003665E4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003666F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100846C60);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100846C60);
  if (qword_100837678 != -1)
    swift_once(&qword_100837678, sub_1004A1950);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872148);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

Swift::Void __swiftcall RDStoreControllerMigrator_MostRecentTargetTemplateIdentifierByCurrentUser.migrateStoreIfNeeded(_:metadata:)(NSPersistentStore _, NSMutableDictionary metadata)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  Class isa;
  uint64_t v10;
  id v11;
  _OWORD v12[2];
  _QWORD v13[4];

  *(_QWORD *)&v12[0] = 0xD000000000000049;
  *((_QWORD *)&v12[0] + 1) = 0x80000001006B7140;
  v4 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v12, &type metadata for String);
  v5 = -[objc_class __swift_objectForKeyedSubscript:](metadata.super.super.isa, "__swift_objectForKeyedSubscript:", v4);
  swift_unknownObjectRelease(v4);
  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(v12, v5);
    swift_unknownObjectRelease(v5);
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  sub_10001A5E8((uint64_t)v12, (uint64_t)v13);
  if (!v13[3])
  {
    sub_10000882C((uint64_t)v13, (uint64_t *)&unk_10083D5B0);
LABEL_9:
    sub_100366980(_.super.isa);
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    v13[0] = 0xD000000000000049;
    v13[1] = 0x80000001006B7140;
    v10 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v13, &type metadata for String);
    -[objc_class __swift_setObject:forKeyedSubscript:](metadata.super.super.isa, "__swift_setObject:forKeyedSubscript:", isa, v10);

    swift_unknownObjectRelease(v10);
    return;
  }
  v6 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  if ((swift_dynamicCast(&v11, v13, (char *)&type metadata for Any + 8, v6, 6) & 1) == 0)
    goto LABEL_9;
  v7 = v11;
  v8 = objc_msgSend(v11, "integerValue");

  if ((uint64_t)v8 <= 0)
    goto LABEL_9;
}

uint64_t sub_100366980(void *a1)
{
  uint64_t ObjectType;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t MetatypeMetadata;
  uint64_t v10;
  unint64_t v11;
  id v12;
  unint64_t v13;
  id v14;
  id v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t result;
  uint64_t v23;
  uint64_t aBlock;
  _QWORD v25[4];
  uint64_t v26;

  ObjectType = swift_getObjectType();
  if (qword_100837298 != -1)
    swift_once(&qword_100837298, sub_1003666F0);
  v3 = type metadata accessor for Logger(0);
  sub_10001AAA8(v3, (uint64_t)qword_100846C60);
  v4 = a1;
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc(22, -1);
    v8 = swift_slowAlloc(64, -1);
    v23 = v8;
    aBlock = ObjectType;
    *(_DWORD *)v7 = 136315394;
    MetatypeMetadata = swift_getMetatypeMetadata(ObjectType);
    v10 = String.init<A>(describing:)(&aBlock, MetatypeMetadata);
    aBlock = sub_10001A820(v10, v11, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v25);
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2082;
    v12 = sub_1002AEF14();
    aBlock = sub_10001A820((uint64_t)v12, v13, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v25);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s: BEGIN {store: %{public}s}", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

  }
  v14 = objc_msgSend(objc_allocWithZone((Class)NSManagedObjectContext), "initWithConcurrencyType:", 1);
  v15 = objc_msgSend(v4, "persistentStoreCoordinator");
  objc_msgSend(v14, "setPersistentStoreCoordinator:", v15);

  objc_msgSend(v14, "setTransactionAuthor:", RDStoreControllerMostRecentTargetTemplateIdentifierByCurrentUserMigrationAuthor);
  v16 = (_QWORD *)swift_allocObject(&unk_1007F0578, 40, 7);
  v16[2] = v14;
  v16[3] = v4;
  v16[4] = ObjectType;
  v17 = swift_allocObject(&unk_1007F05A0, 32, 7);
  *(_QWORD *)(v17 + 16) = sub_100368FB8;
  *(_QWORD *)(v17 + 24) = v16;
  v25[3] = sub_1000098E4;
  v26 = v17;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v25[0] = 1107296256;
  v25[1] = sub_1000098C4;
  v25[2] = &unk_1007F05B8;
  v18 = _Block_copy(&aBlock);
  v19 = v26;
  v20 = v4;
  v21 = v14;
  swift_retain();
  swift_release(v19);
  objc_msgSend(v21, "performBlockAndWait:", v18);

  _Block_release(v18);
  LOBYTE(v21) = swift_isEscapingClosureAtFileLocation(v17, "", 145, 56, 45, 1);
  swift_release(v16);
  result = swift_release(v17);
  if ((v21 & 1) != 0)
    __break(1u);
  return result;
}

void sub_100366CEC(void *a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  int v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t MetatypeMetadata;
  uint64_t v29;
  unint64_t v30;
  id v31;
  unint64_t v32;
  uint64_t v33;
  double v34;
  void (*v35)(_BYTE *, uint64_t);
  uint64_t v36;
  _BYTE v37[12];
  int v38;
  os_log_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[2];
  uint64_t v43;
  uint64_t v44;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v37[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v12 = &v37[-v11];
  __chkstk_darwin(v13);
  v15 = &v37[-v14];
  Date.init()(v16);
  v17 = objc_autoreleasePoolPush();
  sub_1003672FC(a1, a2, (uint64_t)v15, (uint64_t)a3);
  objc_autoreleasePoolPop(v17);
  v42[0] = 0;
  v18 = objc_autoreleasePoolPush();
  sub_100367CB8((uint64_t)a1, (double *)v42, a2, (uint64_t)v15, (uint64_t)a3);
  objc_autoreleasePoolPop(v18);
  v19 = objc_autoreleasePoolPush();
  sub_100368528(a1, v42, a2, (uint64_t)v15, a3);
  objc_autoreleasePoolPop(v19);
  if (qword_100837298 != -1)
    swift_once(&qword_100837298, sub_1003666F0);
  v20 = type metadata accessor for Logger(0);
  sub_10001AAA8(v20, (uint64_t)qword_100846C60);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v12, v15, v6);
  v21 = a2;
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter(v22);
  v24 = v23;
  if (os_log_type_enabled(v22, v23))
  {
    v25 = swift_slowAlloc(32, -1);
    v39 = v22;
    v26 = v21;
    v27 = v25;
    v40 = swift_slowAlloc(64, -1);
    v41 = v40;
    *(_DWORD *)v27 = 136315650;
    v38 = v24;
    v43 = (uint64_t)a3;
    MetatypeMetadata = swift_getMetatypeMetadata(a3);
    v29 = String.init<A>(describing:)(&v43, MetatypeMetadata);
    v43 = sub_10001A820(v29, v30, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2082;
    v31 = sub_1002AEF14();
    v43 = sub_10001A820((uint64_t)v31, v32, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);

    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 22) = 2050;
    Date.init()(v33);
    v34 = Date.timeIntervalSince(_:)(v12);
    v35 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
    v35(v9, v6);
    v43 = *(_QWORD *)&v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
    v35(v12, v6);
    v22 = v39;
    _os_log_impl((void *)&_mh_execute_header, v39, (os_log_type_t)v38, "%s: END {store: %{public}s, elapsedSeconds: %{public}f}", (uint8_t *)v27, 0x20u);
    v36 = v40;
    swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {

    v35 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
    v35(v12, v6);
  }

  v35(v15, v6);
  swift_bridgeObjectRelease();
}

void sub_1003672FC(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t KeyPath;
  void *v13;
  uint64_t v14;
  uint64_t inited;
  NSString v16;
  id v17;
  Class isa;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  Class v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  Class v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t MetatypeMetadata;
  uint64_t v48;
  unint64_t v49;
  id v50;
  id v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  double v57;
  void (*v58)(char *, uint64_t);
  char *v59;
  uint64_t v60;
  NSObject *v61;
  void *v62;
  id v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  NSObject *v68;
  id v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  id v82;
  char v83[104];

  v71 = a4;
  v73 = a3;
  v74 = a2;
  v77 = type metadata accessor for Date(0);
  v75 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v70 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v76 = (char *)&v66 - v8;
  v9 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v9), "entity");
  v11 = objc_msgSend(objc_allocWithZone((Class)NSBatchUpdateRequest), "initWithEntity:", v10);

  KeyPath = swift_getKeyPath(&unk_1006B71D8);
  v13 = (void *)sub_10001CC0C(KeyPath);
  swift_release(KeyPath);
  objc_msgSend(v11, "setPredicate:", v13);

  v14 = sub_10001A630(&qword_10083ADC0);
  inited = swift_initStackObject(v14, v83);
  v72 = xmmword_1006A3C00;
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  *(_QWORD *)&v80 = 0xD00000000000002FLL;
  *((_QWORD *)&v80 + 1) = 0x8000000100701930;
  AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), &v80, &type metadata for String, &protocol witness table for String);
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend((id)objc_opt_self(NSExpression), "expressionForKeyPath:", v16);

  *(_QWORD *)(inited + 96) = sub_1000151B0(0, &qword_10083AEE8, NSExpression_ptr);
  *(_QWORD *)(inited + 72) = v17;
  sub_1002B007C(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v11, "setPropertiesToUpdate:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  objc_msgSend(v11, "setResultType:", 1);
  v78 = 0;
  v19 = objc_msgSend(a1, "executeRequest:error:", v11, &v78);
  v20 = v78;
  if (v19)
  {
    v21 = v19;
    *((_QWORD *)&v81 + 1) = sub_1000151B0(0, (unint64_t *)&unk_100846CA0, NSPersistentStoreResult_ptr);
    *(_QWORD *)&v80 = v21;
    v22 = sub_1000151B0(0, &qword_1008431A0, NSBatchUpdateResult_ptr);
    v23 = v20;
    throwingCast<A>(_:as:failureMessage:)(&v82, &v80, v22, 0, 0, v22);
    if (v4)
    {

      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v80);
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v80);
      v26 = v82;
      v27 = objc_msgSend(v82, "result");
      if (v27)
      {
        v28 = v27;
        _bridgeAnyObjectToAny(_:)(&v80, v27);
        swift_unknownObjectRelease(v28);
      }
      else
      {
        v80 = 0u;
        v81 = 0u;
      }
      v29 = sub_10001A630((uint64_t *)&unk_100846CB0);
      throwingCast<A>(_:as:failureMessage:)(&v82, &v80, v29, 0, 0, v29);
      sub_10000882C((uint64_t)&v80, (uint64_t *)&unk_10083D5B0);
      v69 = v26;
      v30 = v82;
      v68 = objc_opt_self(NSManagedObjectContext);
      v31 = swift_initStackObject(v14, &v79);
      *(_OWORD *)(v31 + 16) = v72;
      *(_QWORD *)&v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUpdatedObjectsKey);
      *((_QWORD *)&v80 + 1) = v32;
      AnyHashable.init<A>(_:)((_QWORD *)(v31 + 32), &v80, &type metadata for String, &protocol witness table for String);
      *(_QWORD *)(v31 + 96) = v29;
      *(_QWORD *)(v31 + 72) = v30;
      *(_QWORD *)&v72 = v30;
      swift_bridgeObjectRetain(v30);
      sub_1002B007C(v31);
      v33 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v34 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v35 = swift_allocObject(v34, 40, 7);
      *(_OWORD *)(v35 + 16) = xmmword_1006A7330;
      *(_QWORD *)(v35 + 32) = a1;
      *(_QWORD *)&v80 = v35;
      specialized Array._endMutation()(v35);
      sub_1000151B0(0, (unint64_t *)&unk_100846CC0, NSManagedObjectContext_ptr);
      v36 = a1;
      v37 = Array._bridgeToObjectiveC()().super.isa;
      -[NSObject mergeChangesFromRemoteContextSave:intoContexts:](v68, "mergeChangesFromRemoteContextSave:intoContexts:", v33, v37, swift_bridgeObjectRelease().n128_f64[0]);

      if (qword_100837298 != -1)
        swift_once(&qword_100837298, sub_1003666F0);
      v38 = type metadata accessor for Logger(0);
      sub_10001AAA8(v38, (uint64_t)qword_100846C60);
      v40 = v75;
      v39 = v76;
      v41 = v77;
      (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v76, v73, v77);
      v42 = v74;
      v43 = v72;
      swift_bridgeObjectRetain(v72);
      v74 = v42;
      v44 = Logger.logObject.getter(v74);
      LODWORD(v73) = static os_log_type_t.default.getter(v44);
      v45 = v43;
      if (os_log_type_enabled(v44, (os_log_type_t)v73))
      {
        v68 = v44;
        v46 = swift_slowAlloc(42, -1);
        v67 = (void *)swift_slowAlloc(64, -1);
        v82 = v67;
        *(_DWORD *)v46 = 136315906;
        *(_QWORD *)&v80 = v71;
        MetatypeMetadata = swift_getMetatypeMetadata(v71);
        v48 = String.init<A>(describing:)(&v80, MetatypeMetadata);
        *(_QWORD *)&v80 = sub_10001A820(v48, v49, (uint64_t *)&v82);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, (char *)&v80 + 8);
        swift_bridgeObjectRelease();
        *(_WORD *)(v46 + 12) = 2082;
        v50 = v74;
        v51 = sub_1002AEF14();
        *(_QWORD *)&v80 = sub_10001A820((uint64_t)v51, v52, (uint64_t *)&v82);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, (char *)&v80 + 8);

        swift_bridgeObjectRelease();
        *(_WORD *)(v46 + 22) = 2050;
        if ((unint64_t)v43 >> 62)
        {
          if (v43 < 0)
            v65 = v43;
          else
            v65 = v43 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v43);
          v53 = _CocoaArrayWrapper.endIndex.getter(v65);
          swift_bridgeObjectRelease();
        }
        else
        {
          v53 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v54 = v70;
        swift_bridgeObjectRelease();
        *(_QWORD *)&v80 = v53;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, (char *)&v80 + 8);
        swift_bridgeObjectRelease();
        *(_WORD *)(v46 + 32) = 2050;
        Date.init()(v55);
        v56 = v76;
        v57 = Date.timeIntervalSince(_:)(v76);
        v58 = *(void (**)(char *, uint64_t))(v75 + 8);
        v59 = v54;
        v60 = v77;
        v58(v59, v77);
        *(double *)&v80 = v57;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, (char *)&v80 + 8);
        v58(v56, v60);
        v61 = v68;
        _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v73, "%s: Copied value of '\\REMCDList.mostRecentTargetTemplateIdentifier' to '\\REMCDList.mostRecentTargetTemplateIdentifierByCurrentUser' via 'NSBatchUpdateRequest' {store: %{public}s, count = %{public}ld, elapsedSeconds: %{public}f}", (uint8_t *)v46, 0x2Au);
        v62 = v67;
        swift_arrayDestroy(v67, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v62, -1, -1);
        swift_slowDealloc(v46, -1, -1);

      }
      else
      {
        v63 = v74;

        v64 = swift_bridgeObjectRelease_n(v45, 2);
        (*(void (**)(char *, uint64_t, __n128))(v40 + 8))(v39, v41, v64);

      }
    }
  }
  else
  {
    v24 = v78;
    _convertNSErrorToError(_:)(v20);

    swift_willThrow(v25);
  }
}

uint64_t sub_100367B58@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*a1, "mostRecentTargetTemplateIdentifier");
  if (v3)
  {
    v4 = v3;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v3);

    v5 = type metadata accessor for UUID(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for UUID(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

void sub_100367BDC(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  uint64_t v11;

  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10011D420(a1, (uint64_t)v6);
  v7 = *a2;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  objc_msgSend(v7, "setMostRecentTargetTemplateIdentifier:", isa);

}

void sub_100367CB8(uint64_t a1, double *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  Class isa;
  uint64_t v27;
  id v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  int v43;
  void (*v44)(uint64_t, uint64_t);
  void *v45;
  uint64_t v46;
  double *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  id v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  void *v58;
  uint64_t MetatypeMetadata;
  uint64_t v60;
  unint64_t v61;
  id v62;
  unint64_t v63;
  double v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  double v70;
  void (*v71)(char *, uint64_t);
  id v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  double *v82;
  uint64_t v83;
  id v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  id v92;
  double v93;
  _OWORD v94[2];
  _BYTE v95[24];
  uint64_t v96;
  uint64_t v97[2];

  v81 = a5;
  v79 = a4;
  v80 = a3;
  v82 = a2;
  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v5);
  v7 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v89 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v86 = (uint64_t)&v74 - v12;
  __chkstk_darwin(v13);
  v90 = (char *)&v74 - v14;
  v15 = type metadata accessor for Date(0);
  v83 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v78 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v74 - v18;
  v20 = (void *)sub_1000153F4(0);
  v21 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v22 = type metadata accessor for REMCDTemplate();
  v23 = objc_msgSend((id)swift_getObjCClassFromMetadata(v22), "entity");
  objc_msgSend(v21, "setEntity:", v23);

  objc_msgSend(v21, "setAffectedStores:", 0);
  objc_msgSend(v21, "setPredicate:", v20);
  objc_msgSend(v21, "setResultType:", 2);

  v24 = sub_10001A630((uint64_t *)&unk_100839E80);
  v25 = swift_allocObject(v24, 64, 7);
  *(_OWORD *)(v25 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v25 + 56) = &type metadata for String;
  *(_QWORD *)(v25 + 32) = 0x696669746E656469;
  *(_QWORD *)(v25 + 40) = 0xEA00000000007265;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v21, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v27 = sub_1000151B0(0, &qword_10083E320, NSDictionary_ptr);
  v28 = v92;
  v29 = NSManagedObjectContext.fetch<A>(_:)(v21, v27);
  v84 = v28;
  if (v28)
  {

    return;
  }
  v30 = v29;
  v91 = v7;
  v31 = v15;
  v77 = v19;
  v97[0] = (uint64_t)&_swiftEmptySetSingleton;
  if (v29 >> 62)
    goto LABEL_31;
  v32 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v29);
LABEL_5:
  v75 = v21;
  v76 = v31;
  if (v32)
  {
    v87 = v32;
    v88 = v30 & 0xC000000000000001;
    v33 = 4;
    v85 = (char *)&type metadata for Any + 8;
    while (1)
    {
      v31 = v33 - 4;
      if (v88)
        v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v33 - 4, v30);
      else
        v34 = *(id *)(v30 + 8 * v33);
      v92 = v34;
      v35 = v33 - 3;
      if (__OFADD__(v31, 1))
      {
        __break(1u);
LABEL_31:
        if (v30 < 0)
          v73 = v30;
        else
          v73 = v30 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v30);
        v32 = _CocoaArrayWrapper.endIndex.getter(v73);
        goto LABEL_5;
      }
      v21 = (id)v8;
      v36 = v9;
      v37 = v30;
      *(_QWORD *)&v94[0] = 0x696669746E656469;
      *((_QWORD *)&v94[0] + 1) = 0xEA00000000007265;
      v38 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v94, &type metadata for String);
      v39 = objc_msgSend(v92, "__swift_objectForKeyedSubscript:", v38);
      swift_unknownObjectRelease(v38);
      if (v39)
      {
        _bridgeAnyObjectToAny(_:)(v94, v39);
        swift_unknownObjectRelease(v39);
      }
      else
      {
        memset(v94, 0, sizeof(v94));
      }
      v40 = (uint64_t)v89;
      v41 = v90;
      v42 = (uint64_t)v91;
      sub_10001A5E8((uint64_t)v94, (uint64_t)v95);
      if (v96)
      {
        v43 = swift_dynamicCast(v42, v95, v85, v8, 6);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v91, v43 ^ 1u, 1, v8);
        v42 = (uint64_t)v91;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v91, 1, v8) != 1)
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v41, v42, v8);
          (*(void (**)(uint64_t, char *, uint64_t))(v36 + 16))(v40, v41, v8);
          sub_1002DB318(v86, v40);
          v44 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
          v44(v86, v8);
          v44((uint64_t)v90, v8);
          goto LABEL_9;
        }
      }
      else
      {
        sub_10000882C((uint64_t)v95, (uint64_t *)&unk_10083D5B0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v42, 1, 1, v8);
      }
      sub_10000882C(v42, (uint64_t *)&unk_100839C80);
LABEL_9:
      v30 = v37;

      ++v33;
      v9 = v36;
      if (v35 == v87)
      {
        swift_bridgeObjectRelease_n(v37, 2);
        v45 = (void *)v97[0];
        v46 = v76;
        goto LABEL_22;
      }
    }
  }
  swift_bridgeObjectRelease_n(v30, 2);
  v45 = &_swiftEmptySetSingleton;
  v46 = v31;
LABEL_22:
  v47 = v82;
  swift_beginAccess(v82, v95, 1, 0);
  *(_QWORD *)v47 = v45;
  swift_bridgeObjectRelease();
  v48 = v83;
  v49 = v81;
  v50 = v80;
  v51 = v79;
  if (qword_100837298 != -1)
    swift_once(&qword_100837298, sub_1003666F0);
  v52 = type metadata accessor for Logger(0);
  sub_10001AAA8(v52, (uint64_t)qword_100846C60);
  v53 = v77;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v77, v51, v46);
  v54 = v50;
  v55 = Logger.logObject.getter(v54);
  v56 = static os_log_type_t.default.getter(v55);
  if (os_log_type_enabled(v55, v56))
  {
    v57 = swift_slowAlloc(42, -1);
    v58 = (void *)swift_slowAlloc(64, -1);
    v97[0] = (uint64_t)v58;
    *(_DWORD *)v57 = 136315906;
    *(_QWORD *)&v94[0] = v49;
    MetatypeMetadata = swift_getMetatypeMetadata(v49);
    v60 = String.init<A>(describing:)(v94, MetatypeMetadata);
    *(_QWORD *)&v94[0] = sub_10001A820(v60, v61, v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v94, (char *)v94 + 8);
    swift_bridgeObjectRelease();
    *(_WORD *)(v57 + 12) = 2082;
    v62 = sub_1002AEF14();
    *(_QWORD *)&v94[0] = sub_10001A820((uint64_t)v62, v63, v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v94, (char *)v94 + 8);

    swift_bridgeObjectRelease();
    *(_WORD *)(v57 + 22) = 2050;
    swift_beginAccess(v47, v94, 0, 0);
    v64 = *v47;
    v92 = v58;
    if (v64 != 0.0)
      v64 = *(double *)(*(_QWORD *)&v64 + 16);
    v65 = v76;
    v66 = v78;
    v93 = v64;
    v67 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94);
    *(_WORD *)(v57 + 32) = 2050;
    Date.init()(v67);
    v68 = v66;
    v69 = v77;
    v70 = Date.timeIntervalSince(_:)(v77);
    v71 = *(void (**)(char *, uint64_t))(v83 + 8);
    v71(v68, v65);
    v93 = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94);
    v71(v69, v65);
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "%s: Fetched '\\REMCDTemplate.identifier' of all non-deleted templates in persistent stores {store: %{public}s, count = %{public}ld, elapsedSeconds: %{public}f}", (uint8_t *)v57, 0x2Au);
    v72 = v92;
    swift_arrayDestroy(v92, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v72, -1, -1);
    swift_slowDealloc(v57, -1, -1);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v48 + 8))(v53, v46);
  }

}

void sub_100368528(void *a1, uint64_t *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  Class isa;
  void *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  BOOL v39;
  id v40;
  void *v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void (*v52)(char *, unint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char v55;
  char *v56;
  char v57;
  void (*v58)(char *, uint64_t);
  __n128 v59;
  unsigned __int8 v60;
  uint64_t v61;
  unsigned int v62;
  double v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  id v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  uint64_t MetatypeMetadata;
  uint64_t v73;
  unint64_t v74;
  id v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  double v79;
  void (*v80)(unint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  double v90;
  id v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t *v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  unint64_t v103;
  char *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  id v109;
  char *v110;
  uint64_t v111;
  double v112;
  uint64_t v113;
  char v114[24];

  v90 = *(double *)&a5;
  v98 = a4;
  v91 = a3;
  v97 = a2;
  v99 = a1;
  v94 = type metadata accessor for Date(0);
  v92 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v6 = (unint64_t)&v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v87 - v8;
  v10 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v10);
  v96 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = type metadata accessor for UUID(0);
  v111 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v13 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v87 - v15;
  v17 = _s10PredicatesOMa_1(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v87 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload(v19, v20, 25);
  sub_10000A3AC();
  v22 = v21;
  sub_1000EC49C((uint64_t)v19);
  v23 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v24 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v25 = objc_msgSend((id)swift_getObjCClassFromMetadata(v23), "entity");
  objc_msgSend(v24, "setEntity:", v25);

  objc_msgSend(v24, "setAffectedStores:", 0);
  objc_msgSend(v24, "setPredicate:", v22);

  v26 = sub_10001A630((uint64_t *)&unk_100839E80);
  v27 = swift_allocObject(v26, 64, 7);
  *(_OWORD *)(v27 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v27 + 56) = &type metadata for String;
  *(_QWORD *)(v27 + 32) = 0xD00000000000002FLL;
  *(_QWORD *)(v27 + 40) = 0x8000000100701930;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v24, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v29 = v99;
  v30 = v110;
  v31 = NSManagedObjectContext.fetch<A>(_:)(v24, v23);
  v95 = (uint64_t)v30;
  if (v30)
    goto LABEL_2;
  v32 = v31;
  v89 = v9;
  v108 = v16;
  v110 = v13;
  v103 = v31;
  if (v31 >> 62)
    goto LABEL_42;
  v33 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_5:
  v34 = v97;
  v35 = (uint64_t)v96;
  v36 = v107;
  v88 = v6;
  v93 = v24;
  if (v33)
  {
    v32 = v103;
    v104 = (char *)v33;
    v105 = v103 & 0xC000000000000001;
    swift_beginAccess(v97, v114, 0, 0);
    v6 = 0;
    v101 = v32 & 0xFFFFFFFFFFFFFF8;
    v102 = 0.0;
    v100 = v32 + 32;
    v37 = v98;
    while (1)
    {
      if (v105)
      {
        v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v103);
        v39 = __OFADD__(v6++, 1);
        if (v39)
          goto LABEL_39;
      }
      else
      {
        if (v6 >= *(_QWORD *)(v101 + 16))
          goto LABEL_40;
        v38 = *(id *)(v100 + 8 * v6);
        v39 = __OFADD__(v6++, 1);
        if (v39)
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          if (v32 < 0)
            v86 = v32;
          else
            v86 = v32 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v32);
          v33 = _CocoaArrayWrapper.endIndex.getter(v86);
          swift_bridgeObjectRelease();
          goto LABEL_5;
        }
      }
      v109 = v38;
      v40 = objc_msgSend(v38, "mostRecentTargetTemplateIdentifierByCurrentUser");
      if (!v40)
        break;
      v41 = v40;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v40);

      v42 = v111;
      v32 = *(_QWORD *)(v111 + 32);
      ((void (*)(uint64_t, char *, uint64_t))v32)(v35, v110, v36);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56))(v35, 0, 1, v36);
      v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
      v44 = v110;
      if (v43(v35, 1, v36) == 1)
        goto LABEL_8;
      ((void (*)(char *, uint64_t, uint64_t))v32)(v108, v35, v36);
      v45 = *v34;
      if (*v34 && *(_QWORD *)(v45 + 16))
      {
        v46 = *(_QWORD *)(v45 + 40);
        v47 = sub_100342670((unint64_t *)&qword_100843670, (uint64_t)&protocol conformance descriptor for UUID);
        swift_bridgeObjectRetain(v45);
        v48 = v108;
        v49 = dispatch thunk of Hashable._rawHashValue(seed:)(v46, v107, v47);
        v50 = -1 << *(_BYTE *)(v45 + 32);
        v51 = v49 & ~v50;
        if (((*(_QWORD *)(v45 + 56 + ((v51 >> 3) & 0xFFFFFFFFFFFFF8)) >> v51) & 1) != 0)
        {
          v106 = ~v50;
          v32 = *(_QWORD *)(v111 + 72);
          v52 = *(void (**)(char *, unint64_t, uint64_t))(v111 + 16);
          while (1)
          {
            v53 = v107;
            v52(v44, *(_QWORD *)(v45 + 48) + v32 * v51, v107);
            v54 = sub_100342670((unint64_t *)&qword_10083B380, (uint64_t)&protocol conformance descriptor for UUID);
            v55 = dispatch thunk of static Equatable.== infix(_:_:)(v44, v48, v53, v54);
            v56 = v44;
            v57 = v55;
            v58 = *(void (**)(char *, uint64_t))(v111 + 8);
            v58(v56, v53);
            if ((v57 & 1) != 0)
              break;
            v51 = (v51 + 1) & v106;
            v44 = v110;
            v48 = v108;
            if (((*(_QWORD *)(v45 + 56 + ((v51 >> 3) & 0xFFFFFFFFFFFFF8)) >> v51) & 1) == 0)
              goto LABEL_24;
          }

          v59 = swift_bridgeObjectRelease();
          v36 = v107;
          ((void (*)(char *, uint64_t, __n128))v58)(v108, v107, v59);
          v24 = v93;
          v37 = v98;
          v29 = v99;
          v34 = v97;
          v35 = (uint64_t)v96;
          goto LABEL_9;
        }
LABEL_24:
        swift_bridgeObjectRelease();
        v24 = v93;
        v37 = v98;
        v29 = v99;
        v34 = v97;
        v35 = (uint64_t)v96;
      }
      v32 = (uint64_t)v109;
      objc_msgSend(v109, "setMostRecentTargetTemplateIdentifierByCurrentUser:", 0);

      v36 = v107;
      (*(void (**)(char *, uint64_t))(v111 + 8))(v108, v107);
      v39 = __OFADD__((*(_QWORD *)&v102)++, 1);
      if (v39)
        goto LABEL_41;
LABEL_9:
      if ((char *)v6 == v104)
        goto LABEL_30;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v111 + 56))(v35, 1, 1, v36);
LABEL_8:

    sub_10000882C(v35, (uint64_t *)&unk_100839C80);
    goto LABEL_9;
  }
  v102 = 0.0;
  v37 = v98;
LABEL_30:
  v60 = objc_msgSend(v29, "hasChanges", swift_bridgeObjectRelease().n128_f64[0]);
  v61 = v94;
  if ((v60 & 1) != 0)
  {
    v112 = 0.0;
    v62 = objc_msgSend(v29, "save:", &v112);
    v63 = v112;
    if (!v62)
    {
      v83 = *(id *)&v112;
      v84 = _convertNSErrorToError(_:)(*(_QWORD *)&v63);

      v95 = v84;
      swift_willThrow(v85);
      goto LABEL_2;
    }
    v64 = *(id *)&v112;
  }
  if (qword_100837298 != -1)
    swift_once(&qword_100837298, sub_1003666F0);
  v65 = type metadata accessor for Logger(0);
  sub_10001AAA8(v65, (uint64_t)qword_100846C60);
  v66 = v92;
  v67 = v89;
  (*(void (**)(char *, uint64_t, uint64_t))(v92 + 16))(v89, v37, v61);
  v68 = v91;
  v69 = Logger.logObject.getter(v68);
  v70 = static os_log_type_t.default.getter(v69);
  if (!os_log_type_enabled(v69, v70))
  {

    (*(void (**)(char *, uint64_t))(v66 + 8))(v67, v61);
LABEL_2:

    return;
  }
  v71 = swift_slowAlloc(42, -1);
  v111 = swift_slowAlloc(64, -1);
  v113 = v111;
  *(_DWORD *)v71 = 136315906;
  v112 = v90;
  MetatypeMetadata = swift_getMetatypeMetadata(*(_QWORD *)&v90);
  v73 = String.init<A>(describing:)(&v112, MetatypeMetadata);
  v112 = COERCE_DOUBLE(sub_10001A820(v73, v74, &v113));
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113);
  swift_bridgeObjectRelease();
  *(_WORD *)(v71 + 12) = 2082;
  v75 = sub_1002AEF14();
  v112 = COERCE_DOUBLE(sub_10001A820((uint64_t)v75, v76, &v113));
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113);

  swift_bridgeObjectRelease();
  *(_WORD *)(v71 + 22) = 2050;
  v112 = v102;
  v77 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113);
  *(_WORD *)(v71 + 32) = 2050;
  v78 = v88;
  Date.init()(v77);
  v79 = Date.timeIntervalSince(_:)(v67);
  v80 = *(void (**)(unint64_t, uint64_t))(v66 + 8);
  v81 = v94;
  v80(v78, v94);
  v112 = v79;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113);
  v80((unint64_t)v67, v81);
  _os_log_impl((void *)&_mh_execute_header, v69, v70, "%s: Set '\\REMCDList.mostRecentTargetTemplateIdentifierByCurrentUser' of some shared lists to nil {store: %{public}s, count = %{public}ld, elapsedSeconds: %{public}f}", (uint8_t *)v71, 0x2Au);
  v82 = v111;
  swift_arrayDestroy(v111, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v82, -1, -1);
  swift_slowDealloc(v71, -1, -1);

}

id RDStoreControllerMigrator_MostRecentTargetTemplateIdentifierByCurrentUser.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerMigrator_MostRecentTargetTemplateIdentifierByCurrentUser();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for RDStoreControllerMigrator_MostRecentTargetTemplateIdentifierByCurrentUser()
{
  return objc_opt_self(_TtC7remindd73RDStoreControllerMigrator_MostRecentTargetTemplateIdentifierByCurrentUser);
}

id RDStoreControllerMigrator_MostRecentTargetTemplateIdentifierByCurrentUser.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerMigrator_MostRecentTargetTemplateIdentifierByCurrentUser();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100368F8C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_100368FB8()
{
  void **v0;

  sub_100366CEC(v0[2], v0[3], v0[4]);
}

uint64_t sub_100368FC4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

const char *sub_100368FD4()
{
  return "mostRecentTargetTemplateIdentifier";
}

uint64_t sub_100368FE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;

  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = _s10PredicatesOMa_0(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = _swiftEmptyArrayStorage;
  sub_1003697F4(v1, (uint64_t)v11);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
  KeyPath = swift_getKeyPath(&unk_1006B7228);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v4, v8, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  v13 = sub_1002E8714(KeyPath, (uint64_t)v4);
  v14 = swift_release(KeyPath);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v14);
  v16 = v20[2];
  v15 = v20[3];
  if (v16 >= v15 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1);
  v17 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v13);
  specialized Array._endMutation()(v17);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return sub_10000D2BC(v20);
}

uint64_t sub_100369198@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*a1, "publicLinkURLUUID");
  if (v3)
  {
    v4 = v3;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v3);

    v5 = type metadata accessor for UUID(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for UUID(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

void sub_10036921C(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  uint64_t v11;

  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10011D420(a1, (uint64_t)v6);
  v7 = *a2;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  objc_msgSend(v7, "setPublicLinkURLUUID:", isa);

}

void sub_1003692F8()
{
  sub_1001C1B0C(0, 6, 0);
  __asm { BR              X9 }
}

void sub_100369478(uint64_t a1, uint64_t a2, Class isa)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  Class v22;
  NSString v23;
  id v24;
  uint64_t v25;
  uint64_t v26;

  v6 = _s10PredicatesOMa_0(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v8, a1, v9);
  v10 = (void *)sub_100368FE8();
  v11 = type metadata accessor for REMCDPublicTemplate();
  v12 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v13 = objc_msgSend((id)swift_getObjCClassFromMetadata(v11), "entity");
  objc_msgSend(v12, "setEntity:", v13);

  objc_msgSend(v12, "setAffectedStores:", 0);
  objc_msgSend(v12, "setPredicate:", v10);

  if (isa)
  {
    sub_1001DFBD0((uint64_t)isa);
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v14 = swift_bridgeObjectRelease().n128_u64[0];
  }
  objc_msgSend(v12, "setPropertiesToFetch:", isa, v14);

  objc_msgSend(v12, "setFetchLimit:", 1);
  v15 = NSManagedObjectContext.fetch<A>(_:)(v12, v11);
  if (v3)
  {
    sub_1003697B8((uint64_t)v8);

    return;
  }
  v16 = v15;
  if ((unint64_t)v15 >> 62)
  {
    if (v15 < 0)
      v18 = v15;
    else
      v18 = v15 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v15);
    v19 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease();
    if (v19)
      goto LABEL_7;
LABEL_15:
    swift_bridgeObjectRelease();
    v20 = (void *)objc_opt_self(REMError);
    v21 = objc_allocWithZone((Class)REMObjectID);
    v22 = UUID._bridgeToObjectiveC()().super.isa;
    v23 = String._bridgeToObjectiveC()();
    v24 = objc_msgSend(v21, "initWithUUID:entityName:", v22, v23);

    objc_msgSend(v20, "noSuchObjectErrorWithObjectID:", v24);
    swift_willThrow(v25);

    sub_1003697B8((uint64_t)v8);
    return;
  }
  if (!*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_15;
LABEL_7:
  if ((v16 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0, v16);
    goto LABEL_10;
  }
  if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v17 = *(id *)(v16 + 32);
LABEL_10:
    swift_bridgeObjectRelease();
    sub_1003697B8((uint64_t)v8);

    return;
  }
  __break(1u);
}

uint64_t _s10PredicatesOMa_0(uint64_t a1)
{
  uint64_t result;

  result = qword_100846D40;
  if (!qword_100846D40)
    return swift_getSingletonMetadata(a1, &_s10PredicatesOMn_0);
  return result;
}

uint64_t sub_1003697B8(uint64_t a1)
{
  uint64_t v2;

  v2 = _s10PredicatesOMa_0(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1003697F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s10PredicatesOMa_0(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_100369840(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v5;
  void *v6;
  id v7;
  Class v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  id v13;
  _QWORD v15[3];
  _BYTE v16[8];

  if (qword_100837958 != -1)
    swift_once(&qword_100837958, sub_1005B83A8);
  v5 = (id)qword_100872288;
  v6 = (void *)swift_retain();
  v7 = sub_1003011F8(v6);
  swift_release(v5);
  if (v7)
  {
    sub_1003692F8();
    sub_100369478(a1, a2, v8);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_getErrorValue(v2, v16, v15);
      v10 = Error.isREMError(withErrorCode:)(-3000, v15[1], v15[2]);
      if ((v10 & 1) != 0)
      {
        v11 = type metadata accessor for REMCDPublicTemplate();
        v5 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v11)), "initWithContext:", a2);
        objc_msgSend(v5, "setAccount:", v7);
        isa = UUID._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v5, "setPublicLinkURLUUID:", isa);

        swift_errorRelease(v2);
      }
      else
      {
        swift_willThrow(v10);
      }

    }
    else
    {
      v5 = v9;

      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v13 = objc_msgSend((id)objc_opt_self(REMError), "noPrimaryActiveCloudKitAccountError");
    swift_willThrow(v13);
  }
  return v5;
}

uint64_t *sub_1003699E0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v7);
  }
  else
  {
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  return a1;
}

uint64_t sub_100369A50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100369A8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, a2, a3, v6);
}

uint64_t sub_100369AD8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8);
    swift_initEnumMetadataSingleCase(a1, 256, v4 + 64);
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a1 - 8) + 84) = *(_DWORD *)(v4 + 84);
  }
  return result;
}

uint64_t type metadata accessor for RDSuggestedAttributeCache(uint64_t a1)
{
  uint64_t result;

  result = qword_100846D68;
  if (!qword_100846D68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDSuggestedAttributeCache);
  return result;
}

uint64_t sub_100369B70(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + qword_100871E60);
}

uint64_t sub_100369BAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100846D50);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100846D50);
  if (qword_100837630 != -1)
    swift_once(&qword_100837630, sub_1004A1854);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872070);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100369C3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v27 = *(_QWORD *)(v0 - 8);
  v28 = v0;
  __chkstk_darwin(v0);
  v26 = (char *)&v24 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS.QoSClass(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D30A4();
  v12 = type metadata accessor for RDSuggestedAttributeCache(0);
  v29 = (_QWORD *)v12;
  v13 = sub_10001A630(&qword_100846DD8);
  v14 = String.init<A>(reflecting:)(&v29, v13);
  v24 = v15;
  v25 = v14;
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v8);
  v16 = static OS_dispatch_queue.global(qos:)(v11);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  static DispatchQoS.unspecified.getter(v17);
  v29 = _swiftEmptyArrayStorage;
  v18 = sub_10009FC50((unint64_t *)&qword_10083A990, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v19 = sub_10001A630((uint64_t *)&unk_10083DBD0);
  v20 = sub_1001BAB58();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v19, v20, v2, v18);
  v21 = v26;
  (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v26, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v28);
  v22 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v25, v24, v7, v4, v21, v16);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  result = REMCache.init(cacheQueue:countLimit:)(v22, 1);
  qword_100871E58 = result;
  return result;
}

uint64_t sub_100369EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  return REMCache.init(cacheQueue:countLimit:)(a1, a2);
}

uint64_t sub_100369EE8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  int v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __n128 v40;
  unint64_t v41;
  os_log_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  id v61;
  uint64_t v63;
  os_log_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t);
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84[2];

  v80 = a6;
  v78 = a5;
  v79 = a8;
  v77 = a7;
  v82 = a1;
  v11 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v75 = v13;
  v76 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v63 - v15;
  v17 = type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v71 = v19;
  v72 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (char *)&v63 - v21;
  if (qword_1008372A0 != -1)
    swift_once(&qword_1008372A0, sub_100369BAC);
  v23 = type metadata accessor for Logger(0);
  sub_10001AAA8(v23, (uint64_t)qword_100846D50);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v73 = a3;
  v70 = v24;
  v24(v22, a3, v17);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v74 = a4;
  v25(v16, a4, v11);
  swift_bridgeObjectRetain_n(a2, 2);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter(v27);
  v29 = v28;
  v30 = os_log_type_enabled(v27, v28);
  v68 = v17;
  v69 = v12;
  v81 = a2;
  if (v30)
  {
    v31 = swift_slowAlloc(32, -1);
    v63 = v18;
    v32 = v31;
    v66 = swift_slowAlloc(96, -1);
    v84[0] = v66;
    *(_DWORD *)v32 = 136446722;
    v65 = v29;
    v64 = v27;
    v33 = REMSuggestedAttributesHarvester.CachedSuggestionType.rawValue.getter();
    v83 = sub_10001A820(v33, v34, v84);
    v35 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84);
    v36 = swift_bridgeObjectRelease();
    v37 = (*(uint64_t (**)(char *, uint64_t, __n128))(v35 + 8))(v22, v17, v36);
    *(_WORD *)(v32 + 12) = 2082;
    v38 = REMSuggestedAttributeOutput.Pipeline.rawValue.getter(v37);
    v83 = sub_10001A820(v38, v39, v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84);
    v40 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, __n128))(v12 + 8))(v16, v11, v40);
    *(_WORD *)(v32 + 22) = 2080;
    v41 = v81;
    swift_bridgeObjectRetain(v81);
    v83 = sub_10001A820(v82, v41, v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84);
    swift_bridgeObjectRelease_n(v41, 3);
    v42 = v64;
    _os_log_impl((void *)&_mh_execute_header, v64, (os_log_type_t)v65, "RDSuggestedAttributeCache: Recording %{public}s suggestion from %{public}s with value: %s", (uint8_t *)v32, 0x20u);
    v43 = v66;
    swift_arrayDestroy(v66, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v22, v17);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);

    swift_bridgeObjectRelease_n(a2, 2);
    v35 = v18;
  }
  v67 = v11;
  v44 = v72;
  v45 = v68;
  v70(v72, v73, v68);
  v46 = v76;
  v25(v76, v74, v11);
  v47 = *(unsigned __int8 *)(v35 + 80);
  v48 = (v47 + 24) & ~v47;
  v49 = (v71 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
  v50 = v69;
  v51 = *(unsigned __int8 *)(v69 + 80);
  v52 = (v51 + v49 + 16) & ~v51;
  v53 = (v75 + v52 + 7) & 0xFFFFFFFFFFFFFFF8;
  v54 = swift_allocObject(&unk_1007F0618, v53 + 16, v47 | v51 | 7);
  v55 = v35;
  v56 = v78;
  *(_QWORD *)(v54 + 16) = v78;
  (*(void (**)(uint64_t, char *, uint64_t))(v55 + 32))(v54 + v48, v44, v45);
  v57 = (_QWORD *)(v54 + v49);
  v58 = v81;
  *v57 = v82;
  v57[1] = v58;
  (*(void (**)(uint64_t, char *, uint64_t))(v50 + 32))(v54 + v52, v46, v67);
  v59 = (_QWORD *)(v54 + v53);
  v60 = v79;
  *v59 = v77;
  v59[1] = v60;
  swift_bridgeObjectRetain(v58);
  v61 = v56;
  swift_retain();
  dispatch thunk of REMCache.performReadAndWrite(_:operations:)(v80, sub_10036B25C, v54);
  return swift_release(v54);
}

uint64_t sub_10036A38C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  __n128 v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t (*v56)(uint64_t);
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t inited;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  unint64_t v70;
  char v71;
  unint64_t v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v77;
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  __n128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v95)(uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99[56];
  unint64_t v100;
  char v101[64];

  v91 = a6;
  v92 = a5;
  v97 = a4;
  v13 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  *(_QWORD *)&v88 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v86 - v17;
  v19 = type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  *(_QWORD *)&v90 = (char *)&v86 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = a2;
  v94 = a1;
  v22 = REMCacheContext.object(forKey:)(a2);
  v95 = a7;
  v96 = a8;
  if (v22)
  {
    v23 = v22;
    v24 = a3;
    REMStructWrapper.value.getter(&v100);
    swift_release(v23);
    v25 = v100;
    v26 = *(_QWORD *)(v100 + 16);
    v27 = v19;
    v89 = v20;
    v28 = v92;
    v29 = v13;
    if (v26)
    {
      v30 = v27;
      swift_bridgeObjectRetain(v100);
      v31 = sub_1002C6E44(a3);
      if ((v32 & 1) != 0)
      {
        v86 = a3;
        v33 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v31);
        swift_bridgeObjectRetain(v33);
        v34 = swift_bridgeObjectRelease();
        if (*(_QWORD *)(v33 + 16))
        {
          swift_bridgeObjectRetain(v28);
          swift_bridgeObjectRetain(v33);
          v35 = sub_10001A6DC(v97, v28);
          v36 = v88;
          if ((v37 & 1) != 0)
          {
            v38 = *(void **)(*(_QWORD *)(v33 + 56) + 8 * v35);
            swift_bridgeObjectRetain(v38);
          }
          else
          {
            v38 = &_swiftEmptySetSingleton;
          }
          swift_bridgeObjectRelease();
          v34 = swift_bridgeObjectRelease();
          v74 = v91;
        }
        else
        {
          v38 = &_swiftEmptySetSingleton;
          v74 = v91;
          v36 = v88;
        }
        v100 = (unint64_t)v38;
        (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v14 + 16))(v36, v74, v29, v34);
        sub_1002DCA88((uint64_t)v18, v36);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v29);
        v75 = v100;
        swift_bridgeObjectRetain(v28);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v33);
        v98 = v33;
        sub_10028D5C8(v75, v97, v28, isUniquelyReferenced_nonNull_native);
        v77 = v98;
        swift_bridgeObjectRelease();
        v78 = swift_bridgeObjectRelease();
        v79 = v89;
        v80 = v90;
        (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v89 + 16))(v90, v86, v30, v78);
        v81 = swift_isUniquelyReferenced_nonNull_native(v25);
        v98 = v25;
        sub_10028D5DC(v77, v80, v81);
        v72 = v98;
        v82 = swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t, __n128))(v79 + 8))(v80, v30, v82);
        goto LABEL_14;
      }
      swift_bridgeObjectRelease();
      v27 = v30;
    }
    v87 = v27;
    v60 = v89;
    v61 = v90;
    (*(void (**)(_QWORD, uint64_t))(v89 + 16))(v90, v24);
    v62 = sub_10001A630(&qword_100846DC0);
    inited = swift_initStackObject(v62, v99);
    v88 = xmmword_1006A3C00;
    *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
    *(_QWORD *)(inited + 32) = v97;
    *(_QWORD *)(inited + 40) = v28;
    v64 = sub_10001A630(&qword_100846DC8);
    v65 = *(unsigned __int8 *)(v14 + 80);
    v66 = (v65 + 32) & ~v65;
    v67 = swift_allocObject(v64, v66 + *(_QWORD *)(v14 + 72), v65 | 7);
    *(_OWORD *)(v67 + 16) = v88;
    v68 = v67 + v66;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v68, v91, v29);
    swift_bridgeObjectRetain(v28);
    v69 = sub_1002EAC08(v67);
    swift_setDeallocating(v67);
    swift_arrayDestroy(v68, 1, v29);
    swift_deallocClassInstance(v67, 32, 7);
    *(_QWORD *)(inited + 48) = v69;
    v70 = sub_1002B11E4(inited);
    v71 = swift_isUniquelyReferenced_nonNull_native(v25);
    v100 = v25;
    sub_10028D5DC(v70, v61, v71);
    v72 = v100;
    v73 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, __n128))(v60 + 8))(v61, v87, v73);
LABEL_14:
    v100 = v72;
    v83 = sub_10001A630(&qword_100846DD0);
    swift_allocObject(v83, *(unsigned int *)(v83 + 48), *(unsigned __int16 *)(v83 + 52));
    v59 = REMStructWrapper.init(_:)(&v100);
    v56 = v95;
    goto LABEL_15;
  }
  v39 = sub_10001A630(&qword_100846DB8);
  v40 = sub_10001A630(&qword_1008445A8);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = *(_QWORD *)(v41 + 72);
  v43 = *(unsigned __int8 *)(v41 + 80);
  v44 = (v43 + 32) & ~v43;
  v45 = swift_allocObject(v39, v44 + v42, v43 | 7);
  v90 = xmmword_1006A3C00;
  *(_OWORD *)(v45 + 16) = xmmword_1006A3C00;
  v46 = v45 + v44;
  v89 = *(int *)(v40 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v45 + v44, a3, v19);
  v47 = sub_10001A630(&qword_100846DC0);
  v48 = swift_initStackObject(v47, v101);
  *(_OWORD *)(v48 + 16) = v90;
  v49 = v92;
  *(_QWORD *)(v48 + 32) = v97;
  *(_QWORD *)(v48 + 40) = v49;
  v50 = sub_10001A630(&qword_100846DC8);
  v51 = *(unsigned __int8 *)(v14 + 80);
  v52 = (v51 + 32) & ~v51;
  v53 = swift_allocObject(v50, v52 + *(_QWORD *)(v14 + 72), v51 | 7);
  *(_OWORD *)(v53 + 16) = v90;
  v54 = v53 + v52;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v54, v91, v13);
  swift_bridgeObjectRetain(v49);
  v55 = sub_1002EAC08(v53);
  swift_setDeallocating(v53);
  v56 = v95;
  swift_arrayDestroy(v54, 1, v13);
  swift_deallocClassInstance(v53, 32, 7);
  *(_QWORD *)(v48 + 48) = v55;
  v57 = sub_1002B11E4(v48);
  *(_QWORD *)(v46 + v89) = v57;
  v100 = sub_1002B11F0(v45);
  v58 = sub_10001A630(&qword_100846DD0);
  swift_allocObject(v58, *(unsigned int *)(v58 + 48), *(unsigned __int16 *)(v58 + 52));
  v59 = REMStructWrapper.init(_:)(&v100);
LABEL_15:
  v84 = v94;
  REMCacheContext.setObject(_:forKey:)(v59, v93);
  swift_release(v59);
  return v56(v84);
}

void sub_10036A9B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint8_t *v23;
  uint8_t *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __n128 v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  int64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  int64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  char *v84;
  uint64_t v85;
  int64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v3 = type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v84 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v87 = (uint64_t)&v70 - v7;
  v8 = sub_10001A630(&qword_100846DE0);
  __chkstk_darwin(v8);
  v10 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v70 - v12;
  v85 = a2;
  v15 = (void *)REMSuggestedAttributeInput.reminderID.getter(v14);
  v16 = REMCacheContext.object(forKey:)(v15);

  if (!v16)
    return;
  REMStructWrapper.value.getter(&v88);
  swift_release(v16);
  v17 = v88;
  if (qword_1008372A0 != -1)
LABEL_65:
    swift_once(&qword_1008372A0, sub_100369BAC);
  v18 = type metadata accessor for Logger(0);
  sub_10001AAA8(v18, (uint64_t)qword_100846D50);
  swift_bridgeObjectRetain(v17);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  v22 = os_log_type_enabled(v20, v21);
  v82 = v17;
  if (v22)
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v23 = 134217984;
    v88 = *(_QWORD *)(v82 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "RDSuggestedAttributeCache: Posting suggestion metric for %ld suggestions", v23, 0xCu);
    v24 = v23;
    v17 = v82;
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {

    v25 = swift_bridgeObjectRelease();
  }
  v86 = 0;
  v26 = *(_QWORD *)(v17 + 64);
  v78 = v17 + 64;
  v27 = 1 << *(_BYTE *)(v17 + 32);
  v28 = -1;
  v83 = enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.list(_:);
  if (v27 < 64)
    v28 = ~(-1 << v27);
  v29 = v28 & v26;
  v81 = enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.recurrence(_:);
  v79 = enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.dueDayOfWeek(_:);
  v77 = enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.nlpDueDate(_:);
  v76 = enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.location(_:);
  v75 = enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.vehicle(_:);
  v74 = enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.flagged(_:);
  v73 = enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.priority(_:);
  v72 = enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.tag(_:);
  v80 = (unint64_t)(v27 + 63) >> 6;
  v70 = v80 - 1;
  v30 = (uint64_t *)&unk_100846DE8;
  v71 = enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.contact(_:);
  while (1)
  {
    if (v29)
    {
      v36 = __clz(__rbit64(v29));
      v29 &= v29 - 1;
      v37 = v36 | (v86 << 6);
LABEL_20:
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v4 + 16))(v10, *(_QWORD *)(v17 + 48) + *(_QWORD *)(v4 + 72) * v37, v3, v25);
      v38 = *(_QWORD *)(v17 + 56);
      v39 = sub_10001A630(v30);
      v40 = *(_QWORD *)(v38 + 8 * v37);
      *(_QWORD *)&v10[*(int *)(v39 + 48)] = v40;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v10, 0, 1, v39);
      swift_bridgeObjectRetain(v40);
      goto LABEL_39;
    }
    v41 = v86 + 1;
    if (__OFADD__(v86, 1))
    {
      __break(1u);
      goto LABEL_65;
    }
    if (v41 < v80)
    {
      v42 = *(_QWORD *)(v78 + 8 * v41);
      if (v42)
        goto LABEL_24;
      v43 = v86 + 2;
      ++v86;
      if (v41 + 1 < v80)
      {
        v42 = *(_QWORD *)(v78 + 8 * v43);
        if (v42)
          goto LABEL_27;
        v86 = v41 + 1;
        if (v41 + 2 < v80)
        {
          v42 = *(_QWORD *)(v78 + 8 * (v41 + 2));
          if (v42)
          {
            v41 += 2;
            goto LABEL_24;
          }
          v43 = v41 + 3;
          v86 = v41 + 2;
          if (v41 + 3 < v80)
            break;
        }
      }
    }
LABEL_38:
    v44 = sub_10001A630(v30);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v10, 1, 1, v44);
    v29 = 0;
LABEL_39:
    sub_10036B2F4((uint64_t)v10, (uint64_t)v13);
    v45 = sub_10001A630(v30);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 48))(v13, 1, v45) == 1)
    {
      swift_release(v17);
      return;
    }
    v46 = v30;
    v47 = *(_QWORD *)&v13[*(int *)(v45 + 48)];
    v48 = v87;
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v87, v13, v3);
    v49 = v84;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v84, v48, v3);
    v50 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v49, v3);
    if ((_DWORD)v50 == v83)
    {
      v51 = REMSuggestedAttributeInput.list.getter(v50);
      v52 = REMSuggestedList.description.getter(v51);
      v54 = v53;
      v55 = v51;
      v32 = v87;
      swift_release(v55);
      sub_10036B33C(v32, v47, v52, v54, 0);
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((_DWORD)v50 == v81)
      {
        v56 = REMSuggestedAttributeInput.recurrence.getter();
LABEL_45:
        v32 = v87;
        sub_10036B928(v87, v47, v56, 0);
        goto LABEL_16;
      }
      if ((_DWORD)v50 == v79)
      {
        v57 = REMSuggestedAttributeInput.dueDayOfWeek.getter(v50);
        v58 = REMSuggestedWeekDay.description.getter();
        goto LABEL_48;
      }
      if ((_DWORD)v50 == v77)
      {
        v63 = REMSuggestedAttributeInput.dueDateTime.getter();
        goto LABEL_51;
      }
      if ((_DWORD)v50 == v76 || (_DWORD)v50 == v75)
      {
        v57 = REMSuggestedAttributeInput.location.getter(v50);
        v58 = dispatch thunk of ClassificationLabel.description.getter(v57);
LABEL_48:
        v60 = v58;
        v61 = v59;
        v62 = v57;
        v32 = v87;
        swift_release(v62);
        sub_10036B33C(v32, v47, v60, v61, 0);
        v17 = v82;
LABEL_16:
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
      if ((_DWORD)v50 == v74)
      {
        v31 = REMSuggestedAttributeInput.flagged.getter();
        v32 = v87;
        if ((v31 & 1) != 0)
          v33 = 1702195828;
        else
          v33 = 0x65736C6166;
        if ((v31 & 1) != 0)
          v34 = 0xE400000000000000;
        else
          v34 = 0xE500000000000000;
LABEL_15:
        sub_10036B33C(v32, v47, v33, v34, 0);
        goto LABEL_16;
      }
      if ((_DWORD)v50 == v73)
      {
        v88 = REMSuggestedAttributeInput.priority.getter();
        v65 = sub_10036BF10();
        v63 = BinaryInteger.description.getter(&type metadata for UInt, v65);
LABEL_51:
        v32 = v87;
        v33 = v63;
        v34 = v64;
        goto LABEL_15;
      }
      if ((_DWORD)v50 == v72)
      {
        v56 = REMSuggestedAttributeInput.tags.getter();
        goto LABEL_45;
      }
      if ((_DWORD)v50 != v71)
        goto LABEL_67;
      v66 = REMSuggestedAttributeInput.contact.getter(v50);
      v67 = dispatch thunk of ClassificationLabel.description.getter(v66);
      v69 = v68;
      swift_release(v66);
      v32 = v87;
      sub_10036B33C(v87, v47, v67, v69, 0);
      swift_bridgeObjectRelease();
    }
    v17 = v82;
LABEL_17:
    v35 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, __n128))(v4 + 8))(v32, v3, v35);
    v30 = v46;
  }
  v42 = *(_QWORD *)(v78 + 8 * v43);
  if (v42)
  {
LABEL_27:
    v41 = v43;
LABEL_24:
    v29 = (v42 - 1) & v42;
    v37 = __clz(__rbit64(v42)) + (v41 << 6);
    v86 = v41;
    goto LABEL_20;
  }
  while (1)
  {
    v41 = v43 + 1;
    if (__OFADD__(v43, 1))
      break;
    if (v41 >= v80)
    {
      v86 = v70;
      goto LABEL_38;
    }
    v42 = *(_QWORD *)(v78 + 8 * v41);
    ++v43;
    if (v42)
      goto LABEL_24;
  }
  __break(1u);
LABEL_67:
  _diagnoseUnexpectedEnumCase<A>(type:)(v3, v3);
  __break(1u);
}

uint64_t sub_10036B140()
{
  uint64_t v0;

  v0 = REMCache.deinit();
  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t sub_10036B15C()
{
  return type metadata accessor for RDSuggestedAttributeCache(0);
}

uint64_t sub_10036B164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v1 = type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + 16) & ~v8;
  v12 = v3 | v8 | 7;
  v10 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 8));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_release(*(_QWORD *)(v0 + v10 + 8));
  return swift_deallocObject(v0, v10 + 16, v12);
}

uint64_t sub_10036B25C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(type metadata accessor for REMSuggestedAttributeOutput.Pipeline(0) - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v1 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_10036A38C(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + v5 + 8), v1 + v7, *(uint64_t (**)(uint64_t))v8, *(_QWORD *)(v8 + 8));
}

uint64_t sub_10036B2F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_100846DE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10036B33C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  double (*__ptr32 *v5)();
  uint64_t v6;
  double (*__ptr32 *v8)();
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  __n128 v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t inited;
  NSString v33;
  uint64_t v34;
  uint64_t v35;
  NSString v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v45;
  unsigned __int32 v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[112];

  v5 = (double (*__ptr32 *)())a4;
  v6 = a3;
  v8 = &off_1006A3000;
  v9 = (char *)&type metadata for Any;
  if ((a5 & 1) != 0)
  {
    if (qword_1008372A0 != -1)
LABEL_41:
      swift_once(&qword_1008372A0, sub_100369BAC);
    v10 = type metadata accessor for Logger(0);
    sub_10001AAA8(v10, (uint64_t)qword_100846D50);
    swift_bridgeObjectRetain_n(v5, 2);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v53 = v15;
      *(_DWORD *)v14 = *((_QWORD *)v8 + 369);
      swift_bridgeObjectRetain(a4);
      v52 = sub_10001A820(a3, a4, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "RDSuggestedAttributeCache: Comparing cached suggestions with true value {%s} from the commited reminder", v14, 0xCu);
      swift_arrayDestroy(v15, 1, v9 + 8);
      v16 = v15;
      v6 = a3;
      swift_slowDealloc(v16, -1, -1);
      v17 = v14;
      v5 = (double (*__ptr32 *)())a4;
      swift_slowDealloc(v17, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v5, 2);
    }
  }
  v47 = a2 + 64;
  v18 = 1 << *(_BYTE *)(a2 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & *(_QWORD *)(a2 + 64);
  v48 = (unint64_t)(v18 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v21 = 0;
  v22.n128_u64[1] = 6;
  v22.n128_u64[0] = *((_QWORD *)v8 + 369);
  v46 = v22.n128_u32[0];
  v45 = v9 + 8;
  while (1)
  {
    if (v20)
    {
      v23 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_27;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    if (v25 >= v48)
      return swift_release(a2);
    v26 = *(_QWORD *)(v47 + 8 * v25);
    ++v21;
    if (!v26)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v48)
        return swift_release(a2);
      v26 = *(_QWORD *)(v47 + 8 * v21);
      if (!v26)
      {
        v21 = v25 + 2;
        if (v25 + 2 >= v48)
          return swift_release(a2);
        v26 = *(_QWORD *)(v47 + 8 * v21);
        if (!v26)
          break;
      }
    }
LABEL_26:
    v20 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v21 << 6);
LABEL_27:
    v28 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v24);
    v29 = *v28;
    v8 = (double (*__ptr32 *)())v28[1];
    v9 = *(char **)(*(_QWORD *)(a2 + 56) + 8 * v24);
    if (*v28 != v6 || v8 != v5)
      _stringCompareWithSmolCheck(_:_:expecting:)(v6, v5, *v28, v28[1], 0);
    type metadata accessor for Analytics(0, v22);
    v31 = sub_10001A630((uint64_t *)&unk_10083A260);
    inited = swift_initStackObject(v31, v54);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C20;
    *(_QWORD *)(inited + 32) = 0x74636572726F63;
    *(_QWORD *)(inited + 40) = 0xE700000000000000;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    *(NSNumber *)(inited + 48) = Bool._bridgeToObjectiveC()();
    *(_QWORD *)(inited + 56) = 0x7475626972747461;
    *(_QWORD *)(inited + 64) = 0xE900000000000065;
    REMSuggestedAttributesHarvester.CachedSuggestionType.rawValue.getter();
    v33 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 72) = v33;
    *(_QWORD *)(inited + 80) = 0x656372756F73;
    *(_QWORD *)(inited + 88) = 0xE600000000000000;
    v34 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline(0);
    v35 = sub_10009FC50(&qword_100844578, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributeOutput.Pipeline, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributeOutput.Pipeline);
    Set.description.getter(v9, v34, v35);
    swift_bridgeObjectRelease();
    v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 96) = v36;
    v37 = sub_1002AF09C(inited);
    static Analytics.postEvent(_:payload:duration:)(0xD000000000000023, 0x80000001007019B0, v37, 0, 1);
    swift_bridgeObjectRelease();
    if ((a5 & 1) != 0)
    {
      if (qword_1008372A0 != -1)
        swift_once(&qword_1008372A0, sub_100369BAC);
      v38 = type metadata accessor for Logger(0);
      sub_10001AAA8(v38, (uint64_t)qword_100846D50);
      swift_bridgeObjectRetain(v8);
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.default.getter(v40);
      if (os_log_type_enabled(v40, v41))
      {
        v42 = swift_slowAlloc(12, -1);
        v43 = swift_slowAlloc(32, -1);
        v53 = v43;
        *(_DWORD *)v42 = v46;
        swift_bridgeObjectRetain(v8);
        *(_QWORD *)(v42 + 4) = sub_10001A820(v29, (unint64_t)v8, &v53);
        swift_bridgeObjectRelease_n(v8, 3);
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "RDSuggestedAttributeCache: Sugestion record {%s}", (uint8_t *)v42, 0xCu);
        swift_arrayDestroy(v43, 1, v45);
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v42, -1, -1);

      }
      else
      {

        v22 = swift_bridgeObjectRelease_n(v8, 2);
      }
    }
    else
    {
      v22 = swift_bridgeObjectRelease();
    }
    v6 = a3;
    v5 = (double (*__ptr32 *)())a4;
  }
  v27 = v25 + 3;
  if (v27 < v48)
  {
    v26 = *(_QWORD *)(v47 + 8 * v27);
    if (!v26)
    {
      while (1)
      {
        v21 = v27 + 1;
        if (__OFADD__(v27, 1))
          goto LABEL_40;
        if (v21 >= v48)
          return swift_release(a2);
        v26 = *(_QWORD *)(v47 + 8 * v21);
        ++v27;
        if (v26)
          goto LABEL_26;
      }
    }
    v21 = v27;
    goto LABEL_26;
  }
  return swift_release(a2);
}

uint64_t sub_10036B928(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  double (*__ptr32 *v6)();
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t inited;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  NSString v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  char *v41;
  int v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[112];

  v4 = a3;
  v6 = &off_1006A3000;
  v7 = (char *)&type metadata for Any;
  if ((a4 & 1) != 0)
  {
    if (qword_1008372A0 != -1)
LABEL_36:
      swift_once(&qword_1008372A0, sub_100369BAC);
    v8 = type metadata accessor for Logger(0);
    sub_10001AAA8(v8, (uint64_t)qword_100846D50);
    swift_bridgeObjectRetain_n(v4, 2);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v48 = v13;
      *(_DWORD *)v12 = *((_QWORD *)v6 + 369);
      v14 = Set.description.getter(a3, &type metadata for String, &protocol witness table for String);
      v47 = sub_10001A820(v14, v15, &v48);
      v4 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDSuggestedAttributeCache: Comparing cached suggestions with true values {%s} from the commited reminder", v12, 0xCu);
      swift_arrayDestroy(v13, 1, v7 + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v4, 2);
    }
  }
  v43 = a2 + 64;
  v16 = 1 << *(_BYTE *)(a2 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(a2 + 64);
  v44 = (unint64_t)(v16 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v19 = 0;
  v42 = *((_QWORD *)v6 + 369);
  v41 = v7 + 8;
  while (v18)
  {
    v20 = __clz(__rbit64(v18));
    v18 &= v18 - 1;
    v21 = v20 | (v19 << 6);
LABEL_26:
    v25 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v21);
    v27 = *v25;
    v26 = v25[1];
    v6 = *(double (*__ptr32 **)())(*(_QWORD *)(a2 + 56) + 8 * v21);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v6);
    sub_1001B2278(v27, v26, v4);
    type metadata accessor for Analytics(0, v28);
    v29 = sub_10001A630((uint64_t *)&unk_10083A260);
    inited = swift_initStackObject(v29, v49);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C20;
    *(_QWORD *)(inited + 32) = 0x74636572726F63;
    *(_QWORD *)(inited + 40) = 0xE700000000000000;
    *(NSNumber *)(inited + 48) = Bool._bridgeToObjectiveC()();
    *(_QWORD *)(inited + 56) = 0x7475626972747461;
    *(_QWORD *)(inited + 64) = 0xE900000000000065;
    REMSuggestedAttributesHarvester.CachedSuggestionType.rawValue.getter();
    v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 72) = v31;
    *(_QWORD *)(inited + 80) = 0x656372756F73;
    *(_QWORD *)(inited + 88) = 0xE600000000000000;
    v32 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline(0);
    v33 = sub_10009FC50(&qword_100844578, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributeOutput.Pipeline, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributeOutput.Pipeline);
    Set.description.getter(v6, v32, v33);
    swift_bridgeObjectRelease();
    v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 96) = v34;
    v7 = (char *)sub_1002AF09C(inited);
    static Analytics.postEvent(_:payload:duration:)(0xD000000000000023, 0x80000001007019B0, v7, 0, 1);
    swift_bridgeObjectRelease();
    if ((a4 & 1) != 0)
    {
      if (qword_1008372A0 != -1)
        swift_once(&qword_1008372A0, sub_100369BAC);
      v35 = type metadata accessor for Logger(0);
      sub_10001AAA8(v35, (uint64_t)qword_100846D50);
      swift_bridgeObjectRetain(v26);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.default.getter(v37);
      if (os_log_type_enabled(v37, v38))
      {
        v7 = (char *)swift_slowAlloc(12, -1);
        v39 = swift_slowAlloc(32, -1);
        v48 = v39;
        *(_DWORD *)v7 = v42;
        swift_bridgeObjectRetain(v26);
        *(_QWORD *)(v7 + 4) = sub_10001A820(v27, v26, &v48);
        swift_bridgeObjectRelease_n(v26, 3);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "RDSuggestedAttributeCache: Sugestion record {%s}", (uint8_t *)v7, 0xCu);
        swift_arrayDestroy(v39, 1, v41);
        swift_slowDealloc(v39, -1, -1);
        swift_slowDealloc(v7, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v26, 2);
      }
      v4 = a3;
    }
    else
    {
      swift_bridgeObjectRelease();
      v4 = a3;
    }
  }
  v22 = v19 + 1;
  if (__OFADD__(v19, 1))
  {
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v22 >= v44)
    return swift_release(a2);
  v23 = *(_QWORD *)(v43 + 8 * v22);
  ++v19;
  if (v23)
    goto LABEL_25;
  v19 = v22 + 1;
  if (v22 + 1 >= v44)
    return swift_release(a2);
  v23 = *(_QWORD *)(v43 + 8 * v19);
  if (v23)
    goto LABEL_25;
  v19 = v22 + 2;
  if (v22 + 2 >= v44)
    return swift_release(a2);
  v23 = *(_QWORD *)(v43 + 8 * v19);
  if (v23)
  {
LABEL_25:
    v18 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v19 << 6);
    goto LABEL_26;
  }
  v24 = v22 + 3;
  if (v24 < v44)
  {
    v23 = *(_QWORD *)(v43 + 8 * v24);
    if (!v23)
    {
      while (1)
      {
        v19 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_35;
        if (v19 >= v44)
          return swift_release(a2);
        v23 = *(_QWORD *)(v43 + 8 * v19);
        ++v24;
        if (v23)
          goto LABEL_25;
      }
    }
    v19 = v24;
    goto LABEL_25;
  }
  return swift_release(a2);
}

unint64_t sub_10036BF10()
{
  unint64_t result;

  result = qword_100846DF0;
  if (!qword_100846DF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt, &type metadata for UInt);
    atomic_store(result, (unint64_t *)&qword_100846DF0);
  }
  return result;
}

uint64_t sub_10036BF54(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_100846E38, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.Invocation, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributesHarvester.Invocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10036BF90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100846DF8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100846DF8);
  if (qword_100837630 != -1)
    swift_once(&qword_100837630, sub_1004A1854);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872070);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10036C020()
{
  Swift::Int v0;
  uint64_t result;

  v0 = sub_1002E6C54((uint64_t)&off_1007DB378);
  result = swift_arrayDestroy(&unk_1007DB398, 4, &type metadata for String);
  qword_100846E10 = v0;
  return result;
}

void sub_10036C068(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint8_t *v31;
  uint8_t *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t KeyPath;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(char *, _QWORD, _QWORD *);
  char *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, _QWORD *);
  unint64_t v95;
  char v96;
  int v97;
  __n128 v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  int v107;
  uint64_t v108;
  BOOL v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  char *v126;
  char v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  char *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  __int128 v151[2];
  char v152;
  uint64_t v153;
  BOOL v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  char v162;
  char *v163;

  v4 = v3;
  v142 = a3;
  v7 = sub_10001A630(&qword_100846F28);
  __chkstk_darwin(v7);
  v141 = (char *)&v129 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v140 = (char *)&v129 - v10;
  __chkstk_darwin(v11);
  v139 = (char *)&v129 - v12;
  v138 = (_QWORD *)type metadata accessor for REMSuggestedAttributeOutput.Pipeline(0);
  v131 = *(v138 - 1);
  __chkstk_darwin(v138);
  v133 = (char *)&v129 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v132 = (char *)&v129 - v15;
  v137 = sub_10001A630(&qword_100846F30);
  v136 = *(_QWORD *)(v137 - 8);
  v16 = __chkstk_darwin(v137);
  v135 = (char *)&v129 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for REMSuggestedAttributesHarvester.Request(0, v16);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v129 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10001A630(&qword_100846F38);
  v147 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v163 = (char *)&v129 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_10001A630(&qword_100844618);
  v143 = *(_QWORD **)(v144 - 8);
  __chkstk_darwin(v144);
  v145 = (char *)&v129 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v148 = (uint64_t)&v129 - v26;
  sub_1001B84C8(&v156);
  if (qword_1008372B0 != -1)
    swift_once(&qword_1008372B0, sub_10036BF90);
  v27 = type metadata accessor for Logger(0);
  v146 = sub_10001AAA8(v27, (uint64_t)qword_100846DF8);
  v28 = Logger.logObject.getter(v146);
  v29 = static os_log_type_t.info.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(2, -1);
    v130 = a1;
    v31 = v30;
    *(_WORD *)v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "loaded model in invocation", v30, 2u);
    v32 = v31;
    v4 = v3;
    a1 = v130;
    swift_slowDealloc(v32, -1, -1);
  }

  v33 = _swiftEmptyArrayStorage;
  if ((REMSuggestedAttributesHarvester.Request.allowLocalOverrides.getter() & 1) != 0)
  {
    v34 = (*(uint64_t (**)(void))(a1
                               + OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_configurationSource
                               + 48))();
    v35 = sub_10009FC50(&qword_100846F70, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.Request, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributesHarvester.Request);
    Partial<A>.init(dictionary:)(v34, v18, v35);
    if (v4)
    {
LABEL_13:
      sub_1001BA410(&v156);
      return;
    }
    v130 = 0;
    v33 = (_QWORD *)sub_1002C87B0(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    v37 = v33[2];
    v36 = v33[3];
    if (v37 >= v36 >> 1)
      v33 = (_QWORD *)sub_1002C87B0(v36 > 1, v37 + 1, 1, (unint64_t)v33);
    v33[2] = v37 + 1;
    ((void (*)(unint64_t, uint64_t, uint64_t))v143[4])((unint64_t)v33+ ((*((unsigned __int8 *)v143 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v143 + 80))+ v143[9] * v37, v148, v144);
    v4 = v130;
  }
  if ((REMSuggestedAttributesHarvester.Request.allowCloudOverrides.getter() & 1) != 0)
  {
    v38 = (*(uint64_t (**)(void))(a1
                               + OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_configurationSource
                               + 32))();
    v39 = sub_10009FC50(&qword_100846F70, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.Request, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributesHarvester.Request);
    Partial<A>.init(dictionary:)(v38, v18, v39);
    if (v4)
    {
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    v40 = v21;
    if ((swift_isUniquelyReferenced_nonNull_native(v33) & 1) == 0)
      v33 = (_QWORD *)sub_1002C87B0(0, v33[2] + 1, 1, (unint64_t)v33);
    v42 = v33[2];
    v41 = v33[3];
    if (v42 >= v41 >> 1)
      v33 = (_QWORD *)sub_1002C87B0(v41 > 1, v42 + 1, 1, (unint64_t)v33);
    v33[2] = v42 + 1;
    ((void (*)(unint64_t, char *, uint64_t))v143[4])((unint64_t)v33+ ((*((unsigned __int8 *)v143 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v143 + 80))+ v143[9] * v42, v145, v144);
    v21 = v40;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, a2, v18);
  v43 = swift_bridgeObjectRetain(v33);
  v44 = (uint64_t)v163;
  PartialOverride.init(full:partials:)(v21, v33, v18, v43);
  v45 = v4;
  v46 = sub_100370770(v44);
  if (v4)
    v47 = v4;
  else
    v47 = (uint64_t)v46;
  v130 = 0;
  PartialOverride.subscript.getter(v151, KeyPath, v22, &protocol witness table for Bool);
  v49 = swift_release(KeyPath);
  if (LOBYTE(v151[0]) == 1)
  {
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.default.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v52 = 0;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "SuggestedAttributes harvesting is enabled on iOS: YES", v52, 2u);
      swift_slowDealloc(v52, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    v59 = swift_getKeyPath(L"8\x1B");
    v60 = v135;
    PartialOverride.subscript.getter(v59, v22);
    swift_release(v59);
    v61 = v137;
    PartialOverride._full.getter(v137);
    v62 = (*(uint64_t (**)(char *, uint64_t))(v136 + 8))(v60, v61);
    v63 = *(_QWORD *)&v151[0];
    v64 = REMSuggestedAttributeInput.title.getter(v62);
    v66 = v65;
    v67 = swift_getKeyPath(&unk_1006B73F0);
    PartialOverride.subscript.getter(v151, v67, v22, &protocol witness table for String);
    swift_release(v67);
    LOBYTE(v64) = sub_100370978(v64, v66, *(uint64_t *)&v151[0], *((uint64_t *)&v151[0] + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v148 = v47;
    if ((v64 & 1) == 0)
    {
      *(_QWORD *)&v151[0] = v47;
      BYTE8(v151[0]) = v4 != 0;
      v70 = sub_10001A630(&qword_100846F48);
      v71 = v139;
      Result.eraseToCodableError()(v70);
      *(_QWORD *)&v151[0] = _swiftEmptyArrayStorage;
      BYTE8(v151[0]) = 0;
      v72 = v140;
      Result.eraseToCodableError()(v70);
      *(_QWORD *)&v151[0] = _swiftEmptyArrayStorage;
      BYTE8(v151[0]) = 0;
      v73 = v141;
      Result.eraseToCodableError()(v70);
      REMSuggestedAttributesHarvester.Response.init(heuristicResult:embeddingResult:coreBehaviorResult:)(v71, v72, v73);
      swift_release(v63);
      sub_1003721E8(v148, v45 != 0, (uint64_t (*)(void))&_swift_bridgeObjectRelease);
      sub_1001BA410(&v156);
      (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v44, v22);
      return;
    }
    sub_100008868((uint64_t)&v156, (uint64_t)v151, (uint64_t *)&unk_10083F190);
    v137 = v63;
    if (v152 == 1)
    {
      v68 = *(_QWORD *)&v151[0];
      v149 = *(_QWORD *)&v151[0];
      v69 = sub_10001A630((uint64_t *)&unk_10083AA20);
      swift_willThrowTypedImpl(&v149, v69, &protocol self-conformance witness table for Error);
      swift_errorRelease(v68);
      v146 = 0;
      v151[0] = 0uLL;
    }
    else
    {
      sub_10001BCA8(v151, (uint64_t)&v153);
      v74 = sub_10000A388(&v153, v155);
      v75 = REMSuggestedAttributeInput.title.getter(v74);
      v76 = dispatch thunk of REMTitleEmbedding.vector(for:)(v75);
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v153);
      v151[0] = 0uLL;
      v146 = v76;
      if (v76)
      {
        v77 = v159;
        if ((v160 & 1) != 0)
        {
          v153 = v159;
          v78 = sub_10001A630((uint64_t *)&unk_10083AA20);
          swift_willThrowTypedImpl(&v153, v78, &protocol self-conformance witness table for Error);
          v79 = 0;
          v80 = 0;
        }
        else
        {
          v81 = v146;
          swift_retain();
          sub_1001B9DB8(v77, 0);
          v79 = RDIntentClusterModel.predict(for:)(v81);
          v80 = v82;
          swift_release(v81);
          sub_1003721E8(v77, 0, (uint64_t (*)(void))&_swift_release);
        }
        *(_QWORD *)&v151[0] = v79;
        *((_QWORD *)&v151[0] + 1) = v80;
      }
      else
      {
        v146 = 0;
      }
    }
    v83 = v131;
    v84 = swift_getKeyPath(&unk_1006B7420);
    v85 = sub_100372138();
    v145 = (char *)v22;
    PartialOverride.subscript.getter(&v153, v84, v22, v85);
    swift_release(v84);
    v86 = v153;
    v87 = *(uint64_t (**)(char *, _QWORD, _QWORD *))(v83 + 104);
    v88 = v132;
    v89 = v138;
    v90 = v87(v132, enum case for REMSuggestedAttributeOutput.Pipeline.kNN(_:), v138);
    v91 = REMSuggestedAttributeOutput.Pipeline.rawValue.getter(v90);
    v93 = v92;
    v94 = *(void (**)(char *, _QWORD *))(v83 + 8);
    v94(v88, v89);
    if (*(_QWORD *)(v86 + 16) && (v95 = sub_10001A6DC(v91, v93), (v96 & 1) != 0))
      v97 = *(unsigned __int8 *)(*(_QWORD *)(v86 + 56) + v95);
    else
      v97 = 1;
    v98 = swift_bridgeObjectRelease();
    v99 = v133;
    v100 = v138;
    v101 = ((uint64_t (*)(char *, _QWORD, _QWORD *, __n128))v87)(v133, enum case for REMSuggestedAttributeOutput.Pipeline.coreBehavior(_:), v138, v98);
    v102 = REMSuggestedAttributeOutput.Pipeline.rawValue.getter(v101);
    v104 = v103;
    v94(v99, v100);
    if (*(_QWORD *)(v86 + 16) && (v105 = sub_10001A6DC(v102, v104), (v106 & 1) != 0))
    {
      v107 = *(unsigned __int8 *)(*(_QWORD *)(v86 + 56) + v105);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v108 = v137;
      if ((v97 & 1) == 0)
      {
        LODWORD(v136) = 0;
        v109 = 0;
        v110 = _swiftEmptyArrayStorage;
        v138 = _swiftEmptyArrayStorage;
        if (!v107)
          goto LABEL_55;
        goto LABEL_54;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v108 = v137;
      if (!v97)
      {
        LODWORD(v136) = 0;
        v138 = _swiftEmptyArrayStorage;
        goto LABEL_54;
      }
      LOBYTE(v107) = 1;
    }
    v149 = v157;
    v150 = v158;
    __chkstk_darwin(v157);
    v111 = v146;
    *(&v129 - 4) = v134;
    *(&v129 - 3) = v111;
    *(&v129 - 2) = (uint64_t)v163;
    sub_1001B9DB8(v112, v113);
    v114 = sub_10001A630(&qword_100846F68);
    v115 = sub_10001A630(&qword_100846F60);
    Result<>.tryMap<A>(transform:)(&v153, sub_1003721B8, &v129 - 6, v114, v115);
    sub_1003721E8(v149, v150, (uint64_t (*)(void))&_swift_release);
    v138 = (_QWORD *)v153;
    LODWORD(v136) = v154;
    if ((v107 & 1) == 0)
    {
      v109 = 0;
      v110 = _swiftEmptyArrayStorage;
LABEL_55:
      LODWORD(v144) = v4 != 0;
      v153 = v148;
      v154 = v4 != 0;
      v143 = v110;
      v120 = v109;
      v121 = sub_10001A630(&qword_100846F48);
      v122 = v139;
      Result.eraseToCodableError()(v121);
      v123 = (uint64_t)v138;
      v153 = (uint64_t)v138;
      v124 = v136;
      v154 = v136;
      v125 = v108;
      v126 = v140;
      Result.eraseToCodableError()(v121);
      v153 = (uint64_t)v110;
      v127 = v120;
      v154 = v120;
      v128 = v141;
      Result.eraseToCodableError()(v121);
      REMSuggestedAttributesHarvester.Response.init(heuristicResult:embeddingResult:coreBehaviorResult:)(v122, v126, v128);
      swift_release(v125);
      sub_1003721E8((uint64_t)v143, v127, (uint64_t (*)(void))&_swift_bridgeObjectRelease);
      sub_1003721E8(v123, v124, (uint64_t (*)(void))&_swift_bridgeObjectRelease);
      sub_1003721E8(v148, v144, (uint64_t (*)(void))&_swift_bridgeObjectRelease);
      swift_release(v146);
      sub_1001BA410(&v156);
      (*(void (**)(char *, char *))(v147 + 8))(v163, v145);
      swift_bridgeObjectRelease();
      return;
    }
LABEL_54:
    v149 = v161;
    v150 = v162;
    __chkstk_darwin(v161);
    *(&v129 - 4) = v134;
    *(&v129 - 3) = v108;
    *(&v129 - 2) = (uint64_t)v151;
    *(&v129 - 1) = (uint64_t)v163;
    sub_1001B9DB8(v116, v117);
    v118 = sub_10001A630(&qword_10083F1D8);
    v119 = sub_10001A630(&qword_100846F60);
    Result<>.tryMap<A>(transform:)(&v153, sub_10037219C, &v129 - 6, v118, v119);
    sub_1003721E8(v149, v150, (uint64_t (*)(void))&_swift_release);
    v110 = (_QWORD *)v153;
    v109 = v154;
    goto LABEL_55;
  }
  swift_bridgeObjectRelease();
  v54 = Logger.logObject.getter(v53);
  v55 = static os_log_type_t.default.getter(v54);
  if (os_log_type_enabled(v54, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v56 = 0;
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "SuggestedAttributes harvesting is enabled on iOS: NO", v56, 2u);
    swift_slowDealloc(v56, -1, -1);
  }

  v57 = sub_10037207C();
  v58 = swift_allocError(&type metadata for SuggestedAttributesDisabledError, v57, 0, 0);
  swift_willThrow(v58);
  sub_1003721E8(v47, v45 != 0, (uint64_t (*)(void))&_swift_bridgeObjectRelease);
  sub_1001BA410(&v156);
  (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v44, v22);
}

void sub_10036D018(unint64_t a1@<X2>, uint64_t *a2@<X3>, uint64_t a3@<X4>, char **a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  _QWORD v11[4];

  v7 = *a2;
  v8 = a2[1];
  swift_bridgeObjectRetain(v8);
  v9 = sub_1004296A8(a1, v7, v8, 0, 0);
  v11[2] = a3;
  v10 = sub_100351CDC((void (*)(_QWORD *))sub_1003726AC, (uint64_t)v11, (uint64_t)v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *a4 = v10;
}

void sub_10036D0C0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[9];
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v23 = a2;
  v20 = sub_10001A630(&qword_100846F78);
  v19[7] = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v19[8] = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType(0);
  v27 = *(_QWORD *)(v4 - 8);
  v28 = v4;
  __chkstk_darwin(v4);
  v21 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline(0);
  v24 = *(_QWORD *)(v6 - 8);
  v25 = v6;
  __chkstk_darwin(v6);
  v22 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for REMSuggestedAttributeOutput.Source(0);
  v19[1] = *(_QWORD *)(v8 - 8);
  v19[2] = v8;
  v9 = __chkstk_darwin(v8);
  v10 = type metadata accessor for REMSuggestedAttributesHarvester.Request(0, v9);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[4] = *(_QWORD *)(a1 + 24);
  v26 = *(_QWORD *)(a1 + 32);
  v14 = *(unsigned __int8 *)(a1 + 48);
  v15 = sub_10001A630(&qword_100846F38);
  v16 = PartialOverride._full.getter(v15);
  v17 = REMSuggestedAttributesHarvester.Request.reminder.getter(v16);
  v18 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  REMSuggestedAttributeInput.reminderID.getter(v18);
  swift_release(v17);
  __asm { BR              X9 }
}

uint64_t sub_10036D28C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)(v3 - 184) = v2;
  v4 = enum case for REMSuggestedAttributeOutput.Pipeline.coreBehavior(_:);
  v5 = *(_QWORD *)(v3 - 112);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 120) + 104);
  v7 = *(_QWORD *)(v3 - 136);
  v6(v7, enum case for REMSuggestedAttributeOutput.Pipeline.coreBehavior(_:), v5);
  swift_retain();
  v8 = *(_QWORD *)(v3 - 104);
  v9 = swift_bridgeObjectRetain(v8);
  v10 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, __n128))REMSuggestedAttributeOutput.Source.init(pipeline:predictor:))(v7, *(_QWORD *)(v3 - 192), v8, v9);
  if (qword_1008372A8 != -1)
    v10 = swift_once(&qword_1008372A8, sub_100369C3C);
  *(_QWORD *)(v3 - 104) = qword_100871E58;
  *(_QWORD *)(v3 - 200) = v1;
  v11 = REMSuggestedList.listIdentifier.getter(v10);
  v13 = v12;
  v14 = *(_QWORD *)(v3 - 144);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v3 - 96) + 104))(v14, enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.list(_:), *(_QWORD *)(v3 - 88));
  v6(v7, v4, v5);
  v16 = *(_QWORD *)(v3 - 168);
  v15 = *(_QWORD *)(v3 - 160);
  v17 = *(_QWORD *)(v3 - 152);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 104))(v15, enum case for REMCache.ExecutionMode.asynchronously<A, B>(_:), v17);
  v18 = *(void **)(v3 - 184);
  sub_100369EE8(v11, v13, v14, v7, v18, v15, (uint64_t)REMCDList.cleanUpAfterLocalObjectMerge(), 0);

  v19 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, __n128))(v16 + 8))(v15, v17, v19);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 120) + 8))(v7, *(_QWORD *)(v3 - 112));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 96) + 8))(v14, *(_QWORD *)(v3 - 88));
  v20 = *(int *)(sub_10001A630(&qword_100841D48) + 48);
  v21 = *(_QWORD *)(v3 - 128);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v3 - 216) + 32))(v21, v0, *(_QWORD *)(v3 - 208));
  *(_QWORD *)(v21 + v20) = *(_QWORD *)(v3 - 200);
  v22 = enum case for REMSuggestedAttributeOutput.list(_:);
  v24 = type metadata accessor for REMSuggestedAttributeOutput(0, v23);
  v25 = *(_QWORD *)(v24 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 104))(v21, v22, v24);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
}

uint64_t sub_10036DDE4(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_100846E60, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.MentionsExtractionInvocation, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributesHarvester.MentionsExtractionInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_10036DE20(id *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id v5;
  id v6;
  void *v7;
  double v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  id v23;

  v5 = *a1;
  v6 = objc_msgSend(*a1, "objectID");
  v7 = sub_1002B1C2C(v6, a2);

  if (v7)
  {
    v9 = objc_msgSend(v7, "givenName");
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

    v13 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000) == 0)
      v13 = v10 & 0xFFFFFFFFFFFFLL;
    if (v13)
    {
      v14 = sub_10001A630((uint64_t *)&unk_10083A340);
      v15 = (_QWORD *)swift_allocObject(v14, 48, 7);
      *((_OWORD *)v15 + 1) = xmmword_1006A3C00;
      v15[4] = v10;
      v15[5] = v12;
      goto LABEL_12;
    }
    *(_QWORD *)&v8 = swift_bridgeObjectRelease().n128_u64[0];
  }
  v16 = objc_msgSend(v5, "firstName", v8);
  if (v16 || (v16 = objc_msgSend(v5, "displayName")) != 0)
  {
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v19 = v18;

    swift_bridgeObjectRetain(v19);
    v15 = sub_1002C8224(0, 1, 1, _swiftEmptyArrayStorage);
    v21 = v15[2];
    v20 = v15[3];
    if (v21 >= v20 >> 1)
      v15 = sub_1002C8224((_QWORD *)(v20 > 1), v21 + 1, 1, v15);
    v15[2] = v21 + 1;
    v22 = &v15[2 * v21];
    v22[4] = v17;
    v22[5] = v19;
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = _swiftEmptyArrayStorage;
  }
LABEL_12:

  if (v15[2])
  {
    v23 = v5;
  }
  else
  {
    swift_bridgeObjectRelease();
    v15 = 0;
    v5 = 0;
  }
  *a3 = v15;
  a3[1] = v5;
}

uint64_t sub_10036E004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  _QWORD *v13;
  void *v14;
  NSString v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[9];
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  uint64_t v48;

  v4 = _swiftEmptyArrayStorage;
  if (!*(_QWORD *)(a1 + 16))
    return (uint64_t)v4;
  v6 = *v3;
  v46 = sub_10036ED28(a2, a3);
  v8 = v7;
  v10 = v9;
  v11 = objc_allocWithZone((Class)NSRegularExpression);
  v12 = sub_1002793E4(0x4029775C213C3F28, 0xED00002A5D405E5BLL, 0);
  v44 = v6;
  v45 = a1;
  v43 = 0;
  v13 = _swiftEmptyArrayStorage;
  if (!v12)
  {
LABEL_20:
    v48 = (uint64_t)v13;
    __chkstk_darwin(v12);
    v39[2] = v46;
    v39[3] = v8;
    v39[4] = v10;
    v39[5] = v45;
    v39[6] = v44;
    v36 = sub_10001A630(&qword_100846EF8);
    v37 = sub_10001A630(&qword_100846F00);
    v38 = sub_1000A5F84(&qword_100846F08, &qword_100846EF8, (uint64_t)&protocol conformance descriptor for [A]);
    Sequence.firstMap<A>(_:)(v47, sub_100371E50, v39, v36, v37, v38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v47[0])
      return v47[0];
    return (uint64_t)v4;
  }
  v42 = v10;
  v14 = v12;
  v15 = String._bridgeToObjectiveC()();
  v47[1] = v8;
  v48 = 15;
  v47[0] = v46;
  v41 = v8;
  swift_bridgeObjectRetain(v8);
  v16 = sub_10001A630(&qword_100846F10);
  v17 = sub_1000A5F84(&qword_100846F18, &qword_100846F10, (uint64_t)&protocol conformance descriptor for PartialRangeFrom<A>);
  v18 = sub_1000E525C();
  v19 = _NSRange.init<A, B>(_:in:)(&v48, v47, v16, &type metadata for String, v17, v18);
  v40 = v14;
  v21 = objc_msgSend(v14, "matchesInString:options:range:", v15, 0, v19, v20);

  v22 = sub_1000151B0(0, &qword_100846F20, NSTextCheckingResult_ptr);
  v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

  if (!((unint64_t)v23 >> 62))
  {
    v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v24)
      goto LABEL_5;
LABEL_18:
    swift_bridgeObjectRelease();

LABEL_19:
    v8 = v41;
    v10 = v42;
    goto LABEL_20;
  }
  if (v23 < 0)
    v35 = v23;
  else
    v35 = v23 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v23);
  v24 = _CocoaArrayWrapper.endIndex.getter(v35);
  swift_bridgeObjectRelease();
  if (!v24)
    goto LABEL_18;
LABEL_5:
  v47[0] = _swiftEmptyArrayStorage;
  result = sub_1001C22B8(0, v24 & ~(v24 >> 63), 0);
  if ((v24 & 0x8000000000000000) == 0)
  {
    v26 = 0;
    v13 = (_QWORD *)v47[0];
    do
    {
      if ((v23 & 0xC000000000000001) != 0)
        v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v26, v23);
      else
        v27 = *(id *)(v23 + 8 * v26 + 32);
      v28 = v27;
      v29 = objc_msgSend(v27, "range");
      v31 = v30;

      v47[0] = v13;
      v33 = v13[2];
      v32 = v13[3];
      if (v33 >= v32 >> 1)
      {
        sub_1001C22B8(v32 > 1, v33 + 1, 1);
        v13 = (_QWORD *)v47[0];
      }
      ++v26;
      v13[2] = v33 + 1;
      v34 = &v13[2 * v33];
      v34[4] = v29;
      v34[5] = v31;
    }
    while (v24 != v26);
    swift_bridgeObjectRelease();

    v4 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t sub_10036E3BC(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_100846E88, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.FeedbackInvocation, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributesHarvester.FeedbackInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *sub_10036E3F8@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  char *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *result;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  _QWORD *v56;
  int v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  int64_t v63;
  int v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  _OWORD v71[5];
  uint64_t v72;
  char v73;
  int v74;
  unsigned __int8 v75;

  v54 = a2;
  v3 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v66 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630(&qword_100846EE0);
  __chkstk_darwin(v6);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v49 - v10;
  v12 = type metadata accessor for REMSuggestedAttributeOutput.Source(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1001B84C8(v71);
  v75 = 0;
  v58 = a1;
  v17 = REMSuggestedAttributesHarvester.FeedbackRequest.source.getter(v16);
  v18 = REMSuggestedAttributeOutput.Source.predictors.getter(v17);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v19 = 0;
  v20 = *(_QWORD *)(v18 + 64);
  v61 = v18 + 64;
  v21 = 1 << *(_BYTE *)(v18 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v20;
  v24 = (unint64_t)(v21 + 63) >> 6;
  v74 = enum case for REMSuggestedAttributeOutput.Pipeline.nlQueryParser(_:);
  v64 = enum case for REMSuggestedAttributeOutput.Pipeline.kNN(_:);
  v62 = enum case for REMSuggestedAttributeOutput.Pipeline.coreBehavior(_:);
  v57 = enum case for REMSuggestedAttributeOutput.Pipeline.heuristic(_:);
  v55 = enum case for REMSuggestedAttributeOutput.Pipeline.anchoredBubble(_:);
  v53 = enum case for REMSuggestedAttributeOutput.Pipeline.spotlight(_:);
  v50 = v24 - 1;
  v63 = v24;
  v52 = v24 - 5;
  v65 = v18;
  v51 = v18 + 104;
  v25 = (uint64_t *)&unk_100846EE8;
  v56 = &type metadata for () + 1;
  while (1)
  {
    if (v23)
    {
      v30 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      v31 = v19;
      v32 = v30 | (v19 << 6);
LABEL_8:
      v33 = v65;
      (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v8, *(_QWORD *)(v65 + 48) + *(_QWORD *)(v4 + 72) * v32, v3);
      v34 = *(_QWORD *)(v33 + 56);
      v35 = sub_10001A630(v25);
      v36 = *(_QWORD *)(v34 + 8 * v32);
      *(_QWORD *)&v8[*(int *)(v35 + 48)] = v36;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v8, 0, 1, v35);
      swift_bridgeObjectRetain(v36);
      v19 = v31;
      goto LABEL_15;
    }
    v37 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
LABEL_40:
      swift_once(&qword_100836F00, sub_1001B9C44);
      goto LABEL_37;
    }
    if (v37 >= v63)
    {
      v39 = v19;
    }
    else
    {
      v38 = *(_QWORD *)(v61 + 8 * v37);
      if (v38)
        goto LABEL_12;
      v39 = v19 + 1;
      if ((uint64_t)(v19 + 2) < v63)
      {
        v38 = *(_QWORD *)(v61 + 8 * (v19 + 2));
        if (v38)
        {
          v37 = v19 + 2;
LABEL_12:
          v23 = (v38 - 1) & v38;
          v32 = __clz(__rbit64(v38)) + (v37 << 6);
          v31 = v37;
          goto LABEL_8;
        }
        v39 = v19 + 2;
        if ((uint64_t)(v19 + 3) < v63)
        {
          v38 = *(_QWORD *)(v61 + 8 * (v19 + 3));
          if (v38)
          {
            v37 = v19 + 3;
            goto LABEL_12;
          }
          v37 = v19 + 4;
          v39 = v19 + 3;
          if ((uint64_t)(v19 + 4) < v63)
          {
            v38 = *(_QWORD *)(v61 + 8 * v37);
            if (v38)
              goto LABEL_12;
            while (v52 != v19)
            {
              v38 = *(_QWORD *)(v51 + 8 * v19++);
              if (v38)
              {
                v37 = v19 + 4;
                goto LABEL_12;
              }
            }
            v39 = v50;
          }
        }
      }
    }
    v40 = sub_10001A630(v25);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v8, 1, 1, v40);
    v23 = 0;
    v19 = v39;
LABEL_15:
    sub_10036EC5C((uint64_t)v8, (uint64_t)v11);
    v41 = sub_10001A630(v25);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v11, 1, v41) == 1)
      break;
    v42 = v25;
    v43 = *(_QWORD *)&v11[*(int *)(v41 + 48)];
    v44 = v66;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v66, v11, v3);
    v45 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v44, v3);
    if (v45 != v74 && v45 != v64)
    {
      if (v45 == v62)
      {
        v59 = &v49;
        v67 = v72;
        v68 = v73;
        __chkstk_darwin(v72);
        v60 = v19;
        v26 = v58;
        *(&v49 - 4) = v43;
        *(&v49 - 3) = v26;
        *(&v49 - 2) = (uint64_t)&v75;
        sub_1001B9DB8(v27, v28);
        v29 = sub_10001A630(&qword_10083F1D8);
        v19 = v60;
        Result<>.tryMap<A>(transform:)(&v69, sub_10036ECA4, &v49 - 6, v29, v56);
        sub_1003721E8(v67, v68, (uint64_t (*)(void))&_swift_release);
        sub_1000D0278(v69, v70);
      }
      else if (v45 != v57 && v45 != v55 && v45 != v53)
      {
        result = (_QWORD *)_diagnoseUnexpectedEnumCase<A>(type:)(v3, v3);
        __break(1u);
        return result;
      }
    }
    swift_bridgeObjectRelease();
    v25 = v42;
  }
  swift_release(v65);
  v4 = v75;
  if (v75 != 1)
    goto LABEL_38;
  if (qword_100836F00 != -1)
    goto LABEL_40;
LABEL_37:
  v46 = sub_10001A630((uint64_t *)&unk_10083F1A8);
  v47 = sub_1000A5F84(&qword_100841CA0, (uint64_t *)&unk_10083F1A8, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  Subject<>.send()(v46, v47);
LABEL_38:
  REMSuggestedAttributesHarvester.BooleanResponse.init(result:)(v4);
  return sub_1001BA410(v71);
}

void sub_10036EA28(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  __n128 v15;
  double v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  int64_t v21;

  v6 = 1 << *(_BYTE *)(a2 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a2 + 56);
  v21 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v9 = 0;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v17 >= v21)
      goto LABEL_21;
    v18 = *(_QWORD *)(v20 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v21)
        goto LABEL_21;
      v18 = *(_QWORD *)(v20 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v21)
          goto LABEL_21;
        v18 = *(_QWORD *)(v20 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_20:
    v8 = (v18 - 1) & v18;
    v11 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_5:
    v12 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v11);
    v13 = *v12;
    v14 = v12[1];
    v15 = swift_bridgeObjectRetain(v14);
    v16 = REMSuggestedAttributesHarvester.FeedbackRequest.feedbackFactor.getter(v15);
    sub_10042A49C(v13, v14, v16);
    swift_bridgeObjectRelease();
    *a4 = 1;
  }
  v19 = v17 + 3;
  if (v19 >= v21)
  {
LABEL_21:
    swift_release(a2);
    return;
  }
  v18 = *(_QWORD *)(v20 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_20;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v21)
      goto LABEL_21;
    v18 = *(_QWORD *)(v20 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
}

uint64_t sub_10036EBE4(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_100846EB0, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.PostSuggestionAnalyticsInvocation, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributesHarvester.PostSuggestionAnalyticsInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10036EC20(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_100846ED8, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.RecordSuggestionInvocation, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributesHarvester.RecordSuggestionInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10036EC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_100846EE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10036ECA4(uint64_t a1)
{
  uint64_t v1;

  sub_10036EA28(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE **)(v1 + 32));
}

void sub_10036ECC0(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4[2];

  v2 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = (_QWORD *)sub_1001D614C(v2);
  v3 = v2[2];
  v4[0] = (uint64_t)(v2 + 4);
  v4[1] = v3;
  sub_10036F7FC(v4);
  *a1 = v2;
}

uint64_t sub_10036ED28(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  NSString v30;
  NSString v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  uint64_t v36;

  v4 = objc_allocWithZone((Class)NSRegularExpression);
  v5 = sub_1002793E4(2847580, 0xE300000000000000, 0);
  v6 = v5;
  if (!v5)
  {
    swift_bridgeObjectRetain(a2);
    sub_10036F694((uint64_t)_swiftEmptyArrayStorage);
    return a1;
  }
  v35[1] = a2;
  v36 = 15;
  v35[0] = a1;
  swift_bridgeObjectRetain(a2);
  v7 = sub_10001A630(&qword_100846F10);
  v8 = sub_1000A5F84(&qword_100846F18, &qword_100846F10, (uint64_t)&protocol conformance descriptor for PartialRangeFrom<A>);
  v9 = sub_1000E525C();
  v10 = _NSRange.init<A, B>(_:in:)(&v36, v35, v7, &type metadata for String, v8, v9);
  v12 = v11;
  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend(v6, "matchesInString:options:range:", v13, 0, v10, v12);

  v15 = sub_1000151B0(0, &qword_100846F20, NSTextCheckingResult_ptr);
  v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);

  if (!((unint64_t)v16 >> 62))
  {
    v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v17)
      goto LABEL_6;
LABEL_19:
    swift_bridgeObjectRelease();
    v20 = _swiftEmptyArrayStorage;
LABEL_20:
    v30 = String._bridgeToObjectiveC()();
    v31 = String._bridgeToObjectiveC()();
    v32 = objc_msgSend(v6, "stringByReplacingMatchesInString:options:range:withTemplate:", v30, 0, v10, v12, v31);

    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    sub_10036F694((uint64_t)v20);

    return a1;
  }
  if (v16 < 0)
    v29 = v16;
  else
    v29 = v16 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v16);
  v17 = _CocoaArrayWrapper.endIndex.getter(v29);
  swift_bridgeObjectRelease();
  if (!v17)
    goto LABEL_19;
LABEL_6:
  v33 = v12;
  v34 = v10;
  v35[0] = _swiftEmptyArrayStorage;
  result = sub_1001C22B8(0, v17 & ~(v17 >> 63), 0);
  if ((v17 & 0x8000000000000000) == 0)
  {
    v19 = 0;
    v20 = (_QWORD *)v35[0];
    do
    {
      if ((v16 & 0xC000000000000001) != 0)
        v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v16);
      else
        v21 = *(id *)(v16 + 8 * v19 + 32);
      v22 = v21;
      v23 = objc_msgSend(v21, "range");
      v25 = v24;

      v35[0] = v20;
      v27 = v20[2];
      v26 = v20[3];
      if (v27 >= v26 >> 1)
      {
        sub_1001C22B8(v26 > 1, v27 + 1, 1);
        v20 = (_QWORD *)v35[0];
      }
      ++v19;
      v20[2] = v27 + 1;
      v28 = &v20[2 * v27];
      v28[4] = v23;
      v28[5] = v25;
    }
    while (v17 != v19);
    swift_bridgeObjectRelease();
    v10 = v34;
    v12 = v33;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_10036F060(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  _QWORD *v12;
  id *v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  _QWORD *v17;

  v9 = result;
  if (a2 != 1)
  {
    if (a2 > 1)
    {
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRetain(a5);
      v12 = sub_100371E8C(a6, a3, a4, a5, v9, a2, a7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v12[2])
        return (uint64_t)v12;
      swift_bridgeObjectRelease();
    }
    return 0;
  }
  v10 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
    goto LABEL_20;
  }
  if (v10 < result)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v10 == result)
  {
LABEL_8:
    v11 = *(_QWORD *)(a6 + 16);
    v12 = _swiftEmptyArrayStorage;
    if (v11)
    {
      sub_1001C2308(0, v11, 0);
      v12 = _swiftEmptyArrayStorage;
      v13 = (id *)(a6 + 40);
      do
      {
        v14 = _swiftEmptyArrayStorage[2];
        v15 = _swiftEmptyArrayStorage[3];
        v16 = *v13;
        if (v14 >= v15 >> 1)
          sub_1001C2308(v15 > 1, v14 + 1, 1);
        _swiftEmptyArrayStorage[2] = v14 + 1;
        v17 = &_swiftEmptyArrayStorage[3 * v14];
        v17[4] = v16;
        v17[5] = v9;
        v17[6] = 1;
        v13 += 2;
        --v11;
      }
      while (v11);
    }
    return (uint64_t)v12;
  }
  if (v10 > result)
  {
    if (*(_QWORD *)(a5 + 16))
      sub_1002C6A08(result);
    goto LABEL_8;
  }
LABEL_21:
  __break(1u);
  return result;
}

int64_t sub_10036F214(int64_t result, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  int64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  BOOL v13;
  int64_t v14;

  v3 = result + a2;
  if (__OFADD__(result, a2))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v4 = result;
  if (v3 < result)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v3 == result)
    return v4;
  if (v3 <= result)
    goto LABEL_19;
  v7 = 0;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = 1;
  v10 = result;
  while (1)
  {
    if (v8)
    {
      result = sub_1002C6A08(v10);
      if ((v11 & 1) != 0)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * result);
        v13 = __OFADD__(v7, v12);
        v7 += v12;
        if (v13)
        {
          __break(1u);
          goto LABEL_17;
        }
      }
    }
    if (a2 == v9)
      break;
    v14 = v4 + v9++;
    v10 = v14 + v7;
    if (__OFADD__(v14, v7))
    {
      __break(1u);
      break;
    }
  }
  if (__OFSUB__(v10, v4))
    goto LABEL_20;
  if (!__OFADD__(v10 - v4, 1))
    return v4;
LABEL_21:
  __break(1u);
  return result;
}

void *sub_10036F2E8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *result;
  id v15;
  _QWORD v16[9];
  int64_t v17[2];
  char v18;

  v16[7] = a8;
  v16[8] = a1;
  v16[2] = a3;
  v16[3] = a4;
  v16[4] = a5;
  v16[5] = a6;
  v16[6] = a7;
  swift_bridgeObjectRetain(a1);
  v10 = sub_10001A630((uint64_t *)&unk_10083AE10);
  type metadata accessor for _NSRange(0);
  v12 = v11;
  v13 = sub_1000A5F84((unint64_t *)&unk_1008458F0, (uint64_t *)&unk_10083AE10, (uint64_t)&protocol conformance descriptor for [A]);
  Sequence.firstMap<A>(_:)(v17, sub_10037200C, v16, v10, v12, v13);
  swift_bridgeObjectRelease();
  result = 0;
  if ((v18 & 1) == 0)
  {
    sub_10036F214(v17[0], v17[1], a5);
    v15 = a2;
    return a2;
  }
  return result;
}

unint64_t sub_10036F3E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t result;
  __n128 v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  NSString v39;
  id v40;
  uint64_t v41;
  void *v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  id v50;
  void *v51;
  NSString v52;
  id v53;
  uint64_t v54;
  _QWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v12 = Range<>.init(_:in:)(a5);
  if ((v14 & 1) != 0)
    return 0;
  v15 = String.subscript.getter(v12, v13, a3, a4);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  result = Substring.index(_:offsetBy:limitedBy:)(v15, 1, v17, v15, v17, v18, v20);
  if ((v24 & 1) != 0)
    result = v17;
  if (v17 >> 14 >= result >> 14)
  {
    v54 = a6;
    v25 = Substring.subscript.getter(result, v17, v15, v17, v19, v21, v23);
    v27 = v26;
    v29 = v28;
    v31 = v30;
    swift_bridgeObjectRelease();
    v56 = v25;
    v57 = v27;
    v58 = v29;
    v59 = v31;
    v55[0] = a1;
    v55[1] = a2;
    v32 = sub_100130E9C();
    v33 = sub_1000E525C();
    v34 = StringProtocol.commonPrefix<A>(with:options:)(v55, 129, &type metadata for Substring, &type metadata for String, v32, v33);
    v36 = v35;
    swift_bridgeObjectRelease();
    v37 = HIBYTE(v36) & 0xF;
    if ((v36 & 0x2000000000000000) == 0)
      v37 = v34 & 0xFFFFFFFFFFFFLL;
    if (v37)
    {
      v56 = 16478;
      v57 = 0xE200000000000000;
      v38 = (void *)objc_opt_self(NSRegularExpression);
      v39 = String._bridgeToObjectiveC()();
      v40 = objc_msgSend(v38, "escapedPatternForString:", v39, swift_bridgeObjectRelease().n128_f64[0]);

      v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
      v43 = v42;

      v44._countAndFlagsBits = v41;
      v44._object = v43;
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      v45._countAndFlagsBits = 25180;
      v45._object = (void *)0xE200000000000000;
      String.append(_:)(v45);
      v46 = v56;
      v47 = v57;
      v48 = objc_allocWithZone((Class)NSRegularExpression);
      v49 = sub_1002793E4(v46, v47, 0);
      v51 = v49;
      if (v49)
      {
        v52 = String._bridgeToObjectiveC()();
        v53 = objc_msgSend(v51, "firstMatchInString:options:range:", v52, 0, a5, v54);

        if (v53)
        {
          v50 = objc_msgSend(v53, "range");

          return (unint64_t)v50;
        }

      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    return 0;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10036F694(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = (uint64_t *)(a1 + 40);
    v3 = _swiftEmptyArrayStorage;
    do
    {
      v5 = *v2;
      if (*v2 >= 2)
      {
        v6 = *(v2 - 1);
        if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
          v3 = sub_1002CA788(0, v3[2] + 1, 1, v3);
        v8 = v3[2];
        v7 = v3[3];
        if (v8 >= v7 >> 1)
          v3 = sub_1002CA788((_QWORD *)(v7 > 1), v8 + 1, 1, v3);
        v3[2] = v8 + 1;
        v4 = &v3[2 * v8];
        v4[4] = v6;
        v4[5] = v5 - 1;
      }
      v2 += 2;
      --v1;
    }
    while (v1);
  }
  else
  {
    v3 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  v9 = v3[2];
  if (v9)
  {
    sub_10001A630(&qword_1008445D8);
    v10 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v9);
  }
  else
  {
    v10 = _swiftEmptyDictionarySingleton;
  }
  v13 = v10;
  swift_bridgeObjectRetain(v3);
  sub_10037042C(v11, 1, &v13);
  swift_bridgeObjectRelease();
  return v13;
}

void sub_10036F7FC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  Swift::Int v14;
  Swift::Int v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  void **v24;
  Swift::Int v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  __int128 *v33;
  Swift::Int v34;
  Swift::Int v35;
  __int128 *v36;
  __int128 v37;
  Swift::Int v38;
  uint64_t v39;
  __int128 v40;
  Swift::Int v41;
  void *v42;
  uint64_t v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  char v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  Swift::Int v110;
  char *v111;
  char *v112;
  Swift::Int v113;
  Swift::Int v114;
  Swift::Int v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  Swift::Int v120;
  void *v121;
  uint64_t v122;

  v2 = v1;
  v4 = a1[1];
  v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0)
      goto LABEL_131;
    if (v4)
      sub_10036FFB0(0, v4, 1, a1);
    return;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_139;
  v110 = v5;
  v104 = a1;
  if (v4 < 2)
  {
    v10 = (char *)_swiftEmptyArrayStorage;
    v118 = (char *)&_swiftEmptyArrayStorage[4];
    v109 = _swiftEmptyArrayStorage;
    if (v4 != 1)
    {
      v13 = _swiftEmptyArrayStorage[2];
LABEL_97:
      if (v13 >= 2)
      {
        v98 = *v104;
        do
        {
          v99 = v13 - 2;
          if (v13 < 2)
            goto LABEL_126;
          if (!v98)
            goto LABEL_138;
          v100 = *(_QWORD *)&v10[16 * v99 + 32];
          v101 = *(_QWORD *)&v10[16 * v13 + 24];
          sub_1003700DC((char *)(v98 + 16 * v100), (char *)(v98 + 16 * *(_QWORD *)&v10[16 * v13 + 16]), v98 + 16 * v101, v118);
          if (v2)
            break;
          if (v101 < v100)
            goto LABEL_127;
          if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
            v10 = sub_1001D52E4((uint64_t)v10);
          if (v99 >= *((_QWORD *)v10 + 2))
            goto LABEL_128;
          v102 = &v10[16 * v99 + 32];
          *(_QWORD *)v102 = v100;
          *((_QWORD *)v102 + 1) = v101;
          v103 = *((_QWORD *)v10 + 2);
          if (v13 > v103)
            goto LABEL_129;
          memmove(&v10[16 * v13 + 16], &v10[16 * v13 + 32], 16 * (v103 - v13));
          *((_QWORD *)v10 + 2) = v103 - 1;
          v13 = v103 - 1;
        }
        while (v103 > 2);
      }
LABEL_108:
      swift_bridgeObjectRelease();
      v109[2] = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v7 = v6 >> 1;
    v8 = sub_10001A630(&qword_10083F5B0);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(_QWORD *)(v9 + 16) = v7;
    v109 = (_QWORD *)v9;
    v118 = (char *)(v9 + 32);
  }
  v11 = 0;
  v12 = *a1;
  v105 = *a1 - 16;
  v106 = *a1 + 40;
  v10 = (char *)_swiftEmptyArrayStorage;
  v115 = v4;
  v122 = *a1;
  while (1)
  {
    v14 = v11;
    v15 = v11 + 1;
    v114 = v11;
    if (v11 + 1 < v4)
    {
      v111 = v10;
      v16 = (uint64_t *)(v12 + 16 * v15);
      v18 = *v16;
      v17 = (void *)v16[1];
      v19 = (uint64_t *)(v12 + 16 * v11);
      v21 = *v19;
      v20 = (void *)v19[1];
      swift_bridgeObjectRetain(v18);
      v22 = v17;
      swift_bridgeObjectRetain(v21);
      v23 = v20;
      v119 = NSObject.hashValue.getter();
      v116 = NSObject.hashValue.getter();

      v4 = v115;
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      v15 = v14 + 2;
      if (v14 + 2 < v115)
      {
        v107 = v2;
        v24 = (void **)(v106 + 16 * v14);
        while (1)
        {
          v25 = v15;
          v26 = *v24;
          v28 = (uint64_t)*(v24 - 3);
          v27 = *(v24 - 2);
          swift_bridgeObjectRetain(*(v24 - 1));
          v29 = v26;
          swift_bridgeObjectRetain(v28);
          v30 = v27;
          v31 = NSObject.hashValue.getter();
          v32 = NSObject.hashValue.getter();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v119 < v116 == v31 >= v32)
            break;
          ++v15;
          v24 += 2;
          v4 = v115;
          if (v115 == v25 + 1)
          {
            v15 = v115;
            v2 = v107;
            goto LABEL_22;
          }
        }
        v2 = v107;
        v4 = v115;
LABEL_22:
        v14 = v114;
      }
      v10 = v111;
      v12 = v122;
      if (v119 < v116)
      {
        if (v15 < v14)
          goto LABEL_132;
        if (v14 < v15)
        {
          v33 = (__int128 *)(v105 + 16 * v15);
          v34 = v15;
          v35 = v14;
          v36 = (__int128 *)(v122 + 16 * v14);
          do
          {
            if (v35 != --v34)
            {
              if (!v122)
                goto LABEL_137;
              v37 = *v36;
              *v36 = *v33;
              *v33 = v37;
            }
            ++v35;
            --v33;
            ++v36;
          }
          while (v35 < v34);
        }
      }
    }
    if (v15 < v4)
    {
      if (__OFSUB__(v15, v14))
        goto LABEL_130;
      if (v15 - v14 < v110)
        break;
    }
LABEL_49:
    if (v15 < v14)
      goto LABEL_125;
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      v10 = sub_1001D4DF0(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v49 = *((_QWORD *)v10 + 2);
    v48 = *((_QWORD *)v10 + 3);
    v13 = v49 + 1;
    v12 = v122;
    if (v49 >= v48 >> 1)
    {
      v97 = sub_1001D4DF0((char *)(v48 > 1), v49 + 1, 1, v10);
      v12 = v122;
      v10 = v97;
    }
    *((_QWORD *)v10 + 2) = v13;
    v50 = v10 + 32;
    v51 = &v10[16 * v49 + 32];
    *(_QWORD *)v51 = v14;
    *((_QWORD *)v51 + 1) = v15;
    v120 = v15;
    if (v49)
    {
      while (1)
      {
        v52 = v13 - 1;
        if (v13 >= 4)
        {
          v57 = &v50[16 * v13];
          v58 = *((_QWORD *)v57 - 8);
          v59 = *((_QWORD *)v57 - 7);
          v63 = __OFSUB__(v59, v58);
          v60 = v59 - v58;
          if (v63)
            goto LABEL_114;
          v62 = *((_QWORD *)v57 - 6);
          v61 = *((_QWORD *)v57 - 5);
          v63 = __OFSUB__(v61, v62);
          v55 = v61 - v62;
          v56 = v63;
          if (v63)
            goto LABEL_115;
          v64 = v13 - 2;
          v65 = &v50[16 * v13 - 32];
          v67 = *(_QWORD *)v65;
          v66 = *((_QWORD *)v65 + 1);
          v63 = __OFSUB__(v66, v67);
          v68 = v66 - v67;
          if (v63)
            goto LABEL_117;
          v63 = __OFADD__(v55, v68);
          v69 = v55 + v68;
          if (v63)
            goto LABEL_120;
          if (v69 >= v60)
          {
            v87 = &v50[16 * v52];
            v89 = *(_QWORD *)v87;
            v88 = *((_QWORD *)v87 + 1);
            v63 = __OFSUB__(v88, v89);
            v90 = v88 - v89;
            if (v63)
              goto LABEL_124;
            v80 = v55 < v90;
            goto LABEL_86;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v81 = *((_QWORD *)v10 + 4);
            v82 = *((_QWORD *)v10 + 5);
            v63 = __OFSUB__(v82, v81);
            v74 = v82 - v81;
            v75 = v63;
            goto LABEL_80;
          }
          v54 = *((_QWORD *)v10 + 4);
          v53 = *((_QWORD *)v10 + 5);
          v63 = __OFSUB__(v53, v54);
          v55 = v53 - v54;
          v56 = v63;
        }
        if ((v56 & 1) != 0)
          goto LABEL_116;
        v64 = v13 - 2;
        v70 = &v50[16 * v13 - 32];
        v72 = *(_QWORD *)v70;
        v71 = *((_QWORD *)v70 + 1);
        v73 = __OFSUB__(v71, v72);
        v74 = v71 - v72;
        v75 = v73;
        if (v73)
          goto LABEL_119;
        v76 = &v50[16 * v52];
        v78 = *(_QWORD *)v76;
        v77 = *((_QWORD *)v76 + 1);
        v63 = __OFSUB__(v77, v78);
        v79 = v77 - v78;
        if (v63)
          goto LABEL_122;
        if (__OFADD__(v74, v79))
          goto LABEL_123;
        if (v74 + v79 >= v55)
        {
          v80 = v55 < v79;
LABEL_86:
          if (v80)
            v52 = v64;
          goto LABEL_88;
        }
LABEL_80:
        if ((v75 & 1) != 0)
          goto LABEL_118;
        v83 = &v50[16 * v52];
        v85 = *(_QWORD *)v83;
        v84 = *((_QWORD *)v83 + 1);
        v63 = __OFSUB__(v84, v85);
        v86 = v84 - v85;
        if (v63)
          goto LABEL_121;
        if (v86 < v74)
          goto LABEL_14;
LABEL_88:
        v91 = v52 - 1;
        if (v52 - 1 >= v13)
        {
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
          goto LABEL_134;
        }
        if (!v12)
          goto LABEL_136;
        v92 = &v50[16 * v91];
        v93 = *(_QWORD *)v92;
        v94 = &v50[16 * v52];
        v95 = *((_QWORD *)v94 + 1);
        sub_1003700DC((char *)(v12 + 16 * *(_QWORD *)v92), (char *)(v12 + 16 * *(_QWORD *)v94), v12 + 16 * v95, v118);
        if (v2)
          goto LABEL_108;
        if (v95 < v93)
          goto LABEL_111;
        if (v52 > *((_QWORD *)v10 + 2))
          goto LABEL_112;
        *(_QWORD *)v92 = v93;
        *(_QWORD *)&v50[16 * v91 + 8] = v95;
        v96 = *((_QWORD *)v10 + 2);
        if (v52 >= v96)
          goto LABEL_113;
        v13 = v96 - 1;
        memmove(&v50[16 * v52], v94 + 16, 16 * (v96 - 1 - v52));
        *((_QWORD *)v10 + 2) = v96 - 1;
        v12 = v122;
        if (v96 <= 2)
          goto LABEL_14;
      }
    }
    v13 = 1;
LABEL_14:
    v4 = v115;
    v11 = v120;
    if (v120 >= v115)
      goto LABEL_97;
  }
  if (__OFADD__(v14, v110))
    goto LABEL_133;
  if (v14 + v110 >= v4)
    v38 = v4;
  else
    v38 = v14 + v110;
  if (v38 >= v14)
  {
    if (v15 != v38)
    {
      v112 = v10;
      v113 = v38;
      v108 = v2;
      v39 = v105 + 16 * v15;
      do
      {
        v40 = *(_OWORD *)(v12 + 16 * v15);
        v41 = v14;
        v117 = v39;
        while (1)
        {
          v121 = (void *)*((_QWORD *)&v40 + 1);
          v43 = *(_QWORD *)v39;
          v42 = *(void **)(v39 + 8);
          swift_bridgeObjectRetain(v40);
          v44 = v121;
          swift_bridgeObjectRetain(v43);
          v45 = v42;
          v46 = NSObject.hashValue.getter();
          v47 = NSObject.hashValue.getter();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v46 >= v47)
            break;
          v12 = v122;
          if (!v122)
            goto LABEL_135;
          v40 = *(_OWORD *)(v39 + 16);
          *(_OWORD *)(v39 + 16) = *(_OWORD *)v39;
          *(_OWORD *)v39 = v40;
          v39 -= 16;
          if (v15 == ++v41)
            goto LABEL_42;
        }
        v12 = v122;
LABEL_42:
        ++v15;
        v39 = v117 + 16;
        v14 = v114;
      }
      while (v15 != v113);
      v15 = v113;
      v2 = v108;
      v10 = v112;
    }
    goto LABEL_49;
  }
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

uint64_t sub_10036FFB0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;

  v16 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v19 = *a4;
    v5 = *a4 + 16 * a3 - 16;
LABEL_5:
    v6 = *(_OWORD *)(v19 + 16 * v4);
    v7 = v16;
    v17 = v5;
    while (1)
    {
      v18 = (void *)*((_QWORD *)&v6 + 1);
      v9 = *(_QWORD *)v5;
      v8 = *(void **)(v5 + 8);
      v10 = v6;
      swift_bridgeObjectRetain(v6);
      v11 = v18;
      swift_bridgeObjectRetain(v9);
      v12 = v8;
      v13 = NSObject.hashValue.getter();
      v14 = NSObject.hashValue.getter();

      swift_bridgeObjectRelease(v10);
      result = swift_bridgeObjectRelease(v9);
      if (v13 >= v14)
      {
LABEL_4:
        ++v4;
        v5 = v17 + 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v19)
        break;
      v6 = *(_OWORD *)(v5 + 16);
      *(_OWORD *)(v5 + 16) = *(_OWORD *)v5;
      *(_OWORD *)v5 = v6;
      v5 -= 16;
      if (v4 == ++v7)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1003700DC(char *a1, char *__src, unint64_t a3, char *__dst)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  char *v35;
  char *v37;
  char *v38;
  char *v39;
  char *v41;
  char *v42;
  char *v43;
  char *v44;

  v5 = __src;
  v6 = __src - a1;
  v7 = __src - a1 + 15;
  if (__src - a1 >= 0)
    v7 = __src - a1;
  v8 = v7 >> 4;
  v9 = a3 - (_QWORD)__src;
  v10 = a3 - (_QWORD)__src + 15;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v10 = a3 - (_QWORD)__src;
  v11 = v10 >> 4;
  v44 = a1;
  v43 = __dst;
  if (v8 >= v10 >> 4)
  {
    if (v9 >= -15)
    {
      if (__dst != __src || &__src[16 * v11] <= __dst)
        memmove(__dst, __src, 16 * v11);
      v35 = __dst;
      v23 = &__dst[16 * v11];
      v42 = v23;
      v44 = v5;
      if (a1 < v5 && v9 >= 16)
      {
        v24 = (char *)(a3 - 16);
        v25 = v5;
        do
        {
          v41 = v5;
          v37 = v23;
          v39 = v24 + 16;
          v26 = *((_QWORD *)v23 - 2);
          v27 = (void *)*((_QWORD *)v23 - 1);
          v23 -= 16;
          v29 = *((_QWORD *)v25 - 2);
          v28 = (void *)*((_QWORD *)v25 - 1);
          v25 -= 16;
          swift_bridgeObjectRetain(v26);
          v30 = v27;
          swift_bridgeObjectRetain(v29);
          v31 = v28;
          v32 = NSObject.hashValue.getter();
          v33 = NSObject.hashValue.getter();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v32 >= v33)
          {
            v42 = v23;
            v25 = v41;
            if (v39 < v37 || v24 >= v37 || v39 != v37)
              *(_OWORD *)v24 = *(_OWORD *)v23;
          }
          else
          {
            v23 = v37;
            if (v39 != v41 || v24 >= v41)
              *(_OWORD *)v24 = *(_OWORD *)v25;
            v44 = v25;
          }
          if (v25 <= a1)
            break;
          v24 -= 16;
          v5 = v25;
        }
        while (v23 > v35);
      }
      goto LABEL_42;
    }
  }
  else if (v6 >= -15)
  {
    v12 = a1;
    if (__dst != a1 || &a1[16 * v8] <= __dst)
      memmove(__dst, a1, 16 * v8);
    v38 = &__dst[16 * v8];
    v42 = v38;
    if ((unint64_t)v5 < a3 && v6 >= 16)
    {
      v13 = __dst;
      do
      {
        v14 = (void *)*((_QWORD *)v5 + 1);
        v16 = *(_QWORD *)v13;
        v15 = (void *)*((_QWORD *)v13 + 1);
        swift_bridgeObjectRetain(*(_QWORD *)v5);
        v17 = v14;
        swift_bridgeObjectRetain(v16);
        v18 = v15;
        v19 = v5;
        v20 = NSObject.hashValue.getter();
        v21 = NSObject.hashValue.getter();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v20 >= v21)
        {
          v22 = v19;
          if (v12 != v13)
            *(_OWORD *)v12 = *(_OWORD *)v13;
          v13 += 16;
          v43 = v13;
        }
        else
        {
          v22 = v19 + 16;
          if (v12 < v19 || v12 >= v22 || v12 != v19)
            *(_OWORD *)v12 = *(_OWORD *)v19;
        }
        v12 += 16;
        if (v13 >= v38)
          break;
        v5 = v22;
      }
      while ((unint64_t)v22 < a3);
      v44 = v12;
    }
LABEL_42:
    sub_1001D4FB4((void **)&v44, (const void **)&v43, &v42);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_10037042C(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = a1[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v7 = a1[4];
  v42 = a1[5];
  swift_bridgeObjectRetain(a1);
  v46 = v7;
  v8 = (_QWORD *)*a3;
  v10 = sub_1002C6A08(v7);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
    goto LABEL_23;
  v14 = v9;
  if (v8[3] >= v13)
  {
    if ((a2 & 1) != 0)
    {
      if ((v9 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_1002D90D0();
      if ((v14 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v19 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v10 >> 6) + 64) |= 1 << v10;
    v20 = 8 * v10;
    *(_QWORD *)(v19[6] + v20) = v7;
    *(_QWORD *)(v19[7] + v20) = v42;
    v21 = v19[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v19[2] = v23;
    v24 = v4 - 1;
    if (v4 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n(a1, 2);
      return;
    }
    v25 = a1 + 7;
    while (1)
    {
      v26 = *(v25 - 1);
      v27 = *v25;
      v46 = v26;
      v28 = (_QWORD *)*a3;
      v29 = sub_1002C6A08(v26);
      v31 = v28[2];
      v32 = (v30 & 1) == 0;
      v22 = __OFADD__(v31, v32);
      v33 = v31 + v32;
      if (v22)
        break;
      v34 = v30;
      if (v28[3] < v33)
      {
        sub_1002D240C(v33, 1);
        v29 = sub_1002C6A08(v26);
        if ((v34 & 1) != (v35 & 1))
          goto LABEL_25;
      }
      if ((v34 & 1) != 0)
        goto LABEL_10;
      v36 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v29 >> 6) + 64) |= 1 << v29;
      v37 = 8 * v29;
      *(_QWORD *)(v36[6] + v37) = v26;
      *(_QWORD *)(v36[7] + v37) = v27;
      v38 = v36[2];
      v22 = __OFADD__(v38, 1);
      v39 = v38 + 1;
      if (v22)
        goto LABEL_24;
      v25 += 2;
      v36[2] = v39;
      if (!--v24)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1002D240C(v13, a2 & 1);
  v15 = sub_1002C6A08(v7);
  if ((v14 & 1) == (v16 & 1))
  {
    v10 = v15;
    if ((v14 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v17 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v17);
    v45 = v17;
    swift_errorRetain(v17);
    v18 = sub_10001A630((uint64_t *)&unk_10083AA20);
    if ((swift_dynamicCast(v18, &v45, v18, &type metadata for _MergeError, 0) & 1) == 0)
    {
      swift_bridgeObjectRelease_n(a1, 2);
      swift_errorRelease(v45);
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
LABEL_26:
  v43 = 0;
  v44 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v40._object = (void *)0x8000000100701A20;
  v40._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v40);
  _print_unlocked<A, B>(_:_:)(&v46, &v43, &type metadata for Int, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v41._countAndFlagsBits = 39;
  v41._object = (void *)0xE100000000000000;
  String.append(_:)(v41);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v43, v44, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
}

_QWORD *sub_100370770(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v2 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630(&qword_100846F38);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1006B74B0);
  PartialOverride.subscript.getter((uint64_t *)((char *)&v21 + 1), KeyPath, v6, &protocol witness table for Bool);
  swift_release(KeyPath);
  LODWORD(KeyPath) = BYTE1(v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  if ((_DWORD)KeyPath != 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return _swiftEmptyArrayStorage;
  }
  v11 = swift_getKeyPath(&unk_1006B74E0);
  PartialOverride.subscript.getter(&v21, v11, v6, &protocol witness table for Bool);
  swift_release(v11);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((v21 & 1) != 0)
    return _swiftEmptyArrayStorage;
  v12 = sub_10001A630((uint64_t *)&unk_100844620);
  v14 = type metadata accessor for REMSuggestedAttributeOutput(0, v13);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = swift_allocObject(v12, v17 + *(_QWORD *)(v15 + 72), v16 | 7);
  *(_OWORD *)(v18 + 16) = xmmword_1006A3C00;
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for REMSuggestedAttributeOutput.Pipeline.heuristic(_:), v2);
  REMSuggestedAttributeOutput.Source.init(pipeline:)(v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 104))(v18 + v17, enum case for REMSuggestedAttributeOutput.pasteboardURL(_:), v14);
  return (_QWORD *)v18;
}

BOOL sub_100370978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  NSString v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v25[2];

  v7 = type metadata accessor for CharacterSet(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    if (qword_1008372B8 != -1)
      swift_once(&qword_1008372B8, sub_10036C020);
    v12 = qword_100846E10;
    v13 = (void *)objc_opt_self(NSLocale);
    v14 = String._bridgeToObjectiveC()();
    v15 = objc_msgSend(v13, "baseLanguageFromLanguage:", v14);

    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

    LOBYTE(v16) = sub_1001B2278(v16, v18, v12);
    v9 = swift_bridgeObjectRelease();
    if ((v16 & 1) == 0 && String.count.getter(a1, a2) < 5)
      return 0;
  }
  v25[0] = a1;
  v25[1] = a2;
  static CharacterSet.whitespaces.getter(v9);
  v20 = sub_1000E525C();
  v21 = StringProtocol.trimmingCharacters(in:)(v11, &type metadata for String, v20);
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  swift_bridgeObjectRelease();
  v24 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000) == 0)
    v24 = v21 & 0xFFFFFFFFFFFFLL;
  return v24 != 0;
}

_QWORD *sub_100370B28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t i;
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v18;
  __int128 v19;
  id v20;

  v3 = v2;
  if ((unint64_t)a1 >> 62)
    goto LABEL_19;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v5; v5 = _CocoaArrayWrapper.endIndex.getter(v15))
  {
    v6 = _swiftEmptyArrayStorage;
    for (i = 4; ; ++i)
    {
      v8 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1)
         : *(id *)(a1 + 8 * i);
      v9 = v8;
      v10 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v20 = v8;
      sub_10036DE20(&v20, a2, &v19);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v6;
      }

      if ((_QWORD)v19)
      {
        v18 = v19;
        if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
          v6 = sub_1002CA8A8(0, v6[2] + 1, 1, v6);
        v12 = v6[2];
        v11 = v6[3];
        v13 = v18;
        if (v12 >= v11 >> 1)
        {
          v14 = sub_1002CA8A8((_QWORD *)(v11 > 1), v12 + 1, 1, v6);
          v13 = v18;
          v6 = v14;
        }
        v6[2] = v12 + 1;
        *(_OWORD *)&v6[2 * v12 + 4] = v13;
      }
      if (v10 == v5)
      {
        swift_bridgeObjectRelease();
        return v6;
      }
    }
    __break(1u);
LABEL_19:
    if (a1 < 0)
      v15 = a1;
    else
      v15 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

char *sub_100370CE4(char *a1, void *a2, uint64_t a3)
{
  __n128 v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  char *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  __n128 v37;
  uint64_t v38;
  os_log_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t *v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *result;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unsigned int (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char v61;
  void (*v62)(char *, uint64_t);
  void *v63;
  id v64;
  __n128 v65;
  void *v66;
  id v67;
  char v68;
  uint64_t v69;
  os_log_t v70;
  uint64_t v71;
  Class isa;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  int v79;
  os_log_t v80;
  uint64_t v81;
  __n128 v82;
  void *v83;
  id v84;
  id v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  unint64_t v89;
  __n128 v90;
  void (*v91)(char *, uint64_t, __n128);
  char *v92;
  char *v93;
  __n128 v94;
  __n128 v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  __n128 v99;
  char *v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  uint64_t v104;
  uint64_t v105;
  os_log_t v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  __n128 v111;
  id v112;
  uint64_t v113;
  double (*v114)(char *, char *, uint64_t);
  char *v115;
  __n128 v116;
  unint64_t v117;
  void (*v118)(char *, uint64_t);
  char *v119;
  double v120;
  void *v121;
  id v122;
  id v123;
  unint64_t v124;
  unint64_t v125;
  void *v126;
  id v127;
  id v128;
  uint64_t v129;
  void *v130;
  id v131;
  uint64_t v132;
  __n128 v133;
  uint64_t v134;
  id v135;
  id v136;
  id v137;
  void *v138;
  id v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  id v145;
  uint64_t v146;
  uint64_t inited;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int64_t v151;
  os_log_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  id v160;
  id v161;
  uint64_t v162;
  os_log_t v163;
  char *v164;
  unint64_t v165;
  unint64_t v166;
  id v167;
  uint64_t v168;
  void (*v169)(char *, uint64_t);
  uint64_t v170;
  uint64_t v171;
  char *v172;
  void (*v173)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  char *v180;
  id v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  os_log_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  _BYTE v194[16];
  id v195[3];
  uint64_t v196;
  uint64_t v197;

  v181 = a2;
  v186 = a1;
  v183 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline(0);
  v174 = *(_QWORD *)(v183 - 8);
  v4 = __chkstk_darwin(v183);
  v182 = (char *)&v172 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = type metadata accessor for REMSuggestedAttributeOutput(0, v4);
  v175 = *(_QWORD *)(v176 - 8);
  v6 = __chkstk_darwin(v176);
  v192 = (char *)&v172 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = type metadata accessor for REMSuggestedAttributesHarvester.MentionsExtractionRequest(0, v6);
  v190 = *(os_log_t *)(v188 - 8);
  __chkstk_darwin(v188);
  v187 = (char *)&v172 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v172 - v10;
  __chkstk_darwin(v12);
  v177 = (char *)&v172 - v13;
  v14 = type metadata accessor for UUID(0);
  v184 = *(_QWORD *)(v14 - 8);
  v185 = v14;
  __chkstk_darwin(v14);
  v178 = (char *)&v172 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A630((uint64_t *)&unk_10083B370);
  __chkstk_darwin(v16);
  v18 = (char *)&v172 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v19);
  v180 = (char *)&v172 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v179 = (uint64_t)&v172 - v22;
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v172 - v25;
  v191 = a3;
  v27 = (void *)REMSuggestedAttributesHarvester.MentionsExtractionRequest.listID.getter(v24);
  v28 = objc_msgSend(v27, "entityName");

  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  v31 = v30;

  v32 = objc_msgSend((id)objc_opt_self(REMTemplate), "cdEntityName");
  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  v35 = v34;

  if (v29 == v33 && v31 == v35)
  {
    swift_bridgeObjectRelease_n(v31, 2);
LABEL_5:
    if (qword_1008372B0 != -1)
      swift_once(&qword_1008372B0, sub_10036BF90);
    v38 = type metadata accessor for Logger(0);
    sub_10001AAA8(v38, (uint64_t)qword_100846DF8);
    v39 = v190;
    v40 = v187;
    v41 = v188;
    v42 = ((uint64_t (*)(char *, uint64_t, uint64_t))v190[2].isa)(v187, v191, v188);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(12, -1);
      v46 = (uint64_t *)swift_slowAlloc(8, -1);
      v47.n128_u64[0] = 138543362;
      *(_DWORD *)v45 = 138543362;
      v48 = REMSuggestedAttributesHarvester.MentionsExtractionRequest.listID.getter(v47);
      v196 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, &v197);
      *v46 = v48;
      ((void (*)(char *, uint64_t))v190[1].isa)(v40, v41);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "REMSuggestedAttributesHarvester.MentionsExtractionInvocation should not be called with 'parameters.listID', which belongs to list representation of a template. {parameters.listID: %{public}@}", v45, 0xCu);
      v49 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v46, 1, v49);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);
    }
    else
    {
      ((void (*)(char *, uint64_t))v39[1].isa)(v40, v41);
    }

    return (char *)_swiftEmptyArrayStorage;
  }
  v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, v33, v35, 0);
  swift_bridgeObjectRelease();
  v37 = swift_bridgeObjectRelease();
  if ((v36 & 1) != 0)
    goto LABEL_5;
  v172 = v11;
  REMSuggestedAttributesHarvester.MentionsExtractionRequest.editingSessionID.getter(v37);
  v53 = v184;
  v52 = v185;
  v173 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v184 + 56);
  v173(v26, 0, 1, v185);
  v54 = &v186[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cachedEditingSessionID];
  swift_beginAccess(&v186[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cachedEditingSessionID], &v196, 0, 0);
  v55 = (uint64_t)&v18[*(int *)(v16 + 48)];
  sub_100008868((uint64_t)v26, (uint64_t)v18, (uint64_t *)&unk_100839C80);
  v187 = v54;
  sub_100008868((uint64_t)v54, v55, (uint64_t *)&unk_100839C80);
  v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48);
  if (v56((uint64_t)v18, 1, v52) != 1)
  {
    v57 = v179;
    sub_100008868((uint64_t)v18, v179, (uint64_t *)&unk_100839C80);
    if (v56(v55, 1, v52) != 1)
    {
      v58 = v184;
      v59 = v178;
      (*(void (**)(char *, uint64_t, uint64_t))(v184 + 32))(v178, v55, v52);
      v60 = sub_10009FC50((unint64_t *)&qword_10083B380, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v61 = dispatch thunk of static Equatable.== infix(_:_:)(v57, v59, v52, v60);
      v62 = *(void (**)(char *, uint64_t))(v58 + 8);
      v62(v59, v52);
      sub_10000882C((uint64_t)v26, (uint64_t *)&unk_100839C80);
      v62((char *)v57, v52);
      sub_10000882C((uint64_t)v18, (uint64_t *)&unk_100839C80);
      if ((v61 & 1) == 0)
        goto LABEL_28;
      goto LABEL_20;
    }
    sub_10000882C((uint64_t)v26, (uint64_t *)&unk_100839C80);
    (*(void (**)(uint64_t, uint64_t))(v184 + 8))(v57, v52);
LABEL_18:
    sub_10000882C((uint64_t)v18, (uint64_t *)&unk_10083B370);
    goto LABEL_28;
  }
  sub_10000882C((uint64_t)v26, (uint64_t *)&unk_100839C80);
  if (v56(v55, 1, v52) != 1)
    goto LABEL_18;
  sub_10000882C((uint64_t)v18, (uint64_t *)&unk_100839C80);
LABEL_20:
  v63 = *(void **)&v186[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cachedList];
  if (v63)
  {
    sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
    v64 = v63;
    v66 = (void *)REMSuggestedAttributesHarvester.MentionsExtractionRequest.listID.getter(v65);
    v67 = objc_msgSend(v64, "remObjectID");
    v68 = static NSObject.== infix(_:_:)(v66);

    if ((v68 & 1) != 0)
    {
      if (qword_1008372B0 != -1)
        swift_once(&qword_1008372B0, sub_10036BF90);
      v69 = type metadata accessor for Logger(0);
      sub_10001AAA8(v69, (uint64_t)qword_100846DF8);
      v70 = v190;
      v71 = v191;
      isa = v190[2].isa;
      v73 = v177;
      v74 = v188;
      ((void (*)(char *, uint64_t, uint64_t))isa)(v177, v191, v188);
      v75 = v172;
      v76 = ((uint64_t (*)(char *, uint64_t, uint64_t))isa)(v172, v71, v74);
      v77 = Logger.logObject.getter(v76);
      v78 = static os_log_type_t.default.getter(v77);
      v79 = v78;
      if (os_log_type_enabled(v77, v78))
      {
        v80 = v70;
        v81 = swift_slowAlloc(22, -1);
        v187 = (char *)swift_slowAlloc(64, -1);
        v195[0] = v187;
        v82.n128_u64[0] = 136315394;
        *(_DWORD *)v81 = 136315394;
        LODWORD(v180) = v79;
        v83 = (void *)REMSuggestedAttributesHarvester.MentionsExtractionRequest.listID.getter(v82);
        v84 = objc_msgSend(v83, "description");
        v181 = v64;
        v85 = v84;

        v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
        v87 = v73;
        v89 = v88;

        v193 = sub_10001A820(v86, v89, (uint64_t *)v195);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, v194);
        v90 = swift_bridgeObjectRelease();
        v91 = (void (*)(char *, uint64_t, __n128))v80[1].isa;
        v91(v87, v74, v90);
        *(_WORD *)(v81 + 12) = 2080;
        v92 = v178;
        v190 = v77;
        v93 = v172;
        v95.n128_f64[0] = REMSuggestedAttributesHarvester.MentionsExtractionRequest.editingSessionID.getter(v94);
        v96 = UUID.description.getter(v95);
        v98 = v97;
        (*(void (**)(char *, uint64_t))(v184 + 8))(v92, v185);
        v193 = sub_10001A820(v96, v98, (uint64_t *)v195);
        v64 = v181;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, v194);
        v99 = swift_bridgeObjectRelease();
        v91(v93, v74, v99);
        v77 = v190;
        _os_log_impl((void *)&_mh_execute_header, v190, (os_log_type_t)v180, "Loading cached list: %s for session: %s", (uint8_t *)v81, 0x16u);
        v100 = v187;
        swift_arrayDestroy(v187, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v100, -1, -1);
        swift_slowDealloc(v81, -1, -1);
      }
      else
      {
        v169 = (void (*)(char *, uint64_t))v70[1].isa;
        v169(v73, v74);
        v169(v75, v74);
      }

      goto LABEL_41;
    }

  }
LABEL_28:
  if (qword_1008372B0 != -1)
    swift_once(&qword_1008372B0, sub_10036BF90);
  v101 = type metadata accessor for Logger(0);
  sub_10001AAA8(v101, (uint64_t)qword_100846DF8);
  v50 = v186;
  v102 = Logger.logObject.getter(v50);
  v103 = static os_log_type_t.default.getter(v102);
  if (os_log_type_enabled(v102, v103))
  {
    v104 = 7104878;
    v105 = swift_slowAlloc(22, -1);
    v106 = (os_log_t)swift_slowAlloc(64, -1);
    v195[0] = v106;
    *(_DWORD *)v105 = 136315394;
    v107 = v187;
    v108 = v185;
    if (v56((uint64_t)v187, 1, v185))
    {
      v109 = 0xE300000000000000;
      v110 = 7104878;
    }
    else
    {
      v113 = v184;
      v114 = *(double (**)(char *, char *, uint64_t))(v184 + 16);
      v190 = v106;
      v115 = v178;
      v116.n128_f64[0] = v114(v178, v107, v108);
      v110 = UUID.description.getter(v116);
      v109 = v117;
      v118 = *(void (**)(char *, uint64_t))(v113 + 8);
      v104 = 7104878;
      v119 = v115;
      v106 = v190;
      v118(v119, v108);
    }
    v193 = sub_10001A820(v110, v109, (uint64_t *)v195);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, v194);

    *(_QWORD *)&v120 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v105 + 12) = 2080;
    v121 = *(void **)&v50[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cachedList];
    if (v121)
    {
      v122 = objc_msgSend(v121, "remObjectID", v120);
      v123 = objc_msgSend(v122, "description");

      v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(v123);
      v125 = v124;

    }
    else
    {
      v125 = 0xE300000000000000;
    }
    v193 = sub_10001A820(v104, v125, (uint64_t *)v195);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, v194);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v102, v103, "No cached value found for session: %s list: %s", (uint8_t *)v105, 0x16u);
    swift_arrayDestroy(v106, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v106, -1, -1);
    swift_slowDealloc(v105, -1, -1);

    v112 = v181;
  }
  else
  {

    v112 = v181;
  }
  v126 = (void *)REMSuggestedAttributesHarvester.MentionsExtractionRequest.listID.getter(v111);
  v195[0] = 0;
  v127 = objc_msgSend(v112, "fetchListWithObjectID:error:", v126, v195);

  v128 = v195[0];
  v129 = v185;
  if (!v127)
  {
    v167 = v195[0];
    _convertNSErrorToError(_:)(v128);

    swift_willThrow(v168);
    return v50;
  }
  v130 = *(void **)&v50[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cachedList];
  *(_QWORD *)&v50[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cachedList] = v127;
  v131 = v128;
  v64 = v127;

  v132 = (uint64_t)v180;
  REMSuggestedAttributesHarvester.MentionsExtractionRequest.editingSessionID.getter(v133);
  v173((char *)v132, 0, 1, v129);
  v134 = (uint64_t)v187;
  swift_beginAccess(v187, v195, 33, 0);
  sub_100371E08(v132, v134);
  swift_endAccess(v195);
LABEL_41:
  v135 = objc_msgSend(v64, "account");
  v136 = objc_msgSend(v135, "capabilities");

  LODWORD(v135) = objc_msgSend(v136, "supportsAssignments");
  if (!(_DWORD)v135)
    goto LABEL_63;
  v137 = objc_msgSend(v64, "shareeContext");
  if (!v137)
    goto LABEL_63;
  v138 = v137;
  v139 = objc_msgSend(v137, "sharees");

  v140 = sub_1000151B0(0, &qword_10083A228, REMSharee_ptr);
  v141 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v139, v140);

  if (!((unint64_t)v141 >> 62))
  {
    if (*(_QWORD *)((v141 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_45;
    goto LABEL_62;
  }
  if (v141 < 0)
    v170 = v141;
  else
    v170 = v141 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v141);
  v171 = _CocoaArrayWrapper.endIndex.getter(v170);
  swift_bridgeObjectRelease();
  if (!v171)
  {
LABEL_62:
    swift_bridgeObjectRelease();
LABEL_63:

    return (char *)_swiftEmptyArrayStorage;
  }
LABEL_45:
  v142 = sub_1001B9130(v141);
  v143 = v189;
  v144 = sub_100370B28(v141, v142);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v195[0] = v144;
  swift_bridgeObjectRetain(v144);
  sub_10036ECC0(v195);
  v189 = v143;
  if (!v143)
  {
    swift_bridgeObjectRelease();
    v145 = v195[0];
    if (*((_QWORD *)v195[0] + 2))
    {
      v146 = sub_10001A630(&qword_100846EF0);
      inited = swift_initStackObject(v146, v194);
      v148 = REMSuggestedAttributesHarvester.MentionsExtractionRequest.reminderTitle.getter();
      v150 = sub_10036E004((uint64_t)v145, v148, v149);
      swift_bridgeObjectRelease();
      swift_release(v145);
      v151 = *(_QWORD *)(v150 + 16);
      if (v151)
      {
        v180 = (char *)inited;
        v181 = v64;
        v195[0] = _swiftEmptyArrayStorage;
        sub_1001C22DC(0, v151, 0);
        v50 = (char *)v195[0];
        LODWORD(v187) = enum case for REMSuggestedAttributeOutput.Pipeline.heuristic(_:);
        v186 = *(char **)(v174 + 104);
        LODWORD(v185) = enum case for REMSuggestedAttributeOutput.assignee(_:);
        v184 = v150;
        v152 = (os_log_t *)(v150 + 48);
        v153 = v176;
        v154 = v175;
        do
        {
          v156 = *(v152 - 2);
          v155 = (uint64_t)*(v152 - 1);
          v190 = *v152;
          v191 = v155;
          v157 = sub_10001A630(&qword_100841D30);
          v188 = *(int *)(v157 + 48);
          v158 = &v192[*(int *)(v157 + 64)];
          v159 = v182;
          ((void (*)(char *, _QWORD, uint64_t))v186)(v182, v187, v183);
          v160 = v156;
          REMSuggestedAttributeOutput.Source.init(pipeline:)(v159);
          v161 = objc_msgSend(v160, "objectID");
          v162 = REMObjectID.codable.getter(v161);

          *(_QWORD *)&v192[v188] = v162;
          v163 = v190;
          *(_QWORD *)v158 = v191;
          *((_QWORD *)v158 + 1) = v163;
          v164 = v192;
          (*(void (**)(char *, _QWORD, uint64_t))(v154 + 104))(v192, v185, v153);

          v195[0] = v50;
          v166 = *((_QWORD *)v50 + 2);
          v165 = *((_QWORD *)v50 + 3);
          if (v166 >= v165 >> 1)
          {
            sub_1001C22DC(v165 > 1, v166 + 1, 1);
            v50 = (char *)v195[0];
          }
          v152 += 3;
          *((_QWORD *)v50 + 2) = v166 + 1;
          (*(void (**)(char *, char *, uint64_t))(v154 + 32))(&v50[((*(unsigned __int8 *)(v154 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v154 + 80))+ *(_QWORD *)(v154 + 72) * v166], v164, v153);
          --v151;
        }
        while (v151);
        swift_release(v180);

      }
      else
      {
        swift_release(inited);

        v50 = (char *)_swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRelease();
      return v50;
    }

    swift_release(v145);
    return (char *)_swiftEmptyArrayStorage;
  }
  result = (char *)swift_release(v195[0]);
  __break(1u);
  return result;
}

uint64_t sub_100371E08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100371E50@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;

  result = sub_10036F060(*a1, a1[1], v2[2], v2[3], v2[4], v2[5], v2[6]);
  if (!v3)
    *a2 = result;
  return result;
}

_QWORD *sub_100371E8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v8 = v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    return _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a1);
  v11 = (void **)(v10 + 40);
  v12 = _swiftEmptyArrayStorage;
  do
  {
    v15 = (uint64_t)*(v11 - 1);
    v14 = *v11;
    swift_bridgeObjectRetain(v15);
    v16 = v14;
    v17 = sub_10036F2E8(v15, v16, a2, a3, a4, a5, a6, a7);
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      return v12;
    }
    v20 = v17;
    v21 = v18;
    v22 = v19;

    swift_bridgeObjectRelease();
    if (v20)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
        v12 = sub_1002CA894(0, v12[2] + 1, 1, v12);
      v24 = v12[2];
      v23 = v12[3];
      if (v24 >= v23 >> 1)
        v12 = sub_1002CA894((_QWORD *)(v23 > 1), v24 + 1, 1, v12);
      v12[2] = v24 + 1;
      v13 = &v12[3 * v24];
      v13[4] = v20;
      v13[5] = v21;
      v13[6] = v22;
    }
    v11 += 2;
    --v9;
  }
  while (v9);
  swift_bridgeObjectRelease();
  return v12;
}

unint64_t sub_10037200C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  unint64_t result;
  uint64_t v5;
  char v6;

  result = sub_10036F3E0(*a1, a1[1], v2[2], v2[3], v2[5], v2[6]);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = v6 & 1;
  return result;
}

uint64_t sub_100372050@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = REMSuggestedAttributesHarvester.Request.enabledOniOS.getter();
  *a1 = result & 1;
  return result;
}

unint64_t sub_10037207C()
{
  unint64_t result;

  result = qword_100846F40;
  if (!qword_100846F40)
  {
    result = swift_getWitnessTable(&unk_1006B7534, &type metadata for SuggestedAttributesDisabledError);
    atomic_store(result, (unint64_t *)&qword_100846F40);
  }
  return result;
}

uint64_t sub_1003720C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = REMSuggestedAttributesHarvester.Request.reminder.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1003720E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = REMSuggestedAttributesHarvester.Request.languageIdentifier.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100372110@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = REMSuggestedAttributesHarvester.Request.modelPipelineSwitcher.getter();
  *a1 = result;
  return result;
}

unint64_t sub_100372138()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100846F50;
  if (!qword_100846F50)
  {
    v1 = sub_1000A5A94(&qword_100846F58);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100846F50);
  }
  return result;
}

void sub_10037219C(char **a1@<X8>)
{
  uint64_t v1;

  sub_10036D018(*(_QWORD *)(v1 + 24), *(uint64_t **)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

_QWORD *sub_1003721B8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  result = sub_1003721F4(*a1, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
  if (!v3)
    *a2 = result;
  return result;
}

uint64_t sub_1003721E8(uint64_t a1, char a2, uint64_t (*a3)(void))
{
  if ((a2 & 1) != 0)
    return swift_errorRelease(a1);
  else
    return a3();
}

_QWORD *sub_1003721F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  __n128 v43;
  _QWORD v45[2];
  void (*v46)(char *);
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;

  v61 = a1;
  v6 = sub_10001A630(&qword_100846F78);
  v59 = *(_QWORD *)(v6 - 8);
  v60 = v6;
  v7 = __chkstk_darwin(v6);
  v58 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for REMSuggestedAttributesHarvester.Request(0, v7);
  v54 = *(_QWORD *)(v9 - 8);
  v55 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline(0);
  v57 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v56 = (char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType(0);
  v62 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v15 = (char *)v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A630(&qword_100846F80);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
    return _swiftEmptyArrayStorage;
  v50 = v12;
  v53 = v3;
  KeyPath = swift_getKeyPath(&unk_1006B7450);
  swift_retain();
  v48 = sub_10001A630(&qword_100846F38);
  v49 = a3;
  PartialOverride.subscript.getter(KeyPath, v48);
  swift_release(KeyPath);
  v21 = swift_getKeyPath(&unk_1006B7480);
  PartialOverride.subscript.getter(&v63, v21, v16, &protocol witness table for Int);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  if (v64)
    v22 = 5;
  else
    v22 = v63;
  v52 = a2;
  v23 = REMkNNByTitleEmbedding.predict(for:neighborCountToConsider:)(a2, v22);
  if (v24)
  {
    v51 = v24;
    v61 = v23;
    if (qword_1008372A8 != -1)
      swift_once(&qword_1008372A8, sub_100369C3C);
    v45[1] = qword_100871E58;
    (*(void (**)(char *, _QWORD, uint64_t))(v62 + 104))(v15, enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.list(_:), v65);
    v47 = enum case for REMSuggestedAttributeOutput.Pipeline.kNN(_:);
    v26 = (uint64_t)v56;
    v25 = v57;
    v46 = *(void (**)(char *))(v57 + 104);
    v27 = v50;
    v46(v56);
    v28 = PartialOverride._full.getter(v48);
    v29 = REMSuggestedAttributesHarvester.Request.reminder.getter(v28);
    v30 = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v11, v55);
    v31 = (void *)REMSuggestedAttributeInput.reminderID.getter(v30);
    swift_release(v29);
    v33 = (uint64_t)v58;
    v32 = v59;
    v34 = v60;
    (*(void (**)(char *, _QWORD, uint64_t))(v59 + 104))(v58, enum case for REMCache.ExecutionMode.asynchronously<A, B>(_:), v60);
    sub_100369EE8(v61, v51, (uint64_t)v15, v26, v31, v33, (uint64_t)REMCDList.cleanUpAfterLocalObjectMerge(), 0);

    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v34);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v27);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v15, v65);
    v35 = sub_10001A630((uint64_t *)&unk_100844620);
    v37 = type metadata accessor for REMSuggestedAttributeOutput(0, v36);
    v38 = *(_QWORD *)(v37 - 8);
    v39 = *(unsigned __int8 *)(v38 + 80);
    v40 = (v39 + 32) & ~v39;
    v41 = (_QWORD *)swift_allocObject(v35, v40 + *(_QWORD *)(v38 + 72), v39 | 7);
    *((_OWORD *)v41 + 1) = xmmword_1006A3C00;
    v42 = *(int *)(sub_10001A630(&qword_100841D48) + 48);
    ((void (*)(uint64_t, _QWORD, uint64_t))v46)(v26, v47, v27);
    REMSuggestedAttributeOutput.Source.init(pipeline:)(v26);
    type metadata accessor for REMSuggestedList(0);
    *(_QWORD *)((char *)v41 + v40 + v42) = REMSuggestedList.__allocating_init(stringLiteral:)(v61, v51, v43);
    (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))((char *)v41 + v40, enum case for REMSuggestedAttributeOutput.list(_:), v37);
  }
  else
  {
    v41 = _swiftEmptyArrayStorage;
  }
  swift_release(v52);
  return v41;
}

uint64_t sub_10037265C()
{
  return REMSuggestedAttributesHarvester.Request.embedding.getter();
}

uint64_t sub_10037267C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = REMSuggestedAttributesHarvester.Request.Embedding.neighborsToConsider.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

void sub_1003726AC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_10036D0C0(a1, a2);
}

uint64_t sub_1003726C4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = REMSuggestedAttributesHarvester.Request.hasPasteboardURL.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1003726F0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = REMSuggestedAttributesHarvester.Request.reminderHasURL.getter();
  *a1 = result & 1;
  return result;
}

ValueMetadata *type metadata accessor for SuggestedAttributesDisabledError()
{
  return &type metadata for SuggestedAttributesDisabledError;
}

uint64_t sub_10037272C(uint64_t a1)
{
  return sub_100373DD0(a1);
}

uint64_t sub_100372740(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v16;

  v3 = v1;
  v5 = _s10PredicatesOMa(0);
  *(_QWORD *)&v6 = __chkstk_darwin(v5).n128_u64[0];
  v8 = (uint64_t *)((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = objc_msgSend(v3, "listIDs", v6);
  v10 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

  *v8 = v11;
  swift_storeEnumTagMultiPayload(v8, v5, 28);
  if (qword_100837260 != -1)
    swift_once(&qword_100837260, sub_10033CFDC);
  v12 = sub_100340EC0((uint64_t)v8, (objc_class *)qword_100871E48, a1, (uint64_t)_swiftEmptyArrayStorage, 0, 0, 0, (uint64_t)_swiftEmptyArrayStorage, 0);
  if (v2)
  {
    sub_10001C744((uint64_t)v8, _s10PredicatesOMa);
  }
  else
  {
    v13 = v12;
    v14 = objc_msgSend((id)objc_opt_self(REMReminderFetchOptions), "defaultFetchOptions");
    a1 = sub_1003D5F00(v13, v14, a1);
    sub_10001C744((uint64_t)v8, _s10PredicatesOMa);
    swift_bridgeObjectRelease();

  }
  return a1;
}

uint64_t sub_1003728F4(uint64_t a1)
{
  return sub_100372740(a1);
}

id sub_100372914(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  id v29;
  void *v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  id v53;
  void *v54;
  char *v55;
  uint64_t v56;
  id v57;
  void *v58;
  char *v59;
  _QWORD *v60;
  id v61;
  uint64_t v63;
  char *v64;
  char *v65;
  unsigned int (*v66)(uint64_t, uint64_t, uint64_t);
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;

  v70 = a1;
  v2 = v1;
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v67 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = _s10PredicatesOMa(0);
  __chkstk_darwin(v68);
  v7 = (uint64_t *)((char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v8);
  v64 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v65 = (char *)&v63 - v11;
  __chkstk_darwin(v12);
  v14 = (char *)&v63 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)&v63 - v16;
  __chkstk_darwin(v18);
  v71 = (uint64_t)&v63 - v19;
  __chkstk_darwin(v20);
  v22 = (char *)&v63 - v21;
  __chkstk_darwin(v23);
  v25 = (char *)&v63 - v24;
  *(_QWORD *)&v27 = __chkstk_darwin(v26).n128_u64[0];
  v73 = (uint64_t)&v63 - v28;
  v72 = v2;
  v29 = objc_msgSend(v2, "startDate", v27);
  if (v29)
  {
    v30 = v29;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v29);

    v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v31(v22, 0, 1, v3);
  }
  else
  {
    v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v31(v22, 1, 1, v3);
  }
  sub_1000CDA74((uint64_t)v22, (uint64_t)v25);
  v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48);
  v33 = v32(v25, 1, v3);
  v34 = v73;
  if ((_DWORD)v33 == 1)
  {
    sub_10000882C((uint64_t)v25, (uint64_t *)&unk_1008380D0);
    v35 = 1;
  }
  else
  {
    Date.addingTimeInterval(_:)(v33, -172800.0);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v25, v3);
    v35 = 0;
  }
  v36 = 1;
  v31((char *)v34, v35, 1, v3);
  v37 = objc_msgSend(v72, "endDate");
  if (v37)
  {
    v38 = v37;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v37);

    v36 = 0;
  }
  v31(v14, v36, 1, v3);
  sub_1000CDA74((uint64_t)v14, (uint64_t)v17);
  v39 = v32(v17, 1, v3);
  v66 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v32;
  if ((_DWORD)v39 == 1)
  {
    sub_10000882C((uint64_t)v17, (uint64_t *)&unk_1008380D0);
    v40 = 1;
    v41 = v71;
  }
  else
  {
    v42 = v71;
    Date.addingTimeInterval(_:)(v39, 172800.0);
    v41 = v42;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v17, v3);
    v40 = 0;
  }
  v31((char *)v41, v40, 1, v3);
  v43 = sub_10001A630(&qword_100846680);
  v44 = (uint64_t)v7 + *(int *)(v43 + 48);
  v45 = (uint64_t)v7 + *(int *)(v43 + 64);
  v46 = objc_msgSend(v72, "listIDs");
  v47 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v46, v47);

  *v7 = v48;
  sub_1000CDA2C(v73, v44);
  sub_1000CDA2C(v41, v45);
  swift_storeEnumTagMultiPayload(v7, v68, 29);
  if (qword_100837260 != -1)
    swift_once(&qword_100837260, sub_10033CFDC);
  v49 = v69;
  v50 = v70;
  v51 = sub_100340EC0((uint64_t)v7, (objc_class *)qword_100871E48, v70, (uint64_t)_swiftEmptyArrayStorage, 0, 0, 0, (uint64_t)_swiftEmptyArrayStorage, 0);
  if (v49)
  {
    sub_10001C744((uint64_t)v7, _s10PredicatesOMa);
    sub_10000882C(v71, (uint64_t *)&unk_1008380D0);
    sub_10000882C(v73, (uint64_t *)&unk_1008380D0);
    return v46;
  }
  v52 = (_QWORD *)v51;
  v53 = objc_msgSend(v72, "startDate");
  if (v53)
  {
    v54 = v53;
    v55 = v67;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v53);

    v56 = (uint64_t)v65;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v65, v55, v3);
    v31((char *)v56, 0, 1, v3);
    if (v66(v56, 1, v3) != 1)
      goto LABEL_21;
  }
  else
  {
    v56 = (uint64_t)v65;
    v31(v65, 1, 1, v3);
  }
  sub_10000882C(v56, (uint64_t *)&unk_1008380D0);
  v57 = objc_msgSend(v72, "endDate");
  if (!v57)
  {
    v56 = (uint64_t)v64;
    v31(v64, 1, 1, v3);
    goto LABEL_23;
  }
  v58 = v57;
  v59 = v67;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v57);

  v56 = (uint64_t)v64;
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v64, v59, v3);
  v31((char *)v56, 0, 1, v3);
  if (v66(v56, 1, v3) == 1)
  {
LABEL_23:
    sub_10000882C(v56, (uint64_t *)&unk_1008380D0);
    goto LABEL_24;
  }
LABEL_21:
  sub_10000882C(v56, (uint64_t *)&unk_1008380D0);
  v60 = v72;
  v52 = sub_100373C3C((unint64_t)v52, v60);

LABEL_24:
  v61 = objc_msgSend((id)objc_opt_self(REMReminderFetchOptions), "defaultFetchOptions");
  v46 = (id)sub_1003D5F00((uint64_t)v52, v61, v50);
  swift_bridgeObjectRelease();

  sub_10001C744((uint64_t)v7, _s10PredicatesOMa);
  sub_10000882C(v71, (uint64_t *)&unk_1008380D0);
  sub_10000882C(v73, (uint64_t *)&unk_1008380D0);
  return v46;
}

uint64_t sub_100372FB8(void **a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  char *v40;
  void *v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  id v54;
  void *v55;
  char *v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  void *v59;
  uint64_t v60;
  char *v61;
  Class isa;
  Class v63;
  id v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  void *v68;
  char *v69;
  id v70;
  void *v71;
  char *v72;
  uint64_t v73;
  void (*v74)(uint64_t, char *, uint64_t);
  unsigned int (*v75)(uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  char v77;
  id v78;
  void *v79;
  uint64_t v80;
  void (*v81)(void);
  uint64_t v82;
  unsigned int (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  char *v85;
  char *v86;
  void (*v87)(char *, uint64_t);
  char *v88;
  unint64_t v89;
  char *v90;
  void (*v91)(char *, uint64_t);
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  void *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;

  v105 = a2;
  v3 = type metadata accessor for Date(0);
  v115 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v94 = (char *)&v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v100 = (char *)&v93 - v6;
  __chkstk_darwin(v7);
  v95 = (char *)&v93 - v8;
  __chkstk_darwin(v9);
  v112 = (char *)&v93 - v10;
  __chkstk_darwin(v11);
  v104 = (char *)&v93 - v12;
  v13 = sub_10001A630((uint64_t *)&unk_100841610);
  __chkstk_darwin(v13);
  v107 = (char *)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for DateComponents(0);
  v113 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v101 = (char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v108 = (char *)&v93 - v17;
  v18 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v18);
  v96 = (uint64_t)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v110 = (char *)&v93 - v21;
  __chkstk_darwin(v22);
  v99 = (uint64_t)&v93 - v23;
  __chkstk_darwin(v24);
  v103 = (char *)&v93 - v25;
  __chkstk_darwin(v26);
  v98 = (char *)&v93 - v27;
  __chkstk_darwin(v28);
  v106 = (uint64_t)&v93 - v29;
  v30 = sub_10001A630(&qword_1008401F8);
  __chkstk_darwin(v30);
  v32 = (char *)&v93 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for TimeZone(0);
  v34 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v36 = (char *)&v93 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v38 = __chkstk_darwin(v37).n128_u64[0];
  v40 = (char *)&v93 - v39;
  v41 = *a1;
  v42 = objc_msgSend(v41, "timeZone", v38);
  v111 = v34;
  v114 = v40;
  if (v42)
  {
    v43 = v42;
    v97 = v3;
    v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v46 = v45;

    TimeZone.init(identifier:)(v44, v46);
    v47 = swift_bridgeObjectRelease();
    v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v34 + 48))(v32, 1, v33, v47);
    if ((_DWORD)v48 == 1)
    {
      static TimeZone.current.getter(v48);
      sub_10000882C((uint64_t)v32, &qword_1008401F8);
      v49 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
    }
    else
    {
      v49 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
      v49(v36, v32, v33);
    }
    v3 = v97;
    v50 = v102;
    v51 = (uint64_t)v103;
    v52 = v113;
    v49(v114, v36, v33);
  }
  else
  {
    static TimeZone.current.getter(0);
    v50 = v102;
    v51 = (uint64_t)v103;
    v52 = v113;
  }
  v53 = v108;
  v54 = objc_msgSend(v41, "dueDateComponents");
  v109 = v33;
  if (!v54)
  {
    v58 = (uint64_t)v107;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v107, 1, 1, v50);
    goto LABEL_12;
  }
  v55 = v54;
  v56 = v101;
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v54);

  v57 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
  v58 = (uint64_t)v107;
  v57(v107, v56, v50);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v52 + 56))(v58, 0, 1, v50);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v58, 1, v50) == 1)
  {
LABEL_12:
    sub_10000882C(v58, (uint64_t *)&unk_100841610);
    v66 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v115 + 56);
    v67 = v106;
    v66(v106, 1, 1, v3);
    v69 = v104;
    v68 = v105;
    goto LABEL_15;
  }
  v57(v53, (char *)v58, v50);
  v59 = (void *)objc_opt_self(NSDateComponents);
  v60 = v50;
  v61 = v53;
  isa = DateComponents._bridgeToObjectiveC()().super.isa;
  v63 = TimeZone._bridgeToObjectiveC()().super.isa;
  v64 = objc_msgSend(v59, "rem_dateWithDateComponents:timeZone:", isa, v63);

  if (v64)
  {
    v65 = (uint64_t)v98;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v64);

    (*(void (**)(char *, uint64_t))(v113 + 8))(v61, v60);
    v66 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v115 + 56);
    v66(v65, 0, 1, v3);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v113 + 8))(v61, v60);
    v66 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v115 + 56);
    v65 = (uint64_t)v98;
    v66((uint64_t)v98, 1, 1, v3);
  }
  v68 = v105;
  v67 = v106;
  v69 = v104;
  sub_1000CDA74(v65, v106);
LABEL_15:
  v70 = objc_msgSend(v68, "startDate");
  if (!v70)
  {
    v66(v51, 1, 1, v3);
    goto LABEL_20;
  }
  v71 = v70;
  v72 = v112;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v70);

  v73 = v115;
  v74 = *(void (**)(uint64_t, char *, uint64_t))(v115 + 32);
  v74(v51, v72, v3);
  v66(v51, 0, 1, v3);
  v75 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
  if (v75(v51, 1, v3) == 1)
  {
LABEL_20:
    sub_10000882C(v51, (uint64_t *)&unk_1008380D0);
    v77 = 1;
    goto LABEL_21;
  }
  v74((uint64_t)v69, (char *)v51, v3);
  v76 = v99;
  sub_1000CDA2C(v67, v99);
  if (v75(v76, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v115 + 8))(v69, v3);
    sub_10000882C(v76, (uint64_t *)&unk_1008380D0);
    v77 = 0;
  }
  else
  {
    v85 = v69;
    v86 = v95;
    v74((uint64_t)v95, (char *)v76, v3);
    v77 = static Date.< infix(_:_:)(v85, v86);
    v87 = *(void (**)(char *, uint64_t))(v115 + 8);
    v87(v86, v3);
    v87(v85, v3);
  }
LABEL_21:
  v78 = objc_msgSend(v68, "endDate");
  if (!v78)
  {
    v82 = (uint64_t)v110;
    v66((uint64_t)v110, 1, 1, v3);
    goto LABEL_27;
  }
  v79 = v78;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v78);

  v80 = v115;
  v81 = *(void (**)(void))(v115 + 32);
  v82 = (uint64_t)v110;
  v81();
  v66(v82, 0, 1, v3);
  v83 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48);
  if (v83(v82, 1, v3) == 1)
  {
LABEL_27:
    sub_10000882C(v67, (uint64_t *)&unk_1008380D0);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v114, v109);
    sub_10000882C(v82, (uint64_t *)&unk_1008380D0);
    return v77 & 1;
  }
  ((void (*)(char *, uint64_t, uint64_t))v81)(v100, v82, v3);
  if ((v77 & 1) != 0)
  {
    v84 = v96;
    sub_1000CDA2C(v67, v96);
    if (v83(v84, 1, v3) != 1)
    {
      v88 = v94;
      ((void (*)(char *, uint64_t, uint64_t))v81)(v94, v84, v3);
      v89 = sub_100238EA8();
      v90 = v100;
      v77 = dispatch thunk of static Comparable.< infix(_:_:)(v100, v88, v3, v89) ^ 1;
      v91 = *(void (**)(char *, uint64_t))(v115 + 8);
      v91(v88, v3);
      v91(v90, v3);
      sub_10000882C(v67, (uint64_t *)&unk_1008380D0);
      (*(void (**)(char *, uint64_t))(v111 + 8))(v114, v109);
      return v77 & 1;
    }
    (*(void (**)(char *, uint64_t))(v115 + 8))(v100, v3);
    sub_10000882C(v67, (uint64_t *)&unk_1008380D0);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v114, v109);
    sub_10000882C(v84, (uint64_t *)&unk_1008380D0);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v115 + 8))(v100, v3);
    sub_10000882C(v67, (uint64_t *)&unk_1008380D0);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v114, v109);
  }
  v77 = 0;
  return v77 & 1;
}

id sub_1003738DC(uint64_t a1)
{
  return sub_100372914(a1);
}

uint64_t sub_1003738FC(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  _QWORD v31[2];

  v3 = v1;
  v5 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v5);
  v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)v31 - v9;
  v11 = _s10PredicatesOMa(0);
  *(_QWORD *)&v12 = __chkstk_darwin(v11).n128_u64[0];
  v14 = (_QWORD *)((char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = objc_msgSend(v3, "listIDs", v12);
  v16 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

  *v14 = v17;
  v18 = objc_msgSend(v3, "startDate");
  if (v18)
  {
    v19 = v18;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v18);

    v20 = type metadata accessor for Date(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v10, 0, 1, v20);
  }
  else
  {
    v21 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v10, 1, 1, v21);
  }
  v22 = sub_10001A630(&qword_100846680);
  sub_1000CDA74((uint64_t)v10, (uint64_t)v14 + *(int *)(v22 + 48));
  v23 = objc_msgSend(v3, "endDate");
  if (v23)
  {
    v24 = v23;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v23);

    v25 = type metadata accessor for Date(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v7, 0, 1, v25);
  }
  else
  {
    v26 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v7, 1, 1, v26);
  }
  sub_1000CDA74((uint64_t)v7, (uint64_t)v14 + *(int *)(v22 + 64));
  swift_storeEnumTagMultiPayload(v14, v11, 30);
  if (qword_100837260 != -1)
    swift_once(&qword_100837260, sub_10033CFDC);
  v27 = sub_100340EC0((uint64_t)v14, (objc_class *)qword_100871E48, a1, (uint64_t)_swiftEmptyArrayStorage, 0, 0, 0, (uint64_t)_swiftEmptyArrayStorage, 0);
  if (v2)
  {
    sub_10001C744((uint64_t)v14, _s10PredicatesOMa);
  }
  else
  {
    v28 = v27;
    v29 = objc_msgSend((id)objc_opt_self(REMReminderFetchOptions), "defaultFetchOptions");
    a1 = sub_1003D5F00(v28, v29, a1);
    sub_10001C744((uint64_t)v14, _s10PredicatesOMa);
    swift_bridgeObjectRelease();

  }
  return a1;
}

uint64_t sub_100373C1C(uint64_t a1)
{
  return sub_1003738FC(a1);
}

_QWORD *sub_100373C3C(unint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;

  v4 = a1;
  v22 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_18;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v5)
  {
    while (1)
    {
      v6 = 0;
      v7 = v4 & 0xC000000000000001;
      v8 = v4 & 0xFFFFFFFFFFFFFF8;
      v19 = v5;
      v20 = v4;
      while (v7)
      {
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4);
LABEL_9:
        v10 = v9;
        v11 = v6 + 1;
        if (__OFADD__(v6, 1))
          goto LABEL_17;
        v21 = v9;
        v12 = sub_100372FB8(&v21, a2);
        if (v2)
        {
          swift_bridgeObjectRelease();

          swift_release(v22);
          return a2;
        }
        if ((v12 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
          v13 = v8;
          v14 = v22[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
          v15 = v14;
          v8 = v13;
          v16 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v10);
          specialized ContiguousArray._endMutation()(v16);
          v5 = v19;
          v4 = v20;
        }
        else
        {

        }
        ++v6;
        if (v11 == v5)
        {
          a2 = v22;
          goto LABEL_23;
        }
      }
      if (v6 < *(_QWORD *)(v8 + 16))
        break;
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      if (v4 < 0)
        v17 = v4;
      else
        v17 = v4 & 0xFFFFFFFFFFFFFF8;
      v5 = _CocoaArrayWrapper.endIndex.getter(v17);
      if (!v5)
        goto LABEL_22;
    }
    v9 = *(id *)(v4 + 8 * v6 + 32);
    goto LABEL_9;
  }
LABEL_22:
  a2 = _swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease();
  return a2;
}

uint64_t sub_100373DD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Class isa;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v3 = _s10PredicatesOMa_1(0);
  __chkstk_darwin(v3);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload(v5, v6, 29);
  if (qword_1008376D8 != -1)
    swift_once(&qword_1008376D8, sub_1004A7104);
  v7 = qword_1008721E0;
  sub_10000A3AC();
  v9 = (void *)v8;
  v10 = (void *)sub_100358F8C(0, v7, 0, v8);

  if (qword_1008376D0 != -1)
    swift_once(&qword_1008376D0, sub_1004A7024);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v10, "setSortDescriptors:", isa);

  v12 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v13 = a1;
  v14 = NSManagedObjectContext.fetch<A>(_:)(v10, v12);
  if (v1)
  {

    sub_10001C744((uint64_t)v5, _s10PredicatesOMa_1);
  }
  else
  {
    v19[1] = v14;
    v15 = sub_10001A630(&qword_10083FF50);
    v16 = sub_1000EC4D8();
    v17 = Sequence.elements<A>(ofType:)(v12, v15, v12, v16);
    swift_bridgeObjectRelease();

    v13 = sub_10015E568(v17);
    sub_10001C744((uint64_t)v5, _s10PredicatesOMa_1);
    swift_bridgeObjectRelease();
  }
  return v13;
}

uint64_t sub_100373FE4()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(v0, "fileName");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void sub_100374048(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v4;

  if (a2)
  {
    v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v4 = 0;
  }
  objc_msgSend(v2, "setSha512Sum:", v4);

}

id sub_1003740A0@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "template");
  *a2 = result;
  return result;
}

id sub_1003740D8(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setTemplate:", *a1);
}

uint64_t sub_1003740EC(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  _QWORD *v21;
  uint64_t result;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t inited;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[48];
  _QWORD *v60;
  _QWORD *v61;

  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v57 - v9;
  v61 = _swiftEmptyArrayStorage;
  if (a2 < 0)
  {
    KeyPath = swift_getKeyPath(&unk_1006B7718);
    if ((unint64_t)a1 >> 62)
    {
      if (a1 >= 0)
        v56 = a1 & 0xFFFFFFFFFFFFFF8;
      else
        v56 = a1;
      swift_bridgeObjectRetain(a1);
      v20 = _CocoaArrayWrapper.endIndex.getter(v56);
      sub_1001BC180((id)a1, a2);
    }
    else
    {
      v20 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    v21 = _swiftEmptyArrayStorage;
    if (v20)
    {
      v60 = _swiftEmptyArrayStorage;
      result = sub_1001C1BB8(0, v20 & ~(v20 >> 63), 0);
      if (v20 < 0)
      {
        __break(1u);
        return result;
      }
      v58 = KeyPath;
      v23 = 0;
      v21 = v60;
      do
      {
        if ((a1 & 0xC000000000000001) != 0)
          v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, a1);
        else
          v24 = *(id *)(a1 + 8 * v23 + 32);
        v25 = v24;
        v26 = objc_msgSend(v24, "uuid");
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

        v27 = type metadata accessor for UUID(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v7, 0, 1, v27);

        v60 = v21;
        v29 = v21[2];
        v28 = v21[3];
        if (v29 >= v28 >> 1)
        {
          sub_1001C1BB8(v28 > 1, v29 + 1, 1);
          v21 = v60;
        }
        ++v23;
        v21[2] = v29 + 1;
        sub_1000F2CE4((uint64_t)v7, (uint64_t)v21+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v29);
      }
      while (v20 != v23);
      KeyPath = v58;
    }
    v30 = sub_100341990(KeyPath, (uint64_t)v21);
    v31 = swift_release(KeyPath);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v31);
    v33 = v61[2];
    v32 = v61[3];
    if (v33 >= v32 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1);
    v34 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, v30);
    specialized Array._endMutation()(v34);
  }
  else
  {
    v11 = swift_getKeyPath(&unk_1006B7878);
    v12 = objc_msgSend((id)a1, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v12);

    v13 = type metadata accessor for UUID(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v10, 0, 1, v13);
    v14 = sub_1002E7F28(v11, (uint64_t)v10);
    v15 = swift_release(v11);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
    v17 = v61[2];
    v16 = v61[3];
    if (v17 >= v16 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1);
    v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v14);
    specialized Array._endMutation()(v18);
    sub_1001BC180((id)a1, a2);
    if ((a2 & 1) == 0)
      goto LABEL_26;
  }
  v35 = sub_10001CC08(0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v35);
  v37 = v61[2];
  v36 = v61[3];
  if (v37 >= v36 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1);
  v38 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v35);
  specialized Array._endMutation()(v38);
  v39 = sub_10001A630(&qword_100846F98);
  inited = swift_initStackObject(v39, v59);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
  v41 = swift_getKeyPath(&unk_1006B7750);
  v42 = sub_1003419A4(v41);
  swift_release(v41);
  *(_QWORD *)(inited + 32) = v42;
  v43 = swift_getKeyPath(&unk_1006B77A0);
  v44 = sub_1003419C8(v43);
  v45 = swift_release(v43);
  *(_QWORD *)(inited + 40) = v44;
  v60 = (_QWORD *)inited;
  specialized Array._endMutation()(v45);
  v46 = sub_10001CC54(v60);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v46);
  v48 = v61[2];
  v47 = v61[3];
  if (v48 >= v47 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1);
  v49 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v48, v46);
  specialized Array._endMutation()(v49);
LABEL_26:
  v50 = swift_getKeyPath(&unk_1006B7808);
  v51 = sub_1003419C8(v50);
  v52 = swift_release(v50);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v52);
  v54 = v61[2];
  v53 = v61[3];
  if (v54 >= v53 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1);
  v55 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v54, v51);
  specialized Array._endMutation()(v55);
  return sub_10000D2BC(v61);
}

uint64_t sub_100374590()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t result;

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v1 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006A7330;
  sub_1001A54DC();
  KeyPath = swift_getKeyPath(&unk_1006B7750);
  v3 = NSSortDescriptor.init<A, B>(keyPath:ascending:)(KeyPath, 1);
  *(_QWORD *)(v1 + 32) = v3;
  result = specialized Array._endMutation()(v3);
  qword_100871E70 = v1;
  return result;
}

uint64_t sub_100374614()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006A8550;
  sub_1001A54DC();
  KeyPath = swift_getKeyPath(&unk_1006B7900);
  *(_QWORD *)(v1 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)(KeyPath, 1);
  v3 = swift_getKeyPath(&unk_1006B7718);
  v4 = NSSortDescriptor.init<A, B>(keyPath:ascending:)(v3, 1);
  *(_QWORD *)(v1 + 40) = v4;
  result = specialized Array._endMutation()(v4);
  qword_100871E78 = v1;
  return result;
}

void sub_1003746B0()
{
  sub_1001C1B0C(0, 5, 0);
  __asm { BR              X10; loc_100374798 }
}

uint64_t sub_100374B40()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t result;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27[48];

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v0, v27);
  *(_OWORD *)(inited + 16) = xmmword_1006A8550;
  *(_QWORD *)(inited + 32) = swift_getKeyPath(&unk_1006B78C8);
  KeyPath = swift_getKeyPath(&unk_1006B7750);
  *(_QWORD *)(inited + 40) = KeyPath;
  v25 = inited;
  specialized Array._endMutation()(KeyPath);
  if ((inited & 0xC000000000000001) != 0)
  {
    v3 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v25);
    v4 = v3;
  }
  else
  {
    v4 = *(_QWORD *)(v25 + 32);
    v3 = swift_retain();
  }
  v5 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v3);
  if (!v6)
    goto LABEL_18;
  v7 = v5;
  v8 = v6;
  swift_release(v4);
  v9 = _swiftEmptyArrayStorage;
  if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
    v9 = sub_1002C8224(0, _swiftEmptyArrayStorage[2] + 1, 1, _swiftEmptyArrayStorage);
  v11 = v9[2];
  v10 = v9[3];
  if (v11 >= v10 >> 1)
    v9 = sub_1002C8224((_QWORD *)(v10 > 1), v11 + 1, 1, v9);
  v9[2] = v11 + 1;
  v12 = &v9[2 * v11];
  v12[4] = v7;
  v12[5] = v8;
  if ((inited & 0xC000000000000001) != 0)
  {
    v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(1, inited);
    v4 = v13;
  }
  else
  {
    v4 = *(_QWORD *)(inited + 40);
    v13 = swift_retain();
  }
  v14 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v13);
  if (v15)
  {
    v16 = v14;
    v17 = v15;
    swift_release(v4);
    if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
      v9 = sub_1002C8224(0, v9[2] + 1, 1, v9);
    v19 = v9[2];
    v18 = v9[3];
    if (v19 >= v18 >> 1)
      v9 = sub_1002C8224((_QWORD *)(v18 > 1), v19 + 1, 1, v9);
    v9[2] = v19 + 1;
    v20 = &v9[2 * v19];
    v20[4] = v16;
    v20[5] = v17;
    swift_bridgeObjectRelease(inited);
    return (uint64_t)v9;
  }
  else
  {
LABEL_18:
    v25 = 0;
    v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v22._object = (void *)0x80000001006F8C10;
    v22._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v22);
    v24 = v4;
    v23 = sub_10001A630((uint64_t *)&unk_1008437D8);
    _print_unlocked<A, B>(_:_:)(&v24, &v25, v23, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v25, v26, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_100374DD8(uint64_t a1, char a2, uint64_t a3, Class a4, Class isa, Class a6)
{
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  double v13;
  _QWORD *v14;
  uint64_t v15;

  v9 = (void *)sub_1003740EC(a1, a2);
  v10 = type metadata accessor for REMCDTemplateSection();
  v11 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v10), "entity");
  objc_msgSend(v11, "setEntity:", v12);

  objc_msgSend(v11, "setAffectedStores:", 0);
  objc_msgSend(v11, "setPredicate:", v9);

  if (isa)
  {
    v14 = sub_1001DFBD0((uint64_t)isa);
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v13 = swift_bridgeObjectRelease(v14).n128_u64[0];
  }
  objc_msgSend(v11, "setPropertiesToFetch:", isa, v13);

  if (a6)
    a6 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v11, "setRelationshipKeyPathsForPrefetching:", a6);

  if (a4)
  {
    sub_1001A54DC();
    a4 = Array._bridgeToObjectiveC()().super.isa;
  }
  objc_msgSend(v11, "setSortDescriptors:", a4);

  v15 = NSManagedObjectContext.fetch<A>(_:)(v11, v10);
  return v15;
}

uint64_t sub_100374F84@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_identifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_100374FB0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_100839C80, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(void))&UUID._bridgeToObjectiveC(), (SEL *)&selRef_setIdentifier_);
}

const char *sub_100374FE4()
{
  return "template";
}

id sub_100374FF0@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "template");
  *a2 = result;
  return result;
}

id sub_100375028(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setTemplate:", *a1);
}

id sub_10037503C@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "markedForDeletion");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10037506C(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setMarkedForDeletion:", *a1);
}

id sub_100375080@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "account");
  *a2 = result;
  return result;
}

id sub_1003750B8(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setAccount:", *a1);
}

uint64_t sub_1003750D4@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_identifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_100375100(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_100839C80, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(void))&UUID._bridgeToObjectiveC(), (SEL *)&selRef_setIdentifier_);
}

uint64_t sub_100375134@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_creationDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_100375160(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_1008380D0, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t (*)(void))&Date._bridgeToObjectiveC(), (SEL *)&selRef_setCreationDate_);
}

uint64_t sub_100375194(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  __int16 v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v34;

  if (a3 < 0)
  {
    KeyPath = swift_getKeyPath(&unk_1006B79B8);
    v24 = KeyPath;
    if ((a1 & 1) != 0)
      v26 = sub_100342DCC(KeyPath);
    else
      v26 = sub_10034286C(KeyPath);
    goto LABEL_18;
  }
  if ((a3 & 1) != 0)
  {
    v5 = swift_getKeyPath(&unk_1006B79B8);
    v6 = sub_10034286C(v5);
    v7 = swift_release(v5);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v7);
    v9 = _swiftEmptyArrayStorage[2];
    v8 = _swiftEmptyArrayStorage[3];
    if (v9 >= v8 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1);
    v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v6);
    specialized Array._endMutation()(v10);
  }
  v11 = swift_getKeyPath(&unk_1006B79F8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = _swiftEmptyArrayStorage;
  if (v12)
  {
    sub_1001C1F30(0, v12, 0);
    v13 = _swiftEmptyArrayStorage;
    v14 = (unsigned __int8 *)(a1 + 32);
    v15 = _swiftEmptyArrayStorage[2];
    do
    {
      v17 = *v14++;
      v16 = v17;
      v34 = v13;
      v18 = v13[3];
      if (v15 >= v18 >> 1)
      {
        sub_1001C1F30(v18 > 1, v15 + 1, 1);
        v13 = v34;
      }
      v13[2] = v15 + 1;
      *((_WORD *)v13 + v15++ + 16) = v16 + 1;
      --v12;
    }
    while (v12);
  }
  v19 = sub_1003428B4(v11, (uint64_t)v13);
  v20 = swift_release(v11);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
  v22 = _swiftEmptyArrayStorage[2];
  v21 = _swiftEmptyArrayStorage[3];
  if (v22 >= v21 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1);
  v23 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v19);
  specialized Array._endMutation()(v23);
  if (a2)
  {
    v24 = swift_getKeyPath(&unk_1006B7A38);
    v25 = sub_1002A85A4(a2);
    v26 = sub_1003428C8(v24, v25);
LABEL_18:
    v28 = v26;
    v29 = swift_release(v24);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
    v31 = _swiftEmptyArrayStorage[2];
    v30 = _swiftEmptyArrayStorage[3];
    if (v31 >= v30 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1);
    v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v28);
    specialized Array._endMutation()(v32);
  }
  return sub_10000D2BC(_swiftEmptyArrayStorage);
}

id sub_100375408(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  id v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t inited;
  unint64_t v15;
  Class isa;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  Class v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  Class v36;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  _BYTE v42[104];
  __int128 v43;
  __int128 v44;
  _BYTE v45[104];

  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(v1), "entity");
  v5 = objc_msgSend(objc_allocWithZone((Class)NSBatchUpdateRequest), "initWithEntity:", v4);

  *(_QWORD *)&v43 = _swiftEmptyArrayStorage;
  KeyPath = swift_getKeyPath(&unk_1006B79B8);
  v7 = sub_10034286C(KeyPath);
  v8 = swift_release(KeyPath);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v8);
  v10 = _swiftEmptyArrayStorage[2];
  v9 = _swiftEmptyArrayStorage[3];
  if (v10 >= v9 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1);
  v11 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v7);
  specialized Array._endMutation()(v11);
  v12 = (void *)sub_10000D2BC(v43);
  objc_msgSend(v5, "setPredicate:", v12);

  v13 = (id)sub_10001A630(&qword_10083ADC0);
  inited = swift_initStackObject(v13, v45);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  *(_QWORD *)&v43 = 0x656C706D6F437369;
  *((_QWORD *)&v43 + 1) = 0xEB00000000646574;
  AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), &v43, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(inited + 96) = &type metadata for Bool;
  *(_BYTE *)(inited + 72) = 1;
  v15 = sub_1002B007C(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v5, "setPropertiesToUpdate:", isa, swift_bridgeObjectRelease(v15).n128_f64[0]);

  objc_msgSend(v5, "setResultType:", 1);
  v40 = 0;
  v17 = objc_msgSend(a1, "executeRequest:error:", v5, &v40);
  v18 = v40;
  if (v17)
  {
    v19 = v17;
    *((_QWORD *)&v44 + 1) = sub_1000151B0(0, (unint64_t *)&unk_100846CA0, NSPersistentStoreResult_ptr);
    *(_QWORD *)&v43 = v19;
    v20 = sub_1000151B0(0, &qword_1008431A0, NSBatchUpdateResult_ptr);
    v21 = v18;
    throwingCast<A>(_:as:failureMessage:)(&v41, &v43, v20, 0, 0, v20);
    if (v2)
    {

      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v43);
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v43);
      v23 = v41;
      v24 = objc_msgSend(v41, "result");
      if (v24)
      {
        v25 = v24;
        _bridgeAnyObjectToAny(_:)(&v43, v24);
        swift_unknownObjectRelease(v25);
      }
      else
      {
        v43 = 0u;
        v44 = 0u;
      }
      v26 = sub_10001A630((uint64_t *)&unk_100846CB0);
      throwingCast<A>(_:as:failureMessage:)(&v41, &v43, v26, 0, 0, v26);
      sub_1000F4294((uint64_t)&v43);
      v27 = (uint64_t)v41;
      v39 = (id)objc_opt_self(NSManagedObjectContext);
      v28 = swift_initStackObject(v13, v42);
      *(_OWORD *)(v28 + 16) = xmmword_1006A3C00;
      *(_QWORD *)&v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUpdatedObjectsKey);
      *((_QWORD *)&v43 + 1) = v29;
      AnyHashable.init<A>(_:)((_QWORD *)(v28 + 32), &v43, &type metadata for String, &protocol witness table for String);
      *(_QWORD *)(v28 + 96) = v26;
      *(_QWORD *)(v28 + 72) = v27;
      swift_bridgeObjectRetain(v27);
      v30 = sub_1002B007C(v28);
      v31 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v30);
      v32 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v33 = swift_allocObject(v32, 40, 7);
      *(_OWORD *)(v33 + 16) = xmmword_1006A7330;
      *(_QWORD *)(v33 + 32) = a1;
      *(_QWORD *)&v43 = v33;
      specialized Array._endMutation()(v33);
      v34 = v43;
      sub_1000151B0(0, (unint64_t *)&unk_100846CC0, NSManagedObjectContext_ptr);
      v35 = a1;
      v36 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v39, "mergeChangesFromRemoteContextSave:intoContexts:", v31, v36, swift_bridgeObjectRelease(v34).n128_f64[0]);

      if ((unint64_t)v27 >> 62)
      {
        if (v27 < 0)
          v38 = v27;
        else
          v38 = v27 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v27);
        v13 = (id)_CocoaArrayWrapper.endIndex.getter(v38);

        swift_bridgeObjectRelease_n(v27, 2);
      }
      else
      {
        v13 = *(id *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);

        swift_bridgeObjectRelease(v27);
      }
    }
  }
  else
  {
    v13 = v40;
    _convertNSErrorToError(_:)(v18);

    swift_willThrow(v22);
  }
  return v13;
}

uint64_t sub_100375934()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006A8550;
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  KeyPath = swift_getKeyPath(&unk_1006B7948);
  *(_QWORD *)(v1 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)(KeyPath, 0);
  v3 = swift_getKeyPath(&unk_1006B7980);
  v4 = NSSortDescriptor.init<A, B>(keyPath:ascending:)(v3, 1);
  *(_QWORD *)(v1 + 40) = v4;
  result = specialized Array._endMutation()(v4);
  qword_100846FA0 = v1;
  return result;
}

void sub_1003759E0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  Class isa;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;

  KeyPath = swift_getKeyPath(&unk_1006B79B8);
  v2 = sub_10034286C(KeyPath);
  v3 = swift_release(KeyPath);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v3);
  v5 = _swiftEmptyArrayStorage[2];
  v4 = _swiftEmptyArrayStorage[3];
  if (v5 >= v4 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v4 > 1);
  v6 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5, v2);
  specialized Array._endMutation()(v6);
  v7 = (void *)sub_10000D2BC(_swiftEmptyArrayStorage);
  v8 = type metadata accessor for REMCDTemplateOperationQueueItem();
  v9 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v8), "entity");
  objc_msgSend(v9, "setEntity:", v10);

  objc_msgSend(v9, "setAffectedStores:", 0);
  objc_msgSend(v9, "setPredicate:", v7);

  objc_msgSend(v9, "setFetchLimit:", 1);
  if (qword_1008372D0 != -1)
    swift_once(&qword_1008372D0, sub_100375934);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v9, "setSortDescriptors:", isa);

  objc_msgSend(v9, "setReturnsObjectsAsFaults:", 0);
  v12 = NSManagedObjectContext.fetch<A>(_:)(v9, v8);
  if (v0)
  {

    return;
  }
  v13 = v12;
  if ((unint64_t)v12 >> 62)
  {
    if (v12 < 0)
      v15 = v12;
    else
      v15 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v12);
    v16 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease(v13);
    if (!v16)
      goto LABEL_12;
  }
  else if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_12:
    swift_bridgeObjectRelease(v13);

    return;
  }
  if ((v13 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0, v13);
    goto LABEL_12;
  }
  if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v14 = *(id *)(v13 + 32);
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t sub_100375C74(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t inited;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  Class isa;
  uint64_t v12;
  uint64_t v14;
  _BYTE v15[40];

  v4 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v4, v15);
  *(_OWORD *)(inited + 16) = xmmword_1006A7330;
  *(_QWORD *)(inited + 32) = a2;
  v14 = inited;
  specialized Array._endMutation()(inited);
  swift_bridgeObjectRetain(a1);
  v6 = a2;
  v7 = (void *)sub_100375194(a1, v14, 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = type metadata accessor for REMCDTemplateOperationQueueItem();
  v9 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v8), "entity");
  objc_msgSend(v9, "setEntity:", v10);

  objc_msgSend(v9, "setAffectedStores:", 0);
  objc_msgSend(v9, "setPredicate:", v7);

  if (qword_1008372D0 != -1)
    swift_once(&qword_1008372D0, sub_100375934);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v9, "setSortDescriptors:", isa);

  objc_msgSend(v9, "setReturnsObjectsAsFaults:", 0);
  v12 = NSManagedObjectContext.fetch<A>(_:)(v9, v8);

  return v12;
}

id sub_100375E50@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "priorityRawValue");
  *a2 = (_WORD)result;
  return result;
}

id sub_100375E80(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, "setPriorityRawValue:", *a1);
}

uint64_t sub_100375E94@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_creationDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_100375EC0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_1008380D0, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t (*)(void))&Date._bridgeToObjectiveC(), (SEL *)&selRef_setCreationDate_);
}

id sub_100375EF4@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "isCompleted");
  *a2 = (_BYTE)result;
  return result;
}

id sub_100375F24(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setIsCompleted:", *a1);
}

id sub_100375F38@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "operationTypeRawValue");
  *a2 = (_WORD)result;
  return result;
}

id sub_100375F68(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, "setOperationTypeRawValue:", *a1);
}

const char *sub_100375F7C()
{
  return "templateIdentifier";
}

uint64_t sub_100375F88@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_templateIdentifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_100375FB4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_100839C80, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(void))&UUID._bridgeToObjectiveC(), (SEL *)&selRef_setTemplateIdentifier_);
}

BOOL sub_100375FE8(char a1)
{
  uint64_t v2;
  uint64_t inited;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  _BYTE v10[40];

  v2 = sub_10001A630(&qword_100846FA8);
  inited = swift_initStackObject(v2, v10);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  *(_BYTE *)(inited + 32) = a1;
  v4 = (void *)sub_100375194(inited, 0, 1);
  swift_setDeallocating(inited);
  v5 = type metadata accessor for REMCDTemplateOperationQueueItem();
  v6 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v7 = objc_msgSend((id)swift_getObjCClassFromMetadata(v5), "entity");
  objc_msgSend(v6, "setEntity:", v7);

  objc_msgSend(v6, "setAffectedStores:", 0);
  objc_msgSend(v6, "setPredicate:", v4);

  v8 = NSManagedObjectContext.count<A>(for:)(v6, v5);
  return v8 > 0;
}

id sub_100376118(void *a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  unint64_t v28;
  Class isa;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  Class v34;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  _BYTE v39[104];
  __int128 v40;
  __int128 v41;

  *(_QWORD *)&v40 = _swiftEmptyArrayStorage;
  KeyPath = swift_getKeyPath(&unk_1006B79B8);
  v4 = sub_100342DCC(KeyPath);
  v5 = swift_release(KeyPath);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v5);
  v7 = _swiftEmptyArrayStorage[2];
  v6 = _swiftEmptyArrayStorage[3];
  if (v7 >= v6 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1);
  v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v4);
  specialized Array._endMutation()(v8);
  v9 = (id)sub_10000D2BC(v40);
  v10 = sub_1004BB7FC((uint64_t)v9);
  if (v1)
  {

  }
  else
  {
    v12 = (void *)v10;

    v13 = objc_msgSend(objc_allocWithZone((Class)NSBatchDeleteRequest), "initWithFetchRequest:", v12);
    objc_msgSend(v13, "setResultType:", 1);
    v37 = 0;
    v14 = objc_msgSend(a1, "executeRequest:error:", v13, &v37);
    v9 = v37;
    if (v14)
    {
      v15 = v14;
      *((_QWORD *)&v41 + 1) = sub_1000151B0(0, (unint64_t *)&unk_100846CA0, NSPersistentStoreResult_ptr);
      *(_QWORD *)&v40 = v15;
      v16 = sub_1000151B0(0, (unint64_t *)&unk_10083AE80, NSBatchDeleteResult_ptr);
      v17 = v9;
      throwingCast<A>(_:as:failureMessage:)(&v38, &v40, v16, 0, 0, v16);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v40);
      v20 = v38;
      v21 = objc_msgSend(v38, "result");
      if (v21)
      {
        v22 = v21;
        _bridgeAnyObjectToAny(_:)(&v40, v21);
        swift_unknownObjectRelease(v22);
      }
      else
      {
        v40 = 0u;
        v41 = 0u;
      }
      v23 = sub_10001A630((uint64_t *)&unk_100846CB0);
      throwingCast<A>(_:as:failureMessage:)(&v38, &v40, v23, 0, 0, v23);
      sub_1000F4294((uint64_t)&v40);
      v24 = (uint64_t)v38;
      v36 = (id)objc_opt_self(NSManagedObjectContext);
      v25 = sub_10001A630(&qword_10083ADC0);
      inited = swift_initStackObject(v25, v39);
      *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
      *(_QWORD *)&v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSDeletedObjectsKey);
      *((_QWORD *)&v40 + 1) = v27;
      AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), &v40, &type metadata for String, &protocol witness table for String);
      *(_QWORD *)(inited + 96) = v23;
      *(_QWORD *)(inited + 72) = v24;
      swift_bridgeObjectRetain(v24);
      v28 = sub_1002B007C(inited);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v28);
      v30 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v31 = swift_allocObject(v30, 40, 7);
      *(_OWORD *)(v31 + 16) = xmmword_1006A7330;
      *(_QWORD *)(v31 + 32) = a1;
      *(_QWORD *)&v40 = v31;
      specialized Array._endMutation()(v31);
      v32 = v40;
      sub_1000151B0(0, (unint64_t *)&unk_100846CC0, NSManagedObjectContext_ptr);
      v33 = a1;
      v34 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v36, "mergeChangesFromRemoteContextSave:intoContexts:", isa, v34, swift_bridgeObjectRelease(v32).n128_f64[0]);

      if ((unint64_t)v24 >> 62)
      {
        if (v24 < 0)
          v35 = v24;
        else
          v35 = v24 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v24);
        v9 = (id)_CocoaArrayWrapper.endIndex.getter(v35);

        swift_bridgeObjectRelease(v24);
      }
      else
      {
        v9 = *(id *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);

      }
      swift_bridgeObjectRelease(v24);

    }
    else
    {
      v18 = v37;
      _convertNSErrorToError(_:)(v9);

      swift_willThrow(v19);
    }
  }
  return v9;
}

uint64_t sub_100376578()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100846FB0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100846FB0);
  if (qword_100837670 != -1)
    swift_once(&qword_100837670, sub_1004A1934);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872130);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100376608(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  Class v15;
  uint64_t v16;
  objc_class *v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t MetatypeMetadata;
  uint64_t v23;
  unint64_t v24;
  double v25;
  id v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  objc_class *v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  void (*v56)(objc_class *, uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t, double);
  objc_class *v57;
  id v58;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  objc_class *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v5 = (uint64_t)v4;
  v70 = a2;
  v71 = a3;
  v72 = a1;
  v7 = *v4;
  v8 = type metadata accessor for UUID(0);
  v68 = *(_QWORD *)(v8 - 8);
  v69 = v8;
  v9 = *(_QWORD **)(v68 + 64);
  __chkstk_darwin(v8);
  v74 = (char *)&v60 - (((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v75 = *(_QWORD *)(v10 - 8);
  v76 = v10;
  v11 = *(_QWORD *)(v75 + 64);
  __chkstk_darwin(v10);
  v67 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v73 = (char *)&v60 - v13;
  v14 = (char *)v4 + OBJC_IVAR____TtC7remindd41RDTemplateOperationDownloadPublicTemplate_publicLinkURLUUID;
  v15 = sub_1000D6C38((uint64_t)v4 + OBJC_IVAR____TtC7remindd41RDTemplateOperationDownloadPublicTemplate_publicLinkURLUUID);
  if (qword_1008372D8 != -1)
    swift_once(&qword_1008372D8, sub_100376578);
  v16 = type metadata accessor for Logger(0);
  sub_10001AAA8(v16, (uint64_t)qword_100846FB0);
  v17 = v15;
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  v20 = os_log_type_enabled(v18, v19);
  v65 = v7;
  v66 = v17;
  if (v20)
  {
    v21 = swift_slowAlloc(22, -1);
    v62 = swift_slowAlloc(64, -1);
    v77 = v62;
    v78 = v7;
    *(_DWORD *)v21 = 136446466;
    v63 = v9;
    MetatypeMetadata = swift_getMetatypeMetadata(v7);
    v64 = v5;
    v23 = String.init<A>(describing:)(&v78, MetatypeMetadata);
    v78 = sub_10001A820(v23, v24, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79);
    *(_QWORD *)&v25 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v21 + 12) = 2082;
    v61 = v21 + 14;
    v26 = -[objc_class recordName](v17, "recordName", v25);
    v27 = v11;
    v28 = v14;
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v31 = v30;

    v9 = v63;
    v32 = v29;
    v14 = v28;
    v11 = v27;
    v78 = sub_10001A820(v32, v31, &v77);
    v5 = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s: Start execution {recordName: %{public}s}", (uint8_t *)v21, 0x16u);
    v33 = v62;
    swift_arrayDestroy(v62, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {

  }
  v35 = v73;
  Date.init()(v34);
  v36 = *(_QWORD *)(v5
                  + OBJC_IVAR____TtC7remindd41RDTemplateOperationDownloadPublicTemplate_publicCloudDatabaseController
                  + 32);
  v64 = *(_QWORD *)(v5
                  + OBJC_IVAR____TtC7remindd41RDTemplateOperationDownloadPublicTemplate_publicCloudDatabaseController
                  + 24);
  v61 = v36;
  v63 = sub_10000A388((_QWORD *)(v5+ OBJC_IVAR____TtC7remindd41RDTemplateOperationDownloadPublicTemplate_publicCloudDatabaseController), v64);
  v62 = type metadata accessor for RDPublicTemplate(0);
  v37 = v75;
  v38 = v67;
  (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v67, v35, v76);
  v40 = v68;
  v39 = v69;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v74, v14, v69);
  v41 = *(unsigned __int8 *)(v37 + 80);
  v42 = (v41 + 24) & ~v41;
  v43 = *(unsigned __int8 *)(v40 + 80);
  v44 = (v11 + v43 + v42) & ~v43;
  v45 = ((unint64_t)v9 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
  v60 = (v45 + 23) & 0xFFFFFFFFFFFFFFF8;
  v46 = (v45 + 39) & 0xFFFFFFFFFFFFFFF8;
  v47 = swift_allocObject(&unk_1007F0780, v46 + 8, v41 | v43 | 7);
  v48 = v66;
  *(_QWORD *)(v47 + 16) = v66;
  v49 = v38;
  v50 = v76;
  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v47 + v42, v49, v76);
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v47 + v44, v74, v39);
  v51 = (_QWORD *)(v47 + v45);
  v52 = v71;
  *v51 = v70;
  v51[1] = v52;
  v53 = v47 + v60;
  v54 = v72;
  *(_QWORD *)v53 = v72;
  *(_BYTE *)(v53 + 8) = 0;
  *(_QWORD *)(v47 + v46) = v65;
  v55 = v61;
  v56 = *(void (**)(objc_class *, uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t, double))(v61 + 24);
  v57 = v48;
  swift_retain();
  v58 = v54;
  v56(v57, v62, sub_1003785F8, v47, v62, &off_1007E3118, v64, v55, a4);

  swift_release(v47);
  return (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v73, v50);
}

uint64_t sub_100376A94(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD), uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  id v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t MetatypeMetadata;
  uint64_t v27;
  unint64_t v28;
  double v29;
  id v30;
  uint64_t v31;
  uint64_t (*v32)(_QWORD, _QWORD);
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  double v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  os_log_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v49 = a2;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v47 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v42 - v16;
  if (qword_1008372D8 != -1)
    swift_once(&qword_1008372D8, sub_100376578);
  v18 = type metadata accessor for Logger(0);
  sub_10001AAA8(v18, (uint64_t)qword_100846FB0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v17, a4, v12);
  v19 = a3;
  v48 = v13;
  v20 = v19;
  v21 = Logger.logObject.getter(v19);
  v22 = static os_log_type_t.default.getter(v21);
  v23 = v22;
  if (os_log_type_enabled(v21, v22))
  {
    v24 = swift_slowAlloc(32, -1);
    v46 = a1;
    v25 = v24;
    v45 = swift_slowAlloc(64, -1);
    v50 = v45;
    v51 = a7;
    *(_DWORD *)v25 = 136446722;
    v44 = v23;
    MetatypeMetadata = swift_getMetatypeMetadata(a7);
    v43 = v21;
    v27 = String.init<A>(describing:)(&v51, MetatypeMetadata);
    v51 = sub_10001A820(v27, v28, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
    *(_QWORD *)&v29 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v25 + 12) = 2082;
    v30 = objc_msgSend(v20, "recordName", v29, v25 + 14);
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v32 = a5;
    v34 = v33;

    v51 = sub_10001A820(v31, v34, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);

    a5 = v32;
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 22) = 2048;
    v35 = v47;
    Date.init()(v36);
    v37 = Date.timeIntervalSince(_:)(v17);
    v38 = *(void (**)(char *, uint64_t))(v48 + 8);
    v38(v35, v12);
    v51 = *(_QWORD *)&v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
    v38(v17, v12);
    v21 = v43;
    _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v44, "%{public}s: Finished execution {recordName: %{public}s, elapsedSeconds: %f}", (uint8_t *)v25, 0x20u);
    v39 = v45;
    swift_arrayDestroy(v45, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    v40 = v25;
    a1 = v46;
    swift_slowDealloc(v40, -1, -1);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v48 + 8))(v17, v12);
  }

  return a5(a1, v49 & 1);
}

uint64_t sub_100376DE4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD), uint64_t a6, void *a7, int a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  int v39;
  uint64_t v40;
  uint64_t MetatypeMetadata;
  uint64_t v42;
  unint64_t v43;
  double v44;
  id v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  double v55;
  void (*v56)(char *, uint64_t);
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  NSObject *v63;
  os_log_type_t v64;
  int v65;
  _BOOL4 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  double v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  double v79;
  void (*v80)(char *, uint64_t);
  os_log_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  void *ObjCClassFromMetadata;
  Class isa;
  id v94;
  id v95;
  uint64_t v96;
  int v97;
  os_log_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char v102;
  void *v103;
  uint64_t v104;
  void *v105;
  Class v106;
  id v107;
  id v108;
  id v109;
  uint64_t result;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  void *v124;
  void *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  id v131;
  id v132;
  void *v133;
  uint64_t v134;
  id v135;
  id v136;
  id v137;
  uint64_t v138;
  os_log_t v139;
  int v140;
  uint64_t v141;
  void (*v142)(char *, uint64_t, uint64_t);
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  os_log_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t (*v157)(_QWORD, _QWORD);
  uint64_t v158;
  char *v159;
  double v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  double aBlock;
  uint64_t v165;
  uint64_t (*v166)(uint64_t);
  void *v167;
  void *v168;
  uint64_t v169;
  _QWORD v170[3];
  char v171[8];
  char *v172;

  v149 = a8;
  v150 = a7;
  v157 = a5;
  v158 = a6;
  v154 = a4;
  v162 = a3;
  v160 = *(double *)&a9;
  v148 = type metadata accessor for UUID(0);
  v147 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148);
  v146 = v11;
  v156 = (char *)&v138 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v12);
  v152 = (uint64_t)&v138 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = type metadata accessor for Date(0);
  v163 = *(_QWORD *)(v161 - 8);
  v14 = *(_QWORD *)(v163 + 64);
  __chkstk_darwin(v161);
  v15 = (char *)&v138 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v153 = (os_log_t)((char *)&v138 - v17);
  __chkstk_darwin(v18);
  v159 = (char *)&v138 - v19;
  __chkstk_darwin(v20);
  v22 = (char *)&v138 - v21;
  v151 = type metadata accessor for RDPublicTemplate(0);
  v145 = *(_QWORD *)(v151 - 8);
  v23 = *(_QWORD *)(v145 + 64);
  __chkstk_darwin(v151);
  v155 = (uint64_t)&v138 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v26 = (char *)&v138 - v25;
  v27 = sub_10001A630(&qword_1008470A0);
  __chkstk_darwin(v27);
  v29 = (void **)((char *)&v138 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100008868(a1, (uint64_t)v29, &qword_1008470A0);
  if (swift_getEnumCaseMultiPayload(v29, v27) == 1)
  {
    v30 = *v29;
    if (qword_1008372D8 != -1)
      swift_once(&qword_1008372D8, sub_100376578);
    v31 = type metadata accessor for Logger(0);
    sub_10001AAA8(v31, (uint64_t)qword_100846FB0);
    v32 = v163;
    v33 = v161;
    (*(void (**)(char *, uint64_t, uint64_t))(v163 + 16))(v15, v162, v161);
    v34 = a2;
    swift_errorRetain(v30);
    v35 = v34;
    v36 = swift_errorRetain(v30);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter(v37);
    v39 = v38;
    if (os_log_type_enabled(v37, v38))
    {
      v40 = swift_slowAlloc(42, -1);
      v156 = (char *)swift_slowAlloc(96, -1);
      v172 = v156;
      *(_DWORD *)v40 = 136446978;
      LODWORD(v155) = v39;
      aBlock = v160;
      MetatypeMetadata = swift_getMetatypeMetadata(*(_QWORD *)&v160);
      v153 = v37;
      v42 = String.init<A>(describing:)(&aBlock, MetatypeMetadata);
      aBlock = COERCE_DOUBLE(sub_10001A820(v42, v43, (uint64_t *)&v172));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v165);
      *(_QWORD *)&v44 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v40 + 12) = 2082;
      v45 = objc_msgSend(v35, "recordName", v44);
      v46 = v35;
      v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      v49 = v48;

      v50 = v47;
      v35 = v46;
      aBlock = COERCE_DOUBLE(sub_10001A820(v50, v49, (uint64_t *)&v172));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v165);

      swift_bridgeObjectRelease();
      *(_WORD *)(v40 + 22) = 2082;
      swift_getErrorValue(v30, v171, v170);
      v51 = Error.rem_errorDescription.getter(v170[1], v170[2]);
      aBlock = COERCE_DOUBLE(sub_10001A820(v51, v52, (uint64_t *)&v172));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v165);
      swift_bridgeObjectRelease();
      swift_errorRelease(v30);
      v53 = swift_errorRelease(v30);
      *(_WORD *)(v40 + 32) = 2048;
      v54 = v159;
      Date.init()(v53);
      v55 = Date.timeIntervalSince(_:)(v15);
      v56 = *(void (**)(char *, uint64_t))(v163 + 8);
      v56(v54, v33);
      aBlock = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v165);
      v56(v15, v33);
      v37 = v153;
      _os_log_impl((void *)&_mh_execute_header, v153, (os_log_type_t)v155, "%{public}s: Failed to download public template {recordName: %{public}s, error: %{public}s, elapsedSeconds: %f}", (uint8_t *)v40, 0x2Au);
      v57 = v156;
      swift_arrayDestroy(v156, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v40, -1, -1);
    }
    else
    {

      swift_errorRelease(v30);
      swift_errorRelease(v30);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v15, v33);
    }

    v84 = v158;
    aBlock = *(double *)&v30;
    swift_errorRetain(v30);
    v85 = sub_10001A630((uint64_t *)&unk_10083AA20);
    type metadata accessor for CKError(0);
    v87 = v86;
    if (swift_dynamicCast(&v172, &aBlock, v85, v86, 6))
    {
      v88 = v172;
      v89 = sub_1003786AC();
      _BridgedStoredNSError.code.getter(&aBlock, v87, v89);
      if (*(_QWORD *)&aBlock == 4)
      {
        v95 = objc_msgSend((id)objc_opt_self(REMError), "internetNotReachableError");
        goto LABEL_26;
      }
      if (*(_QWORD *)&aBlock == 11)
      {
        v90 = (void *)objc_opt_self(REMError);
        v91 = type metadata accessor for REMCDTemplate();
        ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v91);
        isa = UUID._bridgeToObjectiveC()().super.isa;
        v94 = objc_msgSend(ObjCClassFromMetadata, "objectIDWithUUID:", isa);

        v95 = objc_msgSend(v90, "noSuchObjectErrorWithObjectID:", v94);
LABEL_26:

        v137 = v95;
LABEL_29:
        swift_errorRetain(v95);
        sub_100376A94((uint64_t)v95, 1, v35, v162, v157, v84, *(uint64_t *)&v160);
        swift_errorRelease(v137);
        swift_errorRelease(v30);
        return swift_errorRelease(v95);
      }

    }
    v137 = 0;
    v95 = v30;
    goto LABEL_29;
  }
  sub_1003786F4((uint64_t)v29, (uint64_t)v26);
  v58 = (uint64_t)v26;
  if (qword_1008372D8 != -1)
    swift_once(&qword_1008372D8, sub_100376578);
  v59 = type metadata accessor for Logger(0);
  sub_10001AAA8(v59, (uint64_t)qword_100846FB0);
  v60 = v163;
  v61 = v161;
  v142 = *(void (**)(char *, uint64_t, uint64_t))(v163 + 16);
  v142(v22, v162, v161);
  v62 = a2;
  v63 = Logger.logObject.getter(v62);
  v64 = static os_log_type_t.default.getter(v63);
  v65 = v64;
  v66 = os_log_type_enabled(v63, v64);
  v143 = v62;
  v144 = v58;
  if (v66)
  {
    v67 = swift_slowAlloc(32, -1);
    v141 = swift_slowAlloc(64, -1);
    v172 = (char *)v141;
    *(_DWORD *)v67 = 136446722;
    v140 = v65;
    aBlock = v160;
    v68 = swift_getMetatypeMetadata(*(_QWORD *)&v160);
    v69 = String.init<A>(describing:)(&aBlock, v68);
    aBlock = COERCE_DOUBLE(sub_10001A820(v69, v70, (uint64_t *)&v172));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v165);
    *(_QWORD *)&v71 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v67 + 12) = 2082;
    v72 = objc_msgSend(v62, "recordName", v71);
    v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
    v139 = v63;
    v74 = v73;
    v76 = v75;

    aBlock = COERCE_DOUBLE(sub_10001A820(v74, v76, (uint64_t *)&v172));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v165);

    v61 = v161;
    swift_bridgeObjectRelease();
    *(_WORD *)(v67 + 22) = 2048;
    v77 = v159;
    Date.init()(v78);
    v79 = Date.timeIntervalSince(_:)(v22);
    v80 = *(void (**)(char *, uint64_t))(v163 + 8);
    v80(v77, v61);
    aBlock = v79;
    v60 = v163;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v165);
    v80(v22, v61);
    v81 = v139;
    _os_log_impl((void *)&_mh_execute_header, v139, (os_log_type_t)v140, "%{public}s: Downloaded public template {recordName: %{public}s, elapsedSeconds: %f}", (uint8_t *)v67, 0x20u);
    v82 = v141;
    swift_arrayDestroy(v141, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v82, -1, -1);
    v83 = v67;
    v58 = v144;
    swift_slowDealloc(v83, -1, -1);

  }
  else
  {

    v80 = *(void (**)(char *, uint64_t))(v60 + 8);
    v80(v22, v61);

  }
  v96 = v152;
  sub_100008868(v58 + *(int *)(v151 + 36), v152, (uint64_t *)&unk_1008380D0);
  v97 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v96, 1, v61);
  v98 = v153;
  if (v97 == 1)
  {
    v99 = v61;
    sub_1000EA320(v96);
  }
  else
  {
    v100 = (*(uint64_t (**)(os_log_t, uint64_t, uint64_t))(v60 + 32))(v153, v96, v61);
    v101 = v159;
    static Date.now.getter(v100);
    v102 = static Date.< infix(_:_:)(v98, v101);
    v80(v101, v61);
    if ((v102 & 1) != 0)
    {
      v103 = (void *)objc_opt_self(REMError);
      v104 = type metadata accessor for REMCDTemplate();
      v105 = (void *)swift_getObjCClassFromMetadata(v104);
      v106 = UUID._bridgeToObjectiveC()().super.isa;
      v107 = objc_msgSend(v105, "objectIDWithUUID:", v106);

      v108 = objc_msgSend(v103, "noSuchObjectErrorWithObjectID:", v107);
      v109 = v108;
      sub_100376A94((uint64_t)v108, 1, v143, v162, v157, v158, *(uint64_t *)&v160);

      v80((char *)v98, v61);
      return sub_10030DBA4(v58);
    }
    v99 = v61;
    v80((char *)v98, v61);
  }
  v111 = v147;
  v112 = v148;
  (*(void (**)(char *, uint64_t, uint64_t))(v147 + 16))(v156, v154, v148);
  sub_100378738(v58, v155);
  v142(v159, v162, v99);
  v113 = *(unsigned __int8 *)(v111 + 80);
  v114 = (v113 + 16) & ~v113;
  v115 = (v146 + v114 + 7) & 0xFFFFFFFFFFFFFFF8;
  v116 = *(unsigned __int8 *)(v145 + 80);
  v117 = (v116 + v115 + 8) & ~v116;
  v118 = (v23 + v117 + 7) & 0xFFFFFFFFFFFFFFF8;
  v119 = *(unsigned __int8 *)(v60 + 80);
  v120 = (v119 + v118 + 8) & ~v119;
  v121 = (v14 + v120 + 7) & 0xFFFFFFFFFFFFFFF8;
  v122 = (v121 + 23) & 0xFFFFFFFFFFFFFFF8;
  v123 = swift_allocObject(&unk_1007F07A8, v122 + 8, v113 | v116 | v119 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v111 + 32))(v123 + v114, v156, v112);
  v124 = v150;
  *(_QWORD *)(v123 + v115) = v150;
  sub_1003786F4(v155, v123 + v117);
  v125 = v143;
  *(_QWORD *)(v123 + v118) = v143;
  (*(void (**)(uint64_t, char *, uint64_t))(v163 + 32))(v123 + v120, v159, v161);
  v126 = (_QWORD *)(v123 + v121);
  v127 = v158;
  *v126 = v157;
  v126[1] = v127;
  *(double *)(v123 + v122) = v160;
  if ((v149 & 1) != 0)
  {
    v128 = swift_allocObject(&unk_1007F07F8, 32, 7);
    *(_QWORD *)(v128 + 16) = sub_100378970;
    *(_QWORD *)(v128 + 24) = v123;
    v168 = sub_1000098E4;
    v169 = v128;
    aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
    v165 = 1107296256;
    v166 = sub_1000098C4;
    v167 = &unk_1007F0810;
    v129 = _Block_copy(&aBlock);
    v130 = v169;
    v131 = v125;
    v132 = v124;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release(v130);
    objc_msgSend(v132, "performBlockAndWait:", v129);
    _Block_release(v129);
    sub_10030DBA4(v144);
    LOBYTE(v129) = swift_isEscapingClosureAtFileLocation(v128, "", 143, 83, 57, 1);
    swift_release_n(v123);
    result = swift_release(v128);
    if ((v129 & 1) == 0)
      return result;
    __break(1u);
  }
  v168 = sub_100378970;
  v169 = v123;
  aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
  v165 = 1107296256;
  v166 = sub_1000094C8;
  v167 = &unk_1007F07C0;
  v133 = _Block_copy(&aBlock);
  v134 = v169;
  v135 = v125;
  v136 = v124;
  swift_retain();
  swift_retain();
  swift_release(v134);
  objc_msgSend(v136, "performBlock:", v133);
  _Block_release(v133);
  sub_10030DBA4(v144);
  return swift_release(v123);
}

void sub_100377BD8(uint64_t a1, void *a2, _QWORD *a3, void *a4, uint64_t a5, uint64_t (*a6)(_QWORD, _QWORD), uint64_t a7, void *a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  NSObject *v22;
  unsigned int v23;
  double v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t MetatypeMetadata;
  uint64_t v36;
  unint64_t v37;
  double v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  double v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  uint64_t v50;
  os_log_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  id v57;
  id v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  double v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  double v77;
  void (*v78)(char *, uint64_t);
  char *v79;
  uint64_t v80;
  NSObject *v81;
  void *v82;
  NSObject *v83;
  id v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  void *v88;
  uint64_t ObjCClassFromMetadata;
  NSString v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  os_log_t v94;
  id v95;
  NSObject *v96;
  uint64_t v97;
  char *v98;
  uint64_t (*v99)(_QWORD, _QWORD);
  uint64_t v100;
  double v101;
  uint64_t v102;
  _QWORD v103[3];
  char v104[16];
  double v105;
  os_log_t v106;

  v100 = a7;
  v101 = *(double *)&a8;
  v99 = a6;
  v102 = a5;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v98 = (char *)&v92 - v17;
  __chkstk_darwin(v18);
  v20 = (char *)&v92 - v19;
  v21 = v15;
  v22 = sub_100369840(a1, (uint64_t)a2);
  sub_10057AFEC(a3);
  v96 = v22;
  v105 = 0.0;
  v23 = objc_msgSend(a2, "save:", &v105);
  v24 = v105;
  if (v23)
  {
    v25 = qword_1008372D8;
    v26 = *(id *)&v105;
    v27 = v12;
    if (v25 != -1)
      swift_once(&qword_1008372D8, sub_100376578);
    v28 = type metadata accessor for Logger(0);
    sub_10001AAA8(v28, (uint64_t)qword_100846FB0);
    v29 = v13;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v20, v102, v27);
    v95 = a4;
    v30 = Logger.logObject.getter(v95);
    v31 = static os_log_type_t.default.getter(v30);
    v32 = v31;
    if (os_log_type_enabled(v30, v31))
    {
      v33 = swift_slowAlloc(32, -1);
      LODWORD(v93) = v32;
      v34 = v33;
      v94 = (os_log_t)swift_slowAlloc(64, -1);
      v106 = v94;
      *(_DWORD *)v34 = 136446722;
      v105 = v101;
      MetatypeMetadata = swift_getMetatypeMetadata(*(_QWORD *)&v101);
      v36 = String.init<A>(describing:)(&v105, MetatypeMetadata);
      v105 = COERCE_DOUBLE(sub_10001A820(v36, v37, (uint64_t *)&v106));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106);
      *(_QWORD *)&v38 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v34 + 12) = 2082;
      v39 = v95;
      v40 = objc_msgSend(v95, "recordName", v38);
      v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
      v97 = v27;
      v42 = v41;
      v44 = v43;

      v105 = COERCE_DOUBLE(sub_10001A820(v42, v44, (uint64_t *)&v106));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106);

      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 22) = 2048;
      v45 = v98;
      Date.init()(v46);
      v47 = Date.timeIntervalSince(_:)(v20);
      v48 = *(void (**)(char *, uint64_t))(v29 + 8);
      v49 = v45;
      v50 = v97;
      v48(v49, v97);
      v105 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106);
      v48(v20, v50);
      _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v93, "%{public}s: Saved public template in cache {recordName: %{public}s, elapsedSeconds: %f}", (uint8_t *)v34, 0x20u);
      v51 = v94;
      swift_arrayDestroy(v94, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v34, -1, -1);
    }
    else
    {
      v82 = v95;

      (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v27);
    }

    v83 = v96;
    v84 = sub_10057B2FC();
    if (v84)
    {
      v85 = (uint64_t)v84;
      v86 = v84;
      sub_100376A94(v85, 0, v95, v102, v99, v100, *(uint64_t *)&v101);

    }
    else
    {
      v87 = type metadata accessor for REMCDPublicTemplate();
      v88 = (void *)objc_opt_self(REMError);
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v87);
      v90 = String._bridgeToObjectiveC()();
      v91 = objc_msgSend(v88, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v90);

      sub_100376A94((uint64_t)v91, 1, v95, v102, v99, v100, *(uint64_t *)&v101);
    }

  }
  else
  {
    v52 = *(id *)&v105;
    v53 = _convertNSErrorToError(_:)(*(_QWORD *)&v24);

    swift_willThrow(v54);
    v55 = v21;
    if (qword_1008372D8 != -1)
      swift_once(&qword_1008372D8, sub_100376578);
    v56 = type metadata accessor for Logger(0);
    sub_10001AAA8(v56, (uint64_t)qword_100846FB0);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v21, v102, v12);
    v57 = a4;
    swift_errorRetain(v53);
    v58 = v57;
    v59 = swift_errorRetain(v53);
    v60 = Logger.logObject.getter(v59);
    v61 = static os_log_type_t.error.getter(v60);
    v62 = v61;
    if (os_log_type_enabled(v60, v61))
    {
      v63 = swift_slowAlloc(42, -1);
      v96 = swift_slowAlloc(96, -1);
      v106 = v96;
      *(_DWORD *)v63 = 136446978;
      LODWORD(v95) = v62;
      v105 = v101;
      v64 = swift_getMetatypeMetadata(*(_QWORD *)&v101);
      v94 = v60;
      v65 = String.init<A>(describing:)(&v105, v64);
      v93 = v13;
      v105 = COERCE_DOUBLE(sub_10001A820(v65, v66, (uint64_t *)&v106));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106);
      *(_QWORD *)&v67 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v63 + 12) = 2082;
      v68 = objc_msgSend(v58, "recordName", v67);
      v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
      v97 = v12;
      v70 = v69;
      v72 = v71;

      v105 = COERCE_DOUBLE(sub_10001A820(v70, v72, (uint64_t *)&v106));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106);

      swift_bridgeObjectRelease();
      *(_WORD *)(v63 + 22) = 2082;
      swift_getErrorValue(v53, v104, v103);
      v73 = Error.rem_errorDescription.getter(v103[1], v103[2]);
      v105 = COERCE_DOUBLE(sub_10001A820(v73, v74, (uint64_t *)&v106));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106);
      swift_bridgeObjectRelease();
      swift_errorRelease(v53);
      v75 = swift_errorRelease(v53);
      *(_WORD *)(v63 + 32) = 2048;
      v76 = v98;
      Date.init()(v75);
      v77 = Date.timeIntervalSince(_:)(v55);
      v78 = *(void (**)(char *, uint64_t))(v93 + 8);
      v79 = v76;
      v80 = v97;
      v78(v79, v97);
      v105 = v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106);
      v78(v55, v80);
      v60 = v94;
      _os_log_impl((void *)&_mh_execute_header, v94, (os_log_type_t)v95, "%{public}s: Failed to save public template in cache {recordName: %{public}s, error: %{public}s, elapsedSeconds: %f}", (uint8_t *)v63, 0x2Au);
      v81 = v96;
      swift_arrayDestroy(v96, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v81, -1, -1);
      swift_slowDealloc(v63, -1, -1);
    }
    else
    {

      swift_errorRelease(v53);
      swift_errorRelease(v53);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v21, v12);
    }

    swift_errorRetain(v53);
    sub_100376A94(v53, 1, v58, v102, v99, v100, *(uint64_t *)&v101);
    swift_errorRelease(v53);
    swift_errorRelease(v53);
  }
}

uint64_t sub_1003783DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC7remindd41RDTemplateOperationDownloadPublicTemplate_publicLinkURLUUID;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + OBJC_IVAR____TtC7remindd41RDTemplateOperationDownloadPublicTemplate_publicCloudDatabaseController));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10037843C()
{
  return type metadata accessor for RDTemplateOperationDownloadPublicTemplate(0);
}

uint64_t type metadata accessor for RDTemplateOperationDownloadPublicTemplate(uint64_t a1)
{
  uint64_t result;

  result = qword_100847008;
  if (!qword_100847008)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDTemplateOperationDownloadPublicTemplate);
  return result;
}

uint64_t sub_100378480(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "(";
    v4[2] = &unk_1006B7AA8;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100378500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v12 = v3 | v8 | 7;
  v10 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_release(*(_QWORD *)(v0 + v10 + 8));

  return swift_deallocObject(v0, ((v10 + 39) & 0xFFFFFFFFFFFFFFF8) + 8, v12);
}

uint64_t sub_1003785F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100376DE4(a1, *(void **)(v1 + 16), v1 + v4, v1 + v7, *(uint64_t (**)(_QWORD, _QWORD))(v1 + v8), *(_QWORD *)(v1 + v8 + 8), *(void **)(v1 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8)), *(unsigned __int8 *)(v1 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v1 + ((v8 + 39) & 0xFFFFFFFFFFFFF8)));
}

unint64_t sub_1003786AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008382B0;
  if (!qword_1008382B0)
  {
    type metadata accessor for CKError(255);
    result = swift_getWitnessTable(&unk_1006A5000, v1);
    atomic_store(result, (unint64_t *)&qword_1008382B0);
  }
  return result;
}

uint64_t sub_1003786F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RDPublicTemplate(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100378738(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RDPublicTemplate(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10037877C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  __n128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v22 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v22 + 16) & ~v22;
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = type metadata accessor for RDPublicTemplate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v20 = *(_QWORD *)(v6 + 64);
  v21 = *(unsigned __int8 *)(v6 + 80);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v19 = *(_QWORD *)(v9 + 64);
  v11 = v0 + v3;
  v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v11, v1);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13 = swift_bridgeObjectRelease();
  ((void (*)(unint64_t, uint64_t, __n128))v12)(v0 + v7 + *(int *)(v5 + 32), v1, v13);
  v14 = v0 + v7 + *(int *)(v5 + 36);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8))
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v14, v8);
  v15 = (v20 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v10 + v15 + 8) & ~v10;
  v17 = (v19 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v16, v8);
  swift_release(*(_QWORD *)(v0 + v17 + 8));
  return swift_deallocObject(v0, ((v17 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v22 | v21 | v10 | 7);
}

void sub_100378970()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)(type metadata accessor for RDPublicTemplate(0) - 8);
  v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + v6 + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100377BD8(v0 + v2, *(void **)(v0 + v3), (_QWORD *)(v0 + v5), *(void **)(v0 + v6), v0 + v8, *(uint64_t (**)(_QWORD, _QWORD))(v0 + v9), *(_QWORD *)(v0 + v9 + 8), *(void **)(v0 + ((v9 + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100378A40()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100378A58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008470A8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008470A8);
  if (qword_100837608 != -1)
    swift_once(&qword_100837608, sub_1004A17C8);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_UNKNOWN **static REMCDRecurrenceRule.recordTypes()()
{
  return &off_1007E0960;
}

uint64_t static REMCDRecurrenceRule.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  id v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t result;

  v7 = a1;
  swift_bridgeObjectRetain(a3);
  v8 = a4;
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v10 = objc_msgSend((id)objc_opt_self(REMCDRecurrenceRule), "objectWithRecordID:accountID:context:", v7, v9, v8);

  if (v10)
  {
    result = swift_dynamicCastUnknownClass(v10, v4);
    if (result)
      return result;

  }
  return 0;
}

id static REMCDRecurrenceRule.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v8;
  NSString v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t MetatypeMetadata;
  uint64_t v20;
  unint64_t v21;
  double v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = v3;
  v8 = objc_msgSend(a1, "recordID");
  v9 = objc_msgSend(v8, "recordName");

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "newObjectWithCKRecordName:context:account:", v9, a3, a2);

  if (v10)
  {
    v11 = objc_msgSend(a2, "ckIdentifier");
    if (v11)
    {
      v12 = v11;
      objc_msgSend(v10, "mergeDataFromRecord:accountID:", a1, v11);

      objc_msgSend(v10, "setCkServerRecord:", a1);
      objc_msgSend(v10, "setInCloud:", 1);
      objc_msgSend(v10, "updateParentReferenceIfNecessary");
    }
    else
    {
      if (qword_1008372E0 != -1)
        swift_once(&qword_1008372E0, sub_100378A58);
      v13 = type metadata accessor for Logger(0);
      sub_10001AAA8(v13, (uint64_t)qword_1008470A8);
      v14 = a2;
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = swift_slowAlloc(22, -1);
        v18 = swift_slowAlloc(64, -1);
        v30 = v18;
        v31 = v4;
        *(_DWORD *)v17 = 136446466;
        MetatypeMetadata = swift_getMetatypeMetadata(v4);
        v20 = String.init<A>(describing:)(&v31, MetatypeMetadata);
        v31 = sub_10001A820(v20, v21, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
        *(_QWORD *)&v22 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v17 + 12) = 2082;
        v23 = objc_msgSend(v14, "remObjectID", v22, v30);
        if (v23)
        {
          v24 = v23;
          v25 = objc_msgSend(v23, "description");

          v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
          v28 = v27;

        }
        else
        {
          v28 = 0xE300000000000000;
          v26 = 7104878;
        }
        v31 = sub_10001A820(v26, v28, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v18, -1, -1);
        swift_slowDealloc(v17, -1, -1);

      }
      else
      {

      }
      return 0;
    }
  }
  return v10;
}

Swift::String __swiftcall REMCDRecurrenceRule.recordType()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = 0x6E65727275636552;
  v1 = (void *)0xEE00656C75526563;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::Void __swiftcall REMCDRecurrenceRule.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  void *v2;
  void *v3;
  uint64_t v5;
  NSString v6;
  id v7;
  NSString v8;
  double v9;
  NSString v10;
  double v11;
  objc_super v12;

  v3 = v2;
  v5 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v5);
  v6 = String._bridgeToObjectiveC()();
  v12.receiver = v3;
  v12.super_class = (Class)REMCDRecurrenceRule;
  objc_msgSendSuper2(&v12, "mergeDataFromRecord:accountID:", from.super.isa, v6);

  v7 = -[objc_class recordID](from.super.isa, "recordID");
  v8 = objc_msgSend(v7, "recordName");

  if (!v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v8 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v9 = swift_bridgeObjectRelease().n128_u64[0];
  }
  v10 = objc_msgSend(v3, "ckIdentifierFromRecordName:", v8, v9);

  if (!v10)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v10 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v11 = swift_bridgeObjectRelease().n128_u64[0];
  }
  objc_msgSend(v3, "setCkIdentifier:", v10, v11);

  JUMPOUT(0x1003792A4);
}

CKRecord_optional __swiftcall REMCDRecurrenceRule.newlyCreatedRecord()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  Swift::Bool v4;
  objc_class *v5;
  objc_super v6;
  CKRecord_optional result;

  v1 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v1);
  *(_QWORD *)&v3 = __chkstk_darwin(v2).n128_u64[0];
  v6.receiver = v0;
  v6.super_class = (Class)REMCDRecurrenceRule;
  if (objc_msgSendSuper2(&v6, "newlyCreatedRecord", v3))
    JUMPOUT(0x100379A5CLL);
  v5 = 0;
  result.value.super.isa = v5;
  result.is_nil = v4;
  return result;
}

Swift::Void __swiftcall REMCDRecurrenceRule.cleanUpAfterLocalObjectMerge()()
{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t ObjectType;
  uint64_t v11;

  if (qword_1008372E0 != -1)
    swift_once(&qword_1008372E0, sub_100378A58);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_1008470A8);
  v9 = v0;
  v2 = Logger.logObject.getter(v9);
  v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v11 = v5;
    *(_DWORD *)v4 = 136315138;
    ObjectType = swift_getObjectType();
    v6 = sub_10001A630(&qword_1008470C0);
    v7 = String.init<A>(describing:)(&ObjectType, v6);
    ObjectType = sub_10001A820(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v11);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);

  }
  else
  {

  }
}

Swift::Void __swiftcall REMCDRecurrenceRule.fixBrokenReferences()()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  double v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  if (qword_1008372E0 != -1)
    swift_once(&qword_1008372E0, sub_100378A58);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_1008470A8);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  v5 = &selRef_isConcealed;
  if (!os_log_type_enabled(v3, v4))
  {

    goto LABEL_14;
  }
  v6 = swift_slowAlloc(22, -1);
  v7 = swift_slowAlloc(64, -1);
  v50 = v7;
  *(_DWORD *)v6 = 136446466;
  v8 = objc_msgSend(v2, "remObjectID");
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(v8, "description");

    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

  }
  else
  {
    v13 = 0xE300000000000000;
    v11 = 7104878;
  }
  v49 = sub_10001A820(v11, v13, &v50);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

  *(_QWORD *)&v14 = swift_bridgeObjectRelease().n128_u64[0];
  *(_WORD *)(v6 + 12) = 2082;
  v15 = objc_msgSend(v2, "reminder", v14);
  if (!v15)
    goto LABEL_12;
  v16 = v15;
  v17 = objc_msgSend(v15, "remObjectID");
  if (!v17)
  {

LABEL_12:
    v24 = 0xE300000000000000;
    v5 = &selRef_isConcealed;
    v25 = 7104878;
    goto LABEL_13;
  }
  v18 = v17;
  v19 = objc_msgSend(v17, "description");

  v20 = v4;
  v21 = v7;
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v24 = v23;

  v25 = v22;
  v7 = v21;
  v4 = v20;
  v5 = &selRef_isConcealed;
LABEL_13:
  v49 = sub_10001A820(v25, v24, &v50);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fixing broken references for recurrence rule {recurrenceRuleID: %{public}s, reminderID: %{public}s}", (uint8_t *)v6, 0x16u);
  swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v7, -1, -1);
  swift_slowDealloc(v6, -1, -1);

LABEL_14:
  v26 = objc_msgSend(v2, v5[453]);
  if (v26)
  {
    v27 = v26;
    if (objc_msgSend(v26, "markedForDeletion")
      && (objc_msgSend(v2, "markedForDeletion") & 1) == 0)
    {
      v28 = v2;
      v29 = v27;
      v30 = v28;
      v31 = v29;
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = swift_slowAlloc(22, -1);
        v48 = swift_slowAlloc(64, -1);
        v50 = v48;
        *(_DWORD *)v34 = 136446466;
        v35 = objc_msgSend(v30, "remObjectID");
        if (v35)
        {
          v36 = v35;
          v37 = objc_msgSend(v35, "description");

          v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
          v40 = v39;

        }
        else
        {
          v40 = 0xE300000000000000;
          v38 = 7104878;
        }
        v49 = sub_10001A820(v38, v40, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

        *(_QWORD *)&v41 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v34 + 12) = 2082;
        v42 = objc_msgSend(v31, "remObjectID", v41);
        if (v42)
        {
          v43 = v42;
          v44 = objc_msgSend(v42, "description");

          v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
          v47 = v46;

        }
        else
        {
          v47 = 0xE300000000000000;
          v45 = 7104878;
        }
        v49 = sub_10001A820(v45, v47, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Reminder is marked for deletion but recurrence rule is not {recurrenceRuleID: %{public}s, reminderID: %{public}s}", (uint8_t *)v34, 0x16u);
        swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v48, -1, -1);
        swift_slowDealloc(v34, -1, -1);

      }
      else
      {

      }
      objc_msgSend(v30, "markForDeletion");
    }
    objc_msgSend(v27, "forcePushToCloud");

  }
}

uint64_t _sSo19REMCDRecurrenceRuleC7reminddE26existingLocalObjectToMerge4withSo11REMCDObjectCSgSo11NSPredicateCSg_tF_0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t ObjectType;
  uint64_t v12;

  if (qword_1008372E0 != -1)
    swift_once(&qword_1008372E0, sub_100378A58);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_1008470A8);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType();
    v7 = sub_10001A630(&qword_1008470C0);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    ObjectType = sub_10001A820(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t _sSo19REMCDRecurrenceRuleC7reminddE5merge15withLocalObjectSbSo11REMCDObjectC_tF_0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t ObjectType;
  uint64_t v12;

  if (qword_1008372E0 != -1)
    swift_once(&qword_1008372E0, sub_100378A58);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_1008470A8);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType();
    v7 = sub_10001A630(&qword_1008470C0);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    ObjectType = sub_10001A820(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

void sub_10037AD0C(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  id v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25[3];
  int64_t v26;

  v5 = v4;
  v24 = a1 + 64;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(v10 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v13 = 0;
  if (!v12)
    goto LABEL_5;
LABEL_4:
  v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v20 = v19[1];
    v21 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * i);
    v25[0] = *v19;
    v25[1] = v20;
    v25[2] = (uint64_t)v21;
    swift_bridgeObjectRetain(v20);
    v22 = v21;
    sub_10037BBD0(v25, a2, a3, a4);
    if (v5)
    {
      swift_release(a1);

      swift_bridgeObjectRelease();
      return;
    }

    swift_bridgeObjectRelease();
    if (v12)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v13 >= v26)
      goto LABEL_26;
    v17 = *(_QWORD *)(v24 + 8 * v13);
    if (!v17)
    {
      v18 = v13 + 1;
      if (v13 + 1 >= v26)
        goto LABEL_26;
      v17 = *(_QWORD *)(v24 + 8 * v18);
      if (v17)
        goto LABEL_14;
      v18 = v13 + 2;
      if (v13 + 2 >= v26)
        goto LABEL_26;
      v17 = *(_QWORD *)(v24 + 8 * v18);
      if (v17)
        goto LABEL_14;
      v18 = v13 + 3;
      if (v13 + 3 >= v26)
        goto LABEL_26;
      v17 = *(_QWORD *)(v24 + 8 * v18);
      if (v17)
      {
LABEL_14:
        v13 = v18;
        goto LABEL_15;
      }
      v23 = v13 + 4;
      if (v13 + 4 >= v26)
      {
LABEL_26:
        swift_release(a1);
        return;
      }
      v17 = *(_QWORD *)(v24 + 8 * v23);
      v13 += 4;
      if (!v17)
        break;
    }
LABEL_15:
    v12 = (v17 - 1) & v17;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v26)
      goto LABEL_26;
    v17 = *(_QWORD *)(v24 + 8 * v13);
    ++v23;
    if (v17)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
}

void sub_10037AF18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  int64_t v22;
  id v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD v32[5];
  unint64_t v33;

  v1 = a1;
  v33 = (unint64_t)_swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    v5 = sub_1001DD67C();
    v6 = Set.Iterator.init(_cocoa:)(v32, v3, v4, v5);
    v1 = v32[0];
    v29 = v32[1];
    v7 = v32[2];
    v8 = v32[3];
    v9 = v32[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v29 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v28 = v7;
  v13 = (unint64_t)(v7 + 64) >> 6;
  while (v1 < 0)
  {
    v17 = __CocoaSet.Iterator.next()(v6);
    if (!v17)
      goto LABEL_39;
    v18 = v17;
    v30 = v17;
    v19 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    swift_unknownObjectRetain(v18);
    swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
    v20 = v31;
    swift_unknownObjectRelease(v18);
    v16 = v8;
    v14 = v9;
    if (!v20)
      goto LABEL_39;
LABEL_29:
    v23 = objc_msgSend(v20, "remObjectID", v28);

    v8 = v16;
    v9 = v14;
    if (v23)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
      v25 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v24 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v25 >= v24 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1);
      v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v23);
      v6 = (_QWORD *)specialized Array._endMutation()(v26);
      v8 = v16;
      v9 = v14;
    }
  }
  if (v9)
  {
    v14 = (v9 - 1) & v9;
    v15 = __clz(__rbit64(v9)) | (v8 << 6);
    v16 = v8;
LABEL_28:
    v20 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    if (!v20)
      goto LABEL_39;
    goto LABEL_29;
  }
  v16 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v16 >= v13)
      goto LABEL_39;
    v21 = *(_QWORD *)(v29 + 8 * v16);
    if (!v21)
    {
      v22 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_39;
      v21 = *(_QWORD *)(v29 + 8 * v22);
      if (v21)
        goto LABEL_26;
      v22 = v8 + 3;
      if (v8 + 3 >= v13)
        goto LABEL_39;
      v21 = *(_QWORD *)(v29 + 8 * v22);
      if (v21)
        goto LABEL_26;
      v22 = v8 + 4;
      if (v8 + 4 >= v13)
        goto LABEL_39;
      v21 = *(_QWORD *)(v29 + 8 * v22);
      if (v21)
      {
LABEL_26:
        v16 = v22;
      }
      else
      {
        v16 = v8 + 5;
        if (v8 + 5 >= v13)
          goto LABEL_39;
        v21 = *(_QWORD *)(v29 + 8 * v16);
        if (!v21)
        {
          v27 = v8 + 6;
          while (v13 != v27)
          {
            v21 = *(_QWORD *)(v29 + 8 * v27++);
            if (v21)
            {
              v16 = v27 - 1;
              goto LABEL_27;
            }
          }
LABEL_39:
          sub_1000C6560(v1);
          return;
        }
      }
    }
LABEL_27:
    v14 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v16 << 6);
    goto LABEL_28;
  }
  __break(1u);
}

void sub_10037B23C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_canonicalName, a2);
}

void sub_10037B248(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setCanonicalName_);
}

void sub_10037B254(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, "hashtags");
  if (v3)
  {
    v4 = v3;
    v5 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    v6 = sub_1001DD67C();
    v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v4, v5, v6);

  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
}

void sub_10037B2DC(_QWORD *a1, void **a2)
{
  void *v2;
  NSSet v3;
  Class isa;

  v2 = *a2;
  if (*a1)
  {
    sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    sub_1001DD67C();
    v3.super.isa = Set._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v3.super.isa = 0;
  }
  isa = v3.super.isa;
  objc_msgSend(v2, "setHashtags:");

}

uint64_t sub_10037B364()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008470C8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008470C8);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10037B3F4(uint64_t a1, char a2)
{
  uint64_t KeyPath;
  Swift::Int v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (a2)
  {
    if (a2 != 1)
      __asm { BR              X9 }
    KeyPath = swift_getKeyPath(&unk_1006B7B08);
    v4 = sub_1002EC120(a1);
    v5 = (void *)sub_1006597BC(KeyPath, v4);
    v6 = swift_release(KeyPath);
    if (v5)
    {
      v7 = objc_msgSend((id)objc_opt_self(NSCompoundPredicate), "notPredicateWithSubpredicate:", v5);

    }
    else
    {
      v7 = 0;
    }
  }
  else
  {
    v8 = swift_getKeyPath(&unk_1006B7B08);
    v9 = sub_1002EC120(a1);
    v7 = (id)sub_1006597BC(v8, v9);
    v6 = swift_release(v8);
  }
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
  v11 = _swiftEmptyArrayStorage[2];
  v10 = _swiftEmptyArrayStorage[3];
  if (v11 >= v10 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1);
  v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v7);
  specialized Array._endMutation()(v12);
  return sub_10000D2BC(_swiftEmptyArrayStorage);
}

void sub_10037B7E4()
{
  uint64_t KeyPath;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSString v6;
  id v7;

  sub_1000151B0(0, &qword_10083AEE8, NSExpression_ptr);
  KeyPath = swift_getKeyPath(&unk_1006B7B38);
  v1 = (void *)NSExpression.init<A, B>(forKeyPath:)(KeyPath);
  v2 = objc_msgSend(v1, "keyPath");

  static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v4 = v3;

  v5 = objc_allocWithZone((Class)NSSortDescriptor);
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "initWithKey:ascending:selector:", v6, 1, "localizedStandardCompare:", swift_bridgeObjectRelease(v4).n128_f64[0]);

  qword_100871E80 = (uint64_t)v7;
}

void sub_10037B8C0()
{
  uint64_t KeyPath;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSString v6;
  id v7;

  sub_1000151B0(0, &qword_10083AEE8, NSExpression_ptr);
  KeyPath = swift_getKeyPath(&unk_1006B7B70);
  v1 = (void *)NSExpression.init<A, B>(forKeyPath:)(KeyPath);
  v2 = objc_msgSend(v1, "keyPath");

  static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v4 = v3;

  v5 = objc_allocWithZone((Class)NSSortDescriptor);
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "initWithKey:ascending:", v6, 0, swift_bridgeObjectRelease(v4).n128_f64[0]);

  qword_100871E88 = (uint64_t)v7;
}

uint64_t sub_10037B990@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*a1, "recencyDate");
  if (v3)
  {
    v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

void sub_10037BA14(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  uint64_t v11;

  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CDA2C(a1, (uint64_t)v6);
  v7 = *a2;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  objc_msgSend(v7, "setRecencyDate:", isa);

}

void sub_10037BAF0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t ObjCClassFromMetadata;
  NSString v11;
  uint64_t v12;

  v3 = objc_msgSend(*a1, "name");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

    *a2 = v5;
    a2[1] = v7;
  }
  else
  {
    v8 = (void *)objc_opt_self(REMError);
    v9 = sub_1000151B0(0, (unint64_t *)&unk_10083BE40, off_1007D66D0);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v9);
    v11 = String._bridgeToObjectiveC()();
    objc_msgSend(v8, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v11);

    swift_willThrow(v12);
  }
}

void sub_10037BBD0(uint64_t *a1, uint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  _QWORD *v32;
  id v33;
  uint64_t v34;
  id v35;
  uint64_t v36;

  v4 = *a2;
  if (!*(_QWORD *)(*a2 + 16))
    goto LABEL_8;
  v8 = *a1;
  v7 = a1[1];
  swift_bridgeObjectRetain(v7);
  v9 = sub_10001A6DC(v8, v7);
  if ((v10 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    if (qword_1008372E8 != -1)
      swift_once(&qword_1008372E8, sub_10037B364);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_10001AAA8(v22, (uint64_t)qword_1008470C8);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Skipping nil HashtagLabel in reminderIDsByHashtagLabelNames(from:)", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

    return;
  }
  v11 = *(id *)(*(_QWORD *)(v4 + 56) + 8 * v9);
  v12 = objc_msgSend(v11, "name", swift_bridgeObjectRelease().n128_f64[0]);
  if (v12)
  {
    v13 = v12;
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v16 = v15;

    v17 = *a4;
    if (*(_QWORD *)(*a4 + 16))
    {
      swift_bridgeObjectRetain(v7);
      v18 = sub_10001A6DC(v8, v7);
      if ((v19 & 1) != 0)
      {
        v20 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRelease();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a3);
        v35 = (id)*a3;
        *a3 = 0x8000000000000000;
        sub_10028BA30(v20, v14, v16, isUniquelyReferenced_nonNull_native);
        *a3 = v35;
LABEL_19:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
      swift_bridgeObjectRelease();
    }
    sub_1002CAF90(v14, v16);
    goto LABEL_19;
  }
  if (qword_1008372E8 != -1)
    swift_once(&qword_1008372E8, sub_10037B364);
  v27 = type metadata accessor for Logger(0);
  sub_10001AAA8(v27, (uint64_t)qword_1008470C8);
  v28 = v11;
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v32 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v31 = 138543362;
    v33 = objc_msgSend(v28, "objectID");
    v35 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
    *v32 = v33;

    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Skipping HashtagLabel with nil name in reminderIDsByHashtagLabelNames(from:) {mid: %{public}@}", v31, 0xCu);
    v34 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v32, 1, v34);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_10037BF48(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v17[3];
  _BYTE v18[8];
  uint64_t v19;
  uint64_t v20;

  swift_errorRetain(a2);
  v3 = swift_errorRetain(a2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(32, -1);
    v7 = swift_slowAlloc(96, -1);
    v20 = v7;
    *(_DWORD *)v6 = 136446722;
    v19 = sub_10001A630(&qword_100841318);
    v8 = sub_10001A630(&qword_100847138);
    v9 = String.init<A>(describing:)(&v19, v8);
    v19 = sub_10001A820(v9, v10, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2082;
    v19 = sub_1000151B0(0, (unint64_t *)&unk_100839CE0, REMAttachment_ptr);
    v11 = sub_10001A630(&qword_100847140);
    v12 = String.init<A>(describing:)(&v19, v11);
    v19 = sub_10001A820(v12, v13, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 22) = 2080;
    swift_getErrorValue(a2, v18, v17);
    v14 = Error.localizedDescription.getter(v17[1], v17[2]);
    v19 = sub_10001A820(v14, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
    swift_bridgeObjectRelease();
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v6, 0x20u);
    swift_arrayDestroy(v7, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }
  return 1;
}

uint64_t sub_10037C198(uint64_t a1, char a2, char a3, Class isa, Class a5)
{
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  Class v19;
  uint64_t v20;

  v8 = (void *)sub_10037B3F4(a1, a2);
  v9 = sub_1000151B0(0, (unint64_t *)&unk_10083BE40, off_1007D66D0);
  v10 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v11 = objc_msgSend((id)swift_getObjCClassFromMetadata(v9), "entity");
  objc_msgSend(v10, "setEntity:", v11);

  objc_msgSend(v10, "setAffectedStores:", 0);
  objc_msgSend(v10, "setPredicate:", v8);
  if (isa)
    isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v10, "setPropertiesToFetch:", isa);

  if (a5)
    a5 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v10, "setRelationshipKeyPathsForPrefetching:", a5);

  if (a3 != 2)
  {
    v12 = sub_10001A630((uint64_t *)&unk_10083AD90);
    if ((a3 & 1) != 0)
    {
      v14 = swift_allocObject(v12, 48, 7);
      *(_OWORD *)(v14 + 16) = xmmword_1006A8550;
      if (qword_1008372F8 != -1)
        swift_once(&qword_1008372F8, sub_10037B8C0);
      v16 = (void *)qword_100871E88;
      *(_QWORD *)(v14 + 32) = qword_100871E88;
      v17 = qword_1008372F0;
      v13 = v16;
      if (v17 != -1)
        v13 = (_OWORD *)swift_once(&qword_1008372F0, sub_10037B7E4);
      v15 = (void *)qword_100871E80;
      *(_QWORD *)(v14 + 40) = qword_100871E80;
    }
    else
    {
      v13 = (_OWORD *)swift_allocObject(v12, 40, 7);
      v14 = (uint64_t)v13;
      v13[1] = xmmword_1006A7330;
      if (qword_1008372F0 != -1)
        v13 = (_OWORD *)swift_once(&qword_1008372F0, sub_10037B7E4);
      v15 = (void *)qword_100871E80;
      *(_QWORD *)(v14 + 32) = qword_100871E80;
    }
    specialized Array._endMutation()(v13);
    sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
    v18 = v15;
    v19 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v10, "setSortDescriptors:", v19, swift_bridgeObjectRelease(v14).n128_f64[0]);

  }
  v20 = NSManagedObjectContext.fetch<A>(_:)(v10, v9);

  return v20;
}

uint64_t sub_10037C46C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  id v21;
  void *v22;
  BOOL v23;
  id v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  id v29;
  void *v30;
  char *v31;
  _QWORD *v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  id v38;
  os_log_type_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  id v43;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char **v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  char *v57;
  _QWORD *v58;
  void (*v59)(uint64_t, char *, uint64_t);
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  id v68;
  id v69;
  char v70;
  id v71;
  id v72;
  void *v73;
  char v74;
  unint64_t v75;
  id v76;
  void *v77;
  char v78;
  uint64_t v79;
  id v80;
  void *v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t result;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  _QWORD *v106;
  id v107;
  uint64_t v108;
  id v109;
  uint64_t i;
  unint64_t v111;
  _QWORD *v112;
  uint64_t v113;

  v105 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v4 = (char *)&v91 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v6 = __chkstk_darwin(v5);
  v8 = (uint64_t)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v97 = (char *)&v91 - v9;
  v10 = type metadata accessor for Date(0);
  v106 = *(_QWORD **)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v98 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v99 = (char *)&v91 - v14;
  __chkstk_darwin(v13);
  v104 = (char *)&v91 - v15;
  v113 = a1;
  if ((unint64_t)a1 >> 62)
    goto LABEL_85;
  v16 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n(a1, 2);
  for (i = v16; i; i = _CocoaArrayWrapper.endIndex.getter(v83))
  {
    v108 = v10;
    v96 = v8;
    v91 = v4;
    v92 = v2;
    v18 = 0;
    v111 = a1 & 0xC000000000000001;
    v101 = a1 + 32;
    v102 = a1 & 0xFFFFFFFFFFFFFF8;
    v19 = &_swiftEmptyDictionarySingleton;
    *(_QWORD *)&v17 = 138543362;
    v95 = v17;
    v103 = a1;
    v4 = (char *)i;
    while (1)
    {
      if (v111)
      {
        v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, a1);
      }
      else
      {
        if ((unint64_t)v18 >= *(_QWORD *)(v102 + 16))
          goto LABEL_79;
        v21 = *(id *)(v101 + 8 * (_QWORD)v18);
      }
      v22 = v21;
      v23 = __OFADD__(v18++, 1);
      if (v23)
        break;
      v24 = objc_msgSend(v21, "canonicalName");
      if (!v24)
      {
        if (qword_1008372E8 != -1)
          swift_once(&qword_1008372E8, sub_10037B364);
        sub_10001AAA8(v105, (uint64_t)qword_1008470C8);
        v38 = v22;
        v8 = Logger.logObject.getter(v38);
        v39 = static os_log_type_t.error.getter();
        v10 = v39;
        if (os_log_type_enabled((os_log_t)v8, v39))
        {
          v40 = swift_slowAlloc(12, -1);
          v2 = swift_slowAlloc(8, -1);
          *(_DWORD *)v40 = v95;
          v41 = objc_msgSend(v38, "objectID");
          *(_QWORD *)(v40 + 4) = v41;
          *(_QWORD *)v2 = v41;

          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v8, (os_log_type_t)v10, "Unexpected nil canonical name REMCDHashtagLabel from hashtagLabelNames(from:) {mid: %{public}@}", (uint8_t *)v40, 0xCu);
          v42 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v2, 1, v42);
          swift_slowDealloc(v2, -1, -1);
          swift_slowDealloc(v40, -1, -1);

        }
        else
        {

        }
        goto LABEL_7;
      }
      v25 = v24;
      v4 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v10 = v26;

      if (!v19[2])
        goto LABEL_24;
      swift_bridgeObjectRetain(v10);
      v27 = sub_10001A6DC((uint64_t)v4, v10);
      if ((v28 & 1) == 0)
      {
        swift_bridgeObjectRelease(v10);
LABEL_24:
        v43 = v22;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
        v112 = v19;
        v8 = (uint64_t)v19;
        v46 = sub_10001A6DC((uint64_t)v4, v10);
        v47 = v19[2];
        v48 = (v45 & 1) == 0;
        v49 = v47 + v48;
        if (__OFADD__(v47, v48))
          goto LABEL_78;
        v2 = v45;
        if (v19[3] >= v49)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v19 = v112;
            if ((v45 & 1) == 0)
              goto LABEL_31;
          }
          else
          {
            v8 = (uint64_t)&v112;
            sub_1002D6568();
            v19 = v112;
            if ((v2 & 1) == 0)
              goto LABEL_31;
          }
        }
        else
        {
          sub_1002CCF08(v49, isUniquelyReferenced_nonNull_native);
          v8 = (uint64_t)v112;
          v50 = sub_10001A6DC((uint64_t)v4, v10);
          if ((v2 & 1) != (v51 & 1))
            goto LABEL_94;
          v46 = v50;
          v19 = v112;
          if ((v2 & 1) == 0)
          {
LABEL_31:
            v19[(v46 >> 6) + 8] |= 1 << v46;
            v52 = (char **)(v19[6] + 16 * v46);
            *v52 = v4;
            v52[1] = (char *)v10;
            *(_QWORD *)(v19[7] + 8 * v46) = v43;
            v53 = v19[2];
            v23 = __OFADD__(v53, 1);
            v54 = v53 + 1;
            if (v23)
              goto LABEL_81;
            v19[2] = v54;
            swift_bridgeObjectRetain(v10);
            goto LABEL_5;
          }
        }
        v8 = v19[7];
        v20 = 8 * v46;

        *(_QWORD *)(v8 + v20) = v43;
LABEL_5:

        swift_bridgeObjectRelease(v10);
        swift_bridgeObjectRelease(0x8000000000000000);
        goto LABEL_6;
      }
      v109 = *(id *)(v19[7] + 8 * v27);
      swift_bridgeObjectRelease(v10);
      v107 = v22;
      v29 = objc_msgSend(v107, "firstOccurrenceCreationDate");
      if (v29)
      {
        v30 = v29;
        v31 = v99;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v29);

        v32 = v106;
        v33 = (void (*)(char *, char *, uint64_t))v106[4];
        v34 = (uint64_t)v97;
        v35 = v108;
        v33(v97, v31, v108);
        v36 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v32[7];
        v36((char *)v34, 0, 1, v35);
        v37 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v32[6])(v34, 1, v35);
        if ((_DWORD)v37 != 1)
        {
          v33(v104, (char *)v34, v35);
          goto LABEL_36;
        }
      }
      else
      {
        v36 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v106[7];
        v34 = (uint64_t)v97;
        v37 = v36(v97, 1, 1, v108);
      }
      static Date.distantFuture.getter(v37);
      sub_10000882C(v34, (uint64_t *)&unk_1008380D0);
LABEL_36:
      v55 = objc_msgSend(v109, "firstOccurrenceCreationDate", v91, v92);
      if (!v55)
      {
        v60 = v96;
        v63 = v36((char *)v96, 1, 1, v108);
LABEL_40:
        v64 = v98;
        static Date.distantFuture.getter(v63);
        sub_10000882C(v60, (uint64_t *)&unk_1008380D0);
        goto LABEL_41;
      }
      v56 = v55;
      v57 = v99;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v55);

      v58 = v106;
      v59 = (void (*)(uint64_t, char *, uint64_t))v106[4];
      v60 = v96;
      v61 = v57;
      v62 = v108;
      v59(v96, v61, v108);
      v36((char *)v60, 0, 1, v62);
      v63 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v58[6])(v60, 1, v62);
      if ((_DWORD)v63 == 1)
        goto LABEL_40;
      v64 = v98;
      v59((uint64_t)v98, (char *)v60, v108);
LABEL_41:
      v65 = v104;
      v8 = static Date.< infix(_:_:)(v104, v64);
      v66 = (void (*)(char *, uint64_t))v106[1];
      v67 = v108;
      v66(v64, v108);
      v66(v65, v67);
      if ((v8 & 1) != 0)
      {
        v68 = v107;

        v2 = (uint64_t)v109;
        v69 = v68;
        v70 = swift_isUniquelyReferenced_nonNull_native(v19);
        v112 = v19;
        v8 = (uint64_t)&v112;
        sub_10028B8A8((uint64_t)v69, (uint64_t)v4, v10, v70);
        v19 = v112;
        swift_bridgeObjectRelease(v10);
        swift_bridgeObjectRelease(0x8000000000000000);
      }
      else
      {
        swift_bridgeObjectRelease(v10);
        v2 = (uint64_t)v107;
      }
      v10 = v113;
      if ((unint64_t)v113 >> 62)
      {
        if (v113 < 0)
          v8 = v113;
        else
          v8 = v113 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v113);
        v82 = (id)v2;
        v4 = (char *)_CocoaArrayWrapper.endIndex.getter(v8);
        if (!v4)
        {
LABEL_52:
          swift_bridgeObjectRelease(v10);

          goto LABEL_6;
        }
      }
      else
      {
        v4 = *(char **)((v113 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v113);
        v71 = (id)v2;
        if (!v4)
          goto LABEL_52;
      }
      v100 = v10 & 0xC000000000000001;
      if ((v10 & 0xC000000000000001) != 0)
      {
        v72 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v10);
      }
      else
      {
        if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_82;
        v72 = *(id *)(v10 + 32);
      }
      v73 = v72;
      v8 = sub_1000151B0(0, (unint64_t *)&unk_10083BE40, off_1007D66D0);
      v74 = static NSObject.== infix(_:_:)(v73);

      v75 = 0;
      if ((v74 & 1) == 0)
      {
        a1 = v103;
        if (v4 == (char *)1)
          goto LABEL_52;
        if (v100)
        {
          v76 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v10);
        }
        else
        {
          if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
          {
            __break(1u);
LABEL_94:
            result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
            __break(1u);
            return result;
          }
          v76 = *(id *)(v10 + 40);
        }
        v77 = v76;
        v78 = static NSObject.== infix(_:_:)(v76);

        if ((v78 & 1) == 0)
        {
          v94 = v10 & 0xFFFFFFFFFFFFFF8;
          v93 = v10 + 32;
          v79 = 1;
          while (1)
          {
            v75 = v79 + 1;
            if (__OFADD__(v79, 1))
              goto LABEL_80;
            a1 = v103;
            if ((char *)v75 == v4)
              goto LABEL_52;
            if (v100)
            {
              v80 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v79 + 1, v10);
            }
            else
            {
              if ((v75 & 0x8000000000000000) != 0)
                goto LABEL_83;
              if (v75 >= *(_QWORD *)(v94 + 16))
                goto LABEL_84;
              v80 = *(id *)(v93 + 8 * v75);
            }
            v81 = v80;
            a1 = static NSObject.== infix(_:_:)(v80);

            ++v79;
            if ((a1 & 1) != 0)
              goto LABEL_50;
          }
        }
        v75 = 1;
      }
LABEL_50:
      swift_bridgeObjectRelease(v10);

      v8 = (uint64_t)&v113;
      a1 = v103;
LABEL_6:
      v4 = (char *)i;
LABEL_7:
      if (v18 == v4)
      {
        swift_bridgeObjectRelease(a1);
        a1 = v113;
        v2 = v92;
        v4 = v91;
        goto LABEL_90;
      }
    }
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    if (a1 < 0)
      v83 = a1;
    else
      v83 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(a1, 2);
  }
  swift_bridgeObjectRelease(a1);
  v19 = &_swiftEmptyDictionarySingleton;
LABEL_90:
  if (qword_1008372E8 != -1)
    swift_once(&qword_1008372E8, sub_10037B364);
  v84 = v105;
  v85 = sub_10001AAA8(v105, (uint64_t)qword_1008470C8);
  v86 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v85, v84);
  v112 = (_QWORD *)a1;
  __chkstk_darwin(v86);
  *(&v91 - 2) = v4;
  v87 = sub_10001A630(&qword_10083BE20);
  v88 = sub_10037EABC();
  v89 = Sequence.map<A>(skippingError:_:)(sub_10037EAB0, &v91 - 4, sub_10037BAF0, 0, v87, &type metadata for String, v88);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v105);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(a1);
  return v89;
}

uint64_t sub_10037CF1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  __n128 v23;
  void *v24;
  char v25;
  id v26;
  void *v27;
  BOOL v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  id v38;
  id v39;
  void *v40;
  char *v41;
  _QWORD *v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  id v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  _QWORD *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _BOOL8 v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  void *v69;
  char *v70;
  _QWORD *v71;
  void (*v72)(uint64_t, char *, uint64_t);
  char *v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  char *v77;
  char v78;
  void (*v79)(unint64_t, uint64_t);
  uint64_t v80;
  id v81;
  id v82;
  id v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  char v87;
  id v88;
  double v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  uint64_t v98;
  id v99;
  void *v100;
  uint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  int64_t v117;
  unint64_t v118;
  uint64_t v119;
  id v120;
  void *v121;
  char *v122;
  void (*v123)(char *, char *, uint64_t);
  char *v124;
  uint64_t v125;
  void *ObjCClassFromMetadata;
  Class isa;
  id v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t result;
  __n128 v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  _QWORD *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int64_t v151;
  id v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  int64_t v159;
  int64_t v160;
  char *v161;
  uint64_t v162;
  id v163;
  uint64_t v164;
  _QWORD *v165;
  _QWORD *v166;
  unint64_t v167;
  _QWORD v168[5];

  v2 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v2);
  v4 = (char *)&v137 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v161 = (char *)&v137 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v153 = (char *)&v137 - v9;
  v10 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v10);
  v12 = (uint64_t)&v137 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v138 = (char *)&v137 - v14;
  v145 = type metadata accessor for Date(0);
  v143 = *(_QWORD **)(v145 - 8);
  __chkstk_darwin(v145);
  v16 = (unint64_t)v137.n128_u64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v139 = (char *)&v137 - v18;
  __chkstk_darwin(v19);
  v142 = (char *)&v137 - v20;
  v167 = sub_1002AF800((uint64_t)_swiftEmptyArrayStorage);
  v166 = (_QWORD *)sub_1002AF800((uint64_t)_swiftEmptyArrayStorage);
  v21 = sub_1002AF80C((uint64_t)_swiftEmptyArrayStorage);
  v165 = (_QWORD *)v21;
  if ((unint64_t)a1 >> 62)
    goto LABEL_111;
  v22 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v23 = swift_bridgeObjectRetain(a1);
  if (v22)
  {
LABEL_3:
    v21 = 0;
    v148 = a1 & 0xC000000000000001;
    v141 = a1 & 0xFFFFFFFFFFFFFF8;
    v140 = a1 + 32;
    v23.n128_u64[0] = 138543362;
    v137 = v23;
    v156 = (char *)&type metadata for Swift.AnyObject + 8;
    v149 = v12;
    v144 = v16;
    v147 = v22;
    v150 = a1;
    while (1)
    {
      if (v148)
      {
        v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, a1);
      }
      else
      {
        if ((unint64_t)v21 >= *(_QWORD *)(v141 + 16))
          goto LABEL_109;
        v26 = *(id *)(v140 + 8 * v21);
      }
      v27 = v26;
      v28 = __OFADD__(v21++, 1);
      if (v28)
        goto LABEL_107;
      v151 = v21;
      v29 = objc_msgSend(v26, "canonicalName");
      if (!v29)
      {
        if (qword_1008372E8 != -1)
          swift_once(&qword_1008372E8, sub_10037B364);
        v48 = type metadata accessor for Logger(0);
        sub_10001AAA8(v48, (uint64_t)qword_1008470C8);
        v49 = v27;
        v50 = Logger.logObject.getter(v49);
        v51 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v50, v51))
        {
          v52 = swift_slowAlloc(12, -1);
          v53 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v52 = v137.n128_u32[0];
          v54 = objc_msgSend(v49, "objectID");
          *(_QWORD *)(v52 + 4) = v54;
          *v53 = v54;

          _os_log_impl((void *)&_mh_execute_header, v50, v51, "Skipping HashtagLabel with nil canonicalName in reminderIDsByHashtagLabelNames(from:) {mid: %{public}@}", (uint8_t *)v52, 0xCu);
          v55 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v53, 1, v55);
          swift_slowDealloc(v53, -1, -1);
          v56 = v52;
          v12 = v149;
          swift_slowDealloc(v56, -1, -1);

        }
        else
        {

        }
        goto LABEL_6;
      }
      v30 = v29;
      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      v33 = v32;

      v34 = v165;
      v35 = v165[2];
      v152 = v27;
      v154 = v31;
      v155 = v33;
      if (!v35)
        goto LABEL_23;
      swift_bridgeObjectRetain(v33);
      v36 = sub_10001A6DC(v31, v33);
      if ((v37 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v34 = v165;
LABEL_23:
        v12 = v33;
        a1 = v150;
        swift_bridgeObjectRetain(v33);
        v21 = v27;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
        v164 = (uint64_t)v34;
        v165 = (_QWORD *)0x8000000000000000;
        v59 = sub_10001A6DC(v154, v12);
        v60 = v34[2];
        v61 = (v58 & 1) == 0;
        v62 = v60 + v61;
        if (__OFADD__(v60, v61))
          goto LABEL_108;
        v12 = v58;
        if (v34[3] >= v62)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v65 = (_QWORD *)v164;
            if ((v58 & 1) == 0)
              goto LABEL_45;
          }
          else
          {
            sub_1002D6568();
            v65 = (_QWORD *)v164;
            if ((v12 & 1) == 0)
              goto LABEL_45;
          }
        }
        else
        {
          sub_1002CCF08(v62, isUniquelyReferenced_nonNull_native);
          v63 = sub_10001A6DC(v154, v155);
          if ((v12 & 1) != (v64 & 1))
          {
            result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
            __break(1u);
            return result;
          }
          v59 = v63;
          v65 = (_QWORD *)v164;
          if ((v12 & 1) == 0)
          {
LABEL_45:
            v65[(v59 >> 6) + 8] |= 1 << v59;
            v90 = (_QWORD *)(v65[6] + 16 * v59);
            v91 = v155;
            *v90 = v154;
            v90[1] = v91;
            *(_QWORD *)(v65[7] + 8 * v59) = v21;
            v92 = v65[2];
            v28 = __OFADD__(v92, 1);
            v93 = v92 + 1;
            if (v28)
              goto LABEL_110;
            v65[2] = v93;
            swift_bridgeObjectRetain(v91);
            goto LABEL_47;
          }
        }
        v66 = v65[7];
        v67 = 8 * v59;

        *(_QWORD *)(v66 + v67) = v21;
LABEL_47:
        v165 = v65;
        swift_bridgeObjectRelease();
        *(_QWORD *)&v89 = swift_bridgeObjectRelease().n128_u64[0];
        v12 = v149;
        v88 = v152;
        goto LABEL_48;
      }
      v38 = *(id *)(v34[7] + 8 * v36);
      v39 = objc_msgSend(v38, "firstOccurrenceCreationDate", swift_bridgeObjectRelease().n128_f64[0]);
      if (!v39)
        break;
      v40 = v39;
      v41 = v139;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v39);

      v42 = v143;
      v43 = (void (*)(char *, char *, uint64_t))v143[4];
      v44 = (uint64_t)v138;
      v45 = v145;
      v43(v138, v41, v145);
      v46 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v42[7];
      v46(v44, 0, 1, v45);
      v47 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v42[6])(v44, 1, v45);
      if ((_DWORD)v47 == 1)
      {
        v16 = v144;
LABEL_33:
        static Date.distantFuture.getter(v47);
        sub_10000882C(v44, (uint64_t *)&unk_1008380D0);
        goto LABEL_35;
      }
      v43(v142, (char *)v44, v45);
      v16 = v144;
LABEL_35:
      v68 = objc_msgSend(v152, "firstOccurrenceCreationDate", v137.n128_u64[0], v137.n128_u64[1]);
      if (!v68)
      {
        v76 = v46(v12, 1, 1, v145);
LABEL_39:
        static Date.distantFuture.getter(v76);
        sub_10000882C(v12, (uint64_t *)&unk_1008380D0);
        goto LABEL_40;
      }
      v69 = v68;
      v70 = v139;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v68);

      v71 = v143;
      v72 = (void (*)(uint64_t, char *, uint64_t))v143[4];
      v73 = v70;
      v74 = v145;
      v72(v12, v73, v145);
      v46(v12, 0, 1, v74);
      v75 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v71[6];
      v16 = v144;
      v76 = v75(v12, 1, v74);
      if ((_DWORD)v76 == 1)
        goto LABEL_39;
      v72(v16, (char *)v12, v145);
LABEL_40:
      v77 = v142;
      v78 = static Date.> infix(_:_:)(v142, v16);
      v79 = (void (*)(unint64_t, uint64_t))v143[1];
      v80 = v145;
      v79(v16, v145);
      v79((unint64_t)v77, v80);
      v81 = v152;
      if ((v78 & 1) != 0)
        v82 = v152;
      else
        v82 = v38;
      v83 = v82;
      v84 = v155;
      swift_bridgeObjectRetain(v155);
      v85 = v83;
      v86 = (uint64_t)v165;
      v87 = swift_isUniquelyReferenced_nonNull_native(v165);
      v164 = v86;
      v165 = (_QWORD *)0x8000000000000000;
      sub_10028B8A8((uint64_t)v85, v154, v84, v87);
      v165 = (_QWORD *)v164;

      v88 = v81;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v89 = swift_bridgeObjectRelease().n128_u64[0];
      a1 = v150;
LABEL_48:
      v94 = v166;
      if (!v166[2])
        goto LABEL_52;
      v95 = v155;
      swift_bridgeObjectRetain(v155);
      v96 = sub_10001A6DC(v154, v95);
      if ((v97 & 1) == 0)
      {
        *(_QWORD *)&v89 = swift_bridgeObjectRelease().n128_u64[0];
LABEL_52:
        v98 = (uint64_t)&_swiftEmptySetSingleton;
        if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
        {
          if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
          {
            sub_1002E80A4((uint64_t)_swiftEmptyArrayStorage);
            v98 = v132;
          }
          else
          {
            v98 = (uint64_t)&_swiftEmptySetSingleton;
          }
        }
        goto LABEL_53;
      }
      v98 = *(_QWORD *)(v94[7] + 8 * v96);
      swift_bridgeObjectRetain(v98);
      *(_QWORD *)&v89 = swift_bridgeObjectRelease().n128_u64[0];
LABEL_53:
      v164 = v98;
      v99 = objc_msgSend(v88, "hashtags", v89, v137.n128_u64[0], v137.n128_u64[1]);
      if (v99)
      {
        v100 = v99;
        v101 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
        v102 = sub_1001DD67C();
        v21 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v100, v101, v102);

        v157 = v101;
        if ((v21 & 0xC000000000000001) != 0)
        {
          if (v21 < 0)
            v104 = v21;
          else
            v104 = v21 & 0xFFFFFFFFFFFFFF8;
          v105 = __CocoaSet.makeIterator()(v104);
          v103 = Set.Iterator.init(_cocoa:)(v168, v105, v101, v102);
          v21 = v168[0];
          v160 = v168[1];
          v106 = v168[2];
          v12 = v168[3];
          v16 = v168[4];
        }
        else
        {
          v12 = 0;
          v107 = -1 << *(_BYTE *)(v21 + 32);
          v108 = *(_QWORD *)(v21 + 56);
          v160 = v21 + 56;
          v109 = ~v107;
          v110 = -v107;
          if (v110 < 64)
            v111 = ~(-1 << v110);
          else
            v111 = -1;
          v16 = v111 & v108;
          v106 = v109;
        }
        v158 = v21 & 0x7FFFFFFFFFFFFFFFLL;
        v146 = v106;
        v159 = (unint64_t)(v106 + 64) >> 6;
        while (2)
        {
          if (v21 < 0)
          {
            v114 = __CocoaSet.Iterator.next()(v103);
            if (!v114)
              goto LABEL_93;
            v115 = v114;
            v162 = v114;
            swift_unknownObjectRetain(v114);
            swift_dynamicCast(&v163, &v162, v156, v157, 7);
            v116 = v163;
            swift_unknownObjectRelease(v115);
            v113 = v12;
            a1 = v16;
            if (!v116)
              goto LABEL_93;
          }
          else
          {
            if (v16)
            {
              a1 = (v16 - 1) & v16;
              v112 = __clz(__rbit64(v16)) | (v12 << 6);
              v113 = v12;
            }
            else
            {
              v117 = v12 + 1;
              if (__OFADD__(v12, 1))
              {
                __break(1u);
LABEL_107:
                __break(1u);
LABEL_108:
                __break(1u);
LABEL_109:
                __break(1u);
LABEL_110:
                __break(1u);
LABEL_111:
                if (a1 < 0)
                  v133 = a1;
                else
                  v133 = a1 & 0xFFFFFFFFFFFFFF8;
                swift_bridgeObjectRetain(a1);
                v22 = _CocoaArrayWrapper.endIndex.getter(v133);
                if (!v22)
                  goto LABEL_115;
                goto LABEL_3;
              }
              if (v117 >= v159)
                goto LABEL_93;
              v118 = *(_QWORD *)(v160 + 8 * v117);
              v113 = v12 + 1;
              if (!v118)
              {
                v113 = v12 + 2;
                if (v12 + 2 >= v159)
                  goto LABEL_93;
                v118 = *(_QWORD *)(v160 + 8 * v113);
                if (!v118)
                {
                  v113 = v12 + 3;
                  if (v12 + 3 >= v159)
                    goto LABEL_93;
                  v118 = *(_QWORD *)(v160 + 8 * v113);
                  if (!v118)
                  {
                    v113 = v12 + 4;
                    if (v12 + 4 >= v159)
                      goto LABEL_93;
                    v118 = *(_QWORD *)(v160 + 8 * v113);
                    if (!v118)
                    {
                      v119 = v12 + 5;
                      while (v159 != v119)
                      {
                        v118 = *(_QWORD *)(v160 + 8 * v119++);
                        if (v118)
                        {
                          v113 = v119 - 1;
                          goto LABEL_86;
                        }
                      }
LABEL_93:
                      sub_1000C6560(v21);
                      v98 = v164;
                      a1 = v150;
                      v12 = v149;
                      v16 = v144;
                      break;
                    }
                  }
                }
              }
LABEL_86:
              a1 = (v118 - 1) & v118;
              v112 = __clz(__rbit64(v118)) + (v113 << 6);
            }
            v116 = *(id *)(*(_QWORD *)(v21 + 48) + 8 * v112);
            if (!v116)
              goto LABEL_93;
          }
          v120 = objc_msgSend(v116, "reminderIdentifier");
          if (v120)
          {
            v121 = v120;
            v122 = v161;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v120);

            v123 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
            v123(v4, v122, v5);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
            {
              v124 = v153;
              v123(v153, v4, v5);
              if ((objc_msgSend(v116, "isConcealed") & 1) != 0)
              {
                (*(void (**)(char *, uint64_t))(v6 + 8))(v124, v5);

              }
              else
              {
                v125 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
                ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v125);
                isa = UUID._bridgeToObjectiveC()().super.isa;
                v128 = objc_msgSend(ObjCClassFromMetadata, "objectIDWithUUID:", isa);

                sub_1002DB2CC((Swift::Int *)&v163, v128);
                v103 = (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v124, v5);
              }
              goto LABEL_66;
            }
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
          }

          v103 = (_QWORD *)sub_10000882C((uint64_t)v4, (uint64_t *)&unk_100839C80);
LABEL_66:
          v12 = v113;
          v16 = a1;
          continue;
        }
      }
      if ((v98 & 0xC000000000000001) != 0)
      {
        if (v98 < 0)
          v129 = v98;
        else
          v129 = v98 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v98);
        v130 = __CocoaSet.count.getter(v129);
        swift_bridgeObjectRelease();
      }
      else
      {
        v130 = *(_QWORD *)(v98 + 16);
      }
      v131 = v152;
      if (v130)
      {
        v24 = v166;
        v25 = swift_isUniquelyReferenced_nonNull_native(v166);
        v163 = v24;
        v166 = (_QWORD *)0x8000000000000000;
        sub_10028BA30(v98, v154, v155, v25);
        v166 = v163;

        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();

      }
      swift_bridgeObjectRelease();
LABEL_6:
      v21 = v151;
      if (v151 == v147)
      {
        swift_bridgeObjectRelease();
        v21 = (int64_t)v165;
        goto LABEL_116;
      }
    }
    v46 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v143[7];
    v44 = (uint64_t)v138;
    v47 = v46((uint64_t)v138, 1, 1, v145);
    goto LABEL_33;
  }
LABEL_115:
  swift_bridgeObjectRelease();
LABEL_116:
  swift_bridgeObjectRetain(v21);
  sub_10037AD0C(v134, (uint64_t *)&v165, &v167, (uint64_t *)&v166);
  swift_bridgeObjectRelease();
  v135 = v167;
  swift_bridgeObjectRetain(v167);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v135;
}

uint64_t sub_10037DD78(uint64_t a1, char a2, uint64_t a3)
{
  return sub_10037E334(a1, a2, a3, (uint64_t)&unk_1006B7B38, sub_10037CF1C);
}

uint64_t sub_10037DD9C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  __n128 v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  BOOL v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  void *v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  void *v35;
  uint64_t j;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  char v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t result;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;

  v2 = (_QWORD *)sub_1002AF800((uint64_t)_swiftEmptyArrayStorage);
  if ((unint64_t)a1 >> 62)
  {
LABEL_57:
    if (a1 < 0)
      v53 = a1;
    else
      v53 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v53);
    if (v3)
      goto LABEL_3;
LABEL_61:
    swift_bridgeObjectRelease();
    return (uint64_t)v2;
  }
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v4 = swift_bridgeObjectRetain(a1);
  if (!v3)
    goto LABEL_61;
LABEL_3:
  v5 = 0;
  v60 = a1 & 0xC000000000000001;
  v56 = a1 + 32;
  v57 = a1 & 0xFFFFFFFFFFFFFF8;
  v4.n128_u64[0] = 138543362;
  v55 = v4;
  v58 = v3;
  v59 = a1;
  while (1)
  {
    if (v60)
    {
      v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
    }
    else
    {
      if (v5 >= *(_QWORD *)(v57 + 16))
        goto LABEL_55;
      v7 = *(id *)(v56 + 8 * v5);
    }
    v8 = v7;
    v9 = __OFADD__(v5++, 1);
    if (v9)
    {
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    v10 = objc_msgSend(v7, "canonicalName");
    if (!v10)
    {
      if (qword_1008372E8 != -1)
        swift_once(&qword_1008372E8, sub_10037B364);
      v19 = type metadata accessor for Logger(0);
      sub_10001AAA8(v19, (uint64_t)qword_1008470C8);
      v20 = v8;
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.error.getter(v21);
      if (os_log_type_enabled(v21, v22))
      {
        v23 = swift_slowAlloc(12, -1);
        v24 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v23 = v55.n128_u32[0];
        v25 = objc_msgSend(v20, "objectID");
        *(_QWORD *)(v23 + 4) = v25;
        *v24 = v25;

        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Skipping HashtagLabel with nil canonicalName in hashtagIDsByCanonicalNames(from:) {mid: %{public}@}", (uint8_t *)v23, 0xCu);
        v26 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v24, 1, v26);
        swift_slowDealloc(v24, -1, -1);
        swift_slowDealloc(v23, -1, -1);

      }
      else
      {

      }
      goto LABEL_6;
    }
    v11 = v10;
    v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

    v15 = (uint64_t)_swiftEmptyArrayStorage;
    if (v2[2])
    {
      swift_bridgeObjectRetain(v13);
      v16 = sub_10001A6DC(v61, v13);
      if ((v17 & 1) != 0)
      {
        v18 = *(void **)(v2[7] + 8 * v16);
        swift_bridgeObjectRetain(v18);
        *(_QWORD *)&v14 = swift_bridgeObjectRelease().n128_u64[0];
        goto LABEL_22;
      }
      *(_QWORD *)&v14 = swift_bridgeObjectRelease().n128_u64[0];
    }
    v18 = &_swiftEmptySetSingleton;
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
      && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    {
      sub_1002E80A4((uint64_t)_swiftEmptyArrayStorage);
      v18 = v52;
    }
LABEL_22:
    v63 = (uint64_t)v18;
    v27 = objc_msgSend(v8, "hashtags", v14, *(_OWORD *)&v55);
    if (v27)
    {
      v28 = v27;
      v29 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
      v30 = sub_1001DD67C();
      v31 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v28, v29, v30);

      sub_10037AF18(v31);
      v15 = v32;
      swift_bridgeObjectRelease();
    }
    if ((unint64_t)v15 >> 62)
    {
      if (v15 < 0)
        v51 = v15;
      else
        v51 = v15 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v15);
      v33 = _CocoaArrayWrapper.endIndex.getter(v51);
      swift_bridgeObjectRelease();
      if (!v33)
        goto LABEL_34;
    }
    else
    {
      v33 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v33)
        goto LABEL_34;
    }
    if (v33 < 1)
      goto LABEL_54;
    if ((v15 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v33; ++i)
      {
        v35 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v15);
        sub_1002DB2CC((Swift::Int *)&v62, v35);

      }
    }
    else
    {
      for (j = 0; j != v33; ++j)
      {
        v37 = *(void **)(v15 + 8 * j + 32);
        sub_1002DB2CC((Swift::Int *)&v62, v37);

      }
    }
LABEL_34:
    swift_bridgeObjectRelease();
    a1 = v63;
    swift_isUniquelyReferenced_nonNull_native(v2);
    v39 = v38;
    v62 = v2;
    v41 = sub_10001A6DC(v61, v13);
    v42 = v2[2];
    v43 = (v40 & 1) == 0;
    v44 = v42 + v43;
    if (__OFADD__(v42, v43))
      goto LABEL_53;
    v45 = v40;
    if (v2[3] < v44)
      break;
    if ((v39 & 1) != 0)
    {
      v2 = v62;
      if ((v40 & 1) == 0)
        goto LABEL_41;
    }
    else
    {
      sub_1002D68CC();
      v2 = v62;
      if ((v45 & 1) == 0)
      {
LABEL_41:
        v2[(v41 >> 6) + 8] |= 1 << v41;
        v48 = (uint64_t *)(v2[6] + 16 * v41);
        *v48 = v61;
        v48[1] = v13;
        *(_QWORD *)(v2[7] + 8 * v41) = a1;
        v49 = v2[2];
        v9 = __OFADD__(v49, 1);
        v50 = v49 + 1;
        if (v9)
          goto LABEL_56;
        v2[2] = v50;
        swift_bridgeObjectRetain(v13);
        goto LABEL_5;
      }
    }
LABEL_4:
    v6 = v2[7];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v6 + 8 * v41) = a1;
LABEL_5:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = v58;
    a1 = v59;
LABEL_6:
    if (v5 == v3)
      goto LABEL_61;
  }
  sub_1002CD560(v44, v39);
  v46 = sub_10001A6DC(v61, v13);
  if ((v45 & 1) == (v47 & 1))
  {
    v41 = v46;
    v2 = v62;
    if ((v45 & 1) == 0)
      goto LABEL_41;
    goto LABEL_4;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10037E310(uint64_t a1, char a2, uint64_t a3)
{
  return sub_10037E334(a1, a2, a3, (uint64_t)&unk_1006B7B08, sub_10037DD9C);
}

uint64_t sub_10037E334(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v5;
  uint64_t v8;
  uint64_t inited;
  uint64_t KeyPath;
  objc_class *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  objc_class *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t result;
  Swift::String v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  char v39[40];
  uint64_t v40;
  __int128 v41;
  void *v42;
  char v43[48];
  objc_class *v44;

  v8 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v8, v43);
  *(_OWORD *)(inited + 16) = xmmword_1006A7330;
  KeyPath = swift_getKeyPath(a4);
  *(_QWORD *)(inited + 32) = KeyPath;
  *(_QWORD *)&v41 = inited;
  specialized Array._endMutation()(KeyPath);
  v44 = (objc_class *)_swiftEmptyArrayStorage;
  sub_1001C1C48(0, 1, 0);
  v11 = v44;
  if ((inited & 0xC000000000000001) != 0)
  {
    v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, inited);
    v13 = v12;
  }
  else
  {
    v13 = *(_QWORD *)(inited + 32);
    v12 = swift_retain();
  }
  v14 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v12);
  if (!v15)
    goto LABEL_16;
  v16 = v14;
  v17 = v15;
  v42 = &type metadata for String;
  swift_release(v13);
  *(_QWORD *)&v41 = v16;
  *((_QWORD *)&v41 + 1) = v17;
  v19 = *((_QWORD *)v11 + 2);
  v18 = *((_QWORD *)v11 + 3);
  if (v19 >= v18 >> 1)
  {
    sub_1001C1C48(v18 > 1, v19 + 1, 1);
    v11 = v44;
  }
  *((_QWORD *)v11 + 2) = v19 + 1;
  sub_10001A6CC(&v41, (_OWORD *)v11 + 2 * v19 + 2);
  swift_bridgeObjectRelease();
  v20 = swift_initStackObject(v8, v39);
  *(_OWORD *)(v20 + 16) = xmmword_1006A7330;
  v21 = swift_getKeyPath(&unk_1006B7AD0);
  *(_QWORD *)(v20 + 32) = v21;
  *(_QWORD *)&v41 = v20;
  specialized Array._endMutation()(v21);
  v22 = v41;
  v44 = (objc_class *)_swiftEmptyArrayStorage;
  sub_1001C1B0C(0, 1, 0);
  v23 = v44;
  if ((v22 & 0xC000000000000001) != 0)
  {
    v24 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v22);
    v13 = v24;
  }
  else
  {
    v13 = *(_QWORD *)(v22 + 32);
    v24 = swift_retain();
  }
  v36 = a5;
  v25 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v24);
  if (v26)
  {
    v27 = v25;
    v28 = v26;
    swift_release(v13);
    v30 = *((_QWORD *)v23 + 2);
    v29 = *((_QWORD *)v23 + 3);
    if (v30 >= v29 >> 1)
    {
      sub_1001C1B0C(v29 > 1, v30 + 1, 1);
      v23 = v44;
    }
    *((_QWORD *)v23 + 2) = v30 + 1;
    v31 = (_QWORD *)((char *)v23 + 16 * v30);
    v31[4] = v27;
    v31[5] = v28;
    swift_bridgeObjectRelease();
    v32 = sub_10037C198(a1, a2, 2, v11, v23);
    swift_release(v11);
    swift_release(v23);
    if (!v5)
    {
      v27 = v36(v32);
      swift_bridgeObjectRelease();
    }
    return v27;
  }
  else
  {
LABEL_16:
    *(_QWORD *)&v41 = 0;
    *((_QWORD *)&v41 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v34._object = (void *)0x80000001006F8C10;
    v34._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v34);
    v40 = v13;
    v35 = sub_10001A630(&qword_10083DAA8);
    _print_unlocked<A, B>(_:_:)(&v40, &v41, v35, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v41, *((_QWORD *)&v41 + 1), "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_10037E67C(uint64_t a1, uint64_t a2, Class isa, Class a4)
{
  uint64_t KeyPath;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;

  KeyPath = swift_getKeyPath(&unk_1006B7B08);
  v8 = sub_1002EC120(a1);
  v9 = sub_1006597BC(KeyPath, v8);
  v10 = swift_release(KeyPath);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
  v12 = _swiftEmptyArrayStorage[2];
  v11 = _swiftEmptyArrayStorage[3];
  if (v12 >= v11 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1);
  v13 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v9);
  specialized Array._endMutation()(v13);
  v14 = (void *)sub_10000D2BC(_swiftEmptyArrayStorage);
  v15 = sub_1000151B0(0, (unint64_t *)&unk_10083BE40, off_1007D66D0);
  v16 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v17 = objc_msgSend((id)swift_getObjCClassFromMetadata(v15), "entity");
  objc_msgSend(v16, "setEntity:", v17);

  objc_msgSend(v16, "setAffectedStores:", 0);
  objc_msgSend(v16, "setPredicate:", v14);

  if (isa)
    isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v16, "setPropertiesToFetch:", isa);

  if (a4)
    a4 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v16, "setRelationshipKeyPathsForPrefetching:", a4);

  v18 = NSManagedObjectContext.fetch<A>(_:)(v16, v15);
  return v18;
}

_QWORD *sub_10037E884()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  _QWORD *v3;

  v0 = &off_1007DFAA0;
  if ((swift_isUniquelyReferenced_nonNull_native(&off_1007DFAA0) & 1) == 0)
    v0 = sub_1002C8224(0, 2, 1, &off_1007DFAA0);
  v2 = v0[2];
  v1 = v0[3];
  if (v2 >= v1 >> 1)
    v0 = sub_1002C8224((_QWORD *)(v1 > 1), v2 + 1, 1, v0);
  v0[2] = v2 + 1;
  v3 = &v0[2 * v2];
  v3[4] = 1701667182;
  v3[5] = 0xE400000000000000;
  return v0;
}

void *sub_10037E924(uint64_t a1, char a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  _QWORD *v7;
  Class isa;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = (void *)sub_10037B3F4(a1, a2);
  v4 = sub_1000151B0(0, (unint64_t *)&unk_10083BE40, off_1007D66D0);
  v5 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v6 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "entity");
  objc_msgSend(v5, "setEntity:", v6);

  objc_msgSend(v5, "setAffectedStores:", 0);
  objc_msgSend(v5, "setPredicate:", v3);
  v7 = sub_1001DFBD0((uint64_t)&off_1007E09C0);
  swift_arrayDestroy(&unk_1007E09E0, 1, &type metadata for String);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v5, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease(v7).n128_f64[0]);

  v9 = NSManagedObjectContext.fetch<A>(_:)(v5, v4);
  if (v2)
  {

  }
  else
  {
    v10 = v9;
    v11 = sub_10037C46C(v9);
    swift_bridgeObjectRelease(v10);

    v3 = *(void **)(v11 + 16);
    swift_bridgeObjectRelease(v11);
  }
  return v3;
}

uint64_t sub_10037EAB0(uint64_t a1, uint64_t a2)
{
  return sub_10037F478(a2);
}

unint64_t sub_10037EABC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083BE28;
  if (!qword_10083BE28)
  {
    v1 = sub_1000A5A94(&qword_10083BE20);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10083BE28);
  }
  return result;
}

uint64_t sub_10037EB08(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v19[3];
  _BYTE v20[8];
  uint64_t v21;
  uint64_t v22;

  swift_errorRetain(a1);
  v2 = swift_errorRetain(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(32, -1);
    v6 = swift_slowAlloc(96, -1);
    v22 = v6;
    *(_DWORD *)v5 = 136446722;
    v21 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
    v7 = sub_10001A630(&qword_100847150);
    v8 = String.init<A>(describing:)(&v21, v7);
    v10 = v9;
    v21 = sub_10001A820(v8, v9, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_bridgeObjectRelease(v10);
    *(_WORD *)(v5 + 12) = 2082;
    v21 = sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
    v11 = sub_10001A630(&qword_100847158);
    v12 = String.init<A>(describing:)(&v21, v11);
    v14 = v13;
    v21 = sub_10001A820(v12, v13, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_bridgeObjectRelease(v14);
    *(_WORD *)(v5 + 22) = 2080;
    swift_getErrorValue(a1, v20, v19);
    v15 = Error.localizedDescription.getter(v19[1], v19[2]);
    v17 = v16;
    v21 = sub_10001A820(v15, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_bridgeObjectRelease(v17);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy(v6, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  return 1;
}

uint64_t sub_10037ED60(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v16[3];
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;

  swift_errorRetain(a1);
  v2 = swift_errorRetain(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(32, -1);
    v6 = swift_slowAlloc(96, -1);
    v19 = v6;
    *(_DWORD *)v5 = 136446722;
    v18 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    v7 = sub_10001A630(&qword_100847160);
    v8 = String.init<A>(describing:)(&v18, v7);
    v18 = sub_10001A820(v8, v9, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    v18 = sub_1000151B0(0, &qword_10083FEE8, REMReminderStorage_ptr);
    v10 = sub_10001A630(&qword_100847168);
    v11 = String.init<A>(describing:)(&v18, v10);
    v18 = sub_10001A820(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 22) = 2080;
    swift_getErrorValue(a1, v17, v16);
    v13 = Error.localizedDescription.getter(v16[1], v16[2]);
    v18 = sub_10001A820(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy(v6, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  return 1;
}

uint64_t sub_10037EFB8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v19[3];
  _BYTE v20[8];
  uint64_t v21;
  uint64_t v22;

  swift_errorRetain(a1);
  v2 = swift_errorRetain(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(32, -1);
    v6 = swift_slowAlloc(96, -1);
    v22 = v6;
    *(_DWORD *)v5 = 136446722;
    v21 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
    v7 = sub_10001A630(&qword_10083D128);
    v8 = String.init<A>(describing:)(&v21, v7);
    v10 = v9;
    v21 = sub_10001A820(v8, v9, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_bridgeObjectRelease(v10);
    *(_WORD *)(v5 + 12) = 2082;
    v21 = sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
    v11 = sub_10001A630(&qword_100847120);
    v12 = String.init<A>(describing:)(&v21, v11);
    v14 = v13;
    v21 = sub_10001A820(v12, v13, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_bridgeObjectRelease(v14);
    *(_WORD *)(v5 + 22) = 2080;
    swift_getErrorValue(a1, v20, v19);
    v15 = Error.localizedDescription.getter(v19[1], v19[2]);
    v17 = v16;
    v21 = sub_10001A820(v15, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_bridgeObjectRelease(v17);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy(v6, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  return 1;
}

uint64_t sub_10037F210(uint64_t a1, uint64_t a2)
{
  return sub_100380C04(a1, a2, (unint64_t *)&unk_100840000, off_1007D6720, &qword_10083D420);
}

uint64_t sub_10037F22C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v16[3];
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;

  swift_errorRetain(a1);
  v2 = swift_errorRetain(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(32, -1);
    v6 = swift_slowAlloc(96, -1);
    v19 = v6;
    *(_DWORD *)v5 = 136446722;
    v18 = sub_1000151B0(0, &qword_100840020, off_1007D6690);
    v7 = sub_10001A630(&qword_1008398E8);
    v8 = String.init<A>(describing:)(&v18, v7);
    v18 = sub_10001A820(v8, v9, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    v18 = sub_10001A630((uint64_t *)&unk_10083A370);
    v10 = sub_10001A630(&qword_100847178);
    v11 = String.init<A>(describing:)(&v18, v10);
    v18 = sub_10001A820(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 22) = 2080;
    swift_getErrorValue(a1, v17, v16);
    v13 = Error.localizedDescription.getter(v16[1], v16[2]);
    v18 = sub_10001A820(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy(v6, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  return 1;
}

uint64_t sub_10037F478(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v19[3];
  _BYTE v20[8];
  void *v21;
  uint64_t v22;

  swift_errorRetain(a1);
  v2 = swift_errorRetain(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(32, -1);
    v6 = swift_slowAlloc(96, -1);
    v22 = v6;
    *(_DWORD *)v5 = 136446722;
    v21 = (void *)sub_1000151B0(0, (unint64_t *)&unk_10083BE40, off_1007D66D0);
    v7 = sub_10001A630(&qword_1008470E0);
    v8 = String.init<A>(describing:)(&v21, v7);
    v10 = v9;
    v21 = (void *)sub_10001A820(v8, v9, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_bridgeObjectRelease(v10);
    *(_WORD *)(v5 + 12) = 2082;
    v21 = &type metadata for String;
    v11 = sub_10001A630(&qword_1008470E8);
    v12 = String.init<A>(describing:)(&v21, v11);
    v14 = v13;
    v21 = (void *)sub_10001A820(v12, v13, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_bridgeObjectRelease(v14);
    *(_WORD *)(v5 + 22) = 2080;
    swift_getErrorValue(a1, v20, v19);
    v15 = Error.localizedDescription.getter(v19[1], v19[2]);
    v17 = v16;
    v21 = (void *)sub_10001A820(v15, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_bridgeObjectRelease(v17);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy(v6, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  return 1;
}

void sub_10037F6C8(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_canonicalName, a2);
}

void sub_10037F6E4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setCanonicalName_);
}

uint64_t sub_10037F700(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v16[3];
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;

  swift_errorRetain(a1);
  v2 = swift_errorRetain(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(32, -1);
    v6 = swift_slowAlloc(96, -1);
    v19 = v6;
    *(_DWORD *)v5 = 136446722;
    v18 = sub_1000151B0(0, &qword_100840020, off_1007D6690);
    v7 = sub_10001A630(&qword_1008398E8);
    v8 = String.init<A>(describing:)(&v18, v7);
    v18 = sub_10001A820(v8, v9, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    v18 = sub_1000151B0(0, &qword_100843EA0, NSManagedObjectID_ptr);
    v10 = sub_10001A630(&qword_100847180);
    v11 = String.init<A>(describing:)(&v18, v10);
    v18 = sub_10001A820(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 22) = 2080;
    swift_getErrorValue(a1, v17, v16);
    v13 = Error.localizedDescription.getter(v16[1], v16[2]);
    v18 = sub_10001A820(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy(v6, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  return 1;
}

uint64_t sub_10037F958(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v19[3];
  _BYTE v20[8];
  uint64_t v21;
  uint64_t v22;

  swift_errorRetain(a1);
  v2 = swift_errorRetain(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(32, -1);
    v6 = swift_slowAlloc(96, -1);
    v22 = v6;
    *(_DWORD *)v5 = 136446722;
    v21 = type metadata accessor for REMCDListSection();
    v7 = sub_10001A630(&qword_1008471A8);
    v8 = String.init<A>(describing:)(&v21, v7);
    v10 = v9;
    v21 = sub_10001A820(v8, v9, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_bridgeObjectRelease(v10);
    *(_WORD *)(v5 + 12) = 2082;
    v21 = sub_1000151B0(0, (unint64_t *)&qword_10083AC08, REMListSectionStorage_ptr);
    v11 = sub_10001A630((uint64_t *)&unk_1008471B0);
    v12 = String.init<A>(describing:)(&v21, v11);
    v14 = v13;
    v21 = sub_10001A820(v12, v13, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_bridgeObjectRelease(v14);
    *(_WORD *)(v5 + 22) = 2080;
    swift_getErrorValue(a1, v20, v19);
    v15 = Error.localizedDescription.getter(v19[1], v19[2]);
    v17 = v16;
    v21 = sub_10001A820(v15, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_bridgeObjectRelease(v17);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy(v6, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  return 1;
}

uint64_t sub_10037FBA0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v19[3];
  _BYTE v20[8];
  uint64_t v21;
  uint64_t v22;

  swift_errorRetain(a1);
  v2 = swift_errorRetain(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(32, -1);
    v6 = swift_slowAlloc(96, -1);
    v22 = v6;
    *(_DWORD *)v5 = 136446722;
    v21 = sub_1000151B0(0, (unint64_t *)&qword_100851CB0, off_1007D66B0);
    v7 = sub_10001A630(&qword_100847108);
    v8 = String.init<A>(describing:)(&v21, v7);
    v10 = v9;
    v21 = sub_10001A820(v8, v9, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_bridgeObjectRelease(v10);
    *(_WORD *)(v5 + 12) = 2082;
    v21 = sub_1000151B0(0, &qword_100847110, REMCalDAVNotification_ptr);
    v11 = sub_10001A630(&qword_100847118);
    v12 = String.init<A>(describing:)(&v21, v11);
    v14 = v13;
    v21 = sub_10001A820(v12, v13, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_bridgeObjectRelease(v14);
    *(_WORD *)(v5 + 22) = 2080;
    swift_getErrorValue(a1, v20, v19);
    v15 = Error.localizedDescription.getter(v19[1], v19[2]);
    v17 = v16;
    v21 = sub_10001A820(v15, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_bridgeObjectRelease(v17);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy(v6, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  return 1;
}

uint64_t sub_10037FDF8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v19[3];
  _BYTE v20[8];
  uint64_t v21;
  uint64_t v22;

  swift_errorRetain(a1);
  v2 = swift_errorRetain(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(32, -1);
    v6 = swift_slowAlloc(96, -1);
    v22 = v6;
    *(_DWORD *)v5 = 136446722;
    v21 = sub_1000151B0(0, (unint64_t *)&qword_100839928, off_1007D6718);
    v7 = sub_10001A630(&qword_1008470F8);
    v8 = String.init<A>(describing:)(&v21, v7);
    v10 = v9;
    v21 = sub_10001A820(v8, v9, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_bridgeObjectRelease(v10);
    *(_WORD *)(v5 + 12) = 2082;
    v21 = sub_1000151B0(0, &qword_10083A228, REMSharee_ptr);
    v11 = sub_10001A630(&qword_100847100);
    v12 = String.init<A>(describing:)(&v21, v11);
    v14 = v13;
    v21 = sub_10001A820(v12, v13, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_bridgeObjectRelease(v14);
    *(_WORD *)(v5 + 22) = 2080;
    swift_getErrorValue(a1, v20, v19);
    v15 = Error.localizedDescription.getter(v19[1], v19[2]);
    v17 = v16;
    v21 = sub_10001A820(v15, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_bridgeObjectRelease(v17);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy(v6, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  return 1;
}

uint64_t sub_100380050(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v16[3];
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;

  swift_errorRetain(a1);
  v2 = swift_errorRetain(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(32, -1);
    v6 = swift_slowAlloc(96, -1);
    v19 = v6;
    *(_DWORD *)v5 = 136446722;
    v18 = type metadata accessor for REMCDSavedReminder();
    v7 = sub_10001A630(&qword_100844D78);
    v8 = String.init<A>(describing:)(&v18, v7);
    v18 = sub_10001A820(v8, v9, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    v18 = sub_1000151B0(0, &qword_10083FEE8, REMReminderStorage_ptr);
    v10 = sub_10001A630(&qword_100847168);
    v11 = String.init<A>(describing:)(&v18, v10);
    v18 = sub_10001A820(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 22) = 2080;
    swift_getErrorValue(a1, v17, v16);
    v13 = Error.localizedDescription.getter(v16[1], v16[2]);
    v18 = sub_10001A820(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy(v6, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  return 1;
}

uint64_t sub_100380298(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v16[3];
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;

  swift_errorRetain(a1);
  v2 = swift_errorRetain(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(32, -1);
    v6 = swift_slowAlloc(96, -1);
    v19 = v6;
    *(_DWORD *)v5 = 136446722;
    v18 = type metadata accessor for REMCDTemplate();
    v7 = sub_10001A630((uint64_t *)&unk_10083FC70);
    v8 = String.init<A>(describing:)(&v18, v7);
    v18 = sub_10001A820(v8, v9, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    v18 = sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
    v10 = sub_10001A630(&qword_100847120);
    v11 = String.init<A>(describing:)(&v18, v10);
    v18 = sub_10001A820(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 22) = 2080;
    swift_getErrorValue(a1, v17, v16);
    v13 = Error.localizedDescription.getter(v16[1], v16[2]);
    v18 = sub_10001A820(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy(v6, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  return 1;
}

uint64_t sub_1003804E0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v16[3];
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;

  swift_errorRetain(a1);
  v2 = swift_errorRetain(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(32, -1);
    v6 = swift_slowAlloc(96, -1);
    v19 = v6;
    *(_DWORD *)v5 = 136446722;
    v18 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    v7 = sub_10001A630(&qword_10083F088);
    v8 = String.init<A>(describing:)(&v18, v7);
    v18 = sub_10001A820(v8, v9, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    v18 = sub_1000151B0(0, &qword_10083DAC0, REMHashtag_ptr);
    v10 = sub_10001A630(&qword_100847128);
    v11 = String.init<A>(describing:)(&v18, v10);
    v18 = sub_10001A820(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 22) = 2080;
    swift_getErrorValue(a1, v17, v16);
    v13 = Error.localizedDescription.getter(v16[1], v16[2]);
    v18 = sub_10001A820(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy(v6, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  return 1;
}

uint64_t sub_100380738(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v16[3];
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;

  swift_errorRetain(a1);
  v2 = swift_errorRetain(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(32, -1);
    v6 = swift_slowAlloc(96, -1);
    v19 = v6;
    *(_DWORD *)v5 = 136446722;
    v18 = sub_1000151B0(0, (unint64_t *)&unk_1008398F0, off_1007D6660);
    v7 = sub_10001A630(&qword_10083C598);
    v8 = String.init<A>(describing:)(&v18, v7);
    v18 = sub_10001A820(v8, v9, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    v18 = sub_1000151B0(0, &qword_10083C2F0, REMAlarm_ptr);
    v10 = sub_10001A630(&qword_100847130);
    v11 = String.init<A>(describing:)(&v18, v10);
    v18 = sub_10001A820(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 22) = 2080;
    swift_getErrorValue(a1, v17, v16);
    v13 = Error.localizedDescription.getter(v16[1], v16[2]);
    v18 = sub_10001A820(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy(v6, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  return 1;
}

uint64_t sub_100380990(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v16[3];
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;

  swift_errorRetain(a1);
  v2 = swift_errorRetain(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(32, -1);
    v6 = swift_slowAlloc(96, -1);
    v19 = v6;
    *(_DWORD *)v5 = 136446722;
    v18 = sub_1000151B0(0, (unint64_t *)&qword_100841620, off_1007D6700);
    v7 = sub_10001A630(&qword_1008470C0);
    v8 = String.init<A>(describing:)(&v18, v7);
    v18 = sub_10001A820(v8, v9, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    v18 = sub_1000151B0(0, (unint64_t *)&qword_100841640, REMRecurrenceRule_ptr);
    v10 = sub_10001A630(&qword_100847148);
    v11 = String.init<A>(describing:)(&v18, v10);
    v18 = sub_10001A820(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 22) = 2080;
    swift_getErrorValue(a1, v17, v16);
    v13 = Error.localizedDescription.getter(v16[1], v16[2]);
    v18 = sub_10001A820(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy(v6, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  return 1;
}

uint64_t sub_100380BE8(uint64_t a1, uint64_t a2)
{
  return sub_100380C04(a1, a2, (unint64_t *)&qword_10083DA60, off_1007D66C8, &qword_10083F088);
}

uint64_t sub_100380C04(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD v26[3];
  _BYTE v27[8];
  uint64_t v28;
  uint64_t v29;

  swift_errorRetain(a1);
  v9 = swift_errorRetain(a1);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(32, -1);
    v13 = swift_slowAlloc(96, -1);
    v29 = v13;
    *(_DWORD *)v12 = 136446722;
    v14 = sub_1000151B0(0, a3, a4);
    v28 = v14;
    v15 = sub_10001A630(a5);
    v16 = String.init<A>(describing:)(&v28, v15);
    v18 = v17;
    v28 = sub_10001A820(v16, v17, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v12 + 12) = 2082;
    v28 = v14;
    v19 = String.init<A>(describing:)(&v28, v15);
    v21 = v20;
    v28 = sub_10001A820(v19, v20, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
    swift_bridgeObjectRelease(v21);
    *(_WORD *)(v12 + 22) = 2080;
    swift_getErrorValue(a1, v27, v26);
    v22 = Error.localizedDescription.getter(v26[1], v26[2]);
    v24 = v23;
    v28 = sub_10001A820(v22, v23, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
    swift_bridgeObjectRelease(v24);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy(v13, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  return 1;
}

uint64_t sub_100380E48(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v16[3];
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;

  swift_errorRetain(a1);
  v2 = swift_errorRetain(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(32, -1);
    v6 = swift_slowAlloc(96, -1);
    v19 = v6;
    *(_DWORD *)v5 = 136446722;
    v18 = type metadata accessor for REMCDSmartListSection();
    v7 = sub_10001A630(&qword_100847198);
    v8 = String.init<A>(describing:)(&v18, v7);
    v18 = sub_10001A820(v8, v9, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    v18 = sub_1000151B0(0, (unint64_t *)&qword_100840F80, REMSmartListSectionStorage_ptr);
    v10 = sub_10001A630(&qword_1008471A0);
    v11 = String.init<A>(describing:)(&v18, v10);
    v18 = sub_10001A820(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 22) = 2080;
    swift_getErrorValue(a1, v17, v16);
    v13 = Error.localizedDescription.getter(v16[1], v16[2]);
    v18 = sub_10001A820(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy(v6, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  return 1;
}

uint64_t sub_100381090(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v16[3];
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;

  swift_errorRetain(a1);
  v2 = swift_errorRetain(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(32, -1);
    v6 = swift_slowAlloc(96, -1);
    v19 = v6;
    *(_DWORD *)v5 = 136446722;
    v18 = type metadata accessor for REMCDTemplate();
    v7 = sub_10001A630((uint64_t *)&unk_10083FC70);
    v8 = String.init<A>(describing:)(&v18, v7);
    v18 = sub_10001A820(v8, v9, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    v18 = sub_1000151B0(0, &qword_10083D0D8, REMTemplateStorage_ptr);
    v10 = sub_10001A630(&qword_100847188);
    v11 = String.init<A>(describing:)(&v18, v10);
    v18 = sub_10001A820(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 22) = 2080;
    swift_getErrorValue(a1, v17, v16);
    v13 = Error.localizedDescription.getter(v16[1], v16[2]);
    v18 = sub_10001A820(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy(v6, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  return 1;
}

uint64_t sub_1003812D8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v16[3];
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;

  swift_errorRetain(a1);
  v2 = swift_errorRetain(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(32, -1);
    v6 = swift_slowAlloc(96, -1);
    v19 = v6;
    *(_DWORD *)v5 = 136446722;
    v18 = type metadata accessor for REMCDTemplateSection();
    v7 = sub_10001A630(&qword_10083B308);
    v8 = String.init<A>(describing:)(&v18, v7);
    v18 = sub_10001A820(v8, v9, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    v18 = sub_1000151B0(0, &qword_1008431C8, REMTemplateSectionStorage_ptr);
    v10 = sub_10001A630(&qword_100847190);
    v11 = String.init<A>(describing:)(&v18, v10);
    v18 = sub_10001A820(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 22) = 2080;
    swift_getErrorValue(a1, v17, v16);
    v13 = Error.localizedDescription.getter(v16[1], v16[2]);
    v18 = sub_10001A820(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy(v6, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  return 1;
}

uint64_t sub_100381520(uint64_t a1, uint64_t a2)
{
  return sub_100380C04(a1, a2, (unint64_t *)&qword_100839900, off_1007D66E0, &qword_10083D128);
}

uint64_t sub_10038153C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v16[3];
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;

  swift_errorRetain(a1);
  v2 = swift_errorRetain(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(32, -1);
    v6 = swift_slowAlloc(96, -1);
    v19 = v6;
    *(_DWORD *)v5 = 136446722;
    v18 = sub_1000151B0(0, &qword_100840020, off_1007D6690);
    v7 = sub_10001A630(&qword_1008398E8);
    v8 = String.init<A>(describing:)(&v18, v7);
    v18 = sub_10001A820(v8, v9, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    v18 = sub_1000151B0(0, (unint64_t *)&unk_10083FDE0, REMAssignment_ptr);
    v10 = sub_10001A630(&qword_100841350);
    v11 = String.init<A>(describing:)(&v18, v10);
    v18 = sub_10001A820(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 22) = 2080;
    swift_getErrorValue(a1, v17, v16);
    v13 = Error.localizedDescription.getter(v16[1], v16[2]);
    v18 = sub_10001A820(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy(v6, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  return 1;
}

uint64_t sub_100381794(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v16[3];
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;

  swift_errorRetain(a1);
  v2 = swift_errorRetain(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(32, -1);
    v6 = swift_slowAlloc(96, -1);
    v19 = v6;
    *(_DWORD *)v5 = 136446722;
    v18 = type metadata accessor for REMCDSavedAttachment();
    v7 = sub_10001A630(&qword_100847170);
    v8 = String.init<A>(describing:)(&v18, v7);
    v18 = sub_10001A820(v8, v9, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    v18 = sub_1000151B0(0, (unint64_t *)&unk_100839CE0, REMAttachment_ptr);
    v10 = sub_10001A630(&qword_100847140);
    v11 = String.init<A>(describing:)(&v18, v10);
    v18 = sub_10001A820(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 22) = 2080;
    swift_getErrorValue(a1, v17, v16);
    v13 = Error.localizedDescription.getter(v16[1], v16[2]);
    v18 = sub_10001A820(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy(v6, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  return 1;
}

void sub_1003819DC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_name, a2);
}

void sub_1003819F8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setName_);
}

const char *sub_100381A14()
{
  return "recencyDate";
}

uint64_t sub_100381A28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008471C0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008471C0);
  if (qword_100837600 != -1)
    swift_once(&qword_100837600, sub_1004A17AC);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FE0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_100381AB8()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(REMLog), "housekeepingingActivityScheduler");
  qword_1008471D8 = (uint64_t)result;
  return result;
}

void sub_100381AF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(_QWORD, _QWORD);
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void (*v69)(void (*)(_QWORD, _QWORD), char *, uint64_t);
  uint64_t v70;
  void (*v71)(_QWORD, _QWORD);
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  _QWORD v81[4];
  _QWORD v82[3];
  uint64_t v83;

  v0 = sub_10001A630(&qword_100839A10);
  __chkstk_darwin(v0);
  v73 = (char *)&v66 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for Date(0);
  v78 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v72 = (char *)&v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v66 - v5;
  v70 = v7;
  __chkstk_darwin(v8);
  v10 = (char *)&v66 - v9;
  v11 = type metadata accessor for OSSignpostID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100837300 != -1)
    swift_once(&qword_100837300, sub_100381A28);
  v71 = (void (*)(_QWORD, _QWORD))v6;
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10001AAA8(v15, (uint64_t)qword_1008471C0);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = v16;
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "os_transaction INIT {name: com.apple.remindd.housekeeping.analyticsActivity}", v20, 2u);
    v21 = v20;
    v16 = v19;
    swift_slowDealloc(v21, -1, -1);
  }

  v22 = os_transaction_create("com.apple.remindd.housekeeping.analyticsActivity");
  v23 = static os_signpost_type_t.begin.getter(v22);
  if (qword_100837308 != -1)
    swift_once(&qword_100837308, sub_100381AB8);
  v24 = qword_1008471D8;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v23, &_mh_execute_header, v24, "RDAnalyticsActivity.execute", 27, 2, v14);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v25 = *(_QWORD *)&v79[OBJC_IVAR____TtCC7remindd19RDAnalyticsActivityP33_35FD618111A9B708721C682F761C56BE29RDAnalyticsActivityExecutable_name];
  v26 = *(_QWORD *)&v79[OBJC_IVAR____TtCC7remindd19RDAnalyticsActivityP33_35FD618111A9B708721C682F761C56BE29RDAnalyticsActivityExecutable_name
                      + 8];
  v27 = swift_bridgeObjectRetain_n(v26, 3);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter(v28);
  v30 = os_log_type_enabled(v28, v29);
  v74 = v25;
  if (v30)
  {
    v75 = v22;
    v76 = v10;
    v31 = v25;
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = swift_slowAlloc(32, -1);
    v69 = (void (*)(void (*)(_QWORD, _QWORD), char *, uint64_t))v16;
    v34 = v33;
    v83 = v33;
    *(_DWORD *)v32 = 136446210;
    swift_bridgeObjectRetain(v26);
    v80 = sub_10001A820(v31, v26, &v83);
    v22 = v75;
    v10 = v76;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81);
    swift_bridgeObjectRelease_n(v26, 3);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "[%{public}s] start execute()", v32, 0xCu);
    swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v32, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v26, 2);
  }

  v35 = v78;
  Date.init()(v36);
  v81[0] = 0xD000000000000013;
  v81[1] = 0x80000001006B7CA0;
  v81[3] = 0;
  v82[0] = 0;
  v81[2] = 0;
  *(_QWORD *)((char *)v82 + 6) = 0;
  v37 = v77;
  sub_100352C90((uint64_t)v81, (uint64_t)sub_1003847FC, 0);
  if (v37)
  {
    (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v2);
    swift_unknownObjectRelease(v22);
    swift_bridgeObjectRelease();
  }
  else
  {
    v39 = v38;
    v75 = v22;
    v76 = v10;
    v40 = v71;
    v69 = *(void (**)(void (*)(_QWORD, _QWORD), char *, uint64_t))(v35 + 16);
    v69(v71, v10, v2);
    v41 = swift_bridgeObjectRetain_n(v26, 2);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.default.getter(v42);
    v44 = os_log_type_enabled(v42, v43);
    v77 = v39;
    v78 = 0;
    v68 = v26;
    if (v44)
    {
      v45 = v26;
      v46 = swift_slowAlloc(22, -1);
      v67 = swift_slowAlloc(32, -1);
      v83 = v67;
      *(_DWORD *)v46 = 136446466;
      swift_bridgeObjectRetain(v45);
      v80 = sub_10001A820(v74, v45, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81);
      swift_bridgeObjectRelease_n(v45, 3);
      *(_WORD *)(v46 + 12) = 2048;
      v80 = Date.rem_elapsedInMilliseconds.getter(v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81);
      v71 = *(void (**)(_QWORD, _QWORD))(v35 + 8);
      v71(v40, v2);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "[%{public}s] posted CA data, elapsedSeconds: %f ms", (uint8_t *)v46, 0x16u);
      v48 = v67;
      swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v46, -1, -1);
    }
    else
    {
      v49 = swift_bridgeObjectRelease_n(v26, 2);
      v71 = *(void (**)(_QWORD, _QWORD))(v35 + 8);
      ((void (*)(void (*)(_QWORD, _QWORD), uint64_t, __n128))v71)(v40, v2, v49);
    }

    v50 = v70;
    v51 = type metadata accessor for TaskPriority(0);
    v52 = (uint64_t)v73;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v73, 1, 1, v51);
    v53 = v72;
    v54 = v76;
    v69((void (*)(_QWORD, _QWORD))v72, v76, v2);
    v55 = *(unsigned __int8 *)(v35 + 80);
    v56 = (v55 + 64) & ~v55;
    v57 = v2;
    v58 = (v50 + v56 + 7) & 0xFFFFFFFFFFFFFFF8;
    v59 = (char *)swift_allocObject(&unk_1007F09B8, v58 + 8, v55 | 7);
    *((_QWORD *)v59 + 2) = 0;
    *((_QWORD *)v59 + 3) = 0;
    v60 = v79;
    v61 = v74;
    *((_QWORD *)v59 + 4) = v79;
    *((_QWORD *)v59 + 5) = v61;
    v62 = v77;
    *((_QWORD *)v59 + 6) = v68;
    *((_QWORD *)v59 + 7) = v62;
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(&v59[v56], v53, v57);
    v63 = v75;
    *(_QWORD *)&v59[v58] = v75;
    v64 = v60;
    swift_unknownObjectRetain(v63);
    v65 = sub_1002845AC(v52, (uint64_t)&unk_100847378, (uint64_t)v59);
    swift_release(v65);
    swift_unknownObjectRelease(v63);
    v71(v54, v57);
  }
}

uint64_t sub_1003821EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8[13] = a7;
  v8[14] = a8;
  v8[11] = a5;
  v8[12] = a6;
  v8[10] = a4;
  v9 = type metadata accessor for OSSignpostID(0);
  v8[15] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[16] = v10;
  v8[17] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v8[18] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[19] = v12;
  v8[20] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10038227C, 0, 0);
}

uint64_t sub_10038227C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t);

  v1 = v0[12];
  v2 = v0[13];
  v3 = v0[10];
  v4 = v0[11];
  v5 = swift_allocObject(&unk_1007F09E0, 24, 7);
  swift_unknownObjectWeakInit(v5 + 16, v3);
  v6 = (_QWORD *)swift_allocObject(&unk_1007F0A08, 48, 7);
  v6[2] = v5;
  v6[3] = v4;
  v6[4] = v1;
  v6[5] = v2;
  v7 = type metadata accessor for RDSimpleExecutable();
  v8 = (_QWORD *)swift_allocObject(v7, 48, 7);
  v8[2] = 0xD00000000000001CLL;
  v8[3] = 0x8000000100701C90;
  v0[21] = v8;
  v8[4] = &unk_100847388;
  v8[5] = v6;
  v0[5] = v7;
  v0[6] = &off_1007F4EF0;
  v0[7] = &off_1007F4EE0;
  v9 = unk_100847394;
  v12 = (uint64_t (*)(uint64_t))((char *)&dword_100847390 + dword_100847390);
  v0[2] = v8;
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v2);
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[22] = v10;
  *v10 = v0;
  v10[1] = sub_1003823BC;
  return v12((uint64_t)(v0 + 2));
}

uint64_t sub_1003823BC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10038277C;
  }
  else
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v2 + 16));
    v4 = sub_100382428;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100382428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint8_t *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (qword_100837300 != -1)
    swift_once(&qword_100837300, sub_100381A28);
  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = type metadata accessor for Logger(0);
  sub_10001AAA8(v6, (uint64_t)qword_1008471C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, v4, v3);
  v7 = swift_bridgeObjectRetain_n(v5, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 152);
  v12 = *(_QWORD *)(v0 + 160);
  v13 = *(_QWORD *)(v0 + 144);
  v14 = *(_QWORD *)(v0 + 96);
  if (v10)
  {
    v35 = *(_QWORD *)(v0 + 144);
    v15 = *(_QWORD *)(v0 + 88);
    v33 = *(_QWORD *)(v0 + 152);
    v16 = swift_slowAlloc(22, -1);
    v36 = swift_slowAlloc(32, -1);
    v34 = v36;
    *(_DWORD *)v16 = 136446466;
    swift_bridgeObjectRetain(v14);
    *(_QWORD *)(v0 + 64) = sub_10001A820(v15, v14, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72);
    swift_bridgeObjectRelease_n(v14, 3);
    *(_WORD *)(v16 + 12) = 2048;
    *(double *)(v0 + 72) = Date.rem_elapsedInMilliseconds.getter(v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v12, v35);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%{public}s] end execute(), elapsedSeconds: %f ms", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {
    v18 = swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 96), 2);
    (*(void (**)(uint64_t, uint64_t, __n128))(v11 + 8))(v12, v13, v18);
  }

  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  v22 = os_log_type_enabled(v20, v21);
  v23 = *(_QWORD *)(v0 + 168);
  if (v22)
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "os_transaction RELEASE {name: com.apple.remindd.housekeeping.analyticsActivity}", v24, 2u);
    swift_slowDealloc(v24, -1, -1);

    swift_release(v23);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 168));

  }
  v26 = static os_signpost_type_t.end.getter(v25);
  if (qword_100837308 != -1)
    swift_once(&qword_100837308, sub_100381AB8);
  v27 = *(_QWORD *)(v0 + 160);
  v29 = *(_QWORD *)(v0 + 128);
  v28 = *(_QWORD *)(v0 + 136);
  v30 = *(_QWORD *)(v0 + 120);
  v31 = qword_1008471D8;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v26, &_mh_execute_header, v31, "RDAnalyticsActivity.execute", 27, 2, v28);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10038277C()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release(*(_QWORD *)(v0 + 168));
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 16));
  v2 = static os_signpost_type_t.end.getter(v1);
  if (qword_100837308 != -1)
    swift_once(&qword_100837308, sub_100381AB8);
  v3 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 120);
  v7 = qword_1008471D8;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v2, &_mh_execute_header, v7, "RDAnalyticsActivity.execute", 27, 2, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100382860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[9] = a3;
  v4[10] = a4;
  v4[7] = a1;
  v4[8] = a2;
  v5 = sub_10001A630(&qword_1008473A0);
  v4[11] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[12] = v6;
  v4[13] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003828C8, 0, 0);
}

uint64_t sub_1003828C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  unint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 56) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  *(_QWORD *)(v0 + 112) = Strong;
  if (Strong)
  {
    if (qword_100837300 != -1)
      swift_once(&qword_100837300, sub_100381A28);
    v4 = *(_QWORD *)(v0 + 72);
    v5 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 120) = sub_10001AAA8(v5, (uint64_t)qword_1008471C0);
    v6 = swift_bridgeObjectRetain_n(v4, 2);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(_QWORD *)(v0 + 72);
    if (v9)
    {
      v11 = *(_QWORD *)(v0 + 64);
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v16 = v13;
      *(_DWORD *)v12 = 136446210;
      swift_bridgeObjectRetain(v10);
      *(_QWORD *)(v0 + 48) = sub_10001A820(v11, v10, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56);
      swift_bridgeObjectRelease_n(v10, 3);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "[%{public}s] start DES donation", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 72), 2);
    }

    v15 = (_QWORD *)swift_task_alloc(dword_1008473AC);
    *(_QWORD *)(v0 + 128) = v15;
    *v15 = v0;
    v15[1] = sub_100382B04;
    return sub_1003879BC(*(_QWORD *)(v0 + 80));
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100382B04()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 128));
  return swift_task_switch(sub_100382B58, 0, 0);
}

uint64_t sub_100382B58()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  unint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 72), 2);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v5 = *(_QWORD *)(v0 + 64);
    v4 = *(_QWORD *)(v0 + 72);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136446210;
    swift_bridgeObjectRetain(v4);
    *(_QWORD *)(v0 + 40) = sub_10001A820(v5, v4, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48);
    swift_bridgeObjectRelease_n(v4, 3);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%{public}s] start posting grocery correction to CA", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 72), 2);
  }

  if (qword_100837028 != -1)
    swift_once(&qword_100837028, sub_1002351A0);
  v8 = *(_QWORD *)(v0 + 104);
  v9 = *(void **)(v0 + 112);
  v10 = *(_QWORD *)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 96);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 104))(v8, enum case for REMCache.ExecutionMode.synchronously<A, B>(_:), v10);
  sub_100235AF8(v8);

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v8, v10);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100382D3C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[10] = a1;
  v2[11] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[12] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[13] = v4;
  v2[14] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100382D9C, 0, 0);
}

void sub_100382D9C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  int *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  NSObject *log;
  _QWORD *v38;
  void (*v39)(void);
  uint64_t v40[2];

  v1 = *(_QWORD **)(v0 + 80);
  v2 = v1[3];
  v3 = v1[5];
  sub_10000A388(v1, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  *(_QWORD *)(v0 + 120) = sub_100385B28(v4, v5, (uint64_t (*)(uint64_t, uint64_t))sub_1003B6060);
  swift_bridgeObjectRelease();
  if (qword_100837558 != -1)
    swift_once(&qword_100837558, sub_10046FB38);
  v7 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 112);
  v9 = *(void **)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 96);
  v10 = *(_QWORD *)(v0 + 80);
  v11 = sub_10001AAA8(v8, (uint64_t)qword_10084B820);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v11, v8);
  sub_100385E40(v10, v0 + 16);
  v12 = Logger.logObject.getter(v9);
  v13 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v12, v13))
  {
    v27 = *(_QWORD *)(v0 + 104);
    v26 = *(_QWORD *)(v0 + 112);
    v29 = *(void **)(v0 + 88);
    v28 = *(_QWORD *)(v0 + 96);

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 16));
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
    goto LABEL_7;
  }
  v36 = v13;
  log = v12;
  v38 = (_QWORD *)(v0 + 16);
  v14 = *(void **)(v0 + 88);
  v15 = swift_slowAlloc(22, -1);
  v35 = swift_slowAlloc(64, -1);
  v40[0] = v35;
  *(_DWORD *)v15 = 136446466;
  v16 = objc_msgSend(v14, "waiterID");
  if (v16)
  {
    v17 = v16;
    v33 = *(_QWORD *)(v0 + 104);
    v34 = *(_QWORD *)(v0 + 112);
    v18 = *(void **)(v0 + 88);
    v32 = *(_QWORD *)(v0 + 96);
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v21 = v20;

    *(_QWORD *)(v0 + 64) = sub_10001A820(v19, v21, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72);
    swift_bridgeObjectRelease();

    *(_WORD *)(v15 + 12) = 2082;
    v22 = *(_QWORD *)(v0 + 40);
    v23 = *(_QWORD *)(v0 + 56);
    sub_10000A388(v38, v22);
    v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
    *(_QWORD *)(v0 + 72) = sub_10001A820(v24, v25, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80);
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v38);
    _os_log_impl((void *)&_mh_execute_header, log, v36, "Obtained babysitter token for {waiterID: %{public}s, executable: %{public}s}", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v32);
LABEL_7:
    v30 = *(int **)(*sub_10000A388(*(_QWORD **)(v0 + 80), v1[3]) + 32);
    v39 = (void (*)(void))((char *)v30 + *v30);
    v31 = (_QWORD *)swift_task_alloc(v30[1]);
    *(_QWORD *)(v0 + 128) = v31;
    *v31 = v0;
    v31[1] = sub_100383104;
    v39();
    return;
  }

  __break(1u);
}

uint64_t sub_100383104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1003831AC;
  else
    v3 = sub_100383168;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100383168()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(void **)(v0 + 120);
  sub_10038ADFC(*(void **)(v0 + 88), *(_QWORD *)(v0 + 80));

  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003831AC()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 120);
  sub_10038ADFC(*(void **)(v0 + 88), *(_QWORD *)(v0 + 80));

  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003831F0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[10] = a1;
  v2[11] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[12] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[13] = v4;
  v2[14] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100383250, 0, 0);
}

void sub_100383250()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  int *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  NSObject *log;
  _QWORD *v38;
  void (*v39)(void);
  uint64_t v40[2];

  v1 = *(_QWORD **)(v0 + 80);
  v2 = v1[3];
  v3 = v1[5];
  sub_10000A388(v1, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  *(_QWORD *)(v0 + 120) = sub_100385B28(v4, v5, (uint64_t (*)(uint64_t, uint64_t))sub_1003B6060);
  swift_bridgeObjectRelease();
  if (qword_100837558 != -1)
    swift_once(&qword_100837558, sub_10046FB38);
  v7 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 112);
  v9 = *(void **)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 96);
  v10 = *(_QWORD *)(v0 + 80);
  v11 = sub_10001AAA8(v8, (uint64_t)qword_10084B820);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v11, v8);
  sub_100385E40(v10, v0 + 16);
  v12 = Logger.logObject.getter(v9);
  v13 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v12, v13))
  {
    v27 = *(_QWORD *)(v0 + 104);
    v26 = *(_QWORD *)(v0 + 112);
    v29 = *(void **)(v0 + 88);
    v28 = *(_QWORD *)(v0 + 96);

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 16));
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
    goto LABEL_7;
  }
  v36 = v13;
  log = v12;
  v38 = (_QWORD *)(v0 + 16);
  v14 = *(void **)(v0 + 88);
  v15 = swift_slowAlloc(22, -1);
  v35 = swift_slowAlloc(64, -1);
  v40[0] = v35;
  *(_DWORD *)v15 = 136446466;
  v16 = objc_msgSend(v14, "waiterID");
  if (v16)
  {
    v17 = v16;
    v33 = *(_QWORD *)(v0 + 104);
    v34 = *(_QWORD *)(v0 + 112);
    v18 = *(void **)(v0 + 88);
    v32 = *(_QWORD *)(v0 + 96);
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v21 = v20;

    *(_QWORD *)(v0 + 64) = sub_10001A820(v19, v21, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72);
    swift_bridgeObjectRelease();

    *(_WORD *)(v15 + 12) = 2082;
    v22 = *(_QWORD *)(v0 + 40);
    v23 = *(_QWORD *)(v0 + 56);
    sub_10000A388(v38, v22);
    v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
    *(_QWORD *)(v0 + 72) = sub_10001A820(v24, v25, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80);
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v38);
    _os_log_impl((void *)&_mh_execute_header, log, v36, "Obtained babysitter token for {waiterID: %{public}s, executable: %{public}s}", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v32);
LABEL_7:
    v30 = *(int **)(*sub_10000A388(*(_QWORD **)(v0 + 80), v1[3]) + 32);
    v39 = (void (*)(void))((char *)v30 + *v30);
    v31 = (_QWORD *)swift_task_alloc(v30[1]);
    *(_QWORD *)(v0 + 128) = v31;
    *v31 = v0;
    v31[1] = sub_1003835B8;
    v39();
    return;
  }

  __break(1u);
}

uint64_t sub_1003835B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10038B0D4;
  else
    v3 = sub_10038B0D8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10038361C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_10001A630((uint64_t *)&unk_10083AA20);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    v11 = type metadata accessor for UUID(0);
    v12 = sub_10001A630((uint64_t *)&unk_1008473E0);
    v13 = sub_100133108();
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, v11, v12, v13);
    return swift_continuation_throwingResume(v3);
  }
}

void sub_1003836D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  int64_t v8;
  uint64_t *v9;
  unint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  int64_t v41;
  id v42;
  _BYTE v43[32];
  _QWORD v44[2];
  uint64_t v45;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10001A630((uint64_t *)&unk_1008436C0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = _swiftEmptyDictionarySingleton;
  }
  v38 = v1 + 64;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(v1 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(v1 + 64);
  v7 = &v45;
  v37 = (unint64_t)(63 - v5) >> 6;
  swift_bridgeObjectRetain(v1);
  v8 = 0;
  v9 = (uint64_t *)&unk_1008473D8;
  v10 = (unint64_t *)&qword_100838010;
  v11 = NSObject_ptr;
  while (1)
  {
    if (v6)
    {
      v40 = (v6 - 1) & v6;
      v41 = v8;
      v20 = __clz(__rbit64(v6)) | (v8 << 6);
    }
    else
    {
      v21 = v8 + 1;
      if (__OFADD__(v8, 1))
        goto LABEL_36;
      if (v21 >= v37)
      {
LABEL_33:
        sub_1000C6560(v1);
        return;
      }
      v22 = *(_QWORD *)(v38 + 8 * v21);
      v23 = v8 + 1;
      if (!v22)
      {
        v23 = v8 + 2;
        if (v8 + 2 >= v37)
          goto LABEL_33;
        v22 = *(_QWORD *)(v38 + 8 * v23);
        if (!v22)
        {
          v23 = v8 + 3;
          if (v8 + 3 >= v37)
            goto LABEL_33;
          v22 = *(_QWORD *)(v38 + 8 * v23);
          if (!v22)
          {
            v23 = v8 + 4;
            if (v8 + 4 >= v37)
              goto LABEL_33;
            v22 = *(_QWORD *)(v38 + 8 * v23);
            if (!v22)
            {
              v24 = v8 + 5;
              if (v8 + 5 >= v37)
                goto LABEL_33;
              v22 = *(_QWORD *)(v38 + 8 * v24);
              if (!v22)
              {
                while (1)
                {
                  v23 = v24 + 1;
                  if (__OFADD__(v24, 1))
                    goto LABEL_37;
                  if (v23 >= v37)
                    goto LABEL_33;
                  v22 = *(_QWORD *)(v38 + 8 * v23);
                  ++v24;
                  if (v22)
                    goto LABEL_26;
                }
              }
              v23 = v8 + 5;
            }
          }
        }
      }
LABEL_26:
      v40 = (v22 - 1) & v22;
      v41 = v23;
      v20 = __clz(__rbit64(v22)) + (v23 << 6);
    }
    v25 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v20);
    v27 = *v25;
    v26 = v25[1];
    sub_10001A670(*(_QWORD *)(v1 + 56) + 32 * v20, (uint64_t)v7);
    v44[0] = v27;
    v44[1] = v26;
    sub_10001A670((uint64_t)v7, (uint64_t)v43);
    swift_bridgeObjectRetain_n(v26, 2);
    sub_10000882C((uint64_t)v44, v9);
    v28 = sub_1000151B0(0, v10, v11);
    if (!swift_dynamicCast(&v42, v43, (char *)&type metadata for Any + 8, v28, 6))
    {
      v42 = 0;
      swift_bridgeObjectRelease();

      sub_1000C6560(v1);
      swift_release(v3);
      return;
    }
    v29 = v42;
    v30 = sub_10001A6DC(v27, v26);
    v31 = v30;
    if ((v32 & 1) != 0)
    {
      v39 = v29;
      v12 = v11;
      v13 = v10;
      v14 = v7;
      v15 = v1;
      v16 = v9;
      v17 = (uint64_t *)(v3[6] + 16 * v30);
      swift_bridgeObjectRelease();
      *v17 = v27;
      v17[1] = v26;
      v9 = v16;
      v1 = v15;
      v7 = v14;
      v10 = v13;
      v11 = v12;
      v18 = v3[7];
      v19 = 8 * v31;

      *(_QWORD *)(v18 + v19) = v39;
      goto LABEL_8;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v30;
    v33 = (uint64_t *)(v3[6] + 16 * v30);
    *v33 = v27;
    v33[1] = v26;
    *(_QWORD *)(v3[7] + 8 * v30) = v29;
    v34 = v3[2];
    v35 = __OFADD__(v34, 1);
    v36 = v34 + 1;
    if (v35)
      goto LABEL_35;
    v3[2] = v36;
LABEL_8:
    v6 = v40;
    v8 = v41;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
}

uint64_t sub_100383A68(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  **(_QWORD **)(*(_QWORD *)(v2 + 64) + 40) = a2;
  v3 = a2;
  return swift_continuation_resume(v2);
}

uint64_t sub_100383A98(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  uint64_t v16;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v11 = sub_10001A630((uint64_t *)&unk_10083AA20);
    v12 = swift_allocError(v11, &protocol self-conformance witness table for Error, 0, 0);
    *v13 = a3;
    v14 = a3;
    return swift_continuation_throwingResumeWithError(v10, v12);
  }
  else
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(a2);
    (*(void (**)(_QWORD, char *, uint64_t))(v7 + 32))(*(_QWORD *)(*(_QWORD *)(v10 + 64) + 40), v9, v6);
    return swift_continuation_throwingResume(v10);
  }
}

id sub_100383BE0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDAnalyticsActivity.RDAnalyticsActivityExecutable();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_100383C64()
{
  sub_100381AF0();
}

uint64_t sub_100383C84(uint64_t a1, uint64_t a2)
{
  return sub_1003845E4(a1, a2, &OBJC_IVAR____TtCC7remindd19RDAnalyticsActivityP33_35FD618111A9B708721C682F761C56BE29RDAnalyticsActivityExecutable_name);
}

unint64_t sub_100383C90()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;

  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease(0xE000000000000000);
  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_identifier);
  v2 = *(void **)(v0 + OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_identifier + 8);
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._countAndFlagsBits = 0x746973796261622ELL;
  v4._object = (void *)0xEB00000000726574;
  String.append(_:)(v4);
  return 0xD000000000000012;
}

uint64_t sub_100383DA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  id v25;
  _QWORD v26[5];

  sub_100018618(a1, (uint64_t)v26);
  v5 = sub_10001A630((uint64_t *)&unk_10083E310);
  v6 = type metadata accessor for RDAnalyticsActivity();
  if (swift_dynamicCast(&v25, v26, v5, v6, 0))
  {

    v7 = v2 + 16;
    swift_beginAccess(v7, &v20, 0, 0);
    sub_100018618(v7, (uint64_t)v22);
    v8 = v23;
    v9 = v24;
    sub_10000A388(v22, v23);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v22);
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v26);
  }
  else
  {
    if (qword_100837300 != -1)
      swift_once(&qword_100837300, sub_100381A28);
    v11 = type metadata accessor for Logger(0);
    sub_10001AAA8(v11, (uint64_t)qword_1008471C0);
    v12 = sub_100018618(a1, (uint64_t)v22);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = (void *)swift_slowAlloc(32, -1);
      v25 = v16;
      *(_DWORD *)v15 = 136446210;
      sub_100018618((uint64_t)v22, (uint64_t)&v20);
      v17 = String.init<A>(describing:)(&v20, v5);
      v20 = sub_10001A820(v17, v18, (uint64_t *)&v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v22);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "RDAnalyticsExecutionDateStorage.lastExecutedDate(for:) must work with RDAnalyticsActivity only {executable: %{public}s}", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v22);
    }

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v26);
    v19 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a2, 1, 1, v19);
  }
}

uint64_t sub_100384018(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];
  _QWORD v27[5];

  v5 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100018618(a1, (uint64_t)v27);
  v8 = sub_10001A630((uint64_t *)&unk_10083E310);
  v9 = type metadata accessor for RDAnalyticsActivity();
  if (swift_dynamicCast(&v23, v27, v8, v9, 0))
  {

    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v7, a2, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    swift_beginAccess(v2 + 16, v26, 33, 0);
    v12 = *(_QWORD *)(v2 + 40);
    v13 = *(_QWORD *)(v2 + 48);
    sub_10001BA38(v2 + 16, v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v7, v12, v13);
    swift_endAccess(v26);
  }
  else
  {
    if (qword_100837300 != -1)
      swift_once(&qword_100837300, sub_100381A28);
    v14 = type metadata accessor for Logger(0);
    sub_10001AAA8(v14, (uint64_t)qword_1008471C0);
    v15 = sub_100018618(a1, (uint64_t)v26);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v25 = v19;
      *(_DWORD *)v18 = 136446210;
      sub_100018618((uint64_t)v26, (uint64_t)&v23);
      v20 = String.init<A>(describing:)(&v23, v8);
      v23 = (id)sub_10001A820(v20, v21, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v26);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "RDAnalyticsExecutionDateStorage.updateLastExecutedDate(for:) must work with RDAnalyticsActivity only {executable: %{public}s}", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v26);
    }

  }
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);
}

uint64_t sub_1003842C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100383DA0(a1, a2);
}

uint64_t sub_1003842E8(uint64_t a1, uint64_t a2)
{
  return sub_100384018(a1, a2);
}

id sub_1003843E0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  id v4;

  v4 = *(id *)(v1 + OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_executable);
  a1[3] = type metadata accessor for RDAnalyticsActivity.RDAnalyticsActivityExecutable();
  a1[4] = &off_1007F08B8;
  a1[5] = &off_1007F08C8;
  *a1 = v4;
  return v4;
}

uint64_t sub_10038443C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_configurations);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_configurations + 24);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_configurations + 32);
  sub_10000A388(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(v2);
}

uint64_t sub_100384480@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100008868(v1 + OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_rateReducerConfiguration, a1, (uint64_t *)&unk_10083ECE0);
}

uint64_t sub_1003844AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_babysitter;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_100008868(v3, a1, (uint64_t *)&unk_10083E300);
}

uint64_t sub_100384504@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void **v2;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double (*v10)(uint64_t, uint64_t);
  id v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  __int128 v16;
  uint64_t v17;
  _UNKNOWN **v18;

  v5 = *v2;
  v6 = (char *)*v2 + OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_configurations;
  v7 = v6[3];
  v8 = v6[4];
  sub_10000A388(v6, v7);
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(double (**)(uint64_t, uint64_t))(v9 + 8);
  v11 = v5;
  v12 = v10(v7, v9);
  v17 = a1;
  v18 = &off_1007F0908;
  *(_QWORD *)&v16 = v11;
  v13 = type metadata accessor for RDExecutionIntervalThrottlingPolicy();
  v14 = swift_allocObject(v13, 64, 7);
  result = sub_10001BCA8(&v16, v14 + 16);
  *(double *)(v14 + 56) = v12;
  a2[3] = v13;
  a2[4] = (uint64_t)&off_1007F54C8;
  *a2 = v14;
  return result;
}

uint64_t sub_1003845D8(uint64_t a1, uint64_t a2)
{
  return sub_1003845E4(a1, a2, &OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_identifier);
}

uint64_t sub_1003845E4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;

  v4 = (uint64_t *)(*v3 + *a3);
  v5 = *v4;
  swift_bridgeObjectRetain(v4[1]);
  return v5;
}

uint64_t sub_10038461C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_100018618(*v1 + OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_executionDateStorage, a1);
}

uint64_t sub_100384644@<X0>(uint64_t a1@<X8>)
{
  id *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*v1, "analyticsActivityLastExecutionDate");
  if (v3)
  {
    v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

void sub_1003846C8(uint64_t a1)
{
  void **v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  Class v7;
  Class isa;
  Class v9;

  v3 = *v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4);
  v7 = 0;
  if (v6 != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    v7 = isa;
  }
  v9 = v7;
  objc_msgSend(v3, "setAnalyticsActivityLastExecutionDate:");

}

id sub_100384768()
{
  id *v0;

  return objc_msgSend(*v0, "postAnalyticsDefaultThrottleInterval");
}

id sub_100384778()
{
  id *v0;

  return objc_msgSend(*v0, "postAnalyticsRateReduceFactor");
}

uint64_t type metadata accessor for RDAnalyticsActivity()
{
  return objc_opt_self(_TtC7remindd19RDAnalyticsActivity);
}

uint64_t type metadata accessor for RDAnalyticsActivity.RDAnalyticsActivityExecutable()
{
  return objc_opt_self(_TtCC7remindd19RDAnalyticsActivityP33_35FD618111A9B708721C682F761C56BE29RDAnalyticsActivityExecutable);
}

uint64_t type metadata accessor for RDAnalyticsActivity.RDAnalyticsExecutionDateStorage()
{
  return objc_opt_self(_TtCC7remindd19RDAnalyticsActivityP33_35FD618111A9B708721C682F761C56BE31RDAnalyticsExecutionDateStorage);
}

void sub_1003847FC(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  id v26;
  uint64_t v27;
  void *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;

  v5 = sub_10001A630(&qword_1008473F0);
  __chkstk_darwin(v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for REMAccountSnapshotSummary(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v38 - v13;
  v47 = objc_autoreleasePoolPush();
  v15 = sub_10037E924(4, 2);
  if (v2)
  {
    objc_autoreleasePoolPop(v47);
    return;
  }
  v45 = v12;
  v46 = (uint64_t)v15;
  v40 = v14;
  v41 = v9;
  v16 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
  v17 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v18 = objc_msgSend((id)swift_getObjCClassFromMetadata(v16), "entity");
  objc_msgSend(v17, "setEntity:", v18);

  objc_msgSend(v17, "setAffectedStores:", 0);
  objc_msgSend(v17, "setPredicate:", 0);
  v19 = NSManagedObjectContext.fetch<A>(_:)(v17, v16);
  v44 = a1;

  if (v19 < 0 || (v19 & 0x4000000000000000) != 0)
    goto LABEL_24;
  v20 = v19 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v19);
  while (1)
  {
    v50 = v20;
    sub_100385AB0(&v50);
    swift_bridgeObjectRelease(v19);
    v21 = v50;
    if (v50 < 0 || (v50 & 0x4000000000000000) != 0)
      break;
    v22 = *(_QWORD *)(v50 + 16);
    swift_retain();
    v38 = (_QWORD *)a2;
    if (!v22)
      goto LABEL_26;
LABEL_10:
    v48 = v8;
    a2 = v21 & 0xC000000000000001;
    v49 = _swiftEmptyArrayStorage;
    v23 = 4;
    v24 = v41;
    v42 = v22;
    v43 = v21;
    v39 = v21 & 0xC000000000000001;
    while (1)
    {
      v26 = a2
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23 - 4, v21)
          : *(id *)(v21 + 8 * v23);
      v19 = (uint64_t)v26;
      v27 = v23 - 3;
      if (__OFADD__(v23 - 4, 1))
        break;
      v28 = objc_autoreleasePoolPush();
      sub_100384D6C((void *)v19, v44, v46, (uint64_t)v7);
      objc_autoreleasePoolPop(v28);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v7, 1, v8) == 1)
      {
        sub_10000882C((uint64_t)v7, &qword_1008473F0);
      }
      else
      {
        v29 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
        v30 = v40;
        v29(v40, v7, v8);
        v29(v45, v30, v8);
        if ((swift_isUniquelyReferenced_nonNull_native(v49) & 1) == 0)
          v49 = (_QWORD *)sub_1002CA9B4(0, v49[2] + 1, 1, (unint64_t)v49);
        v32 = v49[2];
        v31 = v49[3];
        if (v32 >= v31 >> 1)
          v49 = (_QWORD *)sub_1002CA9B4(v31 > 1, v32 + 1, 1, (unint64_t)v49);
        a2 = v39;
        v33 = v48;
        v34 = v49;
        v49[2] = v32 + 1;
        v35 = (unint64_t)v34
            + ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))
            + *(_QWORD *)(v41 + 72) * v32;
        v24 = v41;
        v29((char *)v35, v45, v33);
      }
      ++v23;
      v25 = v27 == v42;
      v21 = v43;
      if (v25)
        goto LABEL_27;
    }
    __break(1u);
LABEL_24:
    swift_bridgeObjectRetain(v19);
    v20 = (uint64_t)sub_1001E8BA0(v36);
    swift_bridgeObjectRelease(v19);
  }
  v37 = swift_retain();
  v22 = _CocoaArrayWrapper.endIndex.getter(v37);
  v38 = (_QWORD *)a2;
  if (v22)
    goto LABEL_10;
LABEL_26:
  v49 = _swiftEmptyArrayStorage;
LABEL_27:
  swift_release_n(v21, 2);
  objc_autoreleasePoolPop(v47);
  *v38 = v49;
}

uint64_t sub_100384C44()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  uint64_t v13;
  uint64_t v14;

  v1 = v0;
  objc_msgSend(v0, "type");
  v2 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int16, &protocol witness table for Int16);
  v4 = v3;
  v13 = v2;
  v14 = v3;
  swift_bridgeObjectRetain(v3);
  v5._countAndFlagsBits = 95;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v4);
  v6 = objc_msgSend(v0, "ckIdentifier");
  if (!v6)
  {
    v7 = objc_msgSend(v1, "objectID");
    v6 = objc_msgSend(v7, "description");

  }
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v10 = v9;

  swift_bridgeObjectRetain(v14);
  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v14);
  return v13;
}

void sub_100384D6C(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  id v33;
  void *v34;
  uint64_t v35;
  id v36;
  void *v37;
  void *v38;
  uint64_t v39;
  id v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  _QWORD *v59;
  id v60;
  void *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  void *v69;
  void *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  void *v75;
  void *v76;
  uint64_t v77;
  id v78;
  void *v79;
  void *v80;
  uint64_t v81;
  void *v82;
  id v83;
  void *v84;
  void *v85;
  void *v86;
  uint64_t v87;
  id v88;
  void *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  void *v95;
  void *v96;
  uint64_t v97;
  id v98;
  void *v99;
  void *v100;
  uint64_t v101;
  id v102;
  void *v103;
  void *v104;
  uint64_t KeyPath;
  id v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  id v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  id v117;
  void *v118;
  void *v119;
  id v120;
  void *v121;
  void *v122;
  uint64_t v123;
  id v124;
  void *v125;
  void *v126;
  char *v127;
  void *v128;
  void *v129;
  uint64_t v130;
  signed int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  id v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  void *v150;
  uint64_t v151;
  _QWORD *v152;

  v140 = a3;
  v151 = a2;
  v7 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v7);
  v9 = (char *)&v134 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = _s10PredicatesOMa_3(0);
  __chkstk_darwin(v141);
  v142 = (uint64_t *)((char *)&v134 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v150 = (void *)_s10PredicatesOMa(0);
  v11 = __chkstk_darwin(v150);
  v143 = (uint64_t *)((char *)&v134 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = __chkstk_darwin(v11);
  v144 = (uint64_t *)((char *)&v134 - v14);
  v15 = __chkstk_darwin(v13);
  v147 = (uint64_t *)((char *)&v134 - v16);
  v17 = __chkstk_darwin(v15);
  v148 = (uint64_t *)((char *)&v134 - v18);
  v19 = __chkstk_darwin(v17);
  v149 = (uint64_t *)((char *)&v134 - v20);
  __chkstk_darwin(v19);
  v22 = (char *)&v134 - v21;
  v23 = _s10PredicatesOMa_1(0);
  v24 = __chkstk_darwin(v23);
  v145 = (uint64_t *)((char *)&v134 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = __chkstk_darwin(v24);
  v146 = (uint64_t *)((char *)&v134 - v27);
  v28 = __chkstk_darwin(v26);
  v30 = (uint64_t *)((char *)&v134 - v29);
  __chkstk_darwin(v28);
  v32 = (uint64_t *)((char *)&v134 - v31);
  v33 = objc_msgSend(a1, "remObjectID");
  if (v33)
  {
    v34 = v33;
    v138 = a4;
    v139 = v9;
    *v32 = v33;
    swift_storeEnumTagMultiPayload(v32, v23, 2);
    v35 = (uint64_t)v34;
    v36 = v34;
    sub_10000A3AC();
    v38 = v37;
    sub_10001C744((uint64_t)v32, _s10PredicatesOMa_1);
    v39 = sub_1003858B4((uint64_t)v38, v151, a1, (unint64_t *)&qword_100839900, off_1007D66E0);
    if (v4)
    {

    }
    else
    {
      v135 = v39;
      v136 = v35;

      *v30 = v36;
      swift_storeEnumTagMultiPayload(v30, v23, 15);
      v137 = v36;
      v40 = v36;
      sub_10000A3AC();
      v42 = v41;
      sub_10001C744((uint64_t)v30, _s10PredicatesOMa_1);
      v44 = sub_1003858B4((uint64_t)v42, v151, a1, (unint64_t *)&qword_100839900, off_1007D66E0);
      v134 = v23;

      *(_QWORD *)v22 = v40;
      v22[8] = 2;
      v45 = v150;
      swift_storeEnumTagMultiPayload(v22, v150, 33);
      v46 = v40;
      sub_10000D2C0();
      v48 = v47;
      sub_10001C744((uint64_t)v22, _s10PredicatesOMa);
      v49 = v151;
      v50 = sub_1003858B4((uint64_t)v48, v151, a1, (unint64_t *)&qword_10083AE90, off_1007D6708);
      v51 = a1;
      v52 = v49;

      v53 = (uint64_t)v149;
      *v149 = v46;
      *(_BYTE *)(v53 + 8) = 1;
      swift_storeEnumTagMultiPayload(v53, v45, 33);
      v54 = v46;
      sub_10000D2C0();
      v56 = v55;
      sub_10001C744(v53, _s10PredicatesOMa);
      v149 = (_QWORD *)sub_1003858B4((uint64_t)v56, v52, v51, (unint64_t *)&qword_10083AE90, off_1007D6708);

      v57 = v52;
      v58 = v51;
      v59 = v148;
      *v148 = v54;
      swift_storeEnumTagMultiPayload(v59, v45, 34);
      v60 = v54;
      sub_10000D2C0();
      v62 = v61;
      v63 = (uint64_t)v59;
      v64 = v58;
      v65 = v57;
      sub_10001C744(v63, _s10PredicatesOMa);
      v66 = sub_1003858B4((uint64_t)v62, v57, v64, (unint64_t *)&qword_10083AE90, off_1007D6708);
      v148 = (_QWORD *)v50;

      v67 = (uint64_t)v147;
      *v147 = v60;
      swift_storeEnumTagMultiPayload(v67, v45, 35);
      v68 = v60;
      sub_10000D2C0();
      v70 = v69;
      sub_10001C744(v67, _s10PredicatesOMa);
      v71 = (_QWORD *)v66;
      v147 = (_QWORD *)sub_1003858B4((uint64_t)v70, v65, v64, (unint64_t *)&qword_10083AE90, off_1007D6708);

      v72 = (uint64_t)v146;
      *v146 = v68;
      v73 = v134;
      swift_storeEnumTagMultiPayload(v72, v134, 13);
      v74 = v68;
      sub_10000A3AC();
      v76 = v75;
      sub_10001C744(v72, _s10PredicatesOMa_1);
      v146 = (_QWORD *)sub_1003858B4((uint64_t)v76, v65, v64, (unint64_t *)&qword_100839900, off_1007D66E0);

      v77 = (uint64_t)v145;
      *v145 = v74;
      swift_storeEnumTagMultiPayload(v77, v73, 14);
      v78 = v74;
      sub_10000A3AC();
      v80 = v79;
      sub_10001C744(v77, _s10PredicatesOMa_1);
      v145 = (_QWORD *)sub_1003858B4((uint64_t)v80, v65, v64, (unint64_t *)&qword_100839900, off_1007D66E0);

      v81 = (uint64_t)v144;
      *v144 = v78;
      v82 = v150;
      swift_storeEnumTagMultiPayload(v81, v150, 37);
      v83 = v78;
      sub_10000D2C0();
      v85 = v84;
      sub_10001C744(v81, _s10PredicatesOMa);
      v134 = sub_1003858B4((uint64_t)v85, v65, v64, (unint64_t *)&qword_10083AE90, off_1007D6708);
      v144 = v71;

      v86 = v82;
      v87 = (uint64_t)v143;
      *v143 = v83;
      swift_storeEnumTagMultiPayload(v87, v86, 36);
      v88 = v83;
      sub_10000D2C0();
      v90 = v89;
      sub_10001C744(v87, _s10PredicatesOMa);
      v91 = sub_1003858B4((uint64_t)v90, v65, v64, (unint64_t *)&qword_10083AE90, off_1007D6708);

      v92 = v141;
      v93 = (uint64_t)v142;
      *v142 = v88;
      swift_storeEnumTagMultiPayload(v93, v92, 7);
      v94 = v88;
      sub_1000069D8();
      v96 = v95;
      sub_10001C744(v93, _s10PredicatesOMa_3);
      v150 = v64;
      v97 = sub_1003858B4((uint64_t)v96, v65, v64, (unint64_t *)&unk_100840000, off_1007D6720);

      v98 = v94;
      sub_1002A43E4(v136, 1);
      v100 = v99;

      v101 = sub_1003858B4((uint64_t)v100, v151, v150, (unint64_t *)&qword_10083DA60, off_1007D66C8);
      v102 = v98;
      sub_1002A43E4(v136, 2);
      v104 = v103;

      v143 = (_QWORD *)sub_1003858B4((uint64_t)v104, v151, v150, (unint64_t *)&qword_10083DA60, off_1007D66C8);
      v152 = _swiftEmptyArrayStorage;
      KeyPath = swift_getKeyPath(&unk_1006B7DF0);
      v106 = v102;
      v107 = objc_msgSend(v106, "uuid");
      v108 = (uint64_t)v139;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v107);

      v109 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v109 - 8) + 56))(v108, 0, 1, v109);
      v110 = (void *)sub_1002E8998(KeyPath, v108);
      swift_release(KeyPath);
      v111 = v110;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v111);
      v113 = v152[2];
      v112 = v152[3];
      if (v113 >= v112 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v112 > 1);
      v114 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v113, v111);
      specialized Array._endMutation()(v114);

      v115 = (void *)sub_10000D2BC(v152);
      v116 = sub_1003858B4((uint64_t)v115, v151, v150, (unint64_t *)&unk_10083AE20, off_1007D6698);

      v117 = v106;
      sub_10020B48C(v136, 97);
      v119 = v118;

      v142 = (_QWORD *)sub_1003858B4((uint64_t)v119, v151, v150, (unint64_t *)&unk_100840BD0, off_1007D6680);
      v120 = v117;
      sub_10020B48C(v136, 96);
      v122 = v121;

      v123 = sub_1003858B4((uint64_t)v122, v151, v150, (unint64_t *)&unk_100840BD0, off_1007D6680);
      v124 = v120;
      sub_10020B528(v136, 128);
      v126 = v125;

      v141 = sub_1003858B4((uint64_t)v126, v151, v150, &qword_100840C10, off_1007D6670);
      v127 = (char *)v124;
      sub_10020B660(v136, 128);
      v129 = v128;
      v139 = v127;

      v130 = sub_1003858B4((uint64_t)v129, v151, v150, (unint64_t *)&qword_100840C40, off_1007D6668);
      v131 = objc_msgSend(v150, "type");
      v132 = v138;
      REMAccountSnapshotSummary.init(accountID:accountType:tagLabelCount:totalListCount:totalGroceryListCount:totalReminderCount:softDeletedReminderCount:incompleteReminderCount:incompleteGroceryReminderCount:sharedListsCount:groupCount:parentReminderCount:flaggedReminderCount:customSmartListCount:inlineTagCount:structuredTagCount:attachmentCount:nonDeletedAlarmCount:softDeletedAlarmCount:incompleteLocationAlarmsCount:incompleteTimeAlarmsCount:)(v139, v131, v140, v135, v44, v148, v149, v144, v147, v146, v145, v134, v91, v97, v101, v143, v116, v142, v123,
        v141,
        v130);
      v133 = type metadata accessor for REMAccountSnapshotSummary(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v133 - 8) + 56))(v132, 0, 1, v133);
    }
  }
  else
  {
    v43 = type metadata accessor for REMAccountSnapshotSummary(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(a4, 1, 1, v43);
  }
}

uint64_t sub_1003858B4(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  id v19;
  id v20;
  Class isa;
  uint64_t v22;
  uint64_t v24;

  v9 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v10 = swift_allocObject(v9, 40, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v10 + 32) = a3;
  v24 = v10;
  specialized Array._endMutation()(v10);
  v11 = a3;
  v12 = sub_10001A630(&qword_10083FCF0);
  v13 = sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
  v14 = sub_1001DF5B4();
  v15 = sub_1001DF600();
  v16 = Sequence.compactMapToSet<A>(_:)(sub_100303BB8, 0, v12, v13, v14, v15);
  v17 = sub_1001E8870(v16);
  swift_bridgeObjectRelease(v16);
  v18 = sub_1000151B0(0, a4, a5);
  v19 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v18), "entity");
  objc_msgSend(v19, "setEntity:", v20);

  objc_msgSend(v19, "setAffectedStores:", 0);
  objc_msgSend(v19, "setPredicate:", a1);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v19, "setAffectedStores:", isa);

  v22 = NSManagedObjectContext.count<A>(for:)(v19, v18);
  swift_bridgeObjectRelease(v24);
  swift_release(v17);

  if (v22 < 0)
    return -1;
  else
    return v22;
}

uint64_t sub_100385AB0(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_1001D92D4(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  sub_100385E84(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

id sub_100385B28(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  void *v5;
  id v8;
  id v9;
  uint64_t v10;
  void *v12;

  v5 = (void *)v3;
  v8 = objc_msgSend((id)objc_opt_self(DABabysitter), "sharedBabysitter");
  if (!v8
    || (v12 = v8,
        sub_1000151B0(0, (unint64_t *)&qword_10083EFE8, DABabysitter_ptr),
        v9 = sub_10047011C(v3),
        v12,
        !v9))
  {
    v9 = v5;
    v10 = a3(a1, a2);
    swift_willThrow(v10);
  }
  return v9;
}

uint64_t sub_100385C10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 64) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100385CB8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v9 = v1[6];
  v10 = v1[7];
  v11 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v12 = (_QWORD *)swift_task_alloc(dword_100847374);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_1000CAD70;
  return sub_1003821EC(a1, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_100385D84()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100385DA8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100385DDC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_100847384);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_1000CB064;
  return sub_100382860(v2, v3, v5, v4);
}

uint64_t sub_100385E40(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_100385E84(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  uint32_t *p_ivar_base_size;
  Swift::Int v14;
  unint64_t v15;
  Swift::Int v16;
  Swift::Int v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  id *v28;
  int v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  id v37;
  id v38;
  uint64_t v39;
  void *v40;
  void *v41;
  Swift::String v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  Swift::String v48;
  id v49;
  id v50;
  uint64_t v51;
  void *v52;
  void *v53;
  Swift::String v54;
  uint64_t *v55;
  Swift::Int v56;
  Swift::Int v57;
  uint64_t *v58;
  uint64_t v59;
  Swift::Int v60;
  uint64_t v61;
  char **v62;
  Swift::Int v63;
  void *v64;
  Swift::Int v65;
  void *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  Swift::String v71;
  id v72;
  id v73;
  uint64_t v74;
  void *v75;
  void *v76;
  Swift::String v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  Swift::String v83;
  id v84;
  id v85;
  uint64_t v86;
  void *v87;
  void *v88;
  Swift::String v89;
  char v90;
  void *v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  uint64_t v118;
  char v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  BOOL v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  Swift::Int v152;
  Swift::Int v153;
  Swift::Int v154;
  char *v155;
  Swift::Int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *__dst;
  uint64_t v161;
  Swift::Int v162;
  Swift::Int v163;
  Swift::Int v164;
  Swift::Int v165;
  int v166;
  id v167;
  void *v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;

  v2 = v1;
  v4 = a1[1];
  v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0)
      goto LABEL_150;
    if (v4)
      sub_100386AC8(0, v4, 1, a1);
    return;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_158;
  v152 = v5;
  v156 = v4;
  v149 = a1;
  if (v4 < 2)
  {
    v10 = (char *)_swiftEmptyArrayStorage;
    v178 = (uint64_t)_swiftEmptyArrayStorage;
    __dst = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      v15 = _swiftEmptyArrayStorage[2];
LABEL_116:
      if (v15 >= 2)
      {
        v142 = *v149;
        do
        {
          v143 = v15 - 2;
          if (v15 < 2)
            goto LABEL_145;
          if (!v142)
            goto LABEL_157;
          v144 = *(_QWORD *)&v10[16 * v143 + 32];
          v145 = *(_QWORD *)&v10[16 * v15 + 24];
          sub_100386E20((id *)(v142 + 8 * v144), (id *)(v142 + 8 * *(_QWORD *)&v10[16 * v15 + 16]), (id *)(v142 + 8 * v145), __dst);
          if (v2)
            break;
          if (v145 < v144)
            goto LABEL_146;
          if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
            v10 = sub_1001D52E4((uint64_t)v10);
          if (v143 >= *((_QWORD *)v10 + 2))
            goto LABEL_147;
          v146 = &v10[16 * v143 + 32];
          *(_QWORD *)v146 = v144;
          *((_QWORD *)v146 + 1) = v145;
          v147 = *((_QWORD *)v10 + 2);
          if (v15 > v147)
            goto LABEL_148;
          memmove(&v10[16 * v15 + 16], &v10[16 * v15 + 32], 16 * (v147 - v15));
          *((_QWORD *)v10 + 2) = v147 - 1;
          v15 = v147 - 1;
        }
        while (v147 > 2);
      }
LABEL_127:
      swift_bridgeObjectRelease(v10);
      *(_QWORD *)((v178 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v148);
      swift_bridgeObjectRelease(v178);
      return;
    }
  }
  else
  {
    v7 = v6 >> 1;
    v8 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v7;
    __dst = (char *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    v178 = v9;
  }
  v11 = 0;
  v12 = *a1;
  v150 = *a1 + 16;
  v151 = *a1 - 8;
  v10 = (char *)_swiftEmptyArrayStorage;
  p_ivar_base_size = (_DWORD *)(&RDDataAccess + 8);
  v14 = v156;
  v161 = *a1;
  while (1)
  {
    v16 = v11;
    v17 = v11 + 1;
    v155 = v10;
    if (v11 + 1 < v14)
    {
      v18 = *(void **)(v12 + 8 * v11);
      v19 = *(id *)(v12 + 8 * v17);
      v20 = v18;
      v21 = sub_100384C44();
      v23 = v22;
      v24 = sub_100384C44();
      if (v21 == v24 && v23 == v25)
      {
        v166 = 0;
        v27 = v23;
      }
      else
      {
        v27 = v25;
        v166 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, v24, v25, 1);
      }
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v27);

      v17 = v16 + 2;
      if (v16 + 2 < v156)
      {
        v154 = v16;
        v28 = (id *)(v150 + 8 * v16);
        do
        {
          v162 = v17;
          v158 = v2;
          v30 = *(v28 - 1);
          v31 = *v28;
          v32 = v30;
          objc_msgSend(v31, "type");
          v33 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int16, &protocol witness table for Int16);
          v35 = v34;
          v170 = v33;
          v174 = v34;
          swift_bridgeObjectRetain(v34);
          v36._countAndFlagsBits = 95;
          v36._object = (void *)0xE100000000000000;
          String.append(_:)(v36);
          v37 = objc_msgSend(v31, "ckIdentifier", swift_bridgeObjectRelease(v35).n128_f64[0]);
          if (!v37)
          {
            v38 = objc_msgSend(v31, "objectID");
            v37 = objc_msgSend(v38, "description");

          }
          v168 = v31;
          v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
          v41 = v40;

          swift_bridgeObjectRetain(v174);
          v42._countAndFlagsBits = v39;
          v42._object = v41;
          String.append(_:)(v42);
          swift_bridgeObjectRelease(v41);
          v43 = v170;
          v44 = v174;
          objc_msgSend(v32, "type", swift_bridgeObjectRelease(v174).n128_f64[0]);
          v45 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int16, &protocol witness table for Int16);
          v47 = v46;
          v171 = v45;
          v175 = v46;
          swift_bridgeObjectRetain(v46);
          v48._countAndFlagsBits = 95;
          v48._object = (void *)0xE100000000000000;
          String.append(_:)(v48);
          v49 = objc_msgSend(v32, "ckIdentifier", swift_bridgeObjectRelease(v47).n128_f64[0]);
          if (!v49)
          {
            v50 = objc_msgSend(v32, "objectID");
            v49 = objc_msgSend(v50, "description");

          }
          v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
          v53 = v52;

          swift_bridgeObjectRetain(v175);
          v54._countAndFlagsBits = v51;
          v54._object = v53;
          String.append(_:)(v54);
          swift_bridgeObjectRelease(v53);
          swift_bridgeObjectRelease(v175);
          if (v43 == v171 && v44 == v175)
          {

            swift_bridgeObjectRelease_n(v44, 2);
            v2 = v158;
            v10 = v155;
            v17 = v162;
            if ((v166 & 1) != 0)
            {
              v12 = v161;
              p_ivar_base_size = (_DWORD *)(&RDDataAccess + 8);
              v16 = v154;
              goto LABEL_37;
            }
          }
          else
          {
            v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v44, v171, v175, 1);

            swift_bridgeObjectRelease(v44);
            swift_bridgeObjectRelease(v175);
            v2 = v158;
            v10 = v155;
            v17 = v162;
            if (((v166 ^ v29) & 1) != 0)
              goto LABEL_35;
          }
          ++v17;
          ++v28;
        }
        while (v156 != v17);
        v17 = v156;
LABEL_35:
        v16 = v154;
      }
      v12 = v161;
      p_ivar_base_size = (_DWORD *)(&RDDataAccess + 8);
      if ((v166 & 1) != 0)
      {
LABEL_37:
        if (v17 < v16)
          goto LABEL_151;
        if (v16 < v17)
        {
          v55 = (uint64_t *)(v151 + 8 * v17);
          v56 = v17;
          v57 = v16;
          v58 = (uint64_t *)(v12 + 8 * v16);
          do
          {
            if (v57 != --v56)
            {
              if (!v12)
                goto LABEL_156;
              v59 = *v58;
              *v58 = *v55;
              *v55 = v59;
            }
            ++v57;
            --v55;
            ++v58;
          }
          while (v57 < v56);
        }
      }
    }
    if (v17 < v156)
    {
      if (__OFSUB__(v17, v16))
        goto LABEL_149;
      if (v17 - v16 < v152)
        break;
    }
LABEL_68:
    if (v17 < v16)
      goto LABEL_144;
    v164 = v17;
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      v10 = sub_1001D4DF0(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v93 = *((_QWORD *)v10 + 2);
    v92 = *((_QWORD *)v10 + 3);
    v15 = v93 + 1;
    v12 = v161;
    if (v93 >= v92 >> 1)
    {
      v141 = sub_1001D4DF0((char *)(v92 > 1), v93 + 1, 1, v10);
      v12 = v161;
      v10 = v141;
    }
    *((_QWORD *)v10 + 2) = v15;
    v94 = v10 + 32;
    v95 = &v10[16 * v93 + 32];
    *(_QWORD *)v95 = v16;
    *((_QWORD *)v95 + 1) = v164;
    if (v93)
    {
      while (1)
      {
        v96 = v15 - 1;
        if (v15 >= 4)
        {
          v101 = &v94[16 * v15];
          v102 = *((_QWORD *)v101 - 8);
          v103 = *((_QWORD *)v101 - 7);
          v107 = __OFSUB__(v103, v102);
          v104 = v103 - v102;
          if (v107)
            goto LABEL_133;
          v106 = *((_QWORD *)v101 - 6);
          v105 = *((_QWORD *)v101 - 5);
          v107 = __OFSUB__(v105, v106);
          v99 = v105 - v106;
          v100 = v107;
          if (v107)
            goto LABEL_134;
          v108 = v15 - 2;
          v109 = &v94[16 * v15 - 32];
          v111 = *(_QWORD *)v109;
          v110 = *((_QWORD *)v109 + 1);
          v107 = __OFSUB__(v110, v111);
          v112 = v110 - v111;
          if (v107)
            goto LABEL_136;
          v107 = __OFADD__(v99, v112);
          v113 = v99 + v112;
          if (v107)
            goto LABEL_139;
          if (v113 >= v104)
          {
            v131 = &v94[16 * v96];
            v133 = *(_QWORD *)v131;
            v132 = *((_QWORD *)v131 + 1);
            v107 = __OFSUB__(v132, v133);
            v134 = v132 - v133;
            if (v107)
              goto LABEL_143;
            v124 = v99 < v134;
            goto LABEL_105;
          }
        }
        else
        {
          if (v15 != 3)
          {
            v125 = *((_QWORD *)v10 + 4);
            v126 = *((_QWORD *)v10 + 5);
            v107 = __OFSUB__(v126, v125);
            v118 = v126 - v125;
            v119 = v107;
            goto LABEL_99;
          }
          v98 = *((_QWORD *)v10 + 4);
          v97 = *((_QWORD *)v10 + 5);
          v107 = __OFSUB__(v97, v98);
          v99 = v97 - v98;
          v100 = v107;
        }
        if ((v100 & 1) != 0)
          goto LABEL_135;
        v108 = v15 - 2;
        v114 = &v94[16 * v15 - 32];
        v116 = *(_QWORD *)v114;
        v115 = *((_QWORD *)v114 + 1);
        v117 = __OFSUB__(v115, v116);
        v118 = v115 - v116;
        v119 = v117;
        if (v117)
          goto LABEL_138;
        v120 = &v94[16 * v96];
        v122 = *(_QWORD *)v120;
        v121 = *((_QWORD *)v120 + 1);
        v107 = __OFSUB__(v121, v122);
        v123 = v121 - v122;
        if (v107)
          goto LABEL_141;
        if (__OFADD__(v118, v123))
          goto LABEL_142;
        if (v118 + v123 >= v99)
        {
          v124 = v99 < v123;
LABEL_105:
          if (v124)
            v96 = v108;
          goto LABEL_107;
        }
LABEL_99:
        if ((v119 & 1) != 0)
          goto LABEL_137;
        v127 = &v94[16 * v96];
        v129 = *(_QWORD *)v127;
        v128 = *((_QWORD *)v127 + 1);
        v107 = __OFSUB__(v128, v129);
        v130 = v128 - v129;
        if (v107)
          goto LABEL_140;
        if (v130 < v118)
          goto LABEL_14;
LABEL_107:
        v135 = v96 - 1;
        if (v96 - 1 >= v15)
        {
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
          goto LABEL_153;
        }
        if (!v12)
          goto LABEL_155;
        v136 = &v94[16 * v135];
        v137 = *(_QWORD *)v136;
        v138 = &v94[16 * v96];
        v139 = *((_QWORD *)v138 + 1);
        sub_100386E20((id *)(v12 + 8 * *(_QWORD *)v136), (id *)(v12 + 8 * *(_QWORD *)v138), (id *)(v12 + 8 * v139), __dst);
        if (v2)
          goto LABEL_127;
        if (v139 < v137)
          goto LABEL_130;
        if (v96 > *((_QWORD *)v10 + 2))
          goto LABEL_131;
        *(_QWORD *)v136 = v137;
        *(_QWORD *)&v94[16 * v135 + 8] = v139;
        v140 = *((_QWORD *)v10 + 2);
        if (v96 >= v140)
          goto LABEL_132;
        v15 = v140 - 1;
        memmove(&v94[16 * v96], v138 + 16, 16 * (v140 - 1 - v96));
        *((_QWORD *)v10 + 2) = v140 - 1;
        v12 = v161;
        if (v140 <= 2)
          goto LABEL_14;
      }
    }
    v15 = 1;
LABEL_14:
    v14 = v156;
    v11 = v164;
    p_ivar_base_size = (_DWORD *)(&RDDataAccess + 8);
    if (v164 >= v156)
      goto LABEL_116;
  }
  if (__OFADD__(v16, v152))
    goto LABEL_152;
  v60 = v156;
  if (v16 + v152 < v156)
    v60 = v16 + v152;
  if (v60 >= v16)
  {
    if (v17 != v60)
    {
      v159 = v2;
      v61 = v151 + 8 * v17;
      v62 = &selRef_subscriptionOwnerUserRecordID;
      v153 = v60;
      do
      {
        v64 = *(void **)(v12 + 8 * v17);
        v65 = v16;
        v157 = v61;
        v163 = v17;
        while (1)
        {
          v165 = v65;
          v66 = *(void **)v61;
          v67 = v64;
          v167 = v66;
          objc_msgSend(v67, v62[73]);
          v68 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int16, &protocol witness table for Int16);
          v70 = v69;
          v172 = v68;
          v176 = v69;
          swift_bridgeObjectRetain(v69);
          v71._countAndFlagsBits = 95;
          v71._object = (void *)0xE100000000000000;
          String.append(_:)(v71);
          v169 = v67;
          v72 = objc_msgSend(v67, *((SEL *)p_ivar_base_size + 491), swift_bridgeObjectRelease(v70).n128_f64[0]);
          if (!v72)
          {
            v73 = objc_msgSend(v67, "objectID");
            v72 = objc_msgSend(v73, "description");

          }
          v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
          v76 = v75;

          swift_bridgeObjectRetain(v176);
          v77._countAndFlagsBits = v74;
          v77._object = v76;
          String.append(_:)(v77);
          swift_bridgeObjectRelease(v76);
          v79 = v172;
          v78 = v176;
          objc_msgSend(v167, v62[73], swift_bridgeObjectRelease(v176).n128_f64[0]);
          v80 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int16, &protocol witness table for Int16);
          v82 = v81;
          v173 = v80;
          v177 = v81;
          swift_bridgeObjectRetain(v81);
          v83._countAndFlagsBits = 95;
          v83._object = (void *)0xE100000000000000;
          String.append(_:)(v83);
          v84 = objc_msgSend(v167, "ckIdentifier", swift_bridgeObjectRelease(v82).n128_f64[0]);
          if (!v84)
          {
            v85 = objc_msgSend(v167, "objectID");
            v84 = objc_msgSend(v85, "description");

          }
          v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
          v88 = v87;

          swift_bridgeObjectRetain(v177);
          v89._countAndFlagsBits = v86;
          v89._object = v88;
          String.append(_:)(v89);
          swift_bridgeObjectRelease(v88);
          swift_bridgeObjectRelease(v177);
          if (v79 == v173 && v78 == v177)
            break;
          v90 = _stringCompareWithSmolCheck(_:_:expecting:)(v79, v78, v173, v177, 1);

          swift_bridgeObjectRelease(v78);
          swift_bridgeObjectRelease(v177);
          if ((v90 & 1) == 0)
            goto LABEL_54;
          v12 = v161;
          v62 = &selRef_subscriptionOwnerUserRecordID;
          p_ivar_base_size = (_DWORD *)(&RDDataAccess + 8);
          if (!v161)
            goto LABEL_154;
          v91 = *(void **)v61;
          v64 = *(void **)(v61 + 8);
          *(_QWORD *)v61 = v64;
          *(_QWORD *)(v61 + 8) = v91;
          v61 -= 8;
          v63 = v163;
          v65 = v165 + 1;
          if (v163 == v165 + 1)
            goto LABEL_55;
        }

        swift_bridgeObjectRelease_n(v78, 2);
LABEL_54:
        v12 = v161;
        v63 = v163;
        v62 = &selRef_subscriptionOwnerUserRecordID;
        p_ivar_base_size = &RDDataAccess.ivar_base_size;
LABEL_55:
        v17 = v63 + 1;
        v61 = v157 + 8;
      }
      while (v17 != v153);
      v17 = v153;
      v2 = v159;
      v10 = v155;
    }
    goto LABEL_68;
  }
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

uint64_t sub_100386AC8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  char **v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  id v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  Swift::String v31;
  char v32;
  void *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v35 = result;
  if (a3 != a2)
  {
    v37 = *a4;
    v4 = *a4 + 8 * a3 - 8;
    v5 = &selRef_subscriptionOwnerUserRecordID;
LABEL_6:
    v7 = *(void **)(v37 + 8 * a3);
    v38 = a3;
    v39 = v35;
    v36 = v4;
    while (1)
    {
      v8 = *(void **)v4;
      v9 = v7;
      v40 = v8;
      objc_msgSend(v9, v5[73]);
      v10 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int16, &protocol witness table for Int16);
      v12 = v11;
      v41 = v10;
      v43 = v11;
      swift_bridgeObjectRetain(v11);
      v13._countAndFlagsBits = 95;
      v13._object = (void *)0xE100000000000000;
      String.append(_:)(v13);
      swift_bridgeObjectRelease(v12);
      v14 = v43;
      v15 = objc_msgSend(v9, "ckIdentifier");
      if (!v15)
      {
        v16 = objc_msgSend(v9, "objectID");
        v15 = objc_msgSend(v16, "description");

      }
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v19 = v18;

      swift_bridgeObjectRetain(v43);
      v20._countAndFlagsBits = v17;
      v20._object = v19;
      String.append(_:)(v20);
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v43);
      v21 = v41;
      objc_msgSend(v40, v5[73]);
      v22 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int16, &protocol witness table for Int16);
      v24 = v23;
      v42 = v22;
      v44 = v23;
      swift_bridgeObjectRetain(v23);
      v25._countAndFlagsBits = 95;
      v25._object = (void *)0xE100000000000000;
      String.append(_:)(v25);
      swift_bridgeObjectRelease(v24);
      v26 = objc_msgSend(v40, "ckIdentifier");
      if (!v26)
      {
        v27 = objc_msgSend(v40, "objectID");
        v26 = objc_msgSend(v27, "description");

      }
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v30 = v29;

      swift_bridgeObjectRetain(v44);
      v31._countAndFlagsBits = v28;
      v31._object = v30;
      String.append(_:)(v31);
      swift_bridgeObjectRelease(v30);
      swift_bridgeObjectRelease(v44);
      if (v21 == v42 && v14 == v44)
      {

        result = swift_bridgeObjectRelease_n(v14, 2);
        v6 = v38;
        v5 = &selRef_subscriptionOwnerUserRecordID;
LABEL_5:
        a3 = v6 + 1;
        v4 = v36 + 8;
        if (a3 == a2)
          return result;
        goto LABEL_6;
      }
      v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v14, v42, v44, 1);

      swift_bridgeObjectRelease(v14);
      result = swift_bridgeObjectRelease(v44);
      v6 = v38;
      v5 = &selRef_subscriptionOwnerUserRecordID;
      if ((v32 & 1) == 0)
        goto LABEL_5;
      if (!v37)
        break;
      v33 = *(void **)v4;
      v7 = *(void **)(v4 + 8);
      *(_QWORD *)v4 = v7;
      *(_QWORD *)(v4 + 8) = v33;
      v4 -= 8;
      if (v38 == ++v39)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100386E20(id *a1, id *__src, id *a3, char *__dst)
{
  id *v5;
  id *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;
  id *v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  id *v27;
  id *v28;
  id *v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char v40;
  char *v41;
  uint64_t result;
  char *v43;
  void **v45;
  id *v46;
  char *v47;
  void **v48;
  id *v49;

  v5 = a3;
  v6 = __src;
  v7 = (char *)__src - (char *)a1;
  v8 = (char *)__src - (char *)a1 + 7;
  if ((char *)__src - (char *)a1 >= 0)
    v8 = (char *)__src - (char *)a1;
  v9 = v8 >> 3;
  v10 = (char *)a3 - (char *)__src;
  v11 = (char *)a3 - (char *)__src + 7;
  if ((char *)a3 - (char *)__src >= 0)
    v11 = (char *)a3 - (char *)__src;
  v12 = v11 >> 3;
  v49 = a1;
  v48 = (void **)__dst;
  if (v9 >= v11 >> 3)
  {
    if (v10 < -7)
      goto LABEL_54;
    if (__dst != (char *)__src || &__src[v12] <= (id *)__dst)
      memmove(__dst, __src, 8 * v12);
    v43 = __dst;
    v28 = (id *)&__dst[8 * v12];
    v47 = (char *)v28;
    v49 = v6;
    if (a1 >= v6 || v10 < 8)
    {
LABEL_53:
      sub_1001D4FA4(&v49, &v48, &v47);
      return 1;
    }
    v29 = v6;
    while (1)
    {
      v46 = v5;
      v30 = *--v29;
      v31 = *(v28 - 1);
      v32 = v30;
      v33 = sub_100384C44();
      v35 = v34;
      v36 = sub_100384C44();
      if (v33 == v36 && v35 == v37)
        break;
      v39 = v37;
      v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v36, v37, 1);

      swift_bridgeObjectRelease(v35);
      swift_bridgeObjectRelease(v39);
      v41 = (char *)v46;
      v5 = v46 - 1;
      if ((v40 & 1) == 0)
        goto LABEL_46;
      if (v46 != v6 || v5 >= v6)
        *v5 = *v29;
      v49 = v29;
LABEL_51:
      if (v29 > a1)
      {
        v6 = v29;
        if (v28 > (id *)v43)
          continue;
      }
      goto LABEL_53;
    }

    swift_bridgeObjectRelease_n(v35, 2);
    v41 = (char *)v46;
    v5 = v46 - 1;
LABEL_46:
    v47 = (char *)(v28 - 1);
    if (v41 < (char *)v28 || v5 >= v28 || v41 != (char *)v28)
      *v5 = *(v28 - 1);
    v29 = v6;
    --v28;
    goto LABEL_51;
  }
  if (v7 >= -7)
  {
    if (__dst != (char *)a1 || &a1[v9] <= (id *)__dst)
      memmove(__dst, a1, 8 * v9);
    v45 = (void **)&__dst[8 * v9];
    v47 = (char *)v45;
    if (v6 < v5 && v7 >= 8)
    {
      v13 = (void **)__dst;
      v14 = a1;
      while (1)
      {
        v15 = v5;
        v16 = *v13;
        v17 = *v6;
        v18 = v16;
        v19 = sub_100384C44();
        v21 = v20;
        v22 = sub_100384C44();
        if (v19 == v22 && v21 == v23)
          break;
        v25 = v23;
        v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v22, v23, 1);

        swift_bridgeObjectRelease(v21);
        swift_bridgeObjectRelease(v25);
        if ((v26 & 1) == 0)
          goto LABEL_23;
        v27 = v6 + 1;
        v5 = v15;
        if (v14 < v6 || v14 >= v27 || v14 != v6)
          *v14 = *v6;
LABEL_26:
        ++v14;
        if (v13 < v45)
        {
          v6 = v27;
          if (v27 < v5)
            continue;
        }
        v49 = v14;
        goto LABEL_53;
      }

      swift_bridgeObjectRelease_n(v21, 2);
LABEL_23:
      v5 = v15;
      if (v14 != v13)
        *v14 = *v13;
      v48 = ++v13;
      v27 = v6;
      goto LABEL_26;
    }
    goto LABEL_53;
  }
LABEL_54:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t *sub_1003871B8(uint64_t isStackAllocationSafe, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  void *v11;
  uint64_t *v12;
  uint64_t v14;

  v4 = isStackAllocationSafe;
  v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  v6 = v5 & 0x3F;
  v7 = (1 << v5) + 63;
  v8 = v7 >> 6;
  v9 = 8 * (v7 >> 6);
  if (v6 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v7 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    sub_10038746C((unint64_t *)((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, v4, a2);
    if (v2)
      swift_willThrow(v10);
    else
      return (uint64_t *)v10;
  }
  else
  {
    v11 = (void *)swift_slowAlloc(v9, -1);
    bzero(v11, v9);
    sub_10038746C((unint64_t *)v11, v8, v4, a2);
    a2 = v12;
    swift_slowDealloc(v11, -1, -1);
  }
  return a2;
}

uint64_t sub_10038731C(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = sub_1003877DC((uint64_t)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v6, v2);
    if (v1)
      swift_willThrow(v8);
    else
      return v8;
  }
  else
  {
    v9 = (void *)swift_slowAlloc(v7, -1);
    bzero(v9, v7);
    v2 = sub_1003877DC((uint64_t)v9, v6, v2);
    swift_slowDealloc(v9, -1, -1);
  }
  return v2;
}

void sub_10038746C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t i;
  _QWORD *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v34;
  uint64_t v36;
  int64_t v37;
  unint64_t v39;
  _QWORD v40[9];
  int64_t v41;

  v4 = a3;
  v34 = 0;
  v5 = 0;
  v36 = a3 + 64;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a3 + 64);
  v37 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v5 << 6);
      goto LABEL_20;
    }
    v11 = __OFADD__(v5++, 1);
    if (v11)
    {
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    if (v5 >= v37)
      goto LABEL_45;
    v12 = *(_QWORD *)(v36 + 8 * v5);
    if (!v12)
      break;
LABEL_19:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v5 << 6);
LABEL_20:
    v14 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v10);
    v15 = v14[1];
    v16 = *a4;
    if (!*(_QWORD *)(*a4 + 16))
    {
      swift_bridgeObjectRetain(v14[1]);
      goto LABEL_6;
    }
    v39 = v8;
    v41 = v5;
    v17 = *v14;
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v10);
    Hasher.init(_seed:)(v40, *(_QWORD *)(v16 + 40));
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v16);
    String.hash(into:)(v40, v17, v15);
    v19 = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v16 + 32);
    v21 = v19 & ~v20;
    v22 = v16 + 56;
    if (((*(_QWORD *)(v16 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
    {
      v23 = *(_QWORD *)(v16 + 48);
      v24 = (_QWORD *)(v23 + 16 * v21);
      v25 = v24[1];
      v26 = *v24 == v17 && v25 == v15;
      if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v24, v25, v17, v15, 0) & 1) != 0)
      {
LABEL_36:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v4 = a3;
        v5 = v41;
        v8 = v39;
        swift_bridgeObjectRelease();
        *(unint64_t *)((char *)a1 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        v11 = __OFADD__(v34++, 1);
        if (v11)
          goto LABEL_47;
      }
      else
      {
        v27 = ~v20;
        for (i = (v21 + 1) & v27; ((*(_QWORD *)(v22 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v27)
        {
          v29 = (_QWORD *)(v23 + 16 * i);
          v30 = v29[1];
          v31 = *v29 == v17 && v30 == v15;
          if (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v29, v30, v17, v15, 0) & 1) != 0)
            goto LABEL_36;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v4 = a3;
        v5 = v41;
        v8 = v39;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v5 = v41;
      v8 = v39;
LABEL_6:
      swift_bridgeObjectRelease();
    }
  }
  v13 = v5 + 1;
  if (v5 + 1 >= v37)
    goto LABEL_45;
  v12 = *(_QWORD *)(v36 + 8 * v13);
  if (v12)
    goto LABEL_18;
  v13 = v5 + 2;
  if (v5 + 2 >= v37)
    goto LABEL_45;
  v12 = *(_QWORD *)(v36 + 8 * v13);
  if (v12)
    goto LABEL_18;
  v13 = v5 + 3;
  if (v5 + 3 >= v37)
  {
LABEL_45:
    sub_1004B2308(a1, a2, v34, v4);
    return;
  }
  v12 = *(_QWORD *)(v36 + 8 * v13);
  if (v12)
  {
LABEL_18:
    v5 = v13;
    goto LABEL_19;
  }
  while (1)
  {
    v5 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v5 >= v37)
      goto LABEL_45;
    v12 = *(_QWORD *)(v36 + 8 * v5);
    ++v13;
    if (v12)
      goto LABEL_19;
  }
LABEL_48:
  __break(1u);
}

uint64_t sub_1003877DC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t *v22;
  _QWORD v23[4];
  uint64_t v24;

  v22 = (unint64_t *)result;
  v4 = 0;
  v5 = 0;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (2)
  {
    v24 = v4;
    do
    {
      if (v9)
      {
        v11 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v12 = v11 | (v5 << 6);
      }
      else
      {
        v18 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
          __break(1u);
LABEL_25:
          __break(1u);
          goto LABEL_26;
        }
        if (v18 >= v10)
          return sub_1004B2314(v22, a2, v24, a3);
        v19 = *(_QWORD *)(v6 + 8 * v18);
        ++v5;
        if (!v19)
        {
          v5 = v18 + 1;
          if (v18 + 1 >= v10)
            return sub_1004B2314(v22, a2, v24, a3);
          v19 = *(_QWORD *)(v6 + 8 * v5);
          if (!v19)
          {
            v5 = v18 + 2;
            if (v18 + 2 >= v10)
              return sub_1004B2314(v22, a2, v24, a3);
            v19 = *(_QWORD *)(v6 + 8 * v5);
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
                return sub_1004B2314(v22, a2, v24, a3);
              v19 = *(_QWORD *)(v6 + 8 * v20);
              if (!v19)
              {
                while (1)
                {
                  v5 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_25;
                  if (v5 >= v10)
                    return sub_1004B2314(v22, a2, v24, a3);
                  v19 = *(_QWORD *)(v6 + 8 * v5);
                  ++v20;
                  if (v19)
                    goto LABEL_22;
                }
              }
              v5 = v20;
            }
          }
        }
LABEL_22:
        v9 = (v19 - 1) & v19;
        v12 = __clz(__rbit64(v19)) + (v5 << 6);
      }
      v13 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v12);
      v15 = *v13;
      v14 = v13[1];
      v23[2] = v15;
      v23[3] = v14;
      v23[0] = 36;
      v23[1] = 0xE100000000000000;
      v16 = sub_10038AD18();
      v17 = sub_10038AD5C();
      result = BidirectionalCollection<>.starts<A>(with:)(v23, &type metadata for String, &type metadata for String, v16, v17);
    }
    while ((result & 1) != 0);
    *(unint64_t *)((char *)v22 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v4 = v24 + 1;
    if (!__OFADD__(v24, 1))
      continue;
    break;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1003879BC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1[92] = a1;
  v2 = sub_10001A630((uint64_t *)&unk_100839C80);
  v1[93] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID(0);
  v1[94] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[95] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[96] = swift_task_alloc(v5);
  v1[97] = swift_task_alloc(v5);
  v1[98] = swift_task_alloc(v5);
  v1[99] = swift_task_alloc(v5);
  v1[100] = swift_task_alloc(v5);
  v1[101] = swift_task_alloc(v5);
  v1[102] = swift_task_alloc(v5);
  v1[103] = swift_task_alloc(v5);
  v1[104] = swift_task_alloc(v5);
  v1[105] = swift_task_alloc(v5);
  v1[106] = swift_task_alloc(v5);
  v1[107] = swift_task_alloc(v5);
  v1[108] = swift_task_alloc(v5);
  v1[109] = swift_task_alloc(v5);
  v6 = sub_10001A630(&qword_1008473B8);
  v1[110] = v6;
  v7 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[111] = swift_task_alloc(v7);
  v1[112] = swift_task_alloc(v7);
  v1[113] = swift_task_alloc(v7);
  return swift_task_switch(sub_100387B24, 0, 0);
}

uint64_t sub_100387B24()
{
  uint64_t v0;
  id v1;
  NSString v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = objc_allocWithZone((Class)DESRecordStore);
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "initWithBundleIdentifier:", v2);
  *(_QWORD *)(v0 + 912) = v3;

  if (v3)
  {
    if (objc_msgSend(v3, "isPermitted"))
    {
      v4 = v0 + 80;
      *(_QWORD *)(v0 + 120) = v0 + 720;
      *(_QWORD *)(v0 + 80) = v0;
      *(_QWORD *)(v0 + 88) = sub_100387EA0;
      v5 = swift_continuation_init(v0 + 80, 1);
      *(_QWORD *)(v0 + 208) = _NSConcreteStackBlock;
      v6 = (_QWORD *)(v0 + 208);
      v6[1] = 0x40000000;
      v6[2] = sub_10038361C;
      v6[3] = &unk_1007F0A20;
      v6[4] = v5;
      objc_msgSend(v3, "fetchSavedRecordInfoWithCompletion:", v6);
      return swift_continuation_await(v4);
    }
    if (qword_100837300 != -1)
      swift_once(&qword_100837300, sub_100381A28);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_10001AAA8(v13, (uint64_t)qword_1008471C0);
    v10 = Logger.logObject.getter(v14);
    v15 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v15, "Record store not permited. Not saving records", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

  }
  else
  {
    if (qword_100837300 != -1)
      swift_once(&qword_100837300, sub_100381A28);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10001AAA8(v8, (uint64_t)qword_1008471C0);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to get record store. Not saving records", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }
  }

  v17 = *(_QWORD *)(v0 + 896);
  v18 = *(_QWORD *)(v0 + 888);
  v19 = *(_QWORD *)(v0 + 872);
  v20 = *(_QWORD *)(v0 + 864);
  v21 = *(_QWORD *)(v0 + 856);
  v22 = *(_QWORD *)(v0 + 848);
  v23 = *(_QWORD *)(v0 + 840);
  v24 = *(_QWORD *)(v0 + 832);
  v25 = *(_QWORD *)(v0 + 824);
  v26 = *(_QWORD *)(v0 + 816);
  v27 = *(_QWORD *)(v0 + 808);
  v28 = *(_QWORD *)(v0 + 800);
  v29 = *(_QWORD *)(v0 + 792);
  v30 = *(_QWORD *)(v0 + 784);
  v31 = *(_QWORD *)(v0 + 776);
  v32 = *(_QWORD *)(v0 + 768);
  v33 = *(_QWORD *)(v0 + 744);
  swift_task_dealloc(*(_QWORD *)(v0 + 904));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100387EA0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  *(_QWORD *)(*(_QWORD *)v0 + 920) = v1;
  if (v1)
    v2 = sub_10038A4F8;
  else
    v2 = sub_100387F00;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100387F00()
{
  uint64_t v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t i;
  BOOL v31;
  int64_t v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, unint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  _BOOL4 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  __n128 v69;
  void (*v70)(uint64_t, uint64_t, __n128);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  _BOOL4 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  __n128 v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  _BOOL4 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  __n128 v109;
  void (*v110)(uint64_t, uint64_t, __n128);
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  NSObject *v121;
  os_log_type_t v122;
  _BOOL4 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  __n128 v131;
  __n128 v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  NSObject *v142;
  os_log_type_t v143;
  _BOOL4 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  __n128 v152;
  __n128 v153;
  unint64_t v154;
  __n128 v155;
  unint64_t v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  NSObject *v161;
  os_log_type_t v162;
  uint8_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  NSObject *v169;
  os_log_type_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  NSObject *v191;
  os_log_type_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  void (*v198)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  __n128 v202;
  void (*v203)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  Class isa;
  uint64_t v210;
  _QWORD *v211;
  void (*v212)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v213;
  uint64_t v214;
  __n128 v215;
  uint64_t v216;
  char v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  Class v227;
  Class v228;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  NSObject *v233;
  os_log_type_t v234;
  _BOOL4 v235;
  void *v236;
  uint8_t *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t *v252;
  _QWORD *v253;
  _QWORD *v254;
  uint64_t *v255;
  uint64_t *v256;
  uint64_t *v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t type;
  os_log_type_t typea[8];
  os_log_type_t typeb;
  _QWORD *v264;
  unint64_t v265;
  uint64_t v266;
  _OWORD *v267;
  void (*v268)(char *, uint64_t, uint64_t);
  _OWORD *v269;
  uint64_t v270;
  uint64_t v271;
  int64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  _OWORD *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  int64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288[3];

  v260 = v0 + 392;
  v266 = v0 + 488;
  v267 = (_OWORD *)(v0 + 456);
  v264 = (_QWORD *)(v0 + 520);
  v1 = *(uint64_t **)(v0 + 736);
  v276 = *(_QWORD *)(v0 + 720);
  v2 = sub_1002B13B0((uint64_t)_swiftEmptyArrayStorage);
  v3 = v1[2];
  v269 = (_OWORD *)(v0 + 424);
  if (v3)
  {
    v280 = (_OWORD *)(v0 + 328);
    v4 = *(_QWORD *)(v0 + 736);
    v5 = *(_QWORD *)(type metadata accessor for REMAccountSnapshotSummary(0) - 8);
    v6 = v4 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v283 = *(_QWORD *)(v5 + 72);
    swift_bridgeObjectRetain(v4);
    do
    {
      v8 = (void *)REMAccountSnapshotSummary.accountID.getter(v7);
      v10 = REMAccountSnapshotSummary.nsPayload.getter(v9);
      sub_1003B1A74(v10);
      v12 = v11;
      v13 = objc_msgSend(v8, "stringRepresentation", swift_bridgeObjectRelease().n128_f64[0]);
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

      *(_QWORD *)(v0 + 384) = &type metadata for String;
      *(_QWORD *)(v0 + 360) = v14;
      *(_QWORD *)(v0 + 368) = v16;
      sub_10001A6CC((_OWORD *)(v0 + 360), v280);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12);
      v288[0] = v12;
      sub_10028CB74(v280, 0x49746E756F636361, 0xE900000000000044, isUniquelyReferenced_nonNull_native);
      v18 = v288[0];
      v19 = objc_msgSend(v8, "stringRepresentation", swift_bridgeObjectRelease().n128_f64[0]);
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v22 = v21;

      v23 = swift_isUniquelyReferenced_nonNull_native(v2);
      v288[0] = v2;
      v1 = v288;
      sub_10028D8B0(v18, v20, v22, v23);
      v2 = v288[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v6 += v283;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  v258 = (uint64_t *)(v0 + 624);
  v256 = (uint64_t *)(v0 + 632);
  v257 = (uint64_t *)(v0 + 640);
  *(_QWORD *)(v0 + 928) = v2;
  v251 = (uint64_t *)(v0 + 648);
  v252 = (uint64_t *)(v0 + 616);
  v255 = (uint64_t *)(v0 + 656);
  v274 = *(_QWORD *)(v0 + 880);
  v259 = v0 + 664;
  v253 = (_QWORD *)(v0 + 712);
  v286 = *(_QWORD *)(v0 + 760);
  v254 = (_QWORD *)(v0 + 728);
  swift_bridgeObjectRetain(v2);
  v265 = v2;
  v25 = 0;
  *(_QWORD *)(v0 + 672) = sub_10011E910(v24);
  *(_QWORD *)(v0 + 664) = _swiftEmptyArrayStorage;
  v26 = -1;
  v270 = v276 + 64;
  v27 = -1 << *(_BYTE *)(v276 + 32);
  if (-v27 < 64)
    v26 = ~(-1 << -(char)v27);
  v28 = v26 & *(_QWORD *)(v276 + 64);
  v272 = (unint64_t)(63 - v27) >> 6;
  v29 = (unint64_t)&off_1006A3000;
  if (!v28)
    goto LABEL_9;
LABEL_8:
  v281 = (v28 - 1) & v28;
  v284 = v25;
  for (i = __clz(__rbit64(v28)) | (v25 << 6); ; i = __clz(__rbit64(v29)) + (v32 << 6))
  {
    v34 = *(_QWORD *)(v0 + 904);
    v35 = *(_QWORD *)(v0 + 896);
    v36 = *(_QWORD *)(v0 + 888);
    v37 = *(_QWORD *)(v0 + 872);
    v38 = *(_QWORD *)(v0 + 752);
    v278 = *(_QWORD *)(v286 + 72);
    v39 = *(void (**)(uint64_t, unint64_t, uint64_t))(v286 + 16);
    v39(v34, *(_QWORD *)(v276 + 48) + v278 * i, v38);
    v40 = *(_QWORD *)(*(_QWORD *)(v276 + 56) + 8 * i);
    *(_QWORD *)(v34 + *(int *)(v274 + 48)) = v40;
    v41 = *(int *)(v274 + 48);
    v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v286 + 32);
    v42(v35, v34, v38);
    *(_QWORD *)(v35 + v41) = v40;
    v39(v36, v35, v38);
    v42(v37, v36, v38);
    v43 = *(_QWORD *)(v40 + 16);
    swift_bridgeObjectRetain(v40);
    if (!v43)
      goto LABEL_32;
    swift_bridgeObjectRetain(v40);
    v44 = sub_10001A6DC(0x49746E756F636361, 0xE900000000000044);
    if ((v45 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_32:
      if (qword_100837300 != -1)
        swift_once(&qword_100837300, sub_100381A28);
      v71 = *(_QWORD *)(v0 + 872);
      v72 = *(_QWORD *)(v0 + 792);
      v73 = *(_QWORD *)(v0 + 752);
      v74 = type metadata accessor for Logger(0);
      sub_10001AAA8(v74, (uint64_t)qword_1008471C0);
      v75 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v39)(v72, v71, v73);
      v76 = Logger.logObject.getter(v75);
      v77 = static os_log_type_t.default.getter(v76);
      v78 = os_log_type_enabled(v76, v77);
      v79 = *(_QWORD *)(v0 + 792);
      v80 = *(_QWORD *)(v0 + 752);
      if (v78)
      {
        v81 = swift_slowAlloc(12, -1);
        v82 = swift_slowAlloc(32, -1);
        v288[0] = v82;
        *(_DWORD *)v81 = 136446210;
        v83 = UUID.uuidString.getter(v82);
        *(_QWORD *)(v81 + 4) = sub_10001A820(v83, v84, v288);
        v85 = swift_bridgeObjectRelease();
        v70 = *(void (**)(uint64_t, uint64_t, __n128))(v286 + 8);
        v70(v79, v80, v85);
        _os_log_impl((void *)&_mh_execute_header, v76, v77, "AccountID == nil, deleting record {recordID: %{public}s}", (uint8_t *)v81, 0xCu);
        swift_arrayDestroy(v82, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v82, -1, -1);
        swift_slowDealloc(v81, -1, -1);
      }
      else
      {
        v70 = *(void (**)(uint64_t, uint64_t, __n128))(v286 + 8);
        ((void (*)(_QWORD, _QWORD))v70)(*(_QWORD *)(v0 + 792), *(_QWORD *)(v0 + 752));
      }

      v25 = v284;
      v39(*(_QWORD *)(v0 + 784), *(_QWORD *)(v0 + 872), *(_QWORD *)(v0 + 752));
      v1 = *(uint64_t **)(v0 + 664);
      if ((swift_isUniquelyReferenced_nonNull_native(v1) & 1) == 0)
        v1 = (uint64_t *)sub_1002C8EC4(0, v1[2] + 1, 1, (unint64_t)v1);
      v87 = v1[2];
      v86 = v1[3];
      if (v87 >= v86 >> 1)
        v1 = (uint64_t *)sub_1002C8EC4(v86 > 1, v87 + 1, 1, (unint64_t)v1);
      v88 = *(_QWORD *)(v0 + 896);
      v89 = *(_QWORD *)(v0 + 872);
      v90 = *(_QWORD *)(v0 + 784);
      v91 = *(_QWORD *)(v0 + 752);
      v1[2] = v87 + 1;
      v42((uint64_t)v1+ ((*(unsigned __int8 *)(v286 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v286 + 80))+ v87 * v278, v90, v91);
      *(_QWORD *)(v0 + 664) = v1;
      goto LABEL_42;
    }
    sub_10001A670(*(_QWORD *)(v40 + 56) + 32 * v44, (uint64_t)v267);
    sub_10001A6CC(v267, v269);
    sub_10001A670((uint64_t)v269, v266);
    v268 = (void (*)(char *, uint64_t, uint64_t))v42;
    if ((swift_dynamicCast(v0 + 600, v266, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      if (qword_100837300 != -1)
        swift_once(&qword_100837300, sub_100381A28);
      v92 = *(_QWORD *)(v0 + 872);
      v93 = *(_QWORD *)(v0 + 808);
      v94 = *(_QWORD *)(v0 + 752);
      v95 = type metadata accessor for Logger(0);
      sub_10001AAA8(v95, (uint64_t)qword_1008471C0);
      sub_10001A670((uint64_t)v269, (uint64_t)v264);
      v96 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v39)(v93, v92, v94);
      v97 = Logger.logObject.getter(v96);
      v98 = static os_log_type_t.fault.getter();
      v99 = os_log_type_enabled(v97, v98);
      v100 = *(_QWORD *)(v0 + 808);
      v101 = *(_QWORD *)(v0 + 752);
      if (v99)
      {
        v102 = swift_slowAlloc(22, -1);
        v103 = swift_slowAlloc(64, -1);
        v288[0] = v103;
        *(_DWORD *)v102 = 136446466;
        sub_10001A670((uint64_t)v264, v260);
        v104 = String.init<A>(describing:)(v260, (char *)&type metadata for Any + 8);
        *(_QWORD *)(v102 + 4) = sub_10001A820(v104, v105, v288);
        swift_bridgeObjectRelease();
        v106 = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v264);
        *(_WORD *)(v102 + 12) = 2082;
        v107 = UUID.uuidString.getter(v106);
        *(_QWORD *)(v102 + 14) = sub_10001A820(v107, v108, v288);
        v109 = swift_bridgeObjectRelease();
        v110 = *(void (**)(uint64_t, uint64_t, __n128))(v286 + 8);
        v110(v100, v101, v109);
        _os_log_impl((void *)&_mh_execute_header, v97, v98, "AccountID.Type != String, deleting record {accountID: %{public}s, recordID: %{public}s}", (uint8_t *)v102, 0x16u);
        swift_arrayDestroy(v103, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v103, -1, -1);
        swift_slowDealloc(v102, -1, -1);
      }
      else
      {
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v264);
        v110 = *(void (**)(uint64_t, uint64_t, __n128))(v286 + 8);
        ((void (*)(uint64_t, uint64_t))v110)(v100, v101);
      }

      v25 = v284;
      v39(*(_QWORD *)(v0 + 800), *(_QWORD *)(v0 + 872), *(_QWORD *)(v0 + 752));
      v1 = *(uint64_t **)(v0 + 664);
      if ((swift_isUniquelyReferenced_nonNull_native(v1) & 1) == 0)
        v1 = (uint64_t *)sub_1002C8EC4(0, v1[2] + 1, 1, (unint64_t)v1);
      v112 = v1[2];
      v111 = v1[3];
      if (v112 >= v111 >> 1)
        v1 = (uint64_t *)sub_1002C8EC4(v111 > 1, v112 + 1, 1, (unint64_t)v1);
      v88 = *(_QWORD *)(v0 + 896);
      v113 = *(_QWORD *)(v0 + 872);
      v114 = *(_QWORD *)(v0 + 800);
      v115 = *(_QWORD *)(v0 + 752);
      v1[2] = v112 + 1;
      v268((char *)v1+ ((*(unsigned __int8 *)(v286 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v286 + 80))+ v112 * v278, v114, v115);
      *(_QWORD *)(v0 + 664) = v1;
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v269);
      ((void (*)(uint64_t, uint64_t))v110)(v113, v115);
LABEL_43:
      sub_10000882C(v88, &qword_1008473B8);
      v28 = v281;
      if (v281)
        goto LABEL_8;
      goto LABEL_9;
    }
    v46 = *(_QWORD *)(v0 + 600);
    v47 = *(_QWORD *)(v0 + 608);
    if (!*(_QWORD *)(v265 + 16))
      goto LABEL_60;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 608));
    v48 = sub_10001A6DC(v46, v47);
    if ((v49 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_60:
      swift_bridgeObjectRelease();
      if (qword_100837300 != -1)
        swift_once(&qword_100837300, sub_100381A28);
      v116 = *(_QWORD *)(v0 + 872);
      v117 = *(_QWORD *)(v0 + 824);
      v118 = *(_QWORD *)(v0 + 752);
      v119 = type metadata accessor for Logger(0);
      sub_10001AAA8(v119, (uint64_t)qword_1008471C0);
      v39(v117, v116, v118);
      swift_bridgeObjectRetain(v47);
      v121 = Logger.logObject.getter(v120);
      v122 = static os_log_type_t.default.getter(v121);
      v123 = os_log_type_enabled(v121, v122);
      v124 = *(_QWORD *)(v0 + 824);
      v125 = *(_QWORD *)(v0 + 752);
      if (v123)
      {
        v126 = swift_slowAlloc(22, -1);
        v127 = swift_slowAlloc(64, -1);
        v288[0] = v127;
        *(_DWORD *)v126 = 136446466;
        swift_bridgeObjectRetain(v47);
        *(_QWORD *)(v126 + 4) = sub_10001A820(v46, v47, v288);
        swift_bridgeObjectRelease_n(v47, 3);
        *(_WORD *)(v126 + 12) = 2082;
        v129 = UUID.uuidString.getter(v128);
        *(_QWORD *)(v126 + 14) = sub_10001A820(v129, v130, v288);
        v131 = swift_bridgeObjectRelease();
        v70 = *(void (**)(uint64_t, uint64_t, __n128))(v286 + 8);
        v70(v124, v125, v131);
        _os_log_impl((void *)&_mh_execute_header, v121, v122, "Record missing from accountRecords. Deleting {accountID: %{public}s, recordID: %{public}s}", (uint8_t *)v126, 0x16u);
        swift_arrayDestroy(v127, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v127, -1, -1);
        swift_slowDealloc(v126, -1, -1);
      }
      else
      {
        v132 = swift_bridgeObjectRelease_n(v47, 2);
        v70 = *(void (**)(uint64_t, uint64_t, __n128))(v286 + 8);
        v70(v124, v125, v132);
      }

      v39(*(_QWORD *)(v0 + 816), *(_QWORD *)(v0 + 872), *(_QWORD *)(v0 + 752));
      v1 = *(uint64_t **)(v0 + 664);
      v25 = v284;
      if ((swift_isUniquelyReferenced_nonNull_native(v1) & 1) == 0)
        v1 = (uint64_t *)sub_1002C8EC4(0, v1[2] + 1, 1, (unint64_t)v1);
      v134 = v1[2];
      v133 = v1[3];
      v135 = v134 + 1;
      if (v134 >= v133 >> 1)
        v1 = (uint64_t *)sub_1002C8EC4(v133 > 1, v134 + 1, 1, (unint64_t)v1);
      v88 = *(_QWORD *)(v0 + 896);
      v89 = *(_QWORD *)(v0 + 872);
      v136 = *(_QWORD *)(v0 + 816);
LABEL_86:
      v91 = *(_QWORD *)(v0 + 752);
      v1[2] = v135;
      v268((char *)v1+ ((*(unsigned __int8 *)(v286 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v286 + 80))+ v134 * v278, v136, v91);
      *(_QWORD *)(v0 + 664) = v1;
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v269);
LABEL_42:
      ((void (*)(uint64_t, uint64_t))v70)(v89, v91);
      goto LABEL_43;
    }
    v50 = *(_QWORD *)(*(_QWORD *)(v265 + 56) + 8 * v48);
    swift_bridgeObjectRetain(v50);
    swift_bridgeObjectRelease();
    sub_1003836D4(v50);
    v52 = v51;
    swift_bridgeObjectRelease();
    if (!v52)
    {
      swift_bridgeObjectRelease();
      if (qword_100837300 != -1)
        swift_once(&qword_100837300, sub_100381A28);
      v137 = *(_QWORD *)(v0 + 872);
      v138 = *(_QWORD *)(v0 + 840);
      v139 = *(_QWORD *)(v0 + 752);
      v140 = type metadata accessor for Logger(0);
      sub_10001AAA8(v140, (uint64_t)qword_1008471C0);
      v39(v138, v137, v139);
      swift_bridgeObjectRetain(v47);
      v142 = Logger.logObject.getter(v141);
      v143 = static os_log_type_t.fault.getter();
      v144 = os_log_type_enabled(v142, v143);
      v145 = *(_QWORD *)(v0 + 840);
      v146 = *(_QWORD *)(v0 + 752);
      if (v144)
      {
        v147 = swift_slowAlloc(22, -1);
        *(_QWORD *)typea = v146;
        v148 = swift_slowAlloc(64, -1);
        v288[0] = v148;
        *(_DWORD *)v147 = 136446466;
        swift_bridgeObjectRetain(v47);
        *v255 = sub_10001A820(v46, v47, v288);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v255, v259);
        swift_bridgeObjectRelease_n(v47, 3);
        *(_WORD *)(v147 + 12) = 2082;
        v150 = UUID.uuidString.getter(v149);
        *v252 = sub_10001A820(v150, v151, v288);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v252, v258);
        v152 = swift_bridgeObjectRelease();
        v70 = *(void (**)(uint64_t, uint64_t, __n128))(v286 + 8);
        v70(v145, *(_QWORD *)typea, v152);
        _os_log_impl((void *)&_mh_execute_header, v142, v143, "Failed to cast accountRecord to NSObject. Deleting {accountID: %{public}s, recordID: %{public}s}", (uint8_t *)v147, 0x16u);
        swift_arrayDestroy(v148, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v148, -1, -1);
        swift_slowDealloc(v147, -1, -1);
      }
      else
      {
        v155 = swift_bridgeObjectRelease_n(v47, 2);
        v70 = *(void (**)(uint64_t, uint64_t, __n128))(v286 + 8);
        v70(v145, v146, v155);
      }

      v25 = v284;
      v39(*(_QWORD *)(v0 + 832), *(_QWORD *)(v0 + 872), *(_QWORD *)(v0 + 752));
      v1 = *(uint64_t **)(v0 + 664);
      if ((swift_isUniquelyReferenced_nonNull_native(v1) & 1) == 0)
        v1 = (uint64_t *)sub_1002C8EC4(0, v1[2] + 1, 1, (unint64_t)v1);
      v134 = v1[2];
      v156 = v1[3];
      v135 = v134 + 1;
      if (v134 >= v156 >> 1)
        v1 = (uint64_t *)sub_1002C8EC4(v156 > 1, v134 + 1, 1, (unint64_t)v1);
      v88 = *(_QWORD *)(v0 + 896);
      v89 = *(_QWORD *)(v0 + 872);
      v136 = *(_QWORD *)(v0 + 832);
      goto LABEL_86;
    }
    sub_1003836D4(v40);
    v54 = v53;
    swift_bridgeObjectRelease();
    if (!v54)
    {
      swift_bridgeObjectRelease();
      if (qword_100837300 != -1)
        swift_once(&qword_100837300, sub_100381A28);
      v55 = *(_QWORD *)(v0 + 872);
      v56 = *(_QWORD *)(v0 + 856);
      v57 = *(_QWORD *)(v0 + 752);
      v58 = type metadata accessor for Logger(0);
      sub_10001AAA8(v58, (uint64_t)qword_1008471C0);
      v39(v56, v55, v57);
      swift_bridgeObjectRetain(v47);
      v60 = Logger.logObject.getter(v59);
      v61 = static os_log_type_t.fault.getter();
      v62 = os_log_type_enabled(v60, v61);
      v63 = *(_QWORD *)(v0 + 856);
      v64 = *(_QWORD *)(v0 + 752);
      if (v62)
      {
        v65 = swift_slowAlloc(22, -1);
        type = swift_slowAlloc(64, -1);
        v288[0] = type;
        *(_DWORD *)v65 = 136446466;
        swift_bridgeObjectRetain(v47);
        *v258 = sub_10001A820(v46, v47, v288);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v258, v256);
        swift_bridgeObjectRelease_n(v47, 3);
        *(_WORD *)(v65 + 12) = 2082;
        v67 = UUID.uuidString.getter(v66);
        *v256 = sub_10001A820(v67, v68, v288);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v256, v257);
        v69 = swift_bridgeObjectRelease();
        v70 = *(void (**)(uint64_t, uint64_t, __n128))(v286 + 8);
        v70(v63, v64, v69);
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "Failed to cast fetchedRecord to NSObject. Deleting {accountID: %{public}s, recordID: %{public}s}", (uint8_t *)v65, 0x16u);
        swift_arrayDestroy(type, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(type, -1, -1);
        swift_slowDealloc(v65, -1, -1);
      }
      else
      {
        v153 = swift_bridgeObjectRelease_n(v47, 2);
        v70 = *(void (**)(uint64_t, uint64_t, __n128))(v286 + 8);
        v70(v63, v64, v153);
      }

      v25 = v284;
      v39(*(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 872), *(_QWORD *)(v0 + 752));
      v1 = *(uint64_t **)(v0 + 664);
      if ((swift_isUniquelyReferenced_nonNull_native(v1) & 1) == 0)
        v1 = (uint64_t *)sub_1002C8EC4(0, v1[2] + 1, 1, (unint64_t)v1);
      v134 = v1[2];
      v154 = v1[3];
      v135 = v134 + 1;
      if (v134 >= v154 >> 1)
        v1 = (uint64_t *)sub_1002C8EC4(v154 > 1, v134 + 1, 1, (unint64_t)v1);
      v88 = *(_QWORD *)(v0 + 896);
      v89 = *(_QWORD *)(v0 + 872);
      v136 = *(_QWORD *)(v0 + 848);
      goto LABEL_86;
    }
    v157 = sub_10038731C(v54);
    swift_bridgeObjectRelease();
    sub_10040ABFC(v157, v52);
    if ((v158 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      if (qword_100837300 != -1)
        swift_once(&qword_100837300, sub_100381A28);
      v167 = type metadata accessor for Logger(0);
      sub_10001AAA8(v167, (uint64_t)qword_1008471C0);
      swift_retain();
      swift_bridgeObjectRetain(v52);
      v169 = Logger.logObject.getter(v168);
      v170 = static os_log_type_t.default.getter(v169);
      if (os_log_type_enabled(v169, v170))
      {
        typeb = v170;
        v171 = swift_slowAlloc(22, -1);
        v172 = swift_slowAlloc(64, -1);
        v288[0] = v172;
        *(_DWORD *)v171 = 136446466;
        v250 = v172;
        v173 = sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
        v174 = swift_retain();
        v175 = Dictionary.description.getter(v174, &type metadata for String, v173, &protocol witness table for String);
        v177 = v176;
        swift_release(v157);
        *v257 = sub_10001A820(v175, v177, v288);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v257, v251);
        swift_bridgeObjectRelease();
        swift_release_n(v157);
        *(_WORD *)(v171 + 12) = 2082;
        swift_bridgeObjectRetain(v52);
        v179 = Dictionary.description.getter(v178, &type metadata for String, v173, &protocol witness table for String);
        v181 = v180;
        swift_bridgeObjectRelease();
        *v251 = sub_10001A820(v179, v181, v288);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v251, v255);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n(v52, 2);
        _os_log_impl((void *)&_mh_execute_header, v169, typeb, "Records don't match replacing {nsFetchedRecord: %{public}s, nsAccountRecord: %{public}s}", (uint8_t *)v171, 0x16u);
        swift_arrayDestroy(v250, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v250, -1, -1);
        swift_slowDealloc(v171, -1, -1);
      }
      else
      {
        swift_release_n(v157);
        swift_bridgeObjectRelease_n(v52, 2);
      }

      v39(*(_QWORD *)(v0 + 864), *(_QWORD *)(v0 + 872), *(_QWORD *)(v0 + 752));
      v1 = *(uint64_t **)(v0 + 664);
      v25 = v284;
      if ((swift_isUniquelyReferenced_nonNull_native(v1) & 1) == 0)
        v1 = (uint64_t *)sub_1002C8EC4(0, v1[2] + 1, 1, (unint64_t)v1);
      v183 = v1[2];
      v182 = v1[3];
      if (v183 >= v182 >> 1)
        v1 = (uint64_t *)sub_1002C8EC4(v182 > 1, v183 + 1, 1, (unint64_t)v1);
      v88 = *(_QWORD *)(v0 + 896);
      v184 = *(_QWORD *)(v0 + 872);
      v185 = *(_QWORD *)(v0 + 864);
      v186 = *(_QWORD *)(v0 + 752);
      v1[2] = v183 + 1;
      v268((char *)v1+ ((*(unsigned __int8 *)(v286 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v286 + 80))+ v183 * v278, v185, v186);
      *(_QWORD *)(v0 + 664) = v1;
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v269);
      (*(void (**)(uint64_t, uint64_t))(v286 + 8))(v184, v186);
      goto LABEL_43;
    }
    swift_bridgeObjectRelease();
    swift_release(v157);
    if (qword_100837300 != -1)
      swift_once(&qword_100837300, sub_100381A28);
    v159 = type metadata accessor for Logger(0);
    v160 = sub_10001AAA8(v159, (uint64_t)qword_1008471C0);
    v161 = Logger.logObject.getter(v160);
    v162 = static os_log_type_t.info.getter(v161);
    v25 = v284;
    if (os_log_type_enabled(v161, v162))
    {
      v163 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v163 = 0;
      _os_log_impl((void *)&_mh_execute_header, v161, v162, "Records match. No need to update", v163, 2u);
      swift_slowDealloc(v163, -1, -1);
    }
    v164 = *(_QWORD *)(v0 + 896);
    v165 = *(_QWORD *)(v0 + 872);
    v166 = *(_QWORD *)(v0 + 752);

    v1 = (uint64_t *)(v0 + 672);
    sub_10059BE6C(v46, v47);
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v269);
    (*(void (**)(uint64_t, uint64_t))(v286 + 8))(v165, v166);
    sub_10000882C(v164, &qword_1008473B8);
    swift_bridgeObjectRelease();
    v28 = v281;
    if (v281)
      goto LABEL_8;
LABEL_9:
    v31 = __OFADD__(v25, 1);
    v32 = v25 + 1;
    if (v31)
    {
      __break(1u);
      goto LABEL_134;
    }
    if (v32 >= v272)
      goto LABEL_104;
    v29 = *(_QWORD *)(v270 + 8 * v32);
    if (!v29)
      break;
LABEL_19:
    v281 = (v29 - 1) & v29;
    v284 = v32;
  }
  v33 = v32 + 1;
  if (v32 + 1 >= v272)
    goto LABEL_104;
  v29 = *(_QWORD *)(v270 + 8 * v33);
  if (v29)
    goto LABEL_18;
  v33 = v32 + 2;
  if (v32 + 2 >= v272)
    goto LABEL_104;
  v29 = *(_QWORD *)(v270 + 8 * v33);
  if (v29)
    goto LABEL_18;
  v33 = v32 + 3;
  if (v32 + 3 >= v272)
  {
LABEL_104:
    swift_release(v276);
    swift_bridgeObjectRetain(v265);
    v188 = sub_1003871B8(v187, (uint64_t *)(v0 + 672));
    *(_QWORD *)(v0 + 936) = v188;
    swift_bridgeObjectRelease();
    if (!v188[2] && !*(_QWORD *)(*(_QWORD *)v259 + 16))
    {
      if (qword_100837300 != -1)
        swift_once(&qword_100837300, sub_100381A28);
      v231 = type metadata accessor for Logger(0);
      v232 = sub_10001AAA8(v231, (uint64_t)qword_1008471C0);
      v233 = Logger.logObject.getter(v232);
      v234 = static os_log_type_t.info.getter(v233);
      v235 = os_log_type_enabled(v233, v234);
      v236 = *(void **)(v0 + 912);
      if (v235)
      {
        v237 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v237 = 0;
        _os_log_impl((void *)&_mh_execute_header, v233, v234, "No records changed. Done", v237, 2u);
        swift_slowDealloc(v237, -1, -1);

        swift_release(v188);
      }
      else
      {
        swift_release(v188);

      }
      goto LABEL_151;
    }
    if (qword_100837300 != -1)
      swift_once(&qword_100837300, sub_100381A28);
    v189 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 944) = sub_10001AAA8(v189, (uint64_t)qword_1008471C0);
    v190 = swift_retain();
    v191 = Logger.logObject.getter(v190);
    v192 = static os_log_type_t.default.getter(v191);
    if (os_log_type_enabled(v191, v192))
    {
      v193 = swift_slowAlloc(22, -1);
      *(_DWORD *)v193 = 134218240;
      *v253 = v188[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v253, v0 + 720);
      swift_release(v188);
      *(_WORD *)(v193 + 12) = 2048;
      swift_beginAccess(v259, v0 + 552, 0, 0);
      *v254 = *(_QWORD *)(*(_QWORD *)v259 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v254, v0 + 736);
      _os_log_impl((void *)&_mh_execute_header, v191, v192, "Updating Records {recordsToAdd.count: %ld, recordIDsToDelete.count: %ld}", (uint8_t *)v193, 0x16u);
      swift_slowDealloc(v193, -1, -1);
    }
    else
    {
      swift_release(v188);
    }

    swift_beginAccess(v259, v0 + 576, 0, 0);
    v194 = *(_QWORD *)(v0 + 664);
    *(_QWORD *)(v0 + 952) = v194;
    v195 = *(_QWORD *)(v194 + 16);
    *(_QWORD *)(v0 + 960) = v195;
    v196 = *(_QWORD *)(v0 + 760);
    if (v195)
    {
      v197 = *(_DWORD *)(v286 + 80);
      *(_DWORD *)(v0 + 1056) = v197;
      *(_QWORD *)(v0 + 968) = *(_QWORD *)(v286 + 72);
      v198 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v286 + 16);
      *(_QWORD *)(v0 + 976) = v198;
      *(_QWORD *)(v0 + 984) = 0;
      v199 = *(_QWORD *)(v0 + 752);
      v200 = *(_QWORD *)(v0 + 744);
      v201 = v194 + ((v197 + 32) & ~(unint64_t)v197);
      v202 = swift_bridgeObjectRetain(v194);
      v198(v200, v201, v199, v202);
      v203 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v196 + 56);
      *(_QWORD *)(v0 + 992) = v203;
      v203(v200, 0, 1, v199);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v196 + 48))(v200, 1, v199) != 1)
      {
        v204 = v0 + 144;
        v205 = *(void **)(v0 + 912);
        v206 = *(_QWORD *)(v0 + 776);
        v207 = *(_QWORD *)(v0 + 760);
        v208 = *(_QWORD *)(v0 + 752);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v207 + 32))(v206, *(_QWORD *)(v0 + 744), v208);
        isa = UUID._bridgeToObjectiveC()().super.isa;
        *(_QWORD *)(v0 + 1000) = isa;
        (*(void (**)(uint64_t, uint64_t))(v207 + 8))(v206, v208);
        *(_QWORD *)(v0 + 184) = v0 + 688;
        *(_QWORD *)(v0 + 144) = v0;
        *(_QWORD *)(v0 + 152) = sub_100389BF4;
        v210 = swift_continuation_init(v0 + 144, 0);
        *(_QWORD *)(v0 + 248) = _NSConcreteStackBlock;
        v211 = (_QWORD *)(v0 + 248);
        v211[1] = 0x40000000;
        v211[2] = sub_100383A68;
        v211[3] = &unk_1007F0A50;
        v211[4] = v210;
        objc_msgSend(v205, "deleteSavedRecordWithIdentfier:completion:", isa, v211);
        return swift_continuation_await(v204);
      }
    }
    else
    {
      v212 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v196 + 56);
      v213 = *(_QWORD *)(v0 + 752);
      v214 = *(_QWORD *)(v0 + 744);
      v215 = swift_bridgeObjectRetain(v194);
      v212(v214, 1, 1, v213, v215);
    }
    v216 = *(_QWORD *)(v0 + 936);
    swift_bridgeObjectRelease();
    v217 = *(_BYTE *)(v216 + 32);
    *(_BYTE *)(v0 + 1060) = v217;
    v218 = -1;
    v219 = -1 << v217;
    if (-(-1 << v217) < 64)
      v218 = ~(-1 << -(char)v219);
    v220 = v218 & *(_QWORD *)(v216 + 64);
    swift_retain();
    if (v220)
    {
      v221 = 0;
      v222 = __clz(__rbit64(v220));
      v223 = (v220 - 1) & v220;
      v1 = *(uint64_t **)(v0 + 936);
LABEL_119:
      v204 = v0 + 16;
      *(_QWORD *)(v0 + 1016) = v221;
      *(_QWORD *)(v0 + 1008) = v223;
      v224 = *(void **)(v0 + 912);
      v225 = *(_QWORD *)(v0 + 768);
      v226 = *(_QWORD *)(v1[7] + 8 * v222);
      *(_QWORD *)(v0 + 1024) = v226;
      swift_bridgeObjectRetain(v226);
      v227 = Data._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)(v0 + 1032) = v227;
      v228 = Dictionary._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)(v0 + 1040) = v228;
      *(_QWORD *)(v0 + 56) = v225;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_10038A128;
      *(_QWORD *)(v0 + 320) = swift_continuation_init(v0 + 16, 1);
      *(_QWORD *)(v0 + 288) = _NSConcreteStackBlock;
      *(_QWORD *)(v0 + 296) = 0x40000000;
      *(_QWORD *)(v0 + 304) = sub_100383A98;
      *(_QWORD *)(v0 + 312) = &unk_1007F0A38;
      objc_msgSend(v224, "saveRecordWithData:recordInfo:completion:", v227, v228, v0 + 288);
      return swift_continuation_await(v204);
    }
    v29 = 63 - v219;
    v1 = *(uint64_t **)(v0 + 936);
    if ((unint64_t)(63 - v219) <= 0x7F)
      goto LABEL_150;
    v230 = v1[9];
    if (v230)
    {
      v221 = 1;
      goto LABEL_124;
    }
    if (v29 < 0xC0)
      goto LABEL_150;
    v230 = v1[10];
    if (v230)
    {
      v221 = 2;
      goto LABEL_124;
    }
LABEL_134:
    if (v29 < 0x100)
      goto LABEL_150;
    v230 = v1[11];
    if (!v230)
      goto LABEL_138;
    v221 = 3;
LABEL_124:
    v223 = (v230 - 1) & v230;
    v222 = __clz(__rbit64(v230)) + (v221 << 6);
    goto LABEL_119;
  }
  v29 = *(_QWORD *)(v270 + 8 * v33);
  if (v29)
  {
LABEL_18:
    v32 = v33;
    goto LABEL_19;
  }
  while (1)
  {
    v32 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v32 >= v272)
      goto LABEL_104;
    v29 = *(_QWORD *)(v270 + 8 * v32);
    ++v33;
    if (v29)
      goto LABEL_19;
  }
  __break(1u);
LABEL_138:
  if (v29 >= 0x140)
  {
    v230 = v1[12];
    if (v230)
    {
      v221 = 4;
      goto LABEL_124;
    }
    if (v29 >= 0x180)
    {
      v230 = v1[13];
      if (v230)
      {
        v221 = 5;
        goto LABEL_124;
      }
      v238 = 0;
      v239 = v29 >> 6;
      if (v239 <= 6)
        v239 = 6;
      v240 = v239 - 6;
      while (v240 != v238)
      {
        v230 = v1[v238++ + 14];
        if (v230)
        {
          v221 = v238 + 5;
          goto LABEL_124;
        }
      }
    }
  }
LABEL_150:

  swift_release_n(v1);
LABEL_151:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v241 = *(_QWORD *)(v0 + 896);
  v242 = *(_QWORD *)(v0 + 888);
  v243 = *(_QWORD *)(v0 + 872);
  v244 = *(_QWORD *)(v0 + 864);
  v245 = *(_QWORD *)(v0 + 856);
  v246 = *(_QWORD *)(v0 + 848);
  v247 = *(_QWORD *)(v0 + 840);
  v248 = *(_QWORD *)(v0 + 832);
  v249 = *(_QWORD *)(v0 + 824);
  v271 = *(_QWORD *)(v0 + 816);
  v273 = *(_QWORD *)(v0 + 808);
  v275 = *(_QWORD *)(v0 + 800);
  v277 = *(_QWORD *)(v0 + 792);
  v279 = *(_QWORD *)(v0 + 784);
  v282 = *(_QWORD *)(v0 + 776);
  v285 = *(_QWORD *)(v0 + 768);
  v287 = *(_QWORD *)(v0 + 744);
  swift_task_dealloc(*(_QWORD *)(v0 + 904));
  swift_task_dealloc(v241);
  swift_task_dealloc(v242);
  swift_task_dealloc(v243);
  swift_task_dealloc(v244);
  swift_task_dealloc(v245);
  swift_task_dealloc(v246);
  swift_task_dealloc(v247);
  swift_task_dealloc(v248);
  swift_task_dealloc(v249);
  swift_task_dealloc(v271);
  swift_task_dealloc(v273);
  swift_task_dealloc(v275);
  swift_task_dealloc(v277);
  swift_task_dealloc(v279);
  swift_task_dealloc(v282);
  swift_task_dealloc(v285);
  swift_task_dealloc(v287);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100389BF4()
{
  return swift_task_switch(sub_100389C40, 0, 0);
}

uint64_t sub_100389C40()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  Class v22;
  Class v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Class isa;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v1 = *(void **)(v0 + 1000);
  v2 = *(_QWORD *)(v0 + 960);
  v3 = *(_QWORD *)(v0 + 984) + 1;
  swift_errorRelease(*(_QWORD *)(v0 + 688));

  if (v3 == v2)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 992))(*(_QWORD *)(v0 + 744), 1, 1, *(_QWORD *)(v0 + 752));
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 984) + 1;
    *(_QWORD *)(v0 + 984) = v4;
    v5 = *(_QWORD *)(v0 + 760);
    v6 = *(_QWORD *)(v0 + 752);
    v7 = *(_QWORD *)(v0 + 744);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 976))(v7, *(_QWORD *)(v0 + 952)+ ((*(unsigned __int8 *)(v0 + 1056) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1056))+ *(_QWORD *)(v0 + 968) * v4, v6);
    v8 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56);
    *(_QWORD *)(v0 + 992) = v8;
    v8(v7, 0, 1, v6);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v6) != 1)
    {
      v18 = v0 + 144;
      v26 = *(void **)(v0 + 912);
      v27 = *(_QWORD *)(v0 + 776);
      v28 = *(_QWORD *)(v0 + 760);
      v29 = *(_QWORD *)(v0 + 752);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v28 + 32))(v27, *(_QWORD *)(v0 + 744), v29);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)(v0 + 1000) = isa;
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
      *(_QWORD *)(v0 + 184) = v0 + 688;
      *(_QWORD *)(v0 + 144) = v0;
      *(_QWORD *)(v0 + 152) = sub_100389BF4;
      v31 = swift_continuation_init(v0 + 144, 0);
      *(_QWORD *)(v0 + 248) = _NSConcreteStackBlock;
      v32 = (_QWORD *)(v0 + 248);
      v32[1] = 0x40000000;
      v32[2] = sub_100383A68;
      v32[3] = &unk_1007F0A50;
      v32[4] = v31;
      objc_msgSend(v26, "deleteSavedRecordWithIdentfier:completion:", isa, v32);
      return swift_continuation_await(v18);
    }
  }
  v9 = *(_QWORD *)(v0 + 936);
  swift_bridgeObjectRelease();
  v10 = *(_BYTE *)(v9 + 32);
  *(_BYTE *)(v0 + 1060) = v10;
  v11 = -1;
  v12 = -1 << v10;
  if (-(-1 << v10) < 64)
    v11 = ~(-1 << -(char)v12);
  v13 = v11 & *(_QWORD *)(v9 + 64);
  swift_retain();
  if (v13)
  {
    v14 = 0;
    v15 = __clz(__rbit64(v13));
    v16 = (v13 - 1) & v13;
    v17 = *(_QWORD **)(v0 + 936);
LABEL_8:
    v18 = v0 + 16;
    *(_QWORD *)(v0 + 1016) = v14;
    *(_QWORD *)(v0 + 1008) = v16;
    v19 = *(void **)(v0 + 912);
    v20 = *(_QWORD *)(v0 + 768);
    v21 = *(_QWORD *)(v17[7] + 8 * v15);
    *(_QWORD *)(v0 + 1024) = v21;
    swift_bridgeObjectRetain(v21);
    v22 = Data._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v0 + 1032) = v22;
    v23 = Dictionary._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v0 + 1040) = v23;
    *(_QWORD *)(v0 + 56) = v20;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_10038A128;
    *(_QWORD *)(v0 + 320) = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 288) = _NSConcreteStackBlock;
    *(_QWORD *)(v0 + 296) = 0x40000000;
    *(_QWORD *)(v0 + 304) = sub_100383A98;
    *(_QWORD *)(v0 + 312) = &unk_1007F0A38;
    objc_msgSend(v19, "saveRecordWithData:recordInfo:completion:", v22, v23, v0 + 288);
    return swift_continuation_await(v18);
  }
  v24 = 63 - v12;
  v17 = *(_QWORD **)(v0 + 936);
  if ((unint64_t)(63 - v12) > 0x7F)
  {
    v25 = v17[9];
    if (v25)
    {
      v14 = 1;
LABEL_12:
      v16 = (v25 - 1) & v25;
      v15 = __clz(__rbit64(v25)) + (v14 << 6);
      goto LABEL_8;
    }
    if (v24 >= 0xC0)
    {
      v25 = v17[10];
      if (v25)
      {
        v14 = 2;
        goto LABEL_12;
      }
      if (v24 >= 0x100)
      {
        v25 = v17[11];
        if (v25)
        {
          v14 = 3;
          goto LABEL_12;
        }
        if (v24 >= 0x140)
        {
          v25 = v17[12];
          if (v25)
          {
            v14 = 4;
            goto LABEL_12;
          }
          if (v24 >= 0x180)
          {
            v25 = v17[13];
            if (v25)
            {
              v14 = 5;
              goto LABEL_12;
            }
            v34 = 0;
            v35 = v24 >> 6;
            if (v35 <= 6)
              v35 = 6;
            v36 = v35 - 6;
            while (v36 != v34)
            {
              v25 = v17[v34++ + 14];
              if (v25)
              {
                v14 = v34 + 5;
                goto LABEL_12;
              }
            }
          }
        }
      }
    }
  }

  swift_release_n(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v37 = *(_QWORD *)(v0 + 896);
  v38 = *(_QWORD *)(v0 + 888);
  v39 = *(_QWORD *)(v0 + 872);
  v40 = *(_QWORD *)(v0 + 864);
  v41 = *(_QWORD *)(v0 + 856);
  v42 = *(_QWORD *)(v0 + 848);
  v43 = *(_QWORD *)(v0 + 840);
  v44 = *(_QWORD *)(v0 + 832);
  v45 = *(_QWORD *)(v0 + 824);
  v46 = *(_QWORD *)(v0 + 816);
  v47 = *(_QWORD *)(v0 + 808);
  v48 = *(_QWORD *)(v0 + 800);
  v49 = *(_QWORD *)(v0 + 792);
  v50 = *(_QWORD *)(v0 + 784);
  v51 = *(_QWORD *)(v0 + 776);
  v52 = *(_QWORD *)(v0 + 768);
  v53 = *(_QWORD *)(v0 + 744);
  swift_task_dealloc(*(_QWORD *)(v0 + 904));
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10038A128()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 1048) = v1;
  if (v1)
  {
    v2 = sub_10038A7EC;
  }
  else
  {
    swift_bridgeObjectRelease();
    v2 = sub_10038A190;
  }
  return swift_task_switch(v2, 0, 0);
}

void sub_10038A190()
{
  uint64_t v0;
  void *v1;
  void *v2;
  int64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  Class v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *(void **)(v0 + 1040);
  v2 = *(void **)(v0 + 1032);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 760) + 8))(*(_QWORD *)(v0 + 768), *(_QWORD *)(v0 + 752));

  v3 = *(_QWORD *)(v0 + 1016);
  v4 = *(_QWORD *)(v0 + 1008);
  if (v4)
  {
    v5 = (v4 - 1) & v4;
    v6 = __clz(__rbit64(v4)) | (v3 << 6);
    v7 = *(_QWORD *)(v0 + 936);
LABEL_3:
    *(_QWORD *)(v0 + 1016) = v3;
    *(_QWORD *)(v0 + 1008) = v5;
    v8 = *(void **)(v0 + 912);
    v9 = *(_QWORD *)(v0 + 768);
    v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v6);
    *(_QWORD *)(v0 + 1024) = v10;
    swift_bridgeObjectRetain(v10);
    isa = Data._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v0 + 1032) = isa;
    v12 = Dictionary._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v0 + 1040) = v12;
    *(_QWORD *)(v0 + 56) = v9;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_10038A128;
    *(_QWORD *)(v0 + 320) = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 288) = _NSConcreteStackBlock;
    *(_QWORD *)(v0 + 296) = 0x40000000;
    *(_QWORD *)(v0 + 304) = sub_100383A98;
    *(_QWORD *)(v0 + 312) = &unk_1007F0A38;
    objc_msgSend(v8, "saveRecordWithData:recordInfo:completion:", isa, v12, v0 + 288);
    swift_continuation_await(v0 + 16);
    return;
  }
  v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v14 = (unint64_t)((1 << *(_BYTE *)(v0 + 1060)) + 63) >> 6;
    v7 = *(_QWORD *)(v0 + 936);
    if (v13 >= v14)
      goto LABEL_20;
    v15 = v7 + 64;
    v16 = *(_QWORD *)(v7 + 64 + 8 * v13);
    ++v3;
    if (v16)
    {
LABEL_7:
      v5 = (v16 - 1) & v16;
      v6 = __clz(__rbit64(v16)) + (v3 << 6);
      goto LABEL_3;
    }
    v3 = v13 + 1;
    if (v13 + 1 >= v14)
      goto LABEL_20;
    v16 = *(_QWORD *)(v15 + 8 * v3);
    if (v16)
      goto LABEL_7;
    v3 = v13 + 2;
    if (v13 + 2 >= v14)
      goto LABEL_20;
    v16 = *(_QWORD *)(v15 + 8 * v3);
    if (v16)
      goto LABEL_7;
    v3 = v13 + 3;
    if (v13 + 3 >= v14)
      goto LABEL_20;
    v16 = *(_QWORD *)(v15 + 8 * v3);
    if (v16)
      goto LABEL_7;
    v17 = v13 + 4;
    if (v17 >= v14)
    {
LABEL_20:

      swift_release_n(v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v18 = *(_QWORD *)(v0 + 896);
      v19 = *(_QWORD *)(v0 + 888);
      v20 = *(_QWORD *)(v0 + 872);
      v21 = *(_QWORD *)(v0 + 864);
      v22 = *(_QWORD *)(v0 + 856);
      v23 = *(_QWORD *)(v0 + 848);
      v24 = *(_QWORD *)(v0 + 840);
      v25 = *(_QWORD *)(v0 + 832);
      v26 = *(_QWORD *)(v0 + 824);
      v27 = *(_QWORD *)(v0 + 816);
      v28 = *(_QWORD *)(v0 + 808);
      v29 = *(_QWORD *)(v0 + 800);
      v30 = *(_QWORD *)(v0 + 792);
      v31 = *(_QWORD *)(v0 + 784);
      v32 = *(_QWORD *)(v0 + 776);
      v33 = *(_QWORD *)(v0 + 768);
      v34 = *(_QWORD *)(v0 + 744);
      swift_task_dealloc(*(_QWORD *)(v0 + 904));
      swift_task_dealloc(v18);
      swift_task_dealloc(v19);
      swift_task_dealloc(v20);
      swift_task_dealloc(v21);
      swift_task_dealloc(v22);
      swift_task_dealloc(v23);
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      swift_task_dealloc(v27);
      swift_task_dealloc(v28);
      swift_task_dealloc(v29);
      swift_task_dealloc(v30);
      swift_task_dealloc(v31);
      swift_task_dealloc(v32);
      swift_task_dealloc(v33);
      swift_task_dealloc(v34);
      (*(void (**)(void))(v0 + 8))();
      return;
    }
    v16 = *(_QWORD *)(v15 + 8 * v17);
    if (v16)
    {
      v3 = v17;
      goto LABEL_7;
    }
    while (1)
    {
      v3 = v17 + 1;
      if (__OFADD__(v17, 1))
        break;
      if (v3 >= v14)
        goto LABEL_20;
      v16 = *(_QWORD *)(v15 + 8 * v3);
      ++v17;
      if (v16)
        goto LABEL_7;
    }
  }
  __break(1u);
}

uint64_t sub_10038A4F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;

  swift_willThrow(a1);
  if (qword_100837300 != -1)
    swift_once(&qword_100837300, sub_100381A28);
  v2 = *(_QWORD *)(v1 + 920);
  v3 = type metadata accessor for Logger(0);
  sub_10001AAA8(v3, (uint64_t)qword_1008471C0);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v1 + 920);
  if (v7)
  {
    v31 = *(void **)(v1 + 912);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v33 = v10;
    *(_DWORD *)v9 = 136446210;
    *(_QWORD *)(v1 + 704) = v8;
    swift_errorRetain(v8);
    v11 = sub_10001A630((uint64_t *)&unk_10083AA20);
    v12 = String.init<A>(describing:)(v1 + 704, v11);
    *(_QWORD *)(v1 + 696) = sub_10001A820(v12, v13, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 696, v1 + 704);
    swift_bridgeObjectRelease();
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to fetch records {error: %{public}s}", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {

    swift_errorRelease(v8);
    swift_errorRelease(v8);
    swift_errorRelease(v8);

  }
  v14 = *(_QWORD *)(v1 + 896);
  v15 = *(_QWORD *)(v1 + 888);
  v16 = *(_QWORD *)(v1 + 872);
  v17 = *(_QWORD *)(v1 + 864);
  v18 = *(_QWORD *)(v1 + 856);
  v19 = *(_QWORD *)(v1 + 848);
  v20 = *(_QWORD *)(v1 + 840);
  v21 = *(_QWORD *)(v1 + 832);
  v22 = *(_QWORD *)(v1 + 824);
  v24 = *(_QWORD *)(v1 + 816);
  v25 = *(_QWORD *)(v1 + 808);
  v26 = *(_QWORD *)(v1 + 800);
  v27 = *(_QWORD *)(v1 + 792);
  v28 = *(_QWORD *)(v1 + 784);
  v29 = *(_QWORD *)(v1 + 776);
  v30 = *(_QWORD *)(v1 + 768);
  v32 = *(_QWORD *)(v1 + 744);
  swift_task_dealloc(*(_QWORD *)(v1 + 904));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_10038A7EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  Class isa;
  Class v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53[2];

  v2 = *(_QWORD *)(v1 + 1048);
  v3 = *(void **)(v1 + 1040);
  v4 = *(void **)(v1 + 1032);
  v5 = *(_QWORD *)(v1 + 1024);
  swift_willThrow(a1);

  swift_errorRetain(v2);
  swift_bridgeObjectRetain(v5);
  v6 = swift_errorRetain(v2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = *(_QWORD *)(v1 + 1048);
    v10 = *(_QWORD *)(v1 + 1024);
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v53[0] = v12;
    *(_DWORD *)v11 = 136446466;
    *(_QWORD *)(v1 + 680) = v9;
    swift_errorRetain(v9);
    v13 = sub_10001A630((uint64_t *)&unk_10083AA20);
    v14 = String.init<A>(describing:)(v1 + 680, v13);
    *(_QWORD *)(v11 + 4) = sub_10001A820(v14, v15, v53);
    swift_bridgeObjectRelease();
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    *(_WORD *)(v11 + 12) = 2082;
    swift_bridgeObjectRetain(v10);
    v16 = Dictionary.description.getter(v10, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v18 = v17;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v11 + 14) = sub_10001A820(v16, v18, v53);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v10, 2);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to save record {error: %{public}s, record: %{public}s}", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    swift_errorRelease(v9);
  }
  else
  {
    v19 = *(_QWORD *)(v1 + 1048);
    v20 = *(_QWORD *)(v1 + 1024);
    swift_errorRelease(v19);
    swift_errorRelease(v19);
    swift_errorRelease(v19);
    swift_bridgeObjectRelease_n(v20, 2);

  }
  v21 = *(_QWORD *)(v1 + 1016);
  v22 = *(_QWORD *)(v1 + 1008);
  if (v22)
  {
    v23 = (v22 - 1) & v22;
    v24 = __clz(__rbit64(v22)) | (v21 << 6);
    v25 = *(_QWORD *)(v1 + 936);
LABEL_6:
    *(_QWORD *)(v1 + 1016) = v21;
    *(_QWORD *)(v1 + 1008) = v23;
    v26 = *(void **)(v1 + 912);
    v27 = *(_QWORD *)(v1 + 768);
    v28 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v24);
    *(_QWORD *)(v1 + 1024) = v28;
    swift_bridgeObjectRetain(v28);
    isa = Data._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v1 + 1032) = isa;
    v30 = Dictionary._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v1 + 1040) = v30;
    *(_QWORD *)(v1 + 56) = v27;
    *(_QWORD *)(v1 + 16) = v1;
    *(_QWORD *)(v1 + 24) = sub_10038A128;
    *(_QWORD *)(v1 + 320) = swift_continuation_init(v1 + 16, 1);
    *(_QWORD *)(v1 + 288) = _NSConcreteStackBlock;
    *(_QWORD *)(v1 + 296) = 0x40000000;
    *(_QWORD *)(v1 + 304) = sub_100383A98;
    *(_QWORD *)(v1 + 312) = &unk_1007F0A38;
    objc_msgSend(v26, "saveRecordWithData:recordInfo:completion:", isa, v30, v1 + 288);
    swift_continuation_await(v1 + 16);
    return;
  }
  v31 = v21 + 1;
  if (__OFADD__(v21, 1))
  {
    __break(1u);
  }
  else
  {
    v32 = (unint64_t)((1 << *(_BYTE *)(v1 + 1060)) + 63) >> 6;
    v25 = *(_QWORD *)(v1 + 936);
    if (v31 >= v32)
      goto LABEL_23;
    v33 = v25 + 64;
    v34 = *(_QWORD *)(v25 + 64 + 8 * v31);
    ++v21;
    if (v34)
    {
LABEL_10:
      v23 = (v34 - 1) & v34;
      v24 = __clz(__rbit64(v34)) + (v21 << 6);
      goto LABEL_6;
    }
    v21 = v31 + 1;
    if (v31 + 1 >= v32)
      goto LABEL_23;
    v34 = *(_QWORD *)(v33 + 8 * v21);
    if (v34)
      goto LABEL_10;
    v21 = v31 + 2;
    if (v31 + 2 >= v32)
      goto LABEL_23;
    v34 = *(_QWORD *)(v33 + 8 * v21);
    if (v34)
      goto LABEL_10;
    v21 = v31 + 3;
    if (v31 + 3 >= v32)
      goto LABEL_23;
    v34 = *(_QWORD *)(v33 + 8 * v21);
    if (v34)
      goto LABEL_10;
    v35 = v31 + 4;
    if (v35 >= v32)
    {
LABEL_23:

      swift_release_n(v25);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v36 = *(_QWORD *)(v1 + 896);
      v37 = *(_QWORD *)(v1 + 888);
      v38 = *(_QWORD *)(v1 + 872);
      v39 = *(_QWORD *)(v1 + 864);
      v40 = *(_QWORD *)(v1 + 856);
      v41 = *(_QWORD *)(v1 + 848);
      v42 = *(_QWORD *)(v1 + 840);
      v43 = *(_QWORD *)(v1 + 832);
      v44 = *(_QWORD *)(v1 + 824);
      v45 = *(_QWORD *)(v1 + 816);
      v46 = *(_QWORD *)(v1 + 808);
      v47 = *(_QWORD *)(v1 + 800);
      v48 = *(_QWORD *)(v1 + 792);
      v49 = *(_QWORD *)(v1 + 784);
      v50 = *(_QWORD *)(v1 + 776);
      v51 = *(_QWORD *)(v1 + 768);
      v52 = *(_QWORD *)(v1 + 744);
      swift_task_dealloc(*(_QWORD *)(v1 + 904));
      swift_task_dealloc(v36);
      swift_task_dealloc(v37);
      swift_task_dealloc(v38);
      swift_task_dealloc(v39);
      swift_task_dealloc(v40);
      swift_task_dealloc(v41);
      swift_task_dealloc(v42);
      swift_task_dealloc(v43);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      (*(void (**)(void))(v1 + 8))();
      return;
    }
    v34 = *(_QWORD *)(v33 + 8 * v35);
    if (v34)
    {
      v21 = v35;
      goto LABEL_10;
    }
    while (1)
    {
      v21 = v35 + 1;
      if (__OFADD__(v35, 1))
        break;
      if (v21 >= v32)
        goto LABEL_23;
      v34 = *(_QWORD *)(v33 + 8 * v21);
      ++v35;
      if (v34)
        goto LABEL_10;
    }
  }
  __break(1u);
}

unint64_t sub_10038AD18()
{
  unint64_t result;

  result = qword_1008473C0;
  if (!qword_1008473C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1008473C0);
  }
  return result;
}

unint64_t sub_10038AD5C()
{
  unint64_t result;

  result = qword_1008473C8;
  if (!qword_1008473C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1008473C8);
  }
  return result;
}

id sub_10038ADA0@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "reminder");
  *a2 = result;
  return result;
}

id sub_10038ADD8(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setReminder:", *a1);
}

void sub_10038ADFC(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100837558 != -1)
    swift_once(&qword_100837558, sub_10046FB38);
  v8 = sub_10001AAA8(v4, (uint64_t)qword_10084B820);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  sub_100385E40(a2, (uint64_t)v27);
  v9 = a1;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v24 = v5;
    v12 = swift_slowAlloc(22, -1);
    v23 = swift_slowAlloc(64, -1);
    v26 = v23;
    *(_DWORD *)v12 = 136446466;
    v13 = objc_msgSend(v9, "waiterID");
    if (v13)
    {
      v14 = v13;
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v17 = v16;

      v25 = sub_10001A820(v15, v17, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);

      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2082;
      v18 = v28;
      v19 = v29;
      sub_10000A388(v27, v28);
      v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
      v25 = sub_10001A820(v20, v21, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Released babysitter token for {waiterID: %{public}s, executable: %{public}s}", (uint8_t *)v12, 0x16u);
      v22 = v23;
      swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v12, -1, -1);

      (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v4);
    }
    else
    {

      __break(1u);
    }
  }
  else
  {

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t destroy for RDAnalyticsActivity.RDAnalyticsRateReducer(_QWORD *a1)
{
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
}

ValueMetadata *type metadata accessor for RDAnalyticsActivity.RDAnalyticsRateReducer()
{
  return &type metadata for RDAnalyticsActivity.RDAnalyticsRateReducer;
}

void sub_10038B0DC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  NSObject *oslog;
  uint64_t v19;
  uint64_t v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a2, a1, AssociatedTypeWitness, &unk_100786F6C, &unk_100786F94);
  (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(0x44497463656A626FLL, 0xE800000000000000, AssociatedTypeWitness, AssociatedConformanceWitness);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(a3, 1, AssociatedTypeWitness) == 1)
  {
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10001AAA8(v8, (uint64_t)qword_100847400);
    oslog = Logger.logObject.getter(v9);
    v10 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v20 = v12;
      *(_DWORD *)v11 = 136446210;
      v13 = swift_getAssociatedTypeWitness(0, a2);
      v14 = objc_msgSend((id)swift_getObjCClassFromMetadata(v13), "description");
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

      v19 = sub_10001A820(v15, v17, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v10, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_10038B34C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100847400);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100847400);
  if (qword_100837690 != -1)
    swift_once(&qword_100837690, sub_1004A19A4);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872190);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

Swift::Int sub_10038B3DC(uint64_t a1, uint64_t a2)
{
  return sub_10014D128(a1, a2, 0xD000000000000017, 0x80000001006F4D90);
}

uint64_t sub_10038B3F8(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000017, 0x80000001006F4D90);
}

Swift::Int sub_10038B414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10014D1AC(a1, a2, a3, 0xD000000000000017, 0x80000001006F4D90);
}

uint64_t sub_10038B430@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007E09F0;
  return sub_10014D200(v2, a1, a2);
}

void sub_10038B43C(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000017;
  a1[1] = 0x80000001006F4D90;
}

uint64_t sub_10038B45C@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DF190;
  return sub_10014D278(a1, v2, a2);
}

unint64_t sub_10038B468()
{
  return 0xD000000000000017;
}

void sub_10038B484(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E0A28;
}

Swift::Int sub_10038B494(uint64_t a1, uint64_t a2)
{
  return sub_10014D128(a1, a2, 0xD000000000000010, 0x80000001006F4DB0);
}

uint64_t sub_10038B4B0(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000010, 0x80000001006F4DB0);
}

Swift::Int sub_10038B4CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10014D1AC(a1, a2, a3, 0xD000000000000010, 0x80000001006F4DB0);
}

uint64_t sub_10038B4E8@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007E0A50;
  return sub_10014D200(v2, a1, a2);
}

void sub_10038B4F4(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x80000001006F4DB0;
}

uint64_t sub_10038B514@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DF1C8;
  return sub_10014D278(a1, v2, a2);
}

unint64_t sub_10038B520()
{
  return 0xD000000000000010;
}

void sub_10038B53C(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E0A88;
}

ValueMetadata *type metadata accessor for CDIngestionValidationError()
{
  return &type metadata for CDIngestionValidationError;
}

ValueMetadata *type metadata accessor for CDIngestorPredefinedIngestableKey.NoRelationshipOrderingValueKey()
{
  return &type metadata for CDIngestorPredefinedIngestableKey.NoRelationshipOrderingValueKey;
}

ValueMetadata *type metadata accessor for CDIngestorPredefinedIngestableKey()
{
  return &type metadata for CDIngestorPredefinedIngestableKey;
}

uint64_t _s7remindd26CDIngestionValidationErrorOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10038B5C0 + 4 * byte_1006B7E80[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10038B5E0 + 4 * byte_1006B7E85[v4]))();
}

_BYTE *sub_10038B5C0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10038B5E0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10038B5E8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10038B5F0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10038B5F8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10038B600(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CDIngestorPredefinedIngestableKey.NoOrderableRelationshipKey()
{
  return &type metadata for CDIngestorPredefinedIngestableKey.NoOrderableRelationshipKey;
}

uint64_t sub_10038B61C()
{
  return sub_1000BAEEC(&qword_100847418, &qword_100847420);
}

unint64_t sub_10038B644()
{
  unint64_t result;

  result = qword_100847428;
  if (!qword_100847428)
  {
    result = swift_getWitnessTable(&unk_1006B80FC, &type metadata for CDIngestorPredefinedIngestableKey.NoOrderableRelationshipKey);
    atomic_store(result, (unint64_t *)&qword_100847428);
  }
  return result;
}

uint64_t sub_10038B688()
{
  return sub_1000BAEEC(&qword_100847430, &qword_100847438);
}

unint64_t sub_10038B6B0()
{
  unint64_t result;

  result = qword_100847440;
  if (!qword_100847440)
  {
    result = swift_getWitnessTable(&unk_1006B81D4, &type metadata for CDIngestorPredefinedIngestableKey.NoRelationshipOrderingValueKey);
    atomic_store(result, (unint64_t *)&qword_100847440);
  }
  return result;
}

unint64_t sub_10038B6F8()
{
  unint64_t result;

  result = qword_100847448;
  if (!qword_100847448)
  {
    result = swift_getWitnessTable(&unk_1006B823C, &type metadata for CDIngestionValidationError);
    atomic_store(result, (unint64_t *)&qword_100847448);
  }
  return result;
}

uint64_t sub_10038B73C(uint64_t a1)
{
  return sub_1001489A4(a1, qword_1008474B0, &qword_100837690, (uint64_t)qword_100872190, (uint64_t)sub_1004A19A4);
}

uint64_t sub_10038B760(uint64_t a1)
{
  return sub_1001489A4(a1, qword_1008474C8, &qword_100837688, (uint64_t)qword_100872178, (uint64_t)sub_1004A1988);
}

uint64_t sub_10038B784(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10038B7B8 + 4 * byte_1006B82B0[a1]))(0x44497463656A626FLL, 0xE800000000000000);
}

uint64_t sub_10038B7B8()
{
  return 0x6972745364697575;
}

uint64_t sub_10038B7D4()
{
  return 0x4C525574736F68;
}

unint64_t sub_10038B7EC()
{
  return 0xD000000000000012;
}

unint64_t sub_10038B808()
{
  return 0xD000000000000017;
}

uint64_t sub_10038B82C()
{
  return 0x6F54636E79536164;
}

uint64_t sub_10038B84C()
{
  return 0x654B687375506164;
}

void sub_10038B868(char *a1)
{
  sub_1002B33D8(*a1);
}

void sub_10038B874()
{
  char *v0;

  sub_1002B29D4(0, *v0);
}

void sub_10038B880(uint64_t a1)
{
  char *v1;

  sub_1002B5B14(a1, *v1);
}

void sub_10038B888(uint64_t a1)
{
  char *v1;

  sub_1002B29D4(a1, *v1);
}

unint64_t sub_10038B890@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10038BD70(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10038B8BC@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10038B784(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10038B8E4(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DF640;
}

unint64_t sub_10038B8F4@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10038BD70(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10038B918()
{
  unsigned __int8 *v0;

  return sub_10038B784(*v0);
}

uint64_t sub_10038B920(char *a1, char *a2)
{
  return sub_1002B2F9C(*a1, *a2);
}

Swift::Int sub_10038B92C()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x44497473696CLL;
  else
    v2 = 0x49746E756F636361;
  if (v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE900000000000044;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10038B9AC(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x44497473696CLL;
  else
    v2 = 0x49746E756F636361;
  if (*v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE900000000000044;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10038BA08(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x44497473696CLL;
  else
    v3 = 0x49746E756F636361;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE900000000000044;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10038BA84@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DF140, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_10038BAE0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x49746E756F636361;
  if (*v1)
    v2 = 0x44497473696CLL;
  v3 = 0xE900000000000044;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

void sub_10038BB20(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E0AB0;
}

uint64_t sub_10038BB30@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DF140, v3);
  result = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_10038BB90()
{
  _BYTE *v0;

  if (*v0)
    return 0x44497473696CLL;
  else
    return 0x49746E756F636361;
}

uint64_t type metadata accessor for REMCalDAVNotificationCDIngestor()
{
  return objc_opt_self(_TtC7remindd31REMCalDAVNotificationCDIngestor);
}

_UNKNOWN **sub_10038BBEC()
{
  return &off_1007F0E68;
}

_UNKNOWN **sub_10038BBF8()
{
  return &off_1007F0E38;
}

id sub_10038BC04(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSString v16;
  uint64_t v17;
  uint64_t v18;
  NSURL *v19;
  void *v20;
  void *v21;
  NSString v22;
  NSString v23;
  id v24;
  id v26;

  if (a5)
  {
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a5);
  }
  else
  {
    v16 = 0;
  }
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  v20 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(a6, 1, v17) != 1)
  {
    URL._bridgeToObjectiveC()(v19);
    v20 = v21;
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a6, v17);
  }
  if (!a8)
  {
    v22 = 0;
    if (a10)
      goto LABEL_8;
LABEL_10:
    v23 = 0;
    goto LABEL_11;
  }
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a8);
  if (!a10)
    goto LABEL_10;
LABEL_8:
  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a10);
LABEL_11:
  v24 = objc_msgSend(v26, "initCalDAVNotificationWithObjectID:accountID:listID:uuidString:hostURL:externalIdentifier:externalModificationTag:", a1, a2, a3, v16, v20, v22, v23);

  return v24;
}

unint64_t sub_10038BD70(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DEB88, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7)
    return 7;
  else
    return v3;
}

void sub_10038BDB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  char v22;

  v6 = *v3;
  v7 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v7 - 8);
  v20 = v7;
  __chkstk_darwin(v7);
  v14 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v9);
  v18 = (char *)&v12 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v16 = (char *)&v12 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10038B0DC(v6, (uint64_t)&off_1008475C8, (uint64_t)&v22);
  v13 = v4;
  if (v22 != 7 && *(_QWORD *)(a3 + 16))
  {
    swift_bridgeObjectRetain(a3);
    v21 = "shouldUpdateSectionsOrdering";
    v12 = "externalIdentifier";
    __asm { BR              X9 }
  }
  LODWORD(v21) = 0;
  if (*(_QWORD *)(a3 + 16))
  {
    swift_bridgeObjectRetain(a3);
    __asm { BR              X9 }
  }
}

NSObject *sub_10038C550(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  id v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  _QWORD *v34;
  NSObject *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  NSObject *v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  _QWORD *v43;
  NSObject *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t ObjCClassFromMetadata;
  NSString v48;
  uint64_t v49;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  NSObject *v70;
  uint64_t v71;

  v2 = sub_10001A630((uint64_t *)&unk_100839C70);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v66 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v66 - v9;
  v70 = 0;
  v11 = objc_msgSend(a1, "remObjectIDWithError:", &v70);
  v12 = v70;
  if (!v11)
  {
    v24 = v70;
    _convertNSErrorToError(_:)(v12);

    swift_willThrow(v25);
    return v24;
  }
  v69 = v11;
  v13 = v70;
  v14 = objc_msgSend(a1, "account");
  if (v14)
  {
    v15 = v14;
    v16 = objc_msgSend(v14, "remObjectID");

    if (v16)
    {
      v17 = objc_msgSend(a1, "owner");
      if (v17)
      {
        v18 = v17;
        v19 = objc_msgSend(v17, "remObjectID");

        if (v19)
        {
          v20 = objc_msgSend(a1, "uuidString");
          if (v20)
          {
            v21 = v20;
            v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
            v67 = v23;
            v68 = v22;

          }
          else
          {
            v67 = 0;
            v68 = 0;
          }
          v51 = objc_msgSend(a1, "hostURL");
          if (v51)
          {
            v52 = v51;
            static URL._unconditionallyBridgeFromObjectiveC(_:)(v51);

            v53 = type metadata accessor for URL(0);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v8, 0, 1, v53);
          }
          else
          {
            v54 = type metadata accessor for URL(0);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v8, 1, 1, v54);
          }
          v55 = v19;
          sub_10031E6C0((uint64_t)v8, (uint64_t)v10);
          v56 = objc_msgSend(a1, "externalIdentifier");
          if (v56)
          {
            v57 = v56;
            v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
            v59 = v58;

          }
          else
          {
            v66 = 0;
            v59 = 0;
          }
          v60 = objc_msgSend(a1, "externalModificationTag", v66);
          if (v60)
          {
            v61 = v60;
            v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
            v64 = v63;

          }
          else
          {
            v62 = 0;
            v64 = 0;
          }
          sub_10015CF8C((uint64_t)v10, (uint64_t)v5);
          v65 = objc_allocWithZone((Class)REMCalDAVNotification);
          v24 = sub_10038BC04(v69, v16, v55, v68, v67, (uint64_t)v5, v66, v59, v62, v64);
          sub_10015CFD4((uint64_t)v10);
          return v24;
        }
      }

    }
  }
  v26 = objc_msgSend(a1, "account");

  if (v26)
  {
    v27 = 0xE900000000000029;
    v28 = v69;
  }
  else
  {
    v28 = v69;
    if (qword_100837320 != -1)
      swift_once(&qword_100837320, sub_10038B760);
    v29 = type metadata accessor for Logger(0);
    sub_10001AAA8(v29, (uint64_t)qword_1008474C8);
    v30 = v28;
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v33 = 138412290;
      v70 = v30;
      v35 = v30;
      v28 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
      *v34 = v28;

      _os_log_impl((void *)&_mh_execute_header, v31, v32, "REMCalDAVNotificationCDIngestor: cdCalDAVNotification.account is nil {cdCalDAVNotification.remObjectID: %@}", v33, 0xCu);
      v36 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v34, 1, v36);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);
    }
    else
    {

      v31 = v30;
    }

    v27 = 0xE700000000000000;
  }
  v37 = objc_msgSend(a1, "owner");

  if (!v37)
  {
    swift_bridgeObjectRelease(v27);
    if (qword_100837320 != -1)
      swift_once(&qword_100837320, sub_10038B760);
    v38 = type metadata accessor for Logger(0);
    sub_10001AAA8(v38, (uint64_t)qword_1008474C8);
    v39 = v28;
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v42 = 138412290;
      v70 = v39;
      v44 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
      *v43 = v28;

      _os_log_impl((void *)&_mh_execute_header, v40, v41, "REMCalDAVNotificationCDIngestor: cdCalDAVNotification.owner is nil {cdCalDAVNotification.remObjectID: %@}", v42, 0xCu);
      v45 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v43, 1, v45);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);
    }
    else
    {

      v40 = v39;
    }

    v27 = 0xE500000000000000;
  }
  v24 = objc_opt_self(REMError);
  v46 = sub_10038CC28();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v46);
  v48 = String._bridgeToObjectiveC()();
  -[NSObject unexpectedNilPropertyWithClass:property:](v24, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v48, swift_bridgeObjectRelease(v27).n128_f64[0]);

  swift_willThrow(v49);
  return v24;
}

unint64_t sub_10038CC28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100851CB0;
  if (!qword_100851CB0)
  {
    v1 = objc_opt_self(REMCDCalDAVNotification);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100851CB0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for REMCalDAVNotificationCDIngestor.RelationshipKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10038CCB0 + 4 * byte_1006B82BC[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10038CCE4 + 4 * byte_1006B82B7[v4]))();
}

uint64_t sub_10038CCE4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10038CCEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10038CCF4);
  return result;
}

uint64_t sub_10038CD00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10038CD08);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10038CD0C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10038CD14(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMCalDAVNotificationCDIngestor.RelationshipKey()
{
  return &type metadata for REMCalDAVNotificationCDIngestor.RelationshipKey;
}

uint64_t getEnumTagSinglePayload for RDDynamicXPCActivity.MotionState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for REMCalDAVNotificationCDIngestor.ValueKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_10038CE0C + 4 * byte_1006B82C6[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10038CE40 + 4 * byte_1006B82C1[v4]))();
}

uint64_t sub_10038CE40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10038CE48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10038CE50);
  return result;
}

uint64_t sub_10038CE5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10038CE64);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10038CE68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10038CE70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMCalDAVNotificationCDIngestor.ValueKey()
{
  return &type metadata for REMCalDAVNotificationCDIngestor.ValueKey;
}

uint64_t sub_10038CE8C()
{
  return sub_1000BAEEC(&qword_1008476D0, &qword_1008476D8);
}

unint64_t sub_10038CEB4()
{
  unint64_t result;

  result = qword_1008476E0;
  if (!qword_1008476E0)
  {
    result = swift_getWitnessTable(&unk_1006B83FC, &type metadata for REMCalDAVNotificationCDIngestor.ValueKey);
    atomic_store(result, (unint64_t *)&qword_1008476E0);
  }
  return result;
}

uint64_t sub_10038CEF8()
{
  return sub_1000BAEEC(&qword_1008476E8, &qword_1008476F0);
}

unint64_t sub_10038CF20()
{
  unint64_t result;

  result = qword_1008476F8;
  if (!qword_1008476F8)
  {
    result = swift_getWitnessTable(&unk_1006B84D4, &type metadata for REMCalDAVNotificationCDIngestor.RelationshipKey);
    atomic_store(result, (unint64_t *)&qword_1008476F8);
  }
  return result;
}

uint64_t static REMCDTemplate.cdEntityName.getter()
{
  id v0;
  uint64_t v1;

  v0 = objc_msgSend((id)objc_opt_self(REMTemplate), "cdEntityName");
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);

  return v1;
}

uint64_t sub_10038CFC0(uint64_t a1)
{
  return sub_1001489A4(a1, qword_100847700, &qword_100837690, (uint64_t)qword_100872190, (uint64_t)sub_1004A19A4);
}

uint64_t sub_10038CFE4(uint64_t a1)
{
  return sub_1001489A4(a1, qword_100847718, &qword_100837688, (uint64_t)qword_100872178, (uint64_t)sub_1004A1988);
}

Swift::Int __swiftcall REMCDTemplate.parentEffectiveMinimumSupportedVersion()()
{
  void *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend(v0, "parentAccount");
  if (!v1)
    return kREMSupportedVersionUnset;
  v2 = v1;
  v3 = objc_msgSend(v1, "effectiveMinimumSupportedVersion");

  return (Swift::Int)v3;
}

uint64_t static REMCDTemplate.keyPathsForValuesAffectingEffectiveMinimumSupportedVersion()()
{
  uint64_t v0;

  v0 = sub_10011EE40((uint64_t)&off_1007E0AD8);
  swift_arrayDestroy(&unk_1007E0AF8, 1, &type metadata for String);
  return v0;
}

Swift::Bool __swiftcall REMCDTemplate.isConnected(toAccountObject:)(NSMutableDictionary toAccountObject)
{
  void *v1;
  id v3;
  void *v4;
  id v5;
  id v6;
  unsigned int v7;
  id v8;
  Class isa;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v17;
  _OWORD v18[2];
  _QWORD v19[4];

  v3 = objc_msgSend(v1, "remObjectID");
  if (!v3)
    goto LABEL_12;
  v4 = v3;
  v5 = -[objc_class objectForKeyedSubscript:](toAccountObject.super.super.isa, "objectForKeyedSubscript:", v3);
  if (v5)
  {
    v6 = v5;
    _bridgeAnyObjectToAny(_:)(v18, v5);
    swift_unknownObjectRelease(v6);
  }
  else
  {
    memset(v18, 0, sizeof(v18));
  }
  sub_1000A5CA8((uint64_t)v18, (uint64_t)v19, (uint64_t *)&unk_10083D5B0);
  if (!v19[3])
  {
    sub_10000882C((uint64_t)v19, (uint64_t *)&unk_10083D5B0);
    goto LABEL_9;
  }
  if ((swift_dynamicCast(&v17, v19, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) == 0)
  {
LABEL_9:
    v8 = v4;
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    -[objc_class setObject:forKeyedSubscript:](toAccountObject.super.super.isa, "setObject:forKeyedSubscript:", isa, v8);

    v10 = objc_msgSend(v1, "parentAccount");
    if (v10)
    {
      v11 = v10;
      v7 = objc_msgSend(v10, "isConnectedToAccountObject:", toAccountObject.super.super.isa);

      v19[0] = v7;
      type metadata accessor for REMObjectIsConnectedState(0);
      v13 = v12;
      v14 = v8;
      v15 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v19, v13);
      -[objc_class setObject:forKeyedSubscript:](toAccountObject.super.super.isa, "setObject:forKeyedSubscript:", v15, v14);

      swift_unknownObjectRelease(v15);
      return v7;
    }

LABEL_12:
    LOBYTE(v7) = 0;
    return v7;
  }

  LOBYTE(v7) = v17 == 1;
  return v7;
}

id REMCDTemplate.publicLink.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  char *v33;
  id v34;
  void *v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t, uint64_t);
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  id v42;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  char *v46;
  void *v47;
  void *v48;
  id v49;
  void *v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  char *v53;
  id v54;
  void (*v55)(char *, char *, uint64_t);
  void *v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  id v59;
  void (*v60)(char *, char *, uint64_t);
  void *v61;
  uint64_t v62;
  id v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  void (*v68)(char *, uint64_t);
  char v69;
  void (*v70)(char *, uint64_t);
  id v71;
  char *v72;
  NSURL *v73;
  void *v74;
  void *v75;
  Class isa;
  Class v77;
  char *v78;
  Class v79;
  void *v80;
  id v81;
  id v82;
  char *v83;
  uint64_t (*v84)(char *, uint64_t, uint64_t, uint64_t);
  void (*v85)(char *, char *, uint64_t);
  unsigned int (*v86)(char *, uint64_t, uint64_t);
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD v95[5];

  v1 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v1);
  v3 = (char *)&v82 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v93 = v4;
  v94 = v5;
  __chkstk_darwin(v4);
  v92 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v88 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v89 = (char *)&v82 - v11;
  __chkstk_darwin(v12);
  v90 = (char *)&v82 - v13;
  __chkstk_darwin(v14);
  v91 = (char *)&v82 - v15;
  __chkstk_darwin(v16);
  v18 = (char *)&v82 - v17;
  v19 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v19);
  v87 = (char *)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)&v82 - v22;
  __chkstk_darwin(v24);
  v26 = (char *)&v82 - v25;
  __chkstk_darwin(v27);
  v29 = (char *)&v82 - v28;
  *(_QWORD *)&v31 = __chkstk_darwin(v30).n128_u64[0];
  v33 = (char *)&v82 - v32;
  v34 = objc_msgSend(v0, "mostRecentPublicLinkUpdateRequestDate", v31);
  if (!v34)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v33, 1, 1, v7);
    goto LABEL_6;
  }
  v35 = v34;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v34);

  v85 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v85(v33, v18, v7);
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v36(v33, 0, 1, v7);
  v86 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v86(v33, 1, v7) == 1)
  {
LABEL_6:
    v40 = (uint64_t *)&unk_1008380D0;
    v41 = (uint64_t)v33;
    goto LABEL_7;
  }
  v84 = v36;
  sub_10000882C((uint64_t)v33, (uint64_t *)&unk_1008380D0);
  v37 = objc_msgSend((id)objc_opt_self(REMAppleAccountUtilities), "sharedInstance");
  v95[3] = sub_1000151B0(0, &qword_100847738, REMAppleAccountUtilities_ptr);
  v95[4] = &off_1007F6120;
  v95[0] = v37;
  sub_10038E470(v95, (uint64_t)v3);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v95);
  v39 = v93;
  v38 = v94;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v3, 1, v93) != 1)
  {
    v83 = v23;
    v44 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
    v45 = v38;
    v46 = v92;
    v44(v92, v3, v39);
    v47 = REMCDTemplate.publicLinkConfiguration.getter();
    if (!v47)
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v39);
      return 0;
    }
    v48 = v47;
    v49 = objc_msgSend(v0, "publicLinkCreationDate");
    if (v49)
    {
      v50 = v49;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v49);

      v51 = v85;
      v85(v29, v18, v7);
      v84(v29, 0, 1, v7);
      v52 = v39;
      if (v86(v29, 1, v7) != 1)
      {
        v82 = v48;
        v53 = v91;
        v51(v91, v29, v7);
        v54 = objc_msgSend(v0, "publicLinkLastModifiedDate");
        if (v54)
        {
          v55 = v51;
          v56 = v54;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v54);

          v55(v26, v18, v7);
          v84(v26, 0, 1, v7);
          if (v86(v26, 1, v7) != 1)
          {
            v57 = v55;
            v58 = v90;
            v57(v90, v26, v7);
            v59 = objc_msgSend(v0, "publicLinkExpirationDate");
            if (v59)
            {
              v60 = v57;
              v61 = v59;
              static Date._unconditionallyBridgeFromObjectiveC(_:)(v59);

              v62 = (uint64_t)v83;
              v60(v83, v18, v7);
              v84((char *)v62, 0, 1, v7);
              if (v86((char *)v62, 1, v7) != 1)
              {
                v60(v89, (char *)v62, v7);
                v63 = objc_msgSend(v0, "lastModifiedDate");
                if (v63)
                {
                  v64 = v63;
                  static Date._unconditionallyBridgeFromObjectiveC(_:)(v63);

                  v65 = (uint64_t)v87;
                  v60(v87, v18, v7);
                  v84((char *)v65, 0, 1, v7);
                  v66 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v86)(v65, 1, v7);
                  v67 = v88;
                  if ((_DWORD)v66 != 1)
                  {
                    v60(v88, (char *)v65, v7);
LABEL_29:
                    v69 = static Date.< infix(_:_:)(v58, v67);
                    v70 = *(void (**)(char *, uint64_t))(v8 + 8);
                    v70(v67, v7);
                    v71 = objc_allocWithZone((Class)REMTemplatePublicLink);
                    v72 = v92;
                    URL._bridgeToObjectiveC()(v73);
                    v75 = v74;
                    isa = Date._bridgeToObjectiveC()().super.isa;
                    v77 = Date._bridgeToObjectiveC()().super.isa;
                    v78 = v89;
                    v79 = Date._bridgeToObjectiveC()().super.isa;
                    v80 = v71;
                    v81 = v82;
                    v42 = objc_msgSend(v80, "initWithURL:configuration:creationDate:lastModifiedDate:expirationDate:canBeUpdated:", v75, v82, isa, v77, v79, v69 & 1);

                    v70(v78, v7);
                    v70(v90, v7);
                    v70(v91, v7);
                    (*(void (**)(char *, uint64_t))(v94 + 8))(v72, v93);
                    return v42;
                  }
                }
                else
                {
                  v65 = (uint64_t)v87;
                  v66 = v84(v87, 1, 1, v7);
                  v67 = v88;
                }
                static Date.distantPast.getter(v66);
                sub_10000882C(v65, (uint64_t *)&unk_1008380D0);
                goto LABEL_29;
              }
            }
            else
            {
              v62 = (uint64_t)v83;
              v84(v83, 1, 1, v7);
            }

            v68 = *(void (**)(char *, uint64_t))(v8 + 8);
            v68(v58, v7);
            v68(v53, v7);
            (*(void (**)(char *, uint64_t))(v94 + 8))(v92, v39);
            v40 = (uint64_t *)&unk_1008380D0;
            v41 = v62;
            goto LABEL_7;
          }
        }
        else
        {
          v84(v26, 1, 1, v7);
        }

        (*(void (**)(char *, uint64_t))(v8 + 8))(v53, v7);
        (*(void (**)(char *, uint64_t))(v94 + 8))(v92, v39);
        v40 = (uint64_t *)&unk_1008380D0;
        v41 = (uint64_t)v26;
        goto LABEL_7;
      }
    }
    else
    {
      v84(v29, 1, 1, v7);
      v52 = v39;
    }

    (*(void (**)(char *, uint64_t))(v94 + 8))(v92, v52);
    v40 = (uint64_t *)&unk_1008380D0;
    v41 = (uint64_t)v29;
    goto LABEL_7;
  }
  v40 = (uint64_t *)&unk_100839C70;
  v41 = (uint64_t)v3;
LABEL_7:
  sub_10000882C(v41, v40);
  return 0;
}

void *REMCDTemplate.publicLinkConfiguration.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;

  v1 = objc_msgSend(v0, "publicLinkConfigurationData");
  v2 = v1;
  if (v1)
  {
    v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v5 = v4;

    v6 = objc_autoreleasePoolPush();
    sub_1000151B0(0, &qword_100847740, NSKeyedUnarchiver_ptr);
    v7 = sub_1000151B0(0, (unint64_t *)&unk_100847748, REMTemplatePublicLinkConfiguration_ptr);
    v2 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v7, v3, v5, v7);
    objc_autoreleasePoolPop(v6);
    sub_1000A71C8(v3, v5);
  }
  return v2;
}

void REMCDTemplate.publicLinkConfiguration.setter(void *a1)
{
  void *v1;
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Class isa;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  _QWORD *v37;
  void *v38;
  _QWORD v39[3];
  _BYTE v40[8];
  uint64_t v41;
  uint64_t v42;
  id v43;

  if (a1)
  {
    v3 = a1;
    v4 = objc_autoreleasePoolPush();
    v43 = 0;
    v5 = objc_msgSend((id)objc_opt_self(NSKeyedArchiver), "archivedDataWithRootObject:requiringSecureCoding:error:", v3, 1, &v43);
    v6 = v43;
    if (v5)
    {
      v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
      v9 = v8;

      objc_autoreleasePoolPop(v4);
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000A71C8(v7, v9);
      objc_msgSend(v1, "setPublicLinkConfigurationData:", isa);

    }
    else
    {
      v11 = v6;
      v12 = _convertNSErrorToError(_:)(v6);

      swift_willThrow(v13);
      objc_autoreleasePoolPop(v4);
      if (qword_100837328 != -1)
        swift_once(&qword_100837328, sub_10038CFC0);
      v14 = type metadata accessor for Logger(0);
      sub_10001AAA8(v14, (uint64_t)qword_100847700);
      v15 = v3;
      v16 = v1;
      swift_errorRetain(v12);
      v17 = v15;
      v18 = v16;
      v19 = swift_errorRetain(v12);
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = swift_slowAlloc(32, -1);
        v23 = swift_slowAlloc(8, -1);
        v24 = (void *)swift_slowAlloc(64, -1);
        v43 = v24;
        *(_DWORD *)v22 = 136446722;
        v25 = objc_msgSend(v18, "remObjectID");
        v37 = (_QWORD *)v23;
        v38 = v24;
        v36 = v21;
        if (v25)
        {
          v26 = v25;
          v27 = objc_msgSend(v25, "description");

          v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
          v30 = v29;

        }
        else
        {
          v30 = 0xE300000000000000;
          v28 = 7104878;
        }
        v41 = sub_10001A820(v28, v30, (uint64_t *)&v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);

        swift_bridgeObjectRelease(v30);
        *(_WORD *)(v22 + 12) = 2114;
        v41 = (uint64_t)v17;
        v31 = v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
        *v37 = a1;

        *(_WORD *)(v22 + 22) = 2082;
        swift_getErrorValue(v12, v40, v39);
        v32 = Error.rem_errorDescription.getter(v39[1], v39[2]);
        v34 = v33;
        v41 = sub_10001A820(v32, v33, (uint64_t *)&v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
        swift_bridgeObjectRelease(v34);
        swift_errorRelease(v12);
        swift_errorRelease(v12);
        _os_log_impl((void *)&_mh_execute_header, v20, v36, "Failed to set '\\REMCDTemplate.publicLinkConfiguration' due to error upon encoding 'newValue' as 'Data' {remObjectID: %{public}s, newValue: %{public}@, error: %{public}s}", (uint8_t *)v22, 0x20u);
        v35 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v37, 1, v35);
        swift_slowDealloc(v37, -1, -1);
        swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v38, -1, -1);
        swift_slowDealloc(v22, -1, -1);
      }
      else
      {

        swift_errorRelease(v12);
        swift_errorRelease(v12);
      }

      objc_msgSend(v18, "setPublicLinkConfigurationData:", 0);
      swift_errorRelease(v12);
    }
  }
  else
  {
    objc_msgSend(v1, "setPublicLinkConfigurationData:", 0);
  }
}

void (*REMCDTemplate.publicLinkConfiguration.modify(void **a1))(void **a1, char a2)
{
  void *v1;

  a1[1] = v1;
  *a1 = REMCDTemplate.publicLinkConfiguration.getter();
  return sub_10038E41C;
}

void sub_10038E41C(void **a1, char a2)
{
  void *v2;
  id v3;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2;
    REMCDTemplate.publicLinkConfiguration.setter(v2);

  }
  else
  {
    REMCDTemplate.publicLinkConfiguration.setter(*a1);
  }
}

uint64_t sub_10038E470@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  id v28;
  void *v29;
  void (*v30)(char *, char *, uint64_t);
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v50;
  Swift::String v51;
  uint64_t v52;
  Swift::String v53;
  void *object;
  __n128 v55;
  unint64_t v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  NSObject *v64;
  int v65;
  uint64_t v66;
  uint64_t MetatypeMetadata;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  double v71;
  id v72;
  void *v73;
  id v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  __n128 v78;
  id v79;
  __n128 v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t);
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  __n128 v96;
  void (*v97)(char *, char *, __n128);
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  NSObject *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  double v112;
  id v113;
  void *v114;
  id v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t ObjectType;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;

  v3 = v2;
  ObjectType = swift_getObjectType(v3);
  v131 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v131);
  v134 = (char *)&v126 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v135 = (char *)&v126 - v8;
  v9 = sub_10001A630((uint64_t *)&unk_100847790);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v126 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URLComponents(0, v10);
  v136 = *(_QWORD *)(v13 - 8);
  v137 = v13;
  __chkstk_darwin(v13);
  v138 = (char *)&v126 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v15);
  v17 = (char *)&v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v133 = (char *)&v126 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)&v126 - v22;
  *(_QWORD *)&v25 = __chkstk_darwin(v24).n128_u64[0];
  v27 = (char *)&v126 - v26;
  v28 = objc_msgSend(v3, "publicLinkURLUUID", v25);
  if (!v28)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
    goto LABEL_11;
  }
  v29 = v28;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v28);

  v30 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  v30(v17, v23, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
LABEL_11:
    sub_10000882C((uint64_t)v17, (uint64_t *)&unk_100839C80);
LABEL_12:
    v48 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(a2, 1, 1, v48);
  }
  v30(v27, v17, v18);
  v31 = objc_msgSend(v3, "parentAccount");
  if (v31)
  {
    v32 = v31;
    v33 = objc_msgSend(v31, "ckIdentifier");

    if (v33)
    {
      v129 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      v35 = v34;

      v36 = v19;
      v37 = v27;
      v38 = v18;
      v39 = a2;
      v40 = a1[3];
      v41 = a1[4];
      sub_10000A388(a1, v40);
      v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 8);
      v43 = v41;
      a2 = v39;
      v18 = v38;
      v27 = v37;
      v19 = v36;
      v44 = v42(v129, v35, v40, v43);
      v46 = v45;
      swift_bridgeObjectRelease(v35);
      if (v46)
      {
        v47 = HIBYTE(v46) & 0xF;
        if ((v46 & 0x2000000000000000) == 0)
          v47 = v44 & 0xFFFFFFFFFFFFLL;
        if (v47)
        {
          LODWORD(v129) = 1;
          goto LABEL_15;
        }
        swift_bridgeObjectRelease(v46);
      }
    }
  }
  v44 = *(_QWORD *)&v3[OBJC_IVAR___REMCDTemplate_defaultPublicLinkURLHostname];
  v46 = *(_QWORD *)&v3[OBJC_IVAR___REMCDTemplate_defaultPublicLinkURLHostname + 8];
  swift_bridgeObjectRetain(v46);
  LODWORD(v129) = 0;
LABEL_15:
  v140 = 0;
  v141 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease(v141);
  v140 = 0x2F2F3A7370747468;
  v141 = 0xE800000000000000;
  swift_bridgeObjectRetain(v46);
  v128 = v44;
  v50._countAndFlagsBits = v44;
  v50._object = (void *)v46;
  String.append(_:)(v50);
  swift_bridgeObjectRelease(v46);
  v51._object = (void *)0x8000000100701E00;
  v51._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v51);
  v53._countAndFlagsBits = UUID.uuidString.getter(v52);
  object = v53._object;
  String.append(_:)(v53);
  v55 = swift_bridgeObjectRelease(object);
  v56 = v141;
  URLComponents.init(string:)(v140, v141, v55);
  v57 = swift_bridgeObjectRelease(v56);
  v59 = v136;
  v58 = v137;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v136 + 48))(v12, 1, v137, v57) == 1)
  {
    sub_10000882C((uint64_t)v12, (uint64_t *)&unk_100847790);
    if (qword_100837330 != -1)
      swift_once(&qword_100837330, sub_10038CFE4);
    v60 = type metadata accessor for Logger(0);
    sub_10001AAA8(v60, (uint64_t)qword_100847718);
    v61 = v133;
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v133, v27, v18);
    v62 = v3;
    swift_bridgeObjectRetain(v46);
    v63 = v62;
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v64, (os_log_type_t)v65))
    {
      LODWORD(v137) = v65;
      v138 = (char *)v18;
      v127 = a2;
      v66 = swift_slowAlloc(52, -1);
      v136 = swift_slowAlloc(160, -1);
      v139 = v136;
      *(_DWORD *)v66 = 136316162;
      v140 = ObjectType;
      MetatypeMetadata = swift_getMetatypeMetadata(ObjectType);
      v68 = String.init<A>(describing:)(&v140, MetatypeMetadata);
      v70 = v69;
      v140 = sub_10001A820(v68, v69, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141);
      *(_QWORD *)&v71 = swift_bridgeObjectRelease(v70).n128_u64[0];
      *(_WORD *)(v66 + 12) = 2082;
      v72 = objc_msgSend(v63, "remObjectID", v71);
      v130 = v27;
      if (v72)
      {
        v73 = v72;
        v74 = objc_msgSend(v72, "description");

        v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
        v77 = v76;

      }
      else
      {
        v75 = 7104878;
        v77 = 0xE300000000000000;
      }
      v140 = sub_10001A820(v75, v77, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141);

      swift_bridgeObjectRelease(v77);
      *(_WORD *)(v66 + 22) = 2082;
      v91 = v133;
      v93 = UUID.uuidString.getter(v92);
      v95 = v94;
      v140 = sub_10001A820(v93, v94, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141);
      v96 = swift_bridgeObjectRelease(v95);
      v97 = *(void (**)(char *, char *, __n128))(v19 + 8);
      v98 = v138;
      v97(v91, v138, v96);
      *(_WORD *)(v66 + 32) = 2082;
      swift_bridgeObjectRetain(v46);
      v140 = sub_10001A820(v128, v46, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141);
      swift_bridgeObjectRelease_n(v46, 3);
      *(_WORD *)(v66 + 42) = 2082;
      if ((_DWORD)v129)
        v99 = 1702195828;
      else
        v99 = 0x65736C6166;
      if ((_DWORD)v129)
        v100 = 0xE400000000000000;
      else
        v100 = 0xE500000000000000;
      v140 = sub_10001A820(v99, v100, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141);
      swift_bridgeObjectRelease(v100);
      _os_log_impl((void *)&_mh_execute_header, v64, (os_log_type_t)v137, "%s: Failed to compute public link URL {templateID: %{public}s, publicLinkURLUUID: %{public}s, hostname: %{public}s, isUsingDisplayedHostnameOfACAccount: %{public}s}", (uint8_t *)v66, 0x34u);
      v101 = v136;
      swift_arrayDestroy(v136, 5, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v101, -1, -1);
      swift_slowDealloc(v66, -1, -1);

      ((void (*)(char *, char *))v97)(v130, v98);
      a2 = v127;
    }
    else
    {
      swift_bridgeObjectRelease_n(v46, 2);

      v90 = *(void (**)(char *, uint64_t))(v19 + 8);
      v90(v61, v18);

      v90(v27, v18);
    }
    goto LABEL_12;
  }
  v130 = v27;
  v78 = swift_bridgeObjectRelease(v46);
  (*(void (**)(char *, char *, uint64_t, __n128))(v59 + 32))(v138, v12, v58, v78);
  v79 = objc_msgSend(v3, "name");
  v81 = (uint64_t)v134;
  if (v79)
  {
    v82 = v79;
    v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
    v85 = v84;

    v86 = String.urlFragmentRepresentation.getter(v83, v85);
    v88 = v87;
    v80 = swift_bridgeObjectRelease(v85);
    if (v88)
    {
      v89 = HIBYTE(v88) & 0xF;
      if ((v88 & 0x2000000000000000) == 0)
        v89 = v86 & 0xFFFFFFFFFFFFLL;
      if (v89)
        URLComponents.percentEncodedFragment.setter(v86, v88, v80);
      else
        v80 = swift_bridgeObjectRelease(v88);
    }
  }
  v102 = (uint64_t)v135;
  URLComponents.url.getter(v80);
  if (qword_100837330 != -1)
    swift_once(&qword_100837330, sub_10038CFE4);
  v103 = type metadata accessor for Logger(0);
  sub_10001AAA8(v103, (uint64_t)qword_100847718);
  sub_10015CF8C(v102, v81);
  v104 = v3;
  v105 = Logger.logObject.getter(v104);
  v106 = static os_log_type_t.default.getter(v105);
  if (os_log_type_enabled(v105, (os_log_type_t)v106))
  {
    LODWORD(v133) = v106;
    v127 = a2;
    v107 = swift_slowAlloc(42, -1);
    v128 = swift_slowAlloc(128, -1);
    v139 = v128;
    *(_DWORD *)v107 = 136315906;
    v140 = ObjectType;
    v108 = swift_getMetatypeMetadata(ObjectType);
    v109 = String.init<A>(describing:)(&v140, v108);
    v111 = v110;
    v140 = sub_10001A820(v109, v110, &v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141);
    *(_QWORD *)&v112 = swift_bridgeObjectRelease(v111).n128_u64[0];
    *(_WORD *)(v107 + 12) = 2082;
    v113 = objc_msgSend(v104, "remObjectID", v112);
    if (v113)
    {
      v114 = v113;
      v115 = objc_msgSend(v113, "description");

      v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
      v118 = v117;

    }
    else
    {
      v116 = 7104878;
      v118 = 0xE300000000000000;
    }
    v140 = sub_10001A820(v116, v118, &v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141);

    swift_bridgeObjectRelease(v118);
    *(_WORD *)(v107 + 22) = 2082;
    v119 = (uint64_t)v134;
    v120 = Optional.descriptionOrNil.getter(v131);
    v122 = v121;
    v140 = sub_10001A820(v120, v121, &v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141);
    swift_bridgeObjectRelease(v122);
    sub_10000882C(v119, (uint64_t *)&unk_100839C70);
    *(_WORD *)(v107 + 32) = 2082;
    if ((_DWORD)v129)
      v123 = 1702195828;
    else
      v123 = 0x65736C6166;
    if ((_DWORD)v129)
      v124 = 0xE400000000000000;
    else
      v124 = 0xE500000000000000;
    v140 = sub_10001A820(v123, v124, &v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141);
    swift_bridgeObjectRelease(v124);
    _os_log_impl((void *)&_mh_execute_header, v105, (os_log_type_t)v133, "%s: Computed public link URL {templateID: %{public}s, publicLinkURL: %{public}s, isUsingDisplayedHostnameOfACAccount: %{public}s}", (uint8_t *)v107, 0x2Au);
    v125 = v128;
    swift_arrayDestroy(v128, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v125, -1, -1);
    swift_slowDealloc(v107, -1, -1);

    (*(void (**)(char *, uint64_t))(v136 + 8))(v138, v137);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v130, v18);
    a2 = v127;
    v102 = (uint64_t)v135;
  }
  else
  {

    sub_10000882C(v81, (uint64_t *)&unk_100839C70);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v138, v58);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v130, v18);
  }
  return sub_1000A5CA8(v102, a2, (uint64_t *)&unk_100839C70);
}

uint64_t sub_10038F04C(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100837328 != -1)
    swift_once(&qword_100837328, sub_10038CFC0);
  v8 = sub_10001AAA8(v4, (uint64_t)qword_100847700);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9 = a1;
  swift_retain_n(a2, 2);
  v10 = v9;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v31 = v5;
    v13 = swift_slowAlloc(22, -1);
    v29 = swift_slowAlloc(64, -1);
    v35 = v29;
    *(_DWORD *)v13 = 136446466;
    v30 = a2;
    v14 = objc_msgSend(v10, "remObjectID");
    v33 = (uint64_t)v14;
    v15 = sub_10001A630((uint64_t *)&unk_100844910);
    v16 = Optional.descriptionOrNil.getter(v15);
    v18 = v17;

    v33 = sub_10001A820(v16, v18, &v35);
    v19 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);

    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v13 + 12) = 2082;
    v21 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v20);
    if (v22)
    {
      v23 = v22;
      v33 = sub_10001A820(v21, v22, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);
      swift_release_n(v19, 2);
      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "REMCDTemplate: Attempted to call 'setPropertyAndUpdateResolutionTokenMap(propertyKeyPath:to:)' with newValue, which has incorrect type {objectID: %{public}s, keyPath: %{public}s}}", (uint8_t *)v13, 0x16u);
      v24 = v29;
      swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v13, -1, -1);

      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v7, v4);
    }
    else
    {
      swift_release(v19);
      v33 = 0;
      v34 = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      v26._object = (void *)0x80000001006F8C10;
      v26._countAndFlagsBits = 0xD00000000000002CLL;
      String.append(_:)(v26);
      v32 = v19;
      v27 = sub_10001A630(&qword_10083FD70);
      _print_unlocked<A, B>(_:_:)(&v32, &v33, v27, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v33, v34, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
      __break(1u);
    }
  }
  else
  {

    swift_release_n(a2, 2);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

id REMCDTemplate.init(entity:insertInto:)(void *a1, void *a2)
{
  void *v2;
  id v5;
  objc_super v7;

  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for REMCDTemplate();
  v5 = objc_msgSendSuper2(&v7, "initWithEntity:insertIntoManagedObjectContext:", a1, a2);

  return v5;
}

id REMCDTemplate.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for REMCDTemplate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

Swift::Void __swiftcall REMCDTemplate.willSave_Swift()()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + OBJC_IVAR___REMCDTemplate_didCleanUpManualSortHintOnMarkingForDeletion) & 1) == 0)
  {
    *(_BYTE *)(v0 + OBJC_IVAR___REMCDTemplate_didCleanUpManualSortHintOnMarkingForDeletion) = 1;
    sub_10038F500();
  }
}

double sub_10038F500()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  char *v5;
  double result;
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  Swift::String v15;
  Swift::Bool v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  NSObject *v43;
  int v44;
  uint8_t *v45;
  id v46;
  void *v47;
  id v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  id v52;
  os_log_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  os_log_t v63;
  id v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  *(_QWORD *)&v3 = __chkstk_darwin(v1).n128_u64[0];
  v5 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(v0, "markedForDeletion", v3))
  {
    v7 = objc_msgSend(v0, "remObjectID");
    if (v7)
    {
      v66 = v7;
      v8 = objc_msgSend(v0, "storeControllerManagedObjectContext");
      if (!v8)
      {
LABEL_21:

        return result;
      }
      v9 = v8;
      v10 = objc_msgSend(v0, "account");
      if (!v10
        || (v11 = v10,
            v12 = objc_msgSend(v10, "remObjectID"),
            v11,
            !v12))
      {
        if (qword_100837328 != -1)
          swift_once(&qword_100837328, sub_10038CFC0);
        v29 = type metadata accessor for Logger(0);
        sub_10001AAA8(v29, (uint64_t)qword_100847700);
        v12 = v0;
        v30 = Logger.logObject.getter(v12);
        v31 = static os_log_type_t.error.getter(v30);
        if (os_log_type_enabled(v30, v31))
        {
          v32 = (uint8_t *)swift_slowAlloc(12, -1);
          v33 = swift_slowAlloc(32, -1);
          v68 = v33;
          *(_DWORD *)v32 = 136446210;
          v34 = objc_msgSend(v12, "remObjectID");
          if (v34)
          {
            v35 = v34;
            v36 = objc_msgSend(v34, "description");

            v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
            v39 = v38;

          }
          else
          {
            v37 = 7104878;
            v39 = 0xE300000000000000;
          }
          v67 = sub_10001A820(v37, v39, &v68);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v30, v31, "cleanUpManualSortHintIfNeeded: Unexpectedly nil template account.remObjectID {templateID: %{public}s}", v32, 0xCu);
          swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v33, -1, -1);
          swift_slowDealloc(v32, -1, -1);

          goto LABEL_32;
        }

        goto LABEL_20;
      }
      v13 = objc_msgSend(v9, "transactionAuthor");
      if (!v13
        || (v14 = v13,
            static String._unconditionallyBridgeFromObjectiveC(_:)(v13),
            v14,
            v15._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(RDStoreControllerICCloudContextAuthor),
            v16 = String.hasPrefix(_:)(v15),
            swift_bridgeObjectRelease(),
            swift_bridgeObjectRelease(),
            v16))
      {
        if (qword_100837328 != -1)
          swift_once(&qword_100837328, sub_10038CFC0);
        v17 = type metadata accessor for Logger(0);
        sub_10001AAA8(v17, (uint64_t)qword_100847700);
        v18 = v0;
        v19 = Logger.logObject.getter(v18);
        v20 = static os_log_type_t.default.getter(v19);
        if (os_log_type_enabled(v19, v20))
        {
          v21 = (uint8_t *)swift_slowAlloc(12, -1);
          v22 = swift_slowAlloc(32, -1);
          v68 = v22;
          *(_DWORD *)v21 = 136446210;
          v23 = objc_msgSend(v18, "remObjectID");
          if (v23)
          {
            v24 = v23;
            v25 = objc_msgSend(v23, "description");

            v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
            v28 = v27;

          }
          else
          {
            v26 = 7104878;
            v28 = 0xE300000000000000;
          }
          v67 = sub_10001A820(v26, v28, &v68);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v19, v20, "cleanUpManualSortHintIfNeeded: Template was deleted due to non-user-initiated changes, cleanup is not needed {templateID: %{public}s}", v21, 0xCu);
          swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v22, -1, -1);
          swift_slowDealloc(v21, -1, -1);

LABEL_32:
          return result;
        }

LABEL_20:
        goto LABEL_21;
      }
      if (qword_100837328 != -1)
        swift_once(&qword_100837328, sub_10038CFC0);
      v40 = type metadata accessor for Logger(0);
      v41 = sub_10001AAA8(v40, (uint64_t)qword_100847700);
      v42 = v0;
      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.default.getter(v43);
      if (os_log_type_enabled(v43, (os_log_type_t)v44))
      {
        v62 = v44;
        v63 = v43;
        v65 = v41;
        v45 = (uint8_t *)swift_slowAlloc(12, -1);
        v61 = swift_slowAlloc(32, -1);
        v68 = v61;
        *(_DWORD *)v45 = 136446210;
        v64 = v42;
        v46 = objc_msgSend(v42, "remObjectID");
        if (v46)
        {
          v47 = v46;
          v48 = objc_msgSend(v46, "description");

          v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
          v51 = v50;

        }
        else
        {
          v49 = 7104878;
          v51 = 0xE300000000000000;
        }
        v67 = sub_10001A820(v49, v51, &v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);
        v52 = v64;

        swift_bridgeObjectRelease();
        v53 = v63;
        _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v62, "cleanUpManualSortHintIfNeeded: Template was deleted due to user-initiated changes, will delete its associated sort hint {templateID: %{public}s}", v45, 0xCu);
        v54 = v61;
        swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v54, -1, -1);
        swift_slowDealloc(v45, -1, -1);

      }
      else
      {

      }
      v55 = objc_msgSend(v66, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v55);

      UUID.uuidString.getter(v56);
      v58 = v57;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
      swift_bridgeObjectRetain(v58);
      v59 = v12;
      sub_1000D24B8(6);

      *(_QWORD *)&result = swift_bridgeObjectRelease_n(v58, 2).n128_u64[0];
    }
  }
  return result;
}

Swift::Void __swiftcall REMCDTemplate.didSave_Swift()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + OBJC_IVAR___REMCDTemplate_didCleanUpManualSortHintOnMarkingForDeletion) = 0;
}

uint64_t type metadata accessor for REMCDTemplate()
{
  return objc_opt_self(REMCDTemplate);
}

void sub_10038FF58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t *v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v0 + qword_10083A508);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v0 + qword_10083A518);
    v12 = *(void (**)(uint64_t))(v0 + qword_10083A518);
    if ((*(_BYTE *)(v0 + qword_10083A518 + 32) & 1) == 0)
      return;
    v13 = v11[1];
    v14 = *(_QWORD *)(v0 + qword_10083A520);
    if (v14)
    {
      v15 = v11[2];
      v16 = v11[3];
      sub_1000E684C(*(_QWORD *)(v0 + qword_10083A518), v11[1], v15, v16, 1);
      v17 = swift_retain();
      v12(v17);
      swift_release(v14);
      sub_1000E6860((uint64_t)v12, v13, v15, v16, 1);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  v18 = qword_100836CF0;
  swift_retain();
  if (v18 != -1)
    swift_once(&qword_100836CF0, sub_1000E5528);
  v19 = sub_10001AAA8(v1, (uint64_t)qword_10083A380);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v19, v1);
  v20 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
  v21 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
  sub_1004A14D8((uint64_t)"loadFactor wasn't properly initialized even with debouncing interval option set to .loadFunction", 96, 2uLL, v20, v21);
  __break(1u);
}

uint64_t sub_100390178(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  int v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  os_log_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t);
  uint64_t v57;
  uint8_t *v58;
  int v59;
  uint64_t v60;
  os_log_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t);
  _QWORD *v70;
  uint64_t aBlock[5];
  _QWORD *v72;

  v4 = v3;
  v67 = a3;
  v68 = a1;
  v69 = a2;
  v5 = type metadata accessor for DispatchTime(0);
  v66 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v58 - v9;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (uint8_t **)((char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *(void **)(v4 + qword_10083A508);
  *v17 = v18;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  v65 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v17);
  (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) == 0)
  {
    __break(1u);
LABEL_27:
    swift_once(&qword_100836CF0, sub_1000E5528);
    goto LABEL_10;
  }
  if (*(_BYTE *)(v4 + qword_10083A530) != 1)
  {
LABEL_7:
    v24 = *(uint64_t (**)(uint64_t))(v4 + qword_10083A510);
    v25 = v68;
    result = v24(v68);
    if (v69)
      return v69(1, v25);
    return result;
  }
  sub_1003914C8();
  if (*(_QWORD *)(v4 + qword_10083A538))
  {
    result = sub_100392064(v68, (uint64_t)v69, v67, sub_1002B6740, (uint64_t)&unk_1007F1598, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1002C890C, (uint64_t)sub_10039BCE8);
    v20 = qword_10083A550;
    v21 = *(_QWORD *)(v4 + qword_10083A550);
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
LABEL_21:
      *(_QWORD *)(v4 + v20) = v23;
      return result;
    }
    __break(1u);
    goto LABEL_7;
  }
  v63 = qword_10083A538;
  v17 = *(_QWORD **)(v4 + qword_10083A528 + 8);
  v64 = *(_QWORD *)(v4 + qword_10083A528);
  v26 = qword_100836CF0;
  swift_bridgeObjectRetain(v17);
  if (v26 != -1)
    goto LABEL_27;
LABEL_10:
  v27 = type metadata accessor for Logger(0);
  sub_10001AAA8(v27, (uint64_t)qword_10083A380);
  v28 = swift_bridgeObjectRetain_n(v17, 2);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter(v29);
  v31 = v30;
  if (os_log_type_enabled(v29, v30))
  {
    v61 = v29;
    v32 = swift_slowAlloc(12, -1);
    v59 = v31;
    v33 = (uint8_t *)v32;
    v60 = swift_slowAlloc(32, -1);
    aBlock[0] = v60;
    v58 = v33;
    *(_DWORD *)v33 = 136315138;
    v62 = v5;
    if (v17)
      v34 = v64;
    else
      v34 = 7104878;
    if (v17)
      v35 = (unint64_t)v17;
    else
      v35 = 0xE300000000000000;
    swift_bridgeObjectRetain(v17);
    v36 = v34;
    v5 = v62;
    v70 = (_QWORD *)sub_10001A820(v36, v35, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, aBlock);
    swift_bridgeObjectRelease_n(v17, 2);
    swift_bridgeObjectRelease(v35);
    v37 = v61;
    v38 = v58;
    _os_log_impl((void *)&_mh_execute_header, v61, (os_log_type_t)v59, "os_transaction INIT {name: com.apple.remindd.rddebouncer}, label: %s", v58, 0xCu);
    v39 = v60;
    swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v38, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v17, 2);
  }
  v40 = os_transaction_create("com.apple.remindd.rddebouncer");
  v41 = swift_allocObject(&unk_1007F1520, 24, 7);
  swift_unknownObjectWeakInit(v41 + 16, v4);
  v42 = (_QWORD *)swift_allocObject(&unk_1007F1548, 48, 7);
  v43 = v64;
  v42[2] = v41;
  v42[3] = v43;
  v42[4] = v17;
  v42[5] = v40;
  aBlock[4] = (uint64_t)sub_10039B8E4;
  v72 = v42;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000094C8;
  aBlock[3] = (uint64_t)&unk_1007F1560;
  v62 = (uint64_t)_Block_copy(aBlock);
  v70 = _swiftEmptyArrayStorage;
  v44 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  swift_retain();
  v64 = v40;
  swift_unknownObjectRetain(v40);
  v45 = sub_10001A630((uint64_t *)&unk_100838000);
  v46 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v70, v45, v46, v11, v44);
  v47 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v47, *(unsigned int *)(v47 + 48), *(unsigned __int16 *)(v47 + 52));
  v48 = DispatchWorkItem.init(flags:block:)(v13, v62);
  v49 = v72;
  swift_release(v41);
  swift_release(v49);
  v50 = *(_QWORD *)(v4 + v63);
  *(_QWORD *)(v4 + v63) = v48;
  swift_retain();
  v51 = swift_release(v50);
  static DispatchTime.now()(v51);
  sub_10038FF58();
  + infix(_:_:)(v8, v52);
  v53 = *(void (**)(char *, uint64_t))(v66 + 8);
  v53(v8, v5);
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v10, v48);
  v53(v10, v5);
  if (*(_BYTE *)(v4 + qword_10083A518 + 33) == 1)
  {
    sub_100392064(v68, (uint64_t)v69, v67, sub_1002B6740, (uint64_t)&unk_1007F1598, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1002C890C, (uint64_t)sub_10039BCE8);
    swift_release(v48);
    result = swift_unknownObjectRelease(v64);
    v20 = qword_10083A550;
    v54 = *(_QWORD *)(v4 + qword_10083A550);
    v22 = __OFADD__(v54, 1);
    v23 = v54 + 1;
    if (v22)
    {
      __break(1u);
      return result;
    }
    goto LABEL_21;
  }
  v55 = v64;
  v56 = *(void (**)(uint64_t))(v4 + qword_10083A510);
  v57 = v68;
  v56(v68);
  if (v69)
    v69(1, v57);
  swift_release(v48);
  return swift_unknownObjectRelease(v55);
}

uint64_t sub_1003907E8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  int v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  os_log_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t);
  uint64_t v57;
  uint8_t *v58;
  int v59;
  uint64_t v60;
  os_log_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t);
  _QWORD *v70;
  uint64_t aBlock[5];
  _QWORD *v72;

  v4 = v3;
  v67 = a3;
  v68 = a1;
  v69 = a2;
  v5 = type metadata accessor for DispatchTime(0);
  v66 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v58 - v9;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (uint8_t **)((char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *(void **)(v4 + qword_10083A508);
  *v17 = v18;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  v65 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v17);
  (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) == 0)
  {
    __break(1u);
LABEL_27:
    swift_once(&qword_100836CF0, sub_1000E5528);
    goto LABEL_10;
  }
  if (*(_BYTE *)(v4 + qword_10083A530) != 1)
  {
LABEL_7:
    v24 = *(uint64_t (**)(uint64_t))(v4 + qword_10083A510);
    v25 = v68;
    result = v24(v68);
    if (v69)
      return v69(1, v25);
    return result;
  }
  sub_1003914C8();
  if (*(_QWORD *)(v4 + qword_10083A538))
  {
    result = sub_100392064(v68, (uint64_t)v69, v67, sub_1002B6A34, (uint64_t)&unk_1007F14F8, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1002C8A38, (uint64_t)sub_10039BCE8);
    v20 = qword_10083A550;
    v21 = *(_QWORD *)(v4 + qword_10083A550);
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
LABEL_21:
      *(_QWORD *)(v4 + v20) = v23;
      return result;
    }
    __break(1u);
    goto LABEL_7;
  }
  v63 = qword_10083A538;
  v17 = *(_QWORD **)(v4 + qword_10083A528 + 8);
  v64 = *(_QWORD *)(v4 + qword_10083A528);
  v26 = qword_100836CF0;
  swift_bridgeObjectRetain(v17);
  if (v26 != -1)
    goto LABEL_27;
LABEL_10:
  v27 = type metadata accessor for Logger(0);
  sub_10001AAA8(v27, (uint64_t)qword_10083A380);
  v28 = swift_bridgeObjectRetain_n(v17, 2);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter(v29);
  v31 = v30;
  if (os_log_type_enabled(v29, v30))
  {
    v61 = v29;
    v32 = swift_slowAlloc(12, -1);
    v59 = v31;
    v33 = (uint8_t *)v32;
    v60 = swift_slowAlloc(32, -1);
    aBlock[0] = v60;
    v58 = v33;
    *(_DWORD *)v33 = 136315138;
    v62 = v5;
    if (v17)
      v34 = v64;
    else
      v34 = 7104878;
    if (v17)
      v35 = (unint64_t)v17;
    else
      v35 = 0xE300000000000000;
    swift_bridgeObjectRetain(v17);
    v36 = v34;
    v5 = v62;
    v70 = (_QWORD *)sub_10001A820(v36, v35, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, aBlock);
    swift_bridgeObjectRelease_n(v17, 2);
    swift_bridgeObjectRelease(v35);
    v37 = v61;
    v38 = v58;
    _os_log_impl((void *)&_mh_execute_header, v61, (os_log_type_t)v59, "os_transaction INIT {name: com.apple.remindd.rddebouncer}, label: %s", v58, 0xCu);
    v39 = v60;
    swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v38, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v17, 2);
  }
  v40 = os_transaction_create("com.apple.remindd.rddebouncer");
  v41 = swift_allocObject(&unk_1007F1480, 24, 7);
  swift_unknownObjectWeakInit(v41 + 16, v4);
  v42 = (_QWORD *)swift_allocObject(&unk_1007F14A8, 48, 7);
  v43 = v64;
  v42[2] = v41;
  v42[3] = v43;
  v42[4] = v17;
  v42[5] = v40;
  aBlock[4] = (uint64_t)sub_10039B888;
  v72 = v42;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000094C8;
  aBlock[3] = (uint64_t)&unk_1007F14C0;
  v62 = (uint64_t)_Block_copy(aBlock);
  v70 = _swiftEmptyArrayStorage;
  v44 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  swift_retain();
  v64 = v40;
  swift_unknownObjectRetain(v40);
  v45 = sub_10001A630((uint64_t *)&unk_100838000);
  v46 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v70, v45, v46, v11, v44);
  v47 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v47, *(unsigned int *)(v47 + 48), *(unsigned __int16 *)(v47 + 52));
  v48 = DispatchWorkItem.init(flags:block:)(v13, v62);
  v49 = v72;
  swift_release(v41);
  swift_release(v49);
  v50 = *(_QWORD *)(v4 + v63);
  *(_QWORD *)(v4 + v63) = v48;
  swift_retain();
  v51 = swift_release(v50);
  static DispatchTime.now()(v51);
  sub_10038FF58();
  + infix(_:_:)(v8, v52);
  v53 = *(void (**)(char *, uint64_t))(v66 + 8);
  v53(v8, v5);
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v10, v48);
  v53(v10, v5);
  if (*(_BYTE *)(v4 + qword_10083A518 + 33) == 1)
  {
    sub_100392064(v68, (uint64_t)v69, v67, sub_1002B6A34, (uint64_t)&unk_1007F14F8, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1002C8A38, (uint64_t)sub_10039BCE8);
    swift_release(v48);
    result = swift_unknownObjectRelease(v64);
    v20 = qword_10083A550;
    v54 = *(_QWORD *)(v4 + qword_10083A550);
    v22 = __OFADD__(v54, 1);
    v23 = v54 + 1;
    if (v22)
    {
      __break(1u);
      return result;
    }
    goto LABEL_21;
  }
  v55 = v64;
  v56 = *(void (**)(uint64_t))(v4 + qword_10083A510);
  v57 = v68;
  v56(v68);
  if (v69)
    v69(1, v57);
  swift_release(v48);
  return swift_unknownObjectRelease(v55);
}

uint64_t sub_100390E58(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  os_log_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t);
  uint64_t v58;
  uint8_t *v59;
  int v60;
  uint64_t v61;
  os_log_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t, uint64_t);
  _QWORD *v71;
  uint64_t aBlock[5];
  _QWORD *v73;

  v4 = v3;
  v68 = a3;
  v69 = a1;
  v70 = a2;
  v5 = type metadata accessor for DispatchTime(0);
  v67 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v59 - v9;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (uint8_t **)((char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *(void **)(v4 + qword_10083A508);
  *v18 = v19;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v15 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v14, v16);
  v66 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v18, v14);
  if ((v19 & 1) == 0)
  {
    __break(1u);
LABEL_27:
    swift_once(&qword_100836CF0, sub_1000E5528);
    goto LABEL_10;
  }
  if (*(_BYTE *)(v4 + qword_10083A530) != 1)
  {
LABEL_7:
    v25 = *(uint64_t (**)(uint64_t))(v4 + qword_10083A510);
    v26 = v69;
    result = v25(v69);
    if (v70)
      return v70(1, v26);
    return result;
  }
  sub_1003914C8();
  if (*(_QWORD *)(v4 + qword_10083A538))
  {
    result = sub_100392064(v69, (uint64_t)v70, v68, sub_1002B6EA0, (uint64_t)&unk_1007F1340, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1002CA9DC, (uint64_t)sub_10039B420);
    v21 = qword_10083A550;
    v22 = *(_QWORD *)(v4 + qword_10083A550);
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
LABEL_21:
      *(_QWORD *)(v4 + v21) = v24;
      return result;
    }
    __break(1u);
    goto LABEL_7;
  }
  v64 = qword_10083A538;
  v18 = *(_QWORD **)(v4 + qword_10083A528 + 8);
  v65 = *(_QWORD *)(v4 + qword_10083A528);
  v27 = qword_100836CF0;
  swift_bridgeObjectRetain(v18);
  if (v27 != -1)
    goto LABEL_27;
LABEL_10:
  v28 = type metadata accessor for Logger(0);
  sub_10001AAA8(v28, (uint64_t)qword_10083A380);
  v29 = swift_bridgeObjectRetain_n(v18, 2);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter(v30);
  v32 = v31;
  if (os_log_type_enabled(v30, v31))
  {
    v62 = v30;
    v33 = swift_slowAlloc(12, -1);
    v60 = v32;
    v34 = (uint8_t *)v33;
    v61 = swift_slowAlloc(32, -1);
    aBlock[0] = v61;
    v59 = v34;
    *(_DWORD *)v34 = 136315138;
    v63 = v5;
    if (v18)
      v35 = v65;
    else
      v35 = 7104878;
    if (v18)
      v36 = (unint64_t)v18;
    else
      v36 = 0xE300000000000000;
    swift_bridgeObjectRetain(v18);
    v37 = v35;
    v5 = v63;
    v71 = (_QWORD *)sub_10001A820(v37, v36, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, aBlock);
    swift_bridgeObjectRelease_n(v18, 2);
    swift_bridgeObjectRelease();
    v38 = v62;
    v39 = v59;
    _os_log_impl((void *)&_mh_execute_header, v62, (os_log_type_t)v60, "os_transaction INIT {name: com.apple.remindd.rddebouncer}, label: %s", v59, 0xCu);
    v40 = v61;
    swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v39, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v18, 2);
  }
  v41 = os_transaction_create("com.apple.remindd.rddebouncer");
  v42 = swift_allocObject(&unk_1007F1368, 24, 7);
  swift_unknownObjectWeakInit(v42 + 16, v4);
  v43 = (_QWORD *)swift_allocObject(&unk_1007F1390, 48, 7);
  v44 = v65;
  v43[2] = v42;
  v43[3] = v44;
  v43[4] = v18;
  v43[5] = v41;
  aBlock[4] = (uint64_t)sub_10039B470;
  v73 = v43;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000094C8;
  aBlock[3] = (uint64_t)&unk_1007F13A8;
  v63 = (uint64_t)_Block_copy(aBlock);
  v71 = _swiftEmptyArrayStorage;
  v45 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  swift_retain();
  v65 = v41;
  swift_unknownObjectRetain(v41);
  v46 = sub_10001A630((uint64_t *)&unk_100838000);
  v47 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v71, v46, v47, v11, v45);
  v48 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
  v49 = DispatchWorkItem.init(flags:block:)(v13, v63);
  v50 = v73;
  swift_release(v42);
  swift_release(v50);
  v51 = *(_QWORD *)(v4 + v64);
  *(_QWORD *)(v4 + v64) = v49;
  swift_retain();
  v52 = swift_release(v51);
  static DispatchTime.now()(v52);
  sub_10038FF58();
  + infix(_:_:)(v7, v53);
  v54 = *(void (**)(char *, uint64_t))(v67 + 8);
  v54(v7, v5);
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v10, v49);
  v54(v10, v5);
  if (*(_BYTE *)(v4 + qword_10083A518 + 33) == 1)
  {
    sub_100392064(v69, (uint64_t)v70, v68, sub_1002B6EA0, (uint64_t)&unk_1007F1340, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1002CA9DC, (uint64_t)sub_10039B420);
    swift_release(v49);
    result = swift_unknownObjectRelease(v65);
    v21 = qword_10083A550;
    v55 = *(_QWORD *)(v4 + qword_10083A550);
    v23 = __OFADD__(v55, 1);
    v24 = v55 + 1;
    if (v23)
    {
      __break(1u);
      return result;
    }
    goto LABEL_21;
  }
  v56 = v65;
  v57 = *(void (**)(uint64_t))(v4 + qword_10083A510);
  v58 = v69;
  v57(v69);
  if (v70)
    v70(1, v58);
  swift_release(v49);
  return swift_unknownObjectRelease(v56);
}

void sub_1003914C8()
{
  char *v0;
  double v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  NSObject *v57;
  os_log_type_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  __n128 v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  __n128 v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  void (*v81)(uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t);
  __n128 v85;
  void (*v86)(uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  double v95;
  char v96;
  uint64_t v97;
  _BYTE v98[16];
  uint64_t v99[3];
  char v100[32];

  v2 = v0;
  v3 = sub_10001A630(&qword_10083A670);
  v90 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v89 = (char *)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A630((uint64_t *)&unk_100847A90);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v87 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v87 - v12;
  v92 = type metadata accessor for DispatchTime(0);
  v94 = *(_QWORD *)(v92 - 8);
  v14 = __chkstk_darwin(v92);
  v16 = (char *)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v93 = (char *)&v87 - v17;
  v18 = type metadata accessor for DispatchPredicate(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(void **)&v2[qword_10083A508];
  *(_QWORD *)v21 = v22;
  (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v18);
  v23 = v22;
  v24 = _dispatchPreconditionTest(_:)(v21);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  if ((v24 & 1) == 0)
  {
    __break(1u);
    goto LABEL_43;
  }
  v25 = *(_QWORD *)&v2[qword_10083A520];
  if (!v25)
    return;
  v88 = v3;
  v91 = v16;
  v26 = swift_retain();
  v21 = v93;
  static DispatchTime.now()(v26);
  v19 = v25 + OBJC_IVAR____TtCC7remindd12RDDebouncing10LoadFactor_lastFire;
  swift_beginAccess(v25 + OBJC_IVAR____TtCC7remindd12RDDebouncing10LoadFactor_lastFire, v100, 0, 0);
  sub_100008868(v19, (uint64_t)v13, (uint64_t *)&unk_100847A90);
  v3 = v94;
  v24 = v92;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v13, 1, v92) == 1)
  {
    v91 = (char *)v25;
    sub_10000882C((uint64_t)v13, (uint64_t *)&unk_100847A90);
    if (qword_100836CF0 == -1)
    {
LABEL_5:
      v27 = type metadata accessor for Logger(0);
      sub_10001AAA8(v27, (uint64_t)qword_10083A380);
      v28 = v2;
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.info.getter(v29);
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc(12, -1);
        v90 = swift_slowAlloc(32, -1);
        v99[0] = v90;
        *(_DWORD *)v31 = 136315138;
        v32 = *(_QWORD *)&v28[qword_10083A528 + 8];
        if (v32)
        {
          v33 = *(_QWORD *)&v28[qword_10083A528];
          v34 = *(_QWORD *)&v28[qword_10083A528 + 8];
        }
        else
        {
          v33 = 7104878;
          v34 = 0xE300000000000000;
        }
        swift_bridgeObjectRetain(v32);
        v97 = sub_10001A820(v33, v34, v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98);

        swift_bridgeObjectRelease(v34);
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "RDDebouncer.sampleFire: First fire sampled {label: %s}", v31, 0xCu);
        v66 = v90;
        swift_arrayDestroy(v90, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v66, -1, -1);
        swift_slowDealloc(v31, -1, -1);

        v24 = v92;
        v21 = v93;
        v3 = v94;
      }
      else
      {

      }
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v11, v21, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v11, 0, 1, v24);
      sub_1000A5CA8((uint64_t)v11, (uint64_t)v8, (uint64_t *)&unk_100847A90);
      swift_beginAccess(v19, v99, 33, 0);
      sub_1000BABD0((uint64_t)v8, v19, (uint64_t *)&unk_100847A90);
      swift_endAccess(v99);
      swift_release(v91);
      return;
    }
LABEL_43:
    swift_once(&qword_100836CF0, sub_1000E5528);
    goto LABEL_5;
  }
  v35 = (uint64_t)v91;
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v91, v13, v24);
  v36 = *(_QWORD *)(v25 + 40);
  v37 = __OFADD__(v36, 1);
  v38 = v36 + 1;
  if (v37)
  {
    __break(1u);
    goto LABEL_45;
  }
  *(_QWORD *)(v25 + 40) = v38;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v11, v21, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v11, 0, 1, v24);
  sub_1000A5CA8((uint64_t)v11, (uint64_t)v8, (uint64_t *)&unk_100847A90);
  swift_beginAccess(v19, v99, 33, 0);
  sub_1000BABD0((uint64_t)v8, v19, (uint64_t *)&unk_100847A90);
  v39 = swift_endAccess(v99);
  v40 = *(double *)(v25 + 24);
  v19 = DispatchTime.uptimeNanoseconds.getter(v39);
  v41 = DispatchTime.uptimeNanoseconds.getter(v19);
  v42 = v19 - v41;
  if (v19 < v41)
  {
LABEL_45:
    __break(1u);
LABEL_46:
    swift_once(&qword_100836CF0, sub_1000E5528);
LABEL_12:
    v43 = type metadata accessor for Logger(0);
    sub_10001AAA8(v43, (uint64_t)qword_10083A380);
    swift_retain_n(v19, 2);
    v44 = v19;
    v45 = v2;
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.info.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = v44;
      v49 = swift_slowAlloc(32, -1);
      v50 = swift_slowAlloc(32, -1);
      v99[0] = v50;
      *(_DWORD *)v49 = 136315650;
      v51 = *(_QWORD *)&v45[qword_10083A528 + 8];
      if (v51)
      {
        v52 = *(_QWORD *)&v45[qword_10083A528];
        v53 = *(_QWORD *)&v45[qword_10083A528 + 8];
      }
      else
      {
        v52 = 7104878;
        v53 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain(v51);
      v97 = sub_10001A820(v52, v53, v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98);

      swift_bridgeObjectRelease(v53);
      *(_WORD *)(v49 + 12) = 2048;
      v97 = *(_QWORD *)&v1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98);
      *(_WORD *)(v49 + 22) = 2048;
      v65 = v48;
      v67 = *(_QWORD *)(v48 + 40);
      swift_release(v65);
      v97 = v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98);
      swift_release(v65);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "RDDebouncer.sampleFire: Sampled {label: %s, elapsed: %f, n: %ld}", (uint8_t *)v49, 0x20u);
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v49, -1, -1);

      v25 = v94;
      v3 = (uint64_t)v91;
    }
    else
    {

      swift_release_n(v44, 2);
      v65 = v44;
    }
    v68 = *(_QWORD *)(v65 + 16);
    v69 = *(_QWORD *)(v65 + 40);
    if (v68 >= v69)
    {
      v83 = v92;
      if (__OFSUB__(v69, 1))
      {
        __break(1u);
        return;
      }
      *(double *)(v65 + 32) = v1 / (double)v69 + *(double *)(v65 + 32) * (double)(v69 - 1) / (double)v69;
    }
    else
    {
      v70 = v65 + OBJC_IVAR____TtCC7remindd12RDDebouncing10LoadFactor_measurements;
      v71 = swift_beginAccess(v65 + OBJC_IVAR____TtCC7remindd12RDDebouncing10LoadFactor_measurements, &v97, 0, 0);
      v72 = v89;
      v73 = v90;
      v74 = v88;
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v90 + 16))(v89, v70, v88, v71);
      v75 = DoubleStacksQueue.isEmpty.getter(v74);
      v76 = (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v72, v74);
      if ((v75 & 1) != 0
        || (v77 = swift_beginAccess(v70, v99, 33, 0),
            DoubleStacksQueue.dequeue()(&v95, v74, v77),
            v76 = swift_endAccess(v99),
            (v96 & 1) != 0))
      {
        v78 = Logger.logObject.getter(v76);
        v79 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v78, v79))
        {
          v80 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v80 = 0;
          _os_log_impl((void *)&_mh_execute_header, v78, v79, "No measurements to dequeue from to get the oldest sample value when updating load factor", v80, 2u);
          swift_slowDealloc(v80, -1, -1);
        }
        swift_release(v65);

        v81 = *(void (**)(uint64_t, uint64_t))(v94 + 8);
        v82 = v92;
        v81(v3, v92);
        v81((uint64_t)v93, v82);
        return;
      }
      *(double *)(v65 + 32) = *(double *)(v65 + 32) + (v1 - v95) / (double)v68;
      v83 = v92;
      v25 = v94;
    }
    v95 = v1;
    v85 = swift_beginAccess(v65 + OBJC_IVAR____TtCC7remindd12RDDebouncing10LoadFactor_measurements, v99, 33, 0);
    DoubleStacksQueue.enqueue(_:)(&v95, v88, v85);
    swift_endAccess(v99);
    swift_release(v65);
    v86 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v86(v3, v83);
    v86((uint64_t)v93, v83);
    return;
  }
  v19 = v25;
  v1 = (double)v42 / 1000000000.0;
  if (v1 < v40)
  {
    v3 = v35;
    v25 = v94;
    if (qword_100836CF0 == -1)
      goto LABEL_12;
    goto LABEL_46;
  }
  v54 = v94;
  if (qword_100836CF0 != -1)
    swift_once(&qword_100836CF0, sub_1000E5528);
  v55 = type metadata accessor for Logger(0);
  sub_10001AAA8(v55, (uint64_t)qword_10083A380);
  v56 = v2;
  v57 = Logger.logObject.getter(v56);
  v58 = static os_log_type_t.info.getter(v57);
  if (os_log_type_enabled(v57, v58))
  {
    v59 = v19;
    v60 = swift_slowAlloc(32, -1);
    v61 = swift_slowAlloc(32, -1);
    v99[0] = v61;
    *(_DWORD *)v60 = 136315650;
    v62 = *(_QWORD *)&v56[qword_10083A528 + 8];
    if (v62)
    {
      v63 = *(_QWORD *)&v56[qword_10083A528];
      v64 = *(_QWORD *)&v56[qword_10083A528 + 8];
    }
    else
    {
      v63 = 7104878;
      v64 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain(v62);
    v97 = sub_10001A820(v63, v64, v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98);

    swift_bridgeObjectRelease(v64);
    *(_WORD *)(v60 + 12) = 2048;
    v97 = *(_QWORD *)&v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98);
    *(_WORD *)(v60 + 22) = 2048;
    v97 = *(_QWORD *)&v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98);
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "RDDebouncer.sampleFire: Sample exceeds threshold for starting a new window, resetting load measurements {label: %s, elapsed: %f, threshold: %f}", (uint8_t *)v60, 0x20u);
    swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v61, -1, -1);
    swift_slowDealloc(v60, -1, -1);

    v21 = v93;
    v54 = v94;
    v19 = v59;
  }
  else
  {

  }
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 40) = 0;
  swift_beginAccess(v19 + OBJC_IVAR____TtCC7remindd12RDDebouncing10LoadFactor_measurements, v99, 33, 0);
  DoubleStacksQueue.reset()();
  swift_endAccess(v99);
  swift_release(v19);
  v84 = *(void (**)(char *, uint64_t))(v54 + 8);
  v84(v91, v24);
  v84(v21, v24);
}

uint64_t sub_100392064(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t (*a6)(BOOL, uint64_t, uint64_t, uint64_t), uint64_t a7)
{
  uint64_t *v7;
  uint64_t *v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(BOOL, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  _BYTE v29[24];

  v27 = a6;
  v28 = a7;
  v10 = v7;
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *(void **)((char *)v10 + qword_10083A508);
  *v17 = v18;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v17);
  (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    a2 = v27(0, *(_QWORD *)(a2 + 16) + 1, 1, a2);
    *v10 = a2;
    goto LABEL_4;
  }
  swift_beginAccess((char *)v10 + qword_10083A540, v29, 33, 0);
  v20 = swift_bridgeObjectRetain(a1);
  a4(v20);
  result = swift_endAccess(v29);
  if (!a2)
    return result;
  a1 = swift_allocObject(a5, 32, 7);
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  v10 = (uint64_t *)((char *)v10 + qword_10083A548);
  swift_beginAccess(v10, v29, 33, 0);
  a2 = *v10;
  swift_retain(a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  *v10 = a2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_9;
LABEL_4:
  v24 = *(_QWORD *)(a2 + 16);
  v23 = *(_QWORD *)(a2 + 24);
  if (v24 >= v23 >> 1)
  {
    a2 = v27(v23 > 1, v24 + 1, 1, a2);
    *v10 = a2;
  }
  *(_QWORD *)(a2 + 16) = v24 + 1;
  v25 = a2 + 16 * v24;
  *(_QWORD *)(v25 + 32) = v28;
  *(_QWORD *)(v25 + 40) = a1;
  return swift_endAccess(v29);
}

double sub_100392258(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t Strong;
  double result;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[24];

  v8 = a1 + 16;
  swift_beginAccess(a1 + 16, v24, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v8, v9);
  if (Strong)
  {
    v12 = (char *)Strong;
    v13 = *(_QWORD *)(Strong + qword_10083A538);
    *(_QWORD *)&v12[qword_10083A538] = 0;
    v14 = swift_release(v13);
    a5(v14);
    if (qword_100836CF0 != -1)
      swift_once(&qword_100836CF0, sub_1000E5528);
    v15 = type metadata accessor for Logger(0);
    sub_10001AAA8(v15, (uint64_t)qword_10083A380);
    v16 = swift_bridgeObjectRetain_n(a3, 2);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v23 = v20;
      *(_DWORD *)v19 = 136315138;
      if (a3)
      {
        v21 = a3;
      }
      else
      {
        a2 = 7104878;
        v21 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain(a3);
      v22 = sub_10001A820(a2, v21, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease(v21);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "os_transaction RELEASE {name: com.apple.remindd.rddebouncer}, label: %s", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

      *(_QWORD *)&result = swift_bridgeObjectRelease_n(a3, 2).n128_u64[0];
    }
  }
  return result;
}

double sub_10039246C()
{
  char *v0;
  void **p_weak_ivar_lyt;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  char *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  double result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  int v35;
  ClassDescriptor **v36;
  ClassDescriptor **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  __n128 v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t *);
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t *);
  uint8_t *v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[16];
  uint64_t v71;
  _BYTE v72[7];
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76[3];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint8_t **)((char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)&v2[qword_10083A508];
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v8 = v7;
  v9 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_27:
    swift_once(&qword_100836CF0, sub_1000E5528);
    goto LABEL_4;
  }
  v9 = qword_10083A538;
  v3 = *(_QWORD *)&v2[qword_10083A538];
  p_weak_ivar_lyt = &RDAlarmEngine.weak_ivar_lyt;
  if (!v3)
    goto LABEL_8;
  v10 = qword_100836CF0;
  swift_retain();
  if (v10 != -1)
    goto LABEL_27;
LABEL_4:
  v11 = type metadata accessor for Logger(0);
  sub_10001AAA8(v11, (uint64_t)qword_10083A380);
  v12 = v2;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v68 = swift_slowAlloc(32, -1);
    v76[0] = v68;
    v67 = v15;
    *(_DWORD *)v15 = 136315138;
    v66 = v15 + 4;
    v16 = v12;
    v17 = objc_msgSend(v16, "description");
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v20 = v19;

    v74 = sub_10001A820(v18, v20, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);

    v21 = v20;
    p_weak_ivar_lyt = (void **)(&RDAlarmEngine + 56);
    swift_bridgeObjectRelease(v21);
    v22 = v14;
    v23 = v67;
    _os_log_impl((void *)&_mh_execute_header, v13, v22, "Cancelling pending work item {debouncer: %s}", v67, 0xCu);
    v24 = v68;
    swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

  }
  dispatch thunk of DispatchWorkItem.cancel()();
  swift_release(v3);
  v25 = *(_QWORD *)&v2[v9];
  *(_QWORD *)&v2[v9] = 0;
  swift_release(v25);
LABEL_8:
  v26 = (uint64_t *)&v2[qword_10083A540];
  *(_QWORD *)&result = swift_beginAccess(&v2[qword_10083A540], v76, 1, 0).n128_u64[0];
  v28 = *v26;
  if ((*v26 & 0xC000000000000001) != 0)
  {
    if (v28 < 0)
      v29 = *v26;
    else
      v29 = v28 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v26);
    v30 = __CocoaSet.count.getter(v29);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v28).n128_u64[0];
    if (!v30)
      return result;
  }
  else if (!*(_QWORD *)(v28 + 16))
  {
    return result;
  }
  if (p_weak_ivar_lyt[414] != (void *)-1)
    swift_once(&qword_100836CF0, sub_1000E5528);
  v31 = type metadata accessor for Logger(0);
  sub_10001AAA8(v31, (uint64_t)qword_10083A380);
  v32 = v2;
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.debug.getter();
  v35 = v34;
  v36 = &off_10083A000;
  v37 = &off_10083A000;
  if (os_log_type_enabled(v33, v34))
  {
    v38 = swift_slowAlloc(42, -1);
    LODWORD(v67) = v35;
    v39 = v38;
    v68 = swift_slowAlloc(64, -1);
    v74 = v68;
    *(_DWORD *)v39 = 134218754;
    v69 = *(_QWORD *)&v32[qword_10083A550];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70);
    *(_WORD *)(v39 + 12) = 2080;
    v40 = *v26;
    v41 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
    v42 = sub_1000E51DC(&qword_100847B30, (unint64_t *)&qword_100839DE0, NSNumber_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    swift_bridgeObjectRetain(v40);
    v44 = Set.description.getter(v43, v41, v42);
    v46 = v45;
    swift_bridgeObjectRelease(v40);
    v69 = sub_10001A820(v44, v46, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70);

    swift_bridgeObjectRelease(v46);
    *(_WORD *)(v39 + 22) = 2048;
    v47 = &v32[qword_10083A548];
    swift_beginAccess(&v32[qword_10083A548], &v69, 0, 0);
    v48 = *(_QWORD *)(*(_QWORD *)v47 + 16);

    v71 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v72);

    *(_WORD *)(v39 + 32) = 2080;
    v49 = v32;
    v50 = objc_msgSend(v49, "description");
    v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
    v53 = v52;

    v71 = sub_10001A820(v51, v53, &v74);
    v36 = &off_10083A000;
    v37 = &off_10083A000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v72);

    swift_bridgeObjectRelease(v53);
    _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v67, "Firing latest value after delay {coalescedUpdates: %ld, value: %s, completionBlocks: %ld, debouncer: %s}", (uint8_t *)v39, 0x2Au);
    v54 = v68;
    swift_arrayDestroy(v68, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v39, -1, -1);

  }
  else
  {

  }
  v55 = *v26;
  *v26 = (uint64_t)&_swiftEmptySetSingleton;
  v56 = (_QWORD *)((char *)&v37[169]->Flags + (_QWORD)v32);
  v57 = swift_beginAccess(v56, &v74, 1, 0);
  v58 = (_QWORD *)*v56;
  *v56 = _swiftEmptyArrayStorage;
  *(_QWORD *)((char *)&v36[170]->Flags + (_QWORD)v32) = 0;
  (*(void (**)(uint64_t, __n128))&v32[qword_10083A510])(v55, v57);
  v59 = v58[2];
  if (v59)
  {
    v61 = (void (*)(char *, uint64_t *))v58[4];
    v60 = v58[5];
    v73 = 1;
    v71 = v55;
    swift_retain();
    v61(&v73, &v71);
    swift_release(v60);
    v62 = v59 - 1;
    if (v62)
    {
      v63 = v58 + 7;
      do
      {
        v65 = (void (*)(char *, uint64_t *))*(v63 - 1);
        v64 = *v63;
        v73 = 0;
        v71 = v55;
        swift_retain();
        v65(&v73, &v71);
        swift_release(v64);
        v63 += 2;
        --v62;
      }
      while (v62);
    }
  }
  swift_bridgeObjectRelease(v58);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v55).n128_u64[0];
  return result;
}

double sub_100392B44()
{
  char *v0;
  void **p_weak_ivar_lyt;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  char *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  double result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  int v35;
  ClassDescriptor **v36;
  ClassDescriptor **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  __n128 v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t *);
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t *);
  uint8_t *v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE v71[16];
  uint64_t v72;
  _BYTE v73[7];
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77[3];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint8_t **)((char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)&v2[qword_10083A508];
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v8 = v7;
  v9 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_27:
    swift_once(&qword_100836CF0, sub_1000E5528);
    goto LABEL_4;
  }
  v9 = qword_10083A538;
  v3 = *(_QWORD *)&v2[qword_10083A538];
  p_weak_ivar_lyt = &RDAlarmEngine.weak_ivar_lyt;
  if (!v3)
    goto LABEL_8;
  v10 = qword_100836CF0;
  swift_retain();
  if (v10 != -1)
    goto LABEL_27;
LABEL_4:
  v11 = type metadata accessor for Logger(0);
  sub_10001AAA8(v11, (uint64_t)qword_10083A380);
  v12 = v2;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v69 = swift_slowAlloc(32, -1);
    v77[0] = v69;
    v68 = v15;
    *(_DWORD *)v15 = 136315138;
    v67 = v15 + 4;
    v16 = v12;
    v17 = objc_msgSend(v16, "description");
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v20 = v19;

    v75 = sub_10001A820(v18, v20, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76);

    v21 = v20;
    p_weak_ivar_lyt = (void **)(&RDAlarmEngine + 56);
    swift_bridgeObjectRelease(v21);
    v22 = v14;
    v23 = v68;
    _os_log_impl((void *)&_mh_execute_header, v13, v22, "Cancelling pending work item {debouncer: %s}", v68, 0xCu);
    v24 = v69;
    swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

  }
  dispatch thunk of DispatchWorkItem.cancel()();
  swift_release(v3);
  v25 = *(_QWORD *)&v2[v9];
  *(_QWORD *)&v2[v9] = 0;
  swift_release(v25);
LABEL_8:
  v26 = (uint64_t *)&v2[qword_10083A540];
  *(_QWORD *)&result = swift_beginAccess(&v2[qword_10083A540], v77, 1, 0).n128_u64[0];
  v28 = *v26;
  if ((*v26 & 0xC000000000000001) != 0)
  {
    if (v28 < 0)
      v29 = *v26;
    else
      v29 = v28 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v26);
    v30 = __CocoaSet.count.getter(v29);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v28).n128_u64[0];
    if (!v30)
      return result;
  }
  else if (!*(_QWORD *)(v28 + 16))
  {
    return result;
  }
  if (p_weak_ivar_lyt[414] != (void *)-1)
    swift_once(&qword_100836CF0, sub_1000E5528);
  v31 = type metadata accessor for Logger(0);
  sub_10001AAA8(v31, (uint64_t)qword_10083A380);
  v32 = v2;
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.debug.getter();
  v35 = v34;
  v36 = &off_10083A000;
  v37 = &off_10083A000;
  if (os_log_type_enabled(v33, v34))
  {
    v38 = swift_slowAlloc(42, -1);
    LODWORD(v68) = v35;
    v39 = v38;
    v69 = swift_slowAlloc(64, -1);
    v75 = v69;
    *(_DWORD *)v39 = 134218754;
    v70 = *(_QWORD *)&v32[qword_10083A550];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71);
    *(_WORD *)(v39 + 12) = 2080;
    v40 = *v26;
    v41 = type metadata accessor for RDDebounceableCKDatabaseNotification();
    v42 = sub_10009FC50(&qword_100844380, (uint64_t (*)(uint64_t))type metadata accessor for RDDebounceableCKDatabaseNotification, (uint64_t)&protocol conformance descriptor for NSObject);
    swift_bridgeObjectRetain(v40);
    v44 = Set.description.getter(v43, v41, v42);
    v46 = v45;
    swift_bridgeObjectRelease(v40);
    v70 = sub_10001A820(v44, v46, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71);

    swift_bridgeObjectRelease(v46);
    *(_WORD *)(v39 + 22) = 2048;
    v47 = &v32[qword_10083A548];
    swift_beginAccess(&v32[qword_10083A548], &v70, 0, 0);
    v48 = *(_QWORD *)(*(_QWORD *)v47 + 16);

    v72 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73);

    *(_WORD *)(v39 + 32) = 2080;
    v49 = v32;
    v50 = objc_msgSend(v49, "description");
    v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
    v53 = v52;

    v72 = sub_10001A820(v51, v53, &v75);
    v36 = &off_10083A000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73);

    v54 = v53;
    v37 = &off_10083A000;
    swift_bridgeObjectRelease(v54);
    _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v68, "Firing latest value after delay {coalescedUpdates: %ld, value: %s, completionBlocks: %ld, debouncer: %s}", (uint8_t *)v39, 0x2Au);
    v55 = v69;
    swift_arrayDestroy(v69, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v39, -1, -1);

  }
  else
  {

  }
  v56 = *v26;
  *v26 = (uint64_t)&_swiftEmptySetSingleton;
  v57 = (_QWORD *)((char *)&v37[169]->Flags + (_QWORD)v32);
  v58 = swift_beginAccess(v57, &v75, 1, 0);
  v59 = (_QWORD *)*v57;
  *v57 = _swiftEmptyArrayStorage;
  *(_QWORD *)((char *)&v36[170]->Flags + (_QWORD)v32) = 0;
  (*(void (**)(uint64_t, __n128))&v32[qword_10083A510])(v56, v58);
  v60 = v59[2];
  if (v60)
  {
    v62 = (void (*)(char *, uint64_t *))v59[4];
    v61 = v59[5];
    v74 = 1;
    v72 = v56;
    swift_retain();
    v62(&v74, &v72);
    swift_release(v61);
    v63 = v60 - 1;
    if (v63)
    {
      v64 = v59 + 7;
      do
      {
        v66 = (void (*)(char *, uint64_t *))*(v64 - 1);
        v65 = *v64;
        v74 = 0;
        v72 = v56;
        swift_retain();
        v66(&v74, &v72);
        swift_release(v65);
        v64 += 2;
        --v63;
      }
      while (v63);
    }
  }
  swift_bridgeObjectRelease(v59);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v56).n128_u64[0];
  return result;
}

double sub_100393200()
{
  char *v0;
  void **p_weak_ivar_lyt;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  char *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  double result;
  uint64_t v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  ClassDescriptor **v33;
  ClassDescriptor **v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  __n128 v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t *);
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t *);
  uint8_t *v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE v66[16];
  uint64_t v67;
  _BYTE v68[7];
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72[3];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (uint8_t **)((char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)&v2[qword_10083A508];
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  v9 = v8;
  v10 = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_21:
    swift_once(&qword_100836CF0, sub_1000E5528);
    goto LABEL_4;
  }
  v10 = qword_10083A538;
  v3 = *(_QWORD *)&v2[qword_10083A538];
  p_weak_ivar_lyt = &RDAlarmEngine.weak_ivar_lyt;
  if (!v3)
    goto LABEL_8;
  v11 = qword_100836CF0;
  swift_retain();
  if (v11 != -1)
    goto LABEL_21;
LABEL_4:
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_10083A380);
  v13 = v2;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v64 = swift_slowAlloc(32, -1);
    v72[0] = v64;
    v63 = v16;
    *(_DWORD *)v16 = 136315138;
    v62 = v16 + 4;
    v17 = v13;
    v18 = objc_msgSend(v17, "description");
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    v70 = sub_10001A820(v19, v21, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);

    p_weak_ivar_lyt = (void **)(&RDAlarmEngine + 56);
    swift_bridgeObjectRelease();
    v22 = v15;
    v23 = v63;
    _os_log_impl((void *)&_mh_execute_header, v14, v22, "Cancelling pending work item {debouncer: %s}", v63, 0xCu);
    v24 = v64;
    swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

  }
  dispatch thunk of DispatchWorkItem.cancel()();
  swift_release(v3);
  v25 = *(_QWORD *)&v2[v10];
  *(_QWORD *)&v2[v10] = 0;
  swift_release(v25);
LABEL_8:
  v26 = &v2[qword_10083A540];
  *(_QWORD *)&result = swift_beginAccess(&v2[qword_10083A540], v72, 1, 0).n128_u64[0];
  if (*(_QWORD *)(*(_QWORD *)v26 + 16))
  {
    if (p_weak_ivar_lyt[414] != (void *)-1)
      swift_once(&qword_100836CF0, sub_1000E5528);
    v28 = type metadata accessor for Logger(0);
    sub_10001AAA8(v28, (uint64_t)qword_10083A380);
    v29 = v2;
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.debug.getter();
    v32 = v31;
    v33 = &off_10083A000;
    v34 = &off_10083A000;
    if (os_log_type_enabled(v30, v31))
    {
      v35 = swift_slowAlloc(42, -1);
      LODWORD(v63) = v32;
      v36 = v35;
      v64 = swift_slowAlloc(64, -1);
      v70 = v64;
      *(_DWORD *)v36 = 134218754;
      v65 = *(_QWORD *)&v29[qword_10083A550];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66);
      *(_WORD *)(v36 + 12) = 2080;
      v37 = *(_QWORD *)v26;
      v38 = sub_100120250();
      swift_bridgeObjectRetain(v37);
      v40 = Set.description.getter(v39, &type metadata for RDStoreControllerNotificationCenter.ChangedEntityFireValue, v38);
      v42 = v41;
      swift_bridgeObjectRelease();
      v65 = sub_10001A820(v40, v42, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66);

      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 22) = 2048;
      v43 = &v29[qword_10083A548];
      swift_beginAccess(&v29[qword_10083A548], &v65, 0, 0);
      v44 = *(_QWORD *)(*(_QWORD *)v43 + 16);

      v67 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68);

      *(_WORD *)(v36 + 32) = 2080;
      v45 = v29;
      v46 = objc_msgSend(v45, "description");
      v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      v49 = v48;

      v67 = sub_10001A820(v47, v49, &v70);
      v33 = &off_10083A000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68);

      v34 = &off_10083A000;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v63, "Firing latest value after delay {coalescedUpdates: %ld, value: %s, completionBlocks: %ld, debouncer: %s}", (uint8_t *)v36, 0x2Au);
      v50 = v64;
      swift_arrayDestroy(v64, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v36, -1, -1);

    }
    else
    {

    }
    v51 = *(_QWORD *)v26;
    *(_QWORD *)v26 = &_swiftEmptySetSingleton;
    v52 = (_QWORD *)((char *)&v34[169]->Flags + (_QWORD)v29);
    v53 = swift_beginAccess(v52, &v70, 1, 0);
    v54 = (_QWORD *)*v52;
    *v52 = _swiftEmptyArrayStorage;
    *(_QWORD *)((char *)&v33[170]->Flags + (_QWORD)v29) = 0;
    (*(void (**)(uint64_t, __n128))&v29[qword_10083A510])(v51, v53);
    v55 = v54[2];
    if (v55)
    {
      v57 = (void (*)(char *, uint64_t *))v54[4];
      v56 = v54[5];
      v69 = 1;
      v67 = v51;
      swift_retain();
      v57(&v69, &v67);
      swift_release(v56);
      v58 = v55 - 1;
      if (v58)
      {
        v59 = v54 + 7;
        do
        {
          v61 = (void (*)(char *, uint64_t *))*(v59 - 1);
          v60 = *v59;
          v69 = 0;
          v67 = v51;
          swift_retain();
          v61(&v69, &v67);
          swift_release(v60);
          v59 += 2;
          --v58;
        }
        while (v58);
      }
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  }
  return result;
}

uint64_t sub_100393864()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008477A0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008477A0);
  if (qword_1008376A0 != -1)
    swift_once(&qword_1008376A0, sub_1004A19DC);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_1008721C0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

Swift::Int sub_1003938F4()
{
  uint64_t v0;
  Swift::UInt v1;
  void *v2;
  id v3;
  _QWORD v5[9];

  v2 = *(void **)v0;
  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)(v5, 0);
  v3 = v2;
  NSObject.hash(into:)(v5);

  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100393954(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt v3;
  id v4;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(id *)v1;
  NSObject.hash(into:)(a1);

  Hasher._combine(_:)(v3);
}

Swift::Int sub_10039399C(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt v2;
  void *v3;
  id v4;
  _QWORD v6[9];

  v3 = *(void **)v1;
  v2 = *(_QWORD *)(v1 + 8);
  Hasher.init(_seed:)(v6, a1);
  v4 = v3;
  NSObject.hash(into:)(v6);

  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1003939F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(_QWORD *)(a2 + 8);
  sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
  return static NSObject.== infix(_:_:)(v2) & (v3 == v4);
}

_QWORD *sub_100393A5C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _DWORD *v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;

  v5 = v4;
  v10 = (_DWORD *)swift_slowAlloc(4, -1);
  v5[6] = _swiftEmptyArrayStorage;
  v5[7] = 0;
  v5[4] = a2;
  v5[5] = v10;
  v5[2] = a3;
  v5[3] = a1;
  *v10 = 0;
  swift_bridgeObjectRetain(a2);
  v11 = a3;
  sub_100399A04(a4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000E684C);
  if (qword_100836F10 != -1)
    swift_once(&qword_100836F10, sub_1001BA718);
  v12 = (void *)qword_100871CD0;
  v13 = swift_allocObject(&unk_1007F11B0, 24, 7);
  swift_weakInit(v13 + 16, v5);
  v14 = objc_allocWithZone((Class)sub_10001A630(&qword_1008479D8));
  v15 = v12;
  v16 = sub_10039A84C(a1, a2, a4, v15, (uint64_t)sub_1003999FC, v13);

  swift_release(v13);
  sub_100399A04(a4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000E6860);
  v17 = (void *)v5[7];
  v5[7] = v16;

  v18 = (void *)objc_opt_self(NSNotificationCenter);
  v19 = objc_msgSend(v18, "defaultCenter");
  swift_retain(v5);
  v20 = objc_msgSend(v11, "persistentStoreCoordinator");
  objc_msgSend(v19, "addObserver:selector:name:object:", v5, "handleNotification:", NSManagedObjectContextDidSaveObjectIDsNotification, v20);

  swift_release(v5);
  v21 = objc_msgSend(v18, "defaultCenter");
  v22 = v11;
  swift_retain(v5);
  objc_msgSend(v21, "addObserver:selector:name:object:", v5, "handleNotification:", CFSTR("RDStoreControllerDidRemoveAccountStoresNotification"), v22);
  sub_100399A04(a4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000E6860);

  swift_release(v5);
  return v5;
}

void sub_100393CB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _BYTE v11[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v11, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    sub_100393DC8(a1);
    swift_release(v5);
  }
  else
  {
    if (qword_100837338 != -1)
      swift_once(&qword_100837338, sub_100393864);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10001AAA8(v6, (uint64_t)qword_1008477A0);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Received store did change notification but observer is deallocated", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

  }
}

void sub_100393DC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  char **v31;
  uint64_t v32;
  char *v33;
  char *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int64_t v40;
  int64_t v41;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  int64_t v46;
  uint64_t *v47;
  uint64_t v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t i;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t j;
  void *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  int64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  int64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int64_t v108;
  unint64_t v109;
  unint64_t v110;
  unsigned int v111;
  int64_t v112;
  unint64_t v113;
  int64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  int64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int64_t v141;
  unint64_t v142;
  unint64_t v143;
  id v144;
  int64_t v145;
  unint64_t v146;
  int64_t v147;
  uint64_t v148;
  uint64_t v149;
  int64_t v150;
  unint64_t v151;
  unint64_t v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v157;
  int64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int64_t v165;
  uint64_t v166;
  id v167;
  int64_t v168;
  unint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  id v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  char *v191;
  char *v192;
  _QWORD v193[2];
  void *v194;
  char v195[8];
  id v196[5];
  _QWORD *v197;
  unint64_t v198;
  uint64_t v199;
  int64_t v200;
  unint64_t v201;

  v166 = a1;
  v2 = 0;
  v3 = sub_10001A630((uint64_t *)&unk_1008479E0);
  __chkstk_darwin(v3);
  v188 = (unint64_t)&v164 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = sub_10001A630((uint64_t *)&unk_1008437B0);
  v172 = *(_QWORD *)(v181 - 8);
  v5 = __chkstk_darwin(v181);
  v174 = (uint64_t)&v164 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v175 = (uint64_t)&v164 - v8;
  v9 = __chkstk_darwin(v7);
  v187 = (uint64_t)&v164 - v10;
  v11 = __chkstk_darwin(v9);
  v176 = (uint64_t)&v164 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (uint64_t)&v164 - v14;
  v16 = __chkstk_darwin(v13);
  v185 = (uint64_t)&v164 - v17;
  __chkstk_darwin(v16);
  v179 = (unint64_t)&v164 - v18;
  v189 = type metadata accessor for RDStoreControllerNotificationCenter.Observer(0);
  v19 = *(_QWORD *)(v189 - 8);
  v20 = __chkstk_darwin(v189);
  v186 = (unint64_t)&v164 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v164 - v23;
  __chkstk_darwin(v22);
  v192 = (char *)&v164 - v25;
  v26 = *(_QWORD *)(v1 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)v26);
  swift_beginAccess(v1 + 48, v195, 0, 0);
  v27 = *(_QWORD *)(v1 + 48);
  swift_bridgeObjectRetain(v27);
  os_unfair_lock_unlock((os_unfair_lock_t)v26);
  v28 = *(_QWORD *)(v27 + 16);
  v170 = v15;
  v171 = v24;
  v184 = v28;
  if (!v28)
    goto LABEL_215;
  v183 = (id)objc_opt_self(RDStoreController);
  v182 = v27 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  v180 = *(_QWORD *)(v19 + 72);
  v178 = v27;
  swift_bridgeObjectRetain(v27);
  v29 = 0;
  v30 = _swiftEmptyArrayStorage;
  v31 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
  v32 = 0;
  do
  {
    v191 = v29;
    v34 = v192;
    sub_1000151E8(v182 + v180 * (_QWORD)v29, (uint64_t)v192, type metadata accessor for RDStoreControllerNotificationCenter.Observer);
    v26 = *(_QWORD *)&v34[*(int *)(v189 + 20)];
    v35 = objc_msgSend(v183, "managedObjectModel");
    if (!v26)
    {
      v60 = objc_msgSend((id)objc_opt_self(REMCDObject), "subclassesOfREMCDObjectRepresentingRootCoreDataEntities");
      v61 = sub_10001A630(&qword_100847A00);
      v62 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v60, v61);

      v63 = *(_QWORD *)(v62 + 16);
      if (v63)
      {
        v53 = v32;
        v197 = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(v63);
        v64 = 0;
        do
        {
          v65 = v64 + 1;
          v66 = objc_msgSend((id)swift_getObjCClassFromMetadata(*(_QWORD *)(v62 + 8 * v64 + 32)), v31[214]);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v66);
          v67 = v197[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v67);
          v68 = v67;
          v31 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
          v69 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v68, v66);
          specialized ContiguousArray._endMutation()(v69);
          v64 = v65;
        }
        while (v63 != v65);
        v26 = (uint64_t)v197;
        swift_bridgeObjectRelease(v62);
        v54 = (unint64_t)v26 >> 62;
        if (!((unint64_t)v26 >> 62))
          goto LABEL_36;
      }
      else
      {
        v53 = v32;
        swift_bridgeObjectRelease(v62);
        v26 = (uint64_t)_swiftEmptyArrayStorage;
        v54 = (unint64_t)_swiftEmptyArrayStorage >> 62;
        if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
          goto LABEL_36;
      }
      goto LABEL_53;
    }
    v190 = v30;
    v196[0] = _swiftEmptyArrayStorage;
    v36 = v26 + 56;
    v37 = 1 << *(_BYTE *)(v26 + 32);
    if (v37 < 64)
      v38 = ~(-1 << v37);
    else
      v38 = -1;
    v39 = v38 & *(_QWORD *)(v26 + 56);
    v40 = (unint64_t)(v37 + 63) >> 6;
    swift_bridgeObjectRetain(v26);
    v41 = 0;
    while (v39)
    {
      v42 = __clz(__rbit64(v39));
      v39 &= v39 - 1;
      v43 = v42 | (v41 << 6);
LABEL_27:
      v47 = (uint64_t *)(*(_QWORD *)(v26 + 48) + 16 * v43);
      v27 = v47[1];
      v197 = (_QWORD *)*v47;
      v198 = v27;
      swift_bridgeObjectRetain(v27);
      sub_100396D8C(v35, (uint64_t *)&v197, &v194);
      swift_bridgeObjectRelease(v27);
      v49 = v194;
      if (v194)
      {
        v27 = (unint64_t)v196;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v48);
        v51 = *(_QWORD *)(((unint64_t)v196[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
        v50 = *(_QWORD *)(((unint64_t)v196[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v51 >= v50 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1);
        v52 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v51, v49);
        specialized Array._endMutation()(v52);
      }
    }
    v44 = __OFADD__(v41++, 1);
    if (v44)
    {
LABEL_219:
      __break(1u);
LABEL_220:
      __break(1u);
LABEL_221:
      __break(1u);
LABEL_222:
      __break(1u);
LABEL_223:
      __break(1u);
LABEL_224:
      __break(1u);
LABEL_225:
      __break(1u);
LABEL_226:
      __break(1u);
LABEL_227:
      __break(1u);
LABEL_228:
      __break(1u);
LABEL_229:
      __break(1u);
      goto LABEL_230;
    }
    if (v41 >= v40)
      goto LABEL_35;
    v45 = *(_QWORD *)(v36 + 8 * v41);
    if (v45)
      goto LABEL_26;
    v46 = v41 + 1;
    if (v41 + 1 >= v40)
      goto LABEL_35;
    v45 = *(_QWORD *)(v36 + 8 * v46);
    if (v45)
      goto LABEL_25;
    v46 = v41 + 2;
    if (v41 + 2 >= v40)
      goto LABEL_35;
    v45 = *(_QWORD *)(v36 + 8 * v46);
    if (v45)
      goto LABEL_25;
    v46 = v41 + 3;
    if (v41 + 3 >= v40)
      goto LABEL_35;
    v45 = *(_QWORD *)(v36 + 8 * v46);
    if (v45)
      goto LABEL_25;
    v46 = v41 + 4;
    if (v41 + 4 >= v40)
      goto LABEL_35;
    v45 = *(_QWORD *)(v36 + 8 * v46);
    if (v45)
      goto LABEL_25;
    v46 = v41 + 5;
    if (v41 + 5 >= v40)
      goto LABEL_35;
    v45 = *(_QWORD *)(v36 + 8 * v46);
    if (v45)
    {
LABEL_25:
      v41 = v46;
LABEL_26:
      v39 = (v45 - 1) & v45;
      v43 = __clz(__rbit64(v45)) + (v41 << 6);
      goto LABEL_27;
    }
    while (1)
    {
      v41 = v46 + 1;
      if (__OFADD__(v46, 1))
        goto LABEL_232;
      if (v41 >= v40)
        break;
      v45 = *(_QWORD *)(v36 + 8 * v41);
      ++v46;
      if (v45)
        goto LABEL_26;
    }
LABEL_35:
    v53 = v32;
    swift_release(v26);
    v26 = (uint64_t)v196[0];
    v24 = v171;
    v30 = v190;
    v54 = (unint64_t)v196[0] >> 62;
    if (!((unint64_t)v196[0] >> 62))
    {
LABEL_36:
      v27 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_37;
    }
LABEL_53:
    if (v26 < 0)
      v70 = v26;
    else
      v70 = v26 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v26);
    v27 = _CocoaArrayWrapper.endIndex.getter(v70);
    swift_bridgeObjectRelease(v26);
LABEL_37:
    v55 = sub_1000151B0(0, (unint64_t *)&unk_1008479F0, NSEntityDescription_ptr);
    v56 = sub_1000E51DC(&qword_10083B678, (unint64_t *)&unk_1008479F0, NSEntityDescription_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    v197 = (_QWORD *)Set.init(minimumCapacity:)(v27, v55, v56);
    if (v54)
    {
      if (v26 < 0)
        v27 = v26;
      else
        v27 = v26 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v26);
      v57 = _CocoaArrayWrapper.endIndex.getter(v27);
      swift_bridgeObjectRelease(v26);
      v32 = v53;
      if (v57)
        goto LABEL_44;
LABEL_48:

      swift_bridgeObjectRelease(v26);
      goto LABEL_60;
    }
    v57 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
    v32 = v53;
    if (!v57)
      goto LABEL_48;
LABEL_44:
    if (v57 < 1)
      goto LABEL_229;
    if ((v26 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v57; ++i)
      {
        v59 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v26);
        sub_1002DCCE4((Swift::Int *)v196, v59);

      }
      goto LABEL_48;
    }
    for (j = 0; j != v57; ++j)
    {
      v72 = *(void **)(v26 + 8 * j + 32);
      sub_1002DCCE4((Swift::Int *)v196, v72);

    }
    swift_bridgeObjectRelease(v26);
    v32 = v53;
LABEL_60:
    v73 = v197;
    v74 = v181;
    v27 = *(int *)(v181 + 48);
    v75 = (uint64_t)v192;
    v76 = v188;
    sub_1000151E8((uint64_t)v192, v188, type metadata accessor for RDStoreControllerNotificationCenter.Observer);
    *(_QWORD *)(v76 + v27) = v73;
    v26 = v172;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v172 + 56))(v76, 0, 1, v74);
    sub_10039999C(v75);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v76, 1, v74) == 1)
    {
      sub_10000882C(v76, (uint64_t *)&unk_1008479E0);
      v33 = v191;
      v31 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
    }
    else
    {
      v77 = v179;
      sub_1000A5CA8(v76, v179, (uint64_t *)&unk_1008437B0);
      sub_1000A5CA8(v77, v185, (uint64_t *)&unk_1008437B0);
      v31 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
      if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0)
        v30 = (_QWORD *)sub_1002CA9C8(0, v30[2] + 1, 1, (unint64_t)v30);
      v33 = v191;
      v27 = v30[2];
      v78 = v30[3];
      v26 = v27 + 1;
      if (v27 >= v78 >> 1)
        v30 = (_QWORD *)sub_1002CA9C8(v78 > 1, v27 + 1, 1, (unint64_t)v30);
      v30[2] = v26;
      sub_1000A5CA8(v185, (uint64_t)v30+ ((*(unsigned __int8 *)(v172 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v172 + 80))+ *(_QWORD *)(v172 + 72) * v27, (uint64_t *)&unk_1008437B0);
    }
    v29 = v33 + 1;
  }
  while (v29 != (char *)v184);
  swift_bridgeObjectRelease_n(v178, 2);
  v15 = v170;
  if (!v30[2])
    goto LABEL_216;
LABEL_69:
  v79 = *(_QWORD *)(v166 + 56);
  v164 = v166 + 56;
  v80 = 1 << *(_BYTE *)(v166 + 32);
  if (v80 < 64)
    v81 = ~(-1 << v80);
  else
    v81 = -1;
  v169 = v81 & v79;
  v165 = (unint64_t)(v80 + 63) >> 6;
  swift_bridgeObjectRetain(v166);
  v82 = 0;
  v191 = (char *)&type metadata for Swift.AnyObject + 8;
  while (2)
  {
    if (v169)
    {
      v85 = (v169 - 1) & v169;
      v86 = __clz(__rbit64(v169)) | (v82 << 6);
    }
    else
    {
      v44 = __OFADD__(v82++, 1);
      if (v44)
        goto LABEL_235;
      if (v82 >= v165)
        goto LABEL_217;
      v87 = *(_QWORD *)(v164 + 8 * v82);
      if (!v87)
      {
        v88 = v82 + 1;
        if (v82 + 1 >= v165)
          goto LABEL_217;
        v87 = *(_QWORD *)(v164 + 8 * v88);
        if (!v87)
        {
          v88 = v82 + 2;
          if (v82 + 2 >= v165)
            goto LABEL_217;
          v87 = *(_QWORD *)(v164 + 8 * v88);
          if (!v87)
          {
            v88 = v82 + 3;
            if (v82 + 3 >= v165)
              goto LABEL_217;
            v87 = *(_QWORD *)(v164 + 8 * v88);
            if (!v87)
            {
              while (1)
              {
                v82 = v88 + 1;
                if (__OFADD__(v88, 1))
                  goto LABEL_236;
                if (v82 >= v165)
                  break;
                v87 = *(_QWORD *)(v164 + 8 * v82);
                ++v88;
                if (v87)
                  goto LABEL_89;
              }
LABEL_217:
              swift_bridgeObjectRelease(v30);
              swift_release(v166);
              return;
            }
          }
        }
        v82 = v88;
      }
LABEL_89:
      v85 = (v87 - 1) & v87;
      v86 = __clz(__rbit64(v87)) + (v82 << 6);
    }
    v169 = v85;
    v168 = v82;
    v89 = *(_QWORD *)(v166 + 48) + 16 * v86;
    v90 = *(void **)v89;
    v183 = (id)v30[2];
    v167 = v90;
    if (!v183)
    {
      v153 = v90;
      v15 = 0;
      v119 = 0;
LABEL_195:
      v154 = v32;
      v26 = v119 - v15;
      v155 = v15 - v119;
      v27 = v15;
      if (__OFADD__(v119, v15 - v119))
        goto LABEL_231;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v30);
      if (isUniquelyReferenced_nonNull_native && v15 <= v30[3] >> 1)
      {
        v157 = v15;
      }
      else
      {
        v157 = v15;
        if (v119 <= v15)
          v158 = v15;
        else
          v158 = v119;
        v30 = (_QWORD *)sub_1002CA9C8(isUniquelyReferenced_nonNull_native, v158, 1, (unint64_t)v30);
      }
      v159 = (char *)v30
           + ((*(unsigned __int8 *)(v172 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v172 + 80));
      v160 = *(_QWORD *)(v172 + 72);
      v161 = v157;
      v162 = v160 * v157;
      v27 = (unint64_t)&v159[v162];
      swift_arrayDestroy(&v159[v162], v26, v181);
      if (v119 != v161)
      {
        v163 = v30[2] - v119;
        if (v163 < 0)
          goto LABEL_237;
        if (v162 < v160 * v119 || v27 >= (unint64_t)&v159[v160 * v119 + v163 * v160])
        {
          swift_arrayInitWithTakeFrontToBack(&v159[v162]);
        }
        else if (v162 != v160 * v119)
        {
          swift_arrayInitWithTakeBackToFront(&v159[v162]);
        }
        v83 = v30[2];
        v44 = __OFADD__(v83, v155);
        v84 = v83 + v155;
        if (v44)
          goto LABEL_234;
        v30[2] = v84;
      }

      v32 = v154;
      v15 = v170;
      v82 = v168;
      v24 = v171;
      continue;
    }
    break;
  }
  v173 = *(_QWORD *)(v89 + 8);
  v91 = v172;
  v180 = (*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80);
  v27 = (unint64_t)v30 + v180;
  v192 = v90;
  swift_bridgeObjectRetain(v30);
  v92 = 0;
  v93 = *(_QWORD *)(v91 + 72);
  v190 = v30;
  v182 = v93;
  v179 = v27;
LABEL_92:
  v188 = v92;
  v189 = v32;
  sub_100008868(v27 + v93 * v92, v15, (uint64_t *)&unk_1008437B0);
  v94 = *(int *)(v181 + 48);
  v95 = v176;
  sub_1000151E8(v15, v176, type metadata accessor for RDStoreControllerNotificationCenter.Observer);
  v2 = *(_QWORD *)(v15 + v94);
  sub_100399958(v95, (uint64_t)v24);
  v185 = v2;
  if ((v2 & 0xC000000000000001) != 0)
  {
    if (v2 < 0)
      v96 = v2;
    else
      v96 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v2, 2);
    v97 = __CocoaSet.makeIterator()(v96);
    v2 = (uint64_t)NSEntityDescription_ptr;
    v98 = sub_1000151B0(0, (unint64_t *)&unk_1008479F0, NSEntityDescription_ptr);
    v99 = sub_1000E51DC(&qword_10083B678, (unint64_t *)&unk_1008479F0, NSEntityDescription_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    v100 = Set.Iterator.init(_cocoa:)(v196, v97, v98, v99);
    v26 = (uint64_t)v196[0];
    v101 = v196[1];
    v103 = (uint64_t)v196[2];
    v102 = (int64_t)v196[3];
    v104 = (unint64_t)v196[4];
  }
  else
  {
    v105 = -1 << *(_BYTE *)(v2 + 32);
    v101 = (_QWORD *)(v2 + 56);
    v103 = ~v105;
    v106 = -v105;
    if (v106 < 64)
      v107 = ~(-1 << v106);
    else
      v107 = -1;
    v104 = v107 & *(_QWORD *)(v2 + 56);
    v100 = (_QWORD *)swift_bridgeObjectRetain_n(v2, 2);
    v102 = 0;
    v26 = v2;
  }
  v27 = v26 & 0x7FFFFFFFFFFFFFFFLL;
  v184 = v103;
  v108 = (unint64_t)(v103 + 64) >> 6;
  do
  {
    v112 = v102;
    if (v26 < 0)
    {
      v115 = __CocoaSet.Iterator.next()(v100);
      if (!v115)
        goto LABEL_129;
      v116 = v115;
      v193[0] = v115;
      v117 = sub_1000151B0(0, (unint64_t *)&unk_1008479F0, NSEntityDescription_ptr);
      swift_unknownObjectRetain(v116);
      swift_dynamicCast(&v194, v193, (char *)&type metadata for Swift.AnyObject + 8, v117, 7);
      v2 = (uint64_t)v194;
      swift_unknownObjectRelease(v116);
      if (!v2)
        goto LABEL_129;
    }
    else
    {
      if (v104)
      {
        v109 = __clz(__rbit64(v104));
        v104 &= v104 - 1;
        v110 = v109 | (v102 << 6);
      }
      else
      {
        ++v102;
        if (__OFADD__(v112, 1))
          goto LABEL_223;
        if (v102 >= v108)
        {
LABEL_129:
          v32 = v189;
LABEL_130:
          sub_1000C6560(v26);
          swift_bridgeObjectRelease(v185);
          v24 = v171;
          sub_10039999C((uint64_t)v171);
          v15 = v170;
          v26 = (uint64_t)&unk_1008437B0;
          sub_10000882C(v170, (uint64_t *)&unk_1008437B0);
          v92 = v188 + 1;
          v30 = v190;
          v93 = v182;
          v27 = v179;
          if ((id)(v188 + 1) != v183)
            goto LABEL_92;
          swift_bridgeObjectRelease(v190);
          v119 = v30[2];
          v15 = (uint64_t)v183;
          if (v119 >= (uint64_t)v183)
            goto LABEL_136;
LABEL_214:
          __break(1u);
LABEL_215:
          swift_bridgeObjectRelease(v27);
          v30 = _swiftEmptyArrayStorage;
          v32 = v2;
          if (!_swiftEmptyArrayStorage[2])
          {
LABEL_216:
            swift_bridgeObjectRelease(v30);
            return;
          }
          goto LABEL_69;
        }
        v113 = v101[v102];
        if (!v113)
        {
          v114 = v112 + 2;
          if (v112 + 2 >= v108)
            goto LABEL_129;
          v113 = v101[v114];
          if (v113)
            goto LABEL_118;
          v114 = v112 + 3;
          if (v112 + 3 >= v108)
            goto LABEL_129;
          v113 = v101[v114];
          if (v113)
            goto LABEL_118;
          v114 = v112 + 4;
          if (v112 + 4 >= v108)
            goto LABEL_129;
          v113 = v101[v114];
          if (v113)
            goto LABEL_118;
          v114 = v112 + 5;
          if (v112 + 5 >= v108)
            goto LABEL_129;
          v113 = v101[v114];
          if (v113)
          {
LABEL_118:
            v102 = v114;
          }
          else
          {
            v102 = v112 + 6;
            if (v112 + 6 >= v108)
              goto LABEL_129;
            v113 = v101[v102];
            if (!v113)
            {
              v118 = v112 + 7;
              v32 = v189;
              do
              {
                if (v108 == v118)
                  goto LABEL_130;
                v113 = v101[v118++];
              }
              while (!v113);
              v102 = v118 - 1;
            }
          }
        }
        v104 = (v113 - 1) & v113;
        v110 = __clz(__rbit64(v113)) + (v102 << 6);
      }
      v2 = (uint64_t)*(id *)(*(_QWORD *)(v26 + 48) + 8 * v110);
      if (!v2)
        goto LABEL_129;
    }
    v111 = objc_msgSend(v192, "isKindOfEntity:", v2, v164);

  }
  while (!v111);
  sub_1000C6560(v26);
  swift_bridgeObjectRelease(v185);
  v24 = v171;
  v27 = (unint64_t)v171;
  sub_100395630(v173);
  sub_10039999C((uint64_t)v24);
  v2 = (uint64_t)&unk_1008437B0;
  sub_10000882C(v170, (uint64_t *)&unk_1008437B0);
  v30 = v190;
  swift_bridgeObjectRelease(v190);
  v15 = v188;
  v32 = v189;
  v119 = v188 + 1;
  if (__OFADD__(v188, 1))
    goto LABEL_233;
  v120 = v30[2];
  v121 = v182;
  if (v119 == v120)
    goto LABEL_135;
  while (2)
  {
    if (v119 >= v120)
      goto LABEL_220;
    v188 = v15;
    v122 = (uint64_t)v30 + v180;
    v185 = v119;
    v123 = v119 * v121;
    v124 = (uint64_t)v30 + v180 + v119 * v121;
    v125 = v187;
    sub_100008868(v124, v187, (uint64_t *)&unk_1008437B0);
    v126 = *(int *)(v181 + 48);
    v127 = v176;
    sub_1000151E8(v125, v176, type metadata accessor for RDStoreControllerNotificationCenter.Observer);
    v128 = *(_QWORD *)(v125 + v126);
    sub_100399958(v127, v186);
    v189 = v32;
    v190 = v30;
    v177 = v123;
    v178 = v124;
    v179 = v122;
    v184 = v128;
    if ((v128 & 0xC000000000000001) != 0)
    {
      if (v128 < 0)
        v129 = v128;
      else
        v129 = v128 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v128, 2);
      v130 = __CocoaSet.makeIterator()(v129);
      v131 = sub_1000151B0(0, (unint64_t *)&unk_1008479F0, NSEntityDescription_ptr);
      v132 = sub_1000E51DC(&qword_10083B678, (unint64_t *)&unk_1008479F0, NSEntityDescription_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
      v133 = Set.Iterator.init(_cocoa:)(&v197, v130, v131, v132);
      v135 = (uint64_t)v197;
      v134 = v198;
      v26 = v199;
      v136 = v200;
      v137 = v201;
    }
    else
    {
      v138 = -1 << *(_BYTE *)(v128 + 32);
      v134 = v128 + 56;
      v26 = ~v138;
      v139 = -v138;
      if (v139 < 64)
        v140 = ~(-1 << v139);
      else
        v140 = -1;
      v137 = v140 & *(_QWORD *)(v128 + 56);
      v133 = (_QWORD *)swift_bridgeObjectRetain_n(v128, 2);
      v136 = 0;
      v135 = v128;
    }
    v27 = v135 & 0x7FFFFFFFFFFFFFFFLL;
    v183 = (id)v26;
    v141 = (unint64_t)(v26 + 64) >> 6;
    while (2)
    {
      v24 = (char *)v137;
      v145 = v136;
      if (v135 < 0)
      {
        v148 = __CocoaSet.Iterator.next()(v133);
        if (!v148)
          goto LABEL_178;
        v26 = v148;
        v193[0] = v148;
        v149 = sub_1000151B0(0, (unint64_t *)&unk_1008479F0, NSEntityDescription_ptr);
        swift_unknownObjectRetain(v26);
        swift_dynamicCast(&v194, v193, v191, v149, 7);
        v144 = v194;
        swift_unknownObjectRelease(v26);
        if (!v144)
          goto LABEL_178;
        goto LABEL_151;
      }
      if (v137)
      {
        v142 = __clz(__rbit64(v137));
        v137 &= v137 - 1;
        v143 = v142 | (v136 << 6);
        goto LABEL_150;
      }
      ++v136;
      if (__OFADD__(v145, 1))
      {
        __break(1u);
        goto LABEL_219;
      }
      if (v136 >= v141)
      {
LABEL_177:
        v24 = 0;
LABEL_178:
        v151 = v185;
        goto LABEL_179;
      }
      v146 = *(_QWORD *)(v134 + 8 * v136);
      if (v146)
        goto LABEL_166;
      v147 = v145 + 2;
      if (v145 + 2 >= v141)
        goto LABEL_177;
      v146 = *(_QWORD *)(v134 + 8 * v147);
      if (v146)
        goto LABEL_165;
      v147 = v145 + 3;
      if (v145 + 3 >= v141)
        goto LABEL_177;
      v146 = *(_QWORD *)(v134 + 8 * v147);
      if (v146)
        goto LABEL_165;
      v147 = v145 + 4;
      if (v145 + 4 >= v141)
        goto LABEL_177;
      v146 = *(_QWORD *)(v134 + 8 * v147);
      if (v146)
        goto LABEL_165;
      v147 = v145 + 5;
      if (v145 + 5 >= v141)
        goto LABEL_177;
      v146 = *(_QWORD *)(v134 + 8 * v147);
      if (v146)
      {
LABEL_165:
        v136 = v147;
        goto LABEL_166;
      }
      v136 = v145 + 6;
      if (v145 + 6 >= v141)
        goto LABEL_177;
      v146 = *(_QWORD *)(v134 + 8 * v136);
      if (v146)
      {
LABEL_166:
        v137 = (v146 - 1) & v146;
        v143 = __clz(__rbit64(v146)) + (v136 << 6);
LABEL_150:
        v144 = *(id *)(*(_QWORD *)(v135 + 48) + 8 * v143);
        if (!v144)
          goto LABEL_178;
LABEL_151:
        v26 = (uint64_t)objc_msgSend(v192, "isKindOfEntity:", v144);

        if ((_DWORD)v26)
        {
          sub_1000C6560(v135);
          swift_bridgeObjectRelease(v184);
          v27 = v186;
          sub_100395630(v173);
          sub_10039999C(v27);
          v2 = (uint64_t)&unk_1008437B0;
          sub_10000882C(v187, (uint64_t *)&unk_1008437B0);
          v32 = v189;
          v30 = v190;
          v15 = v188;
          v121 = v182;
          v151 = v185;
          goto LABEL_190;
        }
        continue;
      }
      break;
    }
    v150 = v145 + 7;
    v151 = v185;
    while (v141 != v150)
    {
      v146 = *(_QWORD *)(v134 + 8 * v150++);
      if (v146)
      {
        v136 = v150 - 1;
        goto LABEL_166;
      }
    }
    v24 = 0;
LABEL_179:
    sub_1000C6560(v135);
    swift_bridgeObjectRelease(v184);
    sub_10039999C(v186);
    v2 = (uint64_t)&unk_1008437B0;
    sub_10000882C(v187, (uint64_t *)&unk_1008437B0);
    v152 = v188;
    v30 = v190;
    if (v188 == v151)
    {
      v32 = v189;
    }
    else
    {
      v32 = v189;
      if ((v188 & 0x8000000000000000) != 0)
        goto LABEL_224;
      v27 = v190[2];
      if (v188 >= v27)
        goto LABEL_225;
      v26 = v188 * v182;
      sub_100008868(v179 + v188 * v182, v175, (uint64_t *)&unk_1008437B0);
      if (v151 >= v27)
        goto LABEL_226;
      sub_100008868(v178, v174, (uint64_t *)&unk_1008437B0);
      if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0)
        v30 = (_QWORD *)sub_1001CECA4((unint64_t)v30);
      if (v152 >= v30[2])
        goto LABEL_227;
      v27 = (unint64_t)v30 + v180;
      sub_1000BABD0(v174, (uint64_t)v30 + v180 + v26, (uint64_t *)&unk_1008437B0);
      if (v151 >= v30[2])
        goto LABEL_228;
      sub_1000BABD0(v175, v27 + v177, (uint64_t *)&unk_1008437B0);
    }
    v121 = v182;
    v44 = __OFADD__(v152, 1);
    v15 = v152 + 1;
    if (v44)
      goto LABEL_222;
LABEL_190:
    v44 = __OFADD__(v151, 1);
    v119 = v151 + 1;
    if (v44)
      goto LABEL_221;
    v120 = v30[2];
    if (v119 != v120)
      continue;
    break;
  }
LABEL_135:
  if (v119 < v15)
    goto LABEL_214;
LABEL_136:
  if ((v15 & 0x8000000000000000) == 0)
    goto LABEL_195;
LABEL_230:
  __break(1u);
LABEL_231:
  __break(1u);
LABEL_232:
  __break(1u);
LABEL_233:
  __break(1u);
LABEL_234:
  __break(1u);
LABEL_235:
  __break(1u);
LABEL_236:
  __break(1u);
  swift_release(v26);
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v196[0]);
  __break(1u);
LABEL_237:
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
}

uint64_t sub_1003953E8()
{
  uint64_t v0;

  swift_slowDealloc(*(_QWORD *)(v0 + 40), -1, -1);

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));

  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t sub_100395434@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  os_unfair_lock_s *v20;
  id v21;
  unint64_t *v22;
  unint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  _BYTE v29[24];

  v11 = (int *)type metadata accessor for RDStoreControllerNotificationCenter.Observer(0);
  v12 = *((_QWORD *)v11 - 1);
  v13 = __chkstk_darwin(v11);
  v15 = &v29[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v16 = __chkstk_darwin(v13);
  v18 = &v29[-v17 - 8];
  UUID.init()(v16);
  sub_1000151E8(a5, (uint64_t)v18, type metadata accessor for RDStoreControllerNotificationCenter.Token);
  *(_QWORD *)&v18[v11[5]] = a1;
  *(_QWORD *)&v18[v11[6]] = a2;
  v19 = &v18[v11[7]];
  *v19 = a3;
  v19[1] = a4;
  v20 = *(os_unfair_lock_s **)(v5 + 40);
  swift_bridgeObjectRetain(a1);
  v21 = a2;
  swift_retain(a4);
  os_unfair_lock_lock(v20);
  sub_1000151E8((uint64_t)v18, (uint64_t)v15, type metadata accessor for RDStoreControllerNotificationCenter.Observer);
  v22 = (unint64_t *)(v5 + 48);
  swift_beginAccess(v5 + 48, v29, 33, 0);
  v23 = *(_QWORD *)(v5 + 48);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
  *(_QWORD *)(v5 + 48) = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v23 = sub_1002C7FDC(0, *(_QWORD *)(v23 + 16) + 1, 1, v23);
    *v22 = v23;
  }
  v26 = *(_QWORD *)(v23 + 16);
  v25 = *(_QWORD *)(v23 + 24);
  if (v26 >= v25 >> 1)
  {
    v23 = sub_1002C7FDC(v25 > 1, v26 + 1, 1, v23);
    *v22 = v23;
  }
  *(_QWORD *)(v23 + 16) = v26 + 1;
  sub_100399958((uint64_t)v15, v23+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v26);
  swift_endAccess(v29);
  os_unfair_lock_unlock(v20);
  return sub_10039999C((uint64_t)v18);
}

uint64_t sub_100395608(uint64_t a1, uint64_t a2)
{
  return static UUID.== infix(_:_:)(a1, a2) & 1;
}

uint64_t sub_100395630(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  _QWORD *v27;
  _QWORD aBlock[5];
  uint64_t v29;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for RDStoreControllerNotificationCenter.Observer(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[1] = *(_QWORD *)(v2 + *(int *)(__chkstk_darwin(v11) + 24));
  sub_1000151E8(v2, (uint64_t)v14, v15);
  v16 = *(unsigned __int8 *)(v12 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = (v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_1007F11D8, v18 + 8, v16 | 7);
  sub_100399958((uint64_t)v14, v19 + v17);
  *(_QWORD *)(v19 + v18) = a1;
  aBlock[4] = sub_100399B28;
  v29 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007F11F0;
  v20 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v20);
  v27 = _swiftEmptyArrayStorage;
  v21 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_10001A630((uint64_t *)&unk_100838000);
  v23 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v22, v23, v4, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release(v29);
}

void sub_100395890(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  Class isa;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  _QWORD *v42;
  uint64_t aBlock[5];
  _QWORD *v44;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(NSObject **)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10039B06C(a1);
  v13 = v12;
  v14 = (void *)v2[2];
  isa = Notification._bridgeToObjectiveC()().super.isa;
  LODWORD(v14) = objc_msgSend(v14, "notificationContainsInternalChangesOnly:", isa);

  if ((_DWORD)v14)
  {
    swift_bridgeObjectRelease();
    if (qword_100837338 != -1)
      swift_once(&qword_100837338, sub_100393864);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_10001AAA8(v16, (uint64_t)qword_1008477A0);
    v41 = Logger.logObject.getter(v17);
    v18 = static os_log_type_t.info.getter(v41);
    if (os_log_type_enabled(v41, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v18, "RDStoreControllerNotificationCenter: Store notification is ICCC or change tracking internal changes only. Skipping.", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

  }
  else
  {
    v38 = v13;
    if (qword_100837338 != -1)
      swift_once(&qword_100837338, sub_100393864);
    v39 = v9;
    v20 = type metadata accessor for Logger(0);
    sub_10001AAA8(v20, (uint64_t)qword_1008477A0);
    v21 = swift_retain_n(v2);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter(v22);
    v24 = os_log_type_enabled(v22, v23);
    v40 = v8;
    v41 = v5;
    if (v24)
    {
      v37 = v4;
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      aBlock[0] = v26;
      *(_DWORD *)v25 = 136315138;
      v27 = v2[4];
      if (v27)
      {
        v28 = v2[3];
        v29 = v2[4];
      }
      else
      {
        v29 = 0xE300000000000000;
        v28 = 7104878;
      }
      swift_bridgeObjectRetain(v27);
      v42 = (_QWORD *)sub_10001A820(v28, v29, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, aBlock);
      swift_release_n(v2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "os_transaction INIT {name: com.apple.remindd.storeControllerNotificationCenter}, label: %s", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

      v4 = v37;
    }
    else
    {

      swift_release_n(v2);
    }
    v30 = os_transaction_create("com.apple.remindd.storeControllerNotificationCenter");
    if (qword_100836F10 != -1)
      swift_once(&qword_100836F10, sub_1001BA718);
    v31 = (_QWORD *)swift_allocObject(&unk_1007F12F0, 40, 7);
    v31[2] = v38;
    v31[3] = v2;
    v31[4] = v30;
    aBlock[4] = (uint64_t)sub_10039B414;
    v44 = v31;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000094C8;
    aBlock[3] = (uint64_t)&unk_1007F1308;
    v32 = _Block_copy(aBlock);
    swift_retain();
    swift_unknownObjectRetain(v30);
    static DispatchQoS.unspecified.getter(v33);
    v42 = _swiftEmptyArrayStorage;
    v34 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v35 = sub_10001A630((uint64_t *)&unk_100838000);
    v36 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v42, v35, v36, v4, v34);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v32);
    _Block_release(v32);
    swift_unknownObjectRelease(v30);
    ((void (*)(char *, uint64_t))v41[1].isa)(v7, v4);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v40);
    swift_release(v44);
  }
}

void sub_100395D68(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  id v32;
  uint64_t v33;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  void (*v36)(uint64_t *, _QWORD);
  uint64_t v37;
  void *v38;
  void *v39;
  char *v40;
  uint64_t v41;
  __n128 v42;
  void *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  void (*v47)(_QWORD *, uint64_t, uint64_t);
  uint64_t v48;
  id v49;
  void *v50;
  id v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 v79;
  _QWORD *v80;

  v72 = a2;
  v4 = type metadata accessor for DispatchPredicate(0);
  v69 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend((id)objc_opt_self(NSThread), "currentThread");
  v74 = objc_msgSend(v7, "qualityOfService");

  v8 = a1 & 0xC000000000000001;
  v70 = v6;
  v71 = v4;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    v10 = __CocoaSet.count.getter(v9);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 16);
  }
  v11 = _swiftEmptyArrayStorage;
  if (v10)
  {
    v80 = _swiftEmptyArrayStorage;
    sub_1001C2324(0, v10 & ~(v10 >> 63), 0);
    if (v8)
    {
      if (a1 < 0)
        v12 = a1;
      else
        v12 = a1 & 0xFFFFFFFFFFFFFF8;
      v13 = __CocoaSet.startIndex.getter(v12);
      v15 = 1;
    }
    else
    {
      v13 = sub_100364E8C(a1);
      v15 = v16 & 1;
    }
    v77 = v13;
    v78 = v14;
    v79 = v15;
    if ((v10 & 0x8000000000000000) == 0)
    {
      v17 = a1 & 0xFFFFFFFFFFFFFF8;
      if (a1 < 0)
        v17 = a1;
      v73 = v17;
      while (1)
      {
        while (1)
        {
          v23 = v77;
          v24 = v78;
          v25 = v79;
          sub_100364E50(v77, v78, v79, a1);
          v27 = v26;
          v28 = v80;
          if ((swift_isUniquelyReferenced_nonNull_native(v80) & 1) == 0)
          {
            sub_1001C2324(0, v28[2] + 1, 1);
            v28 = v80;
          }
          v30 = v28[2];
          v29 = v28[3];
          if (v30 >= v29 >> 1)
          {
            sub_1001C2324(v29 > 1, v30 + 1, 1);
            v28 = v80;
          }
          v28[2] = v30 + 1;
          v31 = &v28[2 * v30];
          v32 = v74;
          v31[4] = v27;
          v31[5] = v32;
          if (v8)
            break;
          v18 = sub_10036456C(v23, v24, v25, a1);
          v20 = v19;
          v22 = v21;
          sub_1000E515C(v23, v24, v25);
          v77 = v18;
          v78 = v20;
          v79 = v22 & 1;
          if (!--v10)
            goto LABEL_29;
        }
        if ((v25 & 1) == 0)
          break;
        v33 = __CocoaSet.Index.handleBitPattern.getter(v23, v24);
        if (v33)
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v33);
        else
          isUniquelyReferenced_nonNull_native = 1;
        v35 = sub_10001A630((uint64_t *)&unk_100847A80);
        v36 = (void (*)(uint64_t *, _QWORD))Set.Index._asCocoa.modify(&v75, v35);
        __CocoaSet.formIndex(after:isUnique:)(v37, isUniquelyReferenced_nonNull_native, v73);
        v36(&v75, 0);
        if (!--v10)
        {
LABEL_29:
          sub_1000E515C(v77, v78, v79);
          v11 = v80;
          goto LABEL_30;
        }
      }
      __break(1u);
      goto LABEL_57;
    }
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
LABEL_30:
  LOBYTE(v38) = (_BYTE)v74 + 1;
  v2 = &qword_100837000;
  v10 = v72;
  if ((unint64_t)v74 + 1 > 0x22)
    goto LABEL_39;
  if (((1 << (char)v38) & 0x40401) != 0)
  {
    v38 = *(void **)(v72 + 56);
    if (v38)
    {
LABEL_43:
      v40 = v38;
      v59 = sub_10011FA1C((uint64_t)v11);
      swift_bridgeObjectRelease();
      sub_100390E58(v59, 0, 0);
      goto LABEL_44;
    }
    __break(1u);
  }
  if (((1 << (char)v38) & 0x404000000) == 0)
  {
LABEL_39:
    if (qword_100837338 == -1)
      goto LABEL_40;
    goto LABEL_55;
  }
  v39 = *(void **)(v10 + 56);
  if (!v39)
  {
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    return;
  }
  v40 = v39;
  v41 = sub_10011FA1C((uint64_t)v11);
  v42 = swift_bridgeObjectRelease();
  v10 = qword_10083A508;
  v43 = *(void **)&v40[qword_10083A508];
  v44 = v69;
  v45 = v70;
  *v70 = v43;
  v46 = enum case for DispatchPredicate.onQueue(_:);
  v47 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v44 + 104);
  v48 = v71;
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v47)(v45, enum case for DispatchPredicate.onQueue(_:), v71, v42);
  v49 = v43;
  LOBYTE(v43) = _dispatchPreconditionTest(_:)(v45);
  v11 = *(_QWORD **)(v44 + 8);
  ((void (*)(_QWORD *, uint64_t))v11)(v45, v48);
  if ((v43 & 1) == 0)
    goto LABEL_53;
  sub_1003914C8();
  v50 = *(void **)&v40[v10];
  *v45 = v50;
  v47(v45, v46, v48);
  v51 = v50;
  v52 = _dispatchPreconditionTest(_:)(v45);
  ((void (*)(_QWORD *, uint64_t))v11)(v45, v48);
  if ((v52 & 1) == 0)
  {
LABEL_54:
    __break(1u);
LABEL_55:
    swift_once(&qword_100837338, sub_100393864);
LABEL_40:
    v54 = type metadata accessor for Logger(0);
    v55 = sub_10001AAA8(v54, (uint64_t)qword_1008477A0);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.error.getter(v56);
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v58 = 134349056;
      v75 = (uint64_t)v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76);
      swift_slowDealloc(v58, -1, -1);
    }

    v38 = *(void **)(v10 + 56);
    if (!v38)
      goto LABEL_58;
    goto LABEL_43;
  }
  swift_beginAccess(&v40[qword_10083A540], &v75, 33, 0);
  swift_bridgeObjectRetain(v41);
  sub_1002B6EA0(v53);
  swift_endAccess(&v75);
  sub_100393200();
  v10 = v72;
LABEL_44:

  swift_bridgeObjectRelease();
  if (v2[103] != -1)
    swift_once(&qword_100837338, sub_100393864);
  v60 = type metadata accessor for Logger(0);
  sub_10001AAA8(v60, (uint64_t)qword_1008477A0);
  v61 = swift_retain_n(v10);
  v62 = Logger.logObject.getter(v61);
  v63 = static os_log_type_t.default.getter(v62);
  if (os_log_type_enabled(v62, v63))
  {
    v64 = (uint8_t *)swift_slowAlloc(12, -1);
    v65 = swift_slowAlloc(32, -1);
    v75 = v65;
    *(_DWORD *)v64 = 136315138;
    v66 = *(_QWORD *)(v10 + 32);
    if (v66)
    {
      v67 = *(_QWORD *)(v10 + 24);
      v68 = *(_QWORD *)(v10 + 32);
    }
    else
    {
      v68 = 0xE300000000000000;
      v67 = 7104878;
    }
    swift_bridgeObjectRetain(v66);
    v77 = sub_10001A820(v67, v68, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
    swift_release_n(v10);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "os_transaction RELEASE {name: com.apple.remindd.storeControllerNotificationCenter}, label: %s", v64, 0xCu);
    swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v65, -1, -1);
    swift_slowDealloc(v64, -1, -1);

  }
  else
  {

    swift_release_n(v10);
  }
}

uint64_t type metadata accessor for RDStoreControllerNotificationCenter()
{
  return objc_opt_self(_TtC7remindd35RDStoreControllerNotificationCenter);
}

_QWORD *initializeBufferWithCopyOfBuffer for RDStoreControllerNotificationCenter.ChangedAccountFireValue(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  a1[2] = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

void destroy for RDStoreControllerNotificationCenter.ChangedAccountFireValue(uint64_t a1)
{

}

_QWORD *assignWithCopy for RDStoreControllerNotificationCenter.ChangedAccountFireValue(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  *a1 = *a2;
  v4 = (void *)a2[1];
  v5 = (void *)a1[1];
  a1[1] = v4;
  v6 = v4;

  v7 = (void *)a2[2];
  v8 = (void *)a1[2];
  a1[2] = v7;
  v9 = v7;

  return a1;
}

uint64_t assignWithTake for RDStoreControllerNotificationCenter.ChangedAccountFireValue(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;

  v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for RDStoreControllerNotificationCenter.ChangedAccountFireValue(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDStoreControllerNotificationCenter.ChangedAccountFireValue(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDStoreControllerNotificationCenter.ChangedAccountFireValue()
{
  return &type metadata for RDStoreControllerNotificationCenter.ChangedAccountFireValue;
}

_QWORD *initializeBufferWithCopyOfBuffer for RDStoreControllerNotificationCenter.ChangedEntityFireValue(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  return a1;
}

uint64_t assignWithCopy for RDStoreControllerNotificationCenter.ChangedEntityFireValue(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for RDStoreControllerNotificationCenter.ChangedEntityFireValue(uint64_t a1, _QWORD *a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  *(_QWORD *)(a1 + 8) = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for RDStoreControllerNotificationCenter.ChangedEntityFireValue()
{
  return &type metadata for RDStoreControllerNotificationCenter.ChangedEntityFireValue;
}

uint64_t *sub_100396734(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  id v16;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)v4 + v8) = v10;
    v11 = *(void **)((char *)a2 + v9);
    *(uint64_t *)((char *)v4 + v9) = (uint64_t)v11;
    v12 = a3[7];
    v13 = (uint64_t *)((char *)v4 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    swift_bridgeObjectRetain(v10);
    v16 = v11;
  }
  swift_retain(v15);
  return v4;
}

uint64_t sub_1003967E4(uint64_t a1, int *a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5]));

  return swift_release(*(_QWORD *)(a1 + a2[7] + 8));
}

uint64_t sub_100396844(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = *(void **)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v10;
  v11 = a3[7];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain(v9);
  v15 = v10;
  swift_retain(v14);
  return a1;
}

uint64_t sub_1003968CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  v10 = a3[6];
  v11 = *(void **)(a2 + v10);
  v12 = *(void **)(a1 + v10);
  *(_QWORD *)(a1 + v10) = v11;
  v13 = v11;

  v14 = a3[7];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  v17 = v16[1];
  v18 = v15[1];
  *v15 = *v16;
  v15[1] = v17;
  swift_retain(v17);
  swift_release(v18);
  return a1;
}

uint64_t sub_100396974(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1003969E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRelease(v8);
  v9 = a3[6];
  v10 = *(void **)(a1 + v9);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);

  v11 = a3[7];
  v12 = *(_QWORD *)(a1 + v11 + 8);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  swift_release(v12);
  return a1;
}

uint64_t sub_100396A74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100396A80);
}

uint64_t sub_100396A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t type metadata accessor for RDStoreControllerNotificationCenter.Token(uint64_t a1)
{
  return sub_10001522C(a1, qword_100847968, (uint64_t)&nominal type descriptor for RDStoreControllerNotificationCenter.Token);
}

uint64_t sub_100396B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100396B1C);
}

uint64_t sub_100396B1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for RDStoreControllerNotificationCenter.Observer(uint64_t a1)
{
  return sub_10001522C(a1, qword_1008478D0, (uint64_t)&nominal type descriptor for RDStoreControllerNotificationCenter.Observer);
}

uint64_t sub_100396BA8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\b";
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100396C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100396C40);
}

uint64_t sub_100396C40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100396C7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100396C88);
}

uint64_t sub_100396C88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_100396CC8()
{
  return sub_10009FC50(&qword_1008479A0, type metadata accessor for RDStoreControllerNotificationCenter.Token, (uint64_t)&unk_1006B86B0);
}

uint64_t sub_100396CF4()
{
  return sub_10009FC50(&qword_1008479A8, type metadata accessor for RDStoreControllerNotificationCenter.Observer, (uint64_t)&unk_1006B8718);
}

unint64_t sub_100396D24()
{
  unint64_t result;

  result = qword_1008479B0;
  if (!qword_1008479B0)
  {
    result = swift_getWitnessTable(&unk_1006B8740, &type metadata for RDStoreControllerNotificationCenter.ChangedEntityFireValue);
    atomic_store(result, (unint64_t *)&qword_1008479B0);
  }
  return result;
}

unint64_t sub_100396D68(uint64_t a1)
{
  unint64_t result;

  result = sub_100120250();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_100396D8C(id a1@<X1>, uint64_t *a2@<X0>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  id v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  id v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *a2;
  v5 = a2[1];
  v7 = objc_msgSend(a1, "entitiesByName");
  v8 = sub_1000151B0(0, (unint64_t *)&unk_1008479F0, NSEntityDescription_ptr);
  v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v7, &type metadata for String, v8, &protocol witness table for String);

  if (*(_QWORD *)(v9 + 16))
  {
    swift_bridgeObjectRetain(v5);
    v10 = sub_10001A6DC(v6, v5);
    if ((v11 & 1) != 0)
    {
      v12 = *(id *)(*(_QWORD *)(v9 + 56) + 8 * v10);
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(v9);
      goto LABEL_11;
    }
    swift_bridgeObjectRelease(v5);
  }
  swift_bridgeObjectRelease(v9);
  if (qword_100837338 != -1)
    swift_once(&qword_100837338, sub_100393864);
  v13 = type metadata accessor for Logger(0);
  sub_10001AAA8(v13, (uint64_t)qword_1008477A0);
  swift_bridgeObjectRetain_n(v5, 2);
  v14 = a1;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(22, -1);
    v24 = swift_slowAlloc(64, -1);
    v27 = v24;
    *(_DWORD *)v17 = 136446466;
    swift_bridgeObjectRetain(v5);
    v25 = sub_10001A820(v6, v5, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
    swift_bridgeObjectRelease_n(v5, 3);
    *(_WORD *)(v17 + 12) = 2080;
    v18 = objc_msgSend(v14, "description");
    v19 = a3;
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v22 = v21;

    v23 = v20;
    a3 = v19;
    v25 = sub_10001A820(v23, v22, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);

    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Entity in the given filter option not recognized in managedObjectContext {entityName: %{public}s, managedObjectModel: %s}", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v5, 2);
  }
  v12 = 0;
LABEL_11:
  *a3 = v12;
}

uint64_t sub_100397088(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, _QWORD *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  Class isa;
  unsigned int v32;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[4];
  __int128 v39;
  __int128 v40;

  v10 = Notification.userInfo.getter(a1);
  if (!v10)
  {
    v39 = 0u;
    v40 = 0u;
LABEL_13:
    sub_10000882C((uint64_t)&v39, (uint64_t *)&unk_10083D5B0);
    v36 = 0;
    v17 = 0;
    goto LABEL_14;
  }
  v11 = v10;
  *(_QWORD *)&v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSManagedObjectContextTransactionAuthorKey);
  *((_QWORD *)&v39 + 1) = v12;
  AnyHashable.init<A>(_:)(&v37, &v39, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v11 + 16) && (v13 = sub_1002C6A88((uint64_t)&v37), (v14 & 1) != 0))
  {
    sub_10001A670(*(_QWORD *)(v11 + 56) + 32 * v13, (uint64_t)&v39);
  }
  else
  {
    v39 = 0u;
    v40 = 0u;
  }
  swift_bridgeObjectRelease(v11);
  sub_10020DA24((uint64_t)&v37);
  if (!*((_QWORD *)&v40 + 1))
    goto LABEL_13;
  v15 = swift_dynamicCast(&v37, &v39, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  v16 = v37;
  if (!v15)
    v16 = 0;
  v36 = v16;
  if (v15)
    v17 = v38[0];
  else
    v17 = 0;
LABEL_14:
  if (qword_100837338 != -1)
    swift_once(&qword_100837338, sub_100393864);
  v18 = type metadata accessor for Logger(0);
  sub_10001AAA8(v18, (uint64_t)qword_1008477A0);
  swift_bridgeObjectRetain_n(v17, 2);
  v19 = swift_bridgeObjectRetain_n(a4, 2);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.info.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc(22, -1);
    v35 = a6;
    v23 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v39 = v23;
    *(_DWORD *)v22 = 136446466;
    v37 = a3;
    v38[0] = a4;
    v24 = sub_10001A630((uint64_t *)&unk_10083A370);
    v25 = Optional.descriptionOrNil.getter(v24);
    v27 = v26;
    v37 = sub_10001A820(v25, v26, (uint64_t *)&v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38);
    swift_bridgeObjectRelease_n(a4, 2);
    swift_bridgeObjectRelease(v27);
    *(_WORD *)(v22 + 12) = 2082;
    if (v17)
      v28 = v36;
    else
      v28 = 0x68747561206F6E28;
    if (v17)
      v29 = v17;
    else
      v29 = 0xEB0000000029726FLL;
    swift_bridgeObjectRetain(v17);
    v37 = sub_10001A820(v28, v29, (uint64_t *)&v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38);
    swift_bridgeObjectRelease_n(v17, 2);
    swift_bridgeObjectRelease(v29);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "RDStoreControllerNotificationCenter.storeControllerDidChange[%{public}s]: Received notification {author: %{public}s}", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
    v30 = v23;
    a6 = v35;
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v22, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v17, 2);
    swift_bridgeObjectRelease_n(a4, 2);
  }
  isa = Notification._bridgeToObjectiveC()().super.isa;
  v32 = objc_msgSend(a5, "notificationContainsInternalChangesOnly:", isa);

  if (v32)
  {
    swift_bridgeObjectRelease(v17);
    return 0;
  }
  if (v17)
  {
    if (a6)
    {
      v34 = sub_1001A560C(v36, v17, a6);
      swift_bridgeObjectRelease(v17);
      if ((v34 & 1) != 0)
        return 0;
    }
    else
    {
      swift_bridgeObjectRelease(v17);
    }
  }
  return 1;
}

uint64_t sub_100397450@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (qword_100837338 != -1)
    swift_once(&qword_100837338, sub_100393864);
  v6 = type metadata accessor for Logger(0);
  sub_10001AAA8(v6, (uint64_t)qword_1008477A0);
  v7 = swift_bridgeObjectRetain_n(a2, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v21 = a1;
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v23 = a2;
    v24 = v11;
    *(_DWORD *)v10 = 136446210;
    v12 = sub_10001A630((uint64_t *)&unk_10083A370);
    v13 = Optional.descriptionOrNil.getter(v12);
    v15 = v14;
    v22 = sub_10001A820(v13, v14, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "os_transaction INIT {name: com.apple.remindd.storeControllerNotificationCenter.storeDidChangePublisher}, label: %{public}s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    v16 = v10;
    a1 = v21;
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v17 = os_transaction_create("com.apple.remindd.storeControllerNotificationCenter.storeDidChangePublisher");
  v18 = *(int *)(sub_10001A630(&qword_100847A30) + 48);
  v19 = type metadata accessor for Notification(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(a3, a1, v19);
  *(_QWORD *)(a3 + v18) = v17;
  return result;
}

uint64_t sub_10039765C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  void (*v34)(uint64_t *, _QWORD);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52[3];
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  _QWORD *v56;

  sub_10039B06C(a1);
  v5 = v4;
  v6 = objc_msgSend((id)objc_opt_self(NSThread), "currentThread");
  v50 = objc_msgSend(v6, "qualityOfService");

  v7 = v5 & 0xC000000000000001;
  if ((v5 & 0xC000000000000001) != 0)
  {
    if (v5 < 0)
      v8 = v5;
    else
      v8 = v5 & 0xFFFFFFFFFFFFFF8;
    v9 = __CocoaSet.count.getter(v8);
    if (v9)
      goto LABEL_6;
LABEL_12:
    swift_bridgeObjectRelease(v5);
    v14 = _swiftEmptyArrayStorage;
LABEL_30:
    if (qword_100837338 != -1)
      swift_once(&qword_100837338, sub_100393864);
    v36 = type metadata accessor for Logger(0);
    sub_10001AAA8(v36, (uint64_t)qword_1008477A0);
    v37 = swift_bridgeObjectRetain_n(a4, 2);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.default.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = swift_slowAlloc(32, -1);
      v53 = v41;
      *(_DWORD *)v40 = 136446210;
      v51 = a3;
      v52[0] = a4;
      v42 = sub_10001A630((uint64_t *)&unk_10083A370);
      v43 = Optional.descriptionOrNil.getter(v42);
      v45 = v44;
      v51 = sub_10001A820(v43, v44, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52);
      swift_bridgeObjectRelease_n(a4, 2);
      swift_bridgeObjectRelease(v45);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "os_transaction RELEASE {name: com.apple.remindd.storeControllerNotificationCenter.storeDidChangePublisher}, label: %{public}s", v40, 0xCu);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a4, 2);
    }
    v46 = sub_10011FA1C((uint64_t)v14);
    swift_bridgeObjectRelease(v14);
    return v46;
  }
  v9 = *(_QWORD *)(v5 + 16);
  if (!v9)
    goto LABEL_12;
LABEL_6:
  v56 = _swiftEmptyArrayStorage;
  sub_1001C2324(0, v9 & ~(v9 >> 63), 0);
  if (v7)
  {
    if (v5 < 0)
      v10 = v5;
    else
      v10 = v5 & 0xFFFFFFFFFFFFFF8;
    result = __CocoaSet.startIndex.getter(v10);
    v13 = 1;
  }
  else
  {
    result = sub_100364E8C(v5);
    v13 = v15 & 1;
  }
  v53 = result;
  v54 = v12;
  v55 = v13;
  if ((v9 & 0x8000000000000000) == 0)
  {
    v16 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v5 < 0)
      v16 = v5;
    v49 = v16;
    do
    {
      while (1)
      {
        v23 = v53;
        v22 = v54;
        v24 = v55;
        sub_100364E50(v53, v54, v55, v5);
        v26 = v25;
        v27 = v56;
        result = swift_isUniquelyReferenced_nonNull_native(v56);
        if ((result & 1) == 0)
        {
          result = sub_1001C2324(0, v27[2] + 1, 1);
          v27 = v56;
        }
        v29 = v27[2];
        v28 = v27[3];
        if (v29 >= v28 >> 1)
        {
          result = sub_1001C2324(v28 > 1, v29 + 1, 1);
          v27 = v56;
        }
        v27[2] = v29 + 1;
        v30 = &v27[2 * v29];
        v30[4] = v26;
        v30[5] = v50;
        if (v7)
          break;
        v17 = sub_10036456C(v23, v22, v24, v5);
        v19 = v18;
        v21 = v20;
        sub_1000E515C(v23, v22, v24);
        v53 = v17;
        v54 = v19;
        v55 = v21 & 1;
        if (!--v9)
          goto LABEL_29;
      }
      if ((v24 & 1) == 0)
        goto LABEL_37;
      v31 = __CocoaSet.Index.handleBitPattern.getter(v23, v22);
      if (v31)
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v31);
      else
        isUniquelyReferenced_nonNull_native = 1;
      v33 = sub_10001A630((uint64_t *)&unk_100847A80);
      v34 = (void (*)(uint64_t *, _QWORD))Set.Index._asCocoa.modify(&v51, v33);
      __CocoaSet.formIndex(after:isUnique:)(v35, isUniquelyReferenced_nonNull_native, v49);
      v34(&v51, 0);
      --v9;
    }
    while (v9);
LABEL_29:
    sub_1000E515C(v53, v54, v55);
    swift_bridgeObjectRelease(v5);
    v14 = v56;
    goto LABEL_30;
  }
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

void sub_100397A7C(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *a1;
  v6 = objc_msgSend((id)objc_opt_self(RDStoreController), "managedObjectModel");
  sub_10039B600(v5, a2, v6);
  v8 = v7;

  *a3 = v8;
}

_QWORD *sub_100397AE8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  _QWORD *result;
  _QWORD v8[2];
  uint64_t v9;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v8[1] = *(_QWORD *)a1;
  v8[0] = &_swiftEmptySetSingleton;
  v4 = sub_10001A630((uint64_t *)&unk_100847AB0);
  v5 = sub_10001A630((uint64_t *)&unk_10083DB60);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  result = Sequence.reduce<A>(_:_:)(&v9, v8, sub_100397B98, 0, v4, v5, WitnessTable);
  *a2 = v9;
  a2[1] = v3;
  return result;
}

void sub_100397B98(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (void *)*a1;
  v5 = *a2;
  swift_bridgeObjectRetain(*a1);
  v6 = swift_bridgeObjectRetain(v5);
  sub_10059DFA0(v6, v4);
  *a3 = v7;
}

Swift::Int sub_100397BE8()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  _QWORD v8[9];

  v1 = *v0;
  v2 = (void *)v0[1];
  v3 = (void *)v0[2];
  Hasher.init(_seed:)(v8, 0);
  Hasher._combine(_:)(v1);
  v4 = v2;
  v5 = v3;
  NSObject.hash(into:)(v8);
  v6 = v5;
  NSObject.hash(into:)(v8);

  return Hasher._finalize()();
}

void sub_100397C70(uint64_t a1)
{
  Swift::UInt *v1;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;

  v3 = (void *)v1[1];
  v4 = (void *)v1[2];
  Hasher._combine(_:)(*v1);
  v5 = v3;
  v6 = v4;
  NSObject.hash(into:)(a1);
  v7 = v6;
  NSObject.hash(into:)(a1);

}

Swift::Int sub_100397CF0(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  _QWORD v9[9];

  v2 = *v1;
  v3 = (void *)v1[1];
  v4 = (void *)v1[2];
  Hasher.init(_seed:)(v9, a1);
  Hasher._combine(_:)(v2);
  v5 = v3;
  v6 = v4;
  NSObject.hash(into:)(v9);
  v7 = v6;
  NSObject.hash(into:)(v9);

  return Hasher._finalize()();
}

BOOL sub_100397D74(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  result = 0;
  if (*a1 == *a2)
  {
    v3 = a1[1];
    v2 = a1[2];
    sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
    if ((static NSObject.== infix(_:_:)(v3) & 1) != 0 && (static NSObject.== infix(_:_:)(v2) & 1) != 0)
      return 1;
  }
  return result;
}

unint64_t sub_100397E00()
{
  unint64_t result;

  result = qword_1008479C0;
  if (!qword_1008479C0)
  {
    result = swift_getWitnessTable(&unk_1006B87C4, &type metadata for RDStoreControllerNotificationCenter.ChangedAccountFireValue);
    atomic_store(result, (unint64_t *)&qword_1008479C0);
  }
  return result;
}

unint64_t sub_100397E44(uint64_t a1)
{
  unint64_t result;

  result = sub_10011FB48();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100397E68(uint64_t a1)
{
  unint64_t result;

  result = sub_100397E8C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100397E8C()
{
  unint64_t result;

  result = qword_1008479D0;
  if (!qword_1008479D0)
  {
    result = swift_getWitnessTable(&unk_1006B882C, &type metadata for RDStoreControllerNotificationCenter.ChangedAccountFireValue);
    atomic_store(result, (unint64_t *)&qword_1008479D0);
  }
  return result;
}

Swift::Int sub_100397ED0()
{
  uint64_t v0;
  void *v1;
  id v2;
  _QWORD v4[9];

  v1 = *(void **)(v0 + 8);
  Hasher.init(_seed:)(v4, 0);
  NSObject.hash(into:)(v4);
  v2 = v1;
  NSObject.hash(into:)(v4);

  return Hasher._finalize()();
}

void sub_100397F30(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  id v4;

  v3 = *(void **)(v1 + 8);
  NSObject.hash(into:)(a1);
  v4 = v3;
  NSObject.hash(into:)(a1);

}

Swift::Int sub_100397F84(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  _QWORD v5[9];

  v2 = *(void **)(v1 + 8);
  Hasher.init(_seed:)(v5, a1);
  NSObject.hash(into:)(v5);
  v3 = v2;
  NSObject.hash(into:)(v5);

  return Hasher._finalize()();
}

uint64_t sub_100397FE0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *a1;
  v1 = a1[1];
  sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
  if ((static NSObject.== infix(_:_:)(v2) & 1) != 0)
    return static NSObject.== infix(_:_:)(v1) & 1;
  else
    return 0;
}

uint64_t sub_100398054(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  char *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  int v87;
  uint8_t *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint8_t *v96;
  uint64_t v97;
  int v98;
  void *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  uint64_t v123;

  v6 = v5;
  v102 = a5;
  v120 = a1;
  v10 = sub_10001A630(&qword_10083A970);
  __chkstk_darwin(v10);
  v107 = (char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A630(&qword_100847A08);
  v104 = *(_QWORD *)(v12 - 8);
  v105 = v12;
  __chkstk_darwin(v12);
  v101 = (char *)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A630(&qword_100847A10);
  v108 = *(_QWORD *)(v14 - 8);
  v109 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_10001A630(&qword_100847A18);
  v111 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v110 = (char *)&v95 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A630(&qword_100847A20);
  v115 = *(_QWORD *)(v18 - 8);
  v116 = v18;
  __chkstk_darwin(v18);
  v112 = (char *)&v95 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A630(&qword_100847A28);
  v117 = *(_QWORD *)(v20 - 8);
  v118 = v20;
  __chkstk_darwin(v20);
  v114 = (char *)&v95 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = a3;
  v122 = a3;
  v123 = a4;
  v100 = a4;
  v22 = sub_10001A630((uint64_t *)&unk_10083A370);
  v23 = Optional.descriptionOrNil.getter(v22);
  v106 = v24;
  v103 = v6;
  v25 = (void *)NSNotificationCenter.Publisher.name.getter();
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("RDStoreControllerDidEnableAccountsNotification"));
  v28 = v27;
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v31 = v29;
  v119 = a2;
  if (v26 == v30 && v28 == v29)
    v32 = 1;
  else
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v28, v30, v29, 0);
  v33 = 0xD000000000000012;
  v34 = swift_allocObject(&unk_1007F1228, 32, 7);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v31);
  if ((v32 & 1) != 0)
  {
    v35 = v23;

    v33 = 0xD000000000000011;
    v36 = "accountsDidEnable";
LABEL_13:
    v44 = (unint64_t)(v36 - 32) | 0x8000000000000000;
    goto LABEL_14;
  }
  v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("RDStoreControllerDidDisableAccountsNotification"));
  v39 = v38;
  v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v42 = v40;
  if (v37 == v41 && v39 == v40)
  {
    v35 = v23;

    swift_bridgeObjectRelease_n(v39, 2);
LABEL_12:
    v36 = "accountsDidDisable";
    goto LABEL_13;
  }
  v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v39, v41, v40, 0);

  swift_bridgeObjectRelease(v39);
  swift_bridgeObjectRelease(v42);
  if ((v43 & 1) != 0)
  {
    v35 = v23;
    goto LABEL_12;
  }
  if (qword_100837338 != -1)
    swift_once(&qword_100837338, sub_100393864);
  v35 = v23;
  v33 = 0x6E776F6E6B6E75;
  v82 = type metadata accessor for Logger(0);
  sub_10001AAA8(v82, (uint64_t)qword_1008477A0);
  v83 = v100;
  v84 = swift_bridgeObjectRetain_n(v100, 2);
  v85 = Logger.logObject.getter(v84);
  v86 = static os_log_type_t.fault.getter();
  v87 = v86;
  if (os_log_type_enabled(v85, v86))
  {
    v98 = v87;
    v88 = (uint8_t *)swift_slowAlloc(12, -1);
    v89 = swift_slowAlloc(32, -1);
    v97 = v89;
    v96 = v88;
    *(_DWORD *)v88 = 136446210;
    v121 = v89;
    v122 = v99;
    v123 = v83;
    v90 = Optional.descriptionOrNil.getter(v22);
    v92 = v91;
    v122 = (id)sub_10001A820(v90, v91, &v121);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123);
    swift_bridgeObjectRelease_n(v83, 2);
    swift_bridgeObjectRelease(v92);
    v93 = v96;
    _os_log_impl((void *)&_mh_execute_header, v85, (os_log_type_t)v98, "RDStoreControllerNotificationCenter: Incorrect usage of rem_pipeLineOfAccountsDidEnableOrDisable() {label: %{public}s}", v96, 0xCu);
    v94 = v97;
    swift_arrayDestroy(v97, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v94, -1, -1);
    swift_slowDealloc(v93, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v83, 2);
  }
  v44 = 0xE700000000000000;
LABEL_14:
  v45 = v120;
  v46 = v106;
  *(_QWORD *)(v34 + 16) = v33;
  *(_QWORD *)(v34 + 24) = v44;
  v47 = (_QWORD *)swift_allocObject(&unk_1007F1250, 64, 7);
  v48 = v119;
  v47[2] = v45;
  v47[3] = v48;
  v47[4] = v34;
  v47[5] = v35;
  v49 = v35;
  v50 = v102;
  v47[6] = v46;
  v47[7] = v50;
  v51 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v52 = sub_10009FC50((unint64_t *)&qword_10084A2A0, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
  swift_bridgeObjectRetain(v48);
  swift_retain(v34);
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRetain(v50);
  v53 = v101;
  Publisher.filter(_:)(sub_100399BC0, v47, v51, v52);
  swift_release(v47);
  v54 = (_QWORD *)swift_allocObject(&unk_1007F1278, 40, 7);
  v54[2] = v34;
  v54[3] = v49;
  v106 = v49;
  v54[4] = v46;
  swift_retain(v34);
  swift_bridgeObjectRetain(v46);
  v55 = sub_10001A630(&qword_100847A30);
  v56 = sub_1000A5F84((unint64_t *)&unk_100847A38, &qword_100847A08, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v57 = v105;
  Publisher.map<A>(_:)(sub_100399BFC, v54, v105, v55, v56);
  swift_release(v54);
  (*(void (**)(char *, uint64_t))(v104 + 8))(v53, v57);
  v58 = v46;
  if (qword_100836F10 != -1)
    swift_once(&qword_100836F10, sub_1001BA718);
  v59 = (void *)qword_100871CD0;
  v122 = (id)qword_100871CD0;
  v60 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v61 = (uint64_t)v107;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v107, 1, 1, v60);
  v62 = sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v63 = sub_1000A5F84(&qword_100847A48, &qword_100847A10, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v64 = sub_1000E51DC((unint64_t *)&qword_1008380B0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v65 = v59;
  v66 = v109;
  v67 = v110;
  Publisher.receive<A>(on:options:)(&v122, v61, v109, v62, v63, v64);
  sub_10000882C(v61, &qword_10083A970);

  (*(void (**)(char *, uint64_t))(v108 + 8))(v16, v66);
  v68 = (_QWORD *)swift_allocObject(&unk_1007F12A0, 56, 7);
  v68[2] = v120;
  v68[3] = v48;
  v69 = v106;
  v68[4] = v34;
  v68[5] = v69;
  v68[6] = v58;
  v70 = swift_allocObject(&unk_1007F12C8, 32, 7);
  *(_QWORD *)(v70 + 16) = sub_100399C3C;
  *(_QWORD *)(v70 + 24) = v68;
  swift_bridgeObjectRetain(v48);
  swift_retain(v34);
  v71 = sub_10001A630((uint64_t *)&unk_100838090);
  v72 = sub_1000A5F84(&qword_100847A50, &qword_100847A18, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v74 = v112;
  v73 = v113;
  Publisher.map<A>(_:)(sub_100399C70, v70, v113, v71, v72);
  swift_release(v70);
  (*(void (**)(char *, uint64_t))(v111 + 8))(v67, v73);
  v75 = sub_1000A5F84(&qword_100847A58, &qword_100847A20, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v76 = v114;
  v77 = v116;
  Publisher.filter(_:)(sub_10039BCDC, 0, v116, v75);
  (*(void (**)(char *, uint64_t))(v115 + 8))(v74, v77);
  v78 = sub_1000A5F84((unint64_t *)&unk_100847A60, &qword_100847A28, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v79 = v118;
  v80 = Publisher.eraseToAnyPublisher()(v118, v78);
  (*(void (**)(char *, uint64_t))(v117 + 8))(v76, v79);
  swift_release(v34);
  return v80;
}

BOOL sub_100398964(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, _QWORD *a7)
{
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  os_log_type_t type;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD v51[5];
  __int128 v52;
  __int128 v53;

  v13 = ((uint64_t (*)(void))Notification.userInfo.getter)();
  if (!v13)
  {
    v52 = 0u;
    v53 = 0u;
LABEL_13:
    sub_10000882C((uint64_t)&v52, (uint64_t *)&unk_10083D5B0);
    goto LABEL_14;
  }
  v14 = v13;
  v49 = a2;
  v50 = a3;
  swift_bridgeObjectRetain(a3);
  AnyHashable.init<A>(_:)(v51, &v49, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v14 + 16) && (v15 = sub_1002C6A88((uint64_t)v51), (v16 & 1) != 0))
  {
    sub_10001A670(*(_QWORD *)(v14 + 56) + 32 * v15, (uint64_t)&v52);
  }
  else
  {
    v52 = 0u;
    v53 = 0u;
  }
  swift_bridgeObjectRelease(v14);
  sub_10020DA24((uint64_t)v51);
  if (!*((_QWORD *)&v53 + 1))
    goto LABEL_13;
  v17 = sub_10001A630(&qword_100847A70);
  if ((swift_dynamicCast(v51, &v52, (char *)&type metadata for Any + 8, v17, 6) & 1) == 0)
  {
LABEL_14:
    if (qword_100837338 != -1)
      swift_once(&qword_100837338, sub_100393864);
    v24 = type metadata accessor for Logger(0);
    sub_10001AAA8(v24, (uint64_t)qword_1008477A0);
    swift_bridgeObjectRetain_n(a3, 2);
    swift_retain_n(a4, 2);
    v25 = swift_bridgeObjectRetain_n(a6, 2);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc(32, -1);
      v48 = a2;
      v29 = swift_slowAlloc(96, -1);
      *(_QWORD *)&v52 = v29;
      *(_DWORD *)v28 = 136446722;
      swift_beginAccess(a4 + 16, v51, 0, 0);
      v31 = *(_QWORD *)(a4 + 16);
      v30 = *(_QWORD *)(a4 + 24);
      swift_bridgeObjectRetain(v30);
      v49 = sub_10001A820(v31, v30, (uint64_t *)&v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      swift_release_n(a4, 2);
      swift_bridgeObjectRelease(v30);
      *(_WORD *)(v28 + 12) = 2082;
      swift_bridgeObjectRetain(a6);
      v49 = sub_10001A820(a5, a6, (uint64_t *)&v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      swift_bridgeObjectRelease_n(a6, 3);
      *(_WORD *)(v28 + 22) = 2082;
      swift_bridgeObjectRetain(a3);
      v49 = sub_10001A820(v48, a3, (uint64_t *)&v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "RDStoreControllerNotificationCenter.%{public}s[%{public}s]: Received notification that has no %{public}s in the user info", (uint8_t *)v28, 0x20u);
      swift_arrayDestroy(v29, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease_n(a6, 2);
      swift_release_n(a4, 2);
    }
    return 0;
  }
  v18 = swift_bridgeObjectRelease(v51[0]);
  v19 = Notification.userInfo.getter(v18);
  if (!v19)
  {
    v52 = 0u;
    v53 = 0u;
LABEL_29:
    sub_10000882C((uint64_t)&v52, (uint64_t *)&unk_10083D5B0);
    v34 = 0;
    v35 = 0;
    goto LABEL_30;
  }
  v20 = v19;
  *(_QWORD *)&v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSManagedObjectContextTransactionAuthorKey);
  *((_QWORD *)&v52 + 1) = v21;
  AnyHashable.init<A>(_:)(v51, &v52, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v20 + 16) && (v22 = sub_1002C6A88((uint64_t)v51), (v23 & 1) != 0))
  {
    sub_10001A670(*(_QWORD *)(v20 + 56) + 32 * v22, (uint64_t)&v52);
  }
  else
  {
    v52 = 0u;
    v53 = 0u;
  }
  swift_bridgeObjectRelease(v20);
  sub_10020DA24((uint64_t)v51);
  if (!*((_QWORD *)&v53 + 1))
    goto LABEL_29;
  v33 = swift_dynamicCast(v51, &v52, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if (v33)
    v34 = v51[0];
  else
    v34 = 0;
  if (v33)
    v35 = v51[1];
  else
    v35 = 0;
LABEL_30:
  if (qword_100837338 != -1)
    swift_once(&qword_100837338, sub_100393864);
  v36 = type metadata accessor for Logger(0);
  sub_10001AAA8(v36, (uint64_t)qword_1008477A0);
  swift_bridgeObjectRetain_n(v35, 2);
  swift_retain_n(a4, 2);
  v37 = swift_bridgeObjectRetain_n(a6, 2);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.info.getter(v38);
  if (os_log_type_enabled(v38, v39))
  {
    type = v39;
    v40 = swift_slowAlloc(32, -1);
    v46 = swift_slowAlloc(96, -1);
    *(_QWORD *)&v52 = v46;
    *(_DWORD *)v40 = 136446722;
    swift_beginAccess(a4 + 16, v51, 0, 0);
    v41 = *(_QWORD *)(a4 + 16);
    v42 = *(_QWORD *)(a4 + 24);
    swift_bridgeObjectRetain(v42);
    v49 = sub_10001A820(v41, v42, (uint64_t *)&v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
    swift_release_n(a4, 2);
    swift_bridgeObjectRelease(v42);
    *(_WORD *)(v40 + 12) = 2082;
    swift_bridgeObjectRetain(a6);
    v49 = sub_10001A820(a5, a6, (uint64_t *)&v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
    swift_bridgeObjectRelease_n(a6, 3);
    *(_WORD *)(v40 + 22) = 2082;
    if (v35)
      v43 = v34;
    else
      v43 = 0x68747561206F6E28;
    if (v35)
      v44 = v35;
    else
      v44 = 0xEB0000000029726FLL;
    swift_bridgeObjectRetain(v35);
    v49 = sub_10001A820(v43, v44, (uint64_t *)&v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
    swift_bridgeObjectRelease_n(v35, 2);
    swift_bridgeObjectRelease(v44);
    _os_log_impl((void *)&_mh_execute_header, v38, type, "RDStoreControllerNotificationCenter.%{public}s[%{public}s]: Received notification {author: %{public}s}", (uint8_t *)v40, 0x20u);
    swift_arrayDestroy(v46, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v40, -1, -1);

    if (!v35)
      return 1;
  }
  else
  {

    swift_bridgeObjectRelease_n(v35, 2);
    swift_bridgeObjectRelease_n(a6, 2);
    swift_release_n(a4, 2);
    if (!v35)
      return 1;
  }
  if (a7)
  {
    v45 = sub_1001A560C(v34, v35, a7);
    swift_bridgeObjectRelease(v35);
    return (v45 & 1) == 0;
  }
  swift_bridgeObjectRelease(v35);
  return 1;
}

uint64_t sub_100399060@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  Swift::String v20;
  uint64_t v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  char v33[24];
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v10 = a2 + 16;
  if (qword_100837338 != -1)
    swift_once(&qword_100837338, sub_100393864);
  v11 = type metadata accessor for Logger(0);
  sub_10001AAA8(v11, (uint64_t)qword_1008477A0);
  swift_retain_n(a2, 2);
  v12 = swift_bridgeObjectRetain_n(a4, 2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(22, -1);
    v31 = swift_slowAlloc(64, -1);
    v34 = v31;
    *(_DWORD *)v15 = 136446466;
    swift_beginAccess(v10, v33, 0, 0);
    v32 = v10;
    v16 = a5;
    v17 = *(_QWORD *)(a2 + 16);
    v18 = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain(v18);
    v36 = sub_10001A820(v17, v18, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
    swift_release_n(a2, 2);
    v19 = v18;
    a5 = v16;
    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v15 + 12) = 2082;
    swift_bridgeObjectRetain(a4);
    v36 = sub_10001A820(a3, a4, &v34);
    v10 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "os_transaction INIT {name: com.apple.remindd.storeControllerNotificationCenter.%{public}sPublisher}, label: %{public}s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
    swift_release_n(a2, 2);
  }
  v34 = 0;
  v35 = 0xE000000000000000;
  _StringGuts.grow(_:)(63);
  v36 = v34;
  v37 = v35;
  v20._object = (void *)0x8000000100701EB0;
  v20._countAndFlagsBits = 0xD000000000000034;
  String.append(_:)(v20);
  swift_beginAccess(v10, &v34, 0, 0);
  v21 = *(_QWORD *)(a2 + 16);
  v22 = *(void **)(a2 + 24);
  swift_bridgeObjectRetain(v22);
  v23._countAndFlagsBits = v21;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v22);
  v24._countAndFlagsBits = 0x656873696C627550;
  v24._object = (void *)0xE900000000000072;
  String.append(_:)(v24);
  v25 = v37;
  v26 = String.utf8CString.getter(v36, v37);
  swift_bridgeObjectRelease(v25);
  v27 = os_transaction_create(v26 + 32);
  swift_release(v26);
  v28 = *(int *)(sub_10001A630(&qword_100847A30) + 48);
  v29 = type metadata accessor for Notification(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(a5, a1, v29);
  *(_QWORD *)(a5 + v28) = v27;
  return result;
}

uint64_t sub_10039939C(__n128 a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v47;
  void (*v48)(_QWORD *, _QWORD);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  id v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD v66[5];
  __int128 v67;
  __int128 v68;

  v13 = Notification.userInfo.getter(a1);
  if (!v13)
  {
    v67 = 0u;
    v68 = 0u;
LABEL_19:
    sub_10000882C((uint64_t)&v67, (uint64_t *)&unk_10083D5B0);
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  v14 = v13;
  v64 = a4;
  v65 = a5;
  swift_bridgeObjectRetain(a5);
  AnyHashable.init<A>(_:)(v66, &v64, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v14 + 16) && (v15 = sub_1002C6A88((uint64_t)v66), (v16 & 1) != 0))
  {
    sub_10001A670(*(_QWORD *)(v14 + 56) + 32 * v15, (uint64_t)&v67);
  }
  else
  {
    v67 = 0u;
    v68 = 0u;
  }
  swift_bridgeObjectRelease(v14);
  sub_10020DA24((uint64_t)v66);
  if (!*((_QWORD *)&v68 + 1))
    goto LABEL_19;
  v17 = sub_10001A630(&qword_100847A70);
  if ((swift_dynamicCast(v66, &v67, (char *)&type metadata for Any + 8, v17, 6) & 1) == 0)
    return (uint64_t)&_swiftEmptySetSingleton;
  v58 = a7;
  v59 = a6;
  v60 = a8;
  v18 = v66[0];
  v19 = objc_msgSend((id)objc_opt_self(NSThread), "currentThread");
  v62 = objc_msgSend(v19, "qualityOfService");

  v63 = v18 & 0xC000000000000001;
  if ((v18 & 0xC000000000000001) != 0)
  {
    if (v18 < 0)
      v20 = v18;
    else
      v20 = v18 & 0xFFFFFFFFFFFFFF8;
    v21 = __CocoaSet.count.getter(v20);
    if (v21)
      goto LABEL_13;
LABEL_23:
    swift_bridgeObjectRelease(v18);
    v27 = _swiftEmptyArrayStorage;
LABEL_41:
    if (qword_100837338 != -1)
      swift_once(&qword_100837338, sub_100393864);
    v50 = type metadata accessor for Logger(0);
    sub_10001AAA8(v50, (uint64_t)qword_1008477A0);
    swift_retain_n(v59, 2);
    v51 = swift_bridgeObjectRetain_n(v60, 2);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.default.getter(v52);
    if (os_log_type_enabled(v52, v53))
    {
      v54 = swift_slowAlloc(22, -1);
      v55 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v67 = v55;
      *(_DWORD *)v54 = 136446466;
      swift_beginAccess(v59 + 16, v66, 0, 0);
      v56 = *(_QWORD *)(v59 + 16);
      v57 = *(_QWORD *)(v59 + 24);
      swift_bridgeObjectRetain(v57);
      v64 = (_QWORD *)sub_10001A820(v56, v57, (uint64_t *)&v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      swift_release_n(v59, 2);
      swift_bridgeObjectRelease(v57);
      *(_WORD *)(v54 + 12) = 2082;
      swift_bridgeObjectRetain(v60);
      v64 = (_QWORD *)sub_10001A820(v58, v60, (uint64_t *)&v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      swift_bridgeObjectRelease_n(v60, 3);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "os_transaction RELEASE {name: com.apple.remindd.storeControllerNotificationCenter.%{public}sPublisher}, label: %{public}s", (uint8_t *)v54, 0x16u);
      swift_arrayDestroy(v55, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v54, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v60, 2);
      swift_release_n(v59, 2);
    }
    v26 = sub_10011FAA4((uint64_t)v27);
    swift_bridgeObjectRelease(v27);
    return v26;
  }
  v21 = *(_QWORD *)(v18 + 16);
  if (!v21)
    goto LABEL_23;
LABEL_13:
  v64 = _swiftEmptyArrayStorage;
  sub_1001C2340(0, v21 & ~(v21 >> 63), 0);
  if (v63)
  {
    if (v18 < 0)
      v22 = v18;
    else
      v22 = v18 & 0xFFFFFFFFFFFFFF8;
    result = __CocoaSet.startIndex.getter(v22);
    v25 = 1;
  }
  else
  {
    result = sub_100364E8C(v18);
    v25 = v28 & 1;
  }
  *(_QWORD *)&v67 = result;
  *((_QWORD *)&v67 + 1) = v24;
  LOBYTE(v68) = v25;
  if ((v21 & 0x8000000000000000) == 0)
  {
    v29 = v18 & 0xFFFFFFFFFFFFFF8;
    if (v18 < 0)
      v29 = v18;
    v61 = v29;
    do
    {
      while (1)
      {
        v35 = v67;
        v36 = v68;
        sub_100364E64(v67, *((uint64_t *)&v67 + 1), v68, v18);
        v38 = v37;
        v39 = objc_msgSend(v37, "accountTypeHost");
        v40 = objc_msgSend(v38, "remObjectID");

        v41 = v64;
        result = swift_isUniquelyReferenced_nonNull_native(v64);
        if ((result & 1) == 0)
        {
          result = sub_1001C2340(0, v41[2] + 1, 1);
          v41 = v64;
        }
        v43 = v41[2];
        v42 = v41[3];
        if (v43 >= v42 >> 1)
        {
          result = sub_1001C2340(v42 > 1, v43 + 1, 1);
          v41 = v64;
        }
        v41[2] = v43 + 1;
        v44 = &v41[3 * v43];
        v44[4] = v62;
        v44[5] = v39;
        v44[6] = v40;
        if (v63)
          break;
        v30 = sub_10036456C(v35, *((_QWORD *)&v35 + 1), v36, v18);
        v32 = v31;
        v34 = v33;
        sub_1000E515C(v35, *((uint64_t *)&v35 + 1), v36);
        *(_QWORD *)&v67 = v30;
        *((_QWORD *)&v67 + 1) = v32;
        LOBYTE(v68) = v34 & 1;
        if (!--v21)
          goto LABEL_40;
      }
      if ((v36 & 1) == 0)
        goto LABEL_48;
      v45 = __CocoaSet.Index.handleBitPattern.getter(v35, *((_QWORD *)&v35 + 1));
      if (v45)
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v45);
      else
        isUniquelyReferenced_nonNull_native = 1;
      v47 = sub_10001A630(&qword_100847A78);
      v48 = (void (*)(_QWORD *, _QWORD))Set.Index._asCocoa.modify(v66, v47);
      __CocoaSet.formIndex(after:isUnique:)(v49, isUniquelyReferenced_nonNull_native, v61);
      v48(v66, 0);
      --v21;
    }
    while (v21);
LABEL_40:
    sub_1000E515C(v67, *((uint64_t *)&v67 + 1), v68);
    swift_bridgeObjectRelease(v18);
    v27 = v64;
    goto LABEL_41;
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_100399958(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RDStoreControllerNotificationCenter.Observer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10039999C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RDStoreControllerNotificationCenter.Observer(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1003999D8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1003999FC(uint64_t a1)
{
  uint64_t v1;

  sub_100393CB4(a1, v1);
}

uint64_t sub_100399A04(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  return a1;
}

uint64_t sub_100399A3C(uint64_t a1, uint64_t a2)
{
  initializeWithTake for RDDebouncing.Policy.Interval(a2, a1);
  return a2;
}

uint64_t sub_100399A78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for RDStoreControllerNotificationCenter.Observer(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();

  swift_release(*(_QWORD *)(v7 + *(int *)(v1 + 28) + 8));
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100399B28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for RDStoreControllerNotificationCenter.Observer(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  return (*(uint64_t (**)(_QWORD))(v0 + *(int *)(v1 + 28) + v3))(*(_QWORD *)(v0
                                                                                     + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100399B84()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

BOOL sub_100399BC0(uint64_t a1)
{
  uint64_t v1;

  return sub_100398964(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD **)(v1 + 56));
}

uint64_t sub_100399BD0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100399BFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100399060(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_100399C08()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100399C3C(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3;

  return sub_10039939C(a3, a1, a2, *(_QWORD **)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48));
}

uint64_t sub_100399C4C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100399C74(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  void (*v24)(char *, uint64_t, __n128);
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v38 = a1;
  v6 = sub_10001A630((uint64_t *)&unk_100847B10);
  v7 = *(_QWORD *)(v6 - 8);
  v40 = v6;
  v41 = v7;
  __chkstk_darwin(v6);
  v39 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (void *)objc_opt_self(NSNotificationCenter);
  v14 = objc_msgSend(v13, "defaultCenter");
  NSNotificationCenter.publisher(for:object:)(CFSTR("RDStoreControllerDidEnableAccountsNotification"), 0);

  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("RDStoreControllerDidEnableAccountsNotificationAccountStoragesKey"));
  v17 = v16;
  v18 = a1;
  v19 = a2;
  v20 = a2;
  v21 = a3;
  v22 = sub_100398054(v15, v16, v18, v19, a3);
  v23 = swift_bridgeObjectRelease(v17);
  v24 = *(void (**)(char *, uint64_t, __n128))(v10 + 8);
  v24(v12, v9, v23);
  v25 = objc_msgSend(v13, "defaultCenter");
  NSNotificationCenter.publisher(for:object:)(CFSTR("RDStoreControllerDidDisableAccountsNotification"), 0);

  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("RDStoreControllerDidDisableAccountsNotificationAccountStoragesKey"));
  v28 = v27;
  v29 = sub_100398054(v26, v27, v38, v20, v21);
  v30 = swift_bridgeObjectRelease(v28);
  v24(v12, v9, v30);
  v42 = v29;
  v43 = v22;
  swift_retain(v22);
  swift_retain(v29);
  v31 = sub_10001A630((uint64_t *)&unk_10084D080);
  v32 = sub_1000A5F84(&qword_100847B20, (uint64_t *)&unk_10084D080, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v33 = v39;
  Publishers.Merge.init(_:_:)(&v43, &v42, v31, v31, v32, v32);
  v34 = sub_1000A5F84(&qword_100847B28, (uint64_t *)&unk_100847B10, (uint64_t)&protocol conformance descriptor for Publishers.Merge<A, B>);
  v35 = v40;
  v36 = Publisher.eraseToAnyPublisher()(v40, v34);
  swift_release(v22);
  swift_release(v29);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v33, v35);
  return v36;
}

uint64_t sub_100399F04(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  id v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93[2];

  v75 = a4;
  v73 = a3;
  v92 = a2;
  v5 = sub_10001A630(&qword_10083A970);
  __chkstk_darwin(v5);
  v85 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_10001A630(&qword_100847AC0);
  v77 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v71 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630(&qword_100847AC8);
  v9 = *(_QWORD *)(v8 - 8);
  v78 = v8;
  v79 = v9;
  __chkstk_darwin(v8);
  v72 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A630(&qword_100847AD0);
  v80 = *(_QWORD *)(v11 - 8);
  v81 = v11;
  __chkstk_darwin(v11);
  v76 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_10001A630(&qword_100847AD8);
  v88 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v86 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_10001A630(&qword_100847AE0);
  v89 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v87 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v15 = *(_QWORD *)(v70 - 8);
  v16 = __chkstk_darwin(v70);
  v18 = (char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v69 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v69 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v69 - v25;
  v27 = (void *)objc_opt_self(NSNotificationCenter);
  v28 = objc_msgSend(v27, "defaultCenter");
  v29 = objc_msgSend(a1, "persistentStoreCoordinator");
  v30 = v92;
  NSNotificationCenter.publisher(for:object:)(NSManagedObjectContextDidSaveObjectIDsNotification, v29);

  v31 = objc_msgSend(v27, "defaultCenter");
  NSNotificationCenter.publisher(for:object:)(CFSTR("RDStoreControllerDidRemoveAccountStoresNotification"), a1);

  v84 = v15;
  v32 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v82 = v26;
  v33 = v26;
  v34 = v70;
  v32(v21, v33, v70);
  v83 = v24;
  v32(v18, v24, v34);
  v35 = sub_10009FC50((unint64_t *)&qword_10084A2A0, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
  v36 = v71;
  Publishers.Merge.init(_:_:)(v21, v18, v34, v34, v35, v35);
  v37 = (_QWORD *)swift_allocObject(&unk_1007F13E0, 48, 7);
  v38 = v73;
  v37[2] = v30;
  v37[3] = v38;
  v39 = v75;
  v37[4] = a1;
  v37[5] = v39;
  v40 = sub_1000A5F84(&qword_100847AE8, &qword_100847AC0, (uint64_t)&protocol conformance descriptor for Publishers.Merge<A, B>);
  swift_bridgeObjectRetain(v38);
  v41 = a1;
  swift_bridgeObjectRetain(v39);
  v42 = v72;
  v43 = v74;
  Publisher.filter(_:)(sub_10039B7F8, v37, v74, v40);
  swift_release(v37);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v36, v43);
  v44 = swift_allocObject(&unk_1007F1408, 32, 7);
  *(_QWORD *)(v44 + 16) = v30;
  *(_QWORD *)(v44 + 24) = v38;
  swift_bridgeObjectRetain(v38);
  v45 = sub_10001A630(&qword_100847A30);
  v46 = sub_1000A5F84(&qword_100847AF0, &qword_100847AC8, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v47 = v76;
  v48 = v78;
  Publisher.map<A>(_:)(sub_10039B828, v44, v78, v45, v46);
  swift_release(v44);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v42, v48);
  if (qword_100836F10 != -1)
    swift_once(&qword_100836F10, sub_1001BA718);
  v49 = (void *)qword_100871CD0;
  v93[0] = (id)qword_100871CD0;
  v50 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v51 = (uint64_t)v85;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v85, 1, 1, v50);
  v52 = sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v53 = sub_1000A5F84(&qword_100847AF8, &qword_100847AD0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v54 = sub_1000E51DC((unint64_t *)&qword_1008380B0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v55 = v49;
  v56 = v86;
  v57 = v81;
  Publisher.receive<A>(on:options:)(v93, v51, v81, v52, v53, v54);
  sub_10000882C(v51, &qword_10083A970);

  (*(void (**)(char *, uint64_t))(v80 + 8))(v47, v57);
  v58 = swift_allocObject(&unk_1007F1430, 32, 7);
  *(_QWORD *)(v58 + 16) = v92;
  *(_QWORD *)(v58 + 24) = v38;
  v59 = swift_allocObject(&unk_1007F1458, 32, 7);
  *(_QWORD *)(v59 + 16) = sub_10039B830;
  *(_QWORD *)(v59 + 24) = v58;
  swift_bridgeObjectRetain(v38);
  v60 = sub_10001A630((uint64_t *)&unk_10083DB60);
  v61 = sub_1000A5F84(&qword_100847B00, &qword_100847AD8, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v62 = v87;
  v63 = v90;
  Publisher.map<A>(_:)(sub_100399C70, v59, v90, v60, v61);
  swift_release(v59);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v56, v63);
  v64 = sub_1000A5F84(&qword_100847B08, &qword_100847AE0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v65 = v91;
  v66 = Publisher.eraseToAnyPublisher()(v91, v64);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v62, v65);
  v67 = *(void (**)(char *, uint64_t))(v84 + 8);
  v67(v83, v34);
  v67(v82, v34);
  return v66;
}

void sub_10039A614(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24[2];
  unint64_t v25;

  v25 = (unint64_t)_swiftEmptyArrayStorage;
  v5 = a1 + 56;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 56);
  v22 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v9 = 0;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v9++, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v9 >= v22)
      goto LABEL_29;
    v13 = *(_QWORD *)(v5 + 8 * v9);
    if (!v13)
      break;
LABEL_18:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_19:
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v16 = v15[1];
    v24[0] = *v15;
    v24[1] = v16;
    swift_bridgeObjectRetain(v16);
    sub_100396D8C(a2, v24, &v23);
    if (v2)
    {
      swift_release(a1);
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(v25);
      return;
    }
    swift_bridgeObjectRelease(v16);
    v18 = v23;
    if (v23)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v17);
      v20 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v19 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v20 >= v19 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1);
      v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v18);
      specialized Array._endMutation()(v21);
    }
  }
  v14 = v9 + 1;
  if (v9 + 1 >= v22)
    goto LABEL_29;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
    goto LABEL_17;
  v14 = v9 + 2;
  if (v9 + 2 >= v22)
    goto LABEL_29;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
    goto LABEL_17;
  v14 = v9 + 3;
  if (v9 + 3 >= v22)
    goto LABEL_29;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
    goto LABEL_17;
  v14 = v9 + 4;
  if (v9 + 4 >= v22)
  {
LABEL_29:
    swift_release(a1);
    return;
  }
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
LABEL_17:
    v9 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v22)
      goto LABEL_29;
    v13 = *(_QWORD *)(v5 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_18;
  }
LABEL_31:
  __break(1u);
}

id sub_10039A84C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  double v22;
  uint64_t Factor;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  char *v28;
  objc_class *ObjectType;
  objc_super v32;
  char v33[24];
  _BYTE v34[40];
  char v35[16];
  uint64_t v36;
  double v37;
  char v38;

  v7 = v6;
  ObjectType = (objc_class *)swift_getObjectType(v7);
  v13 = qword_10083A520;
  *(_QWORD *)&v7[qword_10083A520] = 0;
  v7[qword_10083A530] = 1;
  *(_QWORD *)&v7[qword_10083A538] = 0;
  v14 = (uint64_t *)&v7[qword_10083A548];
  *v14 = (uint64_t)_swiftEmptyArrayStorage;
  *(_QWORD *)&v7[qword_10083A550] = 0;
  *(_QWORD *)&v7[qword_10083A540] = &_swiftEmptySetSingleton;
  swift_beginAccess(v14, v33, 1, 0);
  v15 = *v14;
  *v14 = (uint64_t)_swiftEmptyArrayStorage;
  v16 = v7;
  swift_bridgeObjectRelease(v15);
  sub_100399A3C(a3, (uint64_t)v34);
  v17 = &v16[qword_10083A518];
  v18 = *(_OWORD *)a3;
  v19 = *(_OWORD *)(a3 + 16);
  *((_WORD *)v17 + 16) = *(_WORD *)(a3 + 32);
  *(_OWORD *)v17 = v18;
  *((_OWORD *)v17 + 1) = v19;
  *(_QWORD *)&v16[qword_10083A508] = a4;
  v20 = &v16[qword_10083A510];
  *(_QWORD *)v20 = a5;
  *((_QWORD *)v20 + 1) = a6;
  sub_100399A3C((uint64_t)v34, (uint64_t)v35);
  if (v38 == 1)
  {
    v21 = v36;
    v22 = v37;
    Factor = type metadata accessor for RDDebouncing.LoadFactor(0);
    swift_allocObject(Factor, *(unsigned int *)(Factor + 48), *(unsigned __int16 *)(Factor + 52));
    v24 = a4;
    swift_retain(a6);
    sub_100399A04(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000E684C);
    v25 = sub_1000E55B8(v21, v22);
    v26 = *(_QWORD *)&v7[v13];
    *(_QWORD *)&v7[v13] = v25;
  }
  else
  {
    v26 = *(_QWORD *)&v7[v13];
    *(_QWORD *)&v7[v13] = 0;
    v27 = a4;
    swift_retain(a6);
  }
  swift_release(v26);
  v28 = &v16[qword_10083A528];
  *(_QWORD *)v28 = a1;
  *((_QWORD *)v28 + 1) = a2;

  v32.receiver = v16;
  v32.super_class = ObjectType;
  return objc_msgSendSuper2(&v32, "init");
}

void sub_10039AA58(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  unsigned int v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];
  void *v30;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = sub_1000151B0(0, (unint64_t *)&unk_1008479F0, NSEntityDescription_ptr);
    v7 = sub_1000E51DC(&qword_10083B678, (unint64_t *)&unk_1008479F0, NSEntityDescription_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    v8 = Set.Iterator.init(_cocoa:)(v29, v5, v6, v7);
    v3 = v29[0];
    v27 = v29[1];
    v9 = v29[2];
    v10 = v29[3];
    v11 = v29[4];
  }
  else
  {
    v12 = -1 << *(_BYTE *)(a1 + 32);
    v27 = a1 + 56;
    v9 = ~v12;
    v13 = -v12;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v11 = v14 & *(_QWORD *)(a1 + 56);
    v8 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v10 = 0;
  }
  v26 = (unint64_t)(v9 + 64) >> 6;
  while (1)
  {
    v19 = v10;
    if ((v3 & 0x8000000000000000) == 0)
      break;
    v23 = __CocoaSet.Iterator.next()(v8);
    v24 = v23;
    if (!v23)
      goto LABEL_34;
    v28 = v23;
    v25 = sub_1000151B0(0, (unint64_t *)&unk_1008479F0, NSEntityDescription_ptr);
    swift_unknownObjectRetain(v24);
    swift_dynamicCast(&v30, &v28, (char *)&type metadata for Swift.AnyObject + 8, v25, 7);
    v17 = v30;
    swift_unknownObjectRelease(v24);
    if (!v17)
      goto LABEL_34;
LABEL_13:
    v18 = objc_msgSend(a2, "isKindOfEntity:", v17);

    if (v18)
      goto LABEL_34;
  }
  if (v11)
  {
    v15 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    v16 = v15 | (v10 << 6);
LABEL_12:
    v17 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    if (!v17)
      goto LABEL_34;
    goto LABEL_13;
  }
  v20 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    if (v20 >= v26)
      goto LABEL_34;
    v21 = *(_QWORD *)(v27 + 8 * v20);
    ++v10;
    if (!v21)
    {
      v10 = v19 + 2;
      if (v19 + 2 >= v26)
        goto LABEL_34;
      v21 = *(_QWORD *)(v27 + 8 * v10);
      if (!v21)
      {
        v10 = v19 + 3;
        if (v19 + 3 >= v26)
          goto LABEL_34;
        v21 = *(_QWORD *)(v27 + 8 * v10);
        if (!v21)
        {
          v10 = v19 + 4;
          if (v19 + 4 >= v26)
            goto LABEL_34;
          v21 = *(_QWORD *)(v27 + 8 * v10);
          if (!v21)
          {
            v10 = v19 + 5;
            if (v19 + 5 >= v26)
              goto LABEL_34;
            v21 = *(_QWORD *)(v27 + 8 * v10);
            if (!v21)
            {
              v22 = v19 + 6;
              while (v26 != v22)
              {
                v21 = *(_QWORD *)(v27 + 8 * v22++);
                if (v21)
                {
                  v10 = v22 - 1;
                  goto LABEL_31;
                }
              }
LABEL_34:
              sub_1000C6560(v3);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v11 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v10 << 6);
    goto LABEL_12;
  }
  __break(1u);
}

void *sub_10039AD60(__n128 a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v19;
  void *v20;
  _QWORD v21[2];
  uint64_t v22[5];
  __int128 v23;
  __int128 v24;
  _OWORD v25[2];

  v6 = Notification.userInfo.getter(a1);
  if (!v6)
  {
    v23 = 0u;
    v24 = 0u;
LABEL_10:
    sub_10000882C((uint64_t)&v23, (uint64_t *)&unk_10083D5B0);
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0
      || !_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    {
      return &_swiftEmptySetSingleton;
    }
    sub_1002EAF88((uint64_t)_swiftEmptyArrayStorage);
    return (void *)v19;
  }
  v7 = v6;
  v21[0] = a3;
  v21[1] = a4;
  swift_bridgeObjectRetain(a4);
  AnyHashable.init<A>(_:)(v22, v21, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v7 + 16) && (v8 = sub_1002C6A88((uint64_t)v22), (v9 & 1) != 0))
  {
    sub_10001A670(*(_QWORD *)(v7 + 56) + 32 * v8, (uint64_t)&v23);
  }
  else
  {
    v23 = 0u;
    v24 = 0u;
  }
  swift_bridgeObjectRelease(v7);
  sub_10020DA24((uint64_t)v22);
  if (!*((_QWORD *)&v24 + 1))
    goto LABEL_10;
  sub_10001A6CC(&v23, v25);
  sub_10001A670((uint64_t)v25, (uint64_t)v22);
  v10 = sub_10001A630(&qword_100847AA8);
  if (swift_dynamicCast(&v23, v22, (char *)&type metadata for Any + 8, v10, 6))
  {
    v11 = (void *)v23;
  }
  else
  {
    if (qword_100837338 != -1)
      swift_once(&qword_100837338, sub_100393864);
    v12 = type metadata accessor for Logger(0);
    sub_10001AAA8(v12, (uint64_t)qword_1008477A0);
    v13 = swift_bridgeObjectRetain_n(a4, 2);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v22[0] = v17;
      *(_DWORD *)v16 = 136446210;
      swift_bridgeObjectRetain(a4);
      *(_QWORD *)&v23 = sub_10001A820(a3, a4, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, (char *)&v23 + 8);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to cast userInfo[%{public}s] to Set<NSManagedObjectID>", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a4, 2);
    }
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
      && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    {
      sub_1002EAF88((uint64_t)_swiftEmptyArrayStorage);
      v11 = v20;
    }
    else
    {
      v11 = &_swiftEmptySetSingleton;
    }
  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v25);
  return v11;
}

void sub_10039B06C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  id v36;
  __int128 v37;
  _QWORD v38[7];
  _QWORD v39[6];

  v33 = a1;
  v38[6] = &_swiftEmptySetSingleton;
  v37 = xmmword_1006A3C20;
  v38[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(NSInsertedObjectIDsKey);
  v38[1] = v1;
  v38[2] = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUpdatedObjectIDsKey);
  v38[3] = v2;
  v3 = 0;
  v38[4] = static String._unconditionallyBridgeFromObjectiveC(_:)(NSDeletedObjectIDsKey);
  v38[5] = v4;
LABEL_3:
  if (v3 >= (unint64_t)v37)
    goto LABEL_38;
  v5 = &v38[2 * v3];
  v7 = *v5;
  v6 = v5[1];
  swift_bridgeObjectRetain(v6);
  v9 = (uint64_t)sub_10039AD60(v8, v33, v7, v6);
  swift_bridgeObjectRelease(v6);
  if ((v9 & 0xC000000000000001) != 0)
  {
    if (v9 < 0)
      v11 = v9;
    else
      v11 = v9 & 0xFFFFFFFFFFFFFF8;
    v12 = __CocoaSet.makeIterator()(v11);
    v13 = sub_1000151B0(0, &qword_100843EA0, NSManagedObjectID_ptr);
    v14 = sub_1000E51DC(&qword_100847AA0, &qword_100843EA0, NSManagedObjectID_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    v10 = Set.Iterator.init(_cocoa:)(v39, v12, v13, v14);
    v9 = v39[0];
    v15 = v39[1];
    v16 = v39[2];
    v17 = v39[3];
    v18 = v39[4];
  }
  else
  {
    v17 = 0;
    v19 = -1 << *(_BYTE *)(v9 + 32);
    v15 = v9 + 56;
    v16 = ~v19;
    v20 = -v19;
    if (v20 < 64)
      v21 = ~(-1 << v20);
    else
      v21 = -1;
    v18 = v21 & *(_QWORD *)(v9 + 56);
  }
  v34 = v3 + 1;
  v22 = (unint64_t)(v16 + 64) >> 6;
  if (v9 < 0)
    goto LABEL_16;
  while (1)
  {
    if (v18)
    {
      v23 = (v18 - 1) & v18;
      v24 = __clz(__rbit64(v18)) | (v17 << 6);
      v25 = v17;
      goto LABEL_33;
    }
    v30 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v30 >= v22)
      goto LABEL_2;
    v31 = *(_QWORD *)(v15 + 8 * v30);
    v25 = v17 + 1;
    if (!v31)
    {
      v25 = v17 + 2;
      if (v17 + 2 >= v22)
        goto LABEL_2;
      v31 = *(_QWORD *)(v15 + 8 * v25);
      if (!v31)
      {
        v25 = v17 + 3;
        if (v17 + 3 >= v22)
          goto LABEL_2;
        v31 = *(_QWORD *)(v15 + 8 * v25);
        if (!v31)
        {
          v25 = v17 + 4;
          if (v17 + 4 >= v22)
            goto LABEL_2;
          v31 = *(_QWORD *)(v15 + 8 * v25);
          if (!v31)
          {
            v32 = v17 + 5;
            while (v22 != v32)
            {
              v31 = *(_QWORD *)(v15 + 8 * v32++);
              if (v31)
              {
                v25 = v32 - 1;
                goto LABEL_32;
              }
            }
LABEL_2:
            sub_1000C6560(v9);
            ++v3;
            if (v34 == 3)
            {
              swift_arrayDestroy(v38, v37, &type metadata for String);
              return;
            }
            goto LABEL_3;
          }
        }
      }
    }
LABEL_32:
    v23 = (v31 - 1) & v31;
    v24 = __clz(__rbit64(v31)) + (v25 << 6);
LABEL_33:
    v29 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * v24);
    if (!v29)
      goto LABEL_2;
    while (1)
    {
      sub_1002DCCE4((Swift::Int *)&v36, objc_msgSend(v29, "entity", v33));

      v17 = v25;
      v18 = v23;
      if ((v9 & 0x8000000000000000) == 0)
        break;
LABEL_16:
      v26 = __CocoaSet.Iterator.next()(v10);
      if (v26)
      {
        v27 = v26;
        v35 = v26;
        v28 = sub_1000151B0(0, &qword_100843EA0, NSManagedObjectID_ptr);
        swift_unknownObjectRetain(v27);
        swift_dynamicCast(&v36, &v35, (char *)&type metadata for Swift.AnyObject + 8, v28, 7);
        v29 = v36;
        swift_unknownObjectRelease(v27);
        v25 = v17;
        v23 = v18;
        if (v29)
          continue;
      }
      goto LABEL_2;
    }
  }
  __break(1u);
LABEL_38:
  __break(1u);
}

uint64_t sub_10039B3E0()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_release(v0[3]);
  swift_unknownObjectRelease(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_10039B414()
{
  uint64_t v0;

  sub_100395D68(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10039B420(unsigned __int8 *a1, _QWORD *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 16))(*a1, *a2);
}

uint64_t sub_10039B448()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_10039B470()
{
  uint64_t v0;

  return sub_100392258(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), (void (*)(uint64_t))sub_100393200);
}

uint64_t sub_10039B494(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  _QWORD *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a1)
  {
    v3 = a2;
    sub_10039A614(a1, v3);
    v5 = v4;

  }
  else
  {
    v6 = objc_msgSend((id)objc_opt_self(REMCDObject), "subclassesOfREMCDObjectRepresentingRootCoreDataEntities");
    v7 = sub_10001A630(&qword_100847A00);
    v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      specialized ContiguousArray.reserveCapacity(_:)(v9);
      v10 = 0;
      do
      {
        v11 = v10 + 1;
        v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(*(_QWORD *)(v8 + 8 * v10 + 32)), "entity");
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
        v13 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
        v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v12);
        specialized ContiguousArray._endMutation()(v14);
        v10 = v11;
      }
      while (v9 != v11);
      v5 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRelease(v8);
    }
    else
    {
      swift_bridgeObjectRelease(v8);
      v5 = _swiftEmptyArrayStorage;
    }
  }
  sub_10011F9F8((uint64_t)v5);
  v16 = v15;
  swift_bridgeObjectRelease(v5);
  return v16;
}

void sub_10039B600(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  Swift::UInt v17;
  id v18;
  char v19;
  char v20;
  id v21[4];

  v4 = sub_10039B494(a2, a3);
  v21[3] = &_swiftEmptySetSingleton;
  v5 = a1 + 56;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v10 = 0;
  if (v8)
    goto LABEL_6;
LABEL_7:
  if (!__OFADD__(v10++, 1))
  {
    if (v10 >= v9)
      goto LABEL_25;
    v14 = *(_QWORD *)(v5 + 8 * v10);
    if (v14)
    {
LABEL_17:
      v8 = (v14 - 1) & v14;
      for (i = __clz(__rbit64(v14)) + (v10 << 6); ; i = v11 | (v10 << 6))
      {
        v16 = *(_QWORD *)(a1 + 48) + 16 * i;
        v17 = *(_QWORD *)(v16 + 8);
        v18 = *(id *)v16;
        sub_10039AA58(v4, v18);
        v20 = v19;

        if ((v20 & 1) != 0)
        {
          sub_1002DCD00(v21, v18, v17);

          if (!v8)
            goto LABEL_7;
        }
        else
        {

          if (!v8)
            goto LABEL_7;
        }
LABEL_6:
        v11 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
      }
    }
    v15 = v10 + 1;
    if (v10 + 1 >= v9)
      goto LABEL_25;
    v14 = *(_QWORD *)(v5 + 8 * v15);
    if (!v14)
    {
      v15 = v10 + 2;
      if (v10 + 2 >= v9)
        goto LABEL_25;
      v14 = *(_QWORD *)(v5 + 8 * v15);
      if (!v14)
      {
        v15 = v10 + 3;
        if (v10 + 3 < v9)
        {
          v14 = *(_QWORD *)(v5 + 8 * v15);
          if (v14)
            goto LABEL_16;
          while (1)
          {
            v10 = v15 + 1;
            if (__OFADD__(v15, 1))
              goto LABEL_27;
            if (v10 >= v9)
              break;
            v14 = *(_QWORD *)(v5 + 8 * v10);
            ++v15;
            if (v14)
              goto LABEL_17;
          }
        }
LABEL_25:
        swift_bridgeObjectRelease(v4);
        swift_release(a1);
        return;
      }
    }
LABEL_16:
    v10 = v15;
    goto LABEL_17;
  }
  __break(1u);
LABEL_27:
  __break(1u);
}

uint64_t sub_10039B7C4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10039B7F8(uint64_t a1, __n128 a2)
{
  uint64_t v2;

  return sub_100397088(a2, a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), *(_QWORD **)(v2 + 40));
}

uint64_t sub_10039B804()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10039B828@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100397450(a1, *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_10039B830(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10039765C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_10039B838@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, _QWORD);
  uint64_t v6;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, _QWORD))(v2 + 16);
  v6 = sub_10001A630(&qword_100847A30);
  result = v5(a1, *(_QWORD *)(a1 + *(int *)(v6 + 48)));
  *a2 = result;
  return result;
}

double sub_10039B888()
{
  uint64_t v0;

  return sub_100392258(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), (void (*)(uint64_t))sub_100392B44);
}

uint64_t sub_10039B8B0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_unknownObjectRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

double sub_10039B8E4()
{
  uint64_t v0;

  return sub_100392258(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), (void (*)(uint64_t))sub_10039246C);
}

uint64_t *initializeBufferWithCopyOfBuffer for RDStoreControllerNotificationCenter.CollectAndCoalescedChangedEntitiesWithInputCount(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *assignWithCopy for RDStoreControllerNotificationCenter.CollectAndCoalescedChangedEntitiesWithInputCount(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  return a1;
}

uint64_t *assignWithTake for RDStoreControllerNotificationCenter.CollectAndCoalescedChangedEntitiesWithInputCount(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for RDStoreControllerNotificationCenter.CollectAndCoalescedChangedEntitiesWithInputCount()
{
  return &type metadata for RDStoreControllerNotificationCenter.CollectAndCoalescedChangedEntitiesWithInputCount;
}

_QWORD *initializeBufferWithCopyOfBuffer for RDStoreControllerNotificationCenter.ChangedAccountInfo(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

void destroy for RDStoreControllerNotificationCenter.ChangedAccountInfo(id *a1)
{

}

uint64_t assignWithCopy for RDStoreControllerNotificationCenter.ChangedAccountInfo(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  return a1;
}

uint64_t assignWithTake for RDStoreControllerNotificationCenter.ChangedAccountInfo(uint64_t a1, _OWORD *a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for RDStoreControllerNotificationCenter.ChangedAccountInfo()
{
  return &type metadata for RDStoreControllerNotificationCenter.ChangedAccountInfo;
}

uint64_t *initializeBufferWithCopyOfBuffer for RDStoreControllerNotificationCenter.EntityFilterOption(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *assignWithCopy for RDStoreControllerNotificationCenter.EntityFilterOption(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t *assignWithTake for RDStoreControllerNotificationCenter.EntityFilterOption(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDStoreControllerNotificationCenter.EntityFilterOption(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RDStoreControllerNotificationCenter.EntityFilterOption(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t sub_10039BBFC(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_10039BC14(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for RDStoreControllerNotificationCenter.EntityFilterOption()
{
  return &type metadata for RDStoreControllerNotificationCenter.EntityFilterOption;
}

unint64_t sub_10039BC48()
{
  unint64_t result;

  result = qword_100847B38;
  if (!qword_100847B38)
  {
    result = swift_getWitnessTable(&unk_1006B88F4, &type metadata for RDStoreControllerNotificationCenter.ChangedAccountInfo);
    atomic_store(result, (unint64_t *)&qword_100847B38);
  }
  return result;
}

uint64_t sub_10039BCF4(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + 104);
}

unint64_t sub_10039BD28()
{
  return sub_10039C25C();
}

uint64_t sub_10039BD30()
{
  unint64_t v0;

  v0 = sub_10039BD28();
  return swift_getObjCClassFromMetadata(v0);
}

uint64_t sub_10039BD44()
{
  return 1;
}

uint64_t sub_10039BD4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  void (*v17)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  _BYTE v21[32];

  v5 = (_QWORD *)(swift_isaMask & *v2);
  v6 = v5[10];
  v7 = type metadata accessor for Optional(0, v6);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v21[-v9];
  v11 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v12);
  v14 = &v21[-v13];
  sub_1000E6B28(a1, (uint64_t)v21);
  v15 = sub_10001A630((uint64_t *)&unk_10083D5B0);
  v16 = swift_dynamicCast(v10, v21, v15, v6, 6);
  v17 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (!v16)
  {
    v17(v10, 1, 1, v6);
    result = (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
    goto LABEL_5;
  }
  v17(v10, 0, 1, v6);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v14, v10, v6);
  v18 = sub_10039C298((uint64_t)v14, v6, v5[11], v5[12]);
  if (v19 >> 60 == 15)
  {
    result = (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v14, v6);
LABEL_5:
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  *(_QWORD *)(a2 + 24) = &type metadata for Data;
  *(_QWORD *)a2 = v18;
  *(_QWORD *)(a2 + 8) = v19;
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v14, v6);
}

id sub_10039BEE8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10039C11C(a1, a2, a3, (void (*)(_QWORD *__return_ptr, _OWORD *))sub_10039BD4C);
}

uint64_t sub_10039BEF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE v17[24];
  uint64_t v18;

  v5 = *(_QWORD *)((swift_isaMask & *v2) + 0x50);
  v6 = type metadata accessor for Optional(0, v5);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v15 - v8;
  sub_1000E6B28(a1, (uint64_t)v17);
  if (v18)
  {
    result = swift_dynamicCast(&v15, v17, (char *)&type metadata for Any + 8, &type metadata for Data, 6);
    if ((result & 1) != 0)
    {
      v11 = v15;
      v12 = v16;
      sub_10039C050(v15, v16, (uint64_t)v9);
      v13 = *(_QWORD *)(v5 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v9, 1, v5) != 1)
      {
        *(_QWORD *)(a2 + 24) = v5;
        v14 = sub_1000087F0((_QWORD *)a2);
        (*(void (**)(_QWORD *, char *, uint64_t))(v13 + 32))(v14, v9, v5);
        return sub_1000A71C8(v11, v12);
      }
      sub_1000A71C8(v11, v12);
      result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
  }
  else
  {
    result = sub_1000F4294((uint64_t)v17);
  }
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t sub_10039C050@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = swift_isaMask & *v3;
  v8 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v9 = JSONDecoder.init()();
  v10 = *(_QWORD *)(v7 + 80);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v10, a1, a2, v10, *(_QWORD *)(v7 + 88));
  swift_release(v9);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a3, 0, 1, v10);
}

id sub_10039C110(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10039C11C(a1, a2, a3, (void (*)(_QWORD *__return_ptr, _OWORD *))sub_10039BEF4);
}

id sub_10039C11C(void *a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *__return_ptr, _OWORD *))
{
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  void *v16;
  _OWORD v18[2];
  _QWORD v19[3];
  uint64_t v20;

  if (a3)
  {
    v7 = a1;
    swift_unknownObjectRetain(a3);
    _bridgeAnyObjectToAny(_:)(v18, v8);
    swift_unknownObjectRelease(a3);
  }
  else
  {
    memset(v18, 0, sizeof(v18));
    v9 = a1;
  }
  a4(v19, v18);

  sub_1000F4294((uint64_t)v18);
  v10 = v20;
  if (!v20)
    return 0;
  v11 = sub_10000A388(v19, v20);
  v12 = *(_QWORD *)(v10 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v12 + 16))(v15, v13);
  v16 = (void *)_bridgeAnythingToObjectiveC<A>(_:)(v15, v10);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v10);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v19);
  return v16;
}

id sub_10039C230()
{
  return RDApplicationShortcutAssembly.init()();
}

uint64_t type metadata accessor for RDDecodeFromJSONDataValueTransformer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6C78(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RDDecodeFromJSONDataValueTransformer);
}

unint64_t sub_10039C25C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100847BE0;
  if (!qword_100847BE0)
  {
    v1 = objc_opt_self(NSData);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100847BE0);
  }
  return result;
}

uint64_t sub_10039C298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v8 = JSONEncoder.init()();
  v9 = dispatch thunk of JSONEncoder.encode<A>(_:)(a1, a2, a4);
  swift_release(v8);
  return v9;
}

id static REMCDListSection.insert(in:remObjectID:parentList:creationDate:displayName:canonicalName:minimumSupportedVersion:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10039C6C0(a1, a2, a3, a4, a7, a8, a9);
}

uint64_t static REMCDListSection.cdEntityName.getter()
{
  unint64_t v0;
  id v1;
  uint64_t v2;

  v0 = sub_10039CA1C();
  v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(v0), "cdEntityName");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

Swift::Int __swiftcall REMCDListSection.parentEffectiveMinimumSupportedVersion()()
{
  void *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend(v0, "list");
  if (!v1)
    return kREMSupportedVersionUnset;
  v2 = v1;
  v3 = objc_msgSend(v1, "effectiveMinimumSupportedVersion");

  return (Swift::Int)v3;
}

uint64_t static REMCDListSection.keyPathsForValuesAffectingEffectiveMinimumSupportedVersion()()
{
  uint64_t v0;

  v0 = sub_10011EE40((uint64_t)&off_1007E0B38);
  swift_arrayDestroy(&unk_1007E0B58, 1, &type metadata for String);
  return v0;
}

id REMCDListSection.init(entity:insertInto:)(void *a1, void *a2)
{
  void *v2;
  id v5;
  objc_super v7;

  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for REMCDListSection();
  v5 = objc_msgSendSuper2(&v7, "initWithEntity:insertIntoManagedObjectContext:", a1, a2);

  return v5;
}

id REMCDListSection.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for REMCDListSection();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_10039C6C0(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  id v18;
  Class isa;
  id v20;
  id v21;
  id v22;
  NSString v23;
  id v24;
  Class v25;
  NSString v26;
  id v27;
  NSString v28;
  NSString v29;
  NSString v30;
  NSString v31;
  NSString v32;
  uint64_t v34;

  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for REMCDListSection();
  v17 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v16)), "initWithContext:", a1);
  v18 = objc_msgSend(a2, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

  isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  objc_msgSend(v17, "setIdentifier:", isa);

  v20 = v17;
  v21 = objc_msgSend(a3, "account");
  objc_msgSend(v20, "setAccount:", v21);

  v22 = objc_msgSend(v20, "createResolutionTokenMapIfNecessary");
  objc_msgSend(v20, "setList:", a3);
  v23 = String._bridgeToObjectiveC()();
  objc_msgSend(v22, "updateForKey:", v23);

  v24 = v20;
  v25 = Date._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v24, "setCreationDate:", v25);

  v26 = String._bridgeToObjectiveC()();
  objc_msgSend(v22, "updateForKey:", v26);

  v27 = v24;
  if (a6)
    v28 = String._bridgeToObjectiveC()();
  else
    v28 = 0;
  objc_msgSend(v24, "setDisplayName:", v28);

  v29 = String._bridgeToObjectiveC()();
  objc_msgSend(v22, "updateForKey:", v29);

  if (a6)
    v30 = String._bridgeToObjectiveC()();
  else
    v30 = 0;
  objc_msgSend(v24, "setCanonicalName:", v30);

  v31 = String._bridgeToObjectiveC()();
  objc_msgSend(v22, "updateForKey:", v31);

  objc_msgSend(v24, "setMinimumSupportedVersion:", a7);
  v32 = String._bridgeToObjectiveC()();
  objc_msgSend(v22, "updateForKey:", v32);

  objc_msgSend(v24, "updateChangeCount");
  return v24;
}

unint64_t sub_10039CA1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008428E0;
  if (!qword_1008428E0)
  {
    v1 = objc_opt_self(REMListSection);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1008428E0);
  }
  return result;
}

uint64_t type metadata accessor for REMCDListSection()
{
  return objc_opt_self(REMCDListSection);
}

uint64_t sub_10039CA78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100847C10);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100847C10);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10039CB08()
{
  void *v0;
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const char *v14;
  uint64_t v15;
  id v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  id v36;
  void *v37;
  id v38;
  unint64_t v39;
  uint64_t v40;
  NSObject *v41;
  __n128 v42;
  uint64_t v43;
  id v44;
  NSObject *v45;
  id v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  double v51;
  id v52;
  void *v53;
  id v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t type;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v1 = objc_msgSend(v0, "list");
  if (!v1)
  {
    if (qword_100837340 != -1)
      swift_once(&qword_100837340, sub_10039CA78);
    v15 = type metadata accessor for Logger(0);
    sub_10001AAA8(v15, (uint64_t)qword_100847C10);
    v16 = v0;
    v4 = Logger.logObject.getter(v16);
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v17))
    {
      v18 = swift_slowAlloc(22, -1);
      v19 = swift_slowAlloc(64, -1);
      v74 = v19;
      *(_DWORD *)v18 = 136446466;
      v20 = sub_100437AC0();
      v73 = sub_10001A820(v20, v21, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);

      *(_QWORD *)&v22 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v18 + 12) = 2080;
      v23 = Bool.yesno.getter(objc_msgSend(v16, "isConcealed", v22));
      v73 = sub_10001A820(v23, v24, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v17, "📓 REMSharedActivityJournaling: Unable to get list from reminder {reminderObjectID: %{public}s, isConcealed: %s}", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
LABEL_42:

      return 0;
    }

    return 0;
  }
  v2 = v1;
  v3 = objc_msgSend(v0, "ckServerRecord");
  if (!v3)
  {
    if (qword_100837340 != -1)
      swift_once(&qword_100837340, sub_10039CA78);
    v25 = type metadata accessor for Logger(0);
    sub_10001AAA8(v25, (uint64_t)qword_100847C10);
    v26 = v0;
    v4 = Logger.logObject.getter(v26);
    v27 = static os_log_type_t.default.getter(v4);
    if (!os_log_type_enabled(v4, v27))
    {

      return 0;
    }
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = swift_slowAlloc(32, -1);
    v74 = v29;
    *(_DWORD *)v28 = 136446210;
    v30 = sub_100437AC0();
    v73 = sub_10001A820(v30, v31, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v27, "📓 REMSharedActivityJournaling: Unable to get ckServerRecord for reminder {reminderObjectID: %{public}s}", v28, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);
    goto LABEL_41;
  }
  v4 = v3;
  if (objc_msgSend(v0, "isInserted"))
  {
    v5 = -[NSObject creatorUserRecordID](v4, "creatorUserRecordID");
    if (!v5)
    {
      if (qword_100837340 != -1)
        swift_once(&qword_100837340, sub_10039CA78);
      v6 = type metadata accessor for Logger(0);
      sub_10001AAA8(v6, (uint64_t)qword_100847C10);
      v7 = v0;
      v8 = Logger.logObject.getter(v7);
      v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc(12, -1);
        v11 = swift_slowAlloc(32, -1);
        v74 = v11;
        *(_DWORD *)v10 = 136446210;
        v12 = sub_100437AC0();
        v73 = sub_10001A820(v12, v13, &v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);

        swift_bridgeObjectRelease();
        v14 = "📓 REMSharedActivityJournaling: Unable to get creatorUserRecordID from reminder {reminderObjectID: %{public}s}";
LABEL_32:
        _os_log_impl((void *)&_mh_execute_header, v8, v9, v14, v10, 0xCu);
        swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v11, -1, -1);
        swift_slowDealloc(v10, -1, -1);

        goto LABEL_42;
      }

      return 0;
    }
  }
  else
  {
    v5 = -[NSObject lastModifiedUserRecordID](v4, "lastModifiedUserRecordID");
    if (!v5)
    {
      if (qword_100837340 != -1)
        swift_once(&qword_100837340, sub_10039CA78);
      v58 = type metadata accessor for Logger(0);
      sub_10001AAA8(v58, (uint64_t)qword_100847C10);
      v59 = v0;
      v8 = Logger.logObject.getter(v59);
      v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc(12, -1);
        v11 = swift_slowAlloc(32, -1);
        v74 = v11;
        *(_DWORD *)v10 = 136446210;
        v60 = sub_100437AC0();
        v73 = sub_10001A820(v60, v61, &v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);

        swift_bridgeObjectRelease();
        v14 = "📓 REMSharedActivityJournaling: Unable to get lastModifiedUserRecordID from reminder {reminderObjectID: %{public}s}";
        goto LABEL_32;
      }

      goto LABEL_41;
    }
  }
  v32 = objc_msgSend(v5, "recordName");

  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  v35 = v34;

  v36 = -[NSObject ckServerShare](v2, "ckServerShare");
  if (v36)
  {
    v37 = v36;
    v38 = objc_msgSend(v36, "participants");
    v39 = sub_10039D88C();
    v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v38, v39);

    swift_bridgeObjectRetain(v35);
    v41 = sub_10039D8C8(v40, v33, v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v41)
    {
      v42 = swift_bridgeObjectRelease();
      v33 = CKShareParticipant.participantID.getter(v42);

LABEL_47:
      return v33;
    }
    if (qword_100837340 != -1)
      swift_once(&qword_100837340, sub_10039CA78);
    v62 = type metadata accessor for Logger(0);
    sub_10001AAA8(v62, (uint64_t)qword_100847C10);
    v63 = v0;
    swift_bridgeObjectRetain(v35);
    v65 = Logger.logObject.getter(v64);
    v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      v67 = swift_slowAlloc(22, -1);
      v72 = swift_slowAlloc(64, -1);
      v74 = v72;
      *(_DWORD *)v67 = 136446466;
      swift_bridgeObjectRetain(v35);
      v73 = sub_10001A820(v33, v35, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);
      swift_bridgeObjectRelease_n(v35, 3);
      *(_WORD *)(v67 + 12) = 2082;
      v68 = sub_100437AC0();
      v73 = sub_10001A820(v68, v69, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "📓 REMSharedActivityJournaling: Unable to get a participant for the reminder's author {authorID: %{public}s, reminderObjectID: %{public}s}", (uint8_t *)v67, 0x16u);
      swift_arrayDestroy(v72, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v72, -1, -1);
      swift_slowDealloc(v67, -1, -1);

      goto LABEL_42;
    }

    swift_bridgeObjectRelease_n(v35, 2);
LABEL_41:

    goto LABEL_42;
  }
  if (qword_100837340 != -1)
    swift_once(&qword_100837340, sub_10039CA78);
  v43 = type metadata accessor for Logger(0);
  sub_10001AAA8(v43, (uint64_t)qword_100847C10);
  v44 = v0;
  v45 = v2;
  v46 = v44;
  v41 = v45;
  v2 = Logger.logObject.getter(v41);
  v47 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v47))
  {
    v48 = swift_slowAlloc(22, -1);
    type = swift_slowAlloc(64, -1);
    v74 = type;
    *(_DWORD *)v48 = 136446466;
    v49 = sub_100437AC0();
    v73 = sub_10001A820(v49, v50, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);

    *(_QWORD *)&v51 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v48 + 12) = 2082;
    v52 = -[NSObject remObjectID](v41, "remObjectID", v51);
    if (v52)
    {
      v53 = v52;
      v54 = objc_msgSend(v52, "description");

      v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
      v57 = v56;

    }
    else
    {
      v57 = 0xE300000000000000;
      v55 = 7104878;
    }
    v73 = sub_10001A820(v55, v57, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v47, "📓 REMSharedActivityJournaling: Unable to get ckServerShare from reminder's list. Assuming unit testing and returning userRecordID {reminderObjectID: %{public}s, listObjectID: %{public}s}", (uint8_t *)v48, 0x16u);
    swift_arrayDestroy(type, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(type, -1, -1);
    swift_slowDealloc(v48, -1, -1);
    goto LABEL_47;
  }

  return v33;
}

uint64_t sub_10039D68C@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  unsigned int v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = v1;
  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v8 = __chkstk_darwin(v7).n128_u64[0];
  v10 = (char *)&v23 - v9;
  v11 = objc_msgSend(v2, "isInserted", v8);
  v12 = objc_msgSend(v2, "ckServerRecord");
  v13 = v12;
  if (!v11)
  {
    if (v12)
    {
      v16 = objc_msgSend(v12, "modificationDate");

      if (v16)
      {
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v16);

        v17 = type metadata accessor for Date(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v6, 0, 1, v17);
      }
      else
      {
        v22 = type metadata accessor for Date(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v6, 1, 1, v22);
      }
      v21 = (uint64_t)v6;
      return sub_1000CDA74(v21, a1);
    }
LABEL_8:
    v18 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a1, 1, 1, v18);
  }
  if (!v12)
    goto LABEL_8;
  v14 = objc_msgSend(v12, "creationDate");

  if (v14)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v14);

    v15 = type metadata accessor for Date(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v10, 0, 1, v15);
  }
  else
  {
    v20 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v10, 1, 1, v20);
  }
  v21 = (uint64_t)v10;
  return sub_1000CDA74(v21, a1);
}

unint64_t sub_10039D88C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100842DA0;
  if (!qword_100842DA0)
  {
    v1 = objc_opt_self(CKShareParticipant);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100842DA0);
  }
  return result;
}

void *sub_10039D8C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if ((unint64_t)a1 >> 62)
    goto LABEL_20;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (v6)
  {
    do
    {
      v7 = 4;
      while (1)
      {
        v8 = (a1 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a1)
           : *(id *)(a1 + 8 * v7);
        v9 = v8;
        v10 = v7 - 3;
        if (__OFADD__(v7 - 4, 1))
          break;
        v11 = objc_msgSend(v8, "userIdentity");
        v12 = objc_msgSend(v11, "userRecordID");

        if (v12)
        {
          v13 = objc_msgSend(v12, "recordName");

          v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
          v16 = v15;

          if (v14 == a2 && v16 == a3)
          {
            swift_bridgeObjectRelease(a1);
            v19 = a3;
            goto LABEL_18;
          }
          v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, a2, a3, 0);
          swift_bridgeObjectRelease(v16);
          if ((v18 & 1) != 0)
          {
            v19 = a1;
LABEL_18:
            swift_bridgeObjectRelease(v19);
            return v9;
          }
        }

        ++v7;
        if (v10 == v6)
          goto LABEL_24;
      }
      __break(1u);
LABEL_20:
      v20 = a3;
      if (a1 < 0)
        v21 = a1;
      else
        v21 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v22 = _CocoaArrayWrapper.endIndex.getter(v21);
      a3 = v20;
      v6 = v22;
    }
    while (v22);
  }
LABEL_24:
  swift_bridgeObjectRelease(a1);
  return 0;
}

void sub_10039DAA4()
{
  qword_100871E90 = (uint64_t)&off_1007DA8E8;
}

void sub_10039DAB8()
{
  qword_100871E98 = (uint64_t)&off_1007DAAF8;
}

void sub_10039DACC()
{
  qword_100871EA0 = (uint64_t)&off_1007DAD48;
}

void sub_10039DAE0(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  _BYTE *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  unint64_t v25;
  void *v26;
  void (*v27)(_BYTE *, uint64_t);
  Class isa;
  id v29;
  NSString v30;
  _BYTE v31[4];
  int v32;
  uint64_t v33;

  v2 = v1;
  v33 = a1;
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v31[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_10001A630((uint64_t *)&unk_10083B370);
  __chkstk_darwin(v7);
  v9 = &v31[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v10);
  v12 = &v31[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  v15 = &v31[-v14];
  *(_QWORD *)&v17 = __chkstk_darwin(v16).n128_u64[0];
  v19 = &v31[-v18];
  v20 = objc_msgSend(v2, "mostRecentTargetTemplateIdentifier", v17);
  if (v20)
  {
    v21 = v20;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v20);

    v22 = 0;
  }
  else
  {
    v22 = 1;
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v19, v22, 1, v3);
  v23 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_10011D420((uint64_t)v19, (uint64_t)v9);
  sub_10011D420(v33, v23);
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v24((uint64_t)v9, 1, v3) == 1)
  {
    sub_10000882C((uint64_t)v19, (uint64_t *)&unk_100839C80);
    if (v24(v23, 1, v3) == 1)
    {
      sub_10000882C((uint64_t)v9, (uint64_t *)&unk_100839C80);
      return;
    }
  }
  else
  {
    sub_10011D420((uint64_t)v9, (uint64_t)v15);
    if (v24(v23, 1, v3) != 1)
    {
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 32))(v6, v23, v3);
      v25 = sub_10011D468();
      v32 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v6, v3, v25);
      v26 = v2;
      v27 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
      v27(v6, v3);
      sub_10000882C((uint64_t)v19, (uint64_t *)&unk_100839C80);
      v27(v15, v3);
      v2 = v26;
      sub_10000882C((uint64_t)v9, (uint64_t *)&unk_100839C80);
      if ((v32 & 1) != 0)
        return;
      goto LABEL_11;
    }
    sub_10000882C((uint64_t)v19, (uint64_t *)&unk_100839C80);
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v15, v3);
  }
  sub_10000882C((uint64_t)v9, (uint64_t *)&unk_10083B370);
LABEL_11:
  sub_10011D420(v33, (uint64_t)v12);
  if (v24((uint64_t)v12, 1, v3) == 1)
  {
    isa = 0;
  }
  else
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v12, v3);
  }
  objc_msgSend(v2, "setMostRecentTargetTemplateIdentifier:", isa);

  v29 = objc_msgSend(v2, "createResolutionTokenMapIfNecessary");
  v30 = String._bridgeToObjectiveC()();
  objc_msgSend(v29, "updateForKey:", v30);

}

uint64_t sub_10039DE60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100847C30);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100847C30);
  if (qword_100837690 != -1)
    swift_once(&qword_100837690, sub_1004A19A4);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872190);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

Swift::Void __swiftcall REMCDSmartList.willSave_Swift()()
{
  void *v0;

  if ((objc_msgSend(v0, "didCleanUpManualSortHintOnMarkingForDeletion") & 1) == 0)
  {
    objc_msgSend(v0, "setDidCleanUpManualSortHintOnMarkingForDeletion:", 1);
    sub_10039DF30();
  }
}

double sub_10039DF30()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  double result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  void *v40;
  id v41;
  void *v42;
  Swift::String v43;
  Swift::Bool v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  os_log_type_t v64;
  id v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  double v74;
  id v75;
  void *v76;
  id v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  uint8_t *v98;
  uint64_t v99;
  id v100;
  _QWORD v101[2];
  uint64_t v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)&v4 = __chkstk_darwin(v2).n128_u64[0];
  v6 = (char *)v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!objc_msgSend(v1, "markedForDeletion", v4))
    return result;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMSmartListTypeCustom);
  v10 = v9;
  v11 = objc_msgSend(v1, "smartListType");
  if (!v11)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v12 = v11;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v15 = v14;

  if (v8 == v13 && v10 == v15)
  {
    v18 = swift_bridgeObjectRelease_n(v10, 2).n128_u64[0];
    goto LABEL_16;
  }
  v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v10, v13, v15, 0);
  swift_bridgeObjectRelease();
  v18 = swift_bridgeObjectRelease().n128_u64[0];
  if ((v17 & 1) == 0)
  {
LABEL_10:
    if (qword_100837360 != -1)
      swift_once(&qword_100837360, sub_10039DE60);
    v19 = type metadata accessor for Logger(0);
    sub_10001AAA8(v19, (uint64_t)qword_100847C30);
    v103 = v1;
    v20 = Logger.logObject.getter(v103);
    v21 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc(22, -1);
      v23 = swift_slowAlloc(64, -1);
      v106 = v23;
      *(_DWORD *)v22 = 136446466;
      v24 = objc_msgSend(v103, "smartListType");
      if (v24)
      {
        v25 = v24;
        v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
        v28 = v27;

      }
      else
      {
        v26 = 0;
        v28 = 0;
      }
      v104 = v26;
      v105 = v28;
      v70 = sub_10001A630((uint64_t *)&unk_10083A370);
      v71 = Optional.descriptionOrNil.getter(v70);
      v73 = v72;
      swift_bridgeObjectRelease();
      v104 = sub_10001A820(v71, v73, &v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105);

      *(_QWORD *)&v74 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v22 + 12) = 2082;
      v75 = objc_msgSend(v103, "remObjectID", v74);
      if (v75)
      {
        v76 = v75;
        v77 = objc_msgSend(v75, "description");

        v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
        v80 = v79;

      }
      else
      {
        v80 = 0xE300000000000000;
        v78 = 7104878;
      }
      v104 = sub_10001A820(v78, v80, &v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "cleanUpManualSortHintIfNeeded: Unexpectedly having a non-custom smart-list getting markedForDeletion {type: %{public}s, remObjectID: %{public}s}", (uint8_t *)v22, 0x16u);
      v81 = (char *)&type metadata for Any + 8;
      v82 = v23;
      v83 = 2;
      goto LABEL_50;
    }

LABEL_44:
    return result;
  }
LABEL_16:
  v29 = objc_msgSend(v1, "remObjectID", *(double *)&v18);
  if (!v29)
  {
    if (qword_100837360 != -1)
      swift_once(&qword_100837360, sub_10039DE60);
    v63 = type metadata accessor for Logger(0);
    sub_10001AAA8(v63, (uint64_t)qword_100847C30);
    v103 = v1;
    v20 = Logger.logObject.getter(v103);
    v64 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v64))
    {
      v22 = swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      v106 = v23;
      *(_DWORD *)v22 = 136446210;
      v65 = objc_msgSend(v103, "smartListType");
      if (v65)
      {
        v66 = v65;
        v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
        v69 = v68;

      }
      else
      {
        v67 = 0;
        v69 = 0;
      }
      v104 = v67;
      v105 = v69;
      v89 = sub_10001A630((uint64_t *)&unk_10083A370);
      v90 = Optional.descriptionOrNil.getter(v89);
      v92 = v91;
      swift_bridgeObjectRelease();
      v104 = sub_10001A820(v90, v92, &v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v64, "cleanUpManualSortHintIfNeeded: Unexpectedly nil smart list remObjectID {type: %{public}s}", (uint8_t *)v22, 0xCu);
      v81 = (char *)&type metadata for Any + 8;
      v82 = v23;
      v83 = 1;
LABEL_50:
      swift_arrayDestroy(v82, v83, v81);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);

      return result;
    }

    goto LABEL_44;
  }
  v30 = v29;
  v31 = objc_msgSend(v29, "uuid");

  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v33 = UUID.uuidString.getter(v32);
  v35 = v34;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v36 = objc_msgSend(v1, "account");
  if (v36
    && (v37 = v36, v38 = objc_msgSend(v36, "remObjectID"), v37, v38))
  {
    v39 = objc_msgSend(v1, "storeControllerManagedObjectContext");
    if (v39)
    {
      v40 = v39;
      v41 = objc_msgSend(v39, "transactionAuthor");
      if (v41
        && (v42 = v41,
            static String._unconditionallyBridgeFromObjectiveC(_:)(v41),
            v42,
            v43._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(RDStoreControllerICCloudContextAuthor),
            v44 = String.hasPrefix(_:)(v43),
            swift_bridgeObjectRelease(),
            swift_bridgeObjectRelease(),
            !v44))
      {
        if (qword_100837360 != -1)
          swift_once(&qword_100837360, sub_10039DE60);
        v93 = type metadata accessor for Logger(0);
        v94 = sub_10001AAA8(v93, (uint64_t)qword_100847C30);
        v95 = swift_bridgeObjectRetain_n(v35, 2);
        v101[1] = v94;
        v96 = Logger.logObject.getter(v95);
        v97 = static os_log_type_t.default.getter(v96);
        if (os_log_type_enabled(v96, v97))
        {
          v98 = (uint8_t *)swift_slowAlloc(12, -1);
          v99 = swift_slowAlloc(32, -1);
          v104 = v99;
          *(_DWORD *)v98 = 136446210;
          swift_bridgeObjectRetain(v35);
          v106 = sub_10001A820(v33, (unint64_t)v35, &v104);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107);
          swift_bridgeObjectRelease_n(v35, 3);
          _os_log_impl((void *)&_mh_execute_header, v96, v97, "cleanUpManualSortHintIfNeeded: CSL was deleted due to user-initiated changes, will delete its associated sort hint {listID: %{public}s}", v98, 0xCu);
          swift_arrayDestroy(v99, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v99, -1, -1);
          swift_slowDealloc(v98, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v35, 2);
        }
        swift_bridgeObjectRetain(v35);
        v100 = v38;
        sub_1000D24B8(2);

        *(_QWORD *)&result = swift_bridgeObjectRelease_n(v35, 2).n128_u64[0];
      }
      else
      {
        if (qword_100837360 != -1)
          swift_once(&qword_100837360, sub_10039DE60);
        v45 = type metadata accessor for Logger(0);
        sub_10001AAA8(v45, (uint64_t)qword_100847C30);
        swift_bridgeObjectRetain(v35);
        v47 = Logger.logObject.getter(v46);
        v48 = static os_log_type_t.default.getter(v47);
        if (os_log_type_enabled(v47, v48))
        {
          v49 = (uint8_t *)swift_slowAlloc(12, -1);
          v50 = swift_slowAlloc(32, -1);
          v104 = v50;
          *(_DWORD *)v49 = 136446210;
          swift_bridgeObjectRetain(v35);
          v106 = sub_10001A820(v33, (unint64_t)v35, &v104);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107);
          swift_bridgeObjectRelease_n(v35, 3);
          _os_log_impl((void *)&_mh_execute_header, v47, v48, "cleanUpManualSortHintIfNeeded: CSL was deleted due to non-user-initiated changes, cleanup is not needed {listID: %{public}s}", v49, 0xCu);
          swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v50, -1, -1);
          swift_slowDealloc(v49, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v35, 2);
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();

    }
  }
  else
  {
    if (qword_100837360 != -1)
      swift_once(&qword_100837360, sub_10039DE60);
    v51 = type metadata accessor for Logger(0);
    sub_10001AAA8(v51, (uint64_t)qword_100847C30);
    v52 = v1;
    swift_bridgeObjectRetain(v35);
    v53 = v52;
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.error.getter(v54);
    if (os_log_type_enabled(v54, v55))
    {
      v56 = swift_slowAlloc(22, -1);
      v57 = swift_slowAlloc(64, -1);
      v106 = v57;
      *(_DWORD *)v56 = 136446466;
      v58 = objc_msgSend(v53, "smartListType");
      v102 = v33;
      v103 = v35;
      if (v58)
      {
        v59 = v58;
        v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
        v62 = v61;

      }
      else
      {
        v60 = 0;
        v62 = 0;
      }
      v104 = v60;
      v105 = v62;
      v84 = sub_10001A630((uint64_t *)&unk_10083A370);
      v85 = Optional.descriptionOrNil.getter(v84);
      v87 = v86;
      swift_bridgeObjectRelease();
      v104 = sub_10001A820(v85, v87, &v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105);

      swift_bridgeObjectRelease();
      *(_WORD *)(v56 + 12) = 2082;
      v88 = (unint64_t)v103;
      swift_bridgeObjectRetain(v103);
      v104 = sub_10001A820(v102, v88, &v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105);
      swift_bridgeObjectRelease_n(v88, 3);
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "cleanUpManualSortHintIfNeeded: Unexpectedly nil smart list account.remObjectID {type: %{public}s, smartListUUIDString: %{public}s}", (uint8_t *)v56, 0x16u);
      swift_arrayDestroy(v57, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v56, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v35, 2);
    }
  }
  return result;
}

Swift::Void __swiftcall REMCDSmartList.didSave_Swift()()
{
  void *v0;

  objc_msgSend(v0, "setDidCleanUpManualSortHintOnMarkingForDeletion:", 0);
}

uint64_t sub_10039ED30(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_100847C80, (uint64_t (*)(uint64_t))&type metadata accessor for REMGroceryDataView.SecondaryGroceryLocaleInvocation, (uint64_t)&protocol conformance descriptor for REMGroceryDataView.SecondaryGroceryLocaleInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10039ED6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100847C48);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100847C48);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_10039EDFC(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE v34[12];
  int v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = sub_10001A630((uint64_t *)&unk_10083FBE0);
  __chkstk_darwin(v3);
  v5 = &v34[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v8 = &v34[-v7];
  __chkstk_darwin(v9);
  v38 = &v34[-v10];
  if (qword_100837958 != -1)
    swift_once(&qword_100837958, sub_1005B83A8);
  v11 = qword_100872288;
  v12 = (void *)swift_retain();
  v13 = sub_1003011F8(v12);
  swift_release(v11);
  if (v13)
  {
    v14 = objc_msgSend(v13, "secondaryGroceryLocalesInfoAsData");
    if (v14)
    {
      v15 = v14;
      v37 = a1;
      v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v18 = v17;

      type metadata accessor for RDSecondaryGroceryLocalesInfo(0);
      sub_10009FC50((unint64_t *)&unk_100850770, type metadata accessor for RDSecondaryGroceryLocalesInfo, (uint64_t)&unk_1006BEC18);
      static REMJSONRepresentable.fromJSONData(_:)(&v41, v16, v18);
      sub_1000A71C8(v16, v18);
      if (v1)
      {

      }
      else
      {
        v21 = v41;
        v22 = *(_QWORD *)(v41 + OBJC_IVAR____TtC7remindd29RDSecondaryGroceryLocalesInfo_secondaryGroceryLocales);
        swift_bridgeObjectRetain(v22);
        swift_release(v21);
        v23 = v38;
        sub_10039F260(v22, (uint64_t)v38);
        if (qword_100837368 != -1)
          swift_once(&qword_100837368, sub_10039ED6C);
        v24 = type metadata accessor for Logger(0);
        sub_10001AAA8(v24, (uint64_t)qword_100847C48);
        sub_10039F3D8((uint64_t)v23, (uint64_t)v8);
        swift_bridgeObjectRetain_n(v22, 2);
        v26 = Logger.logObject.getter(v25);
        v27 = static os_log_type_t.default.getter(v26);
        v28 = v27;
        if (os_log_type_enabled(v26, v27))
        {
          v29 = swift_slowAlloc(18, -1);
          v35 = v28;
          v30 = v29;
          v36 = swift_slowAlloc(32, -1);
          v41 = v36;
          *(_DWORD *)v30 = 136446466;
          sub_10039F3D8((uint64_t)v8, (uint64_t)v5);
          v31 = String.init<A>(describing:)(v5, v3);
          v39 = sub_10001A820(v31, v32, &v41);
          v23 = v38;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
          swift_bridgeObjectRelease();
          sub_10039F420((uint64_t)v8);
          *(_WORD *)(v30 + 12) = 1024;
          swift_bridgeObjectRelease();
          LODWORD(v39) = v22 == 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, (char *)&v39 + 4);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v35, "REMGroceryDataView.SecondaryGroceryLocaleInvocation: %{public}s, isAutomatic: %{BOOL}d", (uint8_t *)v30, 0x12u);
          v33 = v36;
          swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v33, -1, -1);
          swift_slowDealloc(v30, -1, -1);

        }
        else
        {
          swift_bridgeObjectRelease();
          sub_10039F420((uint64_t)v8);

          swift_bridgeObjectRelease();
        }
        sub_10039F3D8((uint64_t)v23, (uint64_t)v5);
        swift_bridgeObjectRelease();
        REMGroceryDataView.SecondaryGroceryLocaleInvocation.Result.init(locale:isAutomatic:)(v5, v22 == 0);

        sub_10039F420((uint64_t)v23);
      }
    }
    else
    {
      v20 = type metadata accessor for Locale(0);
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v5, 1, 1, v20);
      REMGroceryDataView.SecondaryGroceryLocaleInvocation.Result.init(locale:isAutomatic:)(v5, 1);

    }
  }
  else
  {
    v19 = objc_msgSend((id)objc_opt_self(REMError), "noPrimaryActiveCloudKitAccountError");
    swift_willThrow(v19);
  }
}

void sub_10039F260(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = sub_10001A630((uint64_t *)&unk_10083FBE0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((REMGroceryDataView.SecondaryGroceryLocaleInvocation.Parameters.modelBaseLocaleConversion.getter(v6) & 1) != 0)
  {
    sub_10039F460(a1, (uint64_t)v8);
    v9 = type metadata accessor for Locale(0);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
    if ((_DWORD)v11 == 1)
    {
      sub_10039F420((uint64_t)v8);
LABEL_4:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a2, 1, 1, v9);
      return;
    }
    v12 = Locale.identifier.getter(v11);
    v14 = v13;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    type metadata accessor for REMGroceryDummyModel(0);
    v15 = static REMGroceryDummyModel.modelBaseLocale(for:)(v12, v14);
    if (v2)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = v15;
      v18 = v16;
      swift_bridgeObjectRelease();
      if (!v18)
        goto LABEL_4;
      Locale.init(identifier:)(v17, v18);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(a2, 0, 1, v9);
    }
  }
  else
  {
    sub_10039F460(a1, a2);
  }
}

uint64_t sub_10039F3D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_10083FBE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10039F420(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A630((uint64_t *)&unk_10083FBE0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10039F460@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, __n128);
  __n128 v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *ObjCClassFromMetadata;
  id v42;
  id v43;
  _QWORD *v44;
  void (*v45)(char *, uint64_t, uint64_t, __n128);
  id v46;
  id v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  id v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  Class isa;
  id v65;
  uint64_t v66;
  uint64_t v67;
  Class v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t, uint64_t, __n128);
  uint64_t v75;

  v72 = a2;
  v75 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v5 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_10083FBE0);
  __chkstk_darwin(v6);
  v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v9);
  v11 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v13 = a1;
  v14 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v71 - v18;
  __chkstk_darwin(v20);
  v23 = (char *)&v71 - v22;
  if (!v21)
  {
    v40 = sub_10039FD18();
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v40);
    v42 = objc_msgSend(ObjCClassFromMetadata, "daemonUserDefaults");
    v43 = objc_msgSend(v42, "automaticSecondaryGroceryLocales");

    if (v43)
    {
      v44 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v43, &type metadata for String);

      if (v44[2])
      {
        v45 = (void (*)(char *, uint64_t, uint64_t, __n128))v44[5];
        v73 = v44[4];
        v74 = v45;
        swift_bridgeObjectRetain(v45);
        v46 = objc_msgSend(ObjCClassFromMetadata, "daemonUserDefaults", swift_bridgeObjectRelease().n128_f64[0]);
        v47 = objc_msgSend(v46, "automaticSecondaryGroceryLocalesLastModifiedDate");

        v48 = v3;
        if (v47)
        {
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v47);

          v49 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
          v49(v11, v19, v12);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v12);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v12) != 1)
          {
            v50 = ((uint64_t (*)(char *, char *, uint64_t))v49)(v23, v11, v12);
            v51 = static Date.now.getter(v50);
            Date.addingTimeInterval(_:)(v51, 43200.0);
            v52 = static Date.< infix(_:_:)(v19, v16);
            v53 = *(void (**)(char *, uint64_t))(v14 + 8);
            v53(v16, v12);
            v53(v19, v12);
            if ((v52 & 1) != 0)
            {
              v54 = v72;
              Locale.init(identifier:)(v73, v74);
              v53(v23, v12);
              v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56);
              v56 = v54;
              goto LABEL_24;
            }
            v53(v23, v12);
            swift_bridgeObjectRelease();
            goto LABEL_21;
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v11, 1, 1, v12);
        }
        swift_bridgeObjectRelease();
        sub_1000EA320((uint64_t)v11);
LABEL_21:
        v3 = v48;
        goto LABEL_22;
      }
      swift_bridgeObjectRelease();
    }
LABEL_22:
    v59 = objc_msgSend((id)objc_opt_self(ICCloudConfiguration), "sharedConfiguration");
    v60 = sub_1003A150C(v59);

    if (!v60[2])
    {
      swift_bridgeObjectRelease();
      v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v56 = v72;
      v70 = 1;
      return v55(v56, v70, 1, v75);
    }
    v61 = v60[4];
    v62 = v60[5];
    swift_bridgeObjectRetain(v62);
    v63 = objc_msgSend(ObjCClassFromMetadata, "daemonUserDefaults", swift_bridgeObjectRelease().n128_f64[0]);
    static Date.now.getter(v63);
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v12);
    objc_msgSend(v63, "setAutomaticSecondaryGroceryLocalesLastModifiedDate:", isa);

    v65 = objc_msgSend(ObjCClassFromMetadata, "daemonUserDefaults");
    v66 = sub_10001A630((uint64_t *)&unk_10083A340);
    v67 = swift_allocObject(v66, 48, 7);
    *(_OWORD *)(v67 + 16) = xmmword_1006A3C00;
    *(_QWORD *)(v67 + 32) = v61;
    *(_QWORD *)(v67 + 40) = v62;
    swift_bridgeObjectRetain(v62);
    v68 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v65, "setAutomaticSecondaryGroceryLocales:", v68, swift_bridgeObjectRelease().n128_f64[0]);

    v69 = v72;
    Locale.init(identifier:)(v61, v62);
    v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v56 = v69;
LABEL_24:
    v70 = 0;
    return v55(v56, v70, 1, v75);
  }
  v24 = *(_QWORD *)(v21 + 16);
  v71 = v21;
  if (v24)
  {
    v25 = v21 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v26 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16);
    v73 = *(_QWORD *)(v3 + 72);
    v74 = v26;
    v27 = swift_bridgeObjectRetain(v21);
    v28 = v75;
    while (1)
    {
      v74(v8, v25, v28, v27);
      v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v29((uint64_t)v8, 0, 1, v28);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v28) == 1)
        break;
      v30 = v3;
      v31 = *(uint64_t (**)(char *, char *, uint64_t))(v3 + 32);
      v32 = v31(v5, v8, v28);
      v33 = Locale.identifier.getter(v32);
      v35 = v34;
      type metadata accessor for REMGroceryDummyModel(0);
      LOBYTE(v33) = static REMGroceryDummyModel.isSupported(localeIdentifier:)(v33, v35);
      swift_bridgeObjectRelease();
      v28 = v75;
      if ((v33 & 1) != 0)
      {
        v36 = swift_bridgeObjectRelease();
        v37 = v72;
        ((void (*)(uint64_t, char *, uint64_t, __n128))v31)(v72, v5, v28, v36);
        v38 = v37;
        v39 = 0;
        return v29(v38, v39, 1, v28);
      }
      v3 = v30;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v5, v75);
      v25 += v73;
      if (!--v24)
        goto LABEL_15;
    }
  }
  else
  {
    v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v27 = swift_bridgeObjectRetain(v21);
    v28 = v75;
LABEL_15:
    ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v29)(v8, 1, 1, v28, v27);
  }
  v57 = v72;
  swift_bridgeObjectRelease();
  v38 = v57;
  v39 = 1;
  return v29(v38, v39, 1, v28);
}

uint64_t sub_10039FAA0(uint64_t a1)
{
  uint64_t v2;
  Swift::String v3;
  void *object;
  Swift::String v5;

  if (!a1)
    return 0x6974616D6F747561;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease(0xE000000000000000);
  v2 = type metadata accessor for Locale(0);
  v3._countAndFlagsBits = Array.description.getter(a1, v2);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0xD000000000000014;
}

uint64_t sub_10039FB58(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *a1;
  v3 = *a2;
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return (v2 | v3) == 0;
  else
    return sub_100305748(v2, v3);
}

uint64_t sub_10039FB84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC7remindd29RDSecondaryGroceryLocalesInfo_lastModifiedDate;
  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC7remindd29RDSecondaryGroceryLocalesInfo_secondaryGroceryLocales));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10039FBE4()
{
  return type metadata accessor for RDSecondaryGroceryLocalesInfo(0);
}

uint64_t type metadata accessor for RDSecondaryGroceryLocalesInfo(uint64_t a1)
{
  uint64_t result;

  result = qword_100847CB0;
  if (!qword_100847CB0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDSecondaryGroceryLocalesInfo);
  return result;
}

uint64_t sub_10039FC28(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\b";
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSecondaryGroceryLocales()
{
  return &type metadata for RDSecondaryGroceryLocales;
}

uint64_t sub_10039FCAC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = *a2;
  if ((static Date.== infix(_:_:)(*a1 + OBJC_IVAR____TtC7remindd29RDSecondaryGroceryLocalesInfo_lastModifiedDate, *a2 + OBJC_IVAR____TtC7remindd29RDSecondaryGroceryLocalesInfo_lastModifiedDate) & 1) == 0)return 0;
  v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7remindd29RDSecondaryGroceryLocalesInfo_secondaryGroceryLocales);
  v5 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7remindd29RDSecondaryGroceryLocalesInfo_secondaryGroceryLocales);
  if (v4)
  {
    if (v5)
      return sub_100305748(v4, v5);
    return 0;
  }
  return !v5;
}

unint64_t sub_10039FD18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100838020;
  if (!qword_100838020)
  {
    v1 = objc_opt_self(REMDaemonUserDefaults);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100838020);
  }
  return result;
}

void sub_10039FD54(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4[2];

  v2 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = (_QWORD *)sub_1001D6070(v2);
  v3 = v2[2];
  v4[0] = (uint64_t)(v2 + 4);
  v4[1] = v3;
  sub_10039FDBC(v4);
  *a1 = v2;
}

void sub_10039FDBC(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  Swift::Int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  double *v25;
  Swift::Int v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  Swift::Int v35;
  Swift::Int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  Swift::Int v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  char v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  _QWORD *v116;
  Swift::Int v117;
  Swift::Int v118;
  uint64_t v119;
  double *__dst;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_164;
    if (v3)
      sub_1003A0580(0, v3, 1, a1);
    return;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_172;
  v117 = v4;
  v114 = a1;
  if (v3 < 2)
  {
    v9 = _swiftEmptyArrayStorage;
    __dst = (double *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v13 = _swiftEmptyArrayStorage[2];
      v12 = (char *)_swiftEmptyArrayStorage;
LABEL_130:
      v106 = v12;
      v116 = v9;
      if (v13 >= 2)
      {
        v107 = *v114;
        do
        {
          v108 = v13 - 2;
          if (v13 < 2)
            goto LABEL_159;
          if (!v107)
            goto LABEL_171;
          v109 = v106;
          v110 = *(_QWORD *)&v106[16 * v108 + 32];
          v111 = *(_QWORD *)&v106[16 * v13 + 24];
          sub_1003A067C((double *)(v107 + 24 * v110), (double *)(v107 + 24 * *(_QWORD *)&v106[16 * v13 + 16]), v107 + 24 * v111, __dst);
          if (v1)
            break;
          if (v111 < v110)
            goto LABEL_160;
          if ((swift_isUniquelyReferenced_nonNull_native(v109) & 1) == 0)
            v109 = sub_1001D52E4((uint64_t)v109);
          if (v108 >= *((_QWORD *)v109 + 2))
            goto LABEL_161;
          v112 = &v109[16 * v108 + 32];
          *(_QWORD *)v112 = v110;
          *((_QWORD *)v112 + 1) = v111;
          v113 = *((_QWORD *)v109 + 2);
          if (v13 > v113)
            goto LABEL_162;
          memmove(&v109[16 * v13 + 16], &v109[16 * v13 + 32], 16 * (v113 - v13));
          v106 = v109;
          *((_QWORD *)v109 + 2) = v113 - 1;
          v13 = v113 - 1;
        }
        while (v113 > 2);
      }
LABEL_127:
      swift_bridgeObjectRelease();
      v116[2] = 0;
      swift_bridgeObjectRelease();
      return;
    }
    v116 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_10001A630(&qword_10083F448);
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v6, v7);
    *(_QWORD *)(v8 + 16) = v6;
    v116 = (_QWORD *)v8;
    __dst = (double *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v115 = *a1 + 16;
  v12 = (char *)_swiftEmptyArrayStorage;
  v118 = v3;
  v119 = *a1;
  while (1)
  {
    v14 = v10++;
    if (v10 >= v3)
      goto LABEL_27;
    v15 = v11 + 24 * v10;
    v16 = *(double *)(v15 + 16);
    v17 = v11 + 24 * v14;
    v18 = *(double *)(v17 + 16);
    if (v18 >= v16)
    {
      if (v16 != v18
        || ((v21 = *(_QWORD *)(v15 + 8), v22 = *(_QWORD *)(v17 + 8), *(_QWORD *)v17 == *(_QWORD *)v15)
          ? (v23 = v22 == v21)
          : (v23 = 0),
            v23))
      {
        v19 = v14 + 2;
        if (v14 + 2 >= v3)
          goto LABEL_55;
        v20 = 0;
      }
      else
      {
        v24 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v17, v22, *(_QWORD *)v15, v21, 1);
        v20 = v24;
        v19 = v14 + 2;
        if (v14 + 2 >= v3)
        {
          v10 = v14 + 2;
          if ((v24 & 1) != 0)
            goto LABEL_47;
          goto LABEL_27;
        }
      }
    }
    else
    {
      v19 = v14 + 2;
      if (v14 + 2 >= v3)
      {
LABEL_48:
        if (v14 < v19)
        {
          v33 = 24 * v19;
          v34 = 24 * v14;
          v35 = v19;
          v36 = v14;
          do
          {
            if (v36 != --v35)
            {
              if (!v11)
                goto LABEL_170;
              v37 = v11 + v34;
              v38 = v11 + v33;
              v39 = *(_QWORD *)(v11 + v34);
              v40 = *(_QWORD *)(v11 + v34 + 8);
              v41 = *(_QWORD *)(v11 + v34 + 16);
              v42 = *(_QWORD *)(v11 + v33 - 8);
              *(_OWORD *)v37 = *(_OWORD *)(v11 + v33 - 24);
              *(_QWORD *)(v37 + 16) = v42;
              *(_QWORD *)(v38 - 24) = v39;
              *(_QWORD *)(v38 - 16) = v40;
              *(_QWORD *)(v38 - 8) = v41;
            }
            ++v36;
            v33 -= 24;
            v34 += 24;
          }
          while (v36 < v35);
        }
LABEL_55:
        v10 = v19;
        if (v19 < v3)
          break;
        goto LABEL_79;
      }
      v20 = 1;
    }
    v25 = (double *)(v115 + 24 * v19);
    v26 = v19;
    do
    {
      v19 = v26;
      v27 = v11 + 24 * v10;
      v28 = *(double *)(v27 + 16);
      if (v28 < *v25)
      {
        if ((v20 & 1) == 0)
        {
          v10 = v19;
          v3 = v118;
          if (v19 < v118)
            goto LABEL_56;
          goto LABEL_79;
        }
      }
      else if (*v25 != v28
             || ((v29 = *((_QWORD *)v25 - 2),
                  v30 = *((_QWORD *)v25 - 1),
                  v31 = *(_QWORD *)(v27 + 8),
                  *(_QWORD *)v27 == v29)
               ? (v32 = v31 == v30)
               : (v32 = 0),
                 v32))
      {
        if ((v20 & 1) != 0)
        {
          v3 = v118;
          if (v19 < v14)
            goto LABEL_165;
          goto LABEL_48;
        }
      }
      else if (((v20 ^ _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v27, v31, v29, v30, 1)) & 1) != 0)
      {
        goto LABEL_46;
      }
      v26 = v19 + 1;
      v25 += 3;
      v10 = v19;
    }
    while (v19 + 1 < v118);
    ++v19;
LABEL_46:
    v3 = v118;
    v10 = v19;
    if ((v20 & 1) != 0)
    {
LABEL_47:
      if (v19 < v14)
        goto LABEL_165;
      goto LABEL_48;
    }
LABEL_27:
    if (v10 < v3)
      break;
LABEL_79:
    if (v10 < v14)
      goto LABEL_158;
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      v12 = sub_1001D4DF0(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v56 = *((_QWORD *)v12 + 2);
    v55 = *((_QWORD *)v12 + 3);
    v13 = v56 + 1;
    if (v56 >= v55 >> 1)
      v12 = sub_1001D4DF0((char *)(v55 > 1), v56 + 1, 1, v12);
    *((_QWORD *)v12 + 2) = v13;
    v57 = v12 + 32;
    v58 = &v12[16 * v56 + 32];
    *(_QWORD *)v58 = v14;
    *((_QWORD *)v58 + 1) = v10;
    if (v56)
    {
      v11 = v119;
      while (1)
      {
        v59 = v13 - 1;
        if (v13 >= 4)
        {
          v64 = &v57[16 * v13];
          v65 = *((_QWORD *)v64 - 8);
          v66 = *((_QWORD *)v64 - 7);
          v70 = __OFSUB__(v66, v65);
          v67 = v66 - v65;
          if (v70)
            goto LABEL_147;
          v69 = *((_QWORD *)v64 - 6);
          v68 = *((_QWORD *)v64 - 5);
          v70 = __OFSUB__(v68, v69);
          v62 = v68 - v69;
          v63 = v70;
          if (v70)
            goto LABEL_148;
          v71 = v13 - 2;
          v72 = &v57[16 * v13 - 32];
          v74 = *(_QWORD *)v72;
          v73 = *((_QWORD *)v72 + 1);
          v70 = __OFSUB__(v73, v74);
          v75 = v73 - v74;
          if (v70)
            goto LABEL_150;
          v70 = __OFADD__(v62, v75);
          v76 = v62 + v75;
          if (v70)
            goto LABEL_153;
          if (v76 >= v67)
          {
            v94 = &v57[16 * v59];
            v96 = *(_QWORD *)v94;
            v95 = *((_QWORD *)v94 + 1);
            v70 = __OFSUB__(v95, v96);
            v97 = v95 - v96;
            if (v70)
              goto LABEL_157;
            v87 = v62 < v97;
            goto LABEL_117;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v88 = *((_QWORD *)v12 + 4);
            v89 = *((_QWORD *)v12 + 5);
            v70 = __OFSUB__(v89, v88);
            v81 = v89 - v88;
            v82 = v70;
            goto LABEL_111;
          }
          v61 = *((_QWORD *)v12 + 4);
          v60 = *((_QWORD *)v12 + 5);
          v70 = __OFSUB__(v60, v61);
          v62 = v60 - v61;
          v63 = v70;
        }
        if ((v63 & 1) != 0)
          goto LABEL_149;
        v71 = v13 - 2;
        v77 = &v57[16 * v13 - 32];
        v79 = *(_QWORD *)v77;
        v78 = *((_QWORD *)v77 + 1);
        v80 = __OFSUB__(v78, v79);
        v81 = v78 - v79;
        v82 = v80;
        if (v80)
          goto LABEL_152;
        v83 = &v57[16 * v59];
        v85 = *(_QWORD *)v83;
        v84 = *((_QWORD *)v83 + 1);
        v70 = __OFSUB__(v84, v85);
        v86 = v84 - v85;
        if (v70)
          goto LABEL_155;
        if (__OFADD__(v81, v86))
          goto LABEL_156;
        if (v81 + v86 >= v62)
        {
          v87 = v62 < v86;
LABEL_117:
          if (v87)
            v59 = v71;
          goto LABEL_119;
        }
LABEL_111:
        if ((v82 & 1) != 0)
          goto LABEL_151;
        v90 = &v57[16 * v59];
        v92 = *(_QWORD *)v90;
        v91 = *((_QWORD *)v90 + 1);
        v70 = __OFSUB__(v91, v92);
        v93 = v91 - v92;
        if (v70)
          goto LABEL_154;
        if (v93 < v81)
          goto LABEL_15;
LABEL_119:
        v98 = v59 - 1;
        if (v59 - 1 >= v13)
        {
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
          goto LABEL_167;
        }
        if (!v11)
          goto LABEL_169;
        v99 = v12;
        v100 = v11;
        v101 = &v57[16 * v98];
        v102 = *(_QWORD *)v101;
        v103 = &v57[16 * v59];
        v104 = *((_QWORD *)v103 + 1);
        sub_1003A067C((double *)(v100 + 24 * *(_QWORD *)v101), (double *)(v100 + 24 * *(_QWORD *)v103), v100 + 24 * v104, __dst);
        if (v1)
          goto LABEL_127;
        if (v104 < v102)
          goto LABEL_144;
        if (v59 > *((_QWORD *)v99 + 2))
          goto LABEL_145;
        *(_QWORD *)v101 = v102;
        *(_QWORD *)&v57[16 * v98 + 8] = v104;
        v105 = *((_QWORD *)v99 + 2);
        if (v59 >= v105)
          goto LABEL_146;
        v12 = v99;
        v13 = v105 - 1;
        memmove(&v57[16 * v59], v103 + 16, 16 * (v105 - 1 - v59));
        *((_QWORD *)v99 + 2) = v105 - 1;
        v87 = v105 > 2;
        v11 = v119;
        if (!v87)
          goto LABEL_15;
      }
    }
    v13 = 1;
    v11 = v119;
LABEL_15:
    v3 = v118;
    if (v10 >= v118)
    {
      v9 = v116;
      goto LABEL_130;
    }
  }
LABEL_56:
  if (__OFSUB__(v10, v14))
    goto LABEL_163;
  if (v10 - v14 >= v117)
    goto LABEL_79;
  if (__OFADD__(v14, v117))
    goto LABEL_166;
  if (v14 + v117 >= v3)
    v43 = v3;
  else
    v43 = v14 + v117;
  if (v43 >= v14)
  {
    if (v10 != v43)
    {
      v44 = v11 + 24 * v10;
      do
      {
        v45 = v11 + 24 * v10;
        v46 = *(_QWORD *)v45;
        v47 = *(_QWORD *)(v45 + 8);
        v48 = *(double *)(v45 + 16);
        v49 = v14;
        v50 = v44;
        do
        {
          v51 = *(_QWORD *)(v50 - 24);
          v52 = *(double *)(v50 - 8);
          if (v52 >= v48)
          {
            if (v48 != v52)
              break;
            v53 = *(_QWORD *)(v50 - 16);
            v54 = v51 == v46 && v53 == v47;
            if (v54 || (_stringCompareWithSmolCheck(_:_:expecting:)(v51, v53, v46, v47, 1) & 1) == 0)
              break;
          }
          if (!v11)
            goto LABEL_168;
          v46 = *(_QWORD *)v50;
          v47 = *(_QWORD *)(v50 + 8);
          v48 = *(double *)(v50 + 16);
          *(_OWORD *)v50 = *(_OWORD *)(v50 - 24);
          *(_QWORD *)(v50 + 16) = *(_QWORD *)(v50 - 8);
          *(_QWORD *)(v50 - 16) = v47;
          *(double *)(v50 - 8) = v48;
          *(_QWORD *)(v50 - 24) = v46;
          v50 -= 24;
          ++v49;
        }
        while (v10 != v49);
        ++v10;
        v44 += 24;
      }
      while (v10 != v43);
      v10 = v43;
    }
    goto LABEL_79;
  }
LABEL_167:
  __break(1u);
LABEL_168:
  __break(1u);
LABEL_169:
  __break(1u);
LABEL_170:
  __break(1u);
LABEL_171:
  __break(1u);
LABEL_172:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

uint64_t sub_1003A0580(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  double v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  BOOL v17;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 24 * a3;
LABEL_5:
    v9 = (double *)(v7 + 24 * v4);
    v10 = *v9;
    v11 = *((_QWORD *)v9 + 1);
    v12 = v9[2];
    v13 = v6;
    v14 = v8;
    while (1)
    {
      result = *(_QWORD *)(v14 - 24);
      v15 = *(double *)(v14 - 8);
      if (v15 >= v12)
      {
        if (v12 != v15
          || ((v16 = *(_QWORD *)(v14 - 16), result == *(_QWORD *)&v10) ? (v17 = v16 == v11) : (v17 = 0),
              v17
           || (result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v16, *(_QWORD *)&v10, v11, 1),
               (result & 1) == 0)))
        {
LABEL_4:
          ++v4;
          v8 += 24;
          if (v4 == a2)
            return result;
          goto LABEL_5;
        }
      }
      if (!v7)
        break;
      v10 = *(double *)v14;
      v11 = *(_QWORD *)(v14 + 8);
      v12 = *(double *)(v14 + 16);
      *(_OWORD *)v14 = *(_OWORD *)(v14 - 24);
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v14 - 8);
      *(_QWORD *)(v14 - 16) = v11;
      *(double *)(v14 - 8) = v12;
      *(double *)(v14 - 24) = v10;
      v14 -= 24;
      if (v4 == ++v13)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1003A067C(double *__src, double *a2, unint64_t a3, double *__dst)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  double *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  __int128 v20;
  double *v21;
  unint64_t v22;
  double *v23;
  uint64_t v24;
  double *v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  __int128 v34;
  uint64_t result;
  double *v36;
  double *v37;
  double *v38;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = ((char *)a2 - (char *)__src) / 24;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 24;
  v38 = __src;
  v37 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[3 * v11] <= __dst)
        memmove(__dst, a2, 24 * v11);
      v21 = &v4[3 * v11];
      v36 = v21;
      v38 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        v22 = a3 - 24;
        v23 = v6;
        while (1)
        {
          v24 = *((_QWORD *)v21 - 3);
          v25 = (double *)(v22 + 24);
          v26 = *(v21 - 1);
          v28 = *((_QWORD *)v23 - 3);
          v23 -= 3;
          v27 = v28;
          v29 = v23[2];
          if (v29 < v26
            || v26 == v29
            && ((v31 = *((_QWORD *)v21 - 2), v32 = *((_QWORD *)v23 + 1), v27 == v24) ? (v33 = v32 == v31) : (v33 = 0),
                !v33 && (_stringCompareWithSmolCheck(_:_:expecting:)(v27, v32, v24, v31, 1) & 1) != 0))
          {
            if (v25 != v6 || v22 >= (unint64_t)v6)
            {
              v30 = *(_OWORD *)v23;
              *(double *)(v22 + 16) = v23[2];
              *(_OWORD *)v22 = v30;
            }
            v38 = v23;
            if (v23 <= v7)
              goto LABEL_50;
          }
          else
          {
            v36 = v21 - 3;
            if (v25 < v21 || v22 >= (unint64_t)v21 || v25 != v21)
            {
              v34 = *(_OWORD *)(v21 - 3);
              *(double *)(v22 + 16) = *(v21 - 1);
              *(_OWORD *)v22 = v34;
            }
            v23 = v6;
            v21 -= 3;
            if (v6 <= v7)
              goto LABEL_50;
          }
          v22 -= 24;
          v6 = v23;
          if (v21 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[3 * v9] <= __dst)
      memmove(__dst, __src, 24 * v9);
    v12 = &v4[3 * v9];
    v36 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      do
      {
        v13 = v6[2];
        v14 = v4[2];
        if (v14 < v13
          || v13 == v14
          && ((v17 = *((_QWORD *)v6 + 1), v18 = *((_QWORD *)v4 + 1), *(_QWORD *)v4 == *(_QWORD *)v6)
            ? (v19 = v18 == v17)
            : (v19 = 0),
              !v19
           && (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v4, v18, *(_QWORD *)v6, v17, 1) & 1) != 0))
        {
          v15 = v6 + 3;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
          {
            v16 = *(_OWORD *)v6;
            v7[2] = v6[2];
            *(_OWORD *)v7 = v16;
          }
        }
        else
        {
          if (v7 != v4)
          {
            v20 = *(_OWORD *)v4;
            v7[2] = v4[2];
            *(_OWORD *)v7 = v20;
          }
          v4 += 3;
          v37 = v4;
          v15 = v6;
        }
        v7 += 3;
        if (v4 >= v12)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v38 = v7;
    }
LABEL_50:
    sub_1001D4EE8((void **)&v38, (const void **)&v37, &v36);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

unint64_t sub_1003A0988(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  id v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  char v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __n128 v62;
  unsigned __int8 *v63;
  unint64_t v64;
  _BYTE *v65;
  BOOL v66;
  _BYTE *v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  Swift::String v83;
  Swift::String v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  id v105;
  char *v106;
  uint64_t v107;
  char *v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  BOOL v115;
  double v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119[3];
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;

  v2 = type metadata accessor for EntityPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v101 - v7;
  __chkstk_darwin(v9);
  v11 = (char *)&v101 - v10;
  __chkstk_darwin(v12);
  v14 = (char *)&v101 - v13;
  v15 = a1;
  v122 = sub_1002AF0A8((uint64_t)_swiftEmptyArrayStorage);
  v16 = sub_1000C6568();
  v108 = v11;
  v107 = v16;
  v17 = objc_msgSend(v15, "miniumumAutomaticLanguageConfidenceScoreAllowed");
  objc_msgSend(v17, "doubleValue");
  v19 = v18;

  v20 = *(_QWORD *)(v107 + 16);
  if (v20)
  {
    v106 = v8;
    v104 = v5;
    v113 = v2;
    v103 = 0;
    v105 = v15;
    v21 = 0;
    v111 = 0;
    v22 = v107 + 32;
    v23 = 0xE000000000000000;
    v110 = (unint64_t)"secondaryGroceryLocales";
    v109 = 0x8000000100702070;
    v24 = 0.0;
    v114 = 0xE000000000000000;
    v25 = v108;
    while (1)
    {
      v112 = v21;
      sub_100018618(v22, (uint64_t)v119);
      v27 = v120;
      v26 = v121;
      sub_10000A388(v119, v120);
      v28 = dispatch thunk of ExtendedTripleProtocol.predicate.getter(v27, v26);
      v29 = EntityPredicate.rawValue.getter(v28);
      v31 = v30;
      v32 = v3;
      v33 = *(void (**)(char *, uint64_t))(v3 + 8);
      v33(v14, v113);
      if (v29 == 859001680 && v31 == 0xE400000000000000)
        break;
      v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, 859001680, 0xE400000000000000, 0);
      swift_bridgeObjectRelease();
      if ((v34 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
      v38 = v120;
      v39 = v121;
      sub_10000A388(v119, v120);
      v40 = dispatch thunk of ExtendedTripleProtocol.predicate.getter(v38, v39);
      v41 = EntityPredicate.rawValue.getter(v40);
      v43 = v42;
      v33(v25, v113);
      if (v41 == 0xD000000000000013 && v43 == v109)
      {
        swift_bridgeObjectRelease();
LABEL_16:
        swift_bridgeObjectRelease();
        v45 = v120;
        v46 = v121;
        sub_10000A388(v119, v120);
        v21 = dispatch thunk of ExtendedTripleProtocol.object.getter(v45, v46);
        v23 = v47;
LABEL_9:
        v3 = v32;
        goto LABEL_10;
      }
      v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v43, 0xD000000000000013, v110 | 0x8000000000000000, 0);
      swift_bridgeObjectRelease();
      if ((v44 & 1) != 0)
        goto LABEL_16;
      v48 = v120;
      v49 = v121;
      sub_10000A388(v119, v120);
      v50 = v106;
      v51 = dispatch thunk of ExtendedTripleProtocol.predicate.getter(v48, v49);
      v52 = EntityPredicate.rawValue.getter(v51);
      v54 = v53;
      v33(v50, v113);
      if (v52 == 0x69666E6F635F6D6ELL && v54 == 0xED000065636E6564)
      {
        swift_bridgeObjectRelease();
LABEL_21:
        v56 = v120;
        v57 = v121;
        sub_10000A388(v119, v120);
        v58 = dispatch thunk of ExtendedTripleProtocol.object.getter(v56, v57);
        v60 = v59;
        v116 = 0.0;
        v62 = __chkstk_darwin(v58);
        *(&v101 - 2) = (uint64_t)&v116;
        v3 = v32;
        v25 = v108;
        if ((v60 & 0x1000000000000000) == 0 && v60 & 0x2000000000000000 | v61 & 0x1000000000000000)
        {
          if ((v60 & 0x2000000000000000) != 0)
          {
            v117 = v61;
            v118 = v60 & 0xFFFFFFFFFFFFFFLL;
            v68 = (v61 > 0x20u || ((0x100003E01uLL >> v61) & 1) == 0)
               && (v67 = (_BYTE *)_swift_stdlib_strtod_clocale(&v117, &v116, v62)) != 0
               && *v67 == 0;
            v115 = v68;
            swift_bridgeObjectRelease();
          }
          else
          {
            if ((v61 & 0x1000000000000000) != 0)
              v63 = (unsigned __int8 *)((v60 & 0xFFFFFFFFFFFFFFFLL) + 32);
            else
              v63 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v61, v60);
            v64 = *v63;
            v66 = (v64 >= 0x21 || ((0x100003E01uLL >> v64) & 1) == 0)
               && (v65 = (_BYTE *)_swift_stdlib_strtod_clocale(v63, &v116, v62)) != 0
               && *v65 == 0;
            v115 = v66;
LABEL_39:
            swift_bridgeObjectRelease();
          }
          if (v115)
            v24 = v116;
          else
            v24 = 0.0;
LABEL_45:
          v21 = v112;
          goto LABEL_10;
        }
        v89 = v103;
        _StringGuts._slowWithCString<A>(_:)(sub_1003A23F4, &v101 - 4, v61, v60, &type metadata for Bool);
        v103 = v89;
        goto LABEL_39;
      }
      v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v52, v54, 0x69666E6F635F6D6ELL, 0xED000065636E6564, 0);
      swift_bridgeObjectRelease();
      if ((v55 & 1) != 0)
        goto LABEL_21;
      v69 = v120;
      v70 = v121;
      sub_10000A388(v119, v120);
      v71 = v104;
      v72 = dispatch thunk of ExtendedTripleProtocol.predicate.getter(v69, v70);
      v73 = EntityPredicate.rawValue.getter(v72);
      v75 = v74;
      v33(v71, v113);
      v25 = v108;
      if (v73 == 0x6372756F735F6D6ELL && v75 == 0xED00006570795465)
      {
        swift_bridgeObjectRelease();
        v3 = v32;
      }
      else
      {
        v76 = _stringCompareWithSmolCheck(_:_:expecting:)(v73, v75, 0x6372756F735F6D6ELL, 0xED00006570795465, 0);
        swift_bridgeObjectRelease();
        v3 = v32;
        if ((v76 & 1) == 0)
          goto LABEL_45;
      }
      v77 = v120;
      v78 = v121;
      sub_10000A388(v119, v120);
      v79 = dispatch thunk of ExtendedTripleProtocol.object.getter(v77, v78);
      v81 = sub_1000C59FC(v79, v80);
      swift_bridgeObjectRelease();
      if ((v81 & 1) == 0)
        goto LABEL_45;
      v82 = HIBYTE(v23) & 0xF;
      v21 = v112;
      if ((v23 & 0x2000000000000000) == 0)
        v82 = v112 & 0xFFFFFFFFFFFFLL;
      if (v82)
      {
        v117 = v111;
        v118 = v114;
        swift_bridgeObjectRetain(v114);
        v83._countAndFlagsBits = 95;
        v83._object = (void *)0xE100000000000000;
        String.append(_:)(v83);
        swift_bridgeObjectRetain(v23);
        v84._countAndFlagsBits = v21;
        v84._object = (void *)v23;
        String.append(_:)(v84);
        swift_bridgeObjectRelease();
        v85 = v117;
        v86 = v118;
        if (v19 <= v24)
          goto LABEL_54;
      }
      else
      {
        v86 = v114;
        swift_bridgeObjectRetain(v114);
        v85 = v111;
        if (v19 <= v24)
        {
LABEL_54:
          v87 = v122;
          v102 = v85;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v122);
          v117 = v87;
          v122 = 0x8000000000000000;
          sub_10028B71C(v102, v86, isUniquelyReferenced_nonNull_native, v24);
          v122 = v117;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
      }
      swift_bridgeObjectRelease();
LABEL_10:
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v119);
      v22 += 40;
      if (!--v20)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v15 = v105;
        goto LABEL_58;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_8:
    swift_bridgeObjectRelease();
    v35 = v120;
    v36 = v121;
    sub_10000A388(v119, v120);
    v111 = dispatch thunk of ExtendedTripleProtocol.object.getter(v35, v36);
    v114 = v37;
    v21 = 0;
    v23 = 0xE000000000000000;
    v24 = 0.0;
    goto LABEL_9;
  }
  swift_bridgeObjectRelease();
LABEL_58:
  if (qword_100836C98 != -1)
    swift_once(&qword_100836C98, sub_1000C4C4C);
  v90 = type metadata accessor for Logger(0);
  sub_10001AAA8(v90, (uint64_t)qword_100839868);
  v91 = v122;
  swift_bridgeObjectRetain_n(v122, 2);
  v93 = Logger.logObject.getter(v92);
  v94 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v93, v94))
  {
    v95 = (uint8_t *)swift_slowAlloc(12, -1);
    v96 = swift_slowAlloc(32, -1);
    v119[0] = v96;
    *(_DWORD *)v95 = 136315138;
    v97 = Dictionary.description.getter(v91, &type metadata for String, &type metadata for Double, &protocol witness table for String);
    v117 = sub_10001A820(v97, v98, v119);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118);
    swift_bridgeObjectRelease_n(v91, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v93, v94, "Automatic Languages: %s", v95, 0xCu);
    swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v96, -1, -1);
    swift_slowDealloc(v95, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v91, 2);
  }
  swift_beginAccess(&v122, v119, 0, 0);
  v99 = v122;

  return v99;
}

_QWORD *sub_1003A150C(void *a1)
{
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t inited;
  Swift::Int v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  __int128 v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  Swift::Int v58;
  Swift::Int v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  BOOL v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  BOOL v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  void (*v93)(char *, uint64_t);
  char *v94;
  void *v95;
  _QWORD v96[2];
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  Swift::Int v101;
  int v102;
  uint64_t v103;
  char *v104;
  void *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116[9];
  uint64_t v117;
  uint64_t v118;
  char v119[16];
  _QWORD *v120;
  char v121[4];
  Swift::Int v122;

  v114 = type metadata accessor for REMGroceryModelError(0);
  v110 = *(_QWORD *)(v114 - 8);
  v2 = __chkstk_darwin(v114);
  v115 = (char *)v96 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ContinuousClock.Instant(0, v2);
  v107 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v106 = (char *)v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)v96 - v8;
  v10 = type metadata accessor for ContinuousClock(0, v7);
  v108 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for REMFeatureFlags(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v14 + 104))(v17, enum case for REMFeatureFlags.groceryMultilingual(_:), v13, v15);
  v18 = a1;
  LOBYTE(a1) = REMFeatureFlags.isEnabled.getter(v18);
  v19 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  if ((a1 & 1) == 0)
  {

    return _swiftEmptyArrayStorage;
  }
  v105 = v18;
  v103 = v10;
  v20 = ContinuousClock.init()(v19);
  v104 = v9;
  ContinuousClock.now.getter(v20);
  v21 = sub_1000C504C();
  v23 = v22;
  v24 = type metadata accessor for REMGroceryDummyModel(0);
  v25 = static REMGroceryDummyModel.modelBaseLocale(for:)(v21, v23);
  v109 = v12;
  v26 = v25;
  v28 = v27;
  v29 = swift_bridgeObjectRelease();
  if (!v28)
  {
    (*(void (**)(char *, uint64_t, __n128))(v107 + 8))(v104, v4, v29);
    (*(void (**)(char *, uint64_t))(v108 + 8))(v12, v103);

    return _swiftEmptyArrayStorage;
  }
  v30 = sub_10001A630((uint64_t *)&unk_10083A340);
  inited = swift_initStackObject(v30, v121);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  *(_QWORD *)(inited + 32) = v26;
  *(_QWORD *)(inited + 40) = v28;
  v32 = sub_1002E6C54(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1, &type metadata for String);
  v122 = v32;
  v33 = sub_1003A0988(v105);
  swift_bridgeObjectRetain(v33);
  v35 = sub_1001E8600(v34);
  swift_bridgeObjectRelease();
  v116[0] = (uint64_t)v35;
  sub_10039FD54(v116);
  swift_bridgeObjectRelease();
  v36 = v116[0];
  v37 = *(_QWORD *)(v116[0] + 16);
  v98 = v4;
  v113 = v24;
  if (v37)
  {
    v116[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_1001C1B70(0, v37, 0);
    v38 = (_QWORD *)v116[0];
    v112 = v36;
    v39 = (uint64_t *)(v36 + 48);
    do
    {
      v41 = *(v39 - 2);
      v40 = *(v39 - 1);
      v42 = *v39;
      v116[0] = (uint64_t)v38;
      v43 = v38[2];
      v44 = v38[3];
      swift_bridgeObjectRetain(v40);
      if (v43 >= v44 >> 1)
      {
        sub_1001C1B70(v44 > 1, v43 + 1, 1);
        v38 = (_QWORD *)v116[0];
      }
      v38[2] = v43 + 1;
      v45 = &v38[3 * v43];
      v45[4] = v41;
      v45[5] = v40;
      v45[6] = v42;
      v39 += 3;
      --v37;
    }
    while (v37);
    swift_release(v112);
    v4 = v98;
    v12 = v109;
  }
  else
  {
    swift_release(v116[0]);
    v38 = _swiftEmptyArrayStorage;
  }
  v120 = _swiftEmptyArrayStorage;
  v112 = v38[2];
  if (v112)
  {
    v49 = 0;
    v111 = v38 + 4;
    v102 = enum case for REMGroceryModelError.unsupportedLanguage(_:);
    *(_QWORD *)&v48 = 136315138;
    v97 = v48;
    v96[1] = (char *)&type metadata for Any + 8;
    *(_QWORD *)&v48 = 136315394;
    v100 = v48;
    while (1)
    {
      v50 = &v111[3 * v49];
      v52 = *v50;
      v51 = v50[1];
      v53 = v50[2];
      swift_bridgeObjectRetain(v51);
      v54 = static REMGroceryDummyModel.modelBaseLocale(for:)(v52, v51);
      v56 = v55;
      if (!v55)
      {
        swift_bridgeObjectRelease();
        goto LABEL_42;
      }
      v57 = v54;
      v58 = v122;
      if (!*(_QWORD *)(v122 + 16))
        goto LABEL_36;
      Hasher.init(_seed:)(v116, *(_QWORD *)(v122 + 40));
      swift_bridgeObjectRetain(v58);
      String.hash(into:)(v116, v57, v56);
      v59 = Hasher._finalize()();
      v60 = -1 << *(_BYTE *)(v58 + 32);
      v61 = v59 & ~v60;
      v101 = v58 + 56;
      if (((*(_QWORD *)(v58 + 56 + ((v61 >> 3) & 0xFFFFFFFFFFFFF8)) >> v61) & 1) == 0)
        goto LABEL_35;
      v96[0] = *(_QWORD *)(v58 + 48);
      v62 = (_QWORD *)(v96[0] + 16 * v61);
      v63 = v62[1];
      v64 = *v62 == v57 && v56 == v63;
      if (!v64 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v62, v63, v57, v56, 0) & 1) == 0)
      {
        v99 = ~v60;
        v65 = (v61 + 1) & ~v60;
        v66 = v96[0];
        if (((*(_QWORD *)(v101 + ((v65 >> 3) & 0xFFFFFFFFFFFFF8)) >> v65) & 1) == 0)
        {
LABEL_35:
          swift_bridgeObjectRelease();
LABEL_36:
          v70 = v120;
          if ((swift_isUniquelyReferenced_nonNull_native(v120) & 1) == 0)
            v70 = sub_1002C8330(0, v70[2] + 1, 1, v70);
          v72 = v70[2];
          v71 = v70[3];
          if (v72 >= v71 >> 1)
            v70 = sub_1002C8330((_QWORD *)(v71 > 1), v72 + 1, 1, v70);
          v70[2] = v72 + 1;
          v73 = &v70[3 * v72];
          v73[4] = v52;
          v73[5] = v51;
          v73[6] = v53;
          v120 = v70;
          sub_1002DB0E4(v116, v57, v56);
          goto LABEL_41;
        }
        while (1)
        {
          v67 = (_QWORD *)(v66 + 16 * v65);
          v68 = v67[1];
          v69 = *v67 == v57 && v56 == v68;
          if (v69 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v67, v68, v57, v56, 0) & 1) != 0)
            break;
          v65 = (v65 + 1) & v99;
          if (((*(_QWORD *)(v101 + ((v65 >> 3) & 0xFFFFFFFFFFFFF8)) >> v65) & 1) == 0)
            goto LABEL_35;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_41:
      swift_bridgeObjectRelease();
      v12 = v109;
LABEL_42:
      if (v120[2] < 2uLL && ++v49 != v112)
        continue;
      swift_bridgeObjectRelease();
      v4 = v98;
      goto LABEL_45;
    }
  }
  swift_bridgeObjectRelease();
LABEL_45:
  swift_bridgeObjectRelease();
  v74 = v106;
  ContinuousClock.now.getter(v75);
  v76 = v104;
  v77 = ContinuousClock.Instant.duration(to:)(v74);
  v79 = v78;
  if (qword_100836C98 != -1)
    swift_once(&qword_100836C98, sub_1000C4C4C);
  v80 = type metadata accessor for Logger(0);
  v81 = sub_10001AAA8(v80, (uint64_t)qword_100839868);
  v82 = Logger.logObject.getter(v81);
  v83 = static os_log_type_t.default.getter(v82);
  if (os_log_type_enabled(v82, v83))
  {
    v84 = swift_slowAlloc(22, -1);
    v85 = swift_slowAlloc(64, -1);
    v116[0] = v85;
    *(_DWORD *)v84 = 136315394;
    v86 = Duration.description.getter(v77, v79);
    v118 = sub_10001A820(v86, v87, v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, v119);
    swift_bridgeObjectRelease();
    *(_WORD *)(v84 + 12) = 2080;
    swift_beginAccess(&v120, &v118, 0, 0);
    v88 = v120;
    swift_bridgeObjectRetain(v120);
    v89 = sub_10001A630(&qword_100843908);
    v90 = Array.description.getter(v88, v89);
    v92 = v91;
    swift_bridgeObjectRelease();
    v117 = sub_10001A820(v90, v92, v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v82, v83, "automaticGroceryLocaleIDsWithConfidences finished {duration: %s sec}, results: %s)", (uint8_t *)v84, 0x16u);
    swift_arrayDestroy(v85, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v85, -1, -1);
    swift_slowDealloc(v84, -1, -1);

    v93 = *(void (**)(char *, uint64_t))(v107 + 8);
    v93(v106, v4);
    v94 = v104;
  }
  else
  {

    v93 = *(void (**)(char *, uint64_t))(v107 + 8);
    v93(v106, v4);
    v94 = v76;
  }
  v93(v94, v4);
  (*(void (**)(char *, uint64_t))(v108 + 8))(v12, v103);
  v95 = v105;
  swift_beginAccess(&v120, v116, 0, 0);
  v46 = v120;

  return v46;
}

_BYTE *sub_1003A23F4@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t sub_1003A2460()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100847D40);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100847D40);
  if (qword_100837690 != -1)
    swift_once(&qword_100837690, sub_1004A19A4);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872190);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1003A24F0(uint64_t a1, NSString a2, char a3)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;
  NSString v16;
  char v18;
  uint64_t v19;
  char v20;
  id v21;
  NSString v22;
  uint64_t v23;

  v4 = v3;
  v8 = type metadata accessor for REMFeatureFlags(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(v4, "recentlyDeletedInfoChecksum");
  if (!v12)
  {
    if (!a2)
      return;
    goto LABEL_10;
  }
  v13 = v12;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v16 = v15;

  if (!a2)
  {
    swift_bridgeObjectRelease(v16);
LABEL_12:
    objc_msgSend(v4, "setRecentlyDeletedInfoChecksum:", a2);

    if ((a3 & 1) != 0)
    {
      v19 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for REMFeatureFlags.recentlyDeletedList(_:), v8);
      v20 = REMFeatureFlags.isEnabled.getter(v19);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v20 & 1) != 0)
      {
        v21 = objc_msgSend(v4, "createResolutionTokenMapIfNecessary");
        v22 = String._bridgeToObjectiveC()();
        objc_msgSend(v21, "updateForKey:", v22);

      }
    }
    return;
  }
  if (v14 == a1 && v16 == a2)
  {
    swift_bridgeObjectRelease(v16);
    return;
  }
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, a1, a2, 0);
  swift_bridgeObjectRelease(v16);
  if ((v18 & 1) == 0)
  {
LABEL_10:
    a2 = String._bridgeToObjectiveC()();
    goto LABEL_12;
  }
}

uint64_t sub_1003A26D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100847D58);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100847D58);
  if (qword_100837620 != -1)
    swift_once(&qword_100837620, sub_1004A181C);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872040);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1003A2760()
{
  sub_100294E2C();
}

unint64_t sub_1003A2780(uint64_t a1)
{
  unint64_t result;

  result = sub_1003A27A4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1003A27A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100847DA8;
  if (!qword_100847DA8)
  {
    v1 = type metadata accessor for REMRemindersListDataView.ListInvocation(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for REMRemindersListDataView.ListInvocation, v1);
    atomic_store(result, (unint64_t *)&qword_100847DA8);
  }
  return result;
}

uint64_t sub_1003A27EC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v32 = a6;
  v33 = a4;
  v29 = a3;
  v30 = a5;
  v31 = a2;
  v28 = a1;
  v6 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v28 - v14;
  v16 = _s10PredicatesOMa(0);
  __chkstk_darwin(v16);
  v18 = (id *)((char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = (char *)v18 + *(int *)(sub_10001A630(&qword_100846690) + 48);
  *v18 = objc_msgSend(v28, "objectID");
  v20 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v21 = v19;
  v22 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v21, v29, v20);
  swift_storeEnumTagMultiPayload(v18, v16, 8);
  sub_10000D2C0();
  v24 = v23;
  sub_10001C744((uint64_t)v18, _s10PredicatesOMa);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v30, v6);
  swift_storeEnumTagMultiPayload(v12, v10, 5);
  sub_1004957D0((uint64_t)v9, (uint64_t)v12, (uint64_t)v15);
  v25 = v34;
  v26 = sub_100496780(v31, (uint64_t)v24, (uint64_t)v15, 0, 0, v22, v33, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, v32, 0);
  if (!v25)
  {
    v10 = (uint64_t)v26;
    swift_bridgeObjectRelease();
  }
  sub_10001C744((uint64_t)v15, _s9UtilitiesO12SortingStyleOMa);

  return v10;
}

uint64_t sub_1003A2A3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100847D70);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100847D70);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1003A2ACC(void (*a1)(char *, uint64_t, uint64_t)@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X3>, objc_class *a4@<X4>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t Subtasks;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  objc_class *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  __n128 v62;
  void (*v63)(uint64_t, uint64_t);
  void *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  void *v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(char *, uint64_t, uint64_t);
  char *v98;
  char *v99;
  uint64_t v100;
  NSObject *v101;
  int v102;
  uint64_t v103;
  objc_class *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  objc_class *v112;
  uint64_t v113;
  void (*v114)(char *, uint64_t, __n128);
  __n128 v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  __n128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __n128 v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  id v134;
  objc_class *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *v162;
  void (*v163)(char *, uint64_t, uint64_t);
  objc_class *v164;
  uint64_t v165;

  v162 = a3;
  v155 = a2;
  v163 = a1;
  v143 = a5;
  v144 = type metadata accessor for REMRemindersListDataView.FlatModel(0, a6);
  v142 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144);
  v141 = (char *)&v127 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v146 = (char *)&v127 - v9;
  v149 = _s10PredicatesOMa(0);
  __chkstk_darwin(v149);
  v150 = (char **)((char *)&v127 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_10001A630(&qword_100839A98);
  __chkstk_darwin(v11);
  v137 = (uint64_t)&v127 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch(0);
  v151 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148);
  v147 = (uint64_t *)((char *)&v127 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  v154 = (char *)&v127 - v15;
  v16 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v152 = *(_QWORD *)(v16 - 8);
  v153 = v16;
  __chkstk_darwin(v16);
  v140 = (char *)&v127 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v139 = (char *)&v127 - v19;
  __chkstk_darwin(v20);
  v145 = (char *)&v127 - v21;
  __chkstk_darwin(v22);
  v156 = (uint64_t)&v127 - v23;
  v24 = sub_10001A630(&qword_100839AA0);
  __chkstk_darwin(v24);
  v138 = (uint64_t)&v127 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v158 = (uint64_t)&v127 - v27;
  v28 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v29 = *(_QWORD **)(v28 - 8);
  v159 = v28;
  v160 = v29;
  __chkstk_darwin(v28);
  v31 = (char *)&v127 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v33 = *(_QWORD *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  v35 = (char *)&v127 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v37 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v39 = (char *)&v127 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v42 = (char *)&v127 - v41;
  v43 = v161;
  v44 = sub_1003A38B8((uint64_t)a4, v163, v162);
  if (v43)
    return;
  v128 = v42;
  v129 = v37;
  v130 = v35;
  v131 = v33;
  v132 = v31;
  v133 = Subtasks;
  v127 = v39;
  v136 = v36;
  v135 = a4;
  v161 = 0;
  v134 = v44;
  v45 = objc_msgSend(v44, "accountID");
  v46 = (uint64_t)v163;
  v47 = objc_msgSend(v163, "persistentStoreOfAccountWithAccountID:", v45);

  if (v47)
  {
    v49 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v50 = swift_allocObject(v49, 40, 7);
    *(_OWORD *)(v50 + 16) = xmmword_1006A7330;
    *(_QWORD *)(v50 + 32) = v47;
    v164 = (objc_class *)v50;
    v48 = specialized Array._endMutation()(v50);
    v51 = v164;
  }
  else
  {
    v51 = 0;
  }
  v52 = (uint64_t)v132;
  v53 = (uint64_t)v130;
  v54 = (uint64_t)v128;
  v55 = (void *)REMRemindersListDataView.ListInvocation.Parameters.list.getter(v48);
  v56 = ((uint64_t (*)(void))REMRemindersListDataView.ListInvocation.Parameters.showCompleted.getter)();
  v57 = REMRemindersListDataView.ListInvocation.Parameters.fetchSubtasks.getter(v56);
  REMRemindersListDataView.ListInvocation.Parameters.sortingStyle.getter(v57);
  v58 = v161;
  v59 = sub_1003A27EC(v55, v46, v54, v53, v52, (uint64_t)v51);
  v60 = v133;
  v61 = v160;
  if (v58)
  {

    v62 = swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t, __n128))v61[1])(v52, v159, v62);
    (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v53, v60);
    (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v54, v136);
    return;
  }
  v132 = (char *)v59;
  v135 = v51;

  ((void (*)(uint64_t, uint64_t))v61[1])(v52, v159);
  (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v53, v60);
  v63 = *(void (**)(uint64_t, uint64_t))(v129 + 8);
  v63(v54, v136);
  v64 = v157;
  sub_1003A3770(v46, v158);
  v65 = objc_msgSend(v64, "fetchResultTokenToDiffAgainst");
  sub_100493C24(v65, v46, v156);
  v161 = 0;

  REMRemindersListDataView.ListInvocation.Parameters.remindersPrefetch.getter();
  v66 = v151;
  v67 = v148;
  v68 = v147;
  (*(void (**)(void))(v151 + 16))();
  v69 = (*(uint64_t (**)(uint64_t *, uint64_t))(v66 + 88))(v68, v67);
  if (v69 == enum case for REMRemindersListDataView.RemindersPrefetch.initial(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v66 + 96))(v68, v67);
    v70 = *v68;
    v71 = (uint64_t)v132;
    swift_bridgeObjectRetain(v132);
    v72 = sub_10049BB18(v70, v71, v46, v162, v135);
LABEL_11:
    v160 = v72;
    v162 = _swiftEmptyArrayStorage;
    goto LABEL_12;
  }
  v73 = v162;
  if (v69 == enum case for REMRemindersListDataView.RemindersPrefetch.updatedInserted(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v66 + 96))(v68, v67);
    v74 = *v68;
    v71 = (uint64_t)v132;
    swift_bridgeObjectRetain(v132);
    v72 = sub_10049C4C8(v74, v156, v46, v73, v135);
    goto LABEL_11;
  }
  if (v69 != enum case for REMRemindersListDataView.RemindersPrefetch.initialAndDateRange(_:))
  {
    if (v69 != enum case for REMRemindersListDataView.RemindersPrefetch.none(_:))
    {
      _diagnoseUnexpectedEnumCase<A>(type:)(v67, v67);
      __break(1u);
      return;
    }
    v162 = _swiftEmptyArrayStorage;
    v160 = _swiftEmptyArrayStorage;
    v71 = (uint64_t)v132;
    goto LABEL_13;
  }
  (*(void (**)(uint64_t *, uint64_t))(v66 + 96))(v68, v67);
  v108 = *v68;
  v109 = sub_10001A630(&qword_100839AA8);
  v110 = v137;
  sub_100128FE0((uint64_t)v68 + *(int *)(v109 + 48), v137);
  v71 = (uint64_t)v132;
  swift_bridgeObjectRetain(v132);
  v111 = v108;
  v66 = v151;
  v112 = v135;
  v160 = sub_10049BB18(v111, v71, 0, v73, v135);
  v113 = (uint64_t)v112;
  v46 = 0;
  v162 = sub_10049CB18(v110, v71, 0, v73, v113);
  sub_10000882C(v110, &qword_100839A98);
LABEL_12:
  swift_bridgeObjectRelease();
LABEL_13:
  v75 = (uint64_t)v127;
  v76 = swift_bridgeObjectRelease();
  v77 = (*(uint64_t (**)(char *, uint64_t, __n128))(v66 + 8))(v154, v67, v76);
  v78 = (void *)REMRemindersListDataView.ListInvocation.Parameters.list.getter(v77);
  v79 = objc_msgSend(v78, "objectID");

  v80 = v149;
  v81 = (uint64_t)v150;
  *v150 = v79;
  swift_storeEnumTagMultiPayload(v81, v80, 6);
  sub_10000D2C0();
  v83 = v82;
  v84 = sub_10001C744(v81, _s10PredicatesOMa);
  REMRemindersListDataView.ListInvocation.Parameters.showCompleted.getter(v84);
  v85 = v158;
  v86 = v161;
  v87 = sub_10049E524(v46, (uint64_t)v83, v158, v75, v71);
  v161 = v86;
  if (v86)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v63(v75, v136);
    (*(void (**)(uint64_t, uint64_t))(v152 + 8))(v156, v153);
    v88 = v85;
  }
  else
  {
    v89 = v87;
    v63(v75, v136);

    v90 = v138;
    sub_100129028(v85, v138);
    swift_bridgeObjectRetain(v71);
    v91 = v146;
    REMRemindersListDataView.FlatModel.init(reminders:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)(v92, v90, v89 & 1, v160, v162);
    v93 = v156;
    if (qword_100837380 != -1)
      swift_once(&qword_100837380, sub_1003A2A3C);
    v94 = type metadata accessor for Logger(0);
    sub_10001AAA8(v94, (uint64_t)qword_100847D70);
    v95 = v152;
    v96 = v153;
    v97 = *(void (**)(char *, uint64_t, uint64_t))(v152 + 16);
    v98 = v145;
    v97(v145, v93, v153);
    v99 = v139;
    v163 = v97;
    v97(v139, v93, v96);
    swift_bridgeObjectRetain(v71);
    v101 = Logger.logObject.getter(v100);
    v102 = static os_log_type_t.default.getter(v101);
    if (os_log_type_enabled(v101, (os_log_type_t)v102))
    {
      LODWORD(v162) = v102;
      v103 = swift_slowAlloc(32, -1);
      *(_DWORD *)v103 = 134218496;
      v104 = *(objc_class **)(v71 + 16);
      swift_bridgeObjectRelease();
      v164 = v104;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, &v165);
      swift_bridgeObjectRelease();
      *(_WORD *)(v103 + 12) = 2048;
      v106 = REMRemindersListDataView.Diff.updatedReminderObjectIDs.getter(v105);
      if ((v106 & 0xC000000000000001) != 0)
      {
        if (v106 >= 0)
          v106 &= 0xFFFFFFFFFFFFFF8uLL;
        v107 = __CocoaSet.count.getter(v106);
      }
      else
      {
        v107 = *(_QWORD *)(v106 + 16);
      }
      v118 = v153;
      v119 = swift_bridgeObjectRelease();
      v114 = *(void (**)(char *, uint64_t, __n128))(v152 + 8);
      v114(v145, v118, v119);
      v164 = (objc_class *)v107;
      v120 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, &v165);
      *(_WORD *)(v103 + 22) = 2048;
      v121 = REMRemindersListDataView.Diff.insertedReminderObjectIDs.getter(v120);
      if ((v121 & 0xC000000000000001) != 0)
      {
        if (v121 >= 0)
          v121 &= 0xFFFFFFFFFFFFFF8uLL;
        v122 = __CocoaSet.count.getter(v121);
      }
      else
      {
        v122 = *(_QWORD *)(v121 + 16);
      }
      v123 = swift_bridgeObjectRelease();
      v114(v99, v118, v123);
      v164 = (objc_class *)v122;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, &v165);
      _os_log_impl((void *)&_mh_execute_header, v101, (os_log_type_t)v162, "reminders %ld updated %ld inserted %ld", (uint8_t *)v103, 0x20u);
      swift_slowDealloc(v103, -1, -1);

      v116 = v142;
      v117 = v141;
      v91 = v146;
      v96 = v118;
    }
    else
    {
      v114 = *(void (**)(char *, uint64_t, __n128))(v95 + 8);
      ((void (*)(char *, uint64_t))v114)(v99, v96);
      ((void (*)(char *, uint64_t))v114)(v98, v96);

      v115 = swift_bridgeObjectRelease_n(v71, 2);
      v116 = v142;
      v117 = v141;
    }
    v124 = v144;
    (*(void (**)(char *, char *, uint64_t, __n128))(v116 + 16))(v117, v91, v144, v115);
    v125 = v140;
    v126 = v156;
    v163(v140, v156, v96);
    REMRemindersListDataView.ListInvocation.Result.init(model:diff:list:)(v117, v125, v134);
    (*(void (**)(char *, uint64_t))(v116 + 8))(v91, v124);
    ((void (*)(uint64_t, uint64_t))v114)(v126, v96);
    v88 = v158;
  }
  sub_10000882C(v88, &qword_100839AA0);
}

void sub_1003A3770(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = _s10PredicatesOMa(0);
  v6 = __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((REMRemindersListDataView.ListInvocation.Parameters.countCompleted.getter(v6) & 1) != 0)
  {
    v9 = (void *)REMRemindersListDataView.ListInvocation.Parameters.list.getter();
    v10 = objc_msgSend(v9, "objectID");

    *v8 = v10;
    swift_storeEnumTagMultiPayload(v8, v5, 6);
    sub_10000D2C0();
    v12 = v11;
    sub_10001C744((uint64_t)v8, _s10PredicatesOMa);
    sub_1004934D8(a1, (uint64_t)v12);
    if (!v2)
    {
      v13 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a2, 0, 1, v13);
    }

  }
  else
  {
    v14 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a2, 1, 1, v14);
  }
}

void *sub_1003A38B8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v26;
  _BYTE v27[40];
  uint64_t v28;

  v6 = (void *)REMRemindersListDataView.ListInvocation.Parameters.list.getter();
  v7 = objc_msgSend(v6, "objectID");

  v9 = (void *)REMObjectID.codable.getter(v8);
  v10 = type metadata accessor for REMListStableSortingDataView.Invocation(0);
  v11 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v10)), "init");
  v12 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v12, v27);
  *(_OWORD *)(inited + 16) = xmmword_1006A7330;
  *(_QWORD *)(inited + 32) = v9;
  v28 = inited;
  specialized Array._endMutation()(inited);
  v14 = v28;
  if ((unint64_t)v28 >> 62)
  {
    if (v28 < 0)
      v19 = v28;
    else
      v19 = v28 & 0xFFFFFFFFFFFFFF8;
    v20 = v9;
    swift_bridgeObjectRetain(v14);
    v21 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease();
    if (v21)
      goto LABEL_3;
  }
  else
  {
    v15 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
    v16 = v9;
    if (v15)
    {
LABEL_3:
      sub_1002E7B70(v14);
      v18 = v17;
      goto LABEL_9;
    }
  }
  v18 = &_swiftEmptySetSingleton;
LABEL_9:
  swift_bridgeObjectRelease();
  sub_1001DDFA4((uint64_t)a2, a3, (uint64_t)v18);
  if (v3)
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    v23 = v22;

    swift_bridgeObjectRelease();
    v24 = v9;
    a2 = sub_1002B1944(v24, v23);

    swift_bridgeObjectRelease();
    if (!a2)
    {
      v26 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v24);
      swift_willThrow(v26);
    }

  }
  return a2;
}

uint64_t sub_1003A3A98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100847DB0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100847DB0);
  if (qword_100837690 != -1)
    swift_once(&qword_100837690, sub_1004A19A4);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872190);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1003A3B28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100847DC8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100847DC8);
  if (qword_100837608 != -1)
    swift_once(&qword_100837608, sub_1004A17C8);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1003A3BB8(void *a1, void *a2, char a3, uint64_t a4)
{
  _QWORD *v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  NSObject *oslog;
  uint64_t v28[3];
  uint64_t v29;
  uint64_t v30;

  if ((a3 & 1) != 0)
  {
    swift_errorRetain(a2);
    if (qword_100837390 != -1)
      swift_once(&qword_100837390, sub_1003A3B28);
    v11 = type metadata accessor for Logger(0);
    sub_10001AAA8(v11, (uint64_t)qword_100847DC8);
    v12 = a1;
    sub_10013D030(a2, 1);
    v13 = v12;
    v14 = sub_10013D030(a2, 1);
    oslog = Logger.logObject.getter(v14);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v15))
    {
      v16 = swift_slowAlloc(22, -1);
      v17 = swift_slowAlloc(64, -1);
      v28[0] = v17;
      *(_DWORD *)v16 = 136315394;
      v18 = v13;
      v19 = objc_msgSend(v18, "description");
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v22 = v21;

      v29 = sub_10001A820(v20, v22, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);

      swift_bridgeObjectRelease(v22);
      *(_WORD *)(v16 + 12) = 2080;
      v29 = (uint64_t)a2;
      swift_errorRetain(a2);
      v23 = sub_10001A630((uint64_t *)&unk_10083AA20);
      v24 = String.init<A>(describing:)(&v29, v23);
      v26 = v25;
      v29 = sub_10001A820(v24, v25, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
      swift_bridgeObjectRelease(v26);
      sub_1001172E0(a2, 1);
      sub_1001172E0(a2, 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v15, "Error fetching record zone %s {error: %s}", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      sub_1001172E0(a2, 1);
    }
    else
    {
      sub_1001172E0(a2, 1);

      sub_1001172E0(a2, 1);
      sub_1001172E0(a2, 1);

    }
  }
  else
  {
    v5 = (_QWORD *)(a4 + 16);
    swift_beginAccess(a4 + 16, v28, 33, 0);
    v6 = a1;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
    v8 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v7 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v8 >= v7 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1);
    v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v6);
    specialized Array._endMutation()(v9);
    swift_endAccess(v28);
  }
}

void sub_1003A3EDC(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  NSObject *oslog;
  uint64_t v13;
  uint64_t v14;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_100837390 != -1)
      swift_once(&qword_100837390, sub_1003A3B28);
    v3 = type metadata accessor for Logger(0);
    sub_10001AAA8(v3, (uint64_t)qword_100847DC8);
    swift_errorRetain(a1);
    v4 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v4);
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      v13 = a1;
      v14 = v7;
      *(_DWORD *)v6 = 136315138;
      swift_errorRetain(a1);
      v8 = sub_10001A630((uint64_t *)&unk_10083AA20);
      v9 = String.init<A>(describing:)(&v13, v8);
      v11 = v10;
      v13 = sub_10001A820(v9, v10, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
      swift_bridgeObjectRelease(v11);
      sub_1000D0278(a1, 1);
      sub_1000D0278(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, "Error fetching record zones {error: %s}", v6, 0xCu);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);

      sub_1000D0278(a1, 1);
    }
    else
    {
      sub_1000D0278(a1, 1);
      sub_1000D0278(a1, 1);
      swift_errorRelease(a1);

    }
  }
}

void sub_1003A40E4(void *a1, void *a2, char a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  Class isa;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  id v42;
  id v43;
  void *v44;
  void *v45;
  void *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  os_log_type_t v54;
  uint64_t v55;
  void *v56;
  id v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  void *v65;
  char v66;
  void *v67;
  char v68;
  uint64_t v69;
  id v70;
  os_log_type_t v71;
  uint8_t *v72;
  void *v73;
  id v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint64_t v85;
  void *v86;
  id v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  void (*v95)(char *);
  uint64_t v96;
  _BYTE *v97;
  double v98;
  void *v99;
  void *v100;
  unsigned int v101;
  id v102;
  id v103;
  id v104;
  id v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  id v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(char *, uint64_t, uint64_t);
  uint64_t v124;
  char *v125;
  NSURL *v126;
  void *v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  NSURL *v134;
  void *v135;
  void *v136;
  uint64_t v137;
  void (*v138)(uint64_t, uint64_t);
  id v139;
  uint64_t v140;
  uint64_t v141;
  id v142;
  uint64_t v143;
  id v144;
  NSObject *v145;
  os_log_type_t v146;
  uint64_t v147;
  id v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  void *v157;
  uint64_t v158;
  unint64_t v159;
  id v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  void (*v168)(char *);
  char *v169;
  __int128 v170;
  void *v171;
  id v172;
  char *v173;
  id v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  NSObject *v180;
  id v181;
  uint64_t v182;
  _QWORD v183[2];
  uint64_t v184;
  id v185[5];
  char v186[24];
  _QWORD v187[2];
  NSURL var20;

  v15 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v15);
  v17 = (char *)&v164 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for URL(0);
  __chkstk_darwin(v18);
  __chkstk_darwin(v19);
  __chkstk_darwin(v20);
  v26 = (char *)&v164 - v25;
  if ((a3 & 1) != 0)
  {
    swift_errorRetain(a2);
    if (qword_100837390 != -1)
      swift_once(&qword_100837390, sub_1003A3B28);
    v51 = type metadata accessor for Logger(0);
    sub_10001AAA8(v51, (uint64_t)qword_100847DC8);
    sub_10013D030(a2, 1);
    v52 = a1;
    sub_10013D030(a2, 1);
    v53 = v52;
    v180 = Logger.logObject.getter(v53);
    v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v180, v54))
    {
      v55 = swift_slowAlloc(22, -1);
      v56 = (void *)swift_slowAlloc(64, -1);
      v185[0] = v56;
      *(_DWORD *)v55 = 136446466;
      v57 = objc_msgSend(v53, "ic_prettyLoggingDescription");
      v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
      v60 = v59;

      v182 = sub_10001A820(v58, v60, (uint64_t *)v185);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v183);

      swift_bridgeObjectRelease(v60);
      *(_WORD *)(v55 + 12) = 2080;
      v182 = (uint64_t)a2;
      swift_errorRetain(a2);
      v61 = sub_10001A630((uint64_t *)&unk_10083AA20);
      v62 = String.init<A>(describing:)(&v182, v61);
      v64 = v63;
      v182 = sub_10001A820(v62, v63, (uint64_t *)v185);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v183);
      swift_bridgeObjectRelease(v64);
      sub_1001172E0(a2, 1);
      sub_1001172E0(a2, 1);
      _os_log_impl((void *)&_mh_execute_header, v180, v54, "Failed in fetchChangesOp.recordWasChangedBlock {recordID: %{public}s, error: %s}", (uint8_t *)v55, 0x16u);
      swift_arrayDestroy(v56, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v56, -1, -1);
      swift_slowDealloc(v55, -1, -1);

      v65 = a2;
      v66 = 1;
LABEL_57:
      sub_1001172E0(v65, v66);
      return;
    }
    sub_1001172E0(a2, 1);

    sub_1001172E0(a2, 1);
    v67 = a2;
    v68 = 1;
    goto LABEL_24;
  }
  v176 = v24;
  v179 = v23;
  v177 = v17;
  v173 = v22;
  v174 = a7;
  v175 = a8;
  v178 = v21;
  sub_10013D030(a2, 0);
  v180 = a2;
  v27 = -[NSObject CKDescriptionPropertiesWithPublic:private:shouldExpand:](v180, "CKDescriptionPropertiesWithPublic:private:shouldExpand:", 1, 1, 1);
  if (!v27)
  {
    sub_1001172E0(a2, 0);
    __break(1u);
    return;
  }
  v28 = v27;
  v29 = objc_msgSend(v27, "jsonify");

  v30 = objc_opt_self(NSMutableDictionary);
  v31 = swift_dynamicCastObjCClass(v29, v30);
  if (!v31)
  {

    if (qword_100837390 != -1)
      swift_once(&qword_100837390, sub_1003A3B28);
    v69 = type metadata accessor for Logger(0);
    sub_10001AAA8(v69, (uint64_t)qword_100847DC8);
    v70 = a1;
    v180 = Logger.logObject.getter(v70);
    v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v180, v71))
    {
      v72 = (uint8_t *)swift_slowAlloc(12, -1);
      v73 = (void *)swift_slowAlloc(32, -1);
      v185[0] = v73;
      *(_DWORD *)v72 = 136446210;
      v74 = objc_msgSend(v70, "ic_prettyLoggingDescription");
      v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
      v77 = v76;

      v182 = sub_10001A820(v75, v77, (uint64_t *)v185);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v183);

      swift_bridgeObjectRelease(v77);
      _os_log_impl((void *)&_mh_execute_header, v180, v71, "Failed to cast record.ckDesriptionProperties to NSMutableDictionary for {recordID:%{public}s}", v72, 0xCu);
      swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v73, -1, -1);
      swift_slowDealloc(v72, -1, -1);
      sub_1001172E0(a2, 0);

LABEL_56:
      v65 = a2;
      v66 = 0;
      goto LABEL_57;
    }
    sub_1001172E0(a2, 0);

    v67 = a2;
    v68 = 0;
LABEL_24:
    sub_1001172E0(v67, v68);

    return;
  }
  v32 = (void *)v31;
  v33 = sub_1003A71C8((uint64_t)v180, a4);
  if (v33)
  {
    v34 = v33;
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v32, "addEntriesFromDictionary:", isa, swift_bridgeObjectRelease(v34).n128_f64[0]);

  }
  v36 = (void *)objc_opt_self(NSJSONSerialization);
  v185[0] = 0;
  v37 = objc_msgSend(v36, "dataWithJSONObject:options:error:", v32, 1, v185);
  v38 = v185[0];
  if (!v37)
  {
    v78 = v38;
    v79 = _convertNSErrorToError(_:)(v38);

    swift_willThrow(v80);
    goto LABEL_18;
  }
  v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v37);
  v41 = v40;

  v42 = -[NSObject recordID](v180, "recordID");
  v43 = objc_msgSend(v42, "recordName");

  v44 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
  v46 = v45;

  v185[0] = v44;
  v185[1] = v46;
  v182 = 47;
  v183[0] = 0xE100000000000000;
  v187[0] = 45;
  v187[1] = 0xE100000000000000;
  v47 = sub_1000E525C();
  v48 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v182, v187, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v47, v47, v47);
  v50 = v49;
  swift_bridgeObjectRelease(v46);
  URL.appendingPathComponent(_:)(v48, v50);
  swift_bridgeObjectRelease(v50);
  Data.write(to:options:)(v26, 0, v39, v41);
  v95 = *(void (**)(char *))(v179 + 8);
  v96 = v178;
  v95(v26);
  if (!-[NSObject containsAssetValues](v180, "containsAssetValues"))
  {
    sub_1001172E0(a2, 0);

    v158 = v39;
    v159 = v41;
LABEL_55:
    sub_1000A71C8(v158, v159);
    goto LABEL_56;
  }
  v166 = v39;
  v167 = v41;
  v97 = (_BYTE *)(a6 + 16);
  *(_QWORD *)&v98 = swift_beginAccess(a6 + 16, v187, 0, 0).n128_u64[0];
  if ((*(_BYTE *)(a6 + 16) & 1) == 0)
  {
    URL._bridgeToObjectiveC()(&var20);
    v100 = v99;
    v185[0] = 0;
    v101 = objc_msgSend(v174, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v99, 1, 0, v185);

    v102 = v185[0];
    if (!v101)
    {
      v160 = v185[0];
      v79 = _convertNSErrorToError(_:)(v102);

      swift_willThrow(v161);
      sub_1000A71C8(v166, v167);
      goto LABEL_18;
    }
    swift_beginAccess(v97, v186, 1, 0);
    *v97 = 1;
    v103 = v102;
  }
  v168 = v95;
  v172 = v29;
  v104 = -[NSObject valueStore](v180, "valueStore", v98);
  v105 = objc_msgSend(v104, "allKeys");

  v106 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v105, &type metadata for String);
  v165 = v106;
  v108 = *(_QWORD *)(v106 + 16);
  if (!v108)
  {
LABEL_54:
    swift_bridgeObjectRelease(v165);
    sub_1001172E0(a2, 0);

    v158 = v166;
    v159 = v167;
    goto LABEL_55;
  }
  v109 = v96;
  v110 = (_QWORD *)(v165 + 40);
  *(_QWORD *)&v107 = 136315138;
  v170 = v107;
  v169 = (char *)&type metadata for Any + 8;
  while (1)
  {
    v111 = *(v110 - 1);
    v112 = *v110;
    *(_QWORD *)&v113 = swift_bridgeObjectRetain(*v110).n128_u64[0];
    v114 = -[NSObject valueStore](v180, "valueStore", v113);
    v115 = sub_1000151B0(0, &qword_100847DE8, CKRecordValueStore_ptr);
    CKRecordKeyValueSetting.subscript.getter(v185, v111, v112, v115);
    swift_bridgeObjectRelease(v112);

    sub_1003A786C((uint64_t)v185, (uint64_t)&v182);
    if (!v184)
    {
      sub_10000882C((uint64_t)&v182, &qword_100847DF0);
      goto LABEL_43;
    }
    v116 = sub_10001A630(&qword_100847DF8);
    v117 = sub_1000151B0(0, &qword_100847E08, CKAsset_ptr);
    if ((swift_dynamicCast(&v181, &v182, v116, v117, 6) & 1) == 0)
      goto LABEL_43;
    v118 = v181;
    v119 = objc_msgSend(v181, "fileURL");
    if (!v119)
    {
      v124 = (uint64_t)v177;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v179 + 56))(v177, 1, 1, v109);
      goto LABEL_42;
    }
    v120 = v119;
    v121 = v176;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v119);

    v122 = v179;
    v123 = *(void (**)(char *, uint64_t, uint64_t))(v179 + 32);
    v124 = (uint64_t)v177;
    v123(v177, v121, v109);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v122 + 56))(v124, 0, 1, v109);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v122 + 48))(v124, 1, v109) != 1)
      break;
LABEL_42:

    sub_10000882C(v124, (uint64_t *)&unk_100839C70);
LABEL_43:
    sub_1003A786C((uint64_t)v185, (uint64_t)&v182);
    if (v184)
    {
      v140 = sub_10001A630(&qword_100847DF8);
      v141 = sub_1000151B0(0, &qword_100847E00, CKPackage_ptr);
      if ((swift_dynamicCast(&v181, &v182, v140, v141, 6) & 1) != 0)
      {
        v142 = v181;
        if (qword_100837390 != -1)
          swift_once(&qword_100837390, sub_1003A3B28);
        v143 = type metadata accessor for Logger(0);
        sub_10001AAA8(v143, (uint64_t)qword_100847DC8);
        v144 = v142;
        v145 = Logger.logObject.getter(v144);
        v146 = static os_log_type_t.default.getter(v145);
        if (os_log_type_enabled(v145, v146))
        {
          v147 = swift_slowAlloc(12, -1);
          v171 = (void *)swift_slowAlloc(32, -1);
          v181 = v171;
          *(_DWORD *)v147 = v170;
          v148 = objc_msgSend(v144, "rootDatabasePath");
          if (v148)
          {
            v149 = v148;
            v150 = static String._unconditionallyBridgeFromObjectiveC(_:)(v148);
            v152 = v151;

          }
          else
          {
            v150 = 0;
            v152 = 0;
          }
          v182 = v150;
          v183[0] = v152;
          v153 = sub_10001A630((uint64_t *)&unk_10083A370);
          v154 = String.init<A>(describing:)(&v182, v153);
          v156 = v155;
          *(_QWORD *)(v147 + 4) = sub_10001A820(v154, v155, (uint64_t *)&v181);

          swift_bridgeObjectRelease(v156);
          _os_log_impl((void *)&_mh_execute_header, v145, v146, "Not pulling in CKPackage, the db of which lives at %s", (uint8_t *)v147, 0xCu);
          v157 = v171;
          swift_arrayDestroy(v171, 1, v169);
          swift_slowDealloc(v157, -1, -1);
          swift_slowDealloc(v147, -1, -1);

          sub_10000882C((uint64_t)v185, &qword_100847DF0);
          v109 = v178;
          goto LABEL_33;
        }

      }
    }
    else
    {
      sub_10000882C((uint64_t)&v182, &qword_100847DF0);
    }
    sub_10000882C((uint64_t)v185, &qword_100847DF0);
LABEL_33:
    v110 += 2;
    if (!--v108)
      goto LABEL_54;
  }
  v125 = v173;
  v123(v173, v124, v109);
  URL._bridgeToObjectiveC()(v126);
  v128 = v127;
  v129 = URL.lastPathComponent.getter();
  v131 = v130;
  v132 = v109;
  v133 = v176;
  URL.appendingPathComponent(_:)(v129, v130);
  swift_bridgeObjectRelease(v131);
  URL._bridgeToObjectiveC()(v134);
  v136 = v135;
  v137 = v133;
  v138 = (void (*)(uint64_t, uint64_t))v168;
  ((void (*)(uint64_t, uint64_t))v168)(v137, v132);
  v182 = 0;
  LODWORD(v131) = objc_msgSend(v174, "moveItemAtURL:toURL:error:", v128, v136, &v182);

  v139 = (id)v182;
  if ((_DWORD)v131)
  {
    v138((uint64_t)v125, v132);

    v109 = v132;
    goto LABEL_43;
  }
  v162 = v139;
  swift_bridgeObjectRelease(v165);
  v79 = _convertNSErrorToError(_:)(v162);

  swift_willThrow(v163);
  sub_1000A71C8(v166, v167);

  v138((uint64_t)v125, v132);
  sub_10000882C((uint64_t)v185, &qword_100847DF0);
  v29 = v172;
LABEL_18:
  if (qword_100837390 != -1)
    swift_once(&qword_100837390, sub_1003A3B28);
  v81 = type metadata accessor for Logger(0);
  sub_10001AAA8(v81, (uint64_t)qword_100847DC8);
  sub_10013D030(a2, 0);
  swift_errorRetain(v79);
  sub_10013D030(a2, 0);
  v82 = swift_errorRetain(v79);
  v83 = Logger.logObject.getter(v82);
  v84 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v83, v84))
  {
    v85 = swift_slowAlloc(22, -1);
    v86 = (void *)swift_slowAlloc(64, -1);
    v185[0] = v86;
    *(_DWORD *)v85 = 136315394;
    v172 = v29;
    sub_10013D030(a2, 0);
    v87 = -[NSObject description](v180, "description");
    v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
    v90 = v89;

    sub_1001172E0(a2, 0);
    v182 = sub_10001A820(v88, v90, (uint64_t *)v185);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v183);
    swift_bridgeObjectRelease(v90);
    sub_1001172E0(a2, 0);
    sub_1001172E0(a2, 0);
    *(_WORD *)(v85 + 12) = 2080;
    v182 = v79;
    swift_errorRetain(v79);
    v91 = sub_10001A630((uint64_t *)&unk_10083AA20);
    v92 = String.init<A>(describing:)(&v182, v91);
    v94 = v93;
    v182 = sub_10001A820(v92, v93, (uint64_t *)v185);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v183);
    swift_bridgeObjectRelease(v94);
    swift_errorRelease(v79);
    swift_errorRelease(v79);
    _os_log_impl((void *)&_mh_execute_header, v83, v84, "Failed to serialize record {record: %s, error: %s}", (uint8_t *)v85, 0x16u);
    swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v86, -1, -1);
    swift_slowDealloc(v85, -1, -1);
    sub_1001172E0(a2, 0);

    swift_errorRelease(v79);
    sub_1001172E0(a2, 0);

  }
  else
  {
    sub_1001172E0(a2, 0);

    sub_1001172E0(a2, 0);
    swift_errorRelease(v79);
    sub_1001172E0(a2, 0);
    sub_1001172E0(a2, 0);
    swift_errorRelease(v79);
    swift_errorRelease(v79);

  }
}

