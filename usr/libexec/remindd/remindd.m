_BYTE *sub_1000051EC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  void *v6;
  id v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  id v35;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v7 = v6;
      v8 = a1;
      v9 = a3;
      v10 = 0;
      goto LABEL_20;
    case 1u:
      v11 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v12 = v11;
      v8 = a1;
      v9 = a3;
      v10 = 1;
      goto LABEL_20;
    case 2u:
      v13 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v14 = v13;
      v8 = a1;
      v9 = a3;
      v10 = 2;
      goto LABEL_20;
    case 3u:
      v15 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      v16 = v15;
      v8 = a1;
      v9 = a3;
      v10 = 3;
      goto LABEL_20;
    case 4u:
      v17 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v17);
      v8 = a1;
      v9 = a3;
      v10 = 4;
      goto LABEL_20;
    case 5u:
      v18 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v18);
      v8 = a1;
      v9 = a3;
      v10 = 5;
      goto LABEL_20;
    case 6u:
      v19 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v20 = v19;
      v8 = a1;
      v9 = a3;
      v10 = 6;
      goto LABEL_20;
    case 7u:
      v21 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(a1, a2, v21);
      v8 = a1;
      v9 = a3;
      v10 = 7;
      goto LABEL_20;
    case 8u:
      v22 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v23 = v22;
      v8 = a1;
      v9 = a3;
      v10 = 8;
      goto LABEL_20;
    case 9u:
      v24 = *(void **)a2;
      v25 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = v24;
      *((_QWORD *)a1 + 1) = v25;
      v26 = v24;
      swift_bridgeObjectRetain(v25);
      v8 = a1;
      v9 = a3;
      v10 = 9;
      goto LABEL_20;
    case 0xAu:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      ((void (*)(void))swift_bridgeObjectRetain)();
      v8 = a1;
      v9 = a3;
      v10 = 10;
      goto LABEL_20;
    case 0xBu:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      ((void (*)(void))swift_bridgeObjectRetain)();
      v8 = a1;
      v9 = a3;
      v10 = 11;
      goto LABEL_20;
    case 0xCu:
      v27 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v27;
      v28 = (void *)*((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 2) = v28;
      ((void (*)(void))swift_bridgeObjectRetain)();
      v29 = v28;
      v8 = a1;
      v9 = a3;
      v10 = 12;
      goto LABEL_20;
    case 0xDu:
      v30 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v31 = v30;
      v8 = a1;
      v9 = a3;
      v10 = 13;
      goto LABEL_20;
    case 0xEu:
      v32 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v33 = v32;
      v8 = a1;
      v9 = a3;
      v10 = 14;
      goto LABEL_20;
    case 0xFu:
      v34 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v35 = v34;
      v8 = a1;
      v9 = a3;
      v10 = 15;
      goto LABEL_20;
    case 0x10u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      ((void (*)(void))swift_bridgeObjectRetain)();
      v8 = a1;
      v9 = a3;
      v10 = 16;
LABEL_20:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *sub_100005470(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  id v26;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = (void *)*a2;
      v7 = (void *)a2[1];
      *a1 = v6;
      a1[1] = v7;
      v8 = v6;
      v9 = v7;
      v10 = a1;
      v11 = a3;
      v12 = 0;
      goto LABEL_11;
    case 1u:
      v13 = (void *)*a2;
      v14 = (void *)a2[1];
      *a1 = v13;
      a1[1] = v14;
      v15 = v13;
      v16 = v14;
      v10 = a1;
      v11 = a3;
      v12 = 1;
      goto LABEL_11;
    case 2u:
      v17 = (void *)*a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v17);
      v10 = a1;
      v11 = a3;
      v12 = 2;
      goto LABEL_11;
    case 3u:
      v18 = (void *)*a2;
      *a1 = *a2;
      v19 = v18;
      v10 = a1;
      v11 = a3;
      v12 = 3;
      goto LABEL_11;
    case 4u:
      v20 = (void *)*a2;
      *a1 = *a2;
      *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
      v21 = v20;
      v10 = a1;
      v11 = a3;
      v12 = 4;
      goto LABEL_11;
    case 5u:
      v22 = (void *)*a2;
      *a1 = *a2;
      v23 = v22;
      v10 = a1;
      v11 = a3;
      v12 = 5;
      goto LABEL_11;
    case 6u:
      v24 = type metadata accessor for UUID(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(a1, a2, v24);
      v10 = a1;
      v11 = a3;
      v12 = 6;
      goto LABEL_11;
    case 7u:
      v25 = (void *)*a2;
      *a1 = *a2;
      v26 = v25;
      v10 = a1;
      v11 = a3;
      v12 = 7;
LABEL_11:
      swift_storeEnumTagMultiPayload(v10, v11, v12);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t sub_1000055EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(const void *, uint64_t, uint64_t);
  uint64_t v30;
  void *v31;
  id v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  id v78;
  void *v79;
  void *v80;
  id v81;
  void *v82;
  id v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  const void *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int (*v92)(const void *, uint64_t, uint64_t);
  uint64_t v93;
  void *v94;
  void *v95;
  id v96;
  void *v97;
  id v98;
  void *v99;
  id v100;
  void *v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  void *v112;
  const void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  void *v118;
  id v119;
  id v120;
  uint64_t v121;
  void *v122;
  const void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  void *v129;
  const void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  id v140;
  void *v141;
  id v142;
  void *v143;
  id v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  id v153;
  uint64_t v154;
  void *v155;
  const void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  void (*v165)(uint64_t, uint64_t, uint64_t);
  uint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  const void *v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int (*v174)(const void *, uint64_t, uint64_t);
  uint64_t v175;
  void *v176;
  id v177;
  void *v178;
  id v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  const void *v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  const void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  const void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      swift_bridgeObjectRetain(v6);
      v7 = a1;
      v8 = a3;
      v9 = 0;
      goto LABEL_98;
    case 1u:
      v10 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      v11 = v10;
      v7 = a1;
      v8 = a3;
      v9 = 1;
      goto LABEL_98;
    case 2u:
      v12 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      v13 = v12;
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_98;
    case 3u:
      v14 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v14);
      v15 = sub_10001A630(&qword_1008466D0);
      v16 = *(int *)(v15 + 48);
      v17 = (uint64_t *)(a1 + v16);
      v18 = (uint64_t *)(a2 + v16);
      v19 = _s10PredicatesO19CompletionPredicateOMa(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18, v19);
      if (EnumCaseMultiPayload == 2)
      {
        v194 = *v18;
        *v17 = *v18;
        swift_bridgeObjectRetain(v194);
        swift_storeEnumTagMultiPayload(v17, v19, 2);
      }
      else if (EnumCaseMultiPayload == 1)
      {
        v195 = type metadata accessor for Date(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v195 - 8) + 16))(v17, v18, v195);
        swift_storeEnumTagMultiPayload(v17, v19, 1);
      }
      else if (EnumCaseMultiPayload)
      {
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        v21 = type metadata accessor for Date(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v17, v18, v21);
        swift_storeEnumTagMultiPayload(v17, v19, 0);
      }
      *(_BYTE *)(a1 + *(int *)(v15 + 64)) = *(_BYTE *)(a2 + *(int *)(v15 + 64));
      v7 = a1;
      v8 = a3;
      v9 = 3;
      goto LABEL_98;
    case 4u:
      v22 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v22);
      v23 = sub_10001A630(&qword_1008466C8);
      v24 = *(int *)(v23 + 48);
      v25 = (void *)(a1 + v24);
      v26 = (const void *)(a2 + v24);
      v27 = type metadata accessor for Date(0);
      v28 = *(_QWORD *)(v27 - 8);
      v29 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
      if (v29(v26, 1, v27))
      {
        v30 = sub_10001A630((uint64_t *)&unk_1008380D0);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v25, v26, v27);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      v181 = *(int *)(v23 + 64);
      v182 = (void *)(a1 + v181);
      v183 = (const void *)(a2 + v181);
      if (v29(v183, 1, v27))
      {
        v184 = sub_10001A630((uint64_t *)&unk_1008380D0);
        memcpy(v182, v183, *(_QWORD *)(*(_QWORD *)(v184 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v182, v183, v27);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v182, 0, 1, v27);
      }
      v7 = a1;
      v8 = a3;
      v9 = 4;
      goto LABEL_98;
    case 5u:
      v31 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v32 = v31;
      v7 = a1;
      v8 = a3;
      v9 = 5;
      goto LABEL_98;
    case 6u:
      v139 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v140 = v139;
      v7 = a1;
      v8 = a3;
      v9 = 6;
      goto LABEL_98;
    case 7u:
      v141 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v142 = v141;
      v7 = a1;
      v8 = a3;
      v9 = 7;
      goto LABEL_98;
    case 8u:
      v33 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v34 = v33;
      v35 = *(int *)(sub_10001A630(&qword_100846690) + 48);
      v36 = a1 + v35;
      v37 = a2 + v35;
      v38 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
      v7 = a1;
      v8 = a3;
      v9 = 8;
      goto LABEL_98;
    case 9u:
      v143 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v144 = v143;
      v145 = sub_10001A630(&qword_1008466C0);
      v146 = *(int *)(v145 + 48);
      v147 = a1 + v146;
      v148 = a2 + v146;
      v149 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v149 - 8) + 16))(v147, v148, v149);
      *(_BYTE *)(a1 + *(int *)(v145 + 64)) = *(_BYTE *)(a2 + *(int *)(v145 + 64));
      v7 = a1;
      v8 = a3;
      v9 = 9;
      goto LABEL_98;
    case 0xAu:
      v39 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v39);
      v40 = *(int *)(sub_10001A630(&qword_1008466B8) + 48);
      v41 = a1 + v40;
      v42 = a2 + v40;
      v43 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
      v7 = a1;
      v8 = a3;
      v9 = 10;
      goto LABEL_98;
    case 0xBu:
      v44 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(a1, a2, v44);
      v7 = a1;
      v8 = a3;
      v9 = 11;
      goto LABEL_98;
    case 0xCu:
      v45 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(a1, a2, v45);
      v7 = a1;
      v8 = a3;
      v9 = 12;
      goto LABEL_98;
    case 0xDu:
      v46 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(a1, a2, v46);
      v47 = *(int *)(sub_10001A630(&qword_1008466B0) + 48);
      v48 = a1 + v47;
      v49 = a2 + v47;
      v50 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
      v7 = a1;
      v8 = a3;
      v9 = 13;
      goto LABEL_98;
    case 0xEu:
      v150 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v150 - 8) + 16))(a1, a2, v150);
      v7 = a1;
      v8 = a3;
      v9 = 14;
      goto LABEL_98;
    case 0xFu:
      v151 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v151 - 8) + 16))(a1, a2, v151);
      v7 = a1;
      v8 = a3;
      v9 = 15;
      goto LABEL_98;
    case 0x10u:
      v152 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      v153 = v152;
      v154 = *(int *)(sub_10001A630(&qword_1008466A8) + 64);
      v155 = (void *)(a1 + v154);
      v156 = (const void *)(a2 + v154);
      v157 = type metadata accessor for Date(0);
      v158 = *(_QWORD *)(v157 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v158 + 48))(v156, 1, v157))
      {
        v159 = sub_10001A630((uint64_t *)&unk_1008380D0);
        memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v158 + 16))(v155, v156, v157);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v158 + 56))(v155, 0, 1, v157);
      }
      v7 = a1;
      v8 = a3;
      v9 = 16;
      goto LABEL_98;
    case 0x11u:
      v160 = type metadata accessor for Date(0);
      v161 = *(_QWORD *)(v160 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v161 + 48))(a2, 1, v160))
      {
        v162 = sub_10001A630((uint64_t *)&unk_1008380D0);
        memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v161 + 16))(a1, a2, v160);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v161 + 56))(a1, 0, 1, v160);
      }
      v189 = sub_10001A630(&qword_1008466A0);
      *(_BYTE *)(a1 + *(int *)(v189 + 48)) = *(_BYTE *)(a2 + *(int *)(v189 + 48));
      v7 = a1;
      v8 = a3;
      v9 = 17;
      goto LABEL_98;
    case 0x12u:
      v51 = *(void **)a2;
      v52 = *(void **)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v52;
      v53 = v51;
      v54 = v52;
      v55 = *(int *)(sub_10001A630(&qword_100846698) + 64);
      v56 = a1 + v55;
      v57 = a2 + v55;
      v58 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v56, v57, v58);
      v7 = a1;
      v8 = a3;
      v9 = 18;
      goto LABEL_98;
    case 0x13u:
      v59 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v59);
      v60 = *(int *)(sub_10001A630(&qword_10083E368) + 48);
      v61 = a1 + v60;
      v62 = a2 + v60;
      v63 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v61, v62, v63);
      v7 = a1;
      v8 = a3;
      v9 = 19;
      goto LABEL_98;
    case 0x14u:
      v163 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v163);
      v7 = a1;
      v8 = a3;
      v9 = 20;
      goto LABEL_98;
    case 0x15u:
      v64 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v64);
      v65 = *(int *)(sub_10001A630(&qword_100842300) + 48);
      v66 = a1 + v65;
      v67 = a2 + v65;
      v68 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v66, v67, v68);
      v7 = a1;
      v8 = a3;
      v9 = 21;
      goto LABEL_98;
    case 0x16u:
      v69 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v69);
      v7 = a1;
      v8 = a3;
      v9 = 22;
      goto LABEL_98;
    case 0x17u:
      v70 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v71 = v70;
      v72 = *(int *)(sub_10001A630(&qword_100846690) + 48);
      v73 = a1 + v72;
      v74 = a2 + v72;
      v75 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 16))(v73, v74, v75);
      v7 = a1;
      v8 = a3;
      v9 = 23;
      goto LABEL_98;
    case 0x18u:
      v76 = *(void **)a2;
      v77 = *(void **)(a2 + 8);
      *(_QWORD *)a1 = v76;
      *(_QWORD *)(a1 + 8) = v77;
      swift_bridgeObjectRetain(v76);
      v78 = v77;
      v7 = a1;
      v8 = a3;
      v9 = 24;
      goto LABEL_98;
    case 0x19u:
      v79 = *(void **)a2;
      v80 = *(void **)(a2 + 8);
      *(_QWORD *)a1 = v79;
      *(_QWORD *)(a1 + 8) = v80;
      swift_bridgeObjectRetain(v79);
      v81 = v80;
      v7 = a1;
      v8 = a3;
      v9 = 25;
      goto LABEL_98;
    case 0x1Au:
      v82 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v83 = v82;
      v7 = a1;
      v8 = a3;
      v9 = 26;
      goto LABEL_98;
    case 0x1Bu:
      v164 = type metadata accessor for Date(0);
      v165 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v164 - 8) + 16);
      v165(a1, a2, v164);
      v166 = sub_10001A630(&qword_100846688);
      v165(a1 + *(int *)(v166 + 48), a2 + *(int *)(v166 + 48), v164);
      v7 = a1;
      v8 = a3;
      v9 = 27;
      goto LABEL_98;
    case 0x1Cu:
      v84 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v84);
      v7 = a1;
      v8 = a3;
      v9 = 28;
      goto LABEL_98;
    case 0x1Du:
      v85 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v85);
      v86 = sub_10001A630(&qword_100846680);
      v87 = *(int *)(v86 + 48);
      v88 = (void *)(a1 + v87);
      v89 = (const void *)(a2 + v87);
      v90 = type metadata accessor for Date(0);
      v91 = *(_QWORD *)(v90 - 8);
      v92 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v91 + 48);
      if (v92(v89, 1, v90))
      {
        v93 = sub_10001A630((uint64_t *)&unk_1008380D0);
        memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v91 + 16))(v88, v89, v90);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v88, 0, 1, v90);
      }
      v185 = *(int *)(v86 + 64);
      v186 = (void *)(a1 + v185);
      v187 = (const void *)(a2 + v185);
      if (v92(v187, 1, v90))
      {
        v188 = sub_10001A630((uint64_t *)&unk_1008380D0);
        memcpy(v186, v187, *(_QWORD *)(*(_QWORD *)(v188 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v91 + 16))(v186, v187, v90);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v186, 0, 1, v90);
      }
      v7 = a1;
      v8 = a3;
      v9 = 29;
      goto LABEL_98;
    case 0x1Eu:
      v167 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v167);
      v168 = sub_10001A630(&qword_100846680);
      v169 = *(int *)(v168 + 48);
      v170 = (void *)(a1 + v169);
      v171 = (const void *)(a2 + v169);
      v172 = type metadata accessor for Date(0);
      v173 = *(_QWORD *)(v172 - 8);
      v174 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v173 + 48);
      if (v174(v171, 1, v172))
      {
        v175 = sub_10001A630((uint64_t *)&unk_1008380D0);
        memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v175 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v173 + 16))(v170, v171, v172);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v173 + 56))(v170, 0, 1, v172);
      }
      v190 = *(int *)(v168 + 64);
      v191 = (void *)(a1 + v190);
      v192 = (const void *)(a2 + v190);
      if (v174(v192, 1, v172))
      {
        v193 = sub_10001A630((uint64_t *)&unk_1008380D0);
        memcpy(v191, v192, *(_QWORD *)(*(_QWORD *)(v193 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v173 + 16))(v191, v192, v172);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v173 + 56))(v191, 0, 1, v172);
      }
      v7 = a1;
      v8 = a3;
      v9 = 30;
      goto LABEL_98;
    case 0x20u:
      v94 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v94);
      v7 = a1;
      v8 = a3;
      v9 = 32;
      goto LABEL_98;
    case 0x21u:
      v95 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      v96 = v95;
      v7 = a1;
      v8 = a3;
      v9 = 33;
      goto LABEL_98;
    case 0x22u:
      v97 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v98 = v97;
      v7 = a1;
      v8 = a3;
      v9 = 34;
      goto LABEL_98;
    case 0x23u:
      v176 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v177 = v176;
      v7 = a1;
      v8 = a3;
      v9 = 35;
      goto LABEL_98;
    case 0x24u:
      v178 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v179 = v178;
      v7 = a1;
      v8 = a3;
      v9 = 36;
      goto LABEL_98;
    case 0x25u:
      v99 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v100 = v99;
      v7 = a1;
      v8 = a3;
      v9 = 37;
      goto LABEL_98;
    case 0x26u:
      v101 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v102 = v101;
      v103 = sub_10001A630(&qword_10083AEB0);
      v104 = *(int *)(v103 + 48);
      v105 = (uint64_t *)(a1 + v104);
      v106 = (uint64_t *)(a2 + v104);
      v107 = _s10PredicatesO19CompletionPredicateOMa(0);
      v108 = swift_getEnumCaseMultiPayload(v106, v107);
      if (v108 == 2)
      {
        v196 = *v106;
        *v105 = *v106;
        swift_bridgeObjectRetain(v196);
        swift_storeEnumTagMultiPayload(v105, v107, 2);
      }
      else if (v108 == 1)
      {
        v197 = type metadata accessor for Date(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v197 - 8) + 16))(v105, v106, v197);
        swift_storeEnumTagMultiPayload(v105, v107, 1);
      }
      else if (v108)
      {
        memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
      }
      else
      {
        v109 = type metadata accessor for Date(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v109 - 8) + 16))(v105, v106, v109);
        swift_storeEnumTagMultiPayload(v105, v107, 0);
      }
      *(_BYTE *)(a1 + *(int *)(v103 + 64)) = *(_BYTE *)(a2 + *(int *)(v103 + 64));
      v7 = a1;
      v8 = a3;
      v9 = 38;
      goto LABEL_98;
    case 0x27u:
      v110 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v110);
      v111 = *(int *)(sub_10001A630(&qword_100846670) + 48);
      v112 = (void *)(a1 + v111);
      v113 = (const void *)(a2 + v111);
      v114 = type metadata accessor for Date(0);
      v115 = *(_QWORD *)(v114 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v115 + 48))(v113, 1, v114))
      {
        v116 = sub_10001A630((uint64_t *)&unk_1008380D0);
        memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v115 + 16))(v112, v113, v114);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v115 + 56))(v112, 0, 1, v114);
      }
      v7 = a1;
      v8 = a3;
      v9 = 39;
      goto LABEL_98;
    case 0x28u:
      v117 = *(void **)a2;
      v118 = *(void **)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v118;
      v119 = v117;
      v120 = v118;
      v121 = *(int *)(sub_10001A630(&qword_100846668) + 64);
      v122 = (void *)(a1 + v121);
      v123 = (const void *)(a2 + v121);
      v124 = type metadata accessor for Date(0);
      v125 = *(_QWORD *)(v124 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v125 + 48))(v123, 1, v124))
      {
        v126 = sub_10001A630((uint64_t *)&unk_1008380D0);
        memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v125 + 16))(v122, v123, v124);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v122, 0, 1, v124);
      }
      v7 = a1;
      v8 = a3;
      v9 = 40;
      goto LABEL_98;
    case 0x29u:
      v127 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v127);
      v128 = *(int *)(sub_10001A630(&qword_100846660) + 48);
      v129 = (void *)(a1 + v128);
      v130 = (const void *)(a2 + v128);
      v131 = type metadata accessor for Date(0);
      v132 = *(_QWORD *)(v131 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v132 + 48))(v130, 1, v131))
      {
        v133 = sub_10001A630((uint64_t *)&unk_1008380D0);
        memcpy(v129, v130, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v132 + 16))(v129, v130, v131);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v132 + 56))(v129, 0, 1, v131);
      }
      v7 = a1;
      v8 = a3;
      v9 = 41;
      goto LABEL_98;
    case 0x2Au:
      v134 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v134);
      v7 = a1;
      v8 = a3;
      v9 = 42;
      goto LABEL_98;
    case 0x2Cu:
      v180 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v180;
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      swift_bridgeObjectRetain(v180);
      v7 = a1;
      v8 = a3;
      v9 = 44;
      goto LABEL_98;
    case 0x2Du:
      v135 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v135);
      v7 = a1;
      v8 = a3;
      v9 = 45;
      goto LABEL_98;
    case 0x2Eu:
      v136 = type metadata accessor for Date(0);
      v137 = *(_QWORD *)(v136 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v137 + 48))(a2, 1, v136))
      {
        v138 = sub_10001A630((uint64_t *)&unk_1008380D0);
        memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v137 + 16))(a1, a2, v136);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v137 + 56))(a1, 0, 1, v136);
      }
      v7 = a1;
      v8 = a3;
      v9 = 46;
LABEL_98:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t *sub_100006640(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v8 = *a2;
    *a1 = *a2;
    swift_bridgeObjectRetain(v8);
    swift_storeEnumTagMultiPayload(a1, a3, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v9 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

id sub_10000672C(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  NSArray v7;
  id v8;
  id v9;
  uint64_t v11;

  v1 = objc_msgSend(a1, "inMemoryPrimaryActiveCKAccountREMObjectID");
  if (v1)
  {
    v2 = v1;
    v3 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v4 = swift_allocObject(v3, 40, 7);
    *(_OWORD *)(v4 + 16) = xmmword_1006A7330;
    *(_QWORD *)(v4 + 32) = v2;
    v11 = v4;
    specialized Array._endMutation()(v4);
    v5 = objc_allocWithZone((Class)REMAccountsDataViewInvocationREMObjectIDOnlyResult);
    sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    v6 = v2;
    v7.super.isa = Array._bridgeToObjectiveC()().super.isa;
    v8 = objc_msgSend(v5, "initWithAccountIDs:", v7.super.isa, swift_bridgeObjectRelease(v11).n128_f64[0]);

  }
  else
  {
    v9 = objc_allocWithZone((Class)REMAccountsDataViewInvocationREMObjectIDOnlyResult);
    sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    v7.super.isa = Array._bridgeToObjectiveC()().super.isa;
    v8 = objc_msgSend(v9, "initWithAccountIDs:", v7.super.isa);
  }

  return v8;
}

void sub_100006920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_100006938()
{
  uint64_t v0;

  sub_100018B70(*(id *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(void (**)(void *, id))(v0 + 48));
}

uint64_t initializeWithCopy for RDClientIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(unsigned __int16 *)(a2 + 44);
  v9 = *(unsigned int *)(a2 + 40);
  sub_10001BB24(*(_QWORD *)a2, v4, v5, v6, v7, v9 | (v8 << 32));
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_WORD *)(a1 + 44) = v8;
  *(_DWORD *)(a1 + 40) = v9;
  return a1;
}

void sub_1000069D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _QWORD v22[40];

  v1 = type metadata accessor for UUID(0);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for REMStringMatchingStyle(0);
  v22[21] = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v22[19] = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v22[20] = (char *)v22 - v5;
  v6 = type metadata accessor for REMSearchCriterion(0);
  v22[32] = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v22[31] = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v22[23] = (char *)v22 - v10;
  v11 = __chkstk_darwin(v9);
  v22[27] = (char *)v22 - v12;
  v13 = __chkstk_darwin(v11);
  __chkstk_darwin(v13);
  v22[29] = (char *)v22 - v14;
  v15 = sub_10001A630((uint64_t *)&unk_100839C80);
  v22[36] = *(_QWORD *)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v22[35] = (char *)v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = _s10PredicatesOMa_3(0);
  __chkstk_darwin(v18);
  v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[38] = _swiftEmptyArrayStorage;
  sub_10058C170(v0, (uint64_t)v20);
  v21 = (char *)&loc_100006C10 + *((int *)qword_10058B4A8 + swift_getEnumCaseMultiPayload(v20, v18));
  __asm { BR              X10 }
}

uint64_t sub_100006C20()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = (void *)REMSmartListTypeCustom;
  v2 = REMSmartListTypeCustom;
  v3 = sub_1000153F4(0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v3);
  v4 = *(_QWORD *)(v0 - 96);
  v6 = *(_QWORD *)(v4 + 16);
  v5 = *(_QWORD *)(v4 + 24);
  if (v6 >= v5 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1);
  v7 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v3);
  specialized Array._endMutation()(v7);
  if (v1)
  {
    KeyPath = swift_getKeyPath(&unk_1006C3220);
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v11 = v10;
    v12 = v1;
    v13 = sub_10001CBFC(KeyPath, v9, v11);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v11);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v14);
    v15 = *(_QWORD *)(v0 - 96);
    v17 = *(_QWORD *)(v15 + 16);
    v16 = *(_QWORD *)(v15 + 24);
    if (v17 >= v16 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1);
    v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v13);
    specialized Array._endMutation()(v18);

  }
  v19 = ((uint64_t (*)(_QWORD))sub_10000D2BC)(*(_QWORD *)(v0 - 96));

  return v19;
}

double sub_1000081F0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  double result;

  v2 = *(unsigned int *)(a2 + 40) | ((unint64_t)*(unsigned __int16 *)(a2 + 44) << 32);
  if ((v2 & 0xC00000000000) == 0x800000000000)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = *(_QWORD *)(a2 + 16);
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMAppBundleIdentifier);
    v7 = v6;
    if (!v3)
    {
      *(_QWORD *)&result = swift_bridgeObjectRelease(v6).n128_u64[0];
      return result;
    }
    if (v4 == v5 && v3 == v6)
    {
      *(_QWORD *)&result = swift_bridgeObjectRelease(v6).n128_u64[0];
      if ((v2 & 0x10000000000) == 0)
        return result;
      goto LABEL_9;
    }
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v3, v5, v6, 0);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v7).n128_u64[0];
    if ((v2 & 0x10000000000) != 0 && (v9 & 1) != 0)
LABEL_9:
      sub_1004DAF1C();
  }
  return result;
}

void sub_1000082FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = OBJC_IVAR____TtC7remindd18RDClientConnection_keepAliveTransaction;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd18RDClientConnection_keepAliveTransaction);
  if (v2)
  {
    v3 = v0;
    v4 = swift_unknownObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd18RDClientConnection_keepAliveTransaction));
    v5 = os_transaction_copy_description(v4);
    if (v5)
    {
      v6 = v5;
      if (qword_1008374A0 != -1)
        swift_once(&qword_1008374A0, sub_10041E18C);
      v7 = type metadata accessor for Logger(0);
      sub_10001AAA8(v7, (uint64_t)qword_10084A080);
      v8 = Logger.logObject.getter();
      v9 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc(12, -1);
        v11 = swift_slowAlloc(32, -1);
        v17 = v11;
        *(_DWORD *)v10 = 136315138;
        v12 = String.init(cString:)(v6);
        v14 = v13;
        v16 = sub_10001A820(v12, v13, &v17);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
        swift_bridgeObjectRelease(v14);
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "os_transaction RELEASE {name: %s}", v10, 0xCu);
        swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v11, -1, -1);
        swift_slowDealloc(v10, -1, -1);
      }

      swift_slowDealloc(v6, -1, -1);
    }
    v15 = *(_QWORD *)(v3 + v1);
    *(_QWORD *)(v3 + v1) = 0;
    swift_unknownObjectRelease(v2);
    swift_unknownObjectRelease(v15);
  }
}

id sub_1000084C4(char a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  Class isa;

  if ((a1 & 1) != 0)
    return 0;
  v2 = sub_10001A630((uint64_t *)&unk_100839E80);
  v3 = swift_allocObject(v2, 128, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1006A3C20;
  *(_QWORD *)(v3 + 32) = 0xD000000000000011;
  *(_QWORD *)(v3 + 40) = 0x80000001006B5D90;
  *(_QWORD *)(v3 + 88) = &type metadata for String;
  *(_QWORD *)(v3 + 56) = &type metadata for String;
  *(_QWORD *)(v3 + 64) = 0xD000000000000023;
  *(_QWORD *)(v3 + 72) = 0x80000001006FC190;
  v4 = rem_currentRuntimeVersion();
  *(_QWORD *)(v3 + 120) = &type metadata for Int;
  *(_QWORD *)(v3 + 96) = v4;
  v5 = String._bridgeToObjectiveC()();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  v1 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v5, isa);

  return v1;
}

id sub_1000085E4()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  uint64_t v18;

  v1 = v0;
  v2 = _s10PredicatesOMa(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload(v4, v5, 58);
  sub_10000D2C0();
  v7 = v6;
  v8 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v9 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v8), "entity");
  objc_msgSend(v9, "setEntity:", v10);

  objc_msgSend(v9, "setAffectedStores:", 0);
  objc_msgSend(v9, "setPredicate:", v7);

  objc_msgSend(v9, "setFetchLimit:", 1);
  v11 = NSManagedObjectContext.count<A>(for:)(v9, v8);
  if (v0)
  {
    sub_10001C744((uint64_t)v4, _s10PredicatesOMa);

  }
  else
  {
    v12 = v11;
    v1 = objc_msgSend(objc_allocWithZone((Class)REMStoreInvocationResult), "init");
    v13 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v12);
    static String._unconditionallyBridgeFromObjectiveC(_:)(CompletedRemindersCount);
    v15 = v14;
    v16 = String._bridgeToObjectiveC()();
    objc_msgSend(v1, "storeProperty:forKey:", v13, v16, swift_bridgeObjectRelease(v15).n128_f64[0]);

    sub_10001C744((uint64_t)v4, _s10PredicatesOMa);
  }
  return v1;
}

_QWORD *sub_1000087F0(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_10000882C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_10001A630(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100008868(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10001A630(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

char *sub_1000088AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  uint64_t v21;

  v1 = _s10PredicatesOMa_3(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (void *)objc_opt_self(REMUserDefaults);
  v5 = objc_msgSend(v4, "daemonUserDefaults");
  v6 = objc_msgSend(v5, "tipKitCachedCountOfCustomSmartLists");

  if (v6)
  {
    v7 = objc_msgSend(v6, "integerValue");

    if ((uint64_t)v7 > 0)
      goto LABEL_6;
  }
  swift_storeEnumTagMultiPayload(v3, v1, 10);
  sub_1000069D8();
  v9 = v8;
  v10 = sub_1000151B0(0, (unint64_t *)&unk_100840000, off_1007D6720);
  v11 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v10), "entity");
  objc_msgSend(v11, "setEntity:", v12);

  objc_msgSend(v11, "setAffectedStores:", 0);
  objc_msgSend(v11, "setPredicate:", v9);

  objc_msgSend(v11, "setFetchLimit:", 1);
  v13 = NSManagedObjectContext.count<A>(for:)(v11, v10);
  if (!v0)
  {
    v7 = (id)v13;
    v14 = objc_msgSend(v4, "daemonUserDefaults");
    v15 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v7);
    objc_msgSend(v14, "setTipKitCachedCountOfCustomSmartLists:", v15);

    sub_10001C744((uint64_t)v3, _s10PredicatesOMa_3);
LABEL_6:
    v3 = (char *)objc_msgSend(objc_allocWithZone((Class)REMStoreInvocationResult), "init");
    v16 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v7);
    static String._unconditionallyBridgeFromObjectiveC(_:)(CustomSmartListsCount);
    v18 = v17;
    v19 = String._bridgeToObjectiveC()();
    objc_msgSend(v3, "storeProperty:forKey:", v16, v19, swift_bridgeObjectRelease(v18).n128_f64[0]);

    return v3;
  }
  sub_10001C744((uint64_t)v3, _s10PredicatesOMa_3);

  return v3;
}

char *sub_100008B84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  uint64_t v21;

  v1 = _s10PredicatesOMa_1(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (void *)objc_opt_self(REMUserDefaults);
  v5 = objc_msgSend(v4, "daemonUserDefaults");
  v6 = objc_msgSend(v5, "tipKitCachedCountOfListsWithCustomBadge");

  if (v6)
  {
    v7 = objc_msgSend(v6, "integerValue");

    if ((uint64_t)v7 > 0)
      goto LABEL_6;
  }
  swift_storeEnumTagMultiPayload(v3, v1, 33);
  sub_10000A3AC();
  v9 = v8;
  v10 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v11 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v10), "entity");
  objc_msgSend(v11, "setEntity:", v12);

  objc_msgSend(v11, "setAffectedStores:", 0);
  objc_msgSend(v11, "setPredicate:", v9);

  objc_msgSend(v11, "setFetchLimit:", 1);
  v13 = NSManagedObjectContext.count<A>(for:)(v11, v10);
  if (!v0)
  {
    v7 = (id)v13;
    v14 = objc_msgSend(v4, "daemonUserDefaults");
    v15 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v7);
    objc_msgSend(v14, "setTipKitCachedCountOfListsWithCustomBadge:", v15);

    sub_10001C744((uint64_t)v3, _s10PredicatesOMa_1);
LABEL_6:
    v3 = (char *)objc_msgSend(objc_allocWithZone((Class)REMStoreInvocationResult), "init");
    v16 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v7);
    static String._unconditionallyBridgeFromObjectiveC(_:)(ListsWithCustomBadgeCount);
    v18 = v17;
    v19 = String._bridgeToObjectiveC()();
    objc_msgSend(v3, "storeProperty:forKey:", v16, v19, swift_bridgeObjectRelease(v18).n128_f64[0]);

    return v3;
  }
  sub_10001C744((uint64_t)v3, _s10PredicatesOMa_1);

  return v3;
}

uint64_t sub_100008EFC(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

void sub_100008F20(void *a1, int a2, void *a3, void *aBlock, void (*a5)(id, id, void *))
{
  void *v8;
  id v9;
  id v10;

  v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  v9 = a3;
  v10 = a1;
  a5(v9, v10, v8);
  _Block_release(v8);
  _Block_release(v8);

}

id sub_1000090C4()
{
  char *v0;
  char *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  char *v6;
  uint64_t v7;
  objc_super v9;
  char v10[24];

  v1 = v0;
  if (qword_100837700 != -1)
    swift_once(&qword_100837700, sub_1004BC0B4);
  v2 = type metadata accessor for Logger(0);
  sub_10001AAA8(v2, (uint64_t)qword_10084CAB8);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Deallocating RDXPCStorePerformer", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = &v1[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_sharingObserverForAccountID];
  swift_beginAccess(&v1[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_sharingObserverForAccountID], v10, 1, 0);
  v7 = *(_QWORD *)v6;
  *(_QWORD *)v6 = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v7);
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for RDXPCStorePerformer();
  return objc_msgSendSuper2(&v9, "dealloc");
}

uint64_t type metadata accessor for RDXPCStorePerformer()
{
  return objc_opt_self(_TtC7remindd19RDXPCStorePerformer);
}

uint64_t sub_1000092FC(void (*a1)(uint64_t *, id), uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t v4;
  void *v6;
  NSString v7;
  id v8;
  uint64_t v9;

  a3(&v9);
  v4 = v9;
  if (v9)
  {
    swift_unknownObjectRetain(v9);
    a1(&v9, 0);
    return swift_unknownObjectRelease_n(v4, 2);
  }
  else
  {
    v6 = (void *)objc_opt_self(REMError);
    v7 = String._bridgeToObjectiveC()();
    v8 = objc_msgSend(v6, "xpcPerformerUnavailableErrorWithDescription:", v7);

    swift_willThrow();
    v9 = 0;
    swift_errorRetain(v8);
    a1(&v9, v8);
    swift_errorRelease(v8);
    return swift_errorRelease(v8);
  }
}

uint64_t sub_100009410(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

void sub_100009438(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100009450(a1, a2, *(_QWORD *)(v2 + 16));
}

void sub_100009450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)(a2);
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);

}

void sub_1000094A8()
{
  uint64_t v0;

  sub_100017484(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000094C8(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

void sub_1000094F4()
{
  uint64_t v0;

  sub_1000094FC(v0);
}

void sub_1000094FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t aBlock[5];
  uint64_t v33;
  char v34[24];
  _BYTE v35[48];
  char v36[40];
  unsigned int v37;
  unsigned __int16 v38;

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v34, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (!Strong)
    return;
  v4 = (void *)Strong;
  if (qword_1008374A0 != -1)
    swift_once(&qword_1008374A0, sub_10041E18C);
  v5 = type metadata accessor for Logger(0);
  sub_10001AAA8(v5, (uint64_t)qword_10084A080);
  v6 = v4;
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    aBlock[0] = v10;
    *(_DWORD *)v9 = 136446210;
    sub_1000184A8((uint64_t)&v6[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity], (uint64_t)v35);
    v11 = sub_10001A630((uint64_t *)&unk_10083A270);
    v12 = swift_allocObject(v11, 112, 7);
    *(_OWORD *)(v12 + 16) = xmmword_1006A3C40;
    sub_1000184A8((uint64_t)v35, (uint64_t)v36);
    v13 = v37 | ((unint64_t)v38 << 32);
    v14 = v38 >> 14;
    if (v14 >= 2)
    {
      if (v14 == 2)
      {
        v38 = WORD2(v13) & 0x3FFF;
        if ((v13 & 0x10000000000) != 0)
        {
          v17 = 0x80000001006F8F90;
          v16 = 0xD000000000000011;
          goto LABEL_11;
        }
      }
    }
    else
    {
      v38 = WORD2(v13) & 0x3FFF;
    }
    v16 = 0;
    v17 = 0xE000000000000000;
LABEL_11:
    *(_QWORD *)(v12 + 56) = &type metadata for String;
    v18 = sub_1000184F8();
    *(_QWORD *)(v12 + 64) = v18;
    *(_QWORD *)(v12 + 32) = v16;
    *(_QWORD *)(v12 + 40) = v17;
    sub_1000181B8();
    *(_QWORD *)(v12 + 96) = &type metadata for String;
    *(_QWORD *)(v12 + 104) = v18;
    *(_QWORD *)(v12 + 72) = v19;
    *(_QWORD *)(v12 + 80) = v20;
    v21 = String.init(format:_:)(1076183077, 0xE400000000000000, v12);
    v23 = v22;
    v31 = sub_10001A820(v21, v22, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, aBlock);

    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Connection was invalidated {clientIdentity: %{public}s}", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    goto LABEL_12;
  }

LABEL_12:
  v24 = swift_unknownObjectWeakLoadStrong(&v6[OBJC_IVAR____TtC7remindd18RDClientConnection_delegate], v15);
  if (v24)
  {
    v25 = v24;
    v26 = *(NSObject **)(v24 + OBJC_IVAR____TtC7remindd26RDClientConnectionListener_listenerQueue);
    v27 = swift_allocObject(&unk_1007F3C30, 32, 7);
    *(_QWORD *)(v27 + 16) = v6;
    *(_QWORD *)(v27 + 24) = v25;
    v28 = swift_allocObject(&unk_1007F3C58, 32, 7);
    *(_QWORD *)(v28 + 16) = sub_10000992C;
    *(_QWORD *)(v28 + 24) = v27;
    aBlock[4] = (uint64_t)sub_1000098E4;
    v33 = v28;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000098C4;
    aBlock[3] = (uint64_t)&unk_1007F3C70;
    v29 = _Block_copy(aBlock);
    v30 = v33;
    v6 = v6;
    swift_unknownObjectRetain(v25);
    swift_retain(v28);
    swift_release(v30);
    dispatch_sync(v26, v29);
    _Block_release(v29);
    LOBYTE(v26) = swift_isEscapingClosureAtFileLocation(v28, "", 98, 145, 28, 1);

    swift_unknownObjectRelease(v25);
    swift_release(v27);
    swift_release(v28);
    if ((v26 & 1) == 0)
      return;
    __break(1u);
  }

}

uint64_t sub_1000098C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_1000098E4()
{
  uint64_t v0;

  return sub_10000990C(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1000098EC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10000990C(uint64_t (*a1)(void))
{
  return a1();
}

void sub_10000992C()
{
  uint64_t v0;

  sub_100009934(*(void **)(v0 + 16), *(char **)(v0 + 24));
}

void sub_100009934(void *a1, char *a2)
{
  uint64_t v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  NSObject *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  _QWORD v31[4];
  int v32;
  __int16 v33;

  if (qword_100836D10 != -1)
    swift_once(&qword_100836D10, sub_10011A910);
  v4 = type metadata accessor for Logger(0);
  sub_10001AAA8(v4, (uint64_t)qword_10083B210);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = (_QWORD *)swift_slowAlloc(8, -1);
    v30 = v5;
    *(_DWORD *)v8 = 138412290;
    v9 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31);
    *v29 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Client connection closed: %@", v8, 0xCu);
    v10 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v29, 1, v10);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v11 = (uint64_t *)&a2[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_clientConnections];
  swift_beginAccess(&a2[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_clientConnections], &v30, 33, 0);
  v12 = (void *)sub_100009C8C(v5);
  swift_endAccess(&v30);

  v13 = &v5[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity];
  v14 = *(_QWORD *)&v5[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity];
  v15 = *(_QWORD *)&v5[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity + 8];
  v16 = *((_QWORD *)v13 + 2);
  v17 = *((_QWORD *)v13 + 3);
  v18 = *((_QWORD *)v13 + 4);
  v19 = *((unsigned __int16 *)v13 + 22);
  v20 = *((unsigned int *)v13 + 10);
  v21 = v20 | (v19 << 32);
  v30 = (char *)v14;
  v31[0] = v15;
  v31[1] = v16;
  v31[2] = v17;
  v31[3] = v18;
  v33 = v19;
  v32 = v20;
  sub_10001BB24(v14, v15, v16, v17, v18, v21);
  PassthroughSubject.send(_:)(&v30);
  sub_1000178E8(v14, v15, v16, v17, v18, v21);
  v22 = a2;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v25 = 134217984;
    v26 = *v11;
    if ((v26 & 0xC000000000000001) != 0)
    {
      if (v26 < 0)
        v27 = v26;
      else
        v27 = v26 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v26);
      v28 = __CocoaSet.count.getter(v27);
      swift_bridgeObjectRelease(v26);
    }
    else
    {
      v28 = *(_QWORD *)(v26 + 16);
    }
    v30 = (char *)v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31);

    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Connection count: %ld", v25, 0xCu);
    swift_slowDealloc(v25, -1, -1);
  }
  else
  {

    v23 = v22;
  }

}

uint64_t sub_100009C8C(void *a1)
{
  return sub_100009CA8(a1, (void (*)(_QWORD))type metadata accessor for RDClientConnection, (void (*)(void))sub_1002E3610, sub_1002DE5C4);
}

uint64_t sub_100009CA8(void *a1, void (*a2)(_QWORD), void (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t))
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  Swift::Int v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v6 = v4;
  v8 = *v4;
  if ((*v4 & 0xC000000000000001) != 0)
  {
    if (v8 < 0)
      v10 = *v4;
    else
      v10 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v11 = a1;
    v12 = __CocoaSet.contains(_:)();

    if ((v12 & 1) != 0)
    {
      v13 = sub_10059C738(v10, (uint64_t)v11, a4, a2);
      swift_bridgeObjectRelease(v8);
      return v13;
    }
LABEL_15:
    swift_bridgeObjectRelease(v8);
    return 0;
  }
  v15 = *(_QWORD *)(v8 + 40);
  swift_bridgeObjectRetain(v8);
  v16 = NSObject._rawHashValue(seed:)(v15);
  v17 = -1 << *(_BYTE *)(v8 + 32);
  v18 = v16 & ~v17;
  if (((*(_QWORD *)(v8 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
    goto LABEL_15;
  a2(0);
  v19 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v18);
  v20 = static NSObject.== infix(_:_:)(v19);

  if ((v20 & 1) == 0)
  {
    v21 = ~v17;
    do
    {
      v18 = (v18 + 1) & v21;
      if (((*(_QWORD *)(v8 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
        goto LABEL_15;
      v22 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v18);
      v23 = static NSObject.== infix(_:_:)(v22);

    }
    while ((v23 & 1) == 0);
  }
  swift_bridgeObjectRelease(v8);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
  v25 = *v6;
  v28 = *v6;
  *v6 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a3();
    v25 = v28;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v25 + 48) + 8 * v18);
  sub_100009E80(v18);
  v26 = *v6;
  *v6 = v28;
  swift_bridgeObjectRelease(v26);
  return v13;
}

unint64_t sub_100009E80(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 40);
        v11 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(v3 + 48);
            v17 = (_QWORD *)(v16 + 8 * v2);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v2 != v6 || (v2 = v6, v17 >= v18 + 1))
            {
              *v17 = *v18;
              v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v19 = *(_QWORD *)(v3 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_10000A020(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_10000A034()
{
  return sub_10000A020((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000A040);
}

void sub_10000A040(void **a1, void (*a2)(void **__return_ptr, uint64_t), uint64_t a3, uint64_t a4)
{
  void *v5;
  void *v6;

  a2(&v6, a4);
  v5 = *a1;
  *a1 = v6;

}

uint64_t sub_10000A304@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_10000A31C(a1, *(_QWORD **)(v2 + 16), a2);
}

uint64_t sub_10000A31C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = a2[3];
  v7 = a2[4];
  sub_10000A388(a2, v6);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 8))(a1, v6, v7);
  if (!v3)
    *a3 = result;
  return result;
}

_QWORD *sub_10000A388(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

void sub_10000A3AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  _QWORD v26[27];
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;

  v27 = type metadata accessor for REMSearchableListType(0);
  v26[26] = *(_QWORD *)(v27 - 8);
  v1 = __chkstk_darwin(v27);
  v26[24] = (char *)v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v26[25] = (char *)v26 - v3;
  v32 = type metadata accessor for REMStringMatchingStyle(0);
  v31 = *(_QWORD *)(v32 - 8);
  v4 = __chkstk_darwin(v32);
  v28 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v29 = (char *)v26 - v6;
  v34 = type metadata accessor for REMSearchCriterion(0);
  v36 = *(_QWORD *)(v34 - 8);
  v7 = __chkstk_darwin(v34);
  v35 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v33 = (char *)v26 - v10;
  v11 = __chkstk_darwin(v9);
  v30 = (char *)v26 - v12;
  v13 = __chkstk_darwin(v11);
  v37 = (char *)v26 - v14;
  __chkstk_darwin(v13);
  v38 = (char *)v26 - v15;
  v41 = type metadata accessor for UUID(0);
  v40 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v16 = sub_10001A630((uint64_t *)&unk_100839C80);
  v17 = __chkstk_darwin(v16);
  v18 = __chkstk_darwin(v17);
  v19 = __chkstk_darwin(v18);
  v20 = __chkstk_darwin(v19);
  __chkstk_darwin(v20);
  v39 = (char *)v26 - v21;
  v22 = _s10PredicatesOMa_1(0);
  __chkstk_darwin(v22);
  v24 = (char *)v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = _swiftEmptyArrayStorage;
  sub_1004A7484(v0, (uint64_t)v24);
  v25 = (char *)&loc_10000A6EC + *((int *)qword_1004A6938 + swift_getEnumCaseMultiPayload(v24, v22));
  __asm { BR              X10 }
}

uint64_t sub_10000A70C()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;

  v4 = v0;
  v5 = ((uint64_t (*)(_QWORD))sub_10001CC08)(0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v5);
  v6 = *(_QWORD *)(v3 - 96);
  v8 = *(_QWORD *)(v6 + 16);
  v7 = *(_QWORD *)(v6 + 24);
  if (v8 >= v7 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1);
  v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v5);
  specialized Array._endMutation()(v9);
  v10 = sub_10001A630(&qword_10083D3D8);
  v11 = ((uint64_t (*)(uint64_t, uint64_t))swift_initStackObject)(v10, v3 - 144);
  *(_OWORD *)(v11 + 16) = xmmword_1006A3C40;
  KeyPath = swift_getKeyPath(&unk_1006BE420);
  v13 = sub_10001CC30(KeyPath);
  swift_release(KeyPath);
  *(_QWORD *)(v11 + 32) = v13;
  v14 = swift_getKeyPath(&unk_1006BE470);
  v15 = sub_10000D29C(v14);
  v16 = swift_release(v14);
  *(_QWORD *)(v11 + 40) = v15;
  *(_QWORD *)(v3 - 152) = v11;
  specialized Array._endMutation()(v16);
  v17 = ((uint64_t (*)(_QWORD))sub_10001CC54)(*(_QWORD *)(v3 - 152));
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v17);
  v18 = *(_QWORD *)(v3 - 96);
  v20 = *(_QWORD *)(v18 + 16);
  v19 = *(_QWORD *)(v18 + 24);
  if (v20 >= v19 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1);
  v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v17);
  specialized Array._endMutation()(v21);
  if (!v2)
  {
    if (v1)
      goto LABEL_9;
LABEL_14:
    if (!v4)
      goto LABEL_18;
    goto LABEL_15;
  }
  v22 = sub_10001A630(&qword_10083D3D8);
  v23 = ((uint64_t (*)(uint64_t, uint64_t))swift_initStackObject)(v22, v3 - 200);
  *(_OWORD *)(v23 + 16) = xmmword_1006A3C40;
  v24 = swift_getKeyPath(&unk_1006BE5D8);
  v25 = sub_10000D29C(v24);
  swift_release(v24);
  *(_QWORD *)(v23 + 32) = v25;
  v26 = swift_getKeyPath(&unk_1006BE620);
  v27 = sub_10000D29C(v26);
  v28 = swift_release(v26);
  *(_QWORD *)(v23 + 40) = v27;
  *(_QWORD *)(v3 - 152) = v23;
  specialized Array._endMutation()(v28);
  v29 = sub_10000D2BC(*(_QWORD *)(v3 - 152));
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
  v30 = *(_QWORD *)(v3 - 96);
  v32 = *(_QWORD *)(v30 + 16);
  v31 = *(_QWORD *)(v30 + 24);
  if (v32 >= v31 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1);
  v33 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v29);
  specialized Array._endMutation()(v33);
  if ((v1 & 1) == 0)
    goto LABEL_14;
LABEL_9:
  v34 = swift_getKeyPath(&unk_1006BE568);
  v35 = sub_10000D29C(v34);
  v36 = swift_release(v34);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v36);
  v37 = *(_QWORD *)(v3 - 96);
  v39 = *(_QWORD *)(v37 + 16);
  v38 = *(_QWORD *)(v37 + 24);
  if (v39 >= v38 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1);
  v40 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v39, v35);
  specialized Array._endMutation()(v40);
  if ((v4 & 1) != 0)
  {
LABEL_15:
    v41 = swift_getKeyPath(&unk_1006BE508);
    v42 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
    v43 = objc_msgSend(v42, "uuid");

    v44 = *(_QWORD *)(v3 - 320);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v43);

    (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v3 - 312) + 56))(v44, 0, 1, *(_QWORD *)(v3 - 304));
    v45 = sub_10001CBD4(v41, v44);
    v46 = swift_release(v41);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v46);
    v47 = *(_QWORD *)(v3 - 96);
    v49 = *(_QWORD *)(v47 + 16);
    v48 = *(_QWORD *)(v47 + 24);
    if (v49 >= v48 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1);
    v50 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v49, v45);
    specialized Array._endMutation()(v50);
  }
LABEL_18:
  v51 = swift_getKeyPath(&unk_1006BE4C8);
  v52 = sub_10000D29C(v51);
  v53 = swift_release(v51);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v53);
  v54 = *(_QWORD *)(v3 - 96);
  v56 = *(_QWORD *)(v54 + 16);
  v55 = *(_QWORD *)(v54 + 24);
  if (v56 >= v55 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1);
  v57 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v56, v52);
  specialized Array._endMutation()(v57);
  return sub_10000D2BC(*(_QWORD *)(v3 - 96));
}

uint64_t sub_10000D29C(uint64_t a1)
{
  return sub_1003436A4(a1, 0x4F4E203D3D204B25, 0xE800000000000000, &qword_100843760);
}

void sub_10000D2C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  _QWORD v161[67];
  uint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  char *v168;
  uint64_t v169;
  char *v170;
  char *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  char *v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  void *v200;

  v197 = 0;
  v0 = type metadata accessor for REMSearchableListType(0);
  v161[3] = *(_QWORD *)(v0 - 8);
  v161[4] = v0;
  v1 = __chkstk_darwin(v0);
  v161[1] = (char *)v161 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v161[2] = (char *)v161 - v3;
  v162 = type metadata accessor for REMStringMatchingStyle(0);
  v174 = *(_QWORD *)(v162 - 8);
  v4 = __chkstk_darwin(v162);
  v161[26] = (char *)v161 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v181 = (char *)v161 - v6;
  v179 = type metadata accessor for Logger(0);
  v180 = *(_QWORD *)(v179 - 8);
  v7 = __chkstk_darwin(v179);
  v161[0] = (char *)v161 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v175 = (char *)v161 - v10;
  v11 = __chkstk_darwin(v9);
  v161[5] = (char *)v161 - v12;
  v13 = __chkstk_darwin(v11);
  v161[12] = (char *)v161 - v14;
  v15 = __chkstk_darwin(v13);
  v161[13] = (char *)v161 - v16;
  __chkstk_darwin(v15);
  v161[66] = (char *)v161 - v17;
  v182 = type metadata accessor for REMSearchCriterion.Inclusion(0);
  v161[65] = *(_QWORD *)(v182 - 8);
  v18 = __chkstk_darwin(v182);
  v161[64] = (char *)v161 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v170 = (char *)v161 - v20;
  v177 = type metadata accessor for REMSearchCriterion(0);
  v183 = *(_QWORD *)(v177 - 8);
  v21 = __chkstk_darwin(v177);
  v172 = (char *)v161 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v176 = (char *)v161 - v24;
  v161[39] = v25;
  __chkstk_darwin(v23);
  v189 = (char *)v161 - v26;
  v193 = type metadata accessor for UUID(0);
  v192 = *(_QWORD *)(v193 - 8);
  v27 = __chkstk_darwin(v193);
  v161[34] = (char *)v161 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v161[59] = (char *)v161 - v29;
  v169 = sub_10001A630(&qword_100846650);
  v30 = __chkstk_darwin(v169);
  v168 = (char *)v161 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v171 = (char *)v161 - v32;
  v185 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v186 = *(_QWORD *)(v185 - 8);
  v33 = __chkstk_darwin(v185);
  v167 = (char *)v161 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33);
  v161[58] = (char *)v161 - v36;
  v37 = __chkstk_darwin(v35);
  v178 = (char *)v161 - v38;
  __chkstk_darwin(v37);
  v184 = (char *)v161 - v39;
  v196 = type metadata accessor for Date(0);
  v190 = *(_QWORD *)(v196 - 8);
  v40 = __chkstk_darwin(v196);
  v161[15] = (char *)v161 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __chkstk_darwin(v40);
  v161[19] = (char *)v161 - v43;
  v44 = __chkstk_darwin(v42);
  v161[17] = (char *)v161 - v45;
  v46 = __chkstk_darwin(v44);
  v161[14] = (char *)v161 - v47;
  v48 = __chkstk_darwin(v46);
  v161[25] = (char *)v161 - v49;
  v50 = __chkstk_darwin(v48);
  v161[21] = (char *)v161 - v51;
  v52 = __chkstk_darwin(v50);
  v161[24] = (char *)v161 - v53;
  v54 = __chkstk_darwin(v52);
  v161[20] = (char *)v161 - v55;
  v56 = __chkstk_darwin(v54);
  v161[18] = (char *)v161 - v57;
  v58 = __chkstk_darwin(v56);
  v161[23] = (char *)v161 - v59;
  v60 = __chkstk_darwin(v58);
  v173 = (char *)v161 - v61;
  v62 = __chkstk_darwin(v60);
  v161[22] = (char *)v161 - v63;
  v64 = __chkstk_darwin(v62);
  v161[16] = (char *)v161 - v65;
  __chkstk_darwin(v64);
  v187 = (char *)v161 - v66;
  v67 = type metadata accessor for Calendar.Component(0);
  v161[37] = *(_QWORD *)(v67 - 8);
  v161[38] = v67;
  __chkstk_darwin(v67);
  v161[36] = (char *)v161 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for Calendar(0);
  v161[32] = *(_QWORD *)(v69 - 8);
  v161[33] = v69;
  __chkstk_darwin(v69);
  v161[35] = (char *)v161 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v72 = __chkstk_darwin(v71);
  v161[41] = (char *)v161 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = __chkstk_darwin(v72);
  v161[60] = (char *)v161 - v75;
  v76 = __chkstk_darwin(v74);
  v161[50] = (char *)v161 - v77;
  v78 = __chkstk_darwin(v76);
  v161[53] = (char *)v161 - v79;
  v80 = __chkstk_darwin(v78);
  v161[48] = (char *)v161 - v81;
  v82 = __chkstk_darwin(v80);
  v161[55] = (char *)v161 - v83;
  v84 = __chkstk_darwin(v82);
  v161[40] = (char *)v161 - v85;
  v86 = __chkstk_darwin(v84);
  v166 = (char *)v161 - v87;
  v88 = __chkstk_darwin(v86);
  v161[7] = (char *)v161 - v89;
  v90 = __chkstk_darwin(v88);
  v161[6] = (char *)v161 - v91;
  v92 = __chkstk_darwin(v90);
  v161[9] = (char *)v161 - v93;
  v94 = __chkstk_darwin(v92);
  v161[8] = (char *)v161 - v95;
  v96 = __chkstk_darwin(v94);
  v161[11] = (char *)v161 - v97;
  v98 = __chkstk_darwin(v96);
  v161[10] = (char *)v161 - v99;
  v100 = __chkstk_darwin(v98);
  v161[63] = (char *)v161 - v101;
  v102 = __chkstk_darwin(v100);
  v161[45] = (char *)v161 - v103;
  v104 = __chkstk_darwin(v102);
  v161[57] = (char *)v161 - v105;
  v106 = __chkstk_darwin(v104);
  v161[56] = (char *)v161 - v107;
  v108 = __chkstk_darwin(v106);
  v161[62] = (char *)v161 - v109;
  v110 = __chkstk_darwin(v108);
  v161[44] = (char *)v161 - v111;
  v112 = __chkstk_darwin(v110);
  v161[54] = (char *)v161 - v113;
  v114 = __chkstk_darwin(v112);
  v161[52] = (char *)v161 - v115;
  v116 = __chkstk_darwin(v114);
  v161[43] = (char *)v161 - v117;
  v118 = __chkstk_darwin(v116);
  v161[47] = (char *)v161 - v119;
  v120 = __chkstk_darwin(v118);
  v161[46] = (char *)v161 - v121;
  v122 = __chkstk_darwin(v120);
  v163 = (char *)v161 - v123;
  v124 = __chkstk_darwin(v122);
  v161[61] = (char *)v161 - v125;
  v126 = __chkstk_darwin(v124);
  v161[42] = (char *)v161 - v127;
  v128 = __chkstk_darwin(v126);
  v161[51] = (char *)v161 - v129;
  v130 = __chkstk_darwin(v128);
  v161[49] = (char *)v161 - v131;
  v132 = __chkstk_darwin(v130);
  v161[31] = (char *)v161 - v133;
  __chkstk_darwin(v132);
  v188 = (char *)v161 - v134;
  v135 = sub_10001A630((uint64_t *)&unk_100839C80);
  v136 = __chkstk_darwin(v135);
  v161[30] = (char *)v161 - ((v137 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = __chkstk_darwin(v136);
  v161[28] = (char *)v161 - v139;
  v140 = __chkstk_darwin(v138);
  v161[27] = (char *)v161 - v141;
  v142 = __chkstk_darwin(v140);
  v161[29] = (char *)v161 - v143;
  v144 = __chkstk_darwin(v142);
  v145 = __chkstk_darwin(v144);
  v191 = (char *)v161 - v146;
  __chkstk_darwin(v145);
  v147 = _s10PredicatesOMa(0);
  __chkstk_darwin(v147);
  v149 = (char *)v161 - ((v148 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = _s10PredicatesO19CompletionPredicateOMa(0);
  v150 = __chkstk_darwin(v198);
  v194 = (char *)v161 - ((v151 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = __chkstk_darwin(v150);
  v153 = __chkstk_darwin(v152);
  v154 = __chkstk_darwin(v153);
  v155 = __chkstk_darwin(v154);
  v164 = (char *)v161 - v156;
  v157 = __chkstk_darwin(v155);
  v165 = (char *)v161 - v158;
  __chkstk_darwin(v157);
  v199 = (char *)v161 - v159;
  v200 = sub_10001CBC8();
  sub_1000151E8(v195, (uint64_t)v149, _s10PredicatesOMa);
  v160 = (char *)&loc_10000DF94 + dword_10033B48C[swift_getEnumCaseMultiPayload(v149, v147)];
  __asm { BR              X10 }
}

void sub_10000DFA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t inited;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  swift_storeEnumTagMultiPayload(*(_QWORD *)(v0 + 832), *(_QWORD *)(v0 + 824), 4);
  *(_DWORD *)(v0 + 800) = 0;
  v8 = sub_1000084C4(0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v8);
  v9 = *(_QWORD *)(*(_QWORD *)(v1 - 96) + 16);
  sub_100014E7C(v9);
  v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v8);
  specialized Array._endMutation()(v10);
  KeyPath = swift_getKeyPath(&unk_1006B57F8);
  v12 = sub_1003436A4(KeyPath, 0x4F4E203D3D204B25, 0xE800000000000000, (uint64_t *)&unk_10083AEC0);
  v13 = swift_release(KeyPath);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
  v14 = *(_QWORD *)(*(_QWORD *)(v1 - 96) + 16);
  sub_100014E7C(v14);
  v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
  specialized Array._endMutation()(v15);
  v16 = sub_10001A630(&qword_10083C4C0);
  inited = swift_initStackObject(v16, v1 - 240);
  v18 = sub_1000152BC(inited, 2);
  v20 = v19;
  v21 = swift_getKeyPath(&unk_1006B5858);
  v22 = sub_1003436A4(v21, 0x696E203D3D204B25, 0xE90000000000006CLL, (uint64_t *)&unk_10083AEC0);
  swift_release(v21);
  *v20 = v22;
  v23 = swift_getKeyPath(&unk_1006B58C8);
  v24 = sub_1003436A4(v23, 0x4F4E203D3D204B25, 0xE800000000000000, (uint64_t *)&unk_10083AEC0);
  swift_release(v23);
  v20[1] = v24;
  sub_100014EA4();
  v25 = sub_1000153F8(v18);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v25);
  v26 = *(_QWORD *)(*(_QWORD *)(v1 - 96) + 16);
  sub_100014E7C(v26);
  v27 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v26, v25);
  specialized Array._endMutation()(v27);
  v28 = swift_initStackObject(v16, v0 + 1376);
  v29 = sub_1000152BC(v28, 2);
  v31 = v30;
  v32 = swift_getKeyPath(&unk_1006B5940);
  v33 = sub_1003436A4(v32, 0x696E203D3D204B25, 0xE90000000000006CLL, (uint64_t *)&unk_10083AEC0);
  swift_release(v32);
  *v31 = v33;
  v34 = swift_getKeyPath(&unk_1006B5998);
  v35 = sub_1003436A4(v34, 0x4F4E203D3D204B25, 0xE800000000000000, (uint64_t *)&unk_10083AEC0);
  swift_release(v34);
  v31[1] = v35;
  sub_100014EA4();
  v36 = sub_1000153F8(v29);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v36);
  v37 = *(_QWORD *)(*(_QWORD *)(v1 - 96) + 16);
  sub_100014E7C(v37);
  v38 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v36);
  specialized Array._endMutation()(v38);
  v39 = sub_10001A630(&qword_10083C4C0);
  v40 = swift_initStackObject(v39, v0 + 1168);
  v41 = sub_1000152BC(v40, 2);
  v43 = v42;
  v44 = swift_getKeyPath(&unk_1006B5B40);
  v45 = sub_1003436A4(v44, 0x4F4E203D3D204B25, 0xE800000000000000, (uint64_t *)&unk_10083AEC0);
  swift_release(v44);
  *v43 = v45;
  v46 = swift_getKeyPath(&unk_1006B5BB8);
  v47 = sub_1003436A4(v46, 0x4F4E203D3D204B25, 0xE800000000000000, (uint64_t *)&unk_10083AEC0);
  swift_release(v46);
  v43[1] = v47;
  sub_100014EA4();
  v48 = sub_10000D2BC(v41);
  sub_100015260(v48);
  v49 = *(_QWORD *)(v0 + 792);
  v50 = swift_getKeyPath(&unk_1006B5AC8);
  v51 = sub_1003436A4(v50, 0x4F4E203D3D204B25, 0xE800000000000000, (uint64_t *)&unk_10083AEC0);
  swift_release(v50);
  sub_100015260(v51);
  v2 = swift_getKeyPath(&unk_1006B5A68);
  v3 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
  v4 = objc_msgSend(v3, "uuid");

  v5 = *(_QWORD *)(v0 + 768);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v4);

  (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 776) + 56))(v5, 0, 1, *(_QWORD *)(v0 + 784));
  v6 = sub_10033E1A4(v2, v5);
  swift_release(v2);
  sub_100015260(v6);
  sub_1000151E8(*(_QWORD *)(v0 + 832), v49, _s10PredicatesO19CompletionPredicateOMa);
  v7 = (char *)&loc_100013FFC + dword_10033B5AC[swift_getEnumCaseMultiPayload(v49, *(_QWORD *)(v0 + 824))];
  __asm { BR              X10 }
}

uint64_t sub_100014E7C(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  if (result + 1 > (uint64_t)(v2 >> 1))
    return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v2 > 1);
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_100014EA4()
{
  specialized Array._endMutation()();
}

id sub_100014ED4()
{
  return sub_100014EE8();
}

id sub_100014EE8()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSString v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;

  v1 = (id)objc_opt_self(REMUserDefaults);
  v2 = objc_msgSend(v1, "daemonUserDefaults");
  v3 = objc_msgSend(v2, "tipKitCachedCountOfHashtags");

  if (v3)
  {
    v4 = objc_msgSend(v3, "integerValue");

    if ((uint64_t)v4 > 0)
      goto LABEL_7;
  }
  v5 = sub_1000153F4(0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v5);
  v7 = _swiftEmptyArrayStorage[2];
  v6 = _swiftEmptyArrayStorage[3];
  if (v7 >= v6 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1);
  v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v5);
  specialized Array._endMutation()(v8);
  v9 = (void *)sub_10000D2BC(_swiftEmptyArrayStorage);
  v10 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
  v11 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v10), "entity");
  objc_msgSend(v11, "setEntity:", v12);

  objc_msgSend(v11, "setAffectedStores:", 0);
  objc_msgSend(v11, "setPredicate:", v9);

  objc_msgSend(v11, "setFetchLimit:", 1);
  v13 = NSManagedObjectContext.count<A>(for:)(v11, v10);
  if (!v0)
  {
    v4 = (id)v13;
    v14 = objc_msgSend(v1, "daemonUserDefaults");
    v15 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v4);
    objc_msgSend(v14, "setTipKitCachedCountOfHashtags:", v15);

LABEL_7:
    v1 = objc_msgSend(objc_allocWithZone((Class)REMStoreInvocationResult), "init");
    v16 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v4);
    static String._unconditionallyBridgeFromObjectiveC(_:)(HashtagsCount);
    v18 = v17;
    v11 = String._bridgeToObjectiveC()();
    objc_msgSend(v1, "storeProperty:forKey:", v16, v11, swift_bridgeObjectRelease(v18).n128_f64[0]);

  }
  return v1;
}

uint64_t sub_1000151B0(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1000151E8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10001522C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_100015260(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  if (v4 >= v3 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1);
  v5 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, a1);
  return specialized Array._endMutation()(v5);
}

uint64_t sub_1000152BC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = 2 * a2;
  return result;
}

id sub_1000152CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSString v3;
  Class isa;
  id v5;

  v0 = sub_10001A630((uint64_t *)&unk_100839E80);
  v1 = swift_allocObject(v0, 128, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006A3C20;
  *(_QWORD *)(v1 + 32) = 0xD000000000000011;
  *(_QWORD *)(v1 + 40) = 0x80000001006FF7B0;
  *(_QWORD *)(v1 + 88) = &type metadata for String;
  *(_QWORD *)(v1 + 56) = &type metadata for String;
  *(_QWORD *)(v1 + 64) = 0xD000000000000023;
  *(_QWORD *)(v1 + 72) = 0x80000001006FC190;
  v2 = rem_currentRuntimeVersion(v1);
  *(_QWORD *)(v1 + 120) = &type metadata for Int;
  *(_QWORD *)(v1 + 96) = v2;
  v3 = String._bridgeToObjectiveC()();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v3, isa);

  return v5;
}

id sub_1000153F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  Class isa;
  id v10;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain(a1);
    for (i = 0; i != v2; ++i)
    {
      v5 = *(void **)(a1 + 8 * i + 32);
      if (v5)
      {
        v6 = v5;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
        v8 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v7 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v8 >= v7 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1);
        v4 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v6);
        specialized Array._endMutation()(v4);
      }
    }
    swift_bridgeObjectRelease(a1);
  }
  swift_bridgeObjectRelease(a1);
  sub_1000151B0(0, (unint64_t *)&unk_100839910, NSPredicate_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  v10 = objc_msgSend((id)objc_opt_self(NSCompoundPredicate), "orPredicateWithSubpredicates:", isa);

  return v10;
}

void sub_1000155D8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned __int8 v6;
  id v7;
  NSObject *v8;
  id v9;

  objc_msgSend(*(id *)(a1 + 32), "setStoreController:", *(_QWORD *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "persistentStoreCoordinator"));
  objc_msgSend(*(id *)(a1 + 32), "setPersistentStoreCoordinator:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mergePolicy"));
  objc_msgSend(*(id *)(a1 + 32), "setMergePolicy:", v3);

  objc_msgSend(*(id *)(a1 + 32), "setTransactionAuthor:", *(_QWORD *)(a1 + 48));
  if ((objc_opt_respondsToSelector(*(_QWORD *)(a1 + 32), "_setAllowsExpandedUserInfoKeys:") & 1) != 0)
    objc_msgSend(*(id *)(a1 + 32), "_setAllowsExpandedUserInfoKeys:", 1);
  if (*(_BYTE *)(a1 + 56))
  {
    v4 = *(void **)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSQueryGenerationToken currentQueryGenerationToken](NSQueryGenerationToken, "currentQueryGenerationToken"));
    v9 = 0;
    v6 = objc_msgSend(v4, "setQueryGenerationFromToken:error:", v5, &v9);
    v7 = v9;

    if ((v6 & 1) == 0)
    {
      v8 = objc_claimAutoreleasedReturnValue(+[REMLogStore read](REMLogStore, "read"));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
        sub_1006847A4();

    }
  }
}

void sub_1000156FC(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  _BYTE v8[40];
  uint64_t v10;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  __chkstk_darwin(v4);
  v10 = 0;
  sub_1000181B8();
  v6 = v5;
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "newBackgroundContextWithAuthor:", v7, swift_bridgeObjectRelease(v6).n128_f64[0]);

  sub_1000184A8(a1, (uint64_t)v8);
  __asm { BR              X11 }
}

void sub_1000157D8(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  char v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;

  *(_DWORD *)(v4 - 88) = a1;
  *(_WORD *)(v4 - 84) = WORD2(a1) & 0x3FFF;
  v5 = (_QWORD *)swift_allocObject(&unk_1007F0028, 56, 7);
  v5[2] = v4 - 72;
  v5[3] = v2;
  v5[4] = v1;
  v5[5] = v3;
  v5[6] = v4 - 136;
  v6 = swift_allocObject(&unk_1007F0050, 32, 7);
  *(_QWORD *)(v6 + 16) = sub_10000A034;
  *(_QWORD *)(v6 + 24) = v5;
  *(_QWORD *)(v4 - 152) = sub_100119B20;
  *(_QWORD *)(v4 - 144) = v6;
  *(_QWORD *)(v4 - 184) = _NSConcreteStackBlock;
  *(_QWORD *)(v4 - 176) = 1107296256;
  *(_QWORD *)(v4 - 168) = sub_1000098C4;
  *(_QWORD *)(v4 - 160) = &unk_1007F0068;
  v7 = _Block_copy((const void *)(v4 - 184));
  v8 = *(_QWORD *)(v4 - 144);
  v9 = v3;
  swift_retain(v6);
  swift_release(v8);
  objc_msgSend(v9, "performBlockAndWait:", v7);
  _Block_release(v7);
  v10 = ((uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t, uint64_t, uint64_t))swift_isEscapingClosureAtFileLocation)(v6, "", 109, 25, 45, 1);
  swift_release(v6);
  if ((v10 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    if (*(_QWORD *)(v4 - 136))
    {
      v11 = swift_errorRetain(*(_QWORD *)(v4 - 136));
      swift_willThrow(v11);

      swift_errorRelease(*(_QWORD *)(v4 - 136));
      v12 = *(void **)(v4 - 72);
      swift_release(v5);

      return;
    }
    v13 = *(void **)(v4 - 72);
    if (v13)
    {
      v13;

      swift_errorRelease(*(_QWORD *)(v4 - 136));
      v14 = *(void **)(v4 - 72);
      swift_release(v5);

      return;
    }
  }
  __break(1u);
}

_QWORD *sub_100015B0C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_16;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      v3 = 0;
      v4 = v1 & 0xC000000000000001;
      v5 = v1 & 0xFFFFFFFFFFFFFF8;
      v6 = (unint64_t *)&qword_10083FBF0;
      v20 = v1 & 0xFFFFFFFFFFFFFF8;
      while (v4)
      {
        v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v1);
LABEL_9:
        v15 = v14;
        v16 = v3 + 1;
        if (__OFADD__(v3, 1))
          goto LABEL_15;
        sub_1000151B0(0, v6, NSPersistentStore_ptr);
        v17 = static NSObject.== infix(_:_:)(v15);
        if ((v17 & 1) != 0)
        {

        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v17);
          v7 = v4;
          v8 = v2;
          v9 = v1;
          v10 = v6;
          v11 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
          v12 = v11;
          v6 = v10;
          v1 = v9;
          v2 = v8;
          v4 = v7;
          v5 = v20;
          v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v15);
          specialized ContiguousArray._endMutation()(v13);
        }
        ++v3;
        if (v16 == v2)
          return _swiftEmptyArrayStorage;
      }
      if (v3 < *(_QWORD *)(v5 + 16))
        break;
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      if (v1 < 0)
        v19 = v1;
      else
        v19 = v1 & 0xFFFFFFFFFFFFFF8;
      v2 = _CocoaArrayWrapper.endIndex.getter(v19);
      if (!v2)
        return _swiftEmptyArrayStorage;
    }
    v14 = *(id *)(v1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

double sub_100016090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v11 = v10;
  if (qword_1008378C0 != -1)
    swift_once(&qword_1008378C0, sub_100575A20);
  sub_10001613C(v9, v11, a4, a5, a6);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v11).n128_u64[0];
  return result;
}

uint64_t sub_10001613C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD aBlock[5];
  _QWORD *v37;

  v30 = a4;
  v31 = a5;
  v29 = a1;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v32 = *(_QWORD *)(v11 - 8);
  v33 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for REMAnalyticsEvent(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v17 = 0;
  v17[1] = 0xE000000000000000;
  v17[2] = 0;
  v17[3] = 0;
  v18 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for REMAnalyticsEvent.storeControllerReadWrite(_:), v14);
  if ((REMAnalyticsEvent.isUsed.getter(v18) & 1) == 0)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v15 + 8))(v17, v14);
  v28 = *(_QWORD *)&v5[OBJC_IVAR____TtC7remindd16RDAsyncAnalytics_queue];
  v19 = (_QWORD *)swift_allocObject(a3, 40, 7);
  v20 = v29;
  v19[2] = v5;
  v19[3] = v20;
  v19[4] = a2;
  aBlock[4] = v30;
  v37 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = v31;
  v21 = _Block_copy(aBlock);
  v22 = v5;
  v23 = swift_bridgeObjectRetain(a2);
  static DispatchQoS.unspecified.getter(v23);
  v35 = _swiftEmptyArrayStorage;
  v24 = sub_1000D3124();
  v25 = sub_10001A630((uint64_t *)&unk_100838000);
  v26 = sub_1000D316C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v25, v26, v8, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v33);
  (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v17, v14);
  return swift_release(v37);
}

void sub_100016494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000164AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "l_accountStoreMap"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", *(_QWORD *)(a1 + 40)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100016640(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  char v17;
  id v18;
  uint64_t v20;

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v3 + OBJC_IVAR____TtC7remindd26RDClientConnectionListener_listenerQueue);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v11 = v10;
  v12 = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v12 & 1) != 0)
  {
    v13 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcDaemon);
    v14 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcDaemon + 8);
    sub_100017004();
    v15 = v11;
    v16 = a2;
    swift_unknownObjectRetain(v13);
    v17 = static NSObject.== infix(_:_:)(a1);
    v18 = objc_allocWithZone((Class)type metadata accessor for RDClientConnection());
    sub_10001AE5C(v16, v13, v14, v15, v17 & 1);
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x100016F8CLL);
}

unint64_t sub_100017004()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100838010;
  if (!qword_100838010)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100838010);
  }
  return result;
}

uint64_t sub_100017040(Swift::Int *a1, void *a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  Swift::Int v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  id v23;
  char v24;
  void *v25;
  id v26;
  Swift::Int v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  char isUniquelyReferenced_nonNull_native;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v39;
  Swift::Int v40;

  v7 = v4;
  v10 = *v4;
  if ((*v4 & 0xC000000000000001) != 0)
  {
    if (v10 < 0)
      v11 = *v4;
    else
      v11 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v4);
    v12 = a2;
    v13 = __CocoaSet.member(for:)();

    if (v13)
    {
      swift_bridgeObjectRelease(v10);

      v39 = v13;
      v14 = a3(0);
      swift_unknownObjectRetain(v13);
      swift_dynamicCast(&v40, &v39, (char *)&type metadata for Swift.AnyObject + 8, v14, 7);
      *a1 = v40;
      swift_unknownObjectRelease(v13);
      return 0;
    }
    result = __CocoaSet.count.getter(v11);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v27 = sub_1002DE3D0(v11, result + 1, a4, a3);
    v40 = v27;
    v28 = *(_QWORD *)(v27 + 16);
    if (*(_QWORD *)(v27 + 24) <= v28)
    {
      v34 = v28 + 1;
      v35 = v12;
      sub_1002E07F0(v34, a4);
      v29 = v40;
    }
    else
    {
      v29 = v27;
      v30 = v12;
    }
    sub_1002E0DF0((uint64_t)v12, v29);
    v36 = *v7;
    *v7 = v29;
    swift_bridgeObjectRelease(v36);
    *a1 = (Swift::Int)v12;
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 40);
    swift_bridgeObjectRetain(v10);
    v17 = NSObject._rawHashValue(seed:)(v16);
    v18 = -1 << *(_BYTE *)(v10 + 32);
    v19 = v17 & ~v18;
    if (((*(_QWORD *)(v10 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
    {
      a3(0);
      v20 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v19);
      v21 = static NSObject.== infix(_:_:)(v20);

      if ((v21 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v10);
        v25 = *(void **)(*(_QWORD *)(*v7 + 48) + 8 * v19);
        *a1 = (Swift::Int)v25;
        v26 = v25;
        return 0;
      }
      v22 = ~v18;
      while (1)
      {
        v19 = (v19 + 1) & v22;
        if (((*(_QWORD *)(v10 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
          break;
        v23 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v19);
        v24 = static NSObject.== infix(_:_:)(v23);

        if ((v24 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    v40 = *v7;
    *v7 = 0x8000000000000000;
    v32 = a2;
    sub_1000172EC((uint64_t)v32, v19, isUniquelyReferenced_nonNull_native, a4, a3);
    v33 = *v7;
    *v7 = v40;
    swift_bridgeObjectRelease(v33);
    *a1 = (Swift::Int)v32;
  }
  return 1;
}

void sub_1000172EC(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t *v5;
  uint64_t *v7;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v7 = v5;
  v10 = *(_QWORD *)(*v5 + 16);
  v11 = *(_QWORD *)(*v5 + 24);
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_14;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1002E07F0(v12, a4);
  }
  else
  {
    if (v11 > v10)
    {
      sub_1002E4484(a4);
      goto LABEL_14;
    }
    sub_1002E6418(v12, a4);
  }
  v13 = *v5;
  v14 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v5 + 40));
  v15 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v14 & ~v15;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v16 = a5(0);
    v17 = *(id *)(*(_QWORD *)(v13 + 48) + 8 * a2);
    v18 = static NSObject.== infix(_:_:)(v17);

    if ((v18 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v16);
      __break(1u);
    }
    else
    {
      v19 = ~v15;
      while (1)
      {
        a2 = (a2 + 1) & v19;
        if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v20 = *(id *)(*(_QWORD *)(v13 + 48) + 8 * a2);
        v21 = static NSObject.== infix(_:_:)(v20);

        if ((v21 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v22 = *v7;
  *(_QWORD *)(*v7 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v22 + 48) + 8 * a2) = a1;
  v23 = *(_QWORD *)(v22 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (v24)
    __break(1u);
  else
    *(_QWORD *)(v22 + 16) = v25;
}

uint64_t sub_100017470(Swift::Int *a1, void *a2)
{
  return sub_100017040(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RDClientConnection, &qword_100844300);
}

void sub_100017484(uint64_t a1)
{
  __asm { BR              X9 }
}

void sub_100017500(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t *buf, uint64_t a12, uint64_t a13, os_log_type_t type, uint64_t a15, os_log_t log, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  Swift::String v46;
  void *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  __int16 v56;

  swift_bridgeObjectRetain(v40);
  v50 = v42;
  v51 = v40;
  v52 = v39;
  v53 = v43;
  v54 = v44;
  v55 = v45;
  v56 = WORD2(v45);
  if (qword_1008371A8 != -1)
  {
    swift_once(&qword_1008371A8, sub_1003201E8);
    v39 = v49;
  }
  sub_10001BB24(v42, v40, v39, v43, v44, v45);
  v46._countAndFlagsBits = v41;
  v46._object = v47;
  String.append(_:)(v46);
  sub_10001B228((uint64_t)&v50, 0x2E65726F7473, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  sub_1000178E8(v42, v40, v39, v43, v44, v45);
  __asm { BR              X10 }
}

uint64_t sub_1000178E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t result;

  v6 = (a6 >> 46) & 3;
  if (v6 >= 2)
  {
    if ((_DWORD)v6 != 2)
      return result;
    swift_bridgeObjectRelease(a3);
    a2 = a5;
  }
  return swift_bridgeObjectRelease(a2);
}

void sub_10001797C()
{
  void *v0;
  void *v1;
  Swift::String v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  void *object;
  Swift::String v11;
  objc_super v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE v15[48];
  _QWORD v16[5];

  v1 = v0;
  v16[0] = 0;
  v16[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(77);
  v13 = 0;
  v14 = 0xE000000000000000;
  v2._countAndFlagsBits = 60;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v12.receiver = v0;
  v12.super_class = (Class)type metadata accessor for RDClientConnection();
  v3 = objc_msgSendSuper2(&v12, "description");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8._object = (void *)0x8000000100703980;
  v8._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v8);
  sub_1000184A8((uint64_t)v1 + OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity, (uint64_t)v15);
  sub_1000181B8();
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11._countAndFlagsBits = 91;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  sub_1000184A8((uint64_t)v15, (uint64_t)v16);
  __asm { BR              X12 }
}

uint64_t sub_100017AB4()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  void *object;
  Swift::String v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  Swift::String v20;
  uint64_t v22;

  v2._countAndFlagsBits = ((uint64_t (*)(void *, void *))dispatch thunk of CustomStringConvertible.description.getter)(&type metadata for Int32, &protocol witness table for Int32);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._object = (void *)0x80000001007039A0;
  v4._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v4);
  v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC7remindd18RDClientConnection_xpcConnection), "serviceName"));
  if (v5)
  {
    v6 = v5;
    v7 = ((uint64_t (*)(void))static String._unconditionallyBridgeFromObjectiveC(_:))();
    v9 = v8;

  }
  else
  {
    v9 = (void *)0xE300000000000000;
    v7 = 7104878;
  }
  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  v11._countAndFlagsBits = 0x6C417065656B202CLL;
  v11._object = (void *)0xEC0000003D657669;
  String.append(_:)(v11);
  v12 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd18RDClientConnection_keepAliveTransaction);
  if (v12)
    v13 = 1702195828;
  else
    v13 = 0x65736C6166;
  if (v12)
    v14 = 0xE400000000000000;
  else
    v14 = 0xE500000000000000;
  v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease(v14);
  v16._countAndFlagsBits = v1 + 2;
  v16._object = (void *)0x80000001007039C0;
  String.append(_:)(v16);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC7remindd18RDClientConnection_isUserInteractive))
    v17 = 1702195828;
  else
    v17 = 0x65736C6166;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC7remindd18RDClientConnection_isUserInteractive))
    v18 = 0xE400000000000000;
  else
    v18 = 0xE500000000000000;
  v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease(v18);
  v20._countAndFlagsBits = 62;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  return v22;
}

uint64_t type metadata accessor for RDClientConnection()
{
  return objc_opt_self(_TtC7remindd18RDClientConnection);
}

void sub_100017C90(void *a1, uint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  NSObject *v19;
  NSObject **v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  Swift::String v40;
  id v41;
  uint64_t v42;
  void *v43;
  void *v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;
  NSString v48;
  id v49;
  id v50;
  void *v51;
  _QWORD v52[11];
  NSObject **v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[5];
  _QWORD v57[6];
  __int128 v58[2];
  uint64_t v59;
  unsigned int v60;
  unsigned __int16 v61;

  v6 = swift_allocObject(&unk_1007F7130, 24, 7);
  *(_QWORD *)(v6 + 16) = a3;
  v57[0] = a1;
  _Block_copy(a3);
  v7 = sub_1000151B0(0, &qword_10084CC58, REMStoreInvocation_ptr);
  v8 = a1;
  v9 = sub_10001A630(&qword_10084CC60);
  if (swift_dynamicCast(v58, v57, v7, v9, 6))
  {
    sub_10001BCA8(v58, (uint64_t)v56);
    sub_1000184A8(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v57);
    v10 = sub_10001A630((uint64_t *)&unk_10083A270);
    v11 = swift_allocObject(v10, 112, 7);
    *(_OWORD *)(v11 + 16) = xmmword_1006A3C40;
    sub_1000184A8((uint64_t)v57, (uint64_t)v58);
    v12 = v60 | ((unint64_t)v61 << 32);
    v13 = v61 >> 14;
    if (v13 >= 2)
    {
      if (v13 == 2)
      {
        v61 = WORD2(v12) & 0x3FFF;
        if ((v12 & 0x10000000000) != 0)
        {
          v23 = 0x80000001006F8F90;
          v22 = 0xD000000000000011;
          goto LABEL_11;
        }
      }
    }
    else
    {
      v61 = WORD2(v12) & 0x3FFF;
    }
    v22 = 0;
    v23 = 0xE000000000000000;
LABEL_11:
    *(_QWORD *)(v11 + 56) = &type metadata for String;
    v24 = sub_1000184F8();
    *(_QWORD *)(v11 + 64) = v24;
    *(_QWORD *)(v11 + 32) = v22;
    *(_QWORD *)(v11 + 40) = v23;
    sub_1000181B8();
    *(_QWORD *)(v11 + 96) = &type metadata for String;
    *(_QWORD *)(v11 + 104) = v24;
    *(_QWORD *)(v11 + 72) = v25;
    *(_QWORD *)(v11 + 80) = v26;
    v27 = String.init(format:_:)(1076183077, 0xE400000000000000, v11);
    v29 = v28;
    v30 = objc_msgSend(v8, "name");
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v33 = v32;

    v54 = v31;
    v55 = v33;
    v34._countAndFlagsBits = 10272;
    v34._object = (void *)0xE200000000000000;
    String.append(_:)(v34);
    v35._countAndFlagsBits = v27;
    v35._object = v29;
    String.append(_:)(v35);
    v37 = __chkstk_darwin(v36);
    v52[2] = v8;
    v52[3] = v27;
    v52[4] = v29;
    v52[5] = a2;
    v52[6] = sub_100009434;
    v52[7] = v6;
    v52[8] = v56;
    v38 = static os_log_type_t.info.getter(v37);
    measureTimeElapsed(_:level:block:)(v31, v33, v38, sub_100006938, v52);
    swift_bridgeObjectRelease(v33);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v56);
    swift_release(v6);
    swift_bridgeObjectRelease(v29);
    return;
  }
  v59 = 0;
  memset(v58, 0, sizeof(v58));
  sub_10000882C((uint64_t)v58, &qword_10084CC68);
  if (qword_100837700 != -1)
    swift_once(&qword_100837700, sub_1004BC0B4);
  v14 = type metadata accessor for Logger(0);
  sub_10001AAA8(v14, (uint64_t)qword_10084CAB8);
  v15 = v8;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v53 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v18 = 138412290;
    *(_QWORD *)&v58[0] = v15;
    v19 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v58, (char *)v58 + 8);
    v20 = v53;
    *v53 = v15;

    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Invocation does not conform to RDInvocable {invocation: %@}", v18, 0xCu);
    v21 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v20, 1, v21);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {

    v16 = v15;
  }

  v39 = (void *)objc_opt_self(REMError);
  *(_QWORD *)&v58[0] = 0;
  *((_QWORD *)&v58[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(59);
  v40._countAndFlagsBits = 0xD000000000000038;
  v40._object = (void *)0x8000000100706180;
  String.append(_:)(v40);
  v41 = -[NSObject description](v15, "description");
  v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
  v44 = v43;

  v45._countAndFlagsBits = v42;
  v45._object = v44;
  String.append(_:)(v45);
  swift_bridgeObjectRelease(v44);
  v46._countAndFlagsBits = 125;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  v47 = *((_QWORD *)&v58[0] + 1);
  v48 = String._bridgeToObjectiveC()();
  v49 = objc_msgSend(v39, "internalErrorWithDebugDescription:", v48, swift_bridgeObjectRelease(v47).n128_f64[0]);

  v50 = v49;
  v51 = (void *)_convertErrorToNSError(_:)(v50);
  ((void (**)(_QWORD, _QWORD, void *))a3)[2](a3, 0, v51);
  swift_release(v6);

}

void sub_1000181B8()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v2[40];

  sub_1000184A8(v0, (uint64_t)&v1);
  sub_1000184A8(v0, (uint64_t)v2);
  __asm { BR              X11 }
}

void sub_100018218(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  id v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  id v17;
  _WORD v18[24];
  _DWORD v19[11];
  unsigned __int16 v20;
  _QWORD v21[4];
  unint64_t v22;
  unsigned int v23;
  unsigned __int16 v24;

  *(_DWORD *)(v2 - 72) = a1;
  *(_WORD *)(v2 - 68) = WORD2(a1) & 0x3FFF;
  v3 = sub_10001853C();
  if (v4)
  {
    v5 = v3;
    v6 = v4;
    goto LABEL_9;
  }
  sub_1000184A8(v1, (uint64_t)v21);
  v7 = v23 | ((unint64_t)v24 << 32);
  v8 = v24 >> 14;
  if (v8 >= 2)
  {
    if (v8 == 2)
    {
      v24 = WORD2(v7) & 0x3FFF;
      v6 = v22;
      if (v22)
      {
        v5 = v21[3];
        swift_bridgeObjectRetain(v22);
      }
      else
      {
        v6 = 0xEF4449656C646E75;
        v5 = 0x426E776F6E6B6E55;
      }
LABEL_9:
      v12 = sub_10001A630((uint64_t *)&unk_10083A270);
      v13 = swift_allocObject(v12, 152, 7);
      *(_OWORD *)(v13 + 16) = xmmword_1006A3C20;
      *(_QWORD *)(v13 + 56) = &type metadata for String;
      *(_QWORD *)(v13 + 64) = sub_1000184F8();
      *(_QWORD *)(v13 + 32) = v5;
      *(_QWORD *)(v13 + 40) = v6;
      sub_1000184A8(v1, (uint64_t)v19);
      v14 = v19[10] | ((unint64_t)v20 << 32);
      v15 = v20 >> 14;
      if (v15 >= 2)
      {
        if (v15 == 2)
        {
          v20 = WORD2(v14) & 0x3FFF;
          v16 = v19[0];
          goto LABEL_14;
        }
      }
      else
      {
        v20 = WORD2(v14) & 0x3FFF;
      }
      v17 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
      v16 = objc_msgSend(v17, "processIdentifier");

LABEL_14:
      *(_QWORD *)(v13 + 96) = &type metadata for Int32;
      *(_QWORD *)(v13 + 104) = &protocol witness table for Int32;
      *(_DWORD *)(v13 + 72) = v16;
      sub_1000184A8(v1, (uint64_t)v18);
      __asm { BR              X12 }
    }
  }
  else
  {
    v24 = WORD2(v7) & 0x3FFF;
  }
  v9 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v10 = objc_msgSend(v9, "processName");

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v6 = v11;

  goto LABEL_9;
}

uint64_t sub_1000184A8(uint64_t a1, uint64_t a2)
{
  initializeWithTake for RDClientIdentity.XPCClientIdentity(a2, a1);
  return a2;
}

__n128 initializeWithTake for RDAccountUtils.AccountInfo(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 29) = *(_OWORD *)(a2 + 29);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

unint64_t sub_1000184F8()
{
  unint64_t result;

  result = qword_100839920;
  if (!qword_100839920)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100839920);
  }
  return result;
}

unint64_t sub_10001853C()
{
  uint64_t v0;
  unint64_t v1;
  unsigned int v2;
  void *v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unsigned __int16 v10;

  v1 = 0xD000000000000010;
  sub_1000184A8(v0, (uint64_t)&v7);
  v2 = v10 >> 14;
  if (v2 >= 2)
  {
    if (v2 == 2)
    {
      v1 = (unint64_t)v8;
      swift_bridgeObjectRetain(v9);
    }
  }
  else
  {
    v10 &= 0x3FFFu;
    v4 = v7;
    v3 = v8;
    _StringGuts.grow(_:)(20);
    swift_bridgeObjectRelease(0xE000000000000000);
    v5._countAndFlagsBits = v4;
    v5._object = v3;
    String.append(_:)(v5);
    return 0xD000000000000012;
  }
  return v1;
}

uint64_t sub_100018618(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10001865C(unint64_t a1, unint64_t a2)
{
  void *v2;
  void *v3;
  NSString v6;
  id v7;
  uint64_t v8;
  char v9;
  _OWORD v11[2];
  _BYTE v12[24];
  uint64_t v13;

  v3 = v2;
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v3, "valueForEntitlement:", v6);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)(v11, v7);
    swift_unknownObjectRelease(v7);
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  sub_10001A5E8((uint64_t)v11, (uint64_t)v12);
  if (!v13)
  {
    sub_10000882C((uint64_t)v12, (uint64_t *)&unk_10083D5B0);
    goto LABEL_9;
  }
  if ((swift_dynamicCast(v11, v12, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_9:
    v9 = 0;
    return v9 & 1;
  }
  v8 = *((_QWORD *)&v11[0] + 1);
  if (v11[0] == __PAIR128__(a2, a1))
  {
    swift_bridgeObjectRelease(a2);
    v9 = 1;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)&v11[0], *((_QWORD *)&v11[0] + 1), a1, a2, 0);
    swift_bridgeObjectRelease(v8);
  }
  return v9 & 1;
}

uint64_t sub_100018794(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_DWORD *)(a2 + 32) == (_DWORD)result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 9; ; ++i)
  {
    v4 = i - 7;
    if (__OFADD__(i - 8, 1))
      break;
    v6 = *(_DWORD *)(a2 + 4 * i) == (_DWORD)result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000187F8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A630(&qword_100844308);
      v11 = (_QWORD *)swift_allocObject(v10, 4 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 29;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 2);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= (_QWORD *)((char *)a4 + 4 * v8 + 32))
          memmove(v14, a4 + 4, 4 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100018904(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_100018904(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000189EC(unsigned __int8 a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  id v11;
  __int128 v12;
  uint64_t v13;
  _OWORD v14[2];

  sub_10001B5F0(a1);
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v1, "valueForEntitlement:", v4, swift_bridgeObjectRelease(v3).n128_f64[0]);

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(v14, v5);
    swift_unknownObjectRelease(v5);
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  sub_10001A5E8((uint64_t)v14, (uint64_t)&v12);
  if (v13)
  {
    sub_10001A6CC(&v12, v14);
    sub_10001A670((uint64_t)v14, (uint64_t)&v12);
    v6 = sub_1000151B0(0, (unint64_t *)&unk_10083FE30, NSString_ptr);
    if ((swift_dynamicCast(&v11, &v12, (char *)&type metadata for Any + 8, v6, 6) & 1) != 0
      || (sub_10001A670((uint64_t)v14, (uint64_t)&v12),
          v7 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr),
          (swift_dynamicCast(&v11, &v12, (char *)&type metadata for Any + 8, v7, 6) & 1) != 0))
    {
      v8 = v11;
      v9 = objc_msgSend(v11, "BOOLValue");

      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v14);
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v14);
      return 1;
    }
  }
  else
  {
    sub_10000882C((uint64_t)&v12, (uint64_t *)&unk_10083D5B0);
    return 0;
  }
  return (uint64_t)v9;
}

void sub_100018B70(id a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(void *, id))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  double v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  unint64_t v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  double v49;
  void *v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  id v61;
  id v62;
  id v63;
  id v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  _QWORD *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  id v80;
  id v81;
  id v82;
  id v83;
  NSObject *v84;
  os_log_type_t v85;
  uint64_t v86;
  _QWORD *v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  void *v94;
  id v95;
  id v96;
  NSObject *v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  uint64_t v101;
  void *v102;
  id v103;
  id v104;
  NSObject *v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  id v110;
  id v111;
  id v112;
  id v113;
  os_log_type_t v114;
  _QWORD *v115;
  _QWORD *v116;
  os_log_type_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  os_log_type_t v122;
  os_log_type_t v123;
  NSObject *v124;
  NSObject *v125;
  uint64_t v126;
  NSObject *v127;
  NSObject *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(void *, id);
  uint64_t v135;
  uint64_t v136;
  id v137;
  uint64_t v138;
  _BYTE v139[16];
  uint64_t v140;
  uint64_t v141;
  __int128 v142[2];
  uint64_t v143;
  id v144;
  uint64_t v145;

  v6 = v5;
  v144 = a1;
  v12 = sub_1000151B0(0, &qword_10084CC58, REMStoreInvocation_ptr);
  v13 = a1;
  v14 = sub_10001A630(&qword_10084CC70);
  v134 = a5;
  v133 = a2;
  if ((swift_dynamicCast(v142, &v144, v12, v14, 6) & 1) != 0)
  {
    sub_10001BCA8(v142, (uint64_t)&v138);
    if (qword_100837700 != -1)
      swift_once(&qword_100837700, sub_1004BC0B4);
    v15 = type metadata accessor for Logger(0);
    sub_10001AAA8(v15, (uint64_t)qword_10084CAB8);
    v16 = v13;
    swift_bridgeObjectRetain_n(a3, 2);
    v17 = v16;
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc(42, -1);
      v116 = (_QWORD *)swift_slowAlloc(8, -1);
      v118 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v142[0] = v118;
      *(_DWORD *)v20 = 138544130;
      v144 = v17;
      v126 = a4;
      v21 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145);
      *v116 = v17;

      v114 = v19;
      *(_WORD *)(v20 + 12) = 2082;
      swift_bridgeObjectRetain(a3);
      v144 = (id)sub_10001A820(a2, a3, (uint64_t *)v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v20 + 22) = 2082;
      v22 = (void *)objc_opt_self(NSThread);
      v23 = objc_msgSend(v22, "currentThread");
      v24 = objc_msgSend(v23, "description");

      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v27 = v26;

      v28 = v25;
      a4 = v126;
      v144 = (id)sub_10001A820(v28, v27, (uint64_t *)v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145);
      *(_QWORD *)&v29 = swift_bridgeObjectRelease(v27).n128_u64[0];
      *(_WORD *)(v20 + 32) = 2048;
      v30 = v22;
      v6 = v5;
      v31 = objc_msgSend(v30, "currentThread", v29);
      v32 = objc_msgSend(v31, "qualityOfService");

      v144 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145);
      _os_log_impl((void *)&_mh_execute_header, v18, v114, "Performing store controller invocation {invocation: %{public}@, client: %{public}s, thread: %{public}s, qos: %ld}", (uint8_t *)v20, 0x2Au);
      v33 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v116, 1, v33);
      swift_slowDealloc(v116, -1, -1);
      swift_arrayDestroy(v118, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v118, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    v54 = v140;
    v55 = v141;
    sub_10000A388(&v138, v140);
    v56 = *(_QWORD *)(a4 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController);
    sub_1000184A8(a4 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v142);
    v57 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t))(v55 + 16))(v56, v142, v54, v55);
    if (v6)
    {
      v144 = (id)v6;
      v58 = sub_10001A630((uint64_t *)&unk_10083AA20);
      v59 = sub_1000151B0(0, &qword_10083AE30, NSError_ptr);
      swift_dynamicCast(&v137, &v144, v58, v59, 0);
      v60 = v137;
      v61 = v17;
      swift_bridgeObjectRetain_n(a3, 2);
      v62 = v60;
      v63 = v61;
      v64 = v62;
      v65 = Logger.logObject.getter(v64);
      v66 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v65, v66))
      {
        v67 = swift_slowAlloc(32, -1);
        v127 = v65;
        v68 = (_QWORD *)swift_slowAlloc(8, -1);
        v131 = swift_slowAlloc(64, -1);
        v135 = (uint64_t)v63;
        v136 = v131;
        *(_DWORD *)v67 = 138543874;
        v122 = v66;
        v69 = v63;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136);
        *v68 = v63;

        *(_WORD *)(v67 + 12) = 2082;
        swift_bridgeObjectRetain(a3);
        v135 = sub_10001A820(v133, a3, &v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136);
        swift_bridgeObjectRelease_n(a3, 3);
        *(_WORD *)(v67 + 22) = 2082;
        v135 = (uint64_t)v64;
        v70 = sub_1000E51DC((unint64_t *)&unk_10083AE38, &qword_10083AE30, NSError_ptr, (uint64_t)&protocol conformance descriptor for NSError);
        v71 = Error.rem_errorDescription.getter(v59, v70);
        v73 = v72;
        v135 = sub_10001A820(v71, v72, &v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136);

        swift_bridgeObjectRelease(v73);
        _os_log_impl((void *)&_mh_execute_header, v127, v122, "Error performing store controller invocation {invocation: %{public}@, client: %{public}s, error %{public}s}", (uint8_t *)v67, 0x20u);
        v74 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v68, 1, v74);
        swift_slowDealloc(v68, -1, -1);
        swift_arrayDestroy(v131, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v131, -1, -1);
        swift_slowDealloc(v67, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
      }
      v110 = v64;
      v134(0, v64);

      swift_errorRelease(v144);
    }
    else
    {
      v94 = (void *)v57;
      v95 = v17;
      swift_bridgeObjectRetain_n(a3, 2);
      v96 = v95;
      v97 = Logger.logObject.getter(v96);
      v98 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v97, (os_log_type_t)v98))
      {
        v99 = swift_slowAlloc(22, -1);
        v120 = (_QWORD *)swift_slowAlloc(8, -1);
        v129 = swift_slowAlloc(32, -1);
        v144 = (id)v129;
        *(_DWORD *)v99 = 138543618;
        v137 = v96;
        v124 = v97;
        v100 = v96;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138);
        *v120 = v96;

        *(_WORD *)(v99 + 12) = 2082;
        swift_bridgeObjectRetain(a3);
        v137 = (id)sub_10001A820(v133, a3, (uint64_t *)&v144);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138);
        swift_bridgeObjectRelease_n(a3, 3);
        _os_log_impl((void *)&_mh_execute_header, v124, (os_log_type_t)v98, "Finished performing store controller invocation  {invocation: %{public}@, client: %{public}s}", (uint8_t *)v99, 0x16u);
        v101 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v120, 1, v101);
        swift_slowDealloc(v120, -1, -1);
        swift_arrayDestroy(v129, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v129, -1, -1);
        swift_slowDealloc(v99, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
      }
      v112 = v94;
      v134(v94, 0);

    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v138);
  }
  else
  {
    v143 = 0;
    memset(v142, 0, sizeof(v142));
    sub_10000882C((uint64_t)v142, &qword_10084CC78);
    if (qword_100837700 != -1)
      swift_once(&qword_100837700, sub_1004BC0B4);
    v34 = type metadata accessor for Logger(0);
    sub_10001AAA8(v34, (uint64_t)qword_10084CAB8);
    v35 = v13;
    swift_bridgeObjectRetain_n(a3, 2);
    v36 = v35;
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = swift_slowAlloc(42, -1);
      v115 = (_QWORD *)swift_slowAlloc(8, -1);
      v119 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v142[0] = v119;
      *(_DWORD *)v39 = 138544130;
      v117 = v38;
      v138 = (uint64_t)v36;
      v40 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v139);
      *v115 = v36;

      *(_WORD *)(v39 + 12) = 2082;
      swift_bridgeObjectRetain(a3);
      v138 = sub_10001A820(a2, a3, (uint64_t *)v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v139);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v39 + 22) = 2082;
      v41 = (void *)objc_opt_self(NSThread);
      v42 = objc_msgSend(v41, "currentThread", v39 + 24);
      v43 = v36;
      v44 = a3;
      v45 = objc_msgSend(v42, "description");

      v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      v48 = v47;

      a3 = v44;
      v36 = v43;
      v138 = sub_10001A820(v46, v48, (uint64_t *)v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v139);
      *(_QWORD *)&v49 = swift_bridgeObjectRelease(v48).n128_u64[0];
      *(_WORD *)(v39 + 32) = 2048;
      v50 = v41;
      v6 = v5;
      v51 = objc_msgSend(v50, "currentThread", v49);
      v52 = objc_msgSend(v51, "qualityOfService");

      v138 = (uint64_t)v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v139);
      _os_log_impl((void *)&_mh_execute_header, v37, v117, "Performing invocation {invocation: %{public}@, client: %{public}s, thread: %{public}s, qos: %ld}", (uint8_t *)v39, 0x2Au);
      v53 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v115, 1, v53);
      swift_slowDealloc(v115, -1, -1);
      swift_arrayDestroy(v119, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v119, -1, -1);
      swift_slowDealloc(v39, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    v75 = sub_1000184A8(a4 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v142);
    __chkstk_darwin(v75);
    sub_1000156FC((uint64_t)v142);
    if (v6)
    {
      v138 = v6;
      v77 = sub_10001A630((uint64_t *)&unk_10083AA20);
      v78 = sub_1000151B0(0, &qword_10083AE30, NSError_ptr);
      swift_dynamicCast(&v144, &v138, v77, v78, 0);
      v79 = v144;
      v80 = v36;
      swift_bridgeObjectRetain_n(a3, 2);
      v81 = v79;
      v82 = v80;
      v83 = v81;
      v84 = Logger.logObject.getter(v83);
      v85 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v84, v85))
      {
        v86 = swift_slowAlloc(32, -1);
        v128 = v84;
        v87 = (_QWORD *)swift_slowAlloc(8, -1);
        v132 = swift_slowAlloc(64, -1);
        v136 = (uint64_t)v82;
        v137 = (id)v132;
        *(_DWORD *)v86 = 138543874;
        v123 = v85;
        v88 = v82;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137);
        *v87 = v82;

        *(_WORD *)(v86 + 12) = 2082;
        swift_bridgeObjectRetain(a3);
        v136 = sub_10001A820(v133, a3, (uint64_t *)&v137);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137);
        swift_bridgeObjectRelease_n(a3, 3);
        *(_WORD *)(v86 + 22) = 2082;
        v136 = (uint64_t)v83;
        v89 = sub_1000E51DC((unint64_t *)&unk_10083AE38, &qword_10083AE30, NSError_ptr, (uint64_t)&protocol conformance descriptor for NSError);
        v90 = Error.rem_errorDescription.getter(v78, v89);
        v92 = v91;
        v136 = sub_10001A820(v90, v91, (uint64_t *)&v137);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137);

        swift_bridgeObjectRelease(v92);
        _os_log_impl((void *)&_mh_execute_header, v128, v123, "Error performing invocation {invocation: %{public}@, client: %{public}s, error %{public}s}", (uint8_t *)v86, 0x20u);
        v93 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v87, 1, v93);
        swift_slowDealloc(v87, -1, -1);
        swift_arrayDestroy(v132, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v132, -1, -1);
        swift_slowDealloc(v86, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
      }
      v111 = v83;
      v134(0, v83);

      swift_errorRelease(v138);
    }
    else
    {
      v102 = v76;
      v103 = v36;
      swift_bridgeObjectRetain_n(a3, 2);
      v104 = v103;
      v105 = Logger.logObject.getter(v104);
      v106 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v105, (os_log_type_t)v106))
      {
        v107 = swift_slowAlloc(22, -1);
        v121 = (_QWORD *)swift_slowAlloc(8, -1);
        v130 = swift_slowAlloc(32, -1);
        v138 = v130;
        *(_DWORD *)v107 = 138543618;
        v144 = v104;
        v125 = v105;
        v108 = v104;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145);
        *v121 = v104;

        *(_WORD *)(v107 + 12) = 2082;
        swift_bridgeObjectRetain(a3);
        v144 = (id)sub_10001A820(v133, a3, &v138);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145);
        swift_bridgeObjectRelease_n(a3, 3);
        _os_log_impl((void *)&_mh_execute_header, v125, (os_log_type_t)v106, "Finished performing {invocation: %{public}@, client: %{public}s}", (uint8_t *)v107, 0x16u);
        v109 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v121, 1, v109);
        swift_slowDealloc(v121, -1, -1);
        swift_arrayDestroy(v130, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v130, -1, -1);
        swift_slowDealloc(v107, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
      }
      v113 = v102;
      v134(v102, 0);

    }
  }
}

uint64_t sub_100019D3C(char a1)
{
  void *v1;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v17[3];
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  _OWORD v22[3];

  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v1, "valueForEntitlement:", v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v22, v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v22, 0, 32);
  }
  sub_10001A5E8((uint64_t)v22, (uint64_t)&v20);
  if (v21)
  {
    sub_10001A6CC(&v20, v22);
    sub_10001A670((uint64_t)v22, (uint64_t)&v20);
    v5 = sub_10001A630((uint64_t *)&unk_10083AE10);
    if ((swift_dynamicCast(&v18, &v20, (char *)&type metadata for Any + 8, v5, 6) & 1) != 0)
      __asm { BR              X10 }
    sub_10001A670((uint64_t)v22, (uint64_t)&v20);
    v6 = sub_10001A630((uint64_t *)&unk_1008473E0);
    if ((swift_dynamicCast(&v18, &v20, (char *)&type metadata for Any + 8, v6, 6) & 1) != 0)
      __asm { BR              X10 }
    if (qword_100837928 != -1)
      swift_once(&qword_100837928, sub_1005A2648);
    v7 = type metadata accessor for Logger(0);
    sub_10001AAA8(v7, (uint64_t)qword_1008508E0);
    v8 = sub_10001A670((uint64_t)v22, (uint64_t)&v20);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = (void *)swift_slowAlloc(32, -1);
      v17[0] = v12;
      *(_DWORD *)v11 = 136446210;
      sub_10001A670((uint64_t)&v20, (uint64_t)&v18);
      v13 = String.init<A>(describing:)(&v18, (char *)&type metadata for Any + 8);
      v15 = v14;
      v18 = sub_10001A820(v13, v14, (uint64_t *)v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
      swift_bridgeObjectRelease(v15);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v20);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Unexpected privateRemindd entitlement format {reminddEntitlements: %{public}s}", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

    }
    else
    {

      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v20);
    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v22);
  }
  else
  {
    sub_10000882C((uint64_t)&v20, (uint64_t *)&unk_10083D5B0);
  }
  return 0;
}

uint64_t sub_10001A5E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_10083D5B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001A630(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_10001A670(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

_OWORD *sub_10001A6CC(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_10001A6DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_10001A740(a1, a2, v5);
}

unint64_t sub_10001A740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_10001A820(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_10001A8F0(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_10001A670((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_10001A670((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v12);
  return v7;
}

uint64_t sub_10001A8F0(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1000C9714(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_10001AAA8(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

void sub_10001AAC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1004BB818(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_10001ABA4(uint64_t result, int a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  NSString v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  uint64_t v21;
  uint64_t v22;
  NSString v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if ((result & ~a2) != 0)
  {
    v2 = a2;
    v3 = result;
    if (qword_100837928 != -1)
      swift_once(&qword_100837928, sub_1005A2648);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001AAA8(v4, (uint64_t)qword_1008508E0);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = swift_slowAlloc(22, -1);
      v9 = swift_slowAlloc(64, -1);
      v27 = v9;
      *(_DWORD *)v8 = 136446466;
      v10 = sub_1005A26D8(v3);
      v12 = v11;
      v25 = sub_10001A820(v10, v11, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
      swift_bridgeObjectRelease(v12);
      *(_WORD *)(v8 + 12) = 2082;
      v13 = sub_1005A26D8(v2);
      v15 = v14;
      v25 = sub_10001A820(v13, v14, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
      swift_bridgeObjectRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Operation denied {requestedAccessLevel: %{public}s, currentAccesslevel: %{public}s}", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }

    v16 = (void *)objc_opt_self(REMError);
    if ((v3 & 0x200) != 0)
    {
      v23 = String._bridgeToObjectiveC()();
      objc_msgSend(v16, "unauthorizedErrorWithMissingEntitlement:", v23);
    }
    else
    {
      v17 = String._bridgeToObjectiveC()();
      sub_1005A26D8(v3);
      v19 = v18;
      v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v19);
      sub_1005A26D8(v2);
      v22 = v21;
      v23 = String._bridgeToObjectiveC()();
      objc_msgSend(v16, "unauthorizedErrorWithMissingEntitlement:requestedAccessLevel:currentAccesslevel:", v17, v20, v23, swift_bridgeObjectRelease(v22).n128_f64[0]);

    }
    return swift_willThrow(v24);
  }
  return result;
}

void sub_10001AE5C(void *a1, uint64_t a2, uint64_t a3, void *a4, char a5)
{
  _BYTE *v5;
  char *v11;
  char *v12;
  id v13;
  unsigned int v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  objc_super v25;

  v11 = &v5[OBJC_IVAR____TtC7remindd18RDClientConnection_delegate];
  *((_QWORD *)v11 + 1) = 0;
  swift_unknownObjectWeakInit(v11, 0);
  *(_QWORD *)&v5[OBJC_IVAR____TtC7remindd18RDClientConnection_keepAliveTransaction] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC7remindd18RDClientConnection_cancellables] = &_swiftEmptySetSingleton;
  *(_QWORD *)&v5[OBJC_IVAR____TtC7remindd18RDClientConnection_xpcConnection] = a1;
  *(_QWORD *)&v5[OBJC_IVAR____TtC7remindd18RDClientConnection_notificationSubscriptionQueue] = a4;
  v5[OBJC_IVAR____TtC7remindd18RDClientConnection_isUserInteractive] = a5;
  v12 = v5;
  v13 = a1;
  a4;
  v14 = objc_msgSend(v13, "processIdentifier");
  v15 = v13;
  v16 = sub_100420360(v15);
  v18 = v17;
  v20 = v19;

  v21 = 0xFFFF800000000000;
  if ((a5 & 1) != 0)
    v21 = 0xFFFF810000000000;
  v22 = &v12[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity];
  *(_QWORD *)v22 = v14;
  *((_QWORD *)v22 + 1) = v18;
  *((_QWORD *)v22 + 3) = 0;
  *((_QWORD *)v22 + 4) = 0;
  *((_QWORD *)v22 + 2) = v20;
  *((_WORD *)v22 + 22) = (v21 & 0xFFFFFFFE00000000 | v16 & 0x1FFFFFFFFLL) >> 32;
  *((_DWORD *)v22 + 10) = v16;
  v23 = &v12[OBJC_IVAR____TtC7remindd18RDClientConnection_xpcDaemon];
  *(_QWORD *)v23 = a2;
  *((_QWORD *)v23 + 1) = a3;
  swift_unknownObjectRetain(a2);

  v25.receiver = v12;
  v25.super_class = (Class)type metadata accessor for RDClientConnection();
  v24 = (char *)&loc_10001AFD0
      + dword_10041E21C[*(unsigned __int16 *)((char *)objc_msgSendSuper2(&v25, "init")
                                            + OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity
                                            + 44) >> 14];
  __asm { BR              X11 }
}

char *sub_10001AFE4@<X0>(char a1@<W8>, uint64_t a2, uint64_t a3, uint64_t aBlock, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  id v48;
  void *v50;
  void **v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t);
  void *v54;
  void (*v55)();
  uint64_t v56;

  if (a1 < 0)
  {
    v29 = v27;
    sub_10041E8C4();
    sub_10041EBF0();
  }
  else
  {
    v28 = v27;
  }
  v30 = OBJC_IVAR____TtC7remindd18RDClientConnection_xpcConnection;
  v31 = *(void **)&v27[OBJC_IVAR____TtC7remindd18RDClientConnection_xpcConnection];
  objc_msgSend(v31, "setExportedObject:", v27);
  v32 = (void *)objc_opt_self(REMXPCDaemonInterface);
  v33 = v31;
  v34 = objc_msgSend(v32, "interface");
  objc_msgSend(v33, "setExportedInterface:", v34);

  v35 = *(void **)&v27[v30];
  v36 = (void *)objc_opt_self(REMXPCClientInterface);
  v37 = v35;
  v38 = objc_msgSend(v36, "interface");
  objc_msgSend(v37, "setRemoteObjectInterface:", v38);

  v39 = *(void **)&v27[v30];
  v40 = swift_allocObject(&unk_1007F3BB8, 24, 7);
  swift_unknownObjectWeakInit(v40 + 16, v27);
  v55 = sub_1004213D4;
  v56 = v40;
  v51 = _NSConcreteStackBlock;
  v52 = 1107296256;
  v53 = sub_1000094C8;
  v54 = &unk_1007F3BD0;
  v41 = _Block_copy(&v51);
  v42 = v56;
  v43 = v39;
  swift_release(v42);
  objc_msgSend(v43, "setInterruptionHandler:", v41);
  _Block_release(v41);

  v44 = *(void **)&v27[v30];
  v45 = swift_allocObject(&unk_1007F3BB8, 24, 7);
  swift_unknownObjectWeakInit(v45 + 16, v27);
  v55 = sub_1000094F4;
  v56 = v45;
  v51 = _NSConcreteStackBlock;
  v52 = 1107296256;
  v53 = sub_1000094C8;
  v54 = &unk_1007F3BF8;
  v46 = _Block_copy(&v51);
  v47 = v56;
  v48 = v44;
  swift_release(v47);
  objc_msgSend(v48, "setInvalidationHandler:", v46);

  swift_unknownObjectRelease(v25);
  _Block_release(v46);

  return v27;
}

double sub_10001B228(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  double result;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t object;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t inited;
  NSString v22;
  uint64_t v24[2];
  uint64_t v25;
  _BYTE v26[80];
  Swift::String v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unsigned __int16 v32;

  v4 = v3;
  sub_1000184A8(a1, (uint64_t)&v27);
  v7 = v31 | ((unint64_t)v32 << 32);
  v8 = v32 >> 14;
  if (v8 >= 2)
  {
    if (v8 != 2)
      return result;
    v32 = WORD2(v7) & 0x3FFF;
    v9 = v28;
    if (v28)
    {
      object = (uint64_t)v27._object;
    }
    else
    {
      v9 = v30;
      if (!v30)
      {
        v9 = 0xE90000000000003ELL;
        object = 0x4E574F4E4B4E553CLL;
        goto LABEL_9;
      }
      object = v29;
    }
    swift_bridgeObjectRetain(v9);
  }
  else
  {
    v32 = WORD2(v7) & 0x3FFF;
    v24[0] = 0x2E64646E696D6572;
    v24[1] = 0xE800000000000000;
    String.append(_:)(v27);
    object = 0x2E64646E696D6572;
    v9 = 0xE800000000000000;
  }
LABEL_9:
  if (qword_1008371A0 != -1)
    swift_once(&qword_1008371A0, sub_100320158);
  v11 = type metadata accessor for Logger(0);
  sub_10001AAA8(v11, (uint64_t)qword_100845638);
  swift_bridgeObjectRetain_n(v9, 2);
  v12 = swift_bridgeObjectRetain_n(a3, 2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(22, -1);
    v16 = swift_slowAlloc(64, -1);
    v24[0] = v16;
    *(_DWORD *)v15 = 136446466;
    swift_bridgeObjectRetain(v9);
    v25 = sub_10001A820(object, v9, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26);
    swift_bridgeObjectRelease_n(v9, 3);
    *(_WORD *)(v15 + 12) = 2082;
    swift_bridgeObjectRetain(a3);
    v25 = sub_10001A820(a2, a3, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "LAUNCH EVENT {client: %{public}s, reason: %{public}s}", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v16, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
    swift_bridgeObjectRelease_n(v9, 2);
  }
  v24[0] = *(_QWORD *)(v4 + 16);
  v17 = v24[0];
  v18 = type metadata accessor for UnfairLock(0);
  swift_retain(v17);
  Lock.sync<A>(_:)(sub_10001C4E8, v4, v18, &type metadata for Bool, &protocol witness table for UnfairLock);
  swift_release(v24[0]);
  if ((v25 & 1) == 0)
  {
    type metadata accessor for Analytics(0, v19);
    v20 = sub_10001A630((uint64_t *)&unk_10083A260);
    inited = swift_initStackObject(v20, v26);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
    *(_QWORD *)(inited + 32) = 0x6E6F73616572;
    *(_QWORD *)(inited + 40) = 0xE600000000000000;
    *(_QWORD *)(inited + 48) = String._bridgeToObjectiveC()();
    *(_QWORD *)(inited + 56) = 0x746E65696C63;
    *(_QWORD *)(inited + 64) = 0xE600000000000000;
    v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v9);
    *(_QWORD *)(inited + 72) = v22;
    v9 = sub_1002AF09C(inited);
    static Analytics.postEvent(_:payload:duration:)(0xD000000000000018, 0x80000001006F5840, v9, 0, 1);
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease(v9).n128_u64[0];
  return result;
}

uint64_t sub_10001B5F0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10001B628 + 4 * byte_1006C37E0[a1]))(0xD000000000000020, 0x8000000100708DD0);
}

uint64_t sub_10001B628(uint64_t a1)
{
  return a1 - 10;
}

id sub_10001B760(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t Strong;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  _QWORD v30[3];
  uint64_t v31;
  _UNKNOWN **v32;
  _BYTE v33[40];
  _QWORD v34[5];
  _OWORD v35[2];
  uint64_t v36;

  v3 = v2;
  if (a2)
  {
    v5 = *(NSObject **)(v2 + OBJC_IVAR____TtC7remindd11RDXPCDaemon_debugPerformer);
    v6 = a2;
    v7 = (id)sub_100337F24(v6, v3, v5);

  }
  else
  {
    v7 = *(id *)(v2 + OBJC_IVAR____TtC7remindd11RDXPCDaemon_storeController);
  }
  Strong = swift_unknownObjectWeakLoadStrong(v3 + OBJC_IVAR____TtC7remindd11RDXPCDaemon_daemon, v8);
  if (Strong
    && (v10 = (void *)Strong,
        v11 = *(_QWORD *)(Strong + OBJC_IVAR____TtC7remindd8RDDaemon_templateOperationQueue),
        swift_retain(v11),
        v10,
        v11))
  {
    sub_100018618(v11 + 16, (uint64_t)v35);
    swift_release(v11);
  }
  else
  {
    v36 = 0;
    memset(v35, 0, sizeof(v35));
  }
  v12 = swift_allocObject(&unk_1007EF248, 24, 7);
  swift_unknownObjectWeakInit(v12 + 16, v3);
  v13 = swift_allocObject(&unk_1007EF388, 70, 7);
  *(_QWORD *)(v13 + 16) = v12;
  sub_1000184A8(a1, v13 + 24);
  v14 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7remindd11RDXPCDaemon_dataAccessRequestsWriter);
  v15 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7remindd11RDXPCDaemon_contactInteractionWriter);
  sub_100018618(v3 + OBJC_IVAR____TtC7remindd11RDXPCDaemon_coreSuggestionsHandler, (uint64_t)v34);
  sub_10001BAA0((uint64_t)v35, (uint64_t)v33);
  v16 = sub_10001BA38((uint64_t)v34, v34[3]);
  __chkstk_darwin(v16);
  v18 = (_QWORD *)((char *)&v30[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  v20 = *v18;
  v31 = type metadata accessor for RDCoreSuggestionsController();
  v32 = &off_1007EF3A0;
  v30[0] = v20;
  v21 = (char *)objc_allocWithZone((Class)type metadata accessor for RDXPCStorePerformer());
  v22 = sub_10001BA38((uint64_t)v30, v31);
  __chkstk_darwin(v22);
  v24 = (_QWORD *)((char *)&v30[-1] - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  v26 = *v24;
  sub_10001BAE8(a1);
  sub_10001BAE8(a1);
  swift_retain(v14);
  swift_retain(v15);
  v27 = sub_100338F04(v7, a1, (uint64_t)sub_100339160, v13, v14, v15, v26, (uint64_t)v33, v21);

  swift_release(v13);
  swift_release(v14);
  swift_release(v15);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v30);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v34);
  sub_10001BA60((uint64_t)v35);
  return v27;
}

uint64_t sub_10001BA38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_10001BA60(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A630(&qword_100846568);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001BAA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_100846568);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001BAE8(uint64_t a1)
{
  sub_10001BB24(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40) | ((unint64_t)*(unsigned __int16 *)(a1 + 44) << 32));
  return a1;
}

uint64_t sub_10001BB24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t result;

  v6 = (a6 >> 46) & 3;
  if (v6 >= 2)
  {
    if ((_DWORD)v6 != 2)
      return result;
    swift_bridgeObjectRetain(a5);
    a2 = a3;
  }
  return swift_bridgeObjectRetain(a2);
}

unint64_t sub_10001BB64(uint64_t a1)
{
  return sub_10001BB78(a1, &qword_10083DFC0, (uint64_t (*)(id))sub_1002C6C34);
}

unint64_t sub_10001BB78(uint64_t a1, uint64_t *a2, uint64_t (*a3)(id))
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void **v9;
  void *v10;
  id v11;
  id v12;
  unint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A630(a2);
  v6 = static _DictionaryStorage.allocate(capacity:)(v4);
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v7;
  }
  swift_retain(v6);
  v9 = (void **)(a1 + 40);
  while (1)
  {
    v10 = *v9;
    v11 = *(v9 - 1);
    v12 = v10;
    result = a3(v11);
    if ((v14 & 1) != 0)
      break;
    *(_QWORD *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v15 = 8 * result;
    *(_QWORD *)(v7[6] + v15) = v11;
    *(_QWORD *)(v7[7] + v15) = v12;
    v16 = v7[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v7[2] = v18;
    v9 += 2;
    if (!--v8)
    {
      swift_release(v7);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for RDCoreSuggestionsController()
{
  return objc_opt_self(_TtC7remindd27RDCoreSuggestionsController);
}

uint64_t sub_10001BCA8(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void destroy for RDSavedDueDateDeltaAlert(id *a1)
{

}

uint64_t sub_10001BCCC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BCD4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BCDC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BCE4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BCEC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BCF4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BCFC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD04(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD0C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD14(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD1C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD24(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD2C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD34(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD3C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD44(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD4C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD54(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD5C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD64(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD6C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD74(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD7C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD84(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD8C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD94(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD9C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BDA4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BDAC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BDB4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BDBC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BDC4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BDCC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BDD4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BDDC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BDE4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BDEC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BDF4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BDFC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE04(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE0C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE14(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE1C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE24(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE2C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE34(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE3C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE44(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE4C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE54(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE5C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE64(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE6C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE74(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE7C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE84(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE8C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE94(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE9C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BEA4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BEAC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BEB4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BEBC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BEC4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BECC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BED4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BEDC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BEE4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BEEC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BEF4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BEFC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF04(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF0C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF14(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF1C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF24(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF2C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF34(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF3C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF44(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF4C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF54(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF5C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001BF74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001BF84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001BF94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001BFA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001BFB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001BFC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001BFD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001BFE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001BFF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C004(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C014(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C024(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C034(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C044(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C054(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C064(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C074(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C084(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C094(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C0A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C0B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C0C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C0D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C0E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C0F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C104(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C114(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C124(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C134(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C144(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C154(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C164(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C174(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C184(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C194(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C1A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C1B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C1C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C1D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C1E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C1F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C204(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C214(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C224(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C234(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C244(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C254(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C264(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C274(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C284(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C294(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C2A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C2B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C2C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C2D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C2E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C2F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C304(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C314(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C324(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C334(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C344(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C354(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C364(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C374(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C384(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C394(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C3A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C3B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C3C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C3D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C3E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C3F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C404(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C414(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C424(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C434(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C444(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C454(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C464(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C474(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C484(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

void sub_10001C4E8(_BYTE *a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 24);
  *(_BYTE *)(v1 + 24) = 1;
  *a1 = v2;
}

uint64_t destroy for RDClientIdentity(uint64_t a1)
{
  return sub_1000178E8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40) | ((unint64_t)*(unsigned __int16 *)(a1 + 44) << 32));
}

void sub_10001C51C(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;
  uint64_t v5;

  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 6u:
    case 8u:
    case 0xDu:
    case 0xEu:
    case 0xFu:
      v3 = *(id *)a1;
      goto LABEL_3;
    case 4u:
    case 5u:
    case 0xAu:
    case 0xBu:
    case 0x10u:
      v4 = *(id *)a1;
      goto LABEL_5;
    case 7u:
      v5 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      return;
    case 9u:

      v4 = *(id *)(a1 + 8);
LABEL_5:
      swift_bridgeObjectRelease(v4);
      break;
    case 0xCu:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      v3 = *(id *)(a1 + 16);
LABEL_3:

      break;
    default:
      return;
  }
}

uint64_t _s10PredicatesOMa_1(uint64_t a1)
{
  uint64_t result;

  result = qword_10084C688;
  if (!qword_10084C688)
    return swift_getSingletonMetadata(a1, &_s10PredicatesOMn_1);
  return result;
}

id sub_10001C600(void *a1, uint64_t a2)
{
  id *v2;

  if (objc_msgSend(*v2, "fetchREMObjectIDOnly"))
    return sub_10000672C(a1);
  else
    return sub_100265B08(a1, a2);
}

char *sub_10001C670()
{
  return sub_100008B84();
}

id sub_10001C684()
{
  return sub_1000085E4();
}

char *sub_10001C698()
{
  return sub_1000088AC();
}

void sub_10001C6AC(_QWORD *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;

  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
    case 1u:

      v3 = (id)a1[1];
      goto LABEL_4;
    case 2u:
      swift_bridgeObjectRelease(*a1);
      break;
    case 3u:
    case 4u:
    case 5u:
    case 7u:
      v3 = (id)*a1;
LABEL_4:

      break;
    case 6u:
      v4 = type metadata accessor for UUID(0);
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      break;
    default:
      return;
  }
}

uint64_t sub_10001C744(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s10PredicatesOMa_3(uint64_t a1)
{
  uint64_t result;

  result = qword_1008506D0;
  if (!qword_1008506D0)
    return swift_getSingletonMetadata(a1, &_s10PredicatesOMn_3);
  return result;
}

void sub_10001C7BC(id *a1, uint64_t a2)
{
  id *v2;
  id v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int EnumCaseMultiPayload;
  uint64_t v12;
  id v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  void (*v20)(id *, uint64_t);
  uint64_t v21;
  id *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(id *, uint64_t);

  v2 = a1;
  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
    case 0x14u:
    case 0x16u:
    case 0x1Cu:
    case 0x20u:
    case 0x2Au:
    case 0x2Du:
      goto LABEL_17;
    case 1u:
    case 2u:
    case 5u:
    case 6u:
    case 7u:
    case 0x1Au:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
      v3 = *v2;
      goto LABEL_3;
    case 3u:
      swift_bridgeObjectRelease(*v2);
      v6 = &qword_1008466D0;
      goto LABEL_14;
    case 4u:
      swift_bridgeObjectRelease(*v2);
      v5 = &qword_1008466C8;
      goto LABEL_22;
    case 8u:
    case 0x17u:

      v4 = &qword_100846690;
      goto LABEL_28;
    case 9u:

      v4 = &qword_1008466C0;
      goto LABEL_28;
    case 0xAu:
      swift_bridgeObjectRelease(*v2);
      v4 = &qword_1008466B8;
      goto LABEL_28;
    case 0xBu:
    case 0xCu:
    case 0xFu:
      goto LABEL_30;
    case 0xDu:
      v7 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v2, v7);
      v2 = (id *)((char *)v2 + *(int *)(sub_10001A630(&qword_1008466B0) + 48));
      goto LABEL_16;
    case 0xEu:
      goto LABEL_16;
    case 0x10u:

      v8 = &qword_1008466A8;
      goto LABEL_36;
    case 0x11u:
    case 0x2Eu:
      goto LABEL_38;
    case 0x12u:

      v9 = *(int *)(sub_10001A630(&qword_100846698) + 64);
      goto LABEL_29;
    case 0x13u:
      swift_bridgeObjectRelease(*v2);
      v4 = &qword_10083E368;
      goto LABEL_28;
    case 0x15u:
      swift_bridgeObjectRelease(*v2);
      v4 = &qword_100842300;
LABEL_28:
      v9 = *(int *)(sub_10001A630(v4) + 48);
LABEL_29:
      v2 = (id *)((char *)v2 + v9);
LABEL_30:
      v12 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      goto LABEL_31;
    case 0x18u:
    case 0x19u:
      swift_bridgeObjectRelease(*v2);
      v3 = v2[1];
LABEL_3:

      return;
    case 0x1Bu:
      v23 = type metadata accessor for Date(0);
      v26 = *(void (**)(id *, uint64_t))(*(_QWORD *)(v23 - 8) + 8);
      v26(v2, v23);
      v22 = (id *)((char *)v2 + *(int *)(sub_10001A630(&qword_100846688) + 48));
      v21 = v23;
      v20 = v26;
      goto LABEL_42;
    case 0x1Du:
    case 0x1Eu:
      swift_bridgeObjectRelease(*v2);
      v5 = &qword_100846680;
LABEL_22:
      v15 = sub_10001A630(v5);
      v16 = (char *)v2 + *(int *)(v15 + 48);
      v17 = type metadata accessor for Date(0);
      v18 = *(_QWORD *)(v17 - 8);
      v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
      if (!v19(v16, 1, v17))
        (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
      v2 = (id *)((char *)v2 + *(int *)(v15 + 64));
      if (v19((char *)v2, 1, v17))
        return;
      v20 = *(void (**)(id *, uint64_t))(v18 + 8);
      goto LABEL_41;
    case 0x26u:

      v6 = &qword_10083AEB0;
LABEL_14:
      v2 = (id *)((char *)v2 + *(int *)(sub_10001A630(v6) + 48));
      v10 = _s10PredicatesO19CompletionPredicateOMa(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v2, v10);
      if (EnumCaseMultiPayload == 2)
      {
LABEL_17:
        v13 = *v2;
LABEL_18:
        swift_bridgeObjectRelease(v13);
      }
      else if (EnumCaseMultiPayload <= 1)
      {
LABEL_16:
        v12 = type metadata accessor for Date(0);
LABEL_31:
        v21 = v12;
        v20 = *(void (**)(id *, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
        v22 = v2;
LABEL_42:
        v20(v22, v21);
      }
      return;
    case 0x27u:
      swift_bridgeObjectRelease(*v2);
      v14 = &qword_100846670;
      goto LABEL_34;
    case 0x28u:

      v8 = &qword_100846668;
LABEL_36:
      v24 = *(int *)(sub_10001A630(v8) + 64);
      goto LABEL_37;
    case 0x29u:
      swift_bridgeObjectRelease(*v2);
      v14 = &qword_100846660;
LABEL_34:
      v24 = *(int *)(sub_10001A630(v14) + 48);
LABEL_37:
      v2 = (id *)((char *)v2 + v24);
LABEL_38:
      v17 = type metadata accessor for Date(0);
      v25 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(v25 + 48))(v2, 1, v17))
        return;
      v20 = *(void (**)(id *, uint64_t))(v25 + 8);
LABEL_41:
      v22 = v2;
      v21 = v17;
      goto LABEL_42;
    case 0x2Cu:
      v13 = v2[1];
      goto LABEL_18;
    default:
      return;
  }
}

uint64_t _s10PredicatesOMa(uint64_t a1)
{
  return sub_10001522C(a1, qword_100846860, (uint64_t)&_s10PredicatesOMn);
}

uint64_t sub_10001CB4C(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 2)
    return swift_bridgeObjectRelease(*a1);
  if (result <= 1)
  {
    v4 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  return result;
}

uint64_t _s10PredicatesO19CompletionPredicateOMa(uint64_t a1)
{
  return sub_10001522C(a1, qword_1008467B8, (uint64_t)&_s10PredicatesO19CompletionPredicateOMn);
}

void *sub_10001CBC8()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_10001CBD4(uint64_t a1, uint64_t a2)
{
  return sub_10033DAF4(a1, a2, (uint64_t *)&unk_100839C80, 0x4025203D21204B25, 0xE800000000000000, &qword_100843760);
}

uint64_t sub_10001CBFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002E8D5C(a1, a2, a3, &qword_10083FD40);
}

uint64_t sub_10001CC0C(uint64_t a1)
{
  return sub_1003436A4(a1, 0x696E203D21204B25, 0xE90000000000006CLL, &qword_100843760);
}

uint64_t sub_10001CC30(uint64_t a1)
{
  return sub_1003436A4(a1, 0x696E203D3D204B25, 0xE90000000000006CLL, &qword_100843760);
}

void sub_10001CFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001CFFC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10001D00C(uint64_t a1)
{

}

void sub_10001D014(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDList fetchRequest](REMCDList, "fetchRequest"));
  objc_msgSend(v2, "setPropertiesToFetch:", &off_100804BB8);
  v18 = a1[4];
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v18, 1));
  objc_msgSend(v2, "setAffectedStores:", v3);

  objc_msgSend(v2, "setFetchBatchSize:", 50);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("account == NULL")));
  objc_msgSend(v2, "setPredicate:", v4);

  v5 = objc_msgSend(objc_alloc((Class)NSBatchDeleteRequest), "initWithFetchRequest:", v2);
  v17 = a1[4];
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v17, 1));
  objc_msgSend(v5, "setAffectedStores:", v6);

  objc_msgSend(v5, "setResultType:", 2);
  v7 = (void *)a1[5];
  v16 = 0;
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "executeRequest:error:", v5, &v16));
  v9 = v16;
  v10 = *(_QWORD *)(a1[6] + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v8;

  v12 = (void *)a1[5];
  v15 = v9;
  LOBYTE(v8) = objc_msgSend(v12, "save:", &v15);
  v13 = v15;

  if ((v8 & 1) == 0)
  {
    v14 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      sub_100678DD4((uint64_t)v13, v14);

  }
}

void sub_10001D344(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;

  v14 = a2;
  v5 = a3;
  v7 = objc_opt_class(NSDictionary, v6);
  v8 = REMDynamicCast(v7, v5);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  v11 = (void *)a1[4];
  v12 = a1[5];
  if (v9)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "ic_prettyDescriptionWithTabLevel:", a1[6] + 1));
    objc_msgSend(v11, "appendFormat:", CFSTR("%@%@ = %@\n"), v12, v14, v13);

  }
  else
  {
    objc_msgSend(v11, "appendFormat:", CFSTR("%@%@ = %@\n"), v12, v14, v5);
  }

}

void sub_10001D470(id a1)
{
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "URLsForDirectory:inDomains:", 5, 8));

  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = v2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i), "URLByAppendingPathComponent:", CFSTR("LocationBundles"), (_QWORD)v11));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "URLByAppendingPathComponent:", CFSTR("RemindersAlerts.bundle")));

        if (objc_msgSend(v9, "checkResourceIsReachableAndReturnError:", 0))
        {
          v10 = (void *)qword_100852638;
          qword_100852638 = (uint64_t)v9;

          goto LABEL_11;
        }

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v5)
        continue;
      break;
    }
  }
LABEL_11:

}

void sub_10001D670(id a1)
{
  dispatch_queue_attr_t v1;
  dispatch_queue_t v2;
  void *v3;
  NSObject *v4;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue(v1);
  v2 = dispatch_queue_create("RDPathsCreateApplicationDocumentsURL", v4);
  v3 = (void *)qword_100852630;
  qword_100852630 = (uint64_t)v2;

}

void sub_10001D6C0(id a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;

  if (!qword_100852650)
  {
    v1 = objc_claimAutoreleasedReturnValue(+[REMPaths URLForGroupContainerWithIdentifier:](REMPaths, "URLForGroupContainerWithIdentifier:", REMAppGroupBundleIdentifier));
    v2 = (void *)qword_100852650;
    qword_100852650 = v1;

    if (!qword_100852650)
    {
      v3 = objc_claimAutoreleasedReturnValue(+[REMPaths legacy_applicationDocumentsURL](REMPaths, "legacy_applicationDocumentsURL"));
      v4 = (void *)qword_100852650;
      qword_100852650 = v3;

    }
  }
}

void sub_10001D910(id a1)
{
  dispatch_queue_attr_t v1;
  dispatch_queue_t v2;
  void *v3;
  NSObject *v4;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue(v1);
  v2 = dispatch_queue_create("RDPathsCreateApplicationDocumentsURL", v4);
  v3 = (void *)qword_100852630;
  qword_100852630 = (uint64_t)v2;

}

void sub_10001D960(uint64_t a1)
{
  objc_storeStrong((id *)&qword_100852650, *(id *)(a1 + 32));
}

void sub_10001DBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;

  objc_sync_exit(v17);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001DC08(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10001DC18(uint64_t a1)
{

}

void sub_10001DC20(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSMutableDictionary);
  v2 = (void *)qword_100852658;
  qword_100852658 = (uint64_t)v1;

}

void sub_10001DC48(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_applicationDocumentsURLForPersonaIdentifier:accountIdentifier:", a2, *(_QWORD *)(a1 + 40)));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  if (*(_QWORD *)(a1 + 48))
    objc_msgSend((id)qword_100852658, "setObject:forKeyedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
}

id sub_10001E01C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_cancelFireRequests");
}

void sub_10001E090(uint64_t a1)
{
  unsigned int v2;
  void *v3;
  void *v4;
  dispatch_block_t v5;
  NSObject *v6;
  id v7;
  dispatch_queue_global_t global_queue;
  double v9;
  dispatch_time_t v10;
  void *v11;
  void **v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  void *v15;
  id v16;
  id location;

  v2 = objc_msgSend(*(id *)(a1 + 32), "waitToFireUntilRequestsStop");
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fireBlock"));
  v4 = v3;
  if (v2)
  {

    if (v4)
      objc_msgSend(*(id *)(a1 + 32), "_cancelFireRequests");
  }
  else
  {

    if (v4)
      return;
  }
  objc_initWeak(&location, *(id *)(a1 + 32));
  v12 = _NSConcreteStackBlock;
  v13 = 3221225472;
  v14 = sub_10001E210;
  v15 = &unk_1007D7AD0;
  objc_copyWeak(&v16, &location);
  v5 = dispatch_block_create((dispatch_block_flags_t)0, &v12);
  objc_msgSend(*(id *)(a1 + 32), "setFireBlock:", v5, v12, v13, v14, v15);

  if (objc_msgSend(*(id *)(a1 + 32), "callOnMainThread"))
  {
    v6 = &_dispatch_main_q;
    v7 = &_dispatch_main_q;
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    v6 = objc_claimAutoreleasedReturnValue(global_queue);
  }
  objc_msgSend(*(id *)(a1 + 32), "delay");
  v10 = dispatch_time(0, (uint64_t)(v9 * 1000000000.0));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fireBlock"));
  dispatch_after(v10, v6, v11);

  objc_destroyWeak(&v16);
  objc_destroyWeak(&location);
}

void sub_10001E1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10001E210(uint64_t a1)
{
  id WeakRetained;
  NSObject *v2;
  id v3;
  id v4;
  _QWORD block[4];
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "requestQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10001E2AC;
    block[3] = &unk_1007D7A60;
    v3 = v4;
    v6 = v3;
    dispatch_sync(v2, block);

    objc_msgSend(v3, "callTargetSelector");
    WeakRetained = v4;
  }

}

id sub_10001E2AC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setFireBlock:", 0);
}

id sub_10001E384(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_cancelFireRequests");
}

id sub_10001E38C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "callTargetSelector");
}

void sub_10001E500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001E518(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fireBlock"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v2 != 0;

}

id sub_10001E5C0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_cancelFireRequests");
}

void sub_10001F00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001F034(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10001F044(uint64_t a1)
{

}

void sub_10001F04C(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;

  v2 = (void *)a1[4];
  v3 = a1[5];
  v29 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "executeFetchRequest:error:", v3, &v29));
  v5 = v29;
  if (v4)
  {
    if (objc_msgSend(v4, "count") == (id)1)
    {
      v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "firstObject"));
      v7 = objc_claimAutoreleasedReturnValue(-[NSObject identifier](v6, "identifier"));
      v8 = *(_QWORD *)(a1[7] + 8);
      v9 = *(void **)(v8 + 40);
      *(_QWORD *)(v8 + 40) = v7;

      if (!*(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 40))
      {
        v10 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
        if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
          sub_1006790F4((uint64_t)v6, v10, v11, v12, v13, v14, v15, v16);

      }
    }
    else
    {
      v6 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
        sub_100679158((uint64_t)a1, v6, v23, v24, v25, v26, v27, v28);
    }
  }
  else
  {
    v6 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      sub_100679090((uint64_t)v5, v6, v17, v18, v19, v20, v21, v22);
  }

}

void sub_10001F194(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

id sub_10001F2DC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "resetPolicy");
}

id sub_10001F37C(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policyResetTimer"));
  objc_msgSend(v2, "invalidate");

  return objc_msgSend(*(id *)(a1 + 32), "setPolicyResetTimer:", 0);
}

id sub_10001F5C0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "savePolicyState");
}

id sub_10001FA30(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "savePolicyState");
}

void sub_10001FA90(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policyResetTimer"));
  v3 = objc_msgSend(v2, "isValid");

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policyResetTimer"));
    objc_msgSend(v4, "invalidate");

    objc_msgSend(*(id *)(a1 + 32), "setPolicyResetTimer:", 0);
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policyStartDate"));
  objc_msgSend(*(id *)(a1 + 32), "resetInterval");
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "dateByAddingTimeInterval:"));

  objc_msgSend(v7, "timeIntervalSinceNow");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:](NSTimer, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", *(_QWORD *)(a1 + 32), "resetPolicy", 0, 0));
  objc_msgSend(*(id *)(a1 + 32), "setPolicyResetTimer:", v6);

}

void sub_100020A9C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 160));
  _Unwind_Resume(a1);
}

void sub_100020B14(uint64_t a1)
{
  id WeakRetained;
  NSObject *v3;
  NSObject *v4;
  id v5;
  uint8_t v6[16];
  uint8_t buf[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "ICCC: Done waiting DADSystemAvailabilityChecker upon daemon launch and now try to bootstrapSyncingOnLaunchIfSystemReady.", buf, 2u);
    }

    objc_msgSend(WeakRetained, "setIsSystemAvailableForSyncing:", 1);
    objc_msgSend(WeakRetained, "bootstrapSyncingOnLaunchIfSystemReady");
    v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "os_transaction RELEASE {name: com.apple.remindd.cloudkit.launch.pending.DADSystemAvailabilityChecker}", v6, 2u);
    }

    v5 = (id)objc_opt_self(*(_QWORD *)(a1 + 32));
  }

}

void sub_100020C0C(uint64_t a1)
{
  id WeakRetained;
  NSObject *v3;
  void *v4;
  NSObject *v5;
  id v6;
  uint8_t v7[16];
  uint8_t buf[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "ICCC: Received RDAccountInitializer.DidCompleteInitializeAllAccountsNotification upon daemon launch and now try to bootstrapSyncingOnLaunchIfSystemReady.", buf, 2u);
    }

    objc_msgSend(WeakRetained, "setPendingAccountInitializerCompleteOnLaunch:", 0);
    objc_msgSend(WeakRetained, "bootstrapSyncingOnLaunchIfSystemReady");
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "accountInitializerDidCompleteOnLaunchObserver"));
    objc_msgSend(v4, "unobserve");

    objc_msgSend(WeakRetained, "setAccountInitializerDidCompleteOnLaunchObserver:", 0);
    v5 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "os_transaction RELEASE {name: com.apple.remindd.cloudkit.launch.pending.RDAccountInitializerDidCompleteInitializeAllAccountsObserver}", v7, 2u);
    }

    v6 = (id)objc_opt_self(*(_QWORD *)(a1 + 32));
  }

}

id sub_100020D28(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "updateConfiguration");
}

void sub_100020EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100020EC8(uint64_t a1)
{
  id WeakRetained;
  NSObject *v2;
  uint8_t v3[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "ICCC: Actually running bootstrapSyncingOnLaunchIfSystemReady to bootstrap CloudKit syncing.", v3, 2u);
  }

  objc_msgSend(WeakRetained, "loadSubscribedSubscriptionIDs");
  objc_msgSend(WeakRetained, "setupAPSConnection");
  objc_msgSend(WeakRetained, "adjustAPSNotificationDebouncerInterval");
  objc_msgSend(WeakRetained, "observePrimaryCloudKitAccountPersonIDSaltChanges");
  objc_msgSend(WeakRetained, "retryProcessingCloudObjects");
  objc_msgSend(WeakRetained, "updateCloudContextStateWithReason:", CFSTR("InitWithStoreController"));

}

void sub_1000210F8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 64));
  _Unwind_Resume(a1);
}

void sub_100021118(uint64_t a1)
{
  NSObject *v2;
  id WeakRetained;
  uint8_t v4[16];

  v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "ICCC received buddy finished notification.", v4, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setHasPassedBuddy:", 1);
  objc_msgSend(WeakRetained, "pq_unregisterForBuddy");

}

void sub_1000211A8(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "buddyStateObserver"));
  objc_msgSend(v1, "start");

}

void sub_10002169C(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  __CFString *v9;
  void *v10;
  unsigned __int8 v11;
  const __CFString *v12;
  void *v13;
  unsigned int v14;
  NSObject *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  id v19;
  void *v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint8_t buf[4];
  id v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  __CFString *v31;
  _BYTE v32[128];

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAccount allCloudKitAccountsInContext:](REMCDAccount, "allCloudKitAccountsInContext:", *(_QWORD *)(a1 + 32)));
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v2 = v1;
  v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v22, v32, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v23;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v23 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "personID"));
        v9 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "personID"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "accountTypeHost"));
        v11 = objc_msgSend(v10, "isPrimaryCloudKit");

        v12 = CFSTR("PRIMARY-CLOUDKIT");
        if ((v11 & 1) == 0)
        {
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "accountTypeHost"));
          v14 = objc_msgSend(v13, "isNonPrimaryCloudKit");

          if (!v14)
            goto LABEL_10;
          v12 = (const __CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "unsafeUntilSystemReady_hashedAccountPersonIDForAccount:usingSalt:", v7, *(_QWORD *)(a1 + 48)));
        }

        v9 = (__CFString *)v12;
LABEL_10:
        if ((objc_msgSend(v8, "isEqual:", v9) & 1) == 0)
        {
          objc_msgSend(v7, "setPersonID:", v9);
          v15 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "UUIDString"));
            *(_DWORD *)buf = 138543874;
            v27 = v17;
            v28 = 2114;
            v29 = v8;
            v30 = 2114;
            v31 = v9;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Updating CK account personID due to primary CK account salt set {account.identifier: %{public}@, oldPersonID: %{public}@, newPersonID: %{public}@}", buf, 0x20u);

          }
        }

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v22, v32, 16);
    }
    while (v4);
  }
  if (objc_msgSend(*(id *)(a1 + 32), "hasChanges"))
  {
    objc_msgSend(*(id *)(a1 + 32), "ic_saveWithLogDescription:", CFSTR("Saved personID changes on CK accounts upon primary CK account salt set (salt: %@)"), *(_QWORD *)(a1 + 56));
  }
  else
  {
    v18 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = objc_msgSend(v2, "count");
      v20 = *(void **)(a1 + 56);
      *(_DWORD *)buf = 134218242;
      v27 = v19;
      v28 = 2112;
      v29 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "No personID update made upon primary CK account salt set {ckAccounts.count: %ld, salt: %@}", buf, 0x16u);
    }

  }
}

void sub_100021A40(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *i;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  id v14;
  void *v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint8_t buf[4];
  id v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  void *v26;
  _BYTE v27[128];

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAccount allCloudKitAccountsInContext:](REMCDAccount, "allCloudKitAccountsInContext:", *(_QWORD *)(a1 + 32)));
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v17, v27, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v18 != v4)
          objc_enumerationMutation(v1);
        v6 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "personID"));
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "personIDSalt"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "base64EncodedStringWithOptions:", 0));

        if (v7)
        {
          objc_msgSend(v6, "setPersonID:", 0);
          v10 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
            v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "UUIDString"));
            *(_DWORD *)buf = 138543874;
            v22 = v12;
            v23 = 2114;
            v24 = v7;
            v25 = 2112;
            v26 = v9;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Unsetting CK account personID due to primary CK account salt error {account.identifier: %{public}@, origPersonID: %{public}@, origPersonIDSalt: %@}", buf, 0x20u);

          }
        }

      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v17, v27, 16);
    }
    while (v3);
  }
  if (objc_msgSend(*(id *)(a1 + 32), "hasChanges"))
  {
    objc_msgSend(*(id *)(a1 + 32), "ic_saveWithLogDescription:", CFSTR("Saved personID changes on CK accounts upon salt update error (error: %@)"), *(_QWORD *)(a1 + 40));
  }
  else
  {
    v13 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = objc_msgSend(v1, "count");
      v15 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 134218242;
      v22 = v14;
      v23 = 2114;
      v24 = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "No personID update made upon primary CK account salt update error {ckAccounts.count: %ld, error: %{public}@}", buf, 0x16u);
    }

  }
}

void sub_100021ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100021F04(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  v6 = v5;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "accountPersonIDSaltObserver"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "uuid"));
      v9 = 138543362;
      v10 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "ICCC received a primary CK account personIDSalt change or initial value {observer: %{public}@}", (uint8_t *)&v9, 0xCu);

    }
    objc_msgSend(WeakRetained, "primaryCloudKitAccountPersonIDSaltDidSetWithSalt:", v3);
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "unitTest_notificationCenter"));
    -[NSObject postNotificationName:object:](v6, "postNotificationName:object:", CFSTR("unitTest_ICCloudContextPrimaryCloudKitAccountPersonIDSaltDidSetNotification"), WeakRetained);
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    sub_1006794A0();
  }

}

void sub_10002204C(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  unsigned __int8 v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  int v11;
  void *v12;
  __int16 v13;
  id v14;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!WeakRetained)
  {
    v10 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_1006794CC();
    goto LABEL_8;
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[RDAccountPersonIDSaltObserver InitiallyNilError](RDAccountPersonIDSaltObserver, "InitiallyNilError"));
  v6 = objc_msgSend(v3, "isEqual:", v5);

  if ((v6 & 1) == 0)
  {
    v7 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "accountPersonIDSaltObserver"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "uuid"));
      v11 = 138543618;
      v12 = v9;
      v13 = 2114;
      v14 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "ICCC received a primary CK account personIDSalt error {observer: %{public}@, saltError: %{public}@}", (uint8_t *)&v11, 0x16u);

    }
    objc_msgSend(WeakRetained, "primaryCloudKitAccountPersonIDSaltDidFailToSetWithError:", v3);
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "unitTest_notificationCenter"));
    -[NSObject postNotificationName:object:](v10, "postNotificationName:object:", CFSTR("unitTest_ICCloudContextPrimaryCloudKitAccountPersonIDSaltDidFailToSetNotification"), WeakRetained);
LABEL_8:

  }
}

void sub_100022328(uint64_t a1)
{
  NSMutableDictionary *v2;
  void *v3;
  NSMutableDictionary *v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v9[5];
  id v10;
  NSMutableDictionary *v11;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 160))
  {
    v2 = objc_opt_new(NSMutableDictionary);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100022414;
    v9[3] = &unk_1007D7CE0;
    v9[4] = *(_QWORD *)(a1 + 32);
    v10 = v3;
    v11 = v2;
    v4 = v2;
    v8 = v3;
    objc_msgSend(v8, "performBlockAndWait:", v9);
    v5 = -[NSMutableDictionary copy](v4, "copy");
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(v6 + 160);
    *(_QWORD *)(v6 + 160) = v5;

  }
}

void sub_100022414(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudKitAccountsInContext:", *(_QWORD *)(a1 + 40), 0));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v6), "identifier"));
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "UUIDString"));

        if (objc_msgSend(v8, "length"))
        {
          v9 = +[REMCloudContainer newCloudContainerForAccountID:](REMCloudContainer, "newCloudContainerForAccountID:", v8);
          objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", v9, v8);

        }
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }

}

void sub_100022888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000228A0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000228B0(uint64_t a1)
{

}

void sub_1000228B8(_QWORD *a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;

  if (!*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40))
  {
    v2 = +[REMCloudContainer newCloudContainerForAccountID:](REMCloudContainer, "newCloudContainerForAccountID:", a1[4]);
    v3 = *(_QWORD *)(a1[6] + 8);
    v4 = *(void **)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v2;

    v5 = objc_msgSend(*(id *)(a1[5] + 160), "mutableCopy");
    objc_msgSend(v5, "setObject:forKeyedSubscript:", *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40), a1[4]);
    v6 = a1[5];
    v7 = *(void **)(v6 + 160);
    *(_QWORD *)(v6 + 160) = v5;

  }
}

id sub_100022B78(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "pq_unregisterForBuddy");
}

uint64_t sub_100022D88(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1000233E0(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAccountListData cdEntityName](REMCDAccountListData, "cdEntityName"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAuxiliaryReminderChangeDeleteInfo cdEntityName](REMCDAuxiliaryReminderChangeDeleteInfo, "cdEntityName"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAuxiliaryReminderChangeMoveInfo cdEntityName](REMCDAuxiliaryReminderChangeMoveInfo, "cdEntityName"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDCalDAVNotification cdEntityName](REMCDCalDAVNotification, "cdEntityName"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDHashtagLabel cdEntityName](REMCDHashtagLabel, "cdEntityName"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDChangeTrackingState cdEntityName](REMCDChangeTrackingState, "cdEntityName"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDReplicaManager cdEntityName](REMCDReplicaManager, "cdEntityName"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[REMCKServerChangeToken cdEntityName](REMCKServerChangeToken, "cdEntityName"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[REMCKSharedEntitySyncActivity cdEntityName](REMCKSharedEntitySyncActivity, "cdEntityName"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[REMCKSharedObjectOwnerName cdEntityName](REMCKSharedObjectOwnerName, "cdEntityName"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDDueDateDeltaAlert cdEntityName](REMCDDueDateDeltaAlert, "cdEntityName"));
  v11 = objc_claimAutoreleasedReturnValue(+[NSSet setWithObjects:](NSSet, "setWithObjects:", v13, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, 0));
  v12 = (void *)qword_100852668;
  qword_100852668 = v11;

}

void sub_100023644(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSSet setWithObjects:](NSSet, "setWithObjects:", RDStoreControllerICCloudContextServerChangeTokenAuthor, CFSTR("com.apple.remindd.ICCloudContext.setPersonID"), RDHashtagLabelUpdaterAuthor, RDStalePinnedListsEventHandlerAuthor, RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandlerAuthor, RDSyncActivityNotificationEngineAuthor, REMNSPersistentHistoryTrackingAuthor, RDStagedLightweightMigrationAuthor, RDStoreControllerIsPinnedByCurrentUserMigrationAuthor, RDStoreControllerMostRecentTargetTemplateIdentifierByCurrentUserMigrationAuthor, RDStoreControllerDeduplicationActivityAuthor, RDStoreControllerSuggestConversionToGroceryListActivityAuthor, RDStoreControllerBatchDeleteExpiredRemindersActivityAuthor, 0));
  v2 = (void *)qword_100852678;
  qword_100852678 = v1;

}

void sub_1000237D0(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_msgSend(v3, "debugSyncDisabled") & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);

}

void sub_100023BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100023C10(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a3, "intValue");
  if (result <= 1)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_100023D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100023D3C(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "_isCloudKitAccountAvailableWithManagedObjectContext:requireActive:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_10002423C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000242C8(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[REMSystemUtilities systemBuildVersion](REMSystemUtilities, "systemBuildVersion"));
  v2 = (void *)qword_100852690;
  qword_100852690 = v1;

}

void sub_100024334(id a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  void *i;
  void *v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  void *j;
  id obj;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  _BYTE v40[128];
  _QWORD v41[17];

  v1 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v2 = (void *)qword_1008526A0;
  qword_1008526A0 = v1;

  v41[0] = objc_opt_class(REMCDList, v3);
  v41[1] = objc_opt_class(REMCDReminder, v4);
  v41[2] = objc_opt_class(REMCDAccount, v5);
  v41[3] = objc_opt_class(REMCDAttachment, v6);
  v41[4] = objc_opt_class(REMCDRecurrenceRule, v7);
  v41[5] = objc_opt_class(REMCDAlarm, v8);
  v41[6] = objc_opt_class(REMCDAlarmTrigger, v9);
  v41[7] = objc_opt_class(REMCDAssignment, v10);
  v41[8] = objc_opt_class(REMCDHashtag, v11);
  v41[9] = objc_opt_class(REMCDSmartList, v12);
  v41[10] = objc_opt_class(REMCDManualSortHint, v13);
  v41[11] = objc_opt_class(REMCDTemplate, v14);
  v41[12] = objc_opt_class(REMCDSavedReminder, v15);
  v41[13] = objc_opt_class(REMCDSavedAttachment, v16);
  v41[14] = objc_opt_class(REMCDListSection, v17);
  v41[15] = objc_opt_class(REMCDSmartListSection, v18);
  v41[16] = objc_opt_class(REMCDTemplateSection, v19);
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v41, 17));
  v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
  if (v20)
  {
    v21 = v20;
    v22 = *(_QWORD *)v36;
    do
    {
      for (i = 0; i != v21; i = (char *)i + 1)
      {
        if (*(_QWORD *)v36 != v22)
          objc_enumerationMutation(obj);
        v24 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)i);
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "performSelector:", "recordTypes"));
        v31 = 0u;
        v32 = 0u;
        v33 = 0u;
        v34 = 0u;
        v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
        if (v26)
        {
          v27 = v26;
          v28 = *(_QWORD *)v32;
          do
          {
            for (j = 0; j != v27; j = (char *)j + 1)
            {
              if (*(_QWORD *)v32 != v28)
                objc_enumerationMutation(v25);
              objc_msgSend((id)qword_1008526A0, "setObject:forKeyedSubscript:", v24, *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)j));
            }
            v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
          }
          while (v27);
        }

      }
      v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
    }
    while (v21);
  }

}

void sub_10002466C(id a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  _QWORD v17[3];

  v1 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v2 = (void *)qword_1008526B0;
  qword_1008526B0 = v1;

  v17[0] = objc_opt_class(REMCDList, v3);
  v17[1] = objc_opt_class(REMCDSmartList, v4);
  v17[2] = objc_opt_class(REMCDTemplate, v5);
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v6 = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v17, 3));
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(_QWORD *)v13 != v9)
          objc_enumerationMutation(v6);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i), "performSelector:", "recordTypes", (_QWORD)v12));
        objc_msgSend((id)qword_1008526B0, "addObjectsFromArray:", v11);

      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v8);
  }

}

void sub_100024830(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)CKRecordZoneID), "initWithZoneName:ownerName:databaseScope:", CFSTR("Reminders"), CKCurrentUserDefaultName, 2);
  v2 = (void *)qword_1008526B8;
  qword_1008526B8 = (uint64_t)v1;

}

void sub_1000248B4(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)CKRecordZoneID), "initWithZoneName:ownerName:databaseScope:", CFSTR("RemindersMigration"), CKCurrentUserDefaultName, 2);
  v2 = (void *)qword_1008526C8;
  qword_1008526C8 = (uint64_t)v1;

}

void sub_100024938(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)CKRecordZoneID), "initWithZoneName:ownerName:databaseScope:", CFSTR("Metadata"), CKCurrentUserDefaultName, 2);
  v2 = (void *)qword_1008526D8;
  qword_1008526D8 = (uint64_t)v1;

}

void sub_100024BA8(id a1, BOOL a2, NSError *a3)
{
  NSError *v3;
  NSObject *v4;
  int v5;
  NSError *v6;

  v3 = a3;
  v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = 138543362;
    v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Reachability sync finished {error: %{public}@}", (uint8_t *)&v5, 0xCu);
  }

}

void sub_100024CC4(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accountChangedNotificationHandlingDebouncer"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", &off_100804500));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100024D68;
  v4[3] = &unk_1007D7F38;
  v4[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v2, "fire:completion:", v3, v4);

}

void sub_100024D68(uint64_t a1, int a2)
{
  NSObject *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  void *v10;
  uint8_t buf[16];

  if (a2)
  {
    v3 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CloudKit account status may have changed", buf, 2u);
    }

    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accountStatusNumberByAccountID"));
    v5 = objc_msgSend(v4, "copy");

    v6 = *(void **)(a1 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100024E54;
    v8[3] = &unk_1007D7F10;
    v9 = v5;
    v10 = v6;
    v7 = v5;
    objc_msgSend(v6, "updateAccountStatusWithCompletionHandler:", v8);

  }
}

void sub_100024E54(uint64_t a1, id a2)
{
  id v4;
  void *v5;
  uint64_t v6;

  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:"));
  if (!v6
    || (v4 = objc_msgSend(*(id *)(a1 + 40), "accountStatusFromAccountStatusNumber:", v6), v5 = (void *)v6, v4 != a2))
  {
    objc_msgSend(*(id *)(a1 + 40), "updateCloudContextStateWithReason:", CFSTR("CloudKitAccountChanged"));
    v5 = (void *)v6;
  }

}

_DWORD *sub_100025240(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  unsigned int v10;
  _DWORD *v11;
  NSObject *v12;
  id v14;
  uint8_t buf[4];
  uint64_t v16;

  if (*(_DWORD *)(a2 + 16) != 3)
    return 0;
  v3 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 136446210;
    v16 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Processing os_state handler: %{public}s", buf, 0xCu);
  }

  v5 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v14 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v6, 200, 0, &v14));
  v8 = v14;
  if (v8)
  {
    v9 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      sub_100679930();

  }
  if ((unint64_t)objc_msgSend(v7, "length") >> 32)
  {
    v12 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      sub_1006798C8();

    v11 = 0;
  }
  else
  {
    v10 = objc_msgSend(v7, "length");
    v11 = malloc_type_calloc(1uLL, v10 + 200, 0x17ECDB5CuLL);
    *v11 = 1;
    v11[1] = v10;
    __strlcpy_chk(v11 + 34, *(_QWORD *)(a1 + 40), 64, 64);
    memcpy(v11 + 50, objc_msgSend(objc_retainAutorelease(v7), "bytes"), v10);
  }

  return v11;
}

void sub_1000254E4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

id sub_100025500(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  objc_class *v11;
  NSString *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v18;
  id obj;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "operations"));

  obj = v4;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v5)
  {
    v7 = v5;
    v8 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v21 != v8)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)i);
        v11 = (objc_class *)objc_opt_class(v10, v6);
        v12 = NSStringFromClass(v11);
        v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "ic_loggingIdentifier"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ %@"), v13, v14));

        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "ic_loggingValues"));
        objc_msgSend(v2, "setObject:forKeyedSubscript:", v16, v15);

      }
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v7);
  }

  objc_msgSend(v18, "setObject:forKeyedSubscript:", v2, CFSTR("operations"));
  return v18;
}

void sub_10002667C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002669C(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryCloudKitAccountInContext:", *(_QWORD *)(a1 + 40)));
  v3 = v2;
  if (v2)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v2, "generateAndSavePersonIDSaltIfNeededWithContext:", *(_QWORD *)(a1 + 40));
  }
  else
  {
    v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_100679AB4();

  }
}

void sub_100026B54(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  id v7;
  int v8;
  uint64_t v9;

  v3 = a2;
  v4 = a1[6];
  if (v4)
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
  v5 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = a1[4];
    v8 = 138543362;
    v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "os_transaction RELEASE {name: %{public}@}", (uint8_t *)&v8, 0xCu);
  }

  v7 = (id)objc_opt_self(a1[5]);
}

void sub_100026C38(uint64_t a1)
{
  void **v2;
  ICCloudContextSyncMetrics *v3;
  void *v4;
  unsigned int v5;
  unsigned int v6;
  char v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  NSObject *v19;
  int v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  NSObject *v28;
  _QWORD v29[6];
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  _QWORD v36[5];
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  const __CFString *v41;
  const __CFString *v42;
  uint8_t buf[4];
  _BYTE v44[10];
  _BYTE v45[14];

  v2 = (void **)(a1 + 40);
  v3 = -[ICCloudContextSyncMetrics initWithSyncReason:]([ICCloudContextSyncMetrics alloc], "initWithSyncReason:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "setLastSyncMetrics:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_existingCloudDirtyToken"));
  v5 = objc_msgSend(*(id *)(a1 + 32), "isFetchingEnabled");
  v6 = v5;
  if (*(_BYTE *)(a1 + 80))
  {
    if (v4)
      v7 = v5;
    else
      v7 = 0;
    if ((v7 & 1) != 0)
      goto LABEL_6;
LABEL_15:
    v19 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v20 = *(unsigned __int8 *)(a1 + 80);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)v44 = v6;
      *(_WORD *)&v44[4] = 1024;
      *(_DWORD *)&v44[6] = v20;
      *(_WORD *)v45 = 2114;
      *(_QWORD *)&v45[2] = v4;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "SYNC[FULL] CONTINUE - Trying to sync with fetching disabled, so only pushing. {isFetchingEnabled: %d, discretionary: %d, cloudDirtyToken: %{public}@}", buf, 0x18u);
    }

    v21 = *(void **)(a1 + 32);
    v22 = *(_QWORD *)(a1 + 40);
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    v36[2] = sub_100027060;
    v36[3] = &unk_1007D8028;
    v36[4] = v21;
    v37 = *(id *)(a1 + 48);
    v23 = *(id *)(a1 + 56);
    v25 = *(void **)(a1 + 64);
    v24 = *(_QWORD *)(a1 + 72);
    v38 = v23;
    v40 = v24;
    v39 = v25;
    objc_msgSend(v21, "processAllDirtyCloudObjectsWithSyncReason:completionHandler:", v22, v36);

    goto LABEL_18;
  }
  if ((v5 & 1) == 0)
    goto LABEL_15;
LABEL_6:
  v8 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_QWORD *)(a1 + 40);
    v10 = *(unsigned __int8 *)(a1 + 80);
    *(_DWORD *)buf = 138543874;
    *(_QWORD *)v44 = v9;
    *(_WORD *)&v44[8] = 1024;
    *(_DWORD *)v45 = v10;
    *(_WORD *)&v45[4] = 2114;
    *(_QWORD *)&v45[6] = v4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "SYNC[FULL] CONTINUE - Performing full sync {syncReason: %{public}@, discretionary: %d, cloudDirtyToken: %{public}@}", buf, 0x1Cu);
  }

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[DABabysitter sharedBabysitter](DABabysitter, "sharedBabysitter"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "tokenByRegisteringAccount:forOperationWithName:", *(_QWORD *)(a1 + 32), CFSTR("SYNC[FULL]")));

  if (v12)
    goto LABEL_13;
  if (isCloudContextSyncReasonUserInitiated(*v2))
  {
    v13 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      sub_100679BE4(a1 + 40, a1 + 32);

LABEL_13:
    v14 = *(void **)(a1 + 32);
    v15 = *(_QWORD *)(a1 + 40);
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_1000272B0;
    v29[3] = &unk_1007D8050;
    v29[4] = v14;
    v29[5] = v15;
    v30 = *(id *)(a1 + 48);
    v31 = v4;
    v16 = *(id *)(a1 + 56);
    v17 = *(void **)(a1 + 64);
    v35 = *(_QWORD *)(a1 + 72);
    v32 = v16;
    v33 = v12;
    v34 = v17;
    v18 = v12;
    objc_msgSend(v14, "_syncWithReason:completionHandler:", v15, v29);

    goto LABEL_18;
  }
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[REMError babySatErrorWithOperationName:](REMError, "babySatErrorWithOperationName:", CFSTR("SYNC[FULL]")));
  v41 = CFSTR("identifier");
  v42 = CFSTR("SYNC[FULL]");
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v42, &v41, 1));
  +[Analytics postEventWithName:payload:error:performAutoBugCaptureOnError:](_TtC19ReminderKitInternal9Analytics, "postEventWithName:payload:error:performAutoBugCaptureOnError:", CFSTR("com.apple.remindd.cloudkit.sync.crashDetected"), v27, v26, 1);

  v28 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT))
    sub_100679C60(a1 + 40, a1 + 32);

  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
LABEL_18:

}

void sub_100027060(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  _QWORD block[4];
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  v6 = objc_msgSend((id)objc_opt_class(v3, v5), "errorFromErrors:", v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100027148;
  block[3] = &unk_1007D8000;
  v13 = v7;
  v14 = *(id *)(a1 + 40);
  v8 = *(id *)(a1 + 48);
  v10 = *(void **)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  v15 = v8;
  v17 = v9;
  v16 = v10;
  v11 = v7;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

uint64_t sub_100027148(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_signpost_id_t v9;
  int v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_100679CE0();
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(v5, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 40));
    v11 = 134217984;
    v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SYNC[FULL] {duration: %.4f}", (uint8_t *)&v11, 0xCu);

  }
  v7 = *(id *)(a1 + 48);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 64);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    LOWORD(v11) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_END, v9, "cloudkit.full", "", (uint8_t *)&v11, 2u);
  }

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_1000272B0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  os_signpost_id_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];
  id v19;
  __int128 v20;
  id v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  uint64_t v25;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastSyncMetrics"));
  v5 = v4;
  if (v3)
  {
    objc_msgSend(v4, "finishWithSuccess:", 0);

    v6 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_100679D44();
  }
  else
  {
    objc_msgSend(v4, "finishWithSuccess:", 1);

    v6 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      objc_msgSend(v7, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 48));
      v8 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 134218242;
      v23 = v9;
      v24 = 2114;
      v25 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SYNC[FULL] END {duration: %.4f, syncReason: %{public}@}", buf, 0x16u);

    }
  }

  v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "processingQueue"));
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1000274F8;
  v18[3] = &unk_1007D7C40;
  v11 = v3;
  v19 = v11;
  v20 = *(_OWORD *)(a1 + 32);
  v21 = *(id *)(a1 + 56);
  dispatch_async(v10, v18);

  v12 = *(id *)(a1 + 64);
  v13 = v12;
  v14 = *(_QWORD *)(a1 + 88);
  if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_INTERVAL_END, v14, "cloudkit.full", "", buf, 2u);
  }

  v15 = (id)objc_opt_self(*(_QWORD *)(a1 + 72));
  (*(void (**)(_QWORD, id, uint64_t, uint64_t))(*(_QWORD *)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v11, v16, v17);

}

id sub_1000274F8(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (!*(_QWORD *)(a1 + 32)
    && objc_msgSend(*(id *)(a1 + 40), "_generateAndSavePersonIDSaltIfNeeded:", *(_QWORD *)(a1 + 48)))
  {
    v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SYNC[FULL] - PersonIDSalt generated for primary CK account.", v4, 2u);
    }

  }
  return objc_msgSend(*(id *)(a1 + 40), "_clearCloudDirtyForToken:", *(_QWORD *)(a1 + 56));
}

void sub_10002777C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  __int128 v11;
  id v12;
  id v13;
  char v14;
  uint8_t buf[16];

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_100679DB0();

    objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "_syncWithReason: Fetched database changes for full sync", buf, 2u);
    }

  }
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000278CC;
  v9[3] = &unk_1007D80C8;
  v8 = *(void **)(a1 + 40);
  v10 = *(id *)(a1 + 32);
  v11 = *(_OWORD *)(a1 + 40);
  v13 = *(id *)(a1 + 64);
  v14 = *(_BYTE *)(a1 + 72);
  v12 = *(id *)(a1 + 56);
  objc_msgSend(v8, "fetchRecordZoneChangesWithReason:cloudSchemaCatchUpSyncContextMap:completionHandler:", v6, v7, v9);

}

void sub_1000278CC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  char v18;
  uint8_t buf[16];

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_100679E14();

    objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "_syncWithReason: Fetched record zone changes for full sync", buf, 2u);
    }

  }
  v7 = *(void **)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100027A14;
  v12[3] = &unk_1007D80A0;
  v13 = *(id *)(a1 + 32);
  v8 = *(id *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 40);
  v17 = v8;
  v14 = v9;
  v18 = *(_BYTE *)(a1 + 72);
  v10 = *(id *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 48);
  v15 = v10;
  v16 = v11;
  objc_msgSend(v7, "processAllDirtyCloudObjectsWithSyncReason:completionHandler:", v6, v12);

}

void sub_100027A14(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  _QWORD block[4];
  id v15;
  id v16;
  uint8_t buf[16];

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_100679E78(v3, v5);

    objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", v3);
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "_syncWithReason: Processed everything for full sync", buf, 2u);
    }

  }
  if (*(_QWORD *)(a1 + 64))
  {
    v7 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 40), v6), "errorFromErrors:", *(_QWORD *)(a1 + 32));
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if (*(_BYTE *)(a1 + 72))
    {
      v9 = *(void **)(a1 + 40);
      v10 = *(_QWORD *)(a1 + 48);
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("syncReason=%@"), *(_QWORD *)(a1 + 56)));
      objc_msgSend(v9, "didCompleteCloudSchemaCatchUpSyncWithContextMap:error:syncTypeLabel:debugLogLabel:", v10, v8, CFSTR("FULL"), v11);

    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100027BA8;
    block[3] = &unk_1007D7D30;
    v12 = *(id *)(a1 + 64);
    v15 = v8;
    v16 = v12;
    v13 = v8;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
}

uint64_t sub_100027BA8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_100027C54(uint64_t a1)
{
  os_unfair_lock_s **v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  dispatch_time_t v14;
  _QWORD *v15;
  const char *v16;
  dispatch_queue_attr_t v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v22[5];
  id v23;
  _QWORD *v24;
  _QWORD block[4];
  id v26;
  _QWORD *v27;
  _QWORD v28[5];
  id v29;
  _QWORD v30[5];
  id v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _QWORD v36[5];
  _BYTE v37[128];

  v2 = (os_unfair_lock_s **)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 32));
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3221225472;
  v36[2] = sub_100027FC0;
  v36[3] = &unk_1007D7A60;
  v36[4] = *v2;
  sub_100027FC0((uint64_t)v36);
  os_unfair_lock_unlock(*v2 + 8);
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[os_unfair_lock_s operationQueue](*v2, "operationQueue"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "operations"));
  v5 = objc_msgSend(v4, "copy");

  v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v33;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v33 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)v9);
        v11 = objc_opt_class(CKOperation, v6);
        if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
          objc_msgSend(v10, "ic_removeAllCKCompletionBlocksButNotTheNSOperationCompletionBlock");
        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
    }
    while (v7);
  }

  objc_msgSend(*(id *)(a1 + 32), "setDisabledInternal:", 1);
  objc_msgSend(*(id *)(a1 + 32), "clearPendingActivity");
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationQueue"));
  objc_msgSend(v12, "cancelAllOperations");

  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_100028020;
  v30[3] = &unk_1007D8140;
  v30[4] = *(_QWORD *)(a1 + 32);
  v31 = *(id *)(a1 + 40);
  v13 = objc_retainBlock(v30);
  v28[0] = 0;
  v28[1] = v28;
  v28[2] = 0x3032000000;
  v28[3] = sub_1000228A0;
  v28[4] = sub_1000228B0;
  v29 = &__kCFBooleanFalse;
  v14 = dispatch_time(0, 5000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100028108;
  block[3] = &unk_1007D8168;
  v27 = v28;
  v15 = v13;
  v26 = v15;
  dispatch_after(v14, (dispatch_queue_t)&_dispatch_main_q, block);
  v16 = (const char *)objc_msgSend(CFSTR("com.apple.reminders.cloud.waiting"), "UTF8String");
  v17 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v18 = objc_claimAutoreleasedReturnValue(v17);
  v19 = dispatch_queue_create(v16, v18);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100028190;
  v22[3] = &unk_1007D8190;
  v20 = *(_QWORD *)(a1 + 32);
  v23 = v15;
  v24 = v28;
  v22[4] = v20;
  v21 = v15;
  dispatch_async(v19, v22);

  _Block_object_dispose(v28, 8);
}

void sub_100027FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100027FC0(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accountInitializerDidCompleteOnAccountsDidChangeObserver"));

  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accountInitializerDidCompleteOnAccountsDidChangeObserver"));
    objc_msgSend(v3, "unobserve");

    objc_msgSend(*(id *)(a1 + 32), "setAccountInitializerDidCompleteOnAccountsDidChangeObserver:", 0);
  }
}

void sub_100028020(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[4];
  id v4;
  uint8_t buf[16];

  v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "cancelEverything: Performing cleanup in ICCC.", buf, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "clearPendingActivity");
  objc_msgSend(*(id *)(a1 + 32), "setDisabledInternal:", 0);
  if (*(_QWORD *)(a1 + 40))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000280FC;
    block[3] = &unk_1007D8118;
    v4 = *(id *)(a1 + 40);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
}

uint64_t sub_1000280FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100028108(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;

  if ((objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "BOOLValue") & 1) == 0)
  {
    v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_100679EF8();

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v4 = *(void **)(v3 + 40);
    *(_QWORD *)(v3 + 40) = &__kCFBooleanTrue;

  }
}

void sub_100028190(uint64_t a1)
{
  void *v2;
  id v3;
  __int128 v4;
  _QWORD block[4];
  __int128 v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationQueue"));
  objc_msgSend(v2, "waitUntilAllOperationsAreFinished");

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100028228;
  block[3] = &unk_1007D8168;
  v4 = *(_OWORD *)(a1 + 40);
  v3 = (id)v4;
  v6 = v4;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_100028228(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  if ((objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "BOOLValue") & 1) == 0)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v3 = *(void **)(v2 + 40);
    *(_QWORD *)(v2 + 40) = &__kCFBooleanTrue;

  }
}

void sub_100028344(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  NSMutableDictionary *v8;
  _QWORD v9[5];
  uint8_t buf[4];
  void *v11;
  __int16 v12;
  void *v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  objc_msgSend(*(id *)(a1 + 32), "setObjectIDsToProcess:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  objc_msgSend(*(id *)(a1 + 32), "setObjectIDsToRetry:", v3);

  v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accountZoneIDsFetchingChanges"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accountZoneIDsNeedingFetchChanges"));
    *(_DWORD *)buf = 138543618;
    v11 = v5;
    v12 = 2114;
    v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Zone IDs that need to resume fetching: fetching=%{public}@; needingFetch=%{public}@",
      buf,
      0x16u);

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accountZoneIDsFetchingChanges"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000284DC;
  v9[3] = &unk_1007D81B8;
  v9[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v7, "enumerateKeysAndObjectsUsingBlock:", v9);

  v8 = objc_opt_new(NSMutableDictionary);
  objc_msgSend(*(id *)(a1 + 32), "setAccountZoneIDsFetchingChanges:", v8);

}

void sub_1000284DC(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;

  v11 = a2;
  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "accountZoneIDsNeedingFetchChanges"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v11));

  if (v8)
  {
    objc_msgSend(v8, "unionSet:", v6);
  }
  else
  {
    v9 = objc_msgSend(v6, "mutableCopy");

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accountZoneIDsNeedingFetchChanges"));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v9, v11);

    v6 = v9;
  }

}

id sub_100028598(uint64_t a1)
{
  return +[NSObject cancelPreviousPerformRequestsWithTarget:](NSObject, "cancelPreviousPerformRequestsWithTarget:", *(_QWORD *)(a1 + 32));
}

void sub_100028910(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  _QWORD v23[5];
  id v24;
  id v25;
  id v26;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t v32[128];
  uint8_t buf[4];
  uint64_t v34;
  __int16 v35;
  id v36;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  v11 = v10;
  if (v9)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_100679F50();
  }
  else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138543618;
    v34 = v12;
    v35 = 2114;
    v36 = v8;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Deleted record zones in account ID %{public}@: {deletedRecordZoneIDs: %{public}@}", buf, 0x16u);
  }

  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v13 = v8;
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v29;
    do
    {
      v17 = 0;
      do
      {
        if (*(_QWORD *)v29 != v16)
          objc_enumerationMutation(v13);
        objc_msgSend(*(id *)(a1 + 40), "deleteServerChangeTokenForRecordZoneID:databaseScope:accountID:", *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)v17), objc_msgSend(*(id *)(a1 + 48), "databaseScope"), *(_QWORD *)(a1 + 32));
        v17 = (char *)v17 + 1;
      }
      while (v15 != v17);
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
    }
    while (v15);
  }

  objc_msgSend(*(id *)(a1 + 40), "updateCloudContextStateWithReason:", CFSTR("DeleteRecordZonesWithZoneIDs"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "contextForAccountID:withBatchFetchHelper:", *(_QWORD *)(a1 + 32), 0));
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100028B88;
  v23[3] = &unk_1007D81E0;
  v19 = *(void **)(a1 + 32);
  v23[4] = *(_QWORD *)(a1 + 40);
  v24 = v18;
  v25 = v19;
  v20 = *(id *)(a1 + 56);
  v26 = v9;
  v27 = v20;
  v21 = v9;
  v22 = v18;
  objc_msgSend(v22, "performBlockAndWait:", v23);

}

uint64_t sub_100028B88(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  int *v7;
  void *i;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  id obj;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];

  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v3 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), a2), "allCloudObjectIDsOfClassesPassingTest:inContext:", 0, *(_QWORD *)(a1 + 40));
  obj = (id)objc_claimAutoreleasedReturnValue(v3);
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
  if (!v4)
    goto LABEL_12;
  v5 = v4;
  v6 = *(_QWORD *)v26;
  v7 = &OBJC_IVAR___ICBatchFetchHelper__managedObjectContext;
  v22 = *(_QWORD *)v26;
  do
  {
    for (i = 0; i != v5; i = (char *)i + 1)
    {
      if (*(_QWORD *)v26 != v6)
        objc_enumerationMutation(obj);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectWithID:", *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)i)));
      v11 = objc_opt_class(v7 + 728, v10);
      v12 = REMDynamicCast(v11, v9);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "account"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "identifier"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "UUIDString"));
      if (objc_msgSend(v16, "isEqualToString:", *(_QWORD *)(a1 + 48)))
      {

      }
      else
      {
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "identifier"));
        v18 = v5;
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "UUIDString"));
        v24 = objc_msgSend(v19, "isEqualToString:", *(_QWORD *)(a1 + 48));

        v5 = v18;
        v6 = v22;
        v7 = &OBJC_IVAR___ICBatchFetchHelper__managedObjectContext;

        if (!v24)
          goto LABEL_10;
      }
      objc_msgSend(v13, "clearServerRecord");
LABEL_10:

    }
    v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
  }
  while (v5);
LABEL_12:

  objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v20), "saveAndFaultIfFailWithContext:shouldTakeServerAsTruth:logDescription:", *(_QWORD *)(a1 + 40), 1, CFSTR("deleting record zones"));
  result = *(_QWORD *)(a1 + 64);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 56));
  return result;
}

void sub_1000293F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100029414(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  void *v5;
  double v6;
  uint64_t v7;
  id v8;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "userInfo"));
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CKErrorRetryAfterKey));

  v5 = v8;
  if (v8)
  {
    objc_msgSend(v8, "doubleValue");
    v5 = v8;
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    if (v6 > *(double *)(v7 + 24))
      *(double *)(v7 + 24) = v6;
  }

}

void sub_100029794(id *a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  NSString *(__cdecl **v8)(SEL);
  uint64_t v9;
  uint64_t v10;
  NSString *(__cdecl **v11)(SEL);
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  unsigned __int8 v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  void *i;
  void *v24;
  unsigned int v25;
  uint64_t v26;
  id v27;
  void *v28;
  unsigned __int8 v29;
  NSObject *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  uint64_t v36;
  id obj;
  id v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _QWORD v47[4];
  id v48;
  id v49;
  uint8_t buf[4];
  void *v51;
  __int16 v52;
  void *v53;
  _BYTE v54[128];
  _BYTE v55[128];

  v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "ic_loggingDescription"));
    *(_DWORD *)buf = 138543362;
    v51 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Finishing operations for record ID %{public}@", buf, 0xCu);

  }
  v47[0] = _NSConcreteStackBlock;
  v47[1] = 3221225472;
  v47[2] = sub_100029BF4;
  v47[3] = &unk_1007D8140;
  v48 = a1[4];
  v49 = a1[6];
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[ICNSBlockOperation blockOperationWithBlock:](ICNSBlockOperation, "blockOperationWithBlock:", v47));
  objc_msgSend(v4, "setName:", ICNSBlockOperationNameFinishOperations);
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "operationQueue"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "operations"));

  v7 = v4;
  obj = v6;
  v8 = &NSStringFromSelector_ptr;
  v38 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v43, v55, 16);
  if (v38)
  {
    v10 = *(_QWORD *)v44;
    v11 = &NSStringFromSelector_ptr;
    v35 = v7;
    v36 = *(_QWORD *)v44;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v44 != v10)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)v12);
        v14 = objc_opt_class(v11[32], v9);
        if ((objc_opt_isKindOfClass(v13, v14) & 1) == 0)
        {
          v26 = objc_opt_class(CKFetchRecordsOperation, v15);
          if ((objc_opt_isKindOfClass(v13, v26) & 1) == 0)
            goto LABEL_27;
          v27 = v13;
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "recordIDs"));
          v29 = objc_msgSend(v28, "containsObject:", a1[4]);

          if ((v29 & 1) == 0)
            goto LABEL_27;
          goto LABEL_24;
        }
        v16 = v13;
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "recordIDsToDelete"));
        v18 = objc_msgSend(v17, "containsObject:", a1[4]);

        if ((v18 & 1) != 0)
        {
LABEL_23:

          v10 = v36;
          v11 = &NSStringFromSelector_ptr;
LABEL_24:
          v30 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8[281], "cloudkit"));
          if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
          {
            v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "ic_loggingDescription"));
            v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "ic_loggingDescription"));
            *(_DWORD *)buf = 138543618;
            v51 = v31;
            v52 = 2114;
            v53 = v32;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "Waiting on operation %{public}@ for record ID %{public}@", buf, 0x16u);

          }
          objc_msgSend(v7, "addDependency:", v13);
          goto LABEL_27;
        }
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "recordsToSave"));
        v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v39, v54, 16);
        if (v20)
        {
          v21 = v20;
          v22 = *(_QWORD *)v40;
          while (2)
          {
            for (i = 0; i != v21; i = (char *)i + 1)
            {
              if (*(_QWORD *)v40 != v22)
                objc_enumerationMutation(v19);
              v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v39 + 1)
                                                                                 + 8 * (_QWORD)i), "recordID"));
              v25 = objc_msgSend(v24, "isEqual:", a1[4]);

              if (v25)
              {

                v8 = &NSStringFromSelector_ptr;
                v7 = v35;
                goto LABEL_23;
              }
            }
            v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v39, v54, 16);
            if (v21)
              continue;
            break;
          }

          v8 = &NSStringFromSelector_ptr;
          v7 = v35;
        }
        else
        {

        }
        v10 = v36;
        v11 = &NSStringFromSelector_ptr;
LABEL_27:
        v12 = (char *)v12 + 1;
      }
      while (v12 != v38);
      v33 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v55, 16);
      v38 = v33;
    }
    while (v33);
  }

  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "operationQueue"));
  objc_msgSend(v34, "addOperation:", v7);

  objc_msgSend(a1[5], "errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessary");
}

uint64_t sub_100029BF4(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  int v5;
  void *v6;

  v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_loggingDescription"));
    v5 = 138543362;
    v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "All operations finished for record ID %{public}@", (uint8_t *)&v5, 0xCu);

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100029F1C(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];
  id v6;
  uint8_t buf[16];

  v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Updating CloudKit account status", buf, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "removeStaleAccountStatus");
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containersByAccountID"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100029FF8;
  v5[3] = &unk_1007D82A8;
  v4 = *(void **)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v5);

}

void sub_100029FF8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  id v9;
  _QWORD v10[5];
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    sub_100679FBC();

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10002A0D8;
  v10[3] = &unk_1007D8280;
  v8 = *(void **)(a1 + 40);
  v10[4] = *(_QWORD *)(a1 + 32);
  v11 = v5;
  v12 = v8;
  v9 = v5;
  objc_msgSend(v6, "accountStatusWithCompletionHandler:", v10);

}

void sub_10002A0D8(id *a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;

  v5 = a3;
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "processingQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10002A1A4;
  block[3] = &unk_1007D8000;
  v11 = v5;
  v7 = a1[5];
  v8 = a1[4];
  v12 = v7;
  v13 = v8;
  v15 = a2;
  v14 = a1[6];
  v9 = v5;
  dispatch_async(v6, block);

}

uint64_t sub_10002A1A4(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  void *v14;
  __int16 v15;
  uint64_t v16;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_10067A020();
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "accountStatusNumberByAccountID"));
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));

    if (v2 && objc_msgSend(*(id *)(a1 + 48), "accountStatusFromAccountStatusNumber:", v2) == *(id *)(a1 + 64))
    {
      v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = CKStringFromAccountStatus(*(_QWORD *)(a1 + 64));
        v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
        v7 = *(_QWORD *)(a1 + 40);
        v13 = 138543618;
        v14 = v6;
        v15 = 2114;
        v16 = v7;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "No change in CloudKit status %{public}@ for account: %{public}@", (uint8_t *)&v13, 0x16u);

      }
    }
    else
    {
      v8 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = CKStringFromAccountStatus(*(_QWORD *)(a1 + 64));
        v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        v11 = *(_QWORD *)(a1 + 40);
        v13 = 138543618;
        v14 = v10;
        v15 = 2114;
        v16 = v11;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CloudKit account status changed to %{public}@ for account: %{public}@", (uint8_t *)&v13, 0x16u);

      }
      objc_msgSend(*(id *)(a1 + 48), "setAccountStatus:forAccountID:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40));
      objc_msgSend(*(id *)(a1 + 48), "setNeedsToUpdateSubscriptions:", 1);
      objc_msgSend(*(id *)(a1 + 48), "clearSubscribedSubscriptionIDs");
      objc_msgSend(*(id *)(a1 + 48), "clearZoneFetchState");
    }
  }

  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  return result;
}

void sub_10002A428(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  uint8_t buf[4];
  void *v18;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accountStatusNumberByAccountID"));
  v3 = objc_msgSend(v2, "count");

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containersByAccountID"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allKeys"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v5));

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accountStatusNumberByAccountID"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "allKeys"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", v8));

    objc_msgSend(v9, "minusSet:", v6);
    if (objc_msgSend(v9, "count"))
    {
      v10 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138543362;
        v18 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Remove stale account status for accountIDs: %{public}@", buf, 0xCu);
      }

      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accountStatusNumberByAccountID"));
      v12 = objc_msgSend(v11, "mutableCopy");

      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_10002A628;
      v15[3] = &unk_1007D82D0;
      v16 = v12;
      v13 = v12;
      objc_msgSend(v9, "enumerateObjectsUsingBlock:", v15);
      v14 = objc_msgSend(v13, "copy");
      objc_msgSend(*(id *)(a1 + 32), "setAccountStatusNumberByAccountID:", v14);

    }
  }
}

id sub_10002A628(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "removeObjectForKey:", a2);
}

void sub_10002A6A0(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  _QWORD v11[5];
  uint8_t buf[4];
  void *v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "databaseScopeStringsNeedingRetryFetchChangesByAccountID"));
  v3 = objc_msgSend(v2, "count");

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containersByAccountID"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allKeys"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v5));

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "databaseScopeStringsNeedingRetryFetchChangesByAccountID"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "allKeys"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", v8));

    objc_msgSend(v9, "minusSet:", v6);
    if (objc_msgSend(v9, "count"))
    {
      v10 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138543362;
        v13 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Remove stale database scope string needing retry fetch changes for accountIDs: %{public}@", buf, 0xCu);
      }

      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_10002A858;
      v11[3] = &unk_1007D82D0;
      v11[4] = *(_QWORD *)(a1 + 32);
      objc_msgSend(v9, "enumerateObjectsUsingBlock:", v11);
    }

  }
}

void sub_10002A858(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "databaseScopeStringsNeedingRetryFetchChangesByAccountID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v3));

  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v6 = v5;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v14;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v14 != v9)
          objc_enumerationMutation(v6);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "retryCountFetchDatabaseChangesOperationTypeForAccountID:dataScopeString:", v3, *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v10), (_QWORD)v13));
        objc_msgSend(*(id *)(a1 + 32), "clearRetryCountForOperationType:", v11);

        v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v8);
  }

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "databaseScopeStringsNeedingRetryFetchChangesByAccountID"));
  objc_msgSend(v12, "removeObjectForKey:", v3);

}

void sub_10002AABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002AAD4(uint64_t a1, void *a2, void *a3)
{
  void *v6;
  __CFString *v7;
  __CFString *v8;
  id v9;
  uint64_t v10;
  void *v11;

  v6 = *(void **)(a1 + 32);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    v7 = &stru_1007FE210;
  else
    v7 = CFSTR(",");
  v8 = v7;
  v9 = a2;
  v10 = CKStringFromAccountStatus((int)objc_msgSend(a3, "intValue"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  objc_msgSend(v6, "appendFormat:", CFSTR("%@ (%@, %@)"), v8, v9, v11);

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
}

void sub_10002AE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,char a23)
{
  id *v23;

  objc_destroyWeak(v23);
  _Block_object_dispose(&a23, 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10002AEA0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v7 = a2;
  v8 = a4;
  if (v7)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    v9 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
      v11 = 138477827;
      v12 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Fetched user record in cloud context {userRecord: %{private}@}", (uint8_t *)&v11, 0xCu);
    }
  }
  else
  {
    v9 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_10067A09C();
  }

}

void sub_10002AFC8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  NSObject *v5;
  id WeakRetained;
  NSObject *v7;
  uint64_t v8;
  int v9;
  id v10;

  v4 = a3;
  v5 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    v9 = 138543362;
    v10 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Fetch user record operation completed: %{public}@", (uint8_t *)&v9, 0xCu);

  }
  if (v4)
  {
    v7 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_10067A100();

  }
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    (*(void (**)(uint64_t, _QWORD, id))(v8 + 16))(v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v4);

}

void sub_10002B44C(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(uint64_t, id);
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v12[4];
  id v13;
  id v14;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(void (**)(uint64_t, id))(v3 + 16);
  v5 = a2;
  v4(v3, v5);
  v6 = objc_alloc((Class)CKModifyRecordsOperation);
  v14 = v5;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v14, 1));
  v8 = objc_msgSend(v6, "initWithRecordsToSave:recordIDsToDelete:", v7, 0);

  objc_msgSend(*(id *)(a1 + 32), "configureOperation:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerForAccountID:", *(_QWORD *)(a1 + 40)));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "privateCloudDatabase"));
  objc_msgSend(v8, "setDatabase:", v10);

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10002B5BC;
  v12[3] = &unk_1007D8370;
  v13 = *(id *)(a1 + 56);
  objc_msgSend(v8, "setModifyRecordsCompletionBlock:", v12);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "database"));
  objc_msgSend(v11, "addOperation:", v8);

}

uint64_t sub_10002B5BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10002B6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002B6F4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;

  v5 = a2;
  v6 = a3;
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "recordName"));
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

  if (!v5 || v6)
  {
    v10 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_10067A1BC();

  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

id sub_10002BCEC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "addFetchOperationsForRecordIDs:accountID:operationGroupName:runExclusively:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 72), *(_QWORD *)(a1 + 64));
}

void sub_10002BFD4(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  _QWORD block[5];
  id v5;
  id v6;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "processingQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10002C070;
  block[3] = &unk_1007D8410;
  v3 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v5 = v3;
  v6 = *(id *)(a1 + 48);
  dispatch_async(v2, block);

}

void sub_10002C070(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), a2), "errorFromOperations:", *(_QWORD *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10002C110;
  v7[3] = &unk_1007D7D30;
  v5 = *(id *)(a1 + 48);
  v8 = v4;
  v9 = v5;
  v6 = v4;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v7);

}

uint64_t sub_10002C110(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_10002C498(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_10002C4D0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;

  v5 = a3;
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "databaseWithDatabaseScope:", objc_msgSend(a2, "integerValue")));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "operationsToFetchRecordIDs:database:", v5, v8));
  objc_msgSend(*(id *)(a1 + 48), "addObjectsFromArray:", v6);
  v7 = objc_msgSend(v5, "count");

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) += 10240 * (_QWORD)v7;
}

void sub_10002CB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10002CB70(uint64_t a1, void *a2, double a3)
{
  void *v4;
  id *v5;
  id v6;
  id WeakRetained;

  v4 = *(void **)(a1 + 32);
  v5 = (id *)(a1 + 40);
  v6 = a2;
  WeakRetained = objc_loadWeakRetained(v5);
  objc_msgSend(v4, "fetchOperation:progressChangedWithRecordID:progress:", WeakRetained, v6, a3);

}

void sub_10002CBDC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  NSObject *WeakRetained;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastSyncMetrics"));
  objc_msgSend(v10, "setFetchedRecordCount:", (char *)objc_msgSend(v10, "fetchedRecordCount") + 1);

  if (v8)
  {
    v11 = *(void **)(a1 + 32);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(v11, "fetchOperation:recordWasFetchedWithRecordID:record:error:", WeakRetained, v8, v7, v9);
  }
  else
  {
    WeakRetained = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(WeakRetained, OS_LOG_TYPE_FAULT))
      sub_10067A378();
  }

}

void sub_10002CCB8(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id *v5;
  id v6;
  id v7;
  id WeakRetained;

  v4 = *(void **)(a1 + 32);
  v5 = (id *)(a1 + 40);
  v6 = a3;
  v7 = a2;
  WeakRetained = objc_loadWeakRetained(v5);
  objc_msgSend(v4, "fetchOperation:didCompleteWithRecordsByRecordID:error:", WeakRetained, v7, v6);

}

void sub_10002CF6C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "database"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "accountIDForDatabase:", v3));

  if (!objc_msgSend(v4, "length"))
  {
    v5 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      sub_10067A3A4();

  }
  v6 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10002D0B4;
  v10[3] = &unk_1007D84D8;
  v7 = *(id *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 32);
  v11 = v7;
  v12 = v8;
  v13 = *(id *)(a1 + 56);
  v14 = *(id *)(a1 + 64);
  v15 = v4;
  v16 = *(id *)(a1 + 40);
  v9 = v4;
  objc_msgSend(v6, "performAndWaitContextWithBatchFetchHelperForAccountID:block:", v9, v10);

}

void sub_10002D0B4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isKindOfClass;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint8_t buf[4];
  uint64_t v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  uint64_t v38;

  v3 = a2;
  if (*(_QWORD *)(a1 + 32))
  {
    v4 = *(void **)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 48);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "recordType"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "existingCloudObjectForRecordID:recordType:accountID:context:", v5, v6, *(_QWORD *)(a1 + 64), v3));

    if (objc_msgSend(*(id *)(a1 + 32), "code") == (id)26 || objc_msgSend(*(id *)(a1 + 32), "code") == (id)11)
    {
      v8 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v24 = *(_QWORD *)(a1 + 64);
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "ic_loggingDescription"));
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "ic_loggingDescription"));
        *(_DWORD *)buf = 138543874;
        v32 = v24;
        v33 = 2114;
        v34 = v25;
        v35 = 2114;
        v36 = v26;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Tried to fetch record that doesn't exist in account ID %{public}@: %{public}@ %{public}@", buf, 0x20u);

      }
      objc_msgSend(v7, "objectWasFetchedButDoesNotExistInCloud");
      if (objc_msgSend(*(id *)(a1 + 32), "code") != (id)26)
        goto LABEL_19;
      v9 = *(void **)(a1 + 40);
      v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "zoneID"));
      objc_msgSend(v9, "receivedZoneNotFound:operation:", v10, *(_QWORD *)(a1 + 72));
    }
    else
    {
      v10 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "ic_loggingDescription"));
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "ic_loggingDescription"));
        v30 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138544130;
        v32 = v27;
        v33 = 2114;
        v34 = v28;
        v35 = 2114;
        v36 = v29;
        v37 = 2114;
        v38 = v30;
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to fetch in account ID %{public}@: %{public}@ %{public}@: %{public}@", buf, 0x2Au);

      }
    }

LABEL_19:
    if (!v7)
    {
LABEL_23:

      goto LABEL_24;
    }
    v19 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectIDsToRetry"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectID"));
    objc_msgSend(v19, "addObject:", v20);
    goto LABEL_21;
  }
  v11 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    sub_10067A424();

  v12 = *(_QWORD *)(a1 + 56);
  v14 = objc_opt_class(CKShare, v13);
  isKindOfClass = objc_opt_isKindOfClass(v12, v14);
  v16 = *(void **)(a1 + 40);
  if ((isKindOfClass & 1) == 0)
  {
    v17 = *(_QWORD *)(a1 + 48);
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "recordType"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "existingCloudObjectForRecordID:recordType:accountID:context:", v17, v18, *(_QWORD *)(a1 + 64), v3));

    if (!v7)
    {
      v19 = objc_msgSend(*(id *)(a1 + 40), "newCloudObjectForRecord:accountID:context:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), v3);
      goto LABEL_22;
    }
    if (*(_QWORD *)(a1 + 64))
      objc_msgSend(v7, "objectWasFetchedFromCloudWithRecord:accountID:", *(_QWORD *)(a1 + 56));
    v19 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectIDsToRetry"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectID"));
    objc_msgSend(v19, "removeObject:", v20);
LABEL_21:

LABEL_22:
    goto LABEL_23;
  }
  objc_msgSend(*(id *)(a1 + 40), "didFetchShare:accountID:context:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), v3);
LABEL_24:
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "operationID"));
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("fetch records operation %@"), v21));

  objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 40), v23), "saveAndFaultIfFailWithContext:shouldTakeServerAsTruth:logDescription:", v3, 1, v22);
}

void sub_10002D554(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  void *v5;
  int v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_10067A4D4();

    objc_msgSend(*(id *)(a1 + 48), "startRetryTimerIfNecessaryWithError:", *(_QWORD *)(a1 + 32));
  }
  else
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
      v6 = 138543362;
      v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Finished {operatin: %{public}@}", (uint8_t *)&v6, 0xCu);

    }
  }
}

void sub_10002DD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10002DD50(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;

  v5 = a2;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10002DE18;
  v11[3] = &unk_1007D8528;
  v6 = *(_QWORD *)(a1 + 56);
  v12 = v5;
  v15 = v6;
  v7 = *(void **)(a1 + 32);
  v8 = *(id *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 64);
  v13 = v8;
  v16 = v9;
  v14 = *(id *)(a1 + 48);
  v10 = v5;
  objc_msgSend(v7, "deleteSharesForObjects:accountID:completionHandler:", a3, v10, v11);

}

void sub_10002DE18(uint64_t a1, void *a2)
{
  id v4;
  NSObject *v5;
  id v6;
  unint64_t v7;
  uint64_t v8;

  v4 = a2;
  if (v4)
  {
    v5 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_10067A704();

    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a2);
  }
  v6 = *(id *)(a1 + 40);
  objc_sync_enter(v6);
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
  objc_sync_exit(v6);

  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
  if (v7 >= (unint64_t)objc_msgSend(*(id *)(a1 + 40), "count"))
  {
    v8 = *(_QWORD *)(a1 + 48);
    if (v8)
      (*(void (**)(uint64_t, _QWORD))(v8 + 16))(v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
  }

}

void sub_10002E1F8(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  void *v10;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "shortLoggingDescription"));
    v7 = 138543618;
    v8 = v5;
    v9 = 2112;
    v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Will delete share in account ID %{public}@ for %@", (uint8_t *)&v7, 0x16u);

  }
}

void sub_10002E63C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  _QWORD v9[5];
  id v10;
  id v11;
  id v12;
  uint8_t buf[16];

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SYNC[SyncAfterDeleteShare] START}", buf, 2u);
  }

  v5 = *(void **)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "allObjects"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10002E76C;
  v9[3] = &unk_1007D85E0;
  v9[4] = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 48);
  v10 = *(id *)(a1 + 56);
  v11 = v3;
  v12 = *(id *)(a1 + 64);
  v8 = v3;
  objc_msgSend(v5, "fetchRecordZoneChangesForZoneIDs:accountID:reason:completionHandler:", v6, v7, CFSTR("SyncAfterDeleteShare"), v9);

}

void sub_10002E76C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint8_t *v15;
  uint8_t buf[8];
  uint8_t *v17;
  uint64_t v18;
  char v19;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SYNC[SyncAfterDeleteShare] END", buf, 2u);
  }

  v5 = objc_msgSend(*(id *)(a1 + 32), "newBackgroundContext");
  *(_QWORD *)buf = 0;
  v17 = buf;
  v18 = 0x2020000000;
  v19 = 0;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10002E924;
  v12[3] = &unk_1007D7FB0;
  v13 = *(id *)(a1 + 40);
  v6 = v5;
  v14 = v6;
  v15 = buf;
  objc_msgSend(v6, "performBlockAndWait:", v12);
  if (v17[24]
    && (v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.reminders"), 213, 0))) != 0)
  {
    v8 = v7;
    v9 = v8;
  }
  else
  {
    if (v3)
      v10 = v3;
    else
      v10 = *(id *)(a1 + 48);
    v9 = v10;
    v8 = 0;
  }
  v11 = *(_QWORD *)(a1 + 56);
  if (v11)
    (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v9);

  _Block_object_dispose(buf, 8);
}

void sub_10002E904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002E924(_QWORD *a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[REMCDObject ic_objectsFromObjectIDs:context:](REMCDObject, "ic_objectsFromObjectIDs:context:", a1[4], a1[5]));
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = objc_msgSend(v2, "ic_containsObjectPassingTest:", &stru_1007D85B8);

}

BOOL sub_10002E97C(id a1, REMCDObject *a2, unint64_t a3, BOOL *a4)
{
  void *v4;
  BOOL v5;

  v4 = (void *)objc_claimAutoreleasedReturnValue(-[REMCDObject ckServerShare](a2, "ckServerShare", a3, a4));
  v5 = v4 != 0;

  return v5;
}

void sub_10002E9B0(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  _QWORD block[5];
  id v5;
  id v6;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "processingQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10002EA4C;
  block[3] = &unk_1007D8410;
  v3 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v5 = v3;
  v6 = *(id *)(a1 + 48);
  dispatch_async(v2, block);

}

void sub_10002EA4C(_QWORD *a1, uint64_t a2)
{
  id v3;
  id v4;

  v3 = objc_msgSend((id)objc_opt_class(a1[4], a2), "errorFromOperations:", a1[5]);
  v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(void))(a1[6] + 16))();

}

void sub_10002F654(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x2A0], 8);
  _Unwind_Resume(a1);
}

void sub_10002F690(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "addObject:", a2);
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v6);

}

void sub_10002F6E8(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t buf[4];
  unint64_t v31;
  __int16 v32;
  void *v33;
  _BYTE v34[128];

  v4 = a2;
  v6 = objc_opt_class(CKModifyRecordsOperation, v5);
  v24 = v4;
  v7 = REMDynamicCast(v6, v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "recordsToSave"));
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v27;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(_QWORD *)v27 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)i);
        v15 = *(void **)(a1 + 32);
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "recordID", v24));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", v16));

        objc_msgSend(v17, "objectWillBePushedToCloudWithOperation:", v8);
        v18 = (unint64_t)objc_msgSend(v14, "size");
        if (v18 > 0x100000)
        {
          v19 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "ic_loggingDescription"));
            *(_DWORD *)buf = 134218242;
            v31 = v18;
            v32 = 2114;
            v33 = v21;
            _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Record size (%lu bytes) exceeds CloudKit limit for record: %{public}@", buf, 0x16u);

          }
          objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 40), v20), "faultAndPromptToFileRadarWithICTap2RadarType:logMessage:", 1, CFSTR("Oversized CloudKit Record"));
        }
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) += v18;

      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
    }
    while (v11);
  }

  if (*(_BYTE *)(a1 + 72))
    objc_msgSend(*(id *)(a1 + 40), "addDependenciesForModifyRecordsOperation:", v8);
  if (*(_QWORD *)(a1 + 48))
    objc_msgSend(v8, "addDependency:");
  if (a3)
  {
    v22 = 0;
    do
    {
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "objectAtIndexedSubscript:", v22, v24));
      objc_msgSend(v8, "addDependency:", v23);

      ++v22;
    }
    while (a3 != v22);
  }

}

id sub_100030220(id a1, CKRecord *a2)
{
  return -[CKRecord ic_loggingDescription](a2, "ic_loggingDescription");
}

id sub_100030228(id a1, CKRecord *a2)
{
  return -[CKRecord ic_loggingDescription](a2, "ic_loggingDescription");
}

id sub_100030230(id a1, CKRecord *a2)
{
  return -[CKRecord ic_loggingDescription](a2, "ic_loggingDescription");
}

void sub_100030428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationToModifyRecordsToSave:delete:rootRecordIDsByShareID:database:", a3, a4, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)));
  objc_msgSend(*(id *)(a1 + 56), "addObject:", v5);

}

void sub_100030A18(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 88));
  _Unwind_Resume(a1);
}

void sub_100030A58(uint64_t a1, void *a2, void *a3, void *a4)
{
  void *v6;
  id *v7;
  id v8;
  id v9;
  id v10;
  id WeakRetained;

  v6 = *(void **)(a1 + 32);
  v7 = (id *)(a1 + 40);
  v8 = a4;
  v9 = a3;
  v10 = a2;
  WeakRetained = objc_loadWeakRetained(v7);
  objc_msgSend(v6, "modifyRecordsOperation:recordWasSavedWithRecordID:record:context:onProcessingQueue:error:", WeakRetained, v10, v9, 0, 0, v8);

}

void sub_100030AEC(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id *v6;
  id v7;
  id v8;
  id WeakRetained;

  v5 = *(void **)(a1 + 32);
  v6 = (id *)(a1 + 48);
  v7 = a3;
  v8 = a2;
  WeakRetained = objc_loadWeakRetained(v6);
  objc_msgSend(v5, "modifyRecordsOperation:recordWasDeletedWithRecordID:rootRecordIDsByShareID:onProcessingQueue:error:", WeakRetained, v8, *(_QWORD *)(a1 + 40), 0, v7);

}

void sub_100030B70(uint64_t a1, void *a2, double a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  double v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastSyncMetrics"));
  objc_msgSend(v6, "setModifiedRecordCount:", (char *)objc_msgSend(v6, "modifiedRecordCount") + 1);

  if (((int)(a3 * 100.0) - 1) <= 0x61)
  {
    v7 = *(void **)(a1 + 40);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "recordID"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v8));

    if (!v9 || (objc_msgSend(v9, "timeIntervalSinceNow"), v10 < -0.7))
    {
      v11 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        sub_10067A97C(v5, (int)(a3 * 100.0), v11);

      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      v13 = *(void **)(a1 + 40);
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "recordID"));
      objc_msgSend(v13, "setObject:forKeyedSubscript:", v12, v14);

    }
  }

}

void sub_100030CB8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v4;
  id *v5;
  id v6;
  id WeakRetained;

  v4 = *(void **)(a1 + 32);
  v5 = (id *)(a1 + 40);
  v6 = a4;
  WeakRetained = objc_loadWeakRetained(v5);
  objc_msgSend(v4, "modifyRecordsOperation:didCompleteWithError:", WeakRetained, v6);

}

void sub_100031064(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Unwind_Resume(a1);
}

void sub_100031088(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  _QWORD v15[5];
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  _QWORD v20[5];
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  void *v31;

  if (*(_QWORD *)(a1 + 32))
  {
    v20[0] = _NSConcreteStackBlock;
    v20[2] = sub_1000312C4;
    v20[3] = &unk_1007D87C8;
    v2 = *(void **)(a1 + 48);
    v20[4] = *(_QWORD *)(a1 + 40);
    v3 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
    v20[1] = 3221225472;
    v21 = v2;
    v4 = *(id *)(a1 + 56);
    v5 = *(_QWORD *)(a1 + 80);
    v22 = v4;
    v25 = v5;
    v23 = *(id *)(a1 + 64);
    v24 = *(id *)(a1 + 32);
    objc_msgSend(v3, "performBlockAndWait:", v20);

    v6 = v21;
  }
  else
  {
    v7 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = *(_QWORD *)(a1 + 56);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "ic_loggingDescription"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "ic_loggingDescription"));
      *(_DWORD *)buf = 138543874;
      v27 = v8;
      v28 = 2112;
      v29 = v9;
      v30 = 2114;
      v31 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Pushed account ID %{public}@: %@ %{public}@", buf, 0x20u);

    }
    v15[0] = _NSConcreteStackBlock;
    v15[2] = sub_1000313A0;
    v15[3] = &unk_1007D87F0;
    v15[4] = *(_QWORD *)(a1 + 40);
    v11 = *(void **)(a1 + 72);
    v12 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
    v15[1] = 3221225472;
    v16 = v11;
    v13 = *(id *)(a1 + 56);
    v14 = *(_QWORD *)(a1 + 80);
    v17 = v13;
    v19 = v14;
    v18 = *(id *)(a1 + 64);
    objc_msgSend(v12, "performBlockAndWait:", v15);

    v6 = v16;
  }

}

void sub_1000312C4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  unint64_t v5;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "existingCloudObjectForRecordID:recordType:accountID:context:", *(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40)));
  objc_msgSend(v7, "objectFailedToBePushedToCloudWithOperation:recordID:error:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectID"));

  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectIDsToRetry"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectID"));
    objc_msgSend(v3, "addObject:", v4);

  }
  v5 = (unint64_t)objc_msgSend(*(id *)(a1 + 64), "code");
  if (v5 <= 0x1F && ((1 << v5) & 0x80081000) != 0)
    objc_msgSend(v7, "incrementFailureCounts");

}

void sub_1000313A0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned int v6;
  void *v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "existingCloudObjectForRecord:accountID:context:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40)));
  v3 = v2;
  if (v2)
  {
    v7 = v2;
    objc_msgSend(v2, "objectWasPushedToCloudWithOperation:serverRecord:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectIDsToRetry"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectID"));
    objc_msgSend(v4, "removeObject:", v5);

    v6 = objc_msgSend(v7, "shouldBeIgnoredForSync");
    v3 = v7;
    if (v6)
    {
      objc_msgSend(v7, "decrementFailureCounts");
      v3 = v7;
    }
  }

}

void sub_10003144C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "recordName"));
  v5 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("pushing record for account ID %@: %@"), v2, v3));

  objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 56), v4), "saveAndFaultIfFailWithContext:shouldTakeServerAsTruth:logDescription:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), *(_QWORD *)(a1 + 48) != 0, v5);
}

void sub_100031830(uint64_t a1)
{
  void *v2;
  _QWORD v3[5];
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  char v10;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100031914;
  v3[3] = &unk_1007D8868;
  v2 = *(void **)(a1 + 32);
  v3[4] = *(_QWORD *)(a1 + 40);
  v4 = *(id *)(a1 + 48);
  v5 = *(id *)(a1 + 56);
  v6 = *(id *)(a1 + 32);
  v7 = *(id *)(a1 + 64);
  v8 = *(id *)(a1 + 72);
  v10 = *(_BYTE *)(a1 + 88);
  v9 = *(id *)(a1 + 80);
  objc_msgSend(v2, "performBlockAndWait:", v3);

}

void sub_100031914(uint64_t a1)
{
  uint64_t *v2;
  void *v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  _BOOL4 v13;
  uint64_t v14;
  void *v15;
  void *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  int v51;
  uint64_t v52;
  __int16 v53;
  void *v54;
  __int16 v55;
  void *v56;
  __int16 v57;
  void *v58;
  __int16 v59;
  uint64_t v60;

  v2 = (uint64_t *)(a1 + 48);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "existingCloudObjectForRecordID:recordType:accountID:context:", *(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56)));
  if (!v3)
  {
    v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 48);
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "ic_loggingDescription"));
      v51 = 138543874;
      v52 = v5;
      v53 = 2114;
      v54 = v6;
      v55 = 2114;
      v56 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Record was deleted but the cloud object no longer exists in our database for modifyRecordsOperation:recordWasDeletedWithRecordID:... {accountID: %{public}@, prefetchRecordID: %{public}@, opeartion: %{public}@}", (uint8_t *)&v51, 0x20u);

    }
  }
  v8 = *(void **)(a1 + 72);
  v9 = *(unsigned __int8 *)(a1 + 88);
  if (v8)
  {
    v10 = objc_msgSend(v8, "code");
    if (v9)
    {
      if (v10 == (id)26)
      {
        v27 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          v38 = *(_QWORD *)(a1 + 48);
          v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "ic_loggingDescription"));
          v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "shortLoggingDescription"));
          v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "ic_loggingDescription"));
          v51 = 138544130;
          v52 = v38;
          v53 = 2114;
          v54 = v39;
          v55 = 2112;
          v56 = v40;
          v57 = 2114;
          v58 = v41;
          _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "Zone not found deleting share in account ID %{public}@: %{public}@ for %@ %{public}@", (uint8_t *)&v51, 0x2Au);

        }
        objc_msgSend(v3, "setCkServerShare:", 0);
        v28 = *(void **)(a1 + 32);
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "zoneID"));
        objc_msgSend(v28, "receivedZoneNotFound:operation:", v29, *(_QWORD *)(a1 + 64));

      }
      else if (v10 == (id)11)
      {
        v11 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          v34 = *(_QWORD *)(a1 + 48);
          v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "ic_loggingDescription"));
          v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "shortLoggingDescription"));
          v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "ic_loggingDescription"));
          v51 = 138544130;
          v52 = v34;
          v53 = 2114;
          v54 = v35;
          v55 = 2112;
          v56 = v36;
          v57 = 2114;
          v58 = v37;
          _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Unknown item deleting share in account ID %{public}@: %{public}@ for %@ %{public}@", (uint8_t *)&v51, 0x2Au);

        }
        objc_msgSend(v3, "setCkServerShare:", 0);
      }
      else
      {
        v30 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          v42 = *(_QWORD *)(a1 + 48);
          v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "ic_loggingDescription"));
          v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "shortLoggingDescription"));
          v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "ic_loggingDescription"));
          v46 = *(_QWORD *)(a1 + 72);
          v51 = 138544386;
          v52 = v42;
          v53 = 2114;
          v54 = v43;
          v55 = 2112;
          v56 = v44;
          v57 = 2114;
          v58 = v45;
          v59 = 2114;
          v60 = v46;
          _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Error deleting share in account ID %{public}@: %{public}@ for %@ %{public}@: %{public}@", (uint8_t *)&v51, 0x34u);

        }
      }
      goto LABEL_55;
    }
    if (v10 == (id)31)
    {
      v31 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        sub_10067ABB4();

      objc_msgSend(v3, "fixBrokenReferences");
      objc_msgSend(v3, "incrementFailureCounts");
      if (v3)
        goto LABEL_53;
    }
    else if (v10 == (id)22)
    {
      v32 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        sub_10067AC4C();

      if (v3)
        goto LABEL_53;
    }
    else
    {
      if (v10 == (id)11)
      {
        v17 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          sub_10067AB1C();

        objc_msgSend(v3, "objectWasDeletedFromCloud");
        if (!v3)
          goto LABEL_55;
        goto LABEL_53;
      }
      v33 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        v47 = *(_QWORD *)(a1 + 48);
        v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "ic_loggingDescription"));
        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "ic_loggingDescription"));
        v50 = *(void **)(a1 + 72);
        v51 = 138544130;
        v52 = v47;
        v53 = 2114;
        v54 = v48;
        v55 = 2114;
        v56 = v49;
        v57 = 2114;
        v58 = v50;
        _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "Error deleting record in account ID %{public}@: %{public}@ %{public}@: %{public}@", (uint8_t *)&v51, 0x2Au);

      }
      if (v3)
      {
LABEL_53:
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectIDsToRetry"));
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));
        objc_msgSend(v25, "addObject:", v26);
        goto LABEL_54;
      }
    }
  }
  else
  {
    v12 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (v9)
    {
      if (v13)
      {
        v14 = *(_QWORD *)(a1 + 48);
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "ic_loggingDescription"));
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "ic_loggingDescription"));
        v51 = 138543874;
        v52 = v14;
        v53 = 2114;
        v54 = v15;
        v55 = 2114;
        v56 = v16;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Deleted share in account ID %{public}@: %{public}@ %{public}@", (uint8_t *)&v51, 0x20u);

      }
      objc_msgSend(v3, "setCkServerShare:", 0);
      if ((objc_msgSend(v3, "isOwnedByCurrentUser") & 1) == 0
        && objc_msgSend(v3, "markedForDeletion"))
      {
        objc_msgSend(v3, "deleteFromLocalDatabase");
      }
    }
    else
    {
      if (v13)
      {
        v18 = *(_QWORD *)(a1 + 48);
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "ic_loggingDescription"));
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "ic_loggingDescription"));
        v51 = 138543874;
        v52 = v18;
        v53 = 2114;
        v54 = v19;
        v55 = 2114;
        v56 = v20;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Deleted record in account ID %{public}@: %{public}@ %{public}@", (uint8_t *)&v51, 0x20u);

      }
      objc_msgSend(v3, "objectWasDeletedFromCloud");
      if (objc_msgSend(v3, "markedForDeletion")
        && (objc_msgSend(v3, "supportsDeletionByTTL") & 1) == 0)
      {
        v21 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          v22 = *v2;
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "shortLoggingDescription"));
          v51 = 138543618;
          v52 = v22;
          v53 = 2114;
          v54 = v23;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Actually deleting object in account ID %{public}@: %{public}@ with supportsDeletionByTTL = false from local DB upon completion of CKModifyRecordsOperation.", (uint8_t *)&v51, 0x16u);

        }
        objc_msgSend(v3, "deleteFromLocalDatabase");
      }
      if (objc_msgSend(v3, "shouldBeIgnoredForSync"))
        objc_msgSend(v3, "decrementFailureCounts");
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));

      if (v24)
      {
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectIDsToRetry"));
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));
        objc_msgSend(v25, "removeObject:", v26);
LABEL_54:

      }
    }
  }
LABEL_55:

}

void sub_1000320E4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "recordName"));
  v5 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("pushing record for account ID %@: %@"), v2, v3));

  objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 56), v4), "saveAndFaultIfFailWithContext:shouldTakeServerAsTruth:logDescription:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 48) != 0, v5);
}

void sub_100032228(id *a1, uint64_t a2)
{
  id v3;
  id *v4;
  objc_class *v5;
  NSString *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  id v10;
  char *v11;
  NSObject *v12;
  NSObject *v13;
  id v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  void *i;
  id v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  NSObject *v29;
  void *v30;
  void *v31;
  _QWORD v32[5];
  id v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint8_t buf[4];
  void *v39;
  _BYTE v40[128];

  v3 = a1[4];
  v4 = a1 + 5;
  v5 = (objc_class *)objc_opt_class(a1[5], a2);
  v6 = NSStringFromClass(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  objc_msgSend(v3, "incrementOrClearRetryCountForOperationType:error:", v7, a1[6]);

  if (!a1[6])
    goto LABEL_29;
  v8 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    sub_10067AE54((uint64_t)v4, v8);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "operationQueue"));
  v10 = objc_msgSend(v9, "iterativelyCancelDependentOperations:", a1[5]);

  v11 = (char *)objc_msgSend(a1[6], "code");
  if ((unint64_t)(v11 - 3) < 2)
    goto LABEL_7;
  if (v11 == (char *)2)
  {
    v13 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      sub_10067ADD8();

    objc_msgSend(a1[4], "handleGenericPartialFailuresForError:operation:", a1[6], a1[5]);
    goto LABEL_15;
  }
  if (v11 == (char *)20)
  {
LABEL_7:
    v12 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
  }
  else
  {
    v12 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
LABEL_13:
      sub_10067AD5C();
  }

LABEL_15:
  if (objc_msgSend(a1[6], "code") != (id)2)
  {
    v14 = a1[4];
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "database"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "accountIDForDatabase:", v15));

    if (!objc_msgSend(v16, "length"))
    {
      v17 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
      if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
        sub_10067ACDC();

    }
    v31 = v16;
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "contextForAccountID:withBatchFetchHelper:", v16, 1));
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "recordsToSave"));
    v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v34, v40, 16);
    if (v20)
    {
      v21 = v20;
      v22 = *(_QWORD *)v35;
      do
      {
        for (i = 0; i != v21; i = (char *)i + 1)
        {
          if (*(_QWORD *)v35 != v22)
            objc_enumerationMutation(v19);
          v24 = a1[4];
          v25 = a1[5];
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)i), "recordID"));
          objc_msgSend(v24, "modifyRecordsOperation:recordWasSavedWithRecordID:record:context:onProcessingQueue:error:", v25, v26, 0, v18, 1, a1[6]);

        }
        v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v34, v40, 16);
      }
      while (v21);
    }

    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "batchFetchHelper"));
    objc_msgSend(v27, "flushOnCurrentQueue:", 1);
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_100032638;
    v32[3] = &unk_1007D7C68;
    v32[4] = a1[4];
    v33 = v18;
    v28 = v18;
    objc_msgSend(v28, "performBlockAndWait:", v32);

  }
  objc_msgSend(a1[4], "startRetryTimerIfNecessaryWithError:", a1[6]);
LABEL_29:
  v29 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v4, "ic_loggingDescription"));
    *(_DWORD *)buf = 138543362;
    v39 = v30;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Finished modify operation %{public}@", buf, 0xCu);

  }
}

id sub_100032638(uint64_t a1, uint64_t a2)
{
  return objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), a2), "saveAndFaultIfFailWithContext:shouldTakeServerAsTruth:logDescription:", *(_QWORD *)(a1 + 40), 1, CFSTR("finished modify (save) operation with error(s)"));
}

void sub_100032AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_100032B10(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  NSObject *v15;

  v5 = a2;
  v6 = a3;
  v8 = objc_opt_class(CKRecordZoneID, v7);
  if ((objc_opt_isKindOfClass(v5, v8) & 1) != 0)
  {
    v10 = v5;
LABEL_5:
    v12 = v10;
    goto LABEL_7;
  }
  v11 = objc_opt_class(CKRecordID, v9);
  if ((objc_opt_isKindOfClass(v5, v11) & 1) != 0)
  {
    v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "zoneID"));
    goto LABEL_5;
  }
  v12 = 0;
LABEL_7:
  v13 = objc_msgSend(v6, "code");
  if (v13 == (id)28)
  {
    if (v12)
    {
      v14 = (void *)a1[5];
LABEL_15:
      objc_msgSend(v14, "addObject:", v12);
      goto LABEL_21;
    }
    v15 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      goto LABEL_19;
    goto LABEL_20;
  }
  if (v13 == (id)26)
  {
    if (v12)
    {
      v14 = (void *)a1[4];
      goto LABEL_15;
    }
    v15 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
LABEL_19:
      sub_10067AFBC();
LABEL_20:

    goto LABEL_21;
  }
  if (v13 == (id)25)
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
LABEL_21:

}

void sub_1000333BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000333E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accountCKIdentifier"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100033418()
{
  NSObject *v0;

  v0 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    sub_10067B084();

}

uint64_t sub_1000337E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100033AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100033AC4(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a3, "count");
  if (result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_100033F80(uint64_t a1)
{
  dispatch_group_t v2;
  id v3;
  NSString *(__cdecl **v4)(SEL);
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  id *v11;
  NSObject *v12;
  NSString *(__cdecl **v13)(SEL);
  void *v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  id obj;
  _QWORD v19[4];
  NSObject *v20;
  _QWORD v21[4];
  NSObject *v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t buf[4];
  void *v29;
  _BYTE v30[128];

  v2 = dispatch_group_create();
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v17 = a1;
  obj = *(id *)(a1 + 32);
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
  v4 = &NSStringFromSelector_ptr;
  if (v3)
  {
    v5 = v3;
    v6 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v25 != v6)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "completionBlock", v17));
        v10 = v9;
        if (v9)
        {
          v21[0] = _NSConcreteStackBlock;
          v21[1] = 3221225472;
          v21[2] = sub_100034274;
          v21[3] = &unk_1007D7D30;
          v23 = v9;
          v22 = v2;
          objc_msgSend(v8, "setCompletionBlock:", v21);

          v11 = &v23;
        }
        else
        {
          v19[0] = _NSConcreteStackBlock;
          v19[1] = 3221225472;
          v19[2] = sub_1000342A0;
          v19[3] = &unk_1007D7A60;
          v20 = v2;
          objc_msgSend(v8, "setCompletionBlock:", v19);
          v11 = (id *)&v20;
        }

        dispatch_group_enter(v2);
        v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4[281], "cloudkit"));
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          v13 = v4;
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ic_loggingDescription"));
          *(_DWORD *)buf = 138543362;
          v29 = v14;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Run exclusively operation start: {%{public}@}", buf, 0xCu);

          v4 = v13;
        }

        objc_msgSend(v8, "start");
      }
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
    }
    while (v5);
  }

  dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
  v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4[281], "cloudkit"));
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v17 + 32), "ic_map:", &stru_1007D8920));
    *(_DWORD *)buf = 138543362;
    v29 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Run exclusively operations end: {%{public}@}", buf, 0xCu);

  }
}

void sub_100034274(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000342A0(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

id sub_1000342A8(id a1, NSOperation *a2)
{
  return -[NSOperation ic_loggingDescription](a2, "ic_loggingDescription");
}

void sub_1000348F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100034928(uint64_t a1)
{
  double Current;
  BOOL v3;

  Current = CFAbsoluteTimeGetCurrent();
  v3 = *(_QWORD *)(a1 + 40) != qword_1008526F0 || Current - *(double *)&qword_100836078 > *(double *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1008526F0 = *(_QWORD *)(a1 + 40);
    qword_100836078 = *(_QWORD *)&Current;
  }
}

void sub_100035350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id location)
{
  id *v34;

  objc_destroyWeak(v34);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10003539C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id WeakRetained;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  _QWORD block[4];
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;

  v6 = a2;
  v7 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "processingQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100035494;
  block[3] = &unk_1007D8500;
  v16 = v7;
  v17 = WeakRetained;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(void **)(a1 + 40);
  v18 = v6;
  v19 = v10;
  v20 = v11;
  v12 = v6;
  v13 = WeakRetained;
  v14 = v7;
  dispatch_async(v9, block);

}

void sub_100035494(uint64_t a1)
{
  uint64_t v2;
  NSString *(__cdecl **v3)(SEL);
  NSObject *v4;
  NSObject *v5;
  void *v6;
  id v7;
  __int128 v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  NSObject *v13;
  NSString *(__cdecl **v14)(SEL);
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  __int128 v20;
  id obj;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  void *v29;
  _BYTE v30[128];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = &NSStringFromSelector_ptr;
  v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_10067B318();
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
    *(_DWORD *)buf = 138543362;
    v27 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Saved record zones %{public}@", buf, 0xCu);

  }
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  obj = *(id *)(a1 + 48);
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
  if (v7)
  {
    v9 = v7;
    v10 = *(_QWORD *)v23;
    *(_QWORD *)&v8 = 138543618;
    v20 = v8;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v23 != v10)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)v11);
        v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3[281], "cloudkit", v20));
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          v14 = v3;
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "zoneID"));
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "ic_loggingDescription"));
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
          *(_DWORD *)buf = v20;
          v27 = v16;
          v28 = 2114;
          v29 = v17;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Saved record zone %{public}@ %{public}@", buf, 0x16u);

          v3 = v14;
        }

        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "accountZoneIDsNeedingToBeSaved"));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "zoneID"));
        objc_msgSend(v18, "ic_removeZoneID:forAccountID:", v19, *(_QWORD *)(a1 + 64));

        v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
    }
    while (v9);
  }

}

void sub_100035B20(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_100035B4C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _BYTE *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  unsigned int v29;
  void *v30;
  NSObject *v31;
  uint64_t v32;
  void *v33;
  int v34;
  uint64_t v35;

  v2 = cloudKitAccountTypes();
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v3));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "storeController"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "storesForAccountTypes:", v4));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "valueForKey:", CFSTR("identifier")));

  v9 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v8), "filterNonUploadableChangedManagedObjectIDs:cloudKitStoreIdentifiers:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = objc_msgSend(v10, "mutableCopy");
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v13 = *(void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = v11;

  v14 = *(void **)(a1 + 40);
  if (v14 && objc_msgSend(v14, "count"))
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithSet:](NSSet, "setWithSet:", *(_QWORD *)(a1 + 40)));
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "minusSet:", v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectIDsToProcess"));
    objc_msgSend(v16, "minusSet:", v15);

    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectIDsToRetry"));
    objc_msgSend(v17, "minusSet:", v15);

  }
  if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "count"))
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectIDsToProcess"));
    v19 = objc_msgSend(v18, "count");

    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectIDsToProcess"));
    objc_msgSend(v20, "unionSet:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));

    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectIDsToProcess"));
    v22 = (_BYTE *)objc_msgSend(v21, "count") - v19;

    if (v22 >= 1)
    {
      v23 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        v34 = 134217984;
        v35 = v22;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Enqueued %ld object IDs because of coredata changes", (uint8_t *)&v34, 0xCu);
      }

    }
    if (!objc_msgSend(*(id *)(a1 + 32), "hasRetryTimer"))
      goto LABEL_12;
    v24 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "retryTimer"));
    if (v24)
    {
      v25 = (void *)v24;
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "retryTimer"));
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "fireDate"));
      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      v29 = objc_msgSend(v27, "ic_isEarlierThanDate:", v28);

      if (v29)
      {
LABEL_12:
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "processingSelectorDelayer"));

        if (v30)
        {
          v31 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
          if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
          {
            v32 = *(_QWORD *)(a1 + 48);
            v34 = 138543362;
            v35 = v32;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "contextDidSave processingSelectorDelayer.requestFire for author: %{public}@", (uint8_t *)&v34, 0xCu);
          }

          v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "processingSelectorDelayer"));
          objc_msgSend(v33, "requestFire");

        }
        else
        {
          objc_msgSend(*(id *)(a1 + 32), "processPendingCloudObjects");
        }
      }
    }
  }

}

void sub_100035F74(uint64_t a1)
{
  ICNSBlockOperation *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  ICNSBlockOperation *v11;
  void *v12;
  NSObject *v13;
  unsigned int v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  BOOL v22;
  NSObject *v23;
  void *v24;
  id v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _QWORD v31[5];
  id v32;
  id v33;
  id location;
  uint8_t buf[4];
  ICNSBlockOperation *v36;
  __int16 v37;
  id v38;
  _BYTE v39[128];

  v2 = objc_alloc_init(ICNSBlockOperation);
  -[ICNSBlockOperation setName:](v2, "setName:", *(_QWORD *)(a1 + 32));
  v4 = objc_opt_class(ICNSBlockOperation, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "operationQueue"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "operations"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lastObject"));
  v8 = REMDynamicCast(v4, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  if (objc_msgSend(v9, "isProcessObjectsForContextDidSaveOperation")
    && objc_msgSend(v9, "canCoalesceWithOperation:", v2))
  {
    v10 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = (ICNSBlockOperation *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "name"));
      *(_DWORD *)buf = 138543362;
      v36 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Coalescing ICNSBlockOperation name=%{public}@", buf, 0xCu);

    }
  }
  else
  {
    objc_initWeak(&location, v2);
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_10003638C;
    v31[3] = &unk_1007D89C0;
    objc_copyWeak(&v33, &location);
    v12 = *(void **)(a1 + 48);
    v31[4] = *(_QWORD *)(a1 + 40);
    v32 = v12;
    -[ICNSBlockOperation addExecutionBlock:](v2, "addExecutionBlock:", v31);
    v13 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14 = objc_msgSend(*(id *)(a1 + 40), "needsToProcessAllDirtyObjects");
      *(_DWORD *)buf = 134349312;
      v36 = v2;
      v37 = 1024;
      LODWORD(v38) = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Adding process objects operation %{public}p. allDirtyObjects=%d", buf, 0x12u);
    }

    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "operationQueue", 0));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "operations"));
    v17 = objc_msgSend(v16, "copy");

    v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v27, v39, 16);
    if (v18)
    {
      v19 = *(_QWORD *)v28;
      do
      {
        v20 = 0;
        do
        {
          if (*(_QWORD *)v28 != v19)
            objc_enumerationMutation(v17);
          -[ICNSBlockOperation addDependency:](v2, "addDependency:", *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)v20));
          v20 = (char *)v20 + 1;
        }
        while (v18 != v20);
        v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v27, v39, 16);
      }
      while (v18);
    }

    v21 = (void *)objc_claimAutoreleasedReturnValue(-[ICNSBlockOperation dependencies](v2, "dependencies"));
    v22 = objc_msgSend(v21, "count") == 0;

    if (!v22)
    {
      v23 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        v24 = (void *)objc_claimAutoreleasedReturnValue(-[ICNSBlockOperation dependencies](v2, "dependencies"));
        v25 = objc_msgSend(v24, "count");
        *(_DWORD *)buf = 134349312;
        v36 = v2;
        v37 = 2048;
        v38 = v25;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Process operation %{public}p waiting on %ld other operations", buf, 0x16u);

      }
    }
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "operationQueue"));
    objc_msgSend(v26, "addOperation:", v2);

    objc_msgSend(*(id *)(a1 + 40), "errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessary");
    objc_destroyWeak(&v33);
    objc_destroyWeak(&location);
  }

}

void sub_100036348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  id *v24;

  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10003638C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD block[4];
  id v5;

  v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_10067B394(a1, v2);

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "processingQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100036444;
  block[3] = &unk_1007D8118;
  v5 = *(id *)(a1 + 40);
  dispatch_async(v3, block);

}

uint64_t sub_100036444(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100036544(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100036560(uint64_t a1)
{
  id WeakRetained;
  NSObject *v3;
  id v4;
  void **v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  void *v8;
  id v9;
  id v10;
  uint8_t buf[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (objc_msgSend(WeakRetained, "needsToProcessAllDirtyObjects"))
  {
    objc_msgSend(WeakRetained, "setNeedsToProcessAllDirtyObjects:", 0);
    v3 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Running process all dirty objects operation.", buf, 2u);
    }

    v5 = _NSConcreteStackBlock;
    v6 = 3221225472;
    v7 = sub_100036664;
    v8 = &unk_1007D7C68;
    v9 = WeakRetained;
    v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "context"));
    v4 = v10;
    objc_msgSend(v4, "performBlockAndWait:", &v5);

  }
  objc_msgSend(WeakRetained, "processPendingCloudObjectsWithOperationName:syncReason:completionHandler:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v5, v6, v7, v8, v9);

}

void sub_100036664(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allDirtyCloudObjectIDsInContext:", *(_QWORD *)(a1 + 40)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectIDsToRetry"));
  objc_msgSend(v2, "unionSet:", v3);

}

id sub_1000367FC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v5;
  uint64_t v6;

  v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v5 = 138412290;
    v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "os_transaction RELEASE {name: com.apple.remindd.cloudkit.processPendingCloudObjects[%@]}", (uint8_t *)&v5, 0xCu);
  }

  return (id)objc_opt_self(*(_QWORD *)(a1 + 40));
}

void sub_100036FB4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  uint8_t v7[16];

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
  v5 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "os_transaction RELEASE {name: com.apple.remindd.cloudkit.sync.coredata}", v7, 2u);
  }

  v6 = (id)objc_opt_self(*(_QWORD *)(a1 + 32));
}

void sub_10003705C(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  NSObject *v20;
  os_signpost_id_t v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  void *v40;
  void **v41;
  uint64_t v42;
  void (*v43)(uint64_t, void *);
  void *v44;
  id v45;
  id v46;
  uint64_t v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  _QWORD v52[5];
  id v53;
  id v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t);
  void (*v61)(uint64_t);
  id v62;
  uint8_t buf[4];
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  id v68;
  __int16 v69;
  id v70;
  __int16 v71;
  uint64_t v72;

  v57 = 0;
  v58 = &v57;
  v59 = 0x3032000000;
  v60 = sub_1000228A0;
  v61 = sub_1000228B0;
  v62 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v52[0] = _NSConcreteStackBlock;
  v52[1] = 3221225472;
  v52[2] = sub_100037590;
  v52[3] = &unk_1007D8840;
  v52[4] = *(_QWORD *)(a1 + 32);
  v3 = v2;
  v53 = v3;
  v4 = *(id *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v54 = v4;
  v55 = v5;
  v56 = &v57;
  objc_msgSend(v3, "performBlockAndWait:", v52);
  v6 = objc_msgSend((id)v58[5], "count");
  v7 = *(void **)(a1 + 32);
  if (v6)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectIDsToProcess"));
    v9 = objc_msgSend(v8, "count");

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectIDsToRetry"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectIDsToProcess"));
    objc_msgSend(v10, "unionSet:", v11);

    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    objc_msgSend(*(id *)(a1 + 32), "setObjectIDsToProcess:", v12);

    v13 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(_QWORD *)(a1 + 40);
      v14 = *(_QWORD *)(a1 + 48);
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      objc_msgSend(v16, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 56));
      v17 = v58[5];
      *(_DWORD *)buf = 138544386;
      v64 = v15;
      v65 = 2114;
      v66 = v14;
      v67 = 2048;
      v68 = v18;
      v69 = 2048;
      v70 = v9;
      v71 = 2114;
      v72 = v17;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "SYNC[COREDATA] END(DEFERRED due to MERGE.LOCAL needs to happen before we can processObjectIDs) {operationName: %{public}@, syncReason: %{public}@, duration: %.4f, numIDsToProcessAddingToRetry: %ld, pendingAccountIdentifiers: %{public}@}", buf, 0x34u);

    }
    v19 = *(id *)(a1 + 64);
    v20 = v19;
    v21 = *(_QWORD *)(a1 + 88);
    if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v19))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_INTERVAL_END, v21, "cloudkit.coredata", "", buf, 2u);
    }

    v22 = (id)objc_opt_self(*(_QWORD *)(a1 + 72));
    (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();
  }
  else
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectIDsToRetry"));
    v24 = objc_msgSend(v23, "count");

    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectIDsToProcess"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectIDsToRetry"));
    objc_msgSend(v25, "unionSet:", v26);

    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    objc_msgSend(*(id *)(a1 + 32), "setObjectIDsToRetry:", v27);

    v28 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      v30 = *(_QWORD *)(a1 + 40);
      v29 = *(_QWORD *)(a1 + 48);
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectIDsToProcess"));
      v32 = objc_msgSend(v31, "count");
      *(_DWORD *)buf = 138544130;
      v64 = v30;
      v65 = 2114;
      v66 = v29;
      v67 = 2048;
      v68 = v32;
      v69 = 2048;
      v70 = v24;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "SYNC[COREDATA] CONTINUE {operationName: %{public}@, syncReason: %{public}@, objectIDsToProcess.count: %ld, retryIDsCount: %ld}", buf, 0x2Au);

    }
    v33 = *(void **)(a1 + 32);
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectIDsToProcess"));
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationQueue"));
    v41 = _NSConcreteStackBlock;
    v42 = 3221225472;
    v43 = sub_1000376E4;
    v44 = &unk_1007D8A88;
    v45 = *(id *)(a1 + 56);
    v36 = *(id *)(a1 + 40);
    v37 = *(_QWORD *)(a1 + 48);
    v46 = v36;
    v47 = v37;
    v38 = *(id *)(a1 + 64);
    v39 = *(_QWORD *)(a1 + 88);
    v48 = v38;
    v51 = v39;
    v49 = *(id *)(a1 + 72);
    v50 = *(id *)(a1 + 80);
    objc_msgSend(v33, "processObjectIDs:operationQueue:completionHandler:", v34, v35, &v41);

    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set", v41, v42, v43, v44));
    objc_msgSend(*(id *)(a1 + 32), "setObjectIDsToProcess:", v40);

  }
  _Block_object_dispose(&v57, 8);

}

void sub_100037558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_100037590(uint64_t a1)
{
  id v2;
  _QWORD v3[4];
  id v4;
  __int128 v5;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudKitAccountsInContext:", *(_QWORD *)(a1 + 40)));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100037620;
  v3[3] = &unk_1007D8A60;
  v4 = *(id *)(a1 + 48);
  v5 = *(_OWORD *)(a1 + 56);
  objc_msgSend(v2, "enumerateObjectsUsingBlock:", v3);

}

void sub_100037620(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;

  v3 = a2;
  if (objc_msgSend(v3, "daWasMigrated") && (objc_msgSend(v3, "inactive") & 1) == 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "UUIDString"));

    if (objc_msgSend(v5, "length"))
    {
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "addObject:", v5);
    }
    else
    {
      v6 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_10067B63C();

    }
  }

}

void sub_1000376E4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  os_signpost_id_t v13;
  id v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;

  v3 = a2;
  v4 = objc_msgSend(v3, "count");
  v5 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  v6 = v5;
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_10067B6B4();
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(_QWORD *)(a1 + 48);
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(v9, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 32));
    v15 = 138543874;
    v16 = v7;
    v17 = 2114;
    v18 = v8;
    v19 = 2048;
    v20 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SYNC[COREDATA] END {operationName: %{public}@, syncReason: %{public}@, duration: %.4f}", (uint8_t *)&v15, 0x20u);

  }
  v11 = *(id *)(a1 + 56);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 80);
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    LOWORD(v15) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_END, v13, "cloudkit.coredata", "", (uint8_t *)&v15, 2u);
  }

  v14 = (id)objc_opt_self(*(_QWORD *)(a1 + 64));
  (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

}

void sub_100037954(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100037970(uint64_t a1)
{
  id WeakRetained;
  NSObject *v3;
  void *v4;
  NSObject *v5;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  double v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  _QWORD v15[6];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[8];
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char v34;
  _QWORD v35[4];
  id v36;
  uint8_t v37[4];
  int v38;
  _BYTE buf[24];
  uint64_t (*v40)(uint64_t, uint64_t);
  void (*v41)(uint64_t);
  id v42;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "processingQueue"));
  dispatch_assert_queue_V2(v3);

  if (objc_msgSend(WeakRetained, "hasPassedBuddy")
    && (objc_msgSend(WeakRetained, "isSystemAvailableForSyncing") & 1) != 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "appleAccountUtilities"));
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "unsafeUntilSystemReady_allCloudKitRemindersEnabledICloudACAccounts"));

    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472;
    v35[2] = sub_100037E70;
    v35[3] = &unk_1007D8AD8;
    v6 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", -[NSObject count](v5, "count")));
    v36 = v6;
    -[NSObject enumerateObjectsUsingBlock:](v5, "enumerateObjectsUsingBlock:", v35);
    v31 = 0;
    v32 = &v31;
    v33 = 0x2020000000;
    v34 = 0;
    v27 = 0;
    v28 = &v27;
    v29 = 0x2020000000;
    v30 = 0;
    v21 = 0;
    v22 = &v21;
    v23 = 0x3032000000;
    v24 = sub_1000228A0;
    v25 = sub_1000228B0;
    v26 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", objc_msgSend(v6, "count")));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100037ED8;
    v20[3] = &unk_1007D8B28;
    v20[4] = WeakRetained;
    v20[5] = &v21;
    v20[6] = &v31;
    v20[7] = &v27;
    objc_msgSend(v6, "enumerateObjectsUsingBlock:", v20);
    v8 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      objc_msgSend(v9, "timeIntervalSinceDate:", v7);
      *(_DWORD *)buf = 134218242;
      *(double *)&buf[4] = v10 * 1000.0;
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "MERGE.LOCAL: (MergeLocalObjectsContext) Populated merge contexts {elapsed: %.4f ms, accountIdentifiers: %{public}@}", buf, 0x16u);

    }
    objc_msgSend(WeakRetained, "setNeedsToMergeLocalObjects:", *((unsigned __int8 *)v32 + 24));
    v16 = 0;
    v17 = &v16;
    v18 = 0x2020000000;
    v19 = 0;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v40 = sub_1000228A0;
    v41 = sub_1000228B0;
    v42 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v11 = (void *)v22[5];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1000381FC;
    v15[3] = &unk_1007D8B50;
    v15[4] = &v16;
    v15[5] = buf;
    objc_msgSend(v11, "enumerateKeysAndObjectsUsingBlock:", v15);
    if (v17[3])
    {
      v12 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
      v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
      objc_msgSend(WeakRetained, "processLocalObjectMergeEligibleObjectIDs:operationQueue:completionHandler:", v12, v13, *(_QWORD *)(a1 + 32));
    }
    else
    {
      if (*((_BYTE *)v28 + 24))
        goto LABEL_11;
      v13 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        v14 = *((unsigned __int8 *)v32 + 24);
        *(_DWORD *)v37 = 67109120;
        v38 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "MERGE.LOCAL: No need to merge local objects or no objectIDsInCloud (someAccountsNeedToMergeLocalObjects: %d)", v37, 8u);
      }
    }

    objc_msgSend(WeakRetained, "setNeedsToMergeLocalObjects:", 0);
    objc_msgSend(WeakRetained, "clearRetryCountForOperationType:", CFSTR("Merge.Local"));
LABEL_11:
    if (*((_BYTE *)v28 + 24))
    {
      objc_msgSend((id)v22[5], "enumerateKeysAndObjectsUsingBlock:", &stru_1007D8B90);
      objc_msgSend(WeakRetained, "_scheduleRetryMergeLocalObjects");
    }
    _Block_object_dispose(buf, 8);

    _Block_object_dispose(&v16, 8);
    _Block_object_dispose(&v21, 8);

    _Block_object_dispose(&v27, 8);
    _Block_object_dispose(&v31, 8);

    goto LABEL_14;
  }
  v5 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    sub_10067B798();
LABEL_14:

}

void sub_100037DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;

  _Block_object_dispose((const void *)(v38 - 192), 8);
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose(&a38, 8);
  _Unwind_Resume(a1);
}

void sub_100037E70(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));

  if (v3)
  {
    v4 = *(void **)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
    objc_msgSend(v4, "addObject:", v5);

  }
}

void sub_100037ED8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  __int128 v11;
  uint64_t v12;

  v3 = a2;
  v4 = objc_autoreleasePoolPush();
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mergeLocalObjectsFetchContextAffectingStoreOf:", v3));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100037FA0;
  v8[3] = &unk_1007D8B00;
  v7 = v3;
  v9 = v7;
  v10 = v5;
  v11 = *(_OWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 56);
  v6 = v5;
  objc_msgSend(v6, "performBlockAndWait:", v8);

  objc_autoreleasePoolPop(v4);
}

void sub_100037FA0(uint64_t a1)
{
  uint64_t *v2;
  void *v3;
  ICREMCDAccountMergeLocalObjectsContext *v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  NSObject *v8;
  uint32_t v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  _BYTE v13[24];

  v2 = (uint64_t *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAccount cloudKitAccountWithCKIdentifier:context:](REMCDAccount, "cloudKitAccountWithCKIdentifier:context:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
  if (v3)
  {
    v4 = -[ICREMCDAccountMergeLocalObjectsContext initWithAccountIdentifier:]([ICREMCDAccountMergeLocalObjectsContext alloc], "initWithAccountIdentifier:", *(_QWORD *)(a1 + 32));
    -[ICREMCDAccountMergeLocalObjectsContext validateWithAccount:](v4, "validateWithAccount:", v3);
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKey:", v4, *(_QWORD *)(a1 + 32));
    if (-[ICREMCDAccountMergeLocalObjectsContext needsToMergeLocalObjects](v4, "needsToMergeLocalObjects"))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
      v5 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = *v2;
        *(_DWORD *)v13 = 138543362;
        *(_QWORD *)&v13[4] = v6;
        v7 = "MERGE.LOCAL: (MergeLocalObjectsContext) Account needs to merge local objects {accountIdentifier: %{public}@}";
        v8 = v5;
        v9 = 12;
LABEL_9:
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v7, v13, v9);
      }
    }
    else
    {
      v5 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *v2;
        *(_DWORD *)v13 = 138543618;
        *(_QWORD *)&v13[4] = v10;
        *(_WORD *)&v13[12] = 1024;
        *(_DWORD *)&v13[14] = objc_msgSend(v3, "inactive");
        v7 = "MERGE.LOCAL: (MergeLocalObjectsContext) Account does not need to merge local objects {accountIdentifier: %{"
             "public}@, isInactive: %d}";
        v8 = v5;
        v9 = 18;
        goto LABEL_9;
      }
    }

    if (-[ICREMCDAccountMergeLocalObjectsContext shouldRetryMergeLocalObjects](v4, "shouldRetryMergeLocalObjects"))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
      v11 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(-[ICREMCDAccountMergeLocalObjectsContext loggableDescription](v4, "loggableDescription"));
        *(_DWORD *)v13 = 138543362;
        *(_QWORD *)&v13[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "MERGE.LOCAL: (MergeLocalObjectsContext) Account is not ready to merge local objects {mergeContext: %{public}@}", v13, 0xCu);

      }
    }
    objc_msgSend(*(id *)(a1 + 40), "reset", *(_OWORD *)v13, *(_QWORD *)&v13[16]);
    goto LABEL_15;
  }
  v4 = (ICREMCDAccountMergeLocalObjectsContext *)objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(&v4->super, OS_LOG_TYPE_ERROR))
    sub_10067B814();
LABEL_15:

}

void sub_1000381FC(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;

  v6 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "objectIDsOfClassesEligibleForLocalObjectMerge"));
  if (objc_msgSend(v5, "count"))
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += objc_msgSend(v5, "count");
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setObject:forKey:", v5, v6);
  }

}

void sub_100038280(id a1, NSString *a2, ICREMCDAccountMergeLocalObjectsContext *a3, BOOL *a4)
{
  ICREMCDAccountMergeLocalObjectsContext *v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;

  v4 = a3;
  if (-[ICREMCDAccountMergeLocalObjectsContext shouldRetryMergeLocalObjects](v4, "shouldRetryMergeLocalObjects"))
  {
    v5 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(-[ICREMCDAccountMergeLocalObjectsContext loggableDescription](v4, "loggableDescription"));
      v7 = 138543362;
      v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "MERGE.LOCAL: This account cannot merge local objects at this time, will schedule retry if needed (mergeContext: %{public}@)", (uint8_t *)&v7, 0xCu);

    }
  }

}

void sub_1000388DC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  uint8_t v7[16];

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
  v5 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "os_transaction RELEASE {name: com.apple.remindd.cloudkit.merge.local.coredata}", v7, 2u);
  }

  v6 = (id)objc_opt_self(*(_QWORD *)(a1 + 32));
}

void sub_100038984(uint64_t a1)
{
  NSObject *v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void **v10;
  uint64_t v11;
  void (*v12)(uint64_t, void *, void *);
  void *v13;
  uint64_t v14;
  id v15;
  uint8_t buf[4];
  id v17;

  v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(*(id *)(a1 + 32), "count");
    *(_DWORD *)buf = 134217984;
    v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "MERGE.LOCAL[COREDATA] CONTINUE {keys.count: %ld}", buf, 0xCu);
  }

  v4 = objc_alloc_init((Class)NSMutableArray);
  v10 = _NSConcreteStackBlock;
  v11 = 3221225472;
  v12 = sub_100038B28;
  v13 = &unk_1007D8BE0;
  v5 = *(void **)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  v6 = v4;
  v15 = v6;
  objc_msgSend(v5, "enumerateKeysAndObjectsUsingBlock:", &v10);
  v7 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit", v10, v11, v12, v13, v14));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(v8, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 48));
    *(_DWORD *)buf = 134217984;
    v17 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "MERGE.LOCAL[COREDATA] END {duration: %.4f}", buf, 0xCu);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_100038B28(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  id v16;
  uint8_t buf[4];
  id v18;
  __int16 v19;
  id v20;

  v5 = a2;
  v6 = a3;
  v7 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138543618;
    v18 = v5;
    v19 = 2114;
    v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "MERGE.LOCAL: Here's the objectIDs to fetch and process (accountID: %{public}@, eligibleObjectIDs: %{public}@).", buf, 0x16u);
  }

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mergeLocalObjectsWriteContextAffectingStoreOf:", v5));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100038C9C;
  v12[3] = &unk_1007D7C40;
  v13 = v5;
  v14 = v8;
  v15 = v6;
  v16 = *(id *)(a1 + 40);
  v9 = v6;
  v10 = v8;
  v11 = v5;
  objc_msgSend(v10, "performBlockAndWait:", v12);

}

void sub_100038C9C(uint64_t a1)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  id v12;
  uint8_t buf[4];
  uint64_t v14;

  v2 = (uint64_t *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAccount cloudKitAccountWithCKIdentifier:context:](REMCDAccount, "cloudKitAccountWithCKIdentifier:context:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
  v4 = v3;
  if (!v3)
  {
    v8 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_10067B8A4();
    goto LABEL_13;
  }
  if (objc_msgSend(v3, "daWasMigrated"))
  {
    v6 = *(_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 48);
    v12 = 0;
    v7 = +[ICCloudContext _performLocalObjectMergeWithEligibleObjectIDs:cloudKitAccount:managedObjectContext:error:](ICCloudContext, "_performLocalObjectMergeWithEligibleObjectIDs:cloudKitAccount:managedObjectContext:error:", v5, v4, v6, &v12);
    v8 = v12;
    if (v8)
      objc_msgSend(*(id *)(a1 + 56), "addObject:", v8);
    v9 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    v10 = v9;
    if ((v7 & 1) != 0)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *v2;
        *(_DWORD *)buf = 138543362;
        v14 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "MERGE.LOCAL[COREDATA] MERGE LOCAL SAVED for accountID %{public}@.", buf, 0xCu);
      }
    }
    else if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      sub_10067B908();
    }

LABEL_13:
  }

}

id sub_100039358(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "addProcessLocalObjectsOperationToMergeLocalObjectsWithCompletionHandler:", &stru_1007D8C48);
  objc_msgSend(*(id *)(a1 + 32), "setNeedsToProcessAllDirtyObjects:", 1);
  return objc_msgSend(*(id *)(a1 + 32), "addOperationToProcessObjectsWithOperationName:syncReason:completionHandler:", ICNSBlockOperationNameProcessDirtyObjects, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1000393A4(id a1, NSArray *a2)
{
  NSArray *v2;
  id v3;
  __int128 v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint8_t buf[4];
  uint64_t v16;
  _BYTE v17[128];

  v2 = a2;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = -[NSArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v11, v17, 16);
  if (v3)
  {
    v5 = v3;
    v6 = *(_QWORD *)v12;
    *(_QWORD *)&v4 = 138543362;
    v10 = v4;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v2);
        v8 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v7);
        v9 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit", v10));
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = v10;
          v16 = v8;
          _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "MERGE.LOCAL: Collected error upon merge local objects completion: {error: %{public}@}.", buf, 0xCu);
        }

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = -[NSArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v11, v17, 16);
    }
    while (v5);
  }

}

void sub_100039734(uint64_t a1, void *a2, void *a3)
{
  id v5;

  v5 = a2;
  objc_msgSend(a3, "reset");
  objc_msgSend(*(id *)(a1 + 32), "_processCloudObjectIDs:operationQueue:completionHandler:", v5, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_1000398F0(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  void *v12;
  id v13;
  NSMutableDictionary *v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  void *v24;
  NSObject *v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  void *j;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  NSObject *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  NSMutableDictionary *v48;
  NSMutableDictionary *v49;
  id v50;
  id v51;
  uint64_t v52;
  void *k;
  uint64_t v54;
  void *v55;
  void *v56;
  void *context;
  NSMutableDictionary *v58;
  NSObject *v59;
  uint64_t v60;
  NSMutableDictionary *v61;
  NSMutableDictionary *v62;
  void *v63;
  id v64;
  id obj;
  void *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _QWORD v75[4];
  NSMutableDictionary *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _BYTE v85[128];
  uint8_t v86[128];
  uint8_t buf[4];
  void *v88;
  __int16 v89;
  NSObject *v90;
  __int16 v91;
  uint64_t v92;
  _BYTE v93[128];
  _BYTE v94[128];

  v58 = objc_opt_new(NSMutableDictionary);
  v61 = objc_opt_new(NSMutableDictionary);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v60 = a1;
  v3 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v81, v94, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v82;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v82 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v81 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "entity"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "name"));
        v11 = objc_msgSend(v10, "isEqual:", CFSTR("REMCKCloudState"));

        if (v11)
          v12 = v66;
        else
          v12 = v2;
        objc_msgSend(v12, "addObject:", v8);
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v81, v94, 16);
    }
    while (v5);
  }

  v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  obj = v2;
  v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v77, v93, 16);
  v14 = v61;
  if (v13)
  {
    v15 = v13;
    v16 = *(_QWORD *)v78;
    do
    {
      v17 = 0;
      do
      {
        if (*(_QWORD *)v78 != v16)
          objc_enumerationMutation(obj);
        v18 = *(void **)(*((_QWORD *)&v77 + 1) + 8 * (_QWORD)v17);
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "persistentStore"));
        v20 = v19;
        if (v19)
        {
          v21 = objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "identifier"));
          if (-[NSObject length](v21, "length"))
          {
            v22 = objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "objectForKey:", v21));
            if (-[NSObject length](v22, "length"))
            {
              v23 = v22;
              goto LABEL_26;
            }
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v60 + 40), "storeController"));
            v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "accountIdentifierForStoreID:", v21));

            if (-[NSObject length](v23, "length"))
            {
              objc_msgSend(v63, "setObject:forKey:", v23, v21);
              v14 = v61;
LABEL_26:
              v25 = objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v14, "objectForKeyedSubscript:", v23));
              if (!v25)
              {
                v25 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
                -[NSMutableDictionary setObject:forKeyedSubscript:](v14, "setObject:forKeyedSubscript:", v25, v23);
              }
              -[NSObject addObject:](v25, "addObject:", v18);
            }
            else
            {
              v25 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
              v14 = v61;
              if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138543874;
                v88 = v18;
                v89 = 2114;
                v90 = v21;
                v91 = 2114;
                v92 = (uint64_t)v23;
                _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "_processFetchedCloudObjectsWithObjectIDs with nil or empty accountID for managedObjectID %{public}@, storeID %{public}@, accountID: %{public}@", buf, 0x20u);
              }
            }

          }
          else
          {
            v23 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138543362;
              v88 = v18;
              _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "_processFetchedCloudObjectsWithObjectIDs with nil or empty storeID for managedObjectID %{public}@", buf, 0xCu);
            }
          }

          goto LABEL_31;
        }
        v21 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v88 = v18;
          _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "_processFetchedCloudObjectsWithObjectIDs with nil store for managedObjectID %{public}@", buf, 0xCu);
        }
LABEL_31:

        v17 = (char *)v17 + 1;
      }
      while (v15 != v17);
      v26 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v77, v93, 16);
      v15 = v26;
    }
    while (v26);
  }

  v75[0] = _NSConcreteStackBlock;
  v75[1] = 3221225472;
  v75[2] = sub_10003A128;
  v75[3] = &unk_1007D8C98;
  v62 = v58;
  v76 = v62;
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](v14, "enumerateKeysAndObjectsUsingBlock:", v75);
  context = objc_autoreleasePoolPush();
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[REMCKCloudState defaultRelationshipKeyPathsForPrefetching](REMCKCloudState, "defaultRelationshipKeyPathsForPrefetching"));
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[REMCKCloudState ic_objectsFromObjectIDs:propertiesToFetch:relationshipKeyPathsForPrefetching:context:](REMCKCloudState, "ic_objectsFromObjectIDs:propertiesToFetch:relationshipKeyPathsForPrefetching:context:", v66, 0, v27, *(_QWORD *)(v60 + 48)));

  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v64 = v28;
  v29 = objc_msgSend(v64, "countByEnumeratingWithState:objects:count:", &v71, v86, 16);
  if (!v29)
    goto LABEL_53;
  v31 = v29;
  v32 = *(_QWORD *)v72;
  do
  {
    for (j = 0; j != v31; j = (char *)j + 1)
    {
      if (*(_QWORD *)v72 != v32)
        objc_enumerationMutation(v64);
      v34 = *(_QWORD *)(*((_QWORD *)&v71 + 1) + 8 * (_QWORD)j);
      v35 = objc_opt_class(REMCKCloudState, v30);
      v36 = REMCheckedDynamicCast(v35, v34);
      v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
      v39 = objc_opt_class(REMCDObject, v38);
      v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "cloudObject"));
      v41 = REMCheckedDynamicCast(v39, v40);
      v42 = (void *)objc_claimAutoreleasedReturnValue(v41);

      v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "accountCKIdentifier"));
      if (!objc_msgSend(v43, "length"))
      {
        v44 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
        if (os_log_type_enabled(v44, OS_LOG_TYPE_FAULT))
        {
          v59 = objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "ic_loggingDescription"));
          v46 = objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "ic_loggingDescription"));
          *(_DWORD *)buf = 138543874;
          v88 = v43;
          v89 = 2114;
          v90 = v59;
          v91 = 2112;
          v92 = v46;
          v47 = (void *)v46;
          _os_log_fault_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_FAULT, "fetched REMCKCloudState with cloudObject.accountID is nil or empty: %{public}@, cloudState: %{public}@, cloudObject: %@", buf, 0x20u);

        }
        goto LABEL_50;
      }
      if (v42
        && ((objc_msgSend(v42, "isInICloudAccount") & 1) != 0
         || objc_msgSend(v42, "needsToBeDeletedFromCloud")))
      {
        v44 = objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v62, "objectForKeyedSubscript:", v43));
        if (!v44)
        {
          v44 = objc_claimAutoreleasedReturnValue(+[NSMutableOrderedSet orderedSet](NSMutableOrderedSet, "orderedSet"));
          -[NSMutableDictionary setObject:forKeyedSubscript:](v62, "setObject:forKeyedSubscript:", v44, v43);
        }
        v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "objectID"));
        -[NSObject addObject:](v44, "addObject:", v45);

LABEL_50:
      }

    }
    v31 = objc_msgSend(v64, "countByEnumeratingWithState:objects:count:", &v71, v86, 16);
  }
  while (v31);
LABEL_53:

  objc_autoreleasePoolPop(context);
  v48 = objc_opt_new(NSMutableDictionary);
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  v49 = v62;
  v50 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:](v49, "countByEnumeratingWithState:objects:count:", &v67, v85, 16);
  if (v50)
  {
    v51 = v50;
    v52 = *(_QWORD *)v68;
    do
    {
      for (k = 0; k != v51; k = (char *)k + 1)
      {
        if (*(_QWORD *)v68 != v52)
          objc_enumerationMutation(v49);
        v54 = *(_QWORD *)(*((_QWORD *)&v67 + 1) + 8 * (_QWORD)k);
        v55 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v49, "objectForKeyedSubscript:", v54));
        v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "array"));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v48, "setObject:forKeyedSubscript:", v56, v54);

      }
      v51 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:](v49, "countByEnumeratingWithState:objects:count:", &v67, v85, 16);
    }
    while (v51);
  }

  (*(void (**)(void))(*(_QWORD *)(v60 + 56) + 16))();
}

void sub_10003A128(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;

  v5 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableOrderedSet orderedSetWithArray:](NSMutableOrderedSet, "orderedSetWithArray:", a3));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v6, v5);

}

uint64_t sub_10003A504(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10003A514(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD v24[4];
  id v25;
  uint64_t v26;
  id v27;
  _QWORD v28[4];
  id v29;
  uint64_t v30;
  id v31;
  id v32;
  uint8_t v33[128];
  uint8_t buf[4];
  uint64_t v35;

  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_10003A7DC;
  v28[3] = &unk_1007D8CC0;
  v2 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(void **)(a1 + 56);
  v29 = v3;
  v30 = v4;
  v31 = v5;
  v32 = *(id *)(a1 + 64);
  objc_msgSend(v2, "enumerateKeysAndObjectsUsingBlock:", v28);
  objc_msgSend(*(id *)(a1 + 40), "reset");
  if (objc_msgSend(*(id *)(a1 + 56), "count"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[ICCloudConfiguration sharedConfiguration](ICCloudConfiguration, "sharedConfiguration"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "throttlingPolicy"));
    objc_msgSend(v7, "incrementBatchCount");

    v8 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 138543362;
      v35 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "_processCloudObjects adding fetch&/modify cloud objects operation to operation queue: %{public}@", buf, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 64), "addOperations:waitUntilFinished:", *(_QWORD *)(a1 + 56), 0);
    objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 48), v10), "errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessaryForOperationQueue:", *(_QWORD *)(a1 + 64));
  }
  if (*(_QWORD *)(a1 + 72))
  {
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_10003AED8;
    v24[3] = &unk_1007D8410;
    v11 = *(id *)(a1 + 56);
    v12 = *(_QWORD *)(a1 + 48);
    v25 = v11;
    v26 = v12;
    v27 = *(id *)(a1 + 72);
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[ICNSBlockOperation blockOperationWithBlock:](ICNSBlockOperation, "blockOperationWithBlock:", v24));
    objc_msgSend(v13, "setName:", ICNSBlockOperationNameProcessCompletionForOperations);
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v14 = *(id *)(a1 + 56);
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v20, v33, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v21;
      do
      {
        v18 = 0;
        do
        {
          if (*(_QWORD *)v21 != v17)
            objc_enumerationMutation(v14);
          objc_msgSend(v13, "addDependency:", *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v18), (_QWORD)v20);
          v18 = (char *)v18 + 1;
        }
        while (v16 != v18);
        v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v20, v33, 16);
      }
      while (v16);
    }

    objc_msgSend(*(id *)(a1 + 64), "addOperation:", v13);
    objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 48), v19), "errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessaryForOperationQueue:", *(_QWORD *)(a1 + 64));

  }
}

void sub_10003A7DC(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSString *(__cdecl **v7)(SEL);
  NSObject *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  unsigned __int8 v27;
  void *v28;
  NSObject *v29;
  unsigned int v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, const char *);
  uint64_t v35;
  uint64_t v36;
  int v37;
  NSObject *v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  objc_class *v42;
  NSString *v43;
  void *v44;
  objc_class *v45;
  NSString *v46;
  id v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  int *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  id v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[4];
  int v68;
  uint8_t v69[128];
  uint8_t buf[4];
  id v71;
  __int16 v72;
  id v73;

  v5 = a2;
  v6 = a3;
  v7 = &NSStringFromSelector_ptr;
  v8 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218242;
    v71 = objc_msgSend(v6, "count");
    v72 = 2114;
    v73 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Processing %lu cloud objects for accountID %{public}@", buf, 0x16u);
  }
  v54 = v5;

  v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v9 = v6;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v63, v69, 16);
  v57 = v9;
  if (v10)
  {
    v11 = v10;
    v61 = *(_QWORD *)v64;
    v53 = &v68;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v64 != v61)
          objc_enumerationMutation(v9);
        v13 = *(void **)(*((_QWORD *)&v63 + 1) + 8 * (_QWORD)v12);
        v14 = objc_autoreleasePoolPush();
        v15 = a1[4];
        v62 = 0;
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "existingObjectWithID:error:", v13, &v62));
        v18 = v62;
        if (!v16)
        {
          v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7[281], "cloudkit"));
          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138543618;
            v71 = v18;
            v72 = 2114;
            v73 = v13;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Cannot fault-in object while processing cloudObjectIDs {error: %{public}@, cloudObjectID: %{public}@}", buf, 0x16u);
          }
          goto LABEL_45;
        }
        v19 = objc_opt_class(REMCDObject, v17);
        if ((objc_opt_isKindOfClass(v16, v19) & 1) != 0)
        {
          v20 = v16;
          if ((objc_msgSend(a1[5], "_isRecognizedCloudObjectClass:", v20) & 1) != 0)
          {
            if ((-[NSObject isInICloudAccount](v20, "isInICloudAccount") & 1) != 0)
            {
              if (-[NSObject ckNeedsToBeFetchedFromCloud](v20, "ckNeedsToBeFetchedFromCloud"))
              {
                v22 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject recordID](v20, "recordID"));
                if (v22)
                  objc_msgSend(v55, "addObject:", v22);

              }
              if (-[NSObject canBeRootShareObject](v20, "canBeRootShareObject", v53))
              {
                v23 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject ckServerRecord](v20, "ckServerRecord"));
                v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "share"));
                v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "recordID"));

                if (v25)
                {
                  v26 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject ckServerShare](v20, "ckServerShare"));

                  if (!v26)
                    objc_msgSend(v55, "addObject:", v25);
                }

                v9 = v57;
                v7 = &NSStringFromSelector_ptr;
              }
              if (!-[NSObject needsToBePushedToCloud](v20, "needsToBePushedToCloud")
                || (-[NSObject shouldBeIgnoredForSync](v20, "shouldBeIgnoredForSync") & 1) != 0)
              {
LABEL_27:
                v30 = -[NSObject needsToBeDeletedFromCloud](v20, "needsToBeDeletedFromCloud");
                v28 = v59;
                if (v30)
                  goto LABEL_28;
              }
              else
              {
                v27 = -[NSObject hasAllMandatoryFields](v20, "hasAllMandatoryFields");
                v28 = v58;
                if ((v27 & 1) == 0)
                {
                  v29 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7[281], "cloudkit"));
                  if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
                    sub_10067B96C((uint64_t)v67, (uint64_t)v20);

                  goto LABEL_27;
                }
LABEL_28:
                objc_msgSend(v28, "addObject:", v20);
              }
              if (-[NSObject needsToDeleteShare](v20, "needsToDeleteShare"))
              {
                objc_msgSend(v56, "addObject:", v20);
                objc_msgSend(v58, "removeObject:", v20);
              }
            }
            objc_msgSend(a1[4], "refreshObject:mergeChanges:", v20, 0, v53);
          }
          else
          {
            v32 = objc_opt_class(v20, v21);
            if ((objc_opt_respondsToSelector(v32, "shouldSyncToCloud") & 1) != 0
              && (v34 = (uint64_t (*)(uint64_t, const char *))objc_msgSend((id)objc_opt_class(v20, v33), "methodForSelector:", "shouldSyncToCloud"), v36 = objc_opt_class(v20, v35), v37 = v34(v36, "shouldSyncToCloud"), v7 = &NSStringFromSelector_ptr, !v37))
            {
              v40 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
              if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
              {
                v42 = (objc_class *)objc_opt_class(v20, v41);
                v43 = NSStringFromClass(v42);
                v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
                *(_DWORD *)buf = 138543362;
                v71 = v44;
                _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "This REMCDObject subclass has shouldSyncToCloud=NO. Not saving this object to the cloud {class: %{public}@}", buf, 0xCu);

                v7 = &NSStringFromSelector_ptr;
              }

            }
            else
            {
              v38 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7[281], "cloudkit", v53));
              if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
              {
                v45 = (objc_class *)objc_opt_class(v20, v39);
                v46 = NSStringFromClass(v45);
                v60 = (void *)objc_claimAutoreleasedReturnValue(v46);
                *(_DWORD *)buf = 138543618;
                v71 = v60;
                v72 = 2114;
                v73 = v13;
                _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "BOGUS: Unrecognized subclass of REMCDObject but shouldSyncToCloud=YES. Not saving this object to the cloud {class: %{public}@, objectID: %{public}@}", buf, 0x16u);

              }
              v7 = &NSStringFromSelector_ptr;
            }
          }
LABEL_45:

          goto LABEL_46;
        }
        v31 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7[281], "cloudkit"));
        if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138543362;
          v71 = v13;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Found non-REMCDObject to process. Skipping {objectID: %{public}@}", buf, 0xCu);
        }

        objc_msgSend(a1[4], "refreshObject:mergeChanges:", v16, 0);
LABEL_46:

        objc_autoreleasePoolPop(v14);
        v12 = (char *)v12 + 1;
      }
      while (v11 != v12);
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v63, v69, 16);
    }
    while (v11);
  }

  v47 = a1[5];
  v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "allObjects"));
  v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "operationsToFetchRecordIDs:operationGroupName:accountID:", v48, 0, v54));

  objc_msgSend(a1[6], "addObjectsFromArray:", v49);
  v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "operationsToModifyRecordsForCloudObjectsToSave:delete:deleteShares:operationGroupName:addDependencies:accountID:", v58, v59, v56, CFSTR("SaveChangedObjects"), 1, v54));
  objc_msgSend(a1[6], "addObjectsFromArray:", v50);
  if (objc_msgSend(v56, "count"))
  {
    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "fetchAndCompletionOperationWithDeleteShareObjects:accountID:dependencyOperations:completionHandler:", v56, v54, a1[6], 0));
    objc_msgSend(a1[7], "addOperation:", v51);
    objc_msgSend((id)objc_opt_class(a1[5], v52), "errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessaryForOperationQueue:", a1[7]);

  }
}

void sub_10003AED8(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v3 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "error", (_QWORD)v14));

        if (v9)
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "error"));
          objc_msgSend(v2, "addObject:", v10);

          v11 = *(void **)(a1 + 40);
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "error"));
          objc_msgSend(v11, "startRetryTimerIfNecessaryWithError:", v12);

        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v5);
  }

  if (objc_msgSend(v2, "count"))
    v13 = v2;
  else
    v13 = 0;
  (*(void (**)(_QWORD, void *))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), v13);

}

void sub_10003B4C4(id *a1, int a2, void *a3)
{
  NSObject *v5;
  NSObject *v6;
  _BOOL4 v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  void (**v16)(id, _QWORD);
  id v17;
  _QWORD v18[4];
  id v19;
  id v20;
  _QWORD *v21;
  __int128 *p_buf;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD v27[4];
  uint8_t v28[128];
  __int128 buf;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  void (*v32)(uint64_t);
  id v33;

  v17 = a3;
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "processingQueue"));
  dispatch_assert_queue_V2(v5);

  v6 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (a2)
  {
    if (v7)
    {
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = objc_msgSend(v17, "count");
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "SYNC[APS] CONTINUE - coalesced databaseNotificationSet.count: %lu", (uint8_t *)&buf, 0xCu);
    }

    v27[0] = 0;
    v27[1] = v27;
    v27[2] = 0x2020000000;
    v27[3] = 0;
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v30 = 0x3032000000;
    v31 = sub_1000228A0;
    v32 = sub_1000228B0;
    v33 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v17, "count")));
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v8 = v17;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v24;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v24 != v10)
            objc_enumerationMutation(v8);
          v12 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)v11);
          v13 = a1[4];
          v18[0] = _NSConcreteStackBlock;
          v18[1] = 3221225472;
          v18[2] = sub_10003B7F4;
          v18[3] = &unk_1007D8D10;
          v21 = v27;
          p_buf = &buf;
          v14 = v8;
          v19 = v14;
          v20 = a1[6];
          objc_msgSend(v13, "handleDatabaseNotification:completionHandler:", v12, v18);

          v11 = (char *)v11 + 1;
        }
        while (v9 != v11);
        v9 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
      }
      while (v9);
    }

    _Block_object_dispose(&buf, 8);
    _Block_object_dispose(v27, 8);
  }
  else
  {
    if (v7)
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "debugDescription"));
      LODWORD(buf) = 138543362;
      *(_QWORD *)((char *)&buf + 4) = v15;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "SYNC[APS] SKIP - Notification debounced and coalesced {notificationID: %{public}@}", (uint8_t *)&buf, 0xCu);

    }
    v16 = (void (**)(id, _QWORD))a1[6];
    if (v16)
      v16[2](v16, 0);
  }

}

void sub_10003B7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose((const void *)(v27 - 176), 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_10003B7F4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;

  v3 = a2;
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  v6 = v3;
  if (v3)
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "addObject:", v3);
  v4 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  if (v4 == objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "count"))
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[REMError errorFromErrors:](REMError, "errorFromErrors:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40)));
    else
      v5 = 0;
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  }
}

void sub_10003BA3C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  _QWORD v11[5];
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;

  v5 = a2;
  v6 = a3;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10003BB24;
  v11[3] = &unk_1007D8D88;
  v7 = *(void **)(a1 + 40);
  v11[4] = *(_QWORD *)(a1 + 32);
  v8 = v7;
  v17 = *(_QWORD *)(a1 + 64);
  v12 = v8;
  v13 = v6;
  v14 = *(id *)(a1 + 48);
  v15 = v5;
  v16 = *(id *)(a1 + 56);
  v9 = v5;
  v10 = v6;
  objc_msgSend(v10, "fetchUserRecordIDWithCompletionHandler:", v11);

}

void sub_10003BB24(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "processingQueue"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10003BC2C;
  v10[3] = &unk_1007D8AB0;
  v11 = v3;
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 80);
  v12 = v5;
  v18 = v6;
  v7 = *(id *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 32);
  v13 = v7;
  v14 = v8;
  v15 = *(id *)(a1 + 56);
  v16 = *(id *)(a1 + 64);
  v17 = *(id *)(a1 + 72);
  v9 = v3;
  dispatch_async(v4, v10);

}

void sub_10003BC2C(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD v11[5];
  id v12;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  void *v16;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordName"));
  if (objc_msgSend(*(id *)(a1 + 40), "isEqualToString:", v2))
  {
    v3 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = CKDatabaseScopeString(*(_QWORD *)(a1 + 88));
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      *(_DWORD *)buf = 138543618;
      v14 = v5;
      v15 = 2114;
      v16 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "SYNC[APS] CONTINUE - Found a container with subscription owner user recordID for the CKDatabaseNotification {scope: %{public}@, userRecordName: %{public}@}", buf, 0x16u);

    }
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "databaseWithDatabaseScope:", *(_QWORD *)(a1 + 88)));
    if (!v6)
    {
      v10 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
        sub_10067BB64();

    }
    v7 = *(void **)(a1 + 56);
    v8 = *(_QWORD *)(a1 + 64);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10003BDD4;
    v11[3] = &unk_1007D8D60;
    v11[4] = v7;
    v9 = *(_QWORD *)(a1 + 72);
    v12 = *(id *)(a1 + 80);
    objc_msgSend(v7, "_handleDatabaseNotification:database:accountID:completionHandler:", v8, v6, v9, v11);

  }
}

void sub_10003BDD4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "processingQueue"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10003BE7C;
  v7[3] = &unk_1007D7D30;
  v5 = *(id *)(a1 + 40);
  v8 = v3;
  v9 = v5;
  v6 = v3;
  dispatch_async(v4, v7);

}

uint64_t sub_10003BE7C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32));
  return result;
}

void sub_10003C144(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  __int128 v11;
  id v12;
  id v13;
  id v14;
  char v15;
  uint8_t buf[16];

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_10067BBBC(v3, v5);

    objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "...SYNC[APS] Fetched database changes for aps notification sync", buf, 2u);
    }

  }
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10003C2A8;
  v9[3] = &unk_1007D8E00;
  v8 = *(void **)(a1 + 40);
  v10 = *(id *)(a1 + 32);
  v11 = *(_OWORD *)(a1 + 40);
  v12 = *(id *)(a1 + 64);
  v14 = *(id *)(a1 + 72);
  v15 = *(_BYTE *)(a1 + 80);
  v13 = *(id *)(a1 + 56);
  objc_msgSend(v8, "fetchRecordZoneChangesWithReason:cloudSchemaCatchUpSyncContextMap:completionHandler:", v6, v7, v9);

}

void sub_10003C2A8(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  char v16;
  uint8_t buf[16];

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_10067BC3C(v3, v5);

    objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "...SYNC[APS] Fetched record zone changes for aps notification zone", buf, 2u);
    }

  }
  v7 = *(void **)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10003C400;
  v10[3] = &unk_1007D8DD8;
  v11 = *(id *)(a1 + 32);
  v12 = *(id *)(a1 + 56);
  v8 = *(id *)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 40);
  v15 = v8;
  v13 = v9;
  v16 = *(_BYTE *)(a1 + 80);
  v14 = *(id *)(a1 + 64);
  objc_msgSend(v7, "processAllDirtyCloudObjectsWithSyncReason:completionHandler:", v6, v10);

}

void sub_10003C400(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  uint8_t buf[4];
  uint64_t v12;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_10067BCBC(v3, v5);

    objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", v3);
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543362;
      v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "...SYNC[APS] Handled CloudKit database notification {databaseNotification: %{public}@}", buf, 0xCu);
    }

  }
  if (*(_QWORD *)(a1 + 64))
  {
    v8 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 48), v6), "errorFromErrors:", *(_QWORD *)(a1 + 32));
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    if (*(_BYTE *)(a1 + 72))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), *(_QWORD *)(a1 + 40)));
      objc_msgSend(*(id *)(a1 + 48), "didCompleteCloudSchemaCatchUpSyncWithContextMap:error:syncTypeLabel:debugLogLabel:", *(_QWORD *)(a1 + 56), v9, CFSTR("APS"), v10);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

  }
}

void sub_10003C668(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  int v6;
  id v7;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 138543362;
    v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Filtering out account ID %{public}@ from needing fetch changes since there is no corresponding container.", (uint8_t *)&v6, 0xCu);
  }

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accountZoneIDsNeedingFetchChanges"));
  objc_msgSend(v5, "setObject:forKeyedSubscript:", 0, v3);

}

void sub_10003C818(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "validateAccountZoneIDsNeedingFetchChanges");
  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "accountZoneIDsNeedingFetchChanges"));
  objc_msgSend(v2, "fetchRecordZoneChangesForAccountZoneIDs:reason:cloudSchemaCatchUpSyncContextMap:completionHandler:", v3, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

}

void sub_10003CA88(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  NSObject *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  unsigned int v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  int8x16_t v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _QWORD v36[4];
  int8x16_t v37;
  uint64_t v38;
  id v39;
  id v40;
  _QWORD v41[4];
  id v42;
  uint8_t buf[4];
  id v44;
  __int16 v45;
  void *v46;
  _BYTE v47[128];

  v2 = objc_msgSend(objc_alloc((Class)NSMutableString), "initWithString:", CFSTR("Asking to fetch changes for:"));
  v3 = *(void **)(a1 + 32);
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472;
  v41[2] = sub_10003CEEC;
  v41[3] = &unk_1007D8E50;
  v4 = v2;
  v42 = v4;
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v41);
  v5 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v44 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
  }
  v28 = v4;

  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3221225472;
  v36[2] = sub_10003D060;
  v36[3] = &unk_1007D8E78;
  v30 = *(int8x16_t *)(a1 + 32);
  v6 = (id)v30.i64[0];
  v37 = vextq_s8(v30, v30, 8uLL);
  v7 = *(void **)(a1 + 56);
  v38 = *(_QWORD *)(a1 + 48);
  v39 = v7;
  v40 = *(id *)(a1 + 64);
  v31 = (void *)objc_claimAutoreleasedReturnValue(+[ICNSBlockOperation blockOperationWithBlock:](ICNSBlockOperation, "blockOperationWithBlock:", v36));
  objc_msgSend(v31, "setName:", ICNSBlockOperationNameCreateFetchZoneChanges);
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "operationQueue"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "operations"));

  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v32, v47, 16);
  if (v10)
  {
    v12 = v10;
    v13 = *(_QWORD *)v33;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v33 != v13)
          objc_enumerationMutation(v9);
        v15 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)v14);
        v16 = objc_opt_class(CKFetchRecordZoneChangesOperation, v11);
        if ((objc_opt_isKindOfClass(v15, v16) & 1) != 0)
        {
          v17 = v15;
          v18 = *(void **)(a1 + 40);
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "database"));
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "accountIDForDatabase:", v19));

          if (objc_msgSend(v20, "length"))
          {
            if (!v20)
              goto LABEL_16;
LABEL_15:
            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v20));
            v23 = objc_msgSend(v17, "ic_intersectsRecordZoneIDSet:", v22);

            if (v23)
              goto LABEL_16;
          }
          else
          {
            v21 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
            if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
            {
              v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "database"));
              v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "ic_loggingDescription"));
              *(_DWORD *)buf = 138543618;
              v44 = v26;
              v45 = 2114;
              v46 = v20;
              _os_log_fault_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "accountID is nil or empty in fetchRecordZoneChangesForAccountZoneIDs %{public}@, accountID: %{public}@", buf, 0x16u);

            }
            if (v20)
              goto LABEL_15;
LABEL_16:
            v24 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
            if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
            {
              v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "ic_loggingDescription"));
              *(_DWORD *)buf = 138543362;
              v44 = v25;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Waiting for previous fetch zone changes operation to finish %{public}@", buf, 0xCu);

            }
            objc_msgSend(v31, "addDependency:", v17);
          }

        }
        v14 = (char *)v14 + 1;
      }
      while (v12 != v14);
      v12 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v32, v47, 16);
    }
    while (v12);
  }

  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "operationQueue"));
  objc_msgSend(v27, "addOperation:", v31);

  objc_msgSend(*(id *)(a1 + 40), "errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessary");
}

void sub_10003CEEC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v8 = v6;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v16;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v16 != v11)
          objc_enumerationMutation(v8);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)v12), "ic_loggingDescription"));
        objc_msgSend(v7, "addObject:", v13);

        v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v10);
  }

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "componentsJoinedByString:", CFSTR(" ")));
  objc_msgSend(*(id *)(a1 + 32), "appendFormat:", CFSTR(" account ID: %@, zone IDs: %@."), v5, v14, (_QWORD)v15);

}

id sub_10003D060(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "addOperationsToFetchRecordZoneChangesForAccountZoneIDs:reason:cloudSchemaCatchUpSyncContextMap:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

void sub_10003D16C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  NSString *(__cdecl **v8)(SEL);
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned __int8 v13;
  NSObject *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void *i;
  void *v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  void *j;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  void *v45;
  id v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _QWORD v51[5];
  id v52;
  id v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _QWORD v62[4];
  id v63;
  __int128 v64;
  id v65;
  uint8_t v66[128];
  uint8_t buf[4];
  _BYTE v68[10];
  __int16 v69;
  unsigned int v70;
  __int16 v71;
  void *v72;
  _BYTE v73[128];
  _BYTE v74[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v3 = *(void **)(a1 + 32);
  v62[0] = _NSConcreteStackBlock;
  v62[1] = 3221225472;
  v62[2] = sub_10003D740;
  v62[3] = &unk_1007D8EA0;
  v4 = v2;
  v63 = v4;
  v64 = *(_OWORD *)(a1 + 40);
  v65 = *(id *)(a1 + 56);
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v62);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "operationQueue"));
  objc_msgSend(v5, "setSuspended:", 1);

  v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v6 = v4;
  v44 = v6;
  v46 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v58, v74, 16);
  if (v46)
  {
    v7 = *(_QWORD *)v59;
    v8 = &NSStringFromSelector_ptr;
    v42 = *(_QWORD *)v59;
    v43 = a1;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v59 != v7)
          objc_enumerationMutation(v6);
        v10 = *(void **)(*((_QWORD *)&v58 + 1) + 8 * (_QWORD)v9);
        if ((objc_msgSend(v10, "isFinished", v42, v43) & 1) != 0
          || (objc_msgSend(v10, "isExecuting") & 1) != 0
          || (objc_msgSend(v10, "isCancelled") & 1) != 0
          || (v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "operationQueue")),
              v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "operations")),
              v13 = objc_msgSend(v12, "containsObject:", v10),
              v12,
              v11,
              (v13 & 1) != 0))
        {
          v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8[281], "cloudkit"));
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            v15 = objc_msgSend(v10, "isFinished");
            v16 = objc_msgSend(v10, "isExecuting");
            v17 = objc_msgSend(v10, "isCancelled");
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "ic_loggingDescription"));
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)v68 = v15;
            *(_WORD *)&v68[4] = 1024;
            *(_DWORD *)&v68[6] = v16;
            v8 = &NSStringFromSelector_ptr;
            v69 = 1024;
            v70 = v17;
            v71 = 2114;
            v72 = v18;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Not adding operation to queue. isFinished=%d isExecuting=%d isCancelled=%d %{public}@", buf, 0x1Eu);

          }
        }
        else
        {
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "operationQueue"));
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "operations"));

          v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v54, v73, 16);
          if (v21)
          {
            v23 = v21;
            v24 = *(_QWORD *)v55;
            do
            {
              for (i = 0; i != v23; i = (char *)i + 1)
              {
                if (*(_QWORD *)v55 != v24)
                  objc_enumerationMutation(v20);
                v26 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * (_QWORD)i);
                v27 = objc_opt_class(CKFetchRecordZoneChangesOperation, v22);
                if ((objc_opt_isKindOfClass(v26, v27) & 1) != 0)
                {
                  v28 = v26;
                  if (objc_msgSend(v10, "ic_shouldDependOnCKFetchRecordZoneChangesOperation:", v28))
                  {
                    v29 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8[281], "cloudkit"));
                    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
                    {
                      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "ic_loggingDescription"));
                      *(_DWORD *)buf = 138543362;
                      *(_QWORD *)v68 = v30;
                      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "fetch record zone changes operation waiting for previous fetch zone changes operation to finish %{public}@", buf, 0xCu);

                      v8 = &NSStringFromSelector_ptr;
                    }

                    objc_msgSend(v10, "addDependency:", v28);
                  }

                }
              }
              v23 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v54, v73, 16);
            }
            while (v23);
          }

          objc_msgSend(v45, "addObject:", v10);
          a1 = v43;
          v6 = v44;
          v7 = v42;
        }
        v9 = (char *)v9 + 1;
      }
      while (v9 != v46);
      v31 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v58, v74, 16);
      v46 = v31;
    }
    while (v31);
  }

  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "operationQueue"));
  objc_msgSend(v32, "addOperations:waitUntilFinished:", v45, 0);

  objc_msgSend(*(id *)(a1 + 40), "errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessary");
  v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "operationQueue"));
  objc_msgSend(v33, "setSuspended:", 0);

  if (*(_QWORD *)(a1 + 64))
  {
    v51[0] = _NSConcreteStackBlock;
    v51[1] = 3221225472;
    v51[2] = sub_10003D7C8;
    v51[3] = &unk_1007D8410;
    v51[4] = *(_QWORD *)(a1 + 40);
    v34 = v6;
    v52 = v34;
    v53 = *(id *)(a1 + 64);
    v35 = (void *)objc_claimAutoreleasedReturnValue(+[ICNSBlockOperation blockOperationWithBlock:](ICNSBlockOperation, "blockOperationWithBlock:", v51));
    objc_msgSend(v35, "setName:", ICNSBlockOperationNameFetchZoneChangesCompletion);
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v36 = v34;
    v37 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v47, v66, 16);
    if (v37)
    {
      v38 = v37;
      v39 = *(_QWORD *)v48;
      do
      {
        for (j = 0; j != v38; j = (char *)j + 1)
        {
          if (*(_QWORD *)v48 != v39)
            objc_enumerationMutation(v36);
          objc_msgSend(v35, "addDependency:", *(_QWORD *)(*((_QWORD *)&v47 + 1) + 8 * (_QWORD)j));
        }
        v38 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v47, v66, 16);
      }
      while (v38);
    }

    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "operationQueue"));
    objc_msgSend(v41, "addOperation:", v35);

    objc_msgSend(*(id *)(a1 + 40), "errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessary");
    v6 = v44;
  }

}

void sub_10003D740(_QWORD *a1, void *a2, void *a3)
{
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;

  v5 = (void *)a1[4];
  v6 = (void *)a1[5];
  v7 = a2;
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "allObjects"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "operationsToFetchRecordZoneChangesForZoneIDs:accountID:reason:cloudSchemaCatchUpSyncContextMap:", v9, v7, a1[6], a1[7]));

  objc_msgSend(v5, "addObjectsFromArray:", v8);
}

void sub_10003D7C8(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  _QWORD block[5];
  id v5;
  id v6;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "processingQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10003D864;
  block[3] = &unk_1007D8410;
  v3 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v5 = v3;
  v6 = *(id *)(a1 + 48);
  dispatch_async(v2, block);

}

void sub_10003D864(_QWORD *a1, uint64_t a2)
{
  id v3;
  id v4;

  v3 = objc_msgSend((id)objc_opt_class(a1[4], a2), "errorFromOperations:", a1[5]);
  v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(void))(a1[6] + 16))();

}

void sub_10003DCAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_10003DCDC(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudKitAccountsInContext:", *(_QWORD *)(a1 + 40), 0));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v6), "ckUserRecordName"));
        if (v7)
          objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "addObject:", v7);

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

}

void sub_10003DDFC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  NSObject *v18;
  NSObject *v19;
  const char *v20;
  id v21;
  void *v22;
  unsigned int v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  uint8_t buf[16];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];

  v5 = a3;
  v6 = objc_msgSend(a2, "integerValue");
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "databaseWithDatabaseScope:", v6));
  v7 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v5, "count"));
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v8 = v5;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v32;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v32 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "accountZoneIDsNeedingFetchChanges"));
        objc_msgSend(v14, "ic_removeZoneID:forAccountID:", v13, *(_QWORD *)(a1 + 48));

        if (v6 == (id)2)
        {
          v21 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 40), v15), "migrationZoneID");
          v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
          v23 = objc_msgSend(v22, "isEqual:", v13);

          if (v23)
          {
            v18 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
            if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              v19 = v18;
              v20 = "Filtered the current users RemindersMigration zone from being fetched from the private db.";
LABEL_14:
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, v20, buf, 2u);
            }
LABEL_15:

            continue;
          }
        }
        else if (v6 == (id)3)
        {
          v16 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "ownerName"));
          LODWORD(v16) = objc_msgSend(v16, "containsObject:", v17);

          if ((_DWORD)v16)
          {
            v18 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
            if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              v19 = v18;
              v20 = "Filtered the current users zone from being fetched from the shared db.";
              goto LABEL_14;
            }
            goto LABEL_15;
          }
        }
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "accountZoneIDsFetchingChanges"));
        objc_msgSend(v24, "ic_addZoneID:forAccountID:", v13, *(_QWORD *)(a1 + 48));

        objc_msgSend(v7, "addObject:", v13);
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
    }
    while (v10);
  }

  v25 = *(void **)(a1 + 40);
  v26 = objc_msgSend(v7, "copy");
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "operationToFetchRecordZoneChangesForZoneIDs:database:reason:ignoreServerChangeTokens:", v26, v29, *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 88)));

  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "group"));
  if (!v28)
  {
    objc_msgSend(v27, "setGroup:", *(_QWORD *)(a1 + 64));
    objc_msgSend(*(id *)(a1 + 64), "setQuantity:", (char *)objc_msgSend(*(id *)(a1 + 64), "quantity") + 1);
  }
  objc_msgSend(*(id *)(a1 + 72), "addObject:", v27);

}

void sub_10003EFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  id *v58;
  id *v59;
  id *v60;
  id *v61;
  uint64_t v62;

  objc_destroyWeak(v59);
  objc_destroyWeak(v58);
  objc_destroyWeak(v61);
  objc_destroyWeak(v60);
  objc_destroyWeak(location);
  _Block_object_dispose(&a58, 8);
  _Block_object_dispose((const void *)(v62 - 160), 8);
  objc_destroyWeak((id *)(v62 - 200));
  _Unwind_Resume(a1);
}

void sub_10003F060(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  __int128 v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "batchFetchHelper"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10003F120;
  v9[3] = &unk_1007D8EF0;
  v13 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 32);
  v10 = v3;
  v11 = v5;
  v8 = *(_OWORD *)(a1 + 40);
  v6 = (id)v8;
  v12 = v8;
  v7 = v3;
  objc_msgSend(v4, "addDispatchBlock:", v9);

}

void sub_10003F120(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  int8x16_t v5;
  _QWORD v6[4];
  int8x16_t v7;
  id v8;
  uint64_t v9;

  if (!(++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) % *(_QWORD *)(a1 + 64)))
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10003F1E8;
    v6[3] = &unk_1007D7B20;
    v5 = *(int8x16_t *)(a1 + 32);
    v2 = (id)v5.i64[0];
    v7 = vextq_s8(v5, v5, 8uLL);
    v3 = *(id *)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    v8 = v3;
    v9 = v4;
    objc_msgSend(v2, "performBlockAndWait:", v6);

  }
}

void sub_10003F1E8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_performSortingChildrenObjectsAfterFetchingInBlockOfManagedObjectContext:fetchHasFullyCompleted:accountID:", *(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 48));
  objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v2), "saveAndFaultIfFailWithContext:shouldTakeServerAsTruth:logDescription:", *(_QWORD *)(a1 + 40), 1, CFSTR("record changed"));
  objc_msgSend(*(id *)(a1 + 40), "reset");
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastSyncMetrics"));
  objc_msgSend(v3, "setSaveCount:", (char *)objc_msgSend(v3, "saveCount") + 1);

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastSyncMetrics"));
  objc_msgSend(v5, "setProcessedRecordCount:", v4);

}

void sub_10003F28C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  id WeakRetained;
  id v12;

  v12 = a2;
  v7 = a3;
  v8 = a4;
  if (*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) == -1.0)
    *(CFAbsoluteTime *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = CFAbsoluteTimeGetCurrent();
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastSyncMetrics"));
  objc_msgSend(v9, "setFetchedRecordCount:", (char *)objc_msgSend(v9, "fetchedRecordCount") + 1);

  v10 = *(void **)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  objc_msgSend(v10, "fetchRecordZoneChangesOperation:recordWasChangedWithRecordID:record:error:context:", WeakRetained, v12, v7, v8, *(_QWORD *)(a1 + 40));

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_10003F374(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id WeakRetained;
  id v9;

  v9 = a2;
  v5 = a3;
  if (*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) == -1.0)
    *(CFAbsoluteTime *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = CFAbsoluteTimeGetCurrent();
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastSyncMetrics"));
  objc_msgSend(v6, "setDeletedRecordsCount:", (char *)objc_msgSend(v6, "deletedRecordsCount") + 1);

  v7 = *(void **)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  objc_msgSend(v7, "fetchRecordZoneChangesOperation:recordWasDeletedWithRecordID:recordType:context:", WeakRetained, v9, v5, *(_QWORD *)(a1 + 40));

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_10003F440(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id WeakRetained;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  id v16;

  v5 = a2;
  v6 = a3;
  if (*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) == -1.0)
    *(CFAbsoluteTime *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = CFAbsoluteTimeGetCurrent();
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "batchFetchHelper"));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10003F55C;
  v13[3] = &unk_1007D7CE0;
  v8 = *(id *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(void **)(a1 + 48);
  v14 = v8;
  v15 = v9;
  v16 = v10;
  objc_msgSend(v7, "addDispatchBlock:", v13);
  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  objc_msgSend(v11, "fetchRecordZoneChangesOperation:zoneID:accountID:changeTokenUpdated:batchFetchHelper:", WeakRetained, v5, *(_QWORD *)(a1 + 48), v6, v7);

}

void sub_10003F55C(uint64_t a1)
{
  id v2;
  int8x16_t v3;
  _QWORD v4[4];
  int8x16_t v5;
  id v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10003F5F4;
  v4[3] = &unk_1007D7CE0;
  v3 = *(int8x16_t *)(a1 + 32);
  v2 = (id)v3.i64[0];
  v5 = vextq_s8(v3, v3, 8uLL);
  v6 = *(id *)(a1 + 48);
  objc_msgSend(v2, "performBlockAndWait:", v4);

}

id sub_10003F5F4(uint64_t a1)
{
  uint64_t v2;

  objc_msgSend(*(id *)(a1 + 32), "_performSortingChildrenObjectsAfterFetchingInBlockOfManagedObjectContext:fetchHasFullyCompleted:accountID:", *(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 48));
  return objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v2), "saveAndFaultIfFailWithContext:shouldTakeServerAsTruth:logDescription:", *(_QWORD *)(a1 + 40), 1, CFSTR("zone change token updated"));
}

void sub_10003F638(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id WeakRetained;
  void **v17;
  uint64_t v18;
  void (*v19)(int8x16_t *);
  void *v20;
  id v21;
  uint64_t v22;

  v9 = a2;
  v10 = a3;
  v11 = a6;
  if (*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) == -1.0)
    *(CFAbsoluteTime *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = CFAbsoluteTimeGetCurrent();
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "batchFetchHelper"));
  objc_msgSend(v12, "flush");
  v17 = _NSConcreteStackBlock;
  v18 = 3221225472;
  v19 = sub_10003F758;
  v20 = &unk_1007D7C68;
  v13 = *(id *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  v21 = v13;
  v22 = v14;
  objc_msgSend(v12, "addDispatchBlock:", &v17);
  v15 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(v15, "fetchRecordZoneChangesOperation:completedFetchForZoneID:serverChangeToken:batchFetchHelper:error:", WeakRetained, v9, v10, v12, v11, v17, v18, v19, v20);

}

void sub_10003F758(int8x16_t *a1)
{
  int8x16_t v1;
  _QWORD v2[4];
  int8x16_t v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10003F7C8;
  v2[3] = &unk_1007D7C68;
  v1 = a1[2];
  v3 = vextq_s8(v1, v1, 8uLL);
  objc_msgSend((id)v1.i64[0], "performBlockAndWait:", v2);

}

id sub_10003F7C8(uint64_t a1, uint64_t a2)
{
  return objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), a2), "saveAndFaultIfFailWithContext:shouldTakeServerAsTruth:logDescription:", *(_QWORD *)(a1 + 40), 1, CFSTR("record zone fetch completion"));
}

void sub_10003F7FC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id WeakRetained;
  double Current;
  NSObject *v12;
  id v13;
  void *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  _QWORD block[4];
  id v19;
  uint64_t v20;
  id v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  double v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;

  v3 = a2;
  if (*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) == -1.0)
    *(CFAbsoluteTime *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = CFAbsoluteTimeGetCurrent();
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "batchFetchHelper"));
  objc_msgSend(v4, "flush");
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "processingQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10003FA08;
  block[3] = &unk_1007D7CE0;
  v6 = *(id *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(void **)(a1 + 48);
  v19 = v6;
  v20 = v7;
  v21 = v8;
  dispatch_async(v5, block);

  v9 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  objc_msgSend(v9, "fetchRecordZoneChangesOperationDidComplete:error:", WeakRetained, v3);

  Current = CFAbsoluteTimeGetCurrent();
  v12 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    v13 = objc_loadWeakRetained((id *)(a1 + 72));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "ic_loggingDescription"));
    v15 = *(_QWORD *)(a1 + 56);
    v16 = Current - *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
    v17 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138544386;
    v23 = v14;
    v24 = 2114;
    v25 = v4;
    v26 = 2048;
    v27 = v16;
    v28 = 2114;
    v29 = v17;
    v30 = 2114;
    v31 = v15;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Fetch changes operation %{public}@ with %{public}@ took %f s {accountID: %{public}@, syncReason: %{public}@}", buf, 0x34u);

  }
}

void sub_10003FA08(uint64_t a1)
{
  id v2;
  int8x16_t v3;
  _QWORD v4[4];
  int8x16_t v5;
  id v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10003FAA0;
  v4[3] = &unk_1007D7CE0;
  v3 = *(int8x16_t *)(a1 + 32);
  v2 = (id)v3.i64[0];
  v5 = vextq_s8(v3, v3, 8uLL);
  v6 = *(id *)(a1 + 48);
  objc_msgSend(v2, "performBlockAndWait:", v4);

}

id sub_10003FAA0(uint64_t a1)
{
  uint64_t v2;

  objc_msgSend(*(id *)(a1 + 32), "_performSortingChildrenObjectsAfterFetchingInBlockOfManagedObjectContext:fetchHasFullyCompleted:accountID:", *(_QWORD *)(a1 + 40), 1, *(_QWORD *)(a1 + 48));
  return objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v2), "saveAndFaultIfFailWithContext:shouldTakeServerAsTruth:logDescription:", *(_QWORD *)(a1 + 40), 1, CFSTR("fetch record zone changes completion"));
}

void sub_10003FBF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  objc_class *v5;
  NSString *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  id v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  int v25;
  char v26;
  NSObject *v27;
  NSObject *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  unsigned __int8 v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  _QWORD block[4];
  id v48;
  uint8_t buf[4];
  void *v50;
  __int16 v51;
  void *v52;
  __int16 v53;
  void *v54;
  __int16 v55;
  uint64_t v56;

  v3 = a1 + 40;
  v4 = *(void **)(a1 + 32);
  v5 = (objc_class *)objc_opt_class(*(_QWORD *)(a1 + 40), a2);
  v6 = NSStringFromClass(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  objc_msgSend(v4, "incrementOrClearRetryCountForOperationType:error:", v7, *(_QWORD *)(v3 + 8));

  v8 = *(void **)(v3 - 8);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)v3, "database"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "accountIDForDatabase:", v9));

  if (!objc_msgSend(v10, "length"))
  {
    v11 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      sub_10067BDE0();

  }
  v12 = *(void **)(a1 + 48);
  if (v12)
  {
    v13 = objc_msgSend(v12, "code");
    switch((unint64_t)v13)
    {
      case 0x14uLL:
        goto LABEL_13;
      case 0x15uLL:
        v14 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "ic_loggingDescription"));
          v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
          *(_DWORD *)buf = 138543874;
          v50 = v43;
          v51 = 2114;
          v52 = v44;
          v53 = 2114;
          v54 = v10;
          _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Server change token expired for zone %{public}@ %{public}@ in account ID %{public}@", buf, 0x20u);

        }
        v15 = *(_QWORD *)(a1 + 56);
        v16 = *(void **)(a1 + 32);
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "database"));
        objc_msgSend(v16, "deleteServerChangeTokenForRecordZoneID:databaseScope:accountID:", v15, objc_msgSend(v17, "databaseScope"), v10);

        goto LABEL_19;
      case 0x16uLL:
      case 0x17uLL:
      case 0x18uLL:
      case 0x19uLL:
      case 0x1BuLL:
        goto LABEL_16;
      case 0x1AuLL:
        objc_msgSend(*(id *)(a1 + 32), "receivedZoneNotFound:operation:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40));
        goto LABEL_25;
      case 0x1CuLL:
        v28 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "ic_loggingDescription"));
          v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
          *(_DWORD *)buf = 138543874;
          v50 = v45;
          v51 = 2114;
          v52 = v46;
          v53 = 2114;
          v54 = v10;
          _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "User deleted zone %{public}@ %{public}@ in account ID %{public}@", buf, 0x20u);

        }
        v29 = *(_QWORD *)(a1 + 56);
        v30 = *(void **)(a1 + 32);
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "database"));
        objc_msgSend(v30, "deleteServerChangeTokenForRecordZoneID:databaseScope:accountID:", v29, objc_msgSend(v31, "databaseScope"), v10);

        v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudContextDelegate"));
        -[NSObject cloudContext:userDidDeleteRecordZoneWithID:accountID:](v18, "cloudContext:userDidDeleteRecordZoneWithID:accountID:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56), v10);
        goto LABEL_24;
      default:
        if (v13 == (id)3)
        {
LABEL_13:
          v21 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "ic_loggingDescription"));
            v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
            v24 = *(_QWORD *)(a1 + 48);
            *(_DWORD *)buf = 138544130;
            v50 = v22;
            v51 = 2114;
            v52 = v23;
            v53 = 2114;
            v54 = v10;
            v55 = 2114;
            v56 = v24;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Non-fatal error fetching zone changes for zone %{public}@ %{public}@ in account ID %{public}@: %{public}@", buf, 0x2Au);

          }
          v25 = 0;
          v26 = 1;
        }
        else
        {
LABEL_16:
          v27 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "ic_loggingDescription"));
            v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
            v42 = *(_QWORD *)(a1 + 48);
            *(_DWORD *)buf = 138544130;
            v50 = v40;
            v51 = 2114;
            v52 = v41;
            v53 = 2114;
            v54 = v10;
            v55 = 2114;
            v56 = v42;
            _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "Error fetching zone changes %{public}@ %{public}@ in account ID %{public}@: %{public}@", buf, 0x2Au);

          }
LABEL_19:
          v26 = 0;
          v25 = 1;
        }
        break;
    }
  }
  else
  {
    v18 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "ic_loggingDescription"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
      *(_DWORD *)buf = 138543874;
      v50 = v19;
      v51 = 2114;
      v52 = v20;
      v53 = 2114;
      v54 = v10;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Fetched changes for record zone %{public}@ %{public}@ in account ID %{public}@", buf, 0x20u);

    }
LABEL_24:

LABEL_25:
    v26 = 0;
    v25 = 0;
  }
  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accountZoneIDsFetchingChanges"));
  objc_msgSend(v32, "ic_removeZoneID:forAccountID:", *(_QWORD *)(a1 + 56), v10);

  if ((v26 & 1) != 0 || v25)
  {
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "zoneName"));
    v34 = objc_msgSend(v33, "isEqualToString:", CKRecordZoneDefaultName);

    if ((v34 & 1) == 0)
    {
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accountZoneIDsNeedingFetchChanges"));
      objc_msgSend(v35, "ic_addZoneID:forAccountID:", *(_QWORD *)(a1 + 56), v10);

      if (v25)
        objc_msgSend(*(id *)(a1 + 32), "startRetryTimerIfNecessaryWithError:", *(_QWORD *)(a1 + 48));
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "saveZoneFetchState");
  v36 = *(_QWORD *)(a1 + 64);
  if (v36)
  {
    v37 = *(_QWORD *)(a1 + 56);
    v38 = *(void **)(a1 + 32);
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "database"));
    objc_msgSend(v38, "saveServerChangeToken:forRecordZoneID:databaseScope:accountID:", v36, v37, objc_msgSend(v39, "databaseScope"), v10);

  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100040204;
  block[3] = &unk_1007D7A60;
  v48 = *(id *)(a1 + 56);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_100040204(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("ICCloudContextFetchRecordChangeOperationDidFinishNotification"), *(_QWORD *)(a1 + 32));

}

void sub_10004030C(uint64_t a1)
{
  id *v2;
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  void *i;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t v30[128];
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  uint64_t v36;

  v2 = (id *)(a1 + 40);
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "database"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "accountIDForDatabase:", v4));

  if (!objc_msgSend(v5, "length"))
  {
    v6 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      sub_10067BE60();

  }
  v7 = *(void **)(a1 + 48);
  if (!v7)
  {
    v9 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v2, "ic_loggingDescription"));
      *(_DWORD *)buf = 138543618;
      v32 = v5;
      v33 = 2114;
      v34 = v10;
      v11 = "Fetched zone changes in account ID %{public}@: %{public}@";
      goto LABEL_13;
    }
LABEL_17:
    v15 = 0;
    goto LABEL_18;
  }
  v8 = objc_msgSend(v7, "code");
  if (v8 == (id)20 || v8 == (id)3)
  {
    v9 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
      v14 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138543874;
      v32 = v5;
      v33 = 2114;
      v34 = v10;
      v35 = 2114;
      v36 = v14;
      v11 = "Non-fatal error fetching zone changes in account ID %{public}@: %{public}@: %{public}@";
      v12 = v9;
      v13 = 32;
      goto LABEL_16;
    }
    goto LABEL_17;
  }
  if (v8 == (id)2)
  {
    v9 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v2, "ic_loggingDescription"));
      *(_DWORD *)buf = 138543618;
      v32 = v5;
      v33 = 2114;
      v34 = v10;
      v11 = "Fetch changes operation had partial failure in account ID %{public}@: %{public}@";
LABEL_13:
      v12 = v9;
      v13 = 22;
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v11, buf, v13);

      goto LABEL_17;
    }
    goto LABEL_17;
  }
  v9 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
    v25 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138543874;
    v32 = v5;
    v33 = 2114;
    v34 = v24;
    v35 = 2114;
    v36 = v25;
    _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Error fetching zone changes in account ID %{public}@: %{public}@: %{public}@", buf, 0x20u);

  }
  v15 = 1;
LABEL_18:

  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v2, "recordZoneIDs", 0));
  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v27;
    do
    {
      for (i = 0; i != v18; i = (char *)i + 1)
      {
        if (*(_QWORD *)v27 != v19)
          objc_enumerationMutation(v16);
        v21 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)i);
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accountZoneIDsFetchingChanges"));
        objc_msgSend(v22, "ic_removeZoneID:forAccountID:", v21, v5);

        if (v15)
        {
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accountZoneIDsNeedingFetchChanges"));
          objc_msgSend(v23, "ic_addZoneID:forAccountID:", v21, v5);

        }
      }
      v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    }
    while (v18);
  }

  objc_msgSend(*(id *)(a1 + 32), "saveZoneFetchState");
  if (v15)
    objc_msgSend(*(id *)(a1 + 32), "startRetryTimerIfNecessaryWithError:", *(_QWORD *)(a1 + 48));

}

void sub_100040B04(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100040BB0;
  v5[3] = &unk_1007D8500;
  v2 = *(void **)(a1 + 32);
  v6 = *(id *)(a1 + 40);
  v7 = *(id *)(a1 + 48);
  v3 = *(id *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  v8 = v3;
  v9 = v4;
  v10 = *(id *)(a1 + 32);
  objc_msgSend(v2, "performBlockAndWait:", v5);

}

void sub_100040BB0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  void *v17;

  v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "ic_shortLoggingDescription"));
    v12 = 138543874;
    v13 = v3;
    v14 = 2112;
    v15 = v4;
    v16 = 2114;
    v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[fetchRecordZoneChangesOperation:recordWasChangedWithRecordID:record:error:context:] Record changed {accountID: %{public}@, record: %@, operation: %{public}@}", (uint8_t *)&v12, 0x20u);

  }
  if ((objc_msgSend(*(id *)(a1 + 56), "_isCloudKitAccountAvailableWithManagedObjectContext:requireActive:", *(_QWORD *)(a1 + 64), 0) & 1) == 0)
  {
    v9 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_10067BF60(a1);
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a1 + 40);
  v8 = objc_opt_class(CKShare, v6);
  if ((objc_opt_isKindOfClass(v7, v8) & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 56), "didFetchShare:accountID:context:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 64));
    return;
  }
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
  {
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "existingCloudObjectForRecord:accountID:context:", *(_QWORD *)(a1 + 40), v10, *(_QWORD *)(a1 + 64)));
    v9 = v11;
    if (v11)
      -[NSObject objectWasFetchedFromCloudWithRecord:accountID:](v11, "objectWasFetchedFromCloudWithRecord:accountID:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
    else

LABEL_8:
  }
}

void sub_10004101C(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;
  id v6;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000410B0;
  v3[3] = &unk_1007D7CE0;
  v2 = *(void **)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  v5 = *(id *)(a1 + 48);
  v6 = *(id *)(a1 + 56);
  objc_msgSend(v2, "performBlockAndWait:", v3);

}

void sub_1000410B0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  void *v9;
  __int16 v10;
  void *v11;

  v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "ic_shortLoggingDescription"));
    v6 = 138543874;
    v7 = v3;
    v8 = 2114;
    v9 = v4;
    v10 = 2114;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Share was deleted in accountID %{public}@: %{public}@ %{public}@", (uint8_t *)&v6, 0x20u);

  }
}

void sub_10004119C(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100041258;
  v6[3] = &unk_1007D9008;
  v2 = *(void **)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v8 = *(id *)(a1 + 48);
  v3 = *(id *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(void **)(a1 + 72);
  v9 = v3;
  v10 = v4;
  v11 = v5;
  v12 = *(id *)(a1 + 32);
  objc_msgSend(v2, "performBlockAndWait:", v6);

}

void sub_100041258(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  NSString *v11;
  void *v12;
  void *v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;

  v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "ic_shortLoggingDescription"));
    v15 = 138543874;
    v16 = v3;
    v17 = 2114;
    v18 = v4;
    v19 = 2114;
    v20 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Record was deleted in accountID %{public}@: %{public}@ %{public}@", (uint8_t *)&v15, 0x20u);

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "existingCloudObjectForRecordID:recordType:accountID:context:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 72)));
  if (!v6)
  {
    v7 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "ic_shortLoggingDescription"));
      v15 = 138543874;
      v16 = v8;
      v17 = 2114;
      v18 = v9;
      v19 = 2114;
      v20 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Record was deleted but the cloud object no longer exists in our database for fetchRecordZoneChangesOperation:recordWasDeletedWithRecordID:... {accountID: %{public}@, prefetchRecordID: %{public}@, opeartion: %{public}@}", (uint8_t *)&v15, 0x20u);

    }
  }
  v11 = (NSString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "ckZoneOwnerName"));
  if (!v11)
    v11 = CKCurrentUserDefaultName;
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "ownerName"));
  v14 = -[NSString isEqualToString:](v11, "isEqualToString:", v13);

  if (v14)
    objc_msgSend(v6, "objectWasDeletedFromCloudByAnotherDevice");

}

void sub_100041560(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  void *v15;

  v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_loggingDescription"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "ic_loggingDescription"));
    v10 = 138543874;
    v11 = v3;
    v12 = 2114;
    v13 = v4;
    v14 = 2114;
    v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Zone change token updated %{public}@ %{public}@ %{public}@", (uint8_t *)&v10, 0x20u);

  }
  v7 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v8 = *(void **)(a1 + 56);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "database"));
  objc_msgSend(v8, "saveServerChangeToken:forRecordZoneID:databaseScope:accountID:", v6, v7, objc_msgSend(v9, "databaseScope"), *(_QWORD *)(a1 + 64));

}

id sub_100041AB8(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Polling timer fired", v4, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "syncWithReason:discretionary:completionHandler:", CFSTR("Poll"), 1, 0);
}

void sub_100041CAC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v5 = a2;
  v6 = a3;
  v7 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    sub_10067C0C8();

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "privateCloudDatabase"));
  if (v8)
  {
    v9 = *(void **)(a1 + 32);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "privateCloudDatabase"));
    objc_msgSend(v9, "addObject:", v10);

  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "sharedCloudDatabase"));

  if (v11)
  {
    v12 = *(void **)(a1 + 32);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "sharedCloudDatabase"));
    objc_msgSend(v12, "addObject:", v13);

  }
}

id sub_100041DA0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "fetchDatabaseChangesForDatabases:reason:cloudSchemaCatchUpSyncContextMap:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

void sub_100042228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a47, 8);
  _Unwind_Resume(a1);
}

void sub_100042270(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;

  v3 = a2;
  if (v3)
  {
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "processingQueue"));
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100042310;
    v5[3] = &unk_1007D7AF8;
    v7 = *(_QWORD *)(a1 + 40);
    v6 = v3;
    dispatch_async(v4, v5);

  }
}

id sub_100042310(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObject:", *(_QWORD *)(a1 + 32));
}

void sub_100042320(uint64_t a1)
{
  NSObject *v2;
  id v3;
  __int128 v4;
  _QWORD block[5];
  __int128 v6;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "processingQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000423B8;
  block[3] = &unk_1007D8190;
  block[4] = *(_QWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 40);
  v3 = (id)v4;
  v6 = v4;
  dispatch_async(v2, block);

}

void sub_1000423B8(_QWORD *a1, uint64_t a2)
{
  id v3;
  id v4;

  v3 = objc_msgSend((id)objc_opt_class(a1[4], a2), "errorFromErrors:", *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40));
  v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(void))(a1[5] + 16))();

}

void sub_1000429D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *a11, id *a12, id *a13, id *location, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,id a58)
{
  objc_destroyWeak(location);
  objc_destroyWeak(a13);
  objc_destroyWeak(a12);
  objc_destroyWeak(a11);
  objc_destroyWeak(&a58);
  _Unwind_Resume(a1);
}

void sub_100042A44(uint64_t a1, void *a2)
{
  void *v3;
  id *v4;
  id v5;
  id WeakRetained;

  v3 = *(void **)(a1 + 32);
  v4 = (id *)(a1 + 48);
  v5 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend(v3, "fetchDatabaseChangesOperation:recordZoneWithIDChanged:accountID:", WeakRetained, v5, *(_QWORD *)(a1 + 40));

}

void sub_100042AA8(uint64_t a1, void *a2)
{
  void *v3;
  id *v4;
  id v5;
  id WeakRetained;

  v3 = *(void **)(a1 + 32);
  v4 = (id *)(a1 + 48);
  v5 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend(v3, "fetchDatabaseChangesOperation:recordZoneWithIDWasDeleted:accountID:", WeakRetained, v5, *(_QWORD *)(a1 + 40));

}

void sub_100042B0C(uint64_t a1, void *a2)
{
  void *v3;
  id *v4;
  id v5;
  id WeakRetained;

  v3 = *(void **)(a1 + 32);
  v4 = (id *)(a1 + 48);
  v5 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend(v3, "fetchDatabaseChangesOperation:changeTokenUpdated:accountID:", WeakRetained, v5, *(_QWORD *)(a1 + 40));

}

void sub_100042B70(_QWORD *a1, void *a2, uint64_t a3, void *a4)
{
  void *v6;
  id *v7;
  id v8;
  id v9;
  id WeakRetained;

  v6 = (void *)a1[4];
  v7 = (id *)(a1 + 7);
  v8 = a4;
  v9 = a2;
  WeakRetained = objc_loadWeakRetained(v7);
  objc_msgSend(v6, "fetchDatabaseChangesOperation:finishedWithServerChangeToken:accountID:error:completionHandler:", WeakRetained, v9, a1[5], v8, a1[6]);

}

void sub_100042CD4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned __int8 v7;
  void *v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  void *v12;
  __int16 v13;
  void *v14;

  v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "ic_loggingDescription"));
    v9 = 138543874;
    v10 = v3;
    v11 = 2114;
    v12 = v4;
    v13 = 2114;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Zone changed for account %{public}@, %{public}@ %{public}@", (uint8_t *)&v9, 0x20u);

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneName"));
  v7 = objc_msgSend(v6, "isEqualToString:", CKRecordZoneDefaultName);

  if ((v7 & 1) == 0)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "accountZoneIDsNeedingFetchChanges"));
    objc_msgSend(v8, "ic_addZoneID:forAccountID:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));

    objc_msgSend(*(id *)(a1 + 56), "saveZoneFetchState");
  }
}

void sub_100042F70(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  NSString *(__cdecl **v11)(SEL);
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  unsigned int v16;
  NSObject *v17;
  _BOOL4 v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  NSString *(__cdecl **v26)(SEL);
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  _BYTE v46[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ownerName"));
  v5 = objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("ckZoneOwnerName == %@"), v4));

  v31 = (void *)v5;
  v32 = v3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDObject ic_objectsMatchingPredicate:context:](REMCDObject, "ic_objectsMatchingPredicate:context:", v5, v3));
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
  if (v7)
  {
    v9 = v7;
    v10 = *(_QWORD *)v35;
    v11 = &NSStringFromSelector_ptr;
    do
    {
      v12 = 0;
      v33 = v9;
      do
      {
        if (*(_QWORD *)v35 != v10)
          objc_enumerationMutation(v6);
        v13 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)v12);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "recordID"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "zoneID"));
        v16 = objc_msgSend(v15, "isEqual:", *(_QWORD *)(a1 + 32));

        v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11[281], "cloudkit"));
        v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
        if (v16)
        {
          if (v18)
          {
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "shortLoggingDescription"));
            v20 = *(void **)(a1 + 32);
            v21 = *(_QWORD *)(a1 + 40);
            *(_DWORD *)buf = 138412802;
            v39 = v19;
            v40 = 2114;
            v41 = v20;
            v42 = 2114;
            v43 = v21;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Deleting shared %@ for zoneID %{public}@, accountID %{public}@", buf, 0x20u);

          }
          objc_msgSend(v13, "objectWasDeletedFromCloudByAnotherDevice");
        }
        else
        {
          if (v18)
          {
            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "shortLoggingDescription"));
            v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "recordID"));
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "zoneID"));
            v25 = v10;
            v26 = v11;
            v27 = v6;
            v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "ic_loggingDescription"));
            v29 = *(_QWORD *)(a1 + 32);
            v30 = *(_QWORD *)(a1 + 40);
            *(_DWORD *)buf = 138413058;
            v39 = v22;
            v40 = 2114;
            v41 = v28;
            v42 = 2114;
            v43 = v29;
            v44 = 2114;
            v45 = v30;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Not deleting shared %@ in wrong zone %{public}@ for zone ID %{public}@, accountID %{public}@", buf, 0x2Au);

            v6 = v27;
            v11 = v26;
            v10 = v25;
            v9 = v33;

          }
        }
        v12 = (char *)v12 + 1;
      }
      while (v9 != v12);
      v9 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
    }
    while (v9);
  }
  objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 48), v8), "saveAndFaultIfFailWithContext:shouldTakeServerAsTruth:logDescription:", v32, 1, CFSTR("deleting shared zone"));

}

void sub_100043364(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned int v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned __int8 v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  void *v25;

  v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(void **)(a1 + 32);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "ic_loggingDescription"));
    v20 = 138543874;
    v21 = v3;
    v22 = 2114;
    v23 = v4;
    v24 = 2114;
    v25 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Zone was deleted for account %{public}@, %{public}@ %{public}@", (uint8_t *)&v20, 0x20u);

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "database"));
  if (objc_msgSend(v6, "databaseScope") == (id)3)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ownerName"));
    v8 = objc_msgSend(v7, "isEqualToString:", CKCurrentUserDefaultName);

    if (v8)
    {
      v9 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "ic_loggingDescription"));
        v20 = 138543618;
        v21 = v10;
        v22 = 2114;
        v23 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Callback for operation in shared database says private zone was deleted %{public}@: %{public}@", (uint8_t *)&v20, 0x16u);

      }
      return;
    }
  }
  else
  {

  }
  if (objc_msgSend(*(id *)(a1 + 40), "ic_isOwnedByCurrentUser"))
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneName"));
    v13 = objc_msgSend(v12, "isEqualToString:", CKRecordZoneDefaultName);

    if ((v13 & 1) == 0)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "accountZoneIDsNeedingFetchChanges"));
      objc_msgSend(v14, "ic_addZoneID:forAccountID:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));

      objc_msgSend(*(id *)(a1 + 56), "saveZoneFetchState");
    }
  }
  else
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "cloudContextDelegate"));
    objc_msgSend(v15, "cloudContext:sharedZoneWasDeleted:accountID:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));

    objc_msgSend(*(id *)(a1 + 56), "sharedZoneWasDeleted:accountID:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "accountZoneIDsNeedingFetchChanges"));
    objc_msgSend(v16, "ic_removeZoneID:forAccountID:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));

    objc_msgSend(*(id *)(a1 + 56), "saveZoneFetchState");
    v17 = *(void **)(a1 + 56);
    v18 = *(_QWORD *)(a1 + 40);
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "database"));
    objc_msgSend(v17, "deleteServerChangeTokenForRecordZoneID:databaseScope:accountID:", v18, objc_msgSend(v19, "databaseScope"), *(_QWORD *)(a1 + 32));

  }
}

void sub_1000436F8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  void *v12;
  __int16 v13;
  void *v14;

  v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "ic_loggingDescription"));
    v9 = 138543874;
    v10 = v3;
    v11 = 2114;
    v12 = v4;
    v13 = 2114;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Database change token updated for account %{public}@, %{public}@ %{public}@", (uint8_t *)&v9, 0x20u);

  }
  v6 = *(void **)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "database"));
  objc_msgSend(v6, "saveServerChangeToken:forRecordZoneID:databaseScope:accountID:", v7, 0, objc_msgSend(v8, "databaseScope"), *(_QWORD *)(a1 + 32));

}

void sub_100043950(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  _BOOL4 v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  _UNKNOWN **v24;
  _UNKNOWN **v25;
  void *v26;
  id v27;
  signed int v28;
  NSObject *v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  NSObject *v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  uint64_t v46;

  v2 = a1 + 32;
  if (*(_QWORD *)(a1 + 32))
  {
    v3 = *(void **)(a1 + 56);
    if (v3)
    {
      if (objc_msgSend(v3, "code") == (id)21)
      {
        v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
          sub_10067C334(v2, a1);

        v5 = *(void **)(a1 + 64);
        v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "database"));
        objc_msgSend(v5, "deleteServerChangeTokenForChangedZonesInDatabase:accountID:", v6, *(_QWORD *)(a1 + 32));
LABEL_7:
        v7 = 1;
LABEL_23:

LABEL_24:
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "database"));
        v18 = CKDatabaseScopeString(objc_msgSend(v17, "databaseScope"));
        v19 = (void *)objc_claimAutoreleasedReturnValue(v18);

        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "retryCountFetchDatabaseChangesOperationTypeForAccountID:dataScopeString:", *(_QWORD *)(a1 + 32), v19));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "retryCountsByOperationType"));
        v22 = objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKeyedSubscript:", v20));
        v23 = (void *)v22;
        v24 = &off_100804548;
        if (v22)
          v24 = (_UNKNOWN **)v22;
        v25 = v24;

        v26 = (void *)objc_claimAutoreleasedReturnValue(+[ICCloudConfiguration sharedConfiguration](ICCloudConfiguration, "sharedConfiguration"));
        v27 = objc_msgSend(v26, "fetchDatabaseChangesOperationPerScopePerAccountMaximumRetryCount");
        v28 = objc_msgSend(v25, "intValue");

        if ((unint64_t)v27 <= v28)
        {
          v29 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            sub_10067C2C0();

          v7 = 0;
        }
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "databaseScopeStringsNeedingRetryFetchChangesByAccountID"));
        v31 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));

        if (v7)
        {
          if (!v31)
          {
            v31 = objc_msgSend(objc_alloc((Class)NSMutableSet), "initWithCapacity:", 3);
            v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "databaseScopeStringsNeedingRetryFetchChangesByAccountID"));
            objc_msgSend(v32, "setObject:forKeyedSubscript:", v31, *(_QWORD *)(a1 + 32));

          }
          objc_msgSend(v31, "addObject:", v19);
          objc_msgSend(*(id *)(a1 + 64), "incrementRetryCountForOperationType:", v20);
          objc_msgSend(*(id *)(a1 + 64), "startRetryTimerIfNecessaryWithError:", *(_QWORD *)(a1 + 56));
        }
        else
        {
          objc_msgSend(v31, "removeObject:", v19);
          if (!objc_msgSend(v31, "count"))
          {
            v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "databaseScopeStringsNeedingRetryFetchChangesByAccountID"));
            objc_msgSend(v33, "removeObjectForKey:", *(_QWORD *)(a1 + 32));

          }
          objc_msgSend(*(id *)(a1 + 64), "clearRetryCountForOperationType:", v20);
        }
        if (*(_QWORD *)(a1 + 56))
        {
          v34 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
            sub_10067C240(a1 + 48, v34);

          v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "operationQueue"));
          v36 = objc_msgSend(v35, "iterativelyCancelDependentOperations:", *(_QWORD *)(a1 + 48));

        }
        v37 = *(_QWORD *)(a1 + 72);
        if (v37)
          (*(void (**)(uint64_t, _QWORD))(v37 + 16))(v37, *(_QWORD *)(a1 + 56));

        return;
      }
      if (objc_msgSend(*(id *)(a1 + 56), "code") == (id)20)
      {
        v6 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
          sub_10067C3B0(v2, a1);
      }
      else
      {
        v15 = objc_msgSend(*(id *)(a1 + 56), "code");
        v6 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
        v16 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
        if (v15 != (id)3)
        {
          if (v16)
          {
            v38 = *(_QWORD *)(a1 + 32);
            v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "ic_loggingDescription"));
            v40 = *(_QWORD *)(a1 + 56);
            v41 = 138543874;
            v42 = v38;
            v43 = 2114;
            v44 = v39;
            v45 = 2112;
            v46 = v40;
            _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error fetching database changes for account %{public}@, %{public}@: %@", (uint8_t *)&v41, 0x20u);

          }
          goto LABEL_7;
        }
        if (v16)
          sub_10067C42C(v2, a1);
      }
    }
    else
    {
      v10 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(a1 + 32);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "ic_loggingDescription"));
        v41 = 138543618;
        v42 = v11;
        v43 = 2114;
        v44 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Fetched database changes for account %{public}@, %{public}@", (uint8_t *)&v41, 0x16u);

      }
      v13 = *(_QWORD *)(a1 + 40);
      if (!v13)
      {
        v7 = 0;
        goto LABEL_24;
      }
      v14 = *(void **)(a1 + 64);
      v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "database"));
      objc_msgSend(v14, "saveServerChangeToken:forChangedZonesInDatabase:accountID:", v13, v6, *(_QWORD *)(a1 + 32));
    }
    v7 = 0;
    goto LABEL_23;
  }
  v8 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    sub_10067C1B0();

  v9 = *(_QWORD *)(a1 + 72);
  if (v9)
    (*(void (**)(uint64_t, _QWORD))(v9 + 16))(v9, *(_QWORD *)(a1 + 56));
}

void sub_10004404C(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v1, "removeObjectForKey:", CFSTR("CloudKitZonesNeedingFetchChanges"));

}

void sub_100044088(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;

  v12 = a2;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = a3;
  v8 = objc_msgSend((id)objc_opt_class(v5, v7), "zoneIDsFromZoneInfos:", v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  v10 = objc_msgSend(v9, "mutableCopy");
  if (objc_msgSend(v10, "count"))
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accountZoneIDsNeedingFetchChanges"));
    objc_msgSend(v11, "setObject:forKeyedSubscript:", v10, v12);

  }
}

void sub_1000442F0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = a3;
  v8 = objc_msgSend((id)objc_opt_class(v5, v7), "zoneInfosFromZoneIDs:", v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  if (objc_msgSend(v9, "count"))
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v9, v10);

}

void sub_100044374(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v13 = a2;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = a3;
  v8 = objc_msgSend((id)objc_opt_class(v5, v7), "zoneInfosFromZoneIDs:", v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  if (objc_msgSend(v9, "count"))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v13));
    v11 = v10;
    if (v10)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "arrayByAddingObjectsFromArray:", v9));
      objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v12, v13);

    }
    else
    {
      objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v9, v13);
    }

  }
}

id sub_1000444AC(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  uint8_t v6[16];

  v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Clearing zone fetch state", v6, 2u);
  }

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  objc_msgSend(*(id *)(a1 + 32), "setAccountZoneIDsNeedingFetchChanges:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  objc_msgSend(*(id *)(a1 + 32), "setAccountZoneIDsFetchingChanges:", v4);

  return objc_msgSend(*(id *)(a1 + 32), "saveZoneFetchState");
}

void sub_100044C20(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  id v7;
  void *v8;
  _QWORD *v9;
  id v10;
  id v11;
  void *i;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  unsigned int v20;
  NSObject *v21;
  uint64_t v22;
  id v23;
  void *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  id v30;
  id v31;
  id obj;
  uint64_t v33;
  id v34;
  _QWORD v35[5];
  id v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _QWORD v41[5];
  id v42;
  id v43;
  id v44;
  _QWORD v45[4];
  id v46;
  _QWORD v47[5];
  uint8_t buf[8];
  uint8_t *v49;
  uint64_t v50;
  char v51;
  uint8_t v52[4];
  id v53;
  __int16 v54;
  void *v55;
  _BYTE v56[128];
  char v57[24];

  v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Updating subscriptions", buf, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "setNeedsToUpdateSubscriptions:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  *(_QWORD *)buf = 0;
  v49 = buf;
  v50 = 0x2020000000;
  v51 = 0;
  if (objc_msgSend(*(id *)(a1 + 32), "hasPassedBuddy")
    && (objc_msgSend(*(id *)(a1 + 32), "isSystemAvailableForSyncing") & 1) != 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appleAccountUtilities"));
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "unsafeUntilSystemReady_allICloudACAccounts"));

    v47[0] = _NSConcreteStackBlock;
    v47[1] = 3221225472;
    v47[2] = sub_100045274;
    v47[3] = &unk_1007D91B8;
    v47[4] = buf;
    -[NSObject enumerateObjectsUsingBlock:](v5, "enumerateObjectsUsingBlock:", v47);
  }
  else
  {
    v5 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      sub_10067C4A8((char)objc_msgSend(*(id *)(a1 + 32), "hasPassedBuddy"), (char)objc_msgSend(*(id *)(a1 + 32), "isSystemAvailableForSyncing"), (uint64_t)v57, v5);
  }

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containersByAccountID"));
  v45[0] = _NSConcreteStackBlock;
  v45[1] = 3221225472;
  v45[2] = sub_1000452B4;
  v45[3] = &unk_1007D9030;
  v7 = v3;
  v46 = v7;
  objc_msgSend(v6, "enumerateKeysAndObjectsUsingBlock:", v45);

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472;
  v41[2] = sub_100045330;
  v41[3] = &unk_1007D91E0;
  v41[4] = *(_QWORD *)(a1 + 32);
  v31 = v7;
  v42 = v31;
  v30 = v8;
  v43 = v30;
  v44 = *(id *)(a1 + 40);
  v9 = objc_retainBlock(v41);
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v10 = objc_msgSend(v31, "copy");
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v37, v56, 16);
  if (v11)
  {
    v33 = *(_QWORD *)v38;
    obj = v10;
    do
    {
      v34 = v11;
      for (i = 0; i != v34; i = (char *)i + 1)
      {
        if (*(_QWORD *)v38 != v33)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * (_QWORD)i);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subscriptionForDatabase:", v13, v30));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accountIDForDatabase:", v13));
        if (!objc_msgSend(v15, "length"))
        {
          v16 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
          if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
          {
            v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "ic_loggingDescription"));
            *(_DWORD *)v52 = 138543618;
            v53 = v29;
            v54 = 2114;
            v55 = v15;
            _os_log_fault_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "accountID is nil or empty in updateSubscriptionsWithCompletionHandler: database %{public}@, accountID: %{public}@", v52, 0x16u);

          }
        }
        if (objc_msgSend(v15, "length")
          && (v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subscribedSubscriptionIDsByAccountID")),
              v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", v15)),
              v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "subscriptionID")),
              v20 = objc_msgSend(v18, "containsObject:", v19),
              v19,
              v18,
              v17,
              v20))
        {
          v21 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            v22 = CKDatabaseScopeString(objc_msgSend(v13, "databaseScope"));
            v23 = (id)objc_claimAutoreleasedReturnValue(v22);
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "subscriptionID"));
            *(_DWORD *)v52 = 138543618;
            v53 = v23;
            v54 = 2114;
            v55 = v24;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Not fetching subscriptions for %{public}@, already subscribed to %{public}@", v52, 0x16u);

          }
          ((void (*)(_QWORD *, void *, _QWORD))v9[2])(v9, v13, 0);
        }
        else
        {
          v25 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "subscriptionID"));
            *(_DWORD *)v52 = 138543362;
            v53 = v26;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Not sure if subscribed to %{public}@", v52, 0xCu);

          }
          v27 = *(void **)(a1 + 32);
          v35[0] = _NSConcreteStackBlock;
          v35[1] = 3221225472;
          v35[2] = sub_1000454D4;
          v35[3] = &unk_1007D9208;
          v28 = v9;
          v35[4] = v13;
          v36 = v28;
          objc_msgSend(v27, "saveSubscriptionsForDatabase:completionHandler:", v13, v35);

        }
      }
      v10 = obj;
      v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v56, 16);
    }
    while (v11);
  }

  _Block_object_dispose(buf, 8);
}

void sub_100045214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

id sub_100045274(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a2, "rem_isEligibleForCloudKitReminders");
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_1000452B4(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "privateCloudDatabase"));
  objc_msgSend(v4, "addObject:", v6);

  v7 = *(void **)(a1 + 32);
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "sharedCloudDatabase"));

  objc_msgSend(v7, "addObject:", v8);
}

void sub_100045330(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;

  v5 = a2;
  v6 = a3;
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "processingQueue"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100045428;
  v12[3] = &unk_1007D8CE8;
  v13 = a1[5];
  v14 = v5;
  v15 = v6;
  v8 = a1[6];
  v9 = a1[4];
  v16 = v8;
  v17 = v9;
  v18 = a1[7];
  v10 = v6;
  v11 = v5;
  dispatch_async(v7, v12);

}

void sub_100045428(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "removeObject:", *(_QWORD *)(a1 + 40));
  if (*(_QWORD *)(a1 + 48))
    objc_msgSend(*(id *)(a1 + 56), "addObject:");
  if (!objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    v3 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 64), v2), "errorFromErrors:", *(_QWORD *)(a1 + 56));
    v5 = (id)objc_claimAutoreleasedReturnValue(v3);
    objc_msgSend(*(id *)(a1 + 64), "setNeedsToUpdateSubscriptions:", v5 != 0);
    v4 = *(_QWORD *)(a1 + 72);
    if (v4)
      (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
    if (*(_QWORD *)(a1 + 48))
      objc_msgSend(*(id *)(a1 + 64), "startRetryTimerIfNecessaryWithError:");

  }
}

uint64_t sub_1000454D4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), a2);
}

void sub_1000455A4(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[5];
  id v8;
  id v9;
  id v10;
  id location;
  uint8_t buf[4];
  void *v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CKFetchSubscriptionsOperation fetchAllSubscriptionsOperation](CKFetchSubscriptionsOperation, "fetchAllSubscriptionsOperation"));
  objc_msgSend(*(id *)(a1 + 32), "configureOperation:", v2);
  objc_msgSend(v2, "setDatabase:", *(_QWORD *)(a1 + 40));
  objc_initWeak(&location, v2);
  v3 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "ic_loggingDescription"));
    *(_DWORD *)buf = 138543362;
    v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Fetching subscriptions %{public}@", buf, 0xCu);

  }
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100045790;
  v7[3] = &unk_1007D9230;
  objc_copyWeak(&v10, &location);
  v5 = *(void **)(a1 + 40);
  v7[4] = *(_QWORD *)(a1 + 32);
  v8 = v5;
  v9 = *(id *)(a1 + 48);
  objc_msgSend(v2, "setFetchSubscriptionCompletionBlock:", v7);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationQueue"));
  objc_msgSend(v6, "addOperation:", v2);

  objc_msgSend(*(id *)(a1 + 32), "errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessary");
  objc_destroyWeak(&v10);
  objc_destroyWeak(&location);

}

void sub_100045750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100045790(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "processingQueue"));
  v14[0] = _NSConcreteStackBlock;
  v14[2] = sub_10004589C;
  v14[3] = &unk_1007D8CE8;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(void **)(a1 + 40);
  v16 = WeakRetained;
  v17 = v9;
  v14[1] = 3221225472;
  v15 = v5;
  v18 = v10;
  v19 = v6;
  v20 = *(id *)(a1 + 48);
  v11 = v6;
  v12 = WeakRetained;
  v13 = v5;
  dispatch_async(v8, v14);

}

uint64_t sub_10004589C(uint64_t a1)
{
  void *v2;
  id v3;
  __int128 v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  uint64_t result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  void *v29;
  _BYTE v30[128];

  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allValues"));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
  if (v3)
  {
    v5 = v3;
    v6 = *(_QWORD *)v23;
    *(_QWORD *)&v4 = 138543618;
    v21 = v4;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v23 != v6)
          objc_enumerationMutation(v2);
        v8 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)v7);
        v9 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit", v21));
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "subscriptionID"));
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
          *(_DWORD *)buf = v21;
          v27 = v10;
          v28 = 2114;
          v29 = v11;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Fetched subscription %{public}@ %{public}@", buf, 0x16u);

        }
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "accountIDForDatabase:", *(_QWORD *)(a1 + 56)));
        if (objc_msgSend(v12, "length"))
        {
          v13 = *(void **)(a1 + 48);
          v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "subscriptionID"));
          objc_msgSend(v13, "addSubscribedSubscriptionIDs:accountID:", v14, v12);
        }
        else
        {
          v14 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
          if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
          {
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "ic_loggingDescription"));
            *(_DWORD *)buf = v21;
            v27 = v15;
            v28 = 2114;
            v29 = v12;
            _os_log_fault_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "accountID is nil or empty in fetchSubscriptionsForDatabase: %{public}@, accountID: %{public}@", buf, 0x16u);

          }
        }

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
    }
    while (v5);
  }

  v16 = *(_QWORD *)(a1 + 64);
  v17 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  v18 = v17;
  if (v16)
  {
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      sub_10067C4FC();
  }
  else if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
    *(_DWORD *)buf = 138543362;
    v27 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Fetched subscriptions %{public}@", buf, 0xCu);

  }
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 64));
  return result;
}

void sub_100045C4C(id *a1)
{
  id *v2;
  id *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void (**v15)(id, _QWORD);
  id v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void **v26;
  uint64_t v27;
  void (*v28)(uint64_t, void *, uint64_t, void *);
  void *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id location;
  void *v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  void *v39;

  v2 = a1 + 4;
  v3 = a1 + 5;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "subscriptionForDatabase:", a1[5]));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v2, "accountIDForDatabase:", *v3));
  if (!objc_msgSend(v5, "length"))
  {
    v6 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      sub_10067C578();

  }
  if (objc_msgSend(v5, "length")
    && (v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "subscribedSubscriptionIDsByAccountID")),
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v5)),
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "subscriptionID")),
        v10 = objc_msgSend(v8, "containsObject:", v9),
        v9,
        v8,
        v7,
        v10))
  {
    v11 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v12 = CKDatabaseScopeString(objc_msgSend(*v3, "databaseScope"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "subscriptionID"));
      *(_DWORD *)buf = 138543618;
      v37 = v13;
      v38 = 2114;
      v39 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Not saving subscriptions for %{public}@, already subscribed to %{public}@", buf, 0x16u);

    }
    v15 = (void (**)(id, _QWORD))a1[6];
    if (v15)
      v15[2](v15, 0);
  }
  else
  {
    v16 = objc_alloc((Class)CKModifySubscriptionsOperation);
    v35 = v4;
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v35, 1));
    v18 = objc_msgSend(v16, "initWithSubscriptionsToSave:subscriptionIDsToDelete:", v17, 0);

    objc_msgSend(a1[4], "configureOperation:", v18);
    objc_msgSend(v18, "setDatabase:", a1[5]);
    objc_initWeak(&location, v18);
    v19 = objc_alloc_init((Class)CKOperationGroup);
    objc_msgSend(v19, "setName:", CFSTR("SaveSubscriptions"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "subscriptionsToSave"));
    objc_msgSend(v19, "setQuantity:", objc_msgSend(v20, "count"));

    objc_msgSend(v19, "setExpectedSendSize:", 1);
    objc_msgSend(v19, "setExpectedReceiveSize:", 1);
    objc_msgSend(v18, "setGroup:", v19);
    v21 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "subscriptionID"));
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "ic_loggingDescription"));
      *(_DWORD *)buf = 138543618;
      v37 = v22;
      v38 = 2114;
      v39 = v23;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Saving subscription %{public}@ %{public}@", buf, 0x16u);

    }
    v26 = _NSConcreteStackBlock;
    v27 = 3221225472;
    v28 = sub_100046080;
    v29 = &unk_1007D9258;
    objc_copyWeak(&v33, &location);
    v24 = a1[5];
    v30 = a1[4];
    v31 = v24;
    v32 = a1[6];
    objc_msgSend(v18, "setModifySubscriptionsCompletionBlock:", &v26);
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "operationQueue", v26, v27, v28, v29, v30));
    objc_msgSend(v25, "addOperation:", v18);

    objc_msgSend(a1[4], "errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessary");
    objc_destroyWeak(&v33);

    objc_destroyWeak(&location);
  }

}

void sub_10004603C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100046080(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id WeakRetained;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;

  v6 = a2;
  v7 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "processingQueue"));
  v15[0] = _NSConcreteStackBlock;
  v15[2] = sub_10004618C;
  v15[3] = &unk_1007D8CE8;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(void **)(a1 + 40);
  v18 = v6;
  v19 = v10;
  v15[1] = 3221225472;
  v16 = v7;
  v17 = WeakRetained;
  v20 = v11;
  v21 = *(id *)(a1 + 48);
  v12 = v6;
  v13 = WeakRetained;
  v14 = v7;
  dispatch_async(v9, v15);

}

uint64_t sub_10004618C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  NSObject *v4;
  NSObject *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  uint64_t result;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  void *v28;
  _BYTE v29[128];

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 32);
  v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_10067C5FC();
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
      *(_DWORD *)buf = 138543362;
      v26 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Saved subscriptions %{public}@", buf, 0xCu);

    }
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v5 = *(id *)(a1 + 48);
    v7 = -[NSObject countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
    if (v7)
    {
      v8 = v7;
      v20 = v3;
      v9 = *(_QWORD *)v22;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(_QWORD *)v22 != v9)
            objc_enumerationMutation(v5);
          v11 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i);
          v12 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "subscriptionID"));
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
            *(_DWORD *)buf = 138543618;
            v26 = v13;
            v27 = 2114;
            v28 = v14;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Saved subscription %{public}@ %{public}@", buf, 0x16u);

          }
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "accountIDForDatabase:", *(_QWORD *)(a1 + 64)));
          if (objc_msgSend(v15, "length"))
          {
            v16 = *(void **)(a1 + 56);
            v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "subscriptionID"));
            objc_msgSend(v16, "addSubscribedSubscriptionIDs:accountID:", v17, v15);
          }
          else
          {
            v17 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
            if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
            {
              v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "ic_loggingDescription"));
              *(_DWORD *)buf = 138543618;
              v26 = v18;
              v27 = 2114;
              v28 = v15;
              _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "accountID is nil or empty in saveSubscriptionsForDatabase modifySubscriptionsCompletionBlock %{public}@, accountID: %{public}@", buf, 0x16u);

            }
          }

        }
        v8 = -[NSObject countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
      }
      while (v8);
      v3 = v20;
    }
  }

  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *v3);
  return result;
}

void sub_10004678C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;

  v5 = a3;
  v6 = a2;
  v7 = objc_msgSend(objc_alloc((Class)NSSet), "initWithArray:", v5);

  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, v6);
}

void sub_100046AB8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v5 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "allObjects"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v6, v5);

}

void sub_100046D74(uint64_t a1)
{
  void **v2;
  id *v3;
  NSObject *v4;
  const __CFString *v5;
  const __CFString *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  NSObject *v17;
  __CFString *v18;
  uint64_t v19;
  NSObject *v20;
  id v21;
  void *v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  id v26;
  NSObject *v27;
  _QWORD v28[4];
  id v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  _QWORD v33[4];
  id v34;
  id v35;
  id v36;
  const __CFString *v37;
  const __CFString *v38;
  uint8_t buf[4];
  const __CFString *v40;
  __int16 v41;
  const __CFString *v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  void *v46;

  v2 = (void **)(a1 + 32);
  if (!*(_QWORD *)(a1 + 32))
  {
    v27 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
      sub_10067C774();

  }
  v3 = (id *)(a1 + 40);
  if ((objc_msgSend(*(id *)(a1 + 40), "isDisabled") & 1) == 0
    && (objc_msgSend(*v3, "isDisabledInternal") & 1) == 0
    && objc_msgSend(*v3, "supportsCloudKitSyncing")
    && (objc_msgSend(*v3, "hasPassedBuddy") & 1) != 0)
  {
    v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      if (objc_msgSend(*(id *)(a1 + 40), "isInForeground"))
        v5 = CFSTR("Foreground");
      else
        v5 = CFSTR("Background");
      if (objc_msgSend(*(id *)(a1 + 40), "isInternetReachable"))
        v6 = CFSTR("reachable");
      else
        v6 = CFSTR("not reachable");
      v7 = *(_QWORD *)(a1 + 32);
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 64)));
      *(_DWORD *)buf = 138544130;
      v40 = v5;
      v41 = 2114;
      v42 = v6;
      v43 = 2114;
      v44 = v7;
      v45 = 2114;
      v46 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Updating cloud context state. %{public}@ and internet %{public}@. {syncReason: %{public}@, option: %{public}@}", buf, 0x2Au);

    }
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[DABabysitter sharedBabysitter](DABabysitter, "sharedBabysitter"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "tokenByRegisteringAccount:forOperationWithName:", *v3, CFSTR("CloudKitUpdateCloudContextState")));

    if (!v10)
    {
      if (!isCloudContextSyncReasonUserInitiated(*v2))
      {
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[REMError babySatErrorWithOperationName:](REMError, "babySatErrorWithOperationName:", CFSTR("CloudKitUpdateCloudContextState")));
        v37 = CFSTR("identifier");
        v38 = CFSTR("CloudKitUpdateCloudContextState");
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v38, &v37, 1));
        +[Analytics postEventWithName:payload:error:performAutoBugCaptureOnError:](_TtC19ReminderKitInternal9Analytics, "postEventWithName:payload:error:performAutoBugCaptureOnError:", CFSTR("com.apple.remindd.cloudkit.sync.crashDetected"), v22, v16, 1);

        v23 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
        if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
          sub_10067C6F4((uint64_t)v2, a1 + 40);

        v24 = *(_QWORD *)(a1 + 56);
        if (v24)
          (*(void (**)(uint64_t, _QWORD, void *))(v24 + 16))(v24, 0, v16);
        v25 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "os_transaction RELEASE {name: com.apple.remindd.cloudkit.updateCloudContextState}", buf, 2u);
        }

        v26 = (id)objc_opt_self(*(_QWORD *)(a1 + 48));
        goto LABEL_20;
      }
      v11 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        sub_10067C678((uint64_t)v2, a1 + 40);

    }
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_100047260;
    v33[3] = &unk_1007D9280;
    v36 = *(id *)(a1 + 56);
    v34 = v10;
    v35 = *(id *)(a1 + 48);
    v12 = objc_retainBlock(v33);
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_100047320;
    v28[3] = &unk_1007D9370;
    v13 = *(_QWORD *)(a1 + 32);
    v29 = *(id *)(a1 + 40);
    v30 = v13;
    v14 = *(_QWORD *)(a1 + 64);
    v31 = v12;
    v32 = v14;
    v15 = v12;
    objc_msgSend(v29, "updateAccountStatusWithCompletionHandler:", v28);

    v16 = v36;
LABEL_20:

    return;
  }
  v17 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v18 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v3, "readinessLoggingDescription"));
    *(_DWORD *)buf = 138543362;
    v40 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Not updating cloud context state because it's disabled {%{public}@}", buf, 0xCu);

  }
  v19 = *(_QWORD *)(a1 + 56);
  if (v19)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v19 + 16))(v19, 0, 0);
  v20 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "os_transaction RELEASE {name: com.apple.remindd.cloudkit.updateCloudContextState}", buf, 2u);
  }

  v21 = (id)objc_opt_self(*(_QWORD *)(a1 + 48));
}

void sub_100047260(_QWORD *a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  id v9;
  uint8_t v10[16];

  v5 = a3;
  v6 = a1[6];
  if (v6)
    (*(void (**)(uint64_t, uint64_t, id))(v6 + 16))(v6, a2, v5);
  v7 = (id)objc_opt_self(a1[4]);
  v8 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "os_transaction RELEASE {name: com.apple.remindd.cloudkit.updateCloudContextState}", v10, 2u);
  }

  v9 = (id)objc_opt_self(a1[5]);
}

void sub_100047320(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  _QWORD v4[4];
  __int128 v5;
  id v6;
  uint64_t v7;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "processingQueue"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000473B0;
  v4[3] = &unk_1007D9348;
  v5 = *(_OWORD *)(a1 + 32);
  v3 = *(void **)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v6 = v3;
  dispatch_async(v2, v4);

}

void sub_1000473B0(uint64_t a1)
{
  id *v2;
  unsigned __int8 v3;
  NSObject *v4;
  NSObject *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v18[4];
  int8x16_t v19;
  id v20;
  _QWORD v21[4];
  int8x16_t v22;
  id v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD v26[5];
  id v27;
  uint64_t v28;
  uint8_t *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD v32[3];
  char v33;
  uint8_t buf[8];
  uint8_t *v35;
  uint64_t v36;
  char v37;

  v2 = (id *)(a1 + 32);
  if ((objc_msgSend(*(id *)(a1 + 32), "isInForeground") & 1) == 0)
  {
    v5 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_10067C850();
    goto LABEL_18;
  }
  if ((objc_msgSend(*v2, "isInternetReachable") & 1) == 0)
  {
    v5 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_10067C824();
    goto LABEL_18;
  }
  v3 = objc_msgSend(*v2, "isReadyToSync");
  v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  v5 = v4;
  if ((v3 & 1) == 0)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_10067C7A0((uint64_t)v2, v5);
LABEL_18:

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "processingSelectorDelayer"));
    objc_msgSend(v15, "cancelPreviousFireRequests");

    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pollingSelectorDelayer"));
    objc_msgSend(v16, "cancelPreviousFireRequests");

    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    objc_msgSend(*(id *)(a1 + 32), "setObjectIDsToProcess:", v17);

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    return;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Syncing enabled after updating account status", buf, 2u);
  }

  if ((objc_msgSend(*v2, "didCheckForLongLivedOperations") & 1) == 0)
  {
    objc_msgSend(*v2, "setDidCheckForLongLivedOperations:", 1);
    objc_msgSend(*v2, "checkForLongLivedOperations");
  }
  if (objc_msgSend(*v2, "needsToUpdateSubscriptions"))
    objc_msgSend(*v2, "updateSubscriptionsWithCompletionHandler:", 0);
  *(_QWORD *)buf = 0;
  v35 = buf;
  v36 = 0x2020000000;
  v37 = 0;
  v32[0] = 0;
  v32[1] = v32;
  v32[2] = 0x2020000000;
  v33 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v2, "context"));
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_100047728;
  v26[3] = &unk_1007D92A8;
  v26[4] = *(_QWORD *)(a1 + 32);
  v7 = v6;
  v8 = *(_QWORD *)(a1 + 40);
  v27 = v7;
  v28 = v8;
  v9 = *(_QWORD *)(a1 + 56);
  v30 = v32;
  v31 = v9;
  v29 = buf;
  objc_msgSend(v7, "performBlockAndWait:", v26);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_100047B64;
  v21[3] = &unk_1007D92D0;
  v11 = *(void **)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v24 = v32;
  v25 = v10;
  v22 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
  v23 = v11;
  v12 = objc_retainBlock(v21);
  v13 = v12;
  if (v35[24])
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v2, "containersByAccountID"));
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100047DC8;
    v18[3] = &unk_1007D9320;
    v19 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
    v20 = v13;
    objc_msgSend(v14, "enumerateKeysAndObjectsUsingBlock:", v18);

  }
  else
  {
    ((void (*)(_QWORD *))v12[2])(v12);
  }

  _Block_object_dispose(v32, 8);
  _Block_object_dispose(buf, 8);
}

void sub_100047700(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100047728(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *k;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  void *j;
  NSObject *v24;
  int v25;
  NSObject *v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint8_t buf[4];
  int v41;
  _BYTE v42[128];
  _BYTE v43[128];
  _QWORD v44[3];
  _BYTE v45[128];

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudKitAccountsInContext:", *(_QWORD *)(a1 + 40)));
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v2 = v1;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v36, v45, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v37;
    while (2)
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v37 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)i);
        if ((objc_msgSend(v7, "inactive") & 1) != 0)
        {
          v44[0] = CFSTR("InitWithStoreController");
          v44[1] = CFSTR("AccountsDidChange");
          v44[2] = CFSTR("CloudKitAccountChanged");
          v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v44, 3));
          if (objc_msgSend(v7, "didChooseToMigrate")
            && (objc_msgSend(v7, "didFinishMigration") & 1) == 0
            && objc_msgSend(v8, "containsObject:", *(_QWORD *)(a1 + 48)))
          {
            v26 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
              sub_10067C87C(v7, v26);

            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
            goto LABEL_17;
          }

        }
        else if (!objc_msgSend(v7, "didFinishMigration")
               || (v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "ckUserRecordName")),
                   v9,
                   !v9))
        {
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
          goto LABEL_17;
        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v36, v45, 16);
      if (v4)
        continue;
      break;
    }
  }
LABEL_17:

  v10 = *(_QWORD *)(a1 + 72);
  if (v10 == 1)
  {
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v19 = v2;
    v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v28, v42, 16);
    if (v20)
    {
      v21 = v20;
      v22 = *(_QWORD *)v29;
      while (2)
      {
        for (j = 0; j != v21; j = (char *)j + 1)
        {
          if (*(_QWORD *)v29 != v22)
            objc_enumerationMutation(v19);
          if ((objc_msgSend(*(id *)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)j), "inactive") & 1) == 0)
          {
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
            goto LABEL_39;
          }
        }
        v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v28, v42, 16);
        if (v21)
          continue;
        break;
      }
    }
LABEL_39:

    v24 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      v25 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
      *(_DWORD *)buf = 67109120;
      v41 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "UpdateCloudContextState: UpdateCloudContextStateSyncOptionForced, shouldSync = %d", buf, 8u);
    }

    if (objc_msgSend(*(id *)(a1 + 48), "isEqualToString:", CFSTR("SyncInterface(RemindtoolCloudKitRestart)")))*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
  }
  else if (!v10)
  {
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v11 = v2;
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v32, v43, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v33;
      while (2)
      {
        for (k = 0; k != v13; k = (char *)k + 1)
        {
          if (*(_QWORD *)v33 != v14)
            objc_enumerationMutation(v11);
          v16 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)k);
          if ((objc_msgSend(v16, "inactive") & 1) == 0)
          {
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "ckServerChangeTokens"));
            v18 = objc_msgSend(v17, "count");

            if (!v18)
            {
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
              goto LABEL_44;
            }
          }
        }
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v32, v43, 16);
        if (v13)
          continue;
        break;
      }
    }
LABEL_44:

  }
}

void sub_100047B64(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];
  id v8;
  uint8_t buf[4];
  uint64_t v10;
  __int16 v11;
  void *v12;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
  {
    v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_QWORD *)(a1 + 32);
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 64)));
      *(_DWORD *)buf = 138543618;
      v10 = v3;
      v11 = 2114;
      v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "UpdateCloudContextState: Triggering a sync {syncReason: %{public}@, syncOption: %{public}@}", buf, 0x16u);

    }
    v6 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(a1 + 40);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100047CE8;
    v7[3] = &unk_1007D8D60;
    v7[4] = v6;
    v8 = *(id *)(a1 + 48);
    objc_msgSend(v5, "syncWithReason:discretionary:completionHandler:", v6, 0, v7);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), 0, 0);
  }
}

void sub_100047CE8(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  id v9;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = 138543618;
    v7 = v5;
    v8 = 2112;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "UpdateCloudContextState: Sync completed {syncReason: %{public}@, error: %@}", (uint8_t *)&v6, 0x16u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100047DC8(_QWORD *a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  uint8_t buf[4];
  id v13;
  __int16 v14;
  uint64_t v15;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a1[4];
    *(_DWORD *)buf = 138543618;
    v13 = v3;
    v14 = 2114;
    v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "UpdateCloudContextState: Going to fetch user record with accountIdentifier: %{public}@ before sync {syncReason: %{public}@}", buf, 0x16u);
  }

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100047EF8;
  v8[3] = &unk_1007D92F8;
  v6 = (void *)a1[6];
  v9 = (id)a1[5];
  v10 = v3;
  v11 = v6;
  v7 = v3;
  objc_msgSend(v9, "operationQueueFetchUserRecordWithAccountID:completionHandler:", v7, v8);

}

void sub_100047EF8(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;

  v5 = a2;
  v6 = a3;
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "processingQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100047FE0;
  block[3] = &unk_1007D8E78;
  v11 = v6;
  v12 = a1[5];
  v13 = v5;
  v14 = a1[4];
  v15 = a1[6];
  v8 = v5;
  v9 = v6;
  dispatch_async(v7, block);

}

uint64_t sub_100047FE0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  int v9;
  uint64_t v10;
  __int16 v11;
  void *v12;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_10067C8FC();
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 40);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "ic_loggingDescription"));
    v9 = 138543619;
    v10 = v5;
    v11 = 2113;
    v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "UpdateCloudContextState: Fetched user record with accountIdentifier: %{public}@: %{private}@", (uint8_t *)&v9, 0x16u);

  }
  if (*(_QWORD *)(a1 + 48))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "cloudContextDelegate"));
    objc_msgSend(v7, "cloudContext:didFetchUserRecord:accountID:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
}

void sub_10004818C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint64_t v10;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100048234;
  v7[3] = &unk_1007D93E8;
  v8 = a2;
  v9 = a3;
  v10 = *(_QWORD *)(a1 + 32);
  v5 = v9;
  v6 = v8;
  objc_msgSend(v5, "fetchAllLongLivedOperationIDsWithCompletionHandler:", v7);

}

void sub_100048234(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  _QWORD v18[5];
  id v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_10067C96C();

  }
  v17 = v6;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v8 = v5;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v22;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v22 != v11)
          objc_enumerationMutation(v8);
        v13 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)v12);
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3221225472;
        v18[2] = sub_1000483E8;
        v18[3] = &unk_1007D93C0;
        v18[4] = v13;
        v14 = *(void **)(a1 + 40);
        v15 = *(id *)(a1 + 32);
        v16 = *(_QWORD *)(a1 + 48);
        v19 = v15;
        v20 = v16;
        objc_msgSend(v14, "fetchLongLivedOperationWithID:completionHandler:", v13, v18, v17);

        v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    }
    while (v10);
  }

}

void sub_1000483E8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void *i;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  unsigned __int8 v26;
  NSObject *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint8_t v37[128];
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  uint64_t v41;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_10067C9D8();

  }
  if (objc_msgSend(v5, "isFinished"))
  {
    v8 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ic_loggingDescription"));
      v10 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      v39 = v9;
      v40 = 2114;
      v41 = v10;
      v11 = "Not adding long-lived operation because it's finished: %{public}@, accountID: %{public}@";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, v11, buf, 0x16u);

      goto LABEL_27;
    }
    goto LABEL_27;
  }
  if (objc_msgSend(v5, "isCancelled"))
  {
    v8 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ic_loggingDescription"));
      v13 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      v39 = v9;
      v40 = 2114;
      v41 = v13;
      v11 = "Not adding long-lived operation because it's cancelled: %{public}@, accountID: %{public}@";
      goto LABEL_11;
    }
LABEL_27:

    goto LABEL_28;
  }
  v14 = objc_opt_class(CKModifyRecordsOperation, v12);
  if ((objc_opt_isKindOfClass(v5, v14) & 1) != 0)
  {
    v32 = v6;
    v8 = v5;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v31 = a1;
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "operationQueue"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "operations"));

    v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
    if (v17)
    {
      v19 = v17;
      v20 = *(_QWORD *)v34;
      while (2)
      {
        for (i = 0; i != v19; i = (char *)i + 1)
        {
          if (*(_QWORD *)v34 != v20)
            objc_enumerationMutation(v16);
          v22 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)i);
          v23 = objc_opt_class(CKOperation, v18);
          if ((objc_opt_isKindOfClass(v22, v23) & 1) != 0)
          {
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "operationID"));
            v25 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject operationID](v8, "operationID"));
            v26 = objc_msgSend(v24, "isEqualToString:", v25);

            if ((v26 & 1) != 0)
            {

              goto LABEL_26;
            }
          }
        }
        v19 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
        if (v19)
          continue;
        break;
      }
    }

    v27 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      v28 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject ic_loggingDescription](v8, "ic_loggingDescription"));
      v29 = *(_QWORD *)(v31 + 40);
      *(_DWORD *)buf = 138543618;
      v39 = v28;
      v40 = 2114;
      v41 = v29;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Adding long-lived operation back to the queue: %{public}@, accountID: %{public}@", buf, 0x16u);

    }
    objc_msgSend(*(id *)(v31 + 48), "addCallbackBlocksToModifyRecordsOperation:rootRecordIDsByShareID:", v8, 0);
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v31 + 48), "operationQueue"));
    objc_msgSend(v30, "addOperation:", v8);

    objc_msgSend(*(id *)(v31 + 48), "errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessary");
LABEL_26:
    v6 = v32;
    goto LABEL_27;
  }
LABEL_28:

}

void sub_100048B64(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  _UNKNOWN **v5;
  _UNKNOWN **v6;
  char *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  unsigned int v15;
  __int16 v16;
  int v17;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "retryCountsByOperationType"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  v4 = (void *)v3;
  v5 = &off_100804548;
  if (v3)
    v5 = (_UNKNOWN **)v3;
  v6 = v5;

  v7 = (char *)objc_msgSend(v6, "unsignedIntegerValue") + 1;
  v8 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v9 = *(_QWORD *)(a1 + 40);
    v12 = 138543874;
    v13 = v9;
    v14 = 1024;
    v15 = objc_msgSend(v6, "unsignedIntegerValue");
    v16 = 1024;
    v17 = (int)v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Incrementing retry count for %{public}@ from %d to %d", (uint8_t *)&v12, 0x18u);
  }

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v7));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "retryCountsByOperationType"));
  objc_msgSend(v11, "setObject:forKeyedSubscript:", v10, *(_QWORD *)(a1 + 40));

}

void sub_100048D60(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;

  v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v5 = 138543362;
    v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Clearing retry count for %{public}@", (uint8_t *)&v5, 0xCu);
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "retryCountsByOperationType"));
  objc_msgSend(v4, "removeObjectForKey:", *(_QWORD *)(a1 + 32));

}

id sub_10004907C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "shouldIgnoreErrorForBackoffTimer:operationType:", a2, *(_QWORD *)(a1 + 40));
}

void sub_100049124(uint64_t a1)
{
  id *v2;
  unsigned __int8 v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  double v7;
  double v8;
  void *v9;
  double v10;
  double v11;
  NSObject *v12;
  NSObject *v13;
  _QWORD block[6];
  _QWORD v15[5];
  uint8_t v16[4];
  double v17;
  __int128 buf;
  uint64_t v19;
  uint64_t v20;

  v2 = (id *)(a1 + 32);
  if ((objc_msgSend(*(id *)(a1 + 32), "isInternetReachable") & 1) != 0)
  {
    v3 = objc_msgSend(*v2, "isReadyToSync");
    v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    v5 = v4;
    if ((v3 & 1) != 0)
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v6 = *(_QWORD *)(a1 + 40);
        LODWORD(buf) = 138543362;
        *(_QWORD *)((char *)&buf + 4) = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "ICCC: Starting a retry timer if necessary for error: %{public}@", (uint8_t *)&buf, 0xCu);
      }

      objc_msgSend(*(id *)(a1 + 32), "timeIntervalToRetryAfterFromError:", *(_QWORD *)(a1 + 40));
      v8 = v7;
      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = &buf;
      v19 = 0x2020000000;
      v20 = 0;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "retryCountsByOperationType"));
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_1000493D4;
      v15[3] = &unk_1007D7DC0;
      v15[4] = &buf;
      objc_msgSend(v9, "enumerateKeysAndObjectsUsingBlock:", v15);

      v10 = (double)(unint64_t)(*(_QWORD *)(*((_QWORD *)&buf + 1) + 24) + 1)
          * (double)(unint64_t)(*(_QWORD *)(*((_QWORD *)&buf + 1) + 24) + 1);
      v11 = fmin(v10 + v10, 933.0);
      if (v11 > v8)
      {
        v12 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v16 = 134217984;
          v17 = v11;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Using backoff time for retry (%.0fs)", v16, 0xCu);
        }

        v8 = v11;
      }
      if (v8 > 0.0)
      {
        objc_msgSend(*v2, "setHasRetryTimer:", 1);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100049418;
        block[3] = &unk_1007D9438;
        block[4] = *v2;
        *(double *)&block[5] = v8;
        dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
      }
      _Block_object_dispose(&buf, 8);
    }
    else
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        sub_10067CA50((uint64_t)v2, v5);

    }
  }
  else
  {
    v13 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      sub_10067CAD4();

  }
}

void sub_1000493AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000493D4(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v4;
  id result;
  unint64_t v6;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  result = objc_msgSend(a3, "unsignedIntegerValue");
  if (v4 <= (unint64_t)result)
    v6 = (unint64_t)result;
  else
    v6 = v4;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v6;
  return result;
}

void sub_100049418(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  unsigned __int8 v5;
  NSObject *v6;
  int v7;
  void *v8;
  _DWORD v9[2];

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "retryTimer"));
  if (!v2
    || (v3 = (void *)v2,
        v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "retryTimer")),
        v5 = objc_msgSend(v4, "isValid"),
        v4,
        v3,
        (v5 & 1) == 0))
  {
    v6 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = (int)*(double *)(a1 + 40);
      v9[0] = 67109120;
      v9[1] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Retrying operations after %ds", (uint8_t *)v9, 8u);
    }

    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:](NSTimer, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", *(_QWORD *)(a1 + 32), "retryOperationsIfNecessary", 0, 0, *(double *)(a1 + 40)));
    objc_msgSend(*(id *)(a1 + 32), "setRetryTimer:", v8);

  }
}

void sub_100049630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

id sub_100049644(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "retryTimer"));
  objc_msgSend(v2, "invalidate");

  objc_msgSend(*(id *)(a1 + 32), "setRetryTimer:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "setHasRetryTimer:", 0);
}

void sub_10004968C(uint64_t a1)
{
  id *v1;
  unsigned __int8 v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  NSObject *v22;
  NSObject *v23;
  id v24;
  _QWORD *v25;
  id v26;
  void *v27;
  void *v28;
  NSObject *v29;
  void *v30;
  BOOL v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  NSObject *v36;
  void *v37;
  NSObject *v38;
  NSObject *v39;
  _QWORD v40[4];
  id v41;
  _QWORD v42[5];
  _QWORD v43[4];
  id v44;
  id v45;
  id location;
  uint8_t buf[4];
  void *v48;

  v1 = (id *)(a1 + 32);
  if ((objc_msgSend(*(id *)(a1 + 32), "isInternetReachable") & 1) != 0)
  {
    v2 = objc_msgSend(*v1, "isReadyToSync");
    v3 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    v4 = v3;
    if ((v2 & 1) != 0)
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Retrying operations", buf, 2u);
      }

      objc_initWeak(&location, *v1);
      if (objc_msgSend(*v1, "needsToUpdateSubscriptions"))
      {
        v6 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Retrying to update subscriptions", buf, 2u);
        }

        v7 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "os_transaction INIT {name: com.apple.remindd.cloudkit.retry.updateSubscription}", buf, 2u);
        }

        v8 = (void *)os_transaction_create("com.apple.remindd.cloudkit.retry.updateSubscription");
        v9 = *v1;
        v43[0] = _NSConcreteStackBlock;
        v43[1] = 3221225472;
        v43[2] = sub_100049E90;
        v43[3] = &unk_1007D7CB8;
        objc_copyWeak(&v45, &location);
        v10 = v8;
        v44 = v10;
        objc_msgSend(v9, "updateSubscriptionsWithCompletionHandler:", v43);

        objc_destroyWeak(&v45);
      }
      v11 = (void *)objc_opt_class(*v1, v5);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v1, "accountZoneIDsNeedingToBeSaved"));
      LODWORD(v11) = objc_msgSend(v11, "haveZoneIDsInAccountZoneIDs:", v12);

      if ((_DWORD)v11)
      {
        v13 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Retrying to save record zones", buf, 2u);
        }

        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v1, "containersByAccountID"));
        v42[0] = _NSConcreteStackBlock;
        v42[1] = 3221225472;
        v42[2] = sub_100049F48;
        v42[3] = &unk_1007D9030;
        v42[4] = *v1;
        objc_msgSend(v14, "enumerateKeysAndObjectsUsingBlock:", v42);

      }
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v1, "databaseScopeStringsNeedingRetryFetchChangesByAccountID"));
      v16 = objc_msgSend(v15, "count") == 0;

      if (!v16)
      {
        v18 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v1, "databaseScopeStringsNeedingRetryFetchChangesByAccountID"));
          *(_DWORD *)buf = 138543362;
          v48 = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Retrying CKFetchDatabaseChangesOperation databaseScopes: %{public}@", buf, 0xCu);

        }
        objc_msgSend(*v1, "syncWithReason:discretionary:completionHandler:", CFSTR("RetryCKFetchDatabaseChangesOperation"), 0, &stru_1007D94A0);
      }
      v20 = (void *)objc_opt_class(*v1, v17);
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v1, "accountZoneIDsNeedingFetchChanges"));
      LODWORD(v20) = objc_msgSend(v20, "haveZoneIDsInAccountZoneIDs:", v21);

      if ((_DWORD)v20)
      {
        v22 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Retrying to fetch record zone changes", buf, 2u);
        }

        v23 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "os_transaction INIT {name: com.apple.remindd.cloudkit.retry.fetchRecordZoneChanges}", buf, 2u);
        }

        v40[0] = _NSConcreteStackBlock;
        v40[1] = 3221225472;
        v40[2] = sub_10004A240;
        v40[3] = &unk_1007D94C8;
        v24 = (id)os_transaction_create("com.apple.remindd.cloudkit.retry.fetchRecordZoneChanges");
        v41 = v24;
        v25 = objc_retainBlock(v40);
        v26 = *v1;
        v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionary](NSDictionary, "dictionary"));
        objc_msgSend(v26, "fetchRecordZoneChangesWithReason:cloudSchemaCatchUpSyncContextMap:completionHandler:", CFSTR("RetryAccountZoneIDsNeedingFetchChanges"), v27, v25);

      }
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v1, "objectIDsToProcess"));
      if (objc_msgSend(v28, "count"))
      {

      }
      else
      {
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v1, "objectIDsToRetry"));
        v31 = objc_msgSend(v30, "count") == 0;

        if (v31)
        {
LABEL_37:
          v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v1, "containersByAccountID"));
          v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "allKeys"));

          v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v1, "setUpCloudSchemaCatchUpSyncContextMapWithAccountIDs:syncReason:", v34, CFSTR("RetryCloudSchemaCatchUpSync")));
          if (objc_msgSend(v35, "count"))
          {
            v36 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
            if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
            {
              v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "allKeys"));
              *(_DWORD *)buf = 138543362;
              v48 = v37;
              _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "CloudSchemaCatchUpSync: Retrying catch up sync for accounts: %{public}@", buf, 0xCu);

            }
            objc_msgSend(*v1, "syncWithReason:discretionary:completionHandler:", CFSTR("RetryCloudSchemaCatchUpSync"), 0, &stru_1007D94E8);
          }
          else
          {
            if (objc_msgSend(*v1, "needsToMergeLocalObjects"))
            {
              v38 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
              if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "MERGE.LOCAL: Retrying to merge local objects", buf, 2u);
              }

              objc_msgSend(*v1, "syncWithReason:discretionary:completionHandler:", CFSTR("RetryMergeLocalObjects"), 0, &stru_1007D9508);
            }
            if (objc_msgSend(*v1, "needsToUpdateCloudContextOnAccountsDidChange"))
            {
              v39 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
              if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Retry calling UpdateCloudContext after accountsDidChange and RDAccountInitializer completed works.", buf, 2u);
              }

              objc_msgSend(*v1, "setNeedsToUpdateCloudContextOnAccountsDidChange:", 0);
              objc_msgSend(*v1, "updateCloudContextStateWithSyncOption:syncReason:withCompletionHandler:", 1, CFSTR("AccountsDidChange"), 0);
            }
          }

          objc_destroyWeak(&location);
          return;
        }
      }
      v32 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Retrying to process changes", buf, 2u);
      }

      objc_msgSend(*v1, "processPendingCloudObjectsWithOperationName:", ICNSBlockOperationNameProcessObjectsForRetryOperations);
      goto LABEL_37;
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_10067CB00((uint64_t)v1, v4);

  }
  else
  {
    v29 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      sub_10067CB84();

  }
}

void sub_100049E1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 104));
  _Unwind_Resume(a1);
}

id sub_100049E90(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;
  NSObject *v6;
  uint8_t v8[16];

  v3 = (id *)(a1 + 40);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend(WeakRetained, "incrementOrClearRetryCountForOperationType:error:", CFSTR("Subscriptions"), v4);

  v6 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "os_transaction RELEASE {name: com.apple.remindd.cloudkit.retry.updateSubscription}", v8, 2u);
  }

  return (id)objc_opt_self(*(_QWORD *)(a1 + 32));
}

void sub_100049F48(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  uint8_t buf[4];
  id v15;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationToSaveZonesIfNecessaryForAccountID:", v3));
  if (v4)
  {
    v5 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v15 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "os_transaction INIT {name: com.apple.remindd.cloudkit.retry.zoneIDsNeedingToBeSaved[%@]}", buf, 0xCu);
    }

    v6 = (void *)os_transaction_create("com.apple.remindd.cloudkit.retry.zoneIDsNeedingToBeSaved");
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10004A0E0;
    v10[3] = &unk_1007D9460;
    v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "modifyRecordZonesCompletionBlock"));
    v11 = v3;
    v12 = v6;
    v7 = v6;
    v8 = v13;
    objc_msgSend(v4, "setModifyRecordZonesCompletionBlock:", v10);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationQueue"));
    objc_msgSend(v9, "addOperation:", v4);

    objc_msgSend(*(id *)(a1 + 32), "errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessary");
  }

}

id sub_10004A0E0(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  int v5;
  uint64_t v6;

  (*(void (**)(void))(a1[6] + 16))();
  v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[4];
    v5 = 138412290;
    v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "os_transaction RELEASE {name: com.apple.remindd.cloudkit.retry.zoneIDsNeedingToBeSaved[%@]}", (uint8_t *)&v5, 0xCu);
  }

  return (id)objc_opt_self(a1[5]);
}

void sub_10004A1A8(id a1, NSError *a2)
{
  NSError *v2;
  NSObject *v3;
  NSObject *v4;
  uint8_t v5[16];

  v2 = a2;
  v3 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_10067CBB0();
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CKFetchDatabaseChangesOperation: Retry sync completed.", v5, 2u);
  }

}

void sub_10004A240(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  id v6;
  int v7;
  id v8;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 138412290;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Completed retry to fetch record zone changes {error: %@}", (uint8_t *)&v7, 0xCu);
  }

  v5 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "os_transaction RELEASE {name: com.apple.remindd.cloudkit.retry.fetchRecordZoneChanges}", (uint8_t *)&v7, 2u);
  }

  v6 = (id)objc_opt_self(*(_QWORD *)(a1 + 32));
}

void sub_10004A354(id a1, NSError *a2)
{
  NSError *v2;
  NSObject *v3;
  NSObject *v4;
  uint8_t v5[16];

  v2 = a2;
  v3 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_10067CC14();
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CloudSchemaCatchUpSync: Retry catch-up sync completed.", v5, 2u);
  }

}

void sub_10004A3EC(id a1, NSError *a2)
{
  NSError *v2;
  NSObject *v3;
  NSObject *v4;
  uint8_t v5[16];

  v2 = a2;
  v3 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_10067CC78();
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "MERGE.LOCAL: Retry merging local objects completed.", v5, 2u);
  }

}

void sub_10004AA14(uint64_t a1)
{
  void *v1;
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  void *j;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  NSObject *v29;
  uint64_t v30;
  id v31;
  id v32;
  __CFString *v33;
  uint64_t v34;
  void *v35;
  unsigned int v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint8_t buf[4];
  id v50;
  __int16 v51;
  __CFString *v52;
  __int16 v53;
  void *v54;
  __int16 v55;
  unsigned int v56;
  _BYTE v57[128];
  _BYTE v58[128];

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAccount accountWithCKIdentifier:context:](REMCDAccount, "accountWithCKIdentifier:context:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[REMCKServerChangeToken serverChangeTokenForAccount:zoneID:databaseScope:context:](REMCKServerChangeToken, "serverChangeTokenForAccount:zoneID:databaseScope:context:", v3, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 40)));
    v5 = v4;
    if (v4)
      objc_msgSend(v4, "setServerChangeToken:", *(_QWORD *)(a1 + 64));
    else
      v31 = +[REMCKServerChangeToken addServerChangeTokenForAccount:ckServerChangeToken:zoneID:databaseScope:context:](REMCKServerChangeToken, "addServerChangeTokenForAccount:ckServerChangeToken:zoneID:databaseScope:context:", v3, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 40));

  }
  else
  {
    v6 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      v50 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "saveServerChangeToken: The cloudKitAccount is nil for accountID %{public}@", buf, 0xCu);
    }

    v39 = a1;
    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "cloudKitAccountsInContext:", *(_QWORD *)(a1 + 40)));
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v45, v58, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v46;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(_QWORD *)v46 != v11)
            objc_enumerationMutation(v8);
          v13 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * (_QWORD)i);
          v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "name"));
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "identifier"));
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "UUIDString"));
          v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(name: %@, id: %@, inactive: %d)"), v1, v15, objc_msgSend(v13, "inactive")));
          objc_msgSend(v40, "addObject:", v16);

        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v45, v58, 16);
      }
      while (v10);
    }

    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v39 + 48), "appleAccountUtilities"));
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "unsafeUntilSystemReady_primaryICloudACAccount"));

    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v39 + 48), "appleAccountUtilities"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "unsafeUntilSystemReady_allICloudAccountsWithCloudKitEnabled"));

    v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v41, v57, 16);
    if (v21)
    {
      v22 = v21;
      v23 = *(_QWORD *)v42;
      do
      {
        for (j = 0; j != v22; j = (char *)j + 1)
        {
          if (*(_QWORD *)v42 != v23)
            objc_enumerationMutation(v20);
          v25 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)j);
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "accountDescription"));
          v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "identifier"));
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "aa_accountClass"));
          v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(name: %@, id: %@, class: %@)"), v26, v27, v28));
          objc_msgSend(v18, "addObject:", v1);

        }
        v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v41, v57, 16);
      }
      while (v22);
    }

    v29 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    a1 = v39;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
    {
      v32 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "componentsJoinedByString:", CFSTR(", ")));
      if (v38)
      {
        v34 = objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "accountDescription"));
        v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "identifier"));
        v37 = (void *)v34;
        v33 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(name: %@, id: %@)"), v34, v1));
      }
      else
      {
        v33 = CFSTR("nil");
      }
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "componentsJoinedByString:", CFSTR(", ")));
      v36 = objc_msgSend(*(id *)(v39 + 48), "isReadyToSync");
      *(_DWORD *)buf = 138413058;
      v50 = v32;
      v51 = 2112;
      v52 = v33;
      v53 = 2112;
      v54 = v35;
      v55 = 1024;
      v56 = v36;
      _os_log_fault_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "Trying to save server change token without an account {accounts: [%@], primaryACAccount: %@, acAccounts: [%@], isReadyToSync: %d}", buf, 0x26u);
      if (v38)
      {

      }
    }

    v3 = 0;
  }
  objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 48), v30), "saveAndFaultIfFailWithContext:shouldTakeServerAsTruth:logDescription:", *(_QWORD *)(a1 + 40), 1, CFSTR("saving server change token"));

}

void sub_10004B0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004B0CC(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAccount accountWithCKIdentifier:context:](REMCDAccount, "accountWithCKIdentifier:context:", a1[4], a1[5]));
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[REMCKServerChangeToken serverChangeTokenForAccount:zoneID:databaseScope:context:](REMCKServerChangeToken, "serverChangeTokenForAccount:zoneID:databaseScope:context:", v2, a1[6], a1[8], a1[5]));
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "serverChangeToken"));
    v5 = *(_QWORD *)(a1[7] + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

  }
  else
  {
    v7 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_10067CE04();

  }
}

void sub_10004B36C(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAccount accountWithCKIdentifier:context:](REMCDAccount, "accountWithCKIdentifier:context:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[REMCKServerChangeToken serverChangeTokenForAccount:zoneID:databaseScope:context:](REMCKServerChangeToken, "serverChangeTokenForAccount:zoneID:databaseScope:context:", v2, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40)));
    if (v3)
    {
      objc_msgSend(*(id *)(a1 + 40), "deleteObject:", v3);
      objc_msgSend(v2, "removeCkServerChangeTokensObject:", v3);
      objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 56), v4), "saveAndFaultIfFailWithContext:shouldTakeServerAsTruth:logDescription:", *(_QWORD *)(a1 + 40), 1, CFSTR("deleting server change token"));
    }

  }
  else
  {
    v5 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_10067CEF4();

  }
}

id sub_10004B510(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void *i;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *j;
  uint64_t v13;
  id obj;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  _BYTE v25[128];

  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudKitAccountsInContext:", *(_QWORD *)(a1 + 40)));
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v21 != v4)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)i);
        v16 = 0u;
        v17 = 0u;
        v18 = 0u;
        v19 = 0u;
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "ckServerChangeTokens"));
        v8 = objc_msgSend(v7, "copy");

        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
        if (v9)
        {
          v10 = v9;
          v11 = *(_QWORD *)v17;
          do
          {
            for (j = 0; j != v10; j = (char *)j + 1)
            {
              if (*(_QWORD *)v17 != v11)
                objc_enumerationMutation(v8);
              v13 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)j);
              objc_msgSend(*(id *)(a1 + 40), "deleteObject:", v13);
              objc_msgSend(v6, "removeCkServerChangeTokensObject:", v13);
            }
            v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
          }
          while (v10);
        }

      }
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
    }
    while (v3);
  }

  return objc_msgSend(*(id *)(a1 + 40), "ic_saveWithLogDescription:", CFSTR("deleting all server change tokens"));
}

void sub_10004B82C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v3 = *(void **)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10004B900;
  v8[3] = &unk_1007D95A8;
  v9 = v2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10004B96C;
  v5[3] = &unk_1007D95F8;
  v4 = *(void **)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  v7 = *(id *)(a1 + 48);
  objc_msgSend(v3, "updateUserRecordWithAccountID:updateFunction:completionHandler:", v9, v8, v5);

}

void sub_10004B900(uint64_t a1, uint64_t a2)
{
  NSObject *v2;

  if (a2)
  {
    +[REMCDAccount clearUserRecord:](REMCDAccount, "clearUserRecord:", a2);
  }
  else
  {
    v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_10067CF84();

  }
}

void sub_10004B96C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[4];
  id v15;
  uint8_t buf[8];
  _QWORD v17[2];

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_10067CFEC();
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Successfully cleaned user record", buf, 2u);
    }

    v7 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v6), "appZoneID");
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v17[0] = v8;
    v10 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v9), "migrationZoneID");
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v17[1] = v11;
    v5 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v17, 2));

    v12 = *(void **)(a1 + 32);
    v13 = *(_QWORD *)(a1 + 40);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10004BAF8;
    v14[3] = &unk_1007D95D0;
    v15 = *(id *)(a1 + 48);
    objc_msgSend(v12, "deleteRecordZonesWithZoneIDs:accountID:markZonesAsUserPurged:completionHandler:", v5, v13, 1, v14);

  }
}

uint64_t sub_10004BAF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10004BE00(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  const __CFString *v6;
  void *v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  v6 = CFSTR("operationCount");
  v3 = *(_QWORD *)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 40)));
  v7 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1));
  objc_msgSend(v2, "postNotificationName:object:userInfo:", CFSTR("ICCloudContextHasPendingOperationsDidChangeNotification"), v3, v5);

}

id sub_10004BED8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "printOperationQueue");
}

void sub_10004BF98(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  const __CFString *v4;
  void *v5;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "icUserDefaults"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "userDefaults"));
  v4 = CFSTR("PollCloudKitWhenLaunchingAndBackgrounding");
  v5 = &__kCFBooleanFalse;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));
  objc_msgSend(v2, "registerDefaults:", v3);

}

void sub_10004C110(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  uint8_t v7[16];

  objc_msgSend(*(id *)(a1 + 32), "clearSubscribedSubscriptionIDs");
  objc_msgSend(*(id *)(a1 + 32), "unobservePrimaryCloudKitAccountPersonIDSaltChanges");
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "storeController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "inMemoryPrimaryActiveCKAccountREMObjectID"));

  if (!v3)
  {
    v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Primary CK account may have just been disabled, force run observePrimaryCloudKitAccountPersonIDSaltChanges to invoke the 'errorHandler' to unset personIDs in non-primary CK accounts", v7, 2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "observePrimaryCloudKitAccountPersonIDSaltChanges");
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accountPersonIDSaltObserver"));

    if (v5)
    {
      v6 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
        sub_10067D050();

    }
  }
}

id sub_10004C344(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateCloudContextStateWithReason:", CFSTR("AccountsDidChangeCancelEverything"));
}

void sub_10004C5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004C5D8(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accountInitializerDidCompleteOnAccountsDidChangeObserver"));

  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accountInitializerDidCompleteOnAccountsDidChangeObserver"));
    objc_msgSend(v3, "unobserve");

    objc_msgSend(*(id *)(a1 + 32), "setAccountInitializerDidCompleteOnAccountsDidChangeObserver:", 0);
  }
}

void sub_10004C638(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  id v8;
  uint8_t v9[16];
  uint8_t buf[16];

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v5 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "ICCC: Received RDAccountInitializer.DidCompleteInitializeAllAccountsNotification after accountsDidEnable.", buf, 2u);
    }

    objc_msgSend(WeakRetained, "didCompleteInitializeAllAccounts:", v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "accountInitializerDidCompleteOnAccountsDidChangeObserver"));
    objc_msgSend(v6, "unobserve");

    objc_msgSend(WeakRetained, "setAccountInitializerDidCompleteOnAccountsDidChangeObserver:", 0);
    v7 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "os_transaction RELEASE {name: com.apple.remindd.cloudkit.accountsDidChange.pending.RDAccountInitializerDidCompleteInitializeAllAccountsObserver}", v9, 2u);
    }

    v8 = (id)objc_opt_self(*(_QWORD *)(a1 + 32));
  }

}

id sub_10004CA84(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateCloudContextStateWithReason:", CFSTR("ApplicationWillEnterForeground"));
}

void sub_10004CEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

id sub_10004CF38(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "os_transaction RELEASE {name: com.apple.remindd.cloudkit.sync.aps}", v4, 2u);
  }

  return (id)objc_opt_self(*(_QWORD *)(a1 + 32));
}

void sub_10004CFB8(uint64_t a1)
{
  NSObject *v2;
  os_signpost_id_t v3;
  NSObject *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  _QWORD v16[4];
  NSObject *v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;
  os_signpost_id_t v23;
  uint8_t buf[8];
  const __CFString *v25;
  const __CFString *v26;

  v2 = objc_claimAutoreleasedReturnValue(+[REMSignpost sync](REMSignpost, "sync"));
  v3 = os_signpost_id_generate(v2);
  v4 = v2;
  v5 = v4;
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_BEGIN, v3, "cloudkit.aps", "", buf, 2u);
  }

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[DABabysitter sharedBabysitter](DABabysitter, "sharedBabysitter"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "tokenByRegisteringAccount:forOperationWithName:", *(_QWORD *)(a1 + 32), CFSTR("SYNC[APS]")));

  if (v8)
  {
    v9 = *(void **)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 40);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_10004D250;
    v16[3] = &unk_1007D9620;
    v11 = v5;
    v23 = v3;
    v12 = *(_QWORD *)(a1 + 32);
    v17 = v11;
    v18 = v12;
    v19 = *(id *)(a1 + 48);
    v20 = v6;
    v21 = v8;
    v22 = *(id *)(a1 + 56);
    objc_msgSend(v9, "handleNotification:completionHandler:", v10, v16);

    v13 = v17;
  }
  else
  {
    v13 = objc_claimAutoreleasedReturnValue(+[REMError babySatErrorWithOperationName:](REMError, "babySatErrorWithOperationName:", CFSTR("com.apple.remindd.cloudkit.sync.crashDetected")));
    v25 = CFSTR("identifier");
    v26 = CFSTR("SYNC[APS]");
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1));
    +[Analytics postEventWithName:payload:error:performAutoBugCaptureOnError:](_TtC19ReminderKitInternal9Analytics, "postEventWithName:payload:error:performAutoBugCaptureOnError:", CFSTR("com.apple.remindd.cloudkit.sync.crashDetected"), v14, v13, 1);

    v15 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
      sub_10067D1DC(a1 + 32, v15);

    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }

}

void sub_10004D250(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  os_signpost_id_t v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  id v13;
  void **v14;
  uint64_t v15;
  id (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  id v19;
  uint8_t buf[4];
  uint64_t v21;

  v3 = a2;
  if (v3)
  {
    v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_10067D25C();

  }
  else
  {
    v5 = *(id *)(a1 + 32);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 80);
    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_INTERVAL_END, v7, "cloudkit.aps", "", buf, 2u);
    }

    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "processingQueue"));
    v14 = _NSConcreteStackBlock;
    v15 = 3221225472;
    v16 = sub_10004D448;
    v17 = &unk_1007D7C68;
    v9 = *(void **)(a1 + 48);
    v18 = *(_QWORD *)(a1 + 40);
    v19 = v9;
    dispatch_async(v8, &v14);

    v10 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit", v14, v15, v16, v17, v18));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      objc_msgSend(v11, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 56));
      *(_DWORD *)buf = 134217984;
      v21 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "SYNC[APS] END {duration: %.4f}", buf, 0xCu);

    }
  }
  v13 = (id)objc_opt_self(*(_QWORD *)(a1 + 64));
  (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

}

id sub_10004D448(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_clearCloudDirtyForToken:", *(_QWORD *)(a1 + 40));
}

void sub_10004DB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_10004DB9C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  NSObject *v5;
  NSObject *v6;
  uint8_t v7[16];

  v4 = a3;
  v5 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Completed save record zone Reminders for force-setting migration state", v7, 2u);
  }

  if (v4)
  {
    v6 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_10067D344();

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_10004DC5C(uint64_t a1, void *a2)
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  NSObject *v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  _QWORD v24[4];
  id v25;
  uint64_t v26;
  id v27;
  uint8_t buf[4];
  id v29;
  __int16 v30;
  id v31;

  v4 = a2;
  v5 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138543618;
    v29 = v6;
    v30 = 2112;
    v31 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Fetched user record for force-setting migration state in accountID: %{public}@, {record: %@}", buf, 0x16u);
  }

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "recordID"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "recordName"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@/%@"), CFSTR("Account"), v8));

  v10 = objc_alloc((Class)CKRecordID);
  v12 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 40), v11), "appZoneID");
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  v14 = objc_msgSend(v10, "initWithRecordName:zoneID:", v9, v13);

  if (*(_BYTE *)(a1 + 80))
  {
    v15 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v29 = v14;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Force-setting migration state: create an account record for force-setting migration with id: %{public}@", buf, 0xCu);
    }

    v16 = objc_msgSend(objc_alloc((Class)CKRecord), "initWithRecordType:recordID:", CFSTR("Account"), v14);
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    v18 = *(void **)(v17 + 40);
    *(_QWORD *)(v17 + 40) = v16;

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  }
  else
  {
    v19 = objc_alloc((Class)CKFetchRecordsOperation);
    v27 = v14;
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v27, 1));
    v21 = objc_msgSend(v19, "initWithRecordIDs:", v20);

    objc_msgSend(*(id *)(a1 + 40), "configureOperation:", v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "privateCloudDatabase"));
    objc_msgSend(v21, "setDatabase:", v22);

    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_10004DF60;
    v24[3] = &unk_1007D9698;
    v26 = *(_QWORD *)(a1 + 72);
    v25 = *(id *)(a1 + 48);
    objc_msgSend(v21, "setPerRecordCompletionBlock:", v24);
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "database"));
    objc_msgSend(v23, "addOperation:", v21);

  }
}

void sub_10004DF60(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  id v7;
  int v8;
  id v9;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 138412290;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Fetched account record for force-setting migration state {record: %@}", (uint8_t *)&v8, 0xCu);
  }

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v3;
  v7 = v3;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10004E040(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  id v9;

  v5 = a4;
  v6 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    LOWORD(v8) = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Completed modify records operation for force-setting migration state", (uint8_t *)&v8, 2u);
  }

  if (v5)
  {
    v7 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 138543362;
      v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Failed to modify records operation for force-setting migration state {error: %{public}@}", (uint8_t *)&v8, 0xCu);
    }

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

id sub_10004E1DC(uint64_t a1)
{
  _BOOL8 v2;
  id result;
  NSObject *v4;
  _BOOL4 v5;
  const char *v6;
  uint8_t *v7;
  __int16 v8;
  __int16 v9;

  if (*(_BYTE *)(a1 + 40))
    v2 = *(_BYTE *)(a1 + 41) == 0;
  else
    v2 = 0;
  objc_msgSend(*(id *)(a1 + 32), "adjustAPSNotificationDebouncerIntervalWithMigrationState:", v2);
  result = objc_msgSend(*(id *)(a1 + 32), "uploadSuspended");
  if (v2 != (_DWORD)result)
  {
    v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (v2)
    {
      if (v5)
      {
        v9 = 0;
        v6 = "Suspend upload";
        v7 = (uint8_t *)&v9;
LABEL_10:
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v6, v7, 2u);
      }
    }
    else if (v5)
    {
      v8 = 0;
      v6 = "Resume upload";
      v7 = (uint8_t *)&v8;
      goto LABEL_10;
    }

    return objc_msgSend(*(id *)(a1 + 32), "setUploadSuspended:", v2);
  }
  return result;
}

void sub_10004E370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004E388(uint64_t a1)
{
  id v2;
  _QWORD v3[5];

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudKitAccountsInContext:", *(_QWORD *)(a1 + 40)));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10004E400;
  v3[3] = &unk_1007D9710;
  v3[4] = *(_QWORD *)(a1 + 48);
  objc_msgSend(v2, "enumerateObjectsUsingBlock:", v3);

}

void sub_10004E400(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  unsigned int v7;
  NSObject *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  unsigned int v13;
  __int16 v14;
  unsigned int v15;

  v6 = a2;
  if (objc_msgSend(v6, "didChooseToMigrate"))
    v7 = objc_msgSend(v6, "didFinishMigration") ^ 1;
  else
    v7 = 0;
  v8 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "remObjectID"));
    v10 = 138543874;
    v11 = v9;
    v12 = 1024;
    v13 = objc_msgSend(v6, "didChooseToMigrate");
    v14 = 1024;
    v15 = objc_msgSend(v6, "didFinishMigration");
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Checking if we should adjust APS debouncer interval according to migration state of {account: %{public}@, didChooseToMigrate: %d, didFinishMigration: %d}", (uint8_t *)&v10, 0x18u);

  }
  if (v7)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }

}

void sub_10004EBC8(uint64_t a1)
{
  unsigned __int8 v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  __int128 v9;
  id v10;
  uint64_t v11;
  void *i;
  uint64_t v13;
  void *v14;
  unsigned int v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t buf[4];
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  _BYTE v35[24];
  _BYTE v36[128];

  v25 = (void *)objc_claimAutoreleasedReturnValue(+[ICCloudContext _systemBuildVersion](ICCloudContext, "_systemBuildVersion"));
  if (*(_QWORD *)(a1 + 32))
  {
    v2 = objc_msgSend(*(id *)(a1 + 48), "retryPerformingCloudSchemaCatchUpSync");
    v3 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    v4 = v3;
    if ((v2 & 1) != 0)
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        v5 = *(_QWORD *)(a1 + 32);
        v6 = *(_QWORD *)(a1 + 56);
        v7 = *(_QWORD *)(a1 + 64);
        *(_DWORD *)buf = 138544130;
        v31 = v6;
        v32 = 2114;
        v33 = v5;
        v34 = 2114;
        *(_QWORD *)v35 = v25;
        *(_WORD *)&v35[8] = 2114;
        *(_QWORD *)&v35[10] = v7;
        _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "...SYNC[%{public}@] CloudSchemaCatchUpSync: completed with error, persistenceCloudSchemaVersion not bumped yet, will retry later {error: %{public}@, buildVersion: %{public}@, debugLabel: %{public}@}", buf, 0x2Au);
      }
    }
    else if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v21 = *(_QWORD *)(a1 + 32);
      v22 = *(_QWORD *)(a1 + 56);
      v23 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 138544130;
      v31 = v22;
      v32 = 2114;
      v33 = v21;
      v34 = 2114;
      *(_QWORD *)v35 = v25;
      *(_WORD *)&v35[8] = 2114;
      *(_QWORD *)&v35[10] = v23;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "...SYNC[%{public}@] CloudSchemaCatchUpSync: completed with error but max retry reached, persistenceCloudSchemaVersion bumped {error: %{public}@, buildVersion: %{public}@, debugLabel: %{public}@}", buf, 0x2Au);
    }
  }
  else
  {
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "allKeys"));
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v8 = -[NSObject countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v26, v36, 16);
    if (v8)
    {
      v10 = v8;
      v11 = *(_QWORD *)v27;
      *(_QWORD *)&v9 = 138544386;
      v24 = v9;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(_QWORD *)v27 != v11)
            objc_enumerationMutation(v4);
          v13 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)i);
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "contextForAccountID:withBatchFetchHelper:", v13, 0, v24));
          v15 = +[ICCloudSchemaCompatibilityUtils cloudSchemaCatchUpSyncDidCompleteWithAccountIdentifier:context:](ICCloudSchemaCompatibilityUtils, "cloudSchemaCatchUpSyncDidCompleteWithAccountIdentifier:context:", v13, v14);
          v16 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            v17 = *(_QWORD *)(a1 + 56);
            v18 = *(_QWORD *)(a1 + 64);
            *(_DWORD *)buf = v24;
            v31 = v17;
            v32 = 2114;
            v33 = v13;
            v34 = 1024;
            *(_DWORD *)v35 = v15;
            *(_WORD *)&v35[4] = 2114;
            *(_QWORD *)&v35[6] = v25;
            *(_WORD *)&v35[14] = 2114;
            *(_QWORD *)&v35[16] = v18;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "...SYNC[%{public}@] CloudSchemaCatchUpSync: completed successfully, persistenceCloudSchemaVersion bumped {accountIdentifier: %{public}@, didUpdate: %d, buildVersion: %{public}@, debugLabel: %{public}@}", buf, 0x30u);
          }

          if (v15)
          {
            v19 = (void *)objc_claimAutoreleasedReturnValue(+[REMUserDefaults daemonUserDefaults](REMUserDefaults, "daemonUserDefaults"));
            v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
            objc_msgSend(v19, "setCloudKitSchemaCatchUpSyncLastSuccessDate:", v20);

            objc_msgSend(v19, "setCloudKitSchemaCatchUpSyncLastSuccessBuildVersion:", v25);
          }

        }
        v10 = -[NSObject countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v26, v36, 16);
      }
      while (v10);
    }
  }

}

BOOL sub_10004FE50(id a1, Class a2, unint64_t a3, BOOL *a4)
{
  unsigned int v5;

  v5 = -[objc_class isSubclassOfClass:](a2, "isSubclassOfClass:", objc_opt_class(REMCDObject, a2));
  if (v5)
    LOBYTE(v5) = -[objc_class shouldAttemptLocalObjectMerge](a2, "shouldAttemptLocalObjectMerge");
  return v5;
}

void sub_10005074C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_100050760(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_10005076C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void sub_10005077C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  NSObject *v5;

  _os_log_fault_impl(a1, v5, OS_LOG_TYPE_FAULT, a4, a5, 0x16u);
}

void sub_10005078C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void sub_100050798(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_1000507A8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 2u);
}

void sub_1000507D8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0x16u);
}

void sub_100050860(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0xCu);
}

uint64_t sub_100050880(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100050894(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void sub_1000508E4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void sub_1000508FC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;

  _os_log_debug_impl(a1, v4, OS_LOG_TYPE_DEBUG, a4, v5, 0xCu);
}

void sub_100050910(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x20u);
}

uint64_t sub_100050934()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10005094C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

_BYTE *sub_100050974(_BYTE *result, _BYTE *a2)
{
  *result = 0;
  *a2 = 0;
  return result;
}

void sub_100050984(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_100050990(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;

  _os_log_fault_impl(a1, v4, OS_LOG_TYPE_FAULT, a4, v5, 0xCu);
}

uint64_t sub_1000509A4(uint64_t result, float a2)
{
  _QWORD *v2;
  float *v3;

  *v3 = a2;
  *v2 = result;
  return result;
}

void sub_1000509B0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x20u);
}

void sub_1000509C4(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, a5, 2u);
}

uint64_t sub_100050A04(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t sub_100050A10(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 48);
}

uint64_t sub_100050A20()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100050A2C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 80);
}

id sub_100050A48()
{
  void *v0;

  return objc_msgSend(v0, "isSystemAvailableForSyncing");
}

void sub_100050A54(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0xEu);
}

void sub_1000536A8(id a1)
{
  ICCloudConfiguration *v1;
  void *v2;

  v1 = objc_alloc_init(ICCloudConfiguration);
  v2 = (void *)qword_100852708;
  qword_100852708 = (uint64_t)v1;

}

id sub_100053A9C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "lastPathComponent"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastPathComponent"));
  v5 = objc_msgSend(v3, "isEqualToString:", v4);

  return v5;
}

void sub_100053FC4(id a1, BOOL a2)
{
  NSObject *v2;

  if (!a2)
  {
    v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_10067DACC();

  }
}

void sub_1000540D0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  id v19;
  uint64_t v20;
  id v21;
  void *v22;
  NSObject *v23;
  NSObject *v24;
  unsigned __int8 v25;
  NSObject *v26;
  uint64_t v27;
  id v28;
  _QWORD block[5];
  id v30;
  id v31;
  uint8_t buf[4];
  void *v33;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v9)
  {
    v10 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_10067DCA0(v9, v10);

    v11 = *(_QWORD *)(a1 + 40);
    if (v11)
      (*(void (**)(uint64_t, _QWORD))(v11 + 16))(v11, 0);
  }
  else
  {
    v12 = v8;
    if (objc_msgSend(v12, "statusCode") == (id)200)
    {
      v31 = 0;
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", v7, 0, 0, &v31));
      v14 = v31;
      if (v14)
      {
        v15 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          sub_10067DB8C(v14, v15);

        (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
      }
      else
      {
        v18 = objc_claimAutoreleasedReturnValue(+[ICCloudContext processingQueue](ICCloudContext, "processingQueue"));
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100054418;
        block[3] = &unk_1007D7C68;
        block[4] = *(_QWORD *)(a1 + 32);
        v19 = v13;
        v30 = v19;
        dispatch_async(v18, block);

        v21 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v20), "cachedConfigurationURL");
        v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
        v23 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
        v24 = v23;
        if (v22)
        {
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543362;
            v33 = v22;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "ICCloudConfiguration: Updating locally cached configuration {cacheURL: %{public}@}", buf, 0xCu);
          }

          v28 = 0;
          v25 = objc_msgSend(v19, "writeToURL:error:", v22, &v28);
          v24 = v28;
          if ((v25 & 1) == 0)
          {
            v26 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
              sub_10067DB24();

          }
        }
        else if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          sub_10067DAF8();
        }

        v27 = *(_QWORD *)(a1 + 40);
        if (v27)
          (*(void (**)(uint64_t, uint64_t))(v27 + 16))(v27, 1);

      }
    }
    else
    {
      v16 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        sub_10067DC0C(v12, v16);

      v17 = *(_QWORD *)(a1 + 40);
      if (v17)
        (*(void (**)(uint64_t, _QWORD))(v17 + 16))(v17, 0);
    }

  }
}

id sub_100054418(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  id result;
  NSObject *v5;
  uint8_t v6[16];
  uint8_t buf[16];

  v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "ICCloudConfiguration: Received remote configuration", buf, 2u);
  }

  result = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v3), "isConfigurationValid:", *(_QWORD *)(a1 + 40));
  if ((_DWORD)result)
  {
    v5 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "ICCloudConfiguration: Applying remote configuration", v6, 2u);
    }

    return objc_msgSend(*(id *)(a1 + 32), "setConfigurationFromDictionary:", *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_100055DA0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("ICCloudConfigurationChangedNotification"), *(_QWORD *)(a1 + 32));

}

void sub_100055FBC(id a1)
{
  _ICCloudDefaultValuesConfigurationStorage *v1;
  void *v2;

  v1 = objc_alloc_init(_ICCloudDefaultValuesConfigurationStorage);
  v2 = (void *)qword_100852720;
  qword_100852720 = (uint64_t)v1;

}

void sub_100057F58(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x2Au);
}

void sub_1000580C4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a4)
  {
    v7 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_10067E5D8(a4, v7);
    v8 = 2;
  }
  else
  {
    if (a2)
    {
      v8 = 1;
      goto LABEL_8;
    }
    v7 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_10067E544(a1, a3, v7);
    v8 = 3;
  }

LABEL_8:
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000581D0;
  v10[3] = &unk_1007D9850;
  v9 = *(NSObject **)(a1 + 40);
  v11 = *(id *)(a1 + 48);
  v12 = v8;
  v13 = *(_QWORD *)(a1 + 56);
  v14 = a3;
  dispatch_async(v9, v10);

}

uint64_t sub_1000581D0(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[4] + 16))(a1[4], a1[5], a1[6], a1[7]);
}

BOOL sub_100059D44(id a1, NSManagedObject *a2, unint64_t a3, BOOL *a4)
{
  void *v4;
  unsigned __int8 v5;

  v4 = (void *)objc_claimAutoreleasedReturnValue(-[NSManagedObject objectID](a2, "objectID", a3, a4));
  v5 = objc_msgSend(v4, "isTemporaryID");

  return v5;
}

void sub_100059F8C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100059FB0(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  _QWORD v4[4];
  id v5;
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "ic_permanentObjectID"));

  if (v3)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10005A060;
    v4[3] = &unk_1007D7C68;
    v5 = *(id *)(a1 + 32);
    v6 = v3;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);

  }
}

void sub_10005A060(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_10005A21C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_10005A240(uint64_t a1, uint64_t a2)
{
  objc_moveWeak((id *)(a1 + 40), (id *)(a2 + 40));
}

void sub_10005A24C(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 40));
}

void sub_10005A254(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;
  void **v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  void *v9;
  id v10;
  id v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "ic_permanentObjectID"));

  if (v3)
  {
    v6 = _NSConcreteStackBlock;
    v7 = 3221225472;
    v8 = sub_10005A340;
    v9 = &unk_1007D7C68;
    v10 = *(id *)(a1 + 32);
    v11 = v3;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, &v6);

  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter", v6, v7, v8, v9));
  v5 = objc_loadWeakRetained((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  objc_msgSend(v4, "removeObserver:", v5);

}

void sub_10005A340(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_10005A450(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

BOOL sub_10005D3FC(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  unsigned int v5;
  NSObject *v6;
  NSObject *v7;
  uint8_t v9[16];

  v3 = a2;
  v4 = *(unsigned __int8 *)(a1 + 40);
  v5 = objc_msgSend(v3, "markedForDeletion");
  v6 = objc_claimAutoreleasedReturnValue(+[REMLogStore write](REMLogStore, "write"));
  v7 = v6;
  if (v4 == v5)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Stopping recurssion because isDeleted == self.markedForDeletion", v9, 2u);
    }

  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      sub_10067F2E0((unsigned __int8 *)(a1 + 40), a1);

    if (*(_BYTE *)(a1 + 40))
      objc_msgSend(v3, "markForDeletion");
    else
      objc_msgSend(v3, "unmarkForDeletion");
  }

  return v4 != v5;
}

id sub_10005D56C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));
  v6 = objc_msgSend(v4, "isEqual:", v5);

  if ((v6 & 1) == 0)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "managedObjectContext"));
    objc_msgSend(v7, "deleteObject:", v3);

  }
  return v6;
}

uint64_t sub_10005D6B8(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 32) != a2)
    objc_msgSend(*(id *)(a1 + 40), "addObject:", a2);
  return 1;
}

void sub_10005E420(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x16u);
}

void sub_10005E434(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

uint64_t sub_10005E448(uint64_t a1, uint64_t a2)
{
  return objc_opt_class(a1, a2);
}

void sub_10005E450(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

void performBlockOnMainThread(void *a1)
{
  void (**block)(void);

  block = a1;
  if (+[NSThread isMainThread](NSThread, "isMainThread"))
    block[2]();
  else
    dispatch_sync((dispatch_queue_t)&_dispatch_main_q, block);

}

id ICGenericError()
{
  return objc_msgSend(objc_alloc((Class)NSError), "initWithDomain:code:userInfo:", CFSTR("com.apple.reminders"), -1, 0);
}

void sub_10005EE7C(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_100852730;
  qword_100852730 = (uint64_t)v1;

  objc_msgSend((id)qword_100852730, "setTimeStyle:", 3);
  objc_msgSend((id)qword_100852730, "setDateStyle:", 1);
}

void sub_10005EF68(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_100852740;
  qword_100852740 = (uint64_t)v1;

  objc_msgSend((id)qword_100852740, "setTimeStyle:", 1);
  objc_msgSend((id)qword_100852740, "setDateStyle:", 1);
  _objc_msgSend((id)qword_100852740, "setDoesRelativeDateFormatting:", 1);
}

void sub_10005EFBC(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_100852750;
  qword_100852750 = (uint64_t)v1;

  objc_msgSend((id)qword_100852750, "setTimeStyle:", 1);
  objc_msgSend((id)qword_100852750, "setDateStyle:", 1);
}

void sub_10005F220(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_100852760;
  qword_100852760 = (uint64_t)v1;

  objc_msgSend((id)qword_100852760, "setTimeStyle:", 1);
  objc_msgSend((id)qword_100852760, "setDateStyle:", 0);
}

void sub_10005F268(id a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_100852770;
  qword_100852770 = (uint64_t)v1;

  v3 = (void *)qword_100852770;
  v5 = (id)objc_claimAutoreleasedReturnValue(+[NSLocale currentLocale](NSLocale, "currentLocale"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDateFormatter dateFormatFromTemplate:options:locale:](NSDateFormatter, "dateFormatFromTemplate:options:locale:", CFSTR("cccc"), 0, v5));
  objc_msgSend(v3, "setDateFormat:", v4);

}

void sub_10005F2F4(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_100852780;
  qword_100852780 = (uint64_t)v1;

  objc_msgSend((id)qword_100852780, "setTimeStyle:", 0);
  objc_msgSend((id)qword_100852780, "setDateStyle:", 1);
  _objc_msgSend((id)qword_100852780, "setDoesRelativeDateFormatting:", 1);
}

dispatch_workloop_t rd_dispatch_workloop_create(const char *a1)
{
  return dispatch_workloop_create(a1);
}

void sub_10005F9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10005FA0C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10005FA1C(uint64_t a1)
{

}

void sub_10005FA24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "fetchRequest"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id incompatibilityInfoWithEntitiesAndArraysOfPropertyKeys(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  NSObject *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v3 = a1;
  v4 = a2;
  v5 = objc_msgSend(v3, "count");
  if (v5 != objc_msgSend(v4, "count"))
  {
    v6 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      sub_10067F97C(v6);

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v8 = v3;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v9)
  {
    v10 = v9;
    v11 = 0;
    v12 = *(_QWORD *)v19;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v19 != v12)
          objc_enumerationMutation(v8);
        v14 = *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v13);
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndex:", (char *)v13 + v11, (_QWORD)v18));
        objc_msgSend(v7, "setObject:forKey:", v15, v14);

        v13 = (char *)v13 + 1;
      }
      while (v10 != v13);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      v11 += (uint64_t)v13;
    }
    while (v10);
  }

  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:", v7));
  return v16;
}

id cloudKitSchemaVersionIncompatibilityInfoMap()
{
  if (qword_100852798 != -1)
    dispatch_once(&qword_100852798, &stru_1007D9A70);
  return (id)qword_100852790;
}

void sub_100060168(id a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  void *v36;
  void *v37;
  _QWORD v38[4];
  void *v39;
  _QWORD v40[2];
  void *v41;
  _QWORD v42[2];

  v1 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v2 = (void *)qword_100852790;
  qword_100852790 = v1;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAccount cdEntityName](REMCDAccount, "cdEntityName"));
  v42[0] = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDList cdEntityName](REMCDList, "cdEntityName"));
  v42[1] = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v42, 2));
  v6 = incompatibilityInfoWithEntitiesAndArraysOfPropertyKeys(v5, &off_100804C90);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  objc_msgSend((id)qword_100852790, "setObject:forKeyedSubscript:", v7, &off_1008046F8);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDSmartList cdEntityName](REMCDSmartList, "cdEntityName"));
  v41 = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v41, 1));
  v10 = incompatibilityInfoWithEntitiesAndArraysOfPropertyKeys(v9, &off_100804CC0);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

  objc_msgSend((id)qword_100852790, "setObject:forKeyedSubscript:", v11, &off_100804710);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDList cdEntityName](REMCDList, "cdEntityName"));
  v40[0] = v12;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDSmartList cdEntityName](REMCDSmartList, "cdEntityName"));
  v40[1] = v13;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v40, 2));
  v15 = incompatibilityInfoWithEntitiesAndArraysOfPropertyKeys(v14, &off_100804D08);
  v16 = (void *)objc_claimAutoreleasedReturnValue(v15);

  objc_msgSend((id)qword_100852790, "setObject:forKeyedSubscript:", v16, &off_100804728);
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDReminder cdEntityName](REMCDReminder, "cdEntityName"));
  v39 = v17;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v39, 1));
  v19 = incompatibilityInfoWithEntitiesAndArraysOfPropertyKeys(v18, &off_100804D38);
  v20 = (void *)objc_claimAutoreleasedReturnValue(v19);

  objc_msgSend((id)qword_100852790, "setObject:forKeyedSubscript:", v20, &off_100804740);
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDList cdEntityName](REMCDList, "cdEntityName"));
  v38[0] = v21;
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDSmartList cdEntityName](REMCDSmartList, "cdEntityName"));
  v38[1] = v22;
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDTemplate cdEntityName](REMCDTemplate, "cdEntityName"));
  v38[2] = v23;
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDListSection cdEntityName](REMCDListSection, "cdEntityName"));
  v38[3] = v24;
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v38, 4));
  v26 = incompatibilityInfoWithEntitiesAndArraysOfPropertyKeys(v25, &off_100804DB0);
  v27 = (void *)objc_claimAutoreleasedReturnValue(v26);

  objc_msgSend((id)qword_100852790, "setObject:forKeyedSubscript:", v27, &off_100804758);
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAccount cdEntityName](REMCDAccount, "cdEntityName"));
  v37 = v28;
  v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v37, 1));
  v30 = incompatibilityInfoWithEntitiesAndArraysOfPropertyKeys(v29, &off_100804DE0);
  v31 = (void *)objc_claimAutoreleasedReturnValue(v30);

  objc_msgSend((id)qword_100852790, "setObject:forKeyedSubscript:", v31, &off_100804770);
  v32 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDReminder cdEntityName](REMCDReminder, "cdEntityName"));
  v36 = v32;
  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v36, 1));
  v34 = incompatibilityInfoWithEntitiesAndArraysOfPropertyKeys(v33, &off_100804E10);
  v35 = (void *)objc_claimAutoreleasedReturnValue(v34);

  objc_msgSend((id)qword_100852790, "setObject:forKeyedSubscript:", v35, &off_100804788);
}

void sub_100060890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000608B8(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAccount cloudKitAccountWithCKIdentifier:context:](REMCDAccount, "cloudKitAccountWithCKIdentifier:context:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, "setPersistenceCloudSchemaVersion:", 20240715);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(*(id *)(a1 + 40), "ic_save");
    v2 = v3;
  }

}

void sub_100060C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100060CA0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100060CB0(uint64_t a1)
{

}

void sub_100060CB8(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  uint64_t v8;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;

  v7 = a3;
  v8 = (uint64_t)objc_msgSend(a2, "integerValue");
  if (v8 < 20240716 && v8 > *(_QWORD *)(a1 + 64))
  {
    v10 = v8;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", *(_QWORD *)(a1 + 32)));
    if (objc_msgSend(v11, "count"))
    {
      v12 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        v13 = *(_QWORD *)(a1 + 32);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ckIdentifier"));
        v15 = *(_QWORD *)(a1 + 64);
        v16 = 138544386;
        v17 = v13;
        v18 = 2114;
        v19 = v14;
        v20 = 2048;
        v21 = v15;
        v22 = 2048;
        v23 = 20240715;
        v24 = 2048;
        v25 = v10;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "ICCSCU: this cloud object is an entity that needs to run CloudSchemaCatchUpSync {entity: %{public}@, identifier: %{public}@, persistenceVersion: %lld, runtimeVersion: %lld, incompatibilityInfoVersionNumber: %lld}", (uint8_t *)&v16, 0x34u);

      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
      if (*(_BYTE *)(a1 + 72))
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "addObjectsFromArray:", v11);
      else
        *a4 = 1;
    }

  }
}

void sub_100060F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100060F40(_QWORD *a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAccount cloudKitAccountWithCKIdentifier:context:](REMCDAccount, "cloudKitAccountWithCKIdentifier:context:", a1[4], a1[5]));
  if (v2)
  {
    v4 = v2;
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v2, "persistenceCloudSchemaVersion")));
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = objc_msgSend(v3, "integerValue");

    v2 = v4;
  }

}

id sub_100061708(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  objc_msgSend(*(id *)(a1 + 32), "_setCKIdentifierIfNecessary");
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ckCloudState"));
  v3 = objc_msgSend(v2, "currentLocalVersion");

  if (v3 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ckCloudState"));
    objc_msgSend(v4, "setCurrentLocalVersion:", 0);

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ckCloudState"));
    objc_msgSend(v5, "setLatestVersionSyncedToCloud:", 0);

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ckCloudState"));
  objc_msgSend(v6, "setCurrentLocalVersion:", (char *)objc_msgSend(v6, "currentLocalVersion") + 1);

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ckCloudState"));
  objc_msgSend(v8, "setLocalVersionDate:", v7);

  return objc_msgSend(*(id *)(a1 + 32), "setCkDirtyFlags:", objc_msgSend(*(id *)(a1 + 32), "ckDirtyFlags") | 2);
}

uint64_t sub_100061DF4(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "accountCKIdentifier"));
  v4 = v3;
  if (*(_QWORD *)(a1 + 32))
  {
    if (v3)
      v5 = (uint64_t)objc_msgSend(v3, "isEqualToString:");
    else
      v5 = 1;
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_100061E90(id a1)
{
  dispatch_queue_attr_t v1;
  dispatch_queue_t v2;
  void *v3;
  NSObject *v4;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue(v1);
  v2 = dispatch_queue_create("com.apple.reminders.cloud.failure-counts", v4);
  v3 = (void *)qword_1008527A0;
  qword_1008527A0 = (uint64_t)v2;

}

void sub_100061F20(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v2 = (void *)qword_1008527B0;
  qword_1008527B0 = v1;

}

void sub_100061FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100062008(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ckIdentifier"));
  if (v3)
  {
    v4 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v2), "failedToSyncCountsByCKIdentifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", v3));

    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v6, "integerValue");
  }
  else
  {
    v7 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      sub_10067FD24();

  }
}

void sub_100062134(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ckIdentifier"));
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 40);
    v5 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v2), "failedToSyncCountsByCKIdentifier");
    v6 = objc_claimAutoreleasedReturnValue(v5);
    v7 = v6;
    if (v4)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 40)));
      -[NSObject setObject:forKey:](v7, "setObject:forKey:", v8, v3);

    }
    else
    {
      -[NSObject removeObjectForKey:](v6, "removeObjectForKey:", v3);
    }
  }
  else
  {
    v7 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      sub_10067FD50();
  }

}

void sub_100062234(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v2 = (void *)qword_1008527C0;
  qword_1008527C0 = v1;

}

void sub_100062304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006231C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ckIdentifier"));
  if (v3)
  {
    v4 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v2), "numberOfPushAttemptsToWaitByCKIdentifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", v3));

    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v6, "integerValue");
  }
  else
  {
    v7 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      sub_10067FD7C();

  }
}

void sub_100062448(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ckIdentifier"));
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 40);
    v5 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v2), "numberOfPushAttemptsToWaitByCKIdentifier");
    v6 = objc_claimAutoreleasedReturnValue(v5);
    v7 = v6;
    if (v4)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 40)));
      -[NSObject setObject:forKey:](v7, "setObject:forKey:", v8, v3);

    }
    else
    {
      -[NSObject removeObjectForKey:](v6, "removeObjectForKey:", v3);
    }
  }
  else
  {
    v7 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      sub_10067FDA8();
  }

}

void sub_10006284C(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;

  v3 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), a2), "numberOfPushAttemptsToWaitByCKIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(v4, "removeAllObjects");

  v6 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v5), "failedToSyncCountsByCKIdentifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  objc_msgSend(v7, "removeAllObjects");

  v8 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v8, "postNotificationName:object:", CFSTR("ICCloudContextUnrecoverableErrorNotification"), 0);

}

void sub_100063080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100063098(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "_isInICloudAccount");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_10006316C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100063184(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "isDeleted");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result ^ 1;
  return result;
}

void sub_100063A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100063A44(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100063A54(uint64_t a1)
{

}

void sub_100063A5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "entity"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t sub_100063EB8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ckServerRecord"));
  v5 = (void *)v4;
  if (*(id *)(a1 + 32) == v3)
  {
    if (v4)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "parentCloudObject"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "recordID"));
      v11 = v10;
      if (v10)
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "zoneID"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "recordID"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "zoneID"));
        v15 = objc_msgSend(v12, "isEqual:", v14);

        if ((v15 & 1) == 0)
        {
          v18 = objc_opt_class(v3, v16);
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "recordID"));
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "ic_loggingDescription"));
          v22 = objc_opt_class(v9, v21);
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "ic_loggingDescription"));
          v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Cross-zone parent record relationship found. Resetting ckServerRecord. { class: %@, recordID: %@, parentClass: %@, parentRecordID: %@ }"), v18, v20, v22, v23));

          objc_msgSend((id)objc_opt_class(ICCloudContext, v25), "faultAndPromptToFileRadarWithICTap2RadarType:title:description:logMessage:", 4, CFSTR("recursivelyFixCrossZoneRelationshipWithVisitedMap"), &stru_1007FE210, v24);
          goto LABEL_3;
        }
      }

    }
    v8 = 0;
    goto LABEL_10;
  }
  if (v4)
  {
LABEL_3:
    v6 = *(_QWORD *)(a1 + 40);
    v7 = objc_msgSend(v5, "copy");
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v3, v7);

    objc_msgSend(v3, "setCkServerRecord:", 0);
    objc_msgSend(v3, "setCkZoneOwnerName:", 0);
  }
  v8 = 1;
LABEL_10:

  return v8;
}

void sub_100065E2C(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v2 = (void *)qword_1008527D0;
  qword_1008527D0 = v1;

}

void sub_100065FC8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10006630C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100066320(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int v11;
  id obj;
  id v13;
  uint64_t v14;
  id v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  _BYTE v26[128];

  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "temporaryAssets"));
  objc_sync_enter(obj);
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordsToSave"));
  v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
  if (v15)
  {
    v14 = *(_QWORD *)v22;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v22 != v14)
          objc_enumerationMutation(v13);
        v2 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)v16);
        v17 = 0u;
        v18 = 0u;
        v19 = 0u;
        v20 = 0u;
        v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allKeys"));
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
        if (v4)
        {
          v5 = *(_QWORD *)v18;
          do
          {
            v6 = 0;
            do
            {
              if (*(_QWORD *)v18 != v5)
                objc_enumerationMutation(v3);
              v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v6)));
              v9 = objc_opt_class(CKAsset, v8);
              if ((objc_opt_isKindOfClass(v7, v9) & 1) != 0)
              {
                v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "temporaryAssets"));
                v11 = objc_msgSend(v10, "containsObject:", v7);

                if (v11)
                  objc_msgSend(*(id *)(a1 + 40), "deleteTemporaryFilesForAsset:", v7);
              }

              v6 = (char *)v6 + 1;
            }
            while (v4 != v6);
            v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
          }
          while (v4);
        }

        v16 = (char *)v16 + 1;
      }
      while (v16 != v15);
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
    }
    while (v15);
  }

  objc_sync_exit(obj);
}

void sub_10006654C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10006669C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1000668AC(id a1, NSURL *a2, NSError *a3)
{
  NSError *v3;
  NSObject *v4;

  v3 = a3;
  v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_100680A68();

  return 1;
}

void sub_100067E64(id a1)
{
  dispatch_queue_attr_t v1;
  dispatch_queue_t v2;
  void *v3;
  NSObject *v4;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue(v1);
  v2 = dispatch_queue_create("com.apple.reminders.cloud.versions-by-operation", v4);
  v3 = (void *)qword_1008527E8;
  qword_1008527E8 = (uint64_t)v2;

}

void sub_100067EF4(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSMapTable weakToStrongObjectsMapTable](NSMapTable, "weakToStrongObjectsMapTable"));
  v2 = (void *)qword_1008527F8;
  qword_1008527F8 = v1;

}

void sub_100067FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006800C(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v3 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), a2), "versionsByRecordIDByOperation");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", *(_QWORD *)(a1 + 40)));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordID"));
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v5));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v6, "longLongValue");

  }
}

void sub_100068148(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v3 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), a2), "versionsByRecordIDByOperation");
  v7 = (id)objc_claimAutoreleasedReturnValue(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", *(_QWORD *)(a1 + 40)));
  if (!v4)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    objc_msgSend(v7, "setObject:forKey:", v4, *(_QWORD *)(a1 + 40));
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordID"));
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", *(_QWORD *)(a1 + 48)));
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v6, v5);

  }
}

void sub_1000682C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000682D8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordID"));
  if (v3)
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v4 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v2), "versionsByRecordIDByOperation", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectEnumerator"));

    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v14;
      while (2)
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(_QWORD *)v14 != v9)
            objc_enumerationMutation(v6);
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i), "objectForKeyedSubscript:", v3));
          v12 = v11;
          if (v11 && (uint64_t)objc_msgSend(v11, "longLongValue") >= *(_QWORD *)(a1 + 48))
          {
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;

            goto LABEL_13;
          }

        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
        if (v8)
          continue;
        break;
      }
    }
LABEL_13:

  }
}

void sub_1000684F0(id a1)
{
  CKRecordSystemFieldsTransformer *v1;
  void *v2;

  v1 = objc_alloc_init(CKRecordSystemFieldsTransformer);
  v2 = (void *)qword_100852808;
  qword_100852808 = (uint64_t)v1;

}

void sub_100068558(id a1)
{
  CKShareSystemFieldsTransformer *v1;
  void *v2;

  v1 = objc_alloc_init(CKShareSystemFieldsTransformer);
  v2 = (void *)qword_100852818;
  qword_100852818 = (uint64_t)v1;

}

void sub_100068E50(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  const __CFString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ckCloudState"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v2, "inCloud")));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v3, CFSTR("inCloud"));

  if (objc_msgSend(*(id *)(a1 + 40), "markedForDeletion"))
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("markedForDeletion"));
  if (objc_msgSend(*(id *)(a1 + 40), "needsToBePushedToCloud"))
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("needsToBePushedToCloud"));
  if (objc_msgSend(*(id *)(a1 + 40), "ckNeedsToBeFetchedFromCloud"))
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("ckNeedsToBeFetchedFromCloud"));
  if (objc_msgSend(*(id *)(a1 + 40), "ckNeedsInitialFetchFromCloud"))
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("ckNeedsInitialFetchFromCloud"));
  if (objc_msgSend(*(id *)(a1 + 40), "needsToBeDeletedFromCloud"))
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("needsToBeDeletedFromCloud"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ckCloudState"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v4, "latestVersionSyncedToCloud")));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, CFSTR("latestVersionSyncedToCloud"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ckCloudState"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v6, "currentLocalVersion")));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, CFSTR("currentLocalVersion"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ckCloudState"));
  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "localVersionDate"));
  v10 = (void *)v9;
  if (v9)
    v11 = (const __CFString *)v9;
  else
    v11 = CFSTR("nil");
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v11, CFSTR("localVersionDate"));

  if ((objc_msgSend(*(id *)(a1 + 40), "hasAllMandatoryFields") & 1) == 0)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "hasAllMandatoryFields")));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v12, CFSTR("hasAllMandatoryFields"));

  }
  if ((uint64_t)objc_msgSend(*(id *)(a1 + 40), "failedToSyncCount") >= 1)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 40), "failedToSyncCount")));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v13, CFSTR("failedToSyncCount"));

  }
  if ((uint64_t)objc_msgSend(*(id *)(a1 + 40), "numberOfPushAttemptsToWaitCount") >= 1)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 40), "numberOfPushAttemptsToWaitCount")));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v14, CFSTR("numberOfPushAttemptsToWaitCount"));

  }
  if (objc_msgSend(*(id *)(a1 + 40), "minimumSupportedAppVersion"))
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(*(id *)(a1 + 40), "minimumSupportedAppVersion")));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v15, CFSTR("minimumSupportedAppVersion"));

  }
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ckServerShare"));

  if (v16)
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ckServerShare"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "recordID"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "ic_loggingDescription"));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v19, CFSTR("ckServerShare"));

  }
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ckServerRecord"));

  if (v20)
  {
    v23 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ckServerRecord"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "recordID"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "ic_loggingDescription"));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v22, CFSTR("ckServerRecord"));

  }
}

void sub_100069590(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x20u);
}

id sub_1000695A4(void *a1)
{
  return a1;
}

uint64_t sub_1000695AC(uint64_t a1, uint64_t a2)
{
  return objc_opt_class(a1, a2);
}

uint64_t sub_1000695B4()
{
  uint64_t v0;

  return v0;
}

id blockOperationShortNameFromOperationName(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;
  id v5;

  v1 = qword_100852828;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_100852828, &stru_1007D9CD8);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_100852830, "objectForKeyedSubscript:", v2));
  v4 = v3;
  if (!v3)
    v3 = v2;
  v5 = v3;

  return v5;
}

void sub_1000696A4(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[13];
  _QWORD v4[13];

  v3[0] = ICNSBlockOperationNameCreateFetchZoneChanges;
  v3[1] = ICNSBlockOperationNameDeleteSharesForObjectsFetchAndCompletion;
  v4[0] = ICNSBlockOperationShortNameCreateFetchZoneChanges;
  v4[1] = ICNSBlockOperationShortNameDeleteSharesForObjectsFetchAndCompletion;
  v3[2] = ICNSBlockOperationNameFetchCompletion;
  v3[3] = ICNSBlockOperationNameFetchDatabaseChangesCompletion;
  v4[2] = ICNSBlockOperationShortNameFetchCompletion;
  v4[3] = ICNSBlockOperationShortNameFetchDatabaseChangesCompletion;
  v3[4] = ICNSBlockOperationNameFetchZoneChangesCompletion;
  v3[5] = ICNSBlockOperationNameFinishOperations;
  v4[4] = ICNSBlockOperationShortNameFetchZoneChangesCompletion;
  v4[5] = ICNSBlockOperationShortNameFinishOperations;
  v3[6] = ICNSBlockOperationNameProcessCompletion;
  v3[7] = ICNSBlockOperationNameProcessCompletionForOperations;
  v4[6] = ICNSBlockOperationShortNameProcessCompletion;
  v4[7] = ICNSBlockOperationShortNameProcessCompletionForOperations;
  v3[8] = ICNSBlockOperationNameProcessDirtyObjects;
  v3[9] = ICNSBlockOperationNameProcessLocalObjects;
  v4[8] = ICNSBlockOperationShortNameProcessDirtyObjects;
  v4[9] = ICNSBlockOperationShortNameProcessLocalObjects;
  v3[10] = ICNSBlockOperationNameProcessObjectsForContextDidSave;
  v3[11] = ICNSBlockOperationNameProcessObjectsForReachabilityChanged;
  v4[10] = ICNSBlockOperationShortNameProcessObjectsForContextDidSave;
  v4[11] = ICNSBlockOperationShortNameProcessObjectsForReachabilityChanged;
  v3[12] = ICNSBlockOperationNameProcessObjectsForRetryOperations;
  v4[12] = ICNSBlockOperationShortNameProcessObjectsForRetryOperations;
  v1 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 13));
  v2 = (void *)qword_100852830;
  qword_100852830 = v1;

}

void sub_10006AD14(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  __int128 v17;
  id v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  unsigned __int8 v28;
  id v29;
  NSObject *v30;
  void *v31;
  unsigned __int8 v32;
  id v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  id obj;
  void *v43;
  id v44;
  id v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  id v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint8_t buf[4];
  id v56;
  __int16 v57;
  id v58;
  _BYTE v59[128];
  uint64_t v60;
  _BYTE v61[128];
  _QWORD v62[3];

  v62[0] = objc_opt_class(REMCDRootEntityObject, a2);
  v62[1] = objc_opt_class(REMCDBaseList, v3);
  v62[2] = objc_opt_class(REMCDReminder, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v62, 3));
  v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  obj = v5;
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, v61, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v52;
    while (2)
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v52 != v8)
          objc_enumerationMutation(obj);
        v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v51 + 1) + 8 * (_QWORD)i), "fetchRequest"));
        -[NSObject setPropertiesToFetch:](v10, "setPropertiesToFetch:", &off_100804E40);
        v60 = *(_QWORD *)(a1 + 32);
        v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v60, 1));
        -[NSObject setAffectedStores:](v10, "setAffectedStores:", v11);

        -[NSObject setFetchBatchSize:](v10, "setFetchBatchSize:", 50);
        v12 = *(void **)(a1 + 40);
        v50 = 0;
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "executeFetchRequest:error:", v10, &v50));
        v14 = v50;
        if (!v13)
        {
          v34 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
            sub_100681358((uint64_t)v14, v34, v35, v36, v37, v38, v39, v40);

          v33 = obj;
          goto LABEL_31;
        }
        objc_msgSend(v43, "addObjectsFromArray:", v13);

      }
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, v61, 16);
      if (v7)
        continue;
      break;
    }
  }

  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v15 = v43;
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v46, v59, 16);
  if (v16)
  {
    v18 = v16;
    v19 = 0;
    v20 = *(_QWORD *)v47;
    *(_QWORD *)&v17 = 138412290;
    v41 = v17;
    do
    {
      v21 = 0;
      do
      {
        if (*(_QWORD *)v47 != v20)
          objc_enumerationMutation(v15);
        v22 = *(_QWORD *)(*((_QWORD *)&v46 + 1) + 8 * (_QWORD)v21);
        objc_msgSend(*(id *)(a1 + 48), "setTotalMigratedCount:", (char *)objc_msgSend(*(id *)(a1 + 48), "totalMigratedCount", v41) + 1);
        objc_msgSend(*(id *)(a1 + 48), "migrateTokenResolutionMapInObject:", v22);
        objc_msgSend(*(id *)(a1 + 48), "migrateCRDTsInObject:", v22);
        if (v19 < 0x31)
        {
          ++v19;
        }
        else
        {
          v23 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
          if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
          {
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "updatedObjects"));
            v25 = objc_msgSend(v24, "count");
            v26 = objc_msgSend(*(id *)(a1 + 48), "totalMigratedCount");
            *(_DWORD *)buf = 134218240;
            v56 = v25;
            v57 = 2048;
            v58 = v26;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Saving batch {updatedObjectsCount: %ld, totalMigratedCount: %ld}", buf, 0x16u);

          }
          v27 = *(void **)(a1 + 40);
          v45 = 0;
          v28 = objc_msgSend(v27, "save:", &v45);
          v29 = v45;
          if ((v28 & 1) == 0)
          {
            v30 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
            if (os_log_type_enabled(v30, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = v41;
              v56 = v29;
              _os_log_fault_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "Failed to save batch. Migration error {error: %@}", buf, 0xCu);
            }

          }
          v19 = 0;
        }
        v21 = (char *)v21 + 1;
      }
      while (v18 != v21);
      v18 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v46, v59, 16);
    }
    while (v18);
  }

  v31 = *(void **)(a1 + 40);
  v44 = 0;
  v32 = objc_msgSend(v31, "save:", &v44);
  v33 = v44;
  if ((v32 & 1) == 0)
  {
    v10 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      sub_1006812E8((uint64_t)v33, v10);
LABEL_31:

  }
}

void sub_10006BCB0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_10006BE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10006BE34(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10006BE44(uint64_t a1)
{

}

void sub_10006BE4C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "persistentStoreCoordinator"));
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "persistentStores"));
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_currentREMChangeTokenFromNSPersistentStores:persistentStoreCoordinator:", v4, v8));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

void sub_10006BF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006BF90(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_persistenceStoreIDsForAccountTypes:", *(_QWORD *)(a1 + 48)));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v4, "count")));
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v6 = v4;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v20;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v20 != v9)
          objc_enumerationMutation(v6);
        v11 = *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)v10);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "persistentStoreCoordinator", (_QWORD)v19));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "persistentStoreForIdentifier:", v11));

        if (v13)
          objc_msgSend(v5, "addObject:", v13);

        v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v8);
  }

  v14 = *(void **)(a1 + 32);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "persistentStoreCoordinator"));
  v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "_currentREMChangeTokenFromNSPersistentStores:persistentStoreCoordinator:", v5, v15));
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v18 = *(void **)(v17 + 40);
  *(_QWORD *)(v17 + 40) = v16;

}

void sub_10006C21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006C234(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_persistenceStoreIDForAccountID:", *(_QWORD *)(a1 + 40)));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "persistentStoreCoordinator"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "persistentStoreForIdentifier:", v4));

  if (v6)
  {
    v7 = *(void **)(a1 + 32);
    v13 = v6;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v13, 1));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "persistentStoreCoordinator"));
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "_currentREMChangeTokenFromNSPersistentStores:persistentStoreCoordinator:", v8, v9));
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v12 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v10;

  }
}

void sub_10006C424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006C43C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_persistenceStoreIDForAccountID:", *(_QWORD *)(a1 + 40)));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "persistentStoreCoordinator"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "persistentStoreForIdentifier:", v4));

  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:", 0.0));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSPersistentHistoryChangeRequest fetchHistoryAfterDate:](NSPersistentHistoryChangeRequest, "fetchHistoryAfterDate:", v7));

    objc_msgSend(v8, "setFetchLimit:", 1);
    v27 = v6;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v27, 1));
    objc_msgSend(v8, "setAffectedStores:", v9);

    objc_msgSend(v8, "setResultType:", 3);
    v26 = 0;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeRequest:error:", v8, &v26));
    v12 = v26;
    if (v12)
    {
      v13 = objc_claimAutoreleasedReturnValue(+[REMLog changeTracking](REMLog, "changeTracking"));
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        sub_10068161C();
    }
    else
    {
      v14 = objc_opt_class(NSArray, v11);
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "result"));
      v16 = REMDynamicCast(v14, v15);
      v13 = objc_claimAutoreleasedReturnValue(v16);

      v17 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject firstObject](v13, "firstObject"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "token"));

      if (v18)
      {
        v25 = v10;
        v19 = objc_alloc((Class)REMNSPersistentHistoryToken);
        v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "token"));
        v21 = v19;
        v10 = v25;
        v22 = objc_msgSend(v21, "initWithPersistentHistoryToken:", v20);
        v23 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v24 = *(void **)(v23 + 40);
        *(_QWORD *)(v23 + 40) = v22;

      }
      else
      {
        v20 = objc_claimAutoreleasedReturnValue(+[REMLog changeTracking](REMLog, "changeTracking"));
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          sub_1006815A0();
      }

    }
  }

}

void sub_10006C810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006C828(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v6 = a3;
  if (v6)
  {
    v12 = v6;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_changeTokenFromCDTrackingState:error:", v6, a4));
    if (v7)
    {
      v8 = objc_alloc_init((Class)REMChangeTrackingState);
      objc_msgSend(v8, "setLastConsumedChangeToken:", v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "lastConsumedDate"));
      objc_msgSend(v8, "setLastConsumedDate:", v9);

      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v11 = *(void **)(v10 + 40);
      *(_QWORD *)(v10 + 40) = v8;

    }
    v6 = v12;
  }

}

void sub_10006CB54(uint64_t a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSDate *v14;
  id v15;
  NSObject *v16;
  id v17;

  v7 = a2;
  v8 = a3;
  v9 = v8;
  if (!v8)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDChangeTrackingState entity](REMCDChangeTrackingState, "entity"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "name"));

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSEntityDescription insertNewObjectForEntityForName:inManagedObjectContext:](NSEntityDescription, "insertNewObjectForEntityForName:inManagedObjectContext:", v11, v7));
    objc_msgSend(v7, "assignObject:toPersistentStore:", v9, *(_QWORD *)(a1 + 32));

  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientName"));
  objc_msgSend(v9, "setClientName:", v12);

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "accountIdentifier"));
  objc_msgSend(v9, "setAccountIdentifier:", v13);

  objc_msgSend(v9, "setLastConsumedChangeTokenData:", *(_QWORD *)(a1 + 48));
  v14 = objc_opt_new(NSDate);
  objc_msgSend(v9, "setLastConsumedDate:", v14);

  v17 = 0;
  objc_msgSend(v7, "save:", &v17);
  v15 = v17;
  if (v15)
  {
    v16 = objc_claimAutoreleasedReturnValue(+[REMLog changeTracking](REMLog, "changeTracking"));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      sub_100681870(v15, v16);

    if (a4)
      *a4 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithREMChangeErrorCode:underlyingError:](NSError, "errorWithREMChangeErrorCode:underlyingError:", 8, v15));
  }

}

void sub_10006CEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10006CEE4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id obj;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  obj = *(id *)(v6 + 40);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_fetchRequestWithPredicateUsingEntityNames:managedObjectContext:error:", v5, v3, &obj));
  objc_storeStrong((id *)(v6 + 40), obj);
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 48), "setFetchRequest:", v7);
  }
  else if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
  {
    v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_errorChangeSetWithError:"));
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v13 = *(void **)(v15 + 40);
    *(_QWORD *)(v15 + 40) = v14;
    goto LABEL_6;
  }
  objc_msgSend(*(id *)(a1 + 48), "setResultType:", 5);
  v8 = *(void **)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v16 = *(id *)(v10 + 40);
  v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "_resultChangeSetByExecutingRequest:managedObjectContext:error:", v9, v3, &v16));
  objc_storeStrong((id *)(v10 + 40), v16);
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v13 = *(void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = v11;
LABEL_6:

}

void sub_10006D254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_10006D278(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id obj;

  v3 = a2;
  if (*(_QWORD *)(a1 + 32))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPersistentHistoryChangeRequest fetchHistoryAfterToken:](NSPersistentHistoryChangeRequest, "fetchHistoryAfterToken:"));
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:", 0.0));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPersistentHistoryChangeRequest fetchHistoryAfterDate:](NSPersistentHistoryChangeRequest, "fetchHistoryAfterDate:", v5));

  }
  v6 = *(void **)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  obj = *(id *)(v8 + 40);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_fetchRequestWithPredicateUsingEntityNames:managedObjectContext:error:", v7, v3, &obj));
  objc_storeStrong((id *)(v8 + 40), obj);
  if (v9)
  {
    objc_msgSend(v4, "setFetchRequest:", v9);
  }
  else if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
  {
    v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_errorChangeSetWithError:"));
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v14 = *(void **)(v16 + 40);
    *(_QWORD *)(v16 + 40) = v15;
    goto LABEL_11;
  }
  if (*(_QWORD *)(a1 + 72))
    objc_msgSend(v4, "setFetchLimit:");
  objc_msgSend(v4, "setResultType:", 5);
  v10 = *(void **)(a1 + 40);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v17 = *(id *)(v11 + 40);
  v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "_resultChangeSetByExecutingRequest:managedObjectContext:error:", v4, v3, &v17));
  objc_storeStrong((id *)(v11 + 40), v17);
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v14 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v12;
LABEL_11:

}

void sub_10006D9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006D9F8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  __int128 v5;
  id v6;
  uint64_t v7;
  NSString *(__cdecl **v8)(SEL);
  NSString *(__cdecl **v9)(SEL);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  BOOL v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  void *i;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  NSString *(__cdecl **v39)(SEL);
  NSString *(__cdecl **v40)(SEL);
  uint64_t v41;
  void *v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  __int128 v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  id obj;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  id v56;
  void *v57;
  void *v58;
  id v59;
  id v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  id v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint8_t buf[4];
  uint64_t v71;
  __int16 v72;
  void *v73;
  __int16 v74;
  void *v75;
  _BYTE v76[128];
  _BYTE v77[128];

  v3 = a2;
  v66 = 0u;
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  obj = *(id *)(a1 + 32);
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v66, v77, 16);
  if (v4)
  {
    v6 = v4;
    v7 = *(_QWORD *)v67;
    *(_QWORD *)&v5 = 138412802;
    v48 = v5;
    v8 = &NSStringFromSelector_ptr;
    v9 = &NSStringFromSelector_ptr;
    v50 = v3;
    v51 = a1;
    v49 = *(_QWORD *)v67;
    do
    {
      v10 = 0;
      v56 = v6;
      do
      {
        v11 = v7;
        if (*(_QWORD *)v67 != v7)
          objc_enumerationMutation(obj);
        v12 = *(_QWORD *)(*((_QWORD *)&v66 + 1) + 8 * v10);
        v13 = objc_autoreleasePoolPush();
        v14 = *(void **)(a1 + 40);
        v65 = 0;
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "_fetchCDAuxiliaryChangeInfosWithObjectID:inManagedObjectContext:error:", v12, v3, &v65));
        v16 = v65;
        if (v16)
          v17 = 1;
        else
          v17 = v15 == 0;
        v57 = v15;
        if (v17)
        {
          v18 = a1;
          v19 = v3;
          v20 = v16;
          v21 = objc_claimAutoreleasedReturnValue(+[NSError errorWithREMChangeErrorCode:underlyingError:](NSError, "errorWithREMChangeErrorCode:underlyingError:", 10, v16));
          v22 = v18;
          v23 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8);
          v25 = *(void **)(v23 + 40);
          *(_QWORD *)(v23 + 40) = v21;
          v7 = v11;
          v24 = v56;
        }
        else
        {
          v53 = v12;
          v54 = v13;
          v55 = v10;
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "entity"));
          v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
          v61 = 0u;
          v62 = 0u;
          v63 = 0u;
          v64 = 0u;
          v59 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "propertiesByName"));
          v26 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v61, v76, 16);
          if (v26)
          {
            v27 = v26;
            v28 = *(_QWORD *)v62;
            do
            {
              for (i = 0; i != v27; i = (char *)i + 1)
              {
                if (*(_QWORD *)v62 != v28)
                  objc_enumerationMutation(v59);
                v30 = *(_QWORD *)(*((_QWORD *)&v61 + 1) + 8 * (_QWORD)i);
                v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "propertiesByName", v48));
                v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "objectForKeyedSubscript:", v30));

                v34 = objc_opt_class(v8[98], v33);
                if ((objc_opt_isKindOfClass(v32, v34) & 1) != 0)
                {
                  v35 = objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "valueForKey:", v30));
                  if (v35)
                  {
                    v37 = (void *)v35;
                    v38 = objc_opt_class(v9[175], v36);
                    if ((objc_opt_isKindOfClass(v37, v38) & 1) != 0)
                    {
                      v39 = v9;
                      v40 = v8;
                      v41 = objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "UUIDString"));

                      v37 = (void *)v41;
                      v8 = v40;
                      v9 = v39;
                      v15 = v57;
                    }
                    objc_msgSend(v58, "setObject:forKey:", v37, v30);

                  }
                }

              }
              v27 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v61, v76, 16);
            }
            while (v27);
          }

          v60 = 0;
          v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v58, 100, 0, &v60));
          v20 = v60;
          if (v20 || !v42)
          {
            v43 = objc_claimAutoreleasedReturnValue(+[REMLog changeTracking](REMLog, "changeTracking", v48));
            v24 = v56;
            if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
            {
              v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "localizedDescription"));
              *(_DWORD *)buf = v48;
              v71 = v53;
              v72 = 2112;
              v73 = v47;
              v74 = 2112;
              v75 = v58;
              _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "Could not encode CD object into plist data {objectID: %@, error: %@, dictionary: %@}", buf, 0x20u);

            }
            v44 = objc_claimAutoreleasedReturnValue(+[NSError errorWithREMChangeErrorCode:underlyingError:](NSError, "errorWithREMChangeErrorCode:underlyingError:", 10, v20));
            v22 = v51;
            v45 = *(_QWORD *)(*(_QWORD *)(v51 + 56) + 8);
            v46 = *(void **)(v45 + 40);
            *(_QWORD *)(v45 + 40) = v44;

          }
          else
          {
            v22 = v51;
            objc_msgSend(*(id *)(v51 + 48), "setObject:forKey:", v42, v53);
            v24 = v56;
          }
          v13 = v54;
          v10 = v55;

          v7 = v49;
          v19 = v50;
        }

        objc_autoreleasePoolPop(v13);
        ++v10;
        v3 = v19;
        a1 = v22;
      }
      while ((id)v10 != v24);
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v66, v77, 16);
    }
    while (v6);
  }

}

void sub_10006EEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006EF00(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id obj;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a1 + 32;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  obj = *(id *)(v5 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "executeRequest:error:", v3, &obj));
  objc_storeStrong((id *)(v5 + 40), obj);
  v8 = *(void **)(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8) + 40);
  if (!v8)
  {
    if (!v6)
    {
      v20 = objc_claimAutoreleasedReturnValue(+[REMLog changeTracking](REMLog, "changeTracking"));
      if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
        sub_100681AD4(v4, v20, v21, v22, v23, v24, v25, v26);

    }
    v10 = objc_opt_class(NSNumber, v7);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "result"));
    v12 = REMDynamicCast(v10, v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);

    if (v13)
    {
      if ((objc_msgSend(v13, "BOOLValue") & 1) != 0)
        goto LABEL_12;
      v14 = 3;
    }
    else
    {
      v14 = 2;
    }
    v17 = objc_claimAutoreleasedReturnValue(+[NSError errorWithREMChangeErrorCode:](NSError, "errorWithREMChangeErrorCode:", v14));
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v19 = *(void **)(v18 + 40);
    *(_QWORD *)(v18 + 40) = v17;

    goto LABEL_12;
  }
  if (objc_msgSend(v8, "code") == (id)134301)
    v9 = 4;
  else
    v9 = 1;
  v15 = objc_claimAutoreleasedReturnValue(+[NSError errorWithREMChangeErrorCode:underlyingError:](NSError, "errorWithREMChangeErrorCode:underlyingError:", v9, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40)));
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v13 = *(void **)(v16 + 40);
  *(_QWORD *)(v16 + 40) = v15;
LABEL_12:

}

void sub_10006F18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006F1A4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id obj;
  id v24;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDChangeTrackingState fetchRequest](REMCDChangeTrackingState, "fetchRequest"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientName"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accountIdentifier"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("clientName == %@ AND accountIdentifier == %@"), v5, v6));
  objc_msgSend(v4, "setPredicate:", v7);

  v24 = 0;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "executeFetchRequest:error:", v4, &v24));
  v9 = v24;
  if (v9)
  {
    v10 = objc_claimAutoreleasedReturnValue(+[REMLog changeTracking](REMLog, "changeTracking"));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_100681BA4(a1 + 32, v9);

    v11 = objc_claimAutoreleasedReturnValue(+[NSError errorWithREMChangeErrorCode:underlyingError:](NSError, "errorWithREMChangeErrorCode:underlyingError:", 8, v9));
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v13 = *(void **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = v11;
  }
  else
  {
    if ((unint64_t)objc_msgSend(v8, "count") >= 2)
    {
      v16 = objc_claimAutoreleasedReturnValue(+[REMLog changeTracking](REMLog, "changeTracking"));
      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
        sub_100681B3C(a1 + 32, v16, v17, v18, v19, v20, v21, v22);

    }
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));
    v14 = *(_QWORD *)(a1 + 40);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    obj = *(id *)(v15 + 40);
    (*(void (**)(void))(v14 + 16))();
    objc_storeStrong((id *)(v15 + 40), obj);
  }

}

void sub_10006F6AC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;

  _os_log_error_impl(a1, v4, OS_LOG_TYPE_ERROR, a4, v5, 0xCu);
}

void sub_10006F8A8(id a1)
{
  void *v1;

  v1 = (void *)qword_100852840;
  qword_100852840 = (uint64_t)&off_100804E58;

}

void sub_10006FDD8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  __CFString *v9;
  void *v10;
  const __CFString *v11;
  id v12;

  v12 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "previousServerChangeToken"));

  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "previousServerChangeToken"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "data"));
    v9 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "base64EncodedStringWithOptions:", 0));

  }
  else
  {
    v9 = CFSTR("(none)");
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "ic_loggingDescription"));
  if (v9)
    v11 = v9;
  else
    v11 = CFSTR("(none)");
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v11, v10);

}

id *sub_1000704A0(id *result)
{
  if (!qword_100852848)
    return (id *)_objc_msgSend(result[4], "initSharedSettingsWithOptions:", 721457);
  return result;
}

void sub_1000708AC(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf)
{
  NSObject *v11;

  _os_log_error_impl(a1, v11, OS_LOG_TYPE_ERROR, a4, &buf, 0x16u);
}

void sub_100071130(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  NSObject *v9;

  v3 = a2;
  v5 = objc_opt_class(REMCDObjectEffectiveVersionValidationNode, v4);
  v6 = REMDynamicCast(v5, v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "backingCDObject"));
  if (v8)
  {
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
    -[NSObject refreshObject:mergeChanges:](v9, "refreshObject:mergeChanges:", v8, 0);
  }
  else
  {
    v9 = objc_claimAutoreleasedReturnValue(+[REMLogStore write](REMLogStore, "write"));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      sub_1006824B0(v7, v9);
  }

}

uint64_t isCloudContextSyncReasonUserInitiated(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SyncInterface(AppDelegate)")) & 1) != 0)
      v3 = 1;
    else
      v3 = (uint64_t)objc_msgSend(v2, "isEqualToString:", CFSTR("SyncInterface(UpdateAccounts)"));
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_100071448(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[7];

  v3[0] = objc_opt_class(REMCDRootEntityObject);
  v3[1] = objc_opt_class(REMCDBaseList);
  v3[2] = objc_opt_class(REMCDReminder);
  v3[3] = objc_opt_class(REMCDBaseSection);
  v3[4] = objc_opt_class(REMCDTemplate);
  v3[5] = objc_opt_class(REMCDSavedReminder);
  v3[6] = objc_opt_class(REMCDSavedAttachment);
  v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v3, 7));
  v2 = (void *)qword_100852860;
  qword_100852860 = v1;

}

void sub_100071564(id a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDObject subclassesOfREMCDObjectRepresentingRootCoreDataEntities](REMCDObject, "subclassesOfREMCDObjectRepresentingRootCoreDataEntities"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100071624;
  v6[3] = &unk_1007DA060;
  v7 = v1;
  v5 = v1;
  objc_msgSend(v2, "enumerateObjectsUsingBlock:", v6);

  v3 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v5));
  v4 = (void *)qword_100852870;
  qword_100852870 = v3;

}

void sub_100071624(uint64_t a1, Class aClass)
{
  NSString *v3;
  void *v4;
  void *v5;

  v3 = NSStringFromClass(aClass);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  if (v4)
  {
    v5 = v4;
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);
    v4 = v5;
  }

}

uint64_t sub_1000717D0(uint64_t a1, uint64_t a2)
{
  return objc_opt_isKindOfClass(a2, *(_QWORD *)(a1 + 32)) & 1;
}

void sub_100071CAC(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);

}

void sub_1000722B4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a2;
  v5 = a3;
  if (*(_BYTE *)(a1 + 48)
    && (v6 = objc_opt_class(NSDictionary),
        v7 = REMDynamicCast(v6, v5),
        (v8 = (void *)objc_claimAutoreleasedReturnValue(v7)) != 0))
  {
    v9 = v8;
    v10 = *(void **)(a1 + 32);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ic_prettyDescriptionWithTabLevel:", 1));
    objc_msgSend(v10, "appendFormat:", CFSTR("\t%@ = %@\n"), v12, v11);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "appendFormat:", *(_QWORD *)(a1 + 40), v12, v5);
  }

}

void sub_1000729F4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  const __CFString *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  const __CFString *v8;
  id v9;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneName"));
  v3 = (void *)v2;
  if (v2)
    v4 = (const __CFString *)v2;
  else
    v4 = &stru_1007FE210;
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v4, CFSTR("zoneName"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "serverChangeToken"));
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ic_loggingDescription"));
  v7 = (void *)v6;
  if (v6)
    v8 = (const __CFString *)v6;
  else
    v8 = &stru_1007FE210;
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v8, CFSTR("serverChangeToken"));

  v9 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", objc_msgSend(*(id *)(a1 + 40), "databaseScope")));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v9, CFSTR("databaseScope"));

}

void sub_100072DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100072DD0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100072DE0(uint64_t a1)
{

}

void sub_100072DE8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 32);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v8, 1));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDObject ic_objectsFromObjectIDs:context:](REMCDObject, "ic_objectsFromObjectIDs:context:", v2, *(_QWORD *)(a1 + 40)));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "firstObject"));
  if (v4)
  {
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "existingShareForObject:", v4));
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

  }
}

void sub_100072FF4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  _QWORD v19[4];
  id v20;
  id v21;
  Block_layout *v22;
  id v23;
  uint8_t buf[4];
  void *v25;
  uint64_t v26;

  v26 = *(_QWORD *)(a1 + 32);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v26, 1));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDObject ic_objectsFromObjectIDs:context:](REMCDObject, "ic_objectsFromObjectIDs:context:", v2, *(_QWORD *)(a1 + 40)));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "firstObject"));
  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "existingShareForObject:", v4));
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 56);
      if (v7)
        objc_msgSend(v5, "setObject:forKeyedSubscript:", v7, CKShareThumbnailImageDataKey);
      v8 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkitCollaboration](REMLog, "cloudkitCollaboration"));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "shortLoggingDescription"));
        *(_DWORD *)buf = 138412290;
        v25 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Using existing share for %@", buf, 0xCu);

      }
      (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
    }
    else
    {
      v12 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkitCollaboration](REMLog, "cloudkitCollaboration"));
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "shortLoggingDescription"));
        *(_DWORD *)buf = 138412290;
        v25 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "No existing share for %@", buf, 0xCu);

      }
      v14 = objc_msgSend(*(id *)(a1 + 48), "newShareForObject:", v4);
      if (v14)
      {
        v15 = *(void **)(a1 + 48);
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472;
        v19[2] = sub_100073360;
        v19[3] = &unk_1007DA188;
        v20 = *(id *)(a1 + 64);
        v22 = &stru_1007DA138;
        v21 = *(id *)(a1 + 56);
        v23 = *(id *)(a1 + 72);
        objc_msgSend(v15, "prepareShare:forObject:completionHandler:", v14, v4, v19);

        v16 = v20;
      }
      else
      {
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Failed to create share for object {object: %@}"), v4));
        v17 = *(_QWORD *)(a1 + 72);
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[REMError internalErrorWithDebugDescription:](REMError, "internalErrorWithDebugDescription:", v16));
        (*(void (**)(uint64_t, _QWORD, void *))(v17 + 16))(v17, 0, v18);

      }
      v6 = 0;
    }
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("The object we want to share is not found (objectID: %@}"), *(_QWORD *)(a1 + 32)));
    v10 = *(_QWORD *)(a1 + 72);
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[REMError internalErrorWithDebugDescription:](REMError, "internalErrorWithDebugDescription:", v6));
    (*(void (**)(uint64_t, _QWORD, void *))(v10 + 16))(v10, 0, v11);

  }
}

void sub_100073344(id a1, CKShare *a2, NSData *a3)
{
  if (a3)
    -[CKShare setObject:forKeyedSubscript:](a2, "setObject:forKeyedSubscript:", a3, CKShareThumbnailImageDataKey);
}

void sub_100073360(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;

  v5 = a2;
  v6 = a3;
  v7 = *(NSObject **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100073448;
  block[3] = &unk_1007DA160;
  v14 = *(id *)(a1 + 48);
  v11 = v5;
  v12 = *(id *)(a1 + 40);
  v15 = *(id *)(a1 + 56);
  v13 = v6;
  v8 = v6;
  v9 = v5;
  dispatch_async(v7, block);

}

uint64_t sub_100073448(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
}

void sub_100073F00(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;
  id v9;
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100073FAC;
  v6[3] = &unk_1007D8C08;
  v3 = *(id *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(void **)(a1 + 48);
  v7 = v3;
  v8 = v4;
  v9 = v5;
  v10 = *(id *)(a1 + 56);
  objc_msgSend(v2, "performBlock:", v6);

}

void sub_100073FAC(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  id v8;
  uint8_t buf[4];
  void *v10;

  v2 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkitCollaboration](REMLog, "cloudkitCollaboration"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shortLoggingDescription"));
    *(_DWORD *)buf = 138412290;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Finished waiting for operations before preparing share for %@", buf, 0xCu);

  }
  v5 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000740CC;
  v7[3] = &unk_1007DA1D8;
  v7[4] = v4;
  v6 = *(_QWORD *)(a1 + 48);
  v8 = *(id *)(a1 + 56);
  objc_msgSend(v4, "saveShare:forObject:completionHandler:", v6, v5, v7);

}

void sub_1000740CC(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = a2;
  objc_msgSend(v5, "setObjectContext:", 0);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100074364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100074390(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    v9 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkitCollaboration](REMLog, "cloudkitCollaboration"));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shortLoggingDescription"));
      v18 = 138412290;
      v19 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Retrying to save share for %@", (uint8_t *)&v18, 0xCu);

    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ckServerShare"));

    if (v11)
    {
      v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ckServerShare"));
      objc_msgSend(*(id *)(a1 + 40), "populateShare:withObject:", v12, *(_QWORD *)(a1 + 32));
      v13 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkitCollaboration](REMLog, "cloudkitCollaboration"));
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "ic_loggingDescription"));
        v18 = 138412290;
        v19 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Using saved server share when retrying %@", (uint8_t *)&v18, 0xCu);

      }
    }
    else
    {
      v12 = *(id *)(a1 + 48);
    }
    v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "rootRecordForObject:", *(_QWORD *)(a1 + 32)));
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v17 = *(void **)(v16 + 40);
    *(_QWORD *)(v16 + 40) = v15;

    objc_msgSend(*(id *)(a1 + 40), "saveShare:withRootRecord:object:completionHandler:", v12, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56));
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 56);
    if (v8)
      (*(void (**)(uint64_t, id, _QWORD))(v8 + 16))(v8, v5, 0);
  }

}

void sub_1000749F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100074A30(id *a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id WeakRetained;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;

  v6 = a2;
  v7 = a4;
  WeakRetained = objc_loadWeakRetained(a1 + 9);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "managedObjectContext"));
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100074B74;
  v14[3] = &unk_1007DA290;
  v15 = v7;
  v16 = a1[4];
  v17 = WeakRetained;
  v18 = a1[5];
  v19 = a1[6];
  v20 = a1[7];
  v10 = a1[8];
  v21 = v6;
  v22 = v10;
  v11 = v6;
  v12 = WeakRetained;
  v13 = v7;
  objc_msgSend(v9, "performBlock:", v14);

}

void sub_100074B74(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  void *v25;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    if (objc_msgSend(v2, "code") == (id)2)
    {
      v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkitCollaboration](REMLog, "cloudkitCollaboration"));
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        sub_100682B90(a1);

      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CKPartialErrorsByItemIDKey));

      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_100074E70;
      v16[3] = &unk_1007DA228;
      v17 = *(id *)(a1 + 40);
      v18 = *(id *)(a1 + 48);
      v19 = *(id *)(a1 + 56);
      v20 = *(id *)(a1 + 64);
      v21 = *(id *)(a1 + 72);
      objc_msgSend(v6, "enumerateKeysAndObjectsUsingBlock:", v16);

    }
    v7 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkitCollaboration](REMLog, "cloudkitCollaboration"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_100682A9C();

    v8 = *(_QWORD *)(a1 + 88);
    if (v8)
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v8 + 16))(v8, 0, *v3);
  }
  else
  {
    v9 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkitCollaboration](REMLog, "cloudkitCollaboration"));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "ic_loggingDescription"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "ic_loggingDescription"));
      *(_DWORD *)buf = 138412546;
      v23 = v10;
      v24 = 2112;
      v25 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Saved share %@ %@", buf, 0x16u);

    }
    v12 = objc_msgSend(*(id *)(a1 + 80), "indexOfObjectPassingTest:", &stru_1007DA268);
    if (v12 == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      v13 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkitCollaboration](REMLog, "cloudkitCollaboration"));
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        sub_100682A04(a1);
      v14 = 0;
    }
    else
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "objectAtIndex:", v12));
      v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "managedObjectContext"));
      objc_msgSend(*(id *)(a1 + 40), "setServerShareIfNewer:", v14);
      -[NSObject ic_save](v13, "ic_save");
    }

    v15 = *(_QWORD *)(a1 + 88);
    if (v15)
      (*(void (**)(uint64_t, void *, _QWORD))(v15 + 16))(v15, v14, 0);

  }
}

void sub_100074E70(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  unsigned int v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  int v28;
  void *v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  id v35;

  v5 = a2;
  v6 = a3;
  v7 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkitCollaboration](REMLog, "cloudkitCollaboration"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shortLoggingDescription"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ic_loggingDescription"));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
    v28 = 138413058;
    v29 = v25;
    v30 = 2112;
    v31 = v26;
    v32 = 2112;
    v33 = v27;
    v34 = 2112;
    v35 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error saving share for %@ when saving record ID %@ %@: %@", (uint8_t *)&v28, 0x2Au);

  }
  if (objc_msgSend(v6, "code") == (id)14)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", CKRecordChangedErrorServerRecordKey));

    if (v9)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "recordID"));
      v11 = objc_msgSend(v5, "isEqual:", v10);

      if (v11)
      {
        v12 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkitCollaboration](REMLog, "cloudkitCollaboration"));
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "ic_loggingDescription"));
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shortLoggingDescription"));
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
          v28 = 138412802;
          v29 = v13;
          v30 = 2112;
          v31 = v14;
          v32 = 2112;
          v33 = v15;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Saving server record %@ for %@ %@", (uint8_t *)&v28, 0x20u);

        }
        objc_msgSend(*(id *)(a1 + 32), "objectWasFetchedFromCloudWithRecord:accountID:", v9, *(_QWORD *)(a1 + 56));
        goto LABEL_17;
      }
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "recordID"));
      v18 = objc_msgSend(v5, "isEqual:", v17);

      if (!v18)
      {
LABEL_17:
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
        objc_msgSend(v24, "ic_saveWithLogDescription:", CFSTR("Saving Share"));

        goto LABEL_18;
      }
      v19 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkitCollaboration](REMLog, "cloudkitCollaboration"));
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "ic_loggingDescription"));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shortLoggingDescription"));
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
        v28 = 138412802;
        v29 = v20;
        v30 = 2112;
        v31 = v21;
        v32 = 2112;
        v33 = v22;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Saving server share %@ for %@ %@", (uint8_t *)&v28, 0x20u);

      }
      v23 = objc_opt_class(CKShare);
      if ((objc_opt_isKindOfClass(v9, v23) & 1) != 0)
      {
        objc_msgSend(*(id *)(a1 + 32), "setServerShareIfNewer:", v9);
        goto LABEL_17;
      }
      v16 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkitCollaboration](REMLog, "cloudkitCollaboration"));
      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
        sub_100682CF8();
    }
    else
    {
      v16 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkitCollaboration](REMLog, "cloudkitCollaboration"));
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        sub_100682C28();
    }

    goto LABEL_17;
  }
LABEL_18:

}

BOOL sub_100075250(id a1, id a2, unint64_t a3, BOOL *a4)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  char isKindOfClass;

  v4 = a2;
  v6 = objc_opt_class(CKShare, v5);
  isKindOfClass = objc_opt_isKindOfClass(v4, v6);

  return isKindOfClass & 1;
}

void sub_10007573C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10007577C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  id WeakRetained;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  int v22;
  void *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  id v27;

  v5 = a3;
  v6 = a2;
  v7 = objc_opt_class(CKShare);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));

  v9 = REMDynamicCast(v7, v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  v11 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkitCollaboration](REMLog, "cloudkitCollaboration"));
  v12 = v11;
  if (v10)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "ic_loggingDescription"));
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "ic_loggingDescription"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ckIdentifier"));
      v22 = 138412802;
      v23 = v13;
      v24 = 2114;
      v25 = v15;
      v26 = 2114;
      v27 = v16;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Fetched share %@ %{public}@ %{public}@", (uint8_t *)&v22, 0x20u);

    }
    objc_msgSend(*(id *)(a1 + 48), "saveServerShare:accountID:completionHandler:", v10, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  }
  else
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_loggingDescription"));
      v20 = objc_loadWeakRetained((id *)(a1 + 72));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "ic_loggingDescription"));
      v22 = 138412802;
      v23 = v19;
      v24 = 2112;
      v25 = v21;
      v26 = 2112;
      v27 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Error fetching share %@ %@: %@", (uint8_t *)&v22, 0x20u);

    }
    v17 = *(_QWORD *)(a1 + 64);
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.reminders"), 214, 0));
    (*(void (**)(uint64_t, void *))(v17 + 16))(v17, v18);

  }
}

void sub_100075A98(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100075B2C;
  v7[3] = &unk_1007D7D30;
  v4 = *(NSObject **)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v8 = v3;
  v9 = v5;
  v6 = v3;
  dispatch_async(v4, v7);

}

uint64_t sub_100075B2C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_100075C40(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  _BOOL4 v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  void *v15;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForShare:accountID:context:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56)));
  v3 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkitCollaboration](REMLog, "cloudkitCollaboration"));
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      v5 = (void *)objc_opt_class(v2);
      v6 = v5;
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "identifier"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
      v10 = 138543874;
      v11 = v5;
      v12 = 2114;
      v13 = v7;
      v14 = 2112;
      v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Setting server share on %{public}@ %{public}@ %@", (uint8_t *)&v10, 0x20u);

    }
    objc_msgSend(v2, "setServerShareIfNewer:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 56), "ic_save");
  }
  else
  {
    if (v4)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingDescription"));
      v10 = 138412290;
      v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Couldn't find cloud object for share %@", (uint8_t *)&v10, 0xCu);

    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void sub_100076104(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  unsigned int v5;
  NSObject *v6;
  _BOOL4 v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  _QWORD block[4];
  id v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  void *v19;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForShare:accountID:context:", v2, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56)));
    if (!v3)
      goto LABEL_10;
  }
  else if (!*(_QWORD *)(a1 + 64)
         || (v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "cloudContext")),
             v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "existingCloudObjectForRecordID:recordType:accountID:context:", *(_QWORD *)(a1 + 64), 0, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56))), v4, !v3))
  {
LABEL_10:
    v3 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkitCollaboration](REMLog, "cloudkitCollaboration"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_loggingDescription"));
      *(_DWORD *)buf = 138412290;
      v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Couldn't find cloud object for share %@", buf, 0xCu);

    }
    goto LABEL_16;
  }
  v5 = -[NSObject isOwnedByCurrentUser](v3, "isOwnedByCurrentUser");
  v6 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkitCollaboration](REMLog, "cloudkitCollaboration"));
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject shortLoggingDescription](v3, "shortLoggingDescription"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_loggingDescription"));
      *(_DWORD *)buf = 138412546;
      v17 = v8;
      v18 = 2112;
      v19 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "User stopped sharing %@ %@", buf, 0x16u);

    }
    -[NSObject setCkNeedsToBeFetchedFromCloud:](v3, "setCkNeedsToBeFetchedFromCloud:", 1);
    -[NSObject setCkServerShare:](v3, "setCkServerShare:", 0);
  }
  else
  {
    if (v7)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject shortLoggingDescription](v3, "shortLoggingDescription"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_loggingDescription"));
      *(_DWORD *)buf = 138412546;
      v17 = v11;
      v18 = 2112;
      v19 = v12;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "User removed themselves from shared %@ %@", buf, 0x16u);

    }
    -[NSObject markForDeletion](v3, "markForDeletion");
    -[NSObject deleteFromLocalDatabase](v3, "deleteFromLocalDatabase");
  }
  objc_msgSend(*(id *)(a1 + 56), "ic_save");
LABEL_16:

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000763BC;
  block[3] = &unk_1007D8118;
  v13 = *(NSObject **)(a1 + 72);
  v15 = *(id *)(a1 + 80);
  dispatch_async(v13, block);

}

uint64_t sub_1000763BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100076980(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1000769C0(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudContext"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "primaryCloudKitAccountInContext:", *(_QWORD *)(a1 + 40)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "identifier"));
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString"));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_100076A40(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  unsigned __int8 v7;
  NSObject *v8;
  void *v9;
  void *v10;
  dispatch_queue_global_t global_queue;
  NSObject *v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  NSObject *v22;
  id v23;
  uint64_t v24;
  _QWORD v25[5];
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  _QWORD block[4];
  id v32;
  uint64_t v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  void *v37;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "share"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForShare:accountID:context:", v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), *(_QWORD *)(a1 + 48)));

  if (v4
    && (v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ckServerShare"))) != 0
    && (v6 = (void *)v5, v7 = objc_msgSend(v4, "markedForDeletion"), v6, (v7 & 1) == 0))
  {
    v17 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkitCollaboration](REMLog, "cloudkitCollaboration"));
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "shortLoggingDescription"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "share"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "ic_loggingDescription"));
      *(_DWORD *)buf = 138412546;
      v35 = v18;
      v36 = 2112;
      v37 = v20;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Accepting share: Found existing object %@ for share metadata %@", buf, 0x16u);

    }
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "share"));
    objc_msgSend(v4, "didAcceptShare:", v21);

    objc_msgSend(*(id *)(a1 + 48), "ic_save");
    v22 = *(NSObject **)(a1 + 56);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100076D54;
    block[3] = &unk_1007DA330;
    v23 = *(id *)(a1 + 72);
    v24 = *(_QWORD *)(a1 + 80);
    v32 = v23;
    v33 = v24;
    dispatch_async(v22, block);
    v16 = v32;
  }
  else
  {
    v8 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkitCollaboration](REMLog, "cloudkitCollaboration"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "share"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "ic_loggingDescription"));
      *(_DWORD *)buf = 138412290;
      v35 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Accepting share: No existing object for share metadata %@", buf, 0xCu);

    }
    global_queue = dispatch_get_global_queue(2, 0);
    v12 = objc_claimAutoreleasedReturnValue(global_queue);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_100076D74;
    v25[3] = &unk_1007DA3A8;
    v13 = *(void **)(a1 + 40);
    v25[4] = *(_QWORD *)(a1 + 32);
    v26 = v13;
    v14 = *(id *)(a1 + 64);
    v15 = *(_QWORD *)(a1 + 80);
    v27 = v14;
    v30 = v15;
    v28 = *(id *)(a1 + 56);
    v29 = *(id *)(a1 + 72);
    dispatch_async(v12, v25);

    v16 = v26;
  }

}

uint64_t sub_100076D54(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 0, 1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

void sub_100076D74(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100076E24;
  v6[3] = &unk_1007DA380;
  v5 = *(_QWORD *)(a1 + 48);
  v7 = *(id *)(a1 + 56);
  v8 = *(id *)(a1 + 64);
  objc_msgSend(v2, "acceptShareWithMetadata:container:accountID:fetchObjectWithCompletionHandler:", v3, v5, v4, v6);

}

void sub_100076E24(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7;
  id v8;
  NSObject *v9;
  id v10;
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;
  char v17;

  v7 = a2;
  v8 = a4;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100076EEC;
  v13[3] = &unk_1007DA358;
  v9 = *(NSObject **)(a1 + 32);
  v10 = *(id *)(a1 + 40);
  v15 = v8;
  v16 = v10;
  v17 = a3;
  v14 = v7;
  v11 = v8;
  v12 = v7;
  dispatch_async(v9, v13);

}

uint64_t sub_100076EEC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 40));
}

void sub_100077680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  id *v29;

  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000776C4(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;

  v5 = a3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "recordID"));
  if (v4)
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, v4);

}

void sub_100077718(id *a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  void (**v6)(id, id, _QWORD, id);
  void *v7;
  void *v8;
  id WeakRetained;
  void *v10;
  void *v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  _QWORD v25[4];
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  void *v38;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkitCollaboration](REMLog, "cloudkitCollaboration"));
  v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_100683088((uint64_t)a1, (uint64_t)v3, v5);

    v6 = (void (**)(id, id, _QWORD, id))a1[8];
    if (v6)
      v6[2](v6, v3, 0, a1[5]);
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "share"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "URL"));
      WeakRetained = objc_loadWeakRetained(a1 + 9);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "ic_loggingDescription"));
      *(_DWORD *)buf = 138412546;
      v36 = v8;
      v37 = 2112;
      v38 = v10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Share accepted for URL %@ %@", buf, 0x16u);

    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "hierarchicalRootRecordID"));
    v12 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkitCollaboration](REMLog, "cloudkitCollaboration"));
    v13 = v12;
    if (v11)
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "ic_loggingDescription"));
        v15 = a1[5];
        *(_DWORD *)buf = 138412546;
        v36 = v14;
        v37 = 2112;
        v38 = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Fetching record from share %@, account ID = %@", buf, 0x16u);

      }
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "cloudContext"));
      v34 = v11;
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v34, 1));
      v18 = a1[5];
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_100077AD4;
      v25[3] = &unk_1007DA448;
      v19 = v11;
      v20 = a1[6];
      v26 = v19;
      v27 = v20;
      v28 = a1[4];
      v29 = a1[7];
      objc_copyWeak(&v33, a1 + 9);
      v30 = a1[5];
      v21 = a1[8];
      v31 = 0;
      v32 = v21;
      objc_msgSend(v16, "fetchRecordIDs:accountID:operationGroupName:runExclusively:completionHandler:", v17, v18, CFSTR("FetchRecordForAcceptedShare"), 1, v25);

      objc_destroyWeak(&v33);
    }
    else
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "share"));
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "ic_loggingDescription"));
        *(_DWORD *)buf = 138412290;
        v36 = v23;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "No root record when accepting share: %@", buf, 0xCu);

      }
      v24 = a1[8];
      if (v24)
        (*((void (**)(id, _QWORD, _QWORD, id))v24 + 2))(v24, 0, 0, a1[5]);
    }

  }
}

void sub_100077AB8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100077AD4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void **v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  NSObject *v19;
  id v20;
  uint8_t buf[4];
  void *v22;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkitCollaboration](REMLog, "cloudkitCollaboration"));
  v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_100683178(a1);
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_loggingDescription"));
      *(_DWORD *)buf = 138412290;
      v22 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Fetched record from share %@", buf, 0xCu);

    }
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "cloudContext"));
    v8 = objc_msgSend(v7, "newBackgroundContext");

    v11 = _NSConcreteStackBlock;
    v12 = 3221225472;
    v13 = sub_100077D04;
    v14 = &unk_1007DA420;
    v15 = *(id *)(a1 + 48);
    v16 = *(id *)(a1 + 56);
    objc_copyWeak(&v20, (id *)(a1 + 88));
    v17 = *(id *)(a1 + 32);
    v18 = *(id *)(a1 + 64);
    v5 = v8;
    v19 = v5;
    -[NSObject performBlockAndWait:](v5, "performBlockAndWait:", &v11);

    objc_destroyWeak(&v20);
  }

  v9 = *(_QWORD *)(a1 + 80);
  if (v9)
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(v9 + 16))(v9, *(_QWORD *)(a1 + 72), 0, *(_QWORD *)(a1 + 64));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "cloudContext", v11, v12, v13, v14));
  objc_msgSend(v10, "syncWithReason:discretionary:completionHandler:", CFSTR("SyncAfterAcceptShare"), 0, 0);

}

void sub_100077CE8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100077D04(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  id WeakRetained;
  void *v11;
  NSObject *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "share"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "recordID"));

  if (!v3)
    goto LABEL_5;
  v4 = *(void **)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "share"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "recordID"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v6));

  v8 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkitCollaboration](REMLog, "cloudkitCollaboration"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "ic_loggingDescription"));
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "ic_loggingDescription"));
    v17 = 138412546;
    v18 = v9;
    v19 = 2112;
    v20 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Using share from per-share completion block %@: %@", (uint8_t *)&v17, 0x16u);

  }
  if (!v7)
  {
LABEL_5:
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "share"));
    v12 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkitCollaboration](REMLog, "cloudkitCollaboration"));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "ic_loggingDescription"));
      v14 = objc_loadWeakRetained((id *)(a1 + 72));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "ic_loggingDescription"));
      v17 = 138412546;
      v18 = v13;
      v19 = 2112;
      v20 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Falling back to share from metadata %@: %@", (uint8_t *)&v17, 0x16u);

    }
  }
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDObject objectWithRecordID:accountID:context:](REMCDObject, "objectWithRecordID:accountID:context:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64)));
  objc_msgSend(v16, "didAcceptShare:", v7);
  objc_msgSend(*(id *)(a1 + 64), "ic_save");

}

void sub_1000794CC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v4 = (id)objc_claimAutoreleasedReturnValue(+[REMCDObject entity](REMCDAccount, "entity"));
  objc_msgSend(*(id *)(a1 + 32), "_heightOfEntityNodeInMOMTreeForEffectiveMinimumSupportedVersionPropagation:heightMap:", v4, v2);
  v3 = (void *)qword_100852878;
  qword_100852878 = v2;

}

uint64_t sub_1000795E0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "entity"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "name"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "entity"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "name"));

  if (v7)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v7));
    v11 = objc_msgSend(v10, "unsignedIntegerValue");

    if (v9)
    {
LABEL_3:
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v9));
      v13 = objc_msgSend(v12, "unsignedIntegerValue");

      goto LABEL_6;
    }
  }
  else
  {
    v11 = 0;
    if (v9)
      goto LABEL_3;
  }
  v13 = 0;
LABEL_6:
  if (v11 <= v13)
  {
    if (v11 >= v13)
    {
      v14 = 0;
      if (v7 && v9)
        v14 = (uint64_t)objc_msgSend(v7, "compare:", v9);
    }
    else
    {
      v14 = 1;
    }
  }
  else
  {
    v14 = -1;
  }

  return v14;
}

void sub_100079A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100079A40(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  __objc2_class **v17;
  void *v18;
  void *v19;
  REMCDObjectTreeProcessor *v20;
  void *v21;
  uint64_t v22;
  id v23;

  v3 = a2;
  if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:", v3) & 1) == 0)
  {
    v4 = objc_autoreleasePoolPush();
    v5 = *(void **)(a1 + 40);
    v23 = 0;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "existingObjectWithID:error:", v3, &v23));
    v7 = v23;
    v8 = v7;
    if (v7)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "userInfo"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", NSDebugDescriptionErrorKey));

      if (!v10)
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "description"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "domain"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v8, "code")));
      v13 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@[%@] - %@"), v11, v12, v10));

      v14 = objc_claimAutoreleasedReturnValue(+[REMLogStore write](REMLogStore, "write"));
      if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
        sub_10068355C((uint64_t)v3, (uint64_t)v13, v14);

    }
    else
    {
      v15 = objc_opt_class(REMCDObject);
      v16 = REMDynamicCast(v15, v6);
      v10 = (void *)objc_claimAutoreleasedReturnValue(v16);
      if (v10)
      {
        v17 = off_1007D66F8;
        if (*(_BYTE *)(a1 + 64))
          v17 = &off_1007D6B98;
        v13 = objc_alloc_init(*v17);
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectID"));
        -[NSObject setManagedObjectID:](v13, "setManagedObjectID:", v18);

        -[NSObject setBackingCDObject:](v13, "setBackingCDObject:", v10);
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectTreeProcessorDelegateFactoryWithTreeNode:", v13));
        v20 = -[REMCDObjectTreeProcessor initWithTraversalOrder:batchSize:delegate:]([REMCDObjectTreeProcessor alloc], "initWithTraversalOrder:batchSize:delegate:", 0, *(_QWORD *)(a1 + 56), v19);
        v21 = (void *)objc_claimAutoreleasedReturnValue(-[REMCDObjectTreeProcessor traverse:](v20, "traverse:", v13));
        objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", v21);
        ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);

      }
      else
      {
        v13 = objc_claimAutoreleasedReturnValue(+[REMLogStore write](REMLogStore, "write"));
        if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
          sub_1006834F4((uint64_t)v3, v13, v22);
      }
    }

    objc_autoreleasePoolPop(v4);
  }

}

void sub_10007AF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007AF98(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10007AFA8(uint64_t a1)
{

}

uint64_t sub_10007AFB0(_QWORD *a1)
{
  NSString *(__cdecl **v2)(SEL);
  NSObject *v3;
  uint64_t v4;
  id v5;
  void *i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  void *j;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  NSObject *v26;
  NSObject *v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t result;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id obj;
  id obja;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  id v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  id v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint8_t v53[128];
  uint8_t buf[4];
  uint64_t v55;
  __int16 v56;
  id v57;
  __int16 v58;
  id v59;
  __int16 v60;
  id v61;
  __int16 v62;
  void *v63;
  __int16 v64;
  void *v65;
  _BYTE v66[128];

  v2 = &NSStringFromSelector_ptr;
  v3 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40);
    v5 = objc_msgSend(*(id *)(*(_QWORD *)(a1[7] + 8) + 40), "count");
    *(_DWORD *)buf = 138543618;
    v55 = v4;
    v2 = &NSStringFromSelector_ptr;
    v56 = 2048;
    v57 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}@] after save {attachmentIDs.count: %ld}", buf, 0x16u);
  }

  v52 = 0u;
  v50 = 0u;
  v51 = 0u;
  v49 = 0u;
  obj = *(id *)(*(_QWORD *)(a1[7] + 8) + 40);
  v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v49, v66, 16);
  if (v41)
  {
    v39 = *(_QWORD *)v50;
    do
    {
      for (i = 0; i != v41; i = (char *)i + 1)
      {
        if (*(_QWORD *)v50 != v39)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * (_QWORD)i);
        v8 = objc_autoreleasePoolPush();
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[7] + 8) + 40), "objectForKeyedSubscript:", v7));
        v10 = (void *)a1[4];
        v48 = 0;
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "purgeAttachmentFilesWithAttachmentIDs:accountID:error:", v9, v7, &v48));
        v12 = v48;
        v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2[282], "container"));
        v14 = v13;
        if (v12)
        {
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            v35 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40);
            v33 = objc_msgSend(v12, "code");
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "localizedDescription"));
            *(_DWORD *)buf = 138544642;
            v55 = v35;
            v56 = 2114;
            v57 = v7;
            v58 = 2048;
            v59 = v33;
            v60 = 2112;
            v61 = v15;
            v62 = 2114;
            v63 = v9;
            v64 = 2114;
            v65 = v11;
            _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[%{public}@] Purge attachment files failed {accountID: %{public}@, code: %ld, error: %@, attachmentIDs: %{public}@, purged: %{public}@}", buf, 0x3Eu);

            v2 = &NSStringFromSelector_ptr;
          }
        }
        else if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          v16 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40);
          v17 = objc_msgSend(v9, "count");
          v18 = objc_msgSend(v11, "count");
          *(_DWORD *)buf = 138544130;
          v55 = v16;
          v56 = 2114;
          v57 = v7;
          v58 = 2048;
          v59 = v17;
          v2 = &NSStringFromSelector_ptr;
          v60 = 2048;
          v61 = v18;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[%{public}@] Purged attachment files for {accountID: %{public}@, attachmentIDs.count: %ld, purged.count: %ld}", buf, 0x2Au);
        }

        objc_autoreleasePoolPop(v8);
      }
      v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v49, v66, 16);
    }
    while (v41);
  }

  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  obja = *(id *)(*(_QWORD *)(a1[8] + 8) + 40);
  v42 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v44, v53, 16);
  if (v42)
  {
    v40 = *(_QWORD *)v45;
    do
    {
      for (j = 0; j != v42; j = (char *)j + 1)
      {
        if (*(_QWORD *)v45 != v40)
          objc_enumerationMutation(obja);
        v20 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)j);
        v21 = objc_autoreleasePoolPush();
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[8] + 8) + 40), "objectForKeyedSubscript:", v20));
        v23 = (void *)a1[4];
        v43 = 0;
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "purgeAttachmentFilesWithSha512SumsAndExtensions:accountID:error:", v22, v20, &v43));
        v25 = v43;
        v26 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2[282], "container"));
        v27 = v26;
        if (v25)
        {
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            v36 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40);
            v34 = objc_msgSend(v25, "code");
            v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "localizedDescription"));
            *(_DWORD *)buf = 138544642;
            v55 = v36;
            v56 = 2114;
            v57 = v20;
            v58 = 2048;
            v59 = v34;
            v60 = 2112;
            v61 = v28;
            v62 = 2114;
            v63 = v22;
            v64 = 2114;
            v65 = v24;
            _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "[%{public}@] Purge attachment files failed {accountID: %{public}@, code: %ld, error: %@, fileNames: %{public}@, purged: %{public}@}", buf, 0x3Eu);

            v2 = &NSStringFromSelector_ptr;
          }
        }
        else if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          v29 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40);
          v30 = objc_msgSend(v22, "count");
          v31 = objc_msgSend(v24, "count");
          *(_DWORD *)buf = 138544130;
          v55 = v29;
          v56 = 2114;
          v57 = v20;
          v58 = 2048;
          v59 = v30;
          v2 = &NSStringFromSelector_ptr;
          v60 = 2048;
          v61 = v31;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "[%{public}@] Purged attachment files for {accountID: %{public}@, fileNames.count: %ld, purged.count: %ld}", buf, 0x2Au);
        }

        objc_autoreleasePoolPop(v21);
      }
      v42 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v44, v53, 16);
    }
    while (v42);
  }

  result = a1[5];
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10007BB4C(_Unwind_Exception *exception_object, int a2)
{
  id v2;
  NSObject *v3;

  if (a2 == 1)
  {
    v2 = objc_begin_catch(exception_object);
    v3 = objc_claimAutoreleasedReturnValue(+[REMLogStore search](REMLogStore, "search"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      sub_100683734();

    objc_end_catch();
    JUMPOUT(0x10007BB14);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007BD38(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;

  v3 = a2;
  if (v3)
  {
    v4 = objc_claimAutoreleasedReturnValue(+[REMLogStore search](REMLogStore, "search"));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1006837FC((uint64_t)v3, a1, v4);

  }
}

void sub_10007CE54(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x16u);
}

void sub_10007D70C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  int v10;
  void *v11;

  v5 = a3;
  v6 = objc_claimAutoreleasedReturnValue(+[REMLog utility](REMLog, "utility"));
  v7 = v6;
  if (v5 || (a2 & 1) == 0)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1006839A0((uint64_t)v5, v7);
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
    v10 = 138412290;
    v11 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Done unset didChooseToMigrate and didFinishMigration on ACAccount (%@)", (uint8_t *)&v10, 0xCu);

  }
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
    (*(void (**)(uint64_t, uint64_t, id))(v9 + 16))(v9, a2, v5);

}

id sub_10007D9C4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = objc_opt_class(CKModifyRecordsOperation);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "recordIDsToDelete"));
    v6 = objc_msgSend(v5, "containsObject:", *(_QWORD *)(a1 + 32));

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

id sub_10007DB10(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = objc_opt_class(CKFetchRecordsOperation);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "recordIDs"));
    v6 = objc_msgSend(v5, "containsObject:", *(_QWORD *)(a1 + 32));

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

id sub_10007DC5C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  v4 = objc_opt_class(CKModifyRecordsOperation);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "recordsToSave"));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10007DD20;
    v8[3] = &unk_1007DA5A8;
    v9 = *(id *)(a1 + 32);
    v6 = objc_msgSend(v5, "ic_containsObjectPassingTest:", v8);

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

id sub_10007DD20(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "recordID"));
  v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(a1 + 32));

  return v4;
}

void sub_10007E088(id a1)
{
  NSBundle *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v1 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(REMLog));
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v6 = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v6, 1));
  v4 = objc_claimAutoreleasedReturnValue(+[NSManagedObjectModel mergedModelFromBundles:](NSManagedObjectModel, "mergedModelFromBundles:", v3));
  v5 = (void *)qword_100852888;
  qword_100852888 = v4;

}

void sub_10007E4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10007E500(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned __int8 v7;
  id v8;
  NSObject *v9;
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMapTable strongToWeakObjectsMapTable](NSMapTable, "strongToWeakObjectsMapTable"));
  objc_msgSend(*(id *)(a1 + 32), "setL_accountStoreMap:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMapTable strongToStrongObjectsMapTable](NSMapTable, "strongToStrongObjectsMapTable"));
  objc_msgSend(*(id *)(a1 + 32), "setL_accountStorageCacheByObjectIDs:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMapTable strongToStrongObjectsMapTable](NSMapTable, "strongToStrongObjectsMapTable"));
  objc_msgSend(*(id *)(a1 + 32), "setL_accountExternalIdentifiersToObjectIDsMap:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSHashTable hashTableWithOptions:](NSHashTable, "hashTableWithOptions:", 0));
  objc_msgSend(*(id *)(a1 + 32), "setL_allGenericAccountsObjectIDs:", v5);

  v6 = *(void **)(a1 + 32);
  v10 = 0;
  v7 = objc_msgSend(v6, "l_loadAccountStoresFromDiskDeletingFilesMarkedDeleted:shouldDeleteInvalidStoresImmediately:error:", 1, 1, &v10);
  v8 = v10;
  if ((v7 & 1) == 0)
  {
    v9 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_100683AB0();

    objc_msgSend(*(id *)(a1 + 40), "accountStoresFailToLoadWithError:", v8);
  }

}

void sub_10007E628(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  os_unfair_lock_s *WeakRetained;
  os_unfair_lock_s *v6;

  v3 = a2;
  if (v3)
  {
    v4 = objc_claimAutoreleasedReturnValue(+[REMLogStore search](REMLogStore, "search"));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_100683B10();
  }
  else
  {
    WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 32));
    v4 = WeakRetained;
    if (WeakRetained)
    {
      v6 = WeakRetained + 4;
      os_unfair_lock_lock(WeakRetained + 4);
      v4 = v4;
      -[NSObject l_activateCoreSpotlightDelegates](v4, "l_activateCoreSpotlightDelegates");
      os_unfair_lock_unlock(v6);

    }
  }

}

void sub_1000822EC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;

  v7 = a2;
  v5 = a3;
  v6 = v5;
  if (v5 && (objc_msgSend(v5, "isEqual:", CFSTR("NullMetadataAccountIdentifier")) & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, v6);

}

void sub_1000857BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&a45, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000857E8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000857F8(uint64_t a1)
{

}

void sub_100085800(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_deduplicateStore:withStore:isLocalAccountType:managedObjectContext:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 72), *(_QWORD *)(a1 + 56)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100085B24(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  __int128 v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  unsigned int v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  id v30;
  NSObject *v31;
  NSObject *v32;
  id v33;
  NSObject *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  void *v42;
  id v43;
  NSObject *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  __int128 v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  id v56;
  uint64_t v57;
  void *v58;
  id v59;
  void *v60;
  id v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint8_t buf[4];
  id v67;
  __int16 v68;
  void *v69;
  __int16 v70;
  void *v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  void *v75;
  void *v76;
  _BYTE v77[128];
  _QWORD v78[2];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAccount fetchRequest](REMCDAccount, "fetchRequest"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithValue:](NSPredicate, "predicateWithValue:", 1));
  objc_msgSend(v2, "setPredicate:", v3);

  objc_msgSend(v2, "setResultType:", 2);
  v78[0] = CFSTR("identifier");
  v78[1] = CFSTR("type");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v78, 2));
  v58 = v2;
  objc_msgSend(v2, "setPropertiesToFetch:", v4);

  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v5 = *(id *)(a1 + 32);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v62, v77, 16);
  if (v6)
  {
    v8 = v6;
    v9 = *(_QWORD *)v63;
    *(_QWORD *)&v7 = 138544386;
    v49 = v7;
    v56 = v5;
    v57 = *(_QWORD *)v63;
    do
    {
      v10 = 0;
      v59 = v8;
      do
      {
        if (*(_QWORD *)v63 != v9)
          objc_enumerationMutation(v5);
        v11 = *(void **)(*((_QWORD *)&v62 + 1) + 8 * (_QWORD)v10);
        v12 = objc_autoreleasePoolPush();
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "URL"));
        v14 = objc_msgSend(v13, "isEqual:", *(_QWORD *)(a1 + 40));

        if (v14)
        {
          objc_msgSend(*(id *)(a1 + 48), "setObject:forKey:", v11, CFSTR("local"));
          goto LABEL_43;
        }
        v76 = v11;
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v76, 1));
        objc_msgSend(v58, "setAffectedStores:", v15);

        v16 = *(void **)(a1 + 56);
        v61 = 0;
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "executeFetchRequest:error:", v58, &v61));
        v18 = v61;
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "valueForKey:", CFSTR("identifier")));
        v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "valueForKey:", CFSTR("type")));
        v21 = (void *)v20;
        if (!v19 || !v20)
        {
          v29 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container", v49));
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543618;
            v67 = v18;
            v68 = 2112;
            v69 = v11;
            _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "[_validateAccountStores] Error fetching account ID from store {error: %{public}@, store: %@}", buf, 0x16u);
          }

          objc_msgSend(*(id *)(a1 + 72), "addObject:", v11);
          goto LABEL_42;
        }
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "valueForKey:", CFSTR("UUIDString")));
        v60 = v22;
        if (objc_msgSend(v22, "count") == (id)1)
        {
          v55 = v18;
          if (objc_msgSend(v21, "count"))
          {
            v23 = objc_opt_class(NSNumber);
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectAtIndexedSubscript:", 0));
            v25 = REMDynamicCast(v23, v24);
            v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
            v27 = (int)objc_msgSend(v26, "intValue");

            v5 = v56;
            if (v27)
            {
              if (v27 == 1)
              {
                objc_msgSend(*(id *)(a1 + 64), "addObject:", v11);
                v28 = 1;
              }
              else
              {
                v28 = 0;
              }
              v18 = v55;
              v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "firstObject", v49));
              v38 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "valueForKey:", v37));
              v54 = (void *)v38;
              if (v38)
              {
                v53 = v37;
                v39 = (void *)v38;
                v40 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "_deduplicateStore:withStore:isLocalAccountType:managedObjectContext:", v38, v11, v28, *(_QWORD *)(a1 + 56)));
                objc_msgSend(*(id *)(a1 + 72), "addObject:", v40);
                v41 = v39;
                v42 = v41;
                v51 = (void *)v40;
                if ((id)v40 == v41)
                {
                  v43 = v11;

                  objc_msgSend(*(id *)(a1 + 48), "setObject:forKey:", v43, v53);
                  v52 = v43;
                }
                else
                {
                  v52 = v41;
                }
                v44 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
                v36 = v60;
                if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
                {
                  v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "identifier"));
                  v47 = objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "identifier"));
                  *(_DWORD *)buf = v49;
                  v67 = v53;
                  v68 = 2114;
                  v69 = v50;
                  v70 = 2112;
                  v71 = v52;
                  v72 = 2114;
                  v73 = v47;
                  v48 = (void *)v47;
                  v74 = 2112;
                  v75 = v51;
                  _os_log_error_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "[_validateAccountStores] Found duplicated stores for the same account, treating one of them as invalid {accountID: %{public}@, valid: storeid=%{public}@ %@, invalid: storeid=%{public}@ %@}", buf, 0x34u);

                  v36 = v60;
                }

                v37 = v53;
              }
              else
              {
                objc_msgSend(*(id *)(a1 + 48), "setObject:forKey:", v11, v37);
                v36 = v60;
              }

              v5 = v56;
              goto LABEL_41;
            }
          }
          else
          {
            v34 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
            if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT))
            {
              v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "firstObject"));
              *(_DWORD *)buf = 138543618;
              v67 = v46;
              v68 = 2112;
              v69 = v11;
              _os_log_fault_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "[_validateAccountStores] RDCDAccountTypeKey from [REMCDAccount fetchRequest] yields no result unexpectedly {accountID: %{public}@, store: %@}", buf, 0x16u);

            }
          }
          v35 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container", v49));
          v18 = v55;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_FAULT))
          {
            v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "firstObject"));
            *(_DWORD *)buf = 138543618;
            v67 = v45;
            v68 = 2112;
            v69 = v11;
            _os_log_fault_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_FAULT, "[_validateAccountStores] Found corrupted store with unkwown account type {accountID: %{public}@, store: %@}", buf, 0x16u);

            v5 = v56;
          }

          objc_msgSend(*(id *)(a1 + 72), "addObject:", v11);
        }
        else
        {
          v30 = objc_msgSend(v22, "count");
          v31 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
          v32 = v31;
          if (v30)
          {
            if (os_log_type_enabled(v31, OS_LOG_TYPE_FAULT))
            {
              v33 = objc_msgSend(v60, "count");
              *(_DWORD *)buf = 134218498;
              v67 = v33;
              v68 = 2114;
              v69 = v60;
              v70 = 2112;
              v71 = v11;
              _os_log_fault_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "[_validateAccountStores] Found corrupted store with %ld REMCDAccount objects {accountIDs: %{public}@, store: %@}", buf, 0x20u);
            }
          }
          else if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v67 = v11;
            _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "[_validateAccountStores] Found store with no REMCDAccount. Going to disconnect and destroy {store: %@}", buf, 0xCu);
          }

          objc_msgSend(*(id *)(a1 + 72), "addObject:", v11);
          v5 = v56;
        }
        v36 = v60;
LABEL_41:

LABEL_42:
        v8 = v59;
        v9 = v57;
LABEL_43:
        objc_autoreleasePoolPop(v12);
        v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v62, v77, 16);
    }
    while (v8);
  }

}

void sub_100086FE4(uint64_t a1)
{
  void *v1;
  unsigned int v2;
  id v3;
  NSObject *v4;
  NSObject *v5;
  uint8_t v6[8];
  id v7;

  v1 = *(void **)(a1 + 32);
  v7 = 0;
  v2 = objc_msgSend(v1, "save:", &v7);
  v3 = v7;
  v4 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
  v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "RDStoreControllerMigrator: [MIGRATE STORE] Did update stores metadata", v6, 2u);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    sub_1006841AC();
  }

}

void sub_100087978(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned __int8 v13;
  NSObject *v14;
  void *v15;
  id v16;
  id v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  NSObject *v31;
  void *v32;
  id v33;
  NSObject *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  objc_class *v38;
  NSString *v39;
  NSString *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  void *v51;
  void *v52;
  void *v53;
  id v54;
  id v55;
  id v56;
  id v57;
  unsigned __int8 v58;
  uint8_t buf[4];
  void *v60;
  __int16 v61;
  _BYTE v62[18];
  __int16 v63;
  void *v64;

  v3 = a2;
  v4 = objc_autoreleasePoolPush();
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "URL"));
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "lastPathComponent"));
  v7 = (void *)v6;
  if (v5 && v6)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "URLByDeletingLastPathComponent"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "URLByDeletingLastPathComponent"));

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "path"));
    v58 = 0;
    if (!v10 || !objc_msgSend(*(id *)(a1 + 40), "fileExistsAtPath:isDirectory:", v10, &v58) || !v58)
    {
      v20 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412802;
        v60 = v10;
        v61 = 1024;
        *(_DWORD *)v62 = v58;
        *(_WORD *)&v62[4] = 2112;
        *(_QWORD *)&v62[6] = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "[addValidatedStoresToAccountStoreMapWithStores] Cannot obtain a valid container directory path from storeURL {reminderDataContainerPath: %@, isDirectory: %d, storeURL: %@}", buf, 0x1Cu);
      }

      objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
      goto LABEL_47;
    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "databaseBackupDirectoryURLWithContainerURL:", v9));
    v12 = *(void **)(a1 + 40);
    v57 = 0;
    v13 = objc_msgSend(v12, "rem_createDirectoryIfNecessaryAtURL:error:", v11, &v57);
    v50 = v57;
    v51 = v11;
    if ((v13 & 1) == 0)
    {
      v14 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v38 = (objc_class *)objc_opt_class(*(_QWORD *)(a1 + 48));
        v39 = NSStringFromClass(v38);
        v53 = (void *)objc_claimAutoreleasedReturnValue(v39);
        v40 = NSStringFromSelector(*(SEL *)(a1 + 56));
        v49 = (void *)objc_claimAutoreleasedReturnValue(v40);
        v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@"), v53, v49));
        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "localizedDescription"));
        *(_DWORD *)buf = 138544130;
        v60 = v47;
        v61 = 2112;
        *(_QWORD *)v62 = v9;
        *(_WORD *)&v62[8] = 2112;
        *(_QWORD *)&v62[10] = v11;
        v63 = 2112;
        v64 = v41;
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[%{public}@] Create directory failed {reminderDataContainerURL: %@, databaseBackupDirectoryURL: %@, error: %@}", buf, 0x2Au);

      }
    }
    objc_msgSend(v11, "setRd_isExcludedFromBackup:", 1);
    v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "invalidStoreBackupURLWithFileName:withContainerURL:", v7, v9));
    if (!v52)
    {
      v21 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        sub_10068427C();

      objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
      goto LABEL_46;
    }
    v15 = *(void **)(a1 + 40);
    v56 = 0;
    objc_msgSend(v15, "copyItemAtURL:toURL:error:", v5, v52, &v56);
    v16 = v56;
    if (v16)
    {
      v17 = v16;
      v18 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        sub_1006843DC();

      objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
      goto LABEL_45;
    }
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "URLByDeletingPathExtension"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "URLByAppendingPathExtension:", CFSTR("sqlite-wal")));

    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "URLByDeletingPathExtension"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "URLByAppendingPathExtension:", CFSTR("sqlite-shm")));

    v44 = v23;
    v45 = objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "path"));
    v43 = v25;
    v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "path"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "URLByDeletingPathExtension"));
    v27 = objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "URLByAppendingPathExtension:", CFSTR("sqlite-wal")));

    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "URLByDeletingPathExtension"));
    v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "URLByAppendingPathExtension:", CFSTR("sqlite-shm")));

    v29 = (void *)v45;
    v17 = 0;
    v42 = (void *)v27;
    if (v45 && v27)
    {
      if (objc_msgSend(*(id *)(a1 + 40), "fileExistsAtPath:", v45))
      {
        v30 = *(void **)(a1 + 40);
        v55 = 0;
        objc_msgSend(v30, "copyItemAtURL:toURL:error:", v44, v27, &v55);
        v17 = v55;
        if (v17)
        {
          v31 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
            sub_100684360();

          v29 = (void *)v45;
        }
      }
      else
      {
        v17 = 0;
      }
    }
    if (v48 && v46 && objc_msgSend(*(id *)(a1 + 40), "fileExistsAtPath:", v48))
    {
      v32 = *(void **)(a1 + 40);
      v54 = v17;
      objc_msgSend(v32, "copyItemAtURL:toURL:error:", v43, v46, &v54);
      v33 = v54;

      if (v33)
      {
        v34 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
          sub_1006842E4();

        v17 = v33;
        v29 = (void *)v45;
        goto LABEL_40;
      }
    }
    else if (v17)
    {
LABEL_40:
      objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
LABEL_44:

LABEL_45:
LABEL_46:

LABEL_47:
      goto LABEL_48;
    }
    v35 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      v36 = v29;
      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
      *(_DWORD *)buf = 138543874;
      v60 = v37;
      v61 = 2112;
      *(_QWORD *)v62 = v3;
      *(_WORD *)&v62[8] = 2112;
      *(_QWORD *)&v62[10] = v52;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "[addValidatedStoresToAccountStoreMapWithStores] Created back up of invalid store {store: id=%{public}@ %@, backupURL: %@}", buf, 0x20u);

      v29 = v36;
    }

    v17 = 0;
    goto LABEL_44;
  }
  v19 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    sub_10068421C();

  objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
LABEL_48:

  objc_autoreleasePoolPop(v4);
}

void sub_100089018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100089030(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "l_accountStoreMap", 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectEnumerator"));

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v9;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObject:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v7));
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v5);
  }

}

void sub_10008922C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100089244(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "l_accountStoreMap", 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "keyEnumerator"));

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v14;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "l_accountStoreMap"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", v8));

        v11 = *(void **)(a1 + 40);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "identifier"));
        LODWORD(v11) = objc_msgSend(v11, "isEqualToString:", v12);

        if ((_DWORD)v11)
        {
          objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v8);

          goto LABEL_11;
        }

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v5)
        continue;
      break;
    }
  }
LABEL_11:

}

void sub_100089588(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  NSObject *v11;
  id v12[4];
  id v13;
  uint64_t v14;
  void *v15;
  id v16;

  v2 = (void *)a1[4];
  v3 = a1[5];
  v16 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "executeFetchRequest:error:", v3, &v16));
  v5 = v16;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "valueForKey:", CFSTR("identifier")));

  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "valueForKey:", CFSTR("UUIDString")));
    os_unfair_lock_lock((os_unfair_lock_t)(a1[6] + 16));
    v12[0] = _NSConcreteStackBlock;
    v12[1] = (id)3221225472;
    v12[2] = sub_1000896D4;
    v12[3] = &unk_1007D7CE0;
    v8 = a1[6];
    v9 = (void *)a1[7];
    v13 = v7;
    v14 = v8;
    v15 = v9;
    v10 = v9;
    v11 = v7;
    sub_1000896D4(v12);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1[6] + 16));

  }
  else
  {
    v11 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_100684568();
  }

}

void sub_1000896D4(id *a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = a1[4];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v6);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "l_accountStoreMap", (_QWORD)v10));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", v7));

        if (v9)
          objc_msgSend(a1[6], "addObject:", v9);

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }

}

void sub_100089870(uint64_t a1)
{
  void *v1;
  void *v2;
  NSBundle *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  _QWORD v9[5];
  _QWORD v10[5];
  uint64_t v11;
  void *v12;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[REMChangeTracking entityNamesToIncludeFromTrackingWithOptionProvider:](REMChangeTracking, "entityNamesToIncludeFromTrackingWithOptionProvider:", *(_QWORD *)(a1 + 32)));
  v11 = NSPersistentHistoryTrackingEntitiesToInclude;
  v12 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1));
  v3 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(REMChangeTracking));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v9[0] = NSPersistentHistoryTrackingKey;
  v9[1] = NSMigratePersistentStoresAutomaticallyOption;
  v10[0] = v2;
  v10[1] = &__kCFBooleanTrue;
  v10[2] = &__kCFBooleanTrue;
  v9[2] = NSInferMappingModelAutomaticallyOption;
  v9[3] = NSPersistentStoreCoordinatorResourceBundlesForMigration;
  v8 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v8, 1));
  v9[4] = NSPersistentStoreServiceConfigurationOptionKey;
  v10[3] = v5;
  v10[4] = &__kCFBooleanTrue;
  v6 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v9, 5));
  v7 = (void *)qword_100852898;
  qword_100852898 = v6;

}

void sub_100089B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100089B50(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  id v6;
  id obj;

  v2 = (void *)a1[4];
  v3 = a1[5];
  v4 = a1[8];
  obj = 0;
  v5 = objc_msgSend(v2, "l_createAccountStoresWithIdentifiers:didAddNewStores:error:", v3, v4, &obj);
  v6 = obj;
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = v5;
  objc_storeStrong((id *)(*(_QWORD *)(a1[7] + 8) + 40), v6);
}

void sub_10008AC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  _Block_object_dispose(&a54, 8);
  _Block_object_dispose(&STACK[0x310], 8);
  _Block_object_dispose(&a58, 8);
  _Unwind_Resume(a1);
}

void sub_10008AC74(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  id v20;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      sub_100684640();

    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a3);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
    if (objc_msgSend(v6, "rem_isDiskFullSQLError"))
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
  }
  else
  {
    v8 = objc_opt_class(NSNumber);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "options"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "valueForKey:", NSPersistentStoreConnectionPoolMaxSizeKey));
    v11 = REMDynamicCast(v8, v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

    v13 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(_QWORD *)(a1 + 40);
      v15 = 138543874;
      v16 = v14;
      v17 = 2114;
      v18 = v12;
      v19 = 2112;
      v20 = v5;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[createOrLoadAccountStores] didAdd store {fileName: %{public}@, connectionPoolMaxSize: %{public}@, addedStoreDescription: %@}", (uint8_t *)&v15, 0x20u);
    }

  }
}

void sub_10008AF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10008AF68(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  void *v5;
  unsigned __int8 v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metadata"));
  v3 = objc_msgSend(v2, "mutableCopy");

  objc_msgSend(v3, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 40), CFSTR("RDStoreControllerAccountIdentifier"));
  v4 = objc_msgSend(v3, "copy");
  objc_msgSend(*(id *)(a1 + 32), "setMetadata:", v4);

  v5 = *(void **)(a1 + 48);
  v10 = 0;
  v6 = objc_msgSend(v5, "save:", &v10);
  v7 = v10;
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 64);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v6;
  if (v9 && v7)
    **(_QWORD **)(a1 + 64) = objc_retainAutorelease(v7);

}

void sub_10008B1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10008B1FC(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned __int8 v6;
  id v7;
  id v8;
  id obj;

  v2 = (void *)a1[4];
  v3 = a1[5];
  v4 = *(_QWORD *)(a1[7] + 8);
  v5 = *(void **)(v4 + 40);
  v8 = 0;
  obj = v5;
  v6 = objc_msgSend(v2, "l_removeAccountStoresWithIdentifiers:deletedObjectIDs:error:", v3, &obj, &v8);
  objc_storeStrong((id *)(v4 + 40), obj);
  v7 = v8;
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = v6;
  objc_storeStrong((id *)(*(_QWORD *)(a1[8] + 8) + 40), v7);
}

void sub_10008BD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  _Block_object_dispose((const void *)(v49 - 176), 8);
  _Block_object_dispose(&a49, 8);
  _Unwind_Resume(a1);
}

void sub_10008BD80(uint64_t a1)
{
  id *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unsigned __int8 v13;
  NSObject *v14;
  id obj;

  v2 = (id *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metadata"));
  v4 = objc_msgSend(v3, "mutableCopy");

  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("RDStoreControllerAccountIdentifier")));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  objc_msgSend(v4, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("RDMarkedForDeletion"));
  v8 = objc_msgSend(v4, "copy");
  objc_msgSend(*v2, "setMetadata:", v8);

  v10 = *(_QWORD *)(a1 + 56);
  v9 = a1 + 56;
  v11 = *(void **)(v9 - 16);
  v12 = *(_QWORD *)(v10 + 8);
  obj = *(id *)(v12 + 40);
  v13 = objc_msgSend(v11, "save:", &obj);
  objc_storeStrong((id *)(v12 + 40), obj);
  if ((v13 & 1) == 0)
  {
    v14 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      sub_100684724(v2, v9, v14);

  }
}

void sub_10008BE9C(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  NSString *v22;
  uint64_t v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  id v29;
  uint64_t v30;
  uint64_t v31;

  v2 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", *(_QWORD *)(a1 + 32));
  v31 = *(_QWORD *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v31, 1));
  objc_msgSend(v2, "setAffectedStores:", v3);

  v4 = objc_msgSend(objc_alloc((Class)NSBatchDeleteRequest), "initWithFetchRequest:", v2);
  v30 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v30, 1));
  objc_msgSend(v4, "setAffectedStores:", v5);

  objc_msgSend(v4, "setResultType:", 1);
  v6 = *(void **)(a1 + 48);
  v20 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "executeRequest:error:", v4, &v20));
  v8 = v20;
  v9 = v20;
  v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "result"));
  v11 = (void *)v10;
  if (v10)
  {
    v22 = NSDeletedObjectsKey;
    v23 = v10;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1));
    v21 = *(_QWORD *)(a1 + 48);
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v21, 1));
    +[NSManagedObjectContext mergeChangesFromRemoteContextSave:intoContexts:](NSManagedObjectContext, "mergeChangesFromRemoteContextSave:intoContexts:", v12, v13);

    v14 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(_QWORD *)(a1 + 32);
      v16 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      v25 = v15;
      v26 = 2112;
      v27 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[markAccountStoreDeleted] Done deleting objects for entity {entity: %@, store: %@}", buf, 0x16u);
    }

    objc_msgSend(*(id *)(a1 + 56), "addObjectsFromArray:", v11);
  }
  else
  {
    v17 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = *(_QWORD *)(a1 + 32);
      v19 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412802;
      v25 = v18;
      v26 = 2112;
      v27 = v19;
      v28 = 2114;
      v29 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "[markAccountStoreDeleted] Failed to delete objects for entity {entity: %@, store: %@, error: %{public}@}", buf, 0x20u);
    }

    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v8);
    if (+[REMSystemUtilities isInternalInstall](REMSystemUtilities, "isInternalInstall"))
      +[REMRadarUtilities promptUserToFileBugWithAlertMessage:bugTitle:bugDescription:](REMRadarUtilities, "promptUserToFileBugWithAlertMessage:bugTitle:bugDescription:", REMRadarUtilitiesAlertMessageDefault, CFSTR("nil localDeletedObjectIDs in RDStoreController.l_markAccountStoreDeletedAndDeleteData"), REMRadarUtilitiesBugDescriptionDefault);
  }

}

void sub_10008C2C0(id a1)
{
  dispatch_queue_attr_t v1;
  dispatch_queue_global_t global_queue;
  NSObject *v3;
  dispatch_queue_t v4;
  void *v5;
  NSObject *attr;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  attr = objc_claimAutoreleasedReturnValue(v1);
  global_queue = dispatch_get_global_queue(17, 0);
  v3 = objc_claimAutoreleasedReturnValue(global_queue);
  v4 = dispatch_queue_create_with_target_V2("com.apple.remindd.RDStoreController.fileIOWorker", attr, v3);
  v5 = (void *)qword_1008528A8;
  qword_1008528A8 = (uint64_t)v4;

}

id sub_10008C858(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "persistentStoreCoordinator"));
  objc_msgSend(v2, "_removeAllPersistentStores:", *(_QWORD *)(a1 + 40));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "l_accountStoreMap"));
  objc_msgSend(v3, "removeAllObjects");

  return objc_msgSend(*(id *)(a1 + 32), "l_invalidateAccountStorageCaches:", CFSTR("invalidateStoreConnections"));
}

uint64_t sub_10008CE90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10008D070(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10008D2DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10008D514(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordID"));
  v4 = (id)objc_claimAutoreleasedReturnValue(+[REMCDAccount existingCloudObjectForRecordID:accountID:context:](REMCDAccount, "existingCloudObjectForRecordID:accountID:context:", v2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)));

  v3 = v4;
  if (v4)
  {
    objc_msgSend(v4, "mergeMigrationStateFromRecord:", *(_QWORD *)(a1 + 32));
    objc_msgSend(*(id *)(a1 + 48), "ic_saveWithLogDescription:", CFSTR("merged migration state from user record"));
    v3 = v4;
  }

}

void sub_10008D740(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICCloudContext appZoneID](ICCloudContext, "appZoneID"));
  LODWORD(v2) = objc_msgSend(v2, "isEqual:", v3);

  if ((_DWORD)v2)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAccount accountWithCKIdentifier:context:](REMCDAccount, "accountWithCKIdentifier:context:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allChildObjects"));

  }
  else
  {
    v5 = 0;
  }
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v6 = v5;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(_QWORD *)v13 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v11, "setInCloud:", 0, (_QWORD)v12);
        objc_msgSend(v11, "clearServerRecord");
        if ((objc_msgSend(v11, "markedForDeletion") & 1) == 0)
          objc_msgSend(v11, "updateChangeCount");
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v8);
  }

  objc_msgSend(*(id *)(a1 + 48), "ic_saveWithLogDescription:", CFSTR("cleared server records for all cloud objects"));
}

void sub_10008DA44(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  NSString *(__cdecl **v8)(SEL);
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  NSObject *v14;
  _BOOL4 v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  NSString *(__cdecl **v22)(SEL);
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  uint64_t v37;
  _BYTE v38[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ownerName"));
  v3 = objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("ckZoneOwnerName == %@"), v2));

  v26 = (void *)v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDObject ic_objectsMatchingPredicate:context:](REMCDObject, "ic_objectsMatchingPredicate:context:", v3, *(_QWORD *)(a1 + 40)));
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v28, v38, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v29;
    v8 = &NSStringFromSelector_ptr;
    do
    {
      v9 = 0;
      v27 = v6;
      do
      {
        if (*(_QWORD *)v29 != v7)
          objc_enumerationMutation(v4);
        v10 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)v9);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "recordID"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "zoneID"));
        v13 = objc_msgSend(v12, "isEqual:", *(_QWORD *)(a1 + 32));

        v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8[281], "cloudkit"));
        v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        if (v13)
        {
          if (v15)
          {
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "shortLoggingDescription"));
            v17 = *(void **)(a1 + 48);
            *(_DWORD *)buf = 138412546;
            v33 = v16;
            v34 = 2114;
            v35 = v17;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Deleting shared %@ for accountID %{public}@", buf, 0x16u);

          }
          objc_msgSend(v10, "deleteFromLocalDatabase");
        }
        else
        {
          if (v15)
          {
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "shortLoggingDescription"));
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "recordID"));
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "zoneID"));
            v21 = v7;
            v22 = v8;
            v23 = v4;
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "ic_loggingDescription"));
            v25 = *(_QWORD *)(a1 + 48);
            *(_DWORD *)buf = 138412802;
            v33 = v18;
            v34 = 2114;
            v35 = v24;
            v36 = 2114;
            v37 = v25;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Not deleting shared %@ in wrong zone %{public}@ for account ID %{public}@", buf, 0x20u);

            v4 = v23;
            v8 = v22;
            v7 = v21;
            v6 = v27;

          }
        }
        v9 = (char *)v9 + 1;
      }
      while (v6 != v9);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v28, v38, 16);
    }
    while (v6);
  }
  objc_msgSend(*(id *)(a1 + 40), "ic_saveWithLogDescription:", CFSTR("deleted all local database objects after shared zone was deleted"));

}

void sub_10008DED8(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  unsigned __int8 v10;
  id v11;
  NSObject *v12;
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAccount accountWithCKIdentifier:context:](REMCDAccount, "accountWithCKIdentifier:context:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allChildObjects"));
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v8, "isDeletable"))
        {
          objc_msgSend(*(id *)(a1 + 48), "deleteCloudObjectIfFullyPushed:", v8);
        }
        else
        {
          objc_msgSend(v8, "clearServerRecord");
          objc_msgSend(v8, "setInCloud:", 0);
          objc_msgSend(v8, "updateChangeCount");
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v5);
  }
  if (objc_msgSend(*(id *)(a1 + 40), "hasChanges"))
  {
    v9 = *(void **)(a1 + 40);
    v13 = 0;
    v10 = objc_msgSend(v9, "save:", &v13);
    v11 = v13;
    if ((v10 & 1) == 0)
    {
      v12 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        sub_100684904();

    }
  }

}

void sub_10008EE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_10008EEA0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v8 = (id)objc_claimAutoreleasedReturnValue(+[REMCDAccount unsafeUntilSystemReady_primaryCloudKitAccountInContext:appleAccountUtilities:](REMCDAccount, "unsafeUntilSystemReady_primaryCloudKitAccountInContext:appleAccountUtilities:", a1[4], a1[5]));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "personIDSalt"));
  v6 = *(_QWORD *)(a1[7] + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  *(_BYTE *)(*(_QWORD *)(a1[8] + 8) + 24) = objc_msgSend(v8, "inactive");
}

void sub_10008EF30(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[RDAccountPersonIDSaltObserver AccountAbsentError](RDAccountPersonIDSaltObserver, "AccountAbsentError"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_10008F0A8(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  _QWORD v29[26];

  v28 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAccount cdEntityName](REMCDAccount, "cdEntityName"));
  v29[0] = v28;
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDList cdEntityName](REMCDList, "cdEntityName"));
  v29[1] = v27;
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDReminder cdEntityName](REMCDReminder, "cdEntityName"));
  v29[2] = v26;
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDSharee cdEntityName](REMCDSharee, "cdEntityName"));
  v29[3] = v25;
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDCalDAVNotification cdEntityName](REMCDCalDAVNotification, "cdEntityName"));
  v29[4] = v24;
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAssignment cdEntityName](REMCDAssignment, "cdEntityName"));
  v29[5] = v23;
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDHashtag cdEntityName](REMCDHashtag, "cdEntityName"));
  v29[6] = v22;
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDSmartList cdEntityName](REMCDSmartList, "cdEntityName"));
  v29[7] = v21;
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDSharedToMeReminderPlaceholder cdEntityName](REMCDSharedToMeReminderPlaceholder, "cdEntityName"));
  v29[8] = v20;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDTemplate cdEntityName](REMCDTemplate, "cdEntityName"));
  v29[9] = v19;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDSavedReminder cdEntityName](REMCDSavedReminder, "cdEntityName"));
  v29[10] = v18;
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAlarm cdEntityName](REMCDAlarm, "cdEntityName"));
  v29[11] = v17;
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAlarmDateTrigger cdEntityName](REMCDAlarmDateTrigger, "cdEntityName"));
  v29[12] = v16;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAlarmTimeIntervalTrigger cdEntityName](REMCDAlarmTimeIntervalTrigger, "cdEntityName"));
  v29[13] = v15;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAlarmLocationTrigger cdEntityName](REMCDAlarmLocationTrigger, "cdEntityName"));
  v29[14] = v14;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAlarmVehicleTrigger cdEntityName](REMCDAlarmVehicleTrigger, "cdEntityName"));
  v29[15] = v13;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDListSection cdEntityName](REMCDListSection, "cdEntityName"));
  v29[16] = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDSmartListSection cdEntityName](REMCDSmartListSection, "cdEntityName"));
  v29[17] = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDTemplateSection cdEntityName](REMCDTemplateSection, "cdEntityName"));
  v29[18] = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAuxiliaryChangeInfo cdEntityName](REMCDAuxiliaryChangeInfo, "cdEntityName"));
  v29[19] = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAuxiliaryReminderChangeInfo cdEntityName](REMCDAuxiliaryReminderChangeInfo, "cdEntityName"));
  v29[20] = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAuxiliaryReminderChangeDeleteInfo cdEntityName](REMCDAuxiliaryReminderChangeDeleteInfo, "cdEntityName"));
  v29[21] = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAuxiliaryReminderChangeMoveInfo cdEntityName](REMCDAuxiliaryReminderChangeMoveInfo, "cdEntityName"));
  v29[22] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDHashtagLabel cdEntityName](REMCDHashtagLabel, "cdEntityName"));
  v29[23] = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[REMCKSharedEntitySyncActivity cdEntityName](REMCKSharedEntitySyncActivity, "cdEntityName"));
  v29[24] = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDDueDateDeltaAlert cdEntityName](REMCDDueDateDeltaAlert, "cdEntityName"));
  v29[25] = v10;
  v11 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v29, 26));
  v12 = (void *)qword_1008528B8;
  qword_1008528B8 = v11;

}

void sub_10008FCD4(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned __int8 v4;
  void *v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "l_primaryActiveCloudKitAccountREMObjectID"));
  v3 = *(void **)(a1 + 40);
  if (v3 != v2)
  {
    v5 = v2;
    v4 = objc_msgSend(v3, "isEqual:", v2);
    v2 = v5;
    if ((v4 & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "setL_primaryActiveCloudKitAccountREMObjectID:", *(_QWORD *)(a1 + 40));
      v2 = v5;
    }
  }

}

void sub_10008FE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_10008FF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10008FF7C(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v3 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v15;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v15 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v7);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "l_accountExternalIdentifiersToObjectIDsMap", (_QWORD)v14));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", v8));

        if (v10)
          objc_msgSend(v2, "addObject:", v10);

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v5);
  }

  v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "l_accountStoragesForAccountObjectIDs:", v2));
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v13 = *(void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = v11;

}

void sub_100090168(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v3 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v15;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v15 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v7);
        v9 = objc_opt_class(REMObjectID);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectID", (_QWORD)v14));
        v11 = REMCheckedDynamicCast(v9, v10);
        v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

        if (v12)
          objc_msgSend(v2, "addObject:", v12);

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v5);
  }

  v13 = objc_msgSend(*(id *)(a1 + 32), "count");
  if (v13 == objc_msgSend(v2, "count"))
    objc_msgSend(*(id *)(a1 + 40), "l_setAccountStorages:forAccountObjectIDs:", *(_QWORD *)(a1 + 32), v2);

}

void sub_1000903B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000903D0(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "l_allGenericAccountsObjectIDs"));
  v3 = objc_msgSend(v2, "count");

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "l_accountStorageCacheByObjectIDs", 0));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "keyEnumerator"));

    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v21;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v21 != v9)
            objc_enumerationMutation(v6);
          v11 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v10);
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "l_allGenericAccountsObjectIDs"));
          v13 = objc_msgSend(v12, "containsObject:", v11);

          if (v13)
          {
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "l_accountStorageCacheByObjectIDs"));
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKey:", v11));

            objc_msgSend(v4, "addObject:", v15);
          }
          v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      }
      while (v8);
    }

    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v17 = *(void **)(v16 + 40);
    *(_QWORD *)(v16 + 40) = v4;

  }
  else
  {
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v19 = *(void **)(v18 + 40);
    *(_QWORD *)(v18 + 40) = &__NSArray0__struct;

  }
}

void sub_100090650(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  _BYTE v31[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v3 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v27;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v27 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)v7);
        v9 = objc_opt_class(REMObjectID);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectID"));
        v11 = REMCheckedDynamicCast(v9, v10);
        v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

        if (v12)
          objc_msgSend(v2, "addObject:", v12);

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
    }
    while (v5);
  }

  v13 = objc_msgSend(*(id *)(a1 + 32), "count");
  if (v13 == objc_msgSend(v2, "count"))
  {
    objc_msgSend(*(id *)(a1 + 40), "l_setAccountStorages:forAccountObjectIDs:", *(_QWORD *)(a1 + 32), v2);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "l_allGenericAccountsObjectIDs"));
    objc_msgSend(v14, "removeAllObjects");

    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v15 = v2;
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
    if (v16)
    {
      v17 = v16;
      v18 = *(_QWORD *)v23;
      do
      {
        v19 = 0;
        do
        {
          if (*(_QWORD *)v23 != v18)
            objc_enumerationMutation(v15);
          v20 = *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)v19);
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "l_allGenericAccountsObjectIDs", (_QWORD)v22));
          objc_msgSend(v21, "addObject:", v20);

          v19 = (char *)v19 + 1;
        }
        while (v17 != v19);
        v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
      }
      while (v17);
    }

  }
}

void sub_100090E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100090E94(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  __CFString *v16;
  __CFString *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  unsigned __int8 v26;
  id v27;
  uint64_t v28;
  void *v29;
  unsigned __int8 v30;
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  unsigned __int8 v35;
  id v36;
  NSObject *v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  id v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint8_t buf[4];
  void *v49;
  __int16 v50;
  id v51;
  __int16 v52;
  void *v53;
  _BYTE v54[128];

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "l_accountStoreMap"));
  v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", objc_msgSend(v2, "count")));

  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "l_accountStoreMap"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "keyEnumerator"));

  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v44, v54, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v45;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v45 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD *)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)i);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "l_accountStoreMap"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", v9));

        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "URL"));
        v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "lastPathComponent"));
        v14 = v1;
        v15 = (void *)v13;
        if (v13)
          v16 = (__CFString *)v13;
        else
          v16 = CFSTR("(nil)");
        v17 = v16;

        v1 = v14;
        objc_msgSend(v39, "setObject:forKeyedSubscript:", v17, v9);

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v44, v54, 16);
    }
    while (v6);
  }

  objc_msgSend(v39, "removeObjectForKey:", CFSTR("local"));
  v18 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "isolatedReminderDataContainerURL"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[RDPaths defaultReminderDataContainerURL](RDPaths, "defaultReminderDataContainerURL"));
    *(_DWORD *)buf = 138412802;
    v49 = v19;
    v50 = 2112;
    v51 = v20;
    v52 = 2112;
    v53 = v39;

  }
  v21 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8);
  if (*(_BYTE *)(v21 + 24))
  {
    v22 = *(void **)(v1 + 32);
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "allKeys"));
    v24 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8);
    v25 = *(void **)(v24 + 40);
    v42 = 0;
    v43 = v25;
    v26 = objc_msgSend(v22, "l_removeAccountStoresWithIdentifiers:deletedObjectIDs:error:", v23, &v43, &v42);
    objc_storeStrong((id *)(v24 + 40), v43);
    v27 = v42;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 24) = v26;

  }
  else
  {
    v27 = 0;
    *(_BYTE *)(v21 + 24) = 0;
  }
  v28 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8);
  if (*(_BYTE *)(v28 + 24))
  {
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "persistentStoreCoordinator"));
    v41 = v27;
    v30 = objc_msgSend(v29, "_removeAllPersistentStores:", &v41);
    v31 = v41;

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 24) = v30;
    v27 = v31;
  }
  else
  {
    *(_BYTE *)(v28 + 24) = 0;
  }
  v32 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8);
  if (*(_BYTE *)(v32 + 24)
    && (v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "l_accountStoreMap")),
        objc_msgSend(v33, "removeAllObjects"),
        v33,
        objc_msgSend(*(id *)(v1 + 32), "l_invalidateAccountStorageCaches:", CFSTR("nukeData")),
        v32 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8),
        *(_BYTE *)(v32 + 24)))
  {
    v34 = *(void **)(v1 + 32);
    v40 = v27;
    v35 = objc_msgSend(v34, "l_loadAccountStoresFromDiskDeletingFilesMarkedDeleted:shouldDeleteInvalidStoresImmediately:error:", 0, 0, &v40);
    v36 = v40;

    v32 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8);
    v27 = v36;
  }
  else
  {
    v35 = 0;
  }
  *(_BYTE *)(v32 + 24) = v35;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(v1 + 56) + 8) + 40), v27);
  v37 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    v38 = (void *)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 24);
    *(_DWORD *)buf = 134218242;
    v49 = v38;
    v50 = 2114;
    v51 = v27;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "RDStoreController nukeData completed {allSuccess: %ld, error: %{public}@}", buf, 0x16u);
  }

}

void sub_1000913A0(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  NSObject *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  id v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[16];
  _BYTE v20[128];

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("markedForDeletion == YES")));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDObject ic_objectsMatchingPredicate:context:](REMCDObject, "ic_objectsMatchingPredicate:context:"));
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v3 = objc_msgSend(v2, "copy");
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v16 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
        if ((objc_msgSend(v8, "isDeleted") & 1) == 0)
        {
          v9 = objc_claimAutoreleasedReturnValue(+[REMLogStore write](REMLogStore, "write"));
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
            sub_100684AD4((uint64_t)v19, (uint64_t)v8);

          objc_msgSend(v8, "deleteFromLocalDatabase");
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
    }
    while (v5);
  }

  v10 = *(void **)(a1 + 32);
  v14 = 0;
  objc_msgSend(v10, "save:", &v14);
  v11 = v14;
  if (v11)
  {
    v12 = objc_claimAutoreleasedReturnValue(+[REMLogStore write](REMLogStore, "write"));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_100684A74();

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100092490(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id obj;
  uint64_t v21;
  id v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];

  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "l_accountStoreMap"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "keyEnumerator"));

  obj = v3;
  v22 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  if (v22)
  {
    v21 = *(_QWORD *)v25;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v25 != v21)
          objc_enumerationMutation(obj);
        v5 = *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)v4);
        v6 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", v5);
        v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K == %@"), CFSTR("identifier"), v6));

        v8 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAccount fetchRequest](REMCDAccount, "fetchRequest"));
        objc_msgSend(v8, "setPredicate:", v7);
        objc_msgSend(v8, "setResultType:", 0);
        v9 = *(void **)(a1 + 40);
        v23 = 0;
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "executeFetchRequest:error:", v8, &v23));
        v11 = v23;
        v12 = objc_opt_class(REMCDAccount);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "firstObject"));
        v14 = REMDynamicCast(v12, v13);
        v15 = (void *)objc_claimAutoreleasedReturnValue(v14);

        if (v11)
        {
          v16 = *(void **)(a1 + 48);
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "debugDescription"));
          objc_msgSend(v16, "addObject:", v17);

        }
        if (v15)
        {
          objc_msgSend(*(id *)(a1 + 32), "_populateCountForEntity:withinCDAccount:statsAccumulator:errorAccumulator:", objc_opt_class(REMCDList), v15, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
          objc_msgSend(*(id *)(a1 + 32), "_populateCountForEntity:withinCDAccount:statsAccumulator:errorAccumulator:", objc_opt_class(REMCDReminder), v15, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
          objc_msgSend(*(id *)(a1 + 32), "_populateCountForEntity:withinCDAccount:statsAccumulator:errorAccumulator:", objc_opt_class(REMCDAlarm), v15, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
          objc_msgSend(*(id *)(a1 + 32), "_populateCountForEntity:withinCDAccount:statsAccumulator:errorAccumulator:", objc_opt_class(REMCDAlarmDateTrigger), v15, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
          objc_msgSend(*(id *)(a1 + 32), "_populateCountForEntity:withinCDAccount:statsAccumulator:errorAccumulator:", objc_opt_class(REMCDAlarmTimeIntervalTrigger), v15, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
          objc_msgSend(*(id *)(a1 + 32), "_populateCountForEntity:withinCDAccount:statsAccumulator:errorAccumulator:", objc_opt_class(REMCDAlarmVehicleTrigger), v15, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
          objc_msgSend(*(id *)(a1 + 32), "_populateCountForEntity:withinCDAccount:statsAccumulator:errorAccumulator:", objc_opt_class(REMCDAlarmLocationTrigger), v15, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
          objc_msgSend(*(id *)(a1 + 32), "_populateCountForEntity:withinCDAccount:statsAccumulator:errorAccumulator:", objc_opt_class(REMCDDueDateDeltaAlert), v15, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
          objc_msgSend(*(id *)(a1 + 32), "_populateCountForEntity:withinCDAccount:statsAccumulator:errorAccumulator:", objc_opt_class(REMCDAssignment), v15, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
          objc_msgSend(*(id *)(a1 + 32), "_populateCountForEntity:withinCDAccount:statsAccumulator:errorAccumulator:", objc_opt_class(REMCDImageAttachment), v15, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
          objc_msgSend(*(id *)(a1 + 32), "_populateCountForEntity:withinCDAccount:statsAccumulator:errorAccumulator:", objc_opt_class(REMCDURLAttachment), v15, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
          objc_msgSend(*(id *)(a1 + 32), "_populateCountForEntity:withinCDAccount:statsAccumulator:errorAccumulator:", objc_opt_class(REMCDHashtag), v15, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
          objc_msgSend(*(id *)(a1 + 32), "_populateCountForEntity:withinCDAccount:statsAccumulator:errorAccumulator:", objc_opt_class(REMCDRecurrenceRule), v15, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
          objc_msgSend(*(id *)(a1 + 32), "_populateCountForEntity:withinCDAccount:statsAccumulator:errorAccumulator:", objc_opt_class(REMCDSharee), v15, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
          objc_msgSend(*(id *)(a1 + 32), "_populateCountForEntity:withinCDAccount:statsAccumulator:errorAccumulator:", objc_opt_class(REMCDSmartList), v15, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
          objc_msgSend(*(id *)(a1 + 32), "_populateCountForEntity:withinCDAccount:statsAccumulator:errorAccumulator:", objc_opt_class(REMCDTemplate), v15, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
          objc_msgSend(*(id *)(a1 + 32), "_populateCountForEntity:withinCDAccount:statsAccumulator:errorAccumulator:", objc_opt_class(REMCDPublicTemplate), v15, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
          objc_msgSend(*(id *)(a1 + 32), "_populateCountForEntity:withinCDAccount:statsAccumulator:errorAccumulator:", objc_opt_class(REMCDSavedReminder), v15, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
        }
        else
        {
          v18 = *(void **)(a1 + 48);
          v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Cannot fetch CD account with identifier %@"), v5));
          objc_msgSend(v18, "addObject:", v19);

        }
        v4 = (char *)v4 + 1;
      }
      while (v22 != v4);
      v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    }
    while (v22);
  }

}

void sub_100092A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100092A84(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "l_accountStoreMap"));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v2, "count");

}

void sub_100092B2C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

void sub_1000935D0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  char isKindOfClass;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  void *v27;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "persistentStoreCoordinator"));
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v21 = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "executeRequest:withContext:error:", v3, v4, &v21));
  v6 = v21;

  if (v5)
  {
    if (objc_msgSend(v5, "resultType") == (id)2
      && (v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "result")),
          v8 = objc_opt_class(NSNumber),
          isKindOfClass = objc_opt_isKindOfClass(v7, v8),
          v7,
          (isKindOfClass & 1) != 0))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "result"));
      v11 = (uint64_t)objc_msgSend(v10, "integerValue");

    }
    else
    {
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    v12 = *(void **)(a1 + 56);
    v13 = *(_QWORD *)(a1 + 64);
    v14 = *(_QWORD *)(a1 + 72);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v11));
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@(%@)"), v13, v14, v15));
    objc_msgSend(v12, "addObject:", v16);

    v17 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      v18 = *(_QWORD *)(a1 + 64);
      v19 = *(_QWORD *)(a1 + 72);
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v11));
      *(_DWORD *)buf = 138412802;
      v23 = v18;
      v24 = 2112;
      v25 = v19;
      v26 = 2112;
      v27 = v20;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "PopulateDefaultValues END {entity: %@, attributeName: %@, updated.count: %@}", buf, 0x20u);

    }
  }
  else
  {
    v17 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      sub_100684B24((uint64_t)v6, a1, v17);
  }

}

void sub_100093A64(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  id v4;

  v3 = a3;
  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v4, "postNotificationName:object:", kReachabilityChangedNotification, v3);

}

void sub_1000942F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100094320(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100094330(uint64_t a1)
{

}

void sub_100094338(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id obj;
  uint64_t v6;

  v2 = (void *)a1[4];
  v6 = a1[5];
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v6, 1));
  v4 = *(_QWORD *)(a1[7] + 8);
  obj = *(id *)(v4 + 40);
  LOBYTE(v2) = objc_msgSend(v2, "obtainPermanentIDsForObjects:error:", v3, &obj);
  objc_storeStrong((id *)(v4 + 40), obj);
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = (_BYTE)v2;

}

void sub_100094A3C(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x260], 8);
  _Unwind_Resume(a1);
}

void sub_100094A5C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *i;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  NSObject *v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  void *j;
  void *v24;
  void *v25;
  void *v26;
  _REMCKIdentifierAccountIdentifierPair *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  unsigned int v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  NSObject *v36;
  void *v37;
  id obj;
  uint64_t v39;
  char v40;
  uint64_t v41;
  id v42;
  void *v43;
  void *v44;
  id v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  void *v54;
  uint8_t v55[128];
  uint8_t buf[4];
  uint64_t v57;
  _BYTE v58[128];

  v2 = (void *)objc_opt_class(REMCDObject);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "managedObjectContext"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "ic_objectsMatchingPredicate:context:", v3, v4));

  if (objc_msgSend(v5, "count"))
  {
    v6 = objc_alloc_init((Class)NSMutableSet);
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

    v9 = objc_alloc_init((Class)NSMutableDictionary);
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    v53 = 0u;
    v37 = v5;
    obj = v5;
    v42 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v58, 16);
    if (v42)
    {
      v40 = 0;
      v41 = *(_QWORD *)v51;
      v39 = a1;
      do
      {
        for (i = 0; i != v42; i = (char *)i + 1)
        {
          if (*(_QWORD *)v51 != v41)
            objc_enumerationMutation(obj);
          v11 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * (_QWORD)i);
          v12 = objc_opt_class(REMCDObject);
          v13 = REMDynamicCast(v12, v11);
          v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
          v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "ckIdentifier"));
          v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "accountCKIdentifier"));
          v44 = v14;
          if (v16)
          {
            v17 = (void *)v16;
          }
          else
          {
            v18 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138543362;
              v57 = v15;
              _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "ICBatchFetchHelper found object %{public}@ with nil accountIdentifier", buf, 0xCu);
            }

            if ((v40 & 1) == 0)
            {
              v48 = 0u;
              v49 = 0u;
              v46 = 0u;
              v47 = 0u;
              v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ckIdentifierAccountPairs"));
              v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v46, v55, 16);
              if (v20)
              {
                v21 = v20;
                v22 = *(_QWORD *)v47;
                do
                {
                  for (j = 0; j != v21; j = (char *)j + 1)
                  {
                    if (*(_QWORD *)v47 != v22)
                      objc_enumerationMutation(v19);
                    v24 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * (_QWORD)j);
                    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "ckIdentifier"));
                    objc_msgSend(v9, "setObject:forKeyedSubscript:", v24, v25);

                  }
                  v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v46, v55, 16);
                }
                while (v21);
              }

              a1 = v39;
            }
            v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v15));
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "accountIdentifier"));

            v40 = 1;
          }
          v43 = (void *)v15;
          v27 = -[_REMCKIdentifierAccountIdentifierPair initWithCkIdentifier:accountIdentifier:]([_REMCKIdentifierAccountIdentifierPair alloc], "initWithCkIdentifier:accountIdentifier:", v15, v17);
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "managedObjectContext"));
          v54 = v11;
          v29 = a1;
          v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v54, 1));
          v45 = 0;
          v31 = objc_msgSend(v28, "obtainPermanentIDsForObjects:error:", v30, &v45);
          v32 = v45;

          if (v31)
          {
            v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v29 + 40), "managedObjectIDCache"));
            v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectID"));
            objc_msgSend(v33, "setObject:forKey:", v34, v27);

            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v29 + 48) + 8) + 40), "addObject:", v27);
            a1 = v29;
            v35 = v44;
          }
          else
          {
            v36 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
            v35 = v44;
            if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138543362;
              v57 = (uint64_t)v27;
              _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "Cannot obtain permanent ID for %{public}@", buf, 0xCu);
            }

            a1 = v39;
          }

        }
        v42 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v58, 16);
      }
      while (v42);
    }

    v5 = v37;
  }

}

void sub_100095194(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _REMCKIdentifierAccountIdentifierPair *v8;
  _REMCKIdentifierAccountIdentifierPair *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v17;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v17 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v6);
        v8 = [_REMCKIdentifierAccountIdentifierPair alloc];
        v9 = -[_REMCKIdentifierAccountIdentifierPair initWithCkIdentifier:accountIdentifier:](v8, "initWithCkIdentifier:accountIdentifier:", v7, *(_QWORD *)(a1 + 40), (_QWORD)v16);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "ckIdentifierAccountPairs"));
        objc_msgSend(v10, "addObject:", v9);

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v4);
  }

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "dispatchBlocks"));
  v12 = objc_retainBlock(*(id *)(a1 + 56));
  objc_msgSend(v11, "addObject:", v12);

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "dispatchBlocks"));
  v14 = objc_msgSend(v13, "count");
  v15 = objc_msgSend(*(id *)(a1 + 48), "batchSize");

  if (v14 >= v15)
    objc_msgSend(*(id *)(a1 + 48), "_flush");
}

void sub_1000953A8(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dispatchBlocks"));
  v3 = objc_retainBlock(*(id *)(a1 + 40));
  objc_msgSend(v2, "addObject:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dispatchBlocks"));
  v5 = objc_msgSend(v4, "count");
  v6 = objc_msgSend(*(id *)(a1 + 32), "batchSize");

  if (v5 >= v6)
    objc_msgSend(*(id *)(a1 + 32), "_flush");
}

id sub_1000955B8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_flush");
}

void sub_1000959CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100095A0C(_QWORD *a1)
{
  id WeakRetained;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id obj;

  WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 24));
  v3 = a1[5];
  v4 = *(_QWORD *)(a1[7] + 8);
  obj = *(id *)(v4 + 40);
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "existingObjectWithID:error:", v3, &obj));
  objc_storeStrong((id *)(v4 + 40), obj);
  v6 = *(_QWORD *)(a1[6] + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

void sub_1000967C8(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, *(dispatch_block_t *)(a1 + 40));
}

uint64_t sub_10009688C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100096B24(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_100096B48(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  char isKindOfClass;
  NSObject *v16;
  id v17;
  uint64_t v18;
  const __CFString *v19;
  void *v20;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDReminder cdEntityName](REMCDReminder, "cdEntityName"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSBatchUpdateRequest batchUpdateRequestWithEntityName:](NSBatchUpdateRequest, "batchUpdateRequestWithEntityName:", v2));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K != NULL"), CFSTR("ckServerRecordData")));
  objc_msgSend(v3, "setPredicate:", v4);

  objc_msgSend(v3, "setIncludesSubentities:", 1);
  objc_msgSend(v3, "setResultType:", 2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@"), CFSTR("parentReminder"), CFSTR("ckIdentifier")));
  v19 = CFSTR("ckParentReminderIdentifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSExpression expressionForKeyPath:](NSExpression, "expressionForKeyPath:", v5));
  v20 = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1));
  objc_msgSend(v3, "setPropertiesToUpdate:", v7);

  v18 = *(_QWORD *)(a1 + 32);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v18, 1));
  objc_msgSend(v3, "setAffectedStores:", v8);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "persistentStoreCoordinator"));
  v10 = *(_QWORD *)(a1 + 40);
  v17 = 0;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "executeRequest:withContext:error:", v3, v10, &v17));
  v12 = v17;

  if (!v11)
  {
    v16 = objc_claimAutoreleasedReturnValue(+[REMLogStore container](REMLogStore, "container"));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      sub_1006850E4((uint64_t)v12, v16);
    goto LABEL_7;
  }
  if (objc_msgSend(v11, "resultType") == (id)2)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "result"));
    v14 = objc_opt_class(NSNumber);
    isKindOfClass = objc_opt_isKindOfClass(v13, v14);

    if ((isKindOfClass & 1) != 0)
    {
      v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "result"));
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = -[NSObject integerValue](v16, "integerValue");
LABEL_7:

    }
  }

}

void sub_100096FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100097014(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100097024(uint64_t a1)
{

}

void sub_10009702C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *i;
  void *v16;
  void *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  id v26;
  uint8_t buf[4];
  void *v28;
  _BYTE v29[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAccount fetchRequest](REMCDAccount, "fetchRequest"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAccount predicateForCloudKitAccountsWithKeyPathPrefix:](REMCDAccount, "predicateForCloudKitAccountsWithKeyPathPrefix:", 0));
  objc_msgSend(v2, "setPredicate:", v3);

  v4 = *(void **)(a1 + 32);
  v26 = 0;
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "executeFetchRequest:error:", v2, &v26));
  v6 = v26;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v5;

  if (v6)
  {
    v9 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_1006851A4();
  }
  else
  {
    v21 = v2;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v20 = a1;
    v11 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v22, v29, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v23;
      do
      {
        for (i = 0; i != v13; i = (char *)i + 1)
        {
          if (*(_QWORD *)v23 != v14)
            objc_enumerationMutation(v11);
          v16 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i);
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "ckUserRecordName"));

          if (!v17)
          {
            v18 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412290;
              v28 = v16;
              _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Found extended account without CK user record name: %@", buf, 0xCu);
            }

          }
          objc_msgSend(v10, "addObject:", v16);
        }
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v22, v29, 16);
      }
      while (v13);
    }

    v6 = 0;
    v19 = *(_QWORD *)(*(_QWORD *)(v20 + 40) + 8);
    v9 = *(NSObject **)(v19 + 40);
    *(_QWORD *)(v19 + 40) = v10;
    v2 = v21;
  }

}

void sub_1000973A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000973C0(uint64_t a1)
{
  id v2;
  __int128 v3;
  _QWORD v4[4];
  id v5[2];
  uint64_t v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10009743C;
  v4[3] = &unk_1007DA8A0;
  v3 = *(_OWORD *)(a1 + 32);
  v2 = (id)v3;
  *(_OWORD *)v5 = v3;
  v6 = *(_QWORD *)(a1 + 48);
  objc_msgSend(v2, "performBlockAndWait:", v4);

}

void sub_10009743C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1008528D0, "objectForKey:", *(_QWORD *)(a1 + 32)));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allValues"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  v6 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v7 = v6;
  if (v6
    || (v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "_fetchCloudKitAccountsInContext:", *(_QWORD *)(a1 + 32))),
        v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8),
        v10 = *(void **)(v9 + 40),
        *(_QWORD *)(v9 + 40) = v8,
        v10,
        v11 = *(_QWORD *)(a1 + 40),
        (v7 = *(void **)(*(_QWORD *)(v11 + 8) + 40)) != 0))
  {
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v12 = v7;
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v25;
      while (2)
      {
        for (i = 0; i != v14; i = (char *)i + 1)
        {
          if (*(_QWORD *)v25 != v15)
            objc_enumerationMutation(v12);
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i), "managedObjectContext", (_QWORD)v24));

          if (!v17)
          {
            v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
            v19 = *(void **)(v18 + 40);
            *(_QWORD *)(v18 + 40) = 0;

            goto LABEL_13;
          }
        }
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
        if (v14)
          continue;
        break;
      }
    }
LABEL_13:

    v11 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(*(_QWORD *)(v11 + 8) + 40))
    {
      if (v6)
        return;
    }
    else
    {
      v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "_fetchCloudKitAccountsInContext:", *(_QWORD *)(a1 + 32)));
      v21 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v22 = *(void **)(v21 + 40);
      *(_QWORD *)(v21 + 40) = v20;

      v11 = *(_QWORD *)(a1 + 40);
    }
  }
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "accountByCKIdentifierFrom:", *(_QWORD *)(*(_QWORD *)(v11 + 8) + 40), (_QWORD)v24));
  objc_msgSend((id)qword_1008528D0, "setObject:forKey:", v23, *(_QWORD *)(a1 + 32));

}

void sub_1000976EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100097704(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  NSObject *v9;
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[REMCDAccount fetchRequest](REMCDAccount, "fetchRequest"));
  v3 = cloudBasedAccountTypes();
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("type IN %@"), v4));
  objc_msgSend(v2, "setPredicate:", v5);

  v6 = *(void **)(a1 + 32);
  v10 = 0;
  v7 = objc_msgSend(v6, "countForFetchRequest:error:", v2, &v10);
  v8 = v10;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v7;
  if (v8)
  {
    v9 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_10068520C();

  }
}

void sub_100097B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100097B98(uint64_t a1)
{
  id v2;
  __int128 v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  unsigned int v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  void *v14;
  void *v15;
  unsigned int v16;
  int v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  const char *v32;
  __int128 v33;
  id obj;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  void *v42;
  _BYTE v43[128];

  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  obj = *(id *)(a1 + 32);
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v43, 16);
  if (!v2)
    goto LABEL_26;
  v4 = v2;
  v5 = *(_QWORD *)v36;
  *(_QWORD *)&v3 = 138543618;
  v33 = v3;
  while (2)
  {
    for (i = 0; i != v4; i = (char *)i + 1)
    {
      if (*(_QWORD *)v36 != v5)
        objc_enumerationMutation(obj);
      v7 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)i);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "accountTypeHost", v33));
      v9 = objc_msgSend(v8, "isPrimaryCloudKit");

      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "UUIDString"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
      v13 = objc_msgSend(v11, "isEqualToString:", v12);

      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "UUIDString"));
      v16 = objc_msgSend(v15, "isEqualToString:", CFSTR("55CF9DED-2785-46E1-9991-04987805FEE7"));

      v17 = v13 ^ 1;
      if (((v9 ^ 1) & 1) == 0 && (v17 & 1) == 0)
      {
        v28 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
          v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "UUIDString"));
          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
          *(_DWORD *)buf = v33;
          v40 = v30;
          v41 = 2114;
          v42 = v31;
          v32 = "CloudKitUtils: Found a CloudKit REMCDAccount that matches the primary iCloud ACAccount {cdAccount: %{pub"
                "lic}@, acAccount: %{public}@}";
LABEL_24:
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, v32, buf, 0x16u);

        }
LABEL_25:

        objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v7);
        goto LABEL_26;
      }
      if (v16)
      {
        v28 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
          v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "UUIDString"));
          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
          *(_DWORD *)buf = v33;
          v40 = v30;
          v41 = 2114;
          v42 = v31;
          v32 = "CloudKitUtils: Found a PPT fixture CK account, ASSUMED to be matching the primary iCloud ACAccount {cdAc"
                "count: %{public}@, acAccount: %{public}@}";
          goto LABEL_24;
        }
        goto LABEL_25;
      }
      if (((v9 ^ 1 | v13) & 1) != 0)
      {
        if (((v9 | v17) & 1) != 0)
          continue;
        v18 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
        if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
        {
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "UUIDString"));
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
          *(_DWORD *)buf = v33;
          v40 = v20;
          v41 = 2114;
          v42 = v21;
          _os_log_fault_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "CloudKitUtils: Found a non-primary CloudKit REMCDAccount that matches the primary iCloud ACAccount, this is unexpected {cdAccount: %{public}@, acAccount: %{public}@}", buf, 0x16u);

        }
      }
      else
      {
        v22 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
        if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
        {
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "UUIDString"));
          v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
          *(_DWORD *)buf = v33;
          v40 = v26;
          v41 = 2114;
          v42 = v27;
          _os_log_fault_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "CloudKitUtils: Found a primary CloudKit REMCDAccount that does NOT match with the primary iCloud ACAccount, this is unexpected {cdAccount: %{public}@, acAccount: %{public}@}", buf, 0x16u);

        }
        v23 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v24 = v7;
        v18 = *(NSObject **)(v23 + 40);
        *(_QWORD *)(v23 + 40) = v24;
      }

    }
    v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v43, 16);
    if (v4)
      continue;
    break;
  }
LABEL_26:

}

void sub_100098298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000982B8(uint64_t a1)
{
  void *v2;
  id v3;
  __int128 v4;
  _QWORD v5[4];
  id v6;
  __int128 v7;
  uint64_t v8;

  v2 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100098350;
  v5[3] = &unk_1007DA8C8;
  v6 = v2;
  v4 = *(_OWORD *)(a1 + 40);
  v3 = (id)v4;
  v7 = v4;
  v8 = *(_QWORD *)(a1 + 56);
  objc_msgSend(v6, "performBlockAndWait:", v5);

}

void sub_100098350(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  void *v29;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1008528D0, "objectForKey:", *(_QWORD *)(a1 + 32)));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", *(_QWORD *)(a1 + 40)));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v7 = *(_QWORD *)(v6 + 40);
  if (v7)
  {
    v8 = 0;
    v9 = *(void **)(v6 + 40);
    v10 = v2;
  }
  else
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "_fetchCloudKitAccountsInContext:", *(_QWORD *)(a1 + 32)));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "accountByCKIdentifierFrom:", v8));

    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", *(_QWORD *)(a1 + 40)));
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v13 = *(void **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = v11;

    v14 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      v15 = *(_QWORD *)(a1 + 40);
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "allKeys"));
      v26 = 138543618;
      v27 = v15;
      v28 = 2114;
      v29 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "cloudKitAccountWithCKIdentifier: not in cache, ckIdentifier: %{public}@, all ckIdentifiers: %{public}@", (uint8_t *)&v26, 0x16u);

    }
    v9 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    if (!v9)
      goto LABEL_12;
  }
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "managedObjectContext"));

  if (!v17)
  {
    v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "_fetchCloudKitAccountsInContext:", *(_QWORD *)(a1 + 32)));

    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "accountByCKIdentifierFrom:", v18));
    v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKey:", *(_QWORD *)(a1 + 40)));
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v22 = *(void **)(v21 + 40);
    *(_QWORD *)(v21 + 40) = v20;

    v23 = objc_claimAutoreleasedReturnValue(+[REMLog cloudkit](REMLog, "cloudkit"));
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      v24 = *(_QWORD *)(a1 + 40);
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "allKeys"));
      v26 = 138543618;
      v27 = v24;
      v28 = 2114;
      v29 = v25;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "cloudKitAccountWithCKIdentifier: nil context, ckIdentifier: %{public}@, all ckIdentifiers: %{public}@", (uint8_t *)&v26, 0x16u);

    }
    v8 = (void *)v18;
    v10 = v19;
    goto LABEL_12;
  }
  if (!v7)
LABEL_12:
    objc_msgSend((id)qword_1008528D0, "setObject:forKey:", v10, *(_QWORD *)(a1 + 32));

}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;
  unsigned int v11;
  void *v12;
  unsigned int v14;
  uint64_t v15;

  ReminderKitInternalVerify()();
  v3 = type metadata accessor for Logger(0);
  sub_10009EF3C(v3, qword_100836BC0);
  v4 = sub_10001AAA8(v3, (uint64_t)qword_100836BC0);
  if (qword_1008375E8 != -1)
    swift_once(&qword_1008375E8, sub_1004A1758);
  v5 = sub_10001AAA8(v3, (uint64_t)qword_100871F98);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v4, v5, v3);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 67109120;
    v10 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
    v11 = objc_msgSend(v10, "processIdentifier");

    v14 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "LAUNCH remindd {pid: %d}", v9, 8u);
    swift_slowDealloc(v9, -1, -1);
  }

  v12 = objc_autoreleasePoolPush();
  sub_100098FFC();
  objc_autoreleasePoolPop(v12);
  sub_1000992B0();
  return 0;
}

uint64_t sub_100098FFC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[5];
  uint64_t v26;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v2 = (char *)&v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v22 = *(_QWORD *)(v3 - 8);
  v23 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001AAA8(v6, (uint64_t)&unk_100836BC0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "os_transaction INIT {name: com.apple.remindd.launch}", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = os_transaction_create("com.apple.remindd.launch");
  sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v12 = (void *)static OS_dispatch_queue.main.getter();
  v13 = swift_allocObject(&unk_1007E2360, 24, 7);
  *(_QWORD *)(v13 + 16) = v11;
  aBlock[4] = sub_1000A5FE8;
  v26 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007E2378;
  v14 = _Block_copy(aBlock);
  v15 = v26;
  swift_unknownObjectRetain(v11);
  v16 = swift_release(v15);
  static DispatchQoS.unspecified.getter(v16);
  aBlock[0] = _swiftEmptyArrayStorage;
  v17 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10001A630((uint64_t *)&unk_100838000);
  v19 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v18, v19, v0, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v5, v2, v14);
  _Block_release(v14);
  swift_unknownObjectRelease(v11);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v2, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v5, v23);
}

double sub_1000992B0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  char v26;
  void *v27;
  CFRunLoopRunResult v28;
  char v29;
  double result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  rlim_t rlim_cur;
  uint64_t v36;
  rlimit v37;
  char v38;
  _BYTE v39[24];
  uint64_t v40;

  v0 = type metadata accessor for REM_os_activity.Scope(0);
  v33 = *(_QWORD *)(v0 - 8);
  v34 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v31 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for REM_os_activity.Options(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for REM_os_activity(0);
  v31 = *(_QWORD *)(v6 - 8);
  v32 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  sub_10001AAA8(v9, (uint64_t)&unk_100836BC0);
  sub_10009A2F0();
  sub_10009A47C(65537);
  static REM_os_activity.Options.ifNonePresent.getter(v10);
  v11 = REM_os_activity.init(_:dso:options:)("Remindd Launch", 14, 2, &_mh_execute_header, v5);
  REM_os_activity.Scope.init()(v11);
  REM_os_activity.Scope.enter(_:)(v8);
  v38 = 0;
  v37.rlim_cur = 0;
  v37.rlim_max = 0;
  v12 = getrlimit(8, &v37);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(22, -1);
    v16 = swift_slowAlloc(64, -1);
    v40 = v16;
    *(_DWORD *)v15 = 136446466;
    swift_beginAccess(&v37, v39, 0, 0);
    rlim_cur = v37.rlim_cur;
    v17 = sub_10009FDF0();
    v18 = BinaryInteger.description.getter(&type metadata for UInt64, v17);
    v20 = v19;
    rlim_cur = sub_10001A820(v18, v19, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&rlim_cur, &v36);
    swift_bridgeObjectRelease(v20);
    *(_WORD *)(v15 + 12) = 2082;
    rlim_cur = v37.rlim_max;
    v21 = BinaryInteger.description.getter(&type metadata for UInt64, v17);
    v23 = v22;
    rlim_cur = sub_10001A820(v21, v22, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&rlim_cur, &v36);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "getrlimit(RLIMIT_NOFILE) = (%{public}s, %{public}s)", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v16, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }

  v24 = objc_autoreleasePoolPush();
  sub_10009AE70(&v38, &v40);
  objc_autoreleasePoolPop(v24);
  v25 = v40;
  REM_os_activity.Scope.leave()();
  v26 = v38;
  do
  {
    v27 = objc_autoreleasePoolPush();
    v28 = CFRunLoopRunInMode(kCFRunLoopDefaultMode, 86400.0, 1u);
    v29 = v26 & gDADMainRunloopStopped;
    objc_autoreleasePoolPop(v27);
  }
  while ((v29 & 1) == 0 && (v28 - 1) > 1);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v2, v34);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v32);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v25).n128_u64[0];
  return result;
}

uint64_t sub_10009965C(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  objc_class *v26;
  char *v27;
  char *v28;
  id v29;
  id v30;
  uint64_t v31;
  id v32;
  id v33;
  void *v34;
  char *v35;
  id v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  objc_class *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t ObjectType;
  uint64_t v48;
  id v49;
  id v50;
  void *v51;
  id v52;
  id v53;
  id v54;
  id v55;
  objc_class *v56;
  char *v57;
  id v58;
  void *v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  uint64_t v67;
  _QWORD *v68;
  void *v69;
  objc_class *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  id v75;
  id v76;
  char *v77;
  void *v78;
  uint64_t v79;
  _QWORD *v80;
  id v81;
  uint64_t v82;
  void *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  id v95;
  uint64_t result;
  uint64_t v97;
  id v98;
  objc_class *v99;
  uint64_t v100;
  id v101;
  id v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  Class v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  _QWORD *v116;
  _QWORD aBlock[3];
  void *v118;
  void (*v119)();
  _QWORD *v120;
  objc_super v121;
  objc_super v122;
  objc_super v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD v127[2];

  v115 = a3;
  v113 = type metadata accessor for DispatchWorkItemFlags(0);
  v112 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v111 = (char *)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for DispatchQoS(0);
  v109 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v108 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10001AAA8(v9, (uint64_t)&unk_100836BC0);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "os_transaction INIT {name: com.apple.remindd.xpcEvents}", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v107 = os_transaction_create("com.apple.remindd.xpcEvents");
  if (qword_100836F28 != -1)
    swift_once(&qword_100836F28, sub_1001BA8F8);
  v14 = (void *)qword_100871CE8;
  v15 = type metadata accessor for RDXPCEventStream.SystemXPCEventInterface();
  v16 = swift_allocObject(v15, 16, 7);
  if (byte_10083F7B8 == 1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000039, 0x80000001006F53D0, "remindd/RDXPCEventStream.swift", 30, 2, 57, 0);
    __break(1u);
  }
  else
  {
    byte_10083F7B8 = 1;
    v118 = (void *)v15;
    v119 = (void (*)())&off_1007E9380;
    aBlock[0] = v16;
    v17 = type metadata accessor for RDXPCEventStream();
    v18 = swift_allocObject(v17, 80, 7);
    v19 = sub_10001BA38((uint64_t)aBlock, v15);
    __chkstk_darwin(v19);
    v21 = (uint64_t *)((char *)&v97 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v22 + 16))(v21);
    v23 = *v21;
    *(_QWORD *)(v18 + 64) = v15;
    *(_QWORD *)(v18 + 72) = &off_1007E9380;
    *(_BYTE *)(v18 + 24) = 0;
    *(_QWORD *)(v18 + 32) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v18 + 40) = v23;
    *(_QWORD *)(v18 + 16) = v14;
    v24 = v14;
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(aBlock);
    v25 = (void *)qword_100871CE8;
    v26 = (objc_class *)type metadata accessor for RDLocationManager();
    v27 = (char *)objc_allocWithZone(v26);
    v28 = &v27[OBJC_IVAR____TtC7remindd17RDLocationManager_delegate];
    *((_QWORD *)v28 + 1) = 0;
    swift_unknownObjectWeakInit(v28, 0);
    *(_QWORD *)&v27[OBJC_IVAR____TtC7remindd17RDLocationManager_q_locationManager] = 0;
    *(_QWORD *)&v27[OBJC_IVAR____TtC7remindd17RDLocationManager_queue] = v25;
    v123.receiver = v27;
    v123.super_class = v26;
    v29 = v25;
    v30 = objc_msgSendSuper2(&v123, "init");
    v31 = qword_100836F10;
    swift_retain();
    v32 = a1;
    swift_retain();
    v33 = v30;
    swift_retain();
    if (v31 != -1)
      swift_once(&qword_100836F10, sub_1001BA718);
    v34 = (void *)qword_100871CD0;
    v106 = (Class)type metadata accessor for RDDaemon();
    v35 = (char *)objc_allocWithZone(v106);
    v36 = v34;
    v37 = (char *)sub_1000A0070((_QWORD *)v18, v32, a2, v115, v33, a4, v36, v35);
    v115 = v37;
    type metadata accessor for RDMigrationClient();
    sub_1002708F8((uint64_t)v32);
    v105 = a2;
    v102 = v33;
    v38 = &v37[OBJC_IVAR____TtC7remindd8RDDaemon_xpcDaemon];
    v39 = *(_QWORD *)&v37[OBJC_IVAR____TtC7remindd8RDDaemon_xpcDaemon];
    v40 = *((_QWORD *)v38 + 1);
    v41 = type metadata accessor for RDAccountUtils();
    v42 = swift_allocObject(v41, 48, 7);
    *(_QWORD *)(v42 + 24) = 0;
    swift_unknownObjectWeakInit(v42 + 16, 0);
    swift_unknownObjectWeakInit(v42 + 32, 0);
    *(_QWORD *)(v42 + 24) = v40;
    swift_unknownObjectWeakAssign(v42 + 16, v39);
    swift_unknownObjectWeakAssign(v42 + 32, v32);
    *(_QWORD *)(v42 + 40) = 0;
    objc_msgSend(v32, "setAccountUtils:", v42);
    swift_release(v42);
    v104 = type metadata accessor for RDExchangeAccountComplimentaryService();
    swift_allocObject(v104, 104, 7);
    v43 = v32;
    v103 = sub_1000EDF74(v43, 0, 0, 0);
    v44 = (objc_class *)type metadata accessor for RDDaemonController();
    v45 = *(_QWORD *)v38;
    v46 = *((_QWORD *)v38 + 1);
    v124 = xmmword_1006A3BE0;
    v126 = 0;
    memset(v127, 0, 14);
    v125 = 0;
    ObjectType = swift_getObjectType(v45);
    swift_unknownObjectRetain(v45);
    v49 = sub_1004AD610(v48, (uint64_t)&v124, 0, v44, ObjectType, v46);
    v50 = objc_msgSend(objc_allocWithZone((Class)REMStore), "initWithDaemonController:", v49);

    v51 = (void *)objc_opt_self(REMAppleAccountUtilities);
    v52 = v43;
    v53 = v50;
    v54 = objc_msgSend(v51, "sharedInstance");
    v55 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
    v56 = (objc_class *)type metadata accessor for RDAccountInitializer();
    v57 = (char *)objc_allocWithZone(v56);
    *(_QWORD *)&v57[OBJC_IVAR____TtC7remindd20RDAccountInitializer_store] = v53;
    *(_QWORD *)&v57[OBJC_IVAR____TtC7remindd20RDAccountInitializer_storeController] = v52;
    *(_QWORD *)&v57[OBJC_IVAR____TtC7remindd20RDAccountInitializer_appleAccountUtilities] = v54;
    *(_QWORD *)&v57[OBJC_IVAR____TtC7remindd20RDAccountInitializer_userDefaults] = v55;
    v122.receiver = v57;
    v122.super_class = v56;
    v58 = objc_msgSendSuper2(&v122, "init");
    sub_1003AA80C();

    v59 = (void *)qword_100871CE8;
    v114 = type metadata accessor for RDNotifydEventStream();
    swift_allocObject(v114, 40, 7);
    v60 = v59;
    v61 = v53;
    v101 = v61;
    v62 = v60;
    v63 = sub_1001FF2D4(v62, 0);
    v64 = sub_1000151B0(0, (unint64_t *)&qword_100838020, REMDaemonUserDefaults_ptr);
    v65 = objc_msgSend((id)swift_getObjCClassFromMetadata(v64), "daemonUserDefaults");
    v66 = objc_msgSend((id)objc_opt_self(ICCloudConfiguration), "sharedConfiguration");
    v67 = swift_allocObject(&unk_1007E1FC8, 24, 7);
    *(_QWORD *)(v67 + 16) = v61;
    v100 = type metadata accessor for RDSyncPoller();
    v68 = (_QWORD *)swift_allocObject(v100, 88, 7);
    v68[9] = v66;
    v68[10] = &off_1007F71C8;
    v68[7] = v63;
    v68[8] = &off_1007E9D68;
    v68[2] = v62;
    v68[3] = v65;
    v68[4] = &off_1007F71A8;
    v68[5] = sub_1000A5BC8;
    v68[6] = v67;
    v69 = (void *)qword_100871CE8;
    v70 = (objc_class *)type metadata accessor for RDDisplayDateUpdater();
    v99 = v70;
    v71 = (char *)objc_allocWithZone(v70);
    v72 = swift_unknownObjectWeakInit(&v71[OBJC_IVAR____TtC7remindd20RDDisplayDateUpdater_storeController], 0);
    swift_unknownObjectWeakAssign(v72, v52);
    v73 = v114;
    swift_allocObject(v114, 40, 7);
    v74 = v69;
    v75 = v52;
    v76 = v74;
    v77 = v71;
    *(_QWORD *)&v77[OBJC_IVAR____TtC7remindd20RDDisplayDateUpdater_significantTimeNotificationStream] = sub_1001FF2D4(v76, 0);

    v121.receiver = v77;
    v121.super_class = v70;
    v98 = objc_msgSendSuper2(&v121, "init");

    v78 = (void *)qword_100871CE8;
    swift_allocObject(v73, 40, 7);
    v79 = sub_1001FF2D4(v78, 0);
    sub_10051EA50();
    sub_100506950();
    v80 = (_QWORD *)swift_allocObject(&unk_1007E1FF0, 56, 7);
    v80[2] = v68;
    v80[3] = v18;
    v81 = v102;
    v80[4] = v102;
    v80[5] = v79;
    v97 = v18;
    v82 = v107;
    v80[6] = v107;
    v119 = sub_1000A5C14;
    v120 = v80;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000094C8;
    v118 = &unk_1007E2008;
    v83 = _Block_copy(aBlock);
    swift_retain();
    v102 = v81;
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain(v82);
    v84 = v108;
    static DispatchQoS.unspecified.getter(v85);
    v116 = _swiftEmptyArrayStorage;
    v86 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v87 = sub_10001A630((uint64_t *)&unk_100838000);
    v88 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
    v89 = v111;
    v90 = v87;
    v91 = v113;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v116, v90, v88, v113, v86);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v84, v89, v83);
    _Block_release(v83);
    (*(void (**)(char *, uint64_t))(v112 + 8))(v89, v91);
    (*(void (**)(char *, uint64_t))(v109 + 8))(v84, v110);
    swift_release(v120);
    v92 = sub_10001A630(&qword_100838028);
    v93 = swift_allocObject(v92, 272, 7);
    *(_OWORD *)(v93 + 16) = xmmword_1006A3BF0;
    *(_QWORD *)(v93 + 56) = v106;
    *(_QWORD *)(v93 + 64) = &off_1007E1D08;
    v94 = v115;
    *(_QWORD *)(v93 + 32) = v115;
    *(_QWORD *)(v93 + 96) = type metadata accessor for RDStoreControllerNotificationCenter();
    *(_QWORD *)(v93 + 104) = &off_1007E1CE8;
    *(_QWORD *)(v93 + 72) = v105;
    *(_QWORD *)(v93 + 136) = v100;
    *(_QWORD *)(v93 + 144) = &off_1007E1CE0;
    *(_QWORD *)(v93 + 112) = v68;
    *(_QWORD *)(v93 + 176) = v99;
    *(_QWORD *)(v93 + 184) = &off_1007E1CD8;
    *(_QWORD *)(v93 + 152) = v98;
    *(_QWORD *)(v93 + 216) = v114;
    *(_QWORD *)(v93 + 224) = &off_1007E1CD0;
    *(_QWORD *)(v93 + 192) = v79;
    *(_QWORD *)(v93 + 256) = v104;
    *(_QWORD *)(v93 + 264) = &off_1007E1CC8;
    *(_QWORD *)(v93 + 232) = v103;
    swift_retain();
    v95 = v94;
    swift_unknownObjectRelease(v82);
    swift_release(v97);

    return (uint64_t)v95;
  }
  return result;
}

void sub_10009A15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  NSObject *oslog;

  v5 = type metadata accessor for Logger(0);
  sub_10001AAA8(v5, (uint64_t)&unk_100836BC0);
  sub_1004D34F0();
  sub_1001CC528();
  sub_10046B068();
  v6 = *(_QWORD *)(a4 + 16);
  v7 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 16) = sub_10009A24C;
  *(_QWORD *)(a4 + 24) = 0;
  v8 = sub_1000A5C24(v6, v7);
  oslog = Logger.logObject.getter(v8);
  v9 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v9, "os_transaction RELEASE {name: com.apple.remindd.xpcEvents}", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

}

uint64_t sub_10009A24C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001AAA8(v0, (uint64_t)&unk_100836BC0);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Triggered proactiveExitStream.eventHandler. Exiting... {name: com.apple.remindd.xpcEvents}", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  return xpc_transaction_exit_clean();
}

void sub_10009A2F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t inited;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  __int128 v21;
  _BYTE v22[80];
  _BYTE v23[80];

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  v5 = sub_10001AAA8(v2, (uint64_t)&unk_100836BC0);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMDaemonBundleIdentifier);
  v8 = v7;
  v9 = String.utf8CString.getter(v6, v7);
  v10 = swift_bridgeObjectRelease(v8);
  LOBYTE(v8) = _set_user_dir_suffix(v9 + 32, v10);
  swift_release(v9);
  if ((v8 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v4, v5, v0);
    v11 = sub_10001A630((uint64_t *)&unk_10083A280);
    inited = swift_initStackObject(v11, v23);
    v21 = xmmword_1006A3C00;
    *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
    *(_QWORD *)(inited + 32) = 49;
    *(_QWORD *)(inited + 40) = 0xE100000000000000;
    v13 = errno.getter();
    v14 = strerror(v13);
    if (!v14)
      __break(1u);
    v15 = String.init(cString:)(v14);
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = v15;
    *(_QWORD *)(inited + 56) = v16;
    v17 = sub_10016E7E4(inited);
    v18 = swift_initStackObject(v11, v22);
    *(_OWORD *)(v18 + 16) = v21;
    *(_QWORD *)(v18 + 32) = 48;
    *(_QWORD *)(v18 + 40) = 0xE100000000000000;
    v19 = errno.getter();
    *(_QWORD *)(v18 + 72) = &type metadata for Int32;
    *(_DWORD *)(v18 + 48) = v19;
    v20 = sub_10016E7E4(v18);
    sub_1004A14D8((uint64_t)"Sandbox: _set_user_dir_suffix() failed %{public}d (%@)", 54, 2uLL, v17, v20);
    __break(1u);
  }
}

void sub_10009A47C(int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD v45[2];
  uint64_t v46;
  uint64_t v47;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001AAA8(v4, (uint64_t)&unk_100836BC0);
  v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(1024, &type metadata for Int8);
  *(_QWORD *)(v8 + 16) = 1024;
  v9 = (const char *)(v8 + 32);
  bzero((void *)(v8 + 32), 0x400uLL);
  if (confstr(a1, (char *)(v8 + 32), 0x400uLL))
  {
LABEL_6:
    v22 = realpath_DARWIN_EXTSN(v9, 0);
    if (v22)
    {
      v23 = (uint64_t)v22;
      swift_bridgeObjectRelease(v8);
      sub_10009A928(v23);
      swift_slowDealloc(v23, -1, -1);
      return;
    }
    v24 = swift_bridgeObjectRetain(v8);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc(28, -1);
      v28 = swift_slowAlloc(64, -1);
      v47 = v28;
      *(_DWORD *)v27 = 136315650;
      v29 = *(_QWORD *)(v8 + 16);
      if (!v29)
      {
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
      v30 = v28;
      if (*v9)
      {
        v31 = 0;
        v32 = v29 - 1;
        while (v32 != v31)
        {
          if (!*(unsigned __int8 *)(v8 + 33 + v31++))
            goto LABEL_17;
        }
        __break(1u);
        goto LABEL_21;
      }
      v31 = 0;
LABEL_17:
      swift_bridgeObjectRetain(v8);
      v34 = static String._fromUTF8Repairing(_:)(v9, v31);
      v36 = v35;
      swift_bridgeObjectRelease(v8);
      v46 = sub_10001A820(v34, v36, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47);
      swift_bridgeObjectRelease_n(v8, 2);
      swift_bridgeObjectRelease(v36);
      *(_WORD *)(v27 + 12) = 1026;
      LODWORD(v46) = errno.getter(v37);
      v38 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, (char *)&v46 + 4);
      *(_WORD *)(v27 + 18) = 2080;
      v39 = errno.getter(v38);
      v40 = strerror(v39);
      if (!v40)
        goto LABEL_23;
      v41 = String.init(cString:)(v40);
      v43 = v42;
      v46 = sub_10001A820(v41, v42, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47);
      swift_bridgeObjectRelease(v43);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Sandbox: realpath(%s) failed %{public}d (%s)", (uint8_t *)v27, 0x1Cu);
      swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v8, 2);
    }

    v44 = static Array._allocateBufferUninitialized(minimumCapacity:)(1, &type metadata for Int8);
    *(_QWORD *)(v44 + 16) = 1;
    *(_BYTE *)(v44 + 32) = 0;
    sub_10009A928(v44 + 32);
    swift_bridgeObjectRelease(v44);
    return;
  }
  v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v7, v2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.fault.getter();
  if (!os_log_type_enabled(v11, v12))
  {

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    goto LABEL_6;
  }
  v45[1] = v7;
  v13 = swift_slowAlloc(24, -1);
  v45[0] = swift_slowAlloc(32, -1);
  v47 = v45[0];
  *(_DWORD *)v13 = 67240706;
  LODWORD(v46) = a1;
  v14 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, (char *)&v46 + 4);
  *(_WORD *)(v13 + 8) = 1026;
  LODWORD(v46) = errno.getter(v14);
  v15 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, (char *)&v46 + 4);
  *(_WORD *)(v13 + 14) = 2080;
  v16 = errno.getter(v15);
  v17 = strerror(v16);
  if (v17)
  {
    v18 = String.init(cString:)(v17);
    v20 = v19;
    v46 = sub_10001A820(v18, v19, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Sandbox: confstr() for type %{public}d failed %{public}d (%s)", (uint8_t *)v13, 0x18u);
    v21 = v45[0];
    swift_arrayDestroy(v45[0], 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    goto LABEL_6;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
}

void sub_10009A928(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  NSObject *oslog;
  uint64_t v11;
  uint64_t v12;

  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001AAA8(v2, (uint64_t)&unk_100836BC0);
  oslog = Logger.logObject.getter(v3);
  v4 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = String.init(cString:)(a1);
    v9 = v8;
    v11 = sub_10001A820(v7, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12);
    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Sandbox: TMPDIR=%s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
}

id sub_10009AA88(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD aBlock[5];
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v24 = *(_QWORD *)(v7 - 8);
  v25 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  sub_10001AAA8(v10, (uint64_t)&unk_100836BC0);
  if (qword_1008371A8 != -1)
    swift_once(&qword_1008371A8, sub_1003201E8);
  v30 = xmmword_1006A3C10;
  v32 = 0;
  v33[0] = 0;
  v31 = 0;
  *(_QWORD *)((char *)v33 + 6) = 0;
  sub_10001B228((uint64_t)&v30, a1, a2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "os_transaction INIT {name: com.apple.remindd.xpcEvents}", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  v15 = os_transaction_create("com.apple.remindd.xpcEvents");
  v16 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RDBarebonesDaemon()), "init");
  sub_10051F47C();
  if (qword_100836F28 != -1)
    swift_once(&qword_100836F28, sub_1001BA8F8);
  v17 = swift_allocObject(&unk_1007E1EB0, 24, 7);
  *(_QWORD *)(v17 + 16) = v15;
  aBlock[4] = sub_1000A5A74;
  v29 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007E1EC8;
  v18 = _Block_copy(aBlock);
  swift_unknownObjectRetain(v15);
  static DispatchQoS.unspecified.getter(v19);
  v27 = _swiftEmptyArrayStorage;
  v20 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_10001A630((uint64_t *)&unk_100838000);
  v22 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v21, v22, v4, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v18);
  _Block_release(v18);
  swift_unknownObjectRelease(v15);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v25);
  swift_release(v29);
  return v16;
}

void sub_10009ADC4(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  NSObject *oslog;

  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001AAA8(v3, (uint64_t)&unk_100836BC0);
  oslog = Logger.logObject.getter(v4);
  v5 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v5, a2, v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

}

void sub_10009AE70(_BYTE *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  NSString v30;
  id v31;
  void *v32;
  objc_class *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  NSObject *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t UnlockNotificationEngine;
  _QWORD *v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  void *v57;
  char v58;
  uint64_t v59;
  void *v60;
  void *v61;
  char *v62;
  uint64_t v63;
  id v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  id v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  id v76;
  _QWORD *v77;
  uint64_t v78;
  __n128 v79;
  void *v80;
  void *v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  int v96;
  uint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  uint8_t *v100;
  uint64_t v101;
  _QWORD *v102;
  void *v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  objc_class *v107;
  uint64_t ObjectType;
  char *v109;
  id v110;
  void *v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  NSObject *v118;
  os_log_type_t v119;
  _QWORD *v120;
  uint8_t *v121;
  uint8_t *v122;
  void *v123;
  uint64_t v124;
  id v125;
  _QWORD *v126;
  uint64_t v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  id v133;
  uint64_t v134;
  char *v135;
  char *v136;
  __int128 aBlock;
  __int128 v138;
  __int128 v139;
  objc_super v140;
  _QWORD v141[4];
  __int16 v142;

  v5 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v125 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = (char *)sub_10001AAA8(v8, (uint64_t)&unk_100836BC0);
  if ((objc_msgSend((id)objc_opt_self(DADBuddyStateObserver), "isSetupUser") & 1) != 0)
  {
    *(_QWORD *)&v139 = REMCDList.cleanUpAfterLocalObjectMerge();
    *((_QWORD *)&v139 + 1) = 0;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v138 = sub_1004F4824;
    *((_QWORD *)&v138 + 1) = &unk_1007E1E50;
    v10 = _Block_copy(&aBlock);
    xpc_set_event_stream_handler("com.apple.alarm", 0, v10);
    _Block_release(v10);
    *(_QWORD *)&v139 = j___s7remindd28RDLaunchAnalyticsPostNotifydyySo13OS_xpc_object_pF;
    *((_QWORD *)&v139 + 1) = 0;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v138 = sub_1004F4824;
    *((_QWORD *)&v138 + 1) = &unk_1007E1E78;
    v11 = _Block_copy(&aBlock);
    xpc_set_event_stream_handler("com.apple.notifyd.matching", 0, v11);
    _Block_release(v11);
    if (qword_100836F30 != -1)
      swift_once(&qword_100836F30, sub_1001BA924);
    v7 = (char *)qword_100871CF0;
    v12 = &unk_10084D000;
    if (!qword_10084DA38)
      goto LABEL_9;
    if (qword_1008377A0 == -1)
    {
LABEL_6:
      v13 = sub_10001AAA8(v8, (uint64_t)qword_10084DA20);
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "allCheckedInActivities called more than once", v16, 2u);
        swift_slowDealloc(v16, -1, -1);
      }

LABEL_9:
      v17 = v7;
      v18 = sub_1000A5928((uint64_t)&off_1007DAF98, v17, (uint64_t)sub_10009C0A0, 0);

      v19 = v12[327];
      v12[327] = v18;
      swift_bridgeObjectRelease(v19);
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.default.getter(v21);
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Running in the buddy setup user. Going to run a barebones daemon.", v23, 2u);
        swift_slowDealloc(v23, -1, -1);
      }

      v24 = sub_10001A630((uint64_t *)&unk_100837FF0);
      v25 = (_QWORD *)swift_allocObject(v24, 72, 7);
      *((_OWORD *)v25 + 1) = xmmword_1006A3C00;
      v26 = sub_10009AA88(0x754265726F666542, 0xEB00000000796464);
      v25[7] = type metadata accessor for RDBarebonesDaemon();
      v25[8] = &off_1007E1D00;
      v25[4] = v26;
      goto LABEL_57;
    }
LABEL_59:
    swift_once(&qword_1008377A0, sub_1004F6614);
    goto LABEL_6;
  }
  v128 = a1;
  v129 = v8;
  v136 = v9;
  v134 = v2;
  static String._unconditionallyBridgeFromObjectiveC(_:)(REMAppBundleIdentifier);
  v28 = v27;
  v29 = objc_allocWithZone((Class)UNUserNotificationCenter);
  v30 = String._bridgeToObjectiveC()();
  v31 = objc_msgSend(v29, "initWithBundleIdentifier:", v30, swift_bridgeObjectRelease(v28).n128_f64[0]);

  if (qword_100836F28 != -1)
    swift_once(&qword_100836F28, sub_1001BA8F8);
  v12 = &unk_100871000;
  v32 = (void *)qword_100871CE8;
  v33 = (objc_class *)type metadata accessor for RDUserNotificationCenter();
  v34 = (char *)objc_allocWithZone(v33);
  v35 = &v34[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_reminderAlarmDelegate];
  *((_QWORD *)v35 + 1) = 0;
  swift_unknownObjectWeakInit(v35, 0);
  v36 = &v34[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_todayNotificationDelegate];
  *((_QWORD *)v36 + 1) = 0;
  swift_unknownObjectWeakInit(v36, 0);
  v37 = &v34[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_beforeFirstUnlockReminderDelegate];
  *((_QWORD *)v37 + 1) = 0;
  swift_unknownObjectWeakInit(v37, 0);
  v38 = &v34[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_assignmentNotificationDelegate];
  *((_QWORD *)v38 + 1) = 0;
  swift_unknownObjectWeakInit(v38, 0);
  v39 = &v34[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_sharedListUpdateNotificationDelegate];
  *((_QWORD *)v39 + 1) = 0;
  swift_unknownObjectWeakInit(v39, 0);
  *(_QWORD *)&v34[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue] = v32;
  *(_QWORD *)&v34[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_notificationCenter] = v31;
  v140.receiver = v34;
  v140.super_class = v33;
  v40 = v32;
  v133 = v31;
  v41 = objc_msgSendSuper2(&v140, "init");
  v42 = swift_allocObject(&unk_1007E1D20, 24, 7);
  *(_QWORD *)(v42 + 16) = v41;
  v43 = swift_allocObject(&unk_1007E1D48, 32, 7);
  *(_QWORD *)(v43 + 16) = sub_10009FE58;
  *(_QWORD *)(v43 + 24) = v42;
  v132 = v42;
  *(_QWORD *)&v139 = sub_1000098E4;
  *((_QWORD *)&v139 + 1) = v43;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v138 = sub_1000098C4;
  *((_QWORD *)&v138 + 1) = &unk_1007E1D60;
  v44 = _Block_copy(&aBlock);
  v45 = *((_QWORD *)&v139 + 1);
  v46 = v41;
  swift_retain();
  swift_release(v45);
  dispatch_sync(v40, v44);
  _Block_release(v44);
  LOBYTE(v40) = swift_isEscapingClosureAtFileLocation(v43, "", 76, 294, 38, 1);
  swift_release(v43);
  if ((v40 & 1) != 0)
  {
    __break(1u);
    goto LABEL_59;
  }
  v131 = a2;
  v47 = (void *)qword_100871CE8;
  UnlockNotificationEngine = type metadata accessor for RDBeforeFirstUnlockNotificationEngine();
  v49 = (_QWORD *)swift_allocObject(UnlockNotificationEngine, 40, 7);
  v49[2] = v47;
  v49[3] = v46;
  v49[4] = &off_1007F5570;
  v135 = (char *)v46;
  v50 = Logger.logObject.getter(v47);
  v51 = static os_log_type_t.default.getter(v50);
  if (os_log_type_enabled(v50, v51))
  {
    v52 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v52 = 0;
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "os_transaction INIT {name: com.apple.remindd.firstUnlockManager.launch}", v52, 2u);
    swift_slowDealloc(v52, -1, -1);
  }

  v53 = os_transaction_create("com.apple.remindd.firstUnlockManager.launch");
  v54 = type metadata accessor for RDFirstUnlockManager();
  swift_allocObject(v54, 32, 7);
  v55 = sub_100205148();
  sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v57 = (void *)static OS_dispatch_queue.main.getter(v56);
  *(_QWORD *)&v139 = 0;
  aBlock = 0u;
  v138 = 0u;
  swift_retain();
  swift_unknownObjectRetain(v53);
  v58 = sub_100205328((uint64_t)v57, (uint64_t)&aBlock, v55, (uint64_t)sub_10009C0BC, 0, v55, v53);

  v130 = v53;
  swift_unknownObjectRelease(v53);
  swift_release(v55);
  v59 = sub_10000882C((uint64_t)&aBlock, &qword_100840910);
  if (v58 == 1)
  {
    v65 = Logger.logObject.getter(v59);
    v66 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v65, v66))
    {
      v67 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Unexpected currentUnlockState - .firstUnlock is a transitional state that should be passed to the unlock handler only.", v67, 2u);
      swift_slowDealloc(v67, -1, -1);
    }

  }
  else if (!v58)
  {
    *(_QWORD *)&v139 = REMCDList.cleanUpAfterLocalObjectMerge();
    *((_QWORD *)&v139 + 1) = 0;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v138 = sub_1004F4824;
    *((_QWORD *)&v138 + 1) = &unk_1007E1E28;
    v60 = _Block_copy(&aBlock);
    xpc_set_event_stream_handler("com.apple.alarm", 0, v60);
    _Block_release(v60);
    v61 = v135;
    v62 = &v135[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_beforeFirstUnlockReminderDelegate];
    *((_QWORD *)v62 + 1) = &off_1007EB230;
    swift_unknownObjectWeakAssign(v62, v49);
    swift_retain();
    sub_100260D4C();
    swift_release(v49);
    v63 = sub_10001A630((uint64_t *)&unk_100837FF0);
    v25 = (_QWORD *)swift_allocObject(v63, 152, 7);
    *((_OWORD *)v25 + 1) = xmmword_1006A3C20;
    v64 = sub_10009AA88(0x616F4C74416E7552, 0xE900000000000064);
    v25[7] = type metadata accessor for RDBarebonesDaemon();
    v25[8] = &off_1007E1D00;
    v25[4] = v64;
    v25[12] = UnlockNotificationEngine;
    v25[13] = &off_1007E1CF0;
    v25[9] = v49;
    v25[17] = v54;
    v25[18] = &off_1007E1CF8;
    v25[14] = v55;
    swift_release(v132);

    swift_unknownObjectRelease(v130);
    a2 = v131;
LABEL_57:
    *a2 = v25;
    return;
  }
  v68 = objc_msgSend(objc_allocWithZone((Class)RDStoreController), "init");
  if ((objc_msgSend(v68, "hasFailedLoadingAccountStoresFromDiskDueToDiskFull") & 1) != 0)
  {
    *(_QWORD *)&v139 = REMCDList.cleanUpAfterLocalObjectMerge();
    *((_QWORD *)&v139 + 1) = 0;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v138 = sub_1004F4824;
    *((_QWORD *)&v138 + 1) = &unk_1007E1DB0;
    v69 = _Block_copy(&aBlock);
    xpc_set_event_stream_handler("com.apple.alarm", 0, v69);
    _Block_release(v69);
    *(_QWORD *)&v139 = j_j___s7remindd28RDLaunchAnalyticsPostNotifydyySo13OS_xpc_object_pF;
    *((_QWORD *)&v139 + 1) = 0;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v138 = sub_1004F4824;
    *((_QWORD *)&v138 + 1) = &unk_1007E1DD8;
    v70 = _Block_copy(&aBlock);
    xpc_set_event_stream_handler("com.apple.notifyd.matching", 0, v70);
    _Block_release(v70);
    if (qword_100836F30 != -1)
      swift_once(&qword_100836F30, sub_1001BA924);
    v71 = (void *)qword_100871CF0;
    if (qword_10084DA38)
    {
      if (qword_1008377A0 != -1)
        swift_once(&qword_1008377A0, sub_1004F6614);
      v72 = sub_10001AAA8(v129, (uint64_t)qword_10084DA20);
      v73 = Logger.logObject.getter(v72);
      v74 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v73, v74))
      {
        v75 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v75 = 0;
        _os_log_impl((void *)&_mh_execute_header, v73, v74, "allCheckedInActivities called more than once", v75, 2u);
        swift_slowDealloc(v75, -1, -1);
      }

    }
    v76 = v71;
    v77 = sub_1000A5928((uint64_t)&off_1007DAF98, v76, (uint64_t)sub_10009C198, 0);

    v78 = qword_10084DA38;
    qword_10084DA38 = (uint64_t)v77;
    v79 = swift_bridgeObjectRelease(v78);
    v80 = (void *)static OS_dispatch_queue.main.getter(v79);
    *(_QWORD *)&v139 = sub_10009C384;
    *((_QWORD *)&v139 + 1) = 0;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v138 = sub_10009CB38;
    *((_QWORD *)&v138 + 1) = &unk_1007E1E00;
    v81 = _Block_copy(&aBlock);
    swift_release(*((_QWORD *)&v139 + 1));
    objc_msgSend(v68, "requestFreeSpaceToLoadAccountStoresWithQueue:completionBlock:", v80, v81);
    _Block_release(v81);

    v83 = Logger.logObject.getter(v82);
    v84 = static os_log_type_t.default.getter(v83);
    if (os_log_type_enabled(v83, v84))
    {
      v85 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v85 = 0;
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "Could not load some of our databases due to disk full. Going to run a barebones daemon.", v85, 2u);
      swift_slowDealloc(v85, -1, -1);
    }

    v86 = sub_10001A630((uint64_t *)&unk_100837FF0);
    v25 = (_QWORD *)swift_allocObject(v86, 72, 7);
    *((_OWORD *)v25 + 1) = xmmword_1006A3C00;
    v87 = sub_10009AA88(0x6C6C75466B736944, 0xE800000000000000);
    v25[7] = type metadata accessor for RDBarebonesDaemon();
    v25[8] = &off_1007E1D00;
    v25[4] = v87;
    swift_release(v132);
    swift_release(v55);

    goto LABEL_56;
  }
  v141[0] = 0x4014000000000000;
  v88 = type metadata accessor for RDStoreControllerNotificationCenter();
  memset(&v141[1], 0, 24);
  v142 = 0;
  swift_allocObject(v88, 64, 7);
  v68 = v68;
  v89 = sub_100393A5C(0, 0, v68, (uint64_t)v141);
  if (qword_100836F18 != -1)
    swift_once(&qword_100836F18, sub_1001BA744);
  sub_100395434(0, (void *)qword_100871CD8, (uint64_t)sub_10009CB90, 0, (uint64_t)v7);
  sub_1000A3F78((uint64_t)v7);
  swift_retain();
  sub_100261854();
  swift_release(v49);
  if (qword_100836F10 != -1)
    swift_once(&qword_100836F10, sub_1001BA718);
  v90 = sub_10009CC40(0xD00000000000001BLL, 0x80000001006F5290, (void *)qword_100871CD0, &qword_100838148, &qword_100838150);
  v92 = v91;
  v126 = v90;
  v136 = (char *)sub_10009965C(v68, (uint64_t)v89, v135, (uint64_t)v90);
  v94 = v93;
  v95 = v128;
  if (qword_1008379F0 != -1)
    swift_once(&qword_1008379F0, sub_100673F84);
  v96 = byte_100872349;
  *v95 = byte_100872349;
  v127 = v94;
  if (v96 != 1)
  {
    if (qword_100837618 != -1)
      swift_once(&qword_100837618, sub_1004A1800);
    v117 = sub_10001AAA8(v129, (uint64_t)qword_100872028);
    v118 = Logger.logObject.getter(v117);
    v119 = static os_log_type_t.default.getter(v118);
    if (os_log_type_enabled(v118, v119))
    {
      v120 = v89;
      v121 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v121 = 0;
      _os_log_impl((void *)&_mh_execute_header, v118, v119, "Not Running DataAccess", v121, 2u);
      v122 = v121;
      v89 = v120;
      swift_slowDealloc(v122, -1, -1);
    }

    *(_QWORD *)&v139 = j_j___s7remindd28RDLaunchAnalyticsPostNotifydyySo13OS_xpc_object_pF;
    *((_QWORD *)&v139 + 1) = 0;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v138 = sub_1004F4824;
    *((_QWORD *)&v138 + 1) = &unk_1007E1D88;
    v123 = _Block_copy(&aBlock);
    xpc_set_event_stream_handler("com.apple.notifyd.matching", 0, v123);
    _Block_release(v123);
    goto LABEL_55;
  }
  if (qword_100837618 != -1)
    swift_once(&qword_100837618, sub_1004A1800);
  v128 = v89;
  v125 = v68;
  v97 = sub_10001AAA8(v129, (uint64_t)qword_100872028);
  v98 = Logger.logObject.getter(v97);
  v99 = static os_log_type_t.default.getter(v98);
  if (os_log_type_enabled(v98, v99))
  {
    v100 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v100 = 0;
    _os_log_impl((void *)&_mh_execute_header, v98, v99, "Running DataAccess", v100, 2u);
    swift_slowDealloc(v100, -1, -1);
  }

  v101 = type metadata accessor for RDDARequestsQueue();
  v102 = (_QWORD *)swift_allocObject(v101, 72, 7);
  v102[6] = 0;
  swift_unknownObjectWeakInit(v102 + 5, 0);
  v102[2] = 0xD000000000000019;
  v102[3] = 0x80000001006F52F0;
  v103 = *(void **)(v92 + 32);
  v102[4] = v103;
  v102[7] = v92;
  v102[8] = _swiftEmptyArrayStorage;
  swift_retain_n(v92, 2);
  v104 = v103;
  sub_10009D148((uint64_t)v102, v104, (uint64_t)sub_10019DD6C, 0);
  swift_release(v92);

  v105 = *(_QWORD *)&v136[OBJC_IVAR____TtC7remindd8RDDaemon_xpcDaemon];
  v106 = *(_QWORD *)&v136[OBJC_IVAR____TtC7remindd8RDDaemon_xpcDaemon + 8];
  v107 = (objc_class *)type metadata accessor for RDDaemonController();
  aBlock = xmmword_1006A3C30;
  *(_QWORD *)&v139 = 0;
  v138 = 0uLL;
  *(_QWORD *)((char *)&v139 + 6) = 0;
  ObjectType = swift_getObjectType(v105);
  swift_unknownObjectRetain_n(v105, 2);
  v109 = v135;
  v110 = sub_1004AD610(v105, (uint64_t)&aBlock, 0, v107, ObjectType, v106);
  v111 = (void *)qword_100851EE8;
  qword_100851EE8 = (uint64_t)v110;

  v112 = off_100851EF0;
  off_100851EF0 = v128;
  swift_retain();
  swift_release(v112);
  v113 = qword_100851EF8;
  qword_100851EF8 = (uint64_t)v109;
  qword_100851F00 = (uint64_t)&off_1007F5570;
  swift_unknownObjectRelease(v105);
  swift_unknownObjectRelease(v113);
  if (qword_1008379E8 != -1)
    swift_once(&qword_1008379E8, sub_100673F48);
  v114 = qword_100872340;
  v115 = objc_autoreleasePoolPush();
  v116 = v134;
  sub_1006744E0(v114, (uint64_t)v102);
  v68 = v125;
  if (!v116)
  {
    objc_autoreleasePoolPop(v115);
    swift_release(v102);
    v89 = v128;
LABEL_55:
    v124 = v127;
    v25 = sub_1001DF794(v127);
    swift_release(v132);
    swift_release(v55);

    swift_release(v92);
    swift_release(v126);

    swift_release(v89);
    swift_bridgeObjectRelease(v124);
LABEL_56:

    swift_release(v49);
    swift_unknownObjectRelease(v130);

    a2 = v131;
    goto LABEL_57;
  }
  objc_autoreleasePoolPop(v115);
  __break(1u);
}

void sub_10009C0A0(char a1)
{
  sub_10009C1B4(a1);
}

void sub_10009C0BC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  int v5;
  uint64_t v6;

  v0 = type metadata accessor for Logger(0);
  sub_10001AAA8(v0, (uint64_t)&unk_100836BC0);
  v1 = raise(1);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v4 = 67109120;
    v5 = 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v5, &v6);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "remindd raised signal (%d) in try to terminate asap", v4, 8u);
    swift_slowDealloc(v4, -1, -1);
  }

  exit(0);
}

void sub_10009C198(char a1)
{
  sub_10009C1B4(a1);
}

void sub_10009C1B4(char a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _DWORD *v6;

  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001AAA8(v2, (uint64_t)&unk_100836BC0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (_DWORD *)swift_slowAlloc(12, -1);
    swift_slowAlloc(32, -1);
    *v6 = 136446210;
    __asm { BR              X10 }
  }

}

void sub_10009C384(uint64_t a1, char *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  unint64_t v53;
  unint64_t v54;
  NSObject *v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t aBlock;
  _QWORD v68[4];
  uint64_t v69;

  v56 = a3;
  v57 = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v62 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchTimeInterval(0);
  v60 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (NSObject **)((char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v61 = type metadata accessor for DispatchTime(0);
  v59 = *(_QWORD *)(v61 - 8);
  v14 = __chkstk_darwin(v61);
  v58 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v55 - v16;
  v18 = type metadata accessor for Logger(0);
  v19 = sub_10001AAA8(v18, (uint64_t)&unk_100836BC0);
  v64 = v7;
  v65 = v5;
  v63 = v8;
  v66 = v19;
  if ((unint64_t)(a1 - 2) >= 3 && a1)
  {
    if (a1 != 1)
    {
      v53 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
      v54 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
      sub_1004A14D8((uint64_t)"Unknown RDFreeSpaceResult value", 31, 2uLL, v53, v54);
      __break(1u);
      return;
    }
    v41 = Logger.logObject.getter(v19);
    v42 = static os_log_type_t.error.getter();
    v55 = v41;
    v43 = os_log_type_enabled(v41, v42);
    v44 = v56;
    if (v56 >= (unint64_t)v57)
    {
      if (v43)
      {
        v47 = swift_slowAlloc(22, -1);
        *(_DWORD *)v47 = 134218240;
        aBlock = (uint64_t)v57;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v68);
        *(_WORD *)(v47 + 12) = 2048;
        aBlock = v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v68);
        v48 = v55;
        _os_log_impl((void *)&_mh_execute_header, v55, v42, "remindd is now exiting in response to requested free space to load account stores {requested: %llu, available: %llu}", (uint8_t *)v47, 0x16u);
        swift_slowDealloc(v47, -1, -1);

      }
      else
      {

      }
      v50 = Logger.logObject.getter(v49);
      v51 = static os_log_type_t.default.getter(v50);
      if (os_log_type_enabled(v50, v51))
      {
        v52 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v52 = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "Notifying stores must refresh due to relaunching upon requested free space to load account stores", v52, 2u);
        swift_slowDealloc(v52, -1, -1);
      }

      notify_post(_REMStoreMustRefreshNotificationName);
      sub_10009C0BC();
    }
    if (v43)
    {
      v45 = swift_slowAlloc(22, -1);
      *(_DWORD *)v45 = 134218240;
      aBlock = (uint64_t)v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v68);
      *(_WORD *)(v45 + 12) = 2048;
      aBlock = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v68);
      v46 = v55;
      _os_log_impl((void *)&_mh_execute_header, v55, v42, "RDStoreController.requestFreeSpaceToLoadAccountStores completes with .success but still doesn't have enough space {requested: %llu, available: %llu}", (uint8_t *)v45, 0x16u);
      swift_slowDealloc(v45, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc(32, -1);
      *(_DWORD *)v22 = 134218496;
      aBlock = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v68);
      *(_WORD *)(v22 + 12) = 2048;
      aBlock = (uint64_t)v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v68);
      *(_WORD *)(v22 + 22) = 2048;
      aBlock = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v68);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "RDStoreController.requestFreeSpaceToLoadAccountStores did not succeed {result: %lu, requested: %llu, available: %llu}", (uint8_t *)v22, 0x20u);
      swift_slowDealloc(v22, -1, -1);
    }

  }
  v24 = v58;
  static DispatchTime.now()(v23);
  *v13 = 300;
  v25 = v60;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v60 + 104))(v13, enum case for DispatchTimeInterval.seconds(_:), v11);
  v57 = v17;
  + infix(_:_:)(v24, v13);
  (*(void (**)(_QWORD *, uint64_t))(v25 + 8))(v13, v11);
  v26 = *(uint64_t (**)(char *, uint64_t))(v59 + 8);
  v27 = v61;
  v28 = v26(v24, v61);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v31 = 134217984;
    aBlock = 300;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v68);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "remindd couldn't get the requested free space to load account stores, will terminate after {delay: %ld}", v31, 0xCu);
    swift_slowDealloc(v31, -1, -1);
  }

  sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v32 = (void *)static OS_dispatch_queue.main.getter();
  v68[3] = sub_10009CA94;
  v69 = 0;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v68[0] = 1107296256;
  v68[1] = sub_1000094C8;
  v68[2] = &unk_1007E1EF0;
  v33 = _Block_copy(&aBlock);
  v34 = swift_release(v69);
  static DispatchQoS.unspecified.getter(v34);
  aBlock = (uint64_t)_swiftEmptyArrayStorage;
  v35 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v36 = v10;
  v37 = sub_10001A630((uint64_t *)&unk_100838000);
  v38 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  v39 = v64;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v37, v38, v4, v35);
  v40 = v57;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v57, v36, v39, v33);
  _Block_release(v33);

  (*(void (**)(char *, uint64_t))(v65 + 8))(v39, v4);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v36, v63);
  v26(v40, v27);
}

void sub_10009CA94()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001AAA8(v0, (uint64_t)&unk_100836BC0);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "remindd is now exiting after failure to get requested disk space to load account stores in hope to get relaunched in some better future", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  sub_10009C0BC();
}

uint64_t sub_10009CB38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  swift_retain(v7);
  v8(a2, a3, a4);
  return swift_release(v7);
}

uint64_t sub_10009CB90()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001AAA8(v0, (uint64_t)&unk_100836BC0);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.info.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Notifying stores did change", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  return notify_post(_REMStoreChangedNotificationName);
}

_QWORD *sub_10009CC40(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;

  v9 = sub_10001A630(a4);
  v10 = (_QWORD *)swift_allocObject(v9, 64, 7);
  swift_unknownObjectWeakInit(v10 + 5, 0);
  v10[6] = 0;
  v10[7] = 0;
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  v11 = sub_10001A630(a5);
  v12 = (_QWORD *)swift_allocObject(v11, 48, 7);
  v12[2] = a1;
  v12[3] = a2;
  v12[4] = a3;
  v12[5] = v10;
  swift_bridgeObjectRetain_n(a2, 2);
  v13 = a3;
  swift_retain(v10);
  return v12;
}

uint64_t variable initialization expression of StartMigrationRequest.source@<X0>(uint64_t a1@<X8>)
{
  return sub_10009CD5C(type metadata accessor for StartMigrationRequest.OneOf_Source, a1);
}

uint64_t static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()()
{
  return 0;
}

uint64_t variable initialization expression of StartMigrationResponse.state()
{
  return 0;
}

uint64_t variable initialization expression of StartMigrationResponse.result@<X0>(uint64_t a1@<X8>)
{
  return sub_10009CD5C(type metadata accessor for StartMigrationResponse.OneOf_Result, a1);
}

double variable initialization expression of StartMigrationResponse.Details.timeElapsed()
{
  return 0.0;
}

uint64_t variable initialization expression of MigrateRequest.source@<X0>(uint64_t a1@<X8>)
{
  return sub_10009CD5C(type metadata accessor for MigrateRequest.OneOf_Source, a1);
}

void __swiftcall REMCDAccount.existingLocalObjectToMerge(with:)(REMCDObject_optional *__return_ptr retstr, NSPredicate_optional *with)
{
  ;
}

uint64_t variable initialization expression of MigrateResponse.result@<X0>(uint64_t a1@<X8>)
{
  return sub_10009CD5C(type metadata accessor for MigrateResponse.OneOf_Result, a1);
}

uint64_t variable initialization expression of MigrateResponse._nextStep@<X0>(uint64_t a1@<X8>)
{
  return sub_10009CD5C(type metadata accessor for MigrateResponse.NextStep, a1);
}

uint64_t variable initialization expression of UnmigrateResponse.result@<X0>(uint64_t a1@<X8>)
{
  return sub_10009CD5C(type metadata accessor for UnmigrateResponse.OneOf_Result, a1);
}

uint64_t sub_10009CD5C@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = a1(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
}

uint64_t variable initialization expression of BasicResponse.result()
{
  return 0;
}

void sub_10009CDAC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t inited;
  uint64_t v32;
  id v33;
  id v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[136];

  v5 = v4;
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
  v14 = (void *)v4[4];
  if ((static NSObject.== infix(_:_:)(v14) & 1) != 0)
  {
    v39 = a1;
    if (v4[6])
    {
      if (qword_100837400 != -1)
        swift_once(&qword_100837400, sub_1003CF614);
      sub_10001AAA8(v10, (uint64_t)qword_100848A60);
      v15 = swift_retain(v4);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(12, -1);
        v19 = swift_slowAlloc(32, -1);
        v41 = v19;
        *(_DWORD *)v18 = 136315138;
        v38 = a3;
        v21 = v5[2];
        v20 = v5[3];
        swift_bridgeObjectRetain(v20);
        v40 = sub_10001A820(v21, v20, &v41);
        a3 = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);
        swift_release(v5);
        swift_bridgeObjectRelease(v20);
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Replacing existing eventHandler in Reader. This is usually a programmer error. {identifier: %s}", v18, 0xCu);
        swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v19, -1, -1);
        swift_slowDealloc(v18, -1, -1);

      }
      else
      {

        swift_release(v5);
      }
    }
    v23 = v5[2];
    v22 = v5[3];
    v24 = v39;
    swift_unknownObjectWeakAssign(v5 + 5, v39);
    v25 = swift_allocObject(&unk_1007E21A8, 24, 7);
    swift_unknownObjectWeakInit(v25 + 16, v24);
    v26 = (_QWORD *)swift_allocObject(&unk_1007E21D0, 56, 7);
    v26[2] = v25;
    v26[3] = v23;
    v26[4] = v22;
    v26[5] = a3;
    v26[6] = a4;
    v27 = v5[6];
    v28 = v5[7];
    v5[6] = sub_1000A5E1C;
    v5[7] = v26;
    swift_bridgeObjectRetain(v22);
    swift_retain(a4);
    sub_1000A5C24(v27, v28);
  }
  else
  {
    if (qword_100837400 != -1)
      swift_once(&qword_100837400, sub_1003CF614);
    v29 = sub_10001AAA8(v10, (uint64_t)qword_100848A60);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v29, v10);
    v30 = sub_10001A630((uint64_t *)&unk_10083A280);
    inited = swift_initStackObject(v30, v42);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
    *(_QWORD *)(inited + 32) = 48;
    *(_QWORD *)(inited + 40) = 0xE100000000000000;
    v32 = sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
    *(_QWORD *)(inited + 48) = v14;
    *(_QWORD *)(inited + 72) = v32;
    *(_QWORD *)(inited + 80) = 49;
    *(_QWORD *)(inited + 120) = v32;
    *(_QWORD *)(inited + 88) = 0xE100000000000000;
    *(_QWORD *)(inited + 96) = a2;
    v33 = v14;
    v34 = a2;
    v35 = sub_10016E7E4(inited);
    v36 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    sub_1004A14D8((uint64_t)"Unexpected eventHandler queue {self.queue: %@, queue: %@}", 57, 2uLL, v35, v36);
    __break(1u);
  }
}

void sub_10009D148(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t inited;
  uint64_t v32;
  id v33;
  id v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[136];

  v5 = v4;
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
  v14 = (void *)v4[4];
  if ((static NSObject.== infix(_:_:)(v14) & 1) != 0)
  {
    v39 = a1;
    if (v4[6])
    {
      if (qword_100837400 != -1)
        swift_once(&qword_100837400, sub_1003CF614);
      sub_10001AAA8(v10, (uint64_t)qword_100848A60);
      v15 = swift_retain();
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(12, -1);
        v19 = swift_slowAlloc(32, -1);
        v41 = v19;
        *(_DWORD *)v18 = 136315138;
        v38 = a3;
        v21 = v5[2];
        v20 = v5[3];
        swift_bridgeObjectRetain(v20);
        v40 = sub_10001A820(v21, v20, &v41);
        a3 = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);
        swift_release(v5);
        swift_bridgeObjectRelease(v20);
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Replacing existing eventHandler in Reader. This is usually a programmer error. {identifier: %s}", v18, 0xCu);
        swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v19, -1, -1);
        swift_slowDealloc(v18, -1, -1);

      }
      else
      {

        swift_release(v5);
      }
    }
    v23 = v5[2];
    v22 = v5[3];
    v24 = v39;
    swift_unknownObjectWeakAssign(v5 + 5, v39);
    v25 = swift_allocObject(&unk_1007E1F78, 24, 7);
    swift_weakInit(v25 + 16, v24);
    v26 = (_QWORD *)swift_allocObject(&unk_1007E1FA0, 56, 7);
    v26[2] = v25;
    v26[3] = v23;
    v26[4] = v22;
    v26[5] = a3;
    v26[6] = a4;
    v27 = v5[6];
    v28 = v5[7];
    v5[6] = sub_1000A5B2C;
    v5[7] = v26;
    swift_bridgeObjectRetain(v22);
    swift_retain();
    sub_1000A5C24(v27, v28);
  }
  else
  {
    if (qword_100837400 != -1)
      swift_once(&qword_100837400, sub_1003CF614);
    v29 = sub_10001AAA8(v10, (uint64_t)qword_100848A60);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v29, v10);
    v30 = sub_10001A630((uint64_t *)&unk_10083A280);
    inited = swift_initStackObject(v30, v42);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
    *(_QWORD *)(inited + 32) = 48;
    *(_QWORD *)(inited + 40) = 0xE100000000000000;
    v32 = sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
    *(_QWORD *)(inited + 48) = v14;
    *(_QWORD *)(inited + 72) = v32;
    *(_QWORD *)(inited + 80) = 49;
    *(_QWORD *)(inited + 120) = v32;
    *(_QWORD *)(inited + 88) = 0xE100000000000000;
    *(_QWORD *)(inited + 96) = a2;
    v33 = v14;
    v34 = a2;
    v35 = sub_10016E7E4(inited);
    v36 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    sub_1004A14D8((uint64_t)"Unexpected eventHandler queue {self.queue: %@, queue: %@}", 57, 2uLL, v35, v36);
    __break(1u);
  }
}

uint64_t variable initialization expression of REMGroceryClassifier.requireRemovingNumbers()
{
  return 2;
}

uint64_t sub_10009D4EC(uint64_t a1)
{
  return swift_slowDealloc(a1, -1, -1);
}

uint64_t sub_10009D4F8(uint64_t a1)
{
  return swift_slowAlloc(a1, -1);
}

id variable initialization expression of RDSynchronizedKeyValueStore.queue()
{
  if (qword_100836F28 != -1)
    swift_once(&qword_100836F28, sub_1001BA8F8);
  return (id)qword_100871CE8;
}

uint64_t variable initialization expression of REMCDTemplate.defaultPublicLinkURLHostname()
{
  return 0x632E64756F6C6369;
}

void sub_10009D55C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t, uint64_t *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t Strong;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  uint64_t v21;

  v21 = a1;
  v8 = a2 + 16;
  swift_beginAccess(a2 + 16, v20, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v8, v9);
  if (Strong)
  {
    v11 = (void *)Strong;
    a5(Strong, &v21);

  }
  else
  {
    if (qword_100837400 != -1)
      swift_once(&qword_100837400, sub_1003CF614);
    v12 = type metadata accessor for Logger(0);
    sub_10001AAA8(v12, (uint64_t)qword_100848A60);
    v13 = swift_bridgeObjectRetain_n(a4, 2);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v19 = v17;
      *(_DWORD *)v16 = 136315138;
      swift_bridgeObjectRetain(a4);
      v18 = sub_10001A820(a3, a4, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Dropping reader message because target has been deallocated {identifier: %s}", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a4, 2);
    }
  }
}

double sub_10009D73C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t, _BYTE *))
{
  uint64_t Strong;
  uint64_t v10;
  double result;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  _BYTE v21[56];

  sub_1000A5B8C(a1, (uint64_t)v21);
  a2 += 16;
  swift_beginAccess(a2, v20, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v10 = Strong;
    a5(Strong, v21);
    swift_release(v10);
  }
  else
  {
    if (qword_100837400 != -1)
      swift_once(&qword_100837400, sub_1003CF614);
    v12 = type metadata accessor for Logger(0);
    sub_10001AAA8(v12, (uint64_t)qword_100848A60);
    v13 = swift_bridgeObjectRetain_n(a4, 2);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v19 = v17;
      *(_DWORD *)v16 = 136315138;
      swift_bridgeObjectRetain(a4);
      v18 = sub_10001A820(a3, a4, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Dropping reader message because target has been deallocated {identifier: %s}", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {

      *(_QWORD *)&result = swift_bridgeObjectRelease_n(a4, 2).n128_u64[0];
    }
  }
  return result;
}

uint64_t sub_10009D928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v20 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_allocObject(&unk_1007E21F8, 32, 7);
  *(_QWORD *)(v13 + 16) = a3;
  *(_QWORD *)(v13 + 24) = a1;
  aBlock[4] = sub_1000A5E5C;
  v23 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007E2210;
  v14 = _Block_copy(aBlock);
  swift_retain(a3);
  v15 = swift_bridgeObjectRetain(a1);
  static DispatchQoS.unspecified.getter(v15);
  v21 = _swiftEmptyArrayStorage;
  v16 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10001A630((uint64_t *)&unk_100838000);
  v18 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release(v23);
}

void sub_10009DB1C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v32[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v32[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = (void *)v1[2];
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = v6;
  v8 = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v8 & 1) != 0)
  {
    if (qword_1008374B8 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1008374B8, sub_1004222AC);
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10001AAA8(v9, (uint64_t)qword_10084A2D0);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "CloudSchemaCatchUpSyncController: Starting", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = swift_beginAccess(v1 + 3, v32, 1, 0);
  if (v1[3])
  {
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      v18 = "CloudSchemaCatchUpSyncController: backgroundScheduler has already instantiated, duplicate call to q_start?";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v15, v16, v18, v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }
  }
  else
  {
    v19 = v1[4];
    v20 = swift_allocObject(&unk_1007E22E8, 24, 7);
    swift_weakInit(v20 + 16, v1);
    v21 = *(void **)(v19 + 16);
    v22 = type metadata accessor for RDICCloudSchemaCatchUpSyncXPCActivity();
    v23 = swift_allocObject(v22, 32, 7);
    *(_QWORD *)(v23 + 16) = v21;
    v24 = (_QWORD *)swift_allocObject(&unk_1007E2310, 40, 7);
    v24[2] = v7;
    v24[3] = sub_1000A5F34;
    v24[4] = v20;
    v25 = type metadata accessor for RDDynamicXPCActivity();
    swift_allocObject(v25, 128, 7);
    v26 = v7;
    swift_retain(v19);
    swift_retain_n(v20, 2);
    v27 = v21;
    sub_1004F69CC(2, (uint64_t)sub_1000A6780, (uint64_t)v24);
    *(_QWORD *)(v23 + 24) = v28;
    swift_release(v19);
    swift_release_n(v20, 2);
    v29 = v1[3];
    v1[3] = v23;
    v30 = swift_release(v29);
    v15 = Logger.logObject.getter(v30);
    v16 = static os_log_type_t.default.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      v18 = "CloudSchemaCatchUpSyncController: Instantiated a background scheduler (xpcActivity) upon q_start";
      goto LABEL_10;
    }
  }

}

void sub_10009DE50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __n128 v37;
  void (*v38)(char *, uint64_t, __n128);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  _QWORD v45[2];
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;

  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v2);
  v4 = (char *)v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v47 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v45 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)v45 - v12;
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (_QWORD *)((char *)v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *(void **)(v1 + 16);
  *v17 = v18;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v17);
  (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) == 0)
  {
    __break(1u);
LABEL_20:
    swift_once(&qword_1008374B8, sub_1004222AC);
    goto LABEL_12;
  }
  v20 = *(void **)(v1 + 40);
  swift_getObjectType(v20);
  if (objc_msgSend(v20, "schedulingState") != (id)1)
    return;
  v21 = objc_msgSend(v20, "lastScheduledDate");
  if (v21)
  {
    v22 = v21;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v21);

    v23 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v23(v4, v11, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
    {
      v24 = ((uint64_t (*)(char *, char *, uint64_t))v23)(v13, v4, v5);
      v25 = Date.timeIntervalSinceNow.getter(v24);
      v26 = *(double *)(v1 + 64);
      if (v25 >= -v26)
      {
        (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v5);
      }
      else
      {
        if (qword_1008374B8 != -1)
          swift_once(&qword_1008374B8, sub_1004222AC);
        v27 = type metadata accessor for Logger(0);
        sub_10001AAA8(v27, (uint64_t)qword_10084A2D0);
        v28 = v47;
        (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v47, v13, v5);
        v29 = swift_retain(v1);
        v30 = Logger.logObject.getter(v29);
        v31 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v30, v31))
        {
          v32 = swift_slowAlloc(22, -1);
          v46 = swift_slowAlloc(32, -1);
          v49 = v46;
          *(_DWORD *)v32 = 134349314;
          v48 = *(_QWORD *)&v26;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
          swift_release(v1);
          *(_WORD *)(v32 + 12) = 2082;
          v45[1] = v32 + 14;
          v33 = sub_10009FC50((unint64_t *)&qword_100846B70, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          v34 = dispatch thunk of CustomStringConvertible.description.getter(v5, v33);
          v36 = v35;
          v48 = sub_10001A820(v34, v35, &v49);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
          v37 = swift_bridgeObjectRelease(v36);
          v38 = *(void (**)(char *, uint64_t, __n128))(v6 + 8);
          v38(v28, v5, v37);
          _os_log_impl((void *)&_mh_execute_header, v30, v31, "CloudSchemaCatchUpSyncController: q_repairSchedulingStateIfNeeded(): It had been too long since we scheudled the background activity and catch up sync still hasn't ran yet, force running the activity manually now {timeout: %{public}f, lastScheduledDate: %{public}s}", (uint8_t *)v32, 0x16u);
          v39 = v46;
          swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v39, -1, -1);
          swift_slowDealloc(v32, -1, -1);
        }
        else
        {
          swift_release(v1);
          v38 = *(void (**)(char *, uint64_t, __n128))(v6 + 8);
          ((void (*)(char *, uint64_t))v38)(v28, v5);
        }

        sub_10009E8DC();
        ((void (*)(char *, uint64_t))v38)(v13, v5);
      }
      return;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  }
  sub_10000882C((uint64_t)v4, (uint64_t *)&unk_1008380D0);
  if (qword_1008374B8 != -1)
    goto LABEL_20;
LABEL_12:
  v40 = type metadata accessor for Logger(0);
  v41 = sub_10001AAA8(v40, (uint64_t)qword_10084A2D0);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "CloudSchemaCatchUpSyncController: q_repairSchedulingStateIfNeeded(): schedulingState is .scheduled but we don't have a lastScheduledDate, force re-scheduling now", v44, 2u);
    swift_slowDealloc(v44, -1, -1);
  }

  sub_100423B84();
  sub_10009E374();
}

void sub_10009E374()
{
  _QWORD *v0;
  uint64_t v1;
  void (**v2)(_QWORD *, _QWORD, uint64_t);
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  _BYTE v32[16];
  uint64_t v33;
  _BYTE v34[24];

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(void (***)(_QWORD *, _QWORD, uint64_t))(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v32[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = (void *)v0[2];
  *v4 = v5;
  v2[13](v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  ((void (*)(_QWORD *, uint64_t))v2[1])(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  swift_beginAccess(v0 + 3, v34, 0, 0);
  v1 = v0[3];
  if (v1)
  {
    v7 = (void *)v0[5];
    swift_getObjectType(v7);
    swift_retain(v1);
    v8 = objc_msgSend(v7, "schedulingState");
    if (v8)
    {
      v2 = (void (**)(_QWORD *, _QWORD, uint64_t))v8;
      if (qword_1008374B8 == -1)
      {
LABEL_5:
        v9 = type metadata accessor for Logger(0);
        sub_10001AAA8(v9, (uint64_t)qword_10084A2D0);
        v10 = swift_retain(v1);
        v11 = Logger.logObject.getter(v10);
        v12 = static os_log_type_t.default.getter(v11);
        if (os_log_type_enabled(v11, v12))
        {
          v13 = swift_slowAlloc(18, -1);
          *(_DWORD *)v13 = 134349312;
          v33 = (uint64_t)v2;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34);
          *(_WORD *)(v13 + 12) = 1026;
          v33 = v1;
          type metadata accessor for RDICCloudSchemaCatchUpSyncXPCActivity();
          LOBYTE(v33) = sub_1004241EC() & 1;
          LODWORD(v33) = v33;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, (char *)&v33 + 4);
          swift_release(v1);
          _os_log_impl((void *)&_mh_execute_header, v11, v12, "CloudSchemaCatchUpSyncController: SchedulingState is not .unset so no need to schedule another one {schedulingState: %{public}ld, hasPendingActivity: %{BOOL,public}d}", (uint8_t *)v13, 0x12u);
          swift_slowDealloc(v13, -1, -1);
          swift_release(v1);
        }
        else
        {
          swift_release_n(v1, 2);
        }

        return;
      }
LABEL_26:
      swift_once(&qword_1008374B8, sub_1004222AC);
      goto LABEL_5;
    }
    v19 = *(_QWORD *)(v1 + 24);
    v33 = *(_QWORD *)(v19 + 120);
    v20 = v33;
    v21 = type metadata accessor for UnfairLock(0);
    swift_retain(v20);
    Lock.sync<A>(_:)(sub_1000A5F08, v19, v21, &type metadata for Bool, &protocol witness table for UnfairLock);
    swift_release(v33);
    if ((v32[15] & 1) != 0)
    {
      if (qword_1008374B8 != -1)
        swift_once(&qword_1008374B8, sub_1004222AC);
      v22 = type metadata accessor for Logger(0);
      v23 = sub_10001AAA8(v22, (uint64_t)qword_10084A2D0);
      v24 = Logger.logObject.getter(v23);
      v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v25))
      {
        v26 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v26 = 134349056;
        v33 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34);
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "CloudSchemaCatchUpSyncController: Already having a pending activity with the background scheduler (xpcActivity) so no need to schedule another one {schedulingState: (%{public}ld)}", v26, 0xCu);
        swift_slowDealloc(v26, -1, -1);
      }

      sub_100423DEC();
      swift_release(v1);
    }
    else
    {
      sub_100423FD4();
      sub_100423DEC();
      if (qword_1008374B8 != -1)
        swift_once(&qword_1008374B8, sub_1004222AC);
      v27 = type metadata accessor for Logger(0);
      v28 = sub_10001AAA8(v27, (uint64_t)qword_10084A2D0);
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.default.getter(v29);
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "CloudSchemaCatchUpSyncController: Updated background activity (xpcActivity) criteria", v31, 2u);
        swift_slowDealloc(v31, -1, -1);
      }
      swift_release(v1);

    }
  }
  else
  {
    if (qword_1008374B8 != -1)
      swift_once(&qword_1008374B8, sub_1004222AC);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_10001AAA8(v14, (uint64_t)qword_10084A2D0);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "CloudSchemaCatchUpSyncController: backgroundScheduler is unexpectedly not instantiated yet when calling q_scheduleBackgroundActivity(), bailing out", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

  }
}

uint64_t sub_10009E880(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    sub_10009E8DC();
    return swift_release(v3);
  }
  return result;
}

void sub_10009E8DC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void *v19;
  void **v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t Strong;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint8_t *v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  void *v43;
  uint64_t v44;
  void **v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  _QWORD *v58;
  void **aBlock;
  uint64_t v60;
  uint64_t (*v61)(uint64_t);
  void *v62;
  void *v63;
  _QWORD *v64;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v56 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = (void *)v1[2];
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  v57 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) != 0)
  {
    v55 = v3;
    if (qword_1008374B8 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1008374B8, sub_1004222AC);
LABEL_3:
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10001AAA8(v14, (uint64_t)qword_10084A2D0);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "CloudSchemaCatchUpSyncController: Running scheduled background activity...", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = (void *)v1[5];
  swift_getObjectType(v19);
  v20 = (void **)objc_msgSend(v19, "schedulingState");
  if (v20 == (void **)1)
  {
    v21 = v8;
    v22 = v5;
    v23 = v2;
    v24 = v6;
    sub_100423BB8();
    Strong = swift_unknownObjectWeakLoadStrong(v1 + 6, v25);
    v27 = v1[7];
    v28 = Logger.logObject.getter(Strong);
    v29 = v28;
    if (Strong)
    {
      v30 = static os_log_type_t.default.getter(v28);
      if (os_log_type_enabled(v29, v30))
      {
        v31 = Strong;
        v32 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "os_transaction INIT {name: com.apple.remindd.ICCloudSchemaCatchUpSyncController.q_syncRunScheduledActivity}", v32, 2u);
        v33 = v32;
        Strong = v31;
        swift_slowDealloc(v33, -1, -1);
      }
      v53 = Strong;

      v34 = os_transaction_create("com.apple.remindd.ICCloudSchemaCatchUpSyncController.q_syncRunScheduledActivity");
      v35 = (_QWORD *)swift_allocObject(&unk_1007E2270, 40, 7);
      v35[2] = Strong;
      v35[3] = v27;
      v35[4] = v34;
      v54 = v34;
      v63 = sub_1000A5EF4;
      v64 = v35;
      aBlock = _NSConcreteStackBlock;
      v60 = 1107296256;
      v61 = sub_1000094C8;
      v62 = &unk_1007E2288;
      v36 = _Block_copy(&aBlock);
      swift_unknownObjectRetain(Strong);
      v37 = swift_unknownObjectRetain(v34);
      v38 = v21;
      static DispatchQoS.unspecified.getter(v37);
      v58 = _swiftEmptyArrayStorage;
      v39 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v52 = v39;
      v40 = sub_10001A630((uint64_t *)&unk_100838000);
      v51 = v40;
      v41 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v58, v40, v41, v23, v39);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v38, v22, v36);
      _Block_release(v36);
      v55 = *(_QWORD *)(v55 + 8);
      ((void (*)(char *, uint64_t))v55)(v22, v23);
      v42 = *(void (**)(char *, uint64_t))(v56 + 8);
      v42(v38, v24);
      swift_release(v64);
      v63 = sub_1000A5F00;
      v64 = v1;
      aBlock = _NSConcreteStackBlock;
      v60 = 1107296256;
      v61 = sub_1000094C8;
      v62 = &unk_1007E22B0;
      v43 = _Block_copy(&aBlock);
      v44 = swift_retain(v1);
      static DispatchQoS.unspecified.getter(v44);
      v58 = _swiftEmptyArrayStorage;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v58, v51, v41, v23, v52);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v38, v22, v43);
      _Block_release(v43);
      swift_unknownObjectRelease(v53);
      swift_unknownObjectRelease(v54);
      ((void (*)(char *, uint64_t))v55)(v22, v23);
      v42(v38, v24);
      swift_release(v64);
    }
    else
    {
      v49 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v49))
      {
        v50 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v50 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v49, "CloudSchemaCatchUpSyncController: Unexpected nil RDICCloudSchemaCatchUpSyncPerformer (ICCloudContext), bailing out from q_syncRunScheduledActivity()", v50, 2u);
        swift_slowDealloc(v50, -1, -1);
      }

    }
  }
  else
  {
    v45 = v20;
    v46 = Logger.logObject.getter(v20);
    v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v48 = 134349056;
      aBlock = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v60);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "CloudSchemaCatchUpSyncController: SchedulingState is not .scheduled when trying to call q_syncRunScheduledActivity(), bailing out {schedulingState: %{public}ld}", v48, 0xCu);
      swift_slowDealloc(v48, -1, -1);
    }

  }
}

uint64_t sub_10009EEE4(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  result = swift_beginAccess(a1 + 24, v4, 0, 0);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    swift_retain(v3);
    sub_1004F5A28();
    return swift_release(v3);
  }
  return result;
}

uint64_t *sub_10009EF3C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t variable initialization expression of RDUserNotificationCenter.beforeFirstUnlockReminderDelegate()
{
  return 0;
}

uint64_t sub_10009EF88(uint64_t a1, uint64_t a2)
{
  return sub_10009F98C(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_10009EFA0(uint64_t a1, uint64_t a2)
{
  return sub_10009F98C(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

_WORD *sub_10009EFB4@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *result;
  *(_BYTE *)(a2 + 2) = 0;
  return result;
}

void sub_10009EFC4(_WORD *a1@<X8>)
{
  _WORD *v1;

  *a1 = *v1;
}

id sub_10009EFD8()
{
  id *v0;

  return *v0;
}

uint64_t sub_10009EFE0@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_10009EFE8(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_10009F05C(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_10009F0D8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

BOOL sub_10009F118(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

void sub_10009F130()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10009F15C()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_10009F1A0(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10009F1E0@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10009F208()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(CKErrorDomain);
}

uint64_t sub_10009F218(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009FC50((unint64_t *)&qword_1008382B0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1006A5000);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10009F258(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009FC50((unint64_t *)&qword_1008382B0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1006A5000);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10009F298(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50((unint64_t *)&qword_1008382B0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1006A5000);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_10009F2FC()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_10009F330(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50((unint64_t *)&qword_1008382B0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1006A5000);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_10009F380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD v7[10];

  v7[9] = *v3;
  Hasher.init(_seed:)(v7, a1);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

_QWORD *sub_10009F3DC@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_10009F3EC(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_10009F3F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10009FC50(&qword_1008382F8, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_1006A47D4);
  v3 = sub_10009FC50(&qword_100838300, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_1006A4774);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10009F47C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10009FC50(&qword_1008382C8, (uint64_t (*)(uint64_t))type metadata accessor for REMSmartListType, (uint64_t)&unk_1006A4E20);
  v3 = sub_10009FC50(&qword_1008382D0, (uint64_t (*)(uint64_t))type metadata accessor for REMSmartListType, (uint64_t)&unk_1006A4DC8);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10009F500(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10009FC50(&qword_100837E28, (uint64_t (*)(uint64_t))type metadata accessor for ICCloudContextSyncReason, (uint64_t)&unk_1006A4178);
  v3 = sub_10009FC50(&qword_100837E30, (uint64_t (*)(uint64_t))type metadata accessor for ICCloudContextSyncReason, (uint64_t)&unk_1006A4120);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10009F584(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10009FC50(&qword_100837E38, (uint64_t (*)(uint64_t))type metadata accessor for REMXPCSyncInterfaceSyncReason, (uint64_t)&unk_1006A4038);
  v3 = sub_10009FC50(&qword_100837E40, (uint64_t (*)(uint64_t))type metadata accessor for REMXPCSyncInterfaceSyncReason, (uint64_t)&unk_1006A3FE0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10009F608(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10009FC50(&qword_1008382E8, (uint64_t (*)(uint64_t))type metadata accessor for NLTagScheme, (uint64_t)&unk_1006A49EC);
  v3 = sub_10009FC50(&qword_1008382F0, (uint64_t (*)(uint64_t))type metadata accessor for NLTagScheme, (uint64_t)&unk_1006A498C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10009F68C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10009FC50(&qword_1008382D8, (uint64_t (*)(uint64_t))type metadata accessor for NLTag, (uint64_t)&unk_1006A4CD8);
  v3 = sub_10009FC50(&qword_1008382E0, (uint64_t (*)(uint64_t))type metadata accessor for NLTag, (uint64_t)&unk_1006A4C78);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10009F710(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10009FC50(&qword_100837E48, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1006A3EF0);
  v3 = sub_10009FC50(&qword_100837E50, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1006A3E90);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10009F794(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009FC50(&qword_100838278, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1006A4BCC);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10009F7D4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009FC50(&qword_100838278, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1006A4BCC);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10009F818(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009FC50((unint64_t *)&qword_1008382B0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1006A5000);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10009F858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_10009FC50((unint64_t *)&qword_1008382B0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1006A5000);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

BOOL sub_10009F8B0(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10009F8C4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_10009F908(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10009FC50(&qword_1008382B8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1006A4FBC);
  v3 = sub_10009FC50(&qword_1008382C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1006A4F10);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10009F98C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_10009F9C8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10009FA08(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_10009FA78(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_10009FB00(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

_BYTE **sub_10009FB34(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

void type metadata accessor for REMAccountType(uint64_t a1)
{
  sub_1000A65A4(a1, &qword_100837D90, (uint64_t)&unk_1007E1B98);
}

void type metadata accessor for REMStoreMode(uint64_t a1)
{
  sub_1000A65A4(a1, &qword_100837D98, (uint64_t)&unk_1007E1BB8);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_1000A65A4(a1, &qword_100837DA0, (uint64_t)&unk_1007E1BD8);
}

void type metadata accessor for Scope(uint64_t a1)
{
  sub_1000A65A4(a1, &qword_100837DA8, (uint64_t)&unk_1007E1C00);
}

void type metadata accessor for ICCloudContextSyncReason(uint64_t a1)
{
  sub_1000A65A4(a1, &qword_100837DB0, (uint64_t)&unk_1007E1C20);
}

void type metadata accessor for REMSharedEntitySyncActivityType(uint64_t a1)
{
  sub_1000A65A4(a1, &qword_100837DB8, (uint64_t)&unk_1007E1C48);
}

void type metadata accessor for REMXPCSyncInterfaceSyncReason(uint64_t a1)
{
  sub_1000A65A4(a1, &qword_100837DC0, (uint64_t)&unk_1007E1C68);
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
  sub_1000A65A4(a1, &qword_100837DC8, (uint64_t)&unk_1007E1C90);
}

void type metadata accessor for REMObjectIsConnectedState(uint64_t a1)
{
  sub_1000A65A4(a1, &qword_100837DD0, (uint64_t)&unk_1007E1CB8);
}

uint64_t sub_10009FBF8()
{
  return sub_10009FC50(&qword_100837DD8, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1006A3E54);
}

uint64_t sub_10009FC24()
{
  return sub_10009FC50(&qword_100837DE0, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1006A3E28);
}

uint64_t sub_10009FC50(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10009FC90()
{
  return sub_10009FC50(&qword_100837DE8, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1006A3EC4);
}

uint64_t sub_10009FCBC()
{
  return sub_10009FC50(&qword_100837DF0, (uint64_t (*)(uint64_t))type metadata accessor for REMXPCSyncInterfaceSyncReason, (uint64_t)&unk_1006A3FA8);
}

uint64_t sub_10009FCE8()
{
  return sub_10009FC50(&qword_100837DF8, (uint64_t (*)(uint64_t))type metadata accessor for REMXPCSyncInterfaceSyncReason, (uint64_t)&unk_1006A3F80);
}

uint64_t sub_10009FD14()
{
  return sub_10009FC50(&qword_100837E00, (uint64_t (*)(uint64_t))type metadata accessor for REMXPCSyncInterfaceSyncReason, (uint64_t)&unk_1006A4010);
}

uint64_t sub_10009FD40()
{
  return sub_10009FC50(&qword_100837E08, (uint64_t (*)(uint64_t))type metadata accessor for ICCloudContextSyncReason, (uint64_t)&unk_1006A40E8);
}

uint64_t sub_10009FD6C()
{
  return sub_10009FC50(&qword_100837E10, (uint64_t (*)(uint64_t))type metadata accessor for ICCloudContextSyncReason, (uint64_t)&unk_1006A40C0);
}

uint64_t sub_10009FD98()
{
  return sub_10009FC50(&qword_100837E18, (uint64_t (*)(uint64_t))type metadata accessor for ICCloudContextSyncReason, (uint64_t)&unk_1006A4150);
}

uint64_t sub_10009FDC4()
{
  return sub_10009FC50(&qword_100837E20, (uint64_t (*)(uint64_t))type metadata accessor for REMAccountType, (uint64_t)&unk_1006A42C0);
}

unint64_t sub_10009FDF0()
{
  unint64_t result;

  result = qword_100837FD8;
  if (!qword_100837FD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_100837FD8);
  }
  return result;
}

uint64_t sub_10009FE34()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10009FE58()
{
  sub_100484B44();
}

uint64_t sub_10009FE78()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10009FE88(uint64_t result, uint64_t *a2)
{
  void (*v2)(uint64_t *);
  uint64_t v3;
  uint64_t v4;

  v4 = *a2;
  v2 = *(void (**)(uint64_t *))(result + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(result + 56);
    swift_retain(v3);
    v2(&v4);
    return sub_1000A5C24((uint64_t)v2, v3);
  }
  return result;
}

uint64_t sub_10009FEE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v12;
  char *v13;
  char *v14;
  char *v15;
  objc_super v17;
  __int128 v18;
  uint64_t v19;
  _UNKNOWN **v20;

  v19 = type metadata accessor for RDPublicCloudDatabaseController();
  v20 = &off_1007F79D0;
  *(_QWORD *)&v18 = a4;
  *(_QWORD *)(a6 + 64) = 0;
  swift_unknownObjectWeakInit(a6 + 56, 0);
  *(_QWORD *)(a6 + 104) = &_swiftEmptySetSingleton;
  *(_QWORD *)(a6 + 112) = 0;
  *(_BYTE *)(a6 + 120) = 0;
  *(_QWORD *)(a6 + 128) = 0xD000000000000023;
  *(_QWORD *)(a6 + 136) = 0x80000001006F5600;
  *(_QWORD *)(a6 + 144) = 0xD00000000000002BLL;
  *(_QWORD *)(a6 + 152) = 0x80000001006F5630;
  *(_QWORD *)(a6 + 160) = 0xD000000000000038;
  *(_QWORD *)(a6 + 168) = 0x80000001006F5660;
  *(_QWORD *)(a6 + 176) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RDTemplateOperationQueue.BabysitTarget()), "init");
  *(_QWORD *)(a6 + 72) = a1;
  v12 = (objc_class *)type metadata accessor for RDDaemonController();
  v13 = (char *)objc_allocWithZone(v12);
  v14 = &v13[OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon];
  *(_QWORD *)v14 = a2;
  *((_QWORD *)v14 + 1) = &off_1007EF200;
  v15 = &v13[OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity];
  *(_QWORD *)v15 = 0xD000000000000016;
  *((_QWORD *)v15 + 1) = 0x80000001006F56A0;
  *(_QWORD *)(v15 + 38) = 0;
  *((_QWORD *)v15 + 3) = 0;
  *((_QWORD *)v15 + 4) = 0;
  *((_QWORD *)v15 + 2) = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken] = 0;
  v17.receiver = v13;
  v17.super_class = v12;
  *(_QWORD *)(a6 + 80) = objc_msgSendSuper2(&v17, "init");
  *(_QWORD *)(a6 + 88) = a3;
  sub_10001BCA8(&v18, a6 + 16);
  *(_QWORD *)(a6 + 96) = a5;
  return a6;
}

uint64_t sub_1000A0070(_QWORD *a1, void *a2, uint64_t a3, void *a4, void *a5, uint64_t a6, void *a7, char *a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  void **v20;
  uint64_t v21;
  void *v22;
  char *v23;
  id v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  id v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  char *v39;
  void *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  _QWORD *v57;
  id v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t *v61;
  id v62;
  _QWORD *v63;
  void *v64;
  void *v65;
  char *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  _QWORD *v71;
  id v72;
  id v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  BOOL v85;
  uint8_t *v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  id *v95;
  uint64_t v96;
  id v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  uint8_t *v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  void *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  NSObject *v127;
  os_log_type_t v128;
  uint8_t *v129;
  unsigned int v130;
  uint64_t v131;
  id v132;
  id v133;
  id v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  NSObject *v139;
  os_log_type_t v140;
  uint8_t *v141;
  uint64_t v142;
  _QWORD *v143;
  void *v144;
  uint64_t v145;
  id v146;
  char *v147;
  char *v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  NSObject *v157;
  os_log_type_t v158;
  uint8_t *v159;
  uint64_t v160;
  id v161;
  uint64_t v162;
  id v163;
  id v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  NSObject *v169;
  os_log_type_t v170;
  uint8_t *v171;
  uint64_t v172;
  id v173;
  char *v174;
  void *v175;
  _BYTE *v176;
  id v177;
  id v178;
  id v179;
  uint64_t v180;
  uint64_t v181;
  NSObject *v182;
  os_log_type_t v183;
  uint8_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  NSObject *v190;
  os_log_type_t v191;
  uint8_t *v192;
  char *v193;
  objc_class *v194;
  char *v195;
  char *v196;
  char *v197;
  char *v198;
  char *v199;
  id v200;
  id v201;
  void *v202;
  void *v203;
  id v204;
  id v205;
  id v206;
  uint64_t v207;
  _QWORD *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  NSObject *v214;
  os_log_type_t v215;
  BOOL v216;
  uint8_t *v217;
  id v218;
  void *v219;
  uint64_t refreshed;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  NSObject *v224;
  os_log_type_t v225;
  uint8_t *v226;
  void *v227;
  id v228;
  id v229;
  void *v230;
  id v231;
  uint64_t v232;
  _QWORD *v233;
  char **v234;
  id v235;
  _QWORD *v236;
  void *v237;
  id v238;
  uint64_t v239;
  uint64_t v240;
  id v241;
  id v242;
  id v243;
  uint64_t v244;
  id v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  NSObject *v250;
  uint64_t v251;
  void *v252;
  _QWORD *v253;
  uint64_t result;
  char *v255;
  void *v256;
  id v257;
  void *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  void *ObjCClassFromMetadata;
  id v263;
  id v264;
  id v265;
  uint64_t v266;
  _QWORD *v267;
  id v268;
  void *v269;
  void *v270;
  id v271;
  id v272;
  id v273;
  id v274;
  id v275;
  id v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t *v279;
  void *v280;
  char *v281;
  char *v282;
  unsigned int v283;
  uint64_t v284;
  void *v285;
  id v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  NSObject *v290;
  os_log_type_t v291;
  uint8_t *v292;
  uint64_t v293;
  id v294;
  uint64_t v295;
  uint64_t v296;
  NSObject *v297;
  os_log_type_t v298;
  BOOL v299;
  uint8_t *v300;
  void *v301;
  objc_class *v302;
  id v303;
  uint64_t v304;
  _QWORD *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  char *v313;
  uint64_t v314;
  uint64_t *v315;
  id v316;
  _QWORD *v317;
  uint64_t v318;
  char *v319;
  void (*v320)(char *, uint64_t);
  void (*v321)(char *, uint64_t);
  char *v322;
  void **v323;
  char *v324;
  char *v325;
  uint64_t v326;
  char *v327;
  uint64_t v328;
  _QWORD *v329;
  uint64_t v330;
  char *v331;
  char *v332;
  id v333;
  char *v334;
  objc_super v335;
  objc_super v336;
  _QWORD *v337;
  __int128 aBlock;
  uint64_t (*v339)(uint64_t);
  uint64_t v340;
  _UNKNOWN **v341;
  _QWORD *v342;
  _QWORD v343[4];
  __int16 v344;
  _QWORD v345[4];
  __int16 v346;
  _QWORD v347[2];
  __int128 v348;
  __int16 v349;

  v333 = a5;
  v330 = a3;
  v329 = a1;
  v13 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  __chkstk_darwin(v13);
  v324 = (char *)&v304 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v312 = sub_10001A630((uint64_t *)&unk_100838030);
  v311 = *(_QWORD *)(v312 - 8);
  __chkstk_darwin(v312);
  v313 = (char *)&v304 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v328 = type metadata accessor for DispatchWorkItemFlags(0);
  v321 = *(void (**)(char *, uint64_t))(v328 - 8);
  __chkstk_darwin(v328);
  v327 = (char *)&v304 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v326 = type metadata accessor for DispatchQoS(0);
  v320 = *(void (**)(char *, uint64_t))(v326 - 8);
  __chkstk_darwin(v326);
  v325 = (char *)&v304 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = &a8[OBJC_IVAR____TtC7remindd8RDDaemon_manualSortHintUpdater];
  *(_OWORD *)v18 = 0u;
  *((_OWORD *)v18 + 1) = 0u;
  v319 = v18;
  v19 = sub_10009CC40(0xD000000000000013, 0x80000001006F5410, a7, &qword_100838138, &qword_100838140);
  v323 = v20;
  v21 = type metadata accessor for RDCoreSuggestionsController();
  v22 = (void *)objc_opt_self(SGSuggestionsService);
  v23 = a8;
  v24 = objc_msgSend(v22, "serviceForReminders");
  swift_getObjectType(v24);
  v25 = sub_10033A928((uint64_t)v24, v21);
  v307 = OBJC_IVAR____TtC7remindd8RDDaemon_coreSuggestionController;
  *(_QWORD *)&v23[OBJC_IVAR____TtC7remindd8RDDaemon_coreSuggestionController] = v25;
  v340 = v21;
  v341 = &off_1007EF3A0;
  *(_QWORD *)&aBlock = v25;
  v26 = (char *)objc_allocWithZone((Class)type metadata accessor for RDXPCDaemon());
  v27 = sub_10001BA38((uint64_t)&aBlock, v21);
  __chkstk_darwin(v27);
  v29 = (uint64_t *)((char *)&v304 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v30 + 16))(v29);
  v31 = *v29;
  swift_retain_n(v25, 2);
  v32 = a2;
  v33 = a4;
  v34 = v333;
  swift_retain(a6);
  swift_retain(v19);
  v35 = a7;
  v36 = sub_1000A3FB4(v32, v33, v34, a6, (uint64_t)v19, v31, v35, v26);
  v333 = v32;

  v331 = (char *)v33;
  v322 = (char *)v34;

  v318 = a6;
  swift_release(a6);
  v317 = v19;
  swift_release(v19);
  v316 = v35;

  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&aBlock);
  swift_release(v25);
  v334 = v23;
  v37 = (uint64_t *)&v23[OBJC_IVAR____TtC7remindd8RDDaemon_xpcDaemon];
  *v37 = (uint64_t)v36;
  v37[1] = (uint64_t)&off_1007EF200;
  v38 = qword_100836F08;
  v39 = v36;
  if (v38 != -1)
    swift_once(&qword_100836F08, sub_1001BA588);
  v40 = (void *)qword_100871CC8;
  v41 = (char *)objc_allocWithZone((Class)type metadata accessor for RDClientConnectionListener());
  v42 = sub_10051F5EC(v39, v40, v41);
  v43 = OBJC_IVAR____TtC7remindd8RDDaemon_xpcClientConnectionListener;
  *(_QWORD *)&v334[OBJC_IVAR____TtC7remindd8RDDaemon_xpcClientConnectionListener] = v42;
  if (qword_100837148 != -1)
    swift_once(&qword_100837148, sub_1003080F0);
  v44 = static RDSynchronizedKeyValueStore.default;
  v306 = OBJC_IVAR____TtC7remindd8RDDaemon_synchronizedKeyValueStores;
  *(_QWORD *)&v334[OBJC_IVAR____TtC7remindd8RDDaemon_synchronizedKeyValueStores] = static RDSynchronizedKeyValueStore.default;
  v45 = qword_100836F30;
  swift_retain(v44);
  if (v45 != -1)
    swift_once(&qword_100836F30, sub_1001BA924);
  v341 = (_UNKNOWN **)sub_1000A5C34;
  v342 = (_QWORD *)v44;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v339 = sub_1000094C8;
  v340 = (uint64_t)&unk_1007E2030;
  v46 = _Block_copy(&aBlock);
  v47 = swift_retain(v44);
  v48 = v325;
  static DispatchQoS.unspecified.getter(v47);
  v347[0] = _swiftEmptyArrayStorage;
  v49 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v50 = sub_10001A630((uint64_t *)&unk_100838000);
  v51 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  v52 = v327;
  v309 = v50;
  v308 = v51;
  v53 = v328;
  dispatch thunk of SetAlgebra.init<A>(_:)(v347, v50, v51, v328, v49);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v48, v52, v46);
  _Block_release(v46);
  v54 = (void (*)(char *, uint64_t))*((_QWORD *)v321 + 1);
  v54(v52, v53);
  v55 = (void (*)(char *, uint64_t))*((_QWORD *)v320 + 1);
  v55(v48, v326);
  swift_release(v342);
  v56 = type metadata accessor for RDDisabledAccountsEventHandler();
  v57 = (_QWORD *)swift_allocObject(v56, 40, 7);
  v57[2] = 0;
  v57[3] = 0;
  v57[4] = &_swiftEmptySetSingleton;
  *(_QWORD *)&v334[OBJC_IVAR____TtC7remindd8RDDaemon_disabledAccountsEventHandler] = v57;
  v58 = v333;
  v59 = objc_msgSend(v333, "supportsAlarmEngine");
  v332 = v39;
  v314 = v43;
  v310 = v49;
  v321 = v54;
  v320 = v55;
  if (v59)
  {
    v60 = swift_allocObject(&unk_1007E20E0, 40, 7);
    *(_OWORD *)(v60 + 16) = xmmword_1006A3C50;
    *(_QWORD *)(v60 + 32) = 0x402E000000000000;
    v347[0] = sub_1000A5D04;
    v347[1] = v60;
    v348 = xmmword_1006A3C60;
    v349 = 1;
    v304 = type metadata accessor for RDStoreControllerNotificationCenter();
    swift_allocObject(v304, 64, 7);
    v61 = v37;
    v62 = v58;
    swift_retain(v60);
    v63 = sub_100393A5C(0x676E456D72616C41, 0xEB00000000656E69, v62, (uint64_t)v347);
    v305 = v63;
    v64 = (void *)*v61;
    v65 = (void *)v61[1];
    v66 = v334;
    v67 = *(_QWORD *)&v334[v307];
    swift_retain(v67);
    v68 = v329;
    v69 = (uint64_t)v63;
    v70 = v331;
    v71 = sub_1000A4AD0(v329, v64, v65, v62, v69, v331, v322, v323);
    swift_release(v67);
    *(_QWORD *)&v66[OBJC_IVAR____TtC7remindd8RDDaemon_alarmEngine] = v71;
    v345[0] = 0x404E000000000000;
    memset(&v345[1], 0, 24);
    v346 = 0;
    swift_allocObject(v304, 64, 7);
    v72 = v62;
    v37 = v61;
    v73 = v72;
    swift_retain(v71);
    v74 = sub_100393A5C(0x676E457961646F54, 0xEB00000000656E69, v73, (uint64_t)v345);
    v75 = *v37;
    v76 = v37[1];
    v77 = *(_QWORD *)&v66[v306];
    swift_retain(v77);
    v78 = v70;
    v58 = v333;
    v79 = sub_1000A2520((uint64_t)v68, v75, v76, (uint64_t)v74, v78, v77);
    swift_release(v77);
    swift_release(v305);
    swift_release(v74);
    swift_release(v71);
    swift_release(v60);
    v80 = (uint64_t)v324;
  }
  else
  {
    if (qword_100837830 != -1)
      swift_once(&qword_100837830, sub_10051E968);
    v81 = type metadata accessor for Logger(0);
    v82 = sub_10001AAA8(v81, (uint64_t)qword_10084E290);
    v83 = Logger.logObject.getter(v82);
    v84 = static os_log_type_t.default.getter(v83);
    v85 = os_log_type_enabled(v83, v84);
    v80 = (uint64_t)v324;
    if (v85)
    {
      v86 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v86 = 0;
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "Alarm and today engines are disabled because store controller does not support them", v86, 2u);
      swift_slowDealloc(v86, -1, -1);
    }

    v79 = 0;
    *(_QWORD *)&v334[OBJC_IVAR____TtC7remindd8RDDaemon_alarmEngine] = 0;
  }
  *(_QWORD *)&v334[OBJC_IVAR____TtC7remindd8RDDaemon_todayEngine] = v79;
  if (objc_msgSend(v58, "supportsTimelineEngine"))
  {
    v87 = *v37;
    v88 = (id)v329[2];
    swift_unknownObjectRetain(v87);
    v89 = sub_1000C48C4(v88, v58);

    swift_unknownObjectRelease(v87);
  }
  else
  {
    if (qword_100837830 != -1)
      swift_once(&qword_100837830, sub_10051E968);
    v90 = type metadata accessor for Logger(0);
    v91 = sub_10001AAA8(v90, (uint64_t)qword_10084E290);
    v92 = Logger.logObject.getter(v91);
    v93 = static os_log_type_t.default.getter(v92);
    if (os_log_type_enabled(v92, v93))
    {
      v94 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v94 = 0;
      _os_log_impl((void *)&_mh_execute_header, v92, v93, "Timeline engine is disabled because store controller does not support it.", v94, 2u);
      swift_slowDealloc(v94, -1, -1);
    }

    v89 = 0;
  }
  *(_QWORD *)&v334[OBJC_IVAR____TtC7remindd8RDDaemon_timelineEngine] = v89;
  v95 = (id *)&unk_100871000;
  if (objc_msgSend(v58, "supportsAssignmentNotificationEngine"))
  {
    v343[0] = 0x403E000000000000;
    memset(&v343[1], 0, 24);
    v344 = 256;
    v96 = type metadata accessor for RDStoreControllerNotificationCenter();
    swift_allocObject(v96, 64, 7);
    v97 = v58;
    v98 = sub_100393A5C(0xD000000000000015, 0x80000001006F5450, v97, (uint64_t)v343);
    v99 = *v37;
    v100 = v37[1];
    v101 = qword_100836F28;
    swift_unknownObjectRetain(*v37);
    if (v101 != -1)
      swift_once(&qword_100836F28, sub_1001BA8F8);
    v102 = sub_1000A2A10(v99, v100, v97, (uint64_t)v98, v331, (void *)qword_100871CE8, 0);
    swift_unknownObjectRelease(v99);
    swift_release(v98);
    v58 = v333;
  }
  else
  {
    if (qword_100837830 != -1)
      swift_once(&qword_100837830, sub_10051E968);
    v103 = type metadata accessor for Logger(0);
    v104 = sub_10001AAA8(v103, (uint64_t)qword_10084E290);
    v105 = Logger.logObject.getter(v104);
    v106 = static os_log_type_t.default.getter(v105);
    if (os_log_type_enabled(v105, v106))
    {
      v107 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v107 = 0;
      _os_log_impl((void *)&_mh_execute_header, v105, v106, "Assignment notification engine is disabled because store controller does not support it", v107, 2u);
      swift_slowDealloc(v107, -1, -1);
    }

    v102 = 0;
  }
  *(_QWORD *)&v334[OBJC_IVAR____TtC7remindd8RDDaemon_assignmentNotificationEngine] = v102;
  if (objc_msgSend(v58, "supportsHashtagLabelUpdater"))
  {
    if (qword_100836F28 != -1)
      swift_once(&qword_100836F28, sub_1001BA8F8);
    v108 = v80;
    v109 = (void *)qword_100871CE8;
    v111 = *v37;
    v110 = v37[1];
    v112 = qword_100836E08;
    v113 = v333;
    v114 = v109;
    swift_unknownObjectRetain(v111);
    if (v112 != -1)
      swift_once(&qword_100836E08, sub_10016F1A0);
    v115 = v312;
    v116 = sub_10001AAA8(v312, (uint64_t)qword_100871C70);
    v117 = (uint64_t)v313;
    (*(void (**)(char *, uint64_t, uint64_t))(v311 + 16))(v313, v116, v115);
    v118 = type metadata accessor for RDHashtagLabelUpdater(0);
    swift_allocObject(v118, *(unsigned int *)(v118 + 48), *(unsigned __int16 *)(v118 + 52));
    v119 = sub_1001844E8(v114, v113, v111, v110, v117, 0, 0);

    swift_unknownObjectRelease(v111);
    *(_QWORD *)&v334[OBJC_IVAR____TtC7remindd8RDDaemon_hashtagLabelUpdater] = v119;
    v341 = (_UNKNOWN **)sub_1000A5CEC;
    v342 = v119;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v339 = sub_1000094C8;
    v340 = (uint64_t)&unk_1007E20A8;
    v120 = _Block_copy(&aBlock);
    v121 = swift_retain_n(v119, 2);
    v122 = v325;
    static DispatchQoS.unspecified.getter(v121);
    v337 = _swiftEmptyArrayStorage;
    v123 = v327;
    v124 = v328;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v337, v309, v308, v328, v310);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v122, v123, v120);
    _Block_release(v120);
    swift_release(v119);
    v321(v123, v124);
    v320(v122, v326);
    swift_release(v342);
    v58 = v333;
    v80 = v108;
    v95 = (id *)&unk_100871000;
  }
  else
  {
    if (qword_100837830 != -1)
      swift_once(&qword_100837830, sub_10051E968);
    v125 = type metadata accessor for Logger(0);
    v126 = sub_10001AAA8(v125, (uint64_t)qword_10084E290);
    v127 = Logger.logObject.getter(v126);
    v128 = static os_log_type_t.default.getter(v127);
    if (os_log_type_enabled(v127, v128))
    {
      v129 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v129 = 0;
      _os_log_impl((void *)&_mh_execute_header, v127, v128, "RDHashtagLabelUpdater is disabled because store controller does not support it", v129, 2u);
      swift_slowDealloc(v129, -1, -1);
    }

    *(_QWORD *)&v334[OBJC_IVAR____TtC7remindd8RDDaemon_hashtagLabelUpdater] = 0;
  }
  v130 = objc_msgSend(v58, "supportsStalePinnedListsEventHandler");
  v315 = v37;
  if (v130)
  {
    v131 = qword_100836F28;
    v132 = v58;
    if (v131 != -1)
      swift_once(&qword_100836F28, sub_1001BA8F8);
    v133 = v95[413];
    static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(1);
    v134 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v135 = type metadata accessor for RDStalePinnedListsEventHandler(0);
    swift_allocObject(v135, *(unsigned int *)(v135 + 48), *(unsigned __int16 *)(v135 + 52));
    v136 = sub_100322CC0((uint64_t)v132, (uint64_t)v133, v80, (uint64_t)v134);
    *(_QWORD *)&v334[OBJC_IVAR____TtC7remindd8RDDaemon_stalePinnedListsEventHandler] = v136;
    swift_retain(v136);
    sub_100322D8C();
    swift_release(v136);
  }
  else
  {
    if (qword_100837830 != -1)
      swift_once(&qword_100837830, sub_10051E968);
    v137 = type metadata accessor for Logger(0);
    v138 = sub_10001AAA8(v137, (uint64_t)qword_10084E290);
    v139 = Logger.logObject.getter(v138);
    v140 = static os_log_type_t.default.getter(v139);
    if (os_log_type_enabled(v139, v140))
    {
      v141 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v141 = 0;
      _os_log_impl((void *)&_mh_execute_header, v139, v140, "RDStalePinnedListsEventHandler is disabled because store controller does not support it", v141, 2u);
      swift_slowDealloc(v141, -1, -1);
    }

    *(_QWORD *)&v334[OBJC_IVAR____TtC7remindd8RDDaemon_stalePinnedListsEventHandler] = 0;
  }
  if (objc_msgSend(v58, "supportsTemplateOperation"))
  {
    v142 = type metadata accessor for RDPublicCloudDatabaseController();
    swift_allocObject(v142, 48, 7);
    v143 = sub_1004E27C4((uint64_t)sub_10051EA28, 0);
    v144 = v58;
    v145 = qword_100836F28;
    v146 = v144;
    v147 = v332;
    if (v145 != -1)
      swift_once(&qword_100836F28, sub_1001BA8F8);
    v148 = v334;
    v149 = (void *)qword_100871CE8;
    v150 = *(_QWORD *)(*(_QWORD *)&v334[v314]
                     + OBJC_IVAR____TtC7remindd26RDClientConnectionListener_clientConnectionDidClosePublisher);
    v151 = type metadata accessor for RDTemplateOperationQueue();
    v152 = swift_allocObject(v151, 184, 7);
    v153 = v149;
    swift_retain(v143);
    swift_retain(v150);
    v154 = sub_10009FEE4((uint64_t)v146, (uint64_t)v147, (uint64_t)v153, (uint64_t)v143, v150, v152);
    *(_QWORD *)&v148[OBJC_IVAR____TtC7remindd8RDDaemon_templateOperationQueue] = v154;
    swift_retain(v154);
    sub_1004D96E4(5.0);
    swift_release(v154);
    swift_release(v143);
    v80 = (uint64_t)v324;
    v58 = v333;
  }
  else
  {
    if (qword_100837830 != -1)
      swift_once(&qword_100837830, sub_10051E968);
    v155 = type metadata accessor for Logger(0);
    v156 = sub_10001AAA8(v155, (uint64_t)qword_10084E290);
    v157 = Logger.logObject.getter(v156);
    v158 = static os_log_type_t.default.getter(v157);
    if (os_log_type_enabled(v157, v158))
    {
      v159 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v159 = 0;
      _os_log_impl((void *)&_mh_execute_header, v157, v158, "RDTemplateOperationQueue is disabled because store controller does not support it", v159, 2u);
      swift_slowDealloc(v159, -1, -1);
    }

    *(_QWORD *)&v334[OBJC_IVAR____TtC7remindd8RDDaemon_templateOperationQueue] = 0;
  }
  if (objc_msgSend(v58, "supportsTemplateOperation"))
  {
    v160 = qword_100836F28;
    v161 = v58;
    v162 = v330;
    if (v160 != -1)
      swift_once(&qword_100836F28, sub_1001BA8F8);
    v163 = (id)qword_100871CE8;
    static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(1);
    v164 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v165 = type metadata accessor for RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler(0);
    swift_allocObject(v165, *(unsigned int *)(v165 + 48), *(unsigned __int16 *)(v165 + 52));
    v166 = sub_100328124((uint64_t)v161, (uint64_t)v163, v80, (uint64_t)v164);
    *(_QWORD *)&v334[OBJC_IVAR____TtC7remindd8RDDaemon_staleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler] = v166;
    swift_retain(v166);
    sub_1003281F0();
    swift_release(v166);
  }
  else
  {
    v162 = v330;
    if (qword_100837830 != -1)
      swift_once(&qword_100837830, sub_10051E968);
    v167 = type metadata accessor for Logger(0);
    v168 = sub_10001AAA8(v167, (uint64_t)qword_10084E290);
    v169 = Logger.logObject.getter(v168);
    v170 = static os_log_type_t.default.getter(v169);
    if (os_log_type_enabled(v169, v170))
    {
      v171 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v171 = 0;
      _os_log_impl((void *)&_mh_execute_header, v169, v170, "RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler is disabled because store controller does not support it", v171, 2u);
      swift_slowDealloc(v171, -1, -1);
    }

    *(_QWORD *)&v334[OBJC_IVAR____TtC7remindd8RDDaemon_staleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler] = 0;
  }
  if (objc_msgSend(v58, "supportsGroceryOperation"))
  {
    v172 = qword_100836F28;
    v173 = v58;
    v174 = v332;
    if (v172 != -1)
      swift_once(&qword_100836F28, sub_1001BA8F8);
    v175 = (void *)qword_100871CE8;
    v176 = objc_allocWithZone((Class)type metadata accessor for RDGroceryOperationQueue());
    v177 = v175;
    v178 = sub_1000A55F4(v173, v174, v177, v176);

    *(_QWORD *)&v334[OBJC_IVAR____TtC7remindd8RDDaemon_groceryOperationQueue] = v178;
    v179 = v178;
    sub_100540AD0(5.0);

    v58 = v333;
  }
  else
  {
    if (qword_100837830 != -1)
      swift_once(&qword_100837830, sub_10051E968);
    v180 = type metadata accessor for Logger(0);
    v181 = sub_10001AAA8(v180, (uint64_t)qword_10084E290);
    v182 = Logger.logObject.getter(v181);
    v183 = static os_log_type_t.default.getter(v182);
    if (os_log_type_enabled(v182, v183))
    {
      v184 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v184 = 0;
      _os_log_impl((void *)&_mh_execute_header, v182, v183, "RDGroceryOperationQueue is disabled because store controller does not support it", v184, 2u);
      swift_slowDealloc(v184, -1, -1);
    }

    *(_QWORD *)&v334[OBJC_IVAR____TtC7remindd8RDDaemon_groceryOperationQueue] = 0;
  }
  if (objc_msgSend(v58, "supportsApplicationShortcuts"))
  {
    type metadata accessor for RDApplicationShortcutAssembly();
    v185 = *v315;
    v186 = v315[1];
    v187 = swift_unknownObjectRetain(*v315);
    sub_1000D2A4C(v187, v186, v162, &aBlock);
    swift_unknownObjectRelease(v185);
    sub_1000A5CA8((uint64_t)&aBlock, (uint64_t)&v334[OBJC_IVAR____TtC7remindd8RDDaemon_applicationShortcutEngine], (uint64_t *)&unk_100838060);
  }
  else
  {
    if (qword_100837830 != -1)
      swift_once(&qword_100837830, sub_10051E968);
    v188 = type metadata accessor for Logger(0);
    v189 = sub_10001AAA8(v188, (uint64_t)qword_10084E290);
    v190 = Logger.logObject.getter(v189);
    v191 = static os_log_type_t.default.getter(v190);
    if (os_log_type_enabled(v190, v191))
    {
      v192 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v192 = 0;
      _os_log_impl((void *)&_mh_execute_header, v190, v191, "Application shortcut engine is disabled because store controller does not support application shortcuts", v192, 2u);
      swift_slowDealloc(v192, -1, -1);
    }

    v193 = &v334[OBJC_IVAR____TtC7remindd8RDDaemon_applicationShortcutEngine];
    *((_QWORD *)v193 + 4) = 0;
    *(_OWORD *)v193 = 0u;
    *((_OWORD *)v193 + 1) = 0u;
  }
  if (objc_msgSend(v58, "supportsSuggestedAttributes"))
  {
    v194 = (objc_class *)type metadata accessor for RDDaemonController();
    v195 = (char *)objc_allocWithZone(v194);
    v196 = &v195[OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon];
    v197 = v332;
    *(_QWORD *)v196 = v332;
    *((_QWORD *)v196 + 1) = &off_1007EF200;
    v198 = &v195[OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity];
    *(_QWORD *)v198 = 0xD00000000000001ELL;
    *((_QWORD *)v198 + 1) = 0x80000001006F5430;
    *(_QWORD *)(v198 + 38) = 0;
    *((_QWORD *)v198 + 3) = 0;
    *((_QWORD *)v198 + 4) = 0;
    *((_QWORD *)v198 + 2) = 0;
    *(_QWORD *)&v195[OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken] = 0;
    v335.receiver = v195;
    v335.super_class = v194;
    v199 = v197;
    v200 = objc_msgSendSuper2(&v335, "init");
    v201 = objc_msgSend(objc_allocWithZone((Class)REMStore), "initWithDaemonController:", v200);
    v202 = (void *)qword_100871CF0;
    v203 = (void *)objc_opt_self(REMUserDefaults);
    v204 = v202;
    swift_retain(v162);
    v205 = objc_msgSend(v203, "daemonUserDefaults");
    v206 = objc_msgSend((id)objc_opt_self(ICCloudConfiguration), "sharedConfiguration");

    v340 = sub_1000151B0(0, &qword_100838058, off_1007D6260);
    v341 = &off_1007FB718;
    *(_QWORD *)&aBlock = v206;
    v207 = type metadata accessor for RDSuggestedAttributesAutoTrainer(0);
    v208 = (_QWORD *)swift_allocObject(v207, *(unsigned int *)(v207 + 48), *(unsigned __int16 *)(v207 + 52));
    v209 = (char *)v208 + OBJC_IVAR____TtC7remindd32RDSuggestedAttributesAutoTrainer_storeControllerObserverToken;
    v210 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v210 - 8) + 56))(v209, 1, 1, v210);
    *(_QWORD *)((char *)v208 + OBJC_IVAR____TtC7remindd32RDSuggestedAttributesAutoTrainer_xpcActivity) = 0;
    v208[2] = v204;
    v208[3] = v162;
    v208[4] = v201;
    v208[5] = v205;
    v208[6] = &off_1007FB6E0;
    sub_10001BCA8(&aBlock, (uint64_t)(v208 + 7));
    *((_BYTE *)v208 + OBJC_IVAR____TtC7remindd32RDSuggestedAttributesAutoTrainer_started) = 0;
    v211 = (uint64_t)v319;
  }
  else
  {
    if (qword_100837830 != -1)
      swift_once(&qword_100837830, sub_10051E968);
    v212 = type metadata accessor for Logger(0);
    v213 = sub_10001AAA8(v212, (uint64_t)qword_10084E290);
    v214 = Logger.logObject.getter(v213);
    v215 = static os_log_type_t.default.getter(v214);
    v216 = os_log_type_enabled(v214, v215);
    v211 = (uint64_t)v319;
    if (v216)
    {
      v217 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v217 = 0;
      _os_log_impl((void *)&_mh_execute_header, v214, v215, "Suggested attributes disabled because not supported by store controller", v217, 2u);
      swift_slowDealloc(v217, -1, -1);
    }

    v208 = 0;
  }
  *(_QWORD *)&v334[OBJC_IVAR____TtC7remindd8RDDaemon_suggestedAttributesAutoTrainer] = v208;
  v218 = v333;
  if (objc_msgSend(v333, "supportsWidgetRefresh"))
  {
    if (qword_100836F28 != -1)
      swift_once(&qword_100836F28, sub_1001BA8F8);
    v219 = (void *)qword_100871CE8;
    refreshed = type metadata accessor for RDWidgetRefreshEngine(0);
    swift_allocObject(refreshed, *(unsigned int *)(refreshed + 48), *(unsigned __int16 *)(refreshed + 52));
    swift_retain(v162);
    v221 = sub_100325700(v219, v162);
  }
  else
  {
    if (qword_100837830 != -1)
      swift_once(&qword_100837830, sub_10051E968);
    v222 = type metadata accessor for Logger(0);
    v223 = sub_10001AAA8(v222, (uint64_t)qword_10084E290);
    v224 = Logger.logObject.getter(v223);
    v225 = static os_log_type_t.default.getter(v224);
    if (os_log_type_enabled(v224, v225))
    {
      v226 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v226 = 0;
      _os_log_impl((void *)&_mh_execute_header, v224, v225, "Widget refresh disabled because not supported by store controller", v226, 2u);
      swift_slowDealloc(v226, -1, -1);
    }

    v221 = 0;
  }
  *(_QWORD *)&v334[OBJC_IVAR____TtC7remindd8RDDaemon_widgetRefresh] = v221;
  v227 = (void *)qword_100871CF0;
  v228 = v218;
  swift_retain(v162);
  v229 = v227;
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(2);
  v230 = (void *)objc_opt_self(NSNotificationCenter);
  v231 = objc_msgSend(v230, "defaultCenter");
  v232 = type metadata accessor for RDManualSortHintUpdater(0);
  swift_allocObject(v232, *(unsigned int *)(v232 + 48), *(unsigned __int16 *)(v232 + 52));
  v233 = sub_100457C34(v228, v162, v229, v80, v231);
  v340 = v232;
  *(_QWORD *)&aBlock = v233;
  swift_beginAccess(v211, &v337, 33, 0);
  sub_1000A5C3C((uint64_t)&aBlock, v211);
  swift_endAccess(&v337);
  v234 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
  v235 = objc_msgSend(v228, "cloudContext");
  v236 = &unk_100871000;
  if (!v235)
    goto LABEL_107;
  v237 = v235;
  if (!objc_msgSend(v228, "supportsCloudSchemaCatchUpSyncBackgroundScheduling"))
  {

LABEL_107:
    v255 = &v334[OBJC_IVAR____TtC7remindd8RDDaemon_cloudSchemaCatchUpSyncController];
    *((_QWORD *)v255 + 4) = 0;
    *(_OWORD *)v255 = 0u;
    *((_OWORD *)v255 + 1) = 0u;
    goto LABEL_108;
  }
  v238 = objc_msgSend(v237, "processingQueue");
  v239 = type metadata accessor for RDICCloudSchemaCatchUpSyncXPCActivityFactory();
  v240 = swift_allocObject(v239, 24, 7);
  *(_QWORD *)(v240 + 16) = v228;
  v241 = v228;
  v242 = objc_msgSend(v237, "icUserDefaults");
  v243 = objc_msgSend(v242, "cloudSchemaCatchUpSyncSchedulingStateStorage");

  v244 = qword_1008374C0;
  v245 = v237;
  if (v244 != -1)
    swift_once(&qword_1008374C0, sub_10042233C);
  v246 = qword_10084A2E8;
  v247 = sub_10001A630(&qword_100838050);
  v248 = (_QWORD *)swift_allocObject(v247, 72, 7);
  v248[3] = 0;
  v248[7] = 0;
  v249 = swift_unknownObjectWeakInit(v248 + 6, 0);
  v248[2] = v238;
  v248[4] = v240;
  v248[5] = v243;
  v248[7] = &off_1007F7C28;
  swift_unknownObjectWeakAssign(v249, v245);

  v248[8] = v246;
  objc_msgSend(v245, "setCloudSchemaCatchUpSyncController:", v248);
  v250 = v248[2];
  v251 = swift_allocObject(&unk_1007E2068, 32, 7);
  *(_QWORD *)(v251 + 16) = sub_1000A5C84;
  *(_QWORD *)(v251 + 24) = v248;
  v341 = (_UNKNOWN **)sub_1000A66B8;
  v342 = (_QWORD *)v251;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v339 = sub_1000098C4;
  v340 = (uint64_t)&unk_1007E2080;
  v252 = _Block_copy(&aBlock);
  v253 = v342;
  swift_retain(v248);
  swift_retain(v251);
  swift_release(v253);
  dispatch_sync(v250, v252);
  _Block_release(v252);
  LOBYTE(v250) = swift_isEscapingClosureAtFileLocation(v251, "", 117, 58, 25, 1);
  swift_release(v248);
  result = swift_release(v251);
  if ((v250 & 1) != 0)
  {
    __break(1u);
    return result;
  }
  v340 = v247;
  v341 = &off_1007F3DF8;

  *(_QWORD *)&aBlock = v248;
  sub_1000A5CA8((uint64_t)&aBlock, (uint64_t)&v334[OBJC_IVAR____TtC7remindd8RDDaemon_cloudSchemaCatchUpSyncController], &qword_100838048);
  v236 = (_QWORD *)&unk_100871000;
  v234 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
LABEL_108:
  v256 = (void *)objc_opt_self(ICCloudConfiguration);
  v257 = objc_msgSend(v256, "sharedConfiguration");
  if (qword_100836F28 != -1)
    swift_once(&qword_100836F28, sub_1001BA8F8);
  v258 = (void *)v236[413];
  v259 = type metadata accessor for RDICCloudConfigurationUpdaterXPCActivityFactory();
  v260 = swift_allocObject(v259, 16, 7);
  v261 = sub_1000151B0(0, (unint64_t *)&qword_100838020, REMDaemonUserDefaults_ptr);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v261);
  v263 = v258;
  v264 = v257;
  v265 = objc_msgSend(ObjCClassFromMetadata, "daemonUserDefaults");
  v266 = sub_10001A630(&qword_100838040);
  v267 = (_QWORD *)swift_allocObject(v266, 64, 7);
  v333 = v264;
  v267[2] = v264;
  v267[3] = v263;
  v267[4] = v265;
  v267[5] = &off_1007F77E8;
  v267[6] = 0;
  v267[7] = v260;
  v340 = v266;
  v341 = &off_1007F7908;
  *(_QWORD *)&aBlock = v267;
  sub_1000A5CA8((uint64_t)&aBlock, (uint64_t)&v334[OBJC_IVAR____TtC7remindd8RDDaemon_cloudConfigurationUpdater], &qword_100838048);
  v268 = objc_msgSend(v228, v234[8]);
  if (v268)
  {
    v269 = v268;
    v270 = (void *)qword_100871CF0;
    v271 = v228;
    v272 = v270;
    v273 = v269;
    v274 = objc_msgSend(v230, "defaultCenter");
    v275 = objc_msgSend(v256, "sharedConfiguration");
    v276 = objc_msgSend(ObjCClassFromMetadata, "daemonUserDefaults");
    v277 = type metadata accessor for RDICCloudExtraneousAlarmsCollector();
    v278 = (uint64_t *)swift_allocObject(v277, 312, 7);
    v279 = sub_1000A574C((uint64_t)v271, (uint64_t)v272, (uint64_t)v269, (uint64_t)&off_1007F7C38, (uint64_t)v274, (uint64_t)v275, (uint64_t)v276, 0, 0, v278);

  }
  else
  {
    v279 = 0;
  }
  v280 = v316;
  v281 = v332;
  v282 = v334;
  *(_QWORD *)&v334[OBJC_IVAR____TtC7remindd8RDDaemon_extraneousAlarmsCollector] = v279;
  sub_1001AF430((void *)qword_100871CF0, (void *)qword_100871CE8, v228, (uint64_t *)&aBlock);
  sub_1000A5CA8((uint64_t)&aBlock, (uint64_t)&v282[OBJC_IVAR____TtC7remindd8RDDaemon_housekeepingActivityScheduler], &qword_100838048);
  v283 = objc_msgSend(v228, "supportsSyncActivityNotificationEngine");
  v284 = v330;
  if (v283)
  {
    v285 = (void *)qword_100871CE8;
    v286 = objc_msgSend(ObjCClassFromMetadata, "daemonUserDefaults");
    LOBYTE(aBlock) = 1;
    *((_QWORD *)&aBlock + 1) = 5;
    LOBYTE(v339) = 1;
    v340 = 30;
    LOBYTE(v341) = 0;
    v287 = sub_1000A2D38(v285, v228, v331, v286, (uint64_t)&aBlock);

  }
  else
  {
    if (qword_100837830 != -1)
      swift_once(&qword_100837830, sub_10051E968);
    v288 = type metadata accessor for Logger(0);
    v289 = sub_10001AAA8(v288, (uint64_t)qword_10084E290);
    v290 = Logger.logObject.getter(v289);
    v291 = static os_log_type_t.default.getter(v290);
    if (os_log_type_enabled(v290, v291))
    {
      v292 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v292 = 0;
      _os_log_impl((void *)&_mh_execute_header, v290, v291, "RDSyncActivityNotificationEngine is disabled because sharedListNotifications feature flag is off", v292, 2u);
      swift_slowDealloc(v292, -1, -1);
    }

    v287 = 0;
  }
  *(_QWORD *)&v334[OBJC_IVAR____TtC7remindd8RDDaemon_syncActivityNotificationEngine] = v287;
  if (objc_msgSend(v228, "supportsSharedInlineTagAutoConvertEngine"))
  {
    v293 = sub_1002A80F0(v228, (void *)qword_100871CE8);
    v294 = v333;
  }
  else
  {
    if (qword_100837830 != -1)
      swift_once(&qword_100837830, sub_10051E968);
    v295 = type metadata accessor for Logger(0);
    v296 = sub_10001AAA8(v295, (uint64_t)qword_10084E290);
    v297 = Logger.logObject.getter(v296);
    v298 = static os_log_type_t.default.getter(v297);
    v299 = os_log_type_enabled(v297, v298);
    v294 = v333;
    if (v299)
    {
      v300 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v300 = 0;
      _os_log_impl((void *)&_mh_execute_header, v297, v298, "RDSharedInlineTagAutoConvertEngineAssembly is disabled because supportsSharedInlineTagAutoConvertEngine feature flag is off", v300, 2u);
      swift_slowDealloc(v300, -1, -1);
    }

    v293 = 0;
  }
  v301 = v334;
  *(_QWORD *)&v334[OBJC_IVAR____TtC7remindd8RDDaemon_sharedInlineTagAutoConvertEngine] = v293;

  v302 = (objc_class *)type metadata accessor for RDDaemon();
  v336.receiver = v301;
  v336.super_class = v302;
  v303 = objc_msgSendSuper2(&v336, "init");
  swift_unknownObjectWeakAssign(&v281[OBJC_IVAR____TtC7remindd11RDXPCDaemon_daemon], v303);
  swift_release(v323);
  swift_release(v317);

  swift_release(v329);
  swift_release(v284);

  swift_release(v318);
  return (uint64_t)v303;
}

_QWORD *sub_1000A2520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  _QWORD *v37;
  id v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  void *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  id v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD aBlock[3];
  ValueMetadata *v68;
  void (*v69)();
  _QWORD *v70;

  v57 = a2;
  v58 = a5;
  v60 = a3;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v64 = *(_QWORD *)(v9 - 8);
  v65 = v9;
  __chkstk_darwin(v9);
  v61 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v62 = *(_QWORD *)(v11 - 8);
  v63 = v11;
  __chkstk_darwin(v11);
  v59 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = qword_100836F60;
  v14 = a6;
  swift_retain(a6);
  if (v13 != -1)
    swift_once(&qword_100836F60, sub_1001CC458);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10001AAA8(v15, (uint64_t)qword_10083F6F0);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Starting RDTodayNotificationAssembly", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  v20 = *(void **)(a1 + 16);
  v21 = type metadata accessor for RDXPCActivityTimeEventStream(0);
  v22 = (_QWORD *)swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  v23 = (char *)v22 + OBJC_IVAR____TtC7remindd28RDXPCActivityTimeEventStream_xpcEventStreamToken;
  v24 = type metadata accessor for RDXPCEventStream.Token(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v25 = (_QWORD *)((char *)v22 + OBJC_IVAR____TtC7remindd28RDXPCActivityTimeEventStream_eventHandler);
  *v25 = 0;
  v25[1] = 0;
  v22[2] = v20;
  v22[3] = 0xD000000000000024;
  v22[4] = 0x80000001006F5470;
  v22[5] = a1;
  v26 = type metadata accessor for RDNotifydEventStream();
  swift_allocObject(v26, 40, 7);
  v27 = v20;
  swift_retain(a1);
  v28 = sub_1001FF2D4(v27, 0);
  v29 = *(void **)(a4 + 16);
  v68 = &type metadata for RDDynamicSignificantTimeNotificationEngine.XPCEventSetter;
  v69 = (void (*)())&off_1007F49B0;
  v30 = type metadata accessor for RDDynamicSignificantTimeNotificationEngine();
  v31 = swift_allocObject(v30, 73, 7);
  v32 = sub_10001BA38((uint64_t)aBlock, (uint64_t)&type metadata for RDDynamicSignificantTimeNotificationEngine.XPCEventSetter);
  __chkstk_darwin(v32);
  (*(void (**)(void))(v33 + 16))();
  *(_QWORD *)(v31 + 56) = &type metadata for RDDynamicSignificantTimeNotificationEngine.XPCEventSetter;
  *(_QWORD *)(v31 + 64) = &off_1007F49B0;
  *(_BYTE *)(v31 + 72) = 2;
  *(_QWORD *)(v31 + 16) = v27;
  *(_QWORD *)(v31 + 24) = v29;
  v34 = v27;
  v35 = v29;
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(aBlock);
  v36 = type metadata accessor for RDTodayNotificationEngine(0);
  v37 = (_QWORD *)swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  swift_retain(v14);
  v38 = v34;
  v55 = v38;
  swift_retain(v22);
  v39 = v28;
  v56 = v28;
  swift_retain(v28);
  swift_retain(a4);
  v40 = (char *)v58;
  v41 = v57;
  swift_unknownObjectRetain(v57);
  swift_retain(v31);
  v42 = sub_1000A3AD8((uint64_t)v38, (uint64_t)v22, v39, a4, (uint64_t)v40, v14, v41, v60, v31, v37);
  v43 = &v40[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_todayNotificationDelegate];
  *((_QWORD *)v43 + 1) = &off_1007FBF40;
  swift_unknownObjectWeakAssign(v43, v42);
  v69 = sub_1000A5D10;
  v70 = v42;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  v68 = (ValueMetadata *)&unk_1007E20F8;
  v44 = _Block_copy(aBlock);
  v45 = swift_retain(v42);
  v46 = v59;
  static DispatchQoS.unspecified.getter(v45);
  v66 = _swiftEmptyArrayStorage;
  v47 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v48 = sub_10001A630((uint64_t *)&unk_100838000);
  v49 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  v50 = v61;
  v51 = v48;
  v52 = v65;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v66, v51, v49, v65, v47);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v50, v44);
  _Block_release(v44);
  swift_release(v22);
  swift_release(v56);
  swift_release(v31);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v50, v52);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v46, v63);
  v53 = v70;
  swift_release(v14);
  swift_release(v53);
  return v42;
}

uint64_t sub_1000A2A10(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6, int a7)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  char *v25;
  id v26;
  uint64_t v27;
  char *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  id v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD aBlock[5];
  uint64_t v44;

  v37 = a7;
  v36 = a3;
  v38 = a2;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v41 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v39 = *(_QWORD *)(v14 - 8);
  v40 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100836D80 != -1)
    swift_once(&qword_100836D80, sub_1001464D8);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_10001AAA8(v17, (uint64_t)qword_10083C4D0);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Starting RDAssignmentNotificationEngineAssembly", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

  v22 = type metadata accessor for RDAssignmentNotificationEngine(0);
  v23 = swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v24 = a6;
  swift_retain(a4);
  v25 = a5;
  swift_unknownObjectRetain(a1);
  v26 = v36;
  v27 = sub_1000A3558(v24, a4, v25, a1, v38, v26, v37 & 1, v23);
  v28 = &v25[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_assignmentNotificationDelegate];
  *((_QWORD *)v28 + 1) = &off_1007E31D0;
  swift_unknownObjectWeakAssign(v28, v27);
  aBlock[4] = sub_1000A5E68;
  v44 = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007E2238;
  v29 = _Block_copy(aBlock);
  v30 = swift_retain(v27);
  static DispatchQoS.unspecified.getter(v30);
  v42 = _swiftEmptyArrayStorage;
  v31 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v32 = sub_10001A630((uint64_t *)&unk_100838000);
  v33 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v42, v32, v33, v11, v31);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v13, v29);
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v16, v40);
  swift_release(v44);
  return v27;
}

uint64_t sub_1000A2D38(void *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  id v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v36[4];
  int v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD aBlock[5];
  uint64_t v46;
  char v47[8];
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;

  v40 = a3;
  v41 = a4;
  v38 = a1;
  v39 = a2;
  v5 = *(_QWORD *)(a5 + 8);
  v6 = *(_QWORD *)(a5 + 24);
  v7 = *(_BYTE *)(a5 + 32);
  v8 = *(_BYTE *)a5 & 1;
  v9 = *(_BYTE *)(a5 + 16) & 1;
  v37 = v7 & 1;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v43 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v42 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v15 = &v36[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((v7 & 1) == 0)
  {
    v16 = sub_1000151B0(0, (unint64_t *)&qword_100838020, REMDaemonUserDefaults_ptr);
    v17 = objc_msgSend((id)swift_getObjCClassFromMetadata(v16), "daemonUserDefaults");
    v18 = objc_msgSend(v17, "sharedListActivityNotifications_demoMode");

    if ((v18 & 1) != 0)
    {
      if (qword_100837378 != -1)
        swift_once(&qword_100837378, sub_1003A26D0);
      v19 = type metadata accessor for Logger(0);
      v20 = sub_10001AAA8(v19, (uint64_t)qword_100847D58);
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.default.getter(v21);
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "📔 RDSyncActivityEngine: Starting in demo mode", v23, 2u);
        swift_slowDealloc(v23, -1, -1);
      }

      v8 = 1;
      v6 = 10;
      v5 = 5;
      v9 = 1;
    }
  }
  v47[0] = v8;
  v48 = v5;
  v49 = v9;
  v50 = v6;
  v51 = v37;
  v24 = type metadata accessor for RDSharedListActivityNotificationsEngine(0);
  v25 = swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v26 = v38;
  v27 = v39;
  v28 = v40;
  v29 = sub_1000A30BC((uint64_t)v26, (uint64_t)v27, (uint64_t)v28, (uint64_t)v41, (uint64_t)v47, v25);
  aBlock[4] = sub_1000A5F7C;
  v46 = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007E2328;
  v30 = _Block_copy(aBlock);
  v31 = swift_retain(v29);
  static DispatchQoS.unspecified.getter(v31);
  v44 = _swiftEmptyArrayStorage;
  v32 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v33 = sub_10001A630((uint64_t *)&unk_100838000);
  v34 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v44, v33, v34, v10, v32);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v30);
  _Block_release(v30);
  (*(void (**)(_BYTE *, uint64_t))(v43 + 8))(v12, v10);
  (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v42);
  swift_release(v46);
  return v29;
}

uint64_t sub_1000A30BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _OWORD *v43;
  __int128 v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;

  v55 = a4;
  v56 = a5;
  v53 = a2;
  v54 = a3;
  v52 = a1;
  v51 = type metadata accessor for UnfairLock.Options(0);
  __chkstk_darwin(v51);
  v50 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630(&qword_1008380E8);
  v48 = *(_QWORD *)(v8 - 8);
  v49 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A630(&qword_1008380F0);
  v46 = *(_QWORD *)(v11 - 8);
  v47 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A630(&qword_1008380F8);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A630(&qword_100838100);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a6 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine___debug_fetchedJournalEntries;
  v57 = _swiftEmptyArrayStorage;
  v23 = sub_10001A630(&qword_100838108);
  Published.init(initialValue:)(&v57, v23);
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v22, v21, v18);
  v24 = a6 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine___debug_processedJournalEntries;
  v57 = &_swiftEmptyDictionarySingleton;
  v25 = sub_10001A630((uint64_t *)&unk_100838110);
  Published.init(initialValue:)(&v57, v25);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v24, v17, v14);
  v26 = a6 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine___debug_staleObjectIDs;
  v57 = _swiftEmptyArrayStorage;
  v27 = sub_10001A630((uint64_t *)&unk_100846CB0);
  Published.init(initialValue:)(&v57, v27);
  (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v26, v13, v47);
  *(_QWORD *)(a6 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_cancellables) = &_swiftEmptySetSingleton;
  v28 = a6 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine__started;
  LOBYTE(v57) = 0;
  Published.init(initialValue:)(&v57, &type metadata for Bool);
  (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v28, v10, v49);
  v49 = OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_journalUpdatesSubscriptionTransactionRegistrar;
  v29 = type metadata accessor for RDTransactionRegistrar();
  v30 = (_QWORD *)swift_allocObject(v29, 56, 7);
  v30[4] = 0;
  v30[5] = 0;
  v30[2] = 0xD000000000000041;
  v30[3] = 0x80000001006F5760;
  v57 = _swiftEmptyArrayStorage;
  v31 = sub_10009FC50((unint64_t *)&qword_100838120, (uint64_t (*)(uint64_t))&type metadata accessor for UnfairLock.Options, (uint64_t)&protocol conformance descriptor for UnfairLock.Options);
  v32 = sub_10001A630((uint64_t *)&unk_10083DBB0);
  v33 = sub_1000A5F84((unint64_t *)&qword_100838130, (uint64_t *)&unk_10083DBB0, (uint64_t)&protocol conformance descriptor for [A]);
  v35 = v50;
  v34 = v51;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v57, v32, v33, v51, v31);
  v36 = type metadata accessor for UnfairLock(0);
  swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  v30[6] = UnfairLock.init(options:)(v35);
  *(_QWORD *)(a6 + v49) = v30;
  v37 = OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_accountSignInOrOutSubscriptionTransactionRegistrar;
  v38 = (_QWORD *)swift_allocObject(v29, 56, 7);
  v38[4] = 0;
  v38[5] = 0;
  v38[2] = 0xD000000000000045;
  v38[3] = 0x80000001006F57B0;
  v57 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v57, v32, v33, v34, v31);
  swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  v38[6] = UnfairLock.init(options:)(v35);
  *(_QWORD *)(a6 + v37) = v38;
  *(_QWORD *)(a6 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_scheduler) = v52;
  v39 = v54;
  *(_QWORD *)(a6 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_storeController) = v53;
  v40 = (_QWORD *)(a6 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_userNotificationCenter);
  *v40 = v39;
  v40[1] = &off_1007F5570;
  v41 = (_QWORD *)(a6 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_userDefaults);
  *v41 = v55;
  v41[1] = &off_1007EBF20;
  v42 = a6 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_appliedEngineConfiguration;
  v43 = (_OWORD *)v56;
  *(_BYTE *)(v42 + 32) = *(_BYTE *)(v56 + 32);
  v44 = v43[1];
  *(_OWORD *)v42 = *v43;
  *(_OWORD *)(v42 + 16) = v44;
  return a6;
}

uint64_t sub_1000A3558(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, int a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  objc_class *v26;
  char *v27;
  char *v28;
  char *v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v54;
  void *v55;
  id v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[3];
  objc_super v69;

  LODWORD(v56) = a7;
  v55 = a6;
  v14 = sub_10001A630(&qword_10083A970);
  __chkstk_darwin(v14);
  v63 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_10001A630((uint64_t *)&unk_100838070);
  v62 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A630((uint64_t *)&unk_10083A960);
  v19 = *(_QWORD *)(v18 - 8);
  v64 = v18;
  v65 = v19;
  __chkstk_darwin(v18);
  v54 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A630((uint64_t *)&unk_100838080);
  v22 = *(_QWORD *)(v21 - 8);
  v66 = v21;
  v67 = v22;
  __chkstk_darwin(v21);
  v60 = (char *)&v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(a8 + 16) = 0xD000000000000017;
  *(_QWORD *)(a8 + 24) = 0x80000001006F5560;
  *(_QWORD *)(a8 + 32) = 0xD00000000000001FLL;
  *(_QWORD *)(a8 + 40) = 0x80000001006F5580;
  *(_QWORD *)(a8 + 48) = 0xD00000000000003CLL;
  *(_QWORD *)(a8 + 56) = 0x80000001006F55A0;
  *(_QWORD *)(a8 + 64) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RDAssignmentNotificationEngine.BabysitTarget()), "init");
  v24 = a8 + OBJC_IVAR____TtC7remindd30RDAssignmentNotificationEngine_storeControllerObservationToken;
  v25 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  *(_BYTE *)(a8 + OBJC_IVAR____TtC7remindd30RDAssignmentNotificationEngine_started) = 0;
  *(_QWORD *)(a8
            + OBJC_IVAR____TtC7remindd30RDAssignmentNotificationEngine_currentUserShareParticipantIDsOverrideByListID) = 0;
  *(_QWORD *)(a8 + 72) = a1;
  *(_QWORD *)(a8 + 80) = a3;
  v61 = a2;
  *(_QWORD *)(a8 + 88) = &off_1007F5570;
  *(_QWORD *)(a8 + 96) = a2;
  v26 = (objc_class *)type metadata accessor for RDDaemonController();
  v27 = (char *)objc_allocWithZone(v26);
  v28 = &v27[OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon];
  v59 = a4;
  *(_QWORD *)v28 = a4;
  *((_QWORD *)v28 + 1) = a5;
  v29 = &v27[OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity];
  *(_QWORD *)v29 = 0xD00000000000001CLL;
  *((_QWORD *)v29 + 1) = 0x80000001006F55E0;
  *(_QWORD *)(v29 + 38) = 0;
  *((_QWORD *)v29 + 3) = 0;
  *((_QWORD *)v29 + 4) = 0;
  *((_QWORD *)v29 + 2) = 0;
  *(_QWORD *)&v27[OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken] = 0;
  v69.receiver = v27;
  v69.super_class = v26;
  v30 = a1;
  swift_retain(a2);
  v58 = a3;
  swift_unknownObjectRetain(a4);
  v31 = objc_msgSendSuper2(&v69, "init");
  v32 = v55;
  *(_QWORD *)(a8 + 104) = v31;
  *(_QWORD *)(a8 + 112) = v32;
  *(_BYTE *)(a8 + 120) = (_BYTE)v56;
  v33 = a8 + OBJC_IVAR____TtC7remindd30RDAssignmentNotificationEngine_cloudKitAccountsDidChangeSubscriptions;
  *(_QWORD *)(a8 + OBJC_IVAR____TtC7remindd30RDAssignmentNotificationEngine_cloudKitAccountsDidChangeSubscriptions) = _swiftEmptyArrayStorage;
  v56 = v32;
  v34 = sub_100399C74((void *)0xD00000000000001CLL, 0x80000001006F55E0, 0);
  v68[0] = v34;
  v35 = sub_10001A630((uint64_t *)&unk_10084D080);
  v36 = sub_10001A630((uint64_t *)&unk_100838090);
  v37 = sub_1000A5F84(&qword_100847B20, (uint64_t *)&unk_10084D080, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.map<A>(_:)(sub_1004A4448, 0, v35, v36, v37);
  v38 = sub_1000A5F84((unint64_t *)&unk_1008380A0, (uint64_t *)&unk_100838070, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v39 = v54;
  v40 = v57;
  Publisher.filter(_:)(sub_1000F27FC, 0, v57, v38);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v17, v40);
  swift_release(v34);
  v68[0] = v30;
  v41 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v42 = (uint64_t)v63;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v63, 1, 1, v41);
  v43 = sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v44 = sub_1000A5F84(&qword_10083EEE0, (uint64_t *)&unk_10083A960, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v45 = sub_1000A5E70();
  v46 = v60;
  v47 = v64;
  Publisher.receive<A>(on:options:)(v68, v42, v64, v43, v44, v45);
  sub_10000882C(v42, &qword_10083A970);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v39, v47);
  v48 = type metadata accessor for RDAssignmentNotificationEngine(0);
  sub_1000A5F84((unint64_t *)&unk_10083AA00, (uint64_t *)&unk_100838080, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v49 = v66;
  v50 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)(a8, sub_1000DA494, 0, 0, 0, v66, v48);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v46, v49);
  swift_beginAccess(v33, v68, 33, 0);
  v51 = sub_10001A630((uint64_t *)&unk_1008380C0);
  v52 = sub_1000A5F84((unint64_t *)&unk_10083A9F0, (uint64_t *)&unk_1008380C0, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v33, v51, v52);
  swift_endAccess(v68);
  swift_release(v50);

  swift_release(v61);
  swift_unknownObjectRelease(v59);

  return a8;
}

_QWORD *sub_1000A3AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  objc_class *v22;
  char *v23;
  char *v24;
  char *v25;
  id v26;
  objc_super v28;
  _QWORD v29[5];

  v29[3] = type metadata accessor for RDSynchronizedKeyValueStore();
  v29[4] = &protocol witness table for RDSynchronizedKeyValueStore;
  v29[0] = a6;
  v18 = (char *)a10 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_storeControllerObservationToken;
  v19 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  *((_BYTE *)a10 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_started) = 0;
  *(_QWORD *)((char *)a10 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_todayNotificationTimeObserver) = 0;
  *(_QWORD *)((char *)a10 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_badgeCountCriteriaObserver) = 0;
  *(_QWORD *)((char *)a10 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_lastDismissedDateDidChangeExternally) = 0;
  v20 = (char *)a10 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_cachedLastDismissedDate;
  v21 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  a10[2] = a1;
  a10[3] = a2;
  a10[4] = &off_1007E5640;
  a10[5] = a3;
  a10[6] = &off_1007E9D68;
  a10[7] = a5;
  a10[8] = &off_1007F5570;
  a10[9] = a4;
  sub_100018618((uint64_t)v29, (uint64_t)(a10 + 10));
  v22 = (objc_class *)type metadata accessor for RDDaemonController();
  v23 = (char *)objc_allocWithZone(v22);
  v24 = &v23[OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon];
  *(_QWORD *)v24 = a7;
  *((_QWORD *)v24 + 1) = a8;
  v25 = &v23[OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity];
  *(_QWORD *)v25 = 0xD000000000000017;
  *((_QWORD *)v25 + 1) = 0x80000001006F54A0;
  *(_QWORD *)(v25 + 38) = 0;
  *((_QWORD *)v25 + 3) = 0;
  *((_QWORD *)v25 + 4) = 0;
  *((_QWORD *)v25 + 2) = 0;
  *(_QWORD *)&v23[OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken] = 0;
  v28.receiver = v23;
  v28.super_class = v22;
  v26 = objc_msgSendSuper2(&v28, "init");
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v29);
  a10[15] = v26;
  a10[16] = a9;
  return a10;
}

_QWORD *sub_1000A3CAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  objc_class *v11;
  char *v12;
  char *v13;
  char *v14;
  id v15;
  objc_super v17;

  a6[7] = 0xD000000000000014;
  a6[8] = 0x80000001006F5540;
  a6[10] = 0;
  a6[11] = 0;
  a6[9] = 0;
  *(_QWORD *)((char *)a6 + 94) = 0;
  a6[4] = a1;
  v11 = (objc_class *)type metadata accessor for RDDaemonController();
  v12 = (char *)objc_allocWithZone(v11);
  v13 = &v12[OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon];
  *(_QWORD *)v13 = a2;
  *((_QWORD *)v13 + 1) = a3;
  v14 = &v12[OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity];
  *(_QWORD *)v14 = 0xD000000000000014;
  *((_QWORD *)v14 + 1) = 0x80000001006F5540;
  *(_QWORD *)(v14 + 38) = 0;
  *((_QWORD *)v14 + 3) = 0;
  *((_QWORD *)v14 + 4) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken] = 0;
  v17.receiver = v12;
  v17.super_class = v11;
  v15 = objc_msgSendSuper2(&v17, "init");
  a6[2] = a4;
  a6[3] = &off_1007F5570;
  a6[5] = a5;
  a6[6] = v15;
  return a6;
}

void sub_1000A3DA0(char a1, void (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  NSObject *oslog;

  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001AAA8(v4, (uint64_t)&unk_100836BC0);
  if (a1)
  {
    if (a1 == 1)
    {
      v6 = Logger.logObject.getter(v5);
      v7 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v6, v7))
      {
        v8 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "remindd is now exiting in response to first unlock", v8, 2u);
        swift_slowDealloc(v8, -1, -1);
      }

      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.default.getter(v10);
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Notifying stores must refresh due to relaunching upon first unlock notification", v12, 2u);
        swift_slowDealloc(v12, -1, -1);
      }

      v13 = notify_post(_REMStoreMustRefreshNotificationName);
      a2(v13);
    }
  }
  else
  {
    oslog = Logger.logObject.getter(v5);
    v14 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(oslog, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v14, "first unlock handler should not be called before first unlock happens", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

  }
}

uint64_t sub_1000A3F78(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_1000A3FB4(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, char *a8)
{
  char *v16;
  id v17;
  char *v18;
  uint64_t v19;
  id v20;
  _QWORD *v21;
  objc_class *v22;
  char *v23;
  id v24;
  char *v25;
  uint64_t v26;
  objc_super v28;
  objc_super v29;
  _QWORD v30[5];

  v30[3] = type metadata accessor for RDCoreSuggestionsController();
  v30[4] = &off_1007EF3A0;
  v30[0] = a6;
  swift_unknownObjectWeakInit(&a8[OBJC_IVAR____TtC7remindd11RDXPCDaemon_daemon], 0);
  *(_QWORD *)&a8[OBJC_IVAR____TtC7remindd11RDXPCDaemon_storeController] = a1;
  v16 = (char *)objc_allocWithZone((Class)type metadata accessor for RDXPCDebugPerformer());
  v17 = a1;
  v18 = a8;
  *(_QWORD *)&v18[OBJC_IVAR____TtC7remindd11RDXPCDaemon_debugPerformer] = sub_1003386EC(v17, 0, a2, a3, v16);
  v19 = type metadata accessor for RDXPCSyncInterfacePerformerFactory();
  swift_allocObject(v19, 64, 7);
  v20 = v17;
  swift_retain(a4);
  v21 = sub_10013CB9C(v20, a4, a7);

  *(_QWORD *)&v18[OBJC_IVAR____TtC7remindd11RDXPCDaemon_syncInterfacePerformerFactory] = v21;
  v22 = (objc_class *)type metadata accessor for RDXPCIndexingPerformer();
  v23 = (char *)objc_allocWithZone(v22);
  *(_QWORD *)&v23[OBJC_IVAR____TtC7remindd22RDXPCIndexingPerformer_storeController] = v20;
  v29.receiver = v23;
  v29.super_class = v22;
  v24 = v20;
  *(_QWORD *)&v18[OBJC_IVAR____TtC7remindd11RDXPCDaemon_indexingPerformer] = objc_msgSendSuper2(&v29, "init");
  *(_QWORD *)&v18[OBJC_IVAR____TtC7remindd11RDXPCDaemon_dataAccessRequestsWriter] = a4;
  *(_QWORD *)&v18[OBJC_IVAR____TtC7remindd11RDXPCDaemon_contactInteractionWriter] = a5;
  sub_100018618((uint64_t)v30, (uint64_t)&v18[OBJC_IVAR____TtC7remindd11RDXPCDaemon_coreSuggestionsHandler]);
  swift_retain(a4);
  swift_retain(a5);

  v28.receiver = v18;
  v28.super_class = (Class)type metadata accessor for RDXPCDaemon();
  v25 = (char *)objc_msgSendSuper2(&v28, "init");
  v26 = *(_QWORD *)&v25[OBJC_IVAR____TtC7remindd11RDXPCDaemon_debugPerformer]
      + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_xpcDaemon;
  *(_QWORD *)(v26 + 8) = &off_1007EF200;
  swift_unknownObjectWeakAssign(v26, v25);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v30);
  return v25;
}

id sub_1000A41BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  objc_class *ObjectType;
  _QWORD *v12;
  id v13;
  id v14;
  objc_super v16;
  _QWORD v17[5];

  ObjectType = (objc_class *)swift_getObjectType(a6);
  v17[3] = type metadata accessor for RDAlarmProducerDataSource();
  v17[4] = &off_1007EFAD0;
  a6[OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_started] = 0;
  v17[0] = a3;
  *(_QWORD *)&a6[OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_queue] = a1;
  v12 = &a6[OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_timeEventStream];
  *v12 = a2;
  v12[1] = &off_1007E5640;
  sub_100018618((uint64_t)v17, (uint64_t)&a6[OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_dataSource]);
  *(_QWORD *)&a6[OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_beforeFirstUnlockNotificationEngine] = a4;
  *(_QWORD *)&a6[OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_delegate + 8] = &off_1007FC860;
  swift_unknownObjectUnownedInit();
  v16.receiver = a6;
  v16.super_class = ObjectType;
  v13 = a1;
  swift_retain(a2);
  swift_retain(a4);
  v14 = objc_msgSendSuper2(&v16, "init");
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v17);
  return v14;
}

id sub_1000A42F0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  objc_class *ObjectType;
  _QWORD *v12;
  id v13;
  id v14;
  objc_super v16;
  _QWORD v17[5];

  ObjectType = (objc_class *)swift_getObjectType(a6);
  v17[3] = type metadata accessor for RDAlarmProducerDataSource();
  v17[4] = &off_1007EFA70;
  a6[OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_started] = 0;
  v17[0] = a3;
  *(_QWORD *)&a6[OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_queue] = a1;
  v12 = &a6[OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_timeEventStream];
  *v12 = a2;
  v12[1] = &off_1007E5640;
  sub_100018618((uint64_t)v17, (uint64_t)&a6[OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_dataSource]);
  *(_QWORD *)&a6[OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_beforeFirstUnlockNotificationEngine] = a4;
  *(_QWORD *)&a6[OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_delegate + 8] = &off_1007FC860;
  swift_unknownObjectUnownedInit();
  v16.receiver = a6;
  v16.super_class = ObjectType;
  v13 = a1;
  swift_retain(a2);
  swift_retain(a4);
  v14 = objc_msgSendSuper2(&v16, "init");
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v17);
  return v14;
}

char *sub_1000A4424(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  objc_class *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  char *v17;
  uint64_t v18;
  objc_super v20;
  _QWORD v21[5];
  _QWORD v22[5];

  v6 = type metadata accessor for RDAlarmProducerDataSource();
  v22[3] = v6;
  v22[4] = &off_1007EFAC0;
  v22[0] = a3;
  v7 = (objc_class *)type metadata accessor for RDLocationAlarmProducer();
  v8 = (char *)objc_allocWithZone(v7);
  v9 = sub_10001BA38((uint64_t)v22, v6);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  v13 = *v11;
  v21[4] = &off_1007EFAC0;
  v21[3] = v6;
  v21[0] = v13;
  *(_QWORD *)&v8[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_delegate + 8] = &off_1007FC860;
  swift_unknownObjectUnownedInit();
  *(_QWORD *)&v8[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_queue] = a1;
  v14 = &v8[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_locationManager];
  *(_QWORD *)v14 = a2;
  *((_QWORD *)v14 + 1) = (char *)&_sMXM_2.Parent + 3;
  sub_100018618((uint64_t)v21, (uint64_t)&v8[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_dataSource]);
  v20.receiver = v8;
  v20.super_class = v7;
  v15 = a1;
  v16 = a2;
  v17 = (char *)objc_msgSendSuper2(&v20, "init");
  v18 = *(_QWORD *)&v17[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_locationManager]
      + OBJC_IVAR____TtC7remindd17RDLocationManager_delegate;
  *(_QWORD *)(v18 + 8) = &off_1007F7B18;
  swift_unknownObjectWeakAssign(v18, v17);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v21);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v22);
  return v17;
}

id sub_1000A45C4(void *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  objc_class *ObjectType;
  uint64_t v8;
  id v9;
  id v10;
  objc_super v12;
  _QWORD v13[5];

  ObjectType = (objc_class *)swift_getObjectType(a4);
  v8 = type metadata accessor for RDAlarmProducerDataSource();
  v13[4] = &off_1007EFAB0;
  *(_DWORD *)&a4[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_connectedToken] = -1;
  v13[3] = v8;
  v13[0] = a2;
  *(_DWORD *)&a4[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_disconnectedToken] = -1;
  a4[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_started] = 0;
  *(_QWORD *)&a4[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_queue] = a1;
  sub_100018618((uint64_t)v13, (uint64_t)&a4[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_dataSource]);
  *(_QWORD *)&a4[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_delegate + 8] = &off_1007FC860;
  swift_unknownObjectUnownedInit();
  v12.receiver = a4;
  v12.super_class = ObjectType;
  v9 = a1;
  v10 = objc_msgSendSuper2(&v12, "init");
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v13);
  return v10;
}

id sub_1000A46D8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6)
{
  objc_class *ObjectType;
  const char *v11;
  char *v12;
  id v13;
  uint32_t v14;
  uint32_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  int v21;
  id v22;
  uint32_t v24;
  objc_super v25;
  int out_token;
  _QWORD v27[5];
  _QWORD v28[5];

  ObjectType = (objc_class *)swift_getObjectType(a6);
  v28[3] = type metadata accessor for RDUserInteractionSessionManager();
  v28[4] = &off_1007E9ED8;
  v28[0] = a3;
  v27[3] = type metadata accessor for RDAlarmProducerDataSource();
  v27[4] = &off_1007EFA90;
  v27[0] = a4;
  *(_QWORD *)&a6[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_queue] = a1;
  sub_100018618((uint64_t)v27, (uint64_t)&a6[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_dataSource]);
  *(_QWORD *)&a6[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_delegate + 8] = &off_1007FC860;
  swift_unknownObjectUnownedInit();
  sub_100018618((uint64_t)v28, (uint64_t)&a6[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_userInteractionSessionManager]);
  out_token = 0;
  v11 = (const char *)_REMStoreShouldNotifyOfInteractionWithPeopleNotificationName;
  v12 = a6;
  v13 = a1;
  v14 = notify_register_check(v11, &out_token);
  if (v14)
  {
    v15 = v14;
    if (qword_100836FB0 != -1)
      swift_once(&qword_100836FB0, sub_100200F58);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_10001AAA8(v16, (uint64_t)qword_1008406D0);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v20 = 67109120;
      v24 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to register notify token for _REMStoreShouldNotifyOfInteractionWithPeopleNotificationName {status: %u}", v20, 8u);
      swift_slowDealloc(v20, -1, -1);
    }

    v21 = -1;
  }
  else
  {
    v21 = out_token;
  }
  *(_DWORD *)&v12[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_shouldNotifyOfInteractionWithPeopleNotifyToken] = v21;
  v12[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_shouldNotifyOfInteractionWithPeople] = 0;

  v25.receiver = v12;
  v25.super_class = ObjectType;
  v22 = objc_msgSendSuper2(&v25, "init");
  sub_10009CDAC((uint64_t)v22, v13, (uint64_t)sub_100200FE8, 0);

  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v28);
  return v22;
}

id sub_1000A4970(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  id v19;
  _QWORD v21[3];
  uint64_t v22;
  _UNKNOWN **v23;
  _QWORD v24[3];
  uint64_t v25;
  _UNKNOWN **v26;

  v25 = type metadata accessor for RDUserInteractionSessionManager();
  v26 = &off_1007E9ED8;
  v24[0] = a3;
  v22 = type metadata accessor for RDAlarmProducerDataSource();
  v23 = &off_1007EFA90;
  v21[0] = a4;
  v10 = (char *)objc_allocWithZone((Class)type metadata accessor for RDContactInteractionAlarmProducer());
  v11 = sub_10001BA38((uint64_t)v24, v25);
  __chkstk_darwin(v11);
  v13 = (_QWORD *)((char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  v15 = sub_10001BA38((uint64_t)v21, v22);
  __chkstk_darwin(v15);
  v17 = (_QWORD *)((char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  v19 = sub_1000A46D8(a1, a2, *v13, *v17, a5, v10);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v21);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v24);
  return v19;
}

_QWORD *sub_1000A4AD0(_QWORD *a1, void *a2, void *a3, void *a4, uint64_t a5, char *a6, char *a7, void **a8)
{
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  void *v27;
  unsigned int v28;
  uint64_t UnlockNotificationEngine;
  _QWORD *v30;
  id v31;
  char *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  id v36;
  _QWORD *v37;
  char *v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  void (*v53)(uint64_t *);
  uint64_t v54;
  id v55;
  uint64_t v56;
  char *v57;
  char *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  char *v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  void **v76;
  void *v77;
  void *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  void *v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  _QWORD *v90;
  void **v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  _BYTE *v97;
  id v98;
  char *v99;
  void *v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD v112[2];
  void (*v113)(char *, uint64_t, uint64_t, uint64_t);
  id v114;
  uint64_t v115;
  _BYTE *v116;
  id v117;
  id v118;
  id v119;
  id v120;
  _QWORD *v121;
  char *v122;
  _BYTE *v123;
  void **v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  __int128 aBlock;
  uint64_t (*v135)(uint64_t);
  void *v136;
  void (*v137)();
  _QWORD *v138;

  v124 = a8;
  v14 = *a8;
  v122 = a7;
  v123 = v14;
  v15 = type metadata accessor for DispatchWorkItemFlags(0);
  v130 = *(_QWORD *)(v15 - 8);
  v131 = v15;
  __chkstk_darwin(v15);
  v129 = (char *)v112 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS(0);
  v127 = *(_QWORD *)(v17 - 8);
  v128 = v17;
  __chkstk_darwin(v17);
  v126 = (char *)v112 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1008379B0 != -1)
    swift_once(&qword_1008379B0, sub_1005BE258);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_10001AAA8(v19, (uint64_t)qword_1008513E8);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "os_transaction INIT {name: com.apple.remindd.RDAlarmEngineAssembly}", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

  v125 = os_transaction_create("com.apple.remindd.RDAlarmEngineAssembly");
  v24 = Logger.logObject.getter(v125);
  v25 = static os_log_type_t.default.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Starting alarm engine assembly", v26, 2u);
    swift_slowDealloc(v26, -1, -1);
  }

  v27 = (void *)a1[2];
  v28 = objc_msgSend(a4, "supportsAlarmEngine");
  v120 = a1;
  if (v28)
  {
    UnlockNotificationEngine = type metadata accessor for RDBeforeFirstUnlockNotificationEngine();
    v30 = (_QWORD *)swift_allocObject(UnlockNotificationEngine, 40, 7);
    v30[2] = v27;
    v30[3] = a6;
    v30[4] = &off_1007F5570;
    v31 = v27;
    v32 = a6;
  }
  else
  {
    v30 = 0;
  }
  v33 = type metadata accessor for RDAlarmEngine(0);
  swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
  swift_retain(v30);
  swift_retain(a5);
  v34 = v27;
  v35 = (uint64_t)v30;
  v132 = v30;
  v36 = v34;
  swift_unknownObjectRetain(a2);
  v118 = a3;
  v37 = sub_1005B9F5C(v36, (uint64_t)a2, (uint64_t)a3, a5, v35);
  v117 = a6;
  v38 = &a6[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_reminderAlarmDelegate];
  *((_QWORD *)v38 + 1) = &off_1007FC850;
  swift_unknownObjectWeakAssign(v38, v37);
  v39 = (void *)type metadata accessor for RDAlarmProducerDataSource();
  swift_allocObject(v39, 94, 7);
  v40 = v36;
  swift_unknownObjectRetain(a2);
  v41 = sub_10035A800((uint64_t)v40, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
  v42 = type metadata accessor for RDXPCActivityTimeEventStream(0);
  v43 = (_QWORD *)swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
  v119 = a2;
  v44 = (char *)v43 + OBJC_IVAR____TtC7remindd28RDXPCActivityTimeEventStream_xpcEventStreamToken;
  v45 = type metadata accessor for RDXPCEventStream.Token(0);
  v113 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56);
  v113(v44, 1, 1, v45);
  v46 = (_QWORD *)((char *)v43 + OBJC_IVAR____TtC7remindd28RDXPCActivityTimeEventStream_eventHandler);
  *v46 = 0;
  v46[1] = 0;
  v43[2] = v40;
  v43[3] = 0xD00000000000001CLL;
  v47 = v120;
  v43[4] = 0x80000001006F54F0;
  v43[5] = v47;
  v136 = v39;
  v137 = (void (*)())&off_1007EFAD0;
  v48 = v39;
  *(_QWORD *)&aBlock = v41;
  v116 = objc_allocWithZone((Class)type metadata accessor for RDTimeAlarmProducer());
  v49 = sub_10001BA38((uint64_t)&aBlock, (uint64_t)v39);
  v112[1] = v112;
  __chkstk_darwin(v49);
  v51 = (_QWORD *)((char *)v112 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
  v53 = *(void (**)(uint64_t *))(v52 + 16);
  v114 = v39;
  v53(v51);
  v54 = *v51;
  v55 = v40;
  v56 = (uint64_t)v132;
  swift_retain(v132);
  swift_retain(v47);
  swift_retain(v43);
  swift_retain(v41);
  swift_retain(v37);
  v121 = v43;
  v116 = sub_1000A41BC(v55, (uint64_t)v43, v54, v56, (uint64_t)v37, v116);

  swift_release(v43);
  swift_release(v56);
  swift_release(v37);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&aBlock);
  v57 = (char *)swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
  v113(&v57[OBJC_IVAR____TtC7remindd28RDXPCActivityTimeEventStream_xpcEventStreamToken], 1, 1, v45);
  v58 = &v57[OBJC_IVAR____TtC7remindd28RDXPCActivityTimeEventStream_eventHandler];
  *(_QWORD *)v58 = 0;
  *((_QWORD *)v58 + 1) = 0;
  *((_QWORD *)v57 + 2) = v55;
  *((_QWORD *)v57 + 3) = 0xD000000000000024;
  *((_QWORD *)v57 + 4) = 0x80000001006F5510;
  *((_QWORD *)v57 + 5) = v47;
  v136 = v48;
  v137 = (void (*)())&off_1007EFA70;
  *(_QWORD *)&aBlock = v41;
  v59 = objc_allocWithZone((Class)type metadata accessor for RDDueDateDeltaAlarmProducer());
  v60 = sub_10001BA38((uint64_t)&aBlock, (uint64_t)v136);
  __chkstk_darwin(v60);
  v62 = (_QWORD *)((char *)v112 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v63 + 16))(v62);
  v64 = *v62;
  v65 = v55;
  swift_retain(v56);
  swift_retain(v47);
  swift_retain(v41);
  swift_retain(v37);
  swift_retain(v57);
  v120 = sub_1000A42F0(v65, (uint64_t)v57, v64, v56, (uint64_t)v37, v59);

  swift_release(v57);
  swift_release(v56);
  swift_release(v37);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&aBlock);
  v66 = v65;
  swift_retain(v41);
  swift_retain(v37);
  v67 = v122;
  v122 = sub_1000A4424(v66, v67, v41);

  swift_release(v37);
  v136 = v114;
  v137 = (void (*)())&off_1007EFAB0;
  *(_QWORD *)&aBlock = v41;
  v68 = objc_allocWithZone((Class)type metadata accessor for RDVehicleAlarmProducer());
  v69 = sub_10001BA38((uint64_t)&aBlock, (uint64_t)v136);
  __chkstk_darwin(v69);
  v71 = (_QWORD *)((char *)v112 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v72 + 16))(v71);
  v73 = *v71;
  v74 = v66;
  v75 = v41;
  swift_retain(v41);
  swift_retain(v37);
  v114 = sub_1000A45C4(v74, v73, (uint64_t)v37, v68);

  swift_release(v37);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&aBlock);
  v76 = v124;
  v78 = v124[2];
  v77 = v124[3];
  v79 = (_QWORD *)swift_allocObject(v123, 64, 7);
  swift_unknownObjectWeakInit(v79 + 5, 0);
  v79[6] = 0;
  v79[7] = 0;
  v79[2] = v78;
  v79[3] = v77;
  v79[4] = v74;
  v80 = swift_allocObject(&unk_1007E2130, 32, 7);
  *(_QWORD *)(v80 + 16) = v74;
  *(_QWORD *)(v80 + 24) = v79;
  v81 = (uint64_t)v76[6];
  v82 = (uint64_t)v76[7];
  v76[6] = sub_1000A5D44;
  v76[7] = (void *)v80;
  v83 = v74;
  swift_bridgeObjectRetain(v77);
  swift_retain(v79);
  sub_1000A5C24(v81, v82);
  v84 = (void *)objc_opt_self(REMUserDefaults);
  v115 = v75;
  swift_retain(v75);
  swift_retain(v37);
  v85 = objc_msgSend(v84, "daemonUserDefaults");
  v136 = (void *)sub_1000151B0(0, (unint64_t *)&qword_100838020, REMDaemonUserDefaults_ptr);
  v137 = (void (*)())&off_1007F1AC8;
  *(_QWORD *)&aBlock = v85;
  v86 = type metadata accessor for RDUserInteractionSessionManager();
  v87 = swift_allocObject(v86, 56, 7);
  sub_10001BCA8(&aBlock, v87 + 16);
  v88 = sub_1000A4970(v83, (uint64_t)v79, v87, v75, (uint64_t)v37);

  swift_release(v79);
  swift_release(v37);
  v89 = type metadata accessor for RDAlarmNotificationConsumer();
  v90 = (_QWORD *)swift_allocObject(v89, 102, 7);
  v91 = (void **)v83;
  v124 = v91;
  v92 = v117;
  v93 = (uint64_t)v119;
  swift_unknownObjectRetain(v119);
  v94 = (uint64_t)v132;
  swift_retain(v132);
  v95 = sub_1000A3CAC((uint64_t)v91, v93, (uint64_t)v118, (uint64_t)v92, v94, v90);
  v96 = (_QWORD *)swift_allocObject(&unk_1007E2158, 80, 7);
  v97 = v116;
  v96[2] = v37;
  v96[3] = v97;
  v98 = v120;
  v99 = v122;
  v96[4] = v120;
  v96[5] = v99;
  v100 = v114;
  v96[6] = v114;
  v96[7] = v88;
  v101 = v125;
  v96[8] = v95;
  v96[9] = v101;
  v137 = sub_1000A5DAC;
  v138 = v96;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v135 = sub_1000094C8;
  v136 = &unk_1007E2170;
  v102 = _Block_copy(&aBlock);
  swift_retain(v37);
  v123 = v97;
  v120 = v98;
  v122 = v99;
  v119 = v100;
  v118 = v88;
  swift_retain(v95);
  v103 = swift_unknownObjectRetain(v101);
  v104 = v126;
  static DispatchQoS.unspecified.getter(v103);
  v133 = _swiftEmptyArrayStorage;
  v105 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v106 = sub_10001A630((uint64_t *)&unk_100838000);
  v107 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  v108 = v129;
  v109 = v106;
  v110 = v131;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v133, v109, v107, v131, v105);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v104, v108, v102);
  _Block_release(v102);
  swift_release(v132);
  swift_release(v121);
  swift_release(v115);
  swift_release(v57);

  swift_release(v95);
  swift_unknownObjectRelease(v101);
  (*(void (**)(char *, uint64_t))(v130 + 8))(v108, v110);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v104, v128);
  swift_release(v138);
  return v37;
}

id sub_1000A55F4(void *a1, void *a2, void *a3, _BYTE *a4)
{
  objc_class *ObjectType;
  objc_class *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  id v14;
  id v15;
  id v16;
  objc_super v18;
  objc_super v19;

  ObjectType = (objc_class *)swift_getObjectType(a4);
  *(_QWORD *)&a4[OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_cancellables] = &_swiftEmptySetSingleton;
  *(_QWORD *)&a4[OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_osTransaction] = 0;
  a4[OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_isHandlingOperationQueueItems] = 0;
  *(_QWORD *)&a4[OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_storeController] = a1;
  *(_QWORD *)&a4[OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_scheduler] = a3;
  v9 = (objc_class *)type metadata accessor for RDDaemonController();
  v10 = (char *)objc_allocWithZone(v9);
  v11 = &v10[OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon];
  *(_QWORD *)v11 = a2;
  *((_QWORD *)v11 + 1) = &off_1007EF200;
  v12 = &v10[OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity];
  *(_QWORD *)v12 = 0xD000000000000015;
  *((_QWORD *)v12 + 1) = 0x80000001006F56C0;
  *(_QWORD *)(v12 + 38) = 0;
  *((_QWORD *)v12 + 3) = 0;
  *((_QWORD *)v12 + 4) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken] = 0;
  v19.receiver = v10;
  v19.super_class = v9;
  v13 = a4;
  v14 = a1;
  v15 = a3;
  v16 = a2;
  *(_QWORD *)&v13[OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_daemonController] = objc_msgSendSuper2(&v19, "init");

  v18.receiver = v13;
  v18.super_class = ObjectType;
  return objc_msgSendSuper2(&v18, "init");
}

uint64_t *sub_1000A574C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v24;
  uint64_t v25;
  _UNKNOWN **v26;
  _QWORD v27[5];
  _QWORD v28[5];

  v17 = *a10;
  v28[3] = sub_1000151B0(0, &qword_100838058, off_1007D6260);
  v28[4] = &off_1007EA078;
  v28[0] = a6;
  v27[3] = sub_1000151B0(0, (unint64_t *)&qword_100838020, REMDaemonUserDefaults_ptr);
  v27[4] = &off_1007EA098;
  v27[0] = a7;
  a10[5] = 0;
  swift_unknownObjectWeakInit(a10 + 4, 0);
  a10[18] = 0;
  swift_unknownObjectWeakInit(a10 + 17, 0);
  a10[19] = 0;
  a10[20] = 0;
  a10[21] = 0xD000000000000022;
  a10[22] = 0x80000001006F5730;
  a10[24] = 0;
  a10[25] = 0;
  a10[23] = 0;
  *(uint64_t *)((char *)a10 + 206) = 0;
  *(_QWORD *)&v24 = v17;
  v18 = sub_10001A630(&qword_1008380E0);
  a10[27] = String.init<A>(reflecting:)(&v24, v18);
  a10[28] = v19;
  *((_OWORD *)a10 + 17) = 0u;
  *((_OWORD *)a10 + 18) = 0u;
  a10[38] = 0;
  a10[2] = a1;
  a10[3] = a2;
  a10[5] = a4;
  swift_unknownObjectWeakAssign(a10 + 4, a3);
  a10[16] = a5;
  sub_100018618((uint64_t)v28, (uint64_t)(a10 + 6));
  sub_100018618((uint64_t)v27, (uint64_t)(a10 + 11));
  sub_100018618((uint64_t)v27, (uint64_t)&v24);
  v20 = type metadata accessor for RDICCloudExtraneousAlarmsCollector.RDICCloudExtraneousAlarmsCollectorExecutionDateStorage();
  v21 = swift_allocObject(v20, 56, 7);
  sub_10001BCA8(&v24, v21 + 16);
  v25 = v20;
  v26 = &off_1007EA0D0;
  *(_QWORD *)&v24 = v21;
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v28);
  sub_10001BCA8(&v24, (uint64_t)(a10 + 29));
  a10[18] = a9;
  swift_unknownObjectWeakAssign(a10 + 17, a8);
  return a10;
}

_QWORD *sub_1000A5928(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *result;
  char *v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v5)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v5);
    v10 = (char *)(a1 + 32);
    do
    {
      v11 = *v10++;
      v12 = swift_allocObject(&unk_1007E1F28, 33, 7);
      *(_QWORD *)(v12 + 16) = a3;
      *(_QWORD *)(v12 + 24) = a4;
      *(_BYTE *)(v12 + 32) = v11;
      v13 = (_QWORD *)swift_allocObject(&unk_1007E1F50, 40, 7);
      v13[2] = a2;
      v13[3] = sub_1000A5AFC;
      v13[4] = v12;
      v14 = type metadata accessor for RDDynamicXPCActivity();
      swift_allocObject(v14, 128, 7);
      v15 = a2;
      swift_retain();
      sub_1004F69CC(v11, (uint64_t)sub_1000A5B1C, (uint64_t)v13);
      v17 = v16;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v16);
      v18 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
      v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v17);
      specialized ContiguousArray._endMutation()(v19);
      --v5;
    }
    while (v5);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void sub_1000A5A74()
{
  uint64_t v0;

  sub_10009ADC4(*(_QWORD *)(v0 + 16), "os_transaction RELEASE {name: com.apple.remindd.xpcEvents}");
}

uint64_t sub_1000A5A94(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000A5AD8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_1000A5AFC()
{
  uint64_t v0;

  return sub_1004F672C(*(uint64_t (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32));
}

uint64_t sub_1000A5B1C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1004F6754(a1, a2, v2[2], v2[3], v2[4]);
}

double sub_1000A5B2C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void (*v5)(uint64_t, _BYTE *);
  _BYTE v7[56];

  v2 = v1[2];
  v3 = v1[3];
  v4 = v1[4];
  v5 = (void (*)(uint64_t, _BYTE *))v1[5];
  sub_1000A5B8C(a1, (uint64_t)v7);
  return sub_10009D73C((uint64_t)v7, v2, v3, v4, v5);
}

uint64_t sub_1000A5B8C(uint64_t a1, uint64_t a2)
{
  initializeWithTake for RDDARequest(a2, a1);
  return a2;
}

void sub_1000A5BC8()
{
  uint64_t v0;

  sub_1004D369C(*(void **)(v0 + 16));
}

uint64_t sub_1000A5BD0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 40));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_1000A5C14()
{
  uint64_t *v0;

  sub_10009A15C(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1000A5C24(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

id sub_1000A5C34()
{
  uint64_t v0;

  return sub_10051E9F8(v0);
}

uint64_t sub_1000A5C3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_10083D5B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1000A5C84()
{
  sub_10009DB1C();
  sub_10009DE50();
}

uint64_t sub_1000A5C98()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A5CA8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10001A630(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_1000A5CEC()
{
  sub_10051EA08();
}

uint64_t sub_1000A5CF4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

double sub_1000A5D04(uint64_t a1)
{
  double *v1;

  return sub_1005BE2E8(a1, v1[2], v1[3], v1[4]);
}

void sub_1000A5D10()
{
  sub_1001CC4E8();
}

uint64_t sub_1000A5D18()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A5D44(uint64_t *a1)
{
  uint64_t v1;

  return sub_10009D928(*a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000A5D50()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 64));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

void sub_1000A5DAC()
{
  uint64_t v0;

  sub_1005BE554(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), *(void **)(v0 + 48), *(void **)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_1000A5DC0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A5DE8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

void sub_1000A5E1C(uint64_t *a1)
{
  uint64_t v1;

  sub_10009D55C(*a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void (**)(uint64_t, uint64_t *))(v1 + 40));
}

uint64_t sub_1000A5E30()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A5E5C()
{
  uint64_t v0;

  return sub_10009FE88(*(_QWORD *)(v0 + 16), (uint64_t *)(v0 + 24));
}

void sub_1000A5E68()
{
  sub_100146568();
}

unint64_t sub_1000A5E70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008380B0;
  if (!qword_1008380B0)
  {
    v1 = sub_1000151B0(255, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue, v1);
    atomic_store(result, (unint64_t *)&qword_1008380B0);
  }
  return result;
}

uint64_t sub_1000A5EC8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000A5EF4()
{
  uint64_t v0;

  sub_100423BCC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000A5F00()
{
  uint64_t v0;

  return sub_10009EEE4(v0);
}

uint64_t sub_1000A5F08@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return sub_1004F98F8(v1, a1);
}

uint64_t sub_1000A5F10()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A5F34()
{
  uint64_t v0;

  return sub_10009E880(v0);
}

uint64_t sub_1000A5F50()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000A5F7C()
{
  sub_1003A2760();
}

uint64_t sub_1000A5F84(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000A5A94(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A5FC4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000A5FE8()
{
  uint64_t v0;

  sub_10009ADC4(*(_QWORD *)(v0 + 16), "os_transaction RELEASE {name: com.apple.remindd.launch}");
}

void type metadata accessor for CFDictionary(uint64_t a1)
{
  sub_1000A65A4(a1, &qword_100838158, (uint64_t)&unk_1007E23B0);
}

void type metadata accessor for AssetsResult(uint64_t a1)
{
  sub_1000A65A4(a1, &qword_100838160, (uint64_t)&unk_1007E23E0);
}

__n128 initializeBufferWithCopyOfBuffer for RDSavedDayOfWeek(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for RDSavedDayOfWeek(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RDSavedDayOfWeek(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for _NSRange(uint64_t a1)
{
  sub_1000A65A4(a1, &qword_100838168, (uint64_t)&unk_1007E2458);
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
  sub_1000A65A4(a1, &qword_100838170, (uint64_t)&unk_1007E2480);
}

void type metadata accessor for REMSmartListUserDefinedVisibility(uint64_t a1)
{
  sub_1000A65A4(a1, &qword_100838178, (uint64_t)&unk_1007E24A8);
}

void type metadata accessor for REMSmartListType(uint64_t a1)
{
  sub_1000A65A4(a1, &qword_100838180, (uint64_t)&unk_1007E24C8);
}

void type metadata accessor for REMReminderNextThirdsHour(uint64_t a1)
{
  sub_1000A65A4(a1, &qword_100838188, (uint64_t)&unk_1007E24F0);
}

void type metadata accessor for NLTag(uint64_t a1)
{
  sub_1000A65A4(a1, &qword_100838190, (uint64_t)&unk_1007E2510);
}

void type metadata accessor for CKError(uint64_t a1)
{
  sub_1000A65A4(a1, &qword_100838198, (uint64_t)&unk_1007E2538);
}

void type metadata accessor for ComparisonResult(uint64_t a1)
{
  sub_1000A65A4(a1, &qword_1008381A0, (uint64_t)&unk_1007E2560);
}

void type metadata accessor for NLTagScheme(uint64_t a1)
{
  sub_1000A65A4(a1, &qword_1008381A8, (uint64_t)&unk_1007E2580);
}

void type metadata accessor for DACalendarShareResponse(uint64_t a1)
{
  sub_1000A65A4(a1, &qword_1008381B0, (uint64_t)&unk_1007E25A8);
}

void type metadata accessor for REMAlarmVehicleTriggerEvent(uint64_t a1)
{
  sub_1000A65A4(a1, &qword_1008381B8, (uint64_t)&unk_1007E25C8);
}

void type metadata accessor for REMManualOrderingListType(uint64_t a1)
{
  sub_1000A65A4(a1, &qword_1008381C0, (uint64_t)&unk_1007E25E8);
}

void type metadata accessor for NLLanguage(uint64_t a1)
{
  sub_1000A65A4(a1, &qword_1008381C8, (uint64_t)&unk_1007E2608);
}

void type metadata accessor for REMListSharingStatus(uint64_t a1)
{
  sub_1000A65A4(a1, &qword_1008381D0, (uint64_t)&unk_1007E2630);
}

void type metadata accessor for BMMiningTaskCompletionStatus(uint64_t a1)
{
  sub_1000A65A4(a1, &qword_1008381D8, (uint64_t)&unk_1007E2650);
}

void type metadata accessor for QualityOfService(uint64_t a1)
{
  sub_1000A65A4(a1, &qword_1008381E0, (uint64_t)&unk_1007E2670);
}

uint64_t sub_1000A61C8()
{
  return sub_10009FC50(&qword_1008381E8, (uint64_t (*)(uint64_t))type metadata accessor for QualityOfService, (uint64_t)&unk_1006A465C);
}

uint64_t sub_1000A61F4()
{
  return sub_10009FC50(&qword_1008381F0, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_1006A4738);
}

uint64_t sub_1000A6220()
{
  return sub_10009FC50(&qword_1008381F8, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_1006A470C);
}

uint64_t sub_1000A624C()
{
  return sub_10009FC50(&qword_100838200, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_1006A47A8);
}

uint64_t sub_1000A6278()
{
  return sub_10009FC50(&qword_100838208, (uint64_t (*)(uint64_t))type metadata accessor for NLTagScheme, (uint64_t)&unk_1006A4950);
}

uint64_t sub_1000A62A4()
{
  return sub_10009FC50(&qword_100838210, (uint64_t (*)(uint64_t))type metadata accessor for NLTagScheme, (uint64_t)&unk_1006A4924);
}

uint64_t sub_1000A62D0()
{
  return sub_10009FC50(&qword_100838218, (uint64_t (*)(uint64_t))type metadata accessor for NLTagScheme, (uint64_t)&unk_1006A49C0);
}

uint64_t sub_1000A62FC()
{
  return sub_10009FC50(&qword_100838220, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1006A4AE4);
}

uint64_t sub_1000A6328()
{
  return sub_10009FC50(&qword_100838228, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1006A4B10);
}

uint64_t sub_1000A6354()
{
  return sub_10009FC50(&qword_100838230, (uint64_t (*)(uint64_t))type metadata accessor for NLTag, (uint64_t)&unk_1006A4C3C);
}

uint64_t sub_1000A6380()
{
  return sub_10009FC50(&qword_100838238, (uint64_t (*)(uint64_t))type metadata accessor for NLTag, (uint64_t)&unk_1006A4C10);
}

uint64_t sub_1000A63AC()
{
  return sub_10009FC50(&qword_100838240, (uint64_t (*)(uint64_t))type metadata accessor for NLTag, (uint64_t)&unk_1006A4CAC);
}

uint64_t sub_1000A63D8()
{
  return sub_10009FC50(&qword_100838248, (uint64_t (*)(uint64_t))type metadata accessor for REMSmartListType, (uint64_t)&unk_1006A4D90);
}

uint64_t sub_1000A6404()
{
  return sub_10009FC50(&qword_100838250, (uint64_t (*)(uint64_t))type metadata accessor for REMSmartListType, (uint64_t)&unk_1006A4D68);
}

uint64_t sub_1000A6430()
{
  return sub_10009FC50(&qword_100838258, (uint64_t (*)(uint64_t))type metadata accessor for REMSmartListType, (uint64_t)&unk_1006A4DF8);
}

uint64_t sub_1000A645C()
{
  return sub_10009FC50(&qword_100838260, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1006A4ED4);
}

uint64_t sub_1000A6488()
{
  return sub_10009FC50(&qword_100838268, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1006A4EA8);
}

uint64_t sub_1000A64B4()
{
  return sub_10009FC50(&qword_100838270, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1006A4F44);
}

uint64_t sub_1000A64E0()
{
  return sub_10009FC50(&qword_100838278, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1006A4BCC);
}

uint64_t sub_1000A650C()
{
  return sub_10009FC50(&qword_100838280, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1006A4B98);
}

uint64_t sub_1000A6538()
{
  return sub_10009FC50(&qword_100838288, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1006A4B54);
}

uint64_t sub_1000A6564()
{
  return sub_10009FC50(&qword_100838290, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1006A50A8);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_1000A65A4(a1, &qword_100838308, (uint64_t)&unk_1007E2690);
}

void sub_1000A65A4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_1000A65E8()
{
  return sub_10009FC50(&qword_100838298, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1006A506C);
}

unint64_t sub_1000A6618()
{
  unint64_t result;

  result = qword_1008382A0;
  if (!qword_1008382A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1008382A0);
  }
  return result;
}

uint64_t sub_1000A665C()
{
  return sub_10009FC50(&qword_1008382A8, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1006A50E4);
}

uint64_t sub_1000A6688()
{
  return sub_10009FC50((unint64_t *)&qword_1008382B0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1006A5000);
}

void sub_1000A678C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  Class isa;
  id v31;
  uint64_t v32;
  id v33;
  char **v34;
  uint64_t v35;
  __int128 *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;

  v69 = a4;
  v68 = a3;
  v6 = type metadata accessor for TimeZone(0);
  v81 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v67 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Calendar.Identifier(0, v7);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for Calendar(0);
  v79 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v14 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for DateComponents(0);
  v77 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Date(0);
  __chkstk_darwin(v17);
  v21 = (char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = a1;
  v22 = *(_QWORD *)(a1 + 16);
  v73 = a2;
  if (v22)
  {
    LODWORD(v76) = enum case for Calendar.Identifier.gregorian(_:);
    v75 = v18;
    v74 = v19;
    swift_bridgeObjectRetain(v82);
    v72 = v6;
    v23 = 0;
    v70 = v10;
    v71 = v9;
    v24 = v67;
    do
    {
      v25 = *(double *)(v82 + 8 * v23++ + 32);
      Date.init(timeIntervalSinceReferenceDate:)(v25);
      v26 = v70;
      v27 = v71;
      (*(void (**)(char *, _QWORD, uint64_t))(v70 + 104))(v12, v76, v71);
      Calendar.init(identifier:)(v12);
      v28 = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v12, v27);
      static TimeZone.current.getter(v28);
      Calendar.dateComponents(in:from:)(v24, v21);
      (*(void (**)(char *, uint64_t))(v81 + 8))(v24, v72);
      (*(void (**)(char *, uint64_t))(v79 + 8))(v14, v80);
      v29 = objc_allocWithZone((Class)REMAlarmDateTrigger);
      isa = DateComponents._bridgeToObjectiveC()().super.isa;
      v31 = objc_msgSend(v29, "initWithDateComponents:", isa);

      (*(void (**)(char *, uint64_t))(v77 + 8))(v16, v78);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v21, v75);

    }
    while (v22 != v23);
    swift_bridgeObjectRelease();
    a2 = v73;
  }
  v32 = *(_QWORD *)(a2 + 16);
  v33 = v83;
  v34 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
  if (v32)
  {
    swift_bridgeObjectRetain_n(a2, 2);
    v82 = v32 - 1;
    v35 = 32;
    while (1)
    {
      v74 = v35;
      v36 = (__int128 *)(a2 + v35);
      v37 = v36[8];
      v38 = v36[3];
      v86 = v36[2];
      v87 = v38;
      v39 = v36[6];
      v91 = v36[7];
      v92 = v37;
      v40 = v36[1];
      v84 = *v36;
      v85 = v40;
      v41 = v36[4];
      v89 = v36[5];
      v90 = v39;
      v88 = v41;
      v81 = v89;
      v42 = *((_QWORD *)&v37 + 1);
      v80 = v37;
      v43 = v87;
      v79 = *((_QWORD *)&v86 + 1);
      v44 = *(double *)&v86;
      v45 = *((double *)&v87 + 1);
      v46 = *((double *)&v89 + 1);
      v47 = *((_QWORD *)&v84 + 1);
      v78 = v84;
      v48 = *((_QWORD *)&v91 + 1);
      v77 = v91;
      v49 = *((_QWORD *)&v39 + 1);
      v75 = v39;
      v50 = *((_QWORD *)&v85 + 1);
      v51 = v85;
      v53 = *((_QWORD *)&v41 + 1);
      v52 = v41;
      v76 = objc_allocWithZone((Class)REMStructuredLocation);
      sub_1000A7044(&v84);
      sub_1000A7044(&v84);
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRetain(v43);
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRetain(v48);
      swift_bridgeObjectRetain(v49);
      sub_1000A70D0(v52, v53);
      v54 = sub_1000A6E54(v44, v45, v46, v80, v42, v79, v43, v78, v47, v77, v48, v75, v49, v51, v50, v52, v53);
      v55 = objc_allocWithZone((Class)REMAlarmLocationTrigger);
      v56 = objc_msgSend(v55, "initWithStructuredLocation:proximity:", v54, v81);
      sub_1000A7128(&v84);

      v34 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
      v33 = v83;

      sub_1000A7128(&v84);
      if (!v82)
        break;
      --v82;
      v35 = v74 + 144;
      a2 = v73;
    }
    swift_bridgeObjectRelease_n(v73, 2);
  }
  v57 = v68;
  v58 = *(_QWORD *)(v68 + 16);
  v59 = v69;
  if (v58)
  {
    swift_bridgeObjectRetain(v68);
    v60 = 0;
    do
    {
      v61 = *(double *)(v57 + 8 * v60++ + 32);
      v62 = objc_msgSend(objc_allocWithZone((Class)REMAlarmTimeIntervalTrigger), "initWithTimeInterval:", v61);

    }
    while (v58 != v60);
    swift_bridgeObjectRelease();
  }
  v63 = *(_QWORD *)(v59 + 16);
  if (v63)
  {
    swift_bridgeObjectRetain(v59);
    v64 = 0;
    do
    {
      v65 = *(_QWORD *)(v59 + 8 * v64++ + 32);
      v66 = objc_msgSend(objc_allocWithZone((Class)REMAlarmVehicleTrigger), "initWithEvent:", v65);

    }
    while (v63 != v64);
    swift_bridgeObjectRelease();
  }
}

id sub_1000A6E54(double a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  void *v17;
  NSString v24;
  NSString v25;
  NSString v26;
  uint64_t v27;
  NSString v28;
  uint64_t v29;
  NSString v30;
  unint64_t v31;
  NSString v32;
  Class isa;
  id v34;

  if (a5)
  {
    v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if (a7)
      goto LABEL_3;
  }
  else
  {
    v24 = 0;
    if (a7)
    {
LABEL_3:
      v25 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      if (a9)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  v25 = 0;
  if (a9)
  {
LABEL_4:
    v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v27 = a13;
    if (a11)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  v26 = 0;
  v27 = a13;
  if (a11)
  {
LABEL_5:
    v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v29 = a15;
    if (v27)
      goto LABEL_6;
LABEL_12:
    v30 = 0;
    v31 = a17;
    if (v29)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_11:
  v28 = 0;
  v29 = a15;
  if (!v27)
    goto LABEL_12;
LABEL_6:
  v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v31 = a17;
  if (v29)
  {
LABEL_7:
    v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
LABEL_13:
  v32 = 0;
LABEL_14:
  if (v31 >> 60 == 15)
  {
    isa = 0;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71B4(a16, v31);
  }
  v34 = objc_msgSend(v17, "initWithTitle:locationUID:latitude:longitude:radius:address:routing:referenceFrameString:contactLabel:mapKitHandle:", v24, v25, v26, v28, v30, v32, a1, a2, a3, isa);

  return v34;
}

_QWORD *sub_1000A7044(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[8];
  v5 = a1[9];
  v6 = a1[13];
  v7 = a1[15];
  v8 = a1[17];
  swift_bridgeObjectRetain(a1[6]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  sub_1000A70D0(v4, v5);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t sub_1000A70D0(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1000A70E4(result, a2);
  return result;
}

uint64_t sub_1000A70E4(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

_QWORD *sub_1000A7128(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[3];
  v3 = a1[6];
  v4 = a1[8];
  v5 = a1[9];
  v6 = a1[13];
  v7 = a1[15];
  v8 = a1[17];
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  sub_1000A71B4(v4, v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t sub_1000A71B4(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1000A71C8(result, a2);
  return result;
}

uint64_t sub_1000A71C8(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void sub_1000A720C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  int v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  unint64_t v35;
  id v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;

  isUniquelyReferenced_nonNull_native = v4;
  v47 = a3;
  v48 = a2;
  v8 = type metadata accessor for UUID(0);
  v45 = *(_QWORD *)(v8 - 8);
  v46 = v8;
  __chkstk_darwin(v8);
  v44 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_34;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v10)
  {
LABEL_38:
    swift_bridgeObjectRelease();
    return;
  }
  while (1)
  {
    v43 = a1 & 0xC000000000000001;
    if ((a1 & 0xC000000000000001) == 0)
      break;
    v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
LABEL_6:
    v12 = v11;
    v42 = v47 - v48;
    if (v47 == v48)
    {
LABEL_27:
      swift_bridgeObjectRelease();

      return;
    }
    if (v47 < v48)
      goto LABEL_41;
    v13 = 0;
    v38[1] = isUniquelyReferenced_nonNull_native;
    v39 = a1 & 0xFFFFFFFFFFFFFF8;
    v40 = v10 - 1;
    v41 = a1;
    while (v48 + v13 < v47)
    {
      v14 = v12;
      v15 = objc_msgSend(v14, "uuid");
      v16 = v44;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v15);

      a1 = UUID.uuidString.getter(v17);
      v19 = v18;
      (*(void (**)(char *, uint64_t))(v45 + 8))(v16, v46);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a4);
      v49 = (_QWORD *)*a4;
      v20 = v49;
      v21 = a4;
      *a4 = 0x8000000000000000;
      v23 = sub_10001A6DC(a1, v19);
      v24 = v20[2];
      v25 = (v22 & 1) == 0;
      v26 = v24 + v25;
      if (__OFADD__(v24, v25))
        goto LABEL_30;
      a4 = v22;
      if (v20[3] >= v26)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_1002D5DDC();
      }
      else
      {
        sub_1002CBF30(v26, isUniquelyReferenced_nonNull_native);
        v27 = sub_10001A6DC(a1, v19);
        if ((a4 & 1) != (v28 & 1))
          goto LABEL_42;
        v23 = v27;
      }
      v29 = v48 + v13;
      v30 = v49;
      if ((a4 & 1) != 0)
      {
        *(_DWORD *)(v49[7] + 4 * v23) = v29;
      }
      else
      {
        v49[(v23 >> 6) + 8] |= 1 << v23;
        v31 = (uint64_t *)(v30[6] + 16 * v23);
        *v31 = a1;
        v31[1] = v19;
        *(_DWORD *)(v30[7] + 4 * v23) = v29;
        v32 = v30[2];
        v33 = __OFADD__(v32, 1);
        v34 = v32 + 1;
        if (v33)
          goto LABEL_32;
        v30[2] = v34;
        swift_bridgeObjectRetain(v19);
      }
      a4 = v21;
      *v21 = v30;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v41;
      if (v40 == v13)
        goto LABEL_38;
      v35 = v13 + 1;
      if (v43)
      {
        v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 + 1, v41);
      }
      else
      {
        if (v35 >= *(_QWORD *)(v39 + 16))
          goto LABEL_33;
        v36 = *(id *)(v41 + 8 * v13 + 40);
      }
      v12 = v36;
      if (__OFADD__(v35, 1))
        goto LABEL_31;
      if (v42 == ++v13)
        goto LABEL_27;
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    if (a1 < 0)
      v37 = a1;
    else
      v37 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v10 = _CocoaArrayWrapper.endIndex.getter(v37);
    if (!v10)
      goto LABEL_38;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = *(id *)(a1 + 32);
    goto LABEL_6;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_1000A7580()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100838550);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100838550);
  if (qword_1008376A0 != -1)
    swift_once(&qword_1008376A0, sub_1004A19DC);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_1008721C0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1000A7610(void **a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v4 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v5 = sub_1000151B0(0, (unint64_t *)&unk_10083AE60, NSOrderedSet_ptr);
  v6 = sub_1000A99FC((unint64_t *)&qword_100841630, (unint64_t *)&unk_10083AE60, NSOrderedSet_ptr);
  v7 = Sequence.elements<A>(ofType:)(v4, v5, v4, v6);
  v8 = v7;
  if ((unint64_t)v7 >> 62)
  {
    if (v7 >= 0)
      v7 &= 0xFFFFFFFFFFFFFF8uLL;
    v9 = _CocoaArrayWrapper.endIndex.getter(v7);
    if (v9)
      goto LABEL_3;
LABEL_8:
    swift_bridgeObjectRelease();
    return;
  }
  v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v9)
    goto LABEL_8;
LABEL_3:
  v11 = &_swiftEmptyDictionarySingleton;
  if (v9 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_1000A720C(v8, 0, v9, &v11);
    swift_bridgeObjectRelease();
    v10 = (uint64_t)v11;
    swift_bridgeObjectRetain(v11);
    sub_1000A774C(a1, v10, a2);
    swift_bridgeObjectRelease_n(v10, 2);
  }
}

void sub_1000A774C(void **a1, uint64_t a2, char a3)
{
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  void *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  unsigned int v31;
  id v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  void **v42;
  uint64_t v43;
  char *v44;
  BOOL v45;
  void *v46;
  id v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  void **v52;
  id v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  void **p_weak_ivar_lyt;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void **v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void **v84;
  void *v85;
  char v87;
  uint64_t v88;
  uint64_t v89;
  int64_t v90;
  unint64_t v91;
  unint64_t v93;
  unint64_t v94;
  void **aBlock;
  _QWORD v96[4];
  uint64_t v97;
  void **v98;

  isUniquelyReferenced_nonNull_native = (uint64_t)a1;
  v98 = (void **)&_swiftEmptyDictionarySingleton;
  aBlock = a1;
  v4 = sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
  v5 = sub_1000151B0(0, &qword_100838568, NSMutableOrderedSet_ptr);
  v6 = sub_1000A99FC(&qword_100850750, &qword_100838568, NSMutableOrderedSet_ptr);
  v7 = Sequence.elements<A>(ofType:)(v4, v5, v4, v6);
  v8 = (void *)((unint64_t)v7 >> 62);
  if ((unint64_t)v7 >> 62)
  {
LABEL_85:
    if (v7 < 0)
      v82 = v7;
    else
      v82 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v9 = (void **)_CocoaArrayWrapper.endIndex.getter(v82);
    swift_bridgeObjectRelease(v7);
  }
  else
  {
    v9 = *(void ***)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v10 = a2;
  if (v9 == *(void ***)(a2 + 16))
  {
LABEL_8:
    if (!v8)
      goto LABEL_9;
LABEL_61:
    if (v7 < 0)
      v69 = v7;
    else
      v69 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v7, 2);
    v16 = _CocoaArrayWrapper.endIndex.getter(v69);
    swift_bridgeObjectRelease(v7);
    if (v16)
      goto LABEL_10;
LABEL_65:
    swift_bridgeObjectRelease(v7);
LABEL_66:
    swift_bridgeObjectRelease(v7);
    if (qword_100836BD8 != -1)
      swift_once(&qword_100836BD8, sub_1000A7580);
    v70 = type metadata accessor for Logger(0);
    v71 = sub_10001AAA8(v70, (uint64_t)qword_100838550);
    v65 = Logger.logObject.getter(v71);
    v66 = static os_log_type_t.info.getter(v65);
    if (os_log_type_enabled(v65, v66))
    {
      v67 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v67 = 0;
      v68 = "[implSort] Objects are already in correct order. Will skip sorting";
LABEL_70:
      _os_log_impl((void *)&_mh_execute_header, v65, v66, v68, v67, 2u);
      swift_slowDealloc(v67, -1, -1);
    }
LABEL_71:

    v72 = v98;
LABEL_72:
    swift_bridgeObjectRelease(v72);
    return;
  }
  if (qword_100836BD8 != -1)
    swift_once(&qword_100836BD8, sub_1000A7580);
  v11 = type metadata accessor for Logger(0);
  sub_10001AAA8(v11, (uint64_t)qword_100838550);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(a2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(22, -1);
    *(_DWORD *)v15 = 134218240;
    aBlock = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v96);
    swift_bridgeObjectRelease(v7);
    *(_WORD *)(v15 + 12) = 2048;
    aBlock = *(void ***)(a2 + 16);
    v10 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v96);
    swift_bridgeObjectRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "[implSort] Count of CD objects is not same as that of the Ordering Map {allCDObjects#: %ld, orderingIndexMap#: %ld}", (uint8_t *)v15, 0x16u);
    swift_slowDealloc(v15, -1, -1);

    goto LABEL_8;
  }

  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v7);
  if (v8)
    goto LABEL_61;
LABEL_9:
  v16 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v7);
  if (!v16)
    goto LABEL_65;
LABEL_10:
  v84 = v9;
  v85 = (void *)isUniquelyReferenced_nonNull_native;
  v17 = 0;
  v18 = 0;
  v91 = v7 & 0xC000000000000001;
  v88 = v7 & 0xFFFFFFFFFFFFFF8;
  v89 = v16;
  v90 = v7;
  v87 = 0;
  do
  {
    while (1)
    {
      if (v91)
      {
        v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v7);
      }
      else
      {
        if (v18 >= *(_QWORD *)(v88 + 16))
          goto LABEL_84;
        v19 = *(id *)(v7 + 8 * v18 + 32);
      }
      v20 = v19;
      if (__OFADD__(v18, 1))
      {
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
        goto LABEL_85;
      }
      v21 = objc_opt_self(REMCDList);
      v22 = (void *)swift_dynamicCastObjCClass(v20, v21);
      v93 = v17;
      v94 = v18 + 1;
      if (v22
        || (v24 = objc_opt_self(REMCDSmartList),
            (v22 = (void *)swift_dynamicCastObjCClass(v20, v24)) != 0))
      {
        v23 = objc_msgSend(v22, "parentList");
        goto LABEL_21;
      }
      v25 = objc_opt_self(REMCDReminder);
      v26 = (void *)swift_dynamicCastObjCClass(v20, v25);
      if (v26)
      {
        v23 = objc_msgSend(v26, "parentReminder");
LABEL_21:
        v27 = v23;
        v8 = v27;
        if (v27)
          v28 = v27;
        else
          v28 = v20;
        goto LABEL_24;
      }
      if (qword_100836BD8 != -1)
        swift_once(&qword_100836BD8, sub_1000A7580);
      v48 = type metadata accessor for Logger(0);
      sub_10001AAA8(v48, (uint64_t)qword_100838550);
      v28 = v20;
      v49 = Logger.logObject.getter(v28);
      v50 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v49, v50))
      {
        v51 = swift_slowAlloc(12, -1);
        v52 = (void **)swift_slowAlloc(32, -1);
        aBlock = v52;
        *(_DWORD *)v51 = 136315138;
        v28 = v28;
        v53 = objc_msgSend(v28, "description");
        v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
        v7 = v55;

        *(_QWORD *)(v51 + 4) = sub_10001A820(v54, v7, (uint64_t *)&aBlock);
        swift_bridgeObjectRelease(v7);
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "[implSort] Unexpected CD object in ordered set {object: %s}", (uint8_t *)v51, 0xCu);
        swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v52, -1, -1);
        v56 = v51;
        v10 = a2;
        swift_slowDealloc(v56, -1, -1);

      }
      else
      {

      }
      v8 = 0;
LABEL_24:
      v29 = v28;
      v30 = sub_1000A8B60(v29, v10);

      if (v8)
        v31 = sub_1000A8B60(v20, v10);
      else
        v31 = 0;
      v32 = objc_msgSend(v20, "objectID");
      v33 = (uint64_t)v98;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v98);
      aBlock = (void **)v33;
      v98 = (void **)0x8000000000000000;
      v35 = sub_1002C6690((uint64_t)v32);
      v36 = *(_QWORD *)(v33 + 16);
      v37 = (v34 & 1) == 0;
      v38 = v36 + v37;
      if (__OFADD__(v36, v37))
        goto LABEL_82;
      v39 = v34;
      if (*(_QWORD *)(v33 + 24) >= v38)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_1002D5DD0();
      }
      else
      {
        sub_1002CBF24(v38, isUniquelyReferenced_nonNull_native);
        v40 = sub_1002C6690((uint64_t)v32);
        if ((v39 & 1) != (v41 & 1))
          goto LABEL_90;
        v35 = v40;
      }
      v17 = v31 | (unint64_t)(v30 << 32);
      v42 = aBlock;
      if ((v39 & 1) != 0)
      {
        *((_QWORD *)aBlock[7] + v35) = v17;
        v7 = v90;
      }
      else
      {
        aBlock[(v35 >> 6) + 8] = (void *)((unint64_t)aBlock[(v35 >> 6) + 8] | (1 << v35));
        v43 = 8 * v35;
        *(_QWORD *)((char *)v42[6] + v43) = v32;
        *(_QWORD *)((char *)v42[7] + v43) = v17;
        v44 = (char *)v42[2];
        v45 = __OFADD__(v44, 1);
        v46 = v44 + 1;
        v7 = v90;
        if (v45)
          goto LABEL_83;
        v42[2] = v46;
        v47 = v32;
      }
      v98 = v42;

      swift_bridgeObjectRelease(0x8000000000000000);
      if (v17 >= v93)
        break;
      ++v18;
      v10 = a2;
      if (v94 == v89)
      {
        swift_bridgeObjectRelease(v7);
        p_weak_ivar_lyt = (void **)(&RDAlarmEngine + 56);
        goto LABEL_49;
      }
      v87 = 1;
    }
    ++v18;
    v10 = a2;
  }
  while (v94 != v89);
  swift_bridgeObjectRelease(v7);
  p_weak_ivar_lyt = &RDAlarmEngine.weak_ivar_lyt;
  if ((v87 & 1) == 0)
    goto LABEL_66;
LABEL_49:
  if ((a3 & 1) != 0)
  {
    if (p_weak_ivar_lyt[379] != (void *)-1)
      swift_once(&qword_100836BD8, sub_1000A7580);
    v58 = type metadata accessor for Logger(0);
    v59 = sub_10001AAA8(v58, (uint64_t)qword_100838550);
    v60 = Logger.logObject.getter(v59);
    v61 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v61))
    {
      v62 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v62 = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "[implSort] LOOKATME: Pre-sorted but full CD mutableOrderedSet.sort still needed.", v62, 2u);
      swift_slowDealloc(v62, -1, -1);
    }

  }
  if ((objc_msgSend((id)objc_opt_self(REMListStorage), "_forceDisableFullRemindersSorting") & 1) != 0)
  {
    swift_bridgeObjectRelease(v7);
    if (p_weak_ivar_lyt[379] != (void *)-1)
      swift_once(&qword_100836BD8, sub_1000A7580);
    v63 = type metadata accessor for Logger(0);
    v64 = sub_10001AAA8(v63, (uint64_t)qword_100838550);
    v65 = Logger.logObject.getter(v64);
    v66 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v65, v66))
    {
      v67 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v67 = 0;
      v68 = "[implSort] _forceDisableFullRemindersSorting = YES so we will abort from running mutableOrderedSet.sort now.";
      goto LABEL_70;
    }
    goto LABEL_71;
  }
  if (p_weak_ivar_lyt[379] != (void *)-1)
    swift_once(&qword_100836BD8, sub_1000A7580);
  v73 = type metadata accessor for Logger(0);
  sub_10001AAA8(v73, (uint64_t)qword_100838550);
  swift_bridgeObjectRetain(v7);
  v75 = Logger.logObject.getter(v74);
  v76 = static os_log_type_t.info.getter(v75);
  if (os_log_type_enabled(v75, v76))
  {
    v77 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v77 = 134217984;
    swift_bridgeObjectRelease(v7);
    aBlock = v84;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v96);
    swift_bridgeObjectRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v75, v76, "[implSort] Performing full CD mutableOrderedSet.sort {total.count: %ld}", v77, 0xCu);
    swift_slowDealloc(v77, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v7, 2);
  }
  v78 = swift_allocObject(&unk_1007E2838, 24, 7);
  *(_QWORD *)(v78 + 16) = &v98;
  v79 = swift_allocObject(&unk_1007E2860, 32, 7);
  *(_QWORD *)(v79 + 16) = sub_1000A90DC;
  *(_QWORD *)(v79 + 24) = v78;
  v96[3] = sub_1000A90F4;
  v97 = v79;
  aBlock = _NSConcreteStackBlock;
  v96[0] = 1107296256;
  v96[1] = sub_100256CD4;
  v96[2] = &unk_1007E2878;
  v80 = _Block_copy(&aBlock);
  v81 = v97;
  swift_retain();
  swift_release(v81);
  objc_msgSend(v85, "sortWithOptions:usingComparator:", 16, v80);
  _Block_release(v80);
  LOBYTE(v80) = swift_isEscapingClosureAtFileLocation(v79, "", 122, 228, 59, 1);
  swift_release(v79);
  if ((v80 & 1) == 0)
  {
    v72 = v98;
    swift_release(v78);
    goto LABEL_72;
  }
  __break(1u);
LABEL_90:
  v83 = sub_1000151B0(0, &qword_100843EA0, NSManagedObjectID_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v83);
  __break(1u);
}

uint64_t sub_1000A8284(uint64_t a1, uint64_t a2, _BYTE *a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  id v39;
  _BYTE v40[32];

  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v38 - v12;
  v14 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v14);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v38 - v18;
  sub_10001A670(a1, (uint64_t)v40);
  v20 = sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
  if ((swift_dynamicCast(&v39, v40, (char *)&type metadata for Any + 8, v20, 6) & 1) == 0)
    return 0;
  v21 = v39;
  v22 = objc_msgSend(v39, "identifier");
  if (v22)
  {
    v23 = v22;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v22);

    v24 = 0;
  }
  else
  {
    v24 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v16, v24, 1, v7);
  sub_1000A5CA8((uint64_t)v16, (uint64_t)v19, (uint64_t *)&unk_100839C80);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v19, 1, v7))
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v19, v7);
    v27 = sub_10000882C((uint64_t)v19, (uint64_t *)&unk_100839C80);
    v28 = UUID.uuidString.getter(v27);
    v30 = v29;
    v31 = *(void (**)(char *, uint64_t))(v8 + 8);
    v31(v13, v7);
    v32 = objc_msgSend(a4, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v32);

    v34 = UUID.uuidString.getter(v33);
    v36 = v35;
    v31(v10, v7);
    if (v28 == v34 && v30 == v36)
    {
      swift_bridgeObjectRelease_n(v30, 2);
    }
    else
    {
      v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, v34, v36, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v37 & 1) == 0)
      {

        return 0;
      }
    }
    v25 = 1;
    *a3 = 1;

    return v25;
  }

  sub_10000882C((uint64_t)v19, (uint64_t *)&unk_100839C80);
  return 0;
}

uint64_t sub_1000A8544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v7)(_QWORD *, uint64_t, uint64_t, __n128);
  __n128 v8;
  _QWORD v10[4];

  v7 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, __n128))(a1 + 32);
  v10[3] = swift_getObjectType();
  v10[0] = a2;
  v8 = swift_unknownObjectRetain(a2);
  LOBYTE(a4) = v7(v10, a3, a4, v8);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v10);
  return a4 & 1;
}

uint64_t sub_1000A85BC(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[24];

  v6 = a4 + 16;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v9 = v8;
  swift_beginAccess(v6, v14, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a4 + 16));
  v13 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 16) = 0x8000000000000000;
  sub_10028B5CC(a2, v7, v9, isUniquelyReferenced_nonNull_native);
  v11 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 16) = v13;
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v11);
  return swift_endAccess(v14);
}

id sub_1000A866C(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  __n128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  id v31;
  Class isa;
  NSString v33;
  id v34;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  __int128 v49;
  char *v50;
  uint64_t v51;
  _QWORD v52[4];
  _QWORD v53[4];
  _OWORD v54[2];
  __int128 v55;
  uint64_t v56;

  v47 = a2;
  v46 = a1;
  v3 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v3);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v45 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for NSFastEnumerationIterator(0);
  v42 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = objc_msgSend(objc_allocWithZone((Class)NSMutableOrderedSet), "init");
  v44 = v2;
  v11 = objc_msgSend(v2, "orderedSet");
  NSOrderedSet.makeIterator()(v12);

  NSFastEnumerationIterator.next()(v13);
  if (v56)
  {
    v50 = (char *)&type metadata for Any + 8;
    *(_QWORD *)&v14 = 138412290;
    v49 = v14;
    while (1)
    {
      sub_10001A6CC(&v55, v54);
      sub_10001A670((uint64_t)v54, (uint64_t)v53);
      v16 = sub_1000151B0(0, (unint64_t *)&unk_10083FE30, NSString_ptr);
      if ((swift_dynamicCast(v52, v53, v50, v16, 6) & 1) == 0)
        goto LABEL_8;
      v17 = (void *)v52[0];
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52[0]);
      UUID.init(uuidString:)(v18, v19);
      v20 = swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v7 + 48))(v5, 1, v6, v20) == 1)
        break;
      v30 = v45;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v45, v5, v6);
      v31 = objc_allocWithZone((Class)REMObjectID);
      swift_bridgeObjectRetain(v47);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      v33 = String._bridgeToObjectiveC()();
      v34 = objc_msgSend(v31, "initWithUUID:entityName:", isa, v33, swift_bridgeObjectRelease().n128_f64[0]);

      objc_msgSend(v48, "addObject:", v34);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v30, v6);
LABEL_4:
      v15 = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v54);
      NSFastEnumerationIterator.next()(v15);
      if (!v56)
        goto LABEL_16;
    }

    sub_10000882C((uint64_t)v5, (uint64_t *)&unk_100839C80);
LABEL_8:
    if (qword_100836BD8 != -1)
      swift_once(&qword_100836BD8, sub_1000A7580);
    v21 = type metadata accessor for Logger(0);
    sub_10001AAA8(v21, (uint64_t)qword_100838550);
    v22 = sub_10001A670((uint64_t)v54, (uint64_t)v53);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = v6;
      v26 = v7;
      v27 = swift_slowAlloc(12, -1);
      v28 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v27 = v49;
      sub_10001A670((uint64_t)v53, (uint64_t)v52);
      if (swift_dynamicCast(&v51, v52, (char *)&type metadata for Any + 8, v16, 6))
        v29 = v51;
      else
        v29 = NSString.init(stringLiteral:)("nil", 3, 2);
      *(_QWORD *)(v27 + 4) = v29;
      *v28 = v29;
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v53);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Invalid UUID found in REMCRMergeableOrderedSet<NSString> when converting it to REMCRMergeableOrderedSet<REMObjectID> {uuidString: %@}", (uint8_t *)v27, 0xCu);
      v35 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v28, 1, v35);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      v7 = v26;
      v6 = v25;
    }
    else
    {

      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v53);
    }
    goto LABEL_4;
  }
LABEL_16:
  (*(void (**)(char *, uint64_t))(v42 + 8))(v10, v43);
  v36 = objc_msgSend(v44, "replicaIDSource");
  v37 = objc_allocWithZone((Class)REMCRMergeableOrderedSet);
  v38 = v48;
  v39 = objc_msgSend(v37, "initWithReplicaIDSource:orderedSet:", v36, v48);

  return v39;
}

uint64_t sub_1000A8B60(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v32;
  uint64_t v33;

  v33 = a2;
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v15 = __chkstk_darwin(v14).n128_u64[0];
  v17 = (char *)&v32 - v16;
  v18 = objc_msgSend(a1, "identifier", v15);
  if (v18)
  {
    v19 = v18;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

    v20 = 0;
  }
  else
  {
    v20 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v13, v20, 1, v3);
  sub_1000A5CA8((uint64_t)v13, (uint64_t)v17, (uint64_t *)&unk_100839C80);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v17, 1, v3))
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v17, v3);
    v24 = sub_10000882C((uint64_t)v17, (uint64_t *)&unk_100839C80);
    v25 = UUID.uuidString.getter(v24);
    v27 = v26;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v28 = v33;
    if (*(_QWORD *)(v33 + 16))
    {
      swift_bridgeObjectRetain(v27);
      v29 = sub_10001A6DC(v25, v27);
      if ((v30 & 1) != 0)
      {
        v23 = *(unsigned int *)(*(_QWORD *)(v28 + 56) + 4 * v29);
        swift_bridgeObjectRelease_n(v27, 2);
        return v23;
      }
      swift_bridgeObjectRelease(v27);
    }
    v23 = String.hashValue.getter(v25, v27);
    swift_bridgeObjectRelease(v27);
    return v23;
  }
  sub_10000882C((uint64_t)v17, (uint64_t *)&unk_100839C80);
  v21 = objc_msgSend(a1, "objectID");
  v22 = objc_msgSend(v21, "URIRepresentation");

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v23 = URL.hashValue.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v23;
}

uint64_t sub_1000A8DFC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  NSObject *v29;
  _BYTE v30[32];

  sub_10001A670(a1, (uint64_t)v30);
  v5 = sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
  if ((swift_dynamicCast(&v29, v30, (char *)&type metadata for Any + 8, v5, 6) & 1) == 0)
    goto LABEL_12;
  v6 = v29;
  sub_10001A670(a2, (uint64_t)v30);
  if ((swift_dynamicCast(&v29, v30, (char *)&type metadata for Any + 8, v5, 6) & 1) == 0)
  {

LABEL_12:
    if (qword_100836BD8 != -1)
      swift_once(&qword_100836BD8, sub_1000A7580);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_10001AAA8(v20, (uint64_t)qword_100838550);
    v6 = Logger.logObject.getter(v21);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v22, "relationship contains non-REMCDObject objects", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }
    goto LABEL_21;
  }
  v7 = v29;
  v8 = -[NSObject objectID](v6, "objectID");
  v9 = v8;
  v10 = *a3;
  if (!*(_QWORD *)(*a3 + 16)
    || (v11 = sub_1002C6690((uint64_t)v8), (v12 & 1) == 0)
    || (v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v11),
        v9,
        v14 = -[NSObject objectID](v7, "objectID"),
        v9 = v14,
        v15 = *a3,
        !*(_QWORD *)(*a3 + 16))
    || (v16 = sub_1002C6690((uint64_t)v14), (v17 & 1) == 0))
  {

    if (qword_100836BD8 != -1)
      swift_once(&qword_100836BD8, sub_1000A7580);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_10001AAA8(v24, (uint64_t)qword_100838550);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "could not get a sorting order from object", v28, 2u);
      swift_slowDealloc(v28, -1, -1);

      return 0;
    }

LABEL_21:
    return 0;
  }
  v18 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v16);

  if (v13 == v18)
    return 0;
  if (v13 < v18)
    return -1;
  else
    return 1;
}

uint64_t sub_1000A90CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A90DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000A8DFC(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_1000A90E4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A90F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100256CB4(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

void sub_1000A90FC(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  void ***p_aBlock;
  uint64_t v28;
  NSObject *v29;
  void (*v30)(char *, uint64_t);
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  id v43;
  NSObject *v44;
  NSObject *v45;
  char **v46;
  uint64_t v47;
  unint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  id v54;
  unint64_t v55;
  char v56;
  id v57;
  uint64_t v58;
  NSIndexSet *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  void **v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  _QWORD *v67;
  void **v68;
  os_log_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  os_log_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  void **aBlock;
  _QWORD v79[2];
  void *v80;
  uint64_t (*v81)();
  void *v82;
  id v83;
  _OWORD v84[2];

  v77 = a2;
  v3 = type metadata accessor for IndexSet(0);
  v76 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v71 - v11;
  v13 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v13);
  v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v17 = __chkstk_darwin(v16).n128_u64[0];
  v19 = (char *)&v71 - v18;
  v20 = objc_msgSend(a1, "lastObject", v17);
  if (v20)
  {
    v21 = v20;
    _bridgeAnyObjectToAny(_:)(v84, v20);
    swift_unknownObjectRelease(v21);
  }
  else
  {
    memset(v84, 0, sizeof(v84));
  }
  sub_1000A5CA8((uint64_t)v84, (uint64_t)&aBlock, (uint64_t *)&unk_10083D5B0);
  if (v80)
  {
    v22 = sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
    if ((swift_dynamicCast(&v83, &aBlock, (char *)&type metadata for Any + 8, v22, 6) & 1) == 0)
      return;
    v75 = v83;
    v23 = objc_msgSend(v83, "identifier");
    if (v23)
    {
      v24 = v23;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v23);

      v25 = 0;
    }
    else
    {
      v25 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v15, v25, 1, v6);
    sub_1000A5CA8((uint64_t)v15, (uint64_t)v19, (uint64_t *)&unk_100839C80);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v19, 1, v6))
    {

      v26 = (uint64_t *)&unk_100839C80;
      p_aBlock = (void ***)v19;
      goto LABEL_12;
    }
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v12, v19, v6);
    v28 = sub_10000882C((uint64_t)v19, (uint64_t *)&unk_100839C80);
    v73 = UUID.uuidString.getter(v28);
    v74 = v29;
    v30 = *(void (**)(char *, uint64_t))(v7 + 8);
    v30(v12, v6);
    isEscapingClosureAtFileLocation = v77;
    if (*(_QWORD *)(v77 + 16) < 2uLL)
    {
      swift_bridgeObjectRetain(v77);
    }
    else
    {
      v32 = qword_100836BD8;
      swift_bridgeObjectRetain(v77);
      if (v32 != -1)
        swift_once(&qword_100836BD8, sub_1000A7580);
      v33 = type metadata accessor for Logger(0);
      sub_10001AAA8(v33, (uint64_t)qword_100838550);
      swift_bridgeObjectRetain(isEscapingClosureAtFileLocation);
      v35 = Logger.logObject.getter(v34);
      v36 = isEscapingClosureAtFileLocation;
      v37 = static os_log_type_t.error.getter(v35);
      if (os_log_type_enabled(v35, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v38 = 134217984;
        aBlock = *(void ***)(v36 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v79);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v35, v37, "[implSort] pre-sort: we have more than 1 sorting hints but we currently only support to accomate 1 {count: %ld}", v38, 0xCu);
        swift_slowDealloc(v38, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease();
      }
      isEscapingClosureAtFileLocation = v36;
    }
    v39 = (void *)sub_10027B740(isEscapingClosureAtFileLocation);
    if (!v39)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    v40 = v39;
    v41 = objc_msgSend(v39, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v41);

    v43 = (id)UUID.uuidString.getter(v42);
    v45 = v44;
    v30(v9, v6);
    v46 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
    v47 = (uint64_t)v74;
    v72 = v40;
    if ((id)v73 == v43 && v74 == v45)
    {
      v48 = swift_bridgeObjectRelease_n(v74, 2).n128_u64[0];
    }
    else
    {
      isEscapingClosureAtFileLocation = _stringCompareWithSmolCheck(_:_:expecting:)(v73, v74, v43, v45, 0);
      swift_bridgeObjectRelease();
      v48 = swift_bridgeObjectRelease().n128_u64[0];
      if ((isEscapingClosureAtFileLocation & 1) == 0)
      {
        v46 = (char **)swift_allocObject(&unk_1007E28B0, 24, 7);
        v46[2] = (char *)v40;
        v52 = swift_allocObject(&unk_1007E28D8, 32, 7);
        *(_QWORD *)(v52 + 16) = sub_1000A99C0;
        *(_QWORD *)(v52 + 24) = v46;
        v81 = sub_1000A99D8;
        v82 = (void *)v52;
        aBlock = _NSConcreteStackBlock;
        v79[0] = 1107296256;
        v79[1] = sub_1000A8544;
        v80 = &unk_1007E28F0;
        v53 = _Block_copy(&aBlock);
        v43 = v82;
        v54 = v40;
        swift_retain();
        swift_release(v43);
        v50 = (uint64_t)objc_msgSend(a1, "indexOfObjectPassingTest:", v53);
        _Block_release(v53);
        isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v52, "", 122, 67, 53, 1);
        swift_release(v52);
        if ((isEscapingClosureAtFileLocation & 1) == 0)
        {
          v51 = v77;
          isEscapingClosureAtFileLocation = (uint64_t)sub_1000A99C0;
          goto LABEL_32;
        }
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
    }
    v49 = objc_msgSend(a1, "count", *(double *)&v48);
    v50 = (uint64_t)v49 - 1;
    if (!__OFSUB__(v49, 1))
    {
      isEscapingClosureAtFileLocation = 0;
      v46 = 0;
      v51 = v77;
LABEL_32:
      if (v50 == NSNotFound.getter() || v50 < 0 || v50 >= (uint64_t)objc_msgSend(a1, "count"))
      {
        swift_bridgeObjectRelease();

      }
      else
      {
        if (*(_QWORD *)(v51 + 16))
        {
          v43 = v72;
          v55 = sub_1002C66DC((uint64_t)v43);
          if ((v56 & 1) != 0)
          {
            v47 = *(_QWORD *)(*(_QWORD *)(v51 + 56) + 8 * v55);

            if (v47 < 0 || v47 >= (uint64_t)objc_msgSend(a1, "count") || v50 == v47)
            {
              swift_bridgeObjectRelease();

              v57 = v75;
              goto LABEL_43;
            }
            IndexSet.init(integer:)(v50);
            IndexSet._bridgeToObjectiveC()(v59);
            v61 = v60;
            (*(void (**)(char *, uint64_t))(v76 + 8))(v5, v3);
            objc_msgSend(a1, "moveObjectsAtIndexes:toIndex:", v61, v47);

            if (qword_100836BD8 == -1)
            {
LABEL_51:
              v62 = type metadata accessor for Logger(0);
              sub_10001AAA8(v62, (uint64_t)qword_100838550);
              v63 = (void **)v43;
              v64 = Logger.logObject.getter(v63);
              v65 = static os_log_type_t.info.getter(v64);
              if (os_log_type_enabled(v64, v65))
              {
                v66 = swift_slowAlloc(32, -1);
                v67 = (_QWORD *)swift_slowAlloc(8, -1);
                *(_DWORD *)v66 = 138412802;
                v76 = isEscapingClosureAtFileLocation;
                aBlock = v63;
                v74 = v64;
                v68 = v63;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v79);
                *v67 = v72;

                *(_WORD *)(v66 + 12) = 2048;
                aBlock = (void **)v50;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v79);
                *(_WORD *)(v66 + 22) = 2048;
                aBlock = (void **)v47;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v79);
                v69 = v74;
                _os_log_impl((void *)&_mh_execute_header, v74, v65, "[implSort] pre-sort: moved object {objectID: %@, from: %ld, to: %ld}", (uint8_t *)v66, 0x20u);
                v70 = sub_10001A630((uint64_t *)&unk_100839E70);
                swift_arrayDestroy(v67, 1, v70);
                swift_slowDealloc(v67, -1, -1);
                swift_slowDealloc(v66, -1, -1);
                swift_bridgeObjectRelease();

                v58 = v76;
                goto LABEL_45;
              }

              swift_bridgeObjectRelease();
LABEL_44:
              v58 = isEscapingClosureAtFileLocation;
LABEL_45:
              sub_1000A5C24(v58, (uint64_t)v46);
              return;
            }
LABEL_56:
            swift_once(&qword_100836BD8, sub_1000A7580);
            goto LABEL_51;
          }
          swift_bridgeObjectRelease();

        }
        else
        {
          swift_bridgeObjectRelease();
          v43 = v75;
        }

      }
      v57 = v72;
LABEL_43:

      goto LABEL_44;
    }
    __break(1u);
    goto LABEL_55;
  }
  v26 = (uint64_t *)&unk_10083D5B0;
  p_aBlock = &aBlock;
LABEL_12:
  sub_10000882C((uint64_t)p_aBlock, v26);
}

uint64_t sub_1000A999C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A99C0(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  return sub_1000A8284(a1, a2, a3, *(void **)(v3 + 16));
}

uint64_t sub_1000A99C8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A99D8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_1000A99FC(unint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1000151B0(255, a2, a3);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSOrderedSet, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t StartMigrationRequest.source.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100008868(v1, a1, &qword_100838570);
}

uint64_t StartMigrationRequest.source.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1000BABD0(a1, v1, &qword_100838570);
}

Swift::Void (__swiftcall *StartMigrationResponse.Details.timeElapsed.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t StartMigrationRequest.archivePath.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t started;
  uint64_t v6;

  v1 = sub_10001A630(&qword_100838570);
  __chkstk_darwin(v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008868(v0, (uint64_t)v3, &qword_100838570);
  started = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 48))(v3, 1, started) == 1)
  {
    sub_10000882C((uint64_t)v3, &qword_100838570);
    return 0;
  }
  if (swift_getEnumCaseMultiPayload(v3, started))
  {
    sub_10001C744((uint64_t)v3, type metadata accessor for StartMigrationRequest.OneOf_Source);
    return 0;
  }
  return *(_QWORD *)v3;
}

uint64_t type metadata accessor for StartMigrationRequest.OneOf_Source(uint64_t a1)
{
  return sub_10001522C(a1, qword_100838968, (uint64_t)&nominal type descriptor for StartMigrationRequest.OneOf_Source);
}

uint64_t StartMigrationRequest.archivePath.setter(uint64_t a1, uint64_t a2)
{
  return sub_1000A9FC0(a1, a2, 0);
}

void (*StartMigrationRequest.archivePath.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t started;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[2] = v2;
  v5 = sub_10001A630(&qword_100838570);
  v6 = (uint64_t *)malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[3] = v6;
  sub_100008868(v2, (uint64_t)v6, &qword_100838570);
  started = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  v4[4] = started;
  v8 = *(_QWORD *)(started - 8);
  v4[5] = v8;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(v6, 1, started) == 1)
  {
    sub_10000882C((uint64_t)v6, &qword_100838570);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload(v6, started))
    {
      v9 = *v6;
      v10 = v6[1];
      goto LABEL_7;
    }
    sub_10001C744((uint64_t)v6, type metadata accessor for StartMigrationRequest.OneOf_Source);
  }
  v9 = 0;
  v10 = 0xE000000000000000;
LABEL_7:
  *v4 = v9;
  v4[1] = v10;
  return sub_1000A9C8C;
}

void sub_1000A9C8C(uint64_t **a1, char a2)
{
  sub_1000AA138(a1, a2, 0);
}

uint64_t StartMigrationRequest.credential.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t started;
  __n128 v9;
  uint64_t v10;

  v2 = v1;
  v4 = sub_10001A630(&qword_100838570);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008868(v2, (uint64_t)v6, &qword_100838570);
  started = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 48))(v6, 1, started) == 1)
  {
    sub_10000882C((uint64_t)v6, &qword_100838570);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(v6, started) == 1)
      return sub_1000B8680((uint64_t)v6, a1, type metadata accessor for StartMigrationRequest.Credential);
    sub_10001C744((uint64_t)v6, type metadata accessor for StartMigrationRequest.OneOf_Source);
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0xE000000000000000;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0xE000000000000000;
  *(_DWORD *)(a1 + 64) = 0;
  type metadata accessor for StartMigrationRequest.Credential(0);
  return UnknownStorage.init()(v9);
}

uint64_t StartMigrationRequest.Credential.init()@<X0>(uint64_t a1@<X8>)
{
  __n128 v1;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0xE000000000000000;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0xE000000000000000;
  *(_DWORD *)(a1 + 64) = 0;
  type metadata accessor for StartMigrationRequest.Credential(0);
  return UnknownStorage.init()(v1);
}

uint64_t type metadata accessor for StartMigrationRequest.Credential(uint64_t a1)
{
  return sub_10001522C(a1, qword_1008389F8, (uint64_t)&nominal type descriptor for StartMigrationRequest.Credential);
}

uint64_t StartMigrationRequest.credential.setter(uint64_t a1)
{
  return sub_1000AD498(a1, &qword_100838570, type metadata accessor for StartMigrationRequest.Credential, type metadata accessor for StartMigrationRequest.OneOf_Source, 1);
}

void (*StartMigrationRequest.credential.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t started;
  uint64_t v9;
  __n128 v10;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_10001A630(&qword_100838570);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for StartMigrationRequest.Credential(0) - 8) + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  sub_100008868(v1, (uint64_t)v5, &qword_100838570);
  started = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  v3[4] = started;
  v9 = *(_QWORD *)(started - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, started) == 1)
  {
    sub_10000882C((uint64_t)v5, &qword_100838570);
LABEL_6:
    *v7 = 0;
    v7[1] = 0xE000000000000000;
    v7[2] = 0;
    v7[3] = 0xE000000000000000;
    v7[4] = 0;
    v7[5] = 0xE000000000000000;
    v7[6] = 0;
    v7[7] = 0xE000000000000000;
    *((_DWORD *)v7 + 16) = 0;
    UnknownStorage.init()(v10);
    return sub_1000A9F8C;
  }
  if (swift_getEnumCaseMultiPayload(v5, started) != 1)
  {
    sub_10001C744((uint64_t)v5, type metadata accessor for StartMigrationRequest.OneOf_Source);
    goto LABEL_6;
  }
  sub_1000B8680((uint64_t)v5, (uint64_t)v7, type metadata accessor for StartMigrationRequest.Credential);
  return sub_1000A9F8C;
}

void sub_1000A9F8C(uint64_t **a1, char a2)
{
  sub_1000AD680(a1, a2, &qword_100838570, type metadata accessor for StartMigrationRequest.Credential, 1);
}

uint64_t StartMigrationRequest.embeddedTestData.getter()
{
  return sub_1000AB100(&qword_100838570, type metadata accessor for StartMigrationRequest.OneOf_Source);
}

uint64_t StartMigrationRequest.embeddedTestData.setter(uint64_t a1, uint64_t a2)
{
  return sub_1000A9FC0(a1, a2, 2);
}

uint64_t sub_1000A9FC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t started;

  sub_10000882C((uint64_t)v3, &qword_100838570);
  *v3 = a1;
  v3[1] = a2;
  started = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  swift_storeEnumTagMultiPayload(v3, started, a3);
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 56))(v3, 0, 1, started);
}

void (*StartMigrationRequest.embeddedTestData.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t started;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[2] = v2;
  v5 = sub_10001A630(&qword_100838570);
  v6 = (uint64_t *)malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[3] = v6;
  sub_100008868(v2, (uint64_t)v6, &qword_100838570);
  started = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  v4[4] = started;
  v8 = *(_QWORD *)(started - 8);
  v4[5] = v8;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(v6, 1, started) == 1)
  {
    sub_10000882C((uint64_t)v6, &qword_100838570);
LABEL_6:
    v9 = 0;
    v10 = 0xE000000000000000;
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload(v6, started) != 2)
  {
    sub_10001C744((uint64_t)v6, type metadata accessor for StartMigrationRequest.OneOf_Source);
    goto LABEL_6;
  }
  v9 = *v6;
  v10 = v6[1];
LABEL_7:
  *v4 = v9;
  v4[1] = v10;
  return sub_1000AA130;
}

void sub_1000AA130(uint64_t **a1, char a2)
{
  sub_1000AA138(a1, a2, 2);
}

void sub_1000AA138(uint64_t **a1, char a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;

  v4 = *a1;
  v6 = **a1;
  v5 = (*a1)[1];
  v7 = (*a1)[4];
  v8 = (*a1)[5];
  v10 = (_QWORD *)(*a1)[2];
  v9 = (void *)(*a1)[3];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain((*a1)[1]);
    sub_10000882C((uint64_t)v10, &qword_100838570);
    *v10 = v6;
    v10[1] = v5;
    swift_storeEnumTagMultiPayload(v10, v7, a3);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
    swift_bridgeObjectRelease(v4[1]);
  }
  else
  {
    sub_10000882C((*a1)[2], &qword_100838570);
    *v10 = v6;
    v10[1] = v5;
    swift_storeEnumTagMultiPayload(v10, v7, a3);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
  }
  free(v9);
  free(v4);
}

uint64_t StartMigrationRequest.disableCache.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for StartMigrationRequest(0) + 20));
}

uint64_t type metadata accessor for StartMigrationRequest(uint64_t a1)
{
  return sub_10001522C(a1, (uint64_t *)&unk_1008388B0, (uint64_t)&nominal type descriptor for StartMigrationRequest);
}

uint64_t StartMigrationRequest.disableCache.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for StartMigrationRequest(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

Swift::Void (__swiftcall *StartMigrationRequest.disableCache.modify())()
{
  type metadata accessor for StartMigrationRequest(0);
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t StartMigrationRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AAAB0(type metadata accessor for StartMigrationRequest, a1);
}

uint64_t StartMigrationRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000AAB08(a1, type metadata accessor for StartMigrationRequest);
}

Swift::Void (__swiftcall *StartMigrationRequest.unknownFields.modify())()
{
  type metadata accessor for StartMigrationRequest(0);
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t StartMigrationRequest.Credential.baseURL.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t StartMigrationRequest.Credential.baseURL.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

Swift::Void (__swiftcall *StartMigrationResponse.Details.remindersMigrated.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t StartMigrationRequest.Credential.hostname.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t StartMigrationRequest.Credential.hostname.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 40));
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

Swift::Void (__swiftcall *StartMigrationRequest.Credential.hostname.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t StartMigrationRequest.Credential.mmeAuthToken.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 56));
  return v1;
}

uint64_t StartMigrationRequest.Credential.mmeAuthToken.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 56));
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

Swift::Void (__swiftcall *StartMigrationRequest.Credential.mmeAuthToken.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t StartMigrationRequest.Credential.partition.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 64);
}

uint64_t StartMigrationRequest.Credential.partition.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 64) = result;
  return result;
}

Swift::Void (__swiftcall *StartMigrationRequest.Credential.partition.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t StartMigrationRequest.Credential.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACA78(type metadata accessor for StartMigrationRequest.Credential, a1);
}

uint64_t StartMigrationRequest.Credential.unknownFields.setter(uint64_t a1)
{
  return sub_1000ACAD0(a1, type metadata accessor for StartMigrationRequest.Credential);
}

Swift::Void (__swiftcall *StartMigrationRequest.Credential.unknownFields.modify())()
{
  type metadata accessor for StartMigrationRequest.Credential(0);
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t StartMigrationRequest.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t started;
  __n128 v3;

  started = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 56))(a1, 1, 1, started);
  *(_BYTE *)(a1 + *(int *)(type metadata accessor for StartMigrationRequest(0) + 20)) = 0;
  return UnknownStorage.init()(v3);
}

uint64_t StartMigrationResponse.result.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AB9DC(type metadata accessor for StartMigrationResponse, &qword_100838578, a1);
}

uint64_t StartMigrationResponse.result.setter(uint64_t a1)
{
  return sub_1000ABA38(a1, type metadata accessor for StartMigrationResponse, &qword_100838578);
}

Swift::Void (__swiftcall *StartMigrationResponse.result.modify())()
{
  type metadata accessor for StartMigrationResponse(0);
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t StartMigrationResponse.success.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ABAC8(&qword_100838578, type metadata accessor for StartMigrationResponse, type metadata accessor for StartMigrationResponse.OneOf_Result, (double (*)(_QWORD))type metadata accessor for StartMigrationResponse.Details, a1);
}

uint64_t StartMigrationResponse.Details.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ABBF8((void (*)(_QWORD))type metadata accessor for StartMigrationResponse.Details, a1);
}

uint64_t StartMigrationResponse.success.setter(uint64_t a1)
{
  return sub_1000AA738(a1, type metadata accessor for StartMigrationResponse.Details, 0);
}

void (*StartMigrationResponse.success.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t started;
  uint64_t v10;
  __n128 v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_10001A630(&qword_100838578);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for StartMigrationResponse.Details(0) - 8) + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  v8 = *(int *)(type metadata accessor for StartMigrationResponse(0) + 20);
  *((_DWORD *)v3 + 12) = v8;
  sub_100008868(v1 + v8, (uint64_t)v5, &qword_100838578);
  started = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  v3[4] = started;
  v10 = *(_QWORD *)(started - 8);
  v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1, started) == 1)
  {
    sub_10000882C((uint64_t)v5, &qword_100838578);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(v5, started) != 1)
    {
      sub_1000B8680((uint64_t)v5, (uint64_t)v7, type metadata accessor for StartMigrationResponse.Details);
      return sub_1000AA6E0;
    }
    sub_10001C744((uint64_t)v5, type metadata accessor for StartMigrationResponse.OneOf_Result);
  }
  *(_QWORD *)v7 = 0;
  v7[8] = 0;
  *((_DWORD *)v7 + 3) = 0;
  *((_DWORD *)v7 + 4) = 0;
  UnknownStorage.init()(v11);
  return sub_1000AA6E0;
}

void sub_1000AA6E0(uint64_t a1, char a2)
{
  sub_1000AC164(a1, a2, &qword_100838578, type metadata accessor for StartMigrationResponse.Details, 0);
}

uint64_t StartMigrationResponse.error.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ABE70(&qword_100838578, type metadata accessor for StartMigrationResponse, type metadata accessor for StartMigrationResponse.OneOf_Result, (double (*)(_QWORD))type metadata accessor for StartMigrationResponse.Error, a1);
}

uint64_t StartMigrationResponse.Error.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ABFA0((void (*)(_QWORD))type metadata accessor for StartMigrationResponse.Error, a1);
}

uint64_t StartMigrationResponse.error.setter(uint64_t a1)
{
  return sub_1000AA738(a1, type metadata accessor for StartMigrationResponse.Error, 1);
}

uint64_t sub_1000AA738(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t started;

  v7 = v3 + *(int *)(type metadata accessor for StartMigrationResponse(0) + 20);
  sub_10000882C(v7, &qword_100838578);
  sub_1000B8680(a1, v7, a2);
  started = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  swift_storeEnumTagMultiPayload(v7, started, a3);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 56))(v7, 0, 1, started);
}

void (*StartMigrationResponse.error.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t started;
  uint64_t v10;
  __n128 v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_10001A630(&qword_100838578);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for StartMigrationResponse.Error(0) - 8) + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  v8 = *(int *)(type metadata accessor for StartMigrationResponse(0) + 20);
  *((_DWORD *)v3 + 12) = v8;
  sub_100008868(v1 + v8, (uint64_t)v5, &qword_100838578);
  started = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  v3[4] = started;
  v10 = *(_QWORD *)(started - 8);
  v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1, started) == 1)
  {
    sub_10000882C((uint64_t)v5, &qword_100838578);
LABEL_6:
    *v7 = 0;
    v7[1] = 0xE000000000000000;
    *((_DWORD *)v7 + 4) = 0;
    UnknownStorage.init()(v11);
    return sub_1000AA924;
  }
  if (swift_getEnumCaseMultiPayload(v5, started) != 1)
  {
    sub_10001C744((uint64_t)v5, type metadata accessor for StartMigrationResponse.OneOf_Result);
    goto LABEL_6;
  }
  sub_1000B8680((uint64_t)v5, (uint64_t)v7, type metadata accessor for StartMigrationResponse.Error);
  return sub_1000AA924;
}

void sub_1000AA924(uint64_t a1, char a2)
{
  sub_1000AC164(a1, a2, &qword_100838578, type metadata accessor for StartMigrationResponse.Error, 1);
}

uint64_t StartMigrationResponse.log.getter()
{
  return sub_1000AC768(type metadata accessor for StartMigrationResponse);
}

uint64_t StartMigrationResponse.log.setter(uint64_t a1, uint64_t a2)
{
  return sub_1000AC7B4(a1, a2, type metadata accessor for StartMigrationResponse);
}

Swift::Void (__swiftcall *StartMigrationResponse.log.modify())()
{
  type metadata accessor for StartMigrationResponse(0);
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t StartMigrationResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AC82C(type metadata accessor for StartMigrationResponse, a1);
}

uint64_t StartMigrationResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000AC884(a1, type metadata accessor for StartMigrationResponse);
}

Swift::Void (__swiftcall *StartMigrationResponse.unknownFields.modify())()
{
  type metadata accessor for StartMigrationResponse(0);
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t static StartMigrationResponse.OneOf_Result.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000B9C60(a1, a2, type metadata accessor for StartMigrationResponse.Error, type metadata accessor for StartMigrationResponse.Details, type metadata accessor for StartMigrationResponse.OneOf_Result, &qword_100839850) & 1;
}

uint64_t static StartMigrationResponse.Details.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000B9AF8(a1, a2, (uint64_t (*)(_QWORD, double))type metadata accessor for StartMigrationResponse.Details) & 1;
}

uint64_t static StartMigrationResponse.Error.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000B999C(a1, a2, type metadata accessor for StartMigrationResponse.Error) & 1;
}

double StartMigrationResponse.Details.timeElapsed.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void StartMigrationResponse.Details.timeElapsed.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

Swift::Void (__swiftcall *StartMigrationResponse.Details.isObserver.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

Swift::Void (__swiftcall *StartMigrationResponse.Details.listsMigrated.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t StartMigrationResponse.Details.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AB5A4(type metadata accessor for StartMigrationResponse.Details, a1);
}

uint64_t StartMigrationResponse.Details.unknownFields.setter(uint64_t a1)
{
  return sub_1000AB5FC(a1, type metadata accessor for StartMigrationResponse.Details);
}

Swift::Void (__swiftcall *StartMigrationResponse.Details.unknownFields.modify())()
{
  type metadata accessor for StartMigrationResponse.Details(0);
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t StartMigrationResponse.Error.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AAAB0(type metadata accessor for StartMigrationResponse.Error, a1);
}

uint64_t sub_1000AAAB0@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 24);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t StartMigrationResponse.Error.unknownFields.setter(uint64_t a1)
{
  return sub_1000AAB08(a1, type metadata accessor for StartMigrationResponse.Error);
}

uint64_t sub_1000AAB08(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 24);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

Swift::Void (__swiftcall *StartMigrationResponse.Error.unknownFields.modify())()
{
  type metadata accessor for StartMigrationResponse.Error(0);
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t StartMigrationResponse.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t started;
  char *v3;
  uint64_t v4;
  __n128 v5;
  _QWORD *v6;

  *a1 = 0;
  a1[1] = 0xE000000000000000;
  started = type metadata accessor for StartMigrationResponse(0);
  v3 = (char *)a1 + *(int *)(started + 20);
  v4 = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  v5.n128_f64[0] = (*(double (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v6 = (_QWORD *)((char *)a1 + *(int *)(started + 24));
  *v6 = 0;
  v6[1] = 0xE000000000000000;
  return UnknownStorage.init()(v5);
}

uint64_t MigrateRequest.source.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100008868(v1, a1, &qword_100838580);
}

uint64_t MigrateRequest.source.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1000BABD0(a1, v1, &qword_100838580);
}

uint64_t MigrateRequest.user.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v10;

  v2 = v1;
  v4 = sub_10001A630(&qword_100838580);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008868(v2, (uint64_t)v6, &qword_100838580);
  v7 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    sub_10000882C((uint64_t)v6, &qword_100838580);
LABEL_5:
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    type metadata accessor for MigrateRequest.User(0);
    return UnknownStorage.init()(v8);
  }
  if (swift_getEnumCaseMultiPayload(v6, v7))
  {
    sub_10001C744((uint64_t)v6, type metadata accessor for MigrateRequest.OneOf_Source);
    goto LABEL_5;
  }
  return sub_1000B8680((uint64_t)v6, a1, type metadata accessor for MigrateRequest.User);
}

uint64_t MigrateRequest.User.init()@<X0>(uint64_t a1@<X8>)
{
  __n128 v1;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  type metadata accessor for MigrateRequest.User(0);
  return UnknownStorage.init()(v1);
}

uint64_t MigrateRequest.user.setter(uint64_t a1)
{
  return sub_1000AD498(a1, &qword_100838580, type metadata accessor for MigrateRequest.User, type metadata accessor for MigrateRequest.OneOf_Source, 0);
}

void (*MigrateRequest.user.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_10001A630(&qword_100838580);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for MigrateRequest.User(0) - 8) + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  sub_100008868(v1, (uint64_t)v5, &qword_100838580);
  v8 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  v3[4] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    sub_10000882C((uint64_t)v5, &qword_100838580);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload(v5, v8))
    {
      sub_1000B8680((uint64_t)v5, (uint64_t)v7, type metadata accessor for MigrateRequest.User);
      return sub_1000AAEE4;
    }
    sub_10001C744((uint64_t)v5, type metadata accessor for MigrateRequest.OneOf_Source);
  }
  *(_QWORD *)v7 = 0;
  v7[2] = 0;
  UnknownStorage.init()(v10);
  return sub_1000AAEE4;
}

void sub_1000AAEE4(uint64_t **a1, char a2)
{
  sub_1000AD680(a1, a2, &qword_100838580, type metadata accessor for MigrateRequest.User, 0);
}

uint64_t MigrateRequest.archivePath.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v1 = sub_10001A630(&qword_100838580);
  __chkstk_darwin(v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008868(v0, (uint64_t)v3, &qword_100838580);
  v4 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4) == 1)
  {
    sub_10000882C((uint64_t)v3, &qword_100838580);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(v3, v4) == 1)
      return *(_QWORD *)v3;
    sub_10001C744((uint64_t)v3, type metadata accessor for MigrateRequest.OneOf_Source);
  }
  return 0;
}

uint64_t MigrateRequest.archivePath.setter(uint64_t a1, uint64_t a2)
{
  return sub_1000AB1E4(a1, a2, 1);
}

void (*MigrateRequest.archivePath.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[2] = v2;
  v5 = sub_10001A630(&qword_100838580);
  v6 = (uint64_t *)malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[3] = v6;
  sub_100008868(v2, (uint64_t)v6, &qword_100838580);
  v7 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  v4[4] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[5] = v8;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_10000882C((uint64_t)v6, &qword_100838580);
LABEL_6:
    v9 = 0;
    v10 = 0xE000000000000000;
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload(v6, v7) != 1)
  {
    sub_10001C744((uint64_t)v6, type metadata accessor for MigrateRequest.OneOf_Source);
    goto LABEL_6;
  }
  v9 = *v6;
  v10 = v6[1];
LABEL_7:
  *v4 = v9;
  v4[1] = v10;
  return sub_1000AB0E4;
}

void sub_1000AB0E4(uint64_t **a1, char a2)
{
  sub_1000AB35C(a1, a2, 1);
}

uint64_t MigrateRequest.embeddedTestData.getter()
{
  return sub_1000AB100(&qword_100838580, type metadata accessor for MigrateRequest.OneOf_Source);
}

uint64_t sub_1000AB100(uint64_t *a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = v2;
  v6 = sub_10001A630(a1);
  __chkstk_darwin(v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008868(v5, (uint64_t)v8, a1);
  v9 = a2(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9) == 1)
  {
    sub_10000882C((uint64_t)v8, a1);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(v8, v9) == 2)
      return *(_QWORD *)v8;
    sub_10001C744((uint64_t)v8, a2);
  }
  return 0;
}

uint64_t MigrateRequest.embeddedTestData.setter(uint64_t a1, uint64_t a2)
{
  return sub_1000AB1E4(a1, a2, 2);
}

uint64_t sub_1000AB1E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;

  sub_10000882C((uint64_t)v3, &qword_100838580);
  *v3 = a1;
  v3[1] = a2;
  v7 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  swift_storeEnumTagMultiPayload(v3, v7, a3);
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v3, 0, 1, v7);
}

void (*MigrateRequest.embeddedTestData.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[2] = v2;
  v5 = sub_10001A630(&qword_100838580);
  v6 = (uint64_t *)malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[3] = v6;
  sub_100008868(v2, (uint64_t)v6, &qword_100838580);
  v7 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  v4[4] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[5] = v8;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_10000882C((uint64_t)v6, &qword_100838580);
LABEL_6:
    v9 = 0;
    v10 = 0xE000000000000000;
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload(v6, v7) != 2)
  {
    sub_10001C744((uint64_t)v6, type metadata accessor for MigrateRequest.OneOf_Source);
    goto LABEL_6;
  }
  v9 = *v6;
  v10 = v6[1];
LABEL_7:
  *v4 = v9;
  v4[1] = v10;
  return sub_1000AB354;
}

void sub_1000AB354(uint64_t **a1, char a2)
{
  sub_1000AB35C(a1, a2, 2);
}

void sub_1000AB35C(uint64_t **a1, char a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;

  v4 = *a1;
  v6 = **a1;
  v5 = (*a1)[1];
  v7 = (*a1)[4];
  v8 = (*a1)[5];
  v10 = (_QWORD *)(*a1)[2];
  v9 = (void *)(*a1)[3];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain((*a1)[1]);
    sub_10000882C((uint64_t)v10, &qword_100838580);
    *v10 = v6;
    v10[1] = v5;
    swift_storeEnumTagMultiPayload(v10, v7, a3);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
    swift_bridgeObjectRelease(v4[1]);
  }
  else
  {
    sub_10000882C((*a1)[2], &qword_100838580);
    *v10 = v6;
    v10[1] = v5;
    swift_storeEnumTagMultiPayload(v10, v7, a3);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
  }
  free(v9);
  free(v4);
}

uint64_t MigrateRequest.options.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for MigrateRequest(0) + 20));
}

uint64_t MigrateRequest.options.setter(int a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for MigrateRequest(0);
  *(_DWORD *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

Swift::Void (__swiftcall *MigrateRequest.options.modify())()
{
  type metadata accessor for MigrateRequest(0);
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t MigrateRequest.userInitiated.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MigrateRequest(0) + 24));
}

uint64_t MigrateRequest.userInitiated.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for MigrateRequest(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

Swift::Void (__swiftcall *MigrateRequest.userInitiated.modify())()
{
  type metadata accessor for MigrateRequest(0);
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t MigrateRequest.simulatedError.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for MigrateRequest(0) + 28));
}

uint64_t MigrateRequest.simulatedError.setter(int a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for MigrateRequest(0);
  *(_DWORD *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

Swift::Void (__swiftcall *MigrateRequest.simulatedError.modify())()
{
  type metadata accessor for MigrateRequest(0);
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t MigrateRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AB5A4(type metadata accessor for MigrateRequest, a1);
}

uint64_t sub_1000AB5A4@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 32);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t MigrateRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000AB5FC(a1, type metadata accessor for MigrateRequest);
}

uint64_t sub_1000AB5FC(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 32);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

Swift::Void (__swiftcall *MigrateRequest.unknownFields.modify())()
{
  type metadata accessor for MigrateRequest(0);
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t UnmigrateRequest.Option.init()()
{
  return 0;
}

uint64_t MigrateRequest.Option.init(rawValue:)(uint64_t a1)
{
  return sub_1000BAAF8(a1);
}

uint64_t MigrateRequest.Option.rawValue.getter(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return qword_1006A71A0[result];
  return result;
}

void sub_1000AB6B4(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t sub_1000AB6C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;
  char v5;

  result = sub_1000BAAF8(a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 9) = v5 & 1;
  return result;
}

uint64_t sub_1000AB6F4()
{
  uint64_t *v0;
  uint64_t result;

  result = *v0;
  if (*((_BYTE *)v0 + 8) == 1)
    return qword_1006A71A0[result];
  return result;
}

uint64_t sub_1000AB714@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;
  char v5;

  result = sub_1000BAAF8(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 9) = v5 & 1;
  return result;
}

void sub_1000AB748(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*((_BYTE *)v1 + 8) == 1)
    v2 = qword_1006A71A0[v2];
  *a1 = v2;
}

uint64_t sub_1000AB770(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_1000C4620();
  return Enum.hash(into:)(a1, a2, v4);
}

BOOL sub_1000AB7AC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (*((_BYTE *)a1 + 8) == 1)
    v2 = qword_1006A71A0[v2];
  v3 = *a2;
  if (*((_BYTE *)a2 + 8))
    v3 = qword_1006A71A0[v3];
  return v2 == v3;
}

uint64_t MigrateRequest.User.dsID.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t MigrateRequest.User.dsID.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t MigrateResponse.NextStep.invocationCount.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 8);
}

uint64_t MigrateResponse.NextStep.invocationCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t MigrateRequest.User.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AAAB0(type metadata accessor for MigrateRequest.User, a1);
}

uint64_t MigrateRequest.User.unknownFields.setter(uint64_t a1)
{
  return sub_1000AAB08(a1, type metadata accessor for MigrateRequest.User);
}

Swift::Void (__swiftcall *MigrateRequest.User.unknownFields.modify())()
{
  type metadata accessor for MigrateRequest.User(0);
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t MigrateRequest.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  int *v3;
  __n128 v4;

  v2 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
  v3 = (int *)type metadata accessor for MigrateRequest(0);
  *(_DWORD *)(a1 + v3[5]) = 0;
  *(_BYTE *)(a1 + v3[6]) = 0;
  *(_DWORD *)(a1 + v3[7]) = 0;
  return UnknownStorage.init()(v4);
}

void sub_1000AB8B0()
{
  static MigrateRequest.Option.allCases = (uint64_t)&off_1007DB050;
}

uint64_t *MigrateRequest.Option.allCases.unsafeMutableAddressor()
{
  if (qword_100836BE0 != -1)
    swift_once(&qword_100836BE0, sub_1000AB8B0);
  return &static MigrateRequest.Option.allCases;
}

uint64_t static MigrateRequest.Option.allCases.getter()
{
  return sub_1000ACE94(&qword_100836BE0, &static MigrateRequest.Option.allCases);
}

uint64_t static MigrateRequest.Option.allCases.setter(uint64_t a1)
{
  return sub_1000ACF08(a1, &qword_100836BE0, &static MigrateRequest.Option.allCases, (uint64_t)sub_1000AB8B0);
}

uint64_t (*static MigrateRequest.Option.allCases.modify(uint64_t a1))(_QWORD)
{
  if (qword_100836BE0 != -1)
    swift_once(&qword_100836BE0, sub_1000AB8B0);
  swift_beginAccess(&static MigrateRequest.Option.allCases, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_1000AB9AC@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000ACFF4(&qword_100836BE0, &static MigrateRequest.Option.allCases, (uint64_t)sub_1000AB8B0, a1);
}

uint64_t MigrateResponse.result.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AB9DC(type metadata accessor for MigrateResponse, &qword_100838588, a1);
}

uint64_t sub_1000AB9DC@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;

  v6 = a1(0);
  return sub_100008868(v3 + *(int *)(v6 + 20), a3, a2);
}

uint64_t MigrateResponse.result.setter(uint64_t a1)
{
  return sub_1000ABA38(a1, type metadata accessor for MigrateResponse, &qword_100838588);
}

uint64_t sub_1000ABA38(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;

  v6 = a2(0);
  return sub_1000BABD0(a1, v3 + *(int *)(v6 + 20), a3);
}

Swift::Void (__swiftcall *MigrateResponse.result.modify())()
{
  type metadata accessor for MigrateResponse(0);
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t MigrateResponse.success.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ABAC8(&qword_100838588, type metadata accessor for MigrateResponse, type metadata accessor for MigrateResponse.OneOf_Result, (double (*)(_QWORD))type metadata accessor for MigrateResponse.Details, a1);
}

uint64_t sub_1000ABAC8@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t (*a3)(_QWORD)@<X2>, double (*a4)(_QWORD)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v18;

  v11 = sub_10001A630(a1);
  __chkstk_darwin(v11);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a2(0);
  sub_100008868(v5 + *(int *)(v14 + 20), (uint64_t)v13, a1);
  v15 = a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v13, 1, v15) == 1)
  {
    sub_10000882C((uint64_t)v13, a1);
LABEL_5:
    *(_QWORD *)a5 = 0;
    *(_BYTE *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 12) = 0;
    *(_DWORD *)(a5 + 16) = 0;
    v16.n128_f64[0] = a4(0);
    return UnknownStorage.init()(v16);
  }
  if (swift_getEnumCaseMultiPayload(v13, v15) == 1)
  {
    sub_10001C744((uint64_t)v13, a3);
    goto LABEL_5;
  }
  return sub_1000B8680((uint64_t)v13, a5, (uint64_t (*)(_QWORD))a4);
}

uint64_t MigrateResponse.Details.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ABBF8((void (*)(_QWORD))type metadata accessor for MigrateResponse.Details, a1);
}

uint64_t sub_1000ABBF8@<X0>(void (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  a1(0);
  return UnknownStorage.init()();
}

uint64_t MigrateResponse.success.setter(uint64_t a1)
{
  return sub_1000ABC48(a1, type metadata accessor for MigrateResponse.Details, 0);
}

uint64_t sub_1000ABC48(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;

  v7 = v3 + *(int *)(type metadata accessor for MigrateResponse(0) + 20);
  sub_10000882C(v7, &qword_100838588);
  sub_1000B8680(a1, v7, a2);
  v8 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  swift_storeEnumTagMultiPayload(v7, v8, a3);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 0, 1, v8);
}

void (*MigrateResponse.success.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_10001A630(&qword_100838588);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for MigrateResponse.Details(0) - 8) + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  v8 = *(int *)(type metadata accessor for MigrateResponse(0) + 20);
  *((_DWORD *)v3 + 12) = v8;
  sub_100008868(v1 + v8, (uint64_t)v5, &qword_100838588);
  v9 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  v3[4] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    sub_10000882C((uint64_t)v5, &qword_100838588);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(v5, v9) != 1)
    {
      sub_1000B8680((uint64_t)v5, (uint64_t)v7, type metadata accessor for MigrateResponse.Details);
      return sub_1000ABE34;
    }
    sub_10001C744((uint64_t)v5, type metadata accessor for MigrateResponse.OneOf_Result);
  }
  *(_QWORD *)v7 = 0;
  v7[8] = 0;
  *((_DWORD *)v7 + 3) = 0;
  *((_DWORD *)v7 + 4) = 0;
  UnknownStorage.init()(v11);
  return sub_1000ABE34;
}

void sub_1000ABE34(uint64_t a1, char a2)
{
  sub_1000AC164(a1, a2, &qword_100838588, type metadata accessor for MigrateResponse.Details, 0);
}

uint64_t MigrateResponse.error.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ABE70(&qword_100838588, type metadata accessor for MigrateResponse, type metadata accessor for MigrateResponse.OneOf_Result, (double (*)(_QWORD))type metadata accessor for MigrateResponse.Error, a1);
}

uint64_t sub_1000ABE70@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t (*a3)(_QWORD)@<X2>, double (*a4)(_QWORD)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v17;
  uint64_t v18;

  v11 = sub_10001A630(a1);
  __chkstk_darwin(v11);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a2(0);
  sub_100008868(v5 + *(int *)(v14 + 20), (uint64_t)v13, a1);
  v15 = a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v13, 1, v15) == 1)
  {
    sub_10000882C((uint64_t)v13, a1);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(v13, v15) == 1)
      return sub_1000B8680((uint64_t)v13, a5, (uint64_t (*)(_QWORD))a4);
    sub_10001C744((uint64_t)v13, a3);
  }
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0xE000000000000000;
  *(_DWORD *)(a5 + 16) = 0;
  v17.n128_f64[0] = a4(0);
  return UnknownStorage.init()(v17);
}

uint64_t MigrateResponse.Error.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ABFA0((void (*)(_QWORD))type metadata accessor for MigrateResponse.Error, a1);
}

uint64_t sub_1000ABFA0@<X0>(void (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0xE000000000000000;
  *(_DWORD *)(a2 + 16) = 0;
  a1(0);
  return UnknownStorage.init()();
}

uint64_t MigrateResponse.error.setter(uint64_t a1)
{
  return sub_1000ABC48(a1, type metadata accessor for MigrateResponse.Error, 1);
}

void (*MigrateResponse.error.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_10001A630(&qword_100838588);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for MigrateResponse.Error(0) - 8) + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  v8 = *(int *)(type metadata accessor for MigrateResponse(0) + 20);
  *((_DWORD *)v3 + 12) = v8;
  sub_100008868(v1 + v8, (uint64_t)v5, &qword_100838588);
  v9 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  v3[4] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    sub_10000882C((uint64_t)v5, &qword_100838588);
LABEL_6:
    *v7 = 0;
    v7[1] = 0xE000000000000000;
    *((_DWORD *)v7 + 4) = 0;
    UnknownStorage.init()(v11);
    return sub_1000AC14C;
  }
  if (swift_getEnumCaseMultiPayload(v5, v9) != 1)
  {
    sub_10001C744((uint64_t)v5, type metadata accessor for MigrateResponse.OneOf_Result);
    goto LABEL_6;
  }
  sub_1000B8680((uint64_t)v5, (uint64_t)v7, type metadata accessor for MigrateResponse.Error);
  return sub_1000AC14C;
}

void sub_1000AC14C(uint64_t a1, char a2)
{
  sub_1000AC164(a1, a2, &qword_100838588, type metadata accessor for MigrateResponse.Error, 1);
}

void sub_1000AC164(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(_QWORD), uint64_t a5)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;

  v8 = *(void **)a1;
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v11 = *(int *)(*(_QWORD *)a1 + 48);
  v12 = *(void **)(*(_QWORD *)a1 + 16);
  v13 = *(void **)(*(_QWORD *)a1 + 24);
  v14 = *(void **)(*(_QWORD *)a1 + 8);
  v15 = **(_QWORD **)a1 + v11;
  if ((a2 & 1) != 0)
  {
    sub_1000151E8(*(_QWORD *)(*(_QWORD *)a1 + 24), (uint64_t)v12, a4);
    sub_10000882C(v15, a3);
    sub_1000B8680((uint64_t)v12, v15, a4);
    swift_storeEnumTagMultiPayload(v15, v9, a5);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
    sub_10001C744((uint64_t)v13, a4);
  }
  else
  {
    sub_10000882C(**(_QWORD **)a1 + v11, a3);
    sub_1000B8680((uint64_t)v13, v15, a4);
    swift_storeEnumTagMultiPayload(v15, v9, a5);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
  }
  free(v13);
  free(v12);
  free(v14);
  free(v8);
}

uint64_t MigrateResponse.nextStep.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t Step;
  __n128 v8;
  uint64_t v10;

  v3 = sub_10001A630(&qword_100838590);
  __chkstk_darwin(v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MigrateResponse(0);
  sub_100008868(v1 + *(int *)(v6 + 32), (uint64_t)v5, &qword_100838590);
  Step = type metadata accessor for MigrateResponse.NextStep(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(Step - 8) + 48))(v5, 1, Step) != 1)
    return sub_1000B8680((uint64_t)v5, a1, type metadata accessor for MigrateResponse.NextStep);
  *(_WORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  UnknownStorage.init()(v8);
  return sub_10000882C((uint64_t)v5, &qword_100838590);
}

uint64_t MigrateResponse.NextStep.init()@<X0>(uint64_t a1@<X8>)
{
  __n128 v1;

  *(_WORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  type metadata accessor for MigrateResponse.NextStep(0);
  return UnknownStorage.init()(v1);
}

uint64_t MigrateResponse.nextStep.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Step;

  v3 = v1 + *(int *)(type metadata accessor for MigrateResponse(0) + 32);
  sub_10000882C(v3, &qword_100838590);
  sub_1000B8680(a1, v3, type metadata accessor for MigrateResponse.NextStep);
  Step = type metadata accessor for MigrateResponse.NextStep(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(Step - 8) + 56))(v3, 0, 1, Step);
}

void (*MigrateResponse.nextStep.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t Step;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  __n128 v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_10001A630(&qword_100838590);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  Step = type metadata accessor for MigrateResponse.NextStep(0);
  v3[2] = Step;
  v7 = *(_QWORD *)(Step - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for MigrateResponse(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_100008868(v1 + v10, (uint64_t)v5, &qword_100838590);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, Step) == 1)
  {
    *(_WORD *)v9 = 0;
    v9[1] = 0;
    *((_DWORD *)v9 + 1) = 0;
    UnknownStorage.init()(v11);
    sub_10000882C((uint64_t)v5, &qword_100838590);
  }
  else
  {
    sub_1000B8680((uint64_t)v5, (uint64_t)v9, type metadata accessor for MigrateResponse.NextStep);
  }
  return sub_1000AC54C;
}

void sub_1000AC54C(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v2 = *(void **)a1;
  v3 = *(int *)(*(_QWORD *)a1 + 48);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  v5 = *(void **)(*(_QWORD *)a1 + 40);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v8 = *(void **)(*(_QWORD *)a1 + 8);
  v9 = **(_QWORD **)a1 + v3;
  if ((a2 & 1) != 0)
  {
    sub_1000151E8(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)v4, type metadata accessor for MigrateResponse.NextStep);
    sub_10000882C(v9, &qword_100838590);
    sub_1000B8680((uint64_t)v4, v9, type metadata accessor for MigrateResponse.NextStep);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
    sub_10001C744((uint64_t)v5, type metadata accessor for MigrateResponse.NextStep);
  }
  else
  {
    sub_10000882C(**(_QWORD **)a1 + v3, &qword_100838590);
    sub_1000B8680((uint64_t)v5, v9, type metadata accessor for MigrateResponse.NextStep);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  free(v5);
  free(v4);
  free(v8);
  free(v2);
}

BOOL MigrateResponse.hasNextStep.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t Step;
  _BOOL8 v6;
  uint64_t v8;

  v1 = sub_10001A630(&qword_100838590);
  __chkstk_darwin(v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MigrateResponse(0);
  sub_100008868(v0 + *(int *)(v4 + 32), (uint64_t)v3, &qword_100838590);
  Step = type metadata accessor for MigrateResponse.NextStep(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(Step - 8) + 48))(v3, 1, Step) != 1;
  sub_10000882C((uint64_t)v3, &qword_100838590);
  return v6;
}

Swift::Void __swiftcall MigrateResponse.clearNextStep()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Step;

  v1 = v0 + *(int *)(type metadata accessor for MigrateResponse(0) + 32);
  sub_10000882C(v1, &qword_100838590);
  Step = type metadata accessor for MigrateResponse.NextStep(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Step - 8) + 56))(v1, 1, 1, Step);
}

uint64_t MigrateResponse.logs.getter()
{
  return sub_1000AC768(type metadata accessor for MigrateResponse);
}

uint64_t sub_1000AC768(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 24));
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t MigrateResponse.logs.setter(uint64_t a1, uint64_t a2)
{
  return sub_1000AC7B4(a1, a2, type metadata accessor for MigrateResponse);
}

uint64_t sub_1000AC7B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3(0) + 24));
  result = swift_bridgeObjectRelease(v6[1]);
  *v6 = a1;
  v6[1] = a2;
  return result;
}

Swift::Void (__swiftcall *MigrateResponse.logs.modify())()
{
  type metadata accessor for MigrateResponse(0);
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t MigrateResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AC82C(type metadata accessor for MigrateResponse, a1);
}

uint64_t sub_1000AC82C@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 28);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t MigrateResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000AC884(a1, type metadata accessor for MigrateResponse);
}

uint64_t sub_1000AC884(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 28);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

Swift::Void (__swiftcall *MigrateResponse.unknownFields.modify())()
{
  type metadata accessor for MigrateResponse(0);
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t static MigrateResponse.OneOf_Result.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000B9C60(a1, a2, type metadata accessor for MigrateResponse.Error, type metadata accessor for MigrateResponse.Details, type metadata accessor for MigrateResponse.OneOf_Result, &qword_100839840) & 1;
}

uint64_t static MigrateResponse.Details.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000B9AF8(a1, a2, (uint64_t (*)(_QWORD, double))type metadata accessor for MigrateResponse.Details) & 1;
}

uint64_t static MigrateResponse.Error.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000B999C(a1, a2, type metadata accessor for MigrateResponse.Error) & 1;
}

uint64_t MigrateResponse.Details.isObserver.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t MigrateResponse.Details.isObserver.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t MigrateResponse.Details.listsMigrated.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 12);
}

uint64_t MigrateResponse.Details.listsMigrated.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 12) = result;
  return result;
}

uint64_t MigrateResponse.Details.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AB5A4(type metadata accessor for MigrateResponse.Details, a1);
}

uint64_t MigrateResponse.Details.unknownFields.setter(uint64_t a1)
{
  return sub_1000AB5FC(a1, type metadata accessor for MigrateResponse.Details);
}

Swift::Void (__swiftcall *MigrateResponse.Details.unknownFields.modify())()
{
  type metadata accessor for MigrateResponse.Details(0);
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t MigrateResponse.Error.retryCount.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 16);
}

uint64_t MigrateResponse.Error.retryCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 16) = result;
  return result;
}

uint64_t MigrateResponse.Error.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AAAB0(type metadata accessor for MigrateResponse.Error, a1);
}

uint64_t MigrateResponse.Error.unknownFields.setter(uint64_t a1)
{
  return sub_1000AAB08(a1, type metadata accessor for MigrateResponse.Error);
}

Swift::Void (__swiftcall *MigrateResponse.Error.unknownFields.modify())()
{
  type metadata accessor for MigrateResponse.Error(0);
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t MigrateResponse.NextStep.defined.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t MigrateResponse.NextStep.defined.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t MigrateResponse.NextStep.isTerminated.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t MigrateResponse.NextStep.isTerminated.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

Swift::Void (__swiftcall *MigrateResponse.NextStep.isTerminated.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t MigrateResponse.NextStep.nextInvocationInSeconds.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 4);
}

uint64_t MigrateResponse.NextStep.nextInvocationInSeconds.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 4) = result;
  return result;
}

Swift::Void (__swiftcall *MigrateResponse.NextStep.nextInvocationInSeconds.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t MigrateResponse.NextStep.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACA78(type metadata accessor for MigrateResponse.NextStep, a1);
}

uint64_t sub_1000ACA78@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 36);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t MigrateResponse.NextStep.unknownFields.setter(uint64_t a1)
{
  return sub_1000ACAD0(a1, type metadata accessor for MigrateResponse.NextStep);
}

uint64_t sub_1000ACAD0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 36);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

Swift::Void (__swiftcall *MigrateResponse.NextStep.unknownFields.modify())()
{
  type metadata accessor for MigrateResponse.NextStep(0);
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t MigrateResponse.init()@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  char *v3;
  uint64_t v4;
  __n128 v5;
  _QWORD *v6;
  char *v7;
  uint64_t Step;

  *a1 = 0;
  a1[1] = 0xE000000000000000;
  v2 = (int *)type metadata accessor for MigrateResponse(0);
  v3 = (char *)a1 + v2[5];
  v4 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  v5.n128_f64[0] = (*(double (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v6 = (_QWORD *)((char *)a1 + v2[6]);
  *v6 = 0;
  v6[1] = 0xE000000000000000;
  UnknownStorage.init()(v5);
  v7 = (char *)a1 + v2[8];
  Step = type metadata accessor for MigrateResponse.NextStep(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Step - 8) + 56))(v7, 1, 1, Step);
}

uint64_t UnmigrateRequest.options.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t UnmigrateRequest.options.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t UnmigrateRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD8B8(type metadata accessor for UnmigrateRequest, a1);
}

uint64_t UnmigrateRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000AD910(a1, type metadata accessor for UnmigrateRequest);
}

Swift::Void (__swiftcall *UnmigrateRequest.unknownFields.modify())()
{
  type metadata accessor for UnmigrateRequest(0);
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t UnmigrateRequest.Option.rawValue.getter(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return 0;
  return result;
}

uint64_t sub_1000ACC54@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result == 0;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_1000ACC6C()
{
  _BYTE *v0;

  if ((v0[8] & 1) != 0)
    return 0;
  else
    return *(_QWORD *)v0;
}

_QWORD *sub_1000ACC84@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;
  char v3;

  v2 = *result == 0;
  *(_QWORD *)a2 = *result;
  v3 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

void sub_1000ACCA0(_QWORD *a1@<X8>)
{
  uint64_t v1;

  if ((*(_BYTE *)(v1 + 8) & 1) != 0)
    *a1 = 0;
  else
    *a1 = *(_QWORD *)v1;
}

Swift::Int sub_1000ACCBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  _QWORD v7[10];
  char v8;

  v5 = *(_BYTE *)(v2 + 8);
  v7[9] = *(_QWORD *)v2;
  v8 = v5;
  Hasher.init(_seed:)(v7, 0);
  dispatch thunk of Hashable.hash(into:)(v7, a1, a2);
  return Hasher._finalize()();
}

uint64_t sub_1000ACD24(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_1000C45DC();
  return Enum.hash(into:)(a1, a2, v4);
}

Swift::Int sub_1000ACD5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v6;
  _QWORD v8[10];
  char v9;

  v6 = *(_BYTE *)(v3 + 8);
  v8[9] = *(_QWORD *)v3;
  v9 = v6;
  Hasher.init(_seed:)(v8, a1);
  dispatch thunk of Hashable.hash(into:)(v8, a2, a3);
  return Hasher._finalize()();
}

BOOL sub_1000ACDC0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  if ((a1[1] & 1) != 0)
    v3 = 0;
  else
    v3 = *a1;
  if (*((_BYTE *)a2 + 8))
    v2 = 0;
  return v3 == v2;
}

uint64_t UnmigrateRequest.init()@<X0>(_DWORD *a1@<X8>)
{
  __n128 v1;

  *a1 = 0;
  type metadata accessor for UnmigrateRequest(0);
  return UnknownStorage.init()(v1);
}

void sub_1000ACE24()
{
  static UnmigrateRequest.Option.allCases = (uint64_t)&off_1007DB0D0;
}

uint64_t *UnmigrateRequest.Option.allCases.unsafeMutableAddressor()
{
  if (qword_100836BE8 != -1)
    swift_once(&qword_100836BE8, sub_1000ACE24);
  return &static UnmigrateRequest.Option.allCases;
}

uint64_t static UnmigrateRequest.Option.allCases.getter()
{
  return sub_1000ACE94(&qword_100836BE8, &static UnmigrateRequest.Option.allCases);
}

uint64_t sub_1000ACE94(_QWORD *a1, _QWORD *a2)
{
  _BYTE v4[24];

  if (*a1 != -1)
    swift_once();
  swift_beginAccess(a2, v4, 0, 0);
  return swift_bridgeObjectRetain(*a2);
}

uint64_t static UnmigrateRequest.Option.allCases.setter(uint64_t a1)
{
  return sub_1000ACF08(a1, &qword_100836BE8, &static UnmigrateRequest.Option.allCases, (uint64_t)sub_1000ACE24);
}

uint64_t sub_1000ACF08(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  _BYTE v8[24];

  if (*a2 != -1)
    swift_once(a2, a4);
  swift_beginAccess(a3, v8, 1, 0);
  v6 = *a3;
  *a3 = a1;
  return swift_bridgeObjectRelease(v6);
}

uint64_t (*static UnmigrateRequest.Option.allCases.modify(uint64_t a1))(_QWORD)
{
  if (qword_100836BE8 != -1)
    swift_once(&qword_100836BE8, sub_1000ACE24);
  swift_beginAccess(&static UnmigrateRequest.Option.allCases, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_1000ACFD8@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000ACFF4(&qword_100836BE8, &static UnmigrateRequest.Option.allCases, (uint64_t)sub_1000ACE24, a1);
}

uint64_t sub_1000ACFF4@<X0>(_QWORD *a1@<X2>, uint64_t *a2@<X3>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  _BYTE v8[24];

  if (*a1 != -1)
    swift_once(a1, a3);
  swift_beginAccess(a2, v8, 0, 0);
  v6 = *a2;
  *a4 = *a2;
  return swift_bridgeObjectRetain(v6);
}

uint64_t UnmigrateResponse.result.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100008868(v1, a1, &qword_100838598);
}

uint64_t UnmigrateResponse.result.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1000BABD0(a1, v1, &qword_100838598);
}

uint64_t UnmigrateResponse.success.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v10;

  v2 = v1;
  v4 = sub_10001A630(&qword_100838598);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008868(v2, (uint64_t)v6, &qword_100838598);
  v7 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    sub_10000882C((uint64_t)v6, &qword_100838598);
LABEL_5:
    *a1 = 0;
    type metadata accessor for UnmigrateResponse.Details(0);
    return UnknownStorage.init()(v8);
  }
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    sub_10001C744((uint64_t)v6, type metadata accessor for UnmigrateResponse.OneOf_Result);
    goto LABEL_5;
  }
  return sub_1000B8680((uint64_t)v6, (uint64_t)a1, type metadata accessor for UnmigrateResponse.Details);
}

uint64_t UnmigrateResponse.Details.init()@<X0>(_QWORD *a1@<X8>)
{
  __n128 v1;

  *a1 = 0;
  type metadata accessor for UnmigrateResponse.Details(0);
  return UnknownStorage.init()(v1);
}

uint64_t UnmigrateResponse.success.setter(uint64_t a1)
{
  return sub_1000AD498(a1, &qword_100838598, type metadata accessor for UnmigrateResponse.Details, type metadata accessor for UnmigrateResponse.OneOf_Result, 0);
}

void (*UnmigrateResponse.success.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_10001A630(&qword_100838598);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for UnmigrateResponse.Details(0) - 8) + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  sub_100008868(v1, (uint64_t)v5, &qword_100838598);
  v8 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  v3[4] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    sub_10000882C((uint64_t)v5, &qword_100838598);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(v5, v8) != 1)
    {
      sub_1000B8680((uint64_t)v5, (uint64_t)v7, type metadata accessor for UnmigrateResponse.Details);
      return sub_1000AD344;
    }
    sub_10001C744((uint64_t)v5, type metadata accessor for UnmigrateResponse.OneOf_Result);
  }
  *v7 = 0;
  UnknownStorage.init()(v10);
  return sub_1000AD344;
}

void sub_1000AD344(uint64_t **a1, char a2)
{
  sub_1000AD680(a1, a2, &qword_100838598, type metadata accessor for UnmigrateResponse.Details, 0);
}

uint64_t UnmigrateResponse.error.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v9;
  uint64_t v10;

  v2 = v1;
  v4 = sub_10001A630(&qword_100838598);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008868(v2, (uint64_t)v6, &qword_100838598);
  v7 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    sub_10000882C((uint64_t)v6, &qword_100838598);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
      return sub_1000B8680((uint64_t)v6, (uint64_t)a1, type metadata accessor for UnmigrateResponse.Error);
    sub_10001C744((uint64_t)v6, type metadata accessor for UnmigrateResponse.OneOf_Result);
  }
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  type metadata accessor for UnmigrateResponse.Error(0);
  return UnknownStorage.init()(v9);
}

uint64_t UnmigrateResponse.Error.init()@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000ADE8C((void (*)(_QWORD))type metadata accessor for UnmigrateResponse.Error, a1);
}

uint64_t UnmigrateResponse.error.setter(uint64_t a1)
{
  return sub_1000AD498(a1, &qword_100838598, type metadata accessor for UnmigrateResponse.Error, type metadata accessor for UnmigrateResponse.OneOf_Result, 1);
}

uint64_t sub_1000AD498(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;

  sub_10000882C(v5, a2);
  sub_1000B8680(a1, v5, a3);
  v10 = a4(0);
  swift_storeEnumTagMultiPayload(v5, v10, a5);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v5, 0, 1, v10);
}

void (*UnmigrateResponse.error.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_10001A630(&qword_100838598);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for UnmigrateResponse.Error(0) - 8) + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  sub_100008868(v1, (uint64_t)v5, &qword_100838598);
  v8 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  v3[4] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    sub_10000882C((uint64_t)v5, &qword_100838598);
LABEL_6:
    *v7 = 0;
    v7[1] = 0xE000000000000000;
    UnknownStorage.init()(v10);
    return sub_1000AD668;
  }
  if (swift_getEnumCaseMultiPayload(v5, v8) != 1)
  {
    sub_10001C744((uint64_t)v5, type metadata accessor for UnmigrateResponse.OneOf_Result);
    goto LABEL_6;
  }
  sub_1000B8680((uint64_t)v5, (uint64_t)v7, type metadata accessor for UnmigrateResponse.Error);
  return sub_1000AD668;
}

void sub_1000AD668(uint64_t **a1, char a2)
{
  sub_1000AD680(a1, a2, &qword_100838598, type metadata accessor for UnmigrateResponse.Error, 1);
}

void sub_1000AD680(uint64_t **a1, char a2, uint64_t *a3, uint64_t (*a4)(_QWORD), uint64_t a5)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;

  v8 = *a1;
  v9 = (*a1)[4];
  v10 = (*a1)[5];
  v11 = (void *)(*a1)[2];
  v12 = (void *)(*a1)[3];
  v14 = **a1;
  v13 = (void *)(*a1)[1];
  if ((a2 & 1) != 0)
  {
    sub_1000151E8((*a1)[3], (uint64_t)v11, a4);
    sub_10000882C(v14, a3);
    sub_1000B8680((uint64_t)v11, v14, a4);
    swift_storeEnumTagMultiPayload(v14, v9, a5);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
    sub_10001C744((uint64_t)v12, a4);
  }
  else
  {
    sub_10000882C(**a1, a3);
    sub_1000B8680((uint64_t)v12, v14, a4);
    swift_storeEnumTagMultiPayload(v14, v9, a5);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  free(v12);
  free(v11);
  free(v13);
  free(v8);
}

uint64_t UnmigrateResponse.logs.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for UnmigrateResponse(0) + 20));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

void UnmigrateResponse.logs.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for UnmigrateResponse(0) + 20));
  swift_bridgeObjectRelease(v5[1]);
  *v5 = a1;
  v5[1] = a2;
}

Swift::Void (__swiftcall *UnmigrateResponse.logs.modify())()
{
  type metadata accessor for UnmigrateResponse(0);
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t UnmigrateResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AAAB0(type metadata accessor for UnmigrateResponse, a1);
}

uint64_t UnmigrateResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000AAB08(a1, type metadata accessor for UnmigrateResponse);
}

Swift::Void (__swiftcall *UnmigrateResponse.unknownFields.modify())()
{
  type metadata accessor for UnmigrateResponse(0);
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t static UnmigrateResponse.Error.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return sub_1000BA9B4(a1, a2, type metadata accessor for UnmigrateResponse.Error) & 1;
}

uint64_t UnmigrateResponse.Details.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD8B8(type metadata accessor for UnmigrateResponse.Details, a1);
}

uint64_t sub_1000AD8B8@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 20);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t UnmigrateResponse.Details.unknownFields.setter(uint64_t a1)
{
  return sub_1000AD910(a1, type metadata accessor for UnmigrateResponse.Details);
}

uint64_t sub_1000AD910(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 20);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

Swift::Void (__swiftcall *UnmigrateResponse.Details.unknownFields.modify())()
{
  type metadata accessor for UnmigrateResponse.Details(0);
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t UnmigrateResponse.Error.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD8B8(type metadata accessor for UnmigrateResponse.Error, a1);
}

uint64_t UnmigrateResponse.Error.unknownFields.setter(uint64_t a1)
{
  return sub_1000AD910(a1, type metadata accessor for UnmigrateResponse.Error);
}

Swift::Void (__swiftcall *UnmigrateResponse.Error.unknownFields.modify())()
{
  type metadata accessor for UnmigrateResponse.Error(0);
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t UnmigrateResponse.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  __n128 v4;

  v2 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
  v3 = (_QWORD *)(a1 + *(int *)(type metadata accessor for UnmigrateResponse(0) + 20));
  *v3 = 0;
  v3[1] = 0xE000000000000000;
  return UnknownStorage.init()(v4);
}

uint64_t EmptyRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t EmptyRequest.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t BasicResponse.result.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_1000BAC64(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
  return v1;
}

uint64_t BasicResponse.result.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t result;

  result = sub_1000BAC84(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_BYTE *)(v3 + 16));
  *(_QWORD *)v3 = a1;
  *(_QWORD *)(v3 + 8) = a2;
  *(_BYTE *)(v3 + 16) = a3;
  return result;
}

uint64_t BasicResponse.success.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if ((*(_BYTE *)(v0 + 16) & 1) != 0)
    return 0;
  v2 = v0;
  v1 = *(_QWORD *)v0;
  sub_1000BAC7C(v1, *(_QWORD *)(v2 + 8));
  return v1;
}

uint64_t BasicResponse.success.setter(uint64_t a1, uint64_t a2)
{
  return BasicResponse.result.setter(a1, a2, 0);
}

void (*BasicResponse.success.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  if ((*(_BYTE *)(v1 + 16) & 1) != 0)
  {
    v3 = 0;
    v4 = 0xE000000000000000;
  }
  else
  {
    v3 = *(_QWORD *)v1;
    v4 = *(_QWORD *)(v1 + 8);
    sub_1000BAC7C(*(_QWORD *)v1, v4);
  }
  *a1 = v3;
  a1[1] = v4;
  return sub_1000ADBC8;
}

void sub_1000ADBC8(uint64_t *a1, char a2)
{
  sub_1000ADCA0(a1, a2, 0);
}

uint64_t BasicResponse.error.getter()
{
  uint64_t v0;
  int v1;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned __int8 *)(v0 + 16);
  if (v1 == 255 || (v1 & 1) == 0)
    return 0;
  v4 = v0;
  v3 = *(_QWORD *)v0;
  sub_1000BAC7C(v3, *(_QWORD *)(v4 + 8));
  return v3;
}

uint64_t BasicResponse.error.setter(uint64_t a1, uint64_t a2)
{
  return BasicResponse.result.setter(a1, a2, 1);
}

void (*BasicResponse.error.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  int v3;
  uint64_t v5;
  uint64_t v6;

  a1[2] = v1;
  v3 = *(unsigned __int8 *)(v1 + 16);
  if (v3 == 255 || (v3 & 1) == 0)
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  else
  {
    v5 = *(_QWORD *)v1;
    v6 = *(_QWORD *)(v1 + 8);
    sub_1000BAC7C(*(_QWORD *)v1, v6);
  }
  *a1 = v5;
  a1[1] = v6;
  return sub_1000ADC98;
}

void sub_1000ADC98(uint64_t *a1, char a2)
{
  sub_1000ADCA0(a1, a2, 1);
}

void sub_1000ADCA0(uint64_t *a1, char a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;

  v4 = a1[1];
  v5 = a1[2];
  v6 = *a1;
  v7 = *(_QWORD *)v5;
  v8 = *(_QWORD *)(v5 + 8);
  v9 = *(_BYTE *)(v5 + 16);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(a1[1]);
    sub_1000BAC84(v7, v8, v9);
    *(_QWORD *)v5 = v6;
    *(_QWORD *)(v5 + 8) = v4;
    *(_BYTE *)(v5 + 16) = a3;
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    sub_1000BAC84(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_BYTE *)(v5 + 16));
    *(_QWORD *)v5 = v6;
    *(_QWORD *)(v5 + 8) = v4;
    *(_BYTE *)(v5 + 16) = a3;
  }
}

uint64_t BasicResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD8B8(type metadata accessor for BasicResponse, a1);
}

uint64_t BasicResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000AD910(a1, type metadata accessor for BasicResponse);
}

Swift::Void (__swiftcall *BasicResponse.unknownFields.modify())()
{
  type metadata accessor for BasicResponse(0);
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t static BasicResponse.OneOf_Result.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  return sub_1000B792C(a1, a2, a3 & 1, a4, a5, a6 & 1);
}

uint64_t sub_1000ADD88(uint64_t a1, uint64_t a2)
{
  return sub_1000B792C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

uint64_t BasicResponse.init()@<X0>(uint64_t a1@<X8>)
{
  __n128 v1;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = -1;
  type metadata accessor for BasicResponse(0);
  return UnknownStorage.init()(v1);
}

uint64_t PingRequest.message.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t PingRequest.message.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(v2[1]);
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t PingRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD8B8(type metadata accessor for PingRequest, a1);
}

uint64_t PingRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000AD910(a1, type metadata accessor for PingRequest);
}

Swift::Void (__swiftcall *PingRequest.unknownFields.modify())()
{
  type metadata accessor for PingRequest(0);
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t PingRequest.init()@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000ADE8C((void (*)(_QWORD))type metadata accessor for PingRequest, a1);
}

uint64_t sub_1000ADE8C@<X0>(void (*a1)(_QWORD)@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a1(0);
  return UnknownStorage.init()();
}

uint64_t PingResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD8B8(type metadata accessor for PingResponse, a1);
}

uint64_t PingResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000AD910(a1, type metadata accessor for PingResponse);
}

Swift::Void (__swiftcall *PingResponse.unknownFields.modify())()
{
  type metadata accessor for PingResponse(0);
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t PingResponse.init()@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000ADE8C((void (*)(_QWORD))type metadata accessor for PingResponse, a1);
}

void *StartMigrationRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static StartMigrationRequest.protoMessageName;
}

unint64_t static StartMigrationRequest.protoMessageName.getter()
{
  return 0xD000000000000015;
}

uint64_t sub_1000ADF3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_10009EF3C(v0, static StartMigrationRequest._protobuf_nameMap);
  sub_10001AAA8(v0, (uint64_t)static StartMigrationRequest._protobuf_nameMap);
  v1 = sub_10001A630(&qword_1008397B8);
  v2 = sub_10001A630(&qword_1008397C0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1006A5130;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "archivePath";
  *(_QWORD *)(v9 + 8) = 11;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "credential";
  *(_QWORD *)(v13 + 8) = 10;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "embeddedTestData";
  *((_QWORD *)v15 + 1) = 16;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "disableCache";
  *((_QWORD *)v17 + 1) = 12;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t StartMigrationRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000AF0D8(&qword_100836BF0, (uint64_t)static StartMigrationRequest._protobuf_nameMap, (uint64_t)sub_1000ADF3C);
}

uint64_t static StartMigrationRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF134(&qword_100836BF0, (uint64_t)static StartMigrationRequest._protobuf_nameMap, (uint64_t)sub_1000ADF3C, a1);
}

void StartMigrationRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t started;

  v5 = v3;
  v9 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(v9)
      {
        case 1:
          v12 = a1;
          v13 = (_QWORD *)v5;
          v14 = a2;
          v15 = a3;
          v16 = v11;
          v17 = 0;
          goto LABEL_5;
        case 2:
          v16 = v11;
          sub_1000AE248(v5, a1, a2, a3);
          goto LABEL_6;
        case 3:
          v12 = a1;
          v13 = (_QWORD *)v5;
          v14 = a2;
          v15 = a3;
          v16 = v11;
          v17 = 2;
LABEL_5:
          sub_1000AE68C(v12, v13, v14, v15, v17);
          goto LABEL_6;
        case 4:
          started = type metadata accessor for StartMigrationRequest(0);
          v16 = v11;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v5 + *(int *)(started + 20), a2, a3);
LABEL_6:
          v11 = v16;
          break;
        default:
          break;
      }
      v9 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
}

uint64_t sub_1000AE248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t started;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  _BYTE v39[12];
  int v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v49 = a3;
  v50 = a4;
  v51 = a2;
  started = type metadata accessor for StartMigrationRequest.Credential(0);
  v6 = *(_QWORD *)(started - 8);
  v7 = __chkstk_darwin(started);
  v43 = &v39[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v46 = &v39[-v9];
  v10 = sub_10001A630(&qword_100838570);
  __chkstk_darwin(v10);
  v12 = &v39[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = &v39[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15);
  v19 = &v39[-v18];
  v20 = sub_10001A630(&qword_100839830);
  v21 = __chkstk_darwin(v20);
  v44 = &v39[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v21);
  v24 = &v39[-v23];
  v45 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v47 = started;
  v25(&v39[-v23], 1, 1, started);
  v42 = a1;
  sub_100008868(a1, (uint64_t)v12, &qword_100838570);
  v41 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    sub_10000882C((uint64_t)v12, &qword_100838570);
    v29 = v49;
    v28 = v50;
    v30 = v13;
    v32 = v47;
    v31 = v48;
  }
  else
  {
    v40 = v26;
    v33 = (uint64_t)v46;
    sub_1000B8680((uint64_t)v12, (uint64_t)v19, type metadata accessor for StartMigrationRequest.OneOf_Source);
    sub_1000B8680((uint64_t)v19, (uint64_t)v17, type metadata accessor for StartMigrationRequest.OneOf_Source);
    v30 = v13;
    if (swift_getEnumCaseMultiPayload(v17, v13) == 1)
    {
      sub_10000882C((uint64_t)v24, &qword_100839830);
      sub_1000B8680((uint64_t)v17, v33, type metadata accessor for StartMigrationRequest.Credential);
      sub_1000B8680(v33, (uint64_t)v24, type metadata accessor for StartMigrationRequest.Credential);
      v32 = v47;
      v25(v24, 0, 1, v47);
      v29 = v49;
      v28 = v50;
    }
    else
    {
      sub_10001C744((uint64_t)v17, type metadata accessor for StartMigrationRequest.OneOf_Source);
      v29 = v49;
      v28 = v50;
      v32 = v47;
    }
    v31 = v48;
    v27 = v40;
  }
  v34 = sub_10009FC50(&qword_1008386B0, type metadata accessor for StartMigrationRequest.Credential, (uint64_t)&protocol conformance descriptor for StartMigrationRequest.Credential);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v24, v32, v34, v29, v28);
  if (v31)
    return sub_10000882C((uint64_t)v24, &qword_100839830);
  v36 = v44;
  sub_100008868((uint64_t)v24, (uint64_t)v44, &qword_100839830);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v45 + 48))(v36, 1, v32) == 1)
  {
    sub_10000882C((uint64_t)v24, &qword_100839830);
    return sub_10000882C((uint64_t)v36, &qword_100839830);
  }
  else
  {
    v37 = v43;
    sub_1000B8680((uint64_t)v36, (uint64_t)v43, type metadata accessor for StartMigrationRequest.Credential);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()(v29, v28);
    sub_10000882C((uint64_t)v24, &qword_100839830);
    v38 = v42;
    sub_10000882C(v42, &qword_100838570);
    sub_1000B8680((uint64_t)v37, v38, type metadata accessor for StartMigrationRequest.Credential);
    swift_storeEnumTagMultiPayload(v38, v30, 1);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v30);
  }
}

void sub_1000AE68C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t started;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;

  v10 = sub_10001A630(&qword_100838570);
  __chkstk_darwin(v10);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = 0;
  v19 = 0;
  dispatch thunk of Decoder.decodeSingularStringField(value:)(&v18, a3, a4);
  if (v5)
  {
    swift_bridgeObjectRelease(v19);
  }
  else
  {
    v13 = v19;
    if (v19)
    {
      v20 = a5;
      v17 = v18;
      sub_100008868((uint64_t)a2, (uint64_t)v12, &qword_100838570);
      started = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
      v16 = *(_QWORD *)(started - 8);
      v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v12, 1, started);
      sub_10000882C((uint64_t)v12, &qword_100838570);
      if (v15 != 1)
        dispatch thunk of Decoder.handleConflictingOneOf()(a3, a4);
      sub_10000882C((uint64_t)a2, &qword_100838570);
      *a2 = v17;
      a2[1] = v13;
      swift_storeEnumTagMultiPayload(a2, started, v20);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(a2, 0, 1, started);
    }
  }
}

void StartMigrationRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t started;
  int EnumCaseMultiPayload;
  uint64_t v13;

  v8 = sub_10001A630(&qword_100838570);
  __chkstk_darwin(v8);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008868(v3, (uint64_t)v10, &qword_100838570);
  started = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 48))(v10, 1, started) != 1)
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, started);
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        sub_1000AEB28(v3, a1, a2, a3);
        sub_10001C744((uint64_t)v10, type metadata accessor for StartMigrationRequest.OneOf_Source);
        if (v4)
          return;
      }
      else
      {
        sub_10001C744((uint64_t)v10, type metadata accessor for StartMigrationRequest.OneOf_Source);
        sub_1000B1CB4(v3, a1, a2, a3, &qword_100838570, type metadata accessor for StartMigrationRequest.OneOf_Source);
        if (v4)
          return;
      }
    }
    else
    {
      sub_10001C744((uint64_t)v10, type metadata accessor for StartMigrationRequest.OneOf_Source);
      sub_1000AEA04(v3, a1, a2, a3);
      if (v4)
        return;
    }
  }
  if (*(_BYTE *)(v3 + *(int *)(type metadata accessor for StartMigrationRequest(0) + 20)) != 1
    || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1, 4, a2, a3), !v4))
  {
    UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
}

void sub_1000AEA04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t started;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7 = sub_10001A630(&qword_100838570);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100008868(a1, (uint64_t)v9, &qword_100838570);
  started = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 48))(v9, 1, started) == 1)
  {
    sub_10000882C((uint64_t)v9, &qword_100838570);
    __break(1u);
  }
  else if (!swift_getEnumCaseMultiPayload(v9, started))
  {
    v11 = *v9;
    v12 = v9[1];
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v11, v12, 1, a3, a4);
    swift_bridgeObjectRelease(v12);
    return;
  }
  sub_10001C744((uint64_t)v9, type metadata accessor for StartMigrationRequest.OneOf_Source);
  __break(1u);
}

uint64_t sub_1000AEB28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t started;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[2];

  v7 = sub_10001A630(&qword_100838570);
  __chkstk_darwin(v7);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  started = type metadata accessor for StartMigrationRequest.Credential(0);
  __chkstk_darwin(started);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008868(a1, (uint64_t)v9, &qword_100838570);
  v13 = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v9, 1, v13) == 1)
  {
    sub_10000882C((uint64_t)v9, &qword_100838570);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload(v9, v13) == 1)
  {
    sub_1000B8680((uint64_t)v9, (uint64_t)v12, type metadata accessor for StartMigrationRequest.Credential);
    v14 = sub_10009FC50(&qword_1008386B0, type metadata accessor for StartMigrationRequest.Credential, (uint64_t)&protocol conformance descriptor for StartMigrationRequest.Credential);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2, started, v14, a3, a4);
    return sub_10001C744((uint64_t)v12, type metadata accessor for StartMigrationRequest.Credential);
  }
  result = sub_10001C744((uint64_t)v9, type metadata accessor for StartMigrationRequest.OneOf_Source);
  __break(1u);
  return result;
}

Swift::Int StartMigrationRequest.hashValue.getter()
{
  return sub_1000B767C(type metadata accessor for StartMigrationRequest, &qword_1008385A0, (uint64_t)&protocol conformance descriptor for StartMigrationRequest);
}

uint64_t sub_1000AECE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t started;
  __n128 v5;

  started = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  v5.n128_f64[0] = (*(double (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 56))(a2, 1, 1, started);
  *(_BYTE *)(a2 + *(int *)(a1 + 20)) = 0;
  return UnknownStorage.init()(v5);
}

Swift::Void (__swiftcall *sub_1000AED48())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

void sub_1000AED5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  StartMigrationRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

void sub_1000AED70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  StartMigrationRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000AED88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_1008397A0, type metadata accessor for StartMigrationRequest, (uint64_t)&protocol conformance descriptor for StartMigrationRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000AEDDC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF4E4(&qword_100836BF0, (uint64_t)static StartMigrationRequest._protobuf_nameMap, (uint64_t)sub_1000ADF3C, a1);
}

uint64_t sub_1000AEDF8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009FC50(&qword_100838698, type metadata accessor for StartMigrationRequest, (uint64_t)&protocol conformance descriptor for StartMigrationRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000AEE3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100838698, type metadata accessor for StartMigrationRequest, (uint64_t)&protocol conformance descriptor for StartMigrationRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *StartMigrationRequest.Credential.protoMessageName.unsafeMutableAddressor()
{
  return &static StartMigrationRequest.Credential.protoMessageName;
}

unint64_t static StartMigrationRequest.Credential.protoMessageName.getter()
{
  return 0xD000000000000020;
}

uint64_t sub_1000AEEB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_10009EF3C(v0, static StartMigrationRequest.Credential._protobuf_nameMap);
  sub_10001AAA8(v0, (uint64_t)static StartMigrationRequest.Credential._protobuf_nameMap);
  v1 = sub_10001A630(&qword_1008397B8);
  v2 = sub_10001A630(&qword_1008397C0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1006A5140;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "dsID";
  *(_QWORD *)(v9 + 8) = 4;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "baseURL";
  *(_QWORD *)(v13 + 8) = 7;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "hostname";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "mmeAuthToken";
  *((_QWORD *)v17 + 1) = 12;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 5;
  *(_QWORD *)v18 = "partition";
  *(_QWORD *)(v18 + 8) = 9;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t StartMigrationRequest.Credential._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000AF0D8(&qword_100836BF8, (uint64_t)static StartMigrationRequest.Credential._protobuf_nameMap, (uint64_t)sub_1000AEEB8);
}

uint64_t sub_1000AF0D8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (*a1 != -1)
    swift_once(a1, a3);
  v4 = type metadata accessor for _NameMap(0);
  return sub_10001AAA8(v4, a2);
}

uint64_t static StartMigrationRequest.Credential._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF134(&qword_100836BF8, (uint64_t)static StartMigrationRequest.Credential._protobuf_nameMap, (uint64_t)sub_1000AEEB8, a1);
}

uint64_t sub_1000AF134@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = type metadata accessor for _NameMap(0);
  v7 = sub_10001AAA8(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v7, v6);
}

uint64_t StartMigrationRequest.Credential.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = v3;
          goto LABEL_5;
        case 2:
          v9 = v3 + 16;
          goto LABEL_5;
        case 3:
          v9 = v3 + 32;
          goto LABEL_5;
        case 4:
          v9 = v3 + 48;
LABEL_5:
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v9, a2, a3);
          break;
        case 5:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + 64, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t StartMigrationRequest.Credential.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = v3;
  v9 = *(_QWORD *)(v5 + 8);
  v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0)
    v10 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFLL;
  if (!v10
    || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*(_QWORD *)v5, v9, 1, a2, a3),
        !v4))
  {
    v12 = *(_QWORD *)(v5 + 16);
    v13 = *(_QWORD *)(v5 + 24);
    v14 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000) == 0)
      v14 = v12 & 0xFFFFFFFFFFFFLL;
    if (!v14
      || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v12, v13, 2, a2, a3), !v4))
    {
      v15 = *(_QWORD *)(v5 + 32);
      v16 = *(_QWORD *)(v5 + 40);
      v17 = HIBYTE(v16) & 0xF;
      if ((v16 & 0x2000000000000000) == 0)
        v17 = v15 & 0xFFFFFFFFFFFFLL;
      if (!v17
        || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v15, v16, 3, a2, a3), !v4))
      {
        v18 = *(_QWORD *)(v5 + 48);
        v19 = *(_QWORD *)(v5 + 56);
        v20 = HIBYTE(v19) & 0xF;
        if ((v19 & 0x2000000000000000) == 0)
          v20 = v18 & 0xFFFFFFFFFFFFLL;
        if (!v20
          || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v18, v19, 4, a2, a3), !v4))
        {
          v21 = *(unsigned int *)(v5 + 64);
          if (!(_DWORD)v21
            || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(v21, 5, a2, a3), !v4))
          {
            type metadata accessor for StartMigrationRequest.Credential(0);
            return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
          }
        }
      }
    }
  }
  return result;
}

Swift::Int StartMigrationRequest.Credential.hashValue.getter()
{
  return sub_1000B767C(type metadata accessor for StartMigrationRequest.Credential, &qword_1008385A8, (uint64_t)&protocol conformance descriptor for StartMigrationRequest.Credential);
}

uint64_t sub_1000AF400@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0xE000000000000000;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0xE000000000000000;
  *(_DWORD *)(a1 + 64) = 0;
  return UnknownStorage.init()();
}

Swift::Void (__swiftcall *sub_1000AF43C())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t sub_1000AF450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StartMigrationRequest.Credential.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000AF464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StartMigrationRequest.Credential.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000AF478(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100839798, type metadata accessor for StartMigrationRequest.Credential, (uint64_t)&protocol conformance descriptor for StartMigrationRequest.Credential);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000AF4C8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF4E4(&qword_100836BF8, (uint64_t)static StartMigrationRequest.Credential._protobuf_nameMap, (uint64_t)sub_1000AEEB8, a1);
}

uint64_t sub_1000AF4E4@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = type metadata accessor for _NameMap(0);
  v7 = sub_10001AAA8(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v7, v6);
}

uint64_t sub_1000AF550(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009FC50(&qword_1008386B0, type metadata accessor for StartMigrationRequest.Credential, (uint64_t)&protocol conformance descriptor for StartMigrationRequest.Credential);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000AF590(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_1008386B0, type metadata accessor for StartMigrationRequest.Credential, (uint64_t)&protocol conformance descriptor for StartMigrationRequest.Credential);
  return Message.hash(into:)(a1, a2, v4);
}

void *StartMigrationResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static StartMigrationResponse.protoMessageName;
}

unint64_t static StartMigrationResponse.protoMessageName.getter()
{
  return 0xD000000000000016;
}

uint64_t sub_1000AF608()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_10009EF3C(v0, static StartMigrationResponse._protobuf_nameMap);
  sub_10001AAA8(v0, (uint64_t)static StartMigrationResponse._protobuf_nameMap);
  v1 = sub_10001A630(&qword_1008397B8);
  v2 = sub_10001A630(&qword_1008397C0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1006A5130;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "state";
  *(_QWORD *)(v9 + 8) = 5;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "success";
  *(_QWORD *)(v13 + 8) = 7;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "error";
  *((_QWORD *)v15 + 1) = 5;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "log";
  *((_QWORD *)v17 + 1) = 3;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t StartMigrationResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000AF0D8(&qword_100836C00, (uint64_t)static StartMigrationResponse._protobuf_nameMap, (uint64_t)sub_1000AF608);
}

uint64_t static StartMigrationResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF134(&qword_100836C00, (uint64_t)static StartMigrationResponse._protobuf_nameMap, (uint64_t)sub_1000AF608, a1);
}

uint64_t StartMigrationResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v12 = v5;
          goto LABEL_5;
        case 2:
          v13 = v11;
          sub_1000AF900(v5, a1, a2, a3);
          goto LABEL_6;
        case 3:
          v13 = v11;
          sub_1000AFD20(v5, a1, a2, a3);
          goto LABEL_6;
        case 5:
          v12 = v5 + *(int *)(type metadata accessor for StartMigrationResponse(0) + 24);
LABEL_5:
          v13 = v11;
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v12, a2, a3);
LABEL_6:
          v11 = v13;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000AF900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t started;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v42 = a2;
  v43 = a3;
  v44 = a4;
  v45 = a1;
  started = type metadata accessor for StartMigrationResponse.Details(0);
  v5 = *(_QWORD *)(started - 8);
  v6 = __chkstk_darwin(started);
  v38 = (uint64_t)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v35 - v8;
  v10 = sub_10001A630(&qword_100838578);
  __chkstk_darwin(v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v35 - v18;
  v20 = sub_10001A630(&qword_100839818);
  v21 = __chkstk_darwin(v20);
  v39 = (uint64_t)&v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v24 = (char *)&v35 - v23;
  v40 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v35 - v23, 1, 1, started);
  v36 = v45 + *(int *)(type metadata accessor for StartMigrationResponse(0) + 20);
  sub_100008868(v36, (uint64_t)v12, &qword_100838578);
  v37 = v14;
  LODWORD(v45) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v45 == 1)
  {
    sub_10000882C((uint64_t)v12, &qword_100838578);
    v27 = v43;
    v26 = v44;
    v28 = v13;
  }
  else
  {
    sub_1000B8680((uint64_t)v12, (uint64_t)v19, type metadata accessor for StartMigrationResponse.OneOf_Result);
    sub_1000B8680((uint64_t)v19, (uint64_t)v17, type metadata accessor for StartMigrationResponse.OneOf_Result);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload(v17, v13) == 1)
    {
      sub_10001C744((uint64_t)v17, type metadata accessor for StartMigrationResponse.OneOf_Result);
    }
    else
    {
      sub_10000882C((uint64_t)v24, &qword_100839818);
      sub_1000B8680((uint64_t)v17, (uint64_t)v9, type metadata accessor for StartMigrationResponse.Details);
      sub_1000B8680((uint64_t)v9, (uint64_t)v24, type metadata accessor for StartMigrationResponse.Details);
      v25(v24, 0, 1, started);
    }
    v27 = v43;
    v26 = v44;
  }
  v29 = v41;
  v30 = sub_10009FC50(&qword_1008386E0, type metadata accessor for StartMigrationResponse.Details, (uint64_t)&protocol conformance descriptor for StartMigrationResponse.Details);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v24, started, v30, v27, v26);
  if (v29)
    return sub_10000882C((uint64_t)v24, &qword_100839818);
  v32 = v39;
  sub_100008868((uint64_t)v24, v39, &qword_100839818);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v32, 1, started) == 1)
  {
    sub_10000882C((uint64_t)v24, &qword_100839818);
    return sub_10000882C(v32, &qword_100839818);
  }
  else
  {
    v33 = v38;
    sub_1000B8680(v32, v38, type metadata accessor for StartMigrationResponse.Details);
    if ((_DWORD)v45 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()(v27, v26);
    sub_10000882C((uint64_t)v24, &qword_100839818);
    v34 = v36;
    sub_10000882C(v36, &qword_100838578);
    sub_1000B8680(v33, v34, type metadata accessor for StartMigrationResponse.Details);
    swift_storeEnumTagMultiPayload(v34, v28, 0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v28);
  }
}

uint64_t sub_1000AFD20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t started;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v42 = a2;
  v43 = a3;
  v44 = a4;
  v45 = a1;
  started = type metadata accessor for StartMigrationResponse.Error(0);
  v5 = *(_QWORD *)(started - 8);
  v6 = __chkstk_darwin(started);
  v38 = (uint64_t)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v35 - v8;
  v10 = sub_10001A630(&qword_100838578);
  __chkstk_darwin(v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v35 - v18;
  v20 = sub_10001A630(&qword_100839820);
  v21 = __chkstk_darwin(v20);
  v39 = (uint64_t)&v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v24 = (char *)&v35 - v23;
  v40 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v35 - v23, 1, 1, started);
  v36 = v45 + *(int *)(type metadata accessor for StartMigrationResponse(0) + 20);
  sub_100008868(v36, (uint64_t)v12, &qword_100838578);
  v37 = v14;
  LODWORD(v45) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v45 == 1)
  {
    sub_10000882C((uint64_t)v12, &qword_100838578);
    v27 = v43;
    v26 = v44;
    v28 = v13;
  }
  else
  {
    sub_1000B8680((uint64_t)v12, (uint64_t)v19, type metadata accessor for StartMigrationResponse.OneOf_Result);
    sub_1000B8680((uint64_t)v19, (uint64_t)v17, type metadata accessor for StartMigrationResponse.OneOf_Result);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload(v17, v13) == 1)
    {
      sub_10000882C((uint64_t)v24, &qword_100839820);
      sub_1000B8680((uint64_t)v17, (uint64_t)v9, type metadata accessor for StartMigrationResponse.Error);
      sub_1000B8680((uint64_t)v9, (uint64_t)v24, type metadata accessor for StartMigrationResponse.Error);
      v25(v24, 0, 1, started);
    }
    else
    {
      sub_10001C744((uint64_t)v17, type metadata accessor for StartMigrationResponse.OneOf_Result);
    }
    v27 = v43;
    v26 = v44;
  }
  v29 = v41;
  v30 = sub_10009FC50(&qword_1008386F8, type metadata accessor for StartMigrationResponse.Error, (uint64_t)&protocol conformance descriptor for StartMigrationResponse.Error);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v24, started, v30, v27, v26);
  if (v29)
    return sub_10000882C((uint64_t)v24, &qword_100839820);
  v32 = v39;
  sub_100008868((uint64_t)v24, v39, &qword_100839820);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v32, 1, started) == 1)
  {
    sub_10000882C((uint64_t)v24, &qword_100839820);
    return sub_10000882C(v32, &qword_100839820);
  }
  else
  {
    v33 = v38;
    sub_1000B8680(v32, v38, type metadata accessor for StartMigrationResponse.Error);
    if ((_DWORD)v45 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()(v27, v26);
    sub_10000882C((uint64_t)v24, &qword_100839820);
    v34 = v36;
    sub_10000882C(v36, &qword_100838578);
    sub_1000B8680(v33, v34, type metadata accessor for StartMigrationResponse.Error);
    swift_storeEnumTagMultiPayload(v34, v28, 1);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v28);
  }
}

uint64_t StartMigrationResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t started;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = v4;
  v9 = sub_10001A630(&qword_100838578);
  __chkstk_darwin(v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v3[1];
  v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0)
    v13 = *v3 & 0xFFFFFFFFFFFFLL;
  if (!v13
    || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v3, v12, 1, a2, a3), !v4))
  {
    started = type metadata accessor for StartMigrationResponse(0);
    sub_100008868((uint64_t)v3 + *(int *)(started + 20), (uint64_t)v11, &qword_100838578);
    v16 = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v11, 1, v16) == 1)
      goto LABEL_10;
    if (swift_getEnumCaseMultiPayload(v11, v16) == 1)
      sub_1000B04C0((uint64_t)v3, a1, a2, a3);
    else
      sub_1000B0314((uint64_t)v3, a1, a2, a3);
    v5 = v4;
    result = sub_10001C744((uint64_t)v11, type metadata accessor for StartMigrationResponse.OneOf_Result);
    if (!v4)
    {
LABEL_10:
      v17 = (_QWORD *)((char *)v3 + *(int *)(started + 24));
      v18 = *v17;
      v19 = v17[1];
      v20 = HIBYTE(v19) & 0xF;
      if ((v19 & 0x2000000000000000) == 0)
        v20 = v18 & 0xFFFFFFFFFFFFLL;
      if (!v20)
        return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
      result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v18, v19, 5, a2, a3);
      if (!v5)
        return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000B0314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t started;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD v17[2];

  v7 = sub_10001A630(&qword_100838578);
  __chkstk_darwin(v7);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  started = type metadata accessor for StartMigrationResponse.Details(0);
  __chkstk_darwin(started);
  v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for StartMigrationResponse(0);
  sub_100008868(a1 + *(int *)(v13 + 20), (uint64_t)v9, &qword_100838578);
  v14 = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v9, 1, v14) == 1)
  {
    sub_10000882C((uint64_t)v9, &qword_100838578);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload(v9, v14) != 1)
  {
    sub_1000B8680((uint64_t)v9, (uint64_t)v12, type metadata accessor for StartMigrationResponse.Details);
    v15 = sub_10009FC50(&qword_1008386E0, type metadata accessor for StartMigrationResponse.Details, (uint64_t)&protocol conformance descriptor for StartMigrationResponse.Details);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2, started, v15, a3, a4);
    return sub_10001C744((uint64_t)v12, type metadata accessor for StartMigrationResponse.Details);
  }
  result = sub_10001C744((uint64_t)v9, type metadata accessor for StartMigrationResponse.OneOf_Result);
  __break(1u);
  return result;
}

uint64_t sub_1000B04C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t started;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD v17[2];

  v7 = sub_10001A630(&qword_100838578);
  __chkstk_darwin(v7);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  started = type metadata accessor for StartMigrationResponse.Error(0);
  __chkstk_darwin(started);
  v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for StartMigrationResponse(0);
  sub_100008868(a1 + *(int *)(v13 + 20), (uint64_t)v9, &qword_100838578);
  v14 = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v9, 1, v14) == 1)
  {
    sub_10000882C((uint64_t)v9, &qword_100838578);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload(v9, v14) == 1)
  {
    sub_1000B8680((uint64_t)v9, (uint64_t)v12, type metadata accessor for StartMigrationResponse.Error);
    v15 = sub_10009FC50(&qword_1008386F8, type metadata accessor for StartMigrationResponse.Error, (uint64_t)&protocol conformance descriptor for StartMigrationResponse.Error);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3, started, v15, a3, a4);
    return sub_10001C744((uint64_t)v12, type metadata accessor for StartMigrationResponse.Error);
  }
  result = sub_10001C744((uint64_t)v9, type metadata accessor for StartMigrationResponse.OneOf_Result);
  __break(1u);
  return result;
}

Swift::Int StartMigrationResponse.hashValue.getter()
{
  return sub_1000B767C(type metadata accessor for StartMigrationResponse, &qword_1008385B0, (uint64_t)&protocol conformance descriptor for StartMigrationResponse);
}

uint64_t sub_1000B068C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t started;
  __n128 v6;
  _QWORD *v7;

  *a2 = 0;
  a2[1] = 0xE000000000000000;
  v4 = (char *)a2 + *(int *)(a1 + 20);
  started = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  v6.n128_f64[0] = (*(double (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 56))(v4, 1, 1, started);
  v7 = (_QWORD *)((char *)a2 + *(int *)(a1 + 24));
  *v7 = 0;
  v7[1] = 0xE000000000000000;
  return UnknownStorage.init()(v6);
}

Swift::Void (__swiftcall *sub_1000B0704())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t sub_1000B0718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StartMigrationResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000B072C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StartMigrationResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000B0740(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100839790, type metadata accessor for StartMigrationResponse, (uint64_t)&protocol conformance descriptor for StartMigrationResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000B0790@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF4E4(&qword_100836C00, (uint64_t)static StartMigrationResponse._protobuf_nameMap, (uint64_t)sub_1000AF608, a1);
}

uint64_t sub_1000B07AC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009FC50(&qword_1008386C8, type metadata accessor for StartMigrationResponse, (uint64_t)&protocol conformance descriptor for StartMigrationResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B07EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_1008386C8, type metadata accessor for StartMigrationResponse, (uint64_t)&protocol conformance descriptor for StartMigrationResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *StartMigrationResponse.Details.protoMessageName.unsafeMutableAddressor()
{
  return &static StartMigrationResponse.Details.protoMessageName;
}

unint64_t static StartMigrationResponse.Details.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_1000B0864()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_10009EF3C(v0, static StartMigrationResponse.Details._protobuf_nameMap);
  sub_10001AAA8(v0, (uint64_t)static StartMigrationResponse.Details._protobuf_nameMap);
  v1 = sub_10001A630(&qword_1008397B8);
  v2 = sub_10001A630(&qword_1008397C0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1006A5130;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "time_elapsed";
  *(_QWORD *)(v9 + 8) = 12;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "is_observer";
  *(_QWORD *)(v13 + 8) = 11;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "lists_migrated";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "reminders_migrated";
  *((_QWORD *)v17 + 1) = 18;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t StartMigrationResponse.Details._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000AF0D8(&qword_100836C08, (uint64_t)static StartMigrationResponse.Details._protobuf_nameMap, (uint64_t)sub_1000B0864);
}

uint64_t static StartMigrationResponse.Details._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF134(&qword_100836C08, (uint64_t)static StartMigrationResponse.Details._protobuf_nameMap, (uint64_t)sub_1000B0864, a1);
}

uint64_t StartMigrationResponse.Details.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B3E04(a1, a2, a3);
}

uint64_t StartMigrationResponse.Details.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B3F04(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for StartMigrationResponse.Details);
}

Swift::Int StartMigrationResponse.Details.hashValue.getter()
{
  return sub_1000B767C(type metadata accessor for StartMigrationResponse.Details, &qword_1008385B8, (uint64_t)&protocol conformance descriptor for StartMigrationResponse.Details);
}

Swift::Void (__swiftcall *sub_1000B0AB4())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t sub_1000B0AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StartMigrationResponse.Details.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000B0ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StartMigrationResponse.Details.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000B0AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100839788, type metadata accessor for StartMigrationResponse.Details, (uint64_t)&protocol conformance descriptor for StartMigrationResponse.Details);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000B0B40@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF4E4(&qword_100836C08, (uint64_t)static StartMigrationResponse.Details._protobuf_nameMap, (uint64_t)sub_1000B0864, a1);
}

uint64_t sub_1000B0B5C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009FC50(&qword_1008386E0, type metadata accessor for StartMigrationResponse.Details, (uint64_t)&protocol conformance descriptor for StartMigrationResponse.Details);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B0B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_1008386E0, type metadata accessor for StartMigrationResponse.Details, (uint64_t)&protocol conformance descriptor for StartMigrationResponse.Details);
  return Message.hash(into:)(a1, a2, v4);
}

void *StartMigrationResponse.Error.protoMessageName.unsafeMutableAddressor()
{
  return &static StartMigrationResponse.Error.protoMessageName;
}

unint64_t static StartMigrationResponse.Error.protoMessageName.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_1000B0C18(uint64_t a1)
{
  return sub_1000B4220(a1, static StartMigrationResponse.Error._protobuf_nameMap);
}

uint64_t StartMigrationResponse.Error._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000AF0D8(&qword_100836C10, (uint64_t)static StartMigrationResponse.Error._protobuf_nameMap, (uint64_t)sub_1000B0C18);
}

uint64_t static StartMigrationResponse.Error._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF134(&qword_100836C10, (uint64_t)static StartMigrationResponse.Error._protobuf_nameMap, (uint64_t)sub_1000B0C18, a1);
}

uint64_t StartMigrationResponse.Error.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B43AC(a1, a2, a3);
}

uint64_t StartMigrationResponse.Error.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B4468(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for StartMigrationResponse.Error);
}

Swift::Int StartMigrationResponse.Error.hashValue.getter()
{
  return sub_1000B767C(type metadata accessor for StartMigrationResponse.Error, &qword_1008385C0, (uint64_t)&protocol conformance descriptor for StartMigrationResponse.Error);
}

uint64_t sub_1000B0CAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StartMigrationResponse.Error.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000B0CC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StartMigrationResponse.Error.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000B0CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100839780, type metadata accessor for StartMigrationResponse.Error, (uint64_t)&protocol conformance descriptor for StartMigrationResponse.Error);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000B0D24@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF4E4(&qword_100836C10, (uint64_t)static StartMigrationResponse.Error._protobuf_nameMap, (uint64_t)sub_1000B0C18, a1);
}

uint64_t sub_1000B0D40(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009FC50(&qword_1008386F8, type metadata accessor for StartMigrationResponse.Error, (uint64_t)&protocol conformance descriptor for StartMigrationResponse.Error);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B0D80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_1008386F8, type metadata accessor for StartMigrationResponse.Error, (uint64_t)&protocol conformance descriptor for StartMigrationResponse.Error);
  return Message.hash(into:)(a1, a2, v4);
}

const char *MigrateRequest.protoMessageName.unsafeMutableAddressor()
{
  return "MigrateRequest";
}

uint64_t static MigrateRequest.protoMessageName.getter()
{
  return 0x526574617267694DLL;
}

uint64_t sub_1000B0E00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;

  v0 = type metadata accessor for _NameMap(0);
  sub_10009EF3C(v0, static MigrateRequest._protobuf_nameMap);
  sub_10001AAA8(v0, (uint64_t)static MigrateRequest._protobuf_nameMap);
  v1 = sub_10001A630(&qword_1008397B8);
  v2 = sub_10001A630(&qword_1008397C0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 6 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1006A3BF0;
  v8 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v8 = "user";
  *(_QWORD *)(v8 + 8) = 4;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6 + v4) = 2;
  *(_QWORD *)v12 = "archivePath";
  *(_QWORD *)(v12 + 8) = 11;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + v6 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "embeddedTestData";
  *((_QWORD *)v14 + 1) = 16;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + v6 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "options";
  *((_QWORD *)v16 + 1) = 7;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v7 + v6 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "user_initiated";
  *((_QWORD *)v18 + 1) = 14;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v7 + v6 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "simulated_error";
  *((_QWORD *)v20 + 1) = 15;
  v20[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t MigrateRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000AF0D8(&qword_100836C18, (uint64_t)static MigrateRequest._protobuf_nameMap, (uint64_t)sub_1000B0E00);
}

uint64_t static MigrateRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF134(&qword_100836C18, (uint64_t)static MigrateRequest._protobuf_nameMap, (uint64_t)sub_1000B0E00, a1);
}

void MigrateRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = v3;
  v9 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(v9)
      {
        case 1:
          v13 = v11;
          sub_1000B11DC((uint64_t)v5, a1, a2, a3);
          goto LABEL_5;
        case 2:
          v13 = v11;
          sub_1000B161C(a1, v5, a2, a3, 1u);
          goto LABEL_5;
        case 3:
          v13 = v11;
          sub_1000B161C(a1, v5, a2, a3, 2u);
          goto LABEL_5;
        case 4:
          v12 = type metadata accessor for MigrateRequest(0);
          v13 = v11;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)((char *)v5 + *(int *)(v12 + 20), a2, a3);
          goto LABEL_5;
        case 5:
          v14 = type metadata accessor for MigrateRequest(0);
          v13 = v11;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)((char *)v5 + *(int *)(v14 + 24), a2, a3);
          goto LABEL_5;
        case 6:
          v15 = type metadata accessor for MigrateRequest(0);
          v13 = v11;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)((char *)v5 + *(int *)(v15 + 28), a2, a3);
LABEL_5:
          v11 = v13;
          break;
        default:
          break;
      }
      v9 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
}

uint64_t sub_1000B11DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  _BYTE v39[12];
  int v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v49 = a3;
  v50 = a4;
  v51 = a2;
  v5 = type metadata accessor for MigrateRequest.User(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v43 = &v39[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v46 = &v39[-v9];
  v10 = sub_10001A630(&qword_100838580);
  __chkstk_darwin(v10);
  v12 = &v39[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = &v39[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15);
  v19 = &v39[-v18];
  v20 = sub_10001A630(&qword_100839808);
  v21 = __chkstk_darwin(v20);
  v44 = &v39[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v21);
  v24 = &v39[-v23];
  v45 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v47 = v5;
  v25(&v39[-v23], 1, 1, v5);
  v42 = a1;
  sub_100008868(a1, (uint64_t)v12, &qword_100838580);
  v41 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    sub_10000882C((uint64_t)v12, &qword_100838580);
    v29 = v49;
    v28 = v50;
    v30 = v13;
    v32 = v47;
    v31 = v48;
  }
  else
  {
    v40 = v26;
    v33 = (uint64_t)v46;
    sub_1000B8680((uint64_t)v12, (uint64_t)v19, type metadata accessor for MigrateRequest.OneOf_Source);
    sub_1000B8680((uint64_t)v19, (uint64_t)v17, type metadata accessor for MigrateRequest.OneOf_Source);
    v30 = v13;
    if (swift_getEnumCaseMultiPayload(v17, v13))
    {
      sub_10001C744((uint64_t)v17, type metadata accessor for MigrateRequest.OneOf_Source);
      v29 = v49;
      v28 = v50;
      v32 = v47;
      v31 = v48;
    }
    else
    {
      sub_10000882C((uint64_t)v24, &qword_100839808);
      sub_1000B8680((uint64_t)v17, v33, type metadata accessor for MigrateRequest.User);
      sub_1000B8680(v33, (uint64_t)v24, type metadata accessor for MigrateRequest.User);
      v32 = v47;
      v25(v24, 0, 1, v47);
      v29 = v49;
      v28 = v50;
      v31 = v48;
    }
    v27 = v40;
  }
  v34 = sub_10009FC50(&qword_100838728, type metadata accessor for MigrateRequest.User, (uint64_t)&protocol conformance descriptor for MigrateRequest.User);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v24, v32, v34, v29, v28);
  if (v31)
    return sub_10000882C((uint64_t)v24, &qword_100839808);
  v36 = v44;
  sub_100008868((uint64_t)v24, (uint64_t)v44, &qword_100839808);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v45 + 48))(v36, 1, v32) == 1)
  {
    sub_10000882C((uint64_t)v24, &qword_100839808);
    return sub_10000882C((uint64_t)v36, &qword_100839808);
  }
  else
  {
    v37 = v43;
    sub_1000B8680((uint64_t)v36, (uint64_t)v43, type metadata accessor for MigrateRequest.User);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()(v29, v28);
    sub_10000882C((uint64_t)v24, &qword_100839808);
    v38 = v42;
    sub_10000882C(v42, &qword_100838580);
    sub_1000B8680((uint64_t)v37, v38, type metadata accessor for MigrateRequest.User);
    swift_storeEnumTagMultiPayload(v38, v30, 0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v30);
  }
}

void sub_1000B161C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;

  v10 = sub_10001A630(&qword_100838580);
  __chkstk_darwin(v10);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = 0;
  v19 = 0;
  dispatch thunk of Decoder.decodeSingularStringField(value:)(&v18, a3, a4);
  if (v5)
  {
    swift_bridgeObjectRelease(v19);
  }
  else
  {
    v13 = v19;
    if (v19)
    {
      v20 = a5;
      v17 = v18;
      sub_100008868((uint64_t)a2, (uint64_t)v12, &qword_100838580);
      v14 = type metadata accessor for MigrateRequest.OneOf_Source(0);
      v16 = *(_QWORD *)(v14 - 8);
      v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v12, 1, v14);
      sub_10000882C((uint64_t)v12, &qword_100838580);
      if (v15 != 1)
        dispatch thunk of Decoder.handleConflictingOneOf()(a3, a4);
      sub_10000882C((uint64_t)a2, &qword_100838580);
      *a2 = v17;
      a2[1] = v13;
      swift_storeEnumTagMultiPayload(a2, v14, v20);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(a2, 0, 1, v14);
    }
  }
}

void MigrateRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  int EnumCaseMultiPayload;
  uint64_t v16;

  v8 = sub_10001A630(&qword_100838580);
  __chkstk_darwin(v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008868(v3, (uint64_t)v10, &qword_100838580);
  v11 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11) != 1)
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v11);
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        sub_10001C744((uint64_t)v10, type metadata accessor for MigrateRequest.OneOf_Source);
        sub_1000B1B8C(v3, a1, a2, a3);
        if (v4)
          return;
      }
      else
      {
        sub_10001C744((uint64_t)v10, type metadata accessor for MigrateRequest.OneOf_Source);
        sub_1000B1CB4(v3, a1, a2, a3, &qword_100838580, type metadata accessor for MigrateRequest.OneOf_Source);
        if (v4)
          return;
      }
    }
    else
    {
      sub_1000B19F0(v3, a1, a2, a3);
      sub_10001C744((uint64_t)v10, type metadata accessor for MigrateRequest.OneOf_Source);
      if (v4)
        return;
    }
  }
  v12 = (int *)type metadata accessor for MigrateRequest(0);
  v13 = *(unsigned int *)(v3 + v12[5]);
  if (!(_DWORD)v13 || (dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(v13, 4, a2, a3), !v4))
  {
    if (*(_BYTE *)(v3 + v12[6]) != 1
      || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1, 5, a2, a3), !v4))
    {
      v14 = *(unsigned int *)(v3 + v12[7]);
      if (!(_DWORD)v14
        || (dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(v14, 6, a2, a3), !v4))
      {
        UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
      }
    }
  }
}

uint64_t sub_1000B19F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[2];

  v7 = sub_10001A630(&qword_100838580);
  __chkstk_darwin(v7);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MigrateRequest.User(0);
  __chkstk_darwin(v10);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008868(a1, (uint64_t)v9, &qword_100838580);
  v13 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v9, 1, v13) == 1)
  {
    sub_10000882C((uint64_t)v9, &qword_100838580);
    __break(1u);
  }
  else if (!swift_getEnumCaseMultiPayload(v9, v13))
  {
    sub_1000B8680((uint64_t)v9, (uint64_t)v12, type metadata accessor for MigrateRequest.User);
    v14 = sub_10009FC50(&qword_100838728, type metadata accessor for MigrateRequest.User, (uint64_t)&protocol conformance descriptor for MigrateRequest.User);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v10, v14, a3, a4);
    return sub_10001C744((uint64_t)v12, type metadata accessor for MigrateRequest.User);
  }
  result = sub_10001C744((uint64_t)v9, type metadata accessor for MigrateRequest.OneOf_Source);
  __break(1u);
  return result;
}

void sub_1000B1B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7 = sub_10001A630(&qword_100838580);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100008868(a1, (uint64_t)v9, &qword_100838580);
  v10 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10) == 1)
  {
    sub_10000882C((uint64_t)v9, &qword_100838580);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = *v9;
    v12 = v9[1];
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v11, v12, 2, a3, a4);
    swift_bridgeObjectRelease(v12);
    return;
  }
  sub_10001C744((uint64_t)v9, type metadata accessor for MigrateRequest.OneOf_Source);
  __break(1u);
}

void sub_1000B1CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v11 = sub_10001A630(a5);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100008868(a1, (uint64_t)v13, a5);
  v14 = a6(0);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14) == 1)
  {
    sub_10000882C((uint64_t)v13, a5);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload(v13, v14) == 2)
  {
    v15 = v13[1];
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v13, v15, 3, a3, a4);
    swift_bridgeObjectRelease(v15);
    return;
  }
  sub_10001C744((uint64_t)v13, a6);
  __break(1u);
}

Swift::Int MigrateRequest.hashValue.getter()
{
  return sub_1000B767C(type metadata accessor for MigrateRequest, &qword_1008385C8, (uint64_t)&protocol conformance descriptor for MigrateRequest);
}

uint64_t sub_1000B1DF4@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;

  v4 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  v5.n128_f64[0] = (*(double (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a2, 1, 1, v4);
  v6 = a1[6];
  *(_DWORD *)(a2 + a1[5]) = 0;
  *(_BYTE *)(a2 + v6) = 0;
  *(_DWORD *)(a2 + a1[7]) = 0;
  return UnknownStorage.init()(v5);
}

void sub_1000B1E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MigrateRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

void sub_1000B1E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MigrateRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000B1E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100839778, type metadata accessor for MigrateRequest, (uint64_t)&protocol conformance descriptor for MigrateRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000B1ECC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF4E4(&qword_100836C18, (uint64_t)static MigrateRequest._protobuf_nameMap, (uint64_t)sub_1000B0E00, a1);
}

uint64_t sub_1000B1EE8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009FC50(&qword_100838710, type metadata accessor for MigrateRequest, (uint64_t)&protocol conformance descriptor for MigrateRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B1F28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100838710, type metadata accessor for MigrateRequest, (uint64_t)&protocol conformance descriptor for MigrateRequest);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000B1F78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;

  v0 = type metadata accessor for _NameMap(0);
  sub_10009EF3C(v0, static MigrateRequest.Option._protobuf_nameMap);
  sub_10001AAA8(v0, (uint64_t)static MigrateRequest.Option._protobuf_nameMap);
  v1 = sub_10001A630(&qword_1008397B8);
  v2 = sub_10001A630(&qword_1008397C0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 6 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1006A3BF0;
  v8 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v8 = "NONE";
  *(_QWORD *)(v8 + 8) = 4;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6 + v4) = 1;
  *(_QWORD *)v12 = "DRY_RUN";
  *(_QWORD *)(v12 + 8) = 7;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + v6 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 2;
  *(_QWORD *)v14 = "DISABLE_SHARING";
  *((_QWORD *)v14 + 1) = 15;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + v6 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "SAVE_ORIGINAL_JSON";
  *((_QWORD *)v16 + 1) = 18;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v7 + v6 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 8;
  *(_QWORD *)v18 = "USER_INITIATED";
  *((_QWORD *)v18 + 1) = 14;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v7 + v6 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 16;
  *(_QWORD *)v20 = "NO_CLEANUP";
  *((_QWORD *)v20 + 1) = 10;
  v20[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t MigrateRequest.Option._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000AF0D8(&qword_100836C20, (uint64_t)static MigrateRequest.Option._protobuf_nameMap, (uint64_t)sub_1000B1F78);
}

uint64_t static MigrateRequest.Option._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF134(&qword_100836C20, (uint64_t)static MigrateRequest.Option._protobuf_nameMap, (uint64_t)sub_1000B1F78, a1);
}

uint64_t sub_1000B21E4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF4E4(&qword_100836C20, (uint64_t)static MigrateRequest.Option._protobuf_nameMap, (uint64_t)sub_1000B1F78, a1);
}

void *MigrateRequest.User.protoMessageName.unsafeMutableAddressor()
{
  return &static MigrateRequest.User.protoMessageName;
}

unint64_t static MigrateRequest.User.protoMessageName.getter()
{
  return 0xD000000000000013;
}

uint64_t sub_1000B2228()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_10009EF3C(v0, static MigrateRequest.User._protobuf_nameMap);
  sub_10001AAA8(v0, (uint64_t)static MigrateRequest.User._protobuf_nameMap);
  v1 = sub_10001A630(&qword_1008397B8);
  v2 = sub_10001A630(&qword_1008397C0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1006A3C40;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "dsID";
  *(_QWORD *)(v9 + 8) = 4;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "partition";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t MigrateRequest.User._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000AF0D8(&qword_100836C28, (uint64_t)static MigrateRequest.User._protobuf_nameMap, (uint64_t)sub_1000B2228);
}

uint64_t static MigrateRequest.User._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF134(&qword_100836C28, (uint64_t)static MigrateRequest.User._protobuf_nameMap, (uint64_t)sub_1000B2228, a1);
}

uint64_t MigrateRequest.User.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + 8, a2, a3);
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v3, a2, a3);
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t MigrateRequest.User.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;

  if (!*(_QWORD *)v3
    || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(_QWORD *)v3, 1, a2, a3), !v4))
  {
    v9 = *(unsigned int *)(v3 + 8);
    if (!(_DWORD)v9
      || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(v9, 2, a2, a3), !v4))
    {
      type metadata accessor for MigrateRequest.User(0);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }
  return result;
}

Swift::Int MigrateRequest.User.hashValue.getter()
{
  return sub_1000B767C(type metadata accessor for MigrateRequest.User, &qword_1008385D0, (uint64_t)&protocol conformance descriptor for MigrateRequest.User);
}

uint64_t sub_1000B2524@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return UnknownStorage.init()();
}

uint64_t sub_1000B2548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MigrateRequest.User.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000B255C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MigrateRequest.User.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000B2570(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100839770, type metadata accessor for MigrateRequest.User, (uint64_t)&protocol conformance descriptor for MigrateRequest.User);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000B25C0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF4E4(&qword_100836C28, (uint64_t)static MigrateRequest.User._protobuf_nameMap, (uint64_t)sub_1000B2228, a1);
}

uint64_t sub_1000B25DC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009FC50(&qword_100838728, type metadata accessor for MigrateRequest.User, (uint64_t)&protocol conformance descriptor for MigrateRequest.User);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B261C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100838728, type metadata accessor for MigrateRequest.User, (uint64_t)&protocol conformance descriptor for MigrateRequest.User);
  return Message.hash(into:)(a1, a2, v4);
}

void *MigrateResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static MigrateResponse.protoMessageName;
}

uint64_t static MigrateResponse.protoMessageName.getter()
{
  return 0x526574617267694DLL;
}

uint64_t sub_1000B269C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_10009EF3C(v0, static MigrateResponse._protobuf_nameMap);
  sub_10001AAA8(v0, (uint64_t)static MigrateResponse._protobuf_nameMap);
  v1 = sub_10001A630(&qword_1008397B8);
  v2 = sub_10001A630(&qword_1008397C0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1006A5140;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "state";
  *(_QWORD *)(v9 + 8) = 5;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "success";
  *(_QWORD *)(v13 + 8) = 7;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "error";
  *((_QWORD *)v15 + 1) = 5;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "next_step";
  *((_QWORD *)v17 + 1) = 9;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 5;
  *(_QWORD *)v18 = "logs";
  *(_QWORD *)(v18 + 8) = 4;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t MigrateResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000AF0D8(&qword_100836C30, (uint64_t)static MigrateResponse._protobuf_nameMap, (uint64_t)sub_1000B269C);
}

uint64_t static MigrateResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF134(&qword_100836C30, (uint64_t)static MigrateResponse._protobuf_nameMap, (uint64_t)sub_1000B269C, a1);
}

uint64_t MigrateResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v12 = v5;
          goto LABEL_5;
        case 2:
          v13 = v11;
          sub_1000B29F4(v5, a1, a2, a3);
          goto LABEL_6;
        case 3:
          v13 = v11;
          sub_1000B2E14(v5, a1, a2, a3);
          goto LABEL_6;
        case 4:
          v13 = v11;
          sub_1000B3234(a1, v5, a2, a3);
          goto LABEL_6;
        case 5:
          v12 = v5 + *(int *)(type metadata accessor for MigrateResponse(0) + 24);
LABEL_5:
          v13 = v11;
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v12, a2, a3);
LABEL_6:
          v11 = v13;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000B29F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v42 = a2;
  v43 = a3;
  v44 = a4;
  v45 = a1;
  v4 = type metadata accessor for MigrateResponse.Details(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v38 = (uint64_t)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v35 - v8;
  v10 = sub_10001A630(&qword_100838588);
  __chkstk_darwin(v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v35 - v18;
  v20 = sub_10001A630(&qword_1008397F0);
  v21 = __chkstk_darwin(v20);
  v39 = (uint64_t)&v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v24 = (char *)&v35 - v23;
  v40 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v35 - v23, 1, 1, v4);
  v36 = v45 + *(int *)(type metadata accessor for MigrateResponse(0) + 20);
  sub_100008868(v36, (uint64_t)v12, &qword_100838588);
  v37 = v14;
  LODWORD(v45) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v45 == 1)
  {
    sub_10000882C((uint64_t)v12, &qword_100838588);
    v27 = v43;
    v26 = v44;
    v28 = v13;
  }
  else
  {
    sub_1000B8680((uint64_t)v12, (uint64_t)v19, type metadata accessor for MigrateResponse.OneOf_Result);
    sub_1000B8680((uint64_t)v19, (uint64_t)v17, type metadata accessor for MigrateResponse.OneOf_Result);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload(v17, v13) == 1)
    {
      sub_10001C744((uint64_t)v17, type metadata accessor for MigrateResponse.OneOf_Result);
    }
    else
    {
      sub_10000882C((uint64_t)v24, &qword_1008397F0);
      sub_1000B8680((uint64_t)v17, (uint64_t)v9, type metadata accessor for MigrateResponse.Details);
      sub_1000B8680((uint64_t)v9, (uint64_t)v24, type metadata accessor for MigrateResponse.Details);
      v25(v24, 0, 1, v4);
    }
    v27 = v43;
    v26 = v44;
  }
  v29 = v41;
  v30 = sub_10009FC50(&qword_100838758, type metadata accessor for MigrateResponse.Details, (uint64_t)&protocol conformance descriptor for MigrateResponse.Details);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v24, v4, v30, v27, v26);
  if (v29)
    return sub_10000882C((uint64_t)v24, &qword_1008397F0);
  v32 = v39;
  sub_100008868((uint64_t)v24, v39, &qword_1008397F0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v32, 1, v4) == 1)
  {
    sub_10000882C((uint64_t)v24, &qword_1008397F0);
    return sub_10000882C(v32, &qword_1008397F0);
  }
  else
  {
    v33 = v38;
    sub_1000B8680(v32, v38, type metadata accessor for MigrateResponse.Details);
    if ((_DWORD)v45 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()(v27, v26);
    sub_10000882C((uint64_t)v24, &qword_1008397F0);
    v34 = v36;
    sub_10000882C(v36, &qword_100838588);
    sub_1000B8680(v33, v34, type metadata accessor for MigrateResponse.Details);
    swift_storeEnumTagMultiPayload(v34, v28, 0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v28);
  }
}

uint64_t sub_1000B2E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v42 = a2;
  v43 = a3;
  v44 = a4;
  v45 = a1;
  v4 = type metadata accessor for MigrateResponse.Error(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v38 = (uint64_t)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v35 - v8;
  v10 = sub_10001A630(&qword_100838588);
  __chkstk_darwin(v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v35 - v18;
  v20 = sub_10001A630(&qword_1008397F8);
  v21 = __chkstk_darwin(v20);
  v39 = (uint64_t)&v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v24 = (char *)&v35 - v23;
  v40 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v35 - v23, 1, 1, v4);
  v36 = v45 + *(int *)(type metadata accessor for MigrateResponse(0) + 20);
  sub_100008868(v36, (uint64_t)v12, &qword_100838588);
  v37 = v14;
  LODWORD(v45) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v45 == 1)
  {
    sub_10000882C((uint64_t)v12, &qword_100838588);
    v27 = v43;
    v26 = v44;
    v28 = v13;
  }
  else
  {
    sub_1000B8680((uint64_t)v12, (uint64_t)v19, type metadata accessor for MigrateResponse.OneOf_Result);
    sub_1000B8680((uint64_t)v19, (uint64_t)v17, type metadata accessor for MigrateResponse.OneOf_Result);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload(v17, v13) == 1)
    {
      sub_10000882C((uint64_t)v24, &qword_1008397F8);
      sub_1000B8680((uint64_t)v17, (uint64_t)v9, type metadata accessor for MigrateResponse.Error);
      sub_1000B8680((uint64_t)v9, (uint64_t)v24, type metadata accessor for MigrateResponse.Error);
      v25(v24, 0, 1, v4);
    }
    else
    {
      sub_10001C744((uint64_t)v17, type metadata accessor for MigrateResponse.OneOf_Result);
    }
    v27 = v43;
    v26 = v44;
  }
  v29 = v41;
  v30 = sub_10009FC50(&qword_100838770, type metadata accessor for MigrateResponse.Error, (uint64_t)&protocol conformance descriptor for MigrateResponse.Error);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v24, v4, v30, v27, v26);
  if (v29)
    return sub_10000882C((uint64_t)v24, &qword_1008397F8);
  v32 = v39;
  sub_100008868((uint64_t)v24, v39, &qword_1008397F8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v32, 1, v4) == 1)
  {
    sub_10000882C((uint64_t)v24, &qword_1008397F8);
    return sub_10000882C(v32, &qword_1008397F8);
  }
  else
  {
    v33 = v38;
    sub_1000B8680(v32, v38, type metadata accessor for MigrateResponse.Error);
    if ((_DWORD)v45 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()(v27, v26);
    sub_10000882C((uint64_t)v24, &qword_1008397F8);
    v34 = v36;
    sub_10000882C(v36, &qword_100838588);
    sub_1000B8680(v33, v34, type metadata accessor for MigrateResponse.Error);
    swift_storeEnumTagMultiPayload(v34, v28, 1);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v28);
  }
}

uint64_t sub_1000B3234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t Step;
  uint64_t v8;

  v6 = a2 + *(int *)(type metadata accessor for MigrateResponse(0) + 32);
  Step = type metadata accessor for MigrateResponse.NextStep(0);
  v8 = sub_10009FC50(&qword_100838788, type metadata accessor for MigrateResponse.NextStep, (uint64_t)&protocol conformance descriptor for MigrateResponse.NextStep);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v6, Step, v8, a3, a4);
}

uint64_t MigrateResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = v4;
  v9 = sub_10001A630(&qword_100838588);
  __chkstk_darwin(v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v3[1];
  v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0)
    v13 = *v3 & 0xFFFFFFFFFFFFLL;
  if (!v13
    || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v3, v12, 1, a2, a3), !v4))
  {
    v15 = type metadata accessor for MigrateResponse(0);
    sub_100008868((uint64_t)v3 + *(int *)(v15 + 20), (uint64_t)v11, &qword_100838588);
    v16 = type metadata accessor for MigrateResponse.OneOf_Result(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v11, 1, v16) == 1)
      goto LABEL_10;
    if (swift_getEnumCaseMultiPayload(v11, v16) == 1)
      sub_1000B3668((uint64_t)v3, a1, a2, a3);
    else
      sub_1000B34BC((uint64_t)v3, a1, a2, a3);
    v5 = v4;
    result = sub_10001C744((uint64_t)v11, type metadata accessor for MigrateResponse.OneOf_Result);
    if (!v4)
    {
LABEL_10:
      result = sub_1000B3814((uint64_t)v3, a1, a2, a3);
      if (!v5)
      {
        v17 = (_QWORD *)((char *)v3 + *(int *)(v15 + 24));
        v18 = *v17;
        v19 = v17[1];
        v20 = HIBYTE(v19) & 0xF;
        if ((v19 & 0x2000000000000000) == 0)
          v20 = v18 & 0xFFFFFFFFFFFFLL;
        if (v20)
          dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v18, v19, 5, a2, a3);
        return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
      }
    }
  }
  return result;
}

uint64_t sub_1000B34BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD v17[2];

  v7 = sub_10001A630(&qword_100838588);
  __chkstk_darwin(v7);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MigrateResponse.Details(0);
  __chkstk_darwin(v10);
  v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MigrateResponse(0);
  sub_100008868(a1 + *(int *)(v13 + 20), (uint64_t)v9, &qword_100838588);
  v14 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v9, 1, v14) == 1)
  {
    sub_10000882C((uint64_t)v9, &qword_100838588);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload(v9, v14) != 1)
  {
    sub_1000B8680((uint64_t)v9, (uint64_t)v12, type metadata accessor for MigrateResponse.Details);
    v15 = sub_10009FC50(&qword_100838758, type metadata accessor for MigrateResponse.Details, (uint64_t)&protocol conformance descriptor for MigrateResponse.Details);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2, v10, v15, a3, a4);
    return sub_10001C744((uint64_t)v12, type metadata accessor for MigrateResponse.Details);
  }
  result = sub_10001C744((uint64_t)v9, type metadata accessor for MigrateResponse.OneOf_Result);
  __break(1u);
  return result;
}

uint64_t sub_1000B3668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD v17[2];

  v7 = sub_10001A630(&qword_100838588);
  __chkstk_darwin(v7);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MigrateResponse.Error(0);
  __chkstk_darwin(v10);
  v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MigrateResponse(0);
  sub_100008868(a1 + *(int *)(v13 + 20), (uint64_t)v9, &qword_100838588);
  v14 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v9, 1, v14) == 1)
  {
    sub_10000882C((uint64_t)v9, &qword_100838588);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload(v9, v14) == 1)
  {
    sub_1000B8680((uint64_t)v9, (uint64_t)v12, type metadata accessor for MigrateResponse.Error);
    v15 = sub_10009FC50(&qword_100838770, type metadata accessor for MigrateResponse.Error, (uint64_t)&protocol conformance descriptor for MigrateResponse.Error);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3, v10, v15, a3, a4);
    return sub_10001C744((uint64_t)v12, type metadata accessor for MigrateResponse.Error);
  }
  result = sub_10001C744((uint64_t)v9, type metadata accessor for MigrateResponse.OneOf_Result);
  __break(1u);
  return result;
}

uint64_t sub_1000B3814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Step;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_10001A630(&qword_100838590);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Step = type metadata accessor for MigrateResponse.NextStep(0);
  v10 = *(_QWORD *)(Step - 8);
  __chkstk_darwin(Step);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MigrateResponse(0);
  sub_100008868(a1 + *(int *)(v13 + 32), (uint64_t)v8, &qword_100838590);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, Step) == 1)
    return sub_10000882C((uint64_t)v8, &qword_100838590);
  sub_1000B8680((uint64_t)v8, (uint64_t)v12, type metadata accessor for MigrateResponse.NextStep);
  v15 = sub_10009FC50(&qword_100838788, type metadata accessor for MigrateResponse.NextStep, (uint64_t)&protocol conformance descriptor for MigrateResponse.NextStep);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4, Step, v15, a3, v17);
  return sub_10001C744((uint64_t)v12, type metadata accessor for MigrateResponse.NextStep);
}

Swift::Int MigrateResponse.hashValue.getter()
{
  return sub_1000B767C(type metadata accessor for MigrateResponse, &qword_1008385D8, (uint64_t)&protocol conformance descriptor for MigrateResponse);
}

uint64_t sub_1000B39A8@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  __n128 v6;
  _QWORD *v7;
  char *v8;
  uint64_t Step;

  *a2 = 0;
  a2[1] = 0xE000000000000000;
  v4 = (char *)a2 + a1[5];
  v5 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  v6.n128_f64[0] = (*(double (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7 = (_QWORD *)((char *)a2 + a1[6]);
  *v7 = 0;
  v7[1] = 0xE000000000000000;
  UnknownStorage.init()(v6);
  v8 = (char *)a2 + a1[8];
  Step = type metadata accessor for MigrateResponse.NextStep(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Step - 8) + 56))(v8, 1, 1, Step);
}

uint64_t sub_1000B3A40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1000B3A80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t sub_1000B3AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MigrateResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000B3AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MigrateResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000B3AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100839768, type metadata accessor for MigrateResponse, (uint64_t)&protocol conformance descriptor for MigrateResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000B3B38@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF4E4(&qword_100836C30, (uint64_t)static MigrateResponse._protobuf_nameMap, (uint64_t)sub_1000B269C, a1);
}

uint64_t sub_1000B3B54(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009FC50(&qword_100838740, type metadata accessor for MigrateResponse, (uint64_t)&protocol conformance descriptor for MigrateResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B3B94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100838740, type metadata accessor for MigrateResponse, (uint64_t)&protocol conformance descriptor for MigrateResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *MigrateResponse.Details.protoMessageName.unsafeMutableAddressor()
{
  return &static MigrateResponse.Details.protoMessageName;
}

unint64_t static MigrateResponse.Details.protoMessageName.getter()
{
  return 0xD000000000000017;
}

uint64_t sub_1000B3C0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_10009EF3C(v0, static MigrateResponse.Details._protobuf_nameMap);
  sub_10001AAA8(v0, (uint64_t)static MigrateResponse.Details._protobuf_nameMap);
  v1 = sub_10001A630(&qword_1008397B8);
  v2 = sub_10001A630(&qword_1008397C0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1006A5130;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "time_elapsed";
  *(_QWORD *)(v9 + 8) = 12;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "is_observer";
  *(_QWORD *)(v13 + 8) = 11;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "lists_migrated";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "reminders_migrated";
  *((_QWORD *)v17 + 1) = 18;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t MigrateResponse.Details._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000AF0D8(&qword_100836C38, (uint64_t)static MigrateResponse.Details._protobuf_nameMap, (uint64_t)sub_1000B3C0C);
}

uint64_t static MigrateResponse.Details._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF134(&qword_100836C38, (uint64_t)static MigrateResponse.Details._protobuf_nameMap, (uint64_t)sub_1000B3C0C, a1);
}

uint64_t sub_1000B3E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3, a2, a3);
          break;
        case 2:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + 8, a2, a3);
          break;
        case 3:
          v9 = v3 + 12;
          goto LABEL_11;
        case 4:
          v9 = v3 + 16;
LABEL_11:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v9, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t MigrateResponse.Details.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B3F04(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for MigrateResponse.Details);
}

uint64_t sub_1000B3F04(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v7 = v4;
  if (*(double *)v7 == 0.0
    || (result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1, a2, a3, *(double *)v7), !v5))
  {
    if (*(_BYTE *)(v7 + 8) != 1
      || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1, 2, a2, a3), !v5))
    {
      v12 = *(unsigned int *)(v7 + 12);
      if (!(_DWORD)v12
        || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(v12, 3, a2, a3), !v5))
      {
        v13 = *(unsigned int *)(v7 + 16);
        if (!(_DWORD)v13
          || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(v13, 4, a2, a3), !v5))
        {
          a4(0);
          return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
        }
      }
    }
  }
  return result;
}

Swift::Int MigrateResponse.Details.hashValue.getter()
{
  return sub_1000B767C(type metadata accessor for MigrateResponse.Details, &qword_1008385E0, (uint64_t)&protocol conformance descriptor for MigrateResponse.Details);
}

uint64_t sub_1000B4030@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  return UnknownStorage.init()();
}

uint64_t sub_1000B4058@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 32);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1000B4098(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t sub_1000B40D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MigrateResponse.Details.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000B40EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100839760, type metadata accessor for MigrateResponse.Details, (uint64_t)&protocol conformance descriptor for MigrateResponse.Details);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000B413C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF4E4(&qword_100836C38, (uint64_t)static MigrateResponse.Details._protobuf_nameMap, (uint64_t)sub_1000B3C0C, a1);
}

uint64_t sub_1000B4158(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009FC50(&qword_100838758, type metadata accessor for MigrateResponse.Details, (uint64_t)&protocol conformance descriptor for MigrateResponse.Details);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B4198(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100838758, type metadata accessor for MigrateResponse.Details, (uint64_t)&protocol conformance descriptor for MigrateResponse.Details);
  return Message.hash(into:)(a1, a2, v4);
}

void *MigrateResponse.Error.protoMessageName.unsafeMutableAddressor()
{
  return &static MigrateResponse.Error.protoMessageName;
}

unint64_t static MigrateResponse.Error.protoMessageName.getter()
{
  return 0xD000000000000015;
}

uint64_t sub_1000B4214(uint64_t a1)
{
  return sub_1000B4220(a1, static MigrateResponse.Error._protobuf_nameMap);
}

uint64_t sub_1000B4220(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  char *v16;

  v3 = type metadata accessor for _NameMap(0);
  sub_10009EF3C(v3, a2);
  sub_10001AAA8(v3, (uint64_t)a2);
  v4 = sub_10001A630(&qword_1008397B8);
  v5 = sub_10001A630(&qword_1008397C0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 72);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = swift_allocObject(v4, v9 + 2 * v7, v8 | 7);
  *(_OWORD *)(v10 + 16) = xmmword_1006A3C40;
  v11 = (_QWORD *)(v10 + v9);
  v12 = v10 + v9 + *(int *)(v5 + 48);
  *v11 = 1;
  *(_QWORD *)v12 = "message";
  *(_QWORD *)(v12 + 8) = 7;
  *(_BYTE *)(v12 + 16) = 2;
  v13 = enum case for _NameMap.NameDescription.same(_:);
  v14 = type metadata accessor for _NameMap.NameDescription(0);
  v15 = *(void (**)(void))(*(_QWORD *)(v14 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v15)(v12, v13, v14);
  v16 = (char *)v11 + v7 + *(int *)(v5 + 48);
  *(_QWORD *)((char *)v11 + v7) = 2;
  *(_QWORD *)v16 = "retry_count";
  *((_QWORD *)v16 + 1) = 11;
  v16[16] = 2;
  v15();
  return _NameMap.init(dictionaryLiteral:)(v10);
}

uint64_t MigrateResponse.Error._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000AF0D8(&qword_100836C40, (uint64_t)static MigrateResponse.Error._protobuf_nameMap, (uint64_t)sub_1000B4214);
}

uint64_t static MigrateResponse.Error._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF134(&qword_100836C40, (uint64_t)static MigrateResponse.Error._protobuf_nameMap, (uint64_t)sub_1000B4214, a1);
}

uint64_t sub_1000B43AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3 + 16, a2, a3);
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)(v3, a2, a3);
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t MigrateResponse.Error.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B4468(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for MigrateResponse.Error);
}

uint64_t sub_1000B4468(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v10 = *(_QWORD *)(v4 + 8);
  v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0)
    v11 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFLL;
  if (!v11 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v5))
  {
    v13 = *(unsigned int *)(v4 + 16);
    if (!(_DWORD)v13
      || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(v13, 2, a2, a3), !v5))
    {
      a4(0);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }
  return result;
}

Swift::Int MigrateResponse.Error.hashValue.getter()
{
  return sub_1000B767C(type metadata accessor for MigrateResponse.Error, &qword_1008385E8, (uint64_t)&protocol conformance descriptor for MigrateResponse.Error);
}

uint64_t sub_1000B4558@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_DWORD *)(a1 + 16) = 0;
  return UnknownStorage.init()();
}

uint64_t sub_1000B4580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MigrateResponse.Error.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000B4594(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100839758, type metadata accessor for MigrateResponse.Error, (uint64_t)&protocol conformance descriptor for MigrateResponse.Error);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000B45E4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF4E4(&qword_100836C40, (uint64_t)static MigrateResponse.Error._protobuf_nameMap, (uint64_t)sub_1000B4214, a1);
}

uint64_t sub_1000B4600(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009FC50(&qword_100838770, type metadata accessor for MigrateResponse.Error, (uint64_t)&protocol conformance descriptor for MigrateResponse.Error);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B4640(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100838770, type metadata accessor for MigrateResponse.Error, (uint64_t)&protocol conformance descriptor for MigrateResponse.Error);
  return Message.hash(into:)(a1, a2, v4);
}

void *MigrateResponse.NextStep.protoMessageName.unsafeMutableAddressor()
{
  return &static MigrateResponse.NextStep.protoMessageName;
}

unint64_t static MigrateResponse.NextStep.protoMessageName.getter()
{
  return 0xD000000000000018;
}

uint64_t sub_1000B46B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_10009EF3C(v0, static MigrateResponse.NextStep._protobuf_nameMap);
  sub_10001AAA8(v0, (uint64_t)static MigrateResponse.NextStep._protobuf_nameMap);
  v1 = sub_10001A630(&qword_1008397B8);
  v2 = sub_10001A630(&qword_1008397C0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1006A5140;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "defined";
  *(_QWORD *)(v9 + 8) = 7;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "is_terminated";
  *(_QWORD *)(v13 + 8) = 13;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "next_invocation_in_seconds";
  *((_QWORD *)v15 + 1) = 26;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "invocation_count";
  *((_QWORD *)v17 + 1) = 16;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 5;
  *(_QWORD *)v18 = "failure_count";
  *(_QWORD *)(v18 + 8) = 13;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t MigrateResponse.NextStep._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000AF0D8(&qword_100836C48, (uint64_t)static MigrateResponse.NextStep._protobuf_nameMap, (uint64_t)sub_1000B46B8);
}

uint64_t static MigrateResponse.NextStep._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF134(&qword_100836C48, (uint64_t)static MigrateResponse.NextStep._protobuf_nameMap, (uint64_t)sub_1000B46B8, a1);
}

uint64_t MigrateResponse.NextStep.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v10 = v3;
          goto LABEL_11;
        case 2:
          v10 = v3 + 1;
LABEL_11:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v10, a2, a3);
          break;
        case 3:
          v9 = v3 + 4;
          goto LABEL_5;
        case 4:
          v9 = v3 + 8;
          goto LABEL_5;
        case 5:
          v9 = v3 + 12;
LABEL_5:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v9, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t MigrateResponse.NextStep.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  if (*(_BYTE *)v5 != 1
    || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1, 1, a2, a3), !v4))
  {
    if (*(_BYTE *)(v5 + 1) != 1
      || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1, 2, a2, a3), !v4))
    {
      v10 = *(unsigned int *)(v5 + 4);
      if (!(_DWORD)v10
        || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(v10, 3, a2, a3), !v4))
      {
        v11 = *(unsigned int *)(v5 + 8);
        if (!(_DWORD)v11
          || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(v11, 4, a2, a3), !v4))
        {
          v12 = *(unsigned int *)(v5 + 12);
          if (!(_DWORD)v12
            || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(v12, 5, a2, a3), !v4))
          {
            type metadata accessor for MigrateResponse.NextStep(0);
            return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
          }
        }
      }
    }
  }
  return result;
}

Swift::Int MigrateResponse.NextStep.hashValue.getter()
{
  return sub_1000B767C(type metadata accessor for MigrateResponse.NextStep, &qword_1008385F0, (uint64_t)&protocol conformance descriptor for MigrateResponse.NextStep);
}

uint64_t sub_1000B4B38@<X0>(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  return UnknownStorage.init()();
}

uint64_t sub_1000B4B60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 36);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1000B4BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t sub_1000B4BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MigrateResponse.NextStep.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000B4BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MigrateResponse.NextStep.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000B4C08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100839750, type metadata accessor for MigrateResponse.NextStep, (uint64_t)&protocol conformance descriptor for MigrateResponse.NextStep);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000B4C58@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF4E4(&qword_100836C48, (uint64_t)static MigrateResponse.NextStep._protobuf_nameMap, (uint64_t)sub_1000B46B8, a1);
}

uint64_t sub_1000B4C74(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009FC50(&qword_100838788, type metadata accessor for MigrateResponse.NextStep, (uint64_t)&protocol conformance descriptor for MigrateResponse.NextStep);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B4CB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100838788, type metadata accessor for MigrateResponse.NextStep, (uint64_t)&protocol conformance descriptor for MigrateResponse.NextStep);
  return Message.hash(into:)(a1, a2, v4);
}

void *UnmigrateRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static UnmigrateRequest.protoMessageName;
}

unint64_t static UnmigrateRequest.protoMessageName.getter()
{
  return 0xD000000000000010;
}

uint64_t sub_1000B4D2C(uint64_t a1)
{
  return sub_1000B7478(a1, static UnmigrateRequest._protobuf_nameMap, (uint64_t)"options", 7, (unsigned int *)&enum case for _NameMap.NameDescription.same(_:));
}

uint64_t UnmigrateRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000AF0D8(&qword_100836C50, (uint64_t)static UnmigrateRequest._protobuf_nameMap, (uint64_t)sub_1000B4D2C);
}

uint64_t static UnmigrateRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF134(&qword_100836C50, (uint64_t)static UnmigrateRequest._protobuf_nameMap, (uint64_t)sub_1000B4D2C, a1);
}

uint64_t UnmigrateRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t i;
  uint64_t result;
  char v10;

  v7 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v10 & 1) != 0)
      break;
    if (result == 1)
      dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3, a2, a3);
    v7 = a2;
  }
  return result;
}

uint64_t UnmigrateRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t result;

  v8 = *v3;
  if (!(_DWORD)v8
    || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(v8, 1, a2, a3), !v4))
  {
    type metadata accessor for UnmigrateRequest(0);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int UnmigrateRequest.hashValue.getter()
{
  return sub_1000B767C(type metadata accessor for UnmigrateRequest, &qword_1008385F8, (uint64_t)&protocol conformance descriptor for UnmigrateRequest);
}

uint64_t sub_1000B4EA0@<X0>(_DWORD *a1@<X8>)
{
  *a1 = 0;
  return UnknownStorage.init()();
}

Swift::Void (__swiftcall *sub_1000B4EC8())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t sub_1000B4EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnmigrateRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000B4EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnmigrateRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000B4F04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100839748, type metadata accessor for UnmigrateRequest, (uint64_t)&protocol conformance descriptor for UnmigrateRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000B4F54@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF4E4(&qword_100836C50, (uint64_t)static UnmigrateRequest._protobuf_nameMap, (uint64_t)sub_1000B4D2C, a1);
}

uint64_t sub_1000B4F70(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009FC50(&qword_1008387A0, type metadata accessor for UnmigrateRequest, (uint64_t)&protocol conformance descriptor for UnmigrateRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B4FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_1008387A0, type metadata accessor for UnmigrateRequest, (uint64_t)&protocol conformance descriptor for UnmigrateRequest);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000B5000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v0 = type metadata accessor for _NameMap(0);
  sub_10009EF3C(v0, static UnmigrateRequest.Option._protobuf_nameMap);
  sub_10001AAA8(v0, (uint64_t)static UnmigrateRequest.Option._protobuf_nameMap);
  v1 = sub_10001A630(&qword_1008397B8);
  v2 = sub_10001A630(&qword_1008397C0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1006A3C00;
  v8 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v8 = "NONE";
  *(_QWORD *)(v8 + 8) = 4;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v8, v9, v10);
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t UnmigrateRequest.Option._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000AF0D8(&qword_100836C58, (uint64_t)static UnmigrateRequest.Option._protobuf_nameMap, (uint64_t)sub_1000B5000);
}

uint64_t static UnmigrateRequest.Option._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF134(&qword_100836C58, (uint64_t)static UnmigrateRequest.Option._protobuf_nameMap, (uint64_t)sub_1000B5000, a1);
}

uint64_t sub_1000B5138@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF4E4(&qword_100836C58, (uint64_t)static UnmigrateRequest.Option._protobuf_nameMap, (uint64_t)sub_1000B5000, a1);
}

void *UnmigrateResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static UnmigrateResponse.protoMessageName;
}

unint64_t static UnmigrateResponse.protoMessageName.getter()
{
  return 0xD000000000000011;
}

uint64_t sub_1000B517C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_10009EF3C(v0, static UnmigrateResponse._protobuf_nameMap);
  sub_10001AAA8(v0, (uint64_t)static UnmigrateResponse._protobuf_nameMap);
  v1 = sub_10001A630(&qword_1008397B8);
  v2 = sub_10001A630(&qword_1008397C0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1006A3C20;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "success";
  *(_QWORD *)(v9 + 8) = 7;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "error";
  *((_QWORD *)v13 + 1) = 5;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 3;
  *(_QWORD *)v14 = "logs";
  *(_QWORD *)(v14 + 8) = 4;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t UnmigrateResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000AF0D8(&qword_100836C60, (uint64_t)static UnmigrateResponse._protobuf_nameMap, (uint64_t)sub_1000B517C);
}

uint64_t static UnmigrateResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF134(&qword_100836C60, (uint64_t)static UnmigrateResponse._protobuf_nameMap, (uint64_t)sub_1000B517C, a1);
}

uint64_t UnmigrateResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char v14;

  v5 = v3;
  v9 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v9, i);
    v12 = v4;
    if (v4 || (v14 & 1) != 0)
      break;
    switch(result)
    {
      case 3:
        v11 = type metadata accessor for UnmigrateResponse(0);
        dispatch thunk of Decoder.decodeSingularStringField(value:)(v5 + *(int *)(v11 + 20), a2, a3);
LABEL_3:
        v12 = 0;
        break;
      case 2:
        sub_1000B5868(v5, a1, a2, a3);
        goto LABEL_3;
      case 1:
        sub_1000B5424(v5, a1, a2, a3);
        goto LABEL_3;
    }
    v4 = v12;
    v9 = a2;
  }
  return result;
}

uint64_t sub_1000B5424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  _BYTE v39[12];
  int v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v49 = a3;
  v50 = a4;
  v51 = a2;
  v5 = type metadata accessor for UnmigrateResponse.Details(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v43 = &v39[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v46 = &v39[-v9];
  v10 = sub_10001A630(&qword_100838598);
  __chkstk_darwin(v10);
  v12 = &v39[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = &v39[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15);
  v19 = &v39[-v18];
  v20 = sub_10001A630(&qword_1008397D0);
  v21 = __chkstk_darwin(v20);
  v44 = &v39[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v21);
  v24 = &v39[-v23];
  v45 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v47 = v5;
  v25(&v39[-v23], 1, 1, v5);
  v42 = a1;
  sub_100008868(a1, (uint64_t)v12, &qword_100838598);
  v41 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    sub_10000882C((uint64_t)v12, &qword_100838598);
    v29 = v49;
    v28 = v50;
    v30 = v13;
    v32 = v47;
    v31 = v48;
  }
  else
  {
    v40 = v26;
    v33 = (uint64_t)v46;
    sub_1000B8680((uint64_t)v12, (uint64_t)v19, type metadata accessor for UnmigrateResponse.OneOf_Result);
    sub_1000B8680((uint64_t)v19, (uint64_t)v17, type metadata accessor for UnmigrateResponse.OneOf_Result);
    v30 = v13;
    if (swift_getEnumCaseMultiPayload(v17, v13) == 1)
    {
      sub_10001C744((uint64_t)v17, type metadata accessor for UnmigrateResponse.OneOf_Result);
      v29 = v49;
      v28 = v50;
      v32 = v47;
      v31 = v48;
    }
    else
    {
      sub_10000882C((uint64_t)v24, &qword_1008397D0);
      sub_1000B8680((uint64_t)v17, v33, type metadata accessor for UnmigrateResponse.Details);
      sub_1000B8680(v33, (uint64_t)v24, type metadata accessor for UnmigrateResponse.Details);
      v32 = v47;
      v25(v24, 0, 1, v47);
      v29 = v49;
      v28 = v50;
      v31 = v48;
    }
    v27 = v40;
  }
  v34 = sub_10009FC50(&qword_1008387D0, type metadata accessor for UnmigrateResponse.Details, (uint64_t)&protocol conformance descriptor for UnmigrateResponse.Details);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v24, v32, v34, v29, v28);
  if (v31)
    return sub_10000882C((uint64_t)v24, &qword_1008397D0);
  v36 = v44;
  sub_100008868((uint64_t)v24, (uint64_t)v44, &qword_1008397D0);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v45 + 48))(v36, 1, v32) == 1)
  {
    sub_10000882C((uint64_t)v24, &qword_1008397D0);
    return sub_10000882C((uint64_t)v36, &qword_1008397D0);
  }
  else
  {
    v37 = v43;
    sub_1000B8680((uint64_t)v36, (uint64_t)v43, type metadata accessor for UnmigrateResponse.Details);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()(v29, v28);
    sub_10000882C((uint64_t)v24, &qword_1008397D0);
    v38 = v42;
    sub_10000882C(v42, &qword_100838598);
    sub_1000B8680((uint64_t)v37, v38, type metadata accessor for UnmigrateResponse.Details);
    swift_storeEnumTagMultiPayload(v38, v30, 0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v30);
  }
}

uint64_t sub_1000B5868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  _BYTE v39[12];
  int v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v49 = a3;
  v50 = a4;
  v51 = a2;
  v5 = type metadata accessor for UnmigrateResponse.Error(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v43 = &v39[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v46 = &v39[-v9];
  v10 = sub_10001A630(&qword_100838598);
  __chkstk_darwin(v10);
  v12 = &v39[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = &v39[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15);
  v19 = &v39[-v18];
  v20 = sub_10001A630(&qword_1008397D8);
  v21 = __chkstk_darwin(v20);
  v44 = &v39[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v21);
  v24 = &v39[-v23];
  v45 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v47 = v5;
  v25(&v39[-v23], 1, 1, v5);
  v42 = a1;
  sub_100008868(a1, (uint64_t)v12, &qword_100838598);
  v41 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    sub_10000882C((uint64_t)v12, &qword_100838598);
    v29 = v49;
    v28 = v50;
    v30 = v13;
    v32 = v47;
    v31 = v48;
  }
  else
  {
    v40 = v26;
    v33 = (uint64_t)v46;
    sub_1000B8680((uint64_t)v12, (uint64_t)v19, type metadata accessor for UnmigrateResponse.OneOf_Result);
    sub_1000B8680((uint64_t)v19, (uint64_t)v17, type metadata accessor for UnmigrateResponse.OneOf_Result);
    v30 = v13;
    if (swift_getEnumCaseMultiPayload(v17, v13) == 1)
    {
      sub_10000882C((uint64_t)v24, &qword_1008397D8);
      sub_1000B8680((uint64_t)v17, v33, type metadata accessor for UnmigrateResponse.Error);
      sub_1000B8680(v33, (uint64_t)v24, type metadata accessor for UnmigrateResponse.Error);
      v32 = v47;
      v25(v24, 0, 1, v47);
      v29 = v49;
      v28 = v50;
    }
    else
    {
      sub_10001C744((uint64_t)v17, type metadata accessor for UnmigrateResponse.OneOf_Result);
      v29 = v49;
      v28 = v50;
      v32 = v47;
    }
    v31 = v48;
    v27 = v40;
  }
  v34 = sub_10009FC50(&qword_1008387E8, type metadata accessor for UnmigrateResponse.Error, (uint64_t)&protocol conformance descriptor for UnmigrateResponse.Error);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v24, v32, v34, v29, v28);
  if (v31)
    return sub_10000882C((uint64_t)v24, &qword_1008397D8);
  v36 = v44;
  sub_100008868((uint64_t)v24, (uint64_t)v44, &qword_1008397D8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v45 + 48))(v36, 1, v32) == 1)
  {
    sub_10000882C((uint64_t)v24, &qword_1008397D8);
    return sub_10000882C((uint64_t)v36, &qword_1008397D8);
  }
  else
  {
    v37 = v43;
    sub_1000B8680((uint64_t)v36, (uint64_t)v43, type metadata accessor for UnmigrateResponse.Error);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()(v29, v28);
    sub_10000882C((uint64_t)v24, &qword_1008397D8);
    v38 = v42;
    sub_10000882C(v42, &qword_100838598);
    sub_1000B8680((uint64_t)v37, v38, type metadata accessor for UnmigrateResponse.Error);
    swift_storeEnumTagMultiPayload(v38, v30, 1);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v30);
  }
}

uint64_t UnmigrateResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = v4;
  v9 = sub_10001A630(&qword_100838598);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008868(v3, (uint64_t)v11, &qword_100838598);
  v12 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12) == 1)
    goto LABEL_6;
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    sub_1000B5FDC(v3, a1, a2, a3);
  else
    sub_1000B5E3C(v3, a1, a2, a3);
  v5 = v4;
  result = sub_10001C744((uint64_t)v11, type metadata accessor for UnmigrateResponse.OneOf_Result);
  if (!v4)
  {
LABEL_6:
    v14 = (uint64_t *)(v3 + *(int *)(type metadata accessor for UnmigrateResponse(0) + 20));
    v15 = *v14;
    v16 = v14[1];
    v17 = HIBYTE(v16) & 0xF;
    if ((v16 & 0x2000000000000000) == 0)
      v17 = v15 & 0xFFFFFFFFFFFFLL;
    if (!v17)
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v15, v16, 3, a2, a3);
    if (!v5)
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000B5E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[2];

  v7 = sub_10001A630(&qword_100838598);
  __chkstk_darwin(v7);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UnmigrateResponse.Details(0);
  __chkstk_darwin(v10);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008868(a1, (uint64_t)v9, &qword_100838598);
  v13 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v9, 1, v13) == 1)
  {
    sub_10000882C((uint64_t)v9, &qword_100838598);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload(v9, v13) != 1)
  {
    sub_1000B8680((uint64_t)v9, (uint64_t)v12, type metadata accessor for UnmigrateResponse.Details);
    v14 = sub_10009FC50(&qword_1008387D0, type metadata accessor for UnmigrateResponse.Details, (uint64_t)&protocol conformance descriptor for UnmigrateResponse.Details);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v10, v14, a3, a4);
    return sub_10001C744((uint64_t)v12, type metadata accessor for UnmigrateResponse.Details);
  }
  result = sub_10001C744((uint64_t)v9, type metadata accessor for UnmigrateResponse.OneOf_Result);
  __break(1u);
  return result;
}

uint64_t sub_1000B5FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[2];

  v7 = sub_10001A630(&qword_100838598);
  __chkstk_darwin(v7);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UnmigrateResponse.Error(0);
  __chkstk_darwin(v10);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008868(a1, (uint64_t)v9, &qword_100838598);
  v13 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v9, 1, v13) == 1)
  {
    sub_10000882C((uint64_t)v9, &qword_100838598);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload(v9, v13) == 1)
  {
    sub_1000B8680((uint64_t)v9, (uint64_t)v12, type metadata accessor for UnmigrateResponse.Error);
    v14 = sub_10009FC50(&qword_1008387E8, type metadata accessor for UnmigrateResponse.Error, (uint64_t)&protocol conformance descriptor for UnmigrateResponse.Error);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2, v10, v14, a3, a4);
    return sub_10001C744((uint64_t)v12, type metadata accessor for UnmigrateResponse.Error);
  }
  result = sub_10001C744((uint64_t)v9, type metadata accessor for UnmigrateResponse.OneOf_Result);
  __break(1u);
  return result;
}

Swift::Int UnmigrateResponse.hashValue.getter()
{
  return sub_1000B767C(type metadata accessor for UnmigrateResponse, &qword_100838600, (uint64_t)&protocol conformance descriptor for UnmigrateResponse);
}

uint64_t sub_1000B619C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __n128 v5;
  _QWORD *v6;

  v4 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  v5.n128_f64[0] = (*(double (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a2, 1, 1, v4);
  v6 = (_QWORD *)(a2 + *(int *)(a1 + 20));
  *v6 = 0;
  v6[1] = 0xE000000000000000;
  return UnknownStorage.init()(v5);
}

uint64_t sub_1000B61F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1000B6238(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t sub_1000B6278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnmigrateResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000B628C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnmigrateResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000B62A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100839740, type metadata accessor for UnmigrateResponse, (uint64_t)&protocol conformance descriptor for UnmigrateResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000B62F0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF4E4(&qword_100836C60, (uint64_t)static UnmigrateResponse._protobuf_nameMap, (uint64_t)sub_1000B517C, a1);
}

uint64_t sub_1000B630C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009FC50(&qword_1008387B8, type metadata accessor for UnmigrateResponse, (uint64_t)&protocol conformance descriptor for UnmigrateResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B634C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_1008387B8, type metadata accessor for UnmigrateResponse, (uint64_t)&protocol conformance descriptor for UnmigrateResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *UnmigrateResponse.Details.protoMessageName.unsafeMutableAddressor()
{
  return &static UnmigrateResponse.Details.protoMessageName;
}

unint64_t static UnmigrateResponse.Details.protoMessageName.getter()
{
  return 0xD000000000000019;
}

uint64_t sub_1000B63C4(uint64_t a1)
{
  return sub_1000B7478(a1, static UnmigrateResponse.Details._protobuf_nameMap, (uint64_t)"time_elapsed", 12, (unsigned int *)&enum case for _NameMap.NameDescription.standard(_:));
}

uint64_t UnmigrateResponse.Details._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000AF0D8(&qword_100836C68, (uint64_t)static UnmigrateResponse.Details._protobuf_nameMap, (uint64_t)sub_1000B63C4);
}

uint64_t static UnmigrateResponse.Details._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF134(&qword_100836C68, (uint64_t)static UnmigrateResponse.Details._protobuf_nameMap, (uint64_t)sub_1000B63C4, a1);
}

uint64_t UnmigrateResponse.Details.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t i;
  uint64_t result;
  char v10;

  v7 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v10 & 1) != 0)
      break;
    if (result == 1)
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3, a2, a3);
    v7 = a2;
  }
  return result;
}

uint64_t UnmigrateResponse.Details.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double *v3;
  uint64_t v4;
  uint64_t result;

  if (*v3 == 0.0
    || (result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1, a2, a3, *v3), !v4))
  {
    type metadata accessor for UnmigrateResponse.Details(0);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int UnmigrateResponse.Details.hashValue.getter()
{
  return sub_1000B767C(type metadata accessor for UnmigrateResponse.Details, &qword_100838608, (uint64_t)&protocol conformance descriptor for UnmigrateResponse.Details);
}

uint64_t sub_1000B6538@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  return UnknownStorage.init()();
}

uint64_t sub_1000B6558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnmigrateResponse.Details.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000B656C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnmigrateResponse.Details.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000B6580(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100839738, type metadata accessor for UnmigrateResponse.Details, (uint64_t)&protocol conformance descriptor for UnmigrateResponse.Details);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000B65D0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF4E4(&qword_100836C68, (uint64_t)static UnmigrateResponse.Details._protobuf_nameMap, (uint64_t)sub_1000B63C4, a1);
}

uint64_t sub_1000B65EC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009FC50(&qword_1008387D0, type metadata accessor for UnmigrateResponse.Details, (uint64_t)&protocol conformance descriptor for UnmigrateResponse.Details);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B662C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_1008387D0, type metadata accessor for UnmigrateResponse.Details, (uint64_t)&protocol conformance descriptor for UnmigrateResponse.Details);
  return Message.hash(into:)(a1, a2, v4);
}

void *UnmigrateResponse.Error.protoMessageName.unsafeMutableAddressor()
{
  return &static UnmigrateResponse.Error.protoMessageName;
}

unint64_t static UnmigrateResponse.Error.protoMessageName.getter()
{
  return 0xD000000000000017;
}

uint64_t sub_1000B66A4(uint64_t a1)
{
  return sub_1000B7478(a1, static UnmigrateResponse.Error._protobuf_nameMap, (uint64_t)"message", 7, (unsigned int *)&enum case for _NameMap.NameDescription.same(_:));
}

uint64_t UnmigrateResponse.Error._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000AF0D8(&qword_100836C70, (uint64_t)static UnmigrateResponse.Error._protobuf_nameMap, (uint64_t)sub_1000B66A4);
}

uint64_t static UnmigrateResponse.Error._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF134(&qword_100836C70, (uint64_t)static UnmigrateResponse.Error._protobuf_nameMap, (uint64_t)sub_1000B66A4, a1);
}

uint64_t UnmigrateResponse.Error.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B75B8(a1, a2, a3);
}

uint64_t UnmigrateResponse.Error.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B7210(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for UnmigrateResponse.Error);
}

Swift::Int UnmigrateResponse.Error.hashValue.getter()
{
  return sub_1000B767C(type metadata accessor for UnmigrateResponse.Error, &qword_100838610, (uint64_t)&protocol conformance descriptor for UnmigrateResponse.Error);
}

uint64_t sub_1000B6748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnmigrateResponse.Error.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000B675C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnmigrateResponse.Error.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000B6770(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100839730, type metadata accessor for UnmigrateResponse.Error, (uint64_t)&protocol conformance descriptor for UnmigrateResponse.Error);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000B67C0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF4E4(&qword_100836C70, (uint64_t)static UnmigrateResponse.Error._protobuf_nameMap, (uint64_t)sub_1000B66A4, a1);
}

uint64_t sub_1000B67DC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009FC50(&qword_1008387E8, type metadata accessor for UnmigrateResponse.Error, (uint64_t)&protocol conformance descriptor for UnmigrateResponse.Error);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B681C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_1008387E8, type metadata accessor for UnmigrateResponse.Error, (uint64_t)&protocol conformance descriptor for UnmigrateResponse.Error);
  return Message.hash(into:)(a1, a2, v4);
}

const char *EmptyRequest.protoMessageName.unsafeMutableAddressor()
{
  return "EmptyRequest";
}

uint64_t static EmptyRequest.protoMessageName.getter()
{
  return 0x7165527974706D45;
}

uint64_t sub_1000B6898()
{
  uint64_t v0;

  v0 = type metadata accessor for _NameMap(0);
  sub_10009EF3C(v0, static EmptyRequest._protobuf_nameMap);
  sub_10001AAA8(v0, (uint64_t)static EmptyRequest._protobuf_nameMap);
  return _NameMap.init()();
}

uint64_t EmptyRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000AF0D8(&qword_100836C78, (uint64_t)static EmptyRequest._protobuf_nameMap, (uint64_t)sub_1000B6898);
}

uint64_t static EmptyRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF134(&qword_100836C78, (uint64_t)static EmptyRequest._protobuf_nameMap, (uint64_t)sub_1000B6898, a1);
}

uint64_t EmptyRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  char v7;

  do
    result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  while (!v3 && (v7 & 1) == 0);
  return result;
}

uint64_t EmptyRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t static EmptyRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v15 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v15 - v9, a1, v4);
  v11(v8, a2, v4);
  v12 = sub_10009FC50(&qword_100838618, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v12);
  v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v8, v4);
  v13(v10, v4);
  return a2 & 1;
}

Swift::Int EmptyRequest.hashValue.getter()
{
  return sub_1000B767C(type metadata accessor for EmptyRequest, &qword_100838620, (uint64_t)&protocol conformance descriptor for EmptyRequest);
}

uint64_t sub_1000B6A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return EmptyRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000B6AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return EmptyRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000B6ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100839728, type metadata accessor for EmptyRequest, (uint64_t)&protocol conformance descriptor for EmptyRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000B6B0C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF4E4(&qword_100836C78, (uint64_t)static EmptyRequest._protobuf_nameMap, (uint64_t)sub_1000B6898, a1);
}

uint64_t sub_1000B6B28(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009FC50(&qword_100838800, type metadata accessor for EmptyRequest, (uint64_t)&protocol conformance descriptor for EmptyRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B6B68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100838800, type metadata accessor for EmptyRequest, (uint64_t)&protocol conformance descriptor for EmptyRequest);
  return Message.hash(into:)(a1, a2, v4);
}

const char *BasicResponse.protoMessageName.unsafeMutableAddressor()
{
  return "BasicResponse";
}

uint64_t static BasicResponse.protoMessageName.getter()
{
  return 0x7365526369736142;
}

uint64_t sub_1000B6BE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_10009EF3C(v0, static BasicResponse._protobuf_nameMap);
  sub_10001AAA8(v0, (uint64_t)static BasicResponse._protobuf_nameMap);
  v1 = sub_10001A630(&qword_1008397B8);
  v2 = sub_10001A630(&qword_1008397C0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1006A3C40;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "success";
  *(_QWORD *)(v9 + 8) = 7;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "error";
  *((_QWORD *)v13 + 1) = 5;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t BasicResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000AF0D8(&qword_100836C80, (uint64_t)static BasicResponse._protobuf_nameMap, (uint64_t)sub_1000B6BE8);
}

uint64_t static BasicResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF134(&qword_100836C80, (uint64_t)static BasicResponse._protobuf_nameMap, (uint64_t)sub_1000B6BE8, a1);
}

void BasicResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  char v12;

  v5 = v3;
  v9 = a2;
  for (i = a3; ; i = a3)
  {
    v11 = dispatch thunk of Decoder.nextFieldNumber()(v9, i);
    if (v4 || (v12 & 1) != 0)
      break;
    if (v11 == 2)
    {
      sub_1000B6E10(a1, v5, a2, a3, 1);
    }
    else if (v11 == 1)
    {
      sub_1000B6E10(a1, v5, a2, a3, 0);
    }
    v9 = a2;
  }
}

void sub_1000B6E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  dispatch thunk of Decoder.decodeSingularStringField(value:)(&v15, a3, a4);
  if (v5)
  {
    swift_bridgeObjectRelease(v16);
  }
  else
  {
    v10 = v16;
    if (v16)
    {
      v11 = v15;
      if (*(unsigned __int8 *)(a2 + 16) == 255)
      {
        v12 = -1;
      }
      else
      {
        dispatch thunk of Decoder.handleConflictingOneOf()(a3, a4);
        v12 = *(_BYTE *)(a2 + 16);
      }
      v13 = *(_QWORD *)a2;
      v14 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v11;
      *(_QWORD *)(a2 + 8) = v10;
      *(_BYTE *)(a2 + 16) = a5;
      sub_1000BAC84(v13, v14, v12);
    }
  }
}

uint64_t BasicResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v8;
  uint64_t result;

  v8 = *(unsigned __int8 *)(v3 + 16);
  if (v8 != 255)
  {
    if ((v8 & 1) != 0)
    {
      result = sub_1000B6FBC(v3, a1, a2, a3);
      if (v4)
        return result;
    }
    else
    {
      result = sub_1000B6F80(v3, a1, a2, a3);
      if (v4)
        return result;
    }
  }
  type metadata accessor for BasicResponse(0);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000B6F80(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*(_QWORD *)result, *(_QWORD *)(result + 8), 1, a3, a4);
  __break(1u);
  return result;
}

uint64_t sub_1000B6FBC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;

  v4 = *(unsigned __int8 *)(result + 16);
  if (v4 != 255 && (v4 & 1) != 0)
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*(_QWORD *)result, *(_QWORD *)(result + 8), 2, a3, a4);
  __break(1u);
  return result;
}

Swift::Int BasicResponse.hashValue.getter()
{
  return sub_1000B767C(type metadata accessor for BasicResponse, &qword_100838628, (uint64_t)&protocol conformance descriptor for BasicResponse);
}

uint64_t sub_1000B7024@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = -1;
  return UnknownStorage.init()();
}

void sub_1000B704C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BasicResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000B7060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return BasicResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000B7074(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100839720, type metadata accessor for BasicResponse, (uint64_t)&protocol conformance descriptor for BasicResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000B70C4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF4E4(&qword_100836C80, (uint64_t)static BasicResponse._protobuf_nameMap, (uint64_t)sub_1000B6BE8, a1);
}

uint64_t sub_1000B70E0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009FC50(&qword_100838818, type metadata accessor for BasicResponse, (uint64_t)&protocol conformance descriptor for BasicResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7120(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100838818, type metadata accessor for BasicResponse, (uint64_t)&protocol conformance descriptor for BasicResponse);
  return Message.hash(into:)(a1, a2, v4);
}

const char *PingRequest.protoMessageName.unsafeMutableAddressor()
{
  return "PingRequest";
}

uint64_t static PingRequest.protoMessageName.getter()
{
  return 0x75716552676E6950;
}

uint64_t sub_1000B719C(uint64_t a1)
{
  return sub_1000B7478(a1, static PingRequest._protobuf_nameMap, (uint64_t)"message", 7, (unsigned int *)&enum case for _NameMap.NameDescription.same(_:));
}

uint64_t PingRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000AF0D8(&qword_100836C88, (uint64_t)static PingRequest._protobuf_nameMap, (uint64_t)sub_1000B719C);
}

uint64_t static PingRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF134(&qword_100836C88, (uint64_t)static PingRequest._protobuf_nameMap, (uint64_t)sub_1000B719C, a1);
}

uint64_t PingRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B7210(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PingRequest);
}

uint64_t sub_1000B7210(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;

  v10 = v4[1];
  v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0)
    v11 = *v4 & 0xFFFFFFFFFFFFLL;
  if (!v11
    || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v4, v10, 1, a2, a3), !v5))
  {
    a4(0);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t static PingRequest.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return sub_1000BA9B4(a1, a2, type metadata accessor for PingRequest) & 1;
}

Swift::Int PingRequest.hashValue.getter()
{
  return sub_1000B767C(type metadata accessor for PingRequest, &qword_100838630, (uint64_t)&protocol conformance descriptor for PingRequest);
}

uint64_t sub_1000B72F8@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  return UnknownStorage.init()();
}

uint64_t sub_1000B731C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PingRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000B7330(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100839718, type metadata accessor for PingRequest, (uint64_t)&protocol conformance descriptor for PingRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000B7380@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF4E4(&qword_100836C88, (uint64_t)static PingRequest._protobuf_nameMap, (uint64_t)sub_1000B719C, a1);
}

uint64_t sub_1000B739C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009FC50(&qword_100838830, type metadata accessor for PingRequest, (uint64_t)&protocol conformance descriptor for PingRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B73DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100838830, type metadata accessor for PingRequest, (uint64_t)&protocol conformance descriptor for PingRequest);
  return Message.hash(into:)(a1, a2, v4);
}

const char *PingResponse.protoMessageName.unsafeMutableAddressor()
{
  return "PingResponse";
}

uint64_t static PingResponse.protoMessageName.getter()
{
  return 0x70736552676E6950;
}

uint64_t sub_1000B7458(uint64_t a1)
{
  return sub_1000B7478(a1, static PingResponse._protobuf_nameMap, (uint64_t)"message", 7, (unsigned int *)&enum case for _NameMap.NameDescription.same(_:));
}

uint64_t sub_1000B7478(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = type metadata accessor for _NameMap(0);
  sub_10009EF3C(v9, a2);
  sub_10001AAA8(v9, (uint64_t)a2);
  v10 = sub_10001A630(&qword_1008397B8);
  v11 = sub_10001A630(&qword_1008397C0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 72);
  v14 = *(unsigned __int8 *)(v12 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = swift_allocObject(v10, v15 + v13, v14 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_1006A3C00;
  v17 = v16 + v15 + *(int *)(v11 + 48);
  *(_QWORD *)(v16 + v15) = 1;
  *(_QWORD *)v17 = a3;
  *(_QWORD *)(v17 + 8) = a4;
  *(_BYTE *)(v17 + 16) = 2;
  v18 = *a5;
  v19 = type metadata accessor for _NameMap.NameDescription(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v17, v18, v19);
  return _NameMap.init(dictionaryLiteral:)(v16);
}

uint64_t PingResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000AF0D8(&qword_100836C90, (uint64_t)static PingResponse._protobuf_nameMap, (uint64_t)sub_1000B7458);
}

uint64_t static PingResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF134(&qword_100836C90, (uint64_t)static PingResponse._protobuf_nameMap, (uint64_t)sub_1000B7458, a1);
}

uint64_t sub_1000B75B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t i;
  uint64_t result;
  char v10;

  v7 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v10 & 1) != 0)
      break;
    if (result == 1)
      dispatch thunk of Decoder.decodeSingularStringField(value:)(v3, a2, a3);
    v7 = a2;
  }
  return result;
}

uint64_t PingResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B7210(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PingResponse);
}

uint64_t static PingResponse.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return sub_1000BA9B4(a1, a2, type metadata accessor for PingResponse) & 1;
}

Swift::Int PingResponse.hashValue.getter()
{
  return sub_1000B767C(type metadata accessor for PingResponse, &qword_100838638, (uint64_t)&protocol conformance descriptor for PingResponse);
}

Swift::Int sub_1000B767C(uint64_t (*a1)(uint64_t), unint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[9];

  Hasher.init(_seed:)(v9, 0);
  v6 = a1(0);
  v7 = sub_10009FC50(a2, a1, a3);
  dispatch thunk of Hashable.hash(into:)(v9, v6, v7);
  return Hasher._finalize()();
}

uint64_t sub_1000B76F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1000B7738(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t sub_1000B7778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PingResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000B778C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100839710, type metadata accessor for PingResponse, (uint64_t)&protocol conformance descriptor for PingResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000B77DC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF4E4(&qword_100836C90, (uint64_t)static PingResponse._protobuf_nameMap, (uint64_t)sub_1000B7458, a1);
}

uint64_t sub_1000B77F8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10009FC50(&qword_100838848, type metadata accessor for PingResponse, (uint64_t)&protocol conformance descriptor for PingResponse);
  return Message.debugDescription.getter(a1, v2);
}

Swift::Int sub_1000B7838(uint64_t a1, uint64_t a2)
{
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  dispatch thunk of Hashable.hash(into:)(v5, a1, a2);
  return Hasher._finalize()();
}

uint64_t sub_1000B788C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10009FC50(&qword_100838848, type metadata accessor for PingResponse, (uint64_t)&protocol conformance descriptor for PingResponse);
  return Message.hash(into:)(a1, a2, v4);
}

Swift::Int sub_1000B78DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  dispatch thunk of Hashable.hash(into:)(v6, a2, a3);
  return Hasher._finalize()();
}

uint64_t sub_1000B792C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a3 & 1) != 0)
  {
    if ((a6 & 1) == 0)
      return 0;
  }
  else if ((a6 & 1) != 0)
  {
    return 0;
  }
  if (a1 == a4 && a2 == a5)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0);
}

uint64_t _s7remindd22StartMigrationResponseV2eeoiySbAC_ACtFZ_0(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t started;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  int *v29;
  uint64_t v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  char v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;

  v4 = type metadata accessor for UnknownStorage(0);
  v49 = *(_QWORD *)(v4 - 8);
  v50 = v4;
  v5 = __chkstk_darwin(v4);
  v48 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v47 = (char *)&v47 - v7;
  started = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  v9 = *(_QWORD *)(started - 8);
  __chkstk_darwin(started);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A630(&qword_100839810);
  __chkstk_darwin(v12);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A630(&qword_100838578);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v47 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v47 - v22;
  v24 = *(_QWORD *)a1;
  v25 = *((_QWORD *)a1 + 1);
  v51 = a1;
  v52 = a2;
  v26 = *(_QWORD *)a2;
  v27 = *((_QWORD *)a2 + 1);
  if (v24 != *(_QWORD *)a2 || v25 != v27)
  {
    v28 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v26, v27, 0) & 1) == 0)
      return v28 & 1;
  }
  v29 = (int *)type metadata accessor for StartMigrationResponse(0);
  sub_100008868((uint64_t)&v51[v29[5]], (uint64_t)v23, &qword_100838578);
  sub_100008868((uint64_t)&v52[v29[5]], (uint64_t)v21, &qword_100838578);
  v30 = (uint64_t)&v14[*(int *)(v12 + 48)];
  sub_100008868((uint64_t)v23, (uint64_t)v14, &qword_100838578);
  sub_100008868((uint64_t)v21, v30, &qword_100838578);
  v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v31((uint64_t)v14, 1, started) == 1)
  {
    sub_10000882C((uint64_t)v21, &qword_100838578);
    sub_10000882C((uint64_t)v23, &qword_100838578);
    if (v31(v30, 1, started) == 1)
    {
      sub_10000882C((uint64_t)v14, &qword_100838578);
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  sub_100008868((uint64_t)v14, (uint64_t)v18, &qword_100838578);
  if (v31(v30, 1, started) == 1)
  {
    sub_10000882C((uint64_t)v21, &qword_100838578);
    sub_10000882C((uint64_t)v23, &qword_100838578);
    sub_10001C744((uint64_t)v18, type metadata accessor for StartMigrationResponse.OneOf_Result);
LABEL_9:
    sub_10000882C((uint64_t)v14, &qword_100839810);
LABEL_15:
    v28 = 0;
    return v28 & 1;
  }
  sub_1000B8680(v30, (uint64_t)v11, type metadata accessor for StartMigrationResponse.OneOf_Result);
  v32 = sub_1000B9C60((uint64_t)v18, (uint64_t)v11, type metadata accessor for StartMigrationResponse.Error, type metadata accessor for StartMigrationResponse.Details, type metadata accessor for StartMigrationResponse.OneOf_Result, &qword_100839850);
  sub_10001C744((uint64_t)v11, type metadata accessor for StartMigrationResponse.OneOf_Result);
  sub_10000882C((uint64_t)v21, &qword_100838578);
  sub_10000882C((uint64_t)v23, &qword_100838578);
  sub_10001C744((uint64_t)v18, type metadata accessor for StartMigrationResponse.OneOf_Result);
  sub_10000882C((uint64_t)v14, &qword_100838578);
  if ((v32 & 1) == 0)
    goto LABEL_15;
LABEL_11:
  v33 = v29[6];
  v34 = &v51[v33];
  v35 = *(_QWORD *)&v51[v33];
  v36 = *(_QWORD *)&v51[v33 + 8];
  v37 = &v52[v33];
  v38 = *((_QWORD *)v37 + 1);
  if (*(_QWORD *)v34 == *(_QWORD *)v37 && v36 == v38
    || (v28 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, *(_QWORD *)v37, v38, 0) & 1) != 0))
  {
    v39 = v50;
    v40 = v49;
    v41 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
    v42 = v47;
    v41(v47, &v51[v29[7]], v50);
    v43 = v48;
    v41(v48, &v52[v29[7]], v39);
    v44 = sub_10009FC50(&qword_100838618, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v28 = dispatch thunk of static Equatable.== infix(_:_:)(v42, v43, v39, v44);
    v45 = *(void (**)(char *, uint64_t))(v40 + 8);
    v45(v43, v39);
    v45(v42, v39);
  }
  return v28 & 1;
}

uint64_t _s7remindd21StartMigrationRequestV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t started;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v39 = type metadata accessor for UnknownStorage(0);
  v42 = *(_QWORD *)(v39 - 8);
  v4 = __chkstk_darwin(v39);
  v41 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v40 = (char *)&v38 - v6;
  started = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  v8 = *(_QWORD *)(started - 8);
  __chkstk_darwin(started);
  v43 = (uint64_t)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630(&qword_100839828);
  __chkstk_darwin(v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A630(&qword_100838570);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v38 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v38 - v20;
  v44 = a1;
  sub_100008868(a1, (uint64_t)&v38 - v20, &qword_100838570);
  v45 = a2;
  sub_100008868(a2, (uint64_t)v19, &qword_100838570);
  v22 = (uint64_t)&v12[*(int *)(v10 + 48)];
  sub_100008868((uint64_t)v21, (uint64_t)v12, &qword_100838570);
  sub_100008868((uint64_t)v19, v22, &qword_100838570);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v23((uint64_t)v12, 1, started) != 1)
  {
    sub_100008868((uint64_t)v12, (uint64_t)v16, &qword_100838570);
    if (v23(v22, 1, started) != 1)
    {
      v24 = v43;
      sub_1000B8680(v22, v43, type metadata accessor for StartMigrationRequest.OneOf_Source);
      v25 = _s7remindd21StartMigrationRequestV12OneOf_SourceO21__derived_enum_equalsySbAE_AEtFZ_0((uint64_t)v16, v24);
      sub_10001C744(v24, type metadata accessor for StartMigrationRequest.OneOf_Source);
      sub_10000882C((uint64_t)v19, &qword_100838570);
      sub_10000882C((uint64_t)v21, &qword_100838570);
      sub_10001C744((uint64_t)v16, type metadata accessor for StartMigrationRequest.OneOf_Source);
      sub_10000882C((uint64_t)v12, &qword_100838570);
      if ((v25 & 1) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
    sub_10000882C((uint64_t)v19, &qword_100838570);
    sub_10000882C((uint64_t)v21, &qword_100838570);
    sub_10001C744((uint64_t)v16, type metadata accessor for StartMigrationRequest.OneOf_Source);
LABEL_6:
    sub_10000882C((uint64_t)v12, &qword_100839828);
    goto LABEL_9;
  }
  sub_10000882C((uint64_t)v19, &qword_100838570);
  sub_10000882C((uint64_t)v21, &qword_100838570);
  if (v23(v22, 1, started) != 1)
    goto LABEL_6;
  sub_10000882C((uint64_t)v12, &qword_100838570);
LABEL_8:
  v26 = type metadata accessor for StartMigrationRequest(0);
  v27 = v45;
  if (*(unsigned __int8 *)(v44 + *(int *)(v26 + 20)) == *(unsigned __int8 *)(v45 + *(int *)(v26 + 20)))
  {
    v30 = v26;
    v31 = v42;
    v32 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
    v34 = v39;
    v33 = v40;
    v32(v40, v44 + *(int *)(v26 + 24), v39);
    v35 = v41;
    v32(v41, v27 + *(int *)(v30 + 24), v34);
    v36 = sub_10009FC50(&qword_100838618, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v28 = dispatch thunk of static Equatable.== infix(_:_:)(v33, v35, v34, v36);
    v37 = *(void (**)(char *, uint64_t))(v31 + 8);
    v37(v35, v34);
    v37(v33, v34);
    return v28 & 1;
  }
LABEL_9:
  v28 = 0;
  return v28 & 1;
}

uint64_t _s7remindd21StartMigrationRequestV12OneOf_SourceO21__derived_enum_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t started;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int EnumCaseMultiPayload;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  uint64_t v29;

  started = type metadata accessor for StartMigrationRequest.Credential(0);
  __chkstk_darwin(started);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  v8 = __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v29 - v12;
  __chkstk_darwin(v11);
  v15 = (uint64_t *)((char *)&v29 - v14);
  v16 = sub_10001A630(&qword_100839858);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = &v19[*(int *)(v17 + 48)];
  sub_1000151E8(a1, (uint64_t)v19, type metadata accessor for StartMigrationRequest.OneOf_Source);
  sub_1000151E8(a2, (uint64_t)v20, type metadata accessor for StartMigrationRequest.OneOf_Source);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v19, v7);
  if (!EnumCaseMultiPayload)
  {
    sub_1000151E8((uint64_t)v19, (uint64_t)v15, type metadata accessor for StartMigrationRequest.OneOf_Source);
    v24 = *v15;
    v23 = v15[1];
    if (!swift_getEnumCaseMultiPayload(v20, v7))
      goto LABEL_8;
    goto LABEL_6;
  }
  if (EnumCaseMultiPayload != 1)
  {
    sub_1000151E8((uint64_t)v19, (uint64_t)v10, type metadata accessor for StartMigrationRequest.OneOf_Source);
    v24 = *v10;
    v23 = v10[1];
    if (swift_getEnumCaseMultiPayload(v20, v7) == 2)
    {
LABEL_8:
      v25 = *((_QWORD *)v20 + 1);
      if (v24 == *(_QWORD *)v20 && v23 == v25)
      {
        swift_bridgeObjectRelease_n(v23, 2);
      }
      else
      {
        v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v23, *(_QWORD *)v20, *((_QWORD *)v20 + 1), 0);
        swift_bridgeObjectRelease(v25);
        swift_bridgeObjectRelease(v23);
        if ((v27 & 1) == 0)
        {
          sub_10001C744((uint64_t)v19, type metadata accessor for StartMigrationRequest.OneOf_Source);
LABEL_16:
          v22 = 0;
          return v22 & 1;
        }
      }
      sub_10001C744((uint64_t)v19, type metadata accessor for StartMigrationRequest.OneOf_Source);
      v22 = 1;
      return v22 & 1;
    }
LABEL_6:
    swift_bridgeObjectRelease(v23);
LABEL_15:
    sub_10000882C((uint64_t)v19, &qword_100839858);
    goto LABEL_16;
  }
  sub_1000151E8((uint64_t)v19, (uint64_t)v13, type metadata accessor for StartMigrationRequest.OneOf_Source);
  if (swift_getEnumCaseMultiPayload(v20, v7) != 1)
  {
    sub_10001C744((uint64_t)v13, type metadata accessor for StartMigrationRequest.Credential);
    goto LABEL_15;
  }
  sub_1000B8680((uint64_t)v20, (uint64_t)v6, type metadata accessor for StartMigrationRequest.Credential);
  v22 = _s7remindd21StartMigrationRequestV10CredentialV2eeoiySbAE_AEtFZ_0((uint64_t)v13, (uint64_t)v6);
  sub_10001C744((uint64_t)v6, type metadata accessor for StartMigrationRequest.Credential);
  sub_10001C744((uint64_t)v13, type metadata accessor for StartMigrationRequest.Credential);
  sub_10001C744((uint64_t)v19, type metadata accessor for StartMigrationRequest.OneOf_Source);
  return v22 & 1;
}

uint64_t _s7remindd21StartMigrationRequestV10CredentialV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t started;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v34;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v34 - v9;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a2 + 8);
  v13 = *(_QWORD *)a1 == *(_QWORD *)a2 && v11 == v12;
  if (v13
    || (v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)a1, v11, *(_QWORD *)a2, v12, 0) & 1) != 0))
  {
    v15 = *(_QWORD *)(a1 + 16);
    v16 = *(_QWORD *)(a1 + 24);
    v17 = *(_QWORD *)(a2 + 16);
    v18 = *(_QWORD *)(a2 + 24);
    v19 = v15 == v17 && v16 == v18;
    if (v19 || (v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0) & 1) != 0))
    {
      if ((v20 = *(_QWORD *)(a1 + 32),
            v21 = *(_QWORD *)(a1 + 40),
            v22 = *(_QWORD *)(a2 + 32),
            v23 = *(_QWORD *)(a2 + 40),
            v20 == v22)
        && v21 == v23
        || (v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, v22, v23, 0) & 1) != 0))
      {
        v24 = *(_QWORD *)(a1 + 48);
        v25 = *(_QWORD *)(a1 + 56);
        v26 = *(_QWORD *)(a2 + 48);
        v27 = *(_QWORD *)(a2 + 56);
        if (v24 == v26 && v25 == v27
          || (v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v26, v27, 0) & 1) != 0))
        {
          if (*(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64))
          {
            started = type metadata accessor for StartMigrationRequest.Credential(0);
            v29 = a1 + *(int *)(started + 36);
            v30 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
            v30(v10, v29, v4);
            v30(v8, a2 + *(int *)(started + 36), v4);
            v31 = sub_10009FC50(&qword_100838618, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
            v14 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v31);
            v32 = *(void (**)(char *, uint64_t))(v5 + 8);
            v32(v8, v4);
            v32(v10, v4);
          }
          else
          {
            v14 = 0;
          }
        }
      }
    }
  }
  return v14 & 1;
}

uint64_t type metadata accessor for StartMigrationResponse(uint64_t a1)
{
  return sub_10001522C(a1, (uint64_t *)&unk_100838A98, (uint64_t)&nominal type descriptor for StartMigrationResponse);
}

uint64_t type metadata accessor for StartMigrationResponse.OneOf_Result(uint64_t a1)
{
  return sub_10001522C(a1, qword_100838B50, (uint64_t)&nominal type descriptor for StartMigrationResponse.OneOf_Result);
}

uint64_t type metadata accessor for StartMigrationResponse.Details(uint64_t a1)
{
  return sub_10001522C(a1, qword_100838BE0, (uint64_t)&nominal type descriptor for StartMigrationResponse.Details);
}

uint64_t sub_1000B8680(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for StartMigrationResponse.Error(uint64_t a1)
{
  return sub_10001522C(a1, qword_100838C80, (uint64_t)&nominal type descriptor for StartMigrationResponse.Error);
}

uint64_t type metadata accessor for MigrateRequest.OneOf_Source(uint64_t a1)
{
  return sub_10001522C(a1, qword_100838DD8, (uint64_t)&nominal type descriptor for MigrateRequest.OneOf_Source);
}

uint64_t type metadata accessor for MigrateRequest.User(uint64_t a1)
{
  return sub_10001522C(a1, qword_100838E68, (uint64_t)&nominal type descriptor for MigrateRequest.User);
}

uint64_t type metadata accessor for MigrateRequest(uint64_t a1)
{
  return sub_10001522C(a1, (uint64_t *)&unk_100838D18, (uint64_t)&nominal type descriptor for MigrateRequest);
}

uint64_t _s7remindd17UnmigrateResponseV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v46 = type metadata accessor for UnknownStorage(0);
  v49 = *(_QWORD *)(v46 - 8);
  v4 = __chkstk_darwin(v46);
  v48 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v47 = (char *)&v44 - v6;
  v7 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v45 = (uint64_t)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630(&qword_1008397C8);
  __chkstk_darwin(v10);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A630(&qword_100838598);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v44 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v44 - v20;
  v50 = a1;
  sub_100008868(a1, (uint64_t)&v44 - v20, &qword_100838598);
  v51 = a2;
  sub_100008868(a2, (uint64_t)v19, &qword_100838598);
  v22 = (uint64_t)&v12[*(int *)(v10 + 48)];
  sub_100008868((uint64_t)v21, (uint64_t)v12, &qword_100838598);
  sub_100008868((uint64_t)v19, v22, &qword_100838598);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v23((uint64_t)v12, 1, v7) == 1)
  {
    sub_10000882C((uint64_t)v19, &qword_100838598);
    sub_10000882C((uint64_t)v21, &qword_100838598);
    if (v23(v22, 1, v7) == 1)
    {
      sub_10000882C((uint64_t)v12, &qword_100838598);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  sub_100008868((uint64_t)v12, (uint64_t)v16, &qword_100838598);
  if (v23(v22, 1, v7) == 1)
  {
    sub_10000882C((uint64_t)v19, &qword_100838598);
    sub_10000882C((uint64_t)v21, &qword_100838598);
    sub_10001C744((uint64_t)v16, type metadata accessor for UnmigrateResponse.OneOf_Result);
LABEL_6:
    sub_10000882C((uint64_t)v12, &qword_1008397C8);
LABEL_12:
    v34 = 0;
    return v34 & 1;
  }
  v24 = v45;
  sub_1000B8680(v22, v45, type metadata accessor for UnmigrateResponse.OneOf_Result);
  v25 = _s7remindd17UnmigrateResponseV12OneOf_ResultO21__derived_enum_equalsySbAE_AEtFZ_0((uint64_t)v16, v24);
  sub_10001C744(v24, type metadata accessor for UnmigrateResponse.OneOf_Result);
  sub_10000882C((uint64_t)v19, &qword_100838598);
  sub_10000882C((uint64_t)v21, &qword_100838598);
  sub_10001C744((uint64_t)v16, type metadata accessor for UnmigrateResponse.OneOf_Result);
  sub_10000882C((uint64_t)v12, &qword_100838598);
  if ((v25 & 1) == 0)
    goto LABEL_12;
LABEL_8:
  v26 = type metadata accessor for UnmigrateResponse(0);
  v27 = *(int *)(v26 + 20);
  v29 = v50;
  v28 = v51;
  v30 = *(_QWORD *)(v50 + v27);
  v31 = *(_QWORD *)(v50 + v27 + 8);
  v32 = (_QWORD *)(v51 + v27);
  v33 = v32[1];
  if (v30 == *v32 && v31 == v33
    || (v34 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, *v32, v33, 0) & 1) != 0))
  {
    v35 = v29 + *(int *)(v26 + 24);
    v36 = v49;
    v37 = *(void (**)(char *, uint64_t, uint64_t))(v49 + 16);
    v39 = v46;
    v38 = v47;
    v37(v47, v35, v46);
    v40 = v48;
    v37(v48, v28 + *(int *)(v26 + 24), v39);
    v41 = sub_10009FC50(&qword_100838618, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v34 = dispatch thunk of static Equatable.== infix(_:_:)(v38, v40, v39, v41);
    v42 = *(void (**)(char *, uint64_t))(v36 + 8);
    v42(v40, v39);
    v42(v38, v39);
  }
  return v34 & 1;
}

uint64_t _s7remindd17UnmigrateResponseV7DetailsV2eeoiySbAE_AEtFZ_0(double *a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v18 - v9;
  if (*a1 == *a2)
  {
    v11 = type metadata accessor for UnmigrateResponse.Details(0);
    v12 = (char *)a1 + *(int *)(v11 + 20);
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, (char *)a2 + *(int *)(v11 + 20), v4);
    v14 = sub_10009FC50(&qword_100838618, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v14);
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t _s7remindd17UnmigrateResponseV12OneOf_ResultO21__derived_enum_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = type metadata accessor for UnmigrateResponse.Error(0);
  __chkstk_darwin(v40);
  v5 = (uint64_t *)((char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v39 = type metadata accessor for UnmigrateResponse.Details(0);
  __chkstk_darwin(v39);
  v7 = (double *)((char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  v9 = __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  v13 = (double *)((char *)&v39 - v12);
  v14 = sub_10001A630(&qword_100839838);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (uint64_t)&v17[*(int *)(v15 + 48)];
  sub_1000151E8(a1, (uint64_t)v17, type metadata accessor for UnmigrateResponse.OneOf_Result);
  sub_1000151E8(a2, v18, type metadata accessor for UnmigrateResponse.OneOf_Result);
  if (swift_getEnumCaseMultiPayload(v17, v8) == 1)
  {
    sub_1000151E8((uint64_t)v17, (uint64_t)v11, type metadata accessor for UnmigrateResponse.OneOf_Result);
    if (swift_getEnumCaseMultiPayload(v18, v8) == 1)
    {
      sub_1000B8680(v18, (uint64_t)v5, type metadata accessor for UnmigrateResponse.Error);
      v19 = v11[1];
      v20 = v5[1];
      v21 = *v11 == *v5 && v19 == v20;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v19, *v5, v20, 0) & 1) != 0)
      {
        v22 = *(int *)(v40 + 20);
        v23 = (char *)v11 + v22;
        v24 = (char *)v5 + v22;
        v25 = type metadata accessor for UnknownStorage(0);
        v26 = sub_10009FC50(&qword_100838618, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
        if ((dispatch thunk of static Equatable.== infix(_:_:)(v23, v24, v25, v26) & 1) != 0)
        {
          v27 = type metadata accessor for UnmigrateResponse.Error;
          sub_10001C744((uint64_t)v5, type metadata accessor for UnmigrateResponse.Error);
          v28 = (uint64_t)v11;
LABEL_17:
          sub_10001C744(v28, v27);
          sub_10001C744((uint64_t)v17, type metadata accessor for UnmigrateResponse.OneOf_Result);
          return 1;
        }
      }
      v37 = type metadata accessor for UnmigrateResponse.Error;
      sub_10001C744((uint64_t)v5, type metadata accessor for UnmigrateResponse.Error);
      v38 = (uint64_t)v11;
LABEL_20:
      sub_10001C744(v38, v37);
      sub_10001C744((uint64_t)v17, type metadata accessor for UnmigrateResponse.OneOf_Result);
      return 0;
    }
    v29 = type metadata accessor for UnmigrateResponse.Error;
    v30 = (uint64_t)v11;
  }
  else
  {
    sub_1000151E8((uint64_t)v17, (uint64_t)v13, type metadata accessor for UnmigrateResponse.OneOf_Result);
    if (swift_getEnumCaseMultiPayload(v18, v8) != 1)
    {
      sub_1000B8680(v18, (uint64_t)v7, type metadata accessor for UnmigrateResponse.Details);
      if (*v13 == *v7)
      {
        v31 = *(int *)(v39 + 20);
        v32 = (char *)v13 + v31;
        v33 = (char *)v7 + v31;
        v34 = type metadata accessor for UnknownStorage(0);
        v35 = sub_10009FC50(&qword_100838618, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
        if ((dispatch thunk of static Equatable.== infix(_:_:)(v32, v33, v34, v35) & 1) != 0)
        {
          v27 = type metadata accessor for UnmigrateResponse.Details;
          sub_10001C744((uint64_t)v7, type metadata accessor for UnmigrateResponse.Details);
          v28 = (uint64_t)v13;
          goto LABEL_17;
        }
      }
      v37 = type metadata accessor for UnmigrateResponse.Details;
      sub_10001C744((uint64_t)v7, type metadata accessor for UnmigrateResponse.Details);
      v38 = (uint64_t)v13;
      goto LABEL_20;
    }
    v29 = type metadata accessor for UnmigrateResponse.Details;
    v30 = (uint64_t)v13;
  }
  sub_10001C744(v30, v29);
  sub_10000882C((uint64_t)v17, &qword_100839838);
  return 0;
}

uint64_t _s7remindd16UnmigrateRequestV2eeoiySbAC_ACtFZ_0(_DWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v18 - v9;
  if (*a1 == *(_DWORD *)a2)
  {
    v11 = type metadata accessor for UnmigrateRequest(0);
    v12 = (char *)a1 + *(int *)(v11 + 20);
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, &a2[*(int *)(v11 + 20)], v4);
    v14 = sub_10009FC50(&qword_100838618, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v14);
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t _s7remindd15MigrateResponseV2eeoiySbAC_ACtFZ_0(char *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  int *v36;
  uint64_t v37;
  unsigned int (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 *v50;
  char StepV2eeoiySbAE_AEtFZ_0;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  unsigned __int8 *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t Step;
  uint64_t v77;
  char *v78;
  _QWORD *v79;

  v4 = type metadata accessor for UnknownStorage(0);
  v69 = *(_QWORD *)(v4 - 8);
  v70 = v4;
  v5 = __chkstk_darwin(v4);
  v68 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v67 = (char *)&v66 - v7;
  Step = type metadata accessor for MigrateResponse.NextStep(0);
  v73 = *(_QWORD *)(Step - 8);
  __chkstk_darwin(Step);
  v66 = (unsigned __int8 *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_10001A630(&qword_1008397E0);
  __chkstk_darwin(v72);
  v77 = (uint64_t)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630(&qword_100838590);
  v11 = __chkstk_darwin(v10);
  v71 = (unsigned __int8 *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v74 = (uint64_t)&v66 - v14;
  __chkstk_darwin(v13);
  v75 = (uint64_t)&v66 - v15;
  v16 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A630(&qword_1008397E8);
  __chkstk_darwin(v20);
  v22 = (char *)&v66 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10001A630(&qword_100838588);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v66 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v66 - v28;
  __chkstk_darwin(v27);
  v31 = (char *)&v66 - v30;
  v32 = *(_QWORD *)a1;
  v33 = *((_QWORD *)a1 + 1);
  v78 = a1;
  v79 = a2;
  v34 = a2[1];
  if (v32 != *a2 || v33 != v34)
  {
    v35 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, *a2, v34, 0) & 1) == 0)
      return v35 & 1;
  }
  v36 = (int *)type metadata accessor for MigrateResponse(0);
  sub_100008868((uint64_t)&v78[v36[5]], (uint64_t)v31, &qword_100838588);
  sub_100008868((uint64_t)v79 + v36[5], (uint64_t)v29, &qword_100838588);
  v37 = (uint64_t)&v22[*(int *)(v20 + 48)];
  sub_100008868((uint64_t)v31, (uint64_t)v22, &qword_100838588);
  sub_100008868((uint64_t)v29, v37, &qword_100838588);
  v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v38((uint64_t)v22, 1, v16) == 1)
  {
    sub_10000882C((uint64_t)v29, &qword_100838588);
    sub_10000882C((uint64_t)v31, &qword_100838588);
    if (v38(v37, 1, v16) == 1)
    {
      sub_10000882C((uint64_t)v22, &qword_100838588);
      goto LABEL_11;
    }
LABEL_9:
    v39 = &qword_1008397E8;
    v40 = (uint64_t)v22;
LABEL_17:
    sub_10000882C(v40, v39);
    goto LABEL_18;
  }
  sub_100008868((uint64_t)v22, (uint64_t)v26, &qword_100838588);
  if (v38(v37, 1, v16) == 1)
  {
    sub_10000882C((uint64_t)v29, &qword_100838588);
    sub_10000882C((uint64_t)v31, &qword_100838588);
    sub_10001C744((uint64_t)v26, type metadata accessor for MigrateResponse.OneOf_Result);
    goto LABEL_9;
  }
  sub_1000B8680(v37, (uint64_t)v19, type metadata accessor for MigrateResponse.OneOf_Result);
  v41 = sub_1000B9C60((uint64_t)v26, (uint64_t)v19, type metadata accessor for MigrateResponse.Error, type metadata accessor for MigrateResponse.Details, type metadata accessor for MigrateResponse.OneOf_Result, &qword_100839840);
  sub_10001C744((uint64_t)v19, type metadata accessor for MigrateResponse.OneOf_Result);
  sub_10000882C((uint64_t)v29, &qword_100838588);
  sub_10000882C((uint64_t)v31, &qword_100838588);
  sub_10001C744((uint64_t)v26, type metadata accessor for MigrateResponse.OneOf_Result);
  sub_10000882C((uint64_t)v22, &qword_100838588);
  if ((v41 & 1) == 0)
  {
LABEL_18:
    v35 = 0;
    return v35 & 1;
  }
LABEL_11:
  v42 = v75;
  sub_100008868((uint64_t)&v78[v36[8]], v75, &qword_100838590);
  v43 = v74;
  sub_100008868((uint64_t)v79 + v36[8], v74, &qword_100838590);
  v44 = v77;
  v45 = v77 + *(int *)(v72 + 48);
  sub_100008868(v42, v77, &qword_100838590);
  sub_100008868(v43, v45, &qword_100838590);
  v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
  v47 = Step;
  if (v46(v44, 1, Step) == 1)
  {
    sub_10000882C(v43, &qword_100838590);
    sub_10000882C(v42, &qword_100838590);
    if (v46(v45, 1, v47) == 1)
    {
      sub_10000882C(v44, &qword_100838590);
      goto LABEL_21;
    }
    goto LABEL_16;
  }
  v48 = v71;
  sub_100008868(v44, (uint64_t)v71, &qword_100838590);
  if (v46(v45, 1, v47) == 1)
  {
    sub_10000882C(v43, &qword_100838590);
    sub_10000882C(v42, &qword_100838590);
    sub_10001C744((uint64_t)v48, type metadata accessor for MigrateResponse.NextStep);
LABEL_16:
    v39 = &qword_1008397E0;
    v40 = v44;
    goto LABEL_17;
  }
  v50 = v66;
  sub_1000B8680(v45, (uint64_t)v66, type metadata accessor for MigrateResponse.NextStep);
  StepV2eeoiySbAE_AEtFZ_0 = _s7remindd15MigrateResponseV8NextStepV2eeoiySbAE_AEtFZ_0(v48, v50);
  sub_10001C744((uint64_t)v50, type metadata accessor for MigrateResponse.NextStep);
  sub_10000882C(v43, &qword_100838590);
  sub_10000882C(v42, &qword_100838590);
  sub_10001C744((uint64_t)v48, type metadata accessor for MigrateResponse.NextStep);
  sub_10000882C(v44, &qword_100838590);
  if ((StepV2eeoiySbAE_AEtFZ_0 & 1) == 0)
    goto LABEL_18;
LABEL_21:
  v52 = v36[6];
  v53 = &v78[v52];
  v54 = *(_QWORD *)&v78[v52];
  v55 = *(_QWORD *)&v78[v52 + 8];
  v56 = (_QWORD *)((char *)v79 + v52);
  v57 = v56[1];
  if (*(_QWORD *)v53 == *v56 && v55 == v57
    || (v35 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v54, v55, *v56, v57, 0) & 1) != 0))
  {
    v59 = v69;
    v58 = v70;
    v60 = *(void (**)(char *, char *, uint64_t))(v69 + 16);
    v61 = v67;
    v60(v67, &v78[v36[7]], v70);
    v62 = (char *)v79 + v36[7];
    v63 = v68;
    v60(v68, v62, v58);
    v64 = sub_10009FC50(&qword_100838618, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v35 = dispatch thunk of static Equatable.== infix(_:_:)(v61, v63, v58, v64);
    v65 = *(void (**)(char *, uint64_t))(v59 + 8);
    v65(v63, v58);
    v65(v61, v58);
  }
  return v35 & 1;
}

uint64_t _s7remindd15MigrateResponseV8NextStepV2eeoiySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Step;
  unsigned __int8 *v12;
  void (*v13)(char *, unsigned __int8 *, uint64_t);
  uint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v18 - v9;
  if (*a1 == *a2
    && a1[1] == a2[1]
    && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1)
    && *((_DWORD *)a1 + 2) == *((_DWORD *)a2 + 2)
    && *((_DWORD *)a1 + 3) == *((_DWORD *)a2 + 3))
  {
    Step = type metadata accessor for MigrateResponse.NextStep(0);
    v12 = &a1[*(int *)(Step + 36)];
    v13 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, &a2[*(int *)(Step + 36)], v4);
    v14 = sub_10009FC50(&qword_100838618, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v14);
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_1000B999C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v23 - v11;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a2 + 8);
  v15 = *(_QWORD *)a1 == *(_QWORD *)a2 && v13 == v14;
  if (v15
    || (v16 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)a1, v13, *(_QWORD *)a2, v14, 0) & 1) != 0))
  {
    if (*(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
    {
      v17 = a3(0);
      v18 = a1 + *(int *)(v17 + 24);
      v19 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
      v19(v12, v18, v6);
      v19(v10, a2 + *(int *)(v17 + 24), v6);
      v20 = sub_10009FC50(&qword_100838618, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v10, v6, v20);
      v21 = *(void (**)(char *, uint64_t))(v7 + 8);
      v21(v10, v6);
      v21(v12, v6);
    }
    else
    {
      v16 = 0;
    }
  }
  return v16 & 1;
}

uint64_t sub_1000B9AF8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, double))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v20 - v11;
  if (*(double *)a1 == *(double *)a2
    && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    v13 = a3(0, *(double *)a1);
    v14 = a1 + *(int *)(v13 + 32);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v15(v12, v14, v6);
    v15(v10, a2 + *(int *)(v13 + 32), v6);
    v16 = sub_10009FC50(&qword_100838618, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v17 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v10, v6, v16);
    v18 = *(void (**)(char *, uint64_t))(v7 + 8);
    v18(v10, v6);
    v18(v12, v6);
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t sub_1000B9C60(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(_QWORD), uint64_t (*a5)(_QWORD), uint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD);
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t (*v38)(_QWORD);
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t (*v43)(_QWORD);

  v43 = a3;
  v40 = a3(0);
  __chkstk_darwin(v40);
  v41 = (uint64_t)&v40 - v11;
  v12 = a4(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v40 - v13;
  v15 = a5(0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v40 - v19;
  v42 = a6;
  v21 = sub_10001A630(a6);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (uint64_t)&v24[*(int *)(v22 + 48)];
  sub_1000151E8(a1, (uint64_t)v24, a5);
  sub_1000151E8(a2, v25, a5);
  if (swift_getEnumCaseMultiPayload(v24, v15) != 1)
  {
    sub_1000151E8((uint64_t)v24, (uint64_t)v20, a5);
    if (swift_getEnumCaseMultiPayload(v25, v15) != 1)
    {
      sub_1000B8680(v25, (uint64_t)v14, a4);
      v36 = sub_1000B9AF8((uint64_t)v20, (uint64_t)v14, (uint64_t (*)(_QWORD, double))a4);
      sub_10001C744((uint64_t)v14, a4);
      sub_10001C744((uint64_t)v20, a4);
      sub_10001C744((uint64_t)v24, a5);
      return v36 & 1;
    }
    v37 = (uint64_t)v20;
    v38 = a4;
    goto LABEL_14;
  }
  sub_1000151E8((uint64_t)v24, (uint64_t)v18, a5);
  if (swift_getEnumCaseMultiPayload(v25, v15) != 1)
  {
    v37 = (uint64_t)v18;
    v38 = v43;
LABEL_14:
    sub_10001C744(v37, v38);
    sub_10000882C((uint64_t)v24, v42);
LABEL_17:
    v36 = 0;
    return v36 & 1;
  }
  v26 = v41;
  v27 = v43;
  sub_1000B8680(v25, v41, v43);
  v28 = *((_QWORD *)v18 + 1);
  v29 = *(_QWORD *)(v26 + 8);
  v30 = *(_QWORD *)v18 == *(_QWORD *)v26 && v28 == v29;
  if (!v30 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v18, v28, *(_QWORD *)v26, v29, 0) & 1) == 0
    || *((_DWORD *)v18 + 4) != *(_DWORD *)(v26 + 16)
    || (v31 = *(int *)(v40 + 24),
        v32 = &v18[v31],
        v33 = v26 + v31,
        v34 = type metadata accessor for UnknownStorage(0),
        v35 = sub_10009FC50(&qword_100838618, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage), (dispatch thunk of static Equatable.== infix(_:_:)(v32, v33, v34, v35) & 1) == 0))
  {
    sub_10001C744(v26, v27);
    sub_10001C744((uint64_t)v18, v27);
    sub_10001C744((uint64_t)v24, a5);
    goto LABEL_17;
  }
  sub_10001C744(v26, v27);
  sub_10001C744((uint64_t)v18, v27);
  sub_10001C744((uint64_t)v24, a5);
  v36 = 1;
  return v36 & 1;
}

uint64_t _s7remindd14MigrateRequestV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  char v26;
  int *v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char v37;
  void (*v38)(char *, uint64_t);
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v4 = type metadata accessor for UnknownStorage(0);
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  v5 = __chkstk_darwin(v4);
  v42 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v41 = (char *)&v40 - v7;
  v8 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v45 = (uint64_t)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A630(&qword_100839800);
  __chkstk_darwin(v11);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A630(&qword_100838580);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v40 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v40 - v21;
  v46 = a1;
  sub_100008868(a1, (uint64_t)&v40 - v21, &qword_100838580);
  v47 = a2;
  sub_100008868(a2, (uint64_t)v20, &qword_100838580);
  v23 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_100008868((uint64_t)v22, (uint64_t)v13, &qword_100838580);
  sub_100008868((uint64_t)v20, v23, &qword_100838580);
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v24((uint64_t)v13, 1, v8) != 1)
  {
    sub_100008868((uint64_t)v13, (uint64_t)v17, &qword_100838580);
    if (v24(v23, 1, v8) != 1)
    {
      v25 = v45;
      sub_1000B8680(v23, v45, type metadata accessor for MigrateRequest.OneOf_Source);
      v26 = _s7remindd14MigrateRequestV12OneOf_SourceO21__derived_enum_equalsySbAE_AEtFZ_0((uint64_t)v17, v25);
      sub_10001C744(v25, type metadata accessor for MigrateRequest.OneOf_Source);
      sub_10000882C((uint64_t)v20, &qword_100838580);
      sub_10000882C((uint64_t)v22, &qword_100838580);
      sub_10001C744((uint64_t)v17, type metadata accessor for MigrateRequest.OneOf_Source);
      sub_10000882C((uint64_t)v13, &qword_100838580);
      if ((v26 & 1) != 0)
        goto LABEL_8;
LABEL_12:
      v37 = 0;
      return v37 & 1;
    }
    sub_10000882C((uint64_t)v20, &qword_100838580);
    sub_10000882C((uint64_t)v22, &qword_100838580);
    sub_10001C744((uint64_t)v17, type metadata accessor for MigrateRequest.OneOf_Source);
LABEL_6:
    sub_10000882C((uint64_t)v13, &qword_100839800);
    goto LABEL_12;
  }
  sub_10000882C((uint64_t)v20, &qword_100838580);
  sub_10000882C((uint64_t)v22, &qword_100838580);
  if (v24(v23, 1, v8) != 1)
    goto LABEL_6;
  sub_10000882C((uint64_t)v13, &qword_100838580);
LABEL_8:
  v27 = (int *)type metadata accessor for MigrateRequest(0);
  v28 = v47;
  if (*(_DWORD *)(v46 + v27[5]) != *(_DWORD *)(v47 + v27[5]))
    goto LABEL_12;
  v29 = v27;
  if (*(unsigned __int8 *)(v46 + v27[6]) != *(unsigned __int8 *)(v47 + v27[6])
    || *(_DWORD *)(v46 + v27[7]) != *(_DWORD *)(v47 + v27[7]))
  {
    goto LABEL_12;
  }
  v31 = v43;
  v30 = v44;
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  v33 = v41;
  v32(v41, v46 + v27[8], v44);
  v34 = v28 + v29[8];
  v35 = v42;
  v32(v42, v34, v30);
  v36 = sub_10009FC50(&qword_100838618, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v37 = dispatch thunk of static Equatable.== infix(_:_:)(v33, v35, v30, v36);
  v38 = *(void (**)(char *, uint64_t))(v31 + 8);
  v38(v35, v30);
  v38(v33, v30);
  return v37 & 1;
}

uint64_t _s7remindd14MigrateRequestV4UserV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v18 - v9;
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8))
  {
    v11 = type metadata accessor for MigrateRequest.User(0);
    v12 = a1 + *(int *)(v11 + 24);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, a2 + *(int *)(v11 + 24), v4);
    v14 = sub_10009FC50(&qword_100838618, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v14);
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t _s7remindd14MigrateRequestV12OneOf_SourceO21__derived_enum_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = type metadata accessor for MigrateRequest.User(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  v8 = __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __chkstk_darwin(v8);
  v13 = (uint64_t *)((char *)&v34 - v12);
  __chkstk_darwin(v11);
  v35 = (uint64_t)&v34 - v14;
  v15 = sub_10001A630(&qword_100839848);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = &v18[*(int *)(v16 + 48)];
  sub_1000151E8(a1, (uint64_t)v18, type metadata accessor for MigrateRequest.OneOf_Source);
  sub_1000151E8(a2, (uint64_t)v19, type metadata accessor for MigrateRequest.OneOf_Source);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18, v7);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_1000151E8((uint64_t)v18, (uint64_t)v13, type metadata accessor for MigrateRequest.OneOf_Source);
      v22 = *v13;
      v21 = v13[1];
      if (swift_getEnumCaseMultiPayload(v19, v7) == 1)
        goto LABEL_4;
    }
    else
    {
      sub_1000151E8((uint64_t)v18, (uint64_t)v10, type metadata accessor for MigrateRequest.OneOf_Source);
      v22 = *v10;
      v21 = v10[1];
      if (swift_getEnumCaseMultiPayload(v19, v7) == 2)
      {
LABEL_4:
        v23 = *((_QWORD *)v19 + 1);
        if (v22 == *(_QWORD *)v19 && v21 == v23)
        {
          swift_bridgeObjectRelease_n(v21, 2);
        }
        else
        {
          v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v21, *(_QWORD *)v19, *((_QWORD *)v19 + 1), 0);
          swift_bridgeObjectRelease(v23);
          swift_bridgeObjectRelease(v21);
          if ((v25 & 1) == 0)
            goto LABEL_22;
        }
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease(v21);
  }
  else
  {
    v26 = v35;
    sub_1000151E8((uint64_t)v18, v35, type metadata accessor for MigrateRequest.OneOf_Source);
    if (!swift_getEnumCaseMultiPayload(v19, v7))
    {
      v28 = (uint64_t)v6;
      sub_1000B8680((uint64_t)v19, (uint64_t)v6, type metadata accessor for MigrateRequest.User);
      if (*(_QWORD *)v26 != *(_QWORD *)v6
        || *(_DWORD *)(v26 + 8) != *((_DWORD *)v6 + 2)
        || (v29 = *(int *)(v4 + 24),
            v30 = v26 + v29,
            v31 = v28 + v29,
            v32 = type metadata accessor for UnknownStorage(0),
            v33 = sub_10009FC50(&qword_100838618, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage), (dispatch thunk of static Equatable.== infix(_:_:)(v30, v31, v32, v33) & 1) == 0))
      {
        sub_10001C744(v28, type metadata accessor for MigrateRequest.User);
        sub_10001C744(v26, type metadata accessor for MigrateRequest.User);
LABEL_22:
        sub_10001C744((uint64_t)v18, type metadata accessor for MigrateRequest.OneOf_Source);
        return 0;
      }
      sub_10001C744(v28, type metadata accessor for MigrateRequest.User);
      sub_10001C744(v26, type metadata accessor for MigrateRequest.User);
LABEL_16:
      sub_10001C744((uint64_t)v18, type metadata accessor for MigrateRequest.OneOf_Source);
      return 1;
    }
    sub_10001C744(v26, type metadata accessor for MigrateRequest.User);
  }
  sub_10000882C((uint64_t)v18, &qword_100839848);
  return 0;
}

uint64_t _s7remindd13BasicResponseV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v24 - v9;
  v11 = *((unsigned __int8 *)a1 + 16);
  v12 = *((unsigned __int8 *)a2 + 16);
  if (v11 == 255)
  {
    if (v12 == 255)
    {
LABEL_13:
      v18 = type metadata accessor for BasicResponse(0);
      v19 = (uint64_t)a1 + *(int *)(v18 + 20);
      v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v20(v10, v19, v4);
      v20(v8, (uint64_t)a2 + *(int *)(v18 + 20), v4);
      v21 = sub_10009FC50(&qword_100838618, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v13 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v21);
      v22 = *(void (**)(char *, uint64_t))(v5 + 8);
      v22(v8, v4);
      v22(v10, v4);
      return v13 & 1;
    }
    goto LABEL_5;
  }
  if (v12 == 255)
  {
LABEL_5:
    v13 = 0;
    return v13 & 1;
  }
  v14 = *a1;
  v15 = a1[1];
  v16 = *a2;
  v17 = a2[1];
  if ((v11 & 1) != 0)
  {
    if ((v12 & 1) == 0)
      goto LABEL_5;
  }
  else if ((v12 & 1) != 0)
  {
    goto LABEL_5;
  }
  if (v14 == v16 && v15 == v17)
    goto LABEL_13;
  v13 = 0;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v16, v17, 0) & 1) != 0)
    goto LABEL_13;
  return v13 & 1;
}

uint64_t sub_1000BA9B4(_QWORD *a1, char *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v23 - v11;
  v13 = a1[1];
  v14 = *((_QWORD *)a2 + 1);
  v15 = *a1 == *(_QWORD *)a2 && v13 == v14;
  if (v15 || (v16 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(*a1, v13, *(_QWORD *)a2, v14, 0) & 1) != 0))
  {
    v17 = a3(0);
    v18 = (char *)a1 + *(int *)(v17 + 20);
    v19 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v19(v12, v18, v6);
    v19(v10, &a2[*(int *)(v17 + 20)], v6);
    v20 = sub_10009FC50(&qword_100838618, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v10, v6, v20);
    v21 = *(void (**)(char *, uint64_t))(v7 + 8);
    v21(v10, v6);
    v21(v12, v6);
  }
  return v16 & 1;
}

uint64_t sub_1000BAAF8(uint64_t result)
{
  switch(result)
  {
    case 4:
      result = 3;
      break;
    case 8:
      result = 4;
      break;
    case 16:
      result = 5;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t type metadata accessor for MigrateResponse(uint64_t a1)
{
  return sub_10001522C(a1, (uint64_t *)&unk_100838F00, (uint64_t)&nominal type descriptor for MigrateResponse);
}

uint64_t type metadata accessor for MigrateResponse.OneOf_Result(uint64_t a1)
{
  return sub_10001522C(a1, qword_100838FC8, (uint64_t)&nominal type descriptor for MigrateResponse.OneOf_Result);
}

uint64_t type metadata accessor for MigrateResponse.Details(uint64_t a1)
{
  return sub_10001522C(a1, qword_100839058, (uint64_t)&nominal type descriptor for MigrateResponse.Details);
}

uint64_t type metadata accessor for MigrateResponse.Error(uint64_t a1)
{
  return sub_10001522C(a1, qword_1008390F8, (uint64_t)&nominal type descriptor for MigrateResponse.Error);
}

uint64_t type metadata accessor for MigrateResponse.NextStep(uint64_t a1)
{
  return sub_10001522C(a1, qword_100839190, (uint64_t)&nominal type descriptor for MigrateResponse.NextStep);
}

uint64_t type metadata accessor for UnmigrateRequest(uint64_t a1)
{
  return sub_10001522C(a1, qword_100839230, (uint64_t)&nominal type descriptor for UnmigrateRequest);
}

uint64_t sub_1000BABD0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10001A630(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for UnmigrateResponse.OneOf_Result(uint64_t a1)
{
  return sub_10001522C(a1, qword_100839378, (uint64_t)&nominal type descriptor for UnmigrateResponse.OneOf_Result);
}

uint64_t type metadata accessor for UnmigrateResponse.Details(uint64_t a1)
{
  return sub_10001522C(a1, qword_100839408, (uint64_t)&nominal type descriptor for UnmigrateResponse.Details);
}

uint64_t type metadata accessor for UnmigrateResponse.Error(uint64_t a1)
{
  return sub_10001522C(a1, qword_100839498, (uint64_t)&nominal type descriptor for UnmigrateResponse.Error);
}

uint64_t type metadata accessor for UnmigrateResponse(uint64_t a1)
{
  return sub_10001522C(a1, (uint64_t *)&unk_1008392C0, (uint64_t)&nominal type descriptor for UnmigrateResponse);
}

uint64_t sub_1000BAC64(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return sub_1000BAC7C(a1, a2);
  return a1;
}

uint64_t sub_1000BAC7C(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_1000BAC84(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return sub_1000BAC9C(a1, a2);
  return a1;
}

uint64_t sub_1000BAC9C(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

uint64_t type metadata accessor for BasicResponse(uint64_t a1)
{
  return sub_10001522C(a1, qword_1008395B8, (uint64_t)&nominal type descriptor for BasicResponse);
}

uint64_t type metadata accessor for PingRequest(uint64_t a1)
{
  return sub_10001522C(a1, qword_100839648, (uint64_t)&nominal type descriptor for PingRequest);
}

uint64_t type metadata accessor for PingResponse(uint64_t a1)
{
  return sub_10001522C(a1, qword_1008396D8, (uint64_t)&nominal type descriptor for PingResponse);
}

uint64_t type metadata accessor for EmptyRequest(uint64_t a1)
{
  return sub_10001522C(a1, qword_100839528, (uint64_t)&nominal type descriptor for EmptyRequest);
}

unint64_t sub_1000BACF8()
{
  unint64_t result;

  result = qword_100838640;
  if (!qword_100838640)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MigrateRequest.Option, &type metadata for MigrateRequest.Option);
    atomic_store(result, (unint64_t *)&qword_100838640);
  }
  return result;
}

unint64_t sub_1000BAD40()
{
  unint64_t result;

  result = qword_100838648;
  if (!qword_100838648)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MigrateRequest.Option, &type metadata for MigrateRequest.Option);
    atomic_store(result, (unint64_t *)&qword_100838648);
  }
  return result;
}

unint64_t sub_1000BAD88()
{
  unint64_t result;

  result = qword_100838650;
  if (!qword_100838650)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MigrateRequest.Option, &type metadata for MigrateRequest.Option);
    atomic_store(result, (unint64_t *)&qword_100838650);
  }
  return result;
}

uint64_t sub_1000BADCC()
{
  return sub_1000BAEEC(&qword_100838658, &qword_100838660);
}

unint64_t sub_1000BADF4()
{
  unint64_t result;

  result = qword_100838668;
  if (!qword_100838668)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UnmigrateRequest.Option, &type metadata for UnmigrateRequest.Option);
    atomic_store(result, (unint64_t *)&qword_100838668);
  }
  return result;
}

unint64_t sub_1000BAE3C()
{
  unint64_t result;

  result = qword_100838670;
  if (!qword_100838670)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UnmigrateRequest.Option, &type metadata for UnmigrateRequest.Option);
    atomic_store(result, (unint64_t *)&qword_100838670);
  }
  return result;
}

unint64_t sub_1000BAE84()
{
  unint64_t result;

  result = qword_100838678;
  if (!qword_100838678)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UnmigrateRequest.Option, &type metadata for UnmigrateRequest.Option);
    atomic_store(result, (unint64_t *)&qword_100838678);
  }
  return result;
}

uint64_t sub_1000BAEC8()
{
  return sub_1000BAEEC(&qword_100838680, &qword_100838688);
}

uint64_t sub_1000BAEEC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1000A5A94(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BAF2C()
{
  return sub_10009FC50(&qword_100838690, type metadata accessor for StartMigrationRequest, (uint64_t)&protocol conformance descriptor for StartMigrationRequest);
}

uint64_t sub_1000BAF58()
{
  return sub_10009FC50(&qword_100838698, type metadata accessor for StartMigrationRequest, (uint64_t)&protocol conformance descriptor for StartMigrationRequest);
}

uint64_t sub_1000BAF84()
{
  return sub_10009FC50(&qword_1008385A0, type metadata accessor for StartMigrationRequest, (uint64_t)&protocol conformance descriptor for StartMigrationRequest);
}

uint64_t sub_1000BAFB0()
{
  return sub_10009FC50(&qword_1008386A0, type metadata accessor for StartMigrationRequest, (uint64_t)&protocol conformance descriptor for StartMigrationRequest);
}

uint64_t sub_1000BAFDC()
{
  return sub_10009FC50(&qword_1008386A8, type metadata accessor for StartMigrationRequest.Credential, (uint64_t)&protocol conformance descriptor for StartMigrationRequest.Credential);
}

uint64_t sub_1000BB008()
{
  return sub_10009FC50(&qword_1008386B0, type metadata accessor for StartMigrationRequest.Credential, (uint64_t)&protocol conformance descriptor for StartMigrationRequest.Credential);
}

uint64_t sub_1000BB034()
{
  return sub_10009FC50(&qword_1008385A8, type metadata accessor for StartMigrationRequest.Credential, (uint64_t)&protocol conformance descriptor for StartMigrationRequest.Credential);
}

uint64_t sub_1000BB060()
{
  return sub_10009FC50(&qword_1008386B8, type metadata accessor for StartMigrationRequest.Credential, (uint64_t)&protocol conformance descriptor for StartMigrationRequest.Credential);
}

uint64_t sub_1000BB08C()
{
  return sub_10009FC50(&qword_1008386C0, type metadata accessor for StartMigrationResponse, (uint64_t)&protocol conformance descriptor for StartMigrationResponse);
}

uint64_t sub_1000BB0B8()
{
  return sub_10009FC50(&qword_1008386C8, type metadata accessor for StartMigrationResponse, (uint64_t)&protocol conformance descriptor for StartMigrationResponse);
}

uint64_t sub_1000BB0E4()
{
  return sub_10009FC50(&qword_1008385B0, type metadata accessor for StartMigrationResponse, (uint64_t)&protocol conformance descriptor for StartMigrationResponse);
}

uint64_t sub_1000BB110()
{
  return sub_10009FC50(&qword_1008386D0, type metadata accessor for StartMigrationResponse, (uint64_t)&protocol conformance descriptor for StartMigrationResponse);
}

uint64_t sub_1000BB13C()
{
  return sub_10009FC50(&qword_1008386D8, type metadata accessor for StartMigrationResponse.Details, (uint64_t)&protocol conformance descriptor for StartMigrationResponse.Details);
}

uint64_t sub_1000BB168()
{
  return sub_10009FC50(&qword_1008386E0, type metadata accessor for StartMigrationResponse.Details, (uint64_t)&protocol conformance descriptor for StartMigrationResponse.Details);
}

uint64_t sub_1000BB194()
{
  return sub_10009FC50(&qword_1008385B8, type metadata accessor for StartMigrationResponse.Details, (uint64_t)&protocol conformance descriptor for StartMigrationResponse.Details);
}

uint64_t sub_1000BB1C0()
{
  return sub_10009FC50(&qword_1008386E8, type metadata accessor for StartMigrationResponse.Details, (uint64_t)&protocol conformance descriptor for StartMigrationResponse.Details);
}

uint64_t sub_1000BB1EC()
{
  return sub_10009FC50(&qword_1008386F0, type metadata accessor for StartMigrationResponse.Error, (uint64_t)&protocol conformance descriptor for StartMigrationResponse.Error);
}

uint64_t sub_1000BB218()
{
  return sub_10009FC50(&qword_1008386F8, type metadata accessor for StartMigrationResponse.Error, (uint64_t)&protocol conformance descriptor for StartMigrationResponse.Error);
}

uint64_t sub_1000BB244()
{
  return sub_10009FC50(&qword_1008385C0, type metadata accessor for StartMigrationResponse.Error, (uint64_t)&protocol conformance descriptor for StartMigrationResponse.Error);
}

uint64_t sub_1000BB270()
{
  return sub_10009FC50(&qword_100838700, type metadata accessor for StartMigrationResponse.Error, (uint64_t)&protocol conformance descriptor for StartMigrationResponse.Error);
}

uint64_t sub_1000BB29C()
{
  return sub_10009FC50(&qword_100838708, type metadata accessor for MigrateRequest, (uint64_t)&protocol conformance descriptor for MigrateRequest);
}

uint64_t sub_1000BB2C8()
{
  return sub_10009FC50(&qword_100838710, type metadata accessor for MigrateRequest, (uint64_t)&protocol conformance descriptor for MigrateRequest);
}

uint64_t sub_1000BB2F4()
{
  return sub_10009FC50(&qword_1008385C8, type metadata accessor for MigrateRequest, (uint64_t)&protocol conformance descriptor for MigrateRequest);
}

uint64_t sub_1000BB320()
{
  return sub_10009FC50(&qword_100838718, type metadata accessor for MigrateRequest, (uint64_t)&protocol conformance descriptor for MigrateRequest);
}

uint64_t sub_1000BB34C()
{
  return sub_10009FC50(&qword_100838720, type metadata accessor for MigrateRequest.User, (uint64_t)&protocol conformance descriptor for MigrateRequest.User);
}

uint64_t sub_1000BB378()
{
  return sub_10009FC50(&qword_100838728, type metadata accessor for MigrateRequest.User, (uint64_t)&protocol conformance descriptor for MigrateRequest.User);
}

uint64_t sub_1000BB3A4()
{
  return sub_10009FC50(&qword_1008385D0, type metadata accessor for MigrateRequest.User, (uint64_t)&protocol conformance descriptor for MigrateRequest.User);
}

uint64_t sub_1000BB3D0()
{
  return sub_10009FC50(&qword_100838730, type metadata accessor for MigrateRequest.User, (uint64_t)&protocol conformance descriptor for MigrateRequest.User);
}

uint64_t sub_1000BB3FC()
{
  return sub_10009FC50(&qword_100838738, type metadata accessor for MigrateResponse, (uint64_t)&protocol conformance descriptor for MigrateResponse);
}

uint64_t sub_1000BB428()
{
  return sub_10009FC50(&qword_100838740, type metadata accessor for MigrateResponse, (uint64_t)&protocol conformance descriptor for MigrateResponse);
}

uint64_t sub_1000BB454()
{
  return sub_10009FC50(&qword_1008385D8, type metadata accessor for MigrateResponse, (uint64_t)&protocol conformance descriptor for MigrateResponse);
}

uint64_t sub_1000BB480()
{
  return sub_10009FC50(&qword_100838748, type metadata accessor for MigrateResponse, (uint64_t)&protocol conformance descriptor for MigrateResponse);
}

uint64_t sub_1000BB4AC()
{
  return sub_10009FC50(&qword_100838750, type metadata accessor for MigrateResponse.Details, (uint64_t)&protocol conformance descriptor for MigrateResponse.Details);
}

uint64_t sub_1000BB4D8()
{
  return sub_10009FC50(&qword_100838758, type metadata accessor for MigrateResponse.Details, (uint64_t)&protocol conformance descriptor for MigrateResponse.Details);
}

uint64_t sub_1000BB504()
{
  return sub_10009FC50(&qword_1008385E0, type metadata accessor for MigrateResponse.Details, (uint64_t)&protocol conformance descriptor for MigrateResponse.Details);
}

uint64_t sub_1000BB530()
{
  return sub_10009FC50(&qword_100838760, type metadata accessor for MigrateResponse.Details, (uint64_t)&protocol conformance descriptor for MigrateResponse.Details);
}

uint64_t sub_1000BB55C()
{
  return sub_10009FC50(&qword_100838768, type metadata accessor for MigrateResponse.Error, (uint64_t)&protocol conformance descriptor for MigrateResponse.Error);
}

uint64_t sub_1000BB588()
{
  return sub_10009FC50(&qword_100838770, type metadata accessor for MigrateResponse.Error, (uint64_t)&protocol conformance descriptor for MigrateResponse.Error);
}

uint64_t sub_1000BB5B4()
{
  return sub_10009FC50(&qword_1008385E8, type metadata accessor for MigrateResponse.Error, (uint64_t)&protocol conformance descriptor for MigrateResponse.Error);
}

uint64_t sub_1000BB5E0()
{
  return sub_10009FC50(&qword_100838778, type metadata accessor for MigrateResponse.Error, (uint64_t)&protocol conformance descriptor for MigrateResponse.Error);
}

uint64_t sub_1000BB60C()
{
  return sub_10009FC50(&qword_100838780, type metadata accessor for MigrateResponse.NextStep, (uint64_t)&protocol conformance descriptor for MigrateResponse.NextStep);
}

uint64_t sub_1000BB638()
{
  return sub_10009FC50(&qword_100838788, type metadata accessor for MigrateResponse.NextStep, (uint64_t)&protocol conformance descriptor for MigrateResponse.NextStep);
}

uint64_t sub_1000BB664()
{
  return sub_10009FC50(&qword_1008385F0, type metadata accessor for MigrateResponse.NextStep, (uint64_t)&protocol conformance descriptor for MigrateResponse.NextStep);
}

uint64_t sub_1000BB690()
{
  return sub_10009FC50(&qword_100838790, type metadata accessor for MigrateResponse.NextStep, (uint64_t)&protocol conformance descriptor for MigrateResponse.NextStep);
}

uint64_t sub_1000BB6BC()
{
  return sub_10009FC50(&qword_100838798, type metadata accessor for UnmigrateRequest, (uint64_t)&protocol conformance descriptor for UnmigrateRequest);
}

uint64_t sub_1000BB6E8()
{
  return sub_10009FC50(&qword_1008387A0, type metadata accessor for UnmigrateRequest, (uint64_t)&protocol conformance descriptor for UnmigrateRequest);
}

uint64_t sub_1000BB714()
{
  return sub_10009FC50(&qword_1008385F8, type metadata accessor for UnmigrateRequest, (uint64_t)&protocol conformance descriptor for UnmigrateRequest);
}

uint64_t sub_1000BB740()
{
  return sub_10009FC50(&qword_1008387A8, type metadata accessor for UnmigrateRequest, (uint64_t)&protocol conformance descriptor for UnmigrateRequest);
}

uint64_t sub_1000BB76C()
{
  return sub_10009FC50(&qword_1008387B0, type metadata accessor for UnmigrateResponse, (uint64_t)&protocol conformance descriptor for UnmigrateResponse);
}

uint64_t sub_1000BB798()
{
  return sub_10009FC50(&qword_1008387B8, type metadata accessor for UnmigrateResponse, (uint64_t)&protocol conformance descriptor for UnmigrateResponse);
}

uint64_t sub_1000BB7C4()
{
  return sub_10009FC50(&qword_100838600, type metadata accessor for UnmigrateResponse, (uint64_t)&protocol conformance descriptor for UnmigrateResponse);
}

uint64_t sub_1000BB7F0()
{
  return sub_10009FC50(&qword_1008387C0, type metadata accessor for UnmigrateResponse, (uint64_t)&protocol conformance descriptor for UnmigrateResponse);
}

uint64_t sub_1000BB81C()
{
  return sub_10009FC50(&qword_1008387C8, type metadata accessor for UnmigrateResponse.Details, (uint64_t)&protocol conformance descriptor for UnmigrateResponse.Details);
}

uint64_t sub_1000BB848()
{
  return sub_10009FC50(&qword_1008387D0, type metadata accessor for UnmigrateResponse.Details, (uint64_t)&protocol conformance descriptor for UnmigrateResponse.Details);
}

uint64_t sub_1000BB874()
{
  return sub_10009FC50(&qword_100838608, type metadata accessor for UnmigrateResponse.Details, (uint64_t)&protocol conformance descriptor for UnmigrateResponse.Details);
}

uint64_t sub_1000BB8A0()
{
  return sub_10009FC50(&qword_1008387D8, type metadata accessor for UnmigrateResponse.Details, (uint64_t)&protocol conformance descriptor for UnmigrateResponse.Details);
}

uint64_t sub_1000BB8CC()
{
  return sub_10009FC50(&qword_1008387E0, type metadata accessor for UnmigrateResponse.Error, (uint64_t)&protocol conformance descriptor for UnmigrateResponse.Error);
}

uint64_t sub_1000BB8F8()
{
  return sub_10009FC50(&qword_1008387E8, type metadata accessor for UnmigrateResponse.Error, (uint64_t)&protocol conformance descriptor for UnmigrateResponse.Error);
}

uint64_t sub_1000BB924()
{
  return sub_10009FC50(&qword_100838610, type metadata accessor for UnmigrateResponse.Error, (uint64_t)&protocol conformance descriptor for UnmigrateResponse.Error);
}

uint64_t sub_1000BB950()
{
  return sub_10009FC50(&qword_1008387F0, type metadata accessor for UnmigrateResponse.Error, (uint64_t)&protocol conformance descriptor for UnmigrateResponse.Error);
}

uint64_t sub_1000BB97C()
{
  return sub_10009FC50(&qword_1008387F8, type metadata accessor for EmptyRequest, (uint64_t)&protocol conformance descriptor for EmptyRequest);
}

uint64_t sub_1000BB9A8()
{
  return sub_10009FC50(&qword_100838800, type metadata accessor for EmptyRequest, (uint64_t)&protocol conformance descriptor for EmptyRequest);
}

uint64_t sub_1000BB9D4()
{
  return sub_10009FC50(&qword_100838620, type metadata accessor for EmptyRequest, (uint64_t)&protocol conformance descriptor for EmptyRequest);
}

uint64_t sub_1000BBA00()
{
  return sub_10009FC50(&qword_100838808, type metadata accessor for EmptyRequest, (uint64_t)&protocol conformance descriptor for EmptyRequest);
}

uint64_t sub_1000BBA2C()
{
  return sub_10009FC50(&qword_100838810, type metadata accessor for BasicResponse, (uint64_t)&protocol conformance descriptor for BasicResponse);
}

uint64_t sub_1000BBA58()
{
  return sub_10009FC50(&qword_100838818, type metadata accessor for BasicResponse, (uint64_t)&protocol conformance descriptor for BasicResponse);
}

uint64_t sub_1000BBA84()
{
  return sub_10009FC50(&qword_100838628, type metadata accessor for BasicResponse, (uint64_t)&protocol conformance descriptor for BasicResponse);
}

uint64_t sub_1000BBAB0()
{
  return sub_10009FC50(&qword_100838820, type metadata accessor for BasicResponse, (uint64_t)&protocol conformance descriptor for BasicResponse);
}

uint64_t sub_1000BBADC()
{
  return sub_10009FC50(&qword_100838828, type metadata accessor for PingRequest, (uint64_t)&protocol conformance descriptor for PingRequest);
}

uint64_t sub_1000BBB08()
{
  return sub_10009FC50(&qword_100838830, type metadata accessor for PingRequest, (uint64_t)&protocol conformance descriptor for PingRequest);
}

uint64_t sub_1000BBB34()
{
  return sub_10009FC50(&qword_100838630, type metadata accessor for PingRequest, (uint64_t)&protocol conformance descriptor for PingRequest);
}

uint64_t sub_1000BBB60()
{
  return sub_10009FC50(&qword_100838838, type metadata accessor for PingRequest, (uint64_t)&protocol conformance descriptor for PingRequest);
}

uint64_t sub_1000BBB8C()
{
  return sub_10009FC50(&qword_100838840, type metadata accessor for PingResponse, (uint64_t)&protocol conformance descriptor for PingResponse);
}

uint64_t sub_1000BBBB8()
{
  return sub_10009FC50(&qword_100838848, type metadata accessor for PingResponse, (uint64_t)&protocol conformance descriptor for PingResponse);
}

uint64_t sub_1000BBBE4()
{
  return sub_10009FC50(&qword_100838638, type metadata accessor for PingResponse, (uint64_t)&protocol conformance descriptor for PingResponse);
}

uint64_t sub_1000BBC10()
{
  return sub_10009FC50(&qword_100838850, type metadata accessor for PingResponse, (uint64_t)&protocol conformance descriptor for PingResponse);
}

uint64_t *initializeBufferWithCopyOfBuffer for StartMigrationRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t started;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v24)(char *, char *, uint64_t, __n128);
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    started = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
    v8 = *(_QWORD *)(started - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, started))
    {
      v9 = sub_10001A630(&qword_100838570);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, started);
      if ((_DWORD)EnumCaseMultiPayload == 1)
      {
        v27 = a2[1];
        *a1 = *a2;
        a1[1] = v27;
        v12 = a2[3];
        a1[2] = a2[2];
        a1[3] = v12;
        v13 = a2[5];
        a1[4] = a2[4];
        a1[5] = v13;
        v14 = a2[7];
        a1[6] = a2[6];
        a1[7] = v14;
        *((_DWORD *)a1 + 16) = *((_DWORD *)a2 + 16);
        v15 = *(int *)(type metadata accessor for StartMigrationRequest.Credential(0) + 36);
        v25 = (char *)a2 + v15;
        v26 = (char *)a1 + v15;
        v16 = type metadata accessor for UnknownStorage(0);
        v24 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v16 - 8) + 16);
        swift_bridgeObjectRetain(v27);
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v13);
        v17 = swift_bridgeObjectRetain(v14);
        v24(v26, v25, v16, v17);
      }
      else
      {
        v18 = a2[1];
        *a1 = *a2;
        a1[1] = v18;
        swift_bridgeObjectRetain(v18);
      }
      swift_storeEnumTagMultiPayload(a1, started, EnumCaseMultiPayload);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, started);
    }
    v19 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  }
  return a1;
}

uint64_t destroy for StartMigrationRequest(_QWORD *a1, uint64_t a2)
{
  uint64_t started;
  int EnumCaseMultiPayload;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  started = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 48))(a1, 1, started))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, started);
    switch(EnumCaseMultiPayload)
    {
      case 2:
        goto LABEL_5;
      case 1:
        swift_bridgeObjectRelease(a1[1]);
        swift_bridgeObjectRelease(a1[3]);
        swift_bridgeObjectRelease(a1[5]);
        swift_bridgeObjectRelease(a1[7]);
        v6 = (char *)a1 + *(int *)(type metadata accessor for StartMigrationRequest.Credential(0) + 36);
        v7 = type metadata accessor for UnknownStorage(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
        break;
      case 0:
LABEL_5:
        swift_bridgeObjectRelease(a1[1]);
        break;
    }
  }
  v8 = (char *)a1 + *(int *)(a2 + 24);
  v9 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
}

_QWORD *initializeWithCopy for StartMigrationRequest(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t started;
  uint64_t v7;
  uint64_t v8;
  uint64_t EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v22)(char *, char *, uint64_t, __n128);
  char *v23;
  char *v24;
  uint64_t v25;

  started = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  v7 = *(_QWORD *)(started - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, started))
  {
    v8 = sub_10001A630(&qword_100838570);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, started);
    if ((_DWORD)EnumCaseMultiPayload == 1)
    {
      v25 = a2[1];
      *a1 = *a2;
      a1[1] = v25;
      v10 = a2[3];
      a1[2] = a2[2];
      a1[3] = v10;
      v11 = a2[5];
      a1[4] = a2[4];
      a1[5] = v11;
      v12 = a2[7];
      a1[6] = a2[6];
      a1[7] = v12;
      *((_DWORD *)a1 + 16) = *((_DWORD *)a2 + 16);
      v13 = *(int *)(type metadata accessor for StartMigrationRequest.Credential(0) + 36);
      v23 = (char *)a2 + v13;
      v24 = (char *)a1 + v13;
      v14 = type metadata accessor for UnknownStorage(0);
      v22 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v14 - 8) + 16);
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v11);
      v15 = swift_bridgeObjectRetain(v12);
      v22(v24, v23, v14, v15);
    }
    else
    {
      v16 = a2[1];
      *a1 = *a2;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
    }
    swift_storeEnumTagMultiPayload(a1, started, EnumCaseMultiPayload);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, started);
  }
  v17 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  return a1;
}

uint64_t assignWithCopy for StartMigrationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t started;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  started = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  v7 = *(_QWORD *)(started - 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, started);
  v10 = v8(a2, 1, started);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, started);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      if ((_DWORD)EnumCaseMultiPayload == 1)
      {
        v40 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 8) = v40;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        v12 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 24) = v12;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v13 = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 40) = v13;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        v14 = *(_QWORD *)(a2 + 56);
        *(_QWORD *)(a1 + 56) = v14;
        *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
        v15 = *(int *)(type metadata accessor for StartMigrationRequest.Credential(0) + 36);
        v37 = a2 + v15;
        v38 = a1 + v15;
        v16 = type metadata accessor for UnknownStorage(0);
        v36 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v16 - 8) + 16);
        swift_bridgeObjectRetain(v40);
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v13);
        v17 = swift_bridgeObjectRetain(v14);
        v36(v38, v37, v16, v17);
      }
      else
      {
        v19 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 8) = v19;
        swift_bridgeObjectRetain(v19);
      }
      swift_storeEnumTagMultiPayload(a1, started, EnumCaseMultiPayload);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, started);
      goto LABEL_10;
    }
LABEL_7:
    v18 = sub_10001A630(&qword_100838570);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_10;
  }
  if (v10)
  {
    sub_10001C744(a1, type metadata accessor for StartMigrationRequest.OneOf_Source);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_10001C744(a1, type metadata accessor for StartMigrationRequest.OneOf_Source);
    v25 = swift_getEnumCaseMultiPayload(a2, started);
    if (v25 == 2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v34 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v34;
      swift_bridgeObjectRetain(v34);
      swift_storeEnumTagMultiPayload(a1, started, 2);
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      if (v25 == 1)
      {
        v26 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 8) = v26;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        v27 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 24) = v27;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v28 = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 40) = v28;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        v29 = *(_QWORD *)(a2 + 56);
        *(_QWORD *)(a1 + 56) = v29;
        *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
        v30 = *(int *)(type metadata accessor for StartMigrationRequest.Credential(0) + 36);
        v39 = a2 + v30;
        v41 = a1 + v30;
        v31 = type metadata accessor for UnknownStorage(0);
        v32 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v31 - 8) + 16);
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        swift_bridgeObjectRetain(v28);
        v33 = swift_bridgeObjectRetain(v29);
        v32(v41, v39, v31, v33);
        swift_storeEnumTagMultiPayload(a1, started, 1);
      }
      else
      {
        v35 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 8) = v35;
        swift_bridgeObjectRetain(v35);
        swift_storeEnumTagMultiPayload(a1, started, 0);
      }
    }
  }
LABEL_10:
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v20 = *(int *)(a3 + 24);
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 24))(v21, v22, v23);
  return a1;
}

_OWORD *initializeWithTake for StartMigrationRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t started;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  started = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  v7 = *(_QWORD *)(started - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, started))
  {
    v8 = sub_10001A630(&qword_100838570);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, started) == 1)
    {
      v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      v10 = a2[3];
      a1[2] = a2[2];
      a1[3] = v10;
      *((_DWORD *)a1 + 16) = *((_DWORD *)a2 + 16);
      v11 = *(int *)(type metadata accessor for StartMigrationRequest.Credential(0) + 36);
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
      swift_storeEnumTagMultiPayload(a1, started, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(v7 + 64));
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, started);
  }
  v15 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for StartMigrationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t started;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  started = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  v7 = *(_QWORD *)(started - 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, started);
  v10 = v8(a2, 1, started);
  if (!v9)
  {
    if (!v10)
    {
      if (a1 == a2)
        goto LABEL_14;
      sub_10001C744(a1, type metadata accessor for StartMigrationRequest.OneOf_Source);
      if (swift_getEnumCaseMultiPayload(a2, started) == 1)
      {
        v18 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v18;
        v19 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v19;
        *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
        v20 = *(int *)(type metadata accessor for StartMigrationRequest.Credential(0) + 36);
        v21 = a1 + v20;
        v22 = a2 + v20;
        v23 = type metadata accessor for UnknownStorage(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
        swift_storeEnumTagMultiPayload(a1, started, 1);
        goto LABEL_14;
      }
      v17 = *(_QWORD *)(v7 + 64);
      goto LABEL_8;
    }
    sub_10001C744(a1, type metadata accessor for StartMigrationRequest.OneOf_Source);
LABEL_7:
    v17 = *(_QWORD *)(*(_QWORD *)(sub_10001A630(&qword_100838570) - 8) + 64);
LABEL_8:
    memcpy((void *)a1, (const void *)a2, v17);
    goto LABEL_14;
  }
  if (v10)
    goto LABEL_7;
  if (swift_getEnumCaseMultiPayload(a2, started) == 1)
  {
    v11 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v11;
    v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v12;
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    v13 = *(int *)(type metadata accessor for StartMigrationRequest.Credential(0) + 36);
    v14 = a1 + v13;
    v15 = a2 + v13;
    v16 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    swift_storeEnumTagMultiPayload(a1, started, 1);
  }
  else
  {
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(v7 + 64));
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, started);
LABEL_14:
  v24 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 40))(v25, v26, v27);
  return a1;
}

uint64_t getEnumTagSinglePayload for StartMigrationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BC780);
}

uint64_t sub_1000BC780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unsigned int v11;

  v6 = sub_10001A630(&qword_100838570);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 254)
  {
    v8 = type metadata accessor for UnknownStorage(0);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v11 >= 2)
    return ((v11 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for StartMigrationRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BC844);
}

uint64_t sub_1000BC844(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_10001A630(&qword_100838570);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 254)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
      return result;
    }
    v10 = type metadata accessor for UnknownStorage(0);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1000BC8E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000C2F40(a1, a2, a3, (unint64_t *)&unk_1008388C0, type metadata accessor for StartMigrationRequest.OneOf_Source, (uint64_t)&unk_1006A70B0);
}

uint64_t initializeBufferWithCopyOfBuffer for StartMigrationRequest.OneOf_Source(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v21 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v22 = a2[1];
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v22;
      swift_bridgeObjectRetain(v22);
      v18 = a1;
      v19 = a3;
      v20 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v8 = a2[1];
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v8;
      v9 = a2[3];
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = v9;
      v10 = a2[5];
      *(_QWORD *)(a1 + 32) = a2[4];
      *(_QWORD *)(a1 + 40) = v10;
      v11 = a2[7];
      *(_QWORD *)(a1 + 48) = a2[6];
      *(_QWORD *)(a1 + 56) = v11;
      *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
      v12 = *(int *)(type metadata accessor for StartMigrationRequest.Credential(0) + 36);
      v13 = a1 + v12;
      v14 = (uint64_t)a2 + v12;
      v15 = type metadata accessor for UnknownStorage(0);
      v16 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v15 - 8) + 16);
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v10);
      v17 = swift_bridgeObjectRetain(v11);
      v16(v13, v14, v15, v17);
      v18 = a1;
      v19 = a3;
      v20 = 1;
    }
    else
    {
      v23 = a2[1];
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v23;
      swift_bridgeObjectRetain(v23);
      v18 = a1;
      v19 = a3;
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v18, v19, v20);
  }
  return a1;
}

void destroy for StartMigrationRequest.OneOf_Source(_QWORD *a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  char *v4;
  uint64_t v5;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  if (EnumCaseMultiPayload == 2)
  {
LABEL_4:
    swift_bridgeObjectRelease(a1[1]);
    return;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload)
      return;
    goto LABEL_4;
  }
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  v4 = (char *)a1 + *(int *)(type metadata accessor for StartMigrationRequest.Credential(0) + 36);
  v5 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for StartMigrationRequest.OneOf_Source(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t v18;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v7 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v8;
    v9 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v9;
    v10 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v10;
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    v11 = *(int *)(type metadata accessor for StartMigrationRequest.Credential(0) + 36);
    v12 = a1 + v11;
    v18 = a2 + v11;
    v13 = type metadata accessor for UnknownStorage(0);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v15 = swift_bridgeObjectRetain(v10);
    v14(v12, v18, v13, v15);
  }
  else
  {
    v16 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v16;
    swift_bridgeObjectRetain(v16);
  }
  swift_storeEnumTagMultiPayload(a1, a3, EnumCaseMultiPayload);
  return a1;
}

uint64_t assignWithCopy for StartMigrationRequest.OneOf_Source(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t v18;

  if (a1 != a2)
  {
    sub_10001C744(a1, type metadata accessor for StartMigrationRequest.OneOf_Source);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    if ((_DWORD)EnumCaseMultiPayload == 1)
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v8 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v8;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v9 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 40) = v9;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v10 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 56) = v10;
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
      v11 = *(int *)(type metadata accessor for StartMigrationRequest.Credential(0) + 36);
      v12 = a1 + v11;
      v18 = a2 + v11;
      v13 = type metadata accessor for UnknownStorage(0);
      v14 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v13 - 8) + 16);
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v9);
      v15 = swift_bridgeObjectRetain(v10);
      v14(v12, v18, v13, v15);
    }
    else
    {
      v16 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v16;
      swift_bridgeObjectRetain(v16);
    }
    swift_storeEnumTagMultiPayload(a1, a3, EnumCaseMultiPayload);
  }
  return a1;
}

_OWORD *initializeWithTake for StartMigrationRequest.OneOf_Source(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    *((_DWORD *)a1 + 16) = *((_DWORD *)a2 + 16);
    v8 = *(int *)(type metadata accessor for StartMigrationRequest.Credential(0) + 36);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *assignWithTake for StartMigrationRequest.OneOf_Source(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a1 != a2)
  {
    sub_10001C744((uint64_t)a1, type metadata accessor for StartMigrationRequest.OneOf_Source);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      v7 = a2[3];
      a1[2] = a2[2];
      a1[3] = v7;
      *((_DWORD *)a1 + 16) = *((_DWORD *)a2 + 16);
      v8 = *(int *)(type metadata accessor for StartMigrationRequest.Credential(0) + 36);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000BCEE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_1000BCEF8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1006A70D8;
  result = type metadata accessor for StartMigrationRequest.Credential(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1006A70D8;
    swift_initEnumMetadataMultiPayload(a1, 256, 3, v4);
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for StartMigrationRequest.Credential(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v14 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v14);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v6;
    v7 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v7;
    v8 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v8;
    v9 = *(int *)(a3 + 36);
    v10 = (uint64_t)a2 + v9;
    v11 = a1 + v9;
    *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
    v12 = type metadata accessor for UnknownStorage(0);
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v13(v11, v10, v12);
  }
  return v3;
}

uint64_t destroy for StartMigrationRequest.Credential(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  v4 = (char *)a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for StartMigrationRequest.Credential(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(int *)(a3 + 36);
  v9 = a2 + v8;
  v10 = a1 + v8;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  v11 = type metadata accessor for UnknownStorage(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v10, v9, v11);
  return a1;
}

uint64_t assignWithCopy for StartMigrationRequest.Credential(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  v14 = *(int *)(a3 + 36);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

uint64_t initializeWithTake for StartMigrationRequest.Credential(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  v6 = *(int *)(a3 + 36);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t assignWithTake for StartMigrationRequest.Credential(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRelease(v13);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  v14 = *(int *)(a3 + 36);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for StartMigrationRequest.Credential(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BD364);
}

uint64_t sub_1000BD364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for StartMigrationRequest.Credential(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BD3EC);
}

uint64_t sub_1000BD3EC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1000BD460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C1FE0(a1, a2, a3, (uint64_t)&unk_1006A70D8, (uint64_t)&unk_1006A70D8);
}

uint64_t *initializeBufferWithCopyOfBuffer for StartMigrationResponse(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t started;
  uint64_t v12;
  unsigned int (*v13)(_QWORD *, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  int EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t, __n128);
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t, __n128);
  __n128 v38;
  char *v40;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    started = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
    v12 = *(_QWORD *)(started - 8);
    v13 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t, __n128))(v12 + 48);
    v14 = swift_bridgeObjectRetain(v7);
    if (v13(v10, 1, started, v14))
    {
      v15 = sub_10001A630(&qword_100838578);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, started);
      *v9 = *v10;
      if (EnumCaseMultiPayload == 1)
      {
        v18 = v10[1];
        v9[1] = v18;
        *((_DWORD *)v9 + 4) = *((_DWORD *)v10 + 4);
        v19 = *(int *)(type metadata accessor for StartMigrationResponse.Error(0) + 24);
        v20 = (char *)v9 + v19;
        v40 = (char *)v10 + v19;
        v21 = type metadata accessor for UnknownStorage(0);
        v22 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v21 - 8) + 16);
        v23 = swift_bridgeObjectRetain(v18);
        v22(v20, v40, v21, v23);
        v24 = 1;
      }
      else
      {
        *((_BYTE *)v9 + 8) = *((_BYTE *)v10 + 8);
        *(_QWORD *)((char *)v9 + 12) = *(_QWORD *)((char *)v10 + 12);
        v25 = *(int *)(type metadata accessor for StartMigrationResponse.Details(0) + 32);
        v26 = (char *)v9 + v25;
        v27 = (char *)v10 + v25;
        v28 = type metadata accessor for UnknownStorage(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
        v24 = 0;
      }
      swift_storeEnumTagMultiPayload(v9, started, v24);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, started);
    }
    v29 = a3[6];
    v30 = a3[7];
    v31 = (uint64_t *)((char *)v4 + v29);
    v32 = (uint64_t *)((char *)a2 + v29);
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    v34 = (char *)v4 + v30;
    v35 = (char *)a2 + v30;
    v36 = type metadata accessor for UnknownStorage(0);
    v37 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v36 - 8) + 16);
    v38 = swift_bridgeObjectRetain(v33);
    v37(v34, v35, v36, v38);
  }
  return v4;
}

uint64_t destroy for StartMigrationResponse(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t started;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  started = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 48))(v4, 1, started))
  {
    if (swift_getEnumCaseMultiPayload(v4, started) == 1)
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v4 + 8));
      v6 = *(int *)(type metadata accessor for StartMigrationResponse.Error(0) + 24);
    }
    else
    {
      v6 = *(int *)(type metadata accessor for StartMigrationResponse.Details(0) + 32);
    }
    v7 = v4 + v6;
    v8 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  v9 = a1 + a2[7];
  v10 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

_QWORD *initializeWithCopy for StartMigrationResponse(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t started;
  uint64_t v11;
  unsigned int (*v12)(_QWORD *, uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  int EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t, __n128);
  __n128 v36;
  char *v38;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (_QWORD *)((char *)a1 + v7);
  v9 = (_QWORD *)((char *)a2 + v7);
  started = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  v11 = *(_QWORD *)(started - 8);
  v12 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t, __n128))(v11 + 48);
  v13 = swift_bridgeObjectRetain(v6);
  if (v12(v9, 1, started, v13))
  {
    v14 = sub_10001A630(&qword_100838578);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, started);
    *v8 = *v9;
    if (EnumCaseMultiPayload == 1)
    {
      v16 = v9[1];
      v8[1] = v16;
      *((_DWORD *)v8 + 4) = *((_DWORD *)v9 + 4);
      v17 = *(int *)(type metadata accessor for StartMigrationResponse.Error(0) + 24);
      v18 = (char *)v8 + v17;
      v38 = (char *)v9 + v17;
      v19 = type metadata accessor for UnknownStorage(0);
      v20 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v19 - 8) + 16);
      v21 = swift_bridgeObjectRetain(v16);
      v20(v18, v38, v19, v21);
      v22 = 1;
    }
    else
    {
      *((_BYTE *)v8 + 8) = *((_BYTE *)v9 + 8);
      *(_QWORD *)((char *)v8 + 12) = *(_QWORD *)((char *)v9 + 12);
      v23 = *(int *)(type metadata accessor for StartMigrationResponse.Details(0) + 32);
      v24 = (char *)v8 + v23;
      v25 = (char *)v9 + v23;
      v26 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, started, v22);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, started);
  }
  v27 = a3[6];
  v28 = a3[7];
  v29 = (_QWORD *)((char *)a1 + v27);
  v30 = (_QWORD *)((char *)a2 + v27);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  v32 = (char *)a1 + v28;
  v33 = (char *)a2 + v28;
  v34 = type metadata accessor for UnknownStorage(0);
  v35 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v34 - 8) + 16);
  v36 = swift_bridgeObjectRetain(v31);
  v35(v32, v33, v34, v36);
  return a1;
}

_QWORD *assignWithCopy for StartMigrationResponse(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t started;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  int v14;
  int v15;
  int EnumCaseMultiPayload;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, char *, uint64_t, __n128);
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(uint64_t, char *, uint64_t, __n128);
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (uint64_t)a1 + v8;
  v10 = (char *)a2 + v8;
  started = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  v12 = *(_QWORD *)(started - 8);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, started);
  v15 = v13((uint64_t)v10, 1, started);
  if (v14)
  {
    if (!v15)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, started);
      *(_QWORD *)v9 = *(_QWORD *)v10;
      if (EnumCaseMultiPayload == 1)
      {
        v17 = *((_QWORD *)v10 + 1);
        *(_QWORD *)(v9 + 8) = v17;
        *(_DWORD *)(v9 + 16) = *((_DWORD *)v10 + 4);
        v18 = *(int *)(type metadata accessor for StartMigrationResponse.Error(0) + 24);
        v19 = v9 + v18;
        v51 = &v10[v18];
        v20 = type metadata accessor for UnknownStorage(0);
        v21 = *(void (**)(uint64_t, char *, uint64_t, __n128))(*(_QWORD *)(v20 - 8) + 16);
        v22 = swift_bridgeObjectRetain(v17);
        v21(v19, v51, v20, v22);
        v23 = 1;
      }
      else
      {
        *(_BYTE *)(v9 + 8) = v10[8];
        *(_DWORD *)(v9 + 12) = *((_DWORD *)v10 + 3);
        *(_DWORD *)(v9 + 16) = *((_DWORD *)v10 + 4);
        v33 = *(int *)(type metadata accessor for StartMigrationResponse.Details(0) + 32);
        v34 = v9 + v33;
        v35 = &v10[v33];
        v36 = type metadata accessor for UnknownStorage(0);
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
        v23 = 0;
      }
      swift_storeEnumTagMultiPayload(v9, started, v23);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, started);
      goto LABEL_13;
    }
LABEL_7:
    v24 = sub_10001A630(&qword_100838578);
    memcpy((void *)v9, v10, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  if (v15)
  {
    sub_10001C744(v9, type metadata accessor for StartMigrationResponse.OneOf_Result);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_10001C744(v9, type metadata accessor for StartMigrationResponse.OneOf_Result);
    v25 = swift_getEnumCaseMultiPayload(v10, started);
    *(_QWORD *)v9 = *(_QWORD *)v10;
    if (v25 == 1)
    {
      v26 = *((_QWORD *)v10 + 1);
      *(_QWORD *)(v9 + 8) = v26;
      *(_DWORD *)(v9 + 16) = *((_DWORD *)v10 + 4);
      v27 = *(int *)(type metadata accessor for StartMigrationResponse.Error(0) + 24);
      v28 = v9 + v27;
      v29 = &v10[v27];
      v30 = type metadata accessor for UnknownStorage(0);
      v31 = *(void (**)(uint64_t, char *, uint64_t, __n128))(*(_QWORD *)(v30 - 8) + 16);
      v32 = swift_bridgeObjectRetain(v26);
      v31(v28, v29, v30, v32);
      swift_storeEnumTagMultiPayload(v9, started, 1);
    }
    else
    {
      *(_BYTE *)(v9 + 8) = v10[8];
      *(_DWORD *)(v9 + 12) = *((_DWORD *)v10 + 3);
      *(_DWORD *)(v9 + 16) = *((_DWORD *)v10 + 4);
      v47 = *(int *)(type metadata accessor for StartMigrationResponse.Details(0) + 32);
      v48 = v9 + v47;
      v49 = &v10[v47];
      v50 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
      swift_storeEnumTagMultiPayload(v9, started, 0);
    }
  }
LABEL_13:
  v37 = a3[6];
  v38 = (_QWORD *)((char *)a1 + v37);
  v39 = (_QWORD *)((char *)a2 + v37);
  *v38 = *v39;
  v40 = v39[1];
  v41 = v38[1];
  v38[1] = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  v42 = a3[7];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  v45 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 24))(v43, v44, v45);
  return a1;
}

_OWORD *initializeWithTake for StartMigrationResponse(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t started;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (_OWORD *)((char *)a1 + v6);
  v8 = (_OWORD *)((char *)a2 + v6);
  started = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  v10 = *(_QWORD *)(started - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, started))
  {
    v11 = sub_10001A630(&qword_100838578);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(v8, started) == 1)
    {
      *v7 = *v8;
      *((_DWORD *)v7 + 4) = *((_DWORD *)v8 + 4);
      v12 = *(int *)(type metadata accessor for StartMigrationResponse.Error(0) + 24);
      v13 = (char *)v7 + v12;
      v14 = (char *)v8 + v12;
      v15 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      v16 = 1;
    }
    else
    {
      *(_QWORD *)v7 = *(_QWORD *)v8;
      *((_BYTE *)v7 + 8) = *((_BYTE *)v8 + 8);
      *(_QWORD *)((char *)v7 + 12) = *(_QWORD *)((char *)v8 + 12);
      v17 = *(int *)(type metadata accessor for StartMigrationResponse.Details(0) + 32);
      v18 = (char *)v7 + v17;
      v19 = (char *)v8 + v17;
      v20 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v7, started, v16);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, started);
  }
  v21 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
  return a1;
}

_QWORD *assignWithTake for StartMigrationResponse(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t started;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (uint64_t)a1 + v8;
  v10 = (char *)a2 + v8;
  started = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  v12 = *(_QWORD *)(started - 8);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, started);
  v15 = v13((uint64_t)v10, 1, started);
  if (v14)
  {
    if (!v15)
    {
      if (swift_getEnumCaseMultiPayload(v10, started) == 1)
      {
        *(_OWORD *)v9 = *(_OWORD *)v10;
        *(_DWORD *)(v9 + 16) = *((_DWORD *)v10 + 4);
        v16 = *(int *)(type metadata accessor for StartMigrationResponse.Error(0) + 24);
        v17 = v9 + v16;
        v18 = &v10[v16];
        v19 = type metadata accessor for UnknownStorage(0);
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
        v20 = 1;
      }
      else
      {
        *(_QWORD *)v9 = *(_QWORD *)v10;
        *(_BYTE *)(v9 + 8) = v10[8];
        *(_QWORD *)(v9 + 12) = *(_QWORD *)(v10 + 12);
        v26 = *(int *)(type metadata accessor for StartMigrationResponse.Details(0) + 32);
        v27 = v9 + v26;
        v28 = &v10[v26];
        v29 = type metadata accessor for UnknownStorage(0);
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
        v20 = 0;
      }
      swift_storeEnumTagMultiPayload(v9, started, v20);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, started);
      goto LABEL_13;
    }
LABEL_7:
    v21 = sub_10001A630(&qword_100838578);
    memcpy((void *)v9, v10, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  if (v15)
  {
    sub_10001C744(v9, type metadata accessor for StartMigrationResponse.OneOf_Result);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_10001C744(v9, type metadata accessor for StartMigrationResponse.OneOf_Result);
    if (swift_getEnumCaseMultiPayload(v10, started) == 1)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
      *(_DWORD *)(v9 + 16) = *((_DWORD *)v10 + 4);
      v22 = *(int *)(type metadata accessor for StartMigrationResponse.Error(0) + 24);
      v23 = v9 + v22;
      v24 = &v10[v22];
      v25 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
      swift_storeEnumTagMultiPayload(v9, started, 1);
    }
    else
    {
      *(_QWORD *)v9 = *(_QWORD *)v10;
      *(_BYTE *)(v9 + 8) = v10[8];
      *(_QWORD *)(v9 + 12) = *(_QWORD *)(v10 + 12);
      v41 = *(int *)(type metadata accessor for StartMigrationResponse.Details(0) + 32);
      v42 = v9 + v41;
      v43 = &v10[v41];
      v44 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v42, v43, v44);
      swift_storeEnumTagMultiPayload(v9, started, 0);
    }
  }
LABEL_13:
  v30 = a3[6];
  v31 = (_QWORD *)((char *)a1 + v30);
  v32 = (_QWORD *)((char *)a2 + v30);
  v34 = *v32;
  v33 = v32[1];
  v35 = v31[1];
  *v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease(v35);
  v36 = a3[7];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  v39 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 40))(v37, v38, v39);
  return a1;
}

uint64_t getEnumTagSinglePayload for StartMigrationResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BE10C);
}

uint64_t sub_1000BE10C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10001A630(&qword_100838578);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = type metadata accessor for UnknownStorage(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for StartMigrationResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BE1BC);
}

uint64_t sub_1000BE1BC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_10001A630(&qword_100838578);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for UnknownStorage(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_1000BE25C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = &unk_1006A70D8;
  sub_1000BE2FC(319, (unint64_t *)&unk_100838AA8, type metadata accessor for StartMigrationResponse.OneOf_Result);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = &unk_1006A70D8;
    v4 = type metadata accessor for UnknownStorage(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

void sub_1000BE2FC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for StartMigrationResponse.OneOf_Result(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1000C0CA0(a1, a2, a3, type metadata accessor for StartMigrationResponse.Details, type metadata accessor for StartMigrationResponse.Error);
}

uint64_t destroy for StartMigrationResponse.OneOf_Result(uint64_t a1, uint64_t a2)
{
  return sub_1000C0DF8(a1, a2, type metadata accessor for StartMigrationResponse.Details, type metadata accessor for StartMigrationResponse.Error);
}

uint64_t initializeWithCopy for StartMigrationResponse.OneOf_Result(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C0E84(a1, a2, a3, type metadata accessor for StartMigrationResponse.Details, type metadata accessor for StartMigrationResponse.Error);
}

uint64_t assignWithCopy for StartMigrationResponse.OneOf_Result(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C0FB0(a1, a2, a3, type metadata accessor for StartMigrationResponse.OneOf_Result, type metadata accessor for StartMigrationResponse.Details, type metadata accessor for StartMigrationResponse.Error);
}

uint64_t initializeWithTake for StartMigrationResponse.OneOf_Result(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C10F0(a1, a2, a3, type metadata accessor for StartMigrationResponse.Details, type metadata accessor for StartMigrationResponse.Error);
}

uint64_t assignWithTake for StartMigrationResponse.OneOf_Result(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C1210(a1, a2, a3, type metadata accessor for StartMigrationResponse.OneOf_Result, type metadata accessor for StartMigrationResponse.Details, type metadata accessor for StartMigrationResponse.Error);
}

uint64_t sub_1000BE3D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C133C(a1, a2, a3, type metadata accessor for StartMigrationResponse.Details, type metadata accessor for StartMigrationResponse.Error);
}

uint64_t getEnumTagSinglePayload for StartMigrationResponse.Details(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BE408);
}

uint64_t storeEnumTagSinglePayload for StartMigrationResponse.Details(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BE418);
}

uint64_t getEnumTagSinglePayload for StartMigrationResponse.Error(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BE444);
}

uint64_t storeEnumTagSinglePayload for StartMigrationResponse.Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BE454);
}

uint64_t sub_1000BE458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C1BB4(a1, a2, a3, (uint64_t)&unk_1006A70D8);
}

uint64_t *initializeBufferWithCopyOfBuffer for MigrateRequest(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for MigrateRequest.OneOf_Source(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_10001A630(&qword_100838580);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v7);
      v12 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2 || (_DWORD)EnumCaseMultiPayload == 1)
      {
        v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        swift_bridgeObjectRetain(v13);
      }
      else
      {
        *a1 = *a2;
        *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
        v14 = *(int *)(type metadata accessor for MigrateRequest.User(0) + 24);
        v15 = (char *)a1 + v14;
        v16 = (char *)a2 + v14;
        v17 = type metadata accessor for UnknownStorage(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      }
      swift_storeEnumTagMultiPayload(a1, v7, v12);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v18 = a3[6];
    *(_DWORD *)((char *)a1 + a3[5]) = *(_DWORD *)((char *)a2 + a3[5]);
    *((_BYTE *)a1 + v18) = *((_BYTE *)a2 + v18);
    v19 = a3[8];
    *(_DWORD *)((char *)a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  }
  return a1;
}

uint64_t destroy for MigrateRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, v4);
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
    }
    else if (!EnumCaseMultiPayload)
    {
      v6 = a1 + *(int *)(type metadata accessor for MigrateRequest.User(0) + 24);
      v7 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
    }
  }
  v8 = a1 + *(int *)(a2 + 32);
  v9 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
}

_QWORD *initializeWithCopy for MigrateRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_10001A630(&qword_100838580);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    v10 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2 || (_DWORD)EnumCaseMultiPayload == 1)
    {
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      swift_bridgeObjectRetain(v11);
    }
    else
    {
      *a1 = *a2;
      *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
      v12 = *(int *)(type metadata accessor for MigrateRequest.User(0) + 24);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    }
    swift_storeEnumTagMultiPayload(a1, v6, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v16 = a3[6];
  *(_DWORD *)((char *)a1 + a3[5]) = *(_DWORD *)((char *)a2 + a3[5]);
  *((_BYTE *)a1 + v16) = *((_BYTE *)a2 + v16);
  v17 = a3[8];
  *(_DWORD *)((char *)a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  return a1;
}

_QWORD *assignWithCopy for MigrateRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v6 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
      v12 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2 || (_DWORD)EnumCaseMultiPayload == 1)
      {
        *a1 = *a2;
        v13 = a2[1];
        a1[1] = v13;
        swift_bridgeObjectRetain(v13);
      }
      else
      {
        *a1 = *a2;
        *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
        v17 = *(int *)(type metadata accessor for MigrateRequest.User(0) + 24);
        v18 = (char *)a1 + v17;
        v19 = (char *)a2 + v17;
        v20 = type metadata accessor for UnknownStorage(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
      }
      swift_storeEnumTagMultiPayload(a1, v6, v12);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_15;
    }
LABEL_8:
    v14 = sub_10001A630(&qword_100838580);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_15;
  }
  if (v10)
  {
    sub_10001C744((uint64_t)a1, type metadata accessor for MigrateRequest.OneOf_Source);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    sub_10001C744((uint64_t)a1, type metadata accessor for MigrateRequest.OneOf_Source);
    v15 = swift_getEnumCaseMultiPayload(a2, v6);
    if (v15 == 2)
    {
      *a1 = *a2;
      v26 = a2[1];
      a1[1] = v26;
      swift_bridgeObjectRetain(v26);
      swift_storeEnumTagMultiPayload(a1, v6, 2);
    }
    else
    {
      *a1 = *a2;
      if (v15 == 1)
      {
        v16 = a2[1];
        a1[1] = v16;
        swift_bridgeObjectRetain(v16);
        swift_storeEnumTagMultiPayload(a1, v6, 1);
      }
      else
      {
        *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
        v27 = *(int *)(type metadata accessor for MigrateRequest.User(0) + 24);
        v28 = (char *)a1 + v27;
        v29 = (char *)a2 + v27;
        v30 = type metadata accessor for UnknownStorage(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
        swift_storeEnumTagMultiPayload(a1, v6, 0);
      }
    }
  }
LABEL_15:
  *(_DWORD *)((char *)a1 + a3[5]) = *(_DWORD *)((char *)a2 + a3[5]);
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(_DWORD *)((char *)a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
  v21 = a3[8];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 24))(v22, v23, v24);
  return a1;
}

_DWORD *initializeWithTake for MigrateRequest(_DWORD *a1, _DWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_10001A630(&qword_100838580);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, v6))
    {
      memcpy(a1, a2, *(_QWORD *)(v7 + 64));
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[2] = a2[2];
      v9 = *(int *)(type metadata accessor for MigrateRequest.User(0) + 24);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
      swift_storeEnumTagMultiPayload(a1, v6, 0);
    }
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v13 = a3[6];
  *(_DWORD *)((char *)a1 + a3[5]) = *(_DWORD *)((char *)a2 + a3[5]);
  *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
  v14 = a3[8];
  *(_DWORD *)((char *)a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  return a1;
}

_DWORD *assignWithTake for MigrateRequest(_DWORD *a1, _DWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_DWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  size_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v6 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      if (a1 == a2)
        goto LABEL_14;
      sub_10001C744((uint64_t)a1, type metadata accessor for MigrateRequest.OneOf_Source);
      if (!swift_getEnumCaseMultiPayload(a2, v6))
      {
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[2] = a2[2];
        v22 = *(int *)(type metadata accessor for MigrateRequest.User(0) + 24);
        v23 = (char *)a1 + v22;
        v24 = (char *)a2 + v22;
        v25 = type metadata accessor for UnknownStorage(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
        swift_storeEnumTagMultiPayload(a1, v6, 0);
        goto LABEL_14;
      }
      v11 = *(_QWORD *)(v7 + 64);
      goto LABEL_8;
    }
    sub_10001C744((uint64_t)a1, type metadata accessor for MigrateRequest.OneOf_Source);
LABEL_7:
    v11 = *(_QWORD *)(*(_QWORD *)(sub_10001A630(&qword_100838580) - 8) + 64);
LABEL_8:
    memcpy(a1, a2, v11);
    goto LABEL_14;
  }
  if (v10)
    goto LABEL_7;
  if (swift_getEnumCaseMultiPayload(a2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(v7 + 64));
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1[2] = a2[2];
    v12 = *(int *)(type metadata accessor for MigrateRequest.User(0) + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
    swift_storeEnumTagMultiPayload(a1, v6, 0);
  }
  (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_14:
  v16 = a3[6];
  *(_DWORD *)((char *)a1 + a3[5]) = *(_DWORD *)((char *)a2 + a3[5]);
  *((_BYTE *)a1 + v16) = *((_BYTE *)a2 + v16);
  v17 = a3[8];
  *(_DWORD *)((char *)a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for MigrateRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BEE48);
}

uint64_t sub_1000BEE48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unsigned int v11;

  v6 = sub_10001A630(&qword_100838580);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 254)
  {
    v8 = type metadata accessor for UnknownStorage(0);
    v10 = a1 + *(int *)(a3 + 32);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v11 >= 2)
    return ((v11 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MigrateRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BEF0C);
}

uint64_t sub_1000BEF0C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_10001A630(&qword_100838580);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 254)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
      return result;
    }
    v10 = type metadata accessor for UnknownStorage(0);
    v12 = a1 + *(int *)(a4 + 32);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1000BEFB0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  sub_1000BE2FC(319, (unint64_t *)&unk_100838D28, type metadata accessor for MigrateRequest.OneOf_Source);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = (char *)&value witness table for Builtin.Int32 + 64;
    v6[2] = &unk_1006A70B0;
    v6[3] = (char *)&value witness table for Builtin.Int32 + 64;
    v4 = type metadata accessor for UnknownStorage(319);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for MigrateRequest.OneOf_Source(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      swift_bridgeObjectRetain(v13);
      v9 = a1;
      v10 = a3;
      v11 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain(v8);
      v9 = a1;
      v10 = a3;
      v11 = 1;
    }
    else
    {
      *a1 = *a2;
      *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
      v14 = *(int *)(type metadata accessor for MigrateRequest.User(0) + 24);
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      v17 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      v9 = a1;
      v10 = a3;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }
  return a1;
}

double destroy for MigrateRequest.OneOf_Source(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  double result;
  uint64_t v5;
  uint64_t v6;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8)).n128_u64[0];
  }
  else if (!EnumCaseMultiPayload)
  {
    v5 = a1 + *(int *)(type metadata accessor for MigrateRequest.User(0) + 24);
    v6 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  return result;
}

_QWORD *initializeWithCopy for MigrateRequest.OneOf_Source(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  v7 = EnumCaseMultiPayload;
  if ((_DWORD)EnumCaseMultiPayload == 2 || (_DWORD)EnumCaseMultiPayload == 1)
  {
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    swift_bridgeObjectRetain(v8);
  }
  else
  {
    *a1 = *a2;
    *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
    v9 = *(int *)(type metadata accessor for MigrateRequest.User(0) + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  swift_storeEnumTagMultiPayload(a1, a3, v7);
  return a1;
}

_QWORD *assignWithCopy for MigrateRequest.OneOf_Source(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_10001C744((uint64_t)a1, type metadata accessor for MigrateRequest.OneOf_Source);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    v7 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2 || (_DWORD)EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v8 = a2[1];
      a1[1] = v8;
      swift_bridgeObjectRetain(v8);
    }
    else
    {
      *a1 = *a2;
      *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
      v9 = *(int *)(type metadata accessor for MigrateRequest.User(0) + 24);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    }
    swift_storeEnumTagMultiPayload(a1, a3, v7);
  }
  return a1;
}

_DWORD *initializeWithTake for MigrateRequest.OneOf_Source(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1[2] = a2[2];
    v6 = *(int *)(type metadata accessor for MigrateRequest.User(0) + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

_DWORD *assignWithTake for MigrateRequest.OneOf_Source(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_10001C744((uint64_t)a1, type metadata accessor for MigrateRequest.OneOf_Source);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[2] = a2[2];
      v6 = *(int *)(type metadata accessor for MigrateRequest.User(0) + 24);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for MigrateRequest.OneOf_Source(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for MigrateRequest.OneOf_Source(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_1000BF4F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for MigrateRequest.User(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1006A70D8;
    v4[2] = &unk_1006A70D8;
    swift_initEnumMetadataMultiPayload(a1, 256, 3, v4);
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MigrateRequest.Option(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for MigrateRequest.Option(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MigrateRequest.Option(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_1000BF5CC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000BF5E8(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for MigrateRequest.Option()
{
  return &type metadata for MigrateRequest.Option;
}

_QWORD *initializeBufferWithCopyOfBuffer for MigrateRequest.User(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v9);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    v5 = *(int *)(a3 + 24);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for MigrateRequest.User(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 24);
  v3 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t initializeWithCopy for MigrateRequest.User(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for MigrateRequest.User(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for MigrateRequest.User(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for MigrateRequest.User(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for MigrateRequest.User(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BF87C);
}

uint64_t sub_1000BF87C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for MigrateRequest.User(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BF8C8);
}

uint64_t sub_1000BF8C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_1000BF90C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C1BB4(a1, a2, a3, (uint64_t)&value witness table for Builtin.Int64 + 64);
}

uint64_t *initializeBufferWithCopyOfBuffer for MigrateResponse(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(_QWORD *, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  int EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t, __n128);
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t, __n128);
  __n128 v38;
  uint64_t v39;
  _WORD *v40;
  _WORD *v41;
  uint64_t Step;
  uint64_t v43;
  uint64_t v44;
  char *v46;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = type metadata accessor for MigrateResponse.OneOf_Result(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t, __n128))(v12 + 48);
    v14 = swift_bridgeObjectRetain(v7);
    if (v13(v10, 1, v11, v14))
    {
      v15 = sub_10001A630(&qword_100838588);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v11);
      *v9 = *v10;
      if (EnumCaseMultiPayload == 1)
      {
        v18 = v10[1];
        v9[1] = v18;
        *((_DWORD *)v9 + 4) = *((_DWORD *)v10 + 4);
        v19 = *(int *)(type metadata accessor for MigrateResponse.Error(0) + 24);
        v20 = (char *)v9 + v19;
        v46 = (char *)v10 + v19;
        v21 = type metadata accessor for UnknownStorage(0);
        v22 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v21 - 8) + 16);
        v23 = swift_bridgeObjectRetain(v18);
        v22(v20, v46, v21, v23);
        v24 = 1;
      }
      else
      {
        *((_BYTE *)v9 + 8) = *((_BYTE *)v10 + 8);
        *(_QWORD *)((char *)v9 + 12) = *(_QWORD *)((char *)v10 + 12);
        v25 = *(int *)(type metadata accessor for MigrateResponse.Details(0) + 32);
        v26 = (char *)v9 + v25;
        v27 = (char *)v10 + v25;
        v28 = type metadata accessor for UnknownStorage(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
        v24 = 0;
      }
      swift_storeEnumTagMultiPayload(v9, v11, v24);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v29 = a3[6];
    v30 = a3[7];
    v31 = (uint64_t *)((char *)v4 + v29);
    v32 = (uint64_t *)((char *)a2 + v29);
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    v34 = (char *)v4 + v30;
    v35 = (char *)a2 + v30;
    v36 = type metadata accessor for UnknownStorage(0);
    v37 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v36 - 8) + 16);
    v38 = swift_bridgeObjectRetain(v33);
    v37(v34, v35, v36, v38);
    v39 = a3[8];
    v40 = (_WORD *)((char *)v4 + v39);
    v41 = (_WORD *)((char *)a2 + v39);
    Step = type metadata accessor for MigrateResponse.NextStep(0);
    v43 = *(_QWORD *)(Step - 8);
    if ((*(unsigned int (**)(_WORD *, uint64_t, uint64_t))(v43 + 48))(v41, 1, Step))
    {
      v44 = sub_10001A630(&qword_100838590);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      *v40 = *v41;
      *(_QWORD *)(v40 + 2) = *(_QWORD *)(v41 + 2);
      *((_DWORD *)v40 + 3) = *((_DWORD *)v41 + 3);
      ((void (*)(char *, char *, uint64_t))v37)((char *)v40 + *(int *)(Step + 36), (char *)v41 + *(int *)(Step + 36), v36);
      (*(void (**)(_WORD *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, Step);
    }
  }
  return v4;
}

uint64_t destroy for MigrateResponse(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Step;
  uint64_t result;
  void (*v14)(uint64_t, uint64_t);

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v4 + 8));
      v6 = *(int *)(type metadata accessor for MigrateResponse.Error(0) + 24);
    }
    else
    {
      v6 = *(int *)(type metadata accessor for MigrateResponse.Details(0) + 32);
    }
    v7 = v4 + v6;
    v8 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  v9 = a1 + a2[7];
  v10 = type metadata accessor for UnknownStorage(0);
  v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v14(v9, v10);
  v11 = a1 + a2[8];
  Step = type metadata accessor for MigrateResponse.NextStep(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Step - 8) + 48))(v11, 1, Step);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v14)(v11 + *(int *)(Step + 36), v10);
  return result;
}

_QWORD *initializeWithCopy for MigrateResponse(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(_QWORD *, uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  int EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t, __n128);
  __n128 v36;
  uint64_t v37;
  _WORD *v38;
  _WORD *v39;
  uint64_t Step;
  uint64_t v41;
  uint64_t v42;
  char *v44;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (_QWORD *)((char *)a1 + v7);
  v9 = (_QWORD *)((char *)a2 + v7);
  v10 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t, __n128))(v11 + 48);
  v13 = swift_bridgeObjectRetain(v6);
  if (v12(v9, 1, v10, v13))
  {
    v14 = sub_10001A630(&qword_100838588);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v10);
    *v8 = *v9;
    if (EnumCaseMultiPayload == 1)
    {
      v16 = v9[1];
      v8[1] = v16;
      *((_DWORD *)v8 + 4) = *((_DWORD *)v9 + 4);
      v17 = *(int *)(type metadata accessor for MigrateResponse.Error(0) + 24);
      v18 = (char *)v8 + v17;
      v44 = (char *)v9 + v17;
      v19 = type metadata accessor for UnknownStorage(0);
      v20 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v19 - 8) + 16);
      v21 = swift_bridgeObjectRetain(v16);
      v20(v18, v44, v19, v21);
      v22 = 1;
    }
    else
    {
      *((_BYTE *)v8 + 8) = *((_BYTE *)v9 + 8);
      *(_QWORD *)((char *)v8 + 12) = *(_QWORD *)((char *)v9 + 12);
      v23 = *(int *)(type metadata accessor for MigrateResponse.Details(0) + 32);
      v24 = (char *)v8 + v23;
      v25 = (char *)v9 + v23;
      v26 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v10, v22);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v27 = a3[6];
  v28 = a3[7];
  v29 = (_QWORD *)((char *)a1 + v27);
  v30 = (_QWORD *)((char *)a2 + v27);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  v32 = (char *)a1 + v28;
  v33 = (char *)a2 + v28;
  v34 = type metadata accessor for UnknownStorage(0);
  v35 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v34 - 8) + 16);
  v36 = swift_bridgeObjectRetain(v31);
  v35(v32, v33, v34, v36);
  v37 = a3[8];
  v38 = (_WORD *)((char *)a1 + v37);
  v39 = (_WORD *)((char *)a2 + v37);
  Step = type metadata accessor for MigrateResponse.NextStep(0);
  v41 = *(_QWORD *)(Step - 8);
  if ((*(unsigned int (**)(_WORD *, uint64_t, uint64_t))(v41 + 48))(v39, 1, Step))
  {
    v42 = sub_10001A630(&qword_100838590);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    *v38 = *v39;
    *(_QWORD *)(v38 + 2) = *(_QWORD *)(v39 + 2);
    *((_DWORD *)v38 + 3) = *((_DWORD *)v39 + 3);
    ((void (*)(char *, char *, uint64_t))v35)((char *)v38 + *(int *)(Step + 36), (char *)v39 + *(int *)(Step + 36), v34);
    (*(void (**)(_WORD *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, Step);
  }
  return a1;
}

_QWORD *assignWithCopy for MigrateResponse(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  int v14;
  int v15;
  int EnumCaseMultiPayload;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, char *, uint64_t, __n128);
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(uint64_t, char *, uint64_t, __n128);
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t Step;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t);
  int v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (uint64_t)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13((uint64_t)v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v11);
      *(_QWORD *)v9 = *(_QWORD *)v10;
      if (EnumCaseMultiPayload == 1)
      {
        v17 = *((_QWORD *)v10 + 1);
        *(_QWORD *)(v9 + 8) = v17;
        *(_DWORD *)(v9 + 16) = *((_DWORD *)v10 + 4);
        v18 = *(int *)(type metadata accessor for MigrateResponse.Error(0) + 24);
        v19 = v9 + v18;
        v61 = &v10[v18];
        v20 = type metadata accessor for UnknownStorage(0);
        v21 = *(void (**)(uint64_t, char *, uint64_t, __n128))(*(_QWORD *)(v20 - 8) + 16);
        v22 = swift_bridgeObjectRetain(v17);
        v21(v19, v61, v20, v22);
        v23 = 1;
      }
      else
      {
        *(_BYTE *)(v9 + 8) = v10[8];
        *(_DWORD *)(v9 + 12) = *((_DWORD *)v10 + 3);
        *(_DWORD *)(v9 + 16) = *((_DWORD *)v10 + 4);
        v33 = *(int *)(type metadata accessor for MigrateResponse.Details(0) + 32);
        v34 = v9 + v33;
        v35 = &v10[v33];
        v36 = type metadata accessor for UnknownStorage(0);
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
        v23 = 0;
      }
      swift_storeEnumTagMultiPayload(v9, v11, v23);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_13;
    }
LABEL_7:
    v24 = sub_10001A630(&qword_100838588);
    memcpy((void *)v9, v10, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  if (v15)
  {
    sub_10001C744(v9, type metadata accessor for MigrateResponse.OneOf_Result);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_10001C744(v9, type metadata accessor for MigrateResponse.OneOf_Result);
    v25 = swift_getEnumCaseMultiPayload(v10, v11);
    *(_QWORD *)v9 = *(_QWORD *)v10;
    if (v25 == 1)
    {
      v26 = *((_QWORD *)v10 + 1);
      *(_QWORD *)(v9 + 8) = v26;
      *(_DWORD *)(v9 + 16) = *((_DWORD *)v10 + 4);
      v27 = *(int *)(type metadata accessor for MigrateResponse.Error(0) + 24);
      v28 = v9 + v27;
      v29 = &v10[v27];
      v30 = type metadata accessor for UnknownStorage(0);
      v31 = *(void (**)(uint64_t, char *, uint64_t, __n128))(*(_QWORD *)(v30 - 8) + 16);
      v32 = swift_bridgeObjectRetain(v26);
      v31(v28, v29, v30, v32);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      *(_BYTE *)(v9 + 8) = v10[8];
      *(_DWORD *)(v9 + 12) = *((_DWORD *)v10 + 3);
      *(_DWORD *)(v9 + 16) = *((_DWORD *)v10 + 4);
      v57 = *(int *)(type metadata accessor for MigrateResponse.Details(0) + 32);
      v58 = v9 + v57;
      v59 = &v10[v57];
      v60 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v58, v59, v60);
      swift_storeEnumTagMultiPayload(v9, v11, 0);
    }
  }
LABEL_13:
  v37 = a3[6];
  v38 = (_QWORD *)((char *)a1 + v37);
  v39 = (_QWORD *)((char *)a2 + v37);
  *v38 = *v39;
  v40 = v39[1];
  v41 = v38[1];
  v38[1] = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  v42 = a3[7];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  v45 = type metadata accessor for UnknownStorage(0);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(void (**)(char *, char *, uint64_t))(v46 + 24);
  v47(v43, v44, v45);
  v48 = a3[8];
  v49 = (uint64_t)a1 + v48;
  v50 = (char *)a2 + v48;
  Step = type metadata accessor for MigrateResponse.NextStep(0);
  v52 = *(_QWORD *)(Step - 8);
  v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 48);
  LODWORD(v44) = v53(v49, 1, Step);
  v54 = v53((uint64_t)v50, 1, Step);
  if (!(_DWORD)v44)
  {
    if (!v54)
    {
      *(_BYTE *)v49 = *v50;
      *(_BYTE *)(v49 + 1) = v50[1];
      *(_DWORD *)(v49 + 4) = *((_DWORD *)v50 + 1);
      *(_DWORD *)(v49 + 8) = *((_DWORD *)v50 + 2);
      *(_DWORD *)(v49 + 12) = *((_DWORD *)v50 + 3);
      v47((char *)(v49 + *(int *)(Step + 36)), &v50[*(int *)(Step + 36)], v45);
      return a1;
    }
    sub_10001C744(v49, type metadata accessor for MigrateResponse.NextStep);
    goto LABEL_18;
  }
  if (v54)
  {
LABEL_18:
    v55 = sub_10001A630(&qword_100838590);
    memcpy((void *)v49, v50, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    return a1;
  }
  *(_BYTE *)v49 = *v50;
  *(_BYTE *)(v49 + 1) = v50[1];
  *(_DWORD *)(v49 + 4) = *((_DWORD *)v50 + 1);
  *(_DWORD *)(v49 + 8) = *((_DWORD *)v50 + 2);
  *(_DWORD *)(v49 + 12) = *((_DWORD *)v50 + 3);
  (*(void (**)(uint64_t, char *, uint64_t))(v46 + 16))(v49 + *(int *)(Step + 36), &v50[*(int *)(Step + 36)], v45);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, Step);
  return a1;
}

_OWORD *initializeWithTake for MigrateResponse(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  _WORD *v27;
  _WORD *v28;
  uint64_t Step;
  uint64_t v30;
  uint64_t v31;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (_OWORD *)((char *)a1 + v6);
  v8 = (_OWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_10001A630(&qword_100838588);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
    {
      *v7 = *v8;
      *((_DWORD *)v7 + 4) = *((_DWORD *)v8 + 4);
      v12 = *(int *)(type metadata accessor for MigrateResponse.Error(0) + 24);
      v13 = (char *)v7 + v12;
      v14 = (char *)v8 + v12;
      v15 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      v16 = 1;
    }
    else
    {
      *(_QWORD *)v7 = *(_QWORD *)v8;
      *((_BYTE *)v7 + 8) = *((_BYTE *)v8 + 8);
      *(_QWORD *)((char *)v7 + 12) = *(_QWORD *)((char *)v8 + 12);
      v17 = *(int *)(type metadata accessor for MigrateResponse.Details(0) + 32);
      v18 = (char *)v7 + v17;
      v19 = (char *)v8 + v17;
      v20 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v7, v9, v16);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v21 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = type metadata accessor for UnknownStorage(0);
  v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32);
  v25(v22, v23, v24);
  v26 = a3[8];
  v27 = (_WORD *)((char *)a1 + v26);
  v28 = (_WORD *)((char *)a2 + v26);
  Step = type metadata accessor for MigrateResponse.NextStep(0);
  v30 = *(_QWORD *)(Step - 8);
  if ((*(unsigned int (**)(_WORD *, uint64_t, uint64_t))(v30 + 48))(v28, 1, Step))
  {
    v31 = sub_10001A630(&qword_100838590);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    *v27 = *v28;
    *(_QWORD *)(v27 + 2) = *(_QWORD *)(v28 + 2);
    *((_DWORD *)v27 + 3) = *((_DWORD *)v28 + 3);
    v25((char *)v27 + *(int *)(Step + 36), (char *)v28 + *(int *)(Step + 36), v24);
    (*(void (**)(_WORD *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, Step);
  }
  return a1;
}

_QWORD *assignWithTake for MigrateResponse(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t Step;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t, uint64_t);
  int v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (uint64_t)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13((uint64_t)v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
      {
        *(_OWORD *)v9 = *(_OWORD *)v10;
        *(_DWORD *)(v9 + 16) = *((_DWORD *)v10 + 4);
        v16 = *(int *)(type metadata accessor for MigrateResponse.Error(0) + 24);
        v17 = v9 + v16;
        v18 = &v10[v16];
        v19 = type metadata accessor for UnknownStorage(0);
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
        v20 = 1;
      }
      else
      {
        *(_QWORD *)v9 = *(_QWORD *)v10;
        *(_BYTE *)(v9 + 8) = v10[8];
        *(_QWORD *)(v9 + 12) = *(_QWORD *)(v10 + 12);
        v26 = *(int *)(type metadata accessor for MigrateResponse.Details(0) + 32);
        v27 = v9 + v26;
        v28 = &v10[v26];
        v29 = type metadata accessor for UnknownStorage(0);
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
        v20 = 0;
      }
      swift_storeEnumTagMultiPayload(v9, v11, v20);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_13;
    }
LABEL_7:
    v21 = sub_10001A630(&qword_100838588);
    memcpy((void *)v9, v10, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  if (v15)
  {
    sub_10001C744(v9, type metadata accessor for MigrateResponse.OneOf_Result);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_10001C744(v9, type metadata accessor for MigrateResponse.OneOf_Result);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
      *(_DWORD *)(v9 + 16) = *((_DWORD *)v10 + 4);
      v22 = *(int *)(type metadata accessor for MigrateResponse.Error(0) + 24);
      v23 = v9 + v22;
      v24 = &v10[v22];
      v25 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      *(_QWORD *)v9 = *(_QWORD *)v10;
      *(_BYTE *)(v9 + 8) = v10[8];
      *(_QWORD *)(v9 + 12) = *(_QWORD *)(v10 + 12);
      v51 = *(int *)(type metadata accessor for MigrateResponse.Details(0) + 32);
      v52 = v9 + v51;
      v53 = &v10[v51];
      v54 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(v52, v53, v54);
      swift_storeEnumTagMultiPayload(v9, v11, 0);
    }
  }
LABEL_13:
  v30 = a3[6];
  v31 = (_QWORD *)((char *)a1 + v30);
  v32 = (_QWORD *)((char *)a2 + v30);
  v34 = *v32;
  v33 = v32[1];
  v35 = v31[1];
  *v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease(v35);
  v36 = a3[7];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  v39 = type metadata accessor for UnknownStorage(0);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(void (**)(char *, char *, uint64_t))(v40 + 40);
  v41(v37, v38, v39);
  v42 = a3[8];
  v43 = (uint64_t)a1 + v42;
  v44 = (char *)a2 + v42;
  Step = type metadata accessor for MigrateResponse.NextStep(0);
  v46 = *(_QWORD *)(Step - 8);
  v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
  LODWORD(v38) = v47(v43, 1, Step);
  v48 = v47((uint64_t)v44, 1, Step);
  if (!(_DWORD)v38)
  {
    if (!v48)
    {
      *(_BYTE *)v43 = *v44;
      *(_BYTE *)(v43 + 1) = v44[1];
      *(_QWORD *)(v43 + 4) = *(_QWORD *)(v44 + 4);
      *(_DWORD *)(v43 + 12) = *((_DWORD *)v44 + 3);
      v41((char *)(v43 + *(int *)(Step + 36)), &v44[*(int *)(Step + 36)], v39);
      return a1;
    }
    sub_10001C744(v43, type metadata accessor for MigrateResponse.NextStep);
    goto LABEL_18;
  }
  if (v48)
  {
LABEL_18:
    v49 = sub_10001A630(&qword_100838590);
    memcpy((void *)v43, v44, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    return a1;
  }
  *(_WORD *)v43 = *(_WORD *)v44;
  *(_QWORD *)(v43 + 4) = *(_QWORD *)(v44 + 4);
  *(_DWORD *)(v43 + 12) = *((_DWORD *)v44 + 3);
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v43 + *(int *)(Step + 36), &v44[*(int *)(Step + 36)], v39);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, Step);
  return a1;
}

uint64_t getEnumTagSinglePayload for MigrateResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C0A20);
}

uint64_t sub_1000C0A20(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10001A630(&qword_100838588);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = type metadata accessor for UnknownStorage(0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[7];
      }
      else
      {
        v10 = sub_10001A630(&qword_100838590);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[8];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for MigrateResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C0AF8);
}

uint64_t sub_1000C0AF8(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_10001A630(&qword_100838588);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = type metadata accessor for UnknownStorage(0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[7];
      }
      else
      {
        v10 = sub_10001A630(&qword_100838590);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[8];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_1000C0BC0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  v8[0] = &unk_1006A70D8;
  sub_1000BE2FC(319, &qword_100838F10, type metadata accessor for MigrateResponse.OneOf_Result);
  if (v3 <= 0x3F)
  {
    v8[1] = *(_QWORD *)(v2 - 8) + 64;
    v8[2] = &unk_1006A70D8;
    v4 = type metadata accessor for UnknownStorage(319);
    if (v5 <= 0x3F)
    {
      v8[3] = *(_QWORD *)(v4 - 8) + 64;
      sub_1000BE2FC(319, (unint64_t *)&unk_100838F18, type metadata accessor for MigrateResponse.NextStep);
      if (v7 <= 0x3F)
      {
        v8[4] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 5, v8, a1 + 16);
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for MigrateResponse.OneOf_Result(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1000C0CA0(a1, a2, a3, type metadata accessor for MigrateResponse.Details, type metadata accessor for MigrateResponse.Error);
}

uint64_t sub_1000C0CA0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(_QWORD))
{
  int v7;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v7 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v7 & 0x20000) != 0)
  {
    v21 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v21 + ((v7 + 16) & ~(unint64_t)v7);
    swift_retain(v21);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    *(_QWORD *)a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      v12 = a2[1];
      *(_QWORD *)(a1 + 8) = v12;
      *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
      v13 = *(int *)(a5(0) + 24);
      v14 = a1 + v13;
      v15 = (uint64_t)a2 + v13;
      v16 = type metadata accessor for UnknownStorage(0);
      v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
      swift_bridgeObjectRetain(v12);
      v17(v14, v15, v16);
      v18 = a1;
      v19 = a3;
      v20 = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
      *(_QWORD *)(a1 + 12) = *(uint64_t *)((char *)a2 + 12);
      v22 = *(int *)(a4(0) + 32);
      v23 = a1 + v22;
      v24 = (uint64_t)a2 + v22;
      v25 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
      v18 = a1;
      v19 = a3;
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v18, v19, v20);
  }
  return a1;
}

uint64_t destroy for MigrateResponse.OneOf_Result(uint64_t a1, uint64_t a2)
{
  return sub_1000C0DF8(a1, a2, type metadata accessor for MigrateResponse.Details, type metadata accessor for MigrateResponse.Error);
}

uint64_t sub_1000C0DF8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
    v7 = *(int *)(a4(0) + 24);
  }
  else
  {
    v7 = *(int *)(a3(0) + 32);
  }
  v8 = a1 + v7;
  v9 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
}

uint64_t initializeWithCopy for MigrateResponse.OneOf_Result(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C0E84(a1, a2, a3, type metadata accessor for MigrateResponse.Details, type metadata accessor for MigrateResponse.Error);
}

uint64_t sub_1000C0E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(_QWORD))
{
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (EnumCaseMultiPayload == 1)
  {
    v11 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 8) = v11;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    v12 = *(int *)(a5(0) + 24);
    v13 = a1 + v12;
    v14 = a2 + v12;
    v15 = type metadata accessor for UnknownStorage(0);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_bridgeObjectRetain(v11);
    v16(v13, v14, v15);
    v17 = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
    v18 = *(int *)(a4(0) + 32);
    v19 = a1 + v18;
    v20 = a2 + v18;
    v21 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
    v17 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, a3, v17);
  return a1;
}

uint64_t assignWithCopy for MigrateResponse.OneOf_Result(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C0FB0(a1, a2, a3, type metadata accessor for MigrateResponse.OneOf_Result, type metadata accessor for MigrateResponse.Details, type metadata accessor for MigrateResponse.Error);
}

uint64_t sub_1000C0FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(_QWORD), uint64_t (*a6)(_QWORD))
{
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 != a2)
  {
    sub_10001C744(a1, a4);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    if (EnumCaseMultiPayload == 1)
    {
      v12 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v12;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      v13 = *(int *)(a6(0) + 24);
      v14 = a1 + v13;
      v15 = a2 + v13;
      v16 = type metadata accessor for UnknownStorage(0);
      v17 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v16 - 8) + 16);
      v18 = swift_bridgeObjectRetain(v12);
      v17(v14, v15, v16, v18);
      v19 = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      v20 = *(int *)(a5(0) + 32);
      v21 = a1 + v20;
      v22 = a2 + v20;
      v23 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, a3, v19);
  }
  return a1;
}

uint64_t initializeWithTake for MigrateResponse.OneOf_Result(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C10F0(a1, a2, a3, type metadata accessor for MigrateResponse.Details, type metadata accessor for MigrateResponse.Error);
}

uint64_t sub_1000C10F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(_QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    v10 = *(int *)(a5(0) + 24);
    v11 = a1 + v10;
    v12 = a2 + v10;
    v13 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    v14 = a1;
    v15 = a3;
    v16 = 1;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
    v17 = *(int *)(a4(0) + 32);
    v18 = a1 + v17;
    v19 = a2 + v17;
    v20 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
    v14 = a1;
    v15 = a3;
    v16 = 0;
  }
  swift_storeEnumTagMultiPayload(v14, v15, v16);
  return a1;
}

uint64_t assignWithTake for MigrateResponse.OneOf_Result(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C1210(a1, a2, a3, type metadata accessor for MigrateResponse.OneOf_Result, type metadata accessor for MigrateResponse.Details, type metadata accessor for MigrateResponse.Error);
}

uint64_t sub_1000C1210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(_QWORD), uint64_t (*a6)(_QWORD))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 != a2)
  {
    sub_10001C744(a1, a4);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      v11 = *(int *)(a6(0) + 24);
      v12 = a1 + v11;
      v13 = a2 + v11;
      v14 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
      v15 = a1;
      v16 = a3;
      v17 = 1;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
      v18 = *(int *)(a5(0) + 32);
      v19 = a1 + v18;
      v20 = a2 + v18;
      v21 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
      v15 = a1;
      v16 = a3;
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v16, v17);
  }
  return a1;
}

uint64_t sub_1000C1328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C133C(a1, a2, a3, type metadata accessor for MigrateResponse.Details, type metadata accessor for MigrateResponse.Error);
}

uint64_t sub_1000C133C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[2];

  result = a4(319);
  if (v8 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(result - 8) + 64;
    result = a5(319);
    if (v9 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(result - 8) + 64;
      swift_initEnumMetadataMultiPayload(a1, 256, 2, v10);
      return 0;
    }
  }
  return result;
}

_QWORD *_s7remindd22StartMigrationResponseV7DetailsVwCP_0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v9);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 12) = *(uint64_t *)((char *)a2 + 12);
    v5 = *(int *)(a3 + 32);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t _s7remindd22StartMigrationResponseV7DetailsVwxx_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 32);
  v3 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t _s7remindd22StartMigrationResponseV7DetailsVwcp_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
  v4 = *(int *)(a3 + 32);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t _s7remindd22StartMigrationResponseV7DetailsVwca_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 32);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t _s7remindd22StartMigrationResponseV7DetailsVwtk_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
  v4 = *(int *)(a3 + 32);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t _s7remindd22StartMigrationResponseV7DetailsVwta_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
  v4 = *(int *)(a3 + 32);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for MigrateResponse.Details(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C1654);
}

uint64_t sub_1000C1658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for MigrateResponse.Details(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C16E0);
}

uint64_t sub_1000C16E4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = a2 + 1;
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1000C1754(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = &unk_1006A70B0;
  v4[2] = (char *)&value witness table for Builtin.Int32 + 64;
  v4[3] = (char *)&value witness table for Builtin.Int32 + 64;
  result = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *_s7remindd22StartMigrationResponseV5ErrorVwCP_0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    v6 = *(int *)(a3 + 24);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UnknownStorage(0);
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t _s7remindd22StartMigrationResponseV5ErrorVwxx_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t _s7remindd22StartMigrationResponseV5ErrorVwcp_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage(0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t _s7remindd22StartMigrationResponseV5ErrorVwca_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

uint64_t _s7remindd22StartMigrationResponseV5ErrorVwtk_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t _s7remindd22StartMigrationResponseV5ErrorVwta_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for MigrateResponse.Error(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C1AB0);
}

uint64_t sub_1000C1AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for MigrateResponse.Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C1B3C);
}

uint64_t sub_1000C1B40(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1000C1BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v6;
  _QWORD v7[3];

  v7[0] = a4;
  v7[1] = (char *)&value witness table for Builtin.Int32 + 64;
  result = type metadata accessor for UnknownStorage(319);
  if (v6 <= 0x3F)
  {
    v7[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v7, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for MigrateResponse.NextStep(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v9);
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    *(_QWORD *)(a1 + 4) = *(uint64_t *)((char *)a2 + 4);
    *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
    v5 = *(int *)(a3 + 36);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for MigrateResponse.NextStep(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 36);
  v3 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t initializeWithCopy for MigrateResponse.NextStep(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  v4 = *(int *)(a3 + 36);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for MigrateResponse.NextStep(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  v4 = *(int *)(a3 + 36);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for MigrateResponse.NextStep(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  v4 = *(int *)(a3 + 36);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for MigrateResponse.NextStep(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  v4 = *(int *)(a3 + 36);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for MigrateResponse.NextStep(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C1ED0);
}

uint64_t sub_1000C1ED0(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage(0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(&a1[*(int *)(a3 + 36)], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for MigrateResponse.NextStep(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C1F58);
}

_BYTE *sub_1000C1F58(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 36)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1000C1FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C1FE0(a1, a2, a3, (uint64_t)&unk_1006A70B0, (uint64_t)&value witness table for Builtin.Int32 + 64);
}

uint64_t sub_1000C1FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unint64_t v7;
  _QWORD v8[6];

  v8[0] = a4;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a5;
  v8[4] = (char *)&value witness table for Builtin.Int32 + 64;
  result = type metadata accessor for UnknownStorage(319);
  if (v7 <= 0x3F)
  {
    v8[5] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 6, v8, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for UnmigrateRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v9);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

_DWORD *initializeWithCopy for UnmigrateRequest(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithCopy for UnmigrateRequest(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_DWORD *initializeWithTake for UnmigrateRequest(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithTake for UnmigrateRequest(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnmigrateRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C2268);
}

uint64_t storeEnumTagSinglePayload for UnmigrateRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C2278);
}

uint64_t sub_1000C227C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C4570(a1, a2, a3, (uint64_t)&value witness table for Builtin.Int32 + 64);
}

ValueMetadata *type metadata accessor for UnmigrateRequest.Option()
{
  return &type metadata for UnmigrateRequest.Option;
}

uint64_t *initializeBufferWithCopyOfBuffer for UnmigrateResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t, __n128);
  __n128 v33;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_10001A630(&qword_100838598);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v7);
      *a1 = *a2;
      if (EnumCaseMultiPayload == 1)
      {
        v12 = a2[1];
        a1[1] = v12;
        v13 = *(int *)(type metadata accessor for UnmigrateResponse.Error(0) + 20);
        v14 = (char *)a1 + v13;
        v15 = (char *)a2 + v13;
        v16 = type metadata accessor for UnknownStorage(0);
        v17 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v16 - 8) + 16);
        v18 = swift_bridgeObjectRetain(v12);
        v17(v14, v15, v16, v18);
        v19 = 1;
      }
      else
      {
        v20 = *(int *)(type metadata accessor for UnmigrateResponse.Details(0) + 20);
        v21 = (char *)a1 + v20;
        v22 = (char *)a2 + v20;
        v23 = type metadata accessor for UnknownStorage(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
        v19 = 0;
      }
      swift_storeEnumTagMultiPayload(a1, v7, v19);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v24 = *(int *)(a3 + 20);
    v25 = *(int *)(a3 + 24);
    v26 = (uint64_t *)((char *)a1 + v24);
    v27 = (uint64_t *)((char *)a2 + v24);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    v29 = (char *)a1 + v25;
    v30 = (char *)a2 + v25;
    v31 = type metadata accessor for UnknownStorage(0);
    v32 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v31 - 8) + 16);
    v33 = swift_bridgeObjectRetain(v28);
    v32(v29, v30, v31, v33);
  }
  return a1;
}

uint64_t destroy for UnmigrateResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
    {
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      v5 = type metadata accessor for UnmigrateResponse.Error(0);
    }
    else
    {
      v5 = type metadata accessor for UnmigrateResponse.Details(0);
    }
    v6 = a1 + *(int *)(v5 + 20);
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
  v8 = a1 + *(int *)(a2 + 24);
  v9 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
}

_QWORD *initializeWithCopy for UnmigrateResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t, __n128);
  __n128 v31;

  v6 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_10001A630(&qword_100838598);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      v10 = a2[1];
      a1[1] = v10;
      v11 = *(int *)(type metadata accessor for UnmigrateResponse.Error(0) + 20);
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for UnknownStorage(0);
      v15 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v14 - 8) + 16);
      v16 = swift_bridgeObjectRetain(v10);
      v15(v12, v13, v14, v16);
      v17 = 1;
    }
    else
    {
      v18 = *(int *)(type metadata accessor for UnmigrateResponse.Details(0) + 20);
      v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      v21 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v6, v17);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v22 = *(int *)(a3 + 20);
  v23 = *(int *)(a3 + 24);
  v24 = (_QWORD *)((char *)a1 + v22);
  v25 = (_QWORD *)((char *)a2 + v22);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  v27 = (char *)a1 + v23;
  v28 = (char *)a2 + v23;
  v29 = type metadata accessor for UnknownStorage(0);
  v30 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v29 - 8) + 16);
  v31 = swift_bridgeObjectRetain(v26);
  v30(v27, v28, v29, v31);
  return a1;
}

_QWORD *assignWithCopy for UnmigrateResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t, __n128);
  __n128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;

  v6 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
      *a1 = *a2;
      if (EnumCaseMultiPayload == 1)
      {
        v12 = a2[1];
        a1[1] = v12;
        v13 = *(int *)(type metadata accessor for UnmigrateResponse.Error(0) + 20);
        v14 = (char *)a1 + v13;
        v15 = (char *)a2 + v13;
        v16 = type metadata accessor for UnknownStorage(0);
        v17 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v16 - 8) + 16);
        v18 = swift_bridgeObjectRetain(v12);
        v17(v14, v15, v16, v18);
        v19 = 1;
      }
      else
      {
        v29 = *(int *)(type metadata accessor for UnmigrateResponse.Details(0) + 20);
        v30 = (char *)a1 + v29;
        v31 = (char *)a2 + v29;
        v32 = type metadata accessor for UnknownStorage(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
        v19 = 0;
      }
      swift_storeEnumTagMultiPayload(a1, v6, v19);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_13;
    }
LABEL_7:
    v20 = sub_10001A630(&qword_100838598);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  if (v10)
  {
    sub_10001C744((uint64_t)a1, type metadata accessor for UnmigrateResponse.OneOf_Result);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_10001C744((uint64_t)a1, type metadata accessor for UnmigrateResponse.OneOf_Result);
    v21 = swift_getEnumCaseMultiPayload(a2, v6);
    *a1 = *a2;
    if (v21 == 1)
    {
      v22 = a2[1];
      a1[1] = v22;
      v23 = *(int *)(type metadata accessor for UnmigrateResponse.Error(0) + 20);
      v24 = (char *)a1 + v23;
      v25 = (char *)a2 + v23;
      v26 = type metadata accessor for UnknownStorage(0);
      v27 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v26 - 8) + 16);
      v28 = swift_bridgeObjectRetain(v22);
      v27(v24, v25, v26, v28);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      v43 = *(int *)(type metadata accessor for UnmigrateResponse.Details(0) + 20);
      v44 = (char *)a1 + v43;
      v45 = (char *)a2 + v43;
      v46 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
      swift_storeEnumTagMultiPayload(a1, v6, 0);
    }
  }
LABEL_13:
  v33 = *(int *)(a3 + 20);
  v34 = (_QWORD *)((char *)a1 + v33);
  v35 = (_QWORD *)((char *)a2 + v33);
  *v34 = *v35;
  v36 = v35[1];
  v37 = v34[1];
  v34[1] = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  v38 = *(int *)(a3 + 24);
  v39 = (char *)a1 + v38;
  v40 = (char *)a2 + v38;
  v41 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 24))(v39, v40, v41);
  return a1;
}

_OWORD *initializeWithTake for UnmigrateResponse(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v6 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_10001A630(&qword_100838598);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      *a1 = *a2;
      v9 = *(int *)(type metadata accessor for UnmigrateResponse.Error(0) + 20);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
      v13 = a1;
      v14 = v6;
      v15 = 1;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v16 = *(int *)(type metadata accessor for UnmigrateResponse.Details(0) + 20);
      v17 = (char *)a1 + v16;
      v18 = (char *)a2 + v16;
      v19 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
      v13 = a1;
      v14 = v6;
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v14, v15);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v20 = *(int *)(a3 + 24);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
  return a1;
}

_OWORD *assignWithTake for UnmigrateResponse(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_OWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;

  v6 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
      {
        *a1 = *a2;
        v11 = *(int *)(type metadata accessor for UnmigrateResponse.Error(0) + 20);
        v12 = (char *)a1 + v11;
        v13 = (char *)a2 + v11;
        v14 = type metadata accessor for UnknownStorage(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
        v15 = a1;
        v16 = v6;
        v17 = 1;
      }
      else
      {
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v23 = *(int *)(type metadata accessor for UnmigrateResponse.Details(0) + 20);
        v24 = (char *)a1 + v23;
        v25 = (char *)a2 + v23;
        v26 = type metadata accessor for UnknownStorage(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
        v15 = a1;
        v16 = v6;
        v17 = 0;
      }
      swift_storeEnumTagMultiPayload(v15, v16, v17);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_13;
    }
LABEL_7:
    v18 = sub_10001A630(&qword_100838598);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_13;
  }
  if (v10)
  {
    sub_10001C744((uint64_t)a1, type metadata accessor for UnmigrateResponse.OneOf_Result);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_10001C744((uint64_t)a1, type metadata accessor for UnmigrateResponse.OneOf_Result);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      *a1 = *a2;
      v19 = *(int *)(type metadata accessor for UnmigrateResponse.Error(0) + 20);
      v20 = (char *)a1 + v19;
      v21 = (char *)a2 + v19;
      v22 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v38 = *(int *)(type metadata accessor for UnmigrateResponse.Details(0) + 20);
      v39 = (char *)a1 + v38;
      v40 = (char *)a2 + v38;
      v41 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v39, v40, v41);
      swift_storeEnumTagMultiPayload(a1, v6, 0);
    }
  }
LABEL_13:
  v27 = *(int *)(a3 + 20);
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (uint64_t *)((char *)a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  v32 = v28[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease(v32);
  v33 = *(int *)(a3 + 24);
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 40))(v34, v35, v36);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnmigrateResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C2DBC);
}

uint64_t sub_1000C2DBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = sub_10001A630(&qword_100838598);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for UnknownStorage(0);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for UnmigrateResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C2E78);
}

uint64_t sub_1000C2E78(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_10001A630(&qword_100838598);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for UnknownStorage(0);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1000C2F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000C2F40(a1, a2, a3, (unint64_t *)&unk_1008392D0, type metadata accessor for UnmigrateResponse.OneOf_Result, (uint64_t)&unk_1006A70D8);
}

void sub_1000C2F40(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[3];

  sub_1000BE2FC(319, a4, a5);
  if (v9 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v8 - 8) + 64;
    v12[1] = a6;
    v10 = type metadata accessor for UnknownStorage(319);
    if (v11 <= 0x3F)
    {
      v12[2] = *(_QWORD *)(v10 - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v12, a1 + 16);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for UnmigrateResponse.OneOf_Result(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t, __n128);
  __n128 v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      v8 = a2[1];
      a1[1] = v8;
      v9 = *(int *)(type metadata accessor for UnmigrateResponse.Error(0) + 20);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for UnknownStorage(0);
      v13 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v12 - 8) + 16);
      v14 = swift_bridgeObjectRetain(v8);
      v13(v10, v11, v12, v14);
      v15 = a1;
      v16 = a3;
      v17 = 1;
    }
    else
    {
      v19 = *(int *)(type metadata accessor for UnmigrateResponse.Details(0) + 20);
      v20 = (char *)a1 + v19;
      v21 = (char *)a2 + v19;
      v22 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
      v15 = a1;
      v16 = a3;
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v16, v17);
  }
  return a1;
}

uint64_t destroy for UnmigrateResponse.OneOf_Result(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
    v3 = type metadata accessor for UnmigrateResponse.Error(0);
  }
  else
  {
    v3 = type metadata accessor for UnmigrateResponse.Details(0);
  }
  v4 = a1 + *(int *)(v3 + 20);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for UnmigrateResponse.OneOf_Result(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  *a1 = *a2;
  if (EnumCaseMultiPayload == 1)
  {
    v7 = a2[1];
    a1[1] = v7;
    v8 = *(int *)(type metadata accessor for UnmigrateResponse.Error(0) + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage(0);
    v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
    v13 = swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11, v13);
    v14 = 1;
  }
  else
  {
    v15 = *(int *)(type metadata accessor for UnmigrateResponse.Details(0) + 20);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, a3, v14);
  return a1;
}

_QWORD *assignWithCopy for UnmigrateResponse.OneOf_Result(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  if (a1 != a2)
  {
    sub_10001C744((uint64_t)a1, type metadata accessor for UnmigrateResponse.OneOf_Result);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      v7 = a2[1];
      a1[1] = v7;
      v8 = *(int *)(type metadata accessor for UnmigrateResponse.Error(0) + 20);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for UnknownStorage(0);
      v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
      v13 = swift_bridgeObjectRetain(v7);
      v12(v9, v10, v11, v13);
      v14 = 1;
    }
    else
    {
      v15 = *(int *)(type metadata accessor for UnmigrateResponse.Details(0) + 20);
      v16 = (char *)a1 + v15;
      v17 = (char *)a2 + v15;
      v18 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, a3, v14);
  }
  return a1;
}

_OWORD *initializeWithTake for UnmigrateResponse.OneOf_Result(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    *a1 = *a2;
    v6 = *(int *)(type metadata accessor for UnmigrateResponse.Error(0) + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    v10 = a1;
    v11 = a3;
    v12 = 1;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v13 = *(int *)(type metadata accessor for UnmigrateResponse.Details(0) + 20);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    v10 = a1;
    v11 = a3;
    v12 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v11, v12);
  return a1;
}

_OWORD *assignWithTake for UnmigrateResponse.OneOf_Result(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  if (a1 != a2)
  {
    sub_10001C744((uint64_t)a1, type metadata accessor for UnmigrateResponse.OneOf_Result);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *a1 = *a2;
      v6 = *(int *)(type metadata accessor for UnmigrateResponse.Error(0) + 20);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
      v10 = a1;
      v11 = a3;
      v12 = 1;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v13 = *(int *)(type metadata accessor for UnmigrateResponse.Details(0) + 20);
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v16 = type metadata accessor for UnknownStorage(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      v10 = a1;
      v11 = a3;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_1000C3520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C133C(a1, a2, a3, type metadata accessor for UnmigrateResponse.Details, type metadata accessor for UnmigrateResponse.Error);
}

uint64_t *initializeBufferWithCopyOfBuffer for UnmigrateResponse.Details(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v9);
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t _s7remindd16UnmigrateRequestVwxx_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_QWORD *initializeWithCopy for UnmigrateResponse.Details(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for UnmigrateResponse.Details(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_QWORD *initializeWithTake for UnmigrateResponse.Details(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for UnmigrateResponse.Details(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnmigrateResponse.Details(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C3770);
}

uint64_t sub_1000C3774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for UnmigrateResponse.Details(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C37C0);
}

uint64_t sub_1000C37C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_1000C3808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C4570(a1, a2, a3, (uint64_t)&value witness table for Builtin.Int64 + 64);
}

uint64_t getEnumTagSinglePayload for UnmigrateResponse.Error(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C383C);
}

uint64_t storeEnumTagSinglePayload for UnmigrateResponse.Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C384C);
}

uint64_t sub_1000C3850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C4570(a1, a2, a3, (uint64_t)&unk_1006A70D8);
}

uint64_t initializeBufferWithCopyOfBuffer for EmptyRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for EmptyRequest(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for EmptyRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for EmptyRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for EmptyRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for EmptyRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for EmptyRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C39E8);
}

uint64_t sub_1000C39E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for EmptyRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C3A30);
}

uint64_t sub_1000C3A30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1000C3A70(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for BasicResponse(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *(_QWORD *)a2;
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v4 = v8 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(unsigned __int8 *)(a2 + 16);
    if (v7 == 255)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    }
    else
    {
      v9 = v7 & 1;
      v10 = *(_QWORD *)a2;
      v11 = *(_QWORD *)(a2 + 8);
      sub_1000BAC7C(*(_QWORD *)a2, v11);
      *(_QWORD *)v4 = v10;
      *(_QWORD *)(v4 + 8) = v11;
      *(_BYTE *)(v4 + 16) = v9;
    }
    v12 = *(int *)(a3 + 20);
    v13 = v4 + v12;
    v14 = a2 + v12;
    v15 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return v4;
}

uint64_t destroy for BasicResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (*(unsigned __int8 *)(a1 + 16) != 255)
    sub_1000BAC9C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for BasicResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *((unsigned __int8 *)a2 + 16);
  if (v6 == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  }
  else
  {
    v7 = v6 & 1;
    v8 = *a2;
    v9 = a2[1];
    sub_1000BAC7C(*a2, v9);
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v9;
    *(_BYTE *)(a1 + 16) = v7;
  }
  v10 = *(int *)(a3 + 20);
  v11 = a1 + v10;
  v12 = (uint64_t)a2 + v10;
  v13 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t assignWithCopy for BasicResponse(uint64_t a1, __int128 *a2, uint64_t a3)
{
  int v6;
  char v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *((unsigned __int8 *)a2 + 16);
  if (*(unsigned __int8 *)(a1 + 16) == 255)
  {
    if (v6 == 255)
    {
      v8 = *a2;
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      *(_OWORD *)a1 = v8;
    }
    else
    {
      v14 = v6 & 1;
      v15 = *(_QWORD *)a2;
      v16 = *((_QWORD *)a2 + 1);
      sub_1000BAC7C(*(_QWORD *)a2, v16);
      *(_QWORD *)a1 = v15;
      *(_QWORD *)(a1 + 8) = v16;
      *(_BYTE *)(a1 + 16) = v14;
    }
  }
  else if (v6 == 255)
  {
    sub_1000C3DA8((uint64_t *)a1);
    v7 = *((_BYTE *)a2 + 16);
    *(_OWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 16) = v7;
  }
  else
  {
    v9 = v6 & 1;
    v10 = *(_QWORD *)a2;
    v11 = *((_QWORD *)a2 + 1);
    sub_1000BAC7C(*(_QWORD *)a2, v11);
    v12 = *(_QWORD *)a1;
    v13 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v11;
    *(_BYTE *)(a1 + 16) = v9;
    sub_1000BAC9C(v12, v13);
  }
  v17 = *(int *)(a3 + 20);
  v18 = a1 + v17;
  v19 = (uint64_t)a2 + v17;
  v20 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  return a1;
}

uint64_t *sub_1000C3DA8(uint64_t *a1)
{
  sub_1000BAC9C(*a1, a1[1]);
  return a1;
}

uint64_t initializeWithTake for BasicResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for BasicResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(unsigned __int8 *)(a1 + 16) != 255)
  {
    v6 = *(unsigned __int8 *)(a2 + 16);
    if (v6 != 255)
    {
      v7 = *(_QWORD *)a1;
      v8 = *(_QWORD *)(a1 + 8);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = v6 & 1;
      sub_1000BAC9C(v7, v8);
      goto LABEL_6;
    }
    sub_1000C3DA8((uint64_t *)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
LABEL_6:
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for BasicResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C3EF4);
}

uint64_t sub_1000C3EF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 253)
  {
    v4 = *(unsigned __int8 *)(a1 + 16);
    if (v4 <= 1)
      return 0;
    else
      return v4 ^ 0xFF;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for BasicResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C3F74);
}

uint64_t sub_1000C3F74(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 253)
  {
    *(_BYTE *)(result + 16) = ~(_BYTE)a2;
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1000C3FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C4570(a1, a2, a3, (uint64_t)&unk_1006A7168);
}

uint64_t destroy for BasicResponse.OneOf_Result(uint64_t *a1)
{
  return sub_1000BAC9C(*a1, a1[1]);
}

uint64_t _s7remindd13BasicResponseV12OneOf_ResultOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000BAC7C(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for BasicResponse.OneOf_Result(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000BAC7C(*(_QWORD *)a2, v4);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1000BAC9C(v6, v7);
  return a1;
}

__n128 initializeWithTake for BasicResponse.OneOf_Result(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for BasicResponse.OneOf_Result(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1000BAC9C(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for BasicResponse.OneOf_Result(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BasicResponse.OneOf_Result(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000C4184(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1000C418C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for BasicResponse.OneOf_Result()
{
  return &type metadata for BasicResponse.OneOf_Result;
}

uint64_t getEnumTagSinglePayload for PingRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C41B4);
}

uint64_t storeEnumTagSinglePayload for PingRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C41C4);
}

uint64_t *_s7remindd17UnmigrateResponseV5ErrorVwCP_0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UnknownStorage(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t _s7remindd17UnmigrateResponseV5ErrorVwxx_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *_s7remindd17UnmigrateResponseV5ErrorVwcp_0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

_QWORD *_s7remindd17UnmigrateResponseV5ErrorVwca_0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_OWORD *_s7remindd17UnmigrateResponseV5ErrorVwtk_0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *_s7remindd17UnmigrateResponseV5ErrorVwta_0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PingResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C446C);
}

uint64_t sub_1000C4470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PingResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C44F8);
}

uint64_t sub_1000C44FC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1000C4570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v6;
  _QWORD v7[2];

  v7[0] = a4;
  result = type metadata accessor for UnknownStorage(319);
  if (v6 <= 0x3F)
  {
    v7[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v7, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_1000C45DC()
{
  unint64_t result;

  result = qword_1008397A8;
  if (!qword_1008397A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UnmigrateRequest.Option, &type metadata for UnmigrateRequest.Option);
    atomic_store(result, (unint64_t *)&qword_1008397A8);
  }
  return result;
}

unint64_t sub_1000C4620()
{
  unint64_t result;

  result = qword_1008397B0;
  if (!qword_1008397B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MigrateRequest.Option, &type metadata for MigrateRequest.Option);
    atomic_store(result, (unint64_t *)&qword_1008397B0);
  }
  return result;
}

id static REMCDSmartListSection.fetchRequest()()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSString v5;
  id v6;

  v1 = objc_msgSend(v0, "cdEntityName");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v3 = v2;

  v4 = objc_allocWithZone((Class)NSFetchRequest);
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  v6 = objc_msgSend(v4, "initWithEntityName:", v5);

  return v6;
}

_QWORD *sub_1000C473C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;

  v6 = type metadata accessor for UnfairLock.Options(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3[2] = 0xD00000000000001ALL;
  a3[3] = 0x80000001006F5E90;
  a3[7] = 0;
  v9 = type metadata accessor for RDTransactionRegistrar();
  v10 = (_QWORD *)swift_allocObject(v9, 56, 7);
  v10[4] = 0;
  v10[5] = 0;
  v10[2] = 0xD00000000000003FLL;
  v10[3] = 0x80000001006F5EB0;
  v17 = _swiftEmptyArrayStorage;
  v11 = sub_10009FC50((unint64_t *)&qword_100838120, (uint64_t (*)(uint64_t))&type metadata accessor for UnfairLock.Options, (uint64_t)&protocol conformance descriptor for UnfairLock.Options);
  v12 = sub_10001A630((uint64_t *)&unk_10083DBB0);
  v13 = sub_1000C4C0C((unint64_t *)&qword_100838130, (uint64_t *)&unk_10083DBB0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v12, v13, v6, v11);
  v14 = type metadata accessor for UnfairLock(0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v10[6] = UnfairLock.init(options:)(v8);
  a3[8] = v10;
  a3[4] = a1;
  a3[5] = &off_1007F5390;
  a3[6] = a2;
  return a3;
}

uint64_t sub_1000C48C4(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  id v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD aBlock[5];
  uint64_t v44;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v40 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v38 = *(_QWORD *)(v7 - 8);
  v39 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630(&qword_100839860);
  v11 = type metadata accessor for REMWidgetRefresh.WidgetKind(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = swift_allocObject(v10, v14 + *(_QWORD *)(v12 + 72), v13 | 7);
  *(_OWORD *)(v15 + 16) = xmmword_1006A3C00;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 104))(v15 + v14, enum case for REMWidgetRefresh.WidgetKind.widgetForAnyList(_:), v11);
  v16 = type metadata accessor for RDIntentsRelevantShortcutsHandler();
  v17 = swift_allocObject(v16, 24, 7);
  *(_QWORD *)(v17 + 16) = v15;
  v18 = type metadata accessor for RDRelevantShortcutsProcessor();
  v19 = (_QWORD *)swift_allocObject(v18, 72, 7);
  swift_retain(v17);
  v20 = a1;
  v21 = sub_1000C473C(v17, (uint64_t)v20, v19);
  swift_retain(v21);
  v22 = sub_1002C7FF0(0, 1, 1, _swiftEmptyArrayStorage);
  v24 = v22[2];
  v23 = v22[3];
  if (v24 >= v23 >> 1)
    v22 = sub_1002C7FF0((_QWORD *)(v23 > 1), v24 + 1, 1, v22);
  v22[2] = v24 + 1;
  v25 = &v22[2 * v24];
  v25[4] = v21;
  v25[5] = &off_1007EAA58;
  v26 = type metadata accessor for RDTimelineEngine();
  v27 = swift_allocObject(v26, 97, 7);
  *(_OWORD *)(v27 + 48) = 0u;
  *(_OWORD *)(v27 + 64) = 0u;
  *(_OWORD *)(v27 + 80) = 0u;
  *(_BYTE *)(v27 + 96) = 0;
  *(_QWORD *)(v27 + 16) = v20;
  *(_QWORD *)(v27 + 24) = a2;
  *(_QWORD *)(v27 + 32) = v22;
  *(_QWORD *)(v27 + 40) = 60;
  aBlock[4] = sub_1000C4C08;
  v44 = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007E2CE0;
  v28 = _Block_copy(aBlock);
  v20;
  v29 = a2;
  v30 = swift_retain(v27);
  static DispatchQoS.unspecified.getter(v30);
  v42 = _swiftEmptyArrayStorage;
  v31 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v32 = sub_10001A630((uint64_t *)&unk_100838000);
  v33 = sub_1000C4C0C((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000);
  v34 = v32;
  v35 = v41;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v42, v34, v33, v41, v31);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v28);
  _Block_release(v28);
  swift_release(v17);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v6, v35);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v39);
  swift_release(v44);
  return v27;
}

uint64_t sub_1000C4C0C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1000A5A94(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000C4C4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100839868);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100839868);
  if (qword_100837638 != -1)
    swift_once(&qword_100837638, sub_1004A1870);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872088);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000C4CDC()
{
  Swift::Int v0;
  uint64_t result;

  v0 = sub_1002E6C54((uint64_t)&off_1007DB100);
  result = swift_arrayDestroy(&unk_1007DB120, 3, &type metadata for String);
  qword_100871C20 = v0;
  return result;
}

void sub_1000C4D24(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[9];

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return;
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return;
  if (v2 >= v3)
    v4 = a1;
  else
    v4 = a2;
  if (v2 >= v3)
    v5 = a2;
  else
    v5 = a1;
  v32 = v4;
  v33 = v4 + 56;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v4 + 56);
  v31 = (unint64_t)(63 - v6) >> 6;
  v9 = v5 + 56;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v10 = 0;
  while (1)
  {
    while (1)
    {
      v11 = v10;
      if (!v8)
        break;
      v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v13 = v12 | (v10 << 6);
      if (*(_QWORD *)(v5 + 16))
        goto LABEL_31;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v14 >= v31)
      goto LABEL_47;
    v15 = *(_QWORD *)(v33 + 8 * v14);
    ++v10;
    if (!v15)
    {
      v10 = v11 + 2;
      if (v11 + 2 >= v31)
        goto LABEL_47;
      v15 = *(_QWORD *)(v33 + 8 * v10);
      if (!v15)
      {
        v10 = v11 + 3;
        if (v11 + 3 >= v31)
          goto LABEL_47;
        v15 = *(_QWORD *)(v33 + 8 * v10);
        if (!v15)
          break;
      }
    }
LABEL_30:
    v8 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
    if (*(_QWORD *)(v5 + 16))
    {
LABEL_31:
      v17 = (uint64_t *)(*(_QWORD *)(v32 + 48) + 16 * v13);
      v19 = *v17;
      v18 = v17[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v5 + 40));
      swift_bridgeObjectRetain(v18);
      String.hash(into:)(v34, v19, v18);
      v20 = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(v5 + 32);
      v22 = v20 & ~v21;
      if (((*(_QWORD *)(v9 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
      {
        v23 = *(_QWORD *)(v5 + 48);
        v24 = (_QWORD *)(v23 + 16 * v22);
        v25 = v24[1];
        v26 = *v24 == v19 && v25 == v18;
        if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v24, v25, v19, v18, 0) & 1) != 0)
        {
LABEL_44:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_45:
          sub_1000C6560(v32);
          return;
        }
        v27 = ~v21;
        while (1)
        {
          v22 = (v22 + 1) & v27;
          if (((*(_QWORD *)(v9 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
            break;
          v28 = (_QWORD *)(v23 + 16 * v22);
          v29 = v28[1];
          v30 = *v28 == v19 && v29 == v18;
          if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v19, v18, 0) & 1) != 0)
            goto LABEL_44;
        }
      }
      swift_bridgeObjectRelease();
    }
  }
  v16 = v11 + 4;
  if (v11 + 4 >= v31)
  {
LABEL_47:
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
  v15 = *(_QWORD *)(v33 + 8 * v16);
  if (v15)
  {
    v10 = v11 + 4;
    goto LABEL_30;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v31)
      goto LABEL_47;
    v15 = *(_QWORD *)(v33 + 8 * v10);
    ++v16;
    if (v15)
      goto LABEL_30;
  }
LABEL_49:
  __break(1u);
}

id sub_1000C5004()
{
  id *v0;

  return objc_msgSend(*v0, "languageHypothesisThresholdForPrimaryLanguage");
}

id sub_1000C5028()
{
  id *v0;

  return objc_msgSend(*v0, "languageHypothesisThresholdForAdditionalLanguages");
}

uint64_t sub_1000C504C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  id v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
  v5 = objc_msgSend(v4, "preferredLocalizations");

  if (!v5)
    goto LABEL_5;
  v7 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, &type metadata for String);

  if (!v7[2])
  {
    v6 = swift_bridgeObjectRelease(v7);
LABEL_5:
    v9 = static Locale.current.getter(v6);
    v8 = Locale.identifier.getter(v9);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return v8;
  }
  v8 = v7[4];
  swift_bridgeObjectRetain(v7[5]);
  swift_bridgeObjectRelease(v7);
  return v8;
}

float sub_1000C5160(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, float a8)
{
  uint64_t v8;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *log;
  uint64_t v24;
  os_log_type_t type;
  uint64_t v26;
  uint64_t v27;

  if (a4 == a6 && a5 == a7 || (_stringCompareWithSmolCheck(_:_:expecting:)(a4, a5, a6, a7, 0) & 1) != 0)
    goto LABEL_4;
  v18 = sub_1001C6154(a6, a7, 1, 0);
  if (v8)
    return a8;
  if (v18[2] <= a1)
  {
    swift_bridgeObjectRelease();
    if (qword_100836C98 == -1)
      goto LABEL_11;
  }
  else
  {
    if ((a1 & 0x8000000000000000) == 0)
    {
      swift_bridgeObjectRetain(v18[2 * a1 + 5]);
      swift_bridgeObjectRelease();
      return a8;
    }
    __break(1u);
  }
  swift_once(&qword_100836C98, sub_1000C4C4C);
LABEL_11:
  v19 = type metadata accessor for Logger(0);
  sub_10001AAA8(v19, (uint64_t)qword_100839868);
  swift_bridgeObjectRetain_n(a3, 2);
  swift_bridgeObjectRetain_n(a5, 2);
  v20 = swift_bridgeObjectRetain_n(a7, 2);
  v21 = Logger.logObject.getter(v20);
  type = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, type))
  {
    log = v21;
    v22 = swift_slowAlloc(32, -1);
    v24 = swift_slowAlloc(96, -1);
    v27 = v24;
    *(_DWORD *)v22 = 136315650;
    swift_bridgeObjectRetain(a3);
    v26 = sub_10001A820(a2, a3, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
    swift_bridgeObjectRelease_n(a3, 3);
    *(_WORD *)(v22 + 12) = 2080;
    swift_bridgeObjectRetain(a5);
    v26 = sub_10001A820(a4, a5, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
    swift_bridgeObjectRelease_n(a5, 3);
    *(_WORD *)(v22 + 22) = 2080;
    swift_bridgeObjectRetain(a7);
    v26 = sub_10001A820(a6, a7, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
    swift_bridgeObjectRelease_n(a7, 3);
    _os_log_impl((void *)&_mh_execute_header, log, type, "convert(prediction:from:to:) skip: %s, %s, %s", (uint8_t *)v22, 0x20u);
    swift_arrayDestroy(v24, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v22, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a7, 2);
    swift_bridgeObjectRelease_n(a5, 2);
    swift_bridgeObjectRelease_n(a3, 2);
  }
LABEL_4:
  swift_bridgeObjectRetain(a3);
  return a8;
}

void sub_1000C54A4(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5, __n128 a6)
{
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  __C::NLLanguage v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  Class isa;
  NSString v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  id v44;
  unint64_t v45;
  char v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  double v51;
  void *v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  id v56;
  void *v57;
  double v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  id v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;

  v67 = a5;
  v10 = type metadata accessor for Locale.Components(0, a6);
  v72 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = a3;
  v14 = Array<A>.removingDuplicates()(v11);
  v15 = *(_QWORD *)(v14 + 16);
  v16 = _swiftEmptyArrayStorage;
  v70 = (_QWORD *)v14;
  if (v15)
  {
    v17 = v14;
    v68 = a1;
    v69 = a2;
    v71 = a4;
    v73 = _swiftEmptyArrayStorage;
    sub_1001C1B9C(0, v15, 0);
    v18 = (_QWORD *)(v17 + 40);
    do
    {
      v19 = *(v18 - 1);
      v20 = *v18;
      swift_bridgeObjectRetain_n(*v18, 2);
      Locale.Components.init(identifier:)(v19, v20, v21);
      v22._rawValue = Locale.Components.rem_language()()._rawValue;
      (*(void (**)(char *, uint64_t))(v72 + 8))(v13, v10);
      swift_bridgeObjectRelease();
      v16 = v73;
      if ((swift_isUniquelyReferenced_nonNull_native(v73) & 1) == 0)
      {
        sub_1001C1B9C(0, v16[2] + 1, 1);
        v16 = v73;
      }
      v24 = v16[2];
      v23 = v16[3];
      if (v24 >= v23 >> 1)
      {
        sub_1001C1B9C(v23 > 1, v24 + 1, 1);
        v16 = v73;
      }
      v18 += 2;
      v16[2] = v24 + 1;
      v16[v24 + 4] = v22._rawValue;
      --v15;
    }
    while (v15);
    a4 = v71;
  }
  v25 = objc_msgSend(objc_allocWithZone((Class)NLLanguageRecognizer), "init");
  type metadata accessor for NLLanguage(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v25, "setLanguageConstraints:", isa);

  v27 = String._bridgeToObjectiveC()();
  objc_msgSend(v25, "processString:", v27);

  v68 = NLLanguageRecognizer.languageHypotheses(withMaximum:)(v16[2]);
  v28 = a4[3];
  v29 = a4[4];
  sub_10000A388(a4, v28);
  v30 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v28, v29);
  v31 = a4[3];
  v32 = a4[4];
  sub_10000A388(a4, v31);
  v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 16))(v31, v32);
  v34 = (void *)v33;
  v35 = v70;
  v36 = v70[2];
  if (!v36 || (v37 = v16[2]) == 0)
  {
LABEL_47:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
  v64 = v30;
  v65 = (void *)v33;
  v63 = v25;
  v38 = v70[4];
  v39 = v70[5];
  v69 = v16 + 4;
  swift_bridgeObjectRetain(v39);
  v40 = 0;
  v71 = (_QWORD *)(v37 - 1);
  v72 = v36 - 1;
  v41 = v35 + 7;
  v42 = _swiftEmptyArrayStorage;
  v43 = v67;
  while (1)
  {
    if (!*(_QWORD *)(v43 + 16))
    {
      swift_bridgeObjectRelease();
      goto LABEL_40;
    }
    v44 = (id)v69[v40];
    v45 = sub_10001A6DC(v38, v39);
    if ((v46 & 1) != 0)
    {
      v47 = *(id *)(*(_QWORD *)(v43 + 56) + 8 * v45);
      swift_bridgeObjectRelease();
      v48 = v68;
      if (*(_QWORD *)(v68 + 16))
      {
        v44 = v44;
        v49 = sub_1002C6728();
        if ((v50 & 1) == 0)
        {

LABEL_38:
          v43 = v67;
          goto LABEL_39;
        }
        v51 = *(double *)(*(_QWORD *)(v48 + 56) + 8 * v49);

        if (*(_QWORD *)(v66 + 16) < 2uLL)
        {
          v56 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", 0.0);
        }
        else
        {
          if (v40)
            v52 = v65;
          else
            v52 = v64;
          v56 = v52;
        }
        v57 = v56;
        objc_msgSend(v56, "doubleValue");
        if (v58 < v51)
        {
          v47 = v47;
          if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
            v42 = sub_1002C8344(0, v42[2] + 1, 1, v42);
          v60 = v42[2];
          v59 = v42[3];
          if (v60 >= v59 >> 1)
            v42 = sub_1002C8344((_QWORD *)(v59 > 1), v60 + 1, 1, v42);
          v42[2] = v60 + 1;
          v61 = &v42[2 * v60];
          v61[4] = v40;
          v61[5] = v47;
        }

      }
      else
      {
        v47 = v47;
        if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
          v42 = sub_1002C8344(0, v42[2] + 1, 1, v42);
        v54 = v42[2];
        v53 = v42[3];
        if (v54 >= v53 >> 1)
          v42 = sub_1002C8344((_QWORD *)(v53 > 1), v54 + 1, 1, v42);
        v42[2] = v54 + 1;
        v55 = &v42[2 * v54];
        v55[4] = v40;
        v55[5] = v47;
      }

      goto LABEL_38;
    }

    swift_bridgeObjectRelease();
LABEL_39:
    v35 = v70;
LABEL_40:
    if (v72 == v40)
      goto LABEL_46;
    if (v40 + 1 >= v35[2])
      break;
    if (v71 == (_QWORD *)v40)
    {
LABEL_46:
      v25 = v63;
      v30 = v64;
      v34 = v65;
      goto LABEL_47;
    }
    v38 = *(v41 - 1);
    v39 = *v41;
    v62 = v16[2];
    swift_bridgeObjectRetain(*v41);
    ++v40;
    v41 += 2;
    if (v40 >= v62)
      goto LABEL_49;
  }
  __break(1u);
LABEL_49:
  __break(1u);
}

uint64_t sub_1000C59FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  uint64_t KeyPath;
  __n128 v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  __n128 v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint8_t *v70;
  char v71;
  uint64_t v73;
  char v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint8_t *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v81 = type metadata accessor for String.Encoding(0);
  v4 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v6 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630(&qword_100839880);
  __chkstk_darwin(v7);
  v9 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630(&qword_100839888);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A630(&qword_100839890);
  v85 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A630(&qword_100839898);
  Regex.init(_regexString:version:)(0xD000000000000016, 0x80000001006F5EF0, 1, v17);
  v82 = (uint8_t *)a1;
  v83 = a2;
  v84 = v16;
  Regex.wholeMatch(in:)(a1, a2, v14);
  v18 = v6;
  v80 = v4;
  v19 = v81;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_1000C64BC((uint64_t)v9);
    if (qword_100836C98 != -1)
      swift_once(&qword_100836C98, sub_1000C4C4C);
    v20 = type metadata accessor for Logger(0);
    sub_10001AAA8(v20, (uint64_t)qword_100839868);
    v21 = v83;
    swift_bridgeObjectRetain_n(v83, 2);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = v14;
      v27 = swift_slowAlloc(32, -1);
      v86 = v27;
      *(_DWORD *)v25 = 136315138;
      swift_bridgeObjectRetain(v21);
      v90 = sub_10001A820((uint64_t)v82, v21, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91);
      swift_bridgeObjectRelease_n(v21, 3);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "REMGroceryClassifier.isValidSourceType no result for '%s)'", v25, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v25, -1, -1);

      (*(void (**)(char *, uint64_t))(v85 + 8))(v84, v26);
    }
    else
    {
      swift_bridgeObjectRelease_n(v21, 2);

      (*(void (**)(char *, uint64_t))(v85 + 8))(v84, v14);
    }
LABEL_19:
    v71 = 0;
    return v71 & 1;
  }
  v79 = v14;
  v77 = v11;
  v28 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v29 = v13;
  v28(v13, v9, v10);
  KeyPath = swift_getKeyPath(&unk_1006A72E0);
  v78 = v10;
  Regex.Match.subscript.getter(&v86, KeyPath, v10);
  swift_release(KeyPath);
  v32 = static String._fromSubstring(_:)(v86, v87, v88, v89, v31);
  v34 = v33;
  swift_bridgeObjectRelease();
  v35 = type metadata accessor for JSONDecoder(0);
  v36 = swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  v37 = JSONDecoder.init()(v36);
  v86 = 123;
  v87 = 0xE100000000000000;
  v38._countAndFlagsBits = v32;
  v38._object = v34;
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  v39._countAndFlagsBits = 125;
  v39._object = (void *)0xE100000000000000;
  String.append(_:)(v39);
  v40 = v86;
  v41 = v87;
  static String.Encoding.utf8.getter();
  v42 = String.data(using:allowLossyConversion:)(v18, 0, v40, v41);
  v44 = v43;
  v45 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, __n128))(v80 + 8))(v18, v19, v45);
  if (v44 >> 60 == 15)
  {
    v46 = v83;
    if (qword_100836C98 != -1)
      swift_once(&qword_100836C98, sub_1000C4C4C);
    v47 = type metadata accessor for Logger(0);
    sub_10001AAA8(v47, (uint64_t)qword_100839868);
    swift_bridgeObjectRetain_n(v46, 2);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc(12, -1);
      v52 = swift_slowAlloc(32, -1);
      v86 = v52;
      *(_DWORD *)v51 = 136315138;
      swift_bridgeObjectRetain(v46);
      v90 = sub_10001A820((uint64_t)v82, v46, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91);
      swift_bridgeObjectRelease_n(v46, 3);
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "REMGroceryClassifier.isValidSourceType no data for '%s)'", v51, 0xCu);
      swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v51, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v46, 2);
    }

    swift_release(v37);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v29, v78);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v84, v79);
    goto LABEL_19;
  }
  sub_1002AF0A8((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  v53 = sub_10001A630(&qword_10083F1F0);
  v54 = sub_1000C64FC();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v53, v42, v44, v53, v54);
  v55 = sub_10011E910(v86);
  if (qword_100836C98 != -1)
    swift_once(&qword_100836C98, sub_1000C4C4C);
  v56 = type metadata accessor for Logger(0);
  sub_10001AAA8(v56, (uint64_t)qword_100839868);
  swift_bridgeObjectRetain_n(v55, 2);
  v58 = Logger.logObject.getter(v57);
  v59 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v58, v59))
  {
    v60 = swift_slowAlloc(12, -1);
    v81 = v44;
    v61 = (uint8_t *)v60;
    v62 = swift_slowAlloc(32, -1);
    v83 = v37;
    v63 = v62;
    v86 = v62;
    *(_DWORD *)v61 = 136315138;
    v82 = v61 + 4;
    swift_bridgeObjectRetain(v55);
    v65 = Set.description.getter(v64, &type metadata for String, &protocol witness table for String);
    v66 = v42;
    v68 = v67;
    swift_bridgeObjectRelease();
    v90 = sub_10001A820(v65, v68, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91);
    swift_bridgeObjectRelease_n(v55, 2);
    v42 = v66;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v58, v59, "REMGroceryClassifier.isValidSourceType sourceTypeSet: %s", v61, 0xCu);
    swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
    v69 = v63;
    v37 = v83;
    swift_slowDealloc(v69, -1, -1);
    v70 = v61;
    v44 = v81;
    swift_slowDealloc(v70, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v55, 2);
  }
  v73 = v78;
  if (qword_100836CA0 != -1)
    swift_once(&qword_100836CA0, sub_1000C4CDC);
  sub_1000C4D24(qword_100871C20, v55);
  v75 = v74;
  sub_1000A71B4(v42, v44);
  swift_bridgeObjectRelease();
  swift_release(v37);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v29, v73);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v84, v79);
  v71 = v75 ^ 1;
  return v71 & 1;
}

uint64_t sub_1000C64BC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A630(&qword_100839880);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000C64FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008398A0;
  if (!qword_1008398A0)
  {
    v1 = sub_1000A5A94(&qword_10083F1F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1008398A0);
  }
  return result;
}

uint64_t sub_1000C6560(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000C6568()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  void *v44;
  _QWORD *v45;

  v1 = v0;
  v2 = type metadata accessor for ExtendedTriple(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v35 - v8;
  v10 = type metadata accessor for LanguageView(0, v7);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ViewService(0, v12);
  v15 = (void *)static ViewService.clientService.getter();
  ViewService.languageView.getter();

  if (v0)
    return (uint64_t)v1;
  v16 = LanguageView.inferredLanguageTriples()();
  v39 = 0;
  v37 = v14;
  v38 = v11;
  v18 = v16;
  if ((unint64_t)v16 >> 62)
  {
    if (v16 < 0)
      v34 = v16;
    else
      v34 = v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v16);
    v19 = _CocoaArrayWrapper.endIndex.getter(v34);
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v1 = _swiftEmptyArrayStorage;
  if (!v19)
  {
LABEL_19:
    (*(void (**)(char *, uint64_t))(v38 + 8))(v37, v10);
    swift_bridgeObjectRelease();
    return (uint64_t)v1;
  }
  v45 = _swiftEmptyArrayStorage;
  result = sub_1001C1B44(0, v19 & ~(v19 >> 63), 0);
  if ((v19 & 0x8000000000000000) == 0)
  {
    v36 = v10;
    v1 = v45;
    if ((v18 & 0xC000000000000001) != 0)
    {
      v20 = 0;
      do
      {
        v21 = specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v18);
        v22 = sub_1000C6914(&qword_1008398A8, (uint64_t)&protocol conformance descriptor for ExtendedTriple);
        v23 = sub_1000C6914((unint64_t *)&unk_1008398B0, (uint64_t)&protocol conformance descriptor for ExtendedTriple);
        FetchableRecord<>.init(row:)(v21, v2, v22, v23);
        v45 = v1;
        v25 = v1[2];
        v24 = v1[3];
        if (v25 >= v24 >> 1)
          sub_1001C1B44(v24 > 1, v25 + 1, 1);
        ++v20;
        v43 = v2;
        v44 = &protocol witness table for ExtendedTriple;
        v26 = sub_1000087F0(&v42);
        (*(void (**)(_QWORD *, char *, uint64_t))(v3 + 16))(v26, v9, v2);
        v27 = v45;
        v45[2] = v25 + 1;
        sub_10001BCA8(&v42, (uint64_t)&v27[5 * v25 + 4]);
        (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
        v1 = v45;
      }
      while (v19 != v20);
    }
    else
    {
      v28 = v18 + 32;
      v41 = sub_1000C6914(&qword_1008398A8, (uint64_t)&protocol conformance descriptor for ExtendedTriple);
      v40 = sub_1000C6914((unint64_t *)&unk_1008398B0, (uint64_t)&protocol conformance descriptor for ExtendedTriple);
      do
      {
        v29 = swift_retain();
        FetchableRecord<>.init(row:)(v29, v2, v41, v40);
        v45 = v1;
        v31 = v1[2];
        v30 = v1[3];
        if (v31 >= v30 >> 1)
          sub_1001C1B44(v30 > 1, v31 + 1, 1);
        v43 = v2;
        v44 = &protocol witness table for ExtendedTriple;
        v32 = sub_1000087F0(&v42);
        (*(void (**)(_QWORD *, char *, uint64_t))(v3 + 16))(v32, v5, v2);
        v33 = v45;
        v45[2] = v31 + 1;
        sub_10001BCA8(&v42, (uint64_t)&v33[5 * v31 + 4]);
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        v1 = v45;
        v28 += 8;
        --v19;
      }
      while (v19);
    }
    v10 = v36;
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000C6914(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for ExtendedTriple(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000C6954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008398C0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008398C0);
  if (qword_100837608 != -1)
    swift_once(&qword_100837608, sub_1004A17C8);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_UNKNOWN **static REMCDAssignment.recordTypes()()
{
  return &off_1007DB150;
}

uint64_t static REMCDAssignment.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  id v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t result;

  v7 = a1;
  swift_bridgeObjectRetain(a3);
  v8 = a4;
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v10 = objc_msgSend((id)objc_opt_self(REMCDAssignment), "objectWithRecordID:accountID:context:", v7, v9, v8);

  if (v10)
  {
    result = swift_dynamicCastUnknownClass(v10, v4);
    if (result)
      return result;

  }
  return 0;
}

id static REMCDAssignment.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v8;
  NSString v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t MetatypeMetadata;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = v3;
  v8 = objc_msgSend(a1, "recordID");
  v9 = objc_msgSend(v8, "recordName");

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v11 = v10;
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
  }
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "newObjectWithCKRecordName:context:account:", v9, a3, a2);

  if (v12)
  {
    v13 = objc_msgSend(a2, "ckIdentifier");
    if (v13)
    {
      v14 = v13;
      objc_msgSend(v12, "mergeDataFromRecord:accountID:", a1, v13);

      objc_msgSend(v12, "setCkServerRecord:", a1);
      objc_msgSend(v12, "setInCloud:", 1);
      objc_msgSend(v12, "updateParentReferenceIfNecessary");
    }
    else
    {
      if (qword_100836CA8 != -1)
        swift_once(&qword_100836CA8, sub_1000C6954);
      v15 = type metadata accessor for Logger(0);
      sub_10001AAA8(v15, (uint64_t)qword_1008398C0);
      v16 = a2;
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = swift_slowAlloc(22, -1);
        v20 = swift_slowAlloc(64, -1);
        v33 = v20;
        v34 = v4;
        *(_DWORD *)v19 = 136446466;
        MetatypeMetadata = swift_getMetatypeMetadata(v4);
        v22 = String.init<A>(describing:)(&v34, MetatypeMetadata);
        v24 = v23;
        v34 = sub_10001A820(v22, v23, &v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
        *(_QWORD *)&v25 = swift_bridgeObjectRelease(v24).n128_u64[0];
        *(_WORD *)(v19 + 12) = 2082;
        v26 = objc_msgSend(v16, "remObjectID", v25, v33);
        if (v26)
        {
          v27 = v26;
          v28 = objc_msgSend(v26, "description");

          v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
          v31 = v30;

        }
        else
        {
          v31 = 0xE300000000000000;
          v29 = 7104878;
        }
        v34 = sub_10001A820(v29, v31, &v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);

        swift_bridgeObjectRelease(v31);
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v19, 0x16u);
        swift_arrayDestroy(v20, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v20, -1, -1);
        swift_slowDealloc(v19, -1, -1);

      }
      else
      {

      }
      return 0;
    }
  }
  return v12;
}

Swift::String __swiftcall REMCDList.recordZoneName()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Reminders"));
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::String __swiftcall REMCDAssignment.recordType()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = 0x656D6E6769737341;
  v1 = (void *)0xEA0000000000746ELL;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::Bool __swiftcall REMCDList.shouldMarkAsDeletedInsteadOfDeletingImmediately()()
{
  return 1;
}

Swift::Void __swiftcall REMCDAssignment.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  id v13;
  NSString v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[4];
  __int128 v24;
  char *v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  objc_super v35;

  v3 = v2;
  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v5);
  v27 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v25 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v10);
  v34 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = String._bridgeToObjectiveC()();
  v35.receiver = v3;
  v35.super_class = (Class)REMCDAssignment;
  objc_msgSendSuper2(&v35, "mergeDataFromRecord:accountID:", from.super.isa, v12);

  v13 = -[objc_class recordID](from.super.isa, "recordID");
  v14 = objc_msgSend(v13, "recordName");

  if (!v14)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v17 = v16;
    v14 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v15 = swift_bridgeObjectRelease(v17).n128_u64[0];
  }
  v26 = v7;
  v18 = objc_msgSend(v3, "ckIdentifierFromRecordName:", v14, v15);

  if (!v18)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v21 = v20;
    v18 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v19 = swift_bridgeObjectRelease(v21).n128_u64[0];
  }
  objc_msgSend(v3, "setCkIdentifier:", v18, v19);

  v33 = 0x80000001006F5F50;
  *(_QWORD *)&v22 = 136315394;
  v24 = v22;
  v23[3] = (char *)&type metadata for Any + 8;
  v31 = 0x80000001006F5F10;
  v32 = 0x80000001006F5F30;
  *(_QWORD *)&v22 = 136315138;
  v28 = v22;
  v29 = v3;
  v30 = v8;
  JUMPOUT(0x1000C72CCLL);
}

void sub_1000C72CC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Class isa;
  uint64_t v7;

  v2 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v1 - 136);
  CKRecordKeyValueSetting.subscript.getter(0x64656E6769737341, 0xEC00000065746144, v2, v3, &protocol witness table for Date);
  v5 = *(_QWORD *)(v3 - 8);
  isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v4, 1, v3) != 1)
  {
    v7 = *(_QWORD *)(v1 - 136);
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v3);
  }
  objc_msgSend(v0, "setAssignedDate:", isa);

  JUMPOUT(0x1000C72A8);
}

uint64_t sub_1000C7C5C(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;

  v3 = v2;
  v6 = objc_msgSend(v3, "managedObjectContext");
  if (!v6)
  {
    if (qword_100836CA8 == -1)
    {
LABEL_10:
      v20 = type metadata accessor for Logger(0);
      v21 = sub_10001AAA8(v20, (uint64_t)qword_1008398C0);
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Trying to merge CKRecord to an object without MOC", v24, 2u);
        swift_slowDealloc(v24, -1, -1);
      }

      return 0;
    }
LABEL_22:
    swift_once(&qword_100836CA8, sub_1000C6954);
    goto LABEL_10;
  }
  v7 = v6;
  sub_1000151B0(0, (unint64_t *)&unk_100839910, NSPredicate_ptr);
  v8 = sub_10001A630((uint64_t *)&unk_10083A270);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_1000184F8();
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = a2;
  v10 = swift_bridgeObjectRetain(a2);
  v11 = (void *)NSPredicate.init(format:_:)(0xD000000000000012, 0x80000001006F5F90, v9, v10);
  v12 = sub_1000151B0(0, (unint64_t *)&qword_100839928, off_1007D6718);
  v13 = objc_msgSend((id)swift_getObjCClassFromMetadata(v12), "ic_objectsMatchingPredicate:context:", v11, v7);
  v14 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

  if (!((unint64_t)v15 >> 62))
  {
    if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
LABEL_17:
    swift_bridgeObjectRelease(v15);

    return 0;
  }
  if (v15 < 0)
    v25 = v15;
  else
    v25 = v15 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v15);
  v26 = _CocoaArrayWrapper.endIndex.getter(v25);
  swift_bridgeObjectRelease(v15);
  if (!v26)
    goto LABEL_17;
LABEL_4:
  if ((v15 & 0xC000000000000001) != 0)
  {
    v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v15);
    goto LABEL_7;
  }
  if (!*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_22;
  }
  v16 = *(id *)(v15 + 32);
LABEL_7:
  v17 = v16;
  swift_bridgeObjectRelease(v15);

  v18 = objc_opt_self(REMCDSharee);
  result = swift_dynamicCastObjCClass(v17, v18);
  if (result)
    return result;

  return 0;
}

CKRecord_optional __swiftcall REMCDAssignment.newlyCreatedRecord()()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  Swift::Bool v11;
  objc_class *v12;
  _QWORD v13[6];
  uint64_t v14;
  id v15;
  objc_super v16;
  CKRecord_optional result;

  v1 = v0;
  v14 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v13[1] = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  v6 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v7 = __chkstk_darwin(v6);
  __chkstk_darwin(v7);
  v9 = (char *)v13 - v8;
  v16.receiver = v1;
  v16.super_class = (Class)REMCDAssignment;
  v10 = objc_msgSendSuper2(&v16, "newlyCreatedRecord");
  if (v10)
  {
    v13[4] = 0x80000001006F5F50;
    v13[5] = v2;
    v13[2] = 0x80000001006F5F10;
    v13[3] = 0x80000001006F5F30;
    v15 = v10;
    v13[0] = v9;
    JUMPOUT(0x1000C8190);
  }
  v12 = 0;
  result.value.super.isa = v12;
  result.is_nil = v11;
  return result;
}

void __swiftcall REMCDRecurrenceRule.parentCloud()(REMCDObject_optional *__return_ptr retstr)
{
  void *v1;
  id v2;

  v2 = objc_msgSend(v1, "reminder");
}

Swift::Void __swiftcall REMCDAssignment.fixBrokenReferences()()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  double v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  if (qword_100836CA8 != -1)
    swift_once(&qword_100836CA8, sub_1000C6954);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_1008398C0);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  v5 = &selRef_isConcealed;
  if (!os_log_type_enabled(v3, v4))
  {

    goto LABEL_14;
  }
  v6 = swift_slowAlloc(22, -1);
  v7 = swift_slowAlloc(64, -1);
  v50 = v7;
  *(_DWORD *)v6 = 136446466;
  v8 = objc_msgSend(v2, "remObjectID");
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(v8, "description");

    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

  }
  else
  {
    v13 = 0xE300000000000000;
    v11 = 7104878;
  }
  v49 = sub_10001A820(v11, v13, &v50);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

  *(_QWORD *)&v14 = swift_bridgeObjectRelease(v13).n128_u64[0];
  *(_WORD *)(v6 + 12) = 2082;
  v15 = objc_msgSend(v2, "reminder", v14);
  if (!v15)
    goto LABEL_12;
  v16 = v15;
  v17 = objc_msgSend(v15, "remObjectID");
  if (!v17)
  {

LABEL_12:
    v24 = 0xE300000000000000;
    v5 = &selRef_isConcealed;
    v25 = 7104878;
    goto LABEL_13;
  }
  v18 = v17;
  v19 = objc_msgSend(v17, "description");

  v20 = v4;
  v21 = v7;
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v24 = v23;

  v25 = v22;
  v7 = v21;
  v4 = v20;
  v5 = &selRef_isConcealed;
LABEL_13:
  v49 = sub_10001A820(v25, v24, &v50);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

  swift_bridgeObjectRelease(v24);
  _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fixing broken references for assignment {assignmentID: %{public}s, reminderID: %{public}s}", (uint8_t *)v6, 0x16u);
  swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v7, -1, -1);
  swift_slowDealloc(v6, -1, -1);

LABEL_14:
  v26 = objc_msgSend(v2, v5[453]);
  if (v26)
  {
    v27 = v26;
    if (objc_msgSend(v26, "markedForDeletion")
      && (objc_msgSend(v2, "markedForDeletion") & 1) == 0)
    {
      v28 = v2;
      v29 = v27;
      v30 = v28;
      v31 = v29;
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = swift_slowAlloc(22, -1);
        v48 = swift_slowAlloc(64, -1);
        v50 = v48;
        *(_DWORD *)v34 = 136446466;
        v35 = objc_msgSend(v30, "remObjectID");
        if (v35)
        {
          v36 = v35;
          v37 = objc_msgSend(v35, "description");

          v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
          v40 = v39;

        }
        else
        {
          v40 = 0xE300000000000000;
          v38 = 7104878;
        }
        v49 = sub_10001A820(v38, v40, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

        *(_QWORD *)&v41 = swift_bridgeObjectRelease(v40).n128_u64[0];
        *(_WORD *)(v34 + 12) = 2082;
        v42 = objc_msgSend(v31, "remObjectID", v41);
        if (v42)
        {
          v43 = v42;
          v44 = objc_msgSend(v42, "description");

          v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
          v47 = v46;

        }
        else
        {
          v47 = 0xE300000000000000;
          v45 = 7104878;
        }
        v49 = sub_10001A820(v45, v47, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

        swift_bridgeObjectRelease(v47);
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Reminder is marked for deletion but assignment is not {assignmentID: %{public}s, reminderID: %{public}s}", (uint8_t *)v34, 0x16u);
        swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v48, -1, -1);
        swift_slowDealloc(v34, -1, -1);

      }
      else
      {

      }
      objc_msgSend(v30, "markForDeletion");
    }
    objc_msgSend(v27, "forcePushToCloud");

  }
}

Swift::Void __swiftcall REMCDAssignment.cleanUpAfterLocalObjectMerge()()
{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t ObjectType;
  uint64_t v12;

  if (qword_100836CA8 != -1)
    swift_once(&qword_100836CA8, sub_1000C6954);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_1008398C0);
  v10 = v0;
  v2 = Logger.logObject.getter(v10);
  v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v12 = v5;
    *(_DWORD *)v4 = 136315138;
    ObjectType = swift_getObjectType(v10);
    v6 = sub_10001A630(&qword_1008398E8);
    v7 = String.init<A>(describing:)(&ObjectType, v6);
    v9 = v8;
    ObjectType = sub_10001A820(v7, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v12);

    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);

  }
  else
  {

  }
}

id sub_1000C8F4C(void *a1)
{
  return sub_1000C92F8(a1, (unint64_t *)&qword_10083AE90, off_1007D6708);
}

id sub_1000C8F60(void *a1)
{
  return sub_1000C8F6C(a1, (uint64_t (*)(_QWORD))type metadata accessor for REMCDTemplate);
}

id sub_1000C8F6C(void *a1, uint64_t (*a2)(_QWORD))
{
  void *v2;
  void *v3;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  id v8;
  id v9;
  void *v10;
  void *ObjCClassFromMetadata;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  _QWORD *v25;
  id v26;
  uint64_t v27;
  id v29;
  uint64_t v30;

  v3 = v2;
  v5 = a2(0);
  v6 = objc_msgSend(v3, "managedObjectContext");
  if (!v6)
  {
    if (qword_1008374E8 != -1)
      swift_once(&qword_1008374E8, sub_100438310);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_10001AAA8(v16, (uint64_t)qword_10084AA70);
    v7 = Logger.logObject.getter(v17);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v18, "Trying to merge CKRecord to an object without MOC", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }
    goto LABEL_16;
  }
  v7 = v6;
  if (!a1)
  {
LABEL_16:

    return 0;
  }
  v8 = a1;
  v9 = objc_msgSend(v3, "accountCKIdentifier");
  if (!v9)
  {
    if (qword_1008374E8 != -1)
      swift_once(&qword_1008374E8, sub_100438310);
    v20 = type metadata accessor for Logger(0);
    sub_10001AAA8(v20, (uint64_t)qword_10084AA70);
    v21 = v8;
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v24 = 138543362;
      v26 = objc_msgSend(v21, "recordID");
      v29 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
      *v25 = v26;

      _os_log_impl((void *)&_mh_execute_header, v22, v23, "newOrExistingObject with reference recordID %{public}@ with nil accountCKIdentfiier", v24, 0xCu);
      v27 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v25, 1, v27);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {

    }
    goto LABEL_16;
  }
  v10 = v9;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v5);
  v12 = objc_msgSend(v8, "recordID");
  v13 = objc_msgSend(ObjCClassFromMetadata, "existingCloudObjectForRecordID:accountID:context:", v12, v10, v7);

  if (!v13)
  {
    v14 = objc_msgSend(v8, "recordID");
    v15 = objc_msgSend(v3, "account");
    v13 = objc_msgSend(ObjCClassFromMetadata, "newPlaceholderObjectForRecordID:account:context:", v14, v15, v7);

  }
  return v13;
}

id sub_1000C92E4(void *a1)
{
  return sub_1000C92F8(a1, (unint64_t *)&qword_100839900, off_1007D66E0);
}

id sub_1000C92F8(void *a1, unint64_t *a2, _QWORD *a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  id v10;
  void *v11;
  void *ObjCClassFromMetadata;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _QWORD *v26;
  id v27;
  uint64_t v28;
  id v30;
  uint64_t v31;

  v4 = v3;
  v6 = sub_1000151B0(0, a2, a3);
  v7 = objc_msgSend(v4, "managedObjectContext");
  if (!v7)
  {
    if (qword_1008374E8 != -1)
      swift_once(&qword_1008374E8, sub_100438310);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_10001AAA8(v17, (uint64_t)qword_10084AA70);
    v8 = Logger.logObject.getter(v18);
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v19, "Trying to merge CKRecord to an object without MOC", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }
    goto LABEL_16;
  }
  v8 = v7;
  if (!a1)
  {
LABEL_16:

    return 0;
  }
  v9 = a1;
  v10 = objc_msgSend(v4, "accountCKIdentifier");
  if (!v10)
  {
    if (qword_1008374E8 != -1)
      swift_once(&qword_1008374E8, sub_100438310);
    v21 = type metadata accessor for Logger(0);
    sub_10001AAA8(v21, (uint64_t)qword_10084AA70);
    v22 = v9;
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v25 = 138543362;
      v27 = objc_msgSend(v22, "recordID");
      v30 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
      *v26 = v27;

      _os_log_impl((void *)&_mh_execute_header, v23, v24, "newOrExistingObject with reference recordID %{public}@ with nil accountCKIdentfiier", v25, 0xCu);
      v28 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v26, 1, v28);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {

    }
    goto LABEL_16;
  }
  v11 = v10;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v6);
  v13 = objc_msgSend(v9, "recordID");
  v14 = objc_msgSend(ObjCClassFromMetadata, "existingCloudObjectForRecordID:accountID:context:", v13, v11, v8);

  if (!v14)
  {
    v15 = objc_msgSend(v9, "recordID");
    v16 = objc_msgSend(v4, "account");
    v14 = objc_msgSend(ObjCClassFromMetadata, "newPlaceholderObjectForRecordID:account:context:", v15, v16, v8);

  }
  return v14;
}

id sub_1000C9670(void *a1)
{
  return sub_1000C92F8(a1, (unint64_t *)&unk_100840000, off_1007D6720);
}

id sub_1000C9684(void *a1)
{
  return sub_1000C8F6C(a1, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedReminder);
}

id sub_1000C9690(void *a1)
{
  return sub_1000C92F8(a1, (unint64_t *)&unk_1008398F0, off_1007D6660);
}

void sub_1000C96A4(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a4();
  v8 = v7;
  v9 = sub_10001A820(v6, v7, a3);
  v10 = *a1 + 8;
  v11 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12);
  swift_bridgeObjectRelease(v8);
  *a1 = v10;
}

uint64_t sub_1000C9714(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_1000C97A8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1000C991C(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1000C991C(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_1000C97A8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_1002794BC(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1000C991C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630((uint64_t *)&unk_100839940);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t _sSo15REMCDAssignmentC7reminddE26existingLocalObjectToMerge4withSo11REMCDObjectCSgSo11NSPredicateCSg_tF_0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t ObjectType;
  uint64_t v13;

  if (qword_100836CA8 != -1)
    swift_once(&qword_100836CA8, sub_1000C6954);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_1008398C0);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v13 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType(v2);
    v7 = sub_10001A630(&qword_1008398E8);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    v10 = v9;
    ObjectType = sub_10001A820(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v13);

    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t _sSo15REMCDAssignmentC7reminddE5merge15withLocalObjectSbSo11REMCDObjectC_tF_0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t ObjectType;
  uint64_t v13;

  if (qword_100836CA8 != -1)
    swift_once(&qword_100836CA8, sub_1000C6954);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_1008398C0);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v13 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType(v2);
    v7 = sub_10001A630(&qword_1008398E8);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    v10 = v9;
    ObjectType = sub_10001A820(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v13);

    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t sub_1000C9DE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100839950);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100839950);
  if (qword_100837638 != -1)
    swift_once(&qword_100837638, sub_1004A1870);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872088);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000C9E70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = _s10PredicatesOMa(0);
  v3[8] = v6;
  v3[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000C9EF8, 0, 0);
}

uint64_t sub_1000C9EF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 32);
  if (!objc_msgSend(*(id *)(v1 + 16), "enableGroceryFeedbackSurvey"))
  {
    if (qword_100836CB0 != -1)
      swift_once(&qword_100836CB0, sub_1000C9DE0);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10001AAA8(v8, (uint64_t)qword_100839950);
    v4 = Logger.logObject.getter(v9);
    v5 = static os_log_type_t.default.getter(v4);
    if (!os_log_type_enabled(v4, v5))
      goto LABEL_12;
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    v7 = "RDFeedbackProvider: Survey is not enabled for non-seed builds.";
    goto LABEL_11;
  }
  if ((objc_msgSend(*(id *)(v1 + 16), "hasSeenGroceryFeedbackSurvey") & 1) != 0)
  {
    if (qword_100836CB0 != -1)
      swift_once(&qword_100836CB0, sub_1000C9DE0);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10001AAA8(v2, (uint64_t)qword_100839950);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    if (!os_log_type_enabled(v4, v5))
      goto LABEL_12;
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    v7 = "RDFeedbackProvider: Has seen the feedback survey.";
    goto LABEL_11;
  }
  v12 = *(_QWORD *)(v0 + 64);
  v13 = *(_QWORD **)(v0 + 72);
  v14 = *(void **)(v0 + 16);
  v15 = *(_QWORD *)(v0 + 24);
  *v13 = v14;
  swift_storeEnumTagMultiPayload(v13, v12, 6);
  v16 = v14;
  sub_10000D2C0();
  v18 = v17;
  sub_1000CACA8((uint64_t)v13);
  sub_1004934D8(v15, (uint64_t)v18);
  v20 = *(_QWORD *)(v0 + 48);
  v19 = *(_QWORD *)(v0 + 56);
  v21 = *(_QWORD *)(v0 + 40);
  v22 = REMRemindersListDataView.CountByCompleted.incomplete.getter();

  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  if (v22 >= 3)
  {
    objc_msgSend(*(id *)(v1 + 16), "setHasSeenGroceryFeedbackSurvey:", 1);
    sub_1000CA1F4();
    goto LABEL_13;
  }
  if (qword_100836CB0 != -1)
    swift_once(&qword_100836CB0, sub_1000C9DE0);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001AAA8(v23, (uint64_t)qword_100839950);
  v4 = Logger.logObject.getter(v24);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    v7 = "RDFeedbackProvider: Survey requires 3 or more reminders in the list.";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v4, v5, v7, v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }
LABEL_12:

LABEL_13:
  v10 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CA1F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v23[4];

  v1 = v0;
  v2 = sub_10001A630(&qword_100839A10);
  __chkstk_darwin(v2);
  v4 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  v7 = (_QWORD *)swift_allocObject(&unk_1007E2D58, 40, 7);
  v7[2] = 0;
  v8 = v7 + 2;
  v7[3] = 0;
  v7[4] = v1;
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  v10 = swift_retain();
  if (v9 == 1)
  {
    sub_1000CADB8((uint64_t)v4);
    v11 = 0;
    v12 = 0;
    v13 = 7168;
  }
  else
  {
    v14 = TaskPriority.rawValue.getter(v10);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    v13 = v14 | 0x1C00;
    v15 = *v8;
    if (*v8)
    {
      v16 = v7[3];
      ObjectType = swift_getObjectType();
      swift_unknownObjectRetain(v15);
      v11 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      v12 = v18;
      swift_unknownObjectRelease(v15);
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
  }
  v19 = swift_allocObject(&unk_1007E2D80, 32, 7);
  *(_QWORD *)(v19 + 16) = &unk_100839A20;
  *(_QWORD *)(v19 + 24) = v7;
  if (v12 | v11)
  {
    v23[0] = 0;
    v23[1] = 0;
    v20 = v23;
    v23[2] = v11;
    v23[3] = v12;
  }
  else
  {
    v20 = 0;
  }
  v21 = swift_task_create(v13, v20, &type metadata for () + 1, &unk_100839A30, v19);
  return swift_release(v21);
}

uint64_t sub_1000CA3C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 72) = a4;
  return swift_task_switch(sub_1000CA3D8, 0, 0);
}

uint64_t sub_1000CA3D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  id v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  id v19;
  uint64_t v20;
  id v21;
  _QWORD *v22;
  uint64_t (*v24)(id);
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;

  if (qword_100836CB0 != -1)
    swift_once(&qword_100836CB0, sub_1000C9DE0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001AAA8(v1, (uint64_t)qword_100839950);
  v0[10] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v25 = v6;
    *(_DWORD *)v5 = 136315138;
    v0[8] = sub_10001A820(0xD00000000000001FLL, 0x80000001006F6240, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "RDFeedbackProvider: showFeedback {formIdentifier: %s}", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = objc_allocWithZone((Class)type metadata accessor for FBKSForm(0));
  v8 = (void *)FBKSForm.init(identifier:)(0xD00000000000001FLL, 0x80000001006F6240);
  v0[11] = v8;
  dispatch thunk of FBKSForm.authenticationMethod.setter(1);
  v9 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FBKSLaunchConfiguration(0)), "init");
  v0[12] = v9;
  dispatch thunk of FBKSLaunchConfiguration.promptStyle.setter(2);
  v10 = (void *)objc_opt_self(NSBundle);
  v11 = objc_msgSend(v10, "mainBundle");
  v12._countAndFlagsBits = 0xD000000000000017;
  v26._countAndFlagsBits = 0xD00000000000002ELL;
  v26._object = (void *)0x80000001006F6280;
  v12._object = (void *)0x80000001006F6260;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, (Swift::String_optional)0, (NSBundle)v11, v13, v26);

  dispatch thunk of FBKSLaunchConfiguration.localizedPromptTitle.setter(v14._countAndFlagsBits, v14._object);
  v15 = objc_msgSend(v10, "mainBundle");
  v27._countAndFlagsBits = 0xD000000000000030;
  v16._countAndFlagsBits = 0xD00000000000004DLL;
  v27._object = (void *)0x80000001006F6300;
  v16._object = (void *)0x80000001006F62B0;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)v15, v17, v27);

  dispatch thunk of FBKSLaunchConfiguration.localizedPromptMessage.setter(v18._countAndFlagsBits, v18._object);
  v19 = objc_allocWithZone((Class)type metadata accessor for FBKSDraftLauncher(0));
  v0[13] = FBKSDraftLauncher.init(feedbackForm:)(v8);
  v20 = *((unsigned int *)&async function pointer to dispatch thunk of FBKSDraftLauncher.collectFeedback(launchConfiguration:)
        + 1);
  v24 = (uint64_t (*)(id))((char *)&async function pointer to dispatch thunk of FBKSDraftLauncher.collectFeedback(launchConfiguration:)
                                   + async function pointer to dispatch thunk of FBKSDraftLauncher.collectFeedback(launchConfiguration:));
  v21 = v9;
  v22 = (_QWORD *)swift_task_alloc(v20);
  v0[14] = v22;
  *v22 = v0;
  v22[1] = sub_1000CA724;
  return v24(v9);
}

uint64_t sub_1000CA724()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000CA904;
  }
  else
  {

    v4 = sub_1000CA790;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000CA790(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint8_t *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v12;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(void **)(v1 + 96);
    v5 = *(void **)(v1 + 104);
    v6 = *(void **)(v1 + 88);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v12 = v8;
    *(_DWORD *)v7 = 136315138;
    *(_QWORD *)(v1 + 56) = sub_10001A820(0xD00000000000001FLL, 0x80000001006F6240, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 56, v1 + 64);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "RDFeedbackProvider: Feedback request succeeded. {formIdentifier: %s}", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {
    v10 = *(void **)(v1 + 96);
    v9 = *(void **)(v1 + 104);

  }
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000CA904()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(void **)(v0 + 96);
  v2 = *(void **)(v0 + 104);
  v4 = *(void **)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 72);

  objc_msgSend(*(id *)(v5 + 16), "setHasSeenGroceryFeedbackSurvey:", 0);
  swift_errorRetain(v1);
  v6 = swift_errorRetain(v1);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = *(_QWORD *)(v0 + 120);
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v17 = v11;
    *(_DWORD *)v10 = 136315138;
    swift_getErrorValue(v9, v0 + 40, v0 + 16);
    v12 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v14 = v13;
    *(_QWORD *)(v0 + 48) = sub_10001A820(v12, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56);
    swift_bridgeObjectRelease(v14);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "RDFeedbackProvider: Feedback request failed. {error: %s}", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v9);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 120);
    swift_errorRelease(v15);
    swift_errorRelease(v15);
    swift_errorRelease(v15);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CAAE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CAB1C(a1, a2, a3, (uint64_t)&unk_1007E2DA8, (uint64_t)(&type metadata for () + 1), (uint64_t)&unk_100839A38);
}

uint64_t sub_1000CAB00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CAB1C(a1, a2, a3, (uint64_t)&unk_1007E2DD0, (uint64_t)&type metadata for Int, (uint64_t)&unk_100839A48);
}

uint64_t sub_1000CAB1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD v25[4];

  v12 = type metadata accessor for TaskPriority(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a1, 1, v12) == 1)
  {
    sub_1000CADB8(a1);
    v14 = 7168;
    v15 = *(_QWORD *)(a3 + 16);
    if (v15)
    {
LABEL_3:
      v16 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v15);
      swift_unknownObjectRetain(v15);
      v18 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      v20 = v19;
      swift_unknownObjectRelease(v15);
      goto LABEL_6;
    }
  }
  else
  {
    v21 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
    v14 = v21 | 0x1C00;
    v15 = *(_QWORD *)(a3 + 16);
    if (v15)
      goto LABEL_3;
  }
  v18 = 0;
  v20 = 0;
LABEL_6:
  v22 = swift_allocObject(a4, 32, 7);
  *(_QWORD *)(v22 + 16) = a2;
  *(_QWORD *)(v22 + 24) = a3;
  if (v20 | v18)
  {
    v25[0] = 0;
    v25[1] = 0;
    v23 = v25;
    v25[2] = v18;
    v25[3] = v20;
  }
  else
  {
    v23 = 0;
  }
  return swift_task_create(v14, v23, a5, a6, v22);
}

uint64_t TantorMigrationAPIAsyncClient.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for RDFeedbackProvider()
{
  return objc_opt_self(_TtC7remindd18RDFeedbackProvider);
}

uint64_t sub_1000CACA8(uint64_t a1)
{
  uint64_t v2;

  v2 = _s10PredicatesOMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000CACE4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000CAD10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_100839A1C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000CAD70;
  v3[9] = v2;
  return swift_task_switch(sub_1000CA3D8, 0, 0);
}

uint64_t sub_1000CAD70()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000CADB8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A630(&qword_100839A10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000CADF8(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1000CAE5C;
  return v6(a1);
}

uint64_t sub_1000CAE5C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000CAEA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100839A2C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000CB064;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100839A28 + dword_100839A28))(a1, v4);
}

uint64_t sub_1000CAF18()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000CAF3C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 24) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 32) = v3;
  *v3 = v2;
  v3[1] = sub_1000CAFA4;
  return v5(v2 + 16);
}

uint64_t sub_1000CAFA4()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_QWORD **)(*v0 + 24);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 32));
  *v2 = *(_QWORD *)(v1 + 16);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000CAFF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100839A44);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000CAD70;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100839A40 + dword_100839A40))(a1, v4);
}

uint64_t sub_1000CB070(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_100839A88, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.CustomSmartListSectionsInvocation, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.CustomSmartListSectionsInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CB0AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100839A50);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100839A50);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1000CB13C(void *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  char *v73;
  void *v74;
  uint64_t (*v75)(char *, uint64_t);
  void *v76;
  void *v77;
  id v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(char *, uint64_t);
  _QWORD *v84;
  _QWORD *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t (*v89)(char *, uint64_t);
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  __n128 v101;
  void (*v102)(uint64_t, _QWORD *);
  __n128 v103;
  void *v104;
  char **v105;
  id v106;
  objc_class *v107;
  objc_class *v108;
  objc_class *v109;
  objc_class *v110;
  uint64_t v111;
  _QWORD *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  void (*v118)(char *, uint64_t);
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t (*v125)(char *, uint64_t);
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  id v142;
  void *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  int v150;
  __n128 v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void (*v168)(char *, char *, uint64_t);
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  char v174;
  uint64_t v175;
  char *v176;
  id v177;
  id v178;
  char ManualOrdering;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  void (*v184)(char *, char *, uint64_t);
  char *v185;
  char *v186;
  uint64_t v187;
  char *v188;
  _QWORD *v189;
  uint64_t v190;
  NSObject *v191;
  os_log_type_t v192;
  _BOOL4 v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  void (*v200)(char *, uint64_t);
  __n128 v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  __n128 v205;
  void (*v206)(char *, uint64_t, __n128);
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  __n128 v210;
  char *v211;
  char *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  char *v218;
  char *v219;
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  char *v233;
  char *v234;
  char *v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t *v242;
  char *v243;
  void (*v244)(char *, char *, uint64_t);
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  char *v249;
  char *v250;
  id v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  _QWORD *v258;
  _QWORD *v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *Subtasks;
  uint64_t Configuration;
  uint64_t v268;
  char *v269;
  uint64_t (*v270)(char *, uint64_t);
  _QWORD *v271;
  id v272;
  uint64_t v273;
  uint64_t v274;

  v271 = a3;
  v272 = a1;
  v255 = a2;
  v227 = a5;
  v229 = type metadata accessor for REMRemindersListDataView.CustomSmartListSectionsModel(0);
  v228 = *(_QWORD *)(v229 - 8);
  __chkstk_darwin(v229);
  v234 = (char *)&v216 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v241 = (char *)&v216 - v8;
  v9 = sub_10001A630(&qword_100839A90);
  __chkstk_darwin(v9);
  v232 = (uint64_t)&v216 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v11);
  v240 = (uint64_t)&v216 - v13;
  v239 = type metadata accessor for REMRemindersListDataView.SectionsModel(0, v12);
  v238 = *(_QWORD *)(v239 - 8);
  __chkstk_darwin(v239);
  v231 = (char *)&v216 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v237 = (char *)&v216 - v16;
  v17 = sub_10001A630(&qword_100839A98);
  __chkstk_darwin(v17);
  v226 = (uint64_t)&v216 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v252 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch(0);
  v247 = *(_QWORD *)(v252 - 8);
  __chkstk_darwin(v252);
  v242 = (uint64_t *)((char *)&v216 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v20);
  v248 = (char *)&v216 - v21;
  v246 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v245 = *(_QWORD *)(v246 - 8);
  __chkstk_darwin(v246);
  v236 = (char *)&v216 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v233 = (char *)&v216 - v24;
  __chkstk_darwin(v25);
  v235 = (char *)&v216 - v26;
  __chkstk_darwin(v27);
  v256 = (char *)&v216 - v28;
  v29 = sub_10001A630(&qword_100839AA0);
  __chkstk_darwin(v29);
  v230 = (uint64_t)&v216 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v244 = (void (*)(char *, char *, uint64_t))((char *)&v216 - v32);
  __chkstk_darwin(v33);
  v254 = (uint64_t)&v216 - v34;
  __chkstk_darwin(v35);
  v257 = (uint64_t)&v216 - v36;
  v37 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v262 = *(_QWORD *)(v37 - 8);
  v263 = v37;
  __chkstk_darwin(v37);
  v261 = (char *)&v216 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  Subtasks = (_QWORD *)type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v260 = *(Subtasks - 1);
  __chkstk_darwin(Subtasks);
  v253 = (char *)&v216 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v269 = (char *)&v216 - v41;
  v42 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v264 = *(_QWORD *)(v42 - 8);
  v265 = v42;
  __chkstk_darwin(v42);
  v243 = (char *)&v216 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  v250 = (char *)&v216 - v45;
  __chkstk_darwin(v46);
  v249 = (char *)&v216 - v47;
  __chkstk_darwin(v48);
  v259 = (uint64_t *)((char *)&v216 - v49);
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v258 = *(_QWORD **)(Configuration - 8);
  __chkstk_darwin(Configuration);
  v51 = (char *)&v216 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v52);
  v54 = (char *)&v216 - v53;
  __chkstk_darwin(v55);
  v57 = (char *)&v216 - v56;
  __chkstk_darwin(v58);
  v60 = (char *)&v216 - v59;
  __chkstk_darwin(v61);
  v63 = (char *)&v216 - v62;
  __chkstk_darwin(v64);
  v66 = (char *)&v216 - v65;
  __chkstk_darwin(v67);
  v69 = (char *)&v216 - v68;
  v71 = __chkstk_darwin(v70);
  v73 = (char *)&v216 - v72;
  v268 = a4;
  v74 = (void *)REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters.smartList.getter(v71);
  v75 = v270;
  sub_10050B244(v272, v271, v74);
  v270 = v75;
  if (v75)
  {

    return;
  }
  v222 = v73;
  v223 = v69;
  v224 = v66;
  v221 = v63;
  v219 = v60;
  v220 = v57;
  v217 = v54;
  v218 = v51;
  v77 = v76;

  v78 = objc_msgSend(v77, "accountID");
  v79 = objc_msgSend(v272, "persistentStoreOfAccountWithAccountID:", v78);

  if (v79)
  {
    v81 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v82 = swift_allocObject(v81, 40, 7);
    *(_OWORD *)(v82 + 16) = xmmword_1006A7330;
    *(_QWORD *)(v82 + 32) = v79;
    v273 = v82;
    v80 = specialized Array._endMutation()(v82);
    v225 = v273;
  }
  else
  {
    v225 = 0;
  }
  v83 = v270;
  v84 = v258;
  v85 = v259;
  v86 = v223;
  v87 = v222;
  v88 = REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters.configuration.getter(v80);
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v88);
  v89 = (uint64_t (*)(char *, uint64_t))v84[1];
  v90 = v87;
  v91 = Configuration;
  v92 = v89(v90, Configuration);
  v93 = REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters.configuration.getter(v92);
  REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter(v93);
  v94 = v89(v86, v91);
  v95 = v224;
  v96 = REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters.configuration.getter(v94);
  v97 = v261;
  REMRemindersListDataView.FetchConfiguration.sortingStyle.getter(v96);
  v98 = (uint64_t)v97;
  v99 = (uint64_t)v269;
  v89(v95, v91);
  sub_100507F38(v77, v272, (uint64_t)v85, v99, v98);
  if (v83)
  {

    v101 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, __n128))(v262 + 8))(v98, v263, v101);
    (*(void (**)(uint64_t, _QWORD *))(v260 + 8))(v99, Subtasks);
    (*(void (**)(_QWORD *, uint64_t))(v264 + 8))(v85, v265);
    return;
  }
  v270 = v89;
  v258 = v77;
  v259 = v100;
  (*(void (**)(uint64_t, uint64_t))(v262 + 8))(v98, v263);
  v102 = *(void (**)(uint64_t, _QWORD *))(v260 + 8);
  v102(v99, Subtasks);
  v269 = *(char **)(v264 + 8);
  ((void (*)(_QWORD *, uint64_t))v269)(v85, v265);
  v104 = (void *)REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters.smartList.getter(v103);
  v105 = &selRef_isConcealed;
  v106 = objc_msgSend(v104, "objectID");

  if (qword_100836F48 != -1)
    swift_once(&qword_100836F48, sub_1001BB6F0);
  v107 = (objc_class *)qword_100871D00;
  sub_1001BB810();
  v109 = v108;
  v110 = (objc_class *)sub_1001BBCA0();
  v111 = sub_1001BBE78((uint64_t)v106, 1, (uint64_t)v272, v107, v109, v110);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v112 = (_QWORD *)sub_1001DFCF4(v111);
  swift_bridgeObjectRelease();
  v263 = sub_1001327A0(v112, (uint64_t)v259);
  swift_bridgeObjectRelease();
  v113 = v221;
  v115 = REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters.configuration.getter(v114);
  v116 = v113;
  LOBYTE(v113) = REMRemindersListDataView.FetchConfiguration.countCompleted.getter(v115);
  v117 = Configuration;
  v118 = (void (*)(char *, uint64_t))v270;
  v119 = v270(v116, Configuration);
  if ((v113 & 1) == 0)
    goto LABEL_13;
  v120 = REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters.configuration.getter(v119);
  v121 = v249;
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v120);
  v118(v116, v117);
  v122 = v265;
  v123 = v250;
  (*(void (**)(char *, _QWORD, uint64_t))(v264 + 104))(v250, enum case for REMRemindersListDataView.ShowCompleted.on(_:), v265);
  LODWORD(v264) = static REMRemindersListDataView.ShowCompleted.== infix(_:_:)(v121, v123);
  v124 = v123;
  v105 = &selRef_isConcealed;
  v125 = (uint64_t (*)(char *, uint64_t))v269;
  ((void (*)(char *, uint64_t))v269)(v124, v122);
  v119 = v125(v121, v122);
  if ((v264 & 1) != 0)
  {
    swift_bridgeObjectRetain(v259);
    v126 = v257;
    REMRemindersListDataView.CountByCompleted.init(reminders:)(v127);
    v128 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v128 - 8) + 56))(v126, 0, 1, v128);
    v129 = (uint64_t)v256;
    v130 = (uint64_t)v272;
  }
  else
  {
LABEL_13:
    v131 = v219;
    v132 = REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters.configuration.getter(v119);
    v133 = REMRemindersListDataView.FetchConfiguration.countCompleted.getter(v132);
    v134 = ((uint64_t (*)(char *, uint64_t))v118)(v131, v117);
    v135 = v220;
    v136 = REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters.configuration.getter(v134);
    v137 = (uint64_t)v253;
    REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter(v136);
    v118(v135, v117);
    v138 = v254;
    v139 = (uint64_t)v272;
    sub_1005085CC(v272, v133 & 1, v137, v258, v254);
    v141 = v256;
    v140 = v257;
    v102(v137, Subtasks);
    sub_1000A5CA8(v138, v140, &qword_100839AA0);
    v129 = (uint64_t)v141;
    v130 = v139;
  }
  v142 = objc_msgSend(v251, "fetchResultTokenToDiffAgainst");
  sub_100493C24(v142, v130, v129);
  v143 = v271;
  v144 = v252;

  v145 = v217;
  v147 = REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters.configuration.getter(v146);
  REMRemindersListDataView.FetchConfiguration.remindersPrefetch.getter(v147);
  v270(v145, Configuration);
  v148 = v247;
  v149 = v242;
  (*(void (**)(void))(v247 + 16))();
  v150 = (*(uint64_t (**)(uint64_t *, uint64_t))(v148 + 88))(v149, v144);
  if (v150 == enum case for REMRemindersListDataView.RemindersPrefetch.initial(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v148 + 96))(v149, v144);
    v152 = (_QWORD *)*v149;
    v153 = v263;
    swift_bridgeObjectRetain(v263);
    v155 = Array<A>.reminders.getter(v154);
    v156 = v130;
    v157 = v153;
    Subtasks = sub_10049BB18((uint64_t)v152, v155, v156, v143, 0);
    swift_bridgeObjectRelease();
    v271 = _swiftEmptyArrayStorage;
LABEL_20:
    v167 = (uint64_t)v243;
    v151 = swift_bridgeObjectRelease();
    v168 = v244;
    v148 = v247;
    v169 = v218;
    goto LABEL_21;
  }
  if (v150 == enum case for REMRemindersListDataView.RemindersPrefetch.updatedInserted(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v148 + 96))(v149, v144);
    v158 = *v149;
    v159 = v263;
    swift_bridgeObjectRetain(v263);
    v160 = v130;
    v157 = v159;
    Subtasks = sub_10049C4C8(v158, v129, v160, v143, 0);
    v271 = _swiftEmptyArrayStorage;
    goto LABEL_20;
  }
  if (v150 == enum case for REMRemindersListDataView.RemindersPrefetch.initialAndDateRange(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v148 + 96))(v149, v144);
    Subtasks = (_QWORD *)*v149;
    v161 = (uint64_t)v149 + *(int *)(sub_10001A630(&qword_100839AA8) + 48);
    v162 = v226;
    sub_1000A5CA8(v161, v226, &qword_100839A98);
    v163 = v263;
    swift_bridgeObjectRetain(v263);
    v165 = Array<A>.reminders.getter(v164);
    Subtasks = sub_10049BB18((uint64_t)Subtasks, v165, v130, v143, 0);
    v166 = v130;
    v157 = v163;
    v271 = sub_10049CB18(v162, v165, v166, v143, 0);
    swift_bridgeObjectRelease();
    sub_10000882C(v162, &qword_100839A98);
    goto LABEL_20;
  }
  v167 = (uint64_t)v243;
  v169 = v218;
  if (v150 != enum case for REMRemindersListDataView.RemindersPrefetch.none(_:))
  {
    _diagnoseUnexpectedEnumCase<A>(type:)(v144, v144);
    __break(1u);
    return;
  }
  v271 = _swiftEmptyArrayStorage;
  Subtasks = _swiftEmptyArrayStorage;
  v168 = v244;
  v157 = v263;
LABEL_21:
  (*(void (**)(char *, uint64_t, __n128))(v148 + 8))(v248, v144, v151);
  v170 = v257;
  v171 = sub_100008868(v257, (uint64_t)v168, &qword_100839AA0);
  v172 = REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters.configuration.getter(v171);
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v172);
  v270(v169, Configuration);
  v173 = v258;
  v174 = sub_100508A14(v272, v258, v168, v167, v259);
  v270 = 0;
  ((void (*)(uint64_t, uint64_t))v269)(v167, v265);
  sub_10000882C((uint64_t)v168, &qword_100839AA0);
  v175 = v230;
  sub_100008868(v170, v230, &qword_100839AA0);
  v176 = v237;
  REMRemindersListDataView.SectionsModel.init(sections:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)(v157, v175, v174 & 1, Subtasks, v271);
  v177 = objc_msgSend(v173, v105[247]);
  v178 = objc_msgSend(v173, "accountID");
  ManualOrdering = REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters.shouldFetchManualOrderingID.getter();
  v180 = v240;
  sub_100509454(v177, v178, v272, ManualOrdering & 1, v240);

  v181 = v231;
  (*(void (**)(char *, char *, uint64_t))(v238 + 16))(v231, v176, v239);
  sub_100008868(v180, v232, &qword_100839A90);
  v272 = v173;
  REMRemindersListDataView.CustomSmartListSectionsModel.init(sectionsModel:smartList:manualOrderingID:)(v181);
  if (qword_100836CB8 != -1)
    swift_once(&qword_100836CB8, sub_1000CB0AC);
  v182 = type metadata accessor for Logger(0);
  sub_10001AAA8(v182, (uint64_t)qword_100839A50);
  v183 = v245;
  v184 = *(void (**)(char *, char *, uint64_t))(v245 + 16);
  v185 = v235;
  v186 = v256;
  v187 = v246;
  v184(v235, v256, v246);
  v188 = v233;
  v271 = v184;
  v184(v233, v186, v187);
  v189 = v259;
  swift_bridgeObjectRetain(v259);
  v191 = Logger.logObject.getter(v190);
  v192 = static os_log_type_t.default.getter(v191);
  v193 = os_log_type_enabled(v191, v192);
  v194 = v236;
  if (v193)
  {
    v195 = swift_slowAlloc(32, -1);
    *(_DWORD *)v195 = 134218496;
    v196 = v189[2];
    swift_bridgeObjectRelease();
    v273 = v196;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v273, &v274);
    swift_bridgeObjectRelease();
    *(_WORD *)(v195 + 12) = 2048;
    v198 = REMRemindersListDataView.Diff.updatedReminderObjectIDs.getter(v197);
    if ((v198 & 0xC000000000000001) != 0)
    {
      if (v198 >= 0)
        v198 &= 0xFFFFFFFFFFFFFF8uLL;
      v199 = __CocoaSet.count.getter(v198);
    }
    else
    {
      v199 = *(_QWORD *)(v198 + 16);
    }
    v205 = swift_bridgeObjectRelease();
    v206 = *(void (**)(char *, uint64_t, __n128))(v245 + 8);
    v206(v235, v187, v205);
    v273 = v199;
    v207 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v273, &v274);
    *(_WORD *)(v195 + 22) = 2048;
    v208 = REMRemindersListDataView.Diff.insertedReminderObjectIDs.getter(v207);
    if ((v208 & 0xC000000000000001) != 0)
    {
      if (v208 >= 0)
        v208 &= 0xFFFFFFFFFFFFFF8uLL;
      v209 = __CocoaSet.count.getter(v208);
    }
    else
    {
      v209 = *(_QWORD *)(v208 + 16);
    }
    v210 = swift_bridgeObjectRelease();
    v206(v188, v187, v210);
    v273 = v209;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v273, &v274);
    _os_log_impl((void *)&_mh_execute_header, v191, v192, "reminders %ld updated %ld inserted %ld", (uint8_t *)v195, 0x20u);
    swift_slowDealloc(v195, -1, -1);

    v202 = v229;
    v203 = v228;
    v204 = v187;
    v194 = v236;
    v269 = (char *)v206;
  }
  else
  {
    v200 = *(void (**)(char *, uint64_t))(v183 + 8);
    v200(v188, v187);
    v269 = (char *)v200;
    v200(v185, v187);

    v201 = swift_bridgeObjectRelease_n(v189, 2);
    v202 = v229;
    v203 = v228;
    v204 = v187;
  }
  v211 = v234;
  v212 = v241;
  (*(void (**)(char *, char *, uint64_t, __n128))(v203 + 16))(v234, v241, v202, v201);
  v213 = v256;
  ((void (*)(char *, char *, uint64_t))v271)(v194, v256, v204);
  v214 = sub_10009FC50(&qword_100839AB0, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.CustomSmartListSectionsModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.CustomSmartListSectionsModel);
  v215 = sub_10009FC50(&qword_100839AB8, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.CustomSmartListSectionsModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.CustomSmartListSectionsModel);
  REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)(v211, v194, v202, v214, v215);

  (*(void (**)(char *, uint64_t))(v203 + 8))(v212, v202);
  sub_10000882C(v240, &qword_100839A90);
  (*(void (**)(char *, uint64_t))(v238 + 8))(v237, v239);
  ((void (*)(char *, uint64_t))v269)(v213, v246);
  sub_10000882C(v257, &qword_100839AA0);
}

Swift::Int PermanentlyHideError.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void PermanentlyHideError.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_1000CC60C(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_1000CC654(unint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t inited;
  uint64_t v42;
  id v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  char *v50;
  uint64_t v51;
  id v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79[128];
  _QWORD *v80;

  v3 = v2;
  v70 = a1;
  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v4);
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for Date(0);
  v76 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for UUID(0);
  v77 = *(_QWORD *)(v78 - 8);
  v9 = __chkstk_darwin(v78);
  v66 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v65 = (char *)&v62 - v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v62 - v13;
  v69 = type metadata accessor for REMJSONType(0);
  v68 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = v1;
  v17 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd20RDDueDateDeltaAlerts_remObjects);
  if ((unint64_t)v17 >> 62)
  {
    if (v17 < 0)
      v37 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd20RDDueDateDeltaAlerts_remObjects);
    else
      v37 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v17);
    v18 = _CocoaArrayWrapper.endIndex.getter(v37);
    if (v18)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease(v17);
    v36 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v17);
  if (!v18)
    goto LABEL_17;
LABEL_3:
  v80 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v18);
  if (v18 < 0)
  {
    __break(1u);
    return;
  }
  v63 = v3;
  v64 = v16;
  v19 = 0;
  v71 = v17 & 0xC000000000000001;
  v74 = v8;
  v73 = v17;
  v72 = v18;
  do
  {
    if (v71)
      v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v17);
    else
      v30 = *(id *)(v17 + 8 * v19 + 32);
    v31 = v30;
    v32 = objc_msgSend(v30, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v32);

    v33 = objc_msgSend(v31, "dueDateDelta");
    v34 = objc_msgSend(v31, "creationDate");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v34);

    v35 = objc_msgSend(v31, "acknowledgedDate");
    if (v35)
    {
      v20 = v35;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v35);

      v21 = 0;
    }
    else
    {
      v21 = 1;
    }
    v22 = v76;
    v23 = v75;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v76 + 56))(v6, v21, 1, v75);
    ++v19;
    v24 = objc_msgSend(v31, "minimumSupportedAppVersion");

    v25 = type metadata accessor for RDDueDateDeltaAlert(0);
    v26 = swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
    (*(void (**)(uint64_t, char *, uint64_t))(v77 + 32))(v26 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_identifier, v14, v78);
    *(_QWORD *)(v26 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_dueDateDelta) = v33;
    (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v26 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_creationDate, v74, v23);
    v27 = sub_1000CDA74((uint64_t)v6, v26 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_acknowledgedDate);
    *(_QWORD *)(v26 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_minimumSupportedAppVersion) = v24;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v27);
    v28 = v80[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v28);
    v29 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v26);
    specialized ContiguousArray._endMutation()(v29);
    v17 = v73;
  }
  while (v72 != v19);
  v36 = v80;
  swift_bridgeObjectRelease(v73);
  v16 = v64;
  v3 = v63;
LABEL_18:
  v38 = type metadata accessor for RDDueDateDeltaAlert(0);
  v39 = sub_10009FC50(&qword_100839B20, type metadata accessor for RDDueDateDeltaAlert, (uint64_t)&unk_1006C3134);
  Array<A>.toJSON()(v36, v38, v39);
  swift_bridgeObjectRelease(v36);
  if (!v3)
  {
    v40 = sub_10001A630((uint64_t *)&unk_10083A280);
    inited = swift_initStackObject(v40, v79);
    *(_OWORD *)(inited + 16) = xmmword_1006A5130;
    *(_QWORD *)(inited + 32) = 0xD000000000000012;
    *(_QWORD *)(inited + 40) = 0x80000001006F47A0;
    v42 = v67;
    v43 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v67
                                                                + OBJC_IVAR____TtC7remindd20RDDueDateDeltaAlerts_reminderID), "uuid"));
    v44 = v65;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v43);

    v46 = UUID.uuidString.getter(v45);
    v48 = v47;
    v49 = *(void (**)(char *, uint64_t))(v77 + 8);
    v50 = v44;
    v51 = v78;
    v49(v50, v78);
    *(_QWORD *)(inited + 48) = v46;
    *(_QWORD *)(inited + 56) = v48;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 80) = 0xD000000000000011;
    *(_QWORD *)(inited + 88) = 0x80000001006F6380;
    v52 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v42
                                                                + OBJC_IVAR____TtC7remindd20RDDueDateDeltaAlerts_accountID), "uuid"));
    v53 = v66;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v52);

    v55 = UUID.uuidString.getter(v54);
    v57 = v56;
    v58 = ((uint64_t (*)(char *, uint64_t))v49)(v53, v51);
    *(_QWORD *)(inited + 96) = v55;
    *(_QWORD *)(inited + 104) = v57;
    *(_QWORD *)(inited + 120) = &type metadata for String;
    *(_QWORD *)(inited + 128) = 0xD000000000000012;
    *(_QWORD *)(inited + 136) = 0x80000001006F63A0;
    REMJSONType.associatedValueAsAny.getter(v58);
    *(_QWORD *)(inited + 176) = 0xD000000000000017;
    *(_QWORD *)(inited + 184) = 0x80000001006F4060;
    v59 = kREMSupportedVersionFor2023;
    *(_QWORD *)(inited + 216) = &type metadata for Int;
    *(_QWORD *)(inited + 192) = v59;
    v60 = sub_10016E7E4(inited);
    v61 = v68;
    (*(void (**)(char *, uint64_t))(v68 + 8))(v16, v69);
    *v70 = v60;
    (*(void (**)(void))(v61 + 104))();
  }
}

id RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RDDueDateDeltaAlerts()
{
  return objc_opt_self(_TtC7remindd20RDDueDateDeltaAlerts);
}

void sub_1000CCDC8(unint64_t *a1@<X8>)
{
  sub_1000CC654(a1);
}

uint64_t sub_1000CCDE8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1000CD330(a1);
  if (!v2)
    *a2 = result;
  return result;
}

_QWORD *sub_1000CCE10(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;
  NSDate v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSUUID v28;
  uint64_t v29;
  NSDate v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  _QWORD *v48;

  v4 = v3;
  v38 = a2;
  v39 = a3;
  v6 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v6);
  v8 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v47 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v46 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v45 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_17;
  v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = _swiftEmptyArrayStorage;
    if (!v14)
      break;
    v48 = _swiftEmptyArrayStorage;
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v14);
    if (v14 < 0)
    {
      __break(1u);
      return result;
    }
    v44 = v10;
    v36 = v8;
    v37 = a1;
    v8 = 0;
    v32 = v4;
    v33 = a1 & 0xC000000000000001;
    v34 = v14;
    v35 = v12;
    while (v14 != v8)
    {
      if (v33)
      {
        v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a1);
      }
      else
      {
        v10 = *(_QWORD *)(a1 + 8 * v8 + 32);
        swift_retain();
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v45, v10 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_identifier, v12);
      v24 = *(void **)(v10 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_dueDateDelta);
      v25 = v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v47, v10 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_creationDate, v9);
      v26 = v36;
      sub_1000CDA2C(v10 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_acknowledgedDate, v36);
      v40 = *(id *)(v10 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_minimumSupportedAppVersion);
      v43 = v38;
      v42 = v39;
      v41 = v24;
      v27 = v9;
      v28.super.isa = UUID._bridgeToObjectiveC()().super.isa;
      v29 = v25;
      v30.super.isa = Date._bridgeToObjectiveC()().super.isa;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v26, 1, v27) == 1)
      {
        v16.super.isa = 0;
      }
      else
      {
        v16.super.isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v26, v27);
      }
      v17 = v27;
      ++v8;
      v18 = objc_allocWithZone((Class)REMDueDateDeltaAlert);
      v20 = v42;
      v19 = v43;
      v21 = v41;
      v40 = objc_msgSend(v18, "initWithIdentifier:reminderID:accountID:dueDateDelta:creationDate:acknowledgedDate:minimumSupportedAppVersion:", v28.super.isa, v43, v42, v41, v30.super.isa, v16.super.isa, v40);

      (*(void (**)(char *, uint64_t))(v44 + 8))(v47, v17);
      v9 = v17;
      v12 = v35;
      (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v35);
      swift_release(v10);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
      v4 = v48[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v4);
      v23 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, v40);
      specialized ContiguousArray._endMutation()(v23);
      v14 = v34;
      a1 = v37;
      if (v34 == v8)
        return v48;
    }
    __break(1u);
LABEL_17:
    if (a1 < 0)
      v31 = a1;
    else
      v31 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v14 = _CocoaArrayWrapper.endIndex.getter(v31);
    swift_bridgeObjectRelease(a1);
  }
  return result;
}

void sub_1000CD1AC(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  objc_class *v5;
  char *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  objc_super v12;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v9 = _CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease();
    if (v9)
      goto LABEL_3;
LABEL_11:
    v10 = sub_1000CDABC();
    v11 = swift_allocError(&type metadata for RDDueDateDeltaAlerts.ValidationError, v10, 0, 0);
    swift_willThrow(v11);
    return;
  }
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_11;
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain(a1);
    v2 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v2 = *(id *)(a1 + 32);
LABEL_6:
    v3 = objc_msgSend(v2, "reminderID");
    v4 = objc_msgSend(v2, "accountID");
    v5 = (objc_class *)type metadata accessor for RDDueDateDeltaAlerts();
    v6 = (char *)objc_allocWithZone(v5);
    *(_QWORD *)&v6[OBJC_IVAR____TtC7remindd20RDDueDateDeltaAlerts_reminderID] = v3;
    *(_QWORD *)&v6[OBJC_IVAR____TtC7remindd20RDDueDateDeltaAlerts_accountID] = v4;
    *(_QWORD *)&v6[OBJC_IVAR____TtC7remindd20RDDueDateDeltaAlerts_remObjects] = a1;
    v12.receiver = v6;
    v12.super_class = v5;
    *(_QWORD *)&v7 = swift_bridgeObjectRetain(a1).n128_u64[0];
    objc_msgSendSuper2(&v12, "init", v7);

    return;
  }
  __break(1u);
}

uint64_t sub_1000CD330(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  void *v49;
  Class isa;
  id v51;
  void *v52;
  Class v53;
  id v54;
  objc_class *v55;
  char *v56;
  id v57;
  id v58;
  char *v59;
  _QWORD *v60;
  void (*v61)(char *, uint64_t);
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  objc_super v73;
  uint64_t v74;

  v2 = sub_10001A630(&qword_100839B00);
  v63 = *(_QWORD *)(v2 - 8);
  v64 = v2;
  __chkstk_darwin(v2);
  v62 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A630(&qword_100839B08);
  v66 = *(_QWORD *)(v4 - 8);
  v67 = v4;
  __chkstk_darwin(v4);
  v65 = (uint64_t *)((char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_10001A630(&qword_100839B10);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v69 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v62 - v10;
  v12 = type metadata accessor for UUID(0);
  v70 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v71 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v62 - v15;
  v17 = type metadata accessor for REMJSONType(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char **)((char *)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v18 + 16))(v20, a1, v17);
  v21 = (*(uint64_t (**)(_QWORD *, uint64_t))(v18 + 88))(v20, v17);
  if (v21 == enum case for REMJSONType.jsonObject(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v18 + 96))(v20, v17);
    v22 = *v20;
    v23 = enum case for Dictionary<>.DeserializableValueType.uuid<A, B><A1>(_:);
    v24 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 104);
    v24(v11, enum case for Dictionary<>.DeserializableValueType.uuid<A, B><A1>(_:), v6);
    v68 = v22;
    v25 = v72;
    Dictionary<>.deserializeRequired<A>(key:valueType:)(0xD000000000000012, 0x80000001006F47A0, v11, v22, v12);
    v26 = *(void (**)(char *, uint64_t))(v7 + 8);
    v26(v11, v6);
    if (v25)
    {
      swift_bridgeObjectRelease(v68);
    }
    else
    {
      v31 = v69;
      v24(v69, v23, v6);
      v32 = v68;
      Dictionary<>.deserializeRequired<A>(key:valueType:)(0xD000000000000011, 0x80000001006F6380, v31, v68, v12);
      v26(v31, v6);
      v33 = type metadata accessor for RDDueDateDeltaAlert(0);
      v34 = sub_10009FC50(&qword_100839B20, type metadata accessor for RDDueDateDeltaAlert, (uint64_t)&unk_1006C3134);
      v36 = v65;
      v35 = v66;
      *v65 = v33;
      v36[1] = v34;
      v37 = v67;
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v35 + 104))(v36, enum case for Dictionary<>.DeserializableValueType.jsonArray<A, B><A1>(_:), v67);
      v38 = sub_10001A630(&qword_100839B28);
      Dictionary<>.deserializeRequired<A>(key:valueType:)(0xD000000000000012, 0x80000001006F63A0, v36, v32, v38);
      v39 = v16;
      (*(void (**)(uint64_t *, uint64_t))(v35 + 8))(v36, v37);
      v40 = v74;
      v42 = v62;
      v41 = v63;
      v43 = v64;
      (*(void (**)(char *, _QWORD, uint64_t))(v63 + 104))(v62, enum case for Dictionary<>.DeserializableValueType.integer<A, B><A1>(_:), v64);
      Dictionary<>.deserializeRequired<A>(key:valueType:)(0xD000000000000017, 0x80000001006F4060, v42, v68, &type metadata for Int);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
      swift_bridgeObjectRelease(v68);
      v44 = v74;
      if ((rem_isUnsupportedVersionByRuntime(v74) & 1) != 0)
      {
        swift_bridgeObjectRelease(v40);
        v45 = type metadata accessor for REMJSONDeserializationError(0);
        v46 = sub_10009FC50((unint64_t *)&qword_100839B18, (uint64_t (*)(uint64_t))&type metadata accessor for REMJSONDeserializationError, (uint64_t)&protocol conformance descriptor for REMJSONDeserializationError);
        swift_allocError(v45, v46, 0, 0);
        *v47 = v44;
        v48 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v45 - 8) + 104))(v47, enum case for REMJSONDeserializationError.notSupported(_:), v45);
        swift_willThrow(v48);
        v11 = *(char **)(v70 + 8);
        ((void (*)(char *, uint64_t))v11)(v71, v12);
        ((void (*)(char *, uint64_t))v11)(v16, v12);
      }
      else
      {
        v49 = (void *)objc_opt_self(REMReminder);
        isa = UUID._bridgeToObjectiveC()().super.isa;
        v51 = objc_msgSend(v49, "objectIDWithUUID:", isa);

        v52 = (void *)objc_opt_self(REMAccount);
        v53 = UUID._bridgeToObjectiveC()().super.isa;
        v54 = objc_msgSend(v52, "objectIDWithUUID:", v53);

        v55 = (objc_class *)type metadata accessor for RDDueDateDeltaAlerts();
        v56 = (char *)objc_allocWithZone(v55);
        *(_QWORD *)&v56[OBJC_IVAR____TtC7remindd20RDDueDateDeltaAlerts_reminderID] = v51;
        *(_QWORD *)&v56[OBJC_IVAR____TtC7remindd20RDDueDateDeltaAlerts_accountID] = v54;
        v57 = v51;
        v58 = v54;
        v59 = v56;
        v60 = sub_1000CCE10(v40, v57, v58);
        swift_bridgeObjectRelease(v40);
        *(_QWORD *)&v59[OBJC_IVAR____TtC7remindd20RDDueDateDeltaAlerts_remObjects] = v60;

        v73.receiver = v59;
        v73.super_class = v55;
        v11 = (char *)objc_msgSendSuper2(&v73, "init");

        v61 = *(void (**)(char *, uint64_t))(v70 + 8);
        v61(v71, v12);
        v61(v39, v12);
      }
    }
    return (uint64_t)v11;
  }
  if (v21 == enum case for REMJSONType.jsonArray(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v18 + 96))(v20, v17);
    swift_bridgeObjectRelease(*v20);
    v11 = (char *)type metadata accessor for REMJSONDeserializationError(0);
    v27 = sub_10009FC50((unint64_t *)&qword_100839B18, (uint64_t (*)(uint64_t))&type metadata accessor for REMJSONDeserializationError, (uint64_t)&protocol conformance descriptor for REMJSONDeserializationError);
    swift_allocError(v11, v27, 0, 0);
    v29 = (*(uint64_t (**)(uint64_t, _QWORD, char *))(*((_QWORD *)v11 - 1) + 104))(v28, enum case for REMJSONDeserializationError.invalidData(_:), v11);
    swift_willThrow(v29);
    return (uint64_t)v11;
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v17, v17);
  __break(1u);
  return result;
}

uint64_t sub_1000CDA2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000CDA74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000CDABC()
{
  unint64_t result;

  result = qword_100839B30;
  if (!qword_100839B30)
  {
    result = swift_getWitnessTable(&unk_1006A7440, &type metadata for RDDueDateDeltaAlerts.ValidationError);
    atomic_store(result, (unint64_t *)&qword_100839B30);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RDDueDateDeltaAlerts.ValidationError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for RDDueDateDeltaAlerts.ValidationError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000CDB94 + 4 * byte_1006A7370[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000CDBB4 + 4 * byte_1006A7375[v4]))();
}

_BYTE *sub_1000CDB94(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000CDBB4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000CDBBC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000CDBC4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000CDBCC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000CDBD4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for RDDueDateDeltaAlerts.ValidationError()
{
  return &type metadata for RDDueDateDeltaAlerts.ValidationError;
}

unint64_t sub_1000CDBF4()
{
  unint64_t result;

  result = qword_100839B38;
  if (!qword_100839B38)
  {
    result = swift_getWitnessTable(&unk_1006A7418, &type metadata for RDDueDateDeltaAlerts.ValidationError);
    atomic_store(result, (unint64_t *)&qword_100839B38);
  }
  return result;
}

uint64_t sub_1000CDC38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100839B40);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100839B40);
  if (qword_100837670 != -1)
    swift_once(&qword_100837670, sub_1004A1934);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872130);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000CDCC8(uint64_t a1, void (*a2)(_QWORD, _QWORD), uint64_t a3, double a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t MetatypeMetadata;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  id v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  int v43;
  uint64_t v44;
  id v45;
  id v46;
  void *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  Class v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  void (*v69)(_QWORD, _QWORD);
  void *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(objc_class *, uint64_t, uint64_t (*)(void *, char), uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t, double);
  id v75;
  objc_class *v76;
  id v77;
  char *v78;
  uint64_t v80;
  Class v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  void (*v94)(_QWORD, _QWORD);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v5 = v4;
  v96 = a3;
  v9 = *v4;
  v10 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v10);
  v12 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v90 = *(_QWORD *)(v13 - 8);
  v91 = v13;
  __chkstk_darwin(v13);
  v87 = (uint64_t)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v86 = (char *)&v80 - v16;
  v99 = type metadata accessor for Date(0);
  v97 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v88 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v80 - v19;
  v85 = v21;
  __chkstk_darwin(v22);
  v98 = (char *)&v80 - v23;
  if (qword_100836CC0 != -1)
    swift_once(&qword_100836CC0, sub_1000CDC38);
  v93 = v20;
  v24 = type metadata accessor for Logger(0);
  v25 = sub_10001AAA8(v24, (uint64_t)qword_100839B40);
  v26 = swift_retain_n(v5, 2);
  v92 = v25;
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter(v27);
  v29 = os_log_type_enabled(v27, v28);
  v94 = a2;
  v95 = v9;
  v89 = v12;
  if (v29)
  {
    v30 = swift_slowAlloc(22, -1);
    v84 = (_QWORD *)swift_slowAlloc(8, -1);
    v31 = swift_slowAlloc(32, -1);
    v100 = v31;
    *(_DWORD *)v30 = 136446466;
    v101 = v9;
    MetatypeMetadata = swift_getMetatypeMetadata(v9);
    v33 = String.init<A>(describing:)(&v101, MetatypeMetadata);
    v35 = v34;
    v101 = sub_10001A820(v33, v34, &v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102);
    swift_bridgeObjectRelease(v35);
    *(_WORD *)(v30 + 12) = 2114;
    v36 = (void *)v5[2];
    v101 = (uint64_t)v36;
    v37 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102);
    v38 = v84;
    *v84 = v36;
    swift_release_n(v5, 2);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}s: Start execution {templateObjectID: %{public}@}", (uint8_t *)v30, 0x16u);
    v39 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v38, 1, v39);
    swift_slowDealloc(v38, -1, -1);
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v30, -1, -1);

  }
  else
  {

    v40 = swift_release_n(v5, 2);
  }
  v41 = (uint64_t)v98;
  Date.init()(v40);
  v42 = (void *)v5[2];
  v43 = *((unsigned __int8 *)v5 + 64);
  v44 = swift_allocObject(&unk_1007E2F20, 17, 7);
  *(_BYTE *)(v44 + 16) = 0;
  v45 = sub_1002A6E28(v42, a1, (Class)&off_1007DB528, 0);
  v93 = (char *)a1;
  swift_arrayDestroy(&unk_1007DB548, 1, &type metadata for String);
  v46 = objc_msgSend(v45, "publicLinkURLUUID");
  if (!v46)
  {
    v51 = (uint64_t)v89;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v90 + 56))(v89, 1, 1, v91);
    goto LABEL_10;
  }
  v47 = v46;
  LODWORD(v92) = v43;
  v48 = v45;
  v49 = v87;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v46);

  v51 = (uint64_t)v89;
  v50 = v90;
  v52 = *(void (**)(char *, uint64_t, uint64_t))(v90 + 32);
  v53 = v49;
  v45 = v48;
  v54 = v91;
  v52(v89, v53, v91);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 56))(v51, 0, 1, v54);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v51, 1, v54) == 1)
  {
LABEL_10:
    sub_10000882C(v51, (uint64_t *)&unk_100839C80);
    sub_1000CE6C8((uint64_t)v42, 0, v44, v42, v41, v94, v96, v95);

    (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v41, v99);
    return swift_release(v44);
  }
  v55 = (uint64_t)v86;
  v52(v86, v51, v54);
  v81 = sub_1000D6C38(v55);
  v87 = v5[6];
  v82 = v5[7];
  v84 = sub_10000A388(v5 + 3, v87);
  v83 = type metadata accessor for RDPublicTemplate(0);
  v56 = v97;
  v57 = *(void (**)(char *, uint64_t, uint64_t))(v97 + 16);
  v89 = (char *)v44;
  v58 = v88;
  v57(v88, v41, v99);
  v59 = *(unsigned __int8 *)(v56 + 80);
  v60 = (v59 + 32) & ~v59;
  v61 = (v85 + v60 + 7) & 0xFFFFFFFFFFFFFFF8;
  v62 = (v61 + 15) & 0xFFFFFFFFFFFFFFF8;
  v85 = (v62 + 15) & 0xFFFFFFFFFFFFFFF8;
  v63 = (v62 + 39) & 0xFFFFFFFFFFFFFFF8;
  v64 = swift_allocObject(&unk_1007E2F48, v63 + 8, v59 | 7);
  v65 = v81;
  *(_QWORD *)(v64 + 16) = v42;
  *(_QWORD *)(v64 + 24) = v65;
  v66 = v64 + v60;
  v67 = v97;
  v68 = v58;
  v44 = (uint64_t)v89;
  (*(void (**)(uint64_t, char *, uint64_t))(v97 + 32))(v66, v68, v99);
  v70 = v93;
  v69 = v94;
  *(_QWORD *)(v64 + v61) = v93;
  *(_QWORD *)(v64 + v62) = v44;
  v71 = v64 + v85;
  v72 = v96;
  *(_QWORD *)v71 = v69;
  *(_QWORD *)(v71 + 8) = v72;
  *(_BYTE *)(v71 + 16) = v92;
  *(_QWORD *)(v64 + v63) = v95;
  v73 = v82;
  v74 = *(void (**)(objc_class *, uint64_t, uint64_t (*)(void *, char), uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t, double))(v82 + 16);
  v75 = v42;
  v76 = v65;
  v77 = v70;
  swift_retain();
  swift_retain();
  v74(v76, v83, sub_1000D01C4, v64, v83, &off_1007E3118, v87, v73, a4);

  v78 = v98;
  swift_release(v64);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v86, v91);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v78, v99);
  return swift_release(v44);
}

void sub_1000CE6C8(uint64_t a1, char a2, uint64_t a3, void *a4, uint64_t a5, void (*a6)(_QWORD, _QWORD), uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t MetatypeMetadata;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  id v43;
  void (*v44)(_QWORD, _QWORD);
  id v45;
  _QWORD *v46;
  _BYTE *v47;
  uint64_t v48;
  double v49;
  void (*v50)(_BYTE *, uint64_t);
  os_log_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[4];
  int v56;
  _QWORD *v57;
  os_log_t v58;
  uint64_t v59;
  unsigned int v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67[24];
  double v68;
  uint64_t v69;

  v62 = a1;
  v63 = a7;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v61 = &v55[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v17);
  v19 = &v55[-v18];
  v20 = (_BYTE *)(a3 + 16);
  swift_beginAccess(a3 + 16, v67, 0, 0);
  if ((*(_BYTE *)(a3 + 16) & 1) != 0)
  {
    if (qword_100836CC0 != -1)
      swift_once(&qword_100836CC0, sub_1000CDC38);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_10001AAA8(v21, (uint64_t)qword_100839B40);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v68 = *(double *)&v26;
      *(_DWORD *)v25 = 136446210;
      v65 = a8;
      MetatypeMetadata = swift_getMetatypeMetadata(a8);
      v28 = String.init<A>(describing:)(&v65, MetatypeMetadata);
      v30 = v29;
      v65 = sub_10001A820(v28, v29, (uint64_t *)&v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
      swift_bridgeObjectRelease(v30);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%{public}s: Attempted to call completion more than once", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }

  }
  else
  {
    v31 = a2 & 1;
    swift_beginAccess(v20, &v65, 1, 0);
    *v20 = 1;
    if (qword_100836CC0 != -1)
      swift_once(&qword_100836CC0, sub_1000CDC38);
    v32 = type metadata accessor for Logger(0);
    sub_10001AAA8(v32, (uint64_t)qword_100839B40);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v15 + 16))(v19, a5, v14);
    v33 = a4;
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.default.getter(v34);
    v36 = v35;
    if (os_log_type_enabled(v34, v35))
    {
      v37 = swift_slowAlloc(32, -1);
      v60 = v31;
      v38 = v37;
      v57 = (_QWORD *)swift_slowAlloc(8, -1);
      v59 = swift_slowAlloc(32, -1);
      v64 = v59;
      *(_DWORD *)v38 = 136446722;
      v58 = v34;
      v68 = *(double *)&a8;
      v39 = swift_getMetatypeMetadata(a8);
      v40 = String.init<A>(describing:)(&v68, v39);
      v42 = v41;
      v68 = COERCE_DOUBLE(sub_10001A820(v40, v41, &v64));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);
      swift_bridgeObjectRelease(v42);
      *(_WORD *)(v38 + 12) = 2114;
      v68 = *(double *)&v33;
      v43 = v33;
      v56 = v36;
      v44 = a6;
      v45 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);
      v46 = v57;
      *v57 = v33;

      a6 = v44;
      *(_WORD *)(v38 + 22) = 2048;
      v47 = v61;
      Date.init()(v48);
      v49 = Date.timeIntervalSince(_:)(v19);
      v50 = *(void (**)(_BYTE *, uint64_t))(v15 + 8);
      v50(v47, v14);
      v68 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);
      v50(v19, v14);
      v51 = v58;
      _os_log_impl((void *)&_mh_execute_header, v58, (os_log_type_t)v56, "%{public}s: Finished execution {templateObjectID: %{public}@, elapsedSeconds: %f}", (uint8_t *)v38, 0x20u);
      v52 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v46, 1, v52);
      swift_slowDealloc(v46, -1, -1);
      v53 = v59;
      swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      v54 = v38;
      v31 = v60;
      swift_slowDealloc(v54, -1, -1);

    }
    else
    {

      (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v19, v14);
    }
    a6(v62, v31);
  }
}

uint64_t sub_1000CEB98@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_publicLinkURLUUID, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_1000CEBB4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_100839C80, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(void))&UUID._bridgeToObjectiveC(), (SEL *)&selRef_setPublicLinkURLUUID_);
}

uint64_t sub_1000CEBD8(id a1, char a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(_QWORD, _QWORD), uint64_t a9, unsigned __int8 a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  int v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  id v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  os_log_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t MetatypeMetadata;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  double v81;
  void (*v82)(char *, uint64_t);
  char *v83;
  uint64_t v84;
  os_log_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  void (*v95)(_QWORD, _QWORD);
  char *v96;
  uint64_t v97;
  void *v98;
  NSObject *v99;
  id v100;
  uint64_t result;
  void *v102;
  NSObject *v103;
  id v104;
  id v105;
  uint64_t v106;
  os_log_t v107;
  int v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  os_log_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  void (*v117)(_QWORD, _QWORD);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  double aBlock;
  uint64_t v123;
  uint64_t (*v124)(uint64_t);
  void *v125;
  void *v126;
  NSObject *v127;
  _QWORD v128[3];
  char v129[8];
  uint64_t v130[2];

  v117 = a8;
  v118 = a7;
  v115 = a6;
  v15 = a11;
  v119 = a9;
  v120 = a5;
  v121 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v121 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v121);
  v18 = (char *)&v106 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v116 = (char *)&v106 - v20;
  __chkstk_darwin(v21);
  v23 = (char *)&v106 - v22;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_100836CC0 != -1)
      swift_once(&qword_100836CC0, sub_1000CDC38);
    v53 = type metadata accessor for Logger(0);
    sub_10001AAA8(v53, (uint64_t)qword_100839B40);
    v47 = v16;
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v120, v121);
    v54 = a3;
    v55 = a4;
    sub_1000D026C((uint64_t)a1, 1);
    v56 = v54;
    v57 = v55;
    v58 = sub_1000D026C((uint64_t)a1, 1);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.error.getter();
    v61 = v60;
    if (os_log_type_enabled(v59, v60))
    {
      v62 = swift_slowAlloc(52, -1);
      v113 = v61;
      v63 = v62;
      v64 = (_QWORD *)swift_slowAlloc(8, -1);
      v110 = v64;
      v115 = swift_slowAlloc(96, -1);
      v130[0] = v115;
      *(_DWORD *)v63 = 136447234;
      v112 = v59;
      v114 = a11;
      aBlock = *(double *)&a11;
      MetatypeMetadata = swift_getMetatypeMetadata(a11);
      v66 = String.init<A>(describing:)(&aBlock, MetatypeMetadata);
      v68 = v67;
      aBlock = COERCE_DOUBLE(sub_10001A820(v66, v67, v130));
      v111 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v123);
      swift_bridgeObjectRelease(v68);
      *(_WORD *)(v63 + 12) = 2114;
      aBlock = *(double *)&v56;
      v69 = v56;
      v70 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v123);
      *v64 = v69;

      *(_WORD *)(v63 + 22) = 2082;
      v71 = objc_msgSend(v57, "recordName");
      v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
      v74 = v73;

      v75 = v72;
      v56 = v69;
      aBlock = COERCE_DOUBLE(sub_10001A820(v75, v74, v130));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v123);

      swift_bridgeObjectRelease(v74);
      *(_WORD *)(v63 + 32) = 2082;
      swift_getErrorValue(a1, v129, v128);
      v76 = Error.rem_errorDescription.getter(v128[1], v128[2]);
      v78 = v77;
      aBlock = COERCE_DOUBLE(sub_10001A820(v76, v77, v130));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v123);
      swift_bridgeObjectRelease(v78);
      sub_1000D0278((uint64_t)a1, 1);
      v79 = sub_1000D0278((uint64_t)a1, 1);
      *(_WORD *)(v63 + 42) = 2048;
      v80 = v116;
      Date.init()(v79);
      v81 = Date.timeIntervalSince(_:)(v18);
      v82 = *(void (**)(char *, uint64_t))(v111 + 8);
      v83 = v80;
      v84 = v121;
      v82(v83, v121);
      aBlock = v81;
      v15 = v114;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v123);
      v82(v18, v84);
      v85 = v112;
      _os_log_impl((void *)&_mh_execute_header, v112, (os_log_type_t)v113, "%{public}s: Failed to delete content of template's public link {templateObjectID: %{public}@, recordName: %{public}s, error: %{public}s, elapsedSeconds: %f}", (uint8_t *)v63, 0x34u);
      v86 = sub_10001A630((uint64_t *)&unk_100839E70);
      v87 = v110;
      swift_arrayDestroy(v110, 1, v86);
      swift_slowDealloc(v87, -1, -1);
      v88 = v115;
      swift_arrayDestroy(v115, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v88, -1, -1);
      swift_slowDealloc(v63, -1, -1);

LABEL_15:
      swift_errorRetain(a1);
      sub_1000CE6C8((uint64_t)a1, 1, v118, v56, v120, v117, v119, v15);
      sub_1000D0278((uint64_t)a1, 1);
      return sub_1000D0278((uint64_t)a1, 1);
    }
LABEL_14:

    sub_1000D0278((uint64_t)a1, 1);
    sub_1000D0278((uint64_t)a1, 1);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v18, v121);

    goto LABEL_15;
  }
  if (qword_100836CC0 != -1)
    swift_once(&qword_100836CC0, sub_1000CDC38);
  v113 = a10;
  v24 = type metadata accessor for Logger(0);
  sub_10001AAA8(v24, (uint64_t)qword_100839B40);
  v112 = *(os_log_t *)(v16 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v112)(v23, v120, v121);
  v25 = a3;
  v26 = a4;
  a1 = v25;
  v27 = v26;
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter(v28);
  v30 = v29;
  v31 = os_log_type_enabled(v28, v29);
  v114 = a11;
  if (v31)
  {
    v32 = swift_slowAlloc(42, -1);
    v110 = (_QWORD *)swift_slowAlloc(8, -1);
    v109 = swift_slowAlloc(64, -1);
    v130[0] = v109;
    *(_DWORD *)v32 = 136446978;
    v108 = v30;
    aBlock = *(double *)&a11;
    v33 = swift_getMetatypeMetadata(a11);
    v34 = String.init<A>(describing:)(&aBlock, v33);
    v107 = v28;
    v36 = v35;
    aBlock = COERCE_DOUBLE(sub_10001A820(v34, v35, v130));
    v111 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v123);
    swift_bridgeObjectRelease(v36);
    *(_WORD *)(v32 + 12) = 2114;
    aBlock = *(double *)&a1;
    v37 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v123);
    *v110 = a1;

    *(_WORD *)(v32 + 22) = 2082;
    v38 = objc_msgSend(v27, "recordName");
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v40 = a1;
    v42 = v41;

    aBlock = COERCE_DOUBLE(sub_10001A820(v39, v42, v130));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v123);

    v43 = v42;
    a1 = v40;
    v44 = v121;
    swift_bridgeObjectRelease(v43);
    *(_WORD *)(v32 + 32) = 2048;
    v15 = (uint64_t)v116;
    Date.init()(v45);
    v46 = Date.timeIntervalSince(_:)(v23);
    v47 = v111;
    v48 = *(void (**)(uint64_t, uint64_t))(v111 + 8);
    v48(v15, v44);
    aBlock = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v123);
    v48((uint64_t)v23, v44);
    v49 = v107;
    _os_log_impl((void *)&_mh_execute_header, v107, (os_log_type_t)v108, "%{public}s: Deleted content of template's public link {templateObjectID: %{public}@, recordName: %{public}s, elapsedSeconds: %f}", (uint8_t *)v32, 0x2Au);
    v50 = sub_10001A630((uint64_t *)&unk_100839E70);
    v51 = v110;
    swift_arrayDestroy(v110, 1, v50);
    swift_slowDealloc(v51, -1, -1);
    v52 = v109;
    swift_arrayDestroy(v109, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {

    (*(void (**)(char *, uint64_t))(v16 + 8))(v23, v121);
    v47 = v16;
    v15 = (uint64_t)v116;
  }
  v56 = (id)v115;
  v89 = v121;
  ((void (*)(uint64_t, uint64_t, uint64_t))v112)(v15, v120, v121);
  v90 = *(unsigned __int8 *)(v47 + 80);
  v91 = (v90 + 32) & ~v90;
  v92 = (v17 + v91 + 7) & 0xFFFFFFFFFFFFFFF8;
  v93 = (v92 + 15) & 0xFFFFFFFFFFFFFFF8;
  v94 = (v93 + 23) & 0xFFFFFFFFFFFFFFF8;
  v18 = (char *)swift_allocObject(&unk_1007E2F70, v94 + 8, v90 | 7);
  *((_QWORD *)v18 + 2) = a1;
  *((_QWORD *)v18 + 3) = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(&v18[v91], v15, v89);
  v95 = v117;
  *(_QWORD *)&v18[v92] = v118;
  v96 = &v18[v93];
  v97 = v119;
  *(_QWORD *)v96 = v95;
  *((_QWORD *)v96 + 1) = v97;
  *(_QWORD *)&v18[v94] = v114;
  if ((v113 & 1) != 0)
  {
    v59 = swift_allocObject(&unk_1007E2FC0, 32, 7);
    v59[2].isa = (Class)sub_1000D0338;
    v59[3].isa = (Class)v18;
    v126 = sub_1000098E4;
    v127 = v59;
    aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
    v123 = 1107296256;
    v124 = sub_1000098C4;
    v125 = &unk_1007E2FD8;
    v98 = _Block_copy(&aBlock);
    v99 = v127;
    v100 = a1;
    v57 = v56;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release(v99);
    objc_msgSend(v57, "performBlockAndWait:", v98);
    _Block_release(v98);
    LOBYTE(v98) = swift_isEscapingClosureAtFileLocation(v59, "", 145, 92, 61, 1);
    swift_release_n(v18, 2);
    result = swift_release(v59);
    if ((v98 & 1) == 0)
      return result;
    __break(1u);
    goto LABEL_14;
  }
  v126 = sub_1000D0338;
  v127 = v18;
  aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
  v123 = 1107296256;
  v124 = sub_1000094C8;
  v125 = &unk_1007E2F88;
  v102 = _Block_copy(&aBlock);
  v103 = v127;
  v104 = a1;
  v105 = v56;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release(v103);
  objc_msgSend(v105, "performBlock:", v102);
  _Block_release(v102);
  return swift_release(v18);
}

void sub_1000CF664(void *a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD, _QWORD), uint64_t a6, void *a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  double v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  double v26;
  NSObject *v27;
  os_log_type_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  uint64_t MetatypeMetadata;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  id v38;
  uint64_t v39;
  double v40;
  void (*v41)(char *, uint64_t);
  os_log_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  double v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  double *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  id v63;
  char *v64;
  id v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  double v70;
  void (*v71)(char *, uint64_t);
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  os_log_t v78;
  os_log_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  void (*v85)(_QWORD, _QWORD);
  uint64_t v86;
  double v87;
  _QWORD v88[3];
  char v89[16];
  double v90;
  uint64_t v91;

  v86 = a6;
  v87 = *(double *)&a7;
  v84 = a4;
  v85 = a5;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v83 = (char *)&v77 - v15;
  __chkstk_darwin(v16);
  v18 = (char *)&v77 - v17;
  sub_1000D03A8(a1, (uint64_t)a2);
  v90 = 0.0;
  v19 = objc_msgSend(a2, "save:", &v90);
  v20 = v90;
  if (v19)
  {
    v21 = qword_100836CC0;
    v22 = *(id *)&v90;
    if (v21 != -1)
      swift_once(&qword_100836CC0, sub_1000CDC38);
    v23 = type metadata accessor for Logger(0);
    sub_10001AAA8(v23, (uint64_t)qword_100839B40);
    v24 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v82 = a3;
    v25 = v10;
    v24(v18, a3, v10);
    v26 = COERCE_DOUBLE(a1);
    v27 = Logger.logObject.getter(*(_QWORD *)&v26);
    v28 = static os_log_type_t.default.getter(v27);
    v29 = v28;
    if (os_log_type_enabled(v27, v28))
    {
      v30 = swift_slowAlloc(32, -1);
      v79 = v27;
      v31 = v30;
      v32 = (double *)swift_slowAlloc(8, -1);
      v80 = swift_slowAlloc(32, -1);
      v91 = v80;
      *(_DWORD *)v31 = 136446722;
      LODWORD(v78) = v29;
      v90 = v87;
      MetatypeMetadata = swift_getMetatypeMetadata(*(_QWORD *)&v87);
      v81 = v11;
      v34 = String.init<A>(describing:)(&v90, MetatypeMetadata);
      v35 = v83;
      v37 = v36;
      v90 = COERCE_DOUBLE(sub_10001A820(v34, v36, &v91));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91);
      swift_bridgeObjectRelease(v37);
      *(_WORD *)(v31 + 12) = 2114;
      v90 = v26;
      v38 = *(id *)&v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91);
      *v32 = v26;

      *(_WORD *)(v31 + 22) = 2048;
      Date.init()(v39);
      v40 = Date.timeIntervalSince(_:)(v18);
      v41 = *(void (**)(char *, uint64_t))(v81 + 8);
      v41(v35, v25);
      v90 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91);
      v41(v18, v25);
      v42 = v79;
      _os_log_impl((void *)&_mh_execute_header, v79, (os_log_type_t)v78, "%{public}s: Reset template's public link to nil {templateObjectID: %{public}@, elapsedSeconds: %f}", (uint8_t *)v31, 0x20u);
      v43 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v32, 1, v43);
      swift_slowDealloc(v32, -1, -1);
      v44 = v80;
      swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v31, -1, -1);

    }
    else
    {

      (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
    }
    sub_1000CE6C8(*(uint64_t *)&v26, 0, v84, *(void **)&v26, v82, v85, v86, *(uint64_t *)&v87);
  }
  else
  {
    v45 = *(id *)&v90;
    v46 = _convertNSErrorToError(_:)(*(_QWORD *)&v20);

    swift_willThrow(v47);
    if (qword_100836CC0 != -1)
      swift_once(&qword_100836CC0, sub_1000CDC38);
    v48 = type metadata accessor for Logger(0);
    sub_10001AAA8(v48, (uint64_t)qword_100839B40);
    v49 = v11;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, v10);
    v50 = a1;
    swift_errorRetain(v46);
    v51 = COERCE_DOUBLE(v50);
    v52 = swift_errorRetain(v46);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.error.getter();
    v55 = v54;
    if (os_log_type_enabled(v53, v54))
    {
      v56 = swift_slowAlloc(42, -1);
      v82 = a3;
      v57 = v56;
      v58 = (double *)swift_slowAlloc(8, -1);
      v80 = swift_slowAlloc(64, -1);
      v91 = v80;
      *(_DWORD *)v57 = 136446978;
      LODWORD(v79) = v55;
      v90 = v87;
      v59 = swift_getMetatypeMetadata(*(_QWORD *)&v87);
      v78 = v53;
      v60 = String.init<A>(describing:)(&v90, v59);
      v77 = v10;
      v62 = v61;
      v90 = COERCE_DOUBLE(sub_10001A820(v60, v61, &v91));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91);
      swift_bridgeObjectRelease(v62);
      *(_WORD *)(v57 + 12) = 2114;
      v90 = v51;
      v63 = *(id *)&v51;
      v64 = v83;
      v81 = v49;
      v65 = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91);
      *v58 = v51;

      *(_WORD *)(v57 + 22) = 2082;
      swift_getErrorValue(v46, v89, v88);
      v66 = Error.rem_errorDescription.getter(v88[1], v88[2]);
      v68 = v67;
      v90 = COERCE_DOUBLE(sub_10001A820(v66, v67, &v91));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91);
      swift_bridgeObjectRelease(v68);
      swift_errorRelease(v46);
      v69 = swift_errorRelease(v46);
      *(_WORD *)(v57 + 32) = 2048;
      Date.init()(v69);
      v70 = Date.timeIntervalSince(_:)(v13);
      v71 = *(void (**)(char *, uint64_t))(v81 + 8);
      v72 = v64;
      v73 = v77;
      v71(v72, v77);
      v90 = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91);
      v71(v13, v73);
      v53 = v78;
      _os_log_impl((void *)&_mh_execute_header, v78, (os_log_type_t)v79, "%{public}s: Failed to reset template's public link to nil {templateObjectID: %{public}@, error: %{public}s, elapsedSeconds: %f}", (uint8_t *)v57, 0x2Au);
      v74 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v58, 1, v74);
      swift_slowDealloc(v58, -1, -1);
      v75 = v80;
      swift_arrayDestroy(v80, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v75, -1, -1);
      v76 = v57;
      a3 = v82;
      swift_slowDealloc(v76, -1, -1);
    }
    else
    {

      swift_errorRelease(v46);
      swift_errorRelease(v46);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }

    swift_errorRetain(v46);
    sub_1000CE6C8(v46, 1, v84, *(void **)&v51, a3, v85, v86, *(uint64_t *)&v87);
    swift_errorRelease(v46);
    swift_errorRelease(v46);
  }
}

uint64_t sub_1000CFD8C()
{
  uint64_t v0;

  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 65, 7);
}

uint64_t type metadata accessor for RDTemplateOperationRevokeTemplatePublicLink()
{
  return objc_opt_self(_TtC7remindd43RDTemplateOperationRevokeTemplatePublicLink);
}

uint64_t sub_1000CFDD8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000CFDE8@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_publicLinkCreationDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_1000CFE04(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_1008380D0, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t (*)(void))&Date._bridgeToObjectiveC(), (SEL *)&selRef_setPublicLinkCreationDate_);
}

void sub_1000CFE28(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD), uint64_t (*a7)(void), SEL *a8)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;

  v14 = sub_10001A630(a5);
  __chkstk_darwin(v14);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008868(a1, (uint64_t)v16, a5);
  v17 = *a2;
  v18 = a6(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18) != 1)
  {
    v20 = (void *)a7();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
  }
  objc_msgSend(v17, *a8, v20);

}

uint64_t sub_1000CFF18@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_publicLinkExpirationDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_1000CFF34(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_1008380D0, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t (*)(void))&Date._bridgeToObjectiveC(), (SEL *)&selRef_setPublicLinkExpirationDate_);
}

uint64_t sub_1000CFF58@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_publicLinkLastModifiedDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_1000CFF74(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_1008380D0, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t (*)(void))&Date._bridgeToObjectiveC(), (SEL *)&selRef_setPublicLinkLastModifiedDate_);
}

uint64_t sub_1000CFF98@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_mostRecentPublicLinkUpdateRequestDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

uint64_t sub_1000CFFB4@<X0>(id *a1@<X0>, SEL *a2@<X3>, void (*a3)(void)@<X4>, uint64_t (*a4)(void)@<X5>, uint64_t a5@<X8>)
{
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;

  v8 = objc_msgSend(*a1, *a2);
  if (v8)
  {
    v9 = v8;
    a3();

    v10 = ((uint64_t (*)(_QWORD))a4)(0);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
    v12 = a5;
    v13 = 0;
  }
  else
  {
    v10 = a4();
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
    v12 = a5;
    v13 = 1;
  }
  return v11(v12, v13, 1, v10);
}

void sub_1000D0044(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_1008380D0, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t (*)(void))&Date._bridgeToObjectiveC(), (SEL *)&selRef_setMostRecentPublicLinkUpdateRequestDate_);
}

uint64_t sub_1000D0068(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v15 = a5;
  v16 = a6;
  v11 = sub_1000087F0(&v14);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(v11, a2, a5);
  v12 = swift_allocObject(a4, 65, 7);
  *(_QWORD *)(v12 + 16) = a1;
  sub_10001BCA8(&v14, v12 + 24);
  *(_BYTE *)(v12 + 64) = a3;
  return v12;
}

uint64_t sub_1000D00F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v7));
  swift_release(*(_QWORD *)(v0 + ((v7 + 15) & 0xFFFFFFFFFFFFF8) + 8));
  return swift_deallocObject(v0, ((v7 + 39) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_1000D01C4(void *a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000CEBD8(a1, v4, *(void **)(v2 + 16), *(void **)(v2 + 24), v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + v8), *(void (**)(_QWORD, _QWORD))(v2 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(v2 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 16), *(_QWORD *)(v2 + ((v8 + 39) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1000D026C(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRetain(result);
  return result;
}

uint64_t sub_1000D0278(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRelease(result);
  return result;
}

uint64_t sub_1000D0284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, ((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

void sub_1000D0338()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1000CF664(*(void **)(v0 + 16), *(void **)(v0 + 24), v0 + v2, *(_QWORD *)(v0 + v3), *(void (**)(_QWORD, _QWORD))(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(void **)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1000D0398()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000D03A8(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  NSURL *KeyPath;
  uint64_t v16;
  NSURL *v17;
  id v18;
  NSString v19;
  NSURL *v20;
  NSURL *v21;
  NSURL *v22;
  uint64_t v23;

  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1002A6E28(a1, a2, 0, 0);
  if (!v2)
  {
    v12 = v11;
    v13 = type metadata accessor for Date(0);
    v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
    v14(v10, 1, 1, v13);
    KeyPath = (NSURL *)swift_getKeyPath(&unk_1006A7538);
    sub_10015087C(KeyPath, (uint64_t)v10);
    swift_release(KeyPath);
    sub_10000882C((uint64_t)v10, (uint64_t *)&unk_1008380D0);
    v16 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v7, 1, 1, v16);
    v17 = (NSURL *)swift_getKeyPath(&unk_1006A7560);
    sub_1001527B0(v17, (uint64_t)v7);
    swift_release(v17);
    sub_10000882C((uint64_t)v7, (uint64_t *)&unk_100839C80);
    objc_msgSend(v12, "setPublicLinkConfigurationData:", 0);
    v18 = objc_msgSend(v12, "createResolutionTokenMapIfNecessary");
    v19 = String._bridgeToObjectiveC()();
    objc_msgSend(v18, "updateForKey:", v19);

    v14(v10, 1, 1, v13);
    v20 = (NSURL *)swift_getKeyPath(&unk_1006A75A8);
    sub_10015087C(v20, (uint64_t)v10);
    swift_release(v20);
    sub_10000882C((uint64_t)v10, (uint64_t *)&unk_1008380D0);
    v14(v10, 1, 1, v13);
    v21 = (NSURL *)swift_getKeyPath(&unk_1006A75F0);
    sub_10015087C(v21, (uint64_t)v10);
    swift_release(v21);
    sub_10000882C((uint64_t)v10, (uint64_t *)&unk_1008380D0);
    v14(v10, 1, 1, v13);
    v22 = (NSURL *)swift_getKeyPath(&unk_1006A7640);
    sub_10015087C(v22, (uint64_t)v10);
    swift_release(v22);
    sub_10000882C((uint64_t)v10, (uint64_t *)&unk_1008380D0);
    objc_msgSend(v12, "updateChangeCount");

  }
}

const char *sub_1000D0670()
{
  return "mostRecentPublicLinkUpdateRequestDate";
}

uint64_t sub_1000D067C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_mostRecentPublicLinkUpdateRequestDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_1000D06A8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_1008380D0, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t (*)(void))&Date._bridgeToObjectiveC(), (SEL *)&selRef_setMostRecentPublicLinkUpdateRequestDate_);
}

const char *sub_1000D06DC()
{
  return "publicLinkURLUUID";
}

uint64_t sub_1000D06E8@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_publicLinkURLUUID, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_1000D0714(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_100839C80, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(void))&UUID._bridgeToObjectiveC(), (SEL *)&selRef_setPublicLinkURLUUID_);
}

const char *sub_1000D0748()
{
  return "publicLinkCreationDate";
}

uint64_t sub_1000D0754@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_publicLinkCreationDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_1000D0780(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_1008380D0, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t (*)(void))&Date._bridgeToObjectiveC(), (SEL *)&selRef_setPublicLinkCreationDate_);
}

const char *sub_1000D07B4()
{
  return "publicLinkLastModifiedDate";
}

uint64_t sub_1000D07C0@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_publicLinkLastModifiedDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_1000D07EC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_1008380D0, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t (*)(void))&Date._bridgeToObjectiveC(), (SEL *)&selRef_setPublicLinkLastModifiedDate_);
}

const char *sub_1000D0820()
{
  return "publicLinkExpirationDate";
}

uint64_t sub_1000D082C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_publicLinkExpirationDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_1000D0858(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_1008380D0, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t (*)(void))&Date._bridgeToObjectiveC(), (SEL *)&selRef_setPublicLinkExpirationDate_);
}

uint64_t sub_1000D0894()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100839C08);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100839C08);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1000D0924(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v2);
  __asm { BR              X10 }
}

uint64_t sub_1000D09A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t inited;
  uint64_t v22;

  v7 = sub_10001A630(&qword_100839C30);
  v8 = swift_allocObject(v7, 56, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A3C20;
  KeyPath = swift_getKeyPath(&unk_1006A76D8);
  swift_bridgeObjectRetain(v1);
  v10 = v4;
  v11 = sub_1002E7EC8(KeyPath, v3);
  swift_release(KeyPath);
  *(_QWORD *)(v8 + 32) = v11;
  v12 = swift_getKeyPath(&unk_1006A7708);
  v13 = sub_1002E7ED4(v12, v2, v1);
  swift_release(v12);
  swift_bridgeObjectRelease(v1);
  *(_QWORD *)(v8 + 40) = v13;
  v14 = swift_getKeyPath(&unk_1006A7808);
  v15 = objc_msgSend(v10, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v15);

  v16 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v0, 0, 1, v16);
  v17 = sub_1002E7EE0(v14, v0);
  v18 = swift_release(v14);
  *(_QWORD *)(v8 + 48) = v17;
  *(_QWORD *)(v6 - 72) = v8;
  specialized Array._endMutation()(v18);
  v19 = *(_QWORD *)(v6 - 72);

  v20 = sub_10001A630(&qword_100839C30);
  inited = swift_initStackObject(v20, v6 - 112);
  *(_OWORD *)(inited + 16) = *(_OWORD *)(v5 + 3072);
  v22 = sub_1000153F4(0);
  *(_QWORD *)(inited + 32) = v22;
  *(_QWORD *)(v6 - 72) = inited;
  specialized Array._endMutation()(v22);
  *(_QWORD *)(v6 - 72) = *(_QWORD *)(v6 - 72);
  sub_1001E1A74(v19);
  return sub_10000D2BC(*(_QWORD *)(v6 - 72));
}

id sub_1000D0D6C@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "listTypeRawValue");
  *a2 = (_WORD)result;
  return result;
}

id sub_1000D0D9C(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, "setListTypeRawValue:", *a1);
}

void sub_1000D0DB0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_listID, a2);
}

void sub_1000D0DBC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setListID_);
}

void sub_1000D0DC8(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_concatenatedContainerIDsWithLocalContainerIDPrefix, a2);
}

void sub_1000D0DD4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setConcatenatedContainerIDsWithLocalContainerIDPrefix_);
}

void sub_1000D0DE0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_concatenatedElementIDsWithLocalElementIDPrefix, a2);
}

void sub_1000D0DEC(id *a1@<X0>, SEL *a2@<X3>, uint64_t *a3@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = objc_msgSend(*a1, *a2);
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  *a3 = v6;
  a3[1] = v8;
}

void sub_1000D0E4C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setConcatenatedElementIDsWithLocalElementIDPrefix_);
}

void sub_1000D0E58(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  void *v6;
  NSString v7;
  id v8;

  v6 = *a2;
  if (*(_QWORD *)(a1 + 8))
    v7 = String._bridgeToObjectiveC()();
  else
    v7 = 0;
  v8 = v7;
  objc_msgSend(v6, *a5);

}

uint64_t sub_1000D0EB4()
{
  uint64_t KeyPath;
  uint64_t result;

  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  KeyPath = swift_getKeyPath(&unk_1006A7690);
  result = NSSortDescriptor.init<A, B>(keyPath:ascending:)(KeyPath, 0);
  qword_100871C28 = result;
  return result;
}

id sub_1000D0F04@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "lastAccessedSinceReferenceDate");
  *a2 = (_DWORD)result;
  return result;
}

id sub_1000D0F34(unsigned int *a1, id *a2)
{
  return objc_msgSend(*a2, "setLastAccessedSinceReferenceDate:", *a1);
}

void sub_1000D0F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _BYTE v7[24];

  v4 = a2 + 16;
  v5 = REMCacheContext.object(forKey:)(a3);
  swift_beginAccess(v4, v7, 1, 0);
  v6 = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v5;

}

id sub_1000D0FA8(void *a1, uint64_t a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  objc_class *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  Class isa;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char *v52;
  void *v53;
  NSUUID v54;
  Class v55;
  uint64_t v57;
  _QWORD v58[2];
  os_log_t v59;
  uint64_t v60;
  int v61;
  char *v62;
  void *v63;
  char *v64;
  uint64_t v65;
  id v66;
  _OWORD v67[2];
  uint64_t v68[4];
  id v69;

  v11 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v11);
  v64 = (char *)v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)type metadata accessor for UUID(0);
  v65 = *(v13 - 1);
  v66 = v13;
  __chkstk_darwin(v13);
  v62 = (char *)v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = a1;
  v15 = (unsigned __int16)a1;
  swift_bridgeObjectRetain(a3);
  v69 = a4;
  v16 = (objc_class *)objc_msgSend(a5, "persistentStoreOfAccountWithAccountID:");
  if (v16)
  {
    v17 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v18 = swift_allocObject(v17, 40, 7);
    *(_OWORD *)(v18 + 16) = xmmword_1006A7330;
    *(_QWORD *)(v18 + 32) = v16;
    v68[0] = v18;
    specialized Array._endMutation()(v18);
    v16 = (objc_class *)v68[0];
  }
  sub_1000D0924(v15);
  v20 = (void *)v19;
  v21 = a2;
  v22 = sub_100495348(v16, v19);
  swift_bridgeObjectRelease();

  v23 = sub_10001A630((uint64_t *)&unk_100839E80);
  v24 = swift_allocObject(v23, 64, 7);
  *(_OWORD *)(v24 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v24 + 56) = &type metadata for String;
  *(_QWORD *)(v24 + 32) = 0x696669746E656469;
  *(_QWORD *)(v24 + 40) = 0xEA00000000007265;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v22, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v26 = sub_1000151B0(0, &qword_10083E320, NSDictionary_ptr);
  v27 = a5;
  v28 = NSManagedObjectContext.fetch<A>(_:)(v22, v26);
  if (!v5)
  {
    v29 = v28;
    v30 = v21;
    v31 = (void *)((unint64_t)v28 >> 62);
    if ((unint64_t)v28 >> 62)
    {
      if (v28 < 0)
        v57 = v28;
      else
        v57 = v28 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v28);
      v32 = _CocoaArrayWrapper.endIndex.getter(v57);
      swift_bridgeObjectRelease();
    }
    else
    {
      v32 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v32 < 2)
      goto LABEL_11;
    if (qword_100836CC8 != -1)
      goto LABEL_37;
    while (1)
    {
      v33 = type metadata accessor for Logger(0);
      sub_10001AAA8(v33, (uint64_t)qword_100839C08);
      swift_bridgeObjectRetain_n(a3, 2);
      swift_bridgeObjectRetain_n(v29, 2);
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.error.getter(v35);
      v61 = v36;
      if (os_log_type_enabled(v35, v36))
      {
        v37 = swift_slowAlloc(32, -1);
        v60 = swift_slowAlloc(96, -1);
        v68[0] = v60;
        *(_DWORD *)v37 = 136315650;
        v58[1] = v37 + 4;
        v38 = REMManualOrderingListType.description.getter(v63);
        v63 = v31;
        *(_QWORD *)&v67[0] = sub_10001A820(v38, v39, v68);
        v59 = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v67, (char *)v67 + 8);
        swift_bridgeObjectRelease();
        *(_WORD *)(v37 + 12) = 2080;
        swift_bridgeObjectRetain(a3);
        *(_QWORD *)&v67[0] = sub_10001A820(v30, a3, v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v67, (char *)v67 + 8);
        swift_bridgeObjectRelease_n(a3, 3);
        *(_WORD *)(v37 + 22) = 2080;
        *(_QWORD *)&v67[0] = v32;
        v40 = sub_1000D2474();
        v41 = BinaryInteger.description.getter(&type metadata for Int, v40);
        *(_QWORD *)&v67[0] = sub_10001A820(v41, v42, v68);
        v31 = v63;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v67, (char *)v67 + 8);
        swift_bridgeObjectRelease_n(v29, 2);
        swift_bridgeObjectRelease();
        v32 = (uint64_t)v59;
        _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v61, "fetching manual sort hint object ID returned more than one result {listType: %s listID: %s, count: %s}", (uint8_t *)v37, 0x20u);
        v43 = v60;
        swift_arrayDestroy(v60, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v37, -1, -1);

LABEL_11:
        if (!v31)
        {
LABEL_12:
          v27 = *(id *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (!v27)
            goto LABEL_23;
          goto LABEL_13;
        }
      }
      else
      {

        swift_bridgeObjectRelease_n(v29, 2);
        swift_bridgeObjectRelease_n(a3, 2);
        if (!v31)
          goto LABEL_12;
      }
      if (v29 < 0)
        v47 = v29;
      else
        v47 = v29 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v29);
      v27 = (id)_CocoaArrayWrapper.endIndex.getter(v47);
      swift_bridgeObjectRelease();
      if (!v27)
      {
LABEL_23:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v27;
      }
LABEL_13:
      if ((v29 & 0xC000000000000001) != 0)
      {
        v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v29);
LABEL_16:
        swift_bridgeObjectRelease();
        *(_QWORD *)&v67[0] = 0x696669746E656469;
        *((_QWORD *)&v67[0] + 1) = 0xEA00000000007265;
        v45 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v67, &type metadata for String);
        v46 = objc_msgSend(v44, "__swift_objectForKeyedSubscript:", v45);
        swift_unknownObjectRelease(v45);
        if (v46)
        {
          _bridgeAnyObjectToAny(_:)(v67, v46);
          swift_unknownObjectRelease(v46);
        }
        else
        {
          memset(v67, 0, sizeof(v67));
        }
        v49 = v65;
        v48 = v66;
        v50 = (uint64_t)v64;
        sub_1000A5CA8((uint64_t)v67, (uint64_t)v68, (uint64_t *)&unk_10083D5B0);
        if (v68[3])
        {
          v51 = swift_dynamicCast(v50, v68, (char *)&type metadata for Any + 8, v48, 6);
          (*(void (**)(uint64_t, _QWORD, uint64_t, id))(v49 + 56))(v50, v51 ^ 1u, 1, v48);
          if ((*(unsigned int (**)(uint64_t, uint64_t, id))(v49 + 48))(v50, 1, v48) != 1)
          {
            v52 = v62;
            (*(void (**)(char *, uint64_t, id))(v49 + 32))(v62, v50, v48);
            v53 = (void *)objc_opt_self(REMManualOrdering);
            v54.super.isa = UUID._bridgeToObjectiveC()().super.isa;
            v66 = v44;
            v55 = v54.super.isa;
            v27 = objc_msgSend(v53, "objectIDWithUUID:", v54.super.isa);

            swift_bridgeObjectRelease();
            (*(void (**)(char *, id))(v49 + 8))(v52, v48);
            return v27;
          }
        }
        else
        {
          sub_10000882C((uint64_t)v68, (uint64_t *)&unk_10083D5B0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, id))(v49 + 56))(v50, 1, 1, v48);
        }
        swift_bridgeObjectRelease();

        sub_10000882C(v50, (uint64_t *)&unk_100839C80);
        return 0;
      }
      v31 = &type metadata for Any;
      if (*(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v44 = *(id *)(v29 + 32);
        goto LABEL_16;
      }
      __break(1u);
LABEL_37:
      swift_once(&qword_100836CC8, sub_1000D0894);
    }
  }

  swift_bridgeObjectRelease();
  return v27;
}

void *sub_1000D1700(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  objc_class *v20;
  char *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char v34[24];
  objc_super v35;

  v32 = a2;
  v33 = a3;
  v4 = sub_10001A630(&qword_100839C20);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for REMManualOrdering.ManualOrderingID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A630(&qword_100839C28);
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  REMManualOrdering.Predefined.init(smartListType:)(a1);
  v15 = type metadata accessor for REMManualOrdering.Predefined(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_10000882C((uint64_t)v14, &qword_100839C28);
    return 0;
  }
  else
  {
    REMManualOrdering.Predefined.manualOrderingID.getter();
    v18 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v14, v15);
    v19 = (void *)REMManualOrdering.ManualOrderingID.objectID.getter(v18);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v20 = (objc_class *)type metadata accessor for RDPredefinedObjectKey();
    v21 = (char *)objc_allocWithZone(v20);
    v22 = v32;
    *(_QWORD *)&v21[OBJC_IVAR____TtC7remindd21RDPredefinedObjectKey_accountID] = v32;
    *(_QWORD *)&v21[OBJC_IVAR____TtC7remindd21RDPredefinedObjectKey_objectID] = v19;
    v35.receiver = v21;
    v35.super_class = v20;
    v23 = v22;
    v24 = v19;
    v25 = objc_msgSendSuper2(&v35, "init");
    v26 = swift_allocObject(&unk_1007E3060, 24, 7);
    *(_QWORD *)(v26 + 16) = 0;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for REMCache.ExecutionMode.synchronously<A, B>(_:), v4);
    v27 = swift_allocObject(&unk_1007E3088, 32, 7);
    *(_QWORD *)(v27 + 16) = v26;
    *(_QWORD *)(v27 + 24) = v25;
    swift_retain(v26);
    v28 = v25;
    dispatch thunk of REMCache.performReadOnly(_:operations:)(v7, sub_1000D21DC, v27);

    swift_release(v27);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_beginAccess(v26 + 16, v34, 0, 0);
    v17 = *(void **)(v26 + 16);
    v29 = v17;
    swift_release(v26);
  }
  return v17;
}

void *sub_1000D19A0(void *a1, uint64_t a2, void *a3, void *a4, void *a5, int a6, uint64_t a7)
{
  uint64_t v7;
  void *v14;
  int v15;
  uint64_t v16;
  Swift::String v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  NSArray v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  void *v41;
  id v42;
  id v43;
  Class isa;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  id v49;
  id v50;
  id v51;
  void *v52;
  id v53;
  objc_class *v54;
  char *v55;
  id v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  id v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  id v69;
  uint64_t v70;
  void *v71;
  void *v72;
  Swift::String v73;
  unint64_t v74;
  double v75;
  char v76;
  id v77;
  void *v78;
  id v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  id v88;
  id v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  void *v95;
  uint64_t v96;
  objc_super v97;
  id v98;

  v14 = a1;
  v15 = (unsigned __int16)a1;
  v91 = sub_10001A630(&qword_100839C20);
  v93 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v90 = (char *)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = a6;
  v92 = a7;
  v95 = v14;
  if (v15 != 1
    || (swift_bridgeObjectRetain(a3),
        v17._countAndFlagsBits = a2,
        v17._object = a3,
        (v18 = (void *)REMSmartListType.init(stringValue:)(v17)) == 0))
  {
    v96 = v7;
    goto LABEL_9;
  }
  v19 = v18;
  v20 = sub_1000D1700(v18, a4, a7);
  if (!v20)
  {
    v96 = v7;

    goto LABEL_9;
  }
  v21 = v20;
  v98 = 0;
  v22 = objc_msgSend(a5, "existingObjectWithID:error:", v20, &v98);
  v23 = v98;
  if (!v22)
  {
    v65 = v98;
    v66 = _convertNSErrorToError(_:)(v23);

    swift_willThrow(v67);
    swift_errorRelease(v66);
    v96 = 0;
LABEL_29:
    LOWORD(v14) = (_WORD)v95;
LABEL_9:
    swift_bridgeObjectRetain(a3);
    v29 = a4;
    v30 = objc_msgSend(a5, "persistentStoreOfAccountWithAccountID:", v29);
    if (v30)
    {
      v31 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v32 = swift_allocObject(v31, 40, 7);
      *(_OWORD *)(v32 + 16) = xmmword_1006A7330;
      *(_QWORD *)(v32 + 32) = v30;
      v98 = (id)v32;
      specialized Array._endMutation()(v32);
      v30 = v98;
    }
    sub_1000D0924((unsigned __int16)v14);
    v34 = v33;
    v28 = (void *)type metadata accessor for REMCDManualSortHint();
    v35 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    v36 = objc_msgSend((id)swift_getObjCClassFromMetadata(v28), "entity");
    objc_msgSend(v35, "setEntity:", v36);

    if (v30)
    {
      sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
      v37.super.isa = Array._bridgeToObjectiveC()().super.isa;
    }
    else
    {
      v37.super.isa = 0;
    }
    objc_msgSend(v35, "setAffectedStores:", v37.super.isa);

    objc_msgSend(v35, "setPredicate:", v34);
    swift_bridgeObjectRelease(v30);
    v38 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v39 = swift_allocObject(v38, 40, 7);
    v40 = (_QWORD *)v39;
    *(_OWORD *)(v39 + 16) = xmmword_1006A7330;
    if (qword_100836CD0 != -1)
      v39 = swift_once(&qword_100836CD0, sub_1000D0EB4);
    v41 = (void *)qword_100871C28;
    v40[4] = qword_100871C28;
    v98 = v40;
    specialized Array._endMutation()(v39);
    v42 = v98;
    sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
    v43 = v41;
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v35, "setSortDescriptors:", isa, swift_bridgeObjectRelease(v42).n128_f64[0]);

    v45 = v96;
    v46 = NSManagedObjectContext.fetch<A>(_:)(v35, v28);
    if (v45)
    {

      swift_bridgeObjectRelease(a3);
      return v28;
    }
    v47 = v46;
    if ((unint64_t)v46 >> 62)
    {
      if (v46 < 0)
        v84 = v46;
      else
        v84 = v46 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v46);
      v85 = _CocoaArrayWrapper.endIndex.getter(v84);
      swift_bridgeObjectRelease(v47);
      v48 = (__int16)v95;
      if (v85)
      {
LABEL_20:
        if ((v47 & 0xC000000000000001) != 0)
        {
          v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v47);
        }
        else
        {
          if (!*(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10))
            __break(1u);
          v49 = *(id *)(v47 + 32);
        }
        v28 = v49;
        swift_bridgeObjectRelease(v47);
        if (v48 == 1)
        {
          v50 = v28;
          v51 = objc_msgSend(v50, "remObjectID");
          if (v51)
          {
            v52 = v51;
            v53 = objc_msgSend(v50, "objectID");
            v54 = (objc_class *)type metadata accessor for RDPredefinedObjectKey();
            v55 = (char *)objc_allocWithZone(v54);
            *(_QWORD *)&v55[OBJC_IVAR____TtC7remindd21RDPredefinedObjectKey_accountID] = v29;
            *(_QWORD *)&v55[OBJC_IVAR____TtC7remindd21RDPredefinedObjectKey_objectID] = v52;
            v97.receiver = v55;
            v97.super_class = v54;
            v89 = v29;
            v88 = v52;
            v56 = objc_msgSendSuper2(&v97, "init");
            v57 = v90;
            v58 = v91;
            (*(void (**)(char *, _QWORD, uint64_t))(v93 + 104))(v90, enum case for REMCache.ExecutionMode.asynchronously<A, B>(_:), v91);
            v59 = swift_allocObject(&unk_1007E3038, 32, 7);
            v95 = v28;
            v60 = v59;
            *(_QWORD *)(v59 + 16) = v53;
            *(_QWORD *)(v59 + 24) = v56;
            v61 = v53;
            v96 = 0;
            v62 = v61;
            v63 = v56;
            dispatch thunk of REMCache.performReadAndWrite(_:operations:)(v57, sub_1000D2164, v60);

            v64 = v60;
            v28 = v95;
            swift_release(v64);
            (*(void (**)(char *, uint64_t))(v93 + 8))(v57, v58);

            swift_bridgeObjectRelease(a3);
            goto LABEL_32;
          }

        }
        swift_bridgeObjectRelease(a3);
        v50 = v35;
LABEL_32:

        if ((v94 & 1) == 0)
          return v28;
        goto LABEL_33;
      }
    }
    else
    {
      v48 = (__int16)v95;
      if (*(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_20;
    }

    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(v47);
    return 0;
  }
  v24 = v22;
  v25 = v98;

  v26 = type metadata accessor for REMCDManualSortHint();
  v27 = swift_dynamicCastClass(v24, v26);
  if (!v27)
  {
    v96 = v7;

    goto LABEL_29;
  }
  v28 = (void *)v27;
  if ((v94 & 1) == 0)
    return v28;
LABEL_33:
  v68 = objc_msgSend((id)objc_opt_self(ICCloudConfiguration), "sharedConfiguration");
  v69 = objc_msgSend(v68, "manualSortHintLastAccessedUpdatePolicy");

  v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
  v72 = v71;

  v73._countAndFlagsBits = v70;
  v73._object = v72;
  v74 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DB400, v73);
  *(_QWORD *)&v75 = swift_bridgeObjectRelease(v72).n128_u64[0];
  if (v74 >= 3)
    v76 = 2;
  else
    v76 = v74;
  v77 = objc_msgSend(v28, "remObjectID", v75);
  if (v77)
  {
    v78 = v77;
    v79 = objc_msgSend(v77, "description");

    v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
    v82 = v81;

  }
  else
  {
    v82 = 0xE300000000000000;
    v80 = 7104878;
  }
  v83 = swift_allocObject(&unk_1007E3010, 32, 7);
  *(_QWORD *)(v83 + 16) = v80;
  *(_QWORD *)(v83 + 24) = v82;
  sub_10023E8A4(1, v76, (uint64_t (*)(_QWORD, _QWORD))sub_1000D212C, v83);
  swift_release(v83);
  return v28;
}

uint64_t sub_1000D2108()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000D212C(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_10023E4C4(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1000D2138()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D2164()
{
  uint64_t v0;

  return REMCacheContext.setObject(_:forKey:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000D218C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D21B0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000D21DC(uint64_t a1)
{
  uint64_t v1;

  sub_1000D0F48(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

const char *sub_1000D21E4()
{
  return "lastAccessedSinceReferenceDate";
}

id sub_1000D21F0@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "lastAccessedSinceReferenceDate");
  *a2 = (_DWORD)result;
  return result;
}

id sub_1000D2220(unsigned int *a1, id *a2)
{
  return objc_msgSend(*a2, "setLastAccessedSinceReferenceDate:", *a1);
}

const char *sub_1000D2234()
{
  return "listTypeRawValue";
}

id sub_1000D2240@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "listTypeRawValue");
  *a2 = (_WORD)result;
  return result;
}

id sub_1000D2270(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, "setListTypeRawValue:", *a1);
}

unint64_t sub_1000D2284(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  if (result >> 62 == 2)
    return swift_bridgeObjectRetain(a3);
  if ((result >> 62) <= 1)
  {
    swift_bridgeObjectRetain(a3);
    return (unint64_t)a4;
  }
  return result;
}

const char *sub_1000D22E0()
{
  return "listID";
}

void sub_1000D22EC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_listID, a2);
}

void sub_1000D2308(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setListID_);
}

void sub_1000D2324(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1 >> 62 == 2)
  {
    swift_bridgeObjectRelease(a3);
  }
  else if ((a1 >> 62) <= 1)
  {
    swift_bridgeObjectRelease(a3);

  }
}

const char *sub_1000D2380()
{
  return "concatenatedContainerIDsWithLocalContainerIDPrefix";
}

void sub_1000D238C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_concatenatedContainerIDsWithLocalContainerIDPrefix, a2);
}

void sub_1000D23A8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setConcatenatedContainerIDsWithLocalContainerIDPrefix_);
}

const char *sub_1000D23C4()
{
  return "concatenatedElementIDsWithLocalElementIDPrefix";
}

void sub_1000D23D0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_concatenatedElementIDsWithLocalElementIDPrefix, a2);
}

void sub_1000D23EC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setConcatenatedElementIDsWithLocalElementIDPrefix_);
}

const char *sub_1000D2408()
{
  return "account";
}

id sub_1000D2414@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "account");
  *a2 = result;
  return result;
}

id sub_1000D244C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setAccount:", *a1);
}

const char *sub_1000D2460()
{
  return "identifier";
}

unint64_t sub_1000D2474()
{
  unint64_t result;

  result = qword_100839C38;
  if (!qword_100839C38)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100839C38);
  }
  return result;
}

void sub_1000D24B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  unint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t i;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  int v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  double v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  os_log_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  id v53;
  char *v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  os_log_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v2 = v1;
  v66 = type metadata accessor for UUID(0);
  v60 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v5 = (char *)v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v6);
  v8 = (uint64_t)v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)v52 - v10;
  sub_1000D0924(a1);
  v13 = v12;
  v14 = type metadata accessor for REMCDManualSortHint();
  v15 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v16 = objc_msgSend((id)swift_getObjCClassFromMetadata(v14), "entity");
  objc_msgSend(v15, "setEntity:", v16);

  objc_msgSend(v15, "setAffectedStores:", 0);
  objc_msgSend(v15, "setPredicate:", v13);

  v17 = NSManagedObjectContext.fetch<A>(_:)(v15, v14);
  if (v1)
  {

  }
  else
  {
    v53 = v15;
    v58 = v11;
    v59 = v5;
    v19 = v17;
    if (v17 >> 62)
      goto LABEL_29;
    for (i = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10); i; v18 = swift_bridgeObjectRelease())
    {
      v52[1] = v2;
      v21 = v19 & 0xC000000000000001;
      v22 = 4;
      v18.n128_u64[0] = 33555202;
      v55 = v18;
      v54 = (char *)&type metadata for Any + 8;
      v23 = &selRef_isConcealed;
      v56 = v19;
      v57 = v8;
      v64 = v19 & 0xC000000000000001;
      v65 = i;
      while (1)
      {
        v2 = v22 - 4;
        v24 = v21
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22 - 4, v19)
            : *(id *)(v19 + 8 * v22);
        v25 = v24;
        v26 = v22 - 3;
        if (__OFADD__(v2, 1))
          break;
        if (!objc_msgSend(v24, "markedForDeletion"))
        {
          if (qword_100836CC8 != -1)
            swift_once(&qword_100836CC8, sub_1000D0894);
          v27 = type metadata accessor for Logger(0);
          sub_10001AAA8(v27, (uint64_t)qword_100839C08);
          v28 = v25;
          v29 = Logger.logObject.getter(v28);
          v30 = static os_log_type_t.default.getter(v29);
          if (os_log_type_enabled(v29, (os_log_type_t)v30))
          {
            v62 = v30;
            v63 = v29;
            v31 = swift_slowAlloc(26, -1);
            v61 = swift_slowAlloc(64, -1);
            v67 = v61;
            *(_DWORD *)v31 = v55.n128_u32[0];
            *(_WORD *)(v31 + 4) = (unsigned __int16)objc_msgSend(v28, "listTypeRawValue");
            *(_WORD *)(v31 + 6) = 2082;
            v32 = objc_msgSend(v28, "listID");
            if (v32)
            {
              v33 = v32;
              v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
              v36 = v35;

            }
            else
            {
              v36 = 0xE300000000000000;
              v34 = 7104878;
            }
            *(_QWORD *)(v31 + 8) = sub_10001A820(v34, v36, &v67);

            *(_QWORD *)&v37 = swift_bridgeObjectRelease().n128_u64[0];
            *(_WORD *)(v31 + 16) = 2082;
            v38 = objc_msgSend(v28, "identifier", v37);
            if (v38)
            {
              v39 = v38;
              v40 = v57;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)(v38);

              v41 = 0;
            }
            else
            {
              v41 = 1;
              v40 = v57;
            }
            v42 = v60;
            v43 = v66;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v40, v41, 1, v66);
            v44 = v40;
            v45 = (uint64_t)v58;
            sub_1000A5CA8(v44, (uint64_t)v58, (uint64_t *)&unk_100839C80);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v45, 1, v43))
            {
              sub_10000882C(v45, (uint64_t *)&unk_100839C80);
              v46 = 0xE300000000000000;
              v8 = 7104878;
            }
            else
            {
              (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v59, v45, v66);
              v47 = sub_10000882C(v45, (uint64_t *)&unk_100839C80);
              v8 = UUID.uuidString.getter(v47);
              v46 = v48;
              (*(void (**)(char *, uint64_t))(v42 + 8))(v59, v66);
            }
            v19 = v56;
            *(_QWORD *)(v31 + 18) = sub_10001A820(v8, v46, &v67);

            swift_bridgeObjectRelease();
            v49 = v63;
            _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v62, "DELETE(-soft) manual sort hint (listType: %hd, listID: %{public}s, identifier: %{public}s)", (uint8_t *)v31, 0x1Au);
            v50 = v61;
            swift_arrayDestroy(v61, 2, v54);
            swift_slowDealloc(v50, -1, -1);
            swift_slowDealloc(v31, -1, -1);

            v23 = &selRef_isConcealed;
          }
          else
          {

          }
          objc_msgSend(v28, v23[136]);
          objc_msgSend(v28, "updateChangeCount");
          v21 = v64;
          i = v65;
        }

        ++v22;
        if (v26 == i)
          goto LABEL_33;
      }
      __break(1u);
LABEL_29:
      if (v19 < 0)
        v51 = v19;
      else
        v51 = v19 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v19);
      i = _CocoaArrayWrapper.endIndex.getter(v51);
    }
LABEL_33:

    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000D2A4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  objc_class *v14;
  char *v15;
  char *v16;
  char *v17;
  id v18;
  uint64_t v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t result;
  uint64_t v35;
  _QWORD *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD aBlock[5];
  uint64_t v44;
  objc_super v45;

  v41 = a4;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v40 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v38 = *(_QWORD *)(v10 - 8);
  v39 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100836F28 != -1)
    swift_once(&qword_100836F28, sub_1001BA8F8);
  v13 = (void *)qword_100871CE8;
  v14 = (objc_class *)type metadata accessor for RDDaemonController();
  v15 = (char *)objc_allocWithZone(v14);
  v16 = &v15[OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon];
  *(_QWORD *)v16 = a1;
  *((_QWORD *)v16 + 1) = a2;
  v17 = &v15[OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity];
  *(_QWORD *)v17 = 0xD000000000000013;
  *((_QWORD *)v17 + 1) = 0x80000001006F64A0;
  *(_QWORD *)(v17 + 38) = 0;
  *((_QWORD *)v17 + 3) = 0;
  *((_QWORD *)v17 + 4) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)&v15[OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken] = 0;
  v45.receiver = v15;
  v45.super_class = v14;
  swift_unknownObjectRetain(a1);
  v18 = objc_msgSendSuper2(&v45, "init");
  v37 = v18;
  v19 = type metadata accessor for RDDataStoreApplicationShortcutListProvider(0);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = v13;
  swift_retain(a3);
  v21 = sub_1002AC6C0(v20, a3, (uint64_t)v18);

  swift_release(a3);
  v22 = type metadata accessor for RDSpringBoardApplicationShortcutUpdater();
  v23 = swift_allocObject(v22, 32, 7);
  sub_1000D30A4();
  *(_QWORD *)(v23 + 24) = static OS_dispatch_queue.main.getter();
  *(_QWORD *)(v23 + 16) = objc_msgSend(objc_allocWithZone((Class)SBSApplicationShortcutService), "init");
  v24 = type metadata accessor for RDApplicationShortcutEngine();
  v25 = (_QWORD *)swift_allocObject(v24, 56, 7);
  v26 = v20;
  swift_retain(v21);
  swift_retain(v23);
  v36 = sub_1000D2E94(v26, (uint64_t)v21, v23, v25);
  v27 = swift_allocObject(&unk_1007E30B0, 32, 7);
  *(_QWORD *)(v27 + 16) = v21;
  *(_QWORD *)(v27 + 24) = &off_1007EC6E0;
  aBlock[4] = sub_1000D3104;
  v44 = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007E30C8;
  v28 = _Block_copy(aBlock);
  v29 = swift_retain(v21);
  static DispatchQoS.unspecified.getter(v29);
  v42 = _swiftEmptyArrayStorage;
  v30 = sub_1000D3124();
  v31 = sub_10001A630((uint64_t *)&unk_100838000);
  v32 = sub_1000D316C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v42, v31, v32, v7, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v12, v39);
  swift_release(v44);
  v33 = v41;
  v41[3] = v24;
  v33[4] = &off_1007F3010;

  swift_release(v23);
  result = swift_release(v21);
  *v33 = v36;
  return result;
}

id RDStoreControllerMigrator_MostRecentTargetTemplateIdentifierByCurrentUser.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

id RDApplicationShortcutAssembly.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for RDApplicationShortcutAssembly()
{
  return objc_opt_self(_TtC7remindd29RDApplicationShortcutAssembly);
}

_QWORD *sub_1000D2E94(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD aBlock[5];
  _QWORD *v26;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v21 = *(_QWORD *)(v11 - 8);
  v22 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  a4[2] = a1;
  a4[3] = a2;
  a4[4] = &off_1007EC6E0;
  a4[5] = a3;
  a4[6] = &off_1007E5318;
  *(_QWORD *)(a2 + 32) = &off_1007F3000;
  swift_unknownObjectWeakAssign(a2 + 24, a4);
  aBlock[4] = sub_1000D31B8;
  v26 = a4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007E30F0;
  v14 = _Block_copy(aBlock);
  v15 = a1;
  swift_retain(a2);
  swift_retain(a3);
  v16 = swift_retain(a4);
  static DispatchQoS.unspecified.getter(v16);
  v24 = _swiftEmptyArrayStorage;
  v17 = sub_1000D3124();
  v18 = sub_10001A630((uint64_t *)&unk_100838000);
  v19 = sub_1000D316C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v18, v19, v8, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v14);
  _Block_release(v14);

  swift_release(a2);
  swift_release(a3);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v13, v22);
  swift_release(v26);
  return a4;
}

unint64_t sub_1000D30A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100837FE0;
  if (!qword_100837FE0)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100837FE0);
  }
  return result;
}

uint64_t sub_1000D30E0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000D3104()
{
  sub_1002AB1CC();
}

unint64_t sub_1000D3124()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083A210;
  if (!qword_10083A210)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_10083A210);
  }
  return result;
}

unint64_t sub_1000D316C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083A220;
  if (!qword_10083A220)
  {
    v1 = sub_1000A5A94((uint64_t *)&unk_100838000);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10083A220);
  }
  return result;
}

uint64_t sub_1000D31B8()
{
  uint64_t v0;

  return sub_100408F40(v0);
}

id sub_1000D31C8(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  id v4;
  Class isa;
  NSString v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  NSString v12;
  id v13;
  NSString v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;

  v2 = v1;
  type metadata accessor for RDPublicTemplate(0);
  v4 = objc_allocWithZone((Class)REMObjectID);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v4, "initWithUUID:entityName:", isa, v6);

  v8 = v2[1];
  v9 = objc_allocWithZone((Class)REMListStorage);
  v10 = v7;
  v11 = a1;
  swift_bridgeObjectRetain(v8);
  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(v9, "initWithObjectID:accountID:name:", v10, v11, v12, swift_bridgeObjectRelease().n128_f64[0]);

  objc_msgSend(v13, "setColor:", v2[2]);
  if (v2[4])
    v14 = String._bridgeToObjectiveC()();
  else
    v14 = 0;
  objc_msgSend(v13, "setBadgeEmblem:", v14);

  v15 = v2[6];
  if (v15)
  {
    v16 = v2[5];
    swift_bridgeObjectRetain(v15);
    v17 = REMSortingStyle.init(stringValue:)(v16, v15);
    if (v17)
    {
      v18 = (void *)v17;
      objc_msgSend(v13, "setSortingStyle:", v17);

    }
  }
  objc_msgSend(v13, "setParentAccountID:", v11);
  if (qword_100836CD8 != -1)
    swift_once(&qword_100836CD8, sub_1000D4644);
  v19 = qword_100871C30;
  objc_msgSend(v13, "setMinimumSupportedVersion:", qword_100871C30);
  objc_msgSend(v13, "setEffectiveMinimumSupportedVersion:", v19);

  return v13;
}

id sub_1000D33D8(void *a1, void *a2, void (**a3)(uint64_t, uint64_t, uint64_t, id))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  _QWORD *v39;
  void (*v40)(uint64_t, uint64_t, uint64_t, id);
  void *v41;
  uint64_t v43;
  uint64_t v44;
  id v45;
  Class isa;
  NSString v47;
  void (**v48)(uint64_t, uint64_t, uint64_t, id);
  uint64_t v49;
  id v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  void (**v56)(uint64_t, uint64_t, uint64_t, id);
  id v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char *v61;
  Swift::String v62;
  id v63;
  Class v64;
  NSString v65;
  char *v66;
  id v67;
  void (**v68)(uint64_t, uint64_t, uint64_t, id);
  uint64_t v69;
  uint64_t inited;
  void (**v71)(uint64_t, uint64_t, uint64_t, id);
  uint64_t v72;
  void (**v73)(uint64_t, uint64_t, uint64_t, id);
  uint64_t v74;
  void (**v75)(uint64_t, uint64_t, uint64_t, id);
  uint64_t v76;
  id v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  char *v83;
  __n128 v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  NSData v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  id v99;
  id v100;
  NSURL *v101;
  void *v102;
  void *v103;
  Class v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  void (**v112)(uint64_t, uint64_t, uint64_t, id);
  uint64_t v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *ObjCClassFromMetadata;
  char *v118;
  void (**v119)(uint64_t, uint64_t, uint64_t, id);
  id v120;
  char v121[24];
  _QWORD *v122;
  unint64_t v123;
  id v124;

  v112 = a3;
  v114 = a2;
  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v5);
  v111 = (char *)&v105 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630((uint64_t *)&unk_100839CD0);
  __chkstk_darwin(v7);
  v9 = (char *)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (_QWORD *)type metadata accessor for UUID(0);
  v119 = (void (**)(uint64_t, uint64_t, uint64_t, id))*(v10 - 1);
  __chkstk_darwin(v10);
  v107 = (char *)&v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v118 = (char *)&v105 - v13;
  __chkstk_darwin(v14);
  v110 = (char *)&v105 - v15;
  __chkstk_darwin(v16);
  v18 = (char *)&v105 - v17;
  ObjCClassFromMetadata = (_QWORD *)type metadata accessor for RDSavedReminder(0);
  v19 = *(ObjCClassFromMetadata - 1);
  *(_QWORD *)&v20 = __chkstk_darwin(ObjCClassFromMetadata).n128_u64[0];
  v116 = (uint64_t)&v105 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = a1;
  v22 = objc_msgSend(a1, "entityName", v20);
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  v109 = (unint64_t)"or saved reminders is nil";
  v122 = (_QWORD *)0xD00000000000001DLL;
  v123 = 0x80000001006F67D0;
  v26 = type metadata accessor for RDPublicTemplate(0);
  v27 = v3;
  v28 = v3 + *(int *)(v26 + 32);
  v29 = sub_10009FC50((unint64_t *)&qword_10083FA40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v115 = v28;
  v120 = v10;
  v108 = v29;
  v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v10, v29);
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  if ((_QWORD *)v23 == v122 && v25 == v123)
  {
    v31 = swift_bridgeObjectRelease_n(v25, 2).n128_u64[0];
  }
  else
  {
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v122, v123, 0);
    swift_bridgeObjectRelease();
    v31 = swift_bridgeObjectRelease().n128_u64[0];
    if ((v32 & 1) == 0)
    {
LABEL_11:
      v41 = (void *)objc_opt_self(REMError);
      return (id)swift_willThrow(objc_msgSend(v41, "noSuchObjectErrorWithObjectID:", v124));
    }
  }
  v33 = v27 + *(int *)(v26 + 40);
  v34 = *(_QWORD *)(v33 + 16);
  v35 = objc_msgSend(v124, "uuid", *(double *)&v31);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v35);

  if (*(_QWORD *)(v34 + 16) && (v36 = sub_1002C65F8((uint64_t)v18), (v37 & 1) != 0))
  {
    sub_1000D6E9C(*(_QWORD *)(v34 + 56) + *(_QWORD *)(v19 + 72) * v36, (uint64_t)v9);
    v38 = 0;
  }
  else
  {
    v38 = 1;
  }
  v39 = ObjCClassFromMetadata;
  (*(void (**)(char *, uint64_t, uint64_t, _QWORD *))(v19 + 56))(v9, v38, 1, ObjCClassFromMetadata);
  v40 = v119[1];
  ((void (*)(char *, id))v40)(v18, v120);
  if ((*(unsigned int (**)(char *, uint64_t, _QWORD *))(v19 + 48))(v9, 1, v39) == 1)
  {
    sub_10000882C((uint64_t)v9, (uint64_t *)&unk_100839CD0);
    goto LABEL_11;
  }
  v43 = (uint64_t)v9;
  v44 = v116;
  sub_1000D6E1C(v43, v116);
  v45 = objc_allocWithZone((Class)REMObjectID);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v47 = String._bridgeToObjectiveC()();
  v48 = (void (**)(uint64_t, uint64_t, uint64_t, id))objc_msgSend(v45, "initWithUUID:entityName:", isa, v47);

  v49 = *(_QWORD *)(v33 + 56);
  v50 = v124;
  v51 = objc_msgSend(v124, "uuid");
  v52 = (uint64_t)v118;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v51);

  if (*(_QWORD *)(v49 + 16) && (v53 = sub_1002C65F8(v52), (v54 & 1) != 0))
  {
    v55 = *(_QWORD *)(v49 + 56);
    v56 = v119;
    v57 = v120;
    v58 = (uint64_t)v111;
    ((void (*)(char *, unint64_t, id))v119[2])(v111, v55 + (_QWORD)v119[9] * v53, v120);
    v59 = 0;
  }
  else
  {
    v59 = 1;
    v56 = v119;
    v57 = v120;
    v58 = (uint64_t)v111;
  }
  v56[7](v58, v59, 1, v57);
  ((void (*)(char *, id))v40)(v118, v57);
  v60 = ((uint64_t (*)(uint64_t, uint64_t, id))v56[6])(v58, 1, v57);
  v106 = v33;
  if (v60 == 1)
  {
    sub_10000882C(v58, (uint64_t *)&unk_100839C80);
    v119 = 0;
  }
  else
  {
    v61 = v110;
    ((void (*)(char *, uint64_t, id))v56[4])(v110, v58, v57);
    v122 = (_QWORD *)0xD00000000000001DLL;
    v123 = v109 | 0x8000000000000000;
    v62._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v57, v108);
    String.append(_:)(v62);
    swift_bridgeObjectRelease();
    v63 = objc_allocWithZone((Class)REMObjectID);
    v64 = UUID._bridgeToObjectiveC()().super.isa;
    v65 = String._bridgeToObjectiveC()();
    v50 = v124;
    v119 = (void (**)(uint64_t, uint64_t, uint64_t, id))objc_msgSend(v63, "initWithUUID:entityName:", v64, v65, swift_bridgeObjectRelease().n128_f64[0]);

    v66 = v61;
    v44 = v116;
    ((void (*)(char *, id))v40)(v66, v57);
  }
  v67 = v114;
  v68 = v48;
  v69 = type metadata accessor for REMSavedReminderStorageCDIngestor();
  inited = swift_initStackObject(v69, v121);
  v71 = v112;
  *(_QWORD *)(inited + 16) = v112;
  v72 = qword_100836CD8;
  v73 = v71;
  if (v72 != -1)
    swift_once(&qword_100836CD8, sub_1000D4644);
  v74 = (uint64_t)v48;
  v75 = v119;
  v76 = v113;
  v77 = sub_100471774(v44, v50, v74, v67, (uint64_t)v119, qword_100871C30, qword_100871C30, 0, 0xF000000000000000);
  if (v76)
  {

    return (id)sub_1000D6E60(v44);
  }
  v113 = 0;
  v114 = v77;
  v78 = *(_QWORD *)(v106 + 24);
  if (v78)
  {
    v79 = objc_msgSend(v50, "uuid");
    v80 = (uint64_t)v107;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v79);

    if (*(_QWORD *)(v78 + 16))
    {
      v81 = sub_1002C65F8(v80);
      if ((v82 & 1) != 0)
      {
        v83 = *(char **)(*(_QWORD *)(v78 + 56) + 8 * v81);
        v84 = swift_bridgeObjectRetain(v83);
        ((void (*)(uint64_t, id, __n128))v40)(v80, v120, v84);
        v85 = *((_QWORD *)v83 + 2);
        if (v85)
        {
          v111 = (char *)inited;
          v112 = v68;
          v122 = _swiftEmptyArrayStorage;
          v120 = v67;
          v124 = v124;
          specialized ContiguousArray.reserveCapacity(_:)(v85);
          v118 = (char *)type metadata accessor for RDSavedURLAttachment(0);
          v86 = *((_QWORD *)v118 - 1);
          v87 = (*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80);
          v110 = v83;
          v88 = &v83[v87];
          v89 = type metadata accessor for REMCDSavedAttachment();
          ObjCClassFromMetadata = (_QWORD *)swift_getObjCClassFromMetadata(v89);
          v115 = *(_QWORD *)(v86 + 72);
          do
          {
            v95 = objc_msgSend(ObjCClassFromMetadata, "newObjectID");
            v96 = (uint64_t *)&v88[*((int *)v118 + 5)];
            v98 = *v96;
            v97 = v96[1];
            v99 = v120;
            v100 = v124;
            sub_1000A70D0(v98, v97);
            URL._bridgeToObjectiveC()(v101);
            v103 = v102;
            if (v97 >> 60 == 15)
            {
              v90.super.isa = 0;
            }
            else
            {
              v90.super.isa = Data._bridgeToObjectiveC()().super.isa;
              sub_1000A71B4(v98, v97);
            }
            v91 = objc_msgSend(objc_allocWithZone((Class)REMURLAttachment), "initWithObjectID:accountID:reminderID:url:metadata:", v95, v99, v100, v103, v90.super.isa);

            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v92);
            v93 = v122[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v93);
            v94 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v93, v91);
            specialized ContiguousArray._endMutation()(v94);
            v88 += v115;
            --v85;
          }
          while (v85);
          swift_bridgeObjectRelease();

          v44 = v116;
          inited = (uint64_t)v111;
          v68 = v112;
          v75 = v119;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        sub_1000151B0(0, (unint64_t *)&unk_100839CE0, REMAttachment_ptr);
        v104 = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v114, "setAttachments:", v104, swift_bridgeObjectRelease().n128_f64[0]);
        swift_setDeallocating(inited);

        v68 = v75;
        goto LABEL_34;
      }
    }
    ((void (*)(uint64_t, id))v40)(v80, v120);
  }
  swift_release(inited);

LABEL_34:
  sub_1000D6E60(v44);
  return v114;
}

uint64_t sub_1000D3CC4()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  void (*v3)(_QWORD *@<X8>);
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  char *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  void (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  _BOOL8 v57;
  uint64_t v58;
  char v59;
  void (*v60)(_QWORD *@<X8>);
  unint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  __n128 v80;
  char *v81;
  uint64_t v82;
  __n128 v83;
  char *v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t result;
  _QWORD v89[3];
  uint64_t v90;
  char *v91;
  void (*v92)(_QWORD *@<X8>);
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  void (*v100)(_QWORD *@<X8>);
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t (*v111)(char *, char *, uint64_t);
  char *v112;
  char v113[16];
  uint64_t v114;
  _QWORD *v115;
  unint64_t v116;

  v99 = type metadata accessor for REMRemindersListDataView.SectionLite.SectionType(0);
  v97 = *(_QWORD *)(v99 - 8);
  v1 = __chkstk_darwin(v99);
  v98 = (char *)v89 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = (void (*)(_QWORD *@<X8>))type metadata accessor for REMRemindersListDataView.SectionLite(0, v1);
  v4 = (char *)*((_QWORD *)v3 - 1);
  __chkstk_darwin(v3);
  v6 = (uint64_t)v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v94 = (char *)v89 - v8;
  v9 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v9);
  v96 = (char *)v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v107 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v112 = (char *)v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v102 = (char *)v89 - v14;
  v15 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
  v108 = *(_QWORD *)(v15 - 8);
  v109 = v15;
  __chkstk_darwin(v15);
  v110 = (char *)v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v101 = (char *)v89 - v18;
  __chkstk_darwin(v19);
  v21 = (char *)v89 - v20;
  v22 = (uint64_t *)(v0 + *(int *)(type metadata accessor for RDPublicTemplate(0) + 40));
  v23 = *v22;
  v114 = v0;
  swift_bridgeObjectRetain(v23);
  v24 = (char *)sub_1002006D0((void (*)(uint64_t))sub_1000D6EE0, (uint64_t)v113, v23);
  v25 = swift_bridgeObjectRelease();
  v26 = v22[4];
  if (!v26 || !v22[5] || (v27 = v22[6]) == 0)
  {
    v81 = v98;
    (*(void (**)(char *, _QWORD, uint64_t, __n128))(v97 + 104))(v98, enum case for REMRemindersListDataView.SectionLite.SectionType.sectionless(_:), v99, v25);
    REMRemindersListDataView.SectionLite.init(type:reminders:)(v81, v24);
    v52 = (_QWORD *)sub_1002C848C(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    v29 = v52[2];
    v56 = v52[3];
    v55 = v29 + 1;
    if (v29 >= v56 >> 1)
LABEL_51:
      v52 = (_QWORD *)sub_1002C848C(v56 > 1, v55, 1, (unint64_t)v52);
    v52[2] = v55;
    (*((void (**)(unint64_t, uint64_t, void (*)(_QWORD *@<X8>)))v4 + 4))((unint64_t)v52+ ((v4[80] + 32) & ~(unint64_t)v4[80])+ *((_QWORD *)v4 + 9) * v29, v6, v3);
    return (uint64_t)v52;
  }
  v103 = v22[5];
  v116 = sub_1002AFA70((uint64_t)_swiftEmptyArrayStorage);
  v28 = v24;
  v29 = *((_QWORD *)v24 + 2);
  if (!v29)
  {
    swift_bridgeObjectRelease();
    v21 = 0;
    v32 = (char *)_swiftEmptyArrayStorage;
LABEL_45:
    v82 = v103;
    swift_bridgeObjectRetain(v103);
    v52 = sub_1000D68E4(v26, v82, (uint64_t *)&v116);
    v83 = swift_bridgeObjectRelease();
    v84 = v98;
    (*(void (**)(char *, _QWORD, uint64_t, __n128))(v97 + 104))(v98, enum case for REMRemindersListDataView.SectionLite.SectionType.sectionless(_:), v99, v83);
    v29 = (unint64_t)v94;
    REMRemindersListDataView.SectionLite.init(type:reminders:)(v84, v32);
    swift_isUniquelyReferenced_nonNull_native(v52);
    if ((v85 & 1) == 0)
LABEL_53:
      v52 = (_QWORD *)sub_1002C848C(0, v52[2] + 1, 1, (unint64_t)v52);
    v87 = v52[2];
    v86 = v52[3];
    if (v87 >= v86 >> 1)
      v52 = (_QWORD *)sub_1002C848C(v86 > 1, v87 + 1, 1, (unint64_t)v52);
    v52[2] = v87 + 1;
    (*((void (**)(unint64_t, unint64_t, void (*)(_QWORD *@<X8>)))v4 + 4))((unint64_t)v52+ ((v4[80] + 32) & ~(unint64_t)v4[80])+ *((_QWORD *)v4 + 9) * v87, v29, v3);
    swift_bridgeObjectRelease();
    sub_1000A5C24((uint64_t)v21, 0);
    return (uint64_t)v52;
  }
  v106 = v27;
  v90 = v26;
  v89[2] = 0;
  v91 = v4;
  v92 = v3;
  v100 = 0;
  v30 = (*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80);
  v89[1] = v28;
  v105 = v30;
  v4 = &v28[v30];
  v31 = *(_QWORD *)(v108 + 72);
  v111 = *(uint64_t (**)(char *, char *, uint64_t))(v108 + 16);
  v32 = (char *)_swiftEmptyArrayStorage;
  v33 = (uint64_t)v96;
  v104 = v31;
  v93 = v11;
  for (i = v111(v21, &v28[v30], v109); ; i = v111(v21, v4, v63))
  {
    v37 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(i);
    v38 = objc_msgSend(v37, "uuid");

    v39 = (uint64_t)v112;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v38);

    v40 = v106;
    if (*(_QWORD *)(v106 + 16))
    {
      v41 = sub_1002C65F8(v39);
      v42 = v107;
      if ((v43 & 1) != 0)
      {
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v107 + 16))(v33, *(_QWORD *)(v40 + 56) + *(_QWORD *)(v107 + 72) * v41, v11);
        v44 = 0;
      }
      else
      {
        v44 = 1;
      }
    }
    else
    {
      v44 = 1;
      v42 = v107;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v33, v44, 1, v11);
    v45 = *(void (**)(char *, uint64_t))(v42 + 8);
    v45(v112, v11);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v33, 1, v11) == 1)
    {
      sub_10000882C(v33, (uint64_t *)&unk_100839C80);
LABEL_23:
      v63 = v109;
      v111(v110, v21, v109);
      swift_isUniquelyReferenced_nonNull_native(v32);
      if ((v64 & 1) == 0)
        v32 = (char *)sub_1002C8478(0, *((_QWORD *)v32 + 2) + 1, 1, (unint64_t)v32);
      v66 = *((_QWORD *)v32 + 2);
      v65 = *((_QWORD *)v32 + 3);
      if (v66 >= v65 >> 1)
        v32 = (char *)sub_1002C8478(v65 > 1, v66 + 1, 1, (unint64_t)v32);
      *((_QWORD *)v32 + 2) = v66 + 1;
      v35 = v104;
      v36 = v108;
      (*(void (**)(char *, char *, uint64_t))(v108 + 32))(&v32[v105 + v66 * v104], v110, v63);
      goto LABEL_7;
    }
    v46 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 32);
    v47 = (uint64_t)v102;
    v46(v102, v33, v11);
    if (!*(_QWORD *)(v103 + 16) || (v48 = sub_1002C65F8(v47), (v49 & 1) == 0))
    {
      v45((char *)v47, v11);
      goto LABEL_23;
    }
    v50 = (uint64_t *)(*(_QWORD *)(v103 + 56) + 16 * v48);
    v51 = *v50;
    v3 = (void (*)(_QWORD *@<X8>))v50[1];
    v111(v101, v21, v109);
    swift_bridgeObjectRetain(v3);
    sub_1000A5C24((uint64_t)v100, 0);
    v52 = (_QWORD *)v116;
    swift_isUniquelyReferenced_nonNull_native(v116);
    v6 = v53;
    v115 = v52;
    v95 = v51;
    v100 = v3;
    v55 = sub_1002C6858(v51, (uint64_t)v3);
    v56 = v52[2];
    v57 = (v54 & 1) == 0;
    v58 = v56 + v57;
    if (__OFADD__(v56, v57))
    {
      __break(1u);
      goto LABEL_51;
    }
    v59 = v54;
    if (v52[3] >= v58)
    {
      if ((v6 & 1) == 0)
      {
        sub_1002D6AE0();
        v52 = v115;
      }
      v60 = v100;
      goto LABEL_30;
    }
    sub_1002CDBD8(v58, v6);
    v52 = v115;
    v60 = v100;
    v61 = sub_1002C6858(v95, (uint64_t)v100);
    if ((v59 & 1) != (v62 & 1))
      break;
    v55 = v61;
LABEL_30:
    v116 = (unint64_t)v52;
    swift_bridgeObjectRelease();
    v67 = v52;
    if ((v59 & 1) == 0)
    {
      v52[(v55 >> 6) + 8] |= 1 << v55;
      v68 = (_QWORD *)(v52[6] + 16 * v55);
      *v68 = v95;
      v68[1] = v60;
      v69 = v55;
      *(_QWORD *)(v52[7] + 8 * v55) = _swiftEmptyArrayStorage;
      v70 = v52[2];
      v3 = v60;
      v71 = v70 + 1;
      v72 = __OFADD__(v70, 1);
      swift_bridgeObjectRetain(v52);
      if (v72)
      {
        __break(1u);
        goto LABEL_53;
      }
      v52[2] = v71;
      v67 = v3;
      v55 = v69;
      v11 = v93;
    }
    swift_bridgeObjectRetain(v67);
    v73 = v52[7];
    swift_bridgeObjectRelease();
    v74 = *(_QWORD *)(v73 + 8 * v55);
    swift_isUniquelyReferenced_nonNull_native(v74);
    *(_QWORD *)(v73 + 8 * v55) = v74;
    v95 = v73;
    if ((v75 & 1) == 0)
    {
      v74 = sub_1002C8478(0, *(_QWORD *)(v74 + 16) + 1, 1, v74);
      *(_QWORD *)(v73 + 8 * v55) = v74;
    }
    v77 = *(_QWORD *)(v74 + 16);
    v76 = *(_QWORD *)(v74 + 24);
    if (v77 >= v76 >> 1)
    {
      v74 = sub_1002C8478(v76 > 1, v77 + 1, 1, v74);
      *(_QWORD *)(v95 + 8 * v55) = v74;
    }
    *(_QWORD *)(v74 + 16) = v77 + 1;
    v35 = v104;
    v78 = v74 + v105 + v77 * v104;
    v36 = v108;
    v79 = v109;
    (*(void (**)(unint64_t, char *, uint64_t))(v108 + 32))(v78, v101, v109);
    v80 = swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t, __n128))v45)(v102, v11, v80);
    v63 = v79;
    v100 = sub_1000D4634;
    v33 = (uint64_t)v96;
LABEL_7:
    (*(void (**)(char *, uint64_t))(v36 + 8))(v21, v63);
    v4 += v35;
    if (!--v29)
    {
      swift_bridgeObjectRelease();
      v3 = v92;
      v4 = v91;
      v26 = v90;
      v21 = (char *)v100;
      goto LABEL_45;
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for RDSavedTemplateSection);
  __break(1u);
  return result;
}

void sub_1000D4634(_QWORD *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
}

void sub_1000D4644()
{
  qword_100871C30 = kREMSupportedVersionFor2022;
}

void sub_1000D465C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  id v9;
  Class isa;
  NSString v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[8];

  v19[5] = a3;
  v19[6] = 0xD00000000000001DLL;
  v19[7] = 0x80000001006F67D0;
  v5 = type metadata accessor for RDPublicTemplate(0);
  v6 = type metadata accessor for UUID(0);
  v7 = sub_10009FC50((unint64_t *)&qword_10083FA40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v6, v7);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9 = objc_allocWithZone((Class)REMObjectID);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v9, "initWithUUID:entityName:", isa, v11, swift_bridgeObjectRelease().n128_f64[0]);

  v14 = *(_QWORD *)(a2 + *(int *)(v5 + 40) + 8);
  if (*(_QWORD *)(v14 + 16) && (v13 = sub_1002C65F8(a1), (v15 & 1) != 0))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v13);
    __chkstk_darwin(v13);
    v19[2] = a2;
    swift_bridgeObjectRetain(v16);
    v17 = sub_1002006D0((void (*)(uint64_t))sub_1000D6EFC, (uint64_t)v19, v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    v17 = 0;
  }
  v18 = REMObjectID.codable.getter(v13);
  REMRemindersListDataView.ReminderLite.init(objectID:isCompleted:subtasks:)(v18, 0, v17);

}

void sub_1000D482C()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  id v3;
  Class isa;
  NSString v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for RDPublicTemplate(0);
  v0 = type metadata accessor for UUID(0);
  v1 = sub_10009FC50((unint64_t *)&qword_10083FA40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3 = objc_allocWithZone((Class)REMObjectID);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v3, "initWithUUID:entityName:", isa, v5, swift_bridgeObjectRelease().n128_f64[0], 0xD00000000000001DLL);

  v8 = REMObjectID.codable.getter(v7);
  REMRemindersListDataView.ReminderLite.init(objectID:isCompleted:subtasks:)(v8, 0, 0);

}

double sub_1000D4968@<D0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  void *v33;
  NSString v34;
  uint64_t v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  Swift::String v41;
  void *object;
  Swift::String v43;
  uint64_t v44;
  NSString v45;
  double result;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  void (*v52)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  NSString v59;
  uint64_t v60;
  void *v61;
  NSString v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  id v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  NSString v88;
  uint64_t v89;
  void *v90;
  NSString v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int *v101;
  _QWORD *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  __int128 v109;
  uint64_t v110;
  void (*v111)(uint64_t, char *, uint64_t);
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(char *, char *, uint64_t);
  void (*v120)(char *, char *, uint64_t);
  _QWORD *v121;
  unint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  char *v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  _OWORD v131[3];
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;

  v121 = a2;
  v3 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v3);
  v124 = (uint64_t)&v110 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v125 = v5;
  *(_QWORD *)&v126 = v6;
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v123 = (char *)&v110 - v10;
  v11 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v11);
  v13 = (char *)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v128 = v14;
  *(_QWORD *)&v129 = v15;
  __chkstk_darwin(v14);
  v127 = (char *)&v110 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v17);
  v19 = (char *)&v110 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for UUID(0);
  *(_QWORD *)&v130 = *(_QWORD *)(v20 - 8);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v110 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = CKRecord.recordType.getter(v21);
  v26 = v25;
  if (v24 == 0x655463696C627550 && v25 == 0xEE006574616C706DLL)
  {
    swift_bridgeObjectRelease(0xEE006574616C706DLL);
  }
  else
  {
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, 0x655463696C627550, 0xEE006574616C706DLL, 0);
    swift_bridgeObjectRelease(v26);
    if ((v27 & 1) == 0)
    {
      v36 = (void *)objc_opt_self(REMError);
      *(_QWORD *)&v131[0] = 0;
      *((_QWORD *)&v131[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(117);
      v37._countAndFlagsBits = 0xD000000000000058;
      v37._object = (void *)0x80000001006F64C0;
      String.append(_:)(v37);
      v38._countAndFlagsBits = 0x655463696C627550;
      v38._object = (void *)0xEE006574616C706DLL;
      String.append(_:)(v38);
      v39._object = (void *)0x80000001006F6520;
      v39._countAndFlagsBits = 0xD000000000000018;
      String.append(_:)(v39);
      v41._countAndFlagsBits = CKRecord.recordType.getter(v40);
      object = v41._object;
      String.append(_:)(v41);
      swift_bridgeObjectRelease(object);
      v43._countAndFlagsBits = 125;
      v43._object = (void *)0xE100000000000000;
      String.append(_:)(v43);
      v44 = *((_QWORD *)&v131[0] + 1);
      v45 = String._bridgeToObjectiveC()();
      objc_msgSend(v36, "invalidParameterErrorWithDescription:", v45, swift_bridgeObjectRelease(v44).n128_f64[0]);

      goto LABEL_11;
    }
  }
  v28 = CKRecord.subscript.getter(0xD000000000000011, 0x80000001006F6540);
  if (!v28
    || (v134 = v28,
        v29 = sub_10001A630(&qword_1008398E0),
        (swift_dynamicCast(v131, &v134, v29, &type metadata for String, 6) & 1) == 0))
  {
LABEL_9:
    v33 = (void *)objc_opt_self(REMError);
    v34 = String._bridgeToObjectiveC()();
    objc_msgSend(v33, "invalidParameterErrorWithDescription:", v34);

LABEL_11:
    swift_willThrow(v35);

    return result;
  }
  v30 = *((_QWORD *)&v131[0] + 1);
  UUID.init(uuidString:)(*(_QWORD *)&v131[0], *((_QWORD *)&v131[0] + 1));
  v31 = swift_bridgeObjectRelease(v30);
  v32 = v130;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v130 + 48))(v19, 1, v20, v31) == 1)
  {
    sub_10000882C((uint64_t)v19, (uint64_t *)&unk_100839C80);
    goto LABEL_9;
  }
  v47 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
  v47(v23, v19, v20);
  v48 = CKRecord.subscript.getter(0xD000000000000018, 0x80000001006F65E0);
  if (!v48)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v129 + 56))(v13, 1, 1, v128);
    goto LABEL_20;
  }
  v120 = v47;
  *(_QWORD *)&v131[0] = v48;
  v49 = v128;
  v50 = swift_dynamicCast(v13, v131, v29, v128, 6);
  v51 = v129;
  v52 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v129 + 56);
  v52(v13, v50 ^ 1u, 1, v49);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v13, 1, v49) == 1)
  {
LABEL_20:
    sub_10000882C((uint64_t)v13, (uint64_t *)&unk_1008380D0);
    v58 = (void *)objc_opt_self(REMError);
    v59 = String._bridgeToObjectiveC()();
    objc_msgSend(v58, "invalidParameterErrorWithDescription:", v59);

    swift_willThrow(v60);
LABEL_50:
    (*(void (**)(char *, uint64_t))(v130 + 8))(v23, v20);
    return result;
  }
  v119 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
  v119(v127, v13, v49);
  v53 = CKRecord.subscript.getter(1701667150, 0xE400000000000000);
  if (!v53 || (v134 = v53, (swift_dynamicCast(v131, &v134, v29, &type metadata for String, 6) & 1) == 0))
  {
    v61 = (void *)objc_opt_self(REMError);
    v62 = String._bridgeToObjectiveC()();
    objc_msgSend(v61, "invalidParameterErrorWithDescription:", v62);

    swift_willThrow(v63);
LABEL_49:
    (*(void (**)(char *, uint64_t))(v129 + 8))(v127, v49);
    goto LABEL_50;
  }
  v54 = *((_QWORD *)&v131[0] + 1);
  v115 = *(_QWORD *)&v131[0];
  v55 = CKRecord.subscript.getter(0x726F6C6F43, 0xE500000000000000);
  v118 = v54;
  if (v55 && (v134 = v55, (swift_dynamicCast(v131, &v134, v29, &type metadata for String, 6) & 1) != 0))
  {
    v56 = *((_QWORD *)&v131[0] + 1);
    v57 = (void *)sub_1000D56CC(*(uint64_t *)&v131[0], *((uint64_t *)&v131[0] + 1), &qword_100839C98, REMColor_ptr, (uint64_t (*)(uint64_t))sub_100471100, (uint64_t *)&unk_100839CA0);
    swift_bridgeObjectRelease(v56);
  }
  else
  {
    v57 = 0;
  }
  v64 = CKRecord.subscript.getter(0x626D456567646142, 0xEB000000006D656CLL);
  if (v64)
  {
    v134 = v64;
    v65 = swift_dynamicCast(v131, &v134, v29, &type metadata for String, 6);
    v66 = *(_QWORD *)&v131[0];
    if (!v65)
      v66 = 0;
    v114 = v66;
    if (v65)
      v67 = *((_QWORD *)&v131[0] + 1);
    else
      v67 = 0;
    v117 = v67;
  }
  else
  {
    v114 = 0;
    v117 = 0;
  }
  v68 = CKRecord.subscript.getter(0x53676E6974726F53, 0xEC000000656C7974);
  if (v68)
  {
    v134 = v68;
    v69 = swift_dynamicCast(v131, &v134, v29, &type metadata for String, 6);
    v70 = *(_QWORD *)&v131[0];
    if (!v69)
      v70 = 0;
    v113 = v70;
    if (v69)
      v71 = *((_QWORD *)&v131[0] + 1);
    else
      v71 = 0;
    v116 = v71;
  }
  else
  {
    v113 = 0;
    v116 = 0;
  }
  v72 = CKRecord.subscript.getter(0x6D65526465766153, 0xEE00737265646E69);
  if (!v72)
  {
LABEL_46:
    swift_bridgeObjectRelease(v118);
    swift_bridgeObjectRelease(v117);
    swift_bridgeObjectRelease(v116);
    v87 = (void *)objc_opt_self(REMError);
    v88 = String._bridgeToObjectiveC()();
    objc_msgSend(v87, "invalidParameterErrorWithDescription:", v88);

    swift_willThrow(v89);
    goto LABEL_49;
  }
  v73 = v72;
  v74 = objc_opt_self(CKAsset);
  v75 = (void *)swift_dynamicCastObjCClass(v73, v74);
  if (!v75)
  {
    swift_unknownObjectRelease(v73);
    goto LABEL_46;
  }
  v112 = v57;
  v76 = objc_msgSend(v75, "fileURL");
  if (!v76)
  {
    v79 = v124;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v126 + 56))(v124, 1, 1, v125);
    goto LABEL_48;
  }
  v77 = v76;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v76);

  v78 = v126;
  v79 = v124;
  v80 = v9;
  v81 = v125;
  v111 = *(void (**)(uint64_t, char *, uint64_t))(v126 + 32);
  v111(v124, v80, v125);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v78 + 56))(v79, 0, 1, v81);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v79, 1, v81) == 1)
  {
LABEL_48:
    swift_bridgeObjectRelease(v118);
    swift_bridgeObjectRelease(v117);
    swift_bridgeObjectRelease(v116);
    sub_10000882C(v79, (uint64_t *)&unk_100839C70);
    v90 = (void *)objc_opt_self(REMError);
    v91 = String._bridgeToObjectiveC()();
    objc_msgSend(v90, "invalidParameterErrorWithDescription:", v91);

    swift_willThrow(v92);
    swift_unknownObjectRelease(v73);

    goto LABEL_49;
  }
  v82 = v79;
  v83 = v123;
  v111((uint64_t)v123, (char *)v82, v81);
  v84 = v122;
  v85 = Data.init(contentsOf:options:)(v83, 0);
  if (v84)
  {

    swift_unknownObjectRelease(v73);
    swift_bridgeObjectRelease(v118);
    swift_bridgeObjectRelease(v117);
    swift_bridgeObjectRelease(v116);

    (*(void (**)(char *, uint64_t))(v126 + 8))(v83, v81);
    (*(void (**)(char *, uint64_t))(v129 + 8))(v127, v128);
    goto LABEL_50;
  }
  v124 = v85;
  v93 = v86;
  v94 = type metadata accessor for JSONDecoder(0);
  v95 = swift_allocObject(v94, *(unsigned int *)(v94 + 48), *(unsigned __int16 *)(v94 + 52));
  v96 = JSONDecoder.init()(v95);
  v97 = sub_1000D638C();
  v122 = v93;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for RDSavedReminders, v124, v93, &type metadata for RDSavedReminders, v97);
  swift_unknownObjectRelease(v73);
  sub_1000A71C8(v124, v122);

  swift_release(v96);
  (*(void (**)(char *, uint64_t))(v126 + 8))(v83, v125);
  v129 = v131[2];
  v130 = v131[1];
  v98 = v20;
  v99 = v132;
  v100 = v133;
  v101 = (int *)type metadata accessor for RDPublicTemplate(0);
  v126 = v131[0];
  v102 = v121;
  v120((char *)v121 + v101[8], v23, v98);
  v103 = (char *)v102 + v101[9];
  v104 = v128;
  v119(v103, v127, v128);
  v52(v103, 0, 1, v104);
  v105 = v118;
  *v102 = v115;
  v102[1] = v105;
  v106 = v114;
  v102[2] = v112;
  v102[3] = v106;
  v107 = v113;
  v102[4] = v117;
  v102[5] = v107;
  v102[6] = v116;
  v108 = (char *)v102 + v101[10];
  v109 = v130;
  *(_OWORD *)v108 = v126;
  *((_OWORD *)v108 + 1) = v109;
  result = *(double *)&v129;
  *((_OWORD *)v108 + 2) = v129;
  *((_QWORD *)v108 + 6) = v99;
  *((_QWORD *)v108 + 7) = v100;
  return result;
}

uint64_t sub_1000D5604(uint64_t a1, uint64_t a2)
{
  return sub_1000D56CC(a1, a2, &qword_100839C98, REMColor_ptr, (uint64_t (*)(uint64_t))sub_100471100, (uint64_t *)&unk_100839CA0);
}

uint64_t sub_1000D5668(uint64_t a1, uint64_t a2)
{
  return sub_1000D56CC(a1, a2, (unint64_t *)&unk_10083D430, REMContactRepresentation_ptr, (uint64_t (*)(uint64_t))sub_1001AF160, &qword_100839CF0);
}

uint64_t sub_1000D56CC(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4, uint64_t (*a5)(uint64_t), uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  Class isa;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[3];
  _BYTE v67[16];
  id v68;
  _BYTE v69[24];
  uint64_t v70[4];

  v12 = type metadata accessor for String.Encoding(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (void *)sub_1000151B0(0, a3, a4);
  static String.Encoding.utf8.getter();
  v17 = String.data(using:allowLossyConversion:)(v15, 0, a1, a2);
  v19 = v18;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  if (v19 >> 60 == 15)
  {
    if (qword_100836DF0 != -1)
      swift_once(&qword_100836DF0, sub_1001671F0);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_10001AAA8(v20, (uint64_t)qword_10083D5C0);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v70[0] = v25;
      *(_DWORD *)v24 = 136315138;
      v68 = v16;
      v26 = sub_10001A630(a6);
      v27 = String.init<A>(describing:)(&v68, v26);
      v29 = v28;
      v68 = (id)sub_10001A820(v27, v28, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69);
      swift_bridgeObjectRelease(v29);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "RDJSONDecoding can't encode input string as utf8 data {class: %s}", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }

    return 0;
  }
  v30 = (void *)objc_opt_self(NSJSONSerialization);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v68 = 0;
  v32 = objc_msgSend(v30, "JSONObjectWithData:options:error:", isa, 0, &v68);

  v33 = v68;
  if (!v32)
  {
    v37 = v33;
    v38 = _convertNSErrorToError(_:)(v33);

    swift_willThrow(v39);
    if (qword_100836DF0 != -1)
      swift_once(&qword_100836DF0, sub_1001671F0);
    v40 = type metadata accessor for Logger(0);
    sub_10001AAA8(v40, (uint64_t)qword_10083D5C0);
    swift_errorRetain(v38);
    v41 = swift_errorRetain(v38);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = swift_slowAlloc(22, -1);
      v45 = swift_slowAlloc(64, -1);
      v70[0] = v45;
      *(_DWORD *)v44 = 136315394;
      v68 = v16;
      v46 = sub_10001A630(a6);
      v47 = String.init<A>(describing:)(&v68, v46);
      v49 = v48;
      v68 = (id)sub_10001A820(v47, v48, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69);
      swift_bridgeObjectRelease(v49);
      *(_WORD *)(v44 + 12) = 2080;
      swift_getErrorValue(v38, v67, v66);
      v50 = Error.localizedDescription.getter(v66[1], v66[2]);
      v52 = v51;
      v68 = (id)sub_10001A820(v50, v51, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69);
      swift_bridgeObjectRelease(v52);
      swift_errorRelease(v38);
      swift_errorRelease(v38);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "RDJSONDecoding can't decode JSON {class: %s, error: %s}", (uint8_t *)v44, 0x16u);
      swift_arrayDestroy(v45, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);
      sub_1000A71B4(v17, v19);

      swift_errorRelease(v38);
    }
    else
    {
      sub_1000A71B4(v17, v19);
      swift_errorRelease(v38);
      swift_errorRelease(v38);
      swift_errorRelease(v38);

    }
    return 0;
  }
  _bridgeAnyObjectToAny(_:)(v70, v32);
  swift_unknownObjectRelease(v32);
  sub_10001A670((uint64_t)v70, (uint64_t)&v68);
  v34 = sub_10001A630((uint64_t *)&unk_1008473E0);
  if ((swift_dynamicCast(&v65, &v68, (char *)&type metadata for Any + 8, v34, 6) & 1) == 0)
  {
    if (qword_100836DF0 != -1)
      swift_once(&qword_100836DF0, sub_1001671F0);
    v53 = type metadata accessor for Logger(0);
    v54 = sub_10001AAA8(v53, (uint64_t)qword_10083D5C0);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(12, -1);
      v58 = (void *)swift_slowAlloc(32, -1);
      v68 = v58;
      *(_DWORD *)v57 = 136315138;
      v65 = (uint64_t)v16;
      v59 = sub_10001A630(a6);
      v60 = String.init<A>(describing:)(&v65, v59);
      v62 = v61;
      v65 = sub_10001A820(v60, v61, (uint64_t *)&v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66);
      swift_bridgeObjectRelease(v62);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Invalid JSONSerialization.jsonObject return value {class: %s}", v57, 0xCu);
      swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v57, -1, -1);
    }
    sub_1000A71B4(v17, v19);

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v70);
    return 0;
  }
  v35 = v65;
  v36 = a5(v65);
  sub_1000A71B4(v17, v19);
  swift_bridgeObjectRelease(v35);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v70);
  return v36;
}

void sub_1000D5D7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  Class v6;
  Swift::String v7;
  CKRecord v8;
  _QWORD v9[3];
  uint64_t v10;
  Class isa;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v1 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v1);
  v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  v5 = type metadata accessor for RDPublicTemplate(0);
  v14 = v0 + *(int *)(v5 + 32);
  v6 = sub_1000D6C38(v14);
  v7._countAndFlagsBits = 0x655463696C627550;
  v7._object = (void *)0xEE006574616C706DLL;
  v8.super.isa = CKRecord.init(recordType:recordID:)(v7, (CKRecordID)v6).super.isa;
  v12 = 0x80000001006F6540;
  v13 = 0x80000001006F65E0;
  v10 = v0;
  isa = v8.super.isa;
  v9[2] = v3;
  v9[1] = v4;
  v9[0] = v5;
  JUMPOUT(0x1000D5EFCLL);
}

double sub_1000D6354@<D0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000D4968(a1, a2);
}

uint64_t sub_1000D6368()
{
  return 0x655463696C627550;
}

unint64_t sub_1000D638C()
{
  unint64_t result;

  result = qword_100839C90;
  if (!qword_100839C90)
  {
    result = swift_getWitnessTable(&unk_1006BCA64, &type metadata for RDSavedReminders);
    atomic_store(result, (unint64_t *)&qword_100839C90);
  }
  return result;
}

uint64_t type metadata accessor for RDPublicTemplate(uint64_t a1)
{
  uint64_t result;

  result = qword_100839D50;
  if (!qword_100839D50)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDPublicTemplate);
  return result;
}

uint64_t sub_1000D640C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  void *v24;
  void *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int (*v58)(char *, uint64_t, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v62;
  char v63;
  void (*v64)(char *, uint64_t);
  _OWORD *v65;
  __int128 v66;
  __int128 v67;
  _OWORD *v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  _OWORD v75[4];
  _OWORD v76[5];

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_10001A630((uint64_t *)&unk_10084C100);
  __chkstk_darwin(v74);
  v9 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  __chkstk_darwin(v14);
  v17 = (char *)&v71 - v16;
  v18 = a1[1];
  v19 = a2[1];
  if (*a1 == *a2 && v18 == v19
    || (v20 = v15,
        v21 = _stringCompareWithSmolCheck(_:_:expecting:)(*a1, v18, *a2, v19, 0),
        v15 = v20,
        v22 = v21,
        v23 = 0,
        (v22 & 1) != 0))
  {
    v24 = (void *)a1[2];
    v25 = (void *)a2[2];
    if (v24)
    {
      if (!v25)
        goto LABEL_30;
      v72 = v13;
      v73 = v17;
      v26 = v7;
      v27 = v5;
      v28 = v9;
      v29 = v4;
      v30 = v15;
      sub_1000151B0(0, &qword_100839C98, REMColor_ptr);
      v31 = v25;
      v32 = v24;
      v33 = static NSObject.== infix(_:_:)(v32);

      v15 = v30;
      if ((v33 & 1) == 0)
        goto LABEL_30;
    }
    else
    {
      v72 = v13;
      v73 = v17;
      v26 = v7;
      v27 = v5;
      v28 = v9;
      v29 = v4;
      if (v25)
        goto LABEL_30;
    }
    v34 = a1[4];
    v35 = a2[4];
    if (v34)
    {
      if (!v35)
        goto LABEL_30;
      v36 = v29;
      v37 = a1[3];
      v38 = a2[3];
      v39 = (uint64_t)v28;
      v40 = v27;
      v41 = v26;
      v43 = (uint64_t)v72;
      v42 = (uint64_t)v73;
      if (v37 != v38 || v34 != v35)
      {
        v44 = v15;
        v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v34, v38, v35, 0);
        v15 = v44;
        v46 = v45;
        v23 = 0;
        if ((v46 & 1) == 0)
          return v23 & 1;
      }
    }
    else
    {
      v36 = v29;
      v39 = (uint64_t)v28;
      v40 = v27;
      v41 = v26;
      v43 = (uint64_t)v72;
      v42 = (uint64_t)v73;
      if (v35)
        goto LABEL_30;
    }
    v47 = a1[6];
    v48 = a2[6];
    if (v47)
    {
      if (!v48)
        goto LABEL_30;
      v49 = a1[5];
      v50 = a2[5];
      if (v49 != v50 || v47 != v48)
      {
        v51 = v15;
        v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v47, v50, v48, 0);
        v15 = v51;
        v53 = v52;
        v23 = 0;
        if ((v53 & 1) == 0)
          return v23 & 1;
      }
    }
    else if (v48)
    {
      goto LABEL_30;
    }
    v71 = v15;
    v54 = type metadata accessor for RDPublicTemplate(0);
    if ((static UUID.== infix(_:_:)((char *)a1 + *(int *)(v54 + 32), (char *)a2 + *(int *)(v54 + 32)) & 1) != 0)
    {
      sub_1000CDA2C((uint64_t)a1 + *(int *)(v54 + 36), v42);
      v72 = (char *)v54;
      v55 = v71;
      sub_1000CDA2C((uint64_t)a2 + *(int *)(v54 + 36), v71);
      v56 = v42;
      v57 = v39 + *(int *)(v74 + 48);
      sub_1000CDA2C(v56, v39);
      v73 = (char *)v57;
      sub_1000CDA2C(v55, v57);
      v58 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
      v74 = v36;
      if (v58((char *)v39, 1, v36) == 1)
      {
        sub_10000882C(v55, (uint64_t *)&unk_1008380D0);
        sub_10000882C(v56, (uint64_t *)&unk_1008380D0);
        if (v58(v73, 1, v74) == 1)
        {
          sub_10000882C(v39, (uint64_t *)&unk_1008380D0);
LABEL_33:
          v65 = (_OWORD *)((char *)a1 + *((int *)v72 + 10));
          v66 = v65[3];
          v75[2] = v65[2];
          v75[3] = v66;
          v67 = v65[1];
          v75[0] = *v65;
          v75[1] = v67;
          v68 = (_OWORD *)((char *)a2 + *((int *)v72 + 10));
          v69 = v68[3];
          v76[2] = v68[2];
          v76[3] = v69;
          v70 = v68[1];
          v76[0] = *v68;
          v76[1] = v70;
          v23 = sub_10045CFE4((uint64_t *)v75, (uint64_t *)v76);
          return v23 & 1;
        }
        goto LABEL_29;
      }
      sub_1000CDA2C(v39, v43);
      v59 = v73;
      v60 = v74;
      if (v58(v73, 1, v74) == 1)
      {
        sub_10000882C(v71, (uint64_t *)&unk_1008380D0);
        sub_10000882C(v56, (uint64_t *)&unk_1008380D0);
        (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v43, v60);
LABEL_29:
        sub_10000882C(v39, (uint64_t *)&unk_10084C100);
        goto LABEL_30;
      }
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v41, v59, v60);
      v62 = sub_10009FC50((unint64_t *)&qword_100839DB0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v63 = dispatch thunk of static Equatable.== infix(_:_:)(v43, v41, v60, v62);
      v64 = *(void (**)(char *, uint64_t))(v40 + 8);
      v64(v41, v60);
      sub_10000882C(v71, (uint64_t *)&unk_1008380D0);
      sub_10000882C(v56, (uint64_t *)&unk_1008380D0);
      v64((char *)v43, v60);
      sub_10000882C(v39, (uint64_t *)&unk_1008380D0);
      if ((v63 & 1) != 0)
        goto LABEL_33;
    }
LABEL_30:
    v23 = 0;
  }
  return v23 & 1;
}

_QWORD *sub_1000D68E4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  id v29;
  Class isa;
  NSString v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v41[3];
  unsigned int v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unsigned int v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _QWORD *v55;

  v47 = a3;
  v6 = type metadata accessor for REMRemindersListDataView.SectionLite.SectionType(0);
  v52 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v9);
  v50 = (char *)v41 - v11;
  v53 = type metadata accessor for REMRemindersListDataView.SectionLite(0, v10);
  v12 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v54 = (char *)v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = _swiftEmptyArrayStorage;
  if (!v14)
    return _swiftEmptyArrayStorage;
  v41[1] = v3;
  v55 = _swiftEmptyArrayStorage;
  sub_1001C1C64(0, v14, 0);
  v16 = v8;
  v17 = v55;
  v18 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v19 = a1 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  v51 = *(_QWORD *)(v18 + 72);
  v43 = v16 + 3;
  v44 = v16;
  v42 = enum case for REMRemindersListDataView.SectionLite.SectionType.sectioned(_:);
  v49 = enum case for REMRemindersListDataView.SectionLite.SectionType.sectionless(_:);
  v41[2] = 0x80000001006F67D0;
  v45 = v6;
  v46 = a2;
  do
  {
    if (*(_QWORD *)(a2 + 16) && (v20 = sub_1002C65F8(v19), (v21 & 1) != 0))
    {
      v22 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v20);
      v23 = *v22;
      v24 = v22[1];
      v25 = *v47;
      v26 = *(_QWORD *)(*v47 + 16);
      swift_bridgeObjectRetain(v24);
      v48 = v23;
      if (v26)
      {
        swift_bridgeObjectRetain(v24);
        v27 = sub_1002C6858(v23, v24);
        if ((v28 & 1) != 0)
        {
          v15 = *(_QWORD **)(*(_QWORD *)(v25 + 56) + 8 * v27);
          swift_bridgeObjectRetain(v15);
        }
        swift_bridgeObjectRelease();
      }
      v29 = objc_allocWithZone((Class)type metadata accessor for REMObjectID_Codable(0));
      isa = UUID._bridgeToObjectiveC()().super.isa;
      v31 = String._bridgeToObjectiveC()();
      v32 = objc_msgSend(v29, "initWithUUID:entityName:", isa, v31);

      v33 = v48;
      if (!v24)
        v33 = 0;
      v34 = 0xE000000000000000;
      if (v24)
        v34 = v24;
      v35 = v44;
      v6 = v45;
      *v44 = v32;
      v35[1] = v33;
      v35[2] = v34;
      v36 = v43;
      *v43 = 0;
      v36[1] = 0;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v52 + 104))(v35, v42, v6);
      REMRemindersListDataView.SectionLite.init(type:reminders:)(v35, v15);
      a2 = v46;
    }
    else
    {
      v37 = v50;
      (*(void (**)(char *, _QWORD, uint64_t))(v52 + 104))(v50, v49, v6);
      REMRemindersListDataView.SectionLite.init(type:reminders:)(v37, _swiftEmptyArrayStorage);
    }
    v55 = v17;
    v39 = v17[2];
    v38 = v17[3];
    if (v39 >= v38 >> 1)
    {
      sub_1001C1C64(v38 > 1, v39 + 1, 1);
      v17 = v55;
    }
    v17[2] = v39 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))((unint64_t)v17+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v39, v54, v53);
    v19 += v51;
    --v14;
    v15 = _swiftEmptyArrayStorage;
  }
  while (v14);
  return v17;
}

Class sub_1000D6C38(uint64_t a1)
{
  Swift::String v1;
  void *object;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSString v11;
  NSString v12;
  id v13;
  Swift::String v14;
  Class isa;

  v1._countAndFlagsBits = UUID.uuidString.getter(a1);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  sub_1000151B0(0, (unint64_t *)&unk_100839CC0, CKRecordZoneID_ptr);
  v3 = (void *)static CKRecordZoneID.default.getter();
  v4 = objc_msgSend(v3, "zoneName");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v6 = v5;

  v7 = objc_msgSend(v3, "ownerName");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v9 = v8;

  v10 = objc_allocWithZone((Class)CKRecordZoneID);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(v10, "initWithZoneName:ownerName:databaseScope:", v11, v12, 1, swift_bridgeObjectRelease(v9).n128_f64[0]);

  sub_1000151B0(0, &qword_100844060, CKRecordID_ptr);
  v14._countAndFlagsBits = 0x655463696C627550;
  v14._object = (void *)0xEF2F6574616C706DLL;
  isa = CKRecordID.init(recordName:zoneID:)(v14, (CKRecordZoneID)v13).super.isa;

  return isa;
}

unint64_t sub_1000D6DD8()
{
  unint64_t result;

  result = qword_100839CB8;
  if (!qword_100839CB8)
  {
    result = swift_getWitnessTable(&unk_1006BCA3C, &type metadata for RDSavedReminders);
    atomic_store(result, (unint64_t *)&qword_100839CB8);
  }
  return result;
}

uint64_t sub_1000D6E1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RDSavedReminder(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D6E60(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RDSavedReminder(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000D6E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RDSavedReminder(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000D6EE0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_1000D465C(a1, *(_QWORD *)(v2 + 16), a2);
}

void sub_1000D6EFC()
{
  sub_1000D482C();
}

uint64_t *sub_1000D6F18(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t, __n128);
  id v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v38;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v9 = (void *)a2[2];
    v8 = a2[3];
    a1[2] = (uint64_t)v9;
    a1[3] = v8;
    v11 = a2[4];
    v10 = a2[5];
    a1[4] = v11;
    a1[5] = v10;
    v12 = a2[6];
    v13 = a3[8];
    v38 = (char *)a1 + v13;
    v14 = (char *)a2 + v13;
    a1[6] = v12;
    v15 = type metadata accessor for UUID(0);
    v16 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v15 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v17 = v9;
    swift_bridgeObjectRetain(v11);
    v18 = swift_bridgeObjectRetain(v12);
    v16(v38, v14, v15, v18);
    v19 = a3[9];
    v20 = (char *)v4 + v19;
    v21 = (char *)a2 + v19;
    v22 = type metadata accessor for Date(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      v24 = sub_10001A630((uint64_t *)&unk_1008380D0);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    v26 = a3[10];
    v27 = (uint64_t *)((char *)v4 + v26);
    v28 = (uint64_t *)((char *)a2 + v26);
    v29 = *v28;
    v30 = v28[1];
    *v27 = *v28;
    v27[1] = v30;
    v31 = v28[2];
    v32 = v28[3];
    v27[2] = v31;
    v27[3] = v32;
    v33 = v28[4];
    v34 = v28[5];
    v27[4] = v33;
    v27[5] = v34;
    v35 = v28[6];
    v36 = v28[7];
    v27[6] = v35;
    v27[7] = v36;
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v36);
  }
  return v4;
}

uint64_t sub_1000D70F0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  v4 = a1 + a2[8];
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[9];
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v9 = (_QWORD *)(a1 + a2[10]);
  swift_bridgeObjectRelease(*v9);
  swift_bridgeObjectRelease(v9[1]);
  swift_bridgeObjectRelease(v9[2]);
  swift_bridgeObjectRelease(v9[3]);
  swift_bridgeObjectRelease(v9[4]);
  swift_bridgeObjectRelease(v9[5]);
  swift_bridgeObjectRelease(v9[6]);
  return swift_bridgeObjectRelease(v9[7]);
}

_QWORD *sub_1000D71E8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t, __n128);
  id v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v37;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v8 = (void *)a2[2];
  v7 = a2[3];
  a1[2] = v8;
  a1[3] = v7;
  v10 = a2[4];
  v9 = a2[5];
  a1[4] = v10;
  a1[5] = v9;
  v11 = a2[6];
  v12 = *(int *)(a3 + 32);
  v37 = (char *)a1 + v12;
  v13 = (char *)a2 + v12;
  a1[6] = v11;
  v14 = type metadata accessor for UUID(0);
  v15 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v14 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v16 = v8;
  swift_bridgeObjectRetain(v10);
  v17 = swift_bridgeObjectRetain(v11);
  v15(v37, v13, v14, v17);
  v18 = a3;
  v19 = *(int *)(a3 + 36);
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    v24 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  v25 = *(int *)(v18 + 40);
  v26 = (_QWORD *)((char *)a1 + v25);
  v27 = (_QWORD *)((char *)a2 + v25);
  v28 = *v27;
  v29 = v27[1];
  *v26 = *v27;
  v26[1] = v29;
  v30 = v27[2];
  v31 = v27[3];
  v26[2] = v30;
  v26[3] = v31;
  v32 = v27[4];
  v33 = v27[5];
  v26[4] = v32;
  v26[5] = v33;
  v34 = v27[6];
  v35 = v27[7];
  v26[6] = v34;
  v26[7] = v35;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v35);
  return a1;
}

_QWORD *sub_1000D7398(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = (void *)a1[2];
  v9 = (void *)a2[2];
  a1[2] = v9;
  v10 = v9;

  a1[3] = a2[3];
  v11 = a2[4];
  v12 = a1[4];
  a1[4] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  a1[5] = a2[5];
  v13 = a2[6];
  v14 = a1[6];
  a1[6] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  v15 = a3[8];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[9];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v20, v21, v22);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
    goto LABEL_6;
  }
  if (v26)
  {
LABEL_6:
    v27 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
LABEL_7:
  v28 = a3[10];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  v31 = *(_QWORD *)((char *)a2 + v28);
  v32 = *(_QWORD *)((char *)a1 + v28);
  *(_QWORD *)((char *)a1 + v28) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  v33 = v30[1];
  v34 = v29[1];
  v29[1] = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  v35 = v30[2];
  v36 = v29[2];
  v29[2] = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  v37 = v29[3];
  v38 = v30[3];
  v29[3] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v37);
  v39 = v29[4];
  v40 = v30[4];
  v29[4] = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v39);
  v41 = v29[5];
  v42 = v30[5];
  v29[5] = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v41);
  v43 = v29[6];
  v44 = v30[6];
  v29[6] = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v43);
  v45 = v30[7];
  v46 = v29[7];
  v29[7] = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  return a1;
}

uint64_t sub_1000D7614(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v6 = a3[8];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[9];
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v16 = a3[10];
  v17 = (_OWORD *)(a1 + v16);
  v18 = (_OWORD *)(a2 + v16);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = v18[3];
  v17[2] = v18[2];
  v17[3] = v20;
  return a1;
}

_QWORD *sub_1000D7740(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = (void *)a1[2];
  a1[2] = a2[2];

  v9 = a2[4];
  v10 = a1[4];
  a1[3] = a2[3];
  a1[4] = v9;
  swift_bridgeObjectRelease(v10);
  v11 = a2[6];
  v12 = a1[6];
  a1[5] = a2[5];
  a1[6] = v11;
  swift_bridgeObjectRelease(v12);
  v13 = a3[8];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  v17 = a3[9];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 40))(v18, v19, v20);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v20);
    goto LABEL_6;
  }
  if (v24)
  {
LABEL_6:
    v25 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
LABEL_7:
  v26 = a3[10];
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = (_QWORD *)((char *)a2 + v26);
  v29 = *(_QWORD *)((char *)a1 + v26);
  *(_QWORD *)((char *)a1 + v26) = *v28;
  swift_bridgeObjectRelease(v29);
  v30 = v27[1];
  v27[1] = v28[1];
  swift_bridgeObjectRelease(v30);
  v31 = v27[2];
  v27[2] = v28[2];
  swift_bridgeObjectRelease(v31);
  v32 = v27[3];
  v27[3] = v28[3];
  swift_bridgeObjectRelease(v32);
  v33 = v27[4];
  v27[4] = v28[4];
  swift_bridgeObjectRelease(v33);
  v34 = v27[5];
  v27[5] = v28[5];
  swift_bridgeObjectRelease(v34);
  v35 = v27[6];
  v27[6] = v28[6];
  swift_bridgeObjectRelease(v35);
  v36 = v27[7];
  v27[7] = v28[7];
  swift_bridgeObjectRelease(v36);
  return a1;
}

uint64_t sub_1000D7948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D7954);
}

uint64_t sub_1000D7954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 32);
    }
    else
    {
      v10 = sub_10001A630((uint64_t *)&unk_1008380D0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1000D79F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D7A04);
}

uint64_t sub_1000D7A04(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      v10 = sub_10001A630((uint64_t *)&unk_1008380D0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_1000D7AA4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v6[0] = &unk_1006A78A8;
  v6[1] = &unk_1006A78C0;
  v6[2] = &unk_1006A78D8;
  v6[3] = &unk_1006A78D8;
  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6[4] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000D7B50(319);
    if (v5 <= 0x3F)
    {
      v6[5] = *(_QWORD *)(v4 - 8) + 64;
      v6[6] = &unk_1006A78F0;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

void sub_1000D7B50(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100839D60)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100839D60);
  }
}

uint64_t sub_1000D7BA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100839DC0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100839DC0);
  if (qword_100837678 != -1)
    swift_once(&qword_100837678, sub_1004A1950);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872148);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

Swift::Void __swiftcall RDStoreControllerMigrator_RemoveObsoleteDueDateDeltas.migrateStoreIfNeeded(_:metadata:)(NSPersistentStore _, NSMutableDictionary metadata)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  Class isa;
  uint64_t v15;
  id v16;
  _OWORD v17[2];
  _QWORD v18[4];

  if (qword_100836CE0 != -1)
    swift_once(&qword_100836CE0, sub_1000D7BA4);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001AAA8(v4, (uint64_t)qword_100839DC0);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "RDStoreControllerMigrator_RemoveObsoleteDueDateDeltas: migrating if needed", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  *(_QWORD *)&v17[0] = 0xD000000000000035;
  *((_QWORD *)&v17[0] + 1) = 0x80000001006A7910;
  v9 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v17, &type metadata for String);
  v10 = -[objc_class __swift_objectForKeyedSubscript:](metadata.super.super.isa, "__swift_objectForKeyedSubscript:", v9);
  swift_unknownObjectRelease(v9);
  if (v10)
  {
    _bridgeAnyObjectToAny(_:)(v17, v10);
    swift_unknownObjectRelease(v10);
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  sub_10001A5E8((uint64_t)v17, (uint64_t)v18);
  if (!v18[3])
  {
    sub_10000882C((uint64_t)v18, (uint64_t *)&unk_10083D5B0);
LABEL_13:
    sub_1000D7EE8(_.super.isa);
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    v18[0] = 0xD000000000000035;
    v18[1] = 0x80000001006A7910;
    v15 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v18, &type metadata for String);
    -[objc_class __swift_setObject:forKeyedSubscript:](metadata.super.super.isa, "__swift_setObject:forKeyedSubscript:", isa, v15);

    swift_unknownObjectRelease(v15);
    return;
  }
  v11 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  if ((swift_dynamicCast(&v16, v18, (char *)&type metadata for Any + 8, v11, 6) & 1) == 0)
    goto LABEL_13;
  v12 = v16;
  v13 = objc_msgSend(v16, "integerValue");

  if ((uint64_t)v13 <= 0)
    goto LABEL_13;
}

void sub_1000D7EE8(void *a1)
{
  void *v1;
  void *v2;
  uint64_t ObjectType;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t MetatypeMetadata;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  id v25;
  char isEscapingClosureAtFileLocation;
  uint64_t v27;
  uint64_t aBlock;
  _QWORD v29[4];
  uint64_t v30;

  v2 = v1;
  ObjectType = swift_getObjectType(v2);
  if (qword_100836CE0 != -1)
    swift_once(&qword_100836CE0, sub_1000D7BA4);
  v5 = type metadata accessor for Logger(0);
  sub_10001AAA8(v5, (uint64_t)qword_100839DC0);
  v6 = a1;
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(64, -1);
    v27 = v10;
    aBlock = ObjectType;
    *(_DWORD *)v9 = 136315394;
    MetatypeMetadata = swift_getMetatypeMetadata(ObjectType);
    v12 = String.init<A>(describing:)(&aBlock, MetatypeMetadata);
    v14 = v13;
    aBlock = sub_10001A820(v12, v13, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v29);
    swift_bridgeObjectRelease(v14);
    *(_WORD *)(v9 + 12) = 2082;
    v15 = sub_1002AEF14();
    v17 = v16;
    aBlock = sub_10001A820((uint64_t)v15, v16, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v29);

    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s: BEGIN {store: %{public}s}", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

  }
  v18 = objc_msgSend(objc_allocWithZone((Class)NSManagedObjectContext), "initWithConcurrencyType:", 1);
  v19 = objc_msgSend(v6, "persistentStoreCoordinator");
  objc_msgSend(v18, "setPersistentStoreCoordinator:", v19);

  objc_msgSend(v18, "setTransactionAuthor:", RDStoreControllerRemoveObsoleteDueDateDeltasMigrationAuthor);
  objc_msgSend(v18, "setUndoManager:", 0);
  objc_msgSend(v18, "setRetainsRegisteredObjects:", 1);
  if ((sub_1000D98A8((uint64_t)v6, (uint64_t)v18) & 1) != 0)
  {
    v20 = (_QWORD *)swift_allocObject(&unk_1007E3168, 40, 7);
    v20[2] = v18;
    v20[3] = v2;
    v20[4] = ObjectType;
    v21 = swift_allocObject(&unk_1007E3190, 32, 7);
    *(_QWORD *)(v21 + 16) = sub_1000D9C00;
    *(_QWORD *)(v21 + 24) = v20;
    v29[3] = sub_1000098E4;
    v30 = v21;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v29[0] = 1107296256;
    v29[1] = sub_1000098C4;
    v29[2] = &unk_1007E31A8;
    v22 = _Block_copy(&aBlock);
    v23 = v30;
    v24 = v18;
    v25 = v2;
    swift_retain();
    swift_release(v23);
    objc_msgSend(v24, "performBlockAndWait:", v22);

    _Block_release(v22);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v21, "", 125, 59, 45, 1);
    swift_release(v21);
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      sub_1000D82B0(v6, ObjectType);
      swift_release(v20);
    }
  }
  else
  {

    sub_1000D82B0(v6, ObjectType);
  }
}

void sub_1000D82B0(void *a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t MetatypeMetadata;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (qword_100836CE0 != -1)
    swift_once(&qword_100836CE0, sub_1000D7BA4);
  v4 = type metadata accessor for Logger(0);
  sub_10001AAA8(v4, (uint64_t)qword_100839DC0);
  v16 = a1;
  v5 = Logger.logObject.getter(v16);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc(22, -1);
    v8 = swift_slowAlloc(64, -1);
    v17 = v8;
    v18 = a2;
    *(_DWORD *)v7 = 136315394;
    MetatypeMetadata = swift_getMetatypeMetadata(a2);
    v10 = String.init<A>(describing:)(&v18, MetatypeMetadata);
    v12 = v11;
    v18 = sub_10001A820(v10, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease(v12);
    *(_WORD *)(v7 + 12) = 2082;
    v13 = sub_1002AEF14();
    v15 = v14;
    v18 = sub_10001A820((uint64_t)v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);

    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s: END {store: %{public}s}", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

  }
}

void sub_1000D84B4(void *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint64_t v20;
  NSObject **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_QWORD *@<X8>);
  NSObject *v32;
  uint64_t v33;
  NSObject *v34;
  void (*v35)(NSObject *, uint64_t);
  void *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  void *v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v45;
  unint64_t v46;
  Class isa;
  _BOOL8 v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  char v52;
  id v53;
  unint64_t v54;
  void (*v55)(unint64_t, NSObject *, uint64_t, __n128);
  __n128 v56;
  Class v57;
  BOOL v58;
  objc_class *v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  NSObject **v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  NSObject *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  os_log_type_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t MetatypeMetadata;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t i;
  id v93;
  void *v94;
  id v95;
  void *v96;
  NSString v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  id v101;
  NSObject *v102;
  NSObject *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint64_t v109;
  uint64_t *v110;
  NSObject *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  NSObject *v118;
  uint64_t v119;
  unint64_t v120;
  id v121;
  NSObject *v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  NSObject *v126;
  uint64_t v127;
  NSObject *v128;
  uint64_t v129;

  v118 = a3;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD **)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v117 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = ((char *)&v117 - v10);
  __chkstk_darwin(v9);
  v13 = ((char *)&v117 - v12);
  v14 = sub_1000D9C1C();
  v15 = type metadata accessor for REMCDDueDateDeltaAlert();
  v16 = NSManagedObjectContext.fetch<A>(_:)(v14, v15);
  v122 = v13;
  v123 = v16;
  v126 = v11;

  v29 = v123;
  if ((unint64_t)v123 >> 62)
  {
    if (v123 < 0)
      v98 = v123;
    else
      v98 = v123 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v123);
    v30 = _CocoaArrayWrapper.endIndex.getter(v98);
    swift_bridgeObjectRelease(v123);
    v29 = v123;
    if (v30)
      goto LABEL_6;
LABEL_57:
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
    return;
  }
  v30 = *(_QWORD *)((v123 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v30)
    goto LABEL_57;
LABEL_6:
  v117 = 0;
  v31 = 0;
  v120 = v29 & 0xC000000000000001;
  v32 = &_swiftEmptyDictionarySingleton;
  v33 = 4;
  v34 = v126;
  v121 = a1;
  v119 = v30;
  while (1)
  {
    v37 = v33 - 4;
    if (v120)
    {
      v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v33 - 4, v29);
      v39 = v33 - 3;
      if (__OFADD__(v37, 1))
        break;
      goto LABEL_14;
    }
    v38 = *(id *)(v29 + 8 * v33);
    v39 = v33 - 3;
    if (__OFADD__(v37, 1))
      break;
LABEL_14:
    v124 = v39;
    v40 = v38;
    v41 = objc_msgSend(v38, "reminderIdentifier", v117);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v41);

    v125 = v40;
    v42 = objc_msgSend(v40, "identifier");
    v43 = (uint64_t)v8;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v42);

    sub_1000A5C24((uint64_t)v31, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v32);
    v128 = v32;
    v46 = sub_1002C65F8((uint64_t)v34);
    isa = v32[2].isa;
    v48 = (v45 & 1) == 0;
    v49 = (uint64_t)isa + v48;
    if (__OFADD__(isa, v48))
      goto LABEL_51;
    v50 = v45;
    if ((uint64_t)v32[3].isa >= v49)
    {
      v34 = v122;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1002D6EE4();
        v32 = v128;
      }
    }
    else
    {
      sub_1002CEB54(v49, isUniquelyReferenced_nonNull_native);
      v32 = v128;
      v51 = sub_1002C65F8((uint64_t)v126);
      v34 = v122;
      if ((v50 & 1) != (v52 & 1))
      {
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v4);
        __break(1u);
        return;
      }
      v46 = v51;
    }
    v53 = v121;
    swift_bridgeObjectRelease(0x8000000000000000);
    if ((v50 & 1) != 0)
    {
      swift_bridgeObjectRetain(v32);
    }
    else
    {
      v32[(v46 >> 6) + 8].isa = (Class)((uint64_t)v32[(v46 >> 6) + 8].isa | (1 << v46));
      v54 = (unint64_t)v32[6].isa + v5[9] * v46;
      v55 = (void (*)(unint64_t, NSObject *, uint64_t, __n128))v5[2];
      v56 = swift_bridgeObjectRetain(v32);
      v55(v54, v126, v4, v56);
      *((_QWORD *)v32[7].isa + v46) = &_swiftEmptySetSingleton;
      v57 = v32[2].isa;
      v58 = __OFADD__(v57, 1);
      v59 = (Class)((char *)v57 + 1);
      if (v58)
        goto LABEL_52;
      v32[2].isa = v59;
    }
    swift_bridgeObjectRelease(v32);
    v8 = (char *)v43;
    sub_1002DB318((uint64_t)v34, v43);
    v35 = (void (*)(NSObject *, uint64_t))v5[1];
    v35(v34, v4);
    v34 = v126;
    v35(v126, v4);
    v36 = v125;
    objc_msgSend(v53, "deleteObject:", v125);

    ++v33;
    v31 = sub_1000D92DC;
    v29 = v123;
    if (v124 == v119)
    {
      swift_bridgeObjectRelease(v123);
      if (qword_100837010 != -1)
        swift_once(&qword_100837010, sub_10021EF78);
      v60 = qword_100871D40;
      if (!*(_QWORD *)(qword_100871D40 + 16)
        || (v61 = sub_10001A6DC(0xD000000000000016, 0x80000001006F4610), (v62 & 1) == 0))
      {
        swift_bridgeObjectRelease(v32);
        if (qword_100836CE0 != -1)
          swift_once(&qword_100836CE0, sub_1000D7BA4);
        v81 = type metadata accessor for Logger(0);
        v82 = sub_10001AAA8(v81, (uint64_t)qword_100839DC0);
        v70 = Logger.logObject.getter(v82);
        v83 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v70, v83))
        {
          v84 = (uint8_t *)swift_slowAlloc(12, -1);
          v85 = swift_slowAlloc(32, -1);
          v127 = v85;
          *(_DWORD *)v84 = 136315138;
          v128 = v118;
          MetatypeMetadata = swift_getMetatypeMetadata(v118);
          v87 = String.init<A>(describing:)(&v128, MetatypeMetadata);
          v89 = v88;
          v128 = sub_10001A820(v87, v88, &v127);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129);
          swift_bridgeObjectRelease(v89);
          _os_log_impl((void *)&_mh_execute_header, v70, v83, "%s: Error getting dueDateDeltaCDValueKey", v84, 0xCu);
          swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v85, -1, -1);
          swift_slowDealloc(v84, -1, -1);
        }
LABEL_48:

        return;
      }
      v63 = *(_QWORD *)(*(_QWORD *)(v60 + 56) + 16 * v61 + 8);
      swift_bridgeObjectRetain(v63);
      v64 = sub_1000D9D74((uint64_t)v32);
      swift_bridgeObjectRelease(v32);
      v65 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
      v66 = v117;
      v67 = NSManagedObjectContext.fetch<A>(_:)(v64, v65);
      if (v66)
      {
        swift_bridgeObjectRelease(v63);

        if (qword_100836CE0 != -1)
          swift_once(&qword_100836CE0, sub_1000D7BA4);
        v68 = type metadata accessor for Logger(0);
        sub_10001AAA8(v68, (uint64_t)qword_100839DC0);
        swift_errorRetain(v66);
        v69 = swift_errorRetain(v66);
        v70 = Logger.logObject.getter(v69);
        v71 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v70, v71))
        {
          v72 = swift_slowAlloc(22, -1);
          v73 = (NSObject **)swift_slowAlloc(8, -1);
          v74 = swift_slowAlloc(32, -1);
          v127 = v74;
          *(_DWORD *)v72 = 136315394;
          v128 = v118;
          v75 = swift_getMetatypeMetadata(v118);
          v76 = String.init<A>(describing:)(&v128, v75);
          v78 = v77;
          v128 = sub_10001A820(v76, v77, &v127);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129);
          swift_bridgeObjectRelease(v78);
          *(_WORD *)(v72 + 12) = 2112;
          swift_errorRetain(v66);
          v79 = _swift_stdlib_bridgeErrorToNSError(v66);
          v128 = v79;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129);
          *v73 = v79;
          swift_errorRelease(v66);
          swift_errorRelease(v66);
          _os_log_impl((void *)&_mh_execute_header, v70, v71, "%s: Error fetching REMCDReminders: %@", (uint8_t *)v72, 0x16u);
          v80 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v73, 1, v80);
          swift_slowDealloc(v73, -1, -1);
          swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v74, -1, -1);
          swift_slowDealloc(v72, -1, -1);

          swift_errorRelease(v66);
          return;
        }
        swift_errorRelease(v66);
        swift_errorRelease(v66);
        swift_errorRelease(v66);
        goto LABEL_48;
      }
      v90 = v67;

      if ((unint64_t)v90 >> 62)
      {
        if (v90 < 0)
          v99 = v90;
        else
          v99 = v90 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v90);
        v91 = _CocoaArrayWrapper.endIndex.getter(v99);
        swift_bridgeObjectRelease(v90);
        if (!v91)
          goto LABEL_62;
LABEL_39:
        if (v91 >= 1)
        {
          for (i = 0; i != v91; ++i)
          {
            if ((v90 & 0xC000000000000001) != 0)
              v93 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v90);
            else
              v93 = *(id *)(v90 + 8 * i + 32);
            v94 = v93;
            objc_msgSend(v93, "setDueDateDeltaAlertsData:", 0);
            objc_msgSend(v94, "updateChangeCount");
            v95 = objc_msgSend(v94, "resolutionTokenMap");
            if (v95)
            {
              v96 = v95;
              v97 = String._bridgeToObjectiveC()();
              objc_msgSend(v96, "updateForKey:", v97);

              objc_msgSend(v94, "setResolutionTokenMap:", v96);
            }

          }
          goto LABEL_62;
        }
        __break(1u);
      }
      else
      {
        v91 = *(_QWORD *)((v90 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v91)
          goto LABEL_39;
LABEL_62:
        swift_bridgeObjectRelease(v63);
        *(_QWORD *)&v100 = swift_bridgeObjectRelease(v90).n128_u64[0];
        v101 = v121;
        if ((objc_msgSend(v121, "hasChanges", v100) & 1) == 0)
          return;
        v128 = 0;
        if (objc_msgSend(v101, "save:", &v128))
        {
          v102 = v128;
          return;
        }
        v126 = v128;
        v103 = v128;
        v63 = _convertNSErrorToError(_:)(v126);

        swift_willThrow(v104);
        if (qword_100836CE0 == -1)
        {
LABEL_66:
          v105 = type metadata accessor for Logger(0);
          sub_10001AAA8(v105, (uint64_t)qword_100839DC0);
          swift_errorRetain(v63);
          v106 = swift_errorRetain(v63);
          v107 = Logger.logObject.getter(v106);
          v108 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v107, v108))
          {
            v109 = swift_slowAlloc(22, -1);
            v110 = (uint64_t *)swift_slowAlloc(8, -1);
            v111 = swift_slowAlloc(32, -1);
            v128 = v111;
            *(_DWORD *)v109 = 136315394;
            v112 = sub_1000D92EC((uint64_t)v118);
            v114 = v113;
            v127 = sub_10001A820(v112, v113, (uint64_t *)&v128);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128);
            swift_bridgeObjectRelease(v114);
            *(_WORD *)(v109 + 12) = 2112;
            swift_errorRetain(v63);
            v115 = _swift_stdlib_bridgeErrorToNSError(v63);
            v127 = v115;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128);
            *v110 = v115;
            swift_errorRelease(v63);
            swift_errorRelease(v63);
            _os_log_impl((void *)&_mh_execute_header, v107, v108, "%s: Error saving: %@", (uint8_t *)v109, 0x16u);
            v116 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v110, 1, v116);
            swift_slowDealloc(v110, -1, -1);
            swift_arrayDestroy(v111, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v111, -1, -1);
            swift_slowDealloc(v109, -1, -1);

            swift_errorRelease(v63);
          }
          else
          {
            swift_errorRelease(v63);
            swift_errorRelease(v63);
            swift_errorRelease(v63);

          }
          return;
        }
      }
      swift_once(&qword_100836CE0, sub_1000D7BA4);
      goto LABEL_66;
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  swift_once(&qword_100836CE0, sub_1000D7BA4);
  v17 = type metadata accessor for Logger(0);
  sub_10001AAA8(v17, (uint64_t)qword_100839DC0);
  swift_errorRetain(v34);
  v18 = swift_errorRetain(v34);
  v126 = Logger.logObject.getter(v18);
  v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v126, v19))
  {
    v20 = swift_slowAlloc(22, -1);
    v21 = (NSObject **)swift_slowAlloc(8, -1);
    v22 = swift_slowAlloc(32, -1);
    v127 = v22;
    *(_DWORD *)v20 = 136315394;
    v128 = v118;
    v23 = swift_getMetatypeMetadata(v118);
    v24 = String.init<A>(describing:)(&v128, v23);
    v26 = v25;
    v128 = sub_10001A820(v24, v25, &v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129);
    swift_bridgeObjectRelease(v26);
    *(_WORD *)(v20 + 12) = 2112;
    swift_errorRetain(v34);
    v27 = _swift_stdlib_bridgeErrorToNSError(v34);
    v128 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129);
    *v21 = v27;
    swift_errorRelease(v34);
    swift_errorRelease(v34);
    _os_log_impl((void *)&_mh_execute_header, v126, v19, "%s: Error fetching REMCDDueDateDeltaAlerts: %@", (uint8_t *)v20, 0x16u);
    v28 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v21, 1, v28);
    swift_slowDealloc(v21, -1, -1);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v20, -1, -1);

    swift_errorRelease(v34);
  }
  else
  {
    swift_errorRelease(v34);
    swift_errorRelease(v34);
    swift_errorRelease(v34);

  }
}

void sub_1000D92DC(_QWORD *a1@<X8>)
{
  *a1 = &_swiftEmptySetSingleton;
}

uint64_t sub_1000D92EC(uint64_t a1)
{
  uint64_t MetatypeMetadata;
  uint64_t v3;

  v3 = a1;
  MetatypeMetadata = swift_getMetatypeMetadata();
  return String.init<A>(describing:)(&v3, MetatypeMetadata);
}

uint64_t sub_1000D9318(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __objc2_class **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t result;
  uint64_t v23;
  void *ObjCClassFromMetadata;
  Class isa;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  char *v37;
  uint64_t v38;
  void *v39;
  Class v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  int64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  _QWORD *v52;

  v2 = sub_10001A630((uint64_t *)&unk_100839C80);
  v3 = __chkstk_darwin(v2);
  v5 = (__objc2_class **)((char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  v47 = (char *)&v45 - v6;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v46 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  v52 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v10);
  v11 = *(_QWORD *)(a1 + 64);
  v48 = v10;
  v49 = a1 + 64;
  v12 = -1;
  v13 = -1 << *(_BYTE *)(a1 + 32);
  if (-v13 < 64)
    v12 = ~(-1 << -(char)v13);
  v14 = v12 & v11;
  v50 = (unint64_t)(63 - v13) >> 6;
  v51 = a1;
  if (v10)
  {
    v15 = swift_bridgeObjectRetain(a1);
    v16 = 0;
    v10 = 0;
    while (1)
    {
      if (v14)
      {
        v17 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        v18 = v17 | (v10 << 6);
      }
      else
      {
        v19 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
        if (v19 >= v50)
          goto LABEL_54;
        v20 = *(_QWORD *)(v49 + 8 * v19);
        ++v10;
        if (!v20)
        {
          v10 = v19 + 1;
          if (v19 + 1 >= v50)
            goto LABEL_54;
          v20 = *(_QWORD *)(v49 + 8 * v10);
          if (!v20)
          {
            v10 = v19 + 2;
            if (v19 + 2 >= v50)
              goto LABEL_54;
            v20 = *(_QWORD *)(v49 + 8 * v10);
            if (!v20)
            {
              v10 = v19 + 3;
              if (v19 + 3 >= v50)
                goto LABEL_54;
              v20 = *(_QWORD *)(v49 + 8 * v10);
              if (!v20)
              {
                v21 = v19 + 4;
                if (v21 >= v50)
                  goto LABEL_54;
                v20 = *(_QWORD *)(v49 + 8 * v21);
                if (!v20)
                {
                  while (1)
                  {
                    v10 = v21 + 1;
                    if (__OFADD__(v21, 1))
                      break;
                    if (v10 >= v50)
                      goto LABEL_54;
                    v20 = *(_QWORD *)(v49 + 8 * v10);
                    ++v21;
                    if (v20)
                      goto LABEL_22;
                  }
LABEL_52:
                  __break(1u);
                  goto LABEL_53;
                }
                v10 = v21;
              }
            }
          }
        }
LABEL_22:
        v14 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v10 << 6);
      }
      (*(void (**)(__objc2_class **, unint64_t, uint64_t, __n128))(v8 + 16))(v5, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v8 + 72) * v18, v7, v15);
      (*(void (**)(__objc2_class **, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
      result = (*(uint64_t (**)(__objc2_class **, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7);
      if ((_DWORD)result == 1)
        goto LABEL_55;
      ++v16;
      v23 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
      ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v23);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      v26 = objc_msgSend(ObjCClassFromMetadata, "objectIDWithUUID:", isa);

      v27 = (*(uint64_t (**)(__objc2_class **, uint64_t))(v8 + 8))(v5, v7);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v27);
      v28 = v52[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v28);
      v29 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v26);
      specialized ContiguousArray._endMutation()(v29);
      a1 = v51;
      if (v16 == v48)
        goto LABEL_27;
    }
  }
  v15 = swift_bridgeObjectRetain(a1);
LABEL_27:
  v5 = off_1007D6708;
  if (!v14)
    goto LABEL_29;
LABEL_28:
  v30 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  v31 = v30 | (v10 << 6);
  v32 = v51;
  v33 = (uint64_t)v47;
  while (1)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t, __n128))(v8 + 16))(v33, *(_QWORD *)(v32 + 48) + *(_QWORD *)(v8 + 72) * v31, v7, v15);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v33, 0, 1, v7);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v33, 1, v7) == 1)
      goto LABEL_49;
    v37 = v46;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v46, v33, v7);
    v38 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    v39 = (void *)swift_getObjCClassFromMetadata(v38);
    v40 = UUID._bridgeToObjectiveC()().super.isa;
    v41 = objc_msgSend(v39, "objectIDWithUUID:", v40);

    v42 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v37, v7);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v42);
    v43 = v52[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v43);
    v44 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v43, v41);
    specialized ContiguousArray._endMutation()(v44);
    if (v14)
      goto LABEL_28;
LABEL_29:
    v34 = v10 + 1;
    v32 = v51;
    v33 = (uint64_t)v47;
    if (__OFADD__(v10, 1))
      goto LABEL_51;
    if (v34 >= v50)
    {
LABEL_48:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v8 + 56))(v47, 1, 1, v7, v15);
LABEL_49:
      swift_release(v32);
      sub_10000882C(v33, (uint64_t *)&unk_100839C80);
      return (uint64_t)v52;
    }
    v35 = *(_QWORD *)(v49 + 8 * v34);
    ++v10;
    if (!v35)
    {
      v10 = v34 + 1;
      if (v34 + 1 >= v50)
        goto LABEL_48;
      v35 = *(_QWORD *)(v49 + 8 * v10);
      if (!v35)
      {
        v10 = v34 + 2;
        if (v34 + 2 >= v50)
          goto LABEL_48;
        v35 = *(_QWORD *)(v49 + 8 * v10);
        if (!v35)
        {
          v10 = v34 + 3;
          if (v34 + 3 >= v50)
            goto LABEL_48;
          v35 = *(_QWORD *)(v49 + 8 * v10);
          if (!v35)
            break;
        }
      }
    }
LABEL_44:
    v14 = (v35 - 1) & v35;
    v31 = __clz(__rbit64(v35)) + (v10 << 6);
  }
  v36 = v34 + 4;
  if (v36 >= v50)
    goto LABEL_48;
  v35 = *(_QWORD *)(v49 + 8 * v36);
  if (v35)
  {
    v10 = v36;
    goto LABEL_44;
  }
  while (1)
  {
    v10 = v36 + 1;
    if (__OFADD__(v36, 1))
      break;
    if (v10 >= v50)
      goto LABEL_48;
    v35 = *(_QWORD *)(v49 + 8 * v10);
    ++v36;
    if (v35)
      goto LABEL_44;
  }
LABEL_53:
  __break(1u);
LABEL_54:
  result = (*(uint64_t (**)(__objc2_class **, uint64_t, uint64_t, uint64_t, __n128))(v8 + 56))(v5, 1, 1, v7, v15);
LABEL_55:
  __break(1u);
  return result;
}

uint64_t sub_1000D98A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v6[5];
  uint64_t v7;

  swift_getObjectType(v2);
  v6[2] = a1;
  v6[3] = a2;
  NSManagedObjectContext.rem_performAndWait<A>(_:)(&v7, sub_1000D9BBC, v6, &type metadata for Bool);
  return v7;
}

id RDStoreControllerMigrator_RemoveObsoleteDueDateDeltas.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerMigrator_RemoveObsoleteDueDateDeltas();
  return objc_msgSendSuper2(&v2, "init");
}

id RDStoreControllerMigrator_RemoveObsoleteDueDateDeltas.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerMigrator_RemoveObsoleteDueDateDeltas();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RDStoreControllerMigrator_RemoveObsoleteDueDateDeltas()
{
  return objc_opt_self(_TtC7remindd53RDStoreControllerMigrator_RemoveObsoleteDueDateDeltas);
}

void sub_1000D9BBC(BOOL *a1@<X8>)
{
  uint64_t v1;

  sub_1003CF360(*(void **)(v1 + 16), a1);
}

uint64_t sub_1000D9BD4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_1000D9C00()
{
  uint64_t v0;

  sub_1000D84B4(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(NSObject **)(v0 + 32));
}

uint64_t sub_1000D9C0C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1000D9C1C()
{
  void *v0;
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  Class isa;

  v0 = (void *)sub_10000D2BC(_swiftEmptyArrayStorage);
  v1 = type metadata accessor for REMCDDueDateDeltaAlert();
  v2 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(v1), "entity");
  objc_msgSend(v2, "setEntity:", v3);

  objc_msgSend(v2, "setAffectedStores:", 0);
  objc_msgSend(v2, "setPredicate:", v0);

  v4 = sub_10001A630((uint64_t *)&unk_100839E80);
  v5 = swift_allocObject(v4, 64, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  *(_QWORD *)(v5 + 32) = 0xD000000000000012;
  *(_QWORD *)(v5 + 40) = 0x80000001006F47A0;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v2, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease(v5).n128_f64[0]);

  objc_msgSend(v2, "setFetchBatchSize:", 50);
  return v2;
}

id sub_1000D9D74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  _BYTE v14[16];

  v2 = _s10PredicatesOMa(0);
  __chkstk_darwin(v2);
  v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)v4 = sub_1000D9318(a1);
  v4[8] = 1;
  swift_storeEnumTagMultiPayload(v4, v2, 0);
  sub_10000D2C0();
  v6 = v5;
  sub_1000CACA8((uint64_t)v4);
  v7 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v8 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(v7), "entity");
  objc_msgSend(v8, "setEntity:", v9);

  objc_msgSend(v8, "setAffectedStores:", 0);
  objc_msgSend(v8, "setPredicate:", v6);

  v10 = sub_10001A630((uint64_t *)&unk_100839E80);
  v11 = swift_allocObject(v10, 224, 7);
  *(_OWORD *)(v11 + 16) = xmmword_1006A3BF0;
  *(_QWORD *)(v11 + 32) = 0x696669746E656469;
  *(_QWORD *)(v11 + 40) = 0xEA00000000007265;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  *(_QWORD *)(v11 + 64) = 0xD000000000000016;
  *(_QWORD *)(v11 + 72) = 0x80000001006F4610;
  *(_QWORD *)(v11 + 88) = &type metadata for String;
  strcpy((char *)(v11 + 96), "ckCloudState");
  *(_BYTE *)(v11 + 109) = 0;
  *(_WORD *)(v11 + 110) = -5120;
  *(_QWORD *)(v11 + 120) = &type metadata for String;
  strcpy((char *)(v11 + 128), "ckIdentifier");
  *(_BYTE *)(v11 + 141) = 0;
  *(_WORD *)(v11 + 142) = -5120;
  *(_QWORD *)(v11 + 152) = &type metadata for String;
  strcpy((char *)(v11 + 160), "ckDirtyFlags");
  *(_BYTE *)(v11 + 173) = 0;
  *(_WORD *)(v11 + 174) = -5120;
  *(_QWORD *)(v11 + 216) = &type metadata for String;
  *(_QWORD *)(v11 + 184) = &type metadata for String;
  *(_QWORD *)(v11 + 192) = 0xD00000000000001ELL;
  *(_QWORD *)(v11 + 200) = 0x80000001006F6860;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v8, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease(v11).n128_f64[0]);

  objc_msgSend(v8, "setFetchBatchSize:", 50);
  return v8;
}

uint64_t sub_1000D9FF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100839E90);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100839E90);
  if (qword_100837620 != -1)
    swift_once(&qword_100837620, sub_1004A181C);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872040);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000DA1FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = sub_10001A630((uint64_t *)&unk_10083A270);
  v2 = swift_allocObject(v1, 112, 7);
  *(_OWORD *)(v2 + 16) = xmmword_1006A3C40;
  v4 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC7reminddP33_38651BD03EE367A00C80EB4E8CAA4E4629ChangeTrackingAccountProvider_accountDescription);
  v3 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC7reminddP33_38651BD03EE367A00C80EB4E8CAA4E4629ChangeTrackingAccountProvider_accountDescription
                 + 8);
  *(_QWORD *)(v2 + 56) = &type metadata for String;
  v5 = sub_1000184F8();
  v6 = 7104878;
  if (v3)
    v6 = v4;
  v7 = 0xE300000000000000;
  if (v3)
    v7 = v3;
  *(_QWORD *)(v2 + 32) = v6;
  *(_QWORD *)(v2 + 40) = v7;
  v8 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC7reminddP33_38651BD03EE367A00C80EB4E8CAA4E4629ChangeTrackingAccountProvider_accountID);
  v9 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC7reminddP33_38651BD03EE367A00C80EB4E8CAA4E4629ChangeTrackingAccountProvider_accountID
                 + 8);
  *(_QWORD *)(v2 + 96) = &type metadata for String;
  *(_QWORD *)(v2 + 104) = v5;
  *(_QWORD *)(v2 + 64) = v5;
  *(_QWORD *)(v2 + 72) = v8;
  *(_QWORD *)(v2 + 80) = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v9);
  return String.init(format:_:)(0x3E40253C3A4025, 0xE700000000000000, v2);
}

uint64_t type metadata accessor for ChangeTrackingAccountProvider()
{
  return objc_opt_self(_TtC7reminddP33_38651BD03EE367A00C80EB4E8CAA4E4629ChangeTrackingAccountProvider);
}

id sub_1000DA464()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDAssignmentNotificationEngine.BabysitTarget();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_1000DA494()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  sub_1000DA4D8();
  objc_autoreleasePoolPop(v0);
}

void sub_1000DA4D8()
{
  id v0;
  void *v1;
  NSString v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v0 = objc_msgSend((id)objc_opt_self(DABabysitter), "sharedBabysitter");
  if (v0)
  {
    v1 = v0;
    v2 = String._bridgeToObjectiveC()();
    objc_msgSend(v1, "giveAccountWithIDAnotherChance:", v2);

    if (qword_100836CE8 != -1)
      swift_once(&qword_100836CE8, sub_1000D9FF8);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10001AAA8(v3, (uint64_t)qword_100839E90);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      *(_DWORD *)v7 = 136446210;
      v21 = v8;
      v20 = 0x80000001006F6B70;
      v9 = sub_10001A630((uint64_t *)&unk_10083A370);
      v10 = Optional.descriptionOrNil.getter(v9);
      v12 = v11;
      v19 = sub_10001A820(v10, v11, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
      swift_bridgeObjectRelease(v12);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "RDAssignmentNotificationEngine: Reset babysitter upon enabled/disabled CloudKit account(s) for {waiterID: %{public}s}", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }

  }
  v13 = sub_1000DCA20();
  swift_bridgeObjectRelease(v13);
  if (qword_100836CE8 != -1)
    swift_once(&qword_100836CE8, sub_1000D9FF8);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10001AAA8(v14, (uint64_t)qword_100839E90);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "RDAssignmentNotificationEngine: (Re-)initialized changeTrackingHelpers upon enabled/disabled CloudKit account(s).", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

}

void sub_1000DA7A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[16];
  _BYTE v16[24];
  _BYTE v17[24];

  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_10083A360);
  __chkstk_darwin(v2);
  v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = v1 + OBJC_IVAR____TtC7remindd30RDAssignmentNotificationEngine_storeControllerObservationToken;
  swift_beginAccess(v1 + OBJC_IVAR____TtC7remindd30RDAssignmentNotificationEngine_storeControllerObservationToken, v17, 0, 0);
  sub_1000E542C(v9, (uint64_t)v4);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1000E5474((uint64_t)v4);
LABEL_5:
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 24));
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 40));
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 56));

    swift_unknownObjectRelease(*(_QWORD *)(v1 + 80));
    swift_release(*(_QWORD *)(v1 + 96));

    sub_1000E5474(v9);
    swift_bridgeObjectRelease(*(_QWORD *)(v1
                                        + OBJC_IVAR____TtC7remindd30RDAssignmentNotificationEngine_cloudKitAccountsDidChangeSubscriptions));
    swift_bridgeObjectRelease(*(_QWORD *)(v1
                                        + OBJC_IVAR____TtC7remindd30RDAssignmentNotificationEngine_currentUserShareParticipantIDsOverrideByListID));
    return;
  }
  sub_1000E54B4((uint64_t)v4, (uint64_t)v8);
  v10 = *(_QWORD *)(v1 + 96);
  v11 = *(os_unfair_lock_s **)(v10 + 40);
  os_unfair_lock_lock(v11);
  __chkstk_darwin(v12);
  *(_QWORD *)&v15[-16] = v8;
  swift_beginAccess(v10 + 48, v16, 33, 0);
  sub_1001CE554((uint64_t (*)(unint64_t, __n128))sub_1000E54F8, (uint64_t)&v15[-32]);
  v14 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 16);
  if (v14 >= v13)
  {
    sub_1001CED20(v13, v14);
    swift_endAccess(v16);
    os_unfair_lock_unlock(v11);
    sub_1000A3F78((uint64_t)v8);
    goto LABEL_5;
  }
  __break(1u);
}

uint64_t sub_1000DA9B4()
{
  uint64_t v0;

  sub_1000DA7A0();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000DA9D8()
{
  return type metadata accessor for RDAssignmentNotificationEngine(0);
}

uint64_t type metadata accessor for RDAssignmentNotificationEngine(uint64_t a1)
{
  uint64_t result;

  result = qword_100839F90;
  if (!qword_100839F90)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDAssignmentNotificationEngine);
  return result;
}

void sub_1000DAA1C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[14];

  v4[0] = &unk_1006A7A00;
  v4[1] = &unk_1006A7A00;
  v4[2] = &unk_1006A7A00;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[5] = &unk_1006A7A00;
  v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[8] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[9] = &unk_1006A7A18;
  sub_1000DFA6C(319);
  if (v3 <= 0x3F)
  {
    v4[10] = *(_QWORD *)(v2 - 8) + 64;
    v4[11] = &unk_1006A7A18;
    v4[12] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[13] = &unk_1006A7A30;
    swift_updateClassMetadata2(a1, 256, 14, v4, a1 + 80);
  }
}

void sub_1000DAAD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void *v12;
  uint64_t v13;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + 72);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once(&qword_100836CE8, sub_1000D9FF8);
    goto LABEL_4;
  }
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC7remindd30RDAssignmentNotificationEngine_started) & 1) == 0)
  {
    v12 = objc_autoreleasePoolPush();
    sub_1000DAC68(v0);
    objc_autoreleasePoolPop(v12);
    return;
  }
  if (qword_100836CE8 != -1)
    goto LABEL_9;
LABEL_4:
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10001AAA8(v7, (uint64_t)qword_100839E90);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDAssignmentNotificationEngine.start() must be called exactly once", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

}

void sub_1000DAC68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t inited;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t);
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint8_t *v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  _QWORD v59[2];
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t aBlock;
  _QWORD v75[4];
  _QWORD *v76;
  char v77[56];
  _QWORD *v78;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v71 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v70 = (char *)v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v68 = *(_QWORD *)(v4 - 8);
  v69 = v4;
  __chkstk_darwin(v4);
  v67 = (char *)v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchTimeInterval(0);
  v65 = *(_QWORD *)(v6 - 8);
  v66 = v6;
  __chkstk_darwin(v6);
  v8 = (_QWORD *)((char *)v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v73 = type metadata accessor for DispatchTime(0);
  v64 = *(_QWORD *)(v73 - 8);
  v9 = __chkstk_darwin(v73);
  v63 = (char *)v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v72 = (char *)v59 - v11;
  v12 = sub_10001A630((uint64_t *)&unk_10083A360);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)v59 - v16;
  if (qword_100836CE8 != -1)
    swift_once(&qword_100836CE8, sub_1000D9FF8);
  v18 = type metadata accessor for Logger(0);
  v62 = sub_10001AAA8(v18, (uint64_t)qword_100839E90);
  v19 = Logger.logObject.getter(v62);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Starting RDAssignmentNotificationEngine", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

  v22 = sub_1000DCA20();
  *(_BYTE *)(a1 + OBJC_IVAR____TtC7remindd30RDAssignmentNotificationEngine_started) = 1;
  if ((*(_BYTE *)(a1 + 120) & 1) != 0)
  {
    swift_bridgeObjectRelease(v22);
  }
  else
  {
    v60 = v22;
    v61 = v2;
    v23 = sub_10001A630((uint64_t *)&unk_10083A340);
    inited = swift_initStackObject(v23, v77);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
    v25 = objc_msgSend((id)objc_opt_self(REMAssignment), "cdEntityName");
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v28 = v27;

    *(_QWORD *)(inited + 32) = v26;
    *(_QWORD *)(inited + 40) = v28;
    v29 = sub_1002E6C54(inited);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, 1, &type metadata for String);
    v30 = *(void **)(a1 + 72);
    v31 = swift_allocObject(&unk_1007E32E0, 24, 7);
    swift_weakInit(v31 + 16, a1);
    swift_retain(v31);
    v59[1] = v30;
    sub_100395434(v29, v30, (uint64_t)sub_1000E5324, v31, (uint64_t)v17);
    swift_bridgeObjectRelease(v29);
    swift_release_n(v31, 2);
    v32 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v17, 0, 1, v32);
    sub_1000E532C((uint64_t)v17, (uint64_t)v15);
    v33 = a1 + OBJC_IVAR____TtC7remindd30RDAssignmentNotificationEngine_storeControllerObservationToken;
    swift_beginAccess(a1 + OBJC_IVAR____TtC7remindd30RDAssignmentNotificationEngine_storeControllerObservationToken, &aBlock, 33, 0);
    sub_1000E5374((uint64_t)v15, v33);
    v34 = swift_endAccess(&aBlock);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "os_transaction INIT {name: com.apple.remindd.assignmentNotificationEngine.start}", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

    v38 = os_transaction_create("com.apple.remindd.assignmentNotificationEngine.start");
    v39 = v63;
    static DispatchTime.now()(v38);
    *v8 = 5;
    v41 = v65;
    v40 = v66;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v65 + 104))(v8, enum case for DispatchTimeInterval.seconds(_:), v66);
    + infix(_:_:)(v39, v8);
    (*(void (**)(_QWORD *, uint64_t))(v41 + 8))(v8, v40);
    v42 = *(uint64_t (**)(char *, uint64_t))(v64 + 8);
    v43 = v42(v39, v73);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.default.getter(v44);
    v46 = os_log_type_enabled(v44, v45);
    v47 = v61;
    if (v46)
    {
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v48 = 134217984;
      aBlock = 5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v75);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "RDAssignmentNotificationEngine: dispatch to call refreshFromLastConsumedOnLaunchIfNeeded {after: %ld}", v48, 0xCu);
      swift_slowDealloc(v48, -1, -1);
    }

    v49 = (_QWORD *)swift_allocObject(&unk_1007E3308, 40, 7);
    v50 = v60;
    v49[2] = a1;
    v49[3] = v50;
    v49[4] = v38;
    v75[3] = sub_1000E53F0;
    v76 = v49;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v75[0] = 1107296256;
    v75[1] = sub_1000094C8;
    v75[2] = &unk_1007E3320;
    v51 = _Block_copy(&aBlock);
    swift_retain(a1);
    v52 = swift_unknownObjectRetain(v38);
    v53 = v67;
    static DispatchQoS.unspecified.getter(v52);
    v78 = _swiftEmptyArrayStorage;
    v54 = sub_1000D3124();
    v55 = sub_10001A630((uint64_t *)&unk_100838000);
    v56 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
    v57 = v70;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v55, v56, v47, v54);
    v58 = v72;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v72, v53, v57, v51);
    _Block_release(v51);
    swift_unknownObjectRelease(v38);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v57, v47);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v53, v69);
    v42(v58, v73);
    swift_release(v76);
  }
}

void sub_1000DB360(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _BYTE v11[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v11, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    v5 = objc_autoreleasePoolPush();
    sub_1000DB484();
    objc_autoreleasePoolPop(v5);
    swift_release(v4);
  }
  else
  {
    if (qword_100836CE8 != -1)
      swift_once(&qword_100836CE8, sub_1000D9FF8);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10001AAA8(v6, (uint64_t)qword_100839E90);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.info.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Received storeController changed notification after RDAssignmentNotificationEngine was deallocated", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

  }
}

uint64_t sub_1000DB484()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  if (qword_100836CE8 != -1)
    swift_once(&qword_100836CE8, sub_1000D9FF8);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100839E90);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "os_transaction INIT {name: com.apple.remindd.assignmentNotificationEngine.storeControllerChange}", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  v5 = os_transaction_create("com.apple.remindd.assignmentNotificationEngine.storeControllerChange");
  v6 = sub_1000DCA20();
  v7 = swift_allocObject(&unk_1007E3380, 24, 7);
  *(_QWORD *)(v7 + 16) = v5;
  swift_unknownObjectRetain(v5);
  sub_1000DBB30((uint64_t)v6, 0, (void (*)(_QWORD))sub_1000E5424, v7);
  swift_unknownObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  return swift_release(v7);
}

void sub_1000DB5D4()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  if (qword_100836CE8 != -1)
    swift_once(&qword_100836CE8, sub_1000D9FF8);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100839E90);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "os_transaction RELEASE {name: com.apple.remindd.assignmentNotificationEngine.storeControllerChange}", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
  }

}

void sub_1000DB6A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint32_t *p_ivar_base_size;
  uint64_t v11;
  id v12;
  id i;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  id v46;
  uint64_t v47;

  v5 = objc_autoreleasePoolPush();
  v6 = swift_allocObject(&unk_1007E3358, 24, 7);
  *(_QWORD *)(v6 + 16) = a3;
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0)
      v37 = a2;
    else
      v37 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_unknownObjectRetain_n(a3, 2);
    swift_bridgeObjectRetain(a2);
    v7 = _CocoaArrayWrapper.endIndex.getter(v37);
    if (v7)
      goto LABEL_3;
  }
  else
  {
    v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_unknownObjectRetain_n(a3, 2);
    swift_bridgeObjectRetain(a2);
    if (v7)
    {
LABEL_3:
      v41 = v7 - 1;
      if (v7 < 1)
        __break(1u);
      v38 = v6;
      v39 = v5;
      v40 = a3;
      v8 = 0;
      v45 = 0;
      v9 = a2 & 0xC000000000000001;
      v43 = a2 + 32;
      p_ivar_base_size = &RDDataAccess.ivar_base_size;
      v42 = v7;
      v44 = a2 & 0xC000000000000001;
      if ((a2 & 0xC000000000000001) != 0)
        goto LABEL_9;
LABEL_10:
      for (i = *(id *)(v43 + 8 * v8); ; i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a2))
      {
        v14 = i;
        if ((v45 & 1) != 0)
        {

        }
        else
        {
          v15 = objc_msgSend(i, *((SEL *)p_ivar_base_size + 321));
          v16 = objc_msgSend(v15, "loggingDescription");
          swift_unknownObjectRelease(v15);
          v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
          v19 = v18;

          v46 = 0;
          v47 = 0;
          v20 = objc_msgSend(v14, "compareCurrentChangeTokenToLastConsumedWithResult:error:", &v47, &v46);
          v21 = v46;
          if (!v20)
          {
            v22 = v46;
            v23 = (void *)_convertNSErrorToError(_:)(v21);

            swift_willThrow(v24);
            if (qword_100836CE8 != -1)
              swift_once(&qword_100836CE8, sub_1000D9FF8);
            v25 = type metadata accessor for Logger(0);
            sub_10001AAA8(v25, (uint64_t)qword_100839E90);
            swift_errorRetain(v23);
            swift_errorRetain(v23);
            v26 = swift_bridgeObjectRetain(v19);
            v27 = Logger.logObject.getter(v26);
            v28 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v27, v28))
            {
              v29 = swift_slowAlloc(22, -1);
              v30 = a2;
              v31 = swift_slowAlloc(64, -1);
              v47 = v31;
              *(_DWORD *)v29 = 136446466;
              swift_bridgeObjectRetain(v19);
              *(_QWORD *)(v29 + 4) = sub_10001A820(v17, v19, &v47);
              swift_bridgeObjectRelease_n(v19, 3);
              *(_WORD *)(v29 + 12) = 2080;
              v46 = v23;
              swift_errorRetain(v23);
              v32 = sub_10001A630((uint64_t *)&unk_10083AA20);
              v33 = String.init<A>(describing:)(&v46, v32);
              v35 = v34;
              *(_QWORD *)(v29 + 14) = sub_10001A820(v33, v34, &v47);
              swift_bridgeObjectRelease(v35);
              swift_errorRelease(v23);
              swift_errorRelease(v23);
              _os_log_impl((void *)&_mh_execute_header, v27, v28, "RDAssignmentNotificationEngine: Failed to compareCurrentChangeTokenToLastConsumed {account: %{public}s, error: %s}", (uint8_t *)v29, 0x16u);
              swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
              v36 = v31;
              a2 = v30;
              v7 = v42;
              swift_slowDealloc(v36, -1, -1);
              swift_slowDealloc(v29, -1, -1);

              swift_errorRelease(v23);
            }
            else
            {
              swift_errorRelease(v23);
              swift_bridgeObjectRelease_n(v19, 2);
              swift_errorRelease(v23);
              swift_errorRelease(v23);

            }
            v9 = v44;
            p_ivar_base_size = (_DWORD *)(&RDDataAccess + 8);
LABEL_7:
            if (v7 == ++v8)
            {
              swift_bridgeObjectRelease(a2);
              v5 = v39;
              a3 = v40;
              v6 = v38;
              goto LABEL_30;
            }
            if (!v9)
              goto LABEL_10;
            continue;
          }
          v11 = v47;
          v12 = v46;

          swift_bridgeObjectRelease(v19);
          if (v11 != 4)
            goto LABEL_7;
        }
        if (v41 == v8)
        {
          swift_bridgeObjectRelease(a2);
          v6 = v38;
          sub_1000DBB30(a2, 1, (void (*)(_QWORD))sub_1000E5420, v38);
          v5 = v39;
          a3 = v40;
          goto LABEL_31;
        }
        ++v8;
        v45 = 1;
        if (!v9)
          goto LABEL_10;
LABEL_9:
        ;
      }
    }
  }
  swift_bridgeObjectRelease(a2);
LABEL_30:
  sub_1000E40B0(0);
LABEL_31:
  swift_release(v6);
  swift_unknownObjectRelease(a3);
  objc_autoreleasePoolPop(v5);
}

void sub_1000DBB30(uint64_t a1, char a2, void (*a3)(_QWORD), uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  NSString v23;
  id v24;
  id v25;
  char v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  NSString v43;
  id v44;
  uint64_t v45;
  uint64_t inited;
  uint64_t v47;
  NSString v48;
  unint64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  void *v60;
  void (*v61)(_QWORD, __n128);
  uint64_t v62;
  id v63;
  void *v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  os_log_type_t v74;
  uint8_t *v75;
  _QWORD *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  void *v85;
  void (*v86)(_QWORD, __n128);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  char v91[56];

  v5 = v4;
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = (void *)v5[9];
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v15 = v14;
  v16 = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v16 & 1) == 0)
  {
    __break(1u);
LABEL_45:
    if (a1 < 0)
      v78 = a1;
    else
      v78 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v17 = _CocoaArrayWrapper.endIndex.getter(v78);
    swift_bridgeObjectRelease(a1);
    if (v17)
      goto LABEL_4;
    goto LABEL_49;
  }
  if ((unint64_t)a1 >> 62)
    goto LABEL_45;
  v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v17)
  {
LABEL_4:
    v86 = (void (*)(_QWORD, __n128))a3;
    v87 = a4;
    v18 = 3;
    if ((a2 & 1) != 0)
      v18 = 5;
    v19 = v5[v18];
    swift_bridgeObjectRetain(v19);
    v20 = objc_msgSend((id)objc_opt_self(DABabysitter), "sharedBabysitter");
    if (v20)
    {
      v21 = v20;
      v22 = v5[8];
      v23 = String._bridgeToObjectiveC()();
      v24 = objc_msgSend(v21, "tokenByRegisteringAccount:forOperationWithName:", v22, v23, swift_bridgeObjectRelease(v19).n128_f64[0]);

      if (v24)
      {
        v25 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
        v26 = objc_msgSend(v25, "enableAssignmentNotifications");

        v26 ^= 1u;
        v27 = sub_1000DD09C(a1, v26);
        if ((v26 & 1) != 0)
        {
          v32 = (uint64_t)v86;
          v33 = v87;
          if (qword_100836CE8 != -1)
            swift_once(&qword_100836CE8, sub_1000D9FF8);
          v66 = type metadata accessor for Logger(0);
          v67 = sub_10001AAA8(v66, (uint64_t)qword_100839E90);
          v68 = Logger.logObject.getter(v67);
          v69 = static os_log_type_t.default.getter(v68);
          if (!os_log_type_enabled(v68, v69))
            goto LABEL_41;
          v70 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v70 = 0;
          _os_log_impl((void *)&_mh_execute_header, v68, v69, "RDAssignmentNotificationEngine: User has disabled assignment notifications.", v70, 2u);
          v71 = v70;
        }
        else
        {
          sub_1000DC6FC(0, 0xE000000000000000, (uint64_t)v27);
          v30 = v29;
          v31 = HIBYTE(v29) & 0xF;
          if ((v29 & 0x2000000000000000) == 0)
            v31 = v28 & 0xFFFFFFFFFFFFLL;
          v32 = (uint64_t)v86;
          v33 = v87;
          if (v31)
          {
            v34 = v28;
            if (qword_100836CE8 != -1)
              swift_once(&qword_100836CE8, sub_1000D9FF8);
            v35 = type metadata accessor for Logger(0);
            sub_10001AAA8(v35, (uint64_t)qword_100839E90);
            v36 = swift_bridgeObjectRetain(v30);
            v37 = Logger.logObject.getter(v36);
            v38 = static os_log_type_t.default.getter(v37);
            if (os_log_type_enabled(v37, v38))
            {
              v39 = (uint8_t *)swift_slowAlloc(12, -1);
              v85 = (void *)swift_slowAlloc(32, -1);
              v90 = v85;
              *(_DWORD *)v39 = 136446210;
              swift_bridgeObjectRetain(v30);
              v88 = sub_10001A820(v34, v30, (uint64_t *)&v90);
              v32 = (uint64_t)v86;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
              swift_bridgeObjectRelease_n(v30, 3);
              _os_log_impl((void *)&_mh_execute_header, v37, v38, "RDAssignmentNotificationEngine: Assignments to notify in this change set {stats: %{public}s}", v39, 0xCu);
              v40 = v85;
              swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v40, -1, -1);
              swift_slowDealloc(v39, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n(v30, 2);
            }
            v33 = v87;
            goto LABEL_42;
          }
          swift_bridgeObjectRelease(v29);
          if (qword_100836CE8 != -1)
            swift_once(&qword_100836CE8, sub_1000D9FF8);
          v72 = type metadata accessor for Logger(0);
          v73 = sub_10001AAA8(v72, (uint64_t)qword_100839E90);
          v68 = Logger.logObject.getter(v73);
          v74 = static os_log_type_t.default.getter(v68);
          if (!os_log_type_enabled(v68, v74))
          {
LABEL_41:

LABEL_42:
            v76 = (_QWORD *)swift_allocObject(&unk_1007E32B8, 40, 7);
            v76[2] = v24;
            v76[3] = v32;
            v76[4] = v33;
            v77 = v24;
            sub_1000E51CC(v32, v33);
            sub_1000DF7D4((uint64_t)v27, (uint64_t)sub_1000E52D4, (uint64_t)v76);

            swift_bridgeObjectRelease(v27);
            swift_release(v76);
            return;
          }
          v75 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v75 = 0;
          _os_log_impl((void *)&_mh_execute_header, v68, v74, "RDAssignmentNotificationEngine: No assignment to notify in this change set", v75, 2u);
          v71 = v75;
        }
        swift_slowDealloc(v71, -1, -1);
        goto LABEL_41;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v19);
    }
    v41 = (void *)objc_opt_self(REMError);
    v42 = v5[3];
    swift_bridgeObjectRetain(v42);
    v43 = String._bridgeToObjectiveC()();
    v44 = objc_msgSend(v41, "babySatErrorWithOperationName:", v43, swift_bridgeObjectRelease(v42).n128_f64[0]);

    v45 = sub_10001A630((uint64_t *)&unk_10083DAB0);
    inited = swift_initStackObject(v45, v91);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
    *(_QWORD *)(inited + 32) = 0x696669746E656469;
    *(_QWORD *)(inited + 40) = 0xEA00000000007265;
    v47 = v5[3];
    swift_bridgeObjectRetain(v47);
    v48 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v47);
    *(_QWORD *)(inited + 48) = v48;
    v49 = sub_1002AFCB4(inited);
    type metadata accessor for Analytics(0, v50);
    v51 = v5[6];
    v52 = v5[7];
    swift_bridgeObjectRetain(v52);
    v53 = sub_1003B0B84(v49);
    swift_bridgeObjectRelease(v49);
    v54 = v44;
    static Analytics.postEvent(_:payload:error:performAutoBugCaptureOnError:)(v51, v52, v53, v44, 1);
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease(v53);

    if (qword_100836CE8 != -1)
      swift_once(&qword_100836CE8, sub_1000D9FF8);
    v55 = type metadata accessor for Logger(0);
    sub_10001AAA8(v55, (uint64_t)qword_100839E90);
    v56 = swift_retain(v5);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.fault.getter();
    a3 = (void (*)(_QWORD))v58;
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc(12, -1);
      v60 = (void *)swift_slowAlloc(32, -1);
      v90 = v60;
      *(_DWORD *)v59 = 136446210;
      v88 = sub_10001A820(0xD000000000000039, 0x80000001006F6B70, (uint64_t *)&v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
      swift_release(v5);
      _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)a3, "Babysitting RDAssignmentNotificationEngine because it failed too many times {waiterID: %{public}s}.", v59, 0xCu);
      swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1, -1);
      swift_slowDealloc(v59, -1, -1);

    }
    else
    {

      swift_release(v5);
    }
    v61 = v86;
    if (v17 >= 1)
    {
      swift_bridgeObjectRetain(a1);
      v62 = 0;
      do
      {
        if ((a1 & 0xC000000000000001) != 0)
          v63 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v62, a1);
        else
          v63 = *(id *)(a1 + 8 * v62 + 32);
        v64 = v63;
        ++v62;
        v90 = v63;
        sub_1000DC46C(&v90);

      }
      while (v17 != v62);
      v65 = swift_bridgeObjectRelease(a1);
      if (v61)
        v61(0, v65);

      return;
    }
    __break(1u);
    goto LABEL_56;
  }
LABEL_49:
  if (qword_100836CE8 != -1)
LABEL_56:
    swift_once(&qword_100836CE8, sub_1000D9FF8);
  v79 = type metadata accessor for Logger(0);
  v80 = sub_10001AAA8(v79, (uint64_t)qword_100839E90);
  v81 = Logger.logObject.getter(v80);
  v82 = static os_log_type_t.default.getter(v81);
  if (os_log_type_enabled(v81, v82))
  {
    v83 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v83 = 0;
    _os_log_impl((void *)&_mh_execute_header, v81, v82, "RDAssignmentNotificationEngine: No account eligible for assignment change tracking, no assignment to notify.", v83, 2u);
    swift_slowDealloc(v83, -1, -1);
  }

  if (a3)
    a3(0);
}

void sub_1000DC46C(id *a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *a1;
  v2 = objc_msgSend(*a1, "account");
  v3 = objc_msgSend(v2, "loggingDescription");
  swift_unknownObjectRelease(v2);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  objc_msgSend(v1, "markChangesConsumed:", 1);
  if (qword_100836CE8 != -1)
    swift_once(&qword_100836CE8, sub_1000D9FF8);
  v7 = type metadata accessor for Logger(0);
  sub_10001AAA8(v7, (uint64_t)qword_100839E90);
  v8 = v1;
  v9 = swift_bridgeObjectRetain(v6);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(22, -1);
    v13 = swift_slowAlloc(64, -1);
    v20 = v13;
    *(_DWORD *)v12 = 136446466;
    swift_bridgeObjectRetain(v6);
    v18 = (id)sub_10001A820(v4, v6, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease_n(v6, 3);
    *(_WORD *)(v12 + 12) = 2082;
    v18 = objc_msgSend(v8, "upToToken");
    v14 = sub_10001A630(&qword_10083A358);
    v15 = String.init<A>(describing:)(&v18, v14);
    v17 = v16;
    v18 = (id)sub_10001A820(v15, v16, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);

    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDAssignmentNotificationEngine: Mark to current token as consumed due to Babysitting {account: %{public}s, token: %{public}s}", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v6, 2);
  }
}

void sub_1000DC6FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  int64_t v31;

  v28 = a3 + 64;
  v5 = 1 << *(_BYTE *)(a3 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a3 + 64);
  v29 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v30 = a3;
  swift_bridgeObjectRetain(a3);
  for (i = 0; ; i = v31)
  {
    if (v7)
    {
      v15 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v31 = i;
      v16 = v15 | (i << 6);
      goto LABEL_27;
    }
    v17 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v17 >= v29)
      goto LABEL_29;
    v18 = *(_QWORD *)(v28 + 8 * v17);
    v19 = i + 1;
    if (!v18)
    {
      v19 = i + 2;
      if (i + 2 >= v29)
        goto LABEL_29;
      v18 = *(_QWORD *)(v28 + 8 * v19);
      if (!v18)
      {
        v19 = i + 3;
        if (i + 3 >= v29)
          goto LABEL_29;
        v18 = *(_QWORD *)(v28 + 8 * v19);
        if (!v18)
        {
          v19 = i + 4;
          if (i + 4 >= v29)
            goto LABEL_29;
          v18 = *(_QWORD *)(v28 + 8 * v19);
          if (!v18)
            break;
        }
      }
    }
LABEL_26:
    v7 = (v18 - 1) & v18;
    v31 = v19;
    v16 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_27:
    v21 = 8 * v16;
    v22 = *(void **)(*(_QWORD *)(v30 + 48) + v21);
    v23 = *(_QWORD *)(*(_QWORD *)(v30 + 56) + v21);
    v24 = sub_10001A630((uint64_t *)&unk_10083A270);
    v25 = swift_allocObject(v24, 112, 7);
    *(_OWORD *)(v25 + 16) = xmmword_1006A3C40;
    v26 = v22;
    swift_bridgeObjectRetain(v23);
    v27 = objc_msgSend(v26, "objectID");
    *(_QWORD *)(v25 + 56) = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    *(_QWORD *)(v25 + 64) = sub_1000E51DC(&qword_10083A350, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    *(_QWORD *)(v25 + 32) = v27;
    if ((v23 & 0xC000000000000001) != 0)
    {
      if (v23 < 0)
        v9 = v23;
      else
        v9 = v23 & 0xFFFFFFFFFFFFFF8;
      v10 = __CocoaDictionary.count.getter(v9);
    }
    else
    {
      v10 = *(_QWORD *)(v23 + 16);
    }
    *(_QWORD *)(v25 + 96) = &type metadata for Int;
    *(_QWORD *)(v25 + 104) = &protocol witness table for Int;
    *(_QWORD *)(v25 + 72) = v10;
    v11 = String.init(format:_:)(0xD00000000000001FLL, 0x80000001006F6CD0, v25);
    v13 = v12;
    swift_bridgeObjectRetain(a2);
    v14._countAndFlagsBits = v11;
    v14._object = v13;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v13);

  }
  v20 = i + 5;
  if (i + 5 >= v29)
  {
LABEL_29:
    swift_release(v30);
    return;
  }
  v18 = *(_QWORD *)(v28 + 8 * v20);
  if (v18)
  {
    v19 = i + 5;
    goto LABEL_26;
  }
  while (1)
  {
    v19 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v19 >= v29)
      goto LABEL_29;
    v18 = *(_QWORD *)(v28 + 8 * v19);
    ++v20;
    if (v18)
      goto LABEL_26;
  }
LABEL_31:
  __break(1u);
}

_QWORD *sub_1000DCA20()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v30;
  _QWORD v31[3];
  _BYTE v32[16];
  id v33;

  v1 = objc_msgSend(objc_allocWithZone((Class)REMStore), "initWithDaemonController:", *(_QWORD *)(v0 + 104));
  v33 = 0;
  v2 = objc_msgSend(v1, "fetchActiveCloudKitAccountObjectIDsWithFetchOption:error:", 2, &v33);
  v3 = v33;
  if (!v2)
  {
    v10 = v33;
    v11 = _convertNSErrorToError(_:)(v3);

    swift_willThrow(v12);
    if (qword_100836CE8 != -1)
      swift_once(&qword_100836CE8, sub_1000D9FF8);
    v13 = type metadata accessor for Logger(0);
    sub_10001AAA8(v13, (uint64_t)qword_100839E90);
    swift_errorRetain(v11);
    v14 = swift_errorRetain(v11);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.info.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = (void *)swift_slowAlloc(32, -1);
      v33 = v18;
      *(_DWORD *)v17 = 136446210;
      swift_getErrorValue(v11, v32, v31);
      v19 = Error.rem_errorDescription.getter(v31[1], v31[2]);
      v21 = v20;
      v30 = sub_10001A820(v19, v20, (uint64_t *)&v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31);
      swift_bridgeObjectRelease(v21);
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "RDAssignmentNotificationEngine: Failed to fetch CloudKit accounts. Not tracking changes. {error: %{public}s}", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {
      swift_errorRelease(v11);
      swift_errorRelease(v11);
    }

    swift_errorRelease(v11);
    return _swiftEmptyArrayStorage;
  }
  v4 = v2;
  v5 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);
  v7 = v3;

  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v22 = v6;
    else
      v22 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v23 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v6);
    if (v23)
      goto LABEL_4;
    goto LABEL_15;
  }
  if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_15:
    swift_bridgeObjectRelease(v6);
    if (qword_100836CE8 != -1)
      swift_once(&qword_100836CE8, sub_1000D9FF8);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_10001AAA8(v24, (uint64_t)qword_100839E90);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.info.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "RDAssignmentNotificationEngine: Not tracking changes since there is no logged in or enabled CloudKit account.", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    return _swiftEmptyArrayStorage;
  }
LABEL_4:
  swift_retain(v0);
  v8 = v1;
  v9 = sub_1000E3CEC(v6, v0, v8);
  swift_bridgeObjectRelease(v6);
  swift_release(v0);

  return v9;
}

void sub_1000DCE04(void **a1@<X0>, void *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char *v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  NSString v36;
  Class isa;
  id v38;
  uint64_t v39;
  _QWORD *v40;

  v40 = a3;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  v10 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ChangeTrackingAccountProvider()), "init");
  v11 = objc_msgSend(v9, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v11);

  v12 = UUID.uuidString.getter();
  v14 = v13;
  v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v8, v5);
  v16 = (uint64_t *)&v10[OBJC_IVAR____TtC7reminddP33_38651BD03EE367A00C80EB4E8CAA4E4629ChangeTrackingAccountProvider_accountID];
  v17 = *(_QWORD *)&v10[OBJC_IVAR____TtC7reminddP33_38651BD03EE367A00C80EB4E8CAA4E4629ChangeTrackingAccountProvider_accountID
                      + 8];
  *v16 = v12;
  v16[1] = v14;
  swift_bridgeObjectRelease(v17);
  v18 = *(void **)&v10[OBJC_IVAR____TtC7reminddP33_38651BD03EE367A00C80EB4E8CAA4E4629ChangeTrackingAccountProvider_rem_accountObjectID];
  *(_QWORD *)&v10[OBJC_IVAR____TtC7reminddP33_38651BD03EE367A00C80EB4E8CAA4E4629ChangeTrackingAccountProvider_rem_accountObjectID] = v9;
  v19 = v9;

  v20 = objc_msgSend(v19, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v20);

  v21 = UUID.uuidString.getter();
  v23 = v22;
  v15(v8, v5);
  v24 = (uint64_t *)&v10[OBJC_IVAR____TtC7reminddP33_38651BD03EE367A00C80EB4E8CAA4E4629ChangeTrackingAccountProvider_accountDescription];
  v25 = *(_QWORD *)&v10[OBJC_IVAR____TtC7reminddP33_38651BD03EE367A00C80EB4E8CAA4E4629ChangeTrackingAccountProvider_accountDescription
                      + 8];
  *v24 = v21;
  v24[1] = v23;
  swift_bridgeObjectRelease(v25);
  v26 = sub_10001A630((uint64_t *)&unk_10083A340);
  v27 = swift_allocObject(v26, 48, 7);
  *(_OWORD *)(v27 + 16) = xmmword_1006A3C00;
  v28 = (void *)objc_opt_self(REMAssignment);
  v29 = v10;
  v30 = a2;
  v31 = objc_msgSend(v28, "cdEntityName");
  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v34 = v33;

  *(_QWORD *)(v27 + 32) = v32;
  *(_QWORD *)(v27 + 40) = v34;
  v35 = objc_allocWithZone((Class)REMDAChangeTrackingHelper);
  v36 = String._bridgeToObjectiveC()();
  isa = Array._bridgeToObjectiveC()().super.isa;
  v38 = objc_msgSend(v35, "initWithREMDAAccount:clientName:withREMStore:entityNames:", v29, v36, v30, isa, swift_bridgeObjectRelease(v27).n128_f64[0]);

  *v40 = v38;
}

void *sub_1000DD09C(uint64_t a1, char a2)
{
  uint64_t v2;
  id v5;
  uint64_t v6;
  void *result;
  uint64_t v8;
  char v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;

  v5 = objc_msgSend(objc_allocWithZone((Class)REMStore), "initWithDaemonController:", *(_QWORD *)(v2 + 104));
  v14 = &_swiftEmptyDictionarySingleton;
  if (!((unint64_t)a1 >> 62))
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (void *)swift_bridgeObjectRetain(a1);
    if (v6)
      goto LABEL_3;
LABEL_14:

    swift_bridgeObjectRelease(a1);
    return &_swiftEmptyDictionarySingleton;
  }
  if (a1 < 0)
    v12 = a1;
  else
    v12 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  result = (void *)_CocoaArrayWrapper.endIndex.getter(v12);
  v6 = (uint64_t)result;
  if (!result)
    goto LABEL_14;
LABEL_3:
  if (v6 < 1)
  {
    __break(1u);
  }
  else
  {
    v8 = 0;
    v9 = a2 & 1;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a1);
      else
        v10 = *(id *)(a1 + 8 * v8 + 32);
      v11 = v10;
      ++v8;
      v13 = v10;
      sub_1000DD1EC(&v13, v9, v5, v2, &v14);

    }
    while (v6 != v8);

    swift_bridgeObjectRelease(a1);
    return v14;
  }
  return result;
}

void sub_1000DD1EC(id *a1, char a2, void *a3, uint64_t a4, _QWORD *a5)
{
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  NSObject *v33;
  uint64_t v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  _QWORD *v39;
  NSObject *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  _QWORD *v50;
  id v51;
  id v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  id v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  Class isa;
  double v89;
  id v90;
  os_log_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  void *v96;
  void *v97;
  id v98;
  id v99;
  os_log_t v100;
  NSObject *v101;
  NSObject *v102;
  os_log_type_t v103;
  uint64_t v104;
  _QWORD *v105;
  NSObject *v106;
  NSObject *v107;
  uint64_t v108;
  NSObject *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  os_log_type_t v114;
  uint8_t *v115;
  NSObject *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  void *v120;
  int64_t v121;
  void *v122;
  void *v123;
  id v124;
  void *v125;
  void *v126;
  void *v127;
  uint64_t v128;
  void *v132;
  NSObject *v133;
  NSObject *v134;
  uint64_t v135;
  os_log_t loga;
  os_log_t log;
  os_log_t logb;
  id v139;
  _QWORD v140[3];
  char v141[8];
  uint64_t v142;
  os_log_t v143;
  _QWORD v144[2];

  v6 = *a1;
  v7 = objc_msgSend(*a1, "account");
  v8 = objc_msgSend(v7, "loggingDescription");
  swift_unknownObjectRelease(v7);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v12 = objc_msgSend(v6, "sinceToken");
  if (!v12)
  {
    if (qword_100836CE8 != -1)
      goto LABEL_42;
    goto LABEL_9;
  }
  v13 = v12;
  v14 = objc_msgSend(v6, "upToToken");
  if (!v14)
  {
    if (qword_100836CE8 != -1)
      swift_once(&qword_100836CE8, sub_1000D9FF8);
    v34 = type metadata accessor for Logger(0);
    sub_10001AAA8(v34, (uint64_t)qword_100839E90);
    v35 = v13;
    swift_bridgeObjectRetain(v11);
    v20 = v35;
    v36 = Logger.logObject.getter(v20);
    v37 = static os_log_type_t.info.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc(22, -1);
      v39 = (_QWORD *)swift_slowAlloc(8, -1);
      v126 = v13;
      v40 = swift_slowAlloc(32, -1);
      v143 = v40;
      *(_DWORD *)v38 = 136446466;
      swift_bridgeObjectRetain(v11);
      v142 = sub_10001A820(v9, v11, (uint64_t *)&v143);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143);
      swift_bridgeObjectRelease_n(v11, 3);
      *(_WORD *)(v38 + 12) = 2114;
      v142 = (uint64_t)v20;
      v41 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143);
      *v39 = v126;

      _os_log_impl((void *)&_mh_execute_header, v36, v37, "RDAssignmentNotificationEngine: No updated change token from change tracking (no changes) {account: %{public}s, since: %{public}@}", (uint8_t *)v38, 0x16u);
      v42 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v39, 1, v42);
      swift_slowDealloc(v39, -1, -1);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v38, -1, -1);

      return;
    }

    swift_bridgeObjectRelease_n(v11, 2);
    goto LABEL_23;
  }
  v15 = v14;
  v132 = v6;
  if ((a2 & 1) != 0)
  {
    if (qword_100836CE8 != -1)
      swift_once(&qword_100836CE8, sub_1000D9FF8);
    v16 = type metadata accessor for Logger(0);
    sub_10001AAA8(v16, (uint64_t)qword_100839E90);
    v17 = v13;
    v18 = v15;
    swift_bridgeObjectRetain(v11);
    v19 = v17;
    v20 = v18;
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v125 = v13;
      v23 = swift_slowAlloc(32, -1);
      v122 = v15;
      v24 = (_QWORD *)swift_slowAlloc(16, -1);
      v133 = swift_slowAlloc(32, -1);
      v143 = v133;
      *(_DWORD *)v23 = 136446722;
      swift_bridgeObjectRetain(v11);
      v142 = sub_10001A820(v9, v11, (uint64_t *)&v143);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143);
      swift_bridgeObjectRelease_n(v11, 3);
      *(_WORD *)(v23 + 12) = 2114;
      v142 = (uint64_t)v19;
      v25 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143);
      *v24 = v125;

      *(_WORD *)(v23 + 22) = 2114;
      v142 = (uint64_t)v20;
      v26 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143);
      v24[1] = v122;

      _os_log_impl((void *)&_mh_execute_header, v21, v22, "RDAssignmentNotificationEngine: User opts to not posting assignment notifications, mark change set as consumed right away {account: %{public}s, since: %{public}@, upTo: %{public}@}", (uint8_t *)v23, 0x20u);
      v27 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v24, 2, v27);
      swift_slowDealloc(v24, -1, -1);
      swift_arrayDestroy(v133, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v133, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v11, 2);
    }
    objc_msgSend(v132, "markChangesConsumed");

LABEL_23:
    return;
  }
  if (qword_100836CE8 != -1)
    swift_once(&qword_100836CE8, sub_1000D9FF8);
  v43 = type metadata accessor for Logger(0);
  sub_10001AAA8(v43, (uint64_t)qword_100839E90);
  v44 = v13;
  v45 = v15;
  swift_bridgeObjectRetain(v11);
  v124 = v44;
  v46 = v45;
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.default.getter(v47);
  v127 = v13;
  v123 = v15;
  if (os_log_type_enabled(v47, v48))
  {
    v134 = v47;
    v49 = swift_slowAlloc(32, -1);
    v50 = (_QWORD *)swift_slowAlloc(16, -1);
    loga = (os_log_t)swift_slowAlloc(32, -1);
    v143 = loga;
    *(_DWORD *)v49 = 136446722;
    swift_bridgeObjectRetain(v11);
    v142 = sub_10001A820(v9, v11, (uint64_t *)&v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143);
    swift_bridgeObjectRelease_n(v11, 3);
    *(_WORD *)(v49 + 12) = 2114;
    v142 = (uint64_t)v124;
    v51 = v124;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143);
    *v50 = v13;

    *(_WORD *)(v49 + 22) = 2114;
    v6 = v132;
    v142 = (uint64_t)v46;
    v52 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143);
    v50[1] = v123;

    _os_log_impl((void *)&_mh_execute_header, v134, v48, "RDAssignmentNotificationEngine: Processing change set {account: %{public}s, since: %{public}@, upTo: %{public}@}", (uint8_t *)v49, 0x20u);
    v53 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v50, 2, v53);
    swift_slowDealloc(v50, -1, -1);
    swift_arrayDestroy(loga, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(loga, -1, -1);
    swift_slowDealloc(v49, -1, -1);

    v54 = v124;
  }
  else
  {

    v54 = v124;
    swift_bridgeObjectRelease_n(v11, 2);
  }
  v55 = v46;
  v56 = sub_1000151B0(0, (unint64_t *)&unk_10083FDE0, REMAssignment_ptr);
  v57 = objc_msgSend(v6, "changedModelObjectsOfModelClass:ofChangeType:", swift_getObjCClassFromMetadata(v56), 0);
  if (!v57)
  {
LABEL_51:
    v98 = v54;
    v99 = v55;
    v100 = (os_log_t)v98;
    v101 = v99;
    v102 = Logger.logObject.getter(v101);
    v103 = static os_log_type_t.info.getter(v102);
    if (os_log_type_enabled(v102, v103))
    {
      v104 = swift_slowAlloc(22, -1);
      v105 = (_QWORD *)swift_slowAlloc(16, -1);
      *(_DWORD *)v104 = 138543618;
      v143 = v100;
      logb = v100;
      v106 = v100;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144);
      *v105 = v127;

      *(_WORD *)(v104 + 12) = 2114;
      v143 = v101;
      v107 = v101;
      v100 = logb;
      v6 = v132;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144);
      v105[1] = v123;

      _os_log_impl((void *)&_mh_execute_header, v102, v103, "RDAssignmentNotificationEngine: No inserted assignments found in change {since: %{public}@, upTo: %{public}@}", (uint8_t *)v104, 0x16u);
      v108 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v105, 2, v108);
      swift_slowDealloc(v105, -1, -1);
      swift_slowDealloc(v104, -1, -1);
    }
    else
    {

      v102 = v100;
    }

    objc_msgSend(v6, "markChangesConsumed");
    return;
  }
  v58 = v57;
  v59 = sub_10001A630(&qword_10083A2F0);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v58, v59);

  v143 = (os_log_t)&_swiftEmptyDictionarySingleton;
  v120 = v55;
  if ((unint64_t)v11 >> 62)
  {
    if (v11 < 0)
      v82 = v11;
    else
      v82 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v60 = _CocoaArrayWrapper.endIndex.getter(v82);
    if (v60)
      goto LABEL_28;
    goto LABEL_47;
  }
  v60 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v11);
  if (!v60)
  {
LABEL_47:
    swift_bridgeObjectRelease_n(v11, 2);
    v83 = (uint64_t)v143;
    if (v143[2].isa)
    {
      v84 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v85 = sub_10001A630(&qword_10083A2F8);
      v86 = sub_1000A5F84(&qword_10083A300, &qword_10083A2F8, (uint64_t)&protocol conformance descriptor for [A : B].Keys);
      v87 = Sequence.elements<A>(ofType:)(v84, v85, v84, v86);
      isa = Array._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)&v89 = swift_bridgeObjectRelease(v87).n128_u64[0];
      v143 = 0;
      v90 = objc_msgSend(a3, "fetchRemindersWithObjectIDs:error:", isa, &v143, v89);

      v91 = v143;
      if (v90)
      {
        v92 = sub_1000151B0(0, &qword_100846630, REMReminder_ptr);
        v93 = sub_1000E51DC((unint64_t *)&qword_10083A1F0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
        v94 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v90, v84, v92, v93);
        v95 = v91;

        sub_1000DE348((uint64_t)&_swiftEmptyDictionarySingleton, v94);
        v97 = v96;
        swift_bridgeObjectRelease(v94);
      }
      else
      {
        v109 = v143;
        v110 = _convertNSErrorToError(_:)(v91);

        swift_willThrow(v111);
        swift_errorRetain(v110);
        v112 = swift_errorRetain(v110);
        v113 = Logger.logObject.getter(v112);
        v114 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v113, v114))
        {
          v115 = (uint8_t *)swift_slowAlloc(12, -1);
          v116 = swift_slowAlloc(32, -1);
          v143 = v116;
          *(_DWORD *)v115 = 136315138;
          swift_getErrorValue(v110, v141, v140);
          v117 = Error.localizedDescription.getter(v140[1], v140[2]);
          v119 = v118;
          v142 = sub_10001A820(v117, v118, (uint64_t *)&v143);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143);
          swift_bridgeObjectRelease(v119);
          swift_errorRelease(v110);
          swift_errorRelease(v110);
          _os_log_impl((void *)&_mh_execute_header, v113, v114, "RDAssignmentNotificationEngine: Error ocurred when fetching inserted assignments' reminders {error: %s}", v115, 0xCu);
          swift_arrayDestroy(v116, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v116, -1, -1);
          swift_slowDealloc(v115, -1, -1);

          swift_errorRelease(v110);
        }
        else
        {
          swift_errorRelease(v110);
          swift_errorRelease(v110);
          swift_errorRelease(v110);

        }
        v97 = &_swiftEmptyDictionarySingleton;
      }
      swift_retain(a4);
      swift_bridgeObjectRetain(v83);
      sub_1000E3AE4((uint64_t)v97, a4, v83, a5);
      swift_bridgeObjectRelease(v97);
      swift_release(a4);
      swift_bridgeObjectRelease_n(v83, 2);
      objc_msgSend(v132, "markChangesConsumed");

      return;
    }
    swift_bridgeObjectRelease(v143);
    v54 = v124;
    v55 = v120;
    goto LABEL_51;
  }
LABEL_28:
  log = (os_log_t)(v11 & 0xC000000000000001);
  v9 = 4;
  v135 = v60;
  v121 = v11;
  while (1)
  {
    v61 = v9 - 4;
    if (!log)
      break;
    v62 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, v11);
    v63 = v9 - 3;
    if (__OFADD__(v61, 1))
      goto LABEL_41;
LABEL_34:
    v64 = objc_opt_self(REMAssignment);
    v65 = swift_dynamicCastObjCClass(v62, v64);
    if (v65)
    {
      v66 = (void *)v65;
      v142 = v65;
      swift_unknownObjectRetain(v62);
      v67 = objc_msgSend(v66, "reminderID");
      v139 = v67;
      v68 = sub_10001A630(&qword_10083A308);
      v69 = sub_1000A5F84((unint64_t *)&unk_10083A310, (uint64_t *)&unk_100851AE0, (uint64_t)&protocol conformance descriptor for [A]);
      v70 = v68;
      v60 = v135;
      Dictionary<>.append(_:toCollectionUnderKey:)(&v142, &v139, v70, v69);
      swift_unknownObjectRelease_n(v62, 2);

    }
    else
    {
      v71 = swift_unknownObjectRetain_n(v62, 2);
      v72 = Logger.logObject.getter(v71);
      v73 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v72, v73))
      {
        v74 = swift_slowAlloc(12, -1);
        v128 = swift_slowAlloc(32, -1);
        v142 = v128;
        *(_DWORD *)v74 = 136315138;
        v75 = objc_msgSend(v62, "description");
        v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
        v78 = v77;

        v79 = v76;
        v6 = v132;
        *(_QWORD *)(v74 + 4) = sub_10001A820(v79, v78, &v142);
        swift_unknownObjectRelease_n(v62, 2);
        v80 = v78;
        v11 = v121;
        swift_bridgeObjectRelease(v80);
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "RDAssignmentNotificationEngine: Tracked insertion is not an REMAssignment, huh? {inserted: %s}", (uint8_t *)v74, 0xCu);
        swift_arrayDestroy(v128, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v128, -1, -1);
        v81 = v74;
        v60 = v135;
        swift_slowDealloc(v81, -1, -1);
        swift_unknownObjectRelease(v62);

      }
      else
      {

        swift_unknownObjectRelease_n(v62, 3);
      }
    }
    if (v63 == v60)
      goto LABEL_47;
    ++v9;
  }
  v62 = *(void **)(v11 + 8 * v9);
  swift_unknownObjectRetain(v62);
  v63 = v9 - 3;
  if (!__OFADD__(v61, 1))
    goto LABEL_34;
LABEL_41:
  __break(1u);
LABEL_42:
  swift_once(&qword_100836CE8, sub_1000D9FF8);
LABEL_9:
  v28 = type metadata accessor for Logger(0);
  sub_10001AAA8(v28, (uint64_t)qword_100839E90);
  v29 = swift_bridgeObjectRetain(v11);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = swift_slowAlloc(32, -1);
    v143 = v33;
    *(_DWORD *)v32 = 136446210;
    swift_bridgeObjectRetain(v11);
    v142 = sub_10001A820(v9, v11, (uint64_t *)&v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143);
    swift_bridgeObjectRelease_n(v11, 3);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "RDAssignmentNotificationEngine: No since-token from change tracking {account: %{public}s}", v32, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v11, 2);
  }
}

void sub_1000DE348(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];

  v35[2] = a1;
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v3 = a2;
    else
      v3 = a2 & 0xFFFFFFFFFFFFFF8;
    v33 = 0;
    v4 = 0;
    v5 = 0;
    v6 = __CocoaDictionary.makeIterator()(v3) | 0x8000000000000000;
  }
  else
  {
    v7 = -1 << *(_BYTE *)(a2 + 32);
    v4 = ~v7;
    v33 = a2 + 64;
    v8 = -v7;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v5 = v9 & *(_QWORD *)(a2 + 64);
    v6 = a2;
  }
  v10 = swift_bridgeObjectRetain(a2);
  v11 = 0;
  v32 = (unint64_t)(v4 + 64) >> 6;
  if ((v6 & 0x8000000000000000) != 0)
    goto LABEL_13;
  while (1)
  {
    if (v5)
    {
      v12 = (v5 - 1) & v5;
      v13 = __clz(__rbit64(v5)) | (v11 << 6);
      v14 = v11;
      goto LABEL_32;
    }
    v23 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v23 >= v32)
      goto LABEL_35;
    v24 = *(_QWORD *)(v33 + 8 * v23);
    v14 = v11 + 1;
    if (!v24)
    {
      v14 = v11 + 2;
      if (v11 + 2 >= v32)
        goto LABEL_35;
      v24 = *(_QWORD *)(v33 + 8 * v14);
      if (!v24)
      {
        v14 = v11 + 3;
        if (v11 + 3 >= v32)
          goto LABEL_35;
        v24 = *(_QWORD *)(v33 + 8 * v14);
        if (!v24)
        {
          v14 = v11 + 4;
          if (v11 + 4 >= v32)
            goto LABEL_35;
          v24 = *(_QWORD *)(v33 + 8 * v14);
          if (!v24)
          {
            v14 = v11 + 5;
            if (v11 + 5 >= v32)
              goto LABEL_35;
            v24 = *(_QWORD *)(v33 + 8 * v14);
            if (!v24)
            {
              v25 = v11 + 6;
              while (v32 != v25)
              {
                v24 = *(_QWORD *)(v33 + 8 * v25++);
                if (v24)
                {
                  v14 = v25 - 1;
                  goto LABEL_31;
                }
              }
LABEL_35:
              sub_1000C6560(v6);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v12 = (v24 - 1) & v24;
    v13 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_32:
    v26 = 8 * v13;
    v27 = *(void **)(*(_QWORD *)(v6 + 56) + v26);
    v20 = *(id *)(*(_QWORD *)(v6 + 48) + v26);
    v22 = v27;
    if (!v20)
      goto LABEL_35;
    while (1)
    {
      v35[0] = v22;
      v28 = v22;
      v29 = objc_msgSend(v28, "list");
      v34 = (uint64_t)v29;
      v30 = sub_10001A630(&qword_10083A320);
      v31 = sub_1000A5F84(&qword_10083A328, (uint64_t *)&unk_10083A330, (uint64_t)&protocol conformance descriptor for [A]);
      Dictionary<>.append(_:toCollectionUnderKey:)(v35, &v34, v30, v31);

      v11 = v14;
      v5 = v12;
      if ((v6 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v15 = __CocoaDictionary.Iterator.next()(v10);
      if (v15)
      {
        v17 = v15;
        v18 = v16;
        v34 = v15;
        v19 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
        swift_unknownObjectRetain(v17);
        swift_dynamicCast(v35, &v34, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
        v20 = (id)v35[0];
        swift_unknownObjectRelease(v17);
        v34 = v18;
        v21 = sub_1000151B0(0, &qword_100846630, REMReminder_ptr);
        swift_unknownObjectRetain(v18);
        swift_dynamicCast(v35, &v34, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v22 = (id)v35[0];
        swift_unknownObjectRelease(v18);
        v14 = v11;
        v12 = v5;
        if (v20)
          continue;
      }
      goto LABEL_35;
    }
  }
  __break(1u);
}

void sub_1000DE69C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  unint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  _QWORD *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  id v40;
  void *v41;
  uint64_t v42;

  v5 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a2
                 + OBJC_IVAR____TtC7remindd30RDAssignmentNotificationEngine_currentUserShareParticipantIDsOverrideByListID);
  if (v7)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(a2
                                       + OBJC_IVAR____TtC7remindd30RDAssignmentNotificationEngine_currentUserShareParticipantIDsOverrideByListID));
    v8 = v5;
    swift_bridgeObjectRetain(v6);
    v9 = objc_msgSend(v8, "objectID");
    v10 = v9;
    if (*(_QWORD *)(v7 + 16))
    {
      v11 = sub_1002C66DC((uint64_t)v9);
      if ((v12 & 1) != 0)
      {
        v13 = (uint64_t *)(*(_QWORD *)(v7 + 56) + 16 * v11);
        v15 = *v13;
        v14 = v13[1];
        swift_bridgeObjectRetain(v14);
        swift_bridgeObjectRelease(v7);

        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease(v7);

  }
  else
  {
    v16 = v5;
    swift_bridgeObjectRetain(v6);
  }
  v17 = objc_msgSend(v5, "currentUserShareParticipantID");
  if (!v17)
  {
    swift_bridgeObjectRelease(v6);
    if (qword_100836CE8 == -1)
      goto LABEL_19;
    goto LABEL_37;
  }
  v18 = v17;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v14 = v19;

LABEL_9:
  v41 = &_swiftEmptyDictionarySingleton;
  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v33 = v6;
    else
      v33 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v20 = _CocoaArrayWrapper.endIndex.getter(v33);
    if (v20)
      goto LABEL_11;
LABEL_26:
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v6);
    v24 = (uint64_t)&_swiftEmptyDictionarySingleton;
    goto LABEL_27;
  }
  v20 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v6);
  if (!v20)
    goto LABEL_26;
LABEL_11:
  if (v20 >= 1)
  {
    v21 = 0;
    do
    {
      if ((v6 & 0xC000000000000001) != 0)
        v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v6);
      else
        v22 = *(id *)(v6 + 8 * v21 + 32);
      v23 = v22;
      ++v21;
      v40 = v22;
      sub_1000DEAD0(&v40, a3, v15, v14, v5);

    }
    while (v20 != v21);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v6);
    v24 = (uint64_t)v41;
LABEL_27:
    swift_bridgeObjectRelease(v6);
    if ((v24 & 0xC000000000000001) != 0)
    {
      if (v24 < 0)
        v34 = v24;
      else
        v34 = v24 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v24);
      v35 = __CocoaDictionary.count.getter(v34);
      swift_bridgeObjectRelease(v24);
      if (v35)
        goto LABEL_32;
    }
    else if (*(_QWORD *)(v24 + 16))
    {
LABEL_32:
      v36 = v5;
      swift_bridgeObjectRetain(v24);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a4);
      v40 = (id)*a4;
      *a4 = 0x8000000000000000;
      sub_10028BEAC(v24, v36, isUniquelyReferenced_nonNull_native);
      v38 = *a4;
      *a4 = v40;

      swift_bridgeObjectRelease(v38);
LABEL_35:
      swift_bridgeObjectRelease(v24);
      return;
    }

    goto LABEL_35;
  }
  __break(1u);
LABEL_37:
  swift_once(&qword_100836CE8, sub_1000D9FF8);
LABEL_19:
  v25 = type metadata accessor for Logger(0);
  sub_10001AAA8(v25, (uint64_t)qword_100839E90);
  v26 = v5;
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.info.getter(v27);
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v29 = 138543362;
    v31 = objc_msgSend(v26, "objectID");
    v41 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
    *v30 = v31;

    _os_log_impl((void *)&_mh_execute_header, v27, v28, "RDAssignmentNotificationEngine: Current user is not participating the list of this inserted assignment {list: %{public}@}", v29, 0xCu);
    v32 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v30, 1, v32);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);

  }
  else
  {

  }
}

void sub_1000DEAD0(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  uint64_t v10;
  _QWORD *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  _QWORD *v15;
  id v16;
  const char *v17;
  id v18;
  void *v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  id v37;
  id v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  _QWORD *v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  _QWORD *v48;
  id v49;
  NSObject *log;
  id v51;
  uint64_t v52;

  v9 = *a1;
  if ((objc_msgSend(*a1, "isCompleted") & 1) != 0)
  {
    if (qword_100836CE8 != -1)
      swift_once(&qword_100836CE8, sub_1000D9FF8);
    v10 = type metadata accessor for Logger(0);
    sub_10001AAA8(v10, (uint64_t)qword_100839E90);
    v11 = v9;
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.info.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v14 = 138543362;
      v16 = objc_msgSend(v11, "objectID");
      v51 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
      *v15 = v16;

      v17 = "RDAssignmentNotificationEngine: Reminder is already completed, skipping from showing assignment notification"
            " {reminder: %{public}@}";
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v12, v13, v17, v14, 0xCu);
      v30 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v15, 1, v30);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

      return;
    }
    goto LABEL_19;
  }
  v18 = objc_msgSend(v9, "objectID");
  v19 = v18;
  if (!*(_QWORD *)(a2 + 16) || (v20 = sub_1002C66DC((uint64_t)v18), (v21 & 1) == 0))
  {

    if (qword_100836CE8 != -1)
      swift_once(&qword_100836CE8, sub_1000D9FF8);
    v28 = type metadata accessor for Logger(0);
    sub_10001AAA8(v28, (uint64_t)qword_100839E90);
    v11 = v9;
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v14 = 138543362;
      v29 = objc_msgSend(v11, "objectID");
      v51 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
      *v15 = v29;

      v17 = "RDAssignmentNotificationEngine: Can't find the correspinding inserted assignments from the reminderID, how c"
            "ome? {reminder: %{public}@}";
      goto LABEL_18;
    }
LABEL_19:

    return;
  }
  v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v20);
  swift_bridgeObjectRetain(v22);

  swift_bridgeObjectRetain(a4);
  v23 = v9;
  v24 = (uint64_t)sub_1000E3934(v22, a3, a4, v23);
  swift_bridgeObjectRelease(a4);

  if ((unint64_t)v24 >> 62)
  {
    if (v24 < 0)
      v31 = v24;
    else
      v31 = v24 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v24);
    v32 = _CocoaArrayWrapper.endIndex.getter(v31);
    swift_bridgeObjectRelease(v24);
    if (v32 > 1)
    {
LABEL_10:
      swift_bridgeObjectRelease(v24);
      if (qword_100836CE8 != -1)
        swift_once(&qword_100836CE8, sub_1000D9FF8);
      v26 = type metadata accessor for Logger(0);
      sub_10001AAA8(v26, (uint64_t)qword_100839E90);
      v11 = v23;
      v12 = Logger.logObject.getter(v11);
      v13 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc(12, -1);
        v15 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v14 = 138543362;
        v27 = objc_msgSend(v11, "objectID");
        v51 = v27;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
        *v15 = v27;

        v17 = "RDAssignmentNotificationEngine: Should have selected only the ONE most recent current assignment, not mult"
              "iple {reminder: %{public}@}";
        goto LABEL_18;
      }
      goto LABEL_19;
    }
    swift_bridgeObjectRetain(v24);
    v25 = _CocoaArrayWrapper.endIndex.getter(v31);
    swift_bridgeObjectRelease(v24);
  }
  else
  {
    v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v25 > 1)
      goto LABEL_10;
  }
  if (!v25)
  {
    swift_bridgeObjectRelease(v24);
    return;
  }
  if ((v24 & 0xC000000000000001) != 0)
  {
    v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v24);
  }
  else
  {
    if (!*(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v33 = *(id *)(v24 + 32);
  }
  v34 = v33;
  swift_bridgeObjectRelease(v24);
  if (qword_100836CE8 != -1)
    swift_once(&qword_100836CE8, sub_1000D9FF8);
  v35 = type metadata accessor for Logger(0);
  sub_10001AAA8(v35, (uint64_t)qword_100839E90);
  v36 = v23;
  v37 = a5;
  v38 = v34;
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.info.getter(v39);
  if (os_log_type_enabled(v39, v40))
  {
    v41 = swift_slowAlloc(32, -1);
    v42 = (_QWORD *)swift_slowAlloc(24, -1);
    *(_DWORD *)v41 = 138543874;
    log = v39;
    v43 = v36;
    v44 = objc_msgSend(v37, "objectID");
    v51 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
    *v42 = v44;

    *(_WORD *)(v41 + 12) = 2114;
    v45 = objc_msgSend(v43, "objectID");
    v51 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
    v42[1] = v45;

    *(_WORD *)(v41 + 22) = 2114;
    v46 = objc_msgSend(v38, "objectID");
    v51 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
    v42[2] = v46;
    v36 = v43;

    _os_log_impl((void *)&_mh_execute_header, log, v40, "RDAssignmentNotificationEngine: This is an inserted assignment we want to notify {list: %{public}@, reminder: %{public}@, assignment: %{public}@}", (uint8_t *)v41, 0x20u);
    v47 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v42, 3, v47);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v41, -1, -1);

  }
  else
  {

  }
  v48 = v36;
  v49 = v38;
  sub_1001912D8((uint64_t)v48, (uint64_t)v49);

}

BOOL sub_1000DF1F4(id *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  unint64_t v18;
  uint64_t v19;
  double v20;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  char v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v38 = a4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v12 = objc_msgSend(*a1, "assigneeID");
  v13 = objc_msgSend(v12, "uuid");

  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v14 = UUID.uuidString.getter();
  v16 = v15;
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v10, v7);
  v41 = v14;
  v42 = v16;
  v39 = a2;
  v40 = a3;
  v18 = sub_1000E525C();
  v19 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v39, &type metadata for String, &type metadata for String, v18, v18);
  *(_QWORD *)&v20 = swift_bridgeObjectRelease(v16).n128_u64[0];
  if (v19)
    return 0;
  v37 = v11;
  v22 = objc_msgSend(v11, "originatorID", v20);
  v23 = objc_msgSend(v22, "uuid");

  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v24 = UUID.uuidString.getter();
  v26 = v25;
  v17(v10, v7);
  v41 = v24;
  v42 = v26;
  v39 = a2;
  v40 = a3;
  v27 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v39, &type metadata for String, &type metadata for String, v18, v18);
  *(_QWORD *)&v28 = swift_bridgeObjectRelease(v26).n128_u64[0];
  if (!v27)
    return 0;
  v29 = objc_msgSend(v38, "assignmentContext", v28);
  v30 = v29;
  if (v29)
  {
    v31 = objc_msgSend(v29, "currentAssignment");

    v32 = v37;
    if (v31)
    {
      v30 = objc_msgSend(v31, "objectID");

    }
    else
    {
      v30 = 0;
    }
  }
  else
  {
    v32 = v37;
  }
  v33 = objc_msgSend(v32, "objectID");
  v34 = v33;
  if (!v30)
  {
    if (!v33)
      return 1;
    goto LABEL_17;
  }
  if (!v33)
  {
    v34 = v30;
LABEL_17:

    return 0;
  }
  sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v35 = v30;
  v36 = static NSObject.== infix(_:_:)(v35);

  return (v36 & 1) != 0;
}

void sub_1000DF4CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id i;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v27 = 0;
    v2 = 0;
    v3 = 0;
    v4 = __CocoaDictionary.makeIterator()(a1) | 0x8000000000000000;
  }
  else
  {
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v2 = ~v5;
    v27 = a1 + 64;
    v6 = -v5;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v3 = v7 & *(_QWORD *)(a1 + 64);
    v4 = a1;
  }
  v8 = swift_bridgeObjectRetain(v1);
  v9 = 0;
  v26 = (unint64_t)(v2 + 64) >> 6;
  if ((v4 & 0x8000000000000000) != 0)
    goto LABEL_12;
LABEL_10:
  if (v3)
  {
    v10 = (v3 - 1) & v3;
    v11 = __clz(__rbit64(v3)) | (v9 << 6);
    v12 = v9;
    goto LABEL_31;
  }
  v21 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v21 < v26)
    {
      v22 = *(_QWORD *)(v27 + 8 * v21);
      v12 = v9 + 1;
      if (v22)
        goto LABEL_30;
      v12 = v9 + 2;
      if (v9 + 2 >= v26)
        goto LABEL_35;
      v22 = *(_QWORD *)(v27 + 8 * v12);
      if (v22)
        goto LABEL_30;
      v12 = v9 + 3;
      if (v9 + 3 >= v26)
        goto LABEL_35;
      v22 = *(_QWORD *)(v27 + 8 * v12);
      if (v22)
        goto LABEL_30;
      v12 = v9 + 4;
      if (v9 + 4 >= v26)
        goto LABEL_35;
      v22 = *(_QWORD *)(v27 + 8 * v12);
      if (v22)
      {
LABEL_30:
        v10 = (v22 - 1) & v22;
        v11 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_31:
        v24 = 8 * v11;
        v25 = *(void **)(*(_QWORD *)(v4 + 56) + v24);
        v18 = *(id *)(*(_QWORD *)(v4 + 48) + v24);
        for (i = v25; v18; v10 = v3)
        {
          if ((objc_msgSend(v18, "isOriginatorNullified") & 1) == 0)
            break;

          v9 = v12;
          v3 = v10;
          if ((v4 & 0x8000000000000000) == 0)
            goto LABEL_10;
LABEL_12:
          v13 = __CocoaDictionary.Iterator.next()(v8);
          v15 = v13;
          if (!v13)
            break;
          v16 = v14;
          v28 = v13;
          v17 = sub_1000151B0(0, (unint64_t *)&unk_10083FDE0, REMAssignment_ptr);
          swift_unknownObjectRetain(v15);
          swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v17, 7);
          v18 = v29;
          swift_unknownObjectRelease(v15);
          v28 = v16;
          v19 = sub_1000151B0(0, &qword_100846630, REMReminder_ptr);
          swift_unknownObjectRetain(v16);
          swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
          i = v29;
          swift_unknownObjectRelease(v16);
          v12 = v9;
        }
        goto LABEL_35;
      }
      v12 = v9 + 5;
      if (v9 + 5 < v26)
      {
        v22 = *(_QWORD *)(v27 + 8 * v12);
        if (!v22)
        {
          v23 = v9 + 6;
          while (v26 != v23)
          {
            v22 = *(_QWORD *)(v27 + 8 * v23++);
            if (v22)
            {
              v12 = v23 - 1;
              goto LABEL_30;
            }
          }
          goto LABEL_35;
        }
        goto LABEL_30;
      }
    }
LABEL_35:
    sub_1000C6560(v4);
    return;
  }
  __break(1u);
}

uint64_t sub_1000DF7D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t result;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD aBlock[5];
  uint64_t v34;

  v4 = v3;
  v27 = a1;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v29 = *(_QWORD *)(v10 - 8);
  v30 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchPredicate(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (uint64_t *)((char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = (void *)v4[9];
  *v16 = v17;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  v28 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v14 + 8))(v16, v13);
  if ((v17 & 1) != 0)
  {
    v19 = dispatch_group_create();
    swift_retain(v4);
    sub_1000E3750(v27, v4, v19);
    swift_release(v4);
    v20 = swift_allocObject(&unk_1007E3240, 32, 7);
    *(_QWORD *)(v20 + 16) = a2;
    *(_QWORD *)(v20 + 24) = a3;
    aBlock[4] = sub_1000E51A0;
    v34 = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000094C8;
    aBlock[3] = &unk_1007E3258;
    v21 = _Block_copy(aBlock);
    v22 = sub_1000E51CC(a2, a3);
    static DispatchQoS.unspecified.getter(v22);
    v32 = _swiftEmptyArrayStorage;
    v23 = sub_1000D3124();
    v24 = sub_10001A630((uint64_t *)&unk_100838000);
    v25 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v24, v25, v7, v23);
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v12, v9, v28, v21);

    _Block_release(v21);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v7);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v30);
    return swift_release(v34);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000DFA6C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100839FA0)
  {
    v2 = type metadata accessor for RDStoreControllerNotificationCenter.Token(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100839FA0);
  }
}

uint64_t type metadata accessor for RDAssignmentNotificationEngine.BabysitTarget()
{
  return objc_opt_self(_TtCC7remindd30RDAssignmentNotificationEngine13BabysitTarget);
}

void sub_1000DFAE0(uint64_t a1, uint64_t *a2, NSObject *a3)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  void *v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t *v45;
  NSObject *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  uint64_t v49;
  _QWORD *v50;
  id v51;
  uint64_t *v52;
  id v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD **v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  void *v74;
  void *v75;
  id v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(id *, _QWORD);
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  _QWORD *v91;
  id v92;
  uint64_t v93;
  _QWORD *v94;
  __n128 v95;
  uint64_t v96;
  void *v97;
  void *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  _QWORD **v103;
  uint64_t *v104;
  NSObject *v105;
  os_log_type_t v106;
  _BOOL4 v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t *v110;
  id v111;
  id v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  void *v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  void *v135;
  void *v136;
  id v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v144;
  void (*v145)(id *, _QWORD);
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t *v151;
  id v152;
  uint64_t *v153;
  uint64_t *v154;
  id v155;
  void *v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  __n128 v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  os_log_type_t v166;
  uint8_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  void *v175;
  uint64_t *v176;
  id v177;
  uint64_t *v178;
  id v179;
  id v180;
  char *v181;
  uint64_t v182;
  void *v183;
  void *v184;
  void (*v185)(char *, uint64_t *);
  uint64_t *v186;
  Swift::String v187;
  unint64_t v188;
  Swift::String v189;
  unint64_t v190;
  id v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  void *v196;
  Swift::String v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t *v200;
  _QWORD *v201;
  dispatch_group_t v202;
  uint64_t *v203;
  id v204;
  NSObject *v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t *v209;
  uint64_t *v210;
  uint64_t *v211;
  uint64_t v212;
  char *v213;
  uint64_t *v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t *v218;
  uint64_t v219;
  dispatch_group_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  void *v225;
  uint64_t v226;
  id v227;
  unint64_t v228[3];
  uint64_t v229;
  uint64_t v230;
  char v231;
  _QWORD *v232;

  v7 = (uint64_t *)type metadata accessor for UUID(0);
  v8 = *(v7 - 1);
  __chkstk_darwin(v7);
  v10 = (char *)&v207 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for RDUserNotificationType(0);
  v222 = *(_QWORD *)(v11 - 8);
  v223 = v11;
  __chkstk_darwin(v11);
  v221 = (uint64_t *)((char *)&v207 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(id *)a1;
  swift_bridgeObjectRetain(v13);
  v15 = objc_msgSend(v14, "shareeContext");
  if (!v15)
  {
    swift_bridgeObjectRelease(v13);
    if (qword_100836CE8 != -1)
      swift_once(&qword_100836CE8, sub_1000D9FF8);
    v86 = type metadata accessor for Logger(0);
    sub_10001AAA8(v86, (uint64_t)qword_100839E90);
    v87 = v14;
    v88 = Logger.logObject.getter(v87);
    v89 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v88, v89))
    {
      v90 = (uint8_t *)swift_slowAlloc(12, -1);
      v91 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v90 = 138543362;
      v92 = -[NSObject objectID](v87, "objectID");
      v227 = v92;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, v228);
      *v91 = v92;

      _os_log_impl((void *)&_mh_execute_header, v88, v89, "RDAssignmentNotificationEngine: List has no sharee, huh? {listID: %{public}@}", v90, 0xCu);
      v93 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v91, 1, v93);
      swift_slowDealloc(v91, -1, -1);
      swift_slowDealloc(v90, -1, -1);

      return;
    }

    goto LABEL_37;
  }
  v16 = v15;
  v220 = a3;
  v17 = objc_msgSend(v15, "sharees");
  v226 = v13;
  v18 = v17;

  v19 = sub_1000151B0(0, &qword_10083A228, REMSharee_ptr);
  v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, v19);

  v21 = v226;
  v225 = (void *)(v226 & 0xC000000000000001);
  if ((v226 & 0xC000000000000001) != 0)
  {
    if (v226 < 0)
      v22 = v226;
    else
      v22 = v226 & 0xFFFFFFFFFFFFFF8;
    v23 = __CocoaDictionary.count.getter(v22);
    if (v23)
      goto LABEL_7;
LABEL_35:

    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v20);
    return;
  }
  v23 = *(_QWORD *)(v226 + 16);
  if (!v23)
    goto LABEL_35;
LABEL_7:
  v218 = (uint64_t *)v14;
  v219 = v23;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v20);
  sub_1000E216C(v21, v20);
  v24 = v21;
  v26 = v25;
  v27 = v3;
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease_n(v20, 2);
  v227 = v26;
  v28 = sub_10001A630(&qword_10083A230);
  v29 = sub_1000A5F84(&qword_10083A238, &qword_10083A230, (uint64_t)&protocol conformance descriptor for [A]);
  v30 = sub_1000E51DC((unint64_t *)&unk_10083A240, &qword_10083A228, REMSharee_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  v31 = Sequence<>.unique()(v28, v29, v30);
  swift_bridgeObjectRelease(v26);
  if ((unint64_t)v31 >> 62)
  {
    if (v31 < 0)
      v206 = v31;
    else
      v206 = v31 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v31);
    v217 = (uint64_t *)_CocoaArrayWrapper.endIndex.getter(v206);
    swift_bridgeObjectRelease(v31);
  }
  else
  {
    v217 = *(uint64_t **)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v31);
  v32 = v226;
  v33 = v27;
  sub_1000DF4CC(v226);
  v36 = v27;
  v37 = v218;
  if (!v34)
  {
    v96 = swift_bridgeObjectRetain(v32);
    v97 = (void *)sub_10027B7D4(v96);
    v99 = v98;
    swift_bridgeObjectRelease(v32);
    if (!v97)
    {
      if (qword_100836CE8 == -1)
      {
LABEL_65:
        v163 = type metadata accessor for Logger(0);
        sub_10001AAA8(v163, (uint64_t)qword_100839E90);
        v164 = swift_bridgeObjectRetain(v32);
        v87 = Logger.logObject.getter(v164);
        v165 = v32;
        v166 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v87, v166))
        {

          swift_bridgeObjectRelease_n(v165, 2);
          return;
        }
        v167 = (uint8_t *)swift_slowAlloc(12, -1);
        v225 = (void *)swift_slowAlloc(32, -1);
        v227 = v225;
        *(_DWORD *)v167 = 136315138;
        v224 = v167 + 4;
        v168 = sub_1000151B0(0, (unint64_t *)&unk_10083FDE0, REMAssignment_ptr);
        v169 = sub_1000151B0(0, &qword_100846630, REMReminder_ptr);
        v170 = sub_1000E51DC(&qword_10083A250, (unint64_t *)&unk_10083FDE0, REMAssignment_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
        v171 = swift_bridgeObjectRetain(v165);
        v172 = Dictionary.description.getter(v171, v168, v169, v170);
        v174 = v173;
        swift_bridgeObjectRelease(v165);
        v229 = sub_10001A820(v172, v174, (uint64_t *)&v227);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &v230);
        swift_bridgeObjectRelease_n(v165, 2);
        swift_bridgeObjectRelease(v174);
        _os_log_impl((void *)&_mh_execute_header, v87, v166, "RDAssignmentNotificationEngine: Can't find any item to populate, this is not expected {map: %s}", v167, 0xCu);
        v175 = v225;
        swift_arrayDestroy(v225, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v175, -1, -1);
        swift_slowDealloc(v167, -1, -1);

LABEL_37:
        return;
      }
LABEL_80:
      swift_once(&qword_100836CE8, sub_1000D9FF8);
      goto LABEL_65;
    }
    v100 = qword_100836CE8;
    v59 = v97;
    v61 = v99;
    if (v100 == -1)
    {
LABEL_41:
      v101 = type metadata accessor for Logger(0);
      sub_10001AAA8(v101, (uint64_t)qword_100839E90);
      v102 = (id)v59;
      v103 = v61;
      v217 = v37;
      v104 = (uint64_t *)v102;
      v37 = v103;
      v105 = Logger.logObject.getter(v37);
      v106 = static os_log_type_t.info.getter(v105);
      v32 = v106;
      v107 = os_log_type_enabled(v105, v106);
      v215 = a2;
      v216 = v36;
      v213 = v10;
      v214 = v7;
      v212 = v8;
      v211 = v104;
      v210 = v37;
      if (v107)
      {
        v108 = swift_slowAlloc(32, -1);
        v109 = (_QWORD *)swift_slowAlloc(8, -1);
        v208 = v109;
        v224 = (void *)swift_slowAlloc(32, -1);
        v227 = v224;
        *(_DWORD *)v108 = 138543874;
        LODWORD(v209) = v32;
        v110 = v217;
        v111 = objc_msgSend(v217, "objectID");
        v229 = (uint64_t)v111;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &v230);
        *v109 = v111;

        *(_WORD *)(v108 + 12) = 2048;
        v229 = v219;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &v230);
        *(_WORD *)(v108 + 22) = 2082;
        v112 = objc_msgSend(v104, "description");
        v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(v112);
        v32 = v114;

        v229 = sub_10001A820(v113, v32, (uint64_t *)&v227);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &v230);

        swift_bridgeObjectRelease(v32);
        _os_log_impl((void *)&_mh_execute_header, v105, (os_log_type_t)v209, "RDAssignmentNotificationEngine: Populating assignment notification content with all nullified originators {listID: %{public}@, assignedCount: %ld, selected: %{public}s}", (uint8_t *)v108, 0x20u);
        v115 = sub_10001A630((uint64_t *)&unk_100839E70);
        v116 = v208;
        swift_arrayDestroy(v208, 1, v115);
        swift_slowDealloc(v116, -1, -1);
        v117 = v224;
        swift_arrayDestroy(v224, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v117, -1, -1);
        swift_slowDealloc(v108, -1, -1);

        v118 = v226;
        v119 = v217;
        if (v225)
          goto LABEL_43;
      }
      else
      {

        v119 = v217;
        v118 = v226;
        if (v225)
        {
LABEL_43:
          if (v118 < 0)
            v120 = v118;
          else
            v120 = v118 & 0xFFFFFFFFFFFFFF8;
          v121 = __CocoaDictionary.count.getter(v120);
          if (v121)
            goto LABEL_47;
          goto LABEL_69;
        }
      }
      v121 = *(_QWORD *)(v118 + 16);
      if (v121)
      {
LABEL_47:
        v232 = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(v121);
        v229 = sub_1000E1BA4(v118);
        v230 = v122;
        v231 = v123 & 1;
        if ((v121 & 0x8000000000000000) == 0)
        {
          v124 = v118 & 0xFFFFFFFFFFFFFF8;
          if (v118 < 0)
            v124 = v118;
          v224 = (void *)v124;
          v125 = v226;
          do
          {
            v133 = v229;
            v132 = v230;
            v134 = v231;
            sub_1000E1C80(&v227, v229, v230, v231, v125, (unint64_t *)&unk_10083FDE0, REMAssignment_ptr, (uint64_t (*)(void *))sub_1002C6B04);
            v136 = v135;
            v137 = v227;
            v138 = objc_msgSend(v227, "objectID");

            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v139);
            v140 = v232[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v140);
            v141 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v140, v138);
            specialized ContiguousArray._endMutation()(v141);
            if (v225)
            {
              if ((v134 & 1) == 0)
                goto LABEL_82;
              v142 = __CocoaDictionary.Index.handleBitPattern.getter(v133, v132);
              if (v142)
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v142);
              else
                isUniquelyReferenced_nonNull_native = 1;
              v144 = sub_10001A630(&qword_10083A258);
              v145 = (void (*)(id *, _QWORD))Dictionary.Index._asCocoa.modify(&v227, v144);
              __CocoaDictionary.formIndex(after:isUnique:)(v146, isUniquelyReferenced_nonNull_native, v224);
              v145(&v227, 0);
            }
            else
            {
              sub_1000E1950(v133, v132, v134, v125, (unint64_t *)&unk_10083FDE0, REMAssignment_ptr, (void (*)(void *))sub_1002C6B04);
              v127 = v126;
              v129 = v128;
              v131 = v130;
              sub_1000E515C(v133, v132, v134);
              v229 = v127;
              v230 = v129;
              v231 = v131 & 1;
            }
            --v121;
          }
          while (v121);
          sub_1000E515C(v229, v230, v231);
          v161 = v232;
          v162 = swift_bridgeObjectRelease(v226);
          v119 = v217;
          goto LABEL_70;
        }
        __break(1u);
        goto LABEL_80;
      }
LABEL_69:
      v162 = swift_bridgeObjectRelease(v118);
      v161 = _swiftEmptyArrayStorage;
LABEL_70:
      v148 = v221;
      v147 = v222;
      *v221 = v161;
      v149 = v223;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v147 + 104))(v148, enum case for RDUserNotificationType.assignmentNotification(_:), v223, v162);
      v176 = v119;
      swift_bridgeObjectRetain(v161);
      v177 = sub_10023F73C(0, v119, (uint64_t)v161);

      swift_bridgeObjectRelease(v161);
      v153 = v211;
      v154 = v210;
      v155 = v177;
      v156 = v155;
      v157 = v153;
      v158 = v154;
      v159 = v219;
      v160 = 1;
LABEL_71:
      sub_1000E335C(v155, v157, v158, v159, v160);
      v226 = (uint64_t)v156;

      (*(void (**)(_QWORD *, uint64_t))(v147 + 8))(v148, v149);
      dispatch_group_enter(v220);
      v178 = v218;
      v179 = objc_msgSend(v218, "objectID");
      v180 = objc_msgSend(v179, "uuid");

      v181 = v213;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v180);

      v182 = ((uint64_t (*)(void))UUID.uuidString.getter)();
      v184 = v183;
      v185 = *(void (**)(char *, uint64_t *))(v212 + 8);
      v186 = v214;
      v185(v181, v214);
      v227 = (id)0xD000000000000029;
      v228[0] = 0x80000001006F6BB0;
      v187._countAndFlagsBits = v182;
      v187._object = v184;
      String.append(_:)(v187);
      swift_bridgeObjectRelease(v184);
      v188 = v228[0];
      swift_bridgeObjectRetain(v228[0]);
      v189._countAndFlagsBits = 46;
      v189._object = (void *)0xE100000000000000;
      String.append(_:)(v189);
      swift_bridgeObjectRelease(v188);
      v191 = v227;
      v190 = v228[0];
      v193 = UUID.init()(v192);
      v194 = UUID.uuidString.getter(v193);
      v196 = v195;
      v185(v181, v186);
      v227 = v191;
      v228[0] = v190;
      swift_bridgeObjectRetain(v190);
      v197._countAndFlagsBits = v194;
      v197._object = v196;
      String.append(_:)(v197);
      swift_bridgeObjectRelease(v196);
      swift_bridgeObjectRelease(v190);
      v199 = (uint64_t)v227;
      v198 = v228[0];
      v200 = v215;
      v201 = (_QWORD *)swift_allocObject(&unk_1007E3290, 48, 7);
      v201[2] = v200;
      v201[3] = v178;
      v202 = v220;
      v201[4] = v219;
      v201[5] = v202;
      v203 = v178;
      v204 = (id)v226;
      swift_retain(v200);
      v205 = v202;
      sub_1004853D8(v199, v198, v204, (uint64_t)sub_1000E5250, (uint64_t)v201);
      swift_bridgeObjectRelease(v198);
      swift_release(v201);

      return;
    }
LABEL_78:
    swift_once(&qword_100836CE8, sub_1000D9FF8);
    goto LABEL_41;
  }
  v38 = v35;
  v213 = v10;
  v214 = v7;
  v39 = qword_100836CE8;
  v40 = v34;
  v41 = v38;
  if (v39 != -1)
    swift_once(&qword_100836CE8, sub_1000D9FF8);
  v42 = type metadata accessor for Logger(0);
  sub_10001AAA8(v42, (uint64_t)qword_100839E90);
  v43 = v40;
  v44 = v41;
  v7 = v37;
  v45 = (uint64_t *)v43;
  v37 = (uint64_t *)v44;
  v46 = Logger.logObject.getter(v37);
  v47 = static os_log_type_t.info.getter(v46);
  v10 = (char *)v47;
  v48 = os_log_type_enabled(v46, v47);
  v211 = v37;
  v215 = a2;
  v216 = v33;
  v212 = v8;
  v210 = v45;
  v209 = v7;
  if (v48)
  {
    v49 = swift_slowAlloc(42, -1);
    v50 = (_QWORD *)swift_slowAlloc(8, -1);
    v208 = v50;
    v224 = (void *)swift_slowAlloc(32, -1);
    v227 = v224;
    *(_DWORD *)v49 = 138544130;
    v51 = objc_msgSend(v7, "objectID");
    v229 = (uint64_t)v51;
    v37 = &v230;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &v230);
    *v50 = v51;

    v52 = v45;
    *(_WORD *)(v49 + 12) = 2048;
    v229 = v219;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &v230);
    *(_WORD *)(v49 + 22) = 2048;
    v229 = (uint64_t)v217;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &v230);
    *(_WORD *)(v49 + 32) = 2082;
    v36 = v49 + 34;
    v53 = objc_msgSend(v45, "description");
    v7 = (uint64_t *)static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    v55 = v54;

    a2 = v211;
    v229 = sub_10001A820((uint64_t)v7, v55, (uint64_t *)&v227);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &v230);

    swift_bridgeObjectRelease(v55);
    _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v10, "RDAssignmentNotificationEngine: Populating assignment notification content {listID: %{public}@, assignedCount: %ld, originatorCount: %ld, selected: %{public}s}", (uint8_t *)v49, 0x2Au);
    v56 = sub_10001A630((uint64_t *)&unk_100839E70);
    v57 = v208;
    swift_arrayDestroy(v208, 1, v56);
    swift_slowDealloc(v57, -1, -1);
    v58 = v224;
    swift_arrayDestroy(v224, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v49, -1, -1);

    v59 = v226;
    if (v225)
      goto LABEL_14;
LABEL_60:
    v8 = *(_QWORD *)(v59 + 16);
    if (v8)
      goto LABEL_18;
LABEL_61:
    v95 = swift_bridgeObjectRelease(v59);
    v94 = _swiftEmptyArrayStorage;
LABEL_62:
    v148 = v221;
    v147 = v222;
    *v221 = v94;
    v149 = v223;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v147 + 104))(v148, enum case for RDUserNotificationType.assignmentNotification(_:), v223, v95);
    v150 = v209;
    v151 = v209;
    swift_bridgeObjectRetain(v94);
    v152 = sub_10023F73C(0, v150, (uint64_t)v94);

    swift_bridgeObjectRelease(v94);
    v153 = v210;
    v154 = v211;
    v155 = v152;
    v156 = v155;
    v157 = v153;
    v158 = v154;
    v159 = v219;
    v160 = (uint64_t)v217;
    goto LABEL_71;
  }

  v59 = v226;
  if (!v225)
    goto LABEL_60;
LABEL_14:
  if (v59 < 0)
    v60 = v59;
  else
    v60 = v59 & 0xFFFFFFFFFFFFFF8;
  v8 = __CocoaDictionary.count.getter(v60);
  if (!v8)
    goto LABEL_61;
LABEL_18:
  v232 = _swiftEmptyArrayStorage;
  v61 = &v232;
  specialized ContiguousArray.reserveCapacity(_:)(v8);
  v229 = sub_1000E1BA4(v59);
  v230 = v62;
  v231 = v63 & 1;
  if (v8 < 0)
  {
    __break(1u);
    goto LABEL_78;
  }
  v64 = v59 & 0xFFFFFFFFFFFFFF8;
  if (v59 < 0)
    v64 = v59;
  v224 = (void *)v64;
  while (1)
  {
    v72 = v229;
    v71 = v230;
    v73 = v231;
    sub_1000E1C80(&v227, v229, v230, v231, v226, (unint64_t *)&unk_10083FDE0, REMAssignment_ptr, (uint64_t (*)(void *))sub_1002C6B04);
    v75 = v74;
    v76 = v227;
    v77 = objc_msgSend(v227, "objectID");

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v78);
    v79 = v232[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v79);
    v80 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v79, v77);
    specialized ContiguousArray._endMutation()(v80);
    if (v225)
      break;
    sub_1000E1950(v72, v71, v73, v226, (unint64_t *)&unk_10083FDE0, REMAssignment_ptr, (void (*)(void *))sub_1002C6B04);
    v66 = v65;
    v68 = v67;
    v70 = v69;
    sub_1000E515C(v72, v71, v73);
    v229 = v66;
    v230 = v68;
    v231 = v70 & 1;
LABEL_23:
    if (!--v8)
    {
      sub_1000E515C(v229, v230, v231);
      v94 = v232;
      v95 = swift_bridgeObjectRelease(v226);
      goto LABEL_62;
    }
  }
  if ((v73 & 1) != 0)
  {
    v81 = __CocoaDictionary.Index.handleBitPattern.getter(v72, v71);
    if (v81)
      v82 = swift_isUniquelyReferenced_nonNull_native(v81);
    else
      v82 = 1;
    v83 = sub_10001A630(&qword_10083A258);
    v84 = (void (*)(id *, _QWORD))Dictionary.Index._asCocoa.modify(&v227, v83);
    __CocoaDictionary.formIndex(after:isUnique:)(v85, v82, v224);
    v84(&v227, 0);
    goto LABEL_23;
  }
  __break(1u);
LABEL_82:
  __break(1u);
}

void sub_1000E0E04(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, NSObject *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  NSObject *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  _QWORD *v37;
  id v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t inited;
  unint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  char v49[8];
  uint64_t v50;
  _BYTE v51[56];

  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(void **)(a2 + 72);
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v15 = v14;
  LOBYTE(a2) = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((a2 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    swift_once(&qword_100836CE8, sub_1000D9FF8);
LABEL_4:
    v16 = type metadata accessor for Logger(0);
    sub_10001AAA8(v16, (uint64_t)qword_100839E90);
    v17 = a3;
    swift_errorRetain(a1);
    v18 = v17;
    v19 = swift_errorRetain(a1);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc(32, -1);
      v23 = swift_slowAlloc(8, -1);
      v45 = a5;
      v24 = (_QWORD *)v23;
      v25 = swift_slowAlloc(32, -1);
      v50 = v25;
      *(_DWORD *)v22 = 136315650;
      swift_getErrorValue(a1, v49, v48);
      v26 = Error.localizedDescription.getter(v48[1], v48[2]);
      v28 = v27;
      v47 = sub_10001A820(v26, v27, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48);
      swift_bridgeObjectRelease(v28);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      *(_WORD *)(v22 + 12) = 2114;
      v29 = objc_msgSend(v18, "objectID");
      v47 = (uint64_t)v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48);
      *v24 = v29;

      *(_WORD *)(v22 + 22) = 2048;
      v47 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "RDAssignmentNotificationEngine: Unable to post Assignment notification {error: %s, listID: %{public}@, count: %ld}", (uint8_t *)v22, 0x20u);
      v30 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v24, 1, v30);
      v31 = v24;
      a5 = v45;
      swift_slowDealloc(v31, -1, -1);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v22, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
    goto LABEL_13;
  }
  if (a1)
  {
    v46 = a4;
    swift_errorRetain(a1);
    if (qword_100836CE8 == -1)
      goto LABEL_4;
    goto LABEL_15;
  }
  if (qword_100836CE8 != -1)
    swift_once(&qword_100836CE8, sub_1000D9FF8);
  v32 = type metadata accessor for Logger(0);
  sub_10001AAA8(v32, (uint64_t)qword_100839E90);
  v33 = a3;
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.default.getter(v34);
  if (os_log_type_enabled(v34, v35))
  {
    v36 = swift_slowAlloc(22, -1);
    v37 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v36 = 138543618;
    v38 = -[NSObject objectID](v33, "objectID");
    v50 = (uint64_t)v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51);
    *v37 = v38;

    *(_WORD *)(v36 + 12) = 2048;
    v50 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "RDAssignmentNotificationEngine: Posted Assignment notification {listID: %{public}@, count: %ld}", (uint8_t *)v36, 0x16u);
    v39 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v37, 1, v39);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v36, -1, -1);
  }
  else
  {

    v34 = v33;
  }

  type metadata accessor for Analytics(0, v40);
  v41 = sub_10001A630((uint64_t *)&unk_10083A260);
  inited = swift_initStackObject(v41, v51);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  *(_QWORD *)(inited + 32) = 0x696669746E656449;
  *(_QWORD *)(inited + 40) = 0xEA00000000007265;
  sub_1000151B0(0, (unint64_t *)&unk_10083FE30, NSString_ptr);
  *(_QWORD *)(inited + 48) = NSString.init(stringLiteral:)("Posted Assignment Notification", 30, 2);
  v43 = sub_1002AF09C(inited);
  static Analytics.postEvent(_:payload:duration:)(0xD00000000000001CLL, 0x80000001006F6BE0, v43, 0, 1);
  swift_bridgeObjectRelease(v43);
LABEL_13:
  dispatch_group_leave(a5);
}

void sub_1000E1384(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  double v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_100836CE8 != -1)
      swift_once(&qword_100836CE8, sub_1000D9FF8);
    v6 = type metadata accessor for Logger(0);
    sub_10001AAA8(v6, (uint64_t)qword_100839E90);
    v7 = a3;
    swift_bridgeObjectRetain(a2);
    swift_errorRetain(a1);
    v8 = v7;
    swift_bridgeObjectRetain(a2);
    v9 = swift_errorRetain(a1);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = swift_slowAlloc(32, -1);
      v42 = (id)swift_slowAlloc(96, -1);
      v44 = a1;
      v45 = (uint64_t)v42;
      *(_DWORD *)v12 = 136315650;
      swift_errorRetain(a1);
      v13 = sub_10001A630((uint64_t *)&unk_10083AA20);
      v14 = String.init<A>(describing:)(&v44, v13);
      v16 = v15;
      v44 = sub_10001A820(v14, v15, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
      swift_bridgeObjectRelease(v16);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      *(_WORD *)(v12 + 12) = 2080;
      v17 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      swift_bridgeObjectRetain(a2);
      v19 = Array.description.getter(v18, v17);
      v21 = v20;
      swift_bridgeObjectRelease(a2);
      v44 = sub_10001A820(v19, v21, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
      swift_bridgeObjectRelease_n(a2, 2);
      *(_QWORD *)&v22 = swift_bridgeObjectRelease(v21).n128_u64[0];
      *(_WORD *)(v12 + 22) = 2080;
      v23 = objc_msgSend(v8, "actionIdentifier", v22);
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v26 = v25;

      v44 = sub_10001A820(v24, v26, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);

      swift_bridgeObjectRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDAssignmentNotificationEngine: Save error. Failed to save updates from notification response {error: %s , reminderIDs: %s, actionIdentifier: %s}", (uint8_t *)v12, 0x20u);
      swift_arrayDestroy(v42, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v12, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

      swift_bridgeObjectRelease_n(a2, 2);
    }
  }
  else
  {
    if (qword_100836CE8 != -1)
      swift_once(&qword_100836CE8, sub_1000D9FF8);
    v27 = type metadata accessor for Logger(0);
    sub_10001AAA8(v27, (uint64_t)qword_100839E90);
    v28 = a3;
    swift_bridgeObjectRetain_n(a2, 2);
    v43 = v28;
    v29 = Logger.logObject.getter(v43);
    v30 = static os_log_type_t.default.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = swift_slowAlloc(22, -1);
      v32 = swift_slowAlloc(64, -1);
      v45 = v32;
      *(_DWORD *)v31 = 136315394;
      v33 = objc_msgSend(v43, "actionIdentifier");
      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      v36 = v35;

      v44 = sub_10001A820(v34, v36, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);

      swift_bridgeObjectRelease(v36);
      *(_WORD *)(v31 + 12) = 2080;
      v37 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      swift_bridgeObjectRetain(a2);
      v39 = Array.description.getter(v38, v37);
      v41 = v40;
      swift_bridgeObjectRelease(a2);
      v44 = sub_10001A820(v39, v41, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
      swift_bridgeObjectRelease_n(a2, 2);
      swift_bridgeObjectRelease(v41);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "RDAssignmentNotificationEngine: Updated reminder successfully. {actionIdentifier: %s, reminderIDs: %s}", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
  }
}

void sub_1000E18E4(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

uint64_t sub_1000E1938(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t (*a5)(void), uint64_t a6)
{
  return sub_1000E42A8(a2, a3, a4, a5, a6);
}

void sub_1000E1950(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t *a5, _QWORD *a6, void (*a7)(void *))
{
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  if ((a3 & 1) == 0)
  {
    if (a1 < 0 || -(-1 << *(_BYTE *)(a4 + 32)) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + 64 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8)) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
      {
        _HashTable.occupiedBucket(after:)(a1);
        return;
      }
      goto LABEL_12;
    }
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (__CocoaDictionary.Index.age.getter(a1, a2) != *(_DWORD *)(a4 + 36))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v12 = __CocoaDictionary.Index.key.getter(a1, a2);
  v18 = v12;
  sub_1000E5168(a1, a2, 1);
  v13 = sub_1000151B0(0, a5, a6);
  swift_unknownObjectRetain(v12);
  swift_dynamicCast(&v19, &v18, (char *)&type metadata for Swift.AnyObject + 8, v13, 7);
  v14 = v19;
  swift_unknownObjectRelease(v12);
  a7(v14);
  v16 = v15;

  if ((v16 & 1) != 0)
  {
    v17 = __CocoaDictionary.Index.dictionary.getter(a1, a2);
    __CocoaDictionary.index(after:)(a1, a2, v17);
    sub_1000E515C(a1, a2, 1);
    swift_unknownObjectRelease(v17);
    return;
  }
LABEL_14:
  __break(1u);
}

void sub_1000E1AF8(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_1000E1950(a1, a2, a3, a4, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr, (void (*)(void *))sub_1002C66DC);
}

uint64_t sub_1000E1B1C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_1000E1BA4(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    return __CocoaDictionary.startIndex.getter(a1);
  }
  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = 0;
    return __clz(__rbit64(v2)) + v3;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v1 = 1 << v5;
  if (v6 < 7)
    return v1;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = 64;
    return __clz(__rbit64(v2)) + v3;
  }
  v7 = (unint64_t)(v1 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v3 = 64;
  while (v8)
  {
    v10 = *v9++;
    v2 = v10;
    --v8;
    v3 += 64;
    if (v10)
      return __clz(__rbit64(v2)) + v3;
  }
  return v1;
}

void sub_1000E1C64(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  sub_1000E1C80(a1, a2, a3, a4, a5, (unint64_t *)&unk_10083FDE0, REMAssignment_ptr, (uint64_t (*)(void *))sub_1002C6B04);
}

void sub_1000E1C80(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t *a6, _QWORD *a7, uint64_t (*a8)(void *))
{
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  void *v30;

  v12 = a2;
  if ((a5 & 0xC000000000000001) == 0)
  {
    if ((a4 & 1) != 0)
      goto LABEL_13;
    if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) != 0)
    {
      if (*(_DWORD *)(a5 + 36) == (_DWORD)a3)
      {
LABEL_15:
        v26 = *(void **)(*(_QWORD *)(a5 + 48) + 8 * v12);
        v27 = *(void **)(*(_QWORD *)(a5 + 56) + 8 * v12);
        *a1 = v27;
        v26;
        v28 = v27;
        return;
      }
      __break(1u);
LABEL_13:
      if (__CocoaDictionary.Index.age.getter(a2, a3) == *(_DWORD *)(a5 + 36))
      {
        v21 = __CocoaDictionary.Index.key.getter(v12, a3);
        v29 = v21;
        v22 = sub_1000151B0(0, a6, a7);
        swift_unknownObjectRetain(v21);
        swift_dynamicCast(&v30, &v29, (char *)&type metadata for Swift.AnyObject + 8, v22, 7);
        v23 = v30;
        swift_unknownObjectRelease(v21);
        v12 = a8(v23);
        v25 = v24;

        if ((v25 & 1) != 0)
          goto LABEL_15;
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    __break(1u);
    goto LABEL_19;
  }
  if ((a4 & 1) == 0)
  {
LABEL_21:
    __break(1u);
    return;
  }
  if (a5 < 0)
    v14 = a5;
  else
    v14 = a5 & 0xFFFFFFFFFFFFFF8;
  v15 = __CocoaDictionary.lookup(_:)(a2, a3, v14);
  v17 = v16;
  v29 = v15;
  v18 = sub_1000151B0(0, a6, a7);
  swift_unknownObjectRetain(v15);
  swift_dynamicCast(&v30, &v29, (char *)&type metadata for Swift.AnyObject + 8, v18, 7);
  swift_unknownObjectRelease(v15);
  v29 = v17;
  v19 = sub_1000151B0(0, &qword_100846630, REMReminder_ptr);
  swift_unknownObjectRetain(v17);
  swift_dynamicCast(&v30, &v29, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
  *a1 = v30;
  swift_unknownObjectRelease(v17);
}

_QWORD *sub_1000E1EB0(_QWORD *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v5 = (uint64_t *)(*(_QWORD *)(a5 + 48) + 16 * a2);
    v6 = *v5;
    v7 = v5[1];
    v8 = *(void **)(*(_QWORD *)(a5 + 56) + 8 * a2);
    *result = v8;
    swift_bridgeObjectRetain(v7);
    v9 = v8;
    return (_QWORD *)v6;
  }
LABEL_8:
  __break(1u);
  return result;
}

void sub_1000E1F40(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;

  v7 = a2;
  if ((a5 & 0xC000000000000001) == 0)
  {
    if ((a4 & 1) != 0)
      goto LABEL_13;
    if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) != 0)
    {
      if (*(_DWORD *)(a5 + 36) == (_DWORD)a3)
      {
LABEL_15:
        v20 = *(void **)(*(_QWORD *)(a5 + 48) + 8 * v7);
        v21 = *(void **)(*(_QWORD *)(a5 + 56) + 8 * v7);
        *a1 = v21;
        v20;
        v22 = v21;
        return;
      }
      __break(1u);
LABEL_13:
      if (__CocoaDictionary.Index.age.getter(a2, a3) == *(_DWORD *)(a5 + 36))
      {
        v15 = __CocoaDictionary.Index.key.getter(v7, a3);
        v23 = v15;
        v16 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
        swift_unknownObjectRetain(v15);
        swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v16, 7);
        v17 = v24;
        swift_unknownObjectRelease(v15);
        v7 = sub_1002C66DC((uint64_t)v17);
        v19 = v18;

        if ((v19 & 1) != 0)
          goto LABEL_15;
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    __break(1u);
    goto LABEL_19;
  }
  if ((a4 & 1) == 0)
  {
LABEL_21:
    __break(1u);
    return;
  }
  if (a5 < 0)
    v9 = a5;
  else
    v9 = a5 & 0xFFFFFFFFFFFFFF8;
  v10 = __CocoaDictionary.lookup(_:)(a2, a3, v9);
  v12 = v11;
  v23 = v10;
  v13 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  swift_unknownObjectRetain(v10);
  swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v13, 7);
  swift_unknownObjectRelease(v10);
  v23 = v12;
  v14 = sub_1000151B0(0, &qword_10083A208, REMReplicaManagerSerializedData_ptr);
  swift_unknownObjectRetain(v12);
  swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v14, 7);
  *a1 = v24;
  swift_unknownObjectRelease(v12);
}

void sub_1000E216C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char **v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  id v48;
  uint64_t v49;
  void *v50;
  unint64_t v51;

  v3 = a1;
  v51 = (unint64_t)_swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v43 = 0;
    v4 = 0;
    v5 = 0;
    v6 = __CocoaDictionary.makeIterator()(a1) | 0x8000000000000000;
  }
  else
  {
    v7 = -1 << *(_BYTE *)(a1 + 32);
    v4 = ~v7;
    v43 = a1 + 64;
    v8 = -v7;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v5 = v9 & *(_QWORD *)(a1 + 64);
    v6 = a1;
  }
  v10 = swift_bridgeObjectRetain(v3);
  v11 = 0;
  v42 = (unint64_t)(v4 + 64) >> 6;
  v12 = a2 & 0xFFFFFFFFFFFFFF8;
  v45 = a2 & 0xFFFFFFFFFFFFFF8;
  if (a2 < 0)
    v12 = a2;
  v41 = v12;
  v47 = a2 & 0xC000000000000001;
  v13 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
  v44 = v6;
  while (1)
  {
    if ((v6 & 0x8000000000000000) != 0)
    {
      v17 = __CocoaDictionary.Iterator.nextKey()(v10);
      if (!v17)
        goto LABEL_52;
      v18 = v17;
      v49 = v17;
      v19 = sub_1000151B0(0, (unint64_t *)&unk_10083FDE0, REMAssignment_ptr);
      swift_unknownObjectRetain(v18);
      swift_dynamicCast(&v50, &v49, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
      v20 = v50;
      swift_unknownObjectRelease(v18);
      v21 = v20;
      v16 = v11;
      v14 = v5;
      if (!v20)
        goto LABEL_52;
      goto LABEL_36;
    }
    if (!v5)
      break;
    v14 = (v5 - 1) & v5;
    v15 = __clz(__rbit64(v5)) | (v11 << 6);
    v16 = v11;
LABEL_35:
    v21 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
    if (!v21)
      goto LABEL_52;
LABEL_36:
    v25 = v21;
    if (objc_msgSend(v21, v13[97]))
    {

      v11 = v16;
      v5 = v14;
    }
    else
    {
      v48 = v25;
      v46 = v14;
      if ((unint64_t)a2 >> 62)
      {
        v40 = v25;
        swift_bridgeObjectRetain(a2);
        v26 = _CocoaArrayWrapper.endIndex.getter(v41);
        if (v26)
          goto LABEL_39;
LABEL_46:

        swift_bridgeObjectRelease(a2);
        v5 = v46;
        v11 = v16;
        v6 = v44;
        v13 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
      }
      else
      {
        v26 = *(_QWORD *)(v45 + 16);
        v27 = v25;
        swift_bridgeObjectRetain(a2);
        if (!v26)
          goto LABEL_46;
LABEL_39:
        sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
        v28 = 4;
        while (1)
        {
          if (v47)
            v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v28 - 4, a2);
          else
            v29 = *(id *)(a2 + 8 * v28);
          v30 = v29;
          v31 = v28 - 3;
          if (__OFADD__(v28 - 4, 1))
          {
            __break(1u);
            goto LABEL_54;
          }
          v32 = a2;
          v33 = objc_msgSend(v29, "objectID");
          v34 = objc_msgSend(v48, "originatorID");
          v35 = static NSObject.== infix(_:_:)(v33);

          if ((v35 & 1) != 0)
            break;

          ++v28;
          a2 = v32;
          if (v31 == v26)
            goto LABEL_46;
        }

        a2 = v32;
        swift_bridgeObjectRelease(v32);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v36);
        v38 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v37 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x18);
        v6 = v44;
        v13 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
        if (v38 >= v37 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1);
        v39 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, v30);
        v10 = specialized Array._endMutation()(v39);
        v11 = v16;
        v5 = v46;
      }
    }
  }
  v22 = v11 + 1;
  if (!__OFADD__(v11, 1))
  {
    if (v22 >= v42)
      goto LABEL_52;
    v23 = *(_QWORD *)(v43 + 8 * v22);
    v16 = v11 + 1;
    if (!v23)
    {
      v16 = v11 + 2;
      if (v11 + 2 >= v42)
        goto LABEL_52;
      v23 = *(_QWORD *)(v43 + 8 * v16);
      if (!v23)
      {
        v16 = v11 + 3;
        if (v11 + 3 >= v42)
          goto LABEL_52;
        v23 = *(_QWORD *)(v43 + 8 * v16);
        if (!v23)
        {
          v16 = v11 + 4;
          if (v11 + 4 >= v42)
            goto LABEL_52;
          v23 = *(_QWORD *)(v43 + 8 * v16);
          if (!v23)
          {
            v16 = v11 + 5;
            if (v11 + 5 >= v42)
              goto LABEL_52;
            v23 = *(_QWORD *)(v43 + 8 * v16);
            if (!v23)
            {
              v24 = v11 + 6;
              while (v42 != v24)
              {
                v23 = *(_QWORD *)(v43 + 8 * v24++);
                if (v23)
                {
                  v16 = v24 - 1;
                  goto LABEL_34;
                }
              }
LABEL_52:
              sub_1000C6560(v6);
              return;
            }
          }
        }
      }
    }
LABEL_34:
    v14 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v16 << 6);
    goto LABEL_35;
  }
LABEL_54:
  __break(1u);
}

void *sub_1000E25D4(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  char v11;
  uint64_t v12;

  if ((unint64_t)a1 >> 62)
    goto LABEL_13;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v3; v3 = _CocoaArrayWrapper.endIndex.getter(v12))
  {
    sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
    v4 = 4;
    while (1)
    {
      v5 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, a1)
         : *(id *)(a1 + 8 * v4);
      v6 = v5;
      v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v8 = v3;
      v9 = objc_msgSend(v5, "objectID");
      v10 = objc_msgSend(a2, "originatorID");
      v11 = static NSObject.== infix(_:_:)(v9);

      if ((v11 & 1) != 0)
      {
        swift_bridgeObjectRelease(a1);
        return v6;
      }

      ++v4;
      v3 = v8;
      if (v7 == v8)
        goto LABEL_17;
    }
    __break(1u);
LABEL_13:
    if (a1 < 0)
      v12 = a1;
    else
      v12 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_17:
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_1000E275C(void *a1, id a2)
{
  id v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = objc_msgSend(a2, "list");
  if ((objc_msgSend(a1, "isOriginatorNullified") & 1) != 0)
  {
LABEL_11:

    return 0;
  }
  v5 = objc_msgSend(v4, "shareeContext");
  if (!v5)
    goto LABEL_6;
  v6 = v5;
  v7 = objc_msgSend(v5, "sharees");

  v8 = sub_1000151B0(0, &qword_10083A228, REMSharee_ptr);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

  v10 = a1;
  v11 = sub_1000E25D4(v9, v10);
  swift_bridgeObjectRelease(v9);

  if (!v11)
  {
LABEL_6:
    if (qword_100836CE8 != -1)
      swift_once(&qword_100836CE8, sub_1000D9FF8);
    v15 = type metadata accessor for Logger(0);
    sub_10001AAA8(v15, (uint64_t)qword_100839E90);
    v16 = a1;
    v17 = a2;
    v18 = v16;
    v19 = v17;
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc(22, -1);
      v39 = (_QWORD *)swift_slowAlloc(8, -1);
      v40 = swift_slowAlloc(32, -1);
      v43 = v40;
      *(_DWORD *)v22 = 138543618;
      v23 = objc_msgSend(v19, "remObjectID");
      v42 = (uint64_t)v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43);
      *v39 = v23;

      *(_WORD *)(v22 + 12) = 2082;
      v24 = objc_msgSend(v18, "description");
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v27 = v26;

      v42 = sub_10001A820(v25, v27, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43);

      swift_bridgeObjectRelease(v27);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "RDAssignmentNotificationEngine: Couldn't match the sharee object of the originator and it is not nullified {reminderID: %{public}@, assignment: %{public}s}", (uint8_t *)v22, 0x16u);
      v28 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v39, 1, v28);
      swift_slowDealloc(v39, -1, -1);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v22, -1, -1);

    }
    else
    {

    }
    goto LABEL_11;
  }
  v12 = objc_msgSend(v11, "shortName");
  if (!v12)
  {
    if (qword_100836CE8 != -1)
      swift_once(&qword_100836CE8, sub_1000D9FF8);
    v30 = type metadata accessor for Logger(0);
    sub_10001AAA8(v30, (uint64_t)qword_100839E90);
    v31 = v10;
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = swift_slowAlloc(32, -1);
      v43 = v41;
      *(_DWORD *)v34 = 136446210;
      v35 = objc_msgSend(v31, "description");
      v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      v38 = v37;

      v42 = sub_10001A820(v36, v38, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43);

      swift_bridgeObjectRelease(v38);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "RDAssignmentNotificationEngine: The originator has absolutely no hint of how to display a formatted name... {assignment: %{public}s}", v34, 0xCu);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v34, -1, -1);

    }
    else
    {

    }
    return 0;
  }
  v13 = v12;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);

  return v14;
}

id sub_1000E2C7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t inited;
  uint64_t v71;
  unint64_t v72;
  const char *v73;
  uint64_t v74;
  unint64_t v75;
  NSString v76;
  Class isa;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE v87[80];
  _BYTE v88[88];
  uint64_t v89;

  v89 = a2;
  if (a8)
  {
    if (a5 == 1 && a6 == 1)
    {
      swift_bridgeObjectRetain(a8);
      if ((a9 & 1) != 0)
        v14 = 40;
      else
        v14 = 34;
      v15 = (id)_REMGetLocalizedString(v14);
      v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v17 = v16;

      v18 = (id)_REMGetLocalizedString(38);
      v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v20 = v19;

      v21 = sub_10001A630((uint64_t *)&unk_10083A270);
      v84 = a1;
      v22 = swift_allocObject(v21, 72, 7);
      *(_OWORD *)(v22 + 16) = xmmword_1006A3C00;
      *(_QWORD *)(v22 + 56) = &type metadata for String;
      v23 = sub_1000184F8();
      *(_QWORD *)(v22 + 64) = v23;
      *(_QWORD *)(v22 + 32) = a7;
      *(_QWORD *)(v22 + 40) = a8;
      v24 = (id)static String.localizedStringWithFormat(_:_:)(v79, v17, v22);
      swift_bridgeObjectRelease(v17);
      v25 = v22;
      v26 = v20;
      swift_bridgeObjectRelease(v25);
      v27 = swift_allocObject(v21, 112, 7);
      *(_OWORD *)(v27 + 16) = xmmword_1006A3C40;
      *(_QWORD *)(v27 + 56) = &type metadata for String;
      *(_QWORD *)(v27 + 64) = v23;
      *(_QWORD *)(v27 + 32) = a3;
      *(_QWORD *)(v27 + 40) = a4;
      *(_QWORD *)(v27 + 96) = &type metadata for String;
      *(_QWORD *)(v27 + 104) = v23;
      v28 = v89;
      *(_QWORD *)(v27 + 72) = v84;
      *(_QWORD *)(v27 + 80) = v28;
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRetain(v28);
      v29 = v80;
      goto LABEL_27;
    }
    if (a5 >= 2 && a6 == 1)
    {
      swift_bridgeObjectRetain(a8);
      if ((a9 & 1) != 0)
        v39 = 41;
      else
        v39 = 35;
      v40 = (id)_REMGetLocalizedString(v39);
      v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
      v42 = v41;

      v43 = (id)_REMGetLocalizedString(39);
      v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
      v45 = v44;

      v46 = sub_10001A630((uint64_t *)&unk_10083A270);
      v47 = a1;
      v48 = swift_allocObject(v46, 112, 7);
      *(_OWORD *)(v48 + 16) = xmmword_1006A3C40;
      *(_QWORD *)(v48 + 56) = &type metadata for String;
      v49 = sub_1000184F8();
      *(_QWORD *)(v48 + 32) = a7;
      *(_QWORD *)(v48 + 40) = a8;
      *(_QWORD *)(v48 + 96) = &type metadata for Int;
      *(_QWORD *)(v48 + 104) = &protocol witness table for Int;
      *(_QWORD *)(v48 + 64) = v49;
      *(_QWORD *)(v48 + 72) = a5;
      v24 = (id)static String.localizedStringWithFormat(_:_:)(v81, v42, v48);
      swift_bridgeObjectRelease(v42);
      v50 = v48;
      v26 = v45;
      swift_bridgeObjectRelease(v50);
      v27 = swift_allocObject(v46, 72, 7);
      *(_OWORD *)(v27 + 16) = xmmword_1006A3C00;
      *(_QWORD *)(v27 + 56) = &type metadata for String;
      *(_QWORD *)(v27 + 64) = v49;
      *(_QWORD *)(v27 + 32) = v47;
      v51 = v89;
      *(_QWORD *)(v27 + 40) = v89;
      swift_bridgeObjectRetain(v51);
      v29 = v86;
      goto LABEL_27;
    }
    v85 = a1;
    if (a5 >= 2 && a6 >= 2)
      goto LABEL_23;
  }
  else
  {
    v85 = a1;
    if (a5 >= 2 && a6 >= 2)
    {
LABEL_23:
      if ((a9 & 1) != 0)
        v52 = 43;
      else
        v52 = 37;
LABEL_26:
      v53 = (id)_REMGetLocalizedString(v52);
      v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
      v56 = v55;

      v57 = (id)_REMGetLocalizedString(39);
      v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
      v60 = v59;

      v61 = sub_10001A630((uint64_t *)&unk_10083A270);
      v62 = swift_allocObject(v61, 72, 7);
      *(_OWORD *)(v62 + 16) = xmmword_1006A3C00;
      *(_QWORD *)(v62 + 56) = &type metadata for Int;
      *(_QWORD *)(v62 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v62 + 32) = a5;
      v24 = (id)static String.localizedStringWithFormat(_:_:)(v54, v56, v62);
      swift_bridgeObjectRelease(v56);
      swift_bridgeObjectRelease(v62);
      v63 = v61;
      v26 = v60;
      v27 = swift_allocObject(v63, 72, 7);
      *(_OWORD *)(v27 + 16) = xmmword_1006A3C00;
      *(_QWORD *)(v27 + 56) = &type metadata for String;
      *(_QWORD *)(v27 + 64) = sub_1000184F8();
      v64 = v89;
      *(_QWORD *)(v27 + 32) = v85;
      *(_QWORD *)(v27 + 40) = v64;
      swift_bridgeObjectRetain(v64);
      v29 = v58;
LABEL_27:
      static String.localizedStringWithFormat(_:_:)(v29, v26, v27);
      swift_bridgeObjectRelease(v27);
      swift_bridgeObjectRelease(v26);
      return v24;
    }
    if (a5 == 1)
    {
      if ((a9 & 1) != 0)
        v30 = 42;
      else
        v30 = 36;
      v32 = (id)_REMGetLocalizedString(v30);
      v24 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v32);

      v33 = (id)_REMGetLocalizedString(38);
      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      v26 = v35;

      v36 = sub_10001A630((uint64_t *)&unk_10083A270);
      v27 = swift_allocObject(v36, 112, 7);
      *(_OWORD *)(v27 + 16) = xmmword_1006A3C40;
      *(_QWORD *)(v27 + 56) = &type metadata for String;
      v37 = sub_1000184F8();
      *(_QWORD *)(v27 + 32) = a3;
      *(_QWORD *)(v27 + 40) = a4;
      *(_QWORD *)(v27 + 96) = &type metadata for String;
      *(_QWORD *)(v27 + 104) = v37;
      *(_QWORD *)(v27 + 64) = v37;
      *(_QWORD *)(v27 + 72) = v85;
      v38 = v89;
      *(_QWORD *)(v27 + 80) = v89;
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRetain(v38);
      v29 = v34;
      goto LABEL_27;
    }
    if (a5 >= 2)
    {
      if ((a9 & 1) != 0)
        v52 = 43;
      else
        v52 = 37;
      goto LABEL_26;
    }
  }
  v66 = a5 | a6;
  static String._unconditionallyBridgeFromObjectiveC(_:)(REMErrorDomain);
  v68 = v67;
  v69 = sub_10001A630((uint64_t *)&unk_10083A280);
  if (v66)
  {
    inited = swift_initStackObject(v69, v88);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v74;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    v72 = 0xD00000000000003CLL;
    v73 = "Unknown combination of number of assignments and orignators.";
  }
  else
  {
    inited = swift_initStackObject(v69, v87);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v71;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    v72 = 0xD000000000000035;
    v73 = "You must have at least 1 assignment and 1 originator.";
  }
  *(_QWORD *)(inited + 48) = v72;
  *(_QWORD *)(inited + 56) = (unint64_t)(v73 - 32) | 0x8000000000000000;
  v75 = sub_10016E7E4(inited);
  v24 = objc_allocWithZone((Class)NSError);
  v76 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v68);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v24, "initWithDomain:code:userInfo:", v76, -1, isa, swift_bridgeObjectRelease(v75).n128_f64[0]);

  swift_willThrow(v78);
  return v24;
}

void sub_1000E335C(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  char v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSString v28;
  NSString v29;
  void *v31;
  id v33;

  v7 = a2;
  v8 = a3;
  v33 = objc_msgSend(v8, "list");
  v9 = objc_msgSend(v8, "titleAsString");
  if (v9)
  {
    v10 = v9;
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v13 = v12;

  }
  else
  {
    v11 = 0;
    v13 = 0xE000000000000000;
  }
  v14 = sub_1000E275C(v7, v8);
  v16 = v15;
  v17 = objc_msgSend(v33, "groceryContext");
  v31 = v7;
  if (v17)
  {
    v18 = v17;
    v19 = objc_msgSend(v17, "shouldCategorizeGroceryItems");

  }
  else
  {
    v19 = 0;
  }
  v20 = objc_msgSend(v33, "name");
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  sub_1000E2C7C(v21, v23, v11, v13, a4, a5, v14, v16, v19);
  v25 = v24;
  v27 = v26;
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v16);
  v28 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setTitle:", v28, swift_bridgeObjectRelease(v25).n128_f64[0]);

  v29 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setBody:", v29, swift_bridgeObjectRelease(v27).n128_f64[0]);

}

void sub_1000E3750(uint64_t a1, uint64_t *a2, NSObject *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  int64_t v20;
  id v21[2];
  int64_t v22;

  v7 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a1 + 64);
  v22 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v11 = 0;
  if (!v10)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = 8 * i;
    v18 = *(void **)(*(_QWORD *)(a1 + 56) + v17);
    v21[0] = *(id *)(*(_QWORD *)(a1 + 48) + v17);
    v21[1] = v18;
    v19 = v21[0];
    swift_bridgeObjectRetain(v18);
    sub_1000DFAE0((uint64_t)v21, a2, a3);
    if (v3)
    {
      swift_release(a1);
      swift_bridgeObjectRelease(v18);

      return;
    }
    swift_bridgeObjectRelease(v18);

    if (v10)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v11 >= v22)
      goto LABEL_26;
    v15 = *(_QWORD *)(v7 + 8 * v11);
    if (!v15)
    {
      v16 = v11 + 1;
      if (v11 + 1 >= v22)
        goto LABEL_26;
      v15 = *(_QWORD *)(v7 + 8 * v16);
      if (v15)
        goto LABEL_14;
      v16 = v11 + 2;
      if (v11 + 2 >= v22)
        goto LABEL_26;
      v15 = *(_QWORD *)(v7 + 8 * v16);
      if (v15)
        goto LABEL_14;
      v16 = v11 + 3;
      if (v11 + 3 >= v22)
        goto LABEL_26;
      v15 = *(_QWORD *)(v7 + 8 * v16);
      if (v15)
      {
LABEL_14:
        v11 = v16;
        goto LABEL_15;
      }
      v20 = v11 + 4;
      if (v11 + 4 >= v22)
      {
LABEL_26:
        swift_release(a1);
        return;
      }
      v15 = *(_QWORD *)(v7 + 8 * v20);
      v11 += 4;
      if (!v15)
        break;
    }
LABEL_15:
    v10 = (v15 - 1) & v15;
  }
  while (1)
  {
    v11 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v11 >= v22)
      goto LABEL_26;
    v15 = *(_QWORD *)(v7 + 8 * v11);
    ++v20;
    if (v15)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
}

_QWORD *sub_1000E3934(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  void *v12;
  unint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  _QWORD *v27;

  v8 = a1;
  v27 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_18;
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v9)
  {
    while (1)
    {
      v10 = 0;
      v24 = v8 & 0xFFFFFFFFFFFFFF8;
      v25 = v8 & 0xC000000000000001;
      v22 = a2;
      v23 = v8;
      while (v25)
      {
        v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v8);
LABEL_9:
        v12 = v11;
        v13 = v10 + 1;
        if (__OFADD__(v10, 1))
          goto LABEL_17;
        v26 = v11;
        v14 = sub_1000DF1F4(&v26, a2, a3, a4);
        if (v4)
        {
          swift_bridgeObjectRelease(v8);

          swift_release(v27);
          return a4;
        }
        if (v14)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v14);
          v15 = v9;
          v16 = a3;
          v17 = v27[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
          v18 = v17;
          a3 = v16;
          v9 = v15;
          v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v12);
          specialized ContiguousArray._endMutation()(v19);
          a2 = v22;
          v8 = v23;
        }
        else
        {

        }
        ++v10;
        if (v13 == v9)
        {
          a4 = v27;
          goto LABEL_23;
        }
      }
      if (v10 < *(_QWORD *)(v24 + 16))
        break;
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      if (v8 < 0)
        v20 = v8;
      else
        v20 = v8 & 0xFFFFFFFFFFFFFF8;
      v9 = _CocoaArrayWrapper.endIndex.getter(v20);
      if (!v9)
        goto LABEL_22;
    }
    v11 = *(id *)(v8 + 8 * v10 + 32);
    goto LABEL_9;
  }
LABEL_22:
  a4 = _swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v8);
  return a4;
}

void sub_1000E3AE4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  int64_t v21;
  uint64_t v22;
  id v23[2];
  int64_t v24;

  v22 = a1 + 64;
  v9 = 1 << *(_BYTE *)(a1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a1 + 64);
  v24 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v12 = 0;
  if (!v11)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v13 | (v12 << 6); ; i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    v18 = 8 * i;
    v19 = *(void **)(*(_QWORD *)(a1 + 56) + v18);
    v23[0] = *(id *)(*(_QWORD *)(a1 + 48) + v18);
    v23[1] = v19;
    v20 = v23[0];
    swift_bridgeObjectRetain(v19);
    sub_1000DE69C((uint64_t)v23, a2, a3, a4);
    if (v4)
    {
      swift_release(a1);
      swift_bridgeObjectRelease(v19);

      return;
    }
    swift_bridgeObjectRelease(v19);

    if (v11)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v12++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v12 >= v24)
      goto LABEL_26;
    v16 = *(_QWORD *)(v22 + 8 * v12);
    if (!v16)
    {
      v17 = v12 + 1;
      if (v12 + 1 >= v24)
        goto LABEL_26;
      v16 = *(_QWORD *)(v22 + 8 * v17);
      if (v16)
        goto LABEL_14;
      v17 = v12 + 2;
      if (v12 + 2 >= v24)
        goto LABEL_26;
      v16 = *(_QWORD *)(v22 + 8 * v17);
      if (v16)
        goto LABEL_14;
      v17 = v12 + 3;
      if (v12 + 3 >= v24)
        goto LABEL_26;
      v16 = *(_QWORD *)(v22 + 8 * v17);
      if (v16)
      {
LABEL_14:
        v12 = v17;
        goto LABEL_15;
      }
      v21 = v12 + 4;
      if (v12 + 4 >= v24)
      {
LABEL_26:
        swift_release(a1);
        return;
      }
      v16 = *(_QWORD *)(v22 + 8 * v21);
      v12 += 4;
      if (!v16)
        break;
    }
LABEL_15:
    v11 = (v16 - 1) & v16;
  }
  while (1)
  {
    v12 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v12 >= v24)
      goto LABEL_26;
    v16 = *(_QWORD *)(v22 + 8 * v12);
    ++v21;
    if (v16)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
}

_QWORD *sub_1000E3CEC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v17;
  uint64_t v18;
  _QWORD *v19;

  v4 = v3;
  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = _swiftEmptyArrayStorage;
    if (!v6)
      break;
    v19 = _swiftEmptyArrayStorage;
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v6);
    if (v6 < 0)
    {
      __break(1u);
      return result;
    }
    v8 = 0;
    while (v6 != v8)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a1);
      else
        v9 = *(id *)(a1 + 8 * v8 + 32);
      v10 = v9;
      v17 = v9;
      sub_1000DCE04(&v17, a3, &v18);

      if (v4)
        return (_QWORD *)swift_release(v19);
      ++v8;
      v12 = v18;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      v13 = v19[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
      v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v12);
      specialized ContiguousArray._endMutation()(v14);
      if (v6 == v8)
        return v19;
    }
    __break(1u);
LABEL_16:
    if (a1 < 0)
      v15 = a1;
    else
      v15 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v6 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease(a1);
  }
  return result;
}

_QWORD *sub_1000E3E58(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  void (*v27)(_QWORD *, _QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  _QWORD v33[4];
  _QWORD *v34;
  uint64_t v35;
  char v36;
  _QWORD *v37;

  v2 = a1;
  v32 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v3 = __CocoaDictionary.count.getter(a1);
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 16);
  }
  result = _swiftEmptyArrayStorage;
  if (v3)
  {
    v37 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    result = (_QWORD *)sub_1000E1BA4(v2);
    v34 = result;
    v35 = v5;
    v36 = v6 & 1;
    if (v3 < 0)
    {
      __break(1u);
LABEL_22:
      __break(1u);
    }
    else
    {
      v7 = v2 & 0xFFFFFFFFFFFFFF8;
      if (v2 < 0)
        v7 = v2;
      v29 = v7;
      v30 = v2;
      do
      {
        v14 = (uint64_t)v34;
        v15 = v35;
        v16 = v36;
        sub_1000E1C80(v33, (uint64_t)v34, v35, v36, v2, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr, (uint64_t (*)(void *))sub_1002C66DC);
        v18 = v17;
        v19 = (void *)v33[0];
        v20 = objc_msgSend(a2, "updateReminder:", v33[0]);

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v21);
        v22 = v37[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v22);
        v23 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
        result = (_QWORD *)specialized ContiguousArray._endMutation()(v23);
        if (v32)
        {
          v2 = v30;
          if ((v16 & 1) == 0)
            goto LABEL_22;
          v24 = __CocoaDictionary.Index.handleBitPattern.getter(v14, v15);
          if (v24)
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
          else
            isUniquelyReferenced_nonNull_native = 1;
          v26 = sub_10001A630(&qword_10083A200);
          v27 = (void (*)(_QWORD *, _QWORD))Dictionary.Index._asCocoa.modify(v33, v26);
          __CocoaDictionary.formIndex(after:isUnique:)(v28, isUniquelyReferenced_nonNull_native, v29);
          v27(v33, 0);
        }
        else
        {
          v2 = v30;
          sub_1000E1950(v14, v15, v16, v30, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr, (void (*)(void *))sub_1002C66DC);
          v9 = v8;
          v11 = v10;
          v13 = v12;
          sub_1000E515C(v14, v15, v16);
          v34 = (_QWORD *)v9;
          v35 = v11;
          v36 = v13 & 1;
        }
        --v3;
      }
      while (v3);
      sub_1000E515C((uint64_t)v34, v35, v36);
      return v37;
    }
  }
  return result;
}

void sub_1000E40B0(char a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;

  if (qword_100836CE8 != -1)
    swift_once(&qword_100836CE8, sub_1000D9FF8);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001AAA8(v2, (uint64_t)qword_100839E90);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v17 = v7;
    *(_DWORD *)v6 = 136315138;
    LOBYTE(v16) = a1;
    v8 = sub_10001A630((uint64_t *)&unk_10084DBC0);
    v9 = String.init<A>(describing:)(&v16, v8);
    v11 = v10;
    v16 = sub_10001A820(v9, v10, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "RDAssignmentNotificationEngine: refreshFromLastConsumedOnLaunchIfNeeded completed {refreshed: %s}", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "os_transaction RELEASE {name: com.apple.remindd.assignmentNotificationEngine.start}", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

}

uint64_t sub_1000E42A8(void *a1, uint64_t a2, void *a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  id *v21;
  void (*v22)(char *, uint64_t, uint64_t);
  int v23;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __n128 v33;
  NSObject *v34;
  NSObject **v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t (*v39)(void);
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  id v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  int v52;
  _BOOL4 v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  _QWORD *v57;
  void *v58;
  id v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  void *v68;
  int v69;
  id v72;
  uint64_t v73;
  Class isa;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  void *v85;
  id v86;
  __n128 v87;
  NSObject **v88;
  uint64_t v89;
  os_log_type_t v90;
  uint8_t *v91;
  void *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  __n128 v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  os_log_type_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  void *v115;
  uint64_t v116;
  id v117;
  _QWORD v118[2];
  void *v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  NSObject **v123;
  void *v124;
  char *v125;
  uint64_t v126;
  uint64_t (*v127)(void);
  _QWORD v128[3];
  char v129[16];
  uint64_t v130;
  id aBlock[5];
  uint64_t v132;

  v126 = a5;
  v127 = a4;
  v124 = a3;
  v7 = type metadata accessor for RDUserNotificationAction(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v123 = (NSObject **)((char *)v118 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  v12 = (char *)v118 - v11;
  v13 = type metadata accessor for RDUserNotificationType(0);
  v14 = *(_QWORD **)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v125 = (char *)v118 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)v118 - v18;
  __chkstk_darwin(v17);
  v21 = (id *)((char *)v118 - v20);
  v22 = (void (*)(char *, uint64_t, uint64_t))v14[2];
  v22((char *)v118 - v20, a2, v13);
  v23 = ((uint64_t (*)(id *, uint64_t))v14[11])(v21, v13);
  if (v23 == enum case for RDUserNotificationType.reminderAlarm(_:)
    || v23 == enum case for RDUserNotificationType.todayNotificationForSingleReminder(_:))
  {
LABEL_3:
    ((void (*)(id *, uint64_t))v14[1])(v21, v13);
LABEL_4:
    if (qword_100836CE8 != -1)
      swift_once(&qword_100836CE8, sub_1000D9FF8);
    v24 = type metadata accessor for Logger(0);
    sub_10001AAA8(v24, (uint64_t)qword_100839E90);
    v22(v19, a2, v13);
    v25 = a1;
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc(22, -1);
      v123 = (NSObject **)swift_slowAlloc(8, -1);
      v124 = (void *)swift_slowAlloc(32, -1);
      aBlock[0] = v124;
      *(_DWORD *)v28 = 136315394;
      v29 = v125;
      v22(v125, (uint64_t)v19, v13);
      v30 = String.init<A>(describing:)(v29, v13);
      v32 = v31;
      v130 = sub_10001A820(v30, v31, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, aBlock);
      v33 = swift_bridgeObjectRelease(v32);
      ((void (*)(char *, uint64_t, __n128))v14[1])(v19, v13, v33);
      *(_WORD *)(v28 + 12) = 2112;
      v130 = (uint64_t)v25;
      v34 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, aBlock);
      v35 = v123;
      *v123 = v25;

      _os_log_impl((void *)&_mh_execute_header, v26, v27, "RDAssignmentNotificationEngine doesn't expect to receive actions of this type. {type: %s, response: %@}", (uint8_t *)v28, 0x16u);
      v36 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v35, 1, v36);
      swift_slowDealloc(v35, -1, -1);
      v37 = v124;
      swift_arrayDestroy(v124, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      v38 = v28;
      goto LABEL_8;
    }
    ((void (*)(char *, uint64_t))v14[1])(v19, v13);

LABEL_11:
    goto LABEL_12;
  }
  if (v23 == enum case for RDUserNotificationType.caldavSharedList(_:))
  {
    ((void (*)(id *, uint64_t))v14[12])(v21, v13);

    goto LABEL_4;
  }
  if (v23 == enum case for RDUserNotificationType.assignmentNotification(_:))
  {
    ((void (*)(id *, uint64_t))v14[12])(v21, v13);
    v14 = *v21;
    if (qword_100836CE8 != -1)
      swift_once(&qword_100836CE8, sub_1000D9FF8);
    v46 = type metadata accessor for Logger(0);
    v47 = sub_10001AAA8(v46, (uint64_t)qword_100839E90);
    v48 = a1;
    swift_bridgeObjectRetain_n(v14, 2);
    v49 = (char *)v48;
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.default.getter(v50);
    v52 = v51;
    v53 = os_log_type_enabled(v50, v51);
    v125 = v49;
    if (v53)
    {
      v54 = swift_slowAlloc(22, -1);
      v120 = v52;
      v55 = v54;
      v119 = (void *)swift_slowAlloc(64, -1);
      aBlock[0] = v119;
      *(_DWORD *)v55 = 136315394;
      v118[1] = v55 + 4;
      v56 = objc_msgSend(v49, "actionIdentifier");
      v121 = v47;
      v57 = v14;
      v58 = v49;
      v59 = v56;
      v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
      v62 = v61;

      v130 = sub_10001A820(v60, v62, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, aBlock);

      swift_bridgeObjectRelease(v62);
      *(_WORD *)(v55 + 12) = 2080;
      v63 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      swift_bridgeObjectRetain(v57);
      v65 = Array.description.getter(v64, v63);
      v67 = v66;
      swift_bridgeObjectRelease(v57);
      v130 = sub_10001A820(v65, v67, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, aBlock);
      v14 = v57;
      swift_bridgeObjectRelease_n(v57, 2);
      swift_bridgeObjectRelease(v67);
      _os_log_impl((void *)&_mh_execute_header, v50, (os_log_type_t)v120, "RDAssignmentNotificationEngine: Processing assignment notification response {actionIdentifier:%s, reminderIDs: %s}", (uint8_t *)v55, 0x16u);
      v68 = v119;
      swift_arrayDestroy(v119, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v68, -1, -1);
      swift_slowDealloc(v55, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v14, 2);
    }
    v22 = (void (*)(char *, uint64_t, uint64_t))v124;
    a1 = *(void **)(v8 + 16);
    ((void (*)(char *, void *, uint64_t))a1)(v12, v124, v7);
    v69 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v12, v7);
    if (v69 == enum case for RDUserNotificationAction.defaultDismiss(_:)
      || v69 == enum case for RDUserNotificationAction.debugDismiss(_:)
      || v69 == enum case for RDUserNotificationAction.markAsCompleted(_:)
      || v69 == enum case for RDUserNotificationAction.snoozeForOneHour(_:)
      || v69 == enum case for RDUserNotificationAction.snoozeForOneDay(_:)
      || v69 == enum case for RDUserNotificationAction.snoozeToNextThirds(_:)
      || v69 == enum case for RDUserNotificationAction.snoozeToNextWeekend(_:)
      || v69 == enum case for RDUserNotificationAction.addToReminders(_:))
    {
      goto LABEL_57;
    }
    if (v69 == enum case for RDUserNotificationAction.viewAssignmentInList(_:))
    {
      swift_bridgeObjectRelease(v14);
      goto LABEL_12;
    }
  }
  else
  {
    if (v23 == enum case for RDUserNotificationType.sharedListAddedReminderNotification(_:))
    {
      ((void (*)(id *, uint64_t))v14[12])(v21, v13);
      swift_bridgeObjectRelease(*v21);
      goto LABEL_4;
    }
    if (v23 == enum case for RDUserNotificationType.dueDateDeltaAlarm(_:))
      goto LABEL_3;
    if (v23 == enum case for RDUserNotificationType.todayNotification(_:)
      || v23 == enum case for RDUserNotificationType.todayNotificationBadge(_:)
      || v23 == enum case for RDUserNotificationType.beforeFirstUnlock(_:))
    {
      goto LABEL_4;
    }
    v69 = _diagnoseUnexpectedEnumCase<A>(type:)(v13, v13);
    __break(1u);
  }
  if (v69 == enum case for RDUserNotificationAction.declineAssignment(_:))
  {
    v72 = objc_msgSend(objc_allocWithZone((Class)REMStore), "initWithDaemonController:", *(_QWORD *)(v122 + 104));
    v73 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    aBlock[0] = 0;
    v75 = objc_msgSend(v72, "fetchRemindersWithObjectIDs:error:", isa, aBlock);

    v76 = aBlock[0];
    if (!v75)
    {
      v97 = aBlock[0];
      v98 = _convertNSErrorToError(_:)(v76);

      swift_willThrow(v99);
      swift_errorRetain(v98);
      swift_bridgeObjectRetain(v14);
      v100 = swift_errorRetain(v98);
      v25 = Logger.logObject.getter(v100);
      v101 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v101))
      {
        v102 = swift_slowAlloc(22, -1);
        v103 = (void *)swift_slowAlloc(64, -1);
        aBlock[0] = v103;
        *(_DWORD *)v102 = 136315394;
        swift_bridgeObjectRetain(v14);
        v105 = Array.description.getter(v104, v73);
        v107 = v106;
        swift_bridgeObjectRelease(v14);
        v130 = sub_10001A820(v105, v107, (uint64_t *)aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, aBlock);
        swift_bridgeObjectRelease_n(v14, 2);
        swift_bridgeObjectRelease(v107);
        *(_WORD *)(v102 + 12) = 2080;
        swift_getErrorValue(v98, v129, v128);
        v108 = Error.localizedDescription.getter(v128[1], v128[2]);
        v110 = v109;
        v130 = sub_10001A820(v108, v109, (uint64_t *)aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, aBlock);
        swift_bridgeObjectRelease(v110);
        swift_errorRelease(v98);
        swift_errorRelease(v98);
        _os_log_impl((void *)&_mh_execute_header, v25, v101, "RDAssignmentNotificationEngine: Error trying to retrieve reminder {reminderIDs: %s, error: %s}", (uint8_t *)v102, 0x16u);
        swift_arrayDestroy(v103, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v103, -1, -1);
        swift_slowDealloc(v102, -1, -1);

        swift_errorRelease(v98);
        goto LABEL_12;
      }
      swift_errorRelease(v98);
      swift_bridgeObjectRelease_n(v14, 2);
      swift_errorRelease(v98);
      swift_errorRelease(v98);
      goto LABEL_11;
    }
    v77 = sub_1000151B0(0, &qword_100846630, REMReminder_ptr);
    v78 = sub_1000E51DC((unint64_t *)&qword_10083A1F0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    v79 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v75, v73, v77, v78);
    v80 = v76;

    v26 = objc_msgSend(objc_allocWithZone((Class)REMSaveRequest), "initWithStore:", v72);
    v81 = (uint64_t)sub_1000E3E58(v79, v26);
    swift_bridgeObjectRelease(v79);
    v118[0] = v14;
    if ((unint64_t)v81 >> 62)
    {
      if (v81 < 0)
        v111 = v81;
      else
        v111 = v81 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v81);
      v82 = _CocoaArrayWrapper.endIndex.getter(v111);
      if (v82)
        goto LABEL_50;
    }
    else
    {
      v82 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v81);
      if (v82)
      {
LABEL_50:
        if (v82 < 1)
          __break(1u);
        v83 = 0;
        do
        {
          if ((v81 & 0xC000000000000001) != 0)
            v84 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v83, v81);
          else
            v84 = *(id *)(v81 + 8 * v83 + 32);
          v85 = v84;
          ++v83;
          v86 = objc_msgSend(v84, "assignmentContext", v118[0]);
          objc_msgSend(v86, "removeAllAssignments");

        }
        while (v82 != v83);
      }
    }
    swift_bridgeObjectRelease_n(v81, 2);
    v112 = *(_QWORD *)(v122 + 72);
    v113 = swift_allocObject(&unk_1007E31F0, 32, 7);
    v114 = v125;
    *(_QWORD *)(v113 + 16) = v118[0];
    *(_QWORD *)(v113 + 24) = v114;
    aBlock[4] = sub_1000E5154;
    v132 = v113;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_1000E18E4;
    aBlock[3] = &unk_1007E3208;
    v115 = _Block_copy(aBlock);
    v116 = v132;
    v117 = v114;
    swift_release(v116);
    -[NSObject saveWithQueue:completion:](v26, "saveWithQueue:completion:", v112, v115);
    _Block_release(v115);

    goto LABEL_9;
  }
  if (v69 != enum case for RDUserNotificationAction.viewRemindersInList(_:))
  {
    result = _diagnoseUnexpectedEnumCase<A>(type:)(v7, v7);
    __break(1u);
    return result;
  }
LABEL_57:
  v87 = swift_bridgeObjectRelease(v14);
  v88 = v123;
  v89 = ((uint64_t (*)(NSObject **, void (*)(char *, uint64_t, uint64_t), uint64_t, __n128))a1)(v123, v22, v7, v87);
  v26 = Logger.logObject.getter(v89);
  v90 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v26, v90))
  {
    (*(void (**)(NSObject **, uint64_t))(v8 + 8))(v88, v7);
    goto LABEL_9;
  }
  v91 = (uint8_t *)swift_slowAlloc(12, -1);
  v92 = (void *)swift_slowAlloc(32, -1);
  aBlock[0] = v92;
  *(_DWORD *)v91 = 136315138;
  v93 = RDUserNotificationAction.rawValue.getter(v92);
  v95 = v94;
  v130 = sub_10001A820(v93, v94, (uint64_t *)aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, aBlock);
  v96 = swift_bridgeObjectRelease(v95);
  (*(void (**)(NSObject **, uint64_t, __n128))(v8 + 8))(v88, v7, v96);
  _os_log_impl((void *)&_mh_execute_header, v26, v90, "RDAssignmentNotificationEngine: Unexpected action %s for notification type .assignmentNotification", v91, 0xCu);
  swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v92, -1, -1);
  v38 = (uint64_t)v91;
LABEL_8:
  swift_slowDealloc(v38, -1, -1);
LABEL_9:

LABEL_12:
  v39 = v127;
  if (qword_100836CE8 != -1)
    swift_once(&qword_100836CE8, sub_1000D9FF8);
  v40 = type metadata accessor for Logger(0);
  v41 = sub_10001AAA8(v40, (uint64_t)qword_100839E90);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.default.getter(v42);
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "RDAssignmentNotificationEngine: Completing action handler by calling completionHandler now.", v44, 2u);
    swift_slowDealloc(v44, -1, -1);
  }

  return v39();
}

uint64_t sub_1000E5128()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000E5154(uint64_t a1)
{
  uint64_t v1;

  sub_1000E1384(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1000E515C(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_1000E5168(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRetain(result);
  return result;
}

uint64_t sub_1000E5174()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E51A0()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t result;

  v1 = *(uint64_t (**)(uint64_t))(v0 + 16);
  if (v1)
    return v1(1);
  return result;
}

uint64_t sub_1000E51CC(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_1000E51DC(unint64_t *a1, unint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_1000151B0(255, a2, a3);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000E521C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 48, 7);
}

void sub_1000E5250(uint64_t a1)
{
  uint64_t v1;

  sub_1000E0E04(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(NSObject **)(v1 + 40));
}

unint64_t sub_1000E525C()
{
  unint64_t result;

  result = qword_10083BE50;
  if (!qword_10083BE50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10083BE50);
  }
  return result;
}

uint64_t sub_1000E52A0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000E52D4()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t result;

  v1 = *(uint64_t (**)(uint64_t))(v0 + 24);
  if (v1)
    return v1(1);
  return result;
}

uint64_t sub_1000E5300()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000E5324(uint64_t a1)
{
  uint64_t v1;

  sub_1000DB360(a1, v1);
}

uint64_t sub_1000E532C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_10083A360);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E5374(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_10083A360);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E53BC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_unknownObjectRelease(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000E53F0()
{
  uint64_t *v0;

  sub_1000DB6A0(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000E53FC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000E5424()
{
  sub_1000DB5D4();
}

uint64_t sub_1000E542C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_10083A360);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E5474(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A630((uint64_t *)&unk_10083A360);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000E54B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E54F8(uint64_t a1)
{
  uint64_t v1;

  return sub_100395608(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_1000E5528()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083A380);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083A380);
  if (qword_100837628 != -1)
    swift_once(&qword_100837628, sub_1004A1838);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872058);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000E55B8(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  _BYTE v18[24];

  v5 = sub_10001A630((uint64_t *)&unk_100847A90);
  __chkstk_darwin(v5);
  v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = sub_10001A630(&qword_10083A670);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = v2 + OBJC_IVAR____TtCC7remindd12RDDebouncing10LoadFactor_lastFire;
  v13 = type metadata accessor for DispatchTime(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v14(v12, 1, 1, v13);
  *(_QWORD *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  DoubleStacksQueue.init()(&type metadata for Double);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v9 + 32))(v2 + OBJC_IVAR____TtCC7remindd12RDDebouncing10LoadFactor_measurements, v11, v8);
  v14((uint64_t)v7, 1, 1, v13);
  v15 = v2 + OBJC_IVAR____TtCC7remindd12RDDebouncing10LoadFactor_lastFire;
  swift_beginAccess(v2 + OBJC_IVAR____TtCC7remindd12RDDebouncing10LoadFactor_lastFire, v18, 33, 0);
  sub_1000E6A6C((uint64_t)v7, v15);
  swift_endAccess(v18);
  return v2;
}

uint64_t sub_1000E5730()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtCC7remindd12RDDebouncing10LoadFactor_measurements;
  v2 = sub_10001A630(&qword_10083A670);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_10000882C(v0 + OBJC_IVAR____TtCC7remindd12RDDebouncing10LoadFactor_lastFire, (uint64_t *)&unk_100847A90);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

id sub_1000E57D8()
{
  return sub_1000E67EC(type metadata accessor for RDDebouncing);
}

uint64_t type metadata accessor for RDDebouncing()
{
  return objc_opt_self(_TtC7remindd12RDDebouncing);
}

uint64_t sub_1000E5804()
{
  return type metadata accessor for RDDebouncing.LoadFactor(0);
}

uint64_t type metadata accessor for RDDebouncing.LoadFactor(uint64_t a1)
{
  uint64_t result;

  result = qword_10083A3E8;
  if (!qword_10083A3E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDDebouncing.LoadFactor);
  return result;
}

void sub_1000E5848(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  v6[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[3] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_1000E58E4();
  if (v3 <= 0x3F)
  {
    v6[4] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000E5938(319);
    if (v5 <= 0x3F)
    {
      v6[5] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 6, v6, a1 + 80);
    }
  }
}

void sub_1000E58E4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_10083A3F8)
  {
    v0 = type metadata accessor for DoubleStacksQueue(0, &type metadata for Double);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_10083A3F8);
  }
}

void sub_1000E5938(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10083A400)
  {
    v2 = type metadata accessor for DispatchTime(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10083A400);
  }
}

uint64_t sub_1000E5990(uint64_t a1)
{
  _QWORD v2[10];

  v2[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[1] = (char *)&value witness table for () + 64;
  v2[2] = "\"";
  v2[3] = &unk_1006A7AD8;
  v2[4] = &unk_1006A7AF0;
  v2[5] = &unk_1006A7B08;
  v2[6] = &unk_1006A7AD8;
  v2[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[9] = (char *)&value witness table for Builtin.Int64 + 64;
  return swift_initClassMetadata2(a1, 0, 10, v2, a1 + 96);
}

void sub_1000E5A28()
{
  sub_1000E6C4C();
}

double sub_1000E5A44()
{
  uint64_t v0;
  double result;

  swift_release(*(_QWORD *)(v0 + qword_10083A510 + 8));
  sub_1000E6860(*(_QWORD *)(v0 + qword_10083A518), *(_QWORD *)(v0 + qword_10083A518 + 8), *(_QWORD *)(v0 + qword_10083A518 + 16), *(_QWORD *)(v0 + qword_10083A518 + 24), *(_BYTE *)(v0 + qword_10083A518 + 32));
  swift_release(*(_QWORD *)(v0 + qword_10083A520));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_10083A528 + 8));
  swift_release(*(_QWORD *)(v0 + qword_10083A538));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_10083A540));
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_10083A548)).n128_u64[0];
  return result;
}

double sub_1000E5AE4(uint64_t a1)
{
  double result;

  swift_release(*(_QWORD *)(a1 + qword_10083A510 + 8));
  sub_1000E6860(*(_QWORD *)(a1 + qword_10083A518), *(_QWORD *)(a1 + qword_10083A518 + 8), *(_QWORD *)(a1 + qword_10083A518 + 16), *(_QWORD *)(a1 + qword_10083A518 + 24), *(_BYTE *)(a1 + qword_10083A518 + 32));
  swift_release(*(_QWORD *)(a1 + qword_10083A520));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_10083A528 + 8));
  swift_release(*(_QWORD *)(a1 + qword_10083A538));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_10083A540));
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_10083A548)).n128_u64[0];
  return result;
}

uint64_t type metadata accessor for RDDebouncer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6C78(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RDDebouncer);
}

uint64_t sub_1000E5C24(double a1)
{
  return sub_1000E63B8(&OBJC_IVAR____TtC7remindd21RDDebouncerWithNumber_debouncer, a1);
}

id sub_1000E5E3C()
{
  return sub_1000E67EC(type metadata accessor for RDDebouncerWithNumber);
}

uint64_t type metadata accessor for RDDebouncerWithNumber()
{
  return objc_opt_self(_TtC7remindd21RDDebouncerWithNumber);
}

uint64_t sub_1000E5F84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  char *v11;
  _BYTE v12[24];
  uint64_t v13;

  sub_1000E6B28(a1, (uint64_t)v12);
  if (!v13)
  {
    sub_10000882C((uint64_t)v12, (uint64_t *)&unk_10083D5B0);
    goto LABEL_11;
  }
  v2 = type metadata accessor for RDDebounceableCKDatabaseNotification();
  if ((swift_dynamicCast(&v11, v12, (char *)&type metadata for Any + 8, v2, 6) & 1) == 0)
  {
LABEL_11:
    v9 = 0;
    return v9 & 1;
  }
  v3 = v11;
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd36RDDebounceableCKDatabaseNotification_databaseScope) != *(_QWORD *)&v11[OBJC_IVAR____TtC7remindd36RDDebounceableCKDatabaseNotification_databaseScope])
  {

    goto LABEL_11;
  }
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd36RDDebounceableCKDatabaseNotification_subscriptionOwnerUserRecordName);
  v5 = *(_QWORD *)(v1
                 + OBJC_IVAR____TtC7remindd36RDDebounceableCKDatabaseNotification_subscriptionOwnerUserRecordName
                 + 8);
  v6 = *(_QWORD *)&v11[OBJC_IVAR____TtC7remindd36RDDebounceableCKDatabaseNotification_subscriptionOwnerUserRecordName];
  v7 = *(_QWORD *)&v11[OBJC_IVAR____TtC7remindd36RDDebounceableCKDatabaseNotification_subscriptionOwnerUserRecordName
                     + 8];
  if (v4 == v6 && v5 == v7)
  {

    v9 = 1;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0);

  }
  return v9 & 1;
}

uint64_t sub_1000E61AC()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;

  v1 = v0;
  _StringGuts.grow(_:)(55);
  v2._object = (void *)0x80000001006F70A0;
  v2._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v2);
  v3 = objc_retainAutoreleasedReturnValue((id)CKDatabaseScopeString(*(_QWORD *)(v0
                                                                              + OBJC_IVAR____TtC7remindd36RDDebounceableCKDatabaseNotification_databaseScope)));
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 0xD000000000000023;
  v8._object = (void *)0x80000001006F70C0;
  String.append(_:)(v8);
  v9 = v1 + OBJC_IVAR____TtC7remindd36RDDebounceableCKDatabaseNotification_subscriptionOwnerUserRecordName;
  v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd36RDDebounceableCKDatabaseNotification_subscriptionOwnerUserRecordName);
  v11 = *(void **)(v9 + 8);
  swift_bridgeObjectRetain(v11);
  v12._countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v11);
  return 0;
}

id sub_1000E62E4()
{
  return sub_1000E67EC(type metadata accessor for RDDebounceableCKDatabaseNotification);
}

uint64_t type metadata accessor for RDDebounceableCKDatabaseNotification()
{
  return objc_opt_self(_TtC7remindd36RDDebounceableCKDatabaseNotification);
}

uint64_t sub_1000E63AC(double a1)
{
  return sub_1000E63B8(&OBJC_IVAR____TtC7remindd37RDDebouncerWithCKDatabaseNotification_debouncer, a1);
}

uint64_t sub_1000E63B8(_QWORD *a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(_QWORD *)(v2 + *a1);
  v10 = *(void **)(v9 + qword_10083A508);
  *v8 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v10 & 1) != 0)
  {
    v13 = v9 + qword_10083A518;
    v14 = *(_BYTE *)(v9 + qword_10083A518 + 33);
    v15 = *(_QWORD *)(v9 + qword_10083A518);
    v16 = *(_QWORD *)(v9 + qword_10083A518 + 8);
    v17 = *(_QWORD *)(v9 + qword_10083A518 + 16);
    v18 = *(_QWORD *)(v9 + qword_10083A518 + 24);
    v19 = *(_BYTE *)(v9 + qword_10083A518 + 32);
    *(double *)v13 = a2;
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)(v13 + 24) = 0;
    *(_QWORD *)(v13 + 8) = 0;
    *(_BYTE *)(v13 + 32) = 0;
    *(_BYTE *)(v13 + 33) = v14;
    return sub_1000E6860(v15, v16, v17, v18, v19);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000E65BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  Class isa;

  a4(a3);
  sub_1000E6BAC(a5, a6, a4);
  isa = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);

}

void sub_1000E671C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  Class isa;

  a5(a4);
  sub_1000E6BAC(a6, a7, a5);
  isa = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, _QWORD, Class))(a3 + 16))(a3, a1 & 1, isa);

}

id sub_1000E67E0()
{
  return sub_1000E67EC(type metadata accessor for RDDebouncerWithCKDatabaseNotification);
}

id sub_1000E67EC(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for RDDebouncerWithCKDatabaseNotification()
{
  return objc_opt_self(_TtC7remindd37RDDebouncerWithCKDatabaseNotification);
}

uint64_t sub_1000E684C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if ((a5 & 1) != 0)
    return swift_retain(a2);
  return result;
}

uint64_t sub_1000E6860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if ((a5 & 1) != 0)
    return swift_release(a2);
  return result;
}

uint64_t initializeWithCopy for RDDebouncing.Policy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  sub_1000E684C(*(_QWORD *)a2, v5, v6, v7, v8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

uint64_t assignWithCopy for RDDebouncing.Policy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  sub_1000E684C(*(_QWORD *)a2, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  sub_1000E6860(v9, v10, v11, v12, v13);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

__n128 initializeWithTake for RDDebouncing.Policy(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for RDDebouncing.Policy(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;

  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 32) = v4;
  sub_1000E6860(v5, v6, v7, v8, v9);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDDebouncing.Policy(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 34))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RDDebouncing.Policy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 34) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 34) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDDebouncing.Policy()
{
  return &type metadata for RDDebouncing.Policy;
}

uint64_t sub_1000E6A6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_100847A90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E6AB4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000E6AD8(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  sub_1000E671C(a1, a2, *(_QWORD *)(v7 + 16), a4, (uint64_t (*)(uint64_t))type metadata accessor for RDDebounceableCKDatabaseNotification, &qword_100844380, a7);
}

void sub_1000E6B00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  sub_1000E65BC(a1, *(_QWORD *)(v6 + 16), a3, (uint64_t (*)(uint64_t))type metadata accessor for RDDebounceableCKDatabaseNotification, &qword_100844380, a6);
}

uint64_t sub_1000E6B28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_10083D5B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000E6B70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100839DE0;
  if (!qword_100839DE0)
  {
    v1 = objc_opt_self(NSNumber);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100839DE0);
  }
  return result;
}

uint64_t sub_1000E6BAC(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = a3(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000E6BEC(char a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000E671C(a1, a2, *(_QWORD *)(v2 + 16), 0, (uint64_t (*)(uint64_t))sub_1000E6B70, &qword_100847B30, 255);
}

void sub_1000E6C1C(uint64_t a1)
{
  uint64_t v1;

  sub_1000E65BC(a1, *(_QWORD *)(v1 + 16), 0, (uint64_t (*)(uint64_t))sub_1000E6B70, &qword_100847B30, 255);
}

void sub_1000E6C4C()
{
  _swift_stdlib_reportUnimplementedInitializer("remindd.RDDebouncer", 19, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_1000E6C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t initializeBufferWithCopyOfBuffer for RDSavedAlarmTriggers(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t _s7remindd12RDDebouncingC6PolicyV8IntervalOwxx_0(uint64_t a1)
{
  return sub_1000E6860(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for RDDebouncing.Policy.Interval(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1000E684C(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for RDDebouncing.Policy.Interval(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1000E684C(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  sub_1000E6860(v8, v9, v10, v11, v12);
  return a1;
}

__n128 initializeWithTake for RDDebouncing.Policy.Interval(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for RDDebouncing.Policy.Interval(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 32) = v3;
  sub_1000E6860(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDDebouncing.Policy.Interval(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RDDebouncing.Policy.Interval(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000E6EA4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_1000E6EAC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for RDDebouncing.Policy.Interval()
{
  return &type metadata for RDDebouncing.Policy.Interval;
}

BOOL sub_1000E6ED8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void sub_1000E6EF0()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t sub_1000E6F1C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000E6F54 + 4 * byte_1006A7BE0[*v0]))(0x6769725465746164, 0xEC00000073726567);
}

unint64_t sub_1000E6F54()
{
  return 0xD000000000000010;
}

unint64_t sub_1000E6F70()
{
  return 0xD000000000000014;
}

uint64_t sub_1000E6F90()
{
  return 0x54656C6369686576;
}

uint64_t sub_1000E6FB4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000E8888(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000E6FD8(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1000E6FE4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EACC8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E700C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EACC8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E7034(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v27 = a3;
  v28 = a5;
  v9 = sub_10001A630(&qword_10083A778);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10000A388(a1, v14);
  v15 = sub_1000EACC8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RDSavedAlarmTriggers.CodingKeys, &type metadata for RDSavedAlarmTriggers.CodingKeys, v15, v14, v13);
  v30 = a2;
  v29 = 0;
  v16 = sub_10001A630(&qword_10083A718);
  v17 = sub_1000EAEE8(&qword_10083A780, &qword_10083A718, (void (*)(void))sub_1000EAE1C, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v30, &v29, v9, v16, v17);
  if (!v5)
  {
    v18 = v28;
    v30 = v27;
    v29 = 1;
    v19 = sub_10001A630(&qword_10083A730);
    v20 = sub_1000EAEE8(&qword_10083A790, &qword_10083A730, (void (*)(void))sub_1000EAE60, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v30, &v29, v9, v19, v20);
    v30 = a4;
    v29 = 2;
    v21 = sub_10001A630(&qword_10083A748);
    v22 = sub_1000EAEE8(&qword_10083A7A0, &qword_10083A748, (void (*)(void))sub_1000EAEA4, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v30, &v29, v9, v21, v22);
    v30 = v18;
    v29 = 3;
    v23 = sub_10001A630(&qword_10083A760);
    v24 = sub_1000EAEE8(&qword_10083A7B0, &qword_10083A760, (void (*)(void))sub_1000EAF4C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v30, &v29, v9, v23, v24);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1000E72AC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000E72E0 + 4 * byte_1006A7BE4[a1]))(0x73736572646461, 0xE700000000000000);
}

uint64_t sub_1000E72E0()
{
  return 0x4C746361746E6F63;
}

uint64_t sub_1000E7300()
{
  return 0x656475746974616CLL;
}

uint64_t sub_1000E7318()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_1000E7338()
{
  return 0x64757469676E6F6CLL;
}

uint64_t sub_1000E7354()
{
  return 0x614874694B70616DLL;
}

uint64_t sub_1000E7374()
{
  return 0x74696D69786F7270;
}

uint64_t sub_1000E7394()
{
  return 0x737569646172;
}

uint64_t sub_1000E73A8()
{
  return 0x676E6974756F72;
}

uint64_t sub_1000E73BC()
{
  return 0x656C746974;
}

unint64_t sub_1000E73D0()
{
  return 0xD000000000000014;
}

uint64_t sub_1000E73EC(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  double *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  unint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char v31;
  _BYTE v32[16];
  _BYTE v33[16];

  v3 = v1;
  v5 = sub_10001A630(&qword_10083A6D8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000A388(a1, v9);
  v11 = sub_1000EAB70();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RDSavedAlarmLocationTrigger.CodingKeys, &type metadata for RDSavedAlarmLocationTrigger.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = *((_QWORD *)v3 + 1);
  v32[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(*(_QWORD *)&v12, v13, v32, v5);
  if (!v2)
  {
    v14 = *((_QWORD *)v3 + 2);
    v15 = *((_QWORD *)v3 + 3);
    v32[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, v32, v5);
    v16 = v3[4];
    v32[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v32, v5, v16);
    v17 = *((_QWORD *)v3 + 5);
    v18 = *((_QWORD *)v3 + 6);
    v32[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, v32, v5);
    v19 = v3[7];
    v32[0] = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v32, v5, v19);
    sub_1000EABF8((uint64_t)(v3 + 8), (uint64_t)v33);
    sub_1000EABF8((uint64_t)v33, (uint64_t)v32);
    v31 = 5;
    v20 = sub_1000EAC40();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v32, &v31, v5, &type metadata for Data, v20);
    v21 = *((_QWORD *)v3 + 10);
    v32[0] = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v21, v32, v5);
    v22 = v3[11];
    v32[0] = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v32, v5, v22);
    v23 = *((_QWORD *)v3 + 12);
    v24 = *((_QWORD *)v3 + 13);
    v32[0] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, v32, v5);
    v25 = *((_QWORD *)v3 + 14);
    v26 = *((_QWORD *)v3 + 15);
    v32[0] = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, v32, v5);
    v27 = *((_QWORD *)v3 + 16);
    v28 = *((_QWORD *)v3 + 17);
    v32[0] = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, v28, v32, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000E7690@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1000E8A70(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1000E76BC(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1000E7034(a1, *v1, v1[1], v1[2], v1[3]);
}

BOOL sub_1000E76D8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = a1[1];
  v4 = a1[2];
  v3 = (_QWORD *)a1[3];
  v5 = a2[1];
  v7 = a2[2];
  v6 = (_QWORD *)a2[3];
  return sub_10030681C(*a1, *a2) && (sub_100306820(v2, v5) & 1) != 0 && sub_10030681C(v4, v7) && sub_100306730(v3, v6);
}

unint64_t sub_1000E7768()
{
  return 0xD000000000000010;
}

uint64_t sub_1000E7784@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000E8E04(a1, a2);
  *a3 = result & 1;
  return result;
}

void sub_1000E77AC(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1000E77B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EAC84();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E77E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EAC84();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E7808@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return sub_1000E7BF0(a1, &qword_10083A6F0, (uint64_t (*)(void))sub_1000EAC84, (uint64_t)&type metadata for RDSavedAlarmDateTrigger.CodingKeys, a2);
}

uint64_t sub_1000E7834(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E7D44(a1, a2, a3, &qword_10083A700, (uint64_t (*)(void))sub_1000EAC84, (uint64_t)&type metadata for RDSavedAlarmDateTrigger.CodingKeys);
}

BOOL sub_1000E7860(double *a1, double *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_1000E7874()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_1000E78B8(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1000E78F8()
{
  unsigned __int8 *v0;

  return sub_1000E72AC(*v0);
}

uint64_t sub_1000E7900@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000E8E88(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000E7924(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_1000E7930(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EAB70();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E7958(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EAB70();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_1000E7980@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[9];

  sub_1000E933C(a1, v8);
  if (!v2)
  {
    v5 = v8[7];
    *(_OWORD *)(a2 + 96) = v8[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = v8[8];
    v6 = v8[3];
    *(_OWORD *)(a2 + 32) = v8[2];
    *(_OWORD *)(a2 + 48) = v6;
    v7 = v8[5];
    *(_OWORD *)(a2 + 64) = v8[4];
    *(_OWORD *)(a2 + 80) = v7;
    result = (__n128)v8[1];
    *(_OWORD *)a2 = v8[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1000E79D8(_QWORD *a1)
{
  return sub_1000E73EC(a1);
}

uint64_t sub_1000E7A28(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[9];
  _OWORD v12[9];

  v2 = a1[7];
  v11[6] = a1[6];
  v11[7] = v2;
  v11[8] = a1[8];
  v3 = a1[3];
  v11[2] = a1[2];
  v11[3] = v3;
  v4 = a1[5];
  v11[4] = a1[4];
  v11[5] = v4;
  v5 = a1[1];
  v11[0] = *a1;
  v11[1] = v5;
  v6 = a2[7];
  v12[6] = a2[6];
  v12[7] = v6;
  v12[8] = a2[8];
  v7 = a2[3];
  v12[2] = a2[2];
  v12[3] = v7;
  v8 = a2[5];
  v12[4] = a2[4];
  v12[5] = v8;
  v9 = a2[1];
  v12[0] = *a2;
  v12[1] = v9;
  return sub_1000E85CC((double *)v11, (uint64_t)v12) & 1;
}

uint64_t sub_1000E7AA8()
{
  return 0x65746E49656D6974;
}

uint64_t sub_1000E7AC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x65746E49656D6974 && a2 == 0xEC0000006C617672)
  {
    result = swift_bridgeObjectRelease(0xEC0000006C617672);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65746E49656D6974, 0xEC0000006C617672, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1000E7B74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EAB2C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E7B9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EAB2C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E7BC4@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return sub_1000E7BF0(a1, &qword_10083A6A8, (uint64_t (*)(void))sub_1000EAB2C, (uint64_t)&type metadata for RDSavedAlarmTimeIntervalTrigger.CodingKeys, a2);
}

uint64_t sub_1000E7BF0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X3>, uint64_t (*a3)(void)@<X4>, uint64_t a4@<X5>, double *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t result;
  double *v18;
  uint64_t v19;

  v18 = a5;
  v9 = sub_10001A630(a2);
  v19 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10000A388(a1, v12);
  v14 = a3();
  v15 = dispatch thunk of Decoder.container<A>(keyedBy:)(a4, a4, v14, v12, v13);
  if (v5)
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  v16 = KeyedDecodingContainer.decode(_:forKey:)(v15, v9);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v9);
  result = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  *v18 = v16;
  return result;
}

uint64_t sub_1000E7D18(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E7D44(a1, a2, a3, &qword_10083A6B8, (uint64_t (*)(void))sub_1000EAB2C, (uint64_t)&type metadata for RDSavedAlarmTimeIntervalTrigger.CodingKeys);
}

uint64_t sub_1000E7D44(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(void), uint64_t a6)
{
  double *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v10 = sub_10001A630(a4);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v6;
  v15 = a1[3];
  v16 = a1[4];
  sub_10000A388(a1, v15);
  v17 = a5();
  v18 = dispatch thunk of Encoder.container<A>(keyedBy:)(a6, a6, v17, v15, v16);
  KeyedEncodingContainer.encode(_:forKey:)(v18, v10, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_1000E7E38()
{
  return 0x746E657665;
}

uint64_t sub_1000E7E4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x746E657665 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease(0xE500000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746E657665, 0xE500000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1000E7ED8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EAAE8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E7F00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EAAE8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E7F28@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v5 = sub_10001A630(&qword_10083A690);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000A388(a1, v9);
  v11 = sub_1000EAAE8();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RDSavedAlarmVehicleTrigger.CodingKeys, &type metadata for RDSavedAlarmVehicleTrigger.CodingKeys, v11, v9, v10);
  if (v2)
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  *a2 = v13;
  return result;
}

uint64_t sub_1000E8038(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_10001A630(&qword_10083A6A0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_10000A388(a1, v8);
  v10 = sub_1000EAAE8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RDSavedAlarmVehicleTrigger.CodingKeys, &type metadata for RDSavedAlarmVehicleTrigger.CodingKeys, v10, v8, v9);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v11, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void sub_1000E8120(id *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v5;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  double v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  _QWORD *v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  Swift::String v51;
  id v52;
  uint64_t ObjectType;
  Swift::String v54;
  Swift::String v55;
  void *v56;
  NSString v57;
  uint64_t v58;
  _OWORD v59[9];

  v10 = *a1;
  v11 = objc_msgSend(*a1, "trigger");
  v12 = objc_opt_self(REMAlarmDateTrigger);
  v13 = swift_dynamicCastObjCClass(v11, v12);
  if (v13)
  {
    v14 = (void *)v13;
    v15 = v11;
    v16 = sub_1000E9A4C(v14);

    if (!v5)
    {
      v17 = (_QWORD *)*a2;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
      *a2 = v17;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v17 = sub_1002C8C8C(0, v17[2] + 1, 1, v17);
        *a2 = v17;
      }
      v20 = v17[2];
      v19 = v17[3];
      if (v20 >= v19 >> 1)
        v17 = sub_1002C8C8C((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
      v17[2] = v20 + 1;
      *(double *)&v17[v20 + 4] = v16;
      *a2 = v17;
    }
LABEL_26:

    return;
  }

  v21 = objc_msgSend(v10, "trigger");
  v22 = objc_opt_self(REMAlarmLocationTrigger);
  v23 = swift_dynamicCastObjCClass(v21, v22);
  if (v23)
  {
    v24 = (void *)v23;
    v15 = v21;
    sub_1000E9E18(v24, (uint64_t *)v59);
    v25 = (_QWORD *)*a3;
    v26 = swift_isUniquelyReferenced_nonNull_native(*a3);
    *a3 = v25;
    if ((v26 & 1) == 0)
    {
      v25 = sub_1002C8B64(0, v25[2] + 1, 1, v25);
      *a3 = v25;
    }
    v28 = v25[2];
    v27 = v25[3];
    if (v28 >= v27 >> 1)
    {
      v25 = sub_1002C8B64((_QWORD *)(v27 > 1), v28 + 1, 1, v25);
      *a3 = v25;
    }
    v25[2] = v28 + 1;
    v29 = &v25[18 * v28];
    v29[2] = v59[0];
    v30 = v59[1];
    v31 = v59[2];
    v32 = v59[4];
    v29[5] = v59[3];
    v29[6] = v32;
    v29[3] = v30;
    v29[4] = v31;
    v33 = v59[5];
    v34 = v59[6];
    v35 = v59[8];
    v29[9] = v59[7];
    v29[10] = v35;
    v29[7] = v33;
    v29[8] = v34;
    goto LABEL_26;
  }

  v15 = objc_msgSend(v10, "trigger");
  v36 = objc_opt_self(REMAlarmTimeIntervalTrigger);
  v37 = (void *)swift_dynamicCastObjCClass(v15, v36);
  if (v37)
  {
    objc_msgSend(v37, "timeInterval");
    v39 = v38;
    v40 = (_QWORD *)*a4;
    v41 = swift_isUniquelyReferenced_nonNull_native(*a4);
    *a4 = v40;
    if ((v41 & 1) == 0)
    {
      v40 = sub_1002C8B58(0, v40[2] + 1, 1, v40);
      *a4 = v40;
    }
    v43 = v40[2];
    v42 = v40[3];
    if (v43 >= v42 >> 1)
      v40 = sub_1002C8B58((_QWORD *)(v42 > 1), v43 + 1, 1, v40);
    v40[2] = v43 + 1;
    v40[v43 + 4] = v39;
    *a4 = v40;
    goto LABEL_26;
  }

  v15 = objc_msgSend(v10, "trigger");
  v44 = objc_opt_self(REMAlarmVehicleTrigger);
  v45 = (void *)swift_dynamicCastObjCClass(v15, v44);
  if (v45)
  {
    v46 = objc_msgSend(v45, "event");
    v47 = (_QWORD *)*a5;
    v48 = swift_isUniquelyReferenced_nonNull_native(*a5);
    *a5 = v47;
    if ((v48 & 1) == 0)
    {
      v47 = sub_1002C8A4C(0, v47[2] + 1, 1, v47);
      *a5 = v47;
    }
    v50 = v47[2];
    v49 = v47[3];
    if (v50 >= v49 >> 1)
      v47 = sub_1002C8A4C((_QWORD *)(v49 > 1), v50 + 1, 1, v47);
    v47[2] = v50 + 1;
    v47[v50 + 4] = v46;
    *a5 = v47;
    goto LABEL_26;
  }

  _StringGuts.grow(_:)(74);
  v51._object = (void *)0x80000001006F7230;
  v51._countAndFlagsBits = 0xD000000000000047;
  String.append(_:)(v51);
  v52 = objc_msgSend(v10, "trigger", 0, 0xE000000000000000);
  ObjectType = swift_getObjectType();

  v54._countAndFlagsBits = _typeName(_:qualified:)(ObjectType, 0);
  String.append(_:)(v54);
  swift_bridgeObjectRelease();
  v55._countAndFlagsBits = 125;
  v55._object = (void *)0xE100000000000000;
  String.append(_:)(v55);
  v56 = (void *)objc_opt_self(REMError);
  v57 = String._bridgeToObjectiveC()();
  objc_msgSend(v56, "internalErrorWithDebugDescription:", v57, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v58);
}

uint64_t sub_1000E85CC(double *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  BOOL v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = *((_QWORD *)a1 + 1);
  v5 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    if (v5)
      return 0;
    goto LABEL_10;
  }
  if (!v5)
    return 0;
  v6 = *a1;
  v7 = *(_QWORD *)a1 == *(_QWORD *)a2 && v4 == v5;
  if (v7
    || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)&v6, v4, *(_QWORD *)a2, v5, 0),
        result = 0,
        (v8 & 1) != 0))
  {
LABEL_10:
    v10 = *((_QWORD *)a1 + 3);
    v11 = *(_QWORD *)(a2 + 24);
    if (v10)
    {
      if (!v11)
        return 0;
      v12 = *((_QWORD *)a1 + 2);
      v13 = *(_QWORD *)(a2 + 16);
      if (v12 != v13 || v10 != v11)
      {
        v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v10, v13, v11, 0);
        result = 0;
        if ((v14 & 1) == 0)
          return result;
      }
    }
    else if (v11)
    {
      return 0;
    }
    if (a1[4] != *(double *)(a2 + 32))
      return 0;
    v15 = *((_QWORD *)a1 + 6);
    v16 = *(_QWORD *)(a2 + 48);
    if (v15)
    {
      if (!v16)
        return 0;
      v17 = *((_QWORD *)a1 + 5);
      v18 = *(_QWORD *)(a2 + 40);
      if (v17 != v18 || v15 != v16)
      {
        v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v15, v18, v16, 0);
        result = 0;
        if ((v19 & 1) == 0)
          return result;
      }
    }
    else if (v16)
    {
      return 0;
    }
    if (a1[7] != *(double *)(a2 + 56))
      return 0;
    v20 = *((_QWORD *)a1 + 8);
    v21 = *((_QWORD *)a1 + 9);
    v22 = *(_QWORD *)(a2 + 64);
    v23 = *(_QWORD *)(a2 + 72);
    if (v21 >> 60 == 15)
    {
      if (v23 >> 60 == 15)
      {
LABEL_32:
        if (*((_QWORD *)a1 + 10) != *(_QWORD *)(a2 + 80) || a1[11] != *(double *)(a2 + 88))
          return 0;
        v26 = *((_QWORD *)a1 + 13);
        v27 = *(_QWORD *)(a2 + 104);
        if (v26)
        {
          if (!v27)
            return 0;
          v28 = *((_QWORD *)a1 + 12);
          v29 = *(_QWORD *)(a2 + 96);
          if (v28 != v29 || v26 != v27)
          {
            v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v26, v29, v27, 0);
            result = 0;
            if ((v30 & 1) == 0)
              return result;
          }
        }
        else if (v27)
        {
          return 0;
        }
        v31 = *((_QWORD *)a1 + 15);
        v32 = *(_QWORD *)(a2 + 120);
        if (v31)
        {
          if (!v32)
            return 0;
          v33 = *((_QWORD *)a1 + 14);
          v34 = *(_QWORD *)(a2 + 112);
          if (v33 != v34 || v31 != v32)
          {
            v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v31, v34, v32, 0);
            result = 0;
            if ((v35 & 1) == 0)
              return result;
          }
        }
        else if (v32)
        {
          return 0;
        }
        v36 = *((_QWORD *)a1 + 17);
        v37 = *(_QWORD *)(a2 + 136);
        if (v36)
        {
          if (v37)
          {
            v38 = *((_QWORD *)a1 + 16);
            v39 = *(_QWORD *)(a2 + 128);
            if (v38 == v39 && v36 == v37)
              return 1;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(v38, v36, v39, v37, 0) & 1) != 0)
              return 1;
          }
        }
        else if (!v37)
        {
          return 1;
        }
        return 0;
      }
    }
    else if (v23 >> 60 != 15)
    {
      sub_1000A70D0(*((_QWORD *)a1 + 8), *((_QWORD *)a1 + 9));
      sub_1000A70D0(v22, v23);
      sub_100140BAC(v20, v21);
      v25 = v24;
      sub_1000A71B4(v22, v23);
      sub_1000A71B4(v20, v21);
      if ((v25 & 1) == 0)
        return 0;
      goto LABEL_32;
    }
    sub_1000A70D0(*((_QWORD *)a1 + 8), *((_QWORD *)a1 + 9));
    sub_1000A70D0(v22, v23);
    sub_1000A71B4(v20, v21);
    sub_1000A71B4(v22, v23);
    return 0;
  }
  return result;
}

uint64_t sub_1000E8888(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x6769725465746164 && a2 == 0xEC00000073726567)
  {
    v5 = 0xEC00000073726567;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6769725465746164, 0xEC00000073726567, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x80000001006F7300;
    if (a2 == 0x80000001006F7300)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001006F7300, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x80000001006F7320)
  {
    v8 = 0x80000001006F7320;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001006F7320, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0x54656C6369686576 && a2 == 0xEF73726567676972)
  {
    swift_bridgeObjectRelease(0xEF73726567676972);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x54656C6369686576, 0xEF73726567676972, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1000E8A70(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v3 = sub_10001A630(&qword_10083A708);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10000A388(a1, v7);
  v9 = sub_1000EACC8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RDSavedAlarmTriggers.CodingKeys, &type metadata for RDSavedAlarmTriggers.CodingKeys, v9, v7, v8);
  if (v1)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  }
  else
  {
    v10 = sub_10001A630(&qword_10083A718);
    v23 = 0;
    v11 = sub_1000EAEE8(&qword_10083A720, &qword_10083A718, (void (*)(void))sub_1000EAD0C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v24, v10, &v23, v3, v10, v11);
    v7 = v24;
    v13 = sub_10001A630(&qword_10083A730);
    v23 = 1;
    v14 = sub_1000EAEE8(&qword_10083A738, &qword_10083A730, (void (*)(void))sub_1000EAD50, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v7);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v24, v13, &v23, v3, v13, v14);
    v15 = v24;
    v16 = sub_10001A630(&qword_10083A748);
    v23 = 2;
    v17 = sub_1000EAEE8(&qword_10083A750, &qword_10083A748, (void (*)(void))sub_1000EAD94, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v15);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v24, v16, &v23, v3, v16, v17);
    v18 = v24;
    v19 = sub_10001A630(&qword_10083A760);
    v23 = 3;
    v20 = sub_1000EAEE8(&qword_10083A768, &qword_10083A760, (void (*)(void))sub_1000EADD8, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v18);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v24, v19, &v23, v3, v19, v20);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v21 = v24;
    swift_bridgeObjectRetain(v24);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v7);
  }
  return v7;
}

uint64_t sub_1000E8E04(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000010 && a2 == 0x80000001006F72E0)
  {
    swift_bridgeObjectRelease(0x80000001006F72E0);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001006F72E0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

uint64_t sub_1000E8E88(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;

  if (a1 == 0x73736572646461 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73736572646461, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x4C746361746E6F63 && a2 == 0xEC0000006C656261)
  {
    v7 = 0xEC0000006C656261;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4C746361746E6F63, 0xEC0000006C656261, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x656475746974616CLL && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656475746974616CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEB00000000444955)
  {
    v9 = 0xEB00000000444955;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEB00000000444955, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x64757469676E6F6CLL && a2 == 0xE900000000000065)
  {
    v10 = 0xE900000000000065;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64757469676E6F6CLL, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x614874694B70616DLL && a2 == 0xEC000000656C646ELL)
  {
    v11 = 0xEC000000656C646ELL;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x614874694B70616DLL, 0xEC000000656C646ELL, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x74696D69786F7270 && a2 == 0xE900000000000079)
  {
    v12 = 0xE900000000000079;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74696D69786F7270, 0xE900000000000079, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0x737569646172 && a2 == 0xE600000000000000)
  {
    v13 = 0xE600000000000000;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737569646172, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_50;
  }
  if (a1 == 0xD000000000000014)
  {
    v14 = 0x80000001006F72C0;
    if (a2 == 0x80000001006F72C0)
      goto LABEL_55;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001006F72C0, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if (a1 == 0x676E6974756F72 && a2 == 0xE700000000000000)
  {
    v15 = 0xE700000000000000;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676E6974756F72, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_61;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 10;
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

void sub_1000E933C(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84[9];

  v5 = sub_10001A630(&qword_10083A6C0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  v56 = a1;
  sub_10000A388(a1, v9);
  v11 = sub_1000EAB70();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RDSavedAlarmLocationTrigger.CodingKeys, &type metadata for RDSavedAlarmLocationTrigger.CodingKeys, v11, v9, v10);
  if (v2)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v56);
  }
  else
  {
    LOBYTE(v66) = 0;
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v66, v5);
    v14 = v13;
    LOBYTE(v66) = 1;
    swift_bridgeObjectRetain(v13);
    v52 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v66, v5);
    v53 = v12;
    LOBYTE(v66) = 2;
    v16 = v15;
    swift_bridgeObjectRetain(v15);
    v17 = KeyedDecodingContainer.decode(_:forKey:)(&v66, v5);
    v55 = v16;
    v18 = v17;
    LOBYTE(v66) = 3;
    v51 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v66, v5);
    LOBYTE(v66) = 4;
    v20 = v19;
    swift_bridgeObjectRetain(v19);
    v21 = KeyedDecodingContainer.decode(_:forKey:)(&v66, v5);
    v54 = v20;
    v22 = v21;
    LOBYTE(v57) = 5;
    v23 = sub_1000EABB4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v66, &type metadata for Data, &v57, v5, &type metadata for Data, v23);
    v24 = v66;
    v25 = v67;
    LOBYTE(v66) = 6;
    v50 = v24;
    sub_1000A70D0(v24, v67);
    v49 = KeyedDecodingContainer.decode(_:forKey:)(&v66, v5);
    LOBYTE(v66) = 7;
    v45 = KeyedDecodingContainer.decode(_:forKey:)(&v66, v5);
    LOBYTE(v66) = 8;
    v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v66, v5);
    LOBYTE(v66) = 9;
    v48 = v26;
    swift_bridgeObjectRetain(v26);
    v44 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v66, v5);
    v47 = v27;
    v84[0] = 10;
    swift_bridgeObjectRetain(v27);
    v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v84, v5);
    v43 = v29;
    v30 = v28;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_QWORD *)&v57 = v53;
    *((_QWORD *)&v57 + 1) = v14;
    *(_QWORD *)&v58 = v52;
    *((_QWORD *)&v58 + 1) = v55;
    *(double *)&v59 = v18;
    v31 = v50;
    *((_QWORD *)&v59 + 1) = v51;
    *(_QWORD *)&v60 = v54;
    *((double *)&v60 + 1) = v22;
    *(_QWORD *)&v61 = v50;
    *((_QWORD *)&v61 + 1) = v25;
    v32 = v25;
    v33 = v48;
    *(_QWORD *)&v62 = v49;
    v34 = v45;
    *((double *)&v62 + 1) = v45;
    v35 = v47;
    *(_QWORD *)&v63 = v46;
    *((_QWORD *)&v63 + 1) = v48;
    *(_QWORD *)&v64 = v44;
    *((_QWORD *)&v64 + 1) = v47;
    *(_QWORD *)&v65 = v30;
    *((_QWORD *)&v65 + 1) = v43;
    sub_1000A7044(&v57);
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v35);
    v36 = v32;
    sub_1000A71B4(v31, v32);
    swift_bridgeObjectRelease(v14);
    v37 = v55;
    swift_bridgeObjectRelease(v55);
    v38 = v54;
    swift_bridgeObjectRelease(v54);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v56);
    v66 = v53;
    v67 = v14;
    v68 = v52;
    v69 = v37;
    v70 = v18;
    v71 = v51;
    v72 = v38;
    v73 = v22;
    v74 = v31;
    v75 = v36;
    v76 = v49;
    v77 = v34;
    v78 = v46;
    v79 = v48;
    v80 = v44;
    v81 = v47;
    v82 = v30;
    v83 = v43;
    sub_1000A7128(&v66);
    v39 = v64;
    a2[6] = v63;
    a2[7] = v39;
    a2[8] = v65;
    v40 = v60;
    a2[2] = v59;
    a2[3] = v40;
    v41 = v62;
    a2[4] = v61;
    a2[5] = v41;
    v42 = v58;
    *a2 = v57;
    a2[1] = v42;
  }
}

double sub_1000E9A4C(void *a1)
{
  double v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  Class isa;
  void (*v20)(char *, uint64_t, __n128);
  uint64_t v21;
  void (*v22)(char *, uint64_t, __n128);
  uint64_t v23;
  Class v24;
  id v25;
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  Swift::String v31;
  id v32;
  unint64_t v33;
  uint64_t v34;
  Swift::String v35;
  __n128 v36;
  Swift::String v37;
  void *v38;
  NSString v39;
  uint64_t v40;
  char *v42;
  char *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;

  v3 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v3);
  v48 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TimeZone(0);
  v46 = *(_QWORD *)(v5 - 8);
  v47 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DateComponents(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v43 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v42 = (char *)&v42 - v16;
  v17 = (void *)objc_opt_self(NSDateComponents);
  v44 = a1;
  v18 = objc_msgSend(a1, "dateComponents");
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v18);

  isa = DateComponents._bridgeToObjectiveC()().super.isa;
  v20 = *(void (**)(char *, uint64_t, __n128))(v9 + 8);
  v45 = v8;
  v21 = v8;
  v22 = v20;
  v23 = ((uint64_t (*)(char *, uint64_t))v20)(v11, v21);
  static TimeZone.current.getter(v23);
  v24 = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v46 + 8))(v7, v47);
  v25 = objc_msgSend(v17, "rem_dateWithDateComponents:timeZone:", isa, v24);

  if (!v25)
  {
    v28 = (uint64_t)v48;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v48, 1, 1, v12);
    goto LABEL_5;
  }
  v26 = v43;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v25);

  v27 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v28 = (uint64_t)v48;
  v27(v48, v26, v12);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v28, 0, 1, v12);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v28, 1, v12) == 1)
  {
LABEL_5:
    sub_1000EA320(v28);
    v49 = 0;
    v50 = 0xE000000000000000;
    _StringGuts.grow(_:)(64);
    v31._object = (void *)0x80000001006F7280;
    v31._countAndFlagsBits = 0xD00000000000003DLL;
    String.append(_:)(v31);
    v32 = objc_msgSend(v44, "dateComponents");
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v32);

    v33 = sub_1000EA360();
    v34 = v45;
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v45, v33);
    String.append(_:)(v35);
    v36 = swift_bridgeObjectRelease();
    v22(v11, v34, v36);
    v37._countAndFlagsBits = 125;
    v37._object = (void *)0xE100000000000000;
    String.append(_:)(v37);
    v38 = (void *)objc_opt_self(REMError);
    v39 = String._bridgeToObjectiveC()();
    objc_msgSend(v38, "internalErrorWithDebugDescription:", v39, swift_bridgeObjectRelease().n128_f64[0]);

    swift_willThrow(v40);
    return v1;
  }
  v29 = v42;
  v30 = ((uint64_t (*)(char *, uint64_t, uint64_t))v27)(v42, v28, v12);
  v1 = Date.timeIntervalSinceReferenceDate.getter(v30);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v29, v12);
  return v1;
}

void sub_1000E9E18(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v4 = objc_msgSend(a1, "structuredLocation");
  v5 = objc_msgSend(v4, "address");

  if (v5)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v53 = v7;
    v54 = v6;

  }
  else
  {
    v53 = 0;
    v54 = 0;
  }
  v8 = objc_msgSend(a1, "structuredLocation");
  v9 = objc_msgSend(v8, "contactLabel");

  if (v9)
  {
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v51 = v11;
    v52 = v10;

  }
  else
  {
    v51 = 0;
    v52 = 0;
  }
  v12 = objc_msgSend(a1, "structuredLocation");
  objc_msgSend(v12, "latitude");
  v14 = v13;

  v15 = objc_msgSend(a1, "structuredLocation");
  v16 = objc_msgSend(v15, "locationUID");

  if (v16)
  {
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v49 = v18;
    v50 = v17;

  }
  else
  {
    v49 = 0;
    v50 = 0;
  }
  v19 = objc_msgSend(a1, "structuredLocation");
  objc_msgSend(v19, "longitude");
  v21 = v20;

  v22 = objc_msgSend(a1, "structuredLocation");
  v23 = objc_msgSend(v22, "mapKitHandle");

  if (v23)
  {
    v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v45 = v25;
    v47 = v24;

  }
  else
  {
    v45 = 0xF000000000000000;
    v47 = 0;
  }
  v26 = objc_msgSend(a1, "proximity", v45, v47);
  v27 = objc_msgSend(a1, "structuredLocation");
  objc_msgSend(v27, "radius");
  v29 = v28;

  v30 = objc_msgSend(a1, "structuredLocation");
  v31 = objc_msgSend(v30, "referenceFrameString");

  if (v31)
  {
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v34 = v33;

  }
  else
  {
    v32 = 0;
    v34 = 0;
  }
  v35 = objc_msgSend(a1, "structuredLocation");
  v36 = objc_msgSend(v35, "routing");

  if (v36)
  {
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v39 = v38;

  }
  else
  {
    v37 = 0;
    v39 = 0;
  }
  v40 = objc_msgSend(a1, "structuredLocation");
  v41 = objc_msgSend(v40, "title");

  if (v41)
  {
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
    v44 = v43;

  }
  else
  {

    v42 = 0;
    v44 = 0;
  }
  *a2 = v54;
  a2[1] = v53;
  a2[2] = v52;
  a2[3] = v51;
  a2[4] = v14;
  a2[5] = v50;
  a2[6] = v49;
  a2[7] = v21;
  a2[8] = v48;
  a2[9] = v46;
  a2[10] = (uint64_t)v26;
  a2[11] = v29;
  a2[12] = v32;
  a2[13] = v34;
  a2[14] = v37;
  a2[15] = v39;
  a2[16] = v42;
  a2[17] = v44;
}

void sub_1000EA1A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  v2 = v1;
  v14 = _swiftEmptyArrayStorage;
  v12 = _swiftEmptyArrayStorage;
  v13 = _swiftEmptyArrayStorage;
  v11 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
    goto LABEL_13;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v9))
  {
    v5 = 4;
    while (1)
    {
      v6 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1)
         : *(id *)(a1 + 8 * v5);
      v7 = v6;
      v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      v10 = v6;
      sub_1000E8120(&v10, &v14, &v13, &v12, &v11);
      if (v2)
      {
        swift_bridgeObjectRelease_n(a1, 2);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }

      ++v5;
      if (v8 == v4)
        goto LABEL_17;
    }
    __break(1u);
LABEL_13:
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_17:
  swift_bridgeObjectRelease_n(a1, 2);
}

uint64_t sub_1000EA320(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A630((uint64_t *)&unk_1008380D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000EA360()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083A688;
  if (!qword_10083A688)
  {
    v1 = type metadata accessor for DateComponents(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DateComponents, v1);
    atomic_store(result, (unint64_t *)&qword_10083A688);
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSavedAlarmVehicleTrigger()
{
  return &type metadata for RDSavedAlarmVehicleTrigger;
}

ValueMetadata *type metadata accessor for RDSavedAlarmTimeIntervalTrigger()
{
  return &type metadata for RDSavedAlarmTimeIntervalTrigger;
}

double destroy for RDSavedAlarmLocationTrigger(_QWORD *a1)
{
  unint64_t v2;
  double result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[6]);
  v2 = a1[9];
  if (v2 >> 60 != 15)
    sub_1000A71C8(a1[8], v2);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[15]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1[17]).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for RDSavedAlarmLocationTrigger(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v6;
  v8 = (uint64_t *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v8;
  }
  else
  {
    v10 = *v8;
    sub_1000A70E4(*v8, v9);
    *(_QWORD *)(a1 + 64) = v10;
    *(_QWORD *)(a1 + 72) = v9;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v11;
  v12 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v12;
  v13 = *(_QWORD *)(a2 + 128);
  v14 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v13;
  *(_QWORD *)(a1 + 136) = v14;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v14);
  return a1;
}

_QWORD *assignWithCopy for RDSavedAlarmLocationTrigger(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  a1[5] = a2[5];
  v8 = a2[6];
  v9 = a1[6];
  a1[6] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[7] = a2[7];
  v10 = a2 + 8;
  v11 = a2[9];
  if (a1[9] >> 60 != 15)
  {
    if (v11 >> 60 != 15)
    {
      v13 = *v10;
      sub_1000A70E4(*v10, a2[9]);
      v14 = a1[8];
      v15 = a1[9];
      a1[8] = v13;
      a1[9] = v11;
      sub_1000A71C8(v14, v15);
      goto LABEL_8;
    }
    sub_1000EA68C((uint64_t)(a1 + 8));
    goto LABEL_6;
  }
  if (v11 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 4) = *(_OWORD *)v10;
    goto LABEL_8;
  }
  v12 = *v10;
  sub_1000A70E4(*v10, a2[9]);
  a1[8] = v12;
  a1[9] = v11;
LABEL_8:
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  v16 = a2[13];
  v17 = a1[13];
  a1[13] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  a1[14] = a2[14];
  v18 = a2[15];
  v19 = a1[15];
  a1[15] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  a1[16] = a2[16];
  v20 = a2[17];
  v21 = a1[17];
  a1[17] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  return a1;
}

uint64_t sub_1000EA68C(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for Data - 1) + 8))();
  return a1;
}

__n128 initializeWithTake for RDSavedAlarmLocationTrigger(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

_QWORD *assignWithTake for RDSavedAlarmLocationTrigger(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[6];
  v9 = a1[6];
  a1[5] = a2[5];
  a1[6] = v8;
  swift_bridgeObjectRelease(v9);
  a1[7] = a2[7];
  v10 = a2 + 8;
  v11 = a1[9];
  if (v11 >> 60 != 15)
  {
    v12 = a2[9];
    if (v12 >> 60 != 15)
    {
      v13 = a1[8];
      a1[8] = *v10;
      a1[9] = v12;
      sub_1000A71C8(v13, v11);
      goto LABEL_6;
    }
    sub_1000EA68C((uint64_t)(a1 + 8));
  }
  *((_OWORD *)a1 + 4) = *(_OWORD *)v10;
LABEL_6:
  a1[10] = a2[10];
  a1[11] = a2[11];
  v14 = a2[13];
  v15 = a1[13];
  a1[12] = a2[12];
  a1[13] = v14;
  swift_bridgeObjectRelease(v15);
  v16 = a2[15];
  v17 = a1[15];
  a1[14] = a2[14];
  a1[15] = v16;
  swift_bridgeObjectRelease(v17);
  v18 = a2[17];
  v19 = a1[17];
  a1[16] = a2[16];
  a1[17] = v18;
  swift_bridgeObjectRelease(v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDSavedAlarmLocationTrigger(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 144))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RDSavedAlarmLocationTrigger(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 144) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSavedAlarmLocationTrigger()
{
  return &type metadata for RDSavedAlarmLocationTrigger;
}

ValueMetadata *type metadata accessor for RDSavedAlarmDateTrigger()
{
  return &type metadata for RDSavedAlarmDateTrigger;
}

uint64_t destroy for RDSavedAlarmTriggers(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t *initializeWithCopy for RDSavedAlarmTriggers(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *assignWithCopy for RDSavedAlarmTriggers(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

__n128 initializeWithTake for RDSavedAlarmTriggers(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *assignWithTake for RDSavedAlarmTriggers(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDSavedAlarmTriggers(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDSavedAlarmTriggers(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSavedAlarmTriggers()
{
  return &type metadata for RDSavedAlarmTriggers;
}

unint64_t sub_1000EAAE8()
{
  unint64_t result;

  result = qword_10083A698;
  if (!qword_10083A698)
  {
    result = swift_getWitnessTable(&unk_1006A83E4, &type metadata for RDSavedAlarmVehicleTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083A698);
  }
  return result;
}

unint64_t sub_1000EAB2C()
{
  unint64_t result;

  result = qword_10083A6B0;
  if (!qword_10083A6B0)
  {
    result = swift_getWitnessTable(&unk_1006A8394, &type metadata for RDSavedAlarmTimeIntervalTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083A6B0);
  }
  return result;
}

unint64_t sub_1000EAB70()
{
  unint64_t result;

  result = qword_10083A6C8;
  if (!qword_10083A6C8)
  {
    result = swift_getWitnessTable(&unk_1006A8344, &type metadata for RDSavedAlarmLocationTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083A6C8);
  }
  return result;
}

unint64_t sub_1000EABB4()
{
  unint64_t result;

  result = qword_10083A6D0;
  if (!qword_10083A6D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10083A6D0);
  }
  return result;
}

uint64_t sub_1000EABF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_10083A6E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000EAC40()
{
  unint64_t result;

  result = qword_10083A6E8;
  if (!qword_10083A6E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10083A6E8);
  }
  return result;
}

unint64_t sub_1000EAC84()
{
  unint64_t result;

  result = qword_10083A6F8;
  if (!qword_10083A6F8)
  {
    result = swift_getWitnessTable(&unk_1006A82F4, &type metadata for RDSavedAlarmDateTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083A6F8);
  }
  return result;
}

unint64_t sub_1000EACC8()
{
  unint64_t result;

  result = qword_10083A710;
  if (!qword_10083A710)
  {
    result = swift_getWitnessTable(&unk_1006A82A4, &type metadata for RDSavedAlarmTriggers.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083A710);
  }
  return result;
}

unint64_t sub_1000EAD0C()
{
  unint64_t result;

  result = qword_10083A728;
  if (!qword_10083A728)
  {
    result = swift_getWitnessTable(&unk_1006A7D70, &type metadata for RDSavedAlarmDateTrigger);
    atomic_store(result, (unint64_t *)&qword_10083A728);
  }
  return result;
}

unint64_t sub_1000EAD50()
{
  unint64_t result;

  result = qword_10083A740;
  if (!qword_10083A740)
  {
    result = swift_getWitnessTable(&unk_1006A7DE8, &type metadata for RDSavedAlarmLocationTrigger);
    atomic_store(result, (unint64_t *)&qword_10083A740);
  }
  return result;
}

unint64_t sub_1000EAD94()
{
  unint64_t result;

  result = qword_10083A758;
  if (!qword_10083A758)
  {
    result = swift_getWitnessTable(&unk_1006A7E60, &type metadata for RDSavedAlarmTimeIntervalTrigger);
    atomic_store(result, (unint64_t *)&qword_10083A758);
  }
  return result;
}

unint64_t sub_1000EADD8()
{
  unint64_t result;

  result = qword_10083A770;
  if (!qword_10083A770)
  {
    result = swift_getWitnessTable(&unk_1006A7ED8, &type metadata for RDSavedAlarmVehicleTrigger);
    atomic_store(result, (unint64_t *)&qword_10083A770);
  }
  return result;
}

unint64_t sub_1000EAE1C()
{
  unint64_t result;

  result = qword_10083A788;
  if (!qword_10083A788)
  {
    result = swift_getWitnessTable(&unk_1006A7D48, &type metadata for RDSavedAlarmDateTrigger);
    atomic_store(result, (unint64_t *)&qword_10083A788);
  }
  return result;
}

unint64_t sub_1000EAE60()
{
  unint64_t result;

  result = qword_10083A798;
  if (!qword_10083A798)
  {
    result = swift_getWitnessTable(&unk_1006A7DC0, &type metadata for RDSavedAlarmLocationTrigger);
    atomic_store(result, (unint64_t *)&qword_10083A798);
  }
  return result;
}

unint64_t sub_1000EAEA4()
{
  unint64_t result;

  result = qword_10083A7A8;
  if (!qword_10083A7A8)
  {
    result = swift_getWitnessTable(&unk_1006A7E38, &type metadata for RDSavedAlarmTimeIntervalTrigger);
    atomic_store(result, (unint64_t *)&qword_10083A7A8);
  }
  return result;
}

uint64_t sub_1000EAEE8(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_1000A5A94(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000EAF4C()
{
  unint64_t result;

  result = qword_10083A7B8;
  if (!qword_10083A7B8)
  {
    result = swift_getWitnessTable(&unk_1006A7EB0, &type metadata for RDSavedAlarmVehicleTrigger);
    atomic_store(result, (unint64_t *)&qword_10083A7B8);
  }
  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for RDSavedAlarmTriggers.CodingKeys(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for RDSavedAlarmTriggers.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for RDSavedAlarmTriggers.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000EB078 + 4 * byte_1006A7BF4[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000EB0AC + 4 * byte_1006A7BEF[v4]))();
}

uint64_t sub_1000EB0AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EB0B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000EB0BCLL);
  return result;
}

uint64_t sub_1000EB0C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000EB0D0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000EB0D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EB0DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EB0E8(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1000EB0F0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for RDSavedAlarmTriggers.CodingKeys()
{
  return &type metadata for RDSavedAlarmTriggers.CodingKeys;
}

ValueMetadata *type metadata accessor for RDSavedAlarmDateTrigger.CodingKeys()
{
  return &type metadata for RDSavedAlarmDateTrigger.CodingKeys;
}

uint64_t getEnumTagSinglePayload for RDSavedAlarmLocationTrigger.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for RDSavedAlarmLocationTrigger.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1000EB1FC + 4 * byte_1006A7BFE[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1000EB230 + 4 * byte_1006A7BF9[v4]))();
}

uint64_t sub_1000EB230(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EB238(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000EB240);
  return result;
}

uint64_t sub_1000EB24C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000EB254);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1000EB258(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EB260(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDSavedAlarmLocationTrigger.CodingKeys()
{
  return &type metadata for RDSavedAlarmLocationTrigger.CodingKeys;
}

ValueMetadata *type metadata accessor for RDSavedAlarmTimeIntervalTrigger.CodingKeys()
{
  return &type metadata for RDSavedAlarmTimeIntervalTrigger.CodingKeys;
}

uint64_t _s7remindd23RDSavedAlarmDateTriggerV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000EB2CC + 4 * byte_1006A7C03[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000EB2EC + 4 * byte_1006A7C08[v4]))();
}

_BYTE *sub_1000EB2CC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000EB2EC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000EB2F4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000EB2FC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000EB304(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000EB30C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for RDSavedAlarmVehicleTrigger.CodingKeys()
{
  return &type metadata for RDSavedAlarmVehicleTrigger.CodingKeys;
}

unint64_t sub_1000EB32C()
{
  unint64_t result;

  result = qword_10083A7C0;
  if (!qword_10083A7C0)
  {
    result = swift_getWitnessTable(&unk_1006A7F9C, &type metadata for RDSavedAlarmVehicleTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083A7C0);
  }
  return result;
}

unint64_t sub_1000EB374()
{
  unint64_t result;

  result = qword_10083A7C8;
  if (!qword_10083A7C8)
  {
    result = swift_getWitnessTable(&unk_1006A8054, &type metadata for RDSavedAlarmTimeIntervalTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083A7C8);
  }
  return result;
}

unint64_t sub_1000EB3BC()
{
  unint64_t result;

  result = qword_10083A7D0;
  if (!qword_10083A7D0)
  {
    result = swift_getWitnessTable(&unk_1006A810C, &type metadata for RDSavedAlarmLocationTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083A7D0);
  }
  return result;
}

unint64_t sub_1000EB404()
{
  unint64_t result;

  result = qword_10083A7D8;
  if (!qword_10083A7D8)
  {
    result = swift_getWitnessTable(&unk_1006A81C4, &type metadata for RDSavedAlarmDateTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083A7D8);
  }
  return result;
}

unint64_t sub_1000EB44C()
{
  unint64_t result;

  result = qword_10083A7E0;
  if (!qword_10083A7E0)
  {
    result = swift_getWitnessTable(&unk_1006A827C, &type metadata for RDSavedAlarmTriggers.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083A7E0);
  }
  return result;
}

unint64_t sub_1000EB494()
{
  unint64_t result;

  result = qword_10083A7E8;
  if (!qword_10083A7E8)
  {
    result = swift_getWitnessTable(&unk_1006A81EC, &type metadata for RDSavedAlarmTriggers.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083A7E8);
  }
  return result;
}

unint64_t sub_1000EB4DC()
{
  unint64_t result;

  result = qword_10083A7F0;
  if (!qword_10083A7F0)
  {
    result = swift_getWitnessTable(&unk_1006A8214, &type metadata for RDSavedAlarmTriggers.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083A7F0);
  }
  return result;
}

unint64_t sub_1000EB524()
{
  unint64_t result;

  result = qword_10083A7F8;
  if (!qword_10083A7F8)
  {
    result = swift_getWitnessTable(&unk_1006A8134, &type metadata for RDSavedAlarmDateTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083A7F8);
  }
  return result;
}

unint64_t sub_1000EB56C()
{
  unint64_t result;

  result = qword_10083A800;
  if (!qword_10083A800)
  {
    result = swift_getWitnessTable(&unk_1006A815C, &type metadata for RDSavedAlarmDateTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083A800);
  }
  return result;
}

unint64_t sub_1000EB5B4()
{
  unint64_t result;

  result = qword_10083A808;
  if (!qword_10083A808)
  {
    result = swift_getWitnessTable(&unk_1006A807C, &type metadata for RDSavedAlarmLocationTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083A808);
  }
  return result;
}

unint64_t sub_1000EB5FC()
{
  unint64_t result;

  result = qword_10083A810;
  if (!qword_10083A810)
  {
    result = swift_getWitnessTable(&unk_1006A80A4, &type metadata for RDSavedAlarmLocationTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083A810);
  }
  return result;
}

unint64_t sub_1000EB644()
{
  unint64_t result;

  result = qword_10083A818;
  if (!qword_10083A818)
  {
    result = swift_getWitnessTable(&unk_1006A7FC4, &type metadata for RDSavedAlarmTimeIntervalTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083A818);
  }
  return result;
}

unint64_t sub_1000EB68C()
{
  unint64_t result;

  result = qword_10083A820;
  if (!qword_10083A820)
  {
    result = swift_getWitnessTable(&unk_1006A7FEC, &type metadata for RDSavedAlarmTimeIntervalTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083A820);
  }
  return result;
}

unint64_t sub_1000EB6D4()
{
  unint64_t result;

  result = qword_10083A828;
  if (!qword_10083A828)
  {
    result = swift_getWitnessTable(&unk_1006A7F0C, &type metadata for RDSavedAlarmVehicleTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083A828);
  }
  return result;
}

unint64_t sub_1000EB71C()
{
  unint64_t result;

  result = qword_10083A830;
  if (!qword_10083A830)
  {
    result = swift_getWitnessTable(&unk_1006A7F34, &type metadata for RDSavedAlarmVehicleTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083A830);
  }
  return result;
}

id sub_1000EB778()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  unint64_t v9;
  id v10;
  Class isa;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  BOOL v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  int64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  id v44;
  void *v45;
  void *v46;
  unint64_t v47;
  id v48;
  uint64_t v49;
  unint64_t v50;
  id v51;
  void *v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  id v72;
  Class v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  id v80;
  Class v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  id v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  int64_t v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  id v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  uint64_t v107;
  unint64_t v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  unint64_t v113;
  uint64_t v114;
  _QWORD v115[5];
  unint64_t v116;

  v1 = v0;
  v2 = _s10PredicatesOMa_1(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v83 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload(v4, v5, 34);
  v87 = v4;
  sub_10000A3AC();
  v7 = v6;
  v8 = (void *)sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v9 = (unint64_t)objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v8), "entity");
  objc_msgSend((id)v9, "setEntity:", v10);

  objc_msgSend((id)v9, "setAffectedStores:", 0);
  objc_msgSend((id)v9, "setPredicate:", v7);

  if (qword_1008376D0 != -1)
    goto LABEL_93;
  while (1)
  {
    sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend((id)v9, "setSortDescriptors:", isa);

    v12 = (void *)NSManagedObjectContext.fetch<A>(_:)(v9, v8);
    if (v1)
    {

      sub_1000EC49C((uint64_t)v87);
      return v1;
    }
    v1 = v12;
    v83 = 0;
    v112 = v12;
    v13 = sub_10001A630(&qword_10083FF50);
    v14 = sub_1000EC4D8();
    v15 = Sequence.elements<A>(ofType:)(v8, v13, v8, v14);
    swift_bridgeObjectRelease(v1);

    v116 = (unint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)v15 >> 62))
    {
      v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v16)
        break;
      goto LABEL_6;
    }
    v79 = v15 < 0 ? v15 : v15 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v15);
    v16 = _CocoaArrayWrapper.endIndex.getter(v79);
    swift_bridgeObjectRelease(v15);
    if (!v16)
      break;
LABEL_6:
    v9 = 0;
    v92 = v15 & 0xC000000000000001;
    v86 = v15 & 0xFFFFFFFFFFFFFF8;
    v85 = v15 + 32;
    v8 = &type metadata for String;
    v94 = (char *)&type metadata for Swift.AnyObject + 8;
    v84 = v15;
    v88 = v16;
    while (1)
    {
      if (v92)
      {
        v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v15);
      }
      else
      {
        if (v9 >= *(_QWORD *)(v86 + 16))
          goto LABEL_92;
        v17 = *(id *)(v85 + 8 * v9);
      }
      v1 = v17;
      v18 = __OFADD__(v9++, 1);
      if (v18)
        goto LABEL_91;
      v19 = objc_msgSend(v17, "remObjectID");
      if (v19)
        break;

LABEL_8:
      if (v9 == v16)
      {
LABEL_88:
        swift_bridgeObjectRelease(v15);
        v78 = (_QWORD *)v116;
        goto LABEL_99;
      }
    }
    v93 = v19;
    v20 = objc_msgSend(v1, "sharees");
    v21 = v1;
    if (!v20)
    {

      goto LABEL_8;
    }
    v1 = v20;
    v89 = v21;
    v91 = v9;
    v22 = sub_1000151B0(0, (unint64_t *)&qword_100839928, off_1007D6718);
    v23 = sub_1000EC524((unint64_t *)&unk_100843650, (unint64_t *)&qword_100839928, off_1007D6718);
    v24 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v1, v22, v23);

    v26 = v24;
    v114 = (uint64_t)&_swiftEmptySetSingleton;
    v95 = v22;
    if ((v24 & 0xC000000000000001) != 0)
    {
      if (v24 < 0)
        v27 = v24;
      else
        v27 = v24 & 0xFFFFFFFFFFFFFF8;
      v28 = __CocoaSet.makeIterator()(v27);
      v25 = Set.Iterator.init(_cocoa:)(v115, v28, v22, v23);
      v26 = v115[0];
      v98 = v115[1];
      v29 = v115[2];
      v30 = (char *)v115[3];
      v9 = v115[4];
    }
    else
    {
      v30 = 0;
      v31 = -1 << *(_BYTE *)(v26 + 32);
      v32 = *(_QWORD *)(v26 + 56);
      v98 = v26 + 56;
      v33 = ~v31;
      v34 = -v31;
      if (v34 < 64)
        v35 = ~(-1 << v34);
      else
        v35 = -1;
      v9 = v35 & v32;
      v29 = v33;
    }
    v96 = v26 & 0x7FFFFFFFFFFFFFFFLL;
    v90 = v29;
    v97 = (unint64_t)(v29 + 64) >> 6;
    v100 = v26;
    while (2)
    {
      if (v26 < 0)
      {
        v37 = __CocoaSet.Iterator.next()(v25);
        if (!v37)
          goto LABEL_76;
        v38 = v37;
        v110 = v37;
        swift_unknownObjectRetain(v37);
        swift_dynamicCast(&v112, &v110, v94, v95, 7);
        v39 = v112;
        swift_unknownObjectRelease(v38);
        v1 = v30;
        v103 = v9;
        if (!v39)
          goto LABEL_76;
      }
      else
      {
        if (v9)
        {
          v103 = (v9 - 1) & v9;
          v36 = __clz(__rbit64(v9)) | ((_QWORD)v30 << 6);
          v1 = v30;
        }
        else
        {
          v40 = (int64_t)(v30 + 1);
          if (__OFADD__(v30, 1))
            goto LABEL_90;
          if (v40 >= v97)
            goto LABEL_76;
          v41 = *(_QWORD *)(v98 + 8 * v40);
          v42 = v30 + 1;
          if (!v41)
          {
            v42 = v30 + 2;
            if ((uint64_t)(v30 + 2) >= v97)
              goto LABEL_76;
            v41 = *(_QWORD *)(v98 + 8 * (_QWORD)v42);
            if (!v41)
            {
              v42 = v30 + 3;
              if ((uint64_t)(v30 + 3) >= v97)
                goto LABEL_76;
              v41 = *(_QWORD *)(v98 + 8 * (_QWORD)v42);
              if (!v41)
              {
                v42 = v30 + 4;
                if ((uint64_t)(v30 + 4) >= v97)
                  goto LABEL_76;
                v41 = *(_QWORD *)(v98 + 8 * (_QWORD)v42);
                if (!v41)
                {
                  v43 = v30 + 5;
                  while ((char *)v97 != v43)
                  {
                    v41 = *(_QWORD *)(v98 + 8 * (_QWORD)v43++);
                    if (v41)
                    {
                      v42 = v43 - 1;
                      v26 = v100;
                      goto LABEL_48;
                    }
                  }
LABEL_76:
                  sub_1000C6560(v100);
                  v1 = (id)v114;
                  if ((v114 & 0xC000000000000001) != 0)
                  {
                    if (v114 < 0)
                      v69 = v114;
                    else
                      v69 = v114 & 0xFFFFFFFFFFFFFF8;
                    swift_bridgeObjectRetain(v114);
                    v70 = __CocoaSet.count.getter(v69);
                    swift_bridgeObjectRelease(v1);
                  }
                  else
                  {
                    v70 = *(_QWORD *)(v114 + 16);
                  }
                  v16 = v88;
                  v9 = v91;
                  if (v70)
                  {
                    v71 = objc_allocWithZone((Class)REMFamilyChecklistSharedGroceryList);
                    sub_1000151B0(0, (unint64_t *)&unk_10083D430, REMContactRepresentation_ptr);
                    sub_1000EC524(&qword_10083A848, (unint64_t *)&unk_10083D430, REMContactRepresentation_ptr);
                    v72 = v93;
                    v73 = Set._bridgeToObjectiveC()().super.isa;
                    v1 = objc_msgSend(v71, "initWithListID:participants:", v72, v73, swift_bridgeObjectRelease(v1).n128_f64[0]);

                    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v74);
                    v76 = *(_QWORD *)((v116 & 0xFFFFFFFFFFFFFF8) + 0x10);
                    v75 = *(_QWORD *)((v116 & 0xFFFFFFFFFFFFFF8) + 0x18);
                    if (v76 >= v75 >> 1)
                      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v75 > 1);
                    v77 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v76, v1);
                    specialized Array._endMutation()(v77);

                    v15 = v84;
                    v16 = v88;
                    v9 = v91;
                  }
                  else
                  {

                    swift_bridgeObjectRelease(v1);
                    v15 = v84;
                  }
                  goto LABEL_8;
                }
              }
            }
          }
LABEL_48:
          v103 = (v41 - 1) & v41;
          v1 = v42;
          v36 = __clz(__rbit64(v41)) + ((_QWORD)v42 << 6);
        }
        v39 = *(id *)(*(_QWORD *)(v26 + 48) + 8 * v36);
        if (!v39)
          goto LABEL_76;
      }
      v102 = (char *)v1;
      v44 = objc_msgSend(v39, "address");
      if (!v44)
      {

        goto LABEL_28;
      }
      v45 = v44;
      v101 = v39;
      v46 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
      v9 = v47;

      v48 = objc_msgSend(v99, "commonSharees");
      v49 = sub_1000151B0(0, (unint64_t *)&unk_10083D430, REMContactRepresentation_ptr);
      v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v48, v49);

      if (!((unint64_t)v15 >> 62))
      {
        v1 = *(id *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v1)
          goto LABEL_53;
LABEL_27:

        swift_bridgeObjectRelease(v15);
        swift_bridgeObjectRelease(v9);
LABEL_28:
        v30 = v102;
        v9 = v103;
        v26 = v100;
        continue;
      }
      break;
    }
    if (v15 < 0)
      v68 = v15;
    else
      v68 = v15 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v15);
    v1 = (id)_CocoaArrayWrapper.endIndex.getter(v68);
    swift_bridgeObjectRelease(v15);
    if (!v1)
      goto LABEL_27;
LABEL_53:
    v50 = 0;
    v107 = v15;
    v108 = v15 & 0xC000000000000001;
    v104 = v15 + 32;
    v105 = v15 & 0xFFFFFFFFFFFFFF8;
    v106 = v1;
    while (2)
    {
      if (v108)
      {
        v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v50, v15);
LABEL_59:
        v52 = v51;
        v18 = __OFADD__(v50, 1);
        v53 = (void *)(v50 + 1);
        if (v18)
        {
          __break(1u);
          goto LABEL_88;
        }
        v109 = v53;
        v54 = objc_msgSend(v51, "phones");
        v55 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v54, &type metadata for String);

        v56 = *(_QWORD *)(v55 + 16);
        if (v56)
        {
          v57 = sub_1000E525C();
          v58 = (uint64_t *)(v55 + 40);
          do
          {
            v59 = *(v58 - 1);
            v60 = *v58;
            v112 = v46;
            v113 = v9;
            v110 = v59;
            v111 = v60;
            if ((StringProtocol.contains<A>(_:)(&v110, &type metadata for String, &type metadata for String, v57, v57) & 1) != 0)
            {
              sub_1002DBD38((Swift::Int *)&v112, v52);

            }
            v58 += 2;
            --v56;
          }
          while (v56);
        }
        v61 = objc_msgSend(v52, "emails", swift_bridgeObjectRelease(v55).n128_f64[0]);
        v62 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v61, &type metadata for String);

        v63 = *(_QWORD *)(v62 + 16);
        if (v63)
        {
          v64 = sub_1000E525C();
          v65 = (uint64_t *)(v62 + 40);
          do
          {
            v66 = *(v65 - 1);
            v67 = *v65;
            v112 = v46;
            v113 = v9;
            v110 = v66;
            v111 = v67;
            if ((StringProtocol.contains<A>(_:)(&v110, &type metadata for String, &type metadata for String, v64, v64) & 1) != 0)
            {
              sub_1002DBD38((Swift::Int *)&v112, v52);

            }
            v65 += 2;
            --v63;
          }
          while (v63);
        }

        swift_bridgeObjectRelease(v62);
        v1 = v106;
        v15 = v107;
        v50 = (unint64_t)v109;
        if (v109 == v106)
          goto LABEL_27;
        continue;
      }
      break;
    }
    if (v50 < *(_QWORD *)(v105 + 16))
    {
      v51 = *(id *)(v104 + 8 * v50);
      goto LABEL_59;
    }
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    swift_once(&qword_1008376D0, sub_1004A7024);
  }
  swift_bridgeObjectRelease(v15);
  v78 = _swiftEmptyArrayStorage;
LABEL_99:
  v80 = objc_allocWithZone((Class)REMFamilyChecklistSharedGroceryListInvocationResult);
  sub_1000151B0(0, &qword_10083A840, REMFamilyChecklistSharedGroceryList_ptr);
  v81 = Array._bridgeToObjectiveC()().super.isa;
  v1 = objc_msgSend(v80, "initWithSharedGroceryLists:", v81, swift_bridgeObjectRelease(v78).n128_f64[0]);

  sub_1000EC49C((uint64_t)v87);
  return v1;
}

id sub_1000EC298()
{
  return sub_1000EB778();
}

uint64_t sub_1000EC2B8(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v4;
  id v5;
  id v6;
  unsigned int v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;

  v4 = (void *)objc_opt_self(REMCDAccount);
  v5 = objc_msgSend((id)objc_opt_self(REMAppleAccountUtilities), "sharedInstance");
  v6 = objc_msgSend(v4, "unsafeUntilSystemReady_primaryCloudKitAccountInContext:appleAccountUtilities:", a1, v5);

  if (v6 && objc_msgSend(v6, "didChooseToMigrate"))
    v7 = objc_msgSend(v6, "didFinishMigration") ^ 1;
  else
    v7 = 1;
  v8 = objc_msgSend(v1, "localeIdentifier");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  type metadata accessor for REMGroceryDummyModel(0);
  v12 = static REMGroceryDummyModel.isSupported(localeIdentifier:)(v9, v11);
  if (v2)
  {

    return swift_bridgeObjectRelease(v11);
  }
  v14 = v12;
  swift_bridgeObjectRelease(v11);
  if ((v14 & 1) == 0)
  {
    if (v6)
      v15 = 272;
    else
      v15 = 20;
    if ((v7 & 1) == 0)
    {
      v16 = 0;
      v15 = 16;
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  if (v6)
    v15 = 256;
  else
    v15 = 4;
  if (v7)
  {
LABEL_17:
    v16 = 0;
    goto LABEL_19;
  }
  v15 = 0;
  v16 = 1;
LABEL_19:
  v17 = objc_msgSend(objc_allocWithZone((Class)REMFamilyChecklistFamilyGroceryListEligibility), "initWithIsEligible:ineligibilityReasons:", v16, v15);
  v18 = objc_msgSend(objc_allocWithZone((Class)REMFamilyChecklistFamilyGroceryListEligibilityInvocationResult), "initWithFamilyGroceryListEligibility:", v17);

  return (uint64_t)v18;
}

uint64_t sub_1000EC47C(uint64_t a1)
{
  return sub_1000EC2B8(a1);
}

uint64_t sub_1000EC49C(uint64_t a1)
{
  uint64_t v2;

  v2 = _s10PredicatesOMa_1(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000EC4D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083A838;
  if (!qword_10083A838)
  {
    v1 = sub_1000A5A94(&qword_10083FF50);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10083A838);
  }
  return result;
}

uint64_t sub_1000EC524(unint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1000151B0(255, a2, a3);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000EC564(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  __n128 v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;

  v7 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (unint64_t)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(unint64_t, unint64_t, uint64_t, __n128))(v12 + 16))(v15, a2, v11, v13);
  v16 = (*(uint64_t (**)(unint64_t, uint64_t))(v12 + 88))(v15, v11);
  if (v16 == enum case for REMRemindersListDataView.ShowCompleted.after(_:))
  {
    v38[0] = a1;
    (*(void (**)(unint64_t, uint64_t))(v12 + 8))(v15, v11);
    goto LABEL_3;
  }
  if (v16 == enum case for REMRemindersListDataView.ShowCompleted.allowlist(_:))
  {
    (*(void (**)(unint64_t, uint64_t))(v12 + 96))(v15, v11);
    v17 = swift_bridgeObjectRelease(*(_QWORD *)v15);
  }
  else if (v16 != enum case for REMRemindersListDataView.ShowCompleted.off(_:))
  {
    v38[0] = a1;
    if (v16 != enum case for REMRemindersListDataView.ShowCompleted.on(_:))
    {
      _diagnoseUnexpectedEnumCase<A>(type:)(v11, v11);
      __break(1u);
      goto LABEL_29;
    }
LABEL_3:
    v3 = (unint64_t)sub_1000EC970(a3);
    v15 = (unint64_t)v18;
    a1 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
    v12 = *(_QWORD *)(v8 + 104);
    ((void (*)(char *, _QWORD, uint64_t))v12)(v10, enum case for REMRemindersListDataView.SortingDirection.ascending(_:), v7);
    a2 = sub_1000EC928();
    dispatch thunk of RawRepresentable.rawValue.getter(&v40, v7, a2);
    dispatch thunk of RawRepresentable.rawValue.getter(&v39, v7, a2);
    v20 = v39;
    v19 = v40;
    v8 = *(_QWORD *)(v8 + 8);
    ((void (*)(char *, uint64_t))v8)(v10, v7);
    if (v19 == v20)
      v11 = -1;
    else
      v11 = 1;
    if ((v3 & 0x8000000000000000) == 0 && (v3 & 0x4000000000000000) == 0)
    {
      v21 = v3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v3);
LABEL_9:
      v40 = v21;
      sub_1000ECEA8(&v40, v11);
      v22 = swift_bridgeObjectRelease(v3);
      v23 = v40;
      ((void (*)(char *, uint64_t, uint64_t, __n128))v12)(v10, a1, v7, v22);
      dispatch thunk of RawRepresentable.rawValue.getter(&v40, v7, a2);
      dispatch thunk of RawRepresentable.rawValue.getter(&v39, v7, a2);
      v25 = v39;
      v24 = v40;
      ((void (*)(char *, uint64_t))v8)(v10, v7);
      if (v24 == v25)
        v26 = -1;
      else
        v26 = 1;
      if ((v15 & 0x8000000000000000) != 0 || (v15 & 0x4000000000000000) != 0)
      {
        swift_bridgeObjectRetain(v15);
        v27 = (uint64_t)sub_1001E8864(v36);
        swift_bridgeObjectRelease(v15);
      }
      else
      {
        v27 = v15 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v15);
      }
      v40 = v27;
      sub_1000ECEA8(&v40, v26);
      swift_bridgeObjectRelease(v15);
      v28 = v40;
      v40 = v23;
      sub_1001E1178(v28);
      return v40;
    }
LABEL_29:
    swift_bridgeObjectRetain(v3);
    v21 = (uint64_t)sub_1001E8864(v35);
    swift_bridgeObjectRelease(v3);
    goto LABEL_9;
  }
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v8 + 104))(v10, enum case for REMRemindersListDataView.SortingDirection.ascending(_:), v7, v17);
  v30 = sub_1000EC928();
  dispatch thunk of RawRepresentable.rawValue.getter(&v40, v7, v30);
  dispatch thunk of RawRepresentable.rawValue.getter(&v39, v7, v30);
  v32 = v39;
  v31 = v40;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v31 == v32)
    v33 = -1;
  else
    v33 = 1;
  if (a3 < 0 || (a3 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain(a3);
    v34 = (uint64_t)sub_1001E8864(v37);
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v34 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
  }
  v40 = v34;
  sub_1000ECEA8(&v40, v33);
  return v40;
}

unint64_t sub_1000EC928()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083A850;
  if (!qword_10083A850)
  {
    v1 = type metadata accessor for REMRemindersListDataView.SortingDirection(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for REMRemindersListDataView.SortingDirection, v1);
    atomic_store(result, (unint64_t *)&qword_10083A850);
  }
  return result;
}

void *sub_1000EC970(uint64_t a1)
{
  uint64_t v2;
  void *result;
  uint64_t i;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  unsigned int v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v14 = (unint64_t)&_swiftEmptyArrayStorage;
  if (!((unint64_t)a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (void *)swift_bridgeObjectRetain(a1);
    if (v2)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease(a1);
    return &_swiftEmptyArrayStorage;
  }
  if (a1 < 0)
    v13 = a1;
  else
    v13 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  result = (void *)_CocoaArrayWrapper.endIndex.getter(v13);
  v2 = (uint64_t)result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      else
        v8 = *(id *)(a1 + 8 * i + 32);
      v9 = v8;
      v10 = objc_msgSend(v8, "completed", v14);
      v11 = v9;
      if (v10)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v6 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v12 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v6 >= v12 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1);
      }
      else
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v6 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v5 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v6 >= v5 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1);
      }
      v7 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v11);
      specialized Array._endMutation()(v7);

    }
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

id sub_1000ECB24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  id v26;
  unsigned int v27;
  void (*v28)(char *, uint64_t, uint64_t);
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  id result;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  id v42;

  v6 = sub_10001A630(&qword_100844170);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v41 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v40 = (char *)&v37 - v10;
  v11 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (uint64_t *)((char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v12 + 16))(v15, a2, v11, v13);
  v16 = (*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 88))(v15, v11);
  if (v16 == enum case for REMRemindersListDataView.ShowCompleted.after(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v15, v11);
    goto LABEL_3;
  }
  if (v16 == enum case for REMRemindersListDataView.ShowCompleted.allowlist(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v12 + 96))(v15, v11);
    swift_bridgeObjectRelease(*v15);
LABEL_21:
    v33 = sub_1000EDE98();
    return (id)Array<A>.sorted(by:)(a1, a3, v6, v33);
  }
  if (v16 == enum case for REMRemindersListDataView.ShowCompleted.off(_:))
    goto LABEL_21;
  if (v16 != enum case for REMRemindersListDataView.ShowCompleted.on(_:))
  {
    result = (id)_diagnoseUnexpectedEnumCase<A>(type:)(v11, v11);
    __break(1u);
    return result;
  }
LABEL_3:
  v17 = *(_QWORD *)(a3 + 16);
  if (v17)
  {
    v38 = a3;
    v39 = a1;
    v18 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v19 = a3 + v18;
    v20 = *(_QWORD *)(v7 + 72);
    v21 = swift_bridgeObjectRetain(a3);
    v22 = _swiftEmptyArrayStorage;
    v23 = _swiftEmptyArrayStorage;
    do
    {
      REMSortableElement.element.getter(&v42, v6, v21);
      v26 = v42;
      v27 = objc_msgSend(v42, "completed");

      v28 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
      if (v27)
      {
        v28(v40, v19, v6);
        if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
          v22 = (_QWORD *)sub_1002C8464(0, v22[2] + 1, 1, (unint64_t)v22);
        v30 = v22[2];
        v29 = v22[3];
        v31 = v30 + 1;
        if (v30 >= v29 >> 1)
        {
          v24 = sub_1002C8464(v29 > 1, v30 + 1, 1, (unint64_t)v22);
          v25 = v40;
          v22 = (_QWORD *)v24;
        }
        else
        {
          v24 = (uint64_t)v22;
          v25 = v40;
        }
      }
      else
      {
        v28(v41, v19, v6);
        if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0)
          v23 = (_QWORD *)sub_1002C8464(0, v23[2] + 1, 1, (unint64_t)v23);
        v30 = v23[2];
        v32 = v23[3];
        v31 = v30 + 1;
        if (v30 < v32 >> 1)
        {
          v24 = (uint64_t)v23;
          v25 = v41;
        }
        else
        {
          v24 = sub_1002C8464(v32 > 1, v30 + 1, 1, (unint64_t)v23);
          v25 = v41;
          v23 = (_QWORD *)v24;
        }
      }
      *(_QWORD *)(v24 + 16) = v31;
      (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v24 + v18 + v30 * v20, v25, v6);
      v19 += v20;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease(v38);
    a1 = v39;
  }
  else
  {
    v22 = _swiftEmptyArrayStorage;
    v23 = _swiftEmptyArrayStorage;
  }
  v35 = sub_1000EDE98();
  v36 = (void *)Array<A>.sorted(by:)(a1, v23, v6, v35);
  swift_bridgeObjectRelease(v23);
  v42 = v36;
  sub_1001E1184((uint64_t)v22);
  return v42;
}

uint64_t sub_1000ECEA8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[2];

  v4 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v4 = sub_1001D92D4(v4);
    *a1 = v4;
  }
  v6 = *(_QWORD *)(v4 + 16);
  v9[0] = v4 + 32;
  v9[1] = v6;
  sub_1000ECF28(v9, a2);
  return specialized ContiguousArray._endMutation()(v7);
}

void sub_1000ECF28(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  Swift::Int v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  id *v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  Swift::Int v46;
  Swift::Int v47;
  uint64_t *v48;
  uint64_t v49;
  Swift::Int v50;
  uint64_t v51;
  void *v52;
  void *v53;
  id v54;
  id v55;
  id v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  id v61;
  void *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  char v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  Swift::Int v132;
  char *v133;
  char *v134;
  unint64_t v135;
  Swift::Int v136;
  Swift::Int v137;
  Swift::Int v138;
  uint64_t v139;
  uint64_t v140;
  void **__dst;
  uint64_t v142;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;

  v3 = v2;
  v5 = a1[1];
  v6 = _minimumMergeRunLength(_:)(v5);
  if (v6 >= v5)
  {
    if (v5 < 0)
      goto LABEL_154;
    if (v5)
      sub_1000ED864(0, v5, 1, a1, a2);
    return;
  }
  if (v5 >= 0)
    v7 = v5;
  else
    v7 = v5 + 1;
  if (v5 < -1)
    goto LABEL_162;
  v8 = v6;
  v129 = a1;
  if (v5 < 2)
  {
    v12 = (char *)_swiftEmptyArrayStorage;
    v148 = (uint64_t)_swiftEmptyArrayStorage;
    __dst = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v5 != 1)
    {
      v15 = _swiftEmptyArrayStorage[2];
      if (v15 >= 2)
        goto LABEL_118;
LABEL_130:
      v121 = v12;
LABEL_131:
      swift_bridgeObjectRelease(v121);
      *(_QWORD *)((v148 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v128);
      swift_bridgeObjectRelease(v148);
      return;
    }
  }
  else
  {
    v9 = v7 >> 1;
    v10 = sub_1000EDE5C();
    v11 = static Array._allocateBufferUninitialized(minimumCapacity:)(v9, v10);
    *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) = v9;
    __dst = (void **)((v11 & 0xFFFFFFFFFFFFFF8) + 32);
    v148 = v11;
  }
  v13 = 0;
  v14 = *a1;
  v131 = *a1 + 16;
  v132 = v8;
  v130 = *a1 - 8;
  v12 = (char *)_swiftEmptyArrayStorage;
  v137 = v5;
  v142 = *a1;
  while (1)
  {
    v16 = v13++;
    v138 = v16;
    if (v13 < v5)
    {
      v133 = v12;
      v17 = *(void **)(v14 + 8 * v16);
      v18 = *(id *)(v14 + 8 * v13);
      v19 = v17;
      v20 = objc_msgSend(v18, "title");
      if (v20)
      {
        v21 = v20;
        v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        v24 = v23;

      }
      else
      {
        v22 = 0;
        v24 = 0xE000000000000000;
      }
      v146 = v22;
      v147 = v24;
      v25 = objc_msgSend(v19, "title");
      if (v25)
      {
        v26 = v25;
        v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
        v29 = v28;

      }
      else
      {
        v27 = 0;
        v29 = 0xE000000000000000;
      }
      v144 = v27;
      v145 = v29;
      v135 = sub_1000E525C();
      v139 = StringProtocol.localizedStandardCompare<A>(_:)(&v144, &type metadata for String, &type metadata for String, v135, v135);

      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(v29);
      v13 = v16 + 2;
      if (v16 + 2 < v5)
      {
        v30 = (id *)(v131 + 8 * v16);
        while (1)
        {
          v31 = *(v30 - 1);
          v32 = *v30;
          v33 = v31;
          v34 = objc_msgSend(v32, "title");
          if (v34)
          {
            v35 = v34;
            v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
            v38 = v37;

          }
          else
          {
            v36 = 0;
            v38 = 0xE000000000000000;
          }
          v146 = v36;
          v147 = v38;
          v39 = objc_msgSend(v33, "title");
          if (v39)
          {
            v40 = v39;
            v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
            v43 = v42;

          }
          else
          {
            v41 = 0;
            v43 = 0xE000000000000000;
          }
          v144 = v41;
          v145 = v43;
          v44 = StringProtocol.localizedStandardCompare<A>(_:)(&v144, &type metadata for String, &type metadata for String, v135, v135);

          swift_bridgeObjectRelease(v38);
          swift_bridgeObjectRelease(v43);
          if ((v139 == a2) == (v44 != a2))
            break;
          ++v13;
          ++v30;
          v5 = v137;
          if (v137 == v13)
          {
            v13 = v137;
            goto LABEL_34;
          }
        }
        v5 = v137;
LABEL_34:
        v16 = v138;
      }
      v14 = v142;
      v12 = v133;
      if (v139 == a2)
      {
        if (v13 < v16)
          goto LABEL_155;
        if (v16 < v13)
        {
          v45 = (uint64_t *)(v130 + 8 * v13);
          v46 = v13;
          v47 = v16;
          v48 = (uint64_t *)(v142 + 8 * v16);
          do
          {
            if (v47 != --v46)
            {
              if (!v142)
                goto LABEL_160;
              v49 = *v48;
              *v48 = *v45;
              *v45 = v49;
            }
            ++v47;
            --v45;
            ++v48;
          }
          while (v47 < v46);
        }
      }
    }
    if (v13 >= v5)
      goto LABEL_68;
    if (__OFSUB__(v13, v16))
      goto LABEL_153;
    if (v13 - v16 >= v132)
      goto LABEL_68;
    if (__OFADD__(v16, v132))
      goto LABEL_156;
    v50 = v16 + v132 >= v5 ? v5 : v16 + v132;
    if (v50 < v16)
      break;
    if (v13 != v50)
    {
      v134 = v12;
      v136 = v50;
      v51 = v130 + 8 * v13;
      do
      {
        v52 = *(void **)(v14 + 8 * v13);
        v140 = v51;
        while (1)
        {
          v53 = *(void **)v51;
          v54 = v52;
          v55 = v53;
          v56 = objc_msgSend(v54, "title");
          if (v56)
          {
            v57 = v56;
            v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
            v60 = v59;

          }
          else
          {
            v58 = 0;
            v60 = 0xE000000000000000;
          }
          v146 = v58;
          v147 = v60;
          v61 = objc_msgSend(v55, "title");
          if (v61)
          {
            v62 = v61;
            v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
            v65 = v64;

          }
          else
          {
            v63 = 0;
            v65 = 0xE000000000000000;
          }
          v144 = v63;
          v145 = v65;
          v66 = sub_1000E525C();
          v67 = StringProtocol.localizedStandardCompare<A>(_:)(&v144, &type metadata for String, &type metadata for String, v66, v66);

          swift_bridgeObjectRelease(v60);
          swift_bridgeObjectRelease(v65);
          if (v67 != a2)
            break;
          v14 = v142;
          if (!v142)
            goto LABEL_158;
          v68 = *(void **)v51;
          v52 = *(void **)(v51 + 8);
          *(_QWORD *)v51 = v52;
          *(_QWORD *)(v51 + 8) = v68;
          v51 -= 8;
          if (v13 == ++v16)
            goto LABEL_55;
        }
        v14 = v142;
LABEL_55:
        ++v13;
        v16 = v138;
        v51 = v140 + 8;
      }
      while (v13 != v136);
      v13 = v136;
      v12 = v134;
    }
LABEL_68:
    if (v13 < v16)
      goto LABEL_148;
    v69 = v12;
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) != 0)
      v12 = v69;
    else
      v12 = sub_1001D4DF0(0, *((_QWORD *)v69 + 2) + 1, 1, v69);
    v71 = *((_QWORD *)v12 + 2);
    v70 = *((_QWORD *)v12 + 3);
    v15 = v71 + 1;
    v14 = v142;
    if (v71 >= v70 >> 1)
    {
      v120 = sub_1001D4DF0((char *)(v70 > 1), v71 + 1, 1, v12);
      v14 = v142;
      v12 = v120;
    }
    *((_QWORD *)v12 + 2) = v15;
    v72 = v12 + 32;
    v73 = &v12[16 * v71 + 32];
    *(_QWORD *)v73 = v138;
    *((_QWORD *)v73 + 1) = v13;
    if (v71)
    {
      while (1)
      {
        v74 = v15 - 1;
        if (v15 >= 4)
        {
          v79 = &v72[16 * v15];
          v80 = *((_QWORD *)v79 - 8);
          v81 = *((_QWORD *)v79 - 7);
          v85 = __OFSUB__(v81, v80);
          v82 = v81 - v80;
          if (v85)
            goto LABEL_137;
          v84 = *((_QWORD *)v79 - 6);
          v83 = *((_QWORD *)v79 - 5);
          v85 = __OFSUB__(v83, v84);
          v77 = v83 - v84;
          v78 = v85;
          if (v85)
            goto LABEL_138;
          v86 = v15 - 2;
          v87 = &v72[16 * v15 - 32];
          v89 = *(_QWORD *)v87;
          v88 = *((_QWORD *)v87 + 1);
          v85 = __OFSUB__(v88, v89);
          v90 = v88 - v89;
          if (v85)
            goto LABEL_140;
          v85 = __OFADD__(v77, v90);
          v91 = v77 + v90;
          if (v85)
            goto LABEL_143;
          if (v91 >= v82)
          {
            v109 = &v72[16 * v74];
            v111 = *(_QWORD *)v109;
            v110 = *((_QWORD *)v109 + 1);
            v85 = __OFSUB__(v110, v111);
            v112 = v110 - v111;
            if (v85)
              goto LABEL_147;
            v102 = v77 < v112;
            goto LABEL_105;
          }
        }
        else
        {
          if (v15 != 3)
          {
            v103 = *((_QWORD *)v12 + 4);
            v104 = *((_QWORD *)v12 + 5);
            v85 = __OFSUB__(v104, v103);
            v96 = v104 - v103;
            v97 = v85;
            goto LABEL_99;
          }
          v76 = *((_QWORD *)v12 + 4);
          v75 = *((_QWORD *)v12 + 5);
          v85 = __OFSUB__(v75, v76);
          v77 = v75 - v76;
          v78 = v85;
        }
        if ((v78 & 1) != 0)
          goto LABEL_139;
        v86 = v15 - 2;
        v92 = &v72[16 * v15 - 32];
        v94 = *(_QWORD *)v92;
        v93 = *((_QWORD *)v92 + 1);
        v95 = __OFSUB__(v93, v94);
        v96 = v93 - v94;
        v97 = v95;
        if (v95)
          goto LABEL_142;
        v98 = &v72[16 * v74];
        v100 = *(_QWORD *)v98;
        v99 = *((_QWORD *)v98 + 1);
        v85 = __OFSUB__(v99, v100);
        v101 = v99 - v100;
        if (v85)
          goto LABEL_145;
        if (__OFADD__(v96, v101))
          goto LABEL_146;
        if (v96 + v101 >= v77)
        {
          v102 = v77 < v101;
LABEL_105:
          if (v102)
            v74 = v86;
          goto LABEL_107;
        }
LABEL_99:
        if ((v97 & 1) != 0)
          goto LABEL_141;
        v105 = &v72[16 * v74];
        v107 = *(_QWORD *)v105;
        v106 = *((_QWORD *)v105 + 1);
        v85 = __OFSUB__(v106, v107);
        v108 = v106 - v107;
        if (v85)
          goto LABEL_144;
        if (v108 < v96)
          goto LABEL_14;
LABEL_107:
        v113 = v74 - 1;
        if (v74 - 1 >= v15)
        {
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
          goto LABEL_157;
        }
        if (!v14)
          goto LABEL_159;
        v114 = v12;
        v115 = &v72[16 * v113];
        v116 = *(_QWORD *)v115;
        v117 = &v72[16 * v74];
        v118 = *((_QWORD *)v117 + 1);
        sub_1000EDA08((void **)(v14 + 8 * *(_QWORD *)v115), (id *)(v14 + 8 * *(_QWORD *)v117), v14 + 8 * v118, __dst, a2);
        if (v2)
        {
LABEL_116:
          v121 = v114;
          goto LABEL_131;
        }
        if (v118 < v116)
          goto LABEL_134;
        if (v74 > *((_QWORD *)v114 + 2))
          goto LABEL_135;
        *(_QWORD *)v115 = v116;
        *(_QWORD *)&v72[16 * v113 + 8] = v118;
        v119 = *((_QWORD *)v114 + 2);
        if (v74 >= v119)
          goto LABEL_136;
        v15 = v119 - 1;
        memmove(&v72[16 * v74], v117 + 16, 16 * (v119 - 1 - v74));
        v12 = v114;
        *((_QWORD *)v114 + 2) = v119 - 1;
        v14 = v142;
        if (v119 <= 2)
          goto LABEL_14;
      }
    }
    v15 = 1;
LABEL_14:
    v5 = v137;
    if (v13 >= v137)
    {
      v3 = v2;
      if (v15 < 2)
        goto LABEL_130;
LABEL_118:
      v122 = *v129;
      while (1)
      {
        v123 = v15 - 2;
        if (v15 < 2)
          goto LABEL_149;
        if (!v122)
          goto LABEL_161;
        v114 = v12;
        v124 = *(_QWORD *)&v12[16 * v123 + 32];
        v125 = *(_QWORD *)&v12[16 * v15 + 24];
        sub_1000EDA08((void **)(v122 + 8 * v124), (id *)(v122 + 8 * *(_QWORD *)&v12[16 * v15 + 16]), v122 + 8 * v125, __dst, a2);
        if (v3)
          goto LABEL_116;
        if (v125 < v124)
          goto LABEL_150;
        if ((swift_isUniquelyReferenced_nonNull_native(v114) & 1) == 0)
          v114 = sub_1001D52E4((uint64_t)v114);
        if (v123 >= *((_QWORD *)v114 + 2))
          goto LABEL_151;
        v126 = &v114[16 * v123 + 32];
        *(_QWORD *)v126 = v124;
        *((_QWORD *)v126 + 1) = v125;
        v127 = *((_QWORD *)v114 + 2);
        if (v15 > v127)
          goto LABEL_152;
        memmove(&v114[16 * v15 + 16], &v114[16 * v15 + 32], 16 * (v127 - v15));
        v12 = v114;
        *((_QWORD *)v114 + 2) = v127 - 1;
        v15 = v127 - 1;
        if (v127 <= 2)
          goto LABEL_130;
      }
    }
  }
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

void sub_1000ED864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  char **v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char **v17;
  id v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v29;
  uint64_t v31;
  _QWORD v32[4];
  uint64_t v33;

  if (a3 != a2)
  {
    v31 = *a4;
    v5 = *a4 + 8 * a3 - 8;
    v6 = &selRef_subscriptionOwnerUserRecordID;
LABEL_5:
    v7 = *(void **)(v31 + 8 * a3);
    v8 = a1;
    v29 = v5;
    v33 = a3;
    while (1)
    {
      v9 = *(void **)v5;
      v10 = v7;
      v11 = v9;
      v12 = objc_msgSend(v10, v6[55]);
      if (v12)
      {
        v13 = v12;
        v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        v16 = v15;

      }
      else
      {
        v14 = 0;
        v16 = 0xE000000000000000;
      }
      v32[2] = v14;
      v32[3] = v16;
      v17 = v6;
      v18 = objc_msgSend(v11, v6[55]);
      if (v18)
      {
        v19 = v18;
        v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        v22 = v21;

      }
      else
      {
        v20 = 0;
        v22 = 0xE000000000000000;
      }
      v32[0] = v20;
      v32[1] = v22;
      v23 = sub_1000E525C();
      v24 = StringProtocol.localizedStandardCompare<A>(_:)(v32, &type metadata for String, &type metadata for String, v23, v23);

      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(v22);
      v6 = v17;
      v25 = v33;
      if (v24 != a5)
      {
LABEL_4:
        a3 = v25 + 1;
        v5 = v29 + 8;
        if (a3 == a2)
          return;
        goto LABEL_5;
      }
      if (!v31)
        break;
      v26 = *(void **)v5;
      v7 = *(void **)(v5 + 8);
      *(_QWORD *)v5 = v7;
      *(_QWORD *)(v5 + 8) = v26;
      v5 -= 8;
      if (v25 == ++v8)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t sub_1000EDA08(void **__src, id *a2, unint64_t a3, void **__dst, uint64_t a5)
{
  void **v5;
  id *v6;
  void **v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id *v30;
  void **v31;
  id *v32;
  id *v33;
  void **v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  id *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t result;
  void **v52;
  void **v53;
  void **v55;
  unint64_t v56;
  id *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void **v63;
  void **v64;
  id *v65;

  v5 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v65 = __src;
  v64 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v31 = &v5[v13];
      v63 = v31;
      v65 = v6;
      v53 = v7;
      if (v7 < v6 && v11 >= 8)
      {
        v32 = (id *)(a3 - 8);
        v33 = v6;
        v52 = v5;
        do
        {
          v56 = (unint64_t)v31;
          v34 = v31 - 1;
          v35 = *--v33;
          v36 = *(v31 - 1);
          v37 = v35;
          v38 = objc_msgSend(v36, "title");
          v58 = v6;
          if (v38)
          {
            v39 = v38;
            v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
            v42 = v41;

          }
          else
          {
            v40 = 0;
            v42 = 0xE000000000000000;
          }
          v61 = v40;
          v62 = v42;
          v43 = objc_msgSend(v37, "title");
          if (v43)
          {
            v44 = v43;
            v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
            v47 = v46;

          }
          else
          {
            v45 = 0;
            v47 = 0xE000000000000000;
          }
          v48 = v32 + 1;
          v59 = v45;
          v60 = v47;
          v49 = sub_1000E525C();
          v50 = StringProtocol.localizedStandardCompare<A>(_:)(&v59, &type metadata for String, &type metadata for String, v49, v49);

          swift_bridgeObjectRelease(v42);
          swift_bridgeObjectRelease(v47);
          if (v50 == a5)
          {
            v31 = (void **)v56;
            if (v48 != v58 || v32 >= v58)
              *v32 = *v33;
            v65 = v33;
          }
          else
          {
            v63 = v34;
            if ((unint64_t)v48 < v56 || (unint64_t)v32 >= v56 || v48 != (id *)v56)
              *v32 = *v34;
            v33 = v58;
            v31 = v34;
          }
          if (v33 <= v53)
            break;
          --v32;
          v6 = v33;
        }
        while (v31 > v52);
      }
      goto LABEL_54;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v55 = &v5[v10];
    v63 = v55;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        v14 = *v5;
        v15 = *v6;
        v16 = v14;
        v17 = objc_msgSend(v15, "title");
        if (v17)
        {
          v18 = v17;
          v19 = v6;
          v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
          v22 = v21;

        }
        else
        {
          v19 = v6;
          v20 = 0;
          v22 = 0xE000000000000000;
        }
        v61 = v20;
        v62 = v22;
        v23 = objc_msgSend(v16, "title");
        if (v23)
        {
          v24 = v23;
          v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
          v27 = v26;

        }
        else
        {
          v25 = 0;
          v27 = 0xE000000000000000;
        }
        v59 = v25;
        v60 = v27;
        v28 = sub_1000E525C();
        v29 = StringProtocol.localizedStandardCompare<A>(_:)(&v59, &type metadata for String, &type metadata for String, v28, v28);

        swift_bridgeObjectRelease(v22);
        swift_bridgeObjectRelease(v27);
        if (v29 == a5)
        {
          v30 = v19 + 1;
          if (v7 < v19 || v7 >= v30 || v7 != v19)
            *v7 = *v19;
        }
        else
        {
          if (v7 != v5)
            *v7 = *v5;
          v64 = ++v5;
          v30 = v19;
        }
        ++v7;
        if (v5 >= v55)
          break;
        v6 = v30;
      }
      while ((unint64_t)v30 < a3);
      v65 = v7;
    }
LABEL_54:
    sub_1001D4FA4(&v65, &v64, &v63);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

unint64_t sub_1000EDE5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083AE90;
  if (!qword_10083AE90)
  {
    v1 = objc_opt_self(REMCDReminder);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10083AE90);
  }
  return result;
}

unint64_t sub_1000EDE98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083A858;
  if (!qword_10083A858)
  {
    v1 = sub_1000A5A94(&qword_100844170);
    result = swift_getWitnessTable(&protocol conformance descriptor for REMSortableElement<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10083A858);
  }
  return result;
}

uint64_t sub_1000EDEE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083A860);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083A860);
  if (qword_100837640 != -1)
    swift_once(&qword_100837640, sub_1004A188C);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_1008720A0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_QWORD *sub_1000EDF74(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  _QWORD *v34;
  id v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  id v47;
  _QWORD *v48;
  uint64_t v49;
  void *v50;
  id v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  id v63;
  char *v64;
  _QWORD *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  id v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  unint64_t v96;
  void *v97;
  _QWORD *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  _QWORD *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  id v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;

  v5 = v4;
  v118 = a4;
  v119 = a3;
  v125 = a1;
  v126 = a2;
  v121 = *v4;
  v109 = sub_10001A630((uint64_t *)&unk_100838070);
  v108 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v107 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630((uint64_t *)&unk_10083A960);
  v111 = *(_QWORD *)(v7 - 8);
  v112 = v7;
  __chkstk_darwin(v7);
  v110 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630((uint64_t *)&unk_100838080);
  v114 = *(_QWORD *)(v9 - 8);
  v115 = v9;
  __chkstk_darwin(v9);
  v113 = (char *)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A630(&qword_10083A970);
  __chkstk_darwin(v11);
  v106 = (char *)&v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = (_QWORD *)sub_10001A630(&qword_10083A978);
  v101 = *(v102 - 1);
  __chkstk_darwin(v102);
  v100 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_10001A630((uint64_t *)&unk_10083A980);
  v104 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v103 = (char *)&v96 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v123 = *(_QWORD *)(v15 - 8);
  v124 = v15;
  v16 = __chkstk_darwin(v15);
  v99 = (char *)&v96 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v122 = (char *)&v96 - v18;
  v120 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v117 = *(_QWORD **)(v120 - 8);
  __chkstk_darwin(v120);
  v20 = (char *)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v21);
  v23 = (char *)&v96 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v24);
  v26 = (char *)&v96 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[2] = 0xD000000000000033;
  v5[3] = 0x80000001006F7510;
  v116 = (uint64_t)(v5 + 4);
  swift_unknownObjectWeakInit(v5 + 4, 0);
  v5[6] = 0;
  swift_unknownObjectWeakInit(v5 + 5, 0);
  v5[7] = 0;
  v27 = sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  static DispatchQoS.utility.getter();
  v127 = _swiftEmptyArrayStorage;
  v28 = sub_10009FC50((unint64_t *)&qword_10083A990, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v29 = sub_10001A630((uint64_t *)&unk_10083DBD0);
  v30 = sub_1000A5F84((unint64_t *)&qword_10083A9A0, (uint64_t *)&unk_10083DBD0, (uint64_t)&protocol conformance descriptor for [A]);
  v31 = v29;
  v32 = v118;
  v33 = v28;
  v34 = v5;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v127, v31, v30, v21, v33);
  ((void (*)(char *, _QWORD, uint64_t))v117[13])(v20, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v120);
  v120 = v27;
  v5[11] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000040, 0x80000001006F7550, v26, v23, v20, 0);
  swift_unknownObjectWeakAssign(v116, v125);
  v5[6] = v119;
  swift_unknownObjectWeakAssign(v5 + 5, v126);
  if (v32)
    v35 = v32;
  else
    v35 = objc_msgSend((id)objc_opt_self(REMAppleAccountUtilities), "sharedInstance");
  v5[9] = _swiftEmptyArrayStorage;
  v5[12] = v35;
  *((_BYTE *)v5 + 64) = 1;
  v5[10] = _swiftEmptyArrayStorage;
  v117 = v5 + 10;
  v36 = qword_100836CF8;
  v37 = v32;
  v39 = v123;
  v38 = v124;
  v40 = v122;
  if (v36 != -1)
    swift_once(&qword_100836CF8, sub_1000EDEE4);
  v41 = type metadata accessor for Logger(0);
  v42 = sub_10001AAA8(v41, (uint64_t)qword_10083A860);
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.default.getter(v43);
  if (os_log_type_enabled(v43, v44))
  {
    v45 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v45 = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "os_transaction INIT {name: com.apple.remindd.ExchACS.launch.pendingSystemAvailable}", v45, 2u);
    swift_slowDealloc(v45, -1, -1);
  }

  v46 = os_transaction_create("com.apple.remindd.ExchACS.launch.pending.pendingSystemAvailable");
  if (v46)
  {
    v119 = v46;
    sub_1000151B0(0, &qword_10083A9A8, DADSystemAvailabilityChecker_ptr);
    v47 = (id)v34[11];
    v48 = (_QWORD *)sub_100505518(v47);

    sub_1000151B0(0, &qword_10083A9B0, DADBuddyStateObserver_ptr);
    v49 = sub_100505588();
    v97 = v50;
    v51 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    if (qword_1008373B0 != -1)
      swift_once(&qword_1008373B0, sub_1003AAB88);
    v118 = v37;
    NSNotificationCenter.publisher(for:object:)(qword_100871EC0, 0);

    v127 = v48;
    v128 = v49;
    v52 = v99;
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v99, v40, v38);
    swift_retain(v48);
    swift_retain(v49);
    v53 = sub_10001A630(&qword_10083A9B8);
    v116 = v49;
    v54 = v53;
    v55 = sub_1000A5F84((unint64_t *)&unk_10083A9C0, &qword_10083A9B8, (uint64_t)&protocol conformance descriptor for Future<A, B>);
    v56 = sub_10009FC50((unint64_t *)&qword_10084A2A0, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
    v98 = v48;
    v57 = v100;
    Publishers.Zip3.init(_:_:_:)(&v127, &v128, v52, v54, v54, v38, v55, v55, v56);
    if (qword_100836F28 != -1)
      swift_once(&qword_100836F28, sub_1001BA8F8);
    v58 = (void *)qword_100871CE8;
    v127 = (_QWORD *)qword_100871CE8;
    v59 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v99 = *(char **)(*(_QWORD *)(v59 - 8) + 56);
    v60 = (uint64_t)v106;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v99)(v106, 1, 1, v59);
    v61 = sub_1000A5F84((unint64_t *)&unk_10083A9D0, &qword_10083A978, (uint64_t)&protocol conformance descriptor for Publishers.Zip3<A, B, C>);
    v62 = sub_1000A5E70();
    v96 = v62;
    v63 = v58;
    v64 = v103;
    v65 = v102;
    Publisher.receive<A>(on:options:)(&v127, v60, v102, v120, v61, v62);
    sub_10000882C(v60, &qword_10083A970);

    (*(void (**)(char *, _QWORD *))(v101 + 8))(v57, v65);
    v66 = swift_allocObject(&unk_1007E3B90, 32, 7);
    v67 = v97;
    v68 = v119;
    *(_QWORD *)(v66 + 16) = v97;
    *(_QWORD *)(v66 + 24) = v68;
    sub_1000A5F84((unint64_t *)&unk_10083A9E0, (uint64_t *)&unk_10083A980, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v102 = v67;
    swift_unknownObjectRetain(v68);
    v69 = v105;
    v70 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)(v34, sub_1000F278C, v66, 0, 0, v105, v121);
    swift_release(v66);
    (*(void (**)(char *, uint64_t))(v104 + 8))(v64, v69);
    swift_beginAccess(v34 + 9, &v127, 33, 0);
    v71 = sub_10001A630((uint64_t *)&unk_1008380C0);
    v105 = v71;
    v72 = sub_1000A5F84((unint64_t *)&unk_10083A9F0, (uint64_t *)&unk_1008380C0, (uint64_t)&protocol conformance descriptor for [A]);
    AnyCancellable.store<A>(in:)(v34 + 9, v71, v72);
    swift_endAccess(&v127);
    swift_release(v70);
    v73 = (_QWORD *)sub_100399C74((void *)0x53434168637845, 0xE700000000000000, 0);
    v127 = v73;
    v74 = swift_allocObject(&unk_1007E3BB8, 32, 7);
    *(_QWORD *)(v74 + 16) = sub_1000EEE08;
    *(_QWORD *)(v74 + 24) = 0;
    v75 = v34;
    v76 = sub_10001A630((uint64_t *)&unk_10084D080);
    v77 = sub_10001A630((uint64_t *)&unk_100838090);
    v78 = sub_1000A5F84(&qword_100847B20, (uint64_t *)&unk_10084D080, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v79 = v107;
    v80 = v76;
    v34 = v75;
    Publisher.map<A>(_:)(sub_1000F2834, v74, v80, v77, v78);
    swift_release(v74);
    v81 = sub_1000A5F84((unint64_t *)&unk_1008380A0, (uint64_t *)&unk_100838070, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v82 = v110;
    v83 = v109;
    Publisher.filter(_:)(sub_1000F27FC, 0, v109, v81);
    (*(void (**)(char *, uint64_t))(v108 + 8))(v79, v83);
    swift_release(v73);
    v84 = (void *)qword_100871CE8;
    v127 = (_QWORD *)qword_100871CE8;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v99)(v60, 1, 1, v59);
    v85 = sub_1000A5F84(&qword_10083EEE0, (uint64_t *)&unk_10083A960, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
    v86 = v84;
    v88 = v112;
    v87 = v113;
    Publisher.receive<A>(on:options:)(&v127, v60, v112, v120, v85, v96);
    sub_10000882C(v60, &qword_10083A970);

    (*(void (**)(char *, uint64_t))(v111 + 8))(v82, v88);
    sub_1000A5F84((unint64_t *)&unk_10083AA00, (uint64_t *)&unk_100838080, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v89 = v115;
    v90 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)(v34, sub_1000EEE24, 0, 0, 0, v115, v121);
    (*(void (**)(char *, uint64_t))(v114 + 8))(v87, v89);
    v91 = v117;
    swift_beginAccess(v117, &v127, 33, 0);
    AnyCancellable.store<A>(in:)(v91, v105, v72);
    swift_endAccess(&v127);
    swift_release(v98);
    swift_release(v116);

    swift_unknownObjectRelease(v119);
    swift_unknownObjectRelease(v126);

    swift_release(v90);
    (*(void (**)(char *, uint64_t))(v123 + 8))(v122, v124);
  }
  else
  {
    v92 = Logger.logObject.getter(0);
    v93 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v92, v93))
    {
      v94 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v94 = 0;
      _os_log_impl((void *)&_mh_execute_header, v92, v93, "ExchACS: Couldn't create os_transaction_t for waiting pendingSystemAvailable", v94, 2u);
      swift_slowDealloc(v94, -1, -1);
    }

    swift_unknownObjectRelease(v126);
  }
  return v34;
}

void sub_1000EEBFC()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  sub_1000EECD0();
  if (qword_100836CF8 != -1)
    swift_once(&qword_100836CF8, sub_1000EDEE4);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083A860);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "os_transaction RELEASE {name: com.apple.remindd.ExchACS.launch.pendingSystemAvailable}", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
  }

}

uint64_t sub_1000EECD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  _BYTE v13[24];

  v1 = v0;
  *(_BYTE *)(v0 + 64) = 0;
  if (qword_100836CF8 != -1)
    swift_once(&qword_100836CF8, sub_1000EDEE4);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001AAA8(v2, (uint64_t)qword_10083A860);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "ExchACS: Done waiting for system to become available upon daemon launch, now trying to observe for primary CK account PersonIDSalt changes", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  sub_1000EF050();
  swift_beginAccess(v1 + 72, v13, 1, 0);
  v7 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v1 + 72) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v7);
  result = swift_unknownObjectWeakLoadStrong(v1 + 40, v8);
  if (result)
  {
    v10 = result;
    v11 = *(_QWORD *)(v1 + 48);
    ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t))(v11 + 16))(ObjectType, v11);
    return swift_unknownObjectRelease(v10);
  }
  return result;
}

id sub_1000EEE08(void *a1)
{
  return objc_msgSend(a1, "isExchange");
}

void sub_1000EEE24()
{
  sub_1000EEE44();
}

void sub_1000EEE44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *Strong;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  if ((*(_BYTE *)(v0 + 64) & 1) == 0)
  {
    v1 = v0;
    if (qword_100836CF8 != -1)
      swift_once(&qword_100836CF8, sub_1000EDEE4);
    v2 = type metadata accessor for Logger(0);
    sub_10001AAA8(v2, (uint64_t)qword_10083A860);
    v3 = swift_retain_n(v0, 2);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      v8 = v7;
      v18 = v7;
      *(_DWORD *)v6 = 136446210;
      if (*(_QWORD *)(v0 + 56))
      {
        v9 = UUID.uuidString.getter(v7);
        v11 = v10;
      }
      else
      {
        v11 = 0xE300000000000000;
        v9 = 7104878;
      }
      v17 = sub_10001A820(v9, v11, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v11);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "ExchACS: Received 'ExchangeAccountDidChange', gonna reset the personIDSaltObserver {observer: %{public}s}", v6, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v6, -1, -1);

      v13 = *(_QWORD *)(v1 + 56);
      if (!v13)
        goto LABEL_14;
    }
    else
    {

      swift_release_n(v0, 2);
      v13 = *(_QWORD *)(v0 + 56);
      if (!v13)
      {
LABEL_14:
        sub_1000EFC84();
        return;
      }
    }
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v1 + 32, v12);
    if (Strong)
    {
      v15 = Strong;
      objc_msgSend(Strong, "unobservePrimaryCloudKitAccountPersonIDSaltChanges:", v13);

    }
    v16 = *(void **)(v1 + 56);
    *(_QWORD *)(v1 + 56) = 0;

    goto LABEL_14;
  }
}

void sub_1000EF050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *Strong;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  void **v33;
  void **v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  NSString v40;
  id v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  char *v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, char *, NSObject *);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const void *v59;
  id v60;
  id v61;
  void *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  NSObject *v66;
  int v67;
  uint64_t v68;
  void **v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  __n128 v73;
  uint64_t (*v74)(char *, NSObject *, __n128);
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  os_log_type_t v81;
  _BOOL4 v82;
  _QWORD *v83;
  uint8_t *v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  void **v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  __n128 v95;
  void (*v96)(char *, NSObject *, __n128);
  void (*v97)(char *, NSObject *);
  _QWORD *v98;
  _QWORD *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  void *v105;
  void (*v106)(char *, char *, NSObject *);
  _QWORD *v107;
  NSObject *v108;
  NSObject *v109;
  char *v110;
  NSObject *v111;
  void **aBlock;
  uint64_t v113;
  void *v114;
  void *v115;
  void *v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = __chkstk_darwin(v2);
  v6 = (char *)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v101 - v8;
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v101 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v101 - v13;
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 32, v15);
  if (!Strong)
  {
    if (qword_100836CF8 != -1)
      swift_once(&qword_100836CF8, sub_1000EDEE4);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_10001AAA8(v24, (uint64_t)qword_10083A860);
    v111 = Logger.logObject.getter(v25);
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v111, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v111, v26, "ExchACS: StoreController is nil when observePrimaryCloudKitAccountPersonIDSaltChanges() is invoked", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }
    goto LABEL_30;
  }
  v18 = *(_BYTE *)(v1 + 64);
  v111 = Strong;
  if ((v18 & 1) != 0)
  {
    if (qword_100836CF8 != -1)
      swift_once(&qword_100836CF8, sub_1000EDEE4);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_10001AAA8(v19, (uint64_t)qword_10083A860);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "ExchACS: Trying to call observePrimaryCloudKitAccountPersonIDSaltChanges() while still pending system to be available", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    goto LABEL_30;
  }
  if (*(_QWORD *)(v1 + 56))
  {
    if (qword_100836CF8 != -1)
      swift_once(&qword_100836CF8, sub_1000EDEE4);
    v28 = type metadata accessor for Logger(0);
    sub_10001AAA8(v28, (uint64_t)qword_10083A860);
    v29 = swift_retain_n(v1, 2);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.info.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = (void **)swift_slowAlloc(32, -1);
      v34 = v33;
      aBlock = v33;
      *(_DWORD *)v32 = 136446210;
      if (*(_QWORD *)(v1 + 56))
      {
        v35 = UUID.uuidString.getter(v33);
        v37 = v36;
      }
      else
      {
        v35 = 7104878;
        v37 = 0xE300000000000000;
      }
      v119 = sub_10001A820(v35, v37, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v37);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "ExchACS is already observing personIDSalt changes with RDAccountPersonIDSaltObserver {observer: %{public}s}", v32, 0xCu);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v32, -1, -1);
LABEL_33:

      return;
    }

    swift_release_n(v1, 2);
LABEL_30:

    return;
  }
  v38 = swift_unknownObjectWeakLoadStrong(v1 + 32, v17);
  if (!v38)
    goto LABEL_30;
  v39 = (void *)v38;
  v110 = v14;
  v40 = String._bridgeToObjectiveC()();
  v41 = objc_msgSend(v39, "newBackgroundContextWithAuthor:", v40);

  if (!v41)
    goto LABEL_30;
  v108 = v2;
  v118 = 0;
  v42 = (_QWORD *)swift_allocObject(&unk_1007E3BE0, 40, 7);
  v42[2] = &v118;
  v42[3] = v1;
  v43 = v41;
  v42[4] = v41;
  v44 = swift_allocObject(&unk_1007E3C08, 32, 7);
  *(_QWORD *)(v44 + 16) = sub_1000F2868;
  *(_QWORD *)(v44 + 24) = v42;
  v107 = v42;
  v116 = sub_1000098E4;
  v117 = v44;
  aBlock = _NSConcreteStackBlock;
  v113 = 1107296256;
  v114 = sub_1000098C4;
  v115 = &unk_1007E3C20;
  v45 = _Block_copy(&aBlock);
  v46 = (char *)v117;
  swift_retain(v1);
  v47 = v43;
  swift_retain(v44);
  swift_release(v46);
  v109 = v47;
  -[NSObject performBlockAndWait:](v47, "performBlockAndWait:", v45);
  _Block_release(v45);
  LOBYTE(v45) = swift_isEscapingClosureAtFileLocation(v44, "", 118, 165, 45, 1);
  v48 = swift_release(v44);
  if ((v45 & 1) != 0)
  {
    __break(1u);
LABEL_52:
    swift_once(&qword_100836F28, sub_1001BA8F8);
    goto LABEL_23;
  }
  v47 = v108;
  v46 = v110;
  if (v118 != 1)
  {
    if (qword_100836CF8 != -1)
      swift_once(&qword_100836CF8, sub_1000EDEE4);
    v79 = type metadata accessor for Logger(0);
    v80 = sub_10001AAA8(v79, (uint64_t)qword_10083A860);
    v30 = Logger.logObject.getter(v80);
    v81 = static os_log_type_t.info.getter(v30);
    v82 = os_log_type_enabled(v30, v81);
    v83 = v107;
    if (v82)
    {
      v84 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v84 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v81, "ExchACS is not observing primary CK account personIDSalt changes this time as we have no exchange account right now", v84, 2u);
      swift_slowDealloc(v84, -1, -1);
      v85 = v109;
    }
    else
    {
      v85 = v30;
      v30 = v111;
      v111 = v109;
    }
    swift_release(v83);

    goto LABEL_33;
  }
  UUID.init()(v48);
  if (qword_100836F28 != -1)
    goto LABEL_52;
LABEL_23:
  v104 = (id)qword_100871CE8;
  v49 = swift_allocObject(&unk_1007E3C58, 24, 7);
  swift_weakInit(v49 + 16, v1);
  v106 = *(void (**)(char *, char *, NSObject *))(v3 + 16);
  v106(v12, v46, v47);
  v50 = *(unsigned __int8 *)(v3 + 80);
  v51 = (v50 + 24) & ~v50;
  v102 = v51 + v4;
  v103 = v51;
  v101 = v50 | 7;
  v52 = swift_allocObject(&unk_1007E3C80, v51 + v4, v50 | 7);
  *(_QWORD *)(v52 + 16) = v49;
  v53 = v52 + v51;
  v54 = *(void (**)(uint64_t, char *, NSObject *))(v3 + 32);
  v54(v53, v12, v47);
  v116 = sub_1000F28AC;
  v117 = v52;
  aBlock = _NSConcreteStackBlock;
  v113 = 1107296256;
  v114 = sub_100673DFC;
  v115 = &unk_1007E3C98;
  v105 = _Block_copy(&aBlock);
  v55 = v117;
  v104 = v104;
  swift_release(v55);
  v56 = swift_allocObject(&unk_1007E3C58, 24, 7);
  swift_weakInit(v56 + 16, v1);
  v106(v12, v46, v47);
  v57 = swift_allocObject(&unk_1007E3CD0, v102, v101);
  *(_QWORD *)(v57 + 16) = v56;
  v54(v57 + v103, v12, v47);
  v116 = sub_1000F2974;
  v117 = v57;
  aBlock = _NSConcreteStackBlock;
  v113 = 1107296256;
  v114 = sub_10042D6CC;
  v115 = &unk_1007E3CE8;
  v58 = _Block_copy(&aBlock);
  swift_release(v117);
  v60 = v104;
  v59 = v105;
  v61 = -[NSObject observePrimaryCloudKitAccountPersonIDSaltChangesOnQueue:successHandler:errorHandler:](v111, "observePrimaryCloudKitAccountPersonIDSaltChangesOnQueue:successHandler:errorHandler:", v104, v105, v58);
  _Block_release(v58);
  _Block_release(v59);

  v62 = *(void **)(v1 + 56);
  *(_QWORD *)(v1 + 56) = v61;

  if (*(_QWORD *)(v1 + 56))
  {
    if (qword_100836CF8 != -1)
      swift_once(&qword_100836CF8, sub_1000EDEE4);
    v63 = type metadata accessor for Logger(0);
    sub_10001AAA8(v63, (uint64_t)qword_10083A860);
    v64 = v110;
    v106(v6, v110, v47);
    v65 = swift_retain_n(v1, 2);
    v66 = Logger.logObject.getter(v65);
    v67 = static os_log_type_t.default.getter(v66);
    if (os_log_type_enabled(v66, (os_log_type_t)v67))
    {
      LODWORD(v106) = v67;
      v68 = swift_slowAlloc(22, -1);
      v69 = (void **)swift_slowAlloc(64, -1);
      v105 = v69;
      aBlock = v69;
      *(_DWORD *)v68 = 136446466;
      v70 = UUID.uuidString.getter(v69);
      v72 = v71;
      v119 = sub_10001A820(v70, v71, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120);
      v73 = swift_bridgeObjectRelease(v72);
      v74 = *(uint64_t (**)(char *, NSObject *, __n128))(v3 + 8);
      v75 = v74(v6, v47, v73);
      *(_WORD *)(v68 + 12) = 2082;
      if (*(_QWORD *)(v1 + 56))
      {
        v76 = UUID.uuidString.getter(v75);
        v78 = v77;
      }
      else
      {
        v76 = 7104878;
        v78 = 0xE300000000000000;
      }
      v99 = v107;
      v119 = sub_10001A820(v76, v78, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v78);
      _os_log_impl((void *)&_mh_execute_header, v66, (os_log_type_t)v106, "ExchACS is now observing primary CK account personIDSalt changes {debugTrackingUUID: %{public}s, observer: %{public}s}", (uint8_t *)v68, 0x16u);
      v100 = v105;
      swift_arrayDestroy(v105, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v100, -1, -1);
      swift_slowDealloc(v68, -1, -1);

      ((void (*)(char *, NSObject *))v74)(v64, v47);
      v98 = v99;
      goto LABEL_50;
    }
    swift_release_n(v1, 2);

    v97 = *(void (**)(char *, NSObject *))(v3 + 8);
    v97(v6, v47);
    goto LABEL_46;
  }
  if (qword_100836CF8 != -1)
    swift_once(&qword_100836CF8, sub_1000EDEE4);
  v86 = type metadata accessor for Logger(0);
  sub_10001AAA8(v86, (uint64_t)qword_10083A860);
  v64 = v110;
  v87 = ((uint64_t (*)(char *, char *, NSObject *))v106)(v9, v110, v47);
  v88 = Logger.logObject.getter(v87);
  v89 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v88, v89))
  {

    v97 = *(void (**)(char *, NSObject *))(v3 + 8);
    v97(v9, v47);
LABEL_46:

    v97(v64, v47);
    goto LABEL_47;
  }
  v90 = (uint8_t *)swift_slowAlloc(12, -1);
  v91 = (void **)swift_slowAlloc(32, -1);
  aBlock = v91;
  *(_DWORD *)v90 = 136446210;
  v106 = (void (*)(char *, char *, NSObject *))(v90 + 4);
  v92 = UUID.uuidString.getter(v91);
  v94 = v93;
  v119 = sub_10001A820(v92, v93, (uint64_t *)&aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120);
  v95 = swift_bridgeObjectRelease(v94);
  v96 = *(void (**)(char *, NSObject *, __n128))(v3 + 8);
  v96(v9, v47, v95);
  _os_log_impl((void *)&_mh_execute_header, v88, v89, "ExchACS failed to start observing primary CK account personIDSalt changes {debugTrackingUUID: %{public}s}", v90, 0xCu);
  swift_arrayDestroy(v91, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v91, -1, -1);
  swift_slowDealloc(v90, -1, -1);

  ((void (*)(char *, NSObject *))v96)(v64, v47);
LABEL_47:
  v98 = v107;
LABEL_50:
  swift_release(v98);
}

