uint64_t sub_100291818(uint64_t a1, void *a2, uint64_t a3, uint64_t isUniquelyReferenced_nonNull_native)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  double v10;
  uint64_t v11;
  id *v12;
  id v13;
  id *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t result;
  id v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  id v73;
  NSString v74;
  uint64_t v75;
  id v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  unint64_t v81;
  uint64_t v82;
  _BOOL8 v83;
  uint64_t v84;
  char v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  id v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  unint64_t v98;
  uint64_t v99;
  _BOOL8 v100;
  uint64_t v101;
  char v102;
  unint64_t v103;
  char v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  id v126[2];

  v6 = v4;
  v122 = a3;
  v117 = a1;
  v9 = type metadata accessor for Date(0);
  v119 = *(_QWORD *)(v9 - 8);
  v120 = v9;
  *(_QWORD *)&v10 = __chkstk_darwin(v9).n128_u64[0];
  v118 = (char *)&v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126[0] = 0;
  v121 = a2;
  v12 = (id *)objc_msgSend(a2, "remObjectIDWithError:", v126, v10);
  v13 = v126[0];
  if (!v12)
  {
    v19 = v126[0];
    _convertNSErrorToError(_:)(v13);

    swift_willThrow(v20);
    return v5;
  }
  v14 = v12;
  v15 = qword_100837750;
  v16 = v126[0];
  v17 = v14;
  if (v15 != -1)
    goto LABEL_32;
LABEL_3:
  v18 = sub_1004E892C((uint64_t)v14, 1, isUniquelyReferenced_nonNull_native, (Class)qword_1008721E8, 0, 0);

  if (v6)
  {

    return v5;
  }
  v116 = isUniquelyReferenced_nonNull_native;
  v5 = sub_1002B0B00((uint64_t)_swiftEmptyArrayStorage);
  if (!((unint64_t)v18 >> 62))
  {
    isUniquelyReferenced_nonNull_native = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v18);
    v114 = (id)v17;
    v115 = 0;
    if (!isUniquelyReferenced_nonNull_native)
      goto LABEL_37;
    goto LABEL_9;
  }
  if (v18 < 0)
    v43 = v18;
  else
    v43 = v18 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(v18, 2);
  isUniquelyReferenced_nonNull_native = _CocoaArrayWrapper.endIndex.getter(v43);
  swift_bridgeObjectRelease();
  v114 = (id)v17;
  v115 = 0;
  if (isUniquelyReferenced_nonNull_native)
  {
LABEL_9:
    v124 = v18;
    v125 = v18 & 0xC000000000000001;
    v17 = 4;
    v123 = isUniquelyReferenced_nonNull_native;
    while (1)
    {
      v14 = (id *)(v17 - 4);
      if (v125)
        v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17 - 4, v18);
      else
        v22 = *(id *)(v18 + 8 * v17);
      v6 = (unint64_t)v22;
      v23 = v17 - 3;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        swift_once(&qword_100837750, sub_1004E80E4);
        goto LABEL_3;
      }
      v24 = objc_msgSend(v22, "canonicalName");
      if (v24)
        break;

LABEL_11:
      ++v17;
      if (v23 == isUniquelyReferenced_nonNull_native)
        goto LABEL_37;
    }
    v25 = v24;
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v28 = v27;

    v29 = (id)v6;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
    v126[0] = (id)v5;
    v14 = (id *)v5;
    v6 = sub_10001A6DC(v26, v28);
    v31 = v5;
    v32 = *(_QWORD *)(v5 + 16);
    v33 = (v30 & 1) == 0;
    v34 = v32 + v33;
    if (__OFADD__(v32, v33))
      goto LABEL_30;
    v5 = v30;
    if (*(_QWORD *)(v31 + 24) < v34)
    {
      sub_1002D1678(v34, isUniquelyReferenced_nonNull_native);
      v14 = (id *)v126[0];
      v35 = sub_10001A6DC(v26, v28);
      if ((v5 & 1) != (v36 & 1))
        goto LABEL_87;
      v6 = v35;
      isUniquelyReferenced_nonNull_native = (uint64_t)v126[0];
      if ((v5 & 1) == 0)
        goto LABEL_26;
LABEL_24:
      v37 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 56);
      v38 = 8 * v6;

      *(_QWORD *)(v37 + v38) = v29;
      v5 = isUniquelyReferenced_nonNull_native;
LABEL_28:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      isUniquelyReferenced_nonNull_native = v123;
      v18 = v124;
      goto LABEL_11;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)v126[0];
      if ((v30 & 1) != 0)
        goto LABEL_24;
    }
    else
    {
      v14 = v126;
      sub_1002D885C();
      isUniquelyReferenced_nonNull_native = (uint64_t)v126[0];
      if ((v5 & 1) != 0)
        goto LABEL_24;
    }
LABEL_26:
    *(_QWORD *)(isUniquelyReferenced_nonNull_native + 8 * (v6 >> 6) + 64) |= 1 << v6;
    v39 = (uint64_t *)(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 48) + 16 * v6);
    *v39 = v26;
    v39[1] = v28;
    *(_QWORD *)(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 56) + 8 * v6) = v29;
    v40 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16);
    v41 = __OFADD__(v40, 1);
    v42 = v40 + 1;
    if (v41)
      goto LABEL_31;
    v5 = isUniquelyReferenced_nonNull_native;
    *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16) = v42;
    swift_bridgeObjectRetain(v28);
    goto LABEL_28;
  }
LABEL_37:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(v117);
  v45 = sub_10011EE40(v44);
  swift_bridgeObjectRelease();
  v46 = *(_QWORD *)(v45 + 16);
  if (v46 != 1)
  {
    if (!v46)
    {
LABEL_80:
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      return v5;
    }
    swift_bridgeObjectRetain(v5);
    v54 = sub_10028F7C0(v53, v45);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v54 & 1) != 0)
    {
LABEL_81:
      swift_bridgeObjectRelease();

      return v5;
    }
    goto LABEL_47;
  }
  v47 = sub_10027BA7C(v45);
  if (v48)
  {
    v49 = v48;
    if (*(_QWORD *)(v5 + 16))
    {
      v50 = v47;
      swift_bridgeObjectRetain(v5);
      sub_10001A6DC(v50, v49);
      v52 = v51;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v52 & 1) != 0)
        goto LABEL_81;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
LABEL_47:
    v55 = sub_1002B0B00((uint64_t)_swiftEmptyArrayStorage);
    __chkstk_darwin(v55);
    *(&v113 - 2) = v122;
    v56 = v115;
    v58 = sub_10027BFF4(v57, (void (*)(void **, id *))sub_100293264, (uint64_t)(&v113 - 4), v18);
    v115 = v56;
    swift_bridgeObjectRelease();
    v59 = *(_QWORD *)(v117 + 16);
    if (!v59)
      goto LABEL_81;
    v124 = kREMSupportedVersionUnset;
    swift_bridgeObjectRetain(v117);
    v61 = (_QWORD *)(v60 + 40);
    v125 = (unint64_t)v58;
    while (1)
    {
      v65 = (void *)*(v61 - 1);
      v64 = (void *)*v61;
      v66 = *(_QWORD *)(v5 + 16);
      swift_bridgeObjectRetain(*v61);
      if (v66)
      {
        sub_10001A6DC((uint64_t)v65, (uint64_t)v64);
        if ((v67 & 1) != 0)
          goto LABEL_79;
      }
      v126[0] = v65;
      v126[1] = v64;
      v68 = sub_1000E525C();
      v69 = StringProtocol.lowercased(with:)(v122, &type metadata for String, v68);
      if (v58[2])
      {
        v71 = sub_10001A6DC(v69, v70);
        if ((v72 & 1) != 0)
        {
          v73 = *(id *)(v58[7] + 8 * v71);
          swift_bridgeObjectRelease();
          v74 = String._bridgeToObjectiveC()();
          objc_msgSend(v73, "setCanonicalName:", v74);

          objc_msgSend(v73, "updateChangeCount");
          v75 = (uint64_t)v65;
          v76 = v73;
          v77 = (_QWORD *)v5;
          v78 = swift_isUniquelyReferenced_nonNull_native(v5);
          v126[0] = v77;
          v79 = v75;
          v81 = sub_10001A6DC(v75, (uint64_t)v64);
          v82 = v77[2];
          v83 = (v80 & 1) == 0;
          v84 = v82 + v83;
          if (__OFADD__(v82, v83))
            goto LABEL_84;
          v85 = v80;
          if (v77[3] >= v84)
          {
            if ((v78 & 1) != 0)
            {
              v5 = (unint64_t)v126[0];
              if ((v80 & 1) == 0)
                goto LABEL_76;
            }
            else
            {
              sub_1002D885C();
              v5 = (unint64_t)v126[0];
              if ((v85 & 1) == 0)
                goto LABEL_76;
            }
          }
          else
          {
            sub_1002D1678(v84, v78);
            v86 = sub_10001A6DC(v79, (uint64_t)v64);
            if ((v85 & 1) != (v87 & 1))
              goto LABEL_87;
            v81 = v86;
            v5 = (unint64_t)v126[0];
            if ((v85 & 1) == 0)
            {
LABEL_76:
              *(_QWORD *)(v5 + 8 * (v81 >> 6) + 64) |= 1 << v81;
              v110 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v81);
              *v110 = v79;
              v110[1] = (uint64_t)v64;
              *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v81) = v76;
              v111 = *(_QWORD *)(v5 + 16);
              v41 = __OFADD__(v111, 1);
              v112 = v111 + 1;
              if (v41)
                goto LABEL_85;
              *(_QWORD *)(v5 + 16) = v112;
              swift_bridgeObjectRetain(v64);
              goto LABEL_78;
            }
          }
          v108 = *(_QWORD *)(v5 + 56);
          v109 = 8 * v81;

          *(_QWORD *)(v108 + v109) = v76;
LABEL_78:
          v58 = (_QWORD *)v125;

          swift_bridgeObjectRelease();
LABEL_79:
          swift_bridgeObjectRelease();
          goto LABEL_51;
        }
      }
      swift_bridgeObjectRelease();
      v88 = sub_1000151B0(0, (unint64_t *)&qword_1008428E0, REMListSection_ptr);
      v89 = objc_msgSend((id)swift_getObjCClassFromMetadata(v88), "newObjectID");
      v90 = (uint64_t)v65;
      v91 = (uint64_t)v118;
      static Date.now.getter(v89);
      v92 = sub_10039C6C0(v116, v89, v121, v91, v90, (uint64_t)v64, v124);

      (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v91, v120);
      objc_msgSend(v92, "updateChangeCount");
      v93 = v92;
      v94 = (_QWORD *)v5;
      v95 = swift_isUniquelyReferenced_nonNull_native(v5);
      v126[0] = v94;
      v96 = v90;
      v98 = sub_10001A6DC(v90, (uint64_t)v64);
      v99 = v94[2];
      v100 = (v97 & 1) == 0;
      v101 = v99 + v100;
      if (__OFADD__(v99, v100))
      {
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
      }
      v102 = v97;
      if (v94[3] >= v101)
      {
        if ((v95 & 1) != 0)
        {
          v5 = (unint64_t)v126[0];
          if ((v97 & 1) == 0)
            goto LABEL_68;
        }
        else
        {
          sub_1002D885C();
          v5 = (unint64_t)v126[0];
          if ((v102 & 1) == 0)
            goto LABEL_68;
        }
      }
      else
      {
        sub_1002D1678(v101, v95);
        v103 = sub_10001A6DC(v96, (uint64_t)v64);
        if ((v102 & 1) != (v104 & 1))
          goto LABEL_87;
        v98 = v103;
        v5 = (unint64_t)v126[0];
        if ((v102 & 1) == 0)
        {
LABEL_68:
          *(_QWORD *)(v5 + 8 * (v98 >> 6) + 64) |= 1 << v98;
          v105 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v98);
          *v105 = v96;
          v105[1] = (uint64_t)v64;
          *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v98) = v93;
          v106 = *(_QWORD *)(v5 + 16);
          v41 = __OFADD__(v106, 1);
          v107 = v106 + 1;
          if (v41)
            goto LABEL_83;
          *(_QWORD *)(v5 + 16) = v107;
          swift_bridgeObjectRetain(v64);
          goto LABEL_50;
        }
      }
      v62 = *(_QWORD *)(v5 + 56);
      v63 = 8 * v98;

      *(_QWORD *)(v62 + v63) = v93;
LABEL_50:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v58 = (_QWORD *)v125;
LABEL_51:
      v61 += 2;
      if (!--v59)
        goto LABEL_80;
    }
  }
  __break(1u);
LABEL_87:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_100292134(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  id v5;
  unsigned __int8 v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v4 = objc_msgSend(a1, "objectID");
  v5 = objc_msgSend(a1, "remObjectID");
  v6 = objc_msgSend(a1, "shouldCategorizeGroceryItems");
  v7 = objc_msgSend(a1, "groceryLocaleID");
  if (v7)
  {
    v8 = v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v11 = v10;

  }
  else
  {
    v9 = 0;
    v11 = 0;
  }
  v12 = objc_msgSend(a1, "sharingStatus");

  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v9;
  *(_QWORD *)(a2 + 32) = v11;
  *(_BYTE *)(a2 + 40) = v12 == 2;
}

uint64_t sub_100292220(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  id v18;
  void *v19;
  void (*v20)(char *, char *, uint64_t);
  unint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v29;

  v4 = sub_10001A630(&qword_100842850);
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v29 - v15;
  if (!a1)
    return 1;
  v17 = a1;
  v18 = objc_msgSend(v17, "groupIdentifier");
  if (!v18)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    goto LABEL_9;
  }
  v19 = v18;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

  v20 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v20(v9, v13, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
LABEL_9:

    sub_10000882C((uint64_t)v9, (uint64_t *)&unk_100839C80);
    return 0;
  }
  v20(v16, v9, v10);
  if (*(_QWORD *)(a2 + 16) && (v21 = sub_1002C65F8((uint64_t)v16), (v22 & 1) != 0))
  {
    v23 = v21;
    v24 = *(_QWORD *)(a2 + 56);
    v25 = _s31ThreadSafePartialRepresentationVMa(0);
    v26 = *(_QWORD *)(v25 - 8);
    sub_1002912CC(v24 + *(_QWORD *)(v26 + 72) * v23, (uint64_t)v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v6, 0, 1, v25);
  }
  else
  {
    v25 = _s31ThreadSafePartialRepresentationVMa(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v6, 1, 1, v25);
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  _s31ThreadSafePartialRepresentationVMa(0);
  v27 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v6, 1, v25) == 1;
  sub_10000882C((uint64_t)v6, &qword_100842850);
  return v27;
}

void sub_1002924B4(id a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int64_t v47;
  char *v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  char *v53;
  void (*v54)(char *, char *, uint64_t);
  id v55;
  void (*v56)(__n128);
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  void (*v61)(char *, void (*)(__n128), uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  NSString v68;
  void (*v69)(void (*)(__n128), uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  void *v75;
  id v76;
  void *v77;
  void (*v78)(__n128);
  char *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  void *v87;
  id v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __n128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  NSString v107;
  uint64_t v108;
  void (*v109)(char *, char *, char *);
  __n128 v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int (*v117)(uint64_t, uint64_t, char *);
  char *v118;
  uint64_t v119;
  char v120;
  void (*v121)(char *, char *);
  char *v122;
  __n128 v123;
  unsigned int v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  NSString v129;
  char *v130;
  uint64_t v131;
  uint64_t *v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  double v141;
  uint64_t v142;
  NSString v143;
  uint64_t v144;
  unint64_t v145;
  id v146;
  uint64_t *v147;
  void (*v148)(char *, uint64_t, uint64_t);
  char *v149;
  void (*v150)(char *, char *, char *);
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  id v162;
  unsigned int (*v163)(uint64_t, uint64_t, uint64_t);
  uint64_t v164;
  void (*v165)(__n128);
  char *v166;
  char *v167;
  uint64_t v168;
  char *v169;

  v5 = v4;
  v162 = a4;
  v151 = a3;
  v168 = a2;
  v156 = sub_10001A630((uint64_t *)&unk_10083B370);
  v7 = __chkstk_darwin(v156);
  v157 = (uint64_t)&v144 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = type metadata accessor for REMRemindersListDataView.GroceryAutoCategorizationMessage(0, v7);
  v152 = *(_QWORD *)(v155 - 8);
  __chkstk_darwin(v155);
  v166 = (char *)&v144 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v147 = (uint64_t *)((char *)&v144 - v11);
  __chkstk_darwin(v12);
  v149 = (char *)&v144 - v13;
  v14 = sub_10001A630((uint64_t *)&unk_100839C80);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v144 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v144 - v19;
  __chkstk_darwin(v21);
  v23 = (char *)&v144 - v22;
  __chkstk_darwin(v24);
  v158 = (char *)&v144 - v25;
  __chkstk_darwin(v26);
  v159 = (char *)&v144 - v27;
  __chkstk_darwin(v28);
  v148 = (void (*)(char *, uint64_t, uint64_t))((char *)&v144 - v29);
  __chkstk_darwin(v30);
  v150 = (void (*)(char *, char *, char *))((char *)&v144 - v31);
  v32 = type metadata accessor for UUID(0);
  v167 = *(char **)(v32 - 8);
  __chkstk_darwin(v32);
  v165 = (void (*)(__n128))((char *)&v144 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v34);
  v36 = (char *)&v144 - v35;
  __chkstk_darwin(v37);
  v153 = (char *)&v144 - v38;
  *(_QWORD *)&v40 = __chkstk_darwin(v39).n128_u64[0];
  v160 = (char *)&v144 - v41;
  v42 = objc_msgSend(a1, "name", v40);
  if (v42)
  {
    v43 = v42;
    v154 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v161 = v44;

  }
  else
  {
    v154 = 0;
    v161 = 0;
  }
  v45 = v168;
  v46 = (unint64_t)v168 >> 62;
  if ((unint64_t)v168 >> 62)
  {
    if (v168 < 0)
      v70 = v168;
    else
      v70 = v168 & 0xFFFFFFFFFFFFFF8;
    v145 = (unint64_t)v168 >> 62;
    swift_bridgeObjectRetain(v168);
    v164 = v70;
    v47 = _CocoaArrayWrapper.endIndex.getter(v70);
    swift_bridgeObjectRelease();
    v46 = v145;
    if (v47 == 1)
    {
      swift_bridgeObjectRetain(v168);
      v71 = _CocoaArrayWrapper.endIndex.getter(v164);
      v45 = v168;
      if (!v71)
      {
        swift_bridgeObjectRelease();
        goto LABEL_64;
      }
      goto LABEL_7;
    }
  }
  else
  {
    v47 = *(_QWORD *)((v168 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v47 == 1)
    {
      swift_bridgeObjectRetain(v168);
LABEL_7:
      v48 = v167;
      if ((v45 & 0xC000000000000001) != 0)
      {
        v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v45);
LABEL_10:
        v50 = v49;
        v51 = objc_msgSend(v49, "groupIdentifier", swift_bridgeObjectRelease().n128_f64[0]);
        if (v51)
        {
          v52 = v51;
          v53 = v153;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v51);

          v54 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v48 + 4);
          v54(v17, v53, v32);
          (*((void (**)(char *, _QWORD, uint64_t, uint64_t))v48 + 7))(v17, 0, 1, v32);
          if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v48 + 6))(v17, 1, v32) != 1)
          {
            v146 = a1;
            v54(v36, v17, v32);
            v55 = objc_msgSend(v50, "memberIdentifier");
            v56 = v165;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v55);

            v57 = sub_10001A630(&qword_1008428D8);
            v58 = v166;
            v59 = &v166[*(int *)(v57 + 48)];
            v60 = &v166[*(int *)(v57 + 64)];
            v61 = (void (*)(char *, void (*)(__n128), uint64_t))*((_QWORD *)v48 + 2);
            v61(v166, v56, v32);
            v61(v59, (void (*)(__n128))v36, v32);
            v62 = v151 + OBJC_IVAR____TtC7remindd43RDGroceryOperationCategorizeRemindersInList_queuedAt;
            v63 = type metadata accessor for Date(0);
            (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v60, v62, v63);
            v64 = v155;
            v65 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v152 + 104))(v58, enum case for REMRemindersListDataView.GroceryAutoCategorizationMessage.oneReminderToOneSection(_:), v155);
            REMRemindersListDataView.GroceryAutoCategorizationMessage.encodedString.getter(v65);
            if (v67)
            {
              v68 = String._bridgeToObjectiveC()();
              *(_QWORD *)&v66 = swift_bridgeObjectRelease().n128_u64[0];
            }
            else
            {
              v68 = 0;
            }
            a1 = v146;
            objc_msgSend(v146, "setName:", v68, v66);

            (*(void (**)(char *, uint64_t))(v152 + 8))(v166, v64);
            v69 = (void (*)(void (*)(__n128), uint64_t))*((_QWORD *)v167 + 1);
            v69(v165, v32);
            v69((void (*)(__n128))v36, v32);
            goto LABEL_64;
          }
        }
        else
        {
          (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v48 + 7))(v17, 1, 1, v32);
        }

        sub_10000882C((uint64_t)v17, (uint64_t *)&unk_100839C80);
        goto LABEL_64;
      }
      if (*(_QWORD *)((v45 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v49 = *(id *)(v45 + 32);
        goto LABEL_10;
      }
      __break(1u);
      goto LABEL_83;
    }
  }
  if (v47 < 2)
    goto LABEL_64;
  v145 = v46;
  v146 = a1;
  v144 = v5;
  v169 = (char *)_swiftEmptyArrayStorage;
  v164 = v47;
  sub_1001C1BB8(0, v47, 0);
  v72 = v168;
  v36 = v169;
  v73 = 0;
  v163 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))(v168 & 0xC000000000000001);
  v166 = (char *)v32;
  do
  {
    if (v163)
      v74 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v73, v72);
    else
      v74 = *(id *)(v72 + 8 * v73 + 32);
    v75 = v74;
    v76 = objc_msgSend(v74, "groupIdentifier");
    if (v76)
    {
      v77 = v76;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v76);

      v78 = (void (*)(__n128))*((_QWORD *)v167 + 7);
      v79 = v20;
      v80 = 0;
    }
    else
    {
      v78 = (void (*)(__n128))*((_QWORD *)v167 + 7);
      v79 = v20;
      v80 = 1;
    }
    v165 = v78;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v78)(v79, v80, 1, v32);
    sub_1000A5CA8((uint64_t)v20, (uint64_t)v23, (uint64_t *)&unk_100839C80);

    v169 = v36;
    v82 = *((_QWORD *)v36 + 2);
    v81 = *((_QWORD *)v36 + 3);
    if (v82 >= v81 >> 1)
    {
      sub_1001C1BB8(v81 > 1, v82 + 1, 1);
      v36 = v169;
    }
    ++v73;
    *((_QWORD *)v36 + 2) = v82 + 1;
    v17 = (char *)((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    v5 = *(_QWORD *)(v15 + 72);
    sub_1000A5CA8((uint64_t)v23, (uint64_t)&v17[(_QWORD)v36 + v5 * v82], (uint64_t *)&unk_100839C80);
    v32 = (uint64_t)v166;
    v72 = v168;
  }
  while (v164 != v73);
  if (v145)
  {
    if (v168 < 0)
      v84 = v168;
    else
      v84 = v168 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v168);
    v83 = _CocoaArrayWrapper.endIndex.getter(v84);
  }
  else
  {
    v83 = *(_QWORD *)((v168 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v168);
  }
  a1 = v146;
  v85 = v155;
  v20 = v167;
  if (!v83)
  {
    v93 = swift_bridgeObjectRelease();
    v94 = (uint64_t)v150;
    v165(v93);
LABEL_50:
    swift_bridgeObjectRelease();
    sub_10000882C(v94, (uint64_t *)&unk_100839C80);
    goto LABEL_51;
  }
  if (!v163)
  {
    if (!*(_QWORD *)((v168 & 0xFFFFFFFFFFFFF8) + 0x10))
      __break(1u);
    v86 = *(id *)(v168 + 32);
    goto LABEL_45;
  }
LABEL_83:
  v86 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v168);
LABEL_45:
  v87 = v86;
  v88 = objc_msgSend(v86, "groupIdentifier", swift_bridgeObjectRelease().n128_f64[0]);

  v89 = v20;
  if (v88)
  {
    v90 = (uint64_t)v148;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v88);

    v91 = 0;
    v92 = (uint64_t)v159;
  }
  else
  {
    v91 = 1;
    v92 = (uint64_t)v159;
    v90 = (uint64_t)v148;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v165)(v90, v91, 1, v32);
  v95 = (uint64_t)v150;
  sub_1000A5CA8(v90, (uint64_t)v150, (uint64_t *)&unk_100839C80);
  v96 = v32;
  v94 = v95;
  v97 = v89;
  v163 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v89 + 6);
  v98 = v163(v94, 1, v96);
  v85 = v155;
  if (v98 == 1)
    goto LABEL_50;
  v148 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v97 + 4);
  v148(v160, v94, v96);
  v108 = *((_QWORD *)v36 + 2);
  if (!v108)
  {
    swift_bridgeObjectRelease();
    v109 = (void (*)(char *, char *, char *))*((_QWORD *)v97 + 2);
LABEL_74:
    v131 = sub_10001A630(&qword_1008428D0);
    v132 = v147;
    v133 = (char *)v147 + *(int *)(v131 + 48);
    v134 = (char *)v147 + *(int *)(v131 + 64);
    *v147 = v164;
    v135 = v166;
    v109(v133, v160, v166);
    v136 = v151 + OBJC_IVAR____TtC7remindd43RDGroceryOperationCategorizeRemindersInList_queuedAt;
    v137 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v137 - 8) + 16))(v134, v136, v137);
    v138 = v152;
    v139 = v155;
    v140 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(v152 + 104))(v132, enum case for REMRemindersListDataView.GroceryAutoCategorizationMessage.manyRemindersToOneSection(_:), v155);
    REMRemindersListDataView.GroceryAutoCategorizationMessage.encodedString.getter(v140);
    if (v142)
    {
      v143 = String._bridgeToObjectiveC()();
      *(_QWORD *)&v141 = swift_bridgeObjectRelease().n128_u64[0];
    }
    else
    {
      v143 = 0;
    }
    a1 = v146;
    objc_msgSend(v146, "setName:", v143, v141);

    (*(void (**)(uint64_t *, uint64_t))(v138 + 8))(v132, v139);
    (*((void (**)(char *, char *))v97 + 1))(v160, v135);
    goto LABEL_64;
  }
  v109 = (void (*)(char *, char *, char *))*((_QWORD *)v97 + 2);
  v110 = swift_bridgeObjectRetain(v36);
  v111 = (uint64_t)&v17[(_QWORD)v36];
  v112 = v158;
  v150 = v109;
  v113 = v166;
  while (1)
  {
    v168 = v108;
    v114 = (uint64_t)v112;
    ((void (*)(uint64_t, char *, char *, __n128))v109)(v92, v160, v113, v110);
    ((void (*)(uint64_t, _QWORD, uint64_t, char *))v165)(v92, 0, 1, v113);
    v115 = v157;
    v116 = v157 + *(int *)(v156 + 48);
    sub_10011D420(v111, v157);
    sub_10011D420(v92, v116);
    v117 = (unsigned int (*)(uint64_t, uint64_t, char *))v163;
    if (v163(v115, 1, (uint64_t)v113) != 1)
      break;
    sub_10000882C(v92, (uint64_t *)&unk_100839C80);
    if (v117(v116, 1, v113) != 1)
      goto LABEL_79;
    sub_10000882C(v115, (uint64_t *)&unk_100839C80);
    v112 = (char *)v114;
LABEL_55:
    v111 += v5;
    v108 = v168 - 1;
    v92 = (uint64_t)v159;
    v109 = v150;
    if (v168 == 1)
    {
      swift_bridgeObjectRelease_n(v36, 2);
      v97 = v167;
      goto LABEL_74;
    }
  }
  sub_10011D420(v115, v114);
  if (v117(v116, 1, v113) != 1)
  {
    v118 = v153;
    v148(v153, v116, (uint64_t)v113);
    v119 = sub_10009FC50((unint64_t *)&qword_10083B380, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v120 = dispatch thunk of static Equatable.== infix(_:_:)(v158, v118, v113, v119);
    v121 = (void (*)(char *, char *))*((_QWORD *)v167 + 1);
    v122 = v118;
    v112 = v158;
    v121(v122, v113);
    sub_10000882C(v92, (uint64_t *)&unk_100839C80);
    v121(v112, v113);
    sub_10000882C(v115, (uint64_t *)&unk_100839C80);
    if ((v120 & 1) == 0)
    {
      v123 = swift_bridgeObjectRelease_n(v36, 2);
      goto LABEL_80;
    }
    goto LABEL_55;
  }
  sub_10000882C(v92, (uint64_t *)&unk_100839C80);
  (*((void (**)(uint64_t, char *))v167 + 1))(v114, v113);
LABEL_79:
  sub_10000882C(v115, (uint64_t *)&unk_10083B370);
  v123 = swift_bridgeObjectRelease_n(v36, 2);
  v121 = (void (*)(char *, char *))*((_QWORD *)v167 + 1);
LABEL_80:
  ((void (*)(char *, char *, __n128))v121)(v160, v166, v123);
  a1 = v146;
  v85 = v155;
LABEL_51:
  v99 = v152;
  v100 = (uint64_t *)v149;
  v101 = (char *)v100 + *(int *)(sub_10001A630(&qword_1008428C8) + 48);
  *v100 = v164;
  v102 = v151 + OBJC_IVAR____TtC7remindd43RDGroceryOperationCategorizeRemindersInList_queuedAt;
  v103 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 16))(v101, v102, v103);
  v104 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(v99 + 104))(v100, enum case for REMRemindersListDataView.GroceryAutoCategorizationMessage.manyRemindersToManySections(_:), v85);
  REMRemindersListDataView.GroceryAutoCategorizationMessage.encodedString.getter(v104);
  if (v106)
  {
    v107 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v105 = swift_bridgeObjectRelease().n128_u64[0];
  }
  else
  {
    v107 = 0;
  }
  objc_msgSend(a1, "setName:", v107, v105);

  (*(void (**)(uint64_t *, uint64_t))(v99 + 8))(v100, v85);
LABEL_64:
  v169 = 0;
  v124 = objc_msgSend(v162, "save:", &v169);
  v125 = v169;
  if (v124)
  {
    if (v161)
    {
      v126 = v169;
      goto LABEL_68;
    }
    v130 = v169;
LABEL_70:
    v129 = 0;
  }
  else
  {
    v127 = v169;
    _convertNSErrorToError(_:)((char *)v125);

    swift_willThrow(v128);
    if (!v161)
      goto LABEL_70;
LABEL_68:
    v129 = String._bridgeToObjectiveC()();
  }
  objc_msgSend(a1, "setName:", v129);
  swift_bridgeObjectRelease();

}

double sub_100293264(_QWORD *a1, id *a2)
{
  uint64_t v2;

  return sub_10028298C(a1, a2, *(_QWORD *)(v2 + 16));
}

const char *sub_100293284()
{
  return "groceryLocaleID";
}

void sub_100293290(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_groceryLocaleID, a2);
}

void sub_1002932AC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setGroceryLocaleID_);
}

const char *sub_1002932C8()
{
  return "membershipsOfRemindersInSectionsAsData";
}

void sub_1002932D4(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100166024(a1, (SEL *)&selRef_membershipsOfRemindersInSectionsAsData, a2);
}

void sub_1002932F0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_100166084(a1, a2, a3, a4, (SEL *)&selRef_setMembershipsOfRemindersInSectionsAsData_);
}

const char *sub_10029330C()
{
  return "membershipsOfRemindersInSectionsChecksum";
}

void sub_100293318(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_membershipsOfRemindersInSectionsChecksum, a2);
}

void sub_100293334(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setMembershipsOfRemindersInSectionsChecksum_);
}

const char *sub_100293350()
{
  return "groceryLocalCorrectionsAsData";
}

void sub_10029335C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100166024(a1, (SEL *)&selRef_groceryLocalCorrectionsAsData, a2);
}

void sub_100293378(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_100166084(a1, a2, a3, a4, (SEL *)&selRef_setGroceryLocalCorrectionsAsData_);
}

const char *sub_100293394()
{
  return "resolutionTokenMap_v3_JSONData";
}

void sub_1002933A0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100166024(a1, (SEL *)&selRef_resolutionTokenMap_v3_JSONData, a2);
}

void sub_1002933BC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_100166084(a1, a2, a3, a4, (SEL *)&selRef_setResolutionTokenMap_v3_JSONData_);
}

uint64_t sub_1002933E0(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

ValueMetadata *type metadata accessor for RDGroceryOperationCategorizeRemindersInList.Configuration()
{
  return &type metadata for RDGroceryOperationCategorizeRemindersInList.Configuration;
}

uint64_t *sub_10029342C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v15);
  }
  return a1;
}

uint64_t sub_1002934D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t sub_100293530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  return a1;
}

uint64_t sub_1002935B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

uint64_t sub_100293658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = *(int *)(a3 + 24);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  return a1;
}

uint64_t sub_1002936E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002936EC);
}

uint64_t sub_1002936EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_100293778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100293784);
}

uint64_t sub_100293784(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t sub_100293800(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1006B2190;
    v4[2] = &unk_1006B2190;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t _s31ThreadSafePartialRepresentationVwxx(uint64_t a1)
{

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

_QWORD *_s31ThreadSafePartialRepresentationVwCP_0(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a2 + 16);
  a1[2] = v5;
  v6 = v3;
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t _s31ThreadSafePartialRepresentationVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t _s31ThreadSafePartialRepresentationVwta(uint64_t a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v5 = a2[2];
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDSavedDueDateDeltaAlert(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDSavedDueDateDeltaAlert(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s31ThreadSafePartialRepresentationVMa_0()
{
  return &_s31ThreadSafePartialRepresentationVN;
}

uint64_t _s31ThreadSafePartialRepresentationVwxx_0(uint64_t a1)
{

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t _s31ThreadSafePartialRepresentationVwcp(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = v3;
  v7 = v4;
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t _s31ThreadSafePartialRepresentationVwca_0(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t _s31ThreadSafePartialRepresentationVwta_0(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t _s31ThreadSafePartialRepresentationVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s31ThreadSafePartialRepresentationVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s31ThreadSafePartialRepresentationVMa_1()
{
  return &_s31ThreadSafePartialRepresentationVN_0;
}

unint64_t sub_100293C24()
{
  unint64_t result;

  result = qword_100842988;
  if (!qword_100842988)
  {
    result = swift_getWitnessTable(&unk_1006B2334, &type metadata for RDGroceryOperationCategorizeRemindersInList.Configuration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100842988);
  }
  return result;
}

uint64_t sub_100293C68(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_1000A5A94(&qword_10083FE20);
    sub_10009FC50(a2, (uint64_t (*)(uint64_t))&type metadata accessor for REMObjectID_Codable, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RDGroceryOperationCategorizeRemindersInList.Configuration.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100293D2C + 4 * byte_1006B1EC0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100293D4C + 4 * byte_1006B1EC5[v4]))();
}

_BYTE *sub_100293D2C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100293D4C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100293D54(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100293D5C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100293D64(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100293D6C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for RDGroceryOperationCategorizeRemindersInList.Configuration.CodingKeys()
{
  return &type metadata for RDGroceryOperationCategorizeRemindersInList.Configuration.CodingKeys;
}

unint64_t sub_100293D8C()
{
  unint64_t result;

  result = qword_1008429B8;
  if (!qword_1008429B8)
  {
    result = swift_getWitnessTable(&unk_1006B230C, &type metadata for RDGroceryOperationCategorizeRemindersInList.Configuration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008429B8);
  }
  return result;
}

unint64_t sub_100293DD4()
{
  unint64_t result;

  result = qword_1008429C0;
  if (!qword_1008429C0)
  {
    result = swift_getWitnessTable(&unk_1006B227C, &type metadata for RDGroceryOperationCategorizeRemindersInList.Configuration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008429C0);
  }
  return result;
}

unint64_t sub_100293E1C()
{
  unint64_t result;

  result = qword_1008429C8;
  if (!qword_1008429C8)
  {
    result = swift_getWitnessTable(&unk_1006B22A4, &type metadata for RDGroceryOperationCategorizeRemindersInList.Configuration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008429C8);
  }
  return result;
}

void sub_100293E70(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  uint64_t v11;

  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008868(a1, (uint64_t)v6, (uint64_t *)&unk_1008380D0);
  v7 = *a2;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  objc_msgSend(v7, "setActivityDate:", isa);

}

uint64_t sub_100293F54()
{
  uint64_t v0;
  uint64_t updated;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20[2];
  _QWORD v21[2];

  updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  v2 = v0 + *(int *)(updated + 24);
  v3 = *(void **)(v2 + 8);
  v20[0] = *(id *)v2;
  v20[1] = v3;
  swift_bridgeObjectRetain(v3);
  v4 = sub_10001A630((uint64_t *)&unk_10083A370);
  Optional.tryUnwrap(_:file:line:)(v21, 0xD000000000000012, 0x80000001006FEB60, 0xD000000000000095, 0x80000001006FD9A0, 140, v4);
  *(_QWORD *)&v5 = swift_bridgeObjectRelease(v3).n128_u64[0];
  v7 = v21[0];
  v6 = v21[1];
  v19 = objc_msgSend(*(id *)(v0 + *(int *)(updated + 28)), "list", v5);
  v8 = sub_10001A630((uint64_t *)&unk_100843F50);
  Optional.tryUnwrap(_:file:line:)(v20, 0x7265646E696D6572, 0xED00007473696C2ELL, 0xD000000000000095, 0x80000001006FD9A0, 152, v8);

  v9 = v20[0];
  v10 = objc_msgSend(v20[0], "sharees", v19);

  if (v10)
  {
    v11 = sub_1000151B0(0, (unint64_t *)&qword_100839928, off_1007D6718);
    v12 = sub_1000E51DC((unint64_t *)&unk_100843650, (unint64_t *)&qword_100839928, off_1007D6718, (uint64_t)&protocol conformance descriptor for NSObject);
    v13 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v10, v11, v12);

  }
  else
  {
    v13 = 0;
  }
  v20[0] = v13;
  v14 = sub_10001A630(&qword_100842C10);
  Optional.tryUnwrap(_:file:line:)(v21, 0x6168732E7473696CLL, 0xEC00000073656572, 0xD000000000000095, 0x80000001006FD9A0, 141, v14);
  swift_bridgeObjectRelease(v13);
  v16 = v21[0];
  swift_bridgeObjectRetain(v6);
  sub_10029CC58(v16, v7, v6);
  v18 = v17;
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease_n(v6, 2);
  return v18;
}

void sub_1002941E0()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(*(id *)(v0+ *(int *)(type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0)+ 28)), "account");
  v1 = sub_10001A630((uint64_t *)&unk_10083ADA0);
  Optional.tryUnwrap(_:file:line:)(&v3, 0xD000000000000010, 0x80000001006F94A0, 0xD000000000000095, 0x80000001006FD9A0, 159, v1);

}

uint64_t sub_1002942AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008429D0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008429D0);
  if (qword_100837620 != -1)
    swift_once(&qword_100837620, sub_1004A181C);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872040);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10029433C()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, "syncActivityNotificationEngine_accountSignInTime");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = type metadata accessor for Date(0);
  v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String, v3, &protocol witness table for String);

  return v4;
}

void sub_1002943AC(uint64_t a1)
{
  void *v1;
  Class isa;

  if (a1)
  {
    type metadata accessor for Date(0);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    isa = 0;
  }
  objc_msgSend(v1, "setSyncActivityNotificationEngine_accountSignInTime:", isa);

}

id sub_100294424()
{
  void *v0;
  NSString v1;
  id v2;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "muteNotificationOptionsForSharedList:", v1);

  return v2;
}

uint64_t sub_100294464()
{
  _BYTE *v0;
  Swift::String v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Swift::String v5;
  Swift::String v6;
  void *object;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;
  Swift::String v13;
  void *v14;

  _StringGuts.grow(_:)(106);
  v1._object = (void *)0x80000001006FEAD0;
  v1._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v1);
  if ((*v0 & 1) != 0)
    v2 = 1702195828;
  else
    v2 = 0x65736C6166;
  if ((*v0 & 1) != 0)
    v3 = 0xE400000000000000;
  else
    v3 = 0xE500000000000000;
  v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease(v3);
  v5._countAndFlagsBits = 0xD000000000000017;
  v5._object = (void *)0x80000001006FEAF0;
  String.append(_:)(v5);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  v8._countAndFlagsBits = 0xD00000000000001BLL;
  v8._object = (void *)0x80000001006FEB10;
  String.append(_:)(v8);
  if ((v0[16] & 1) != 0)
    v9 = 1702195828;
  else
    v9 = 0x65736C6166;
  if ((v0[16] & 1) != 0)
    v10 = 0xE400000000000000;
  else
    v10 = 0xE500000000000000;
  v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease(v10);
  v12._countAndFlagsBits = 0xD000000000000020;
  v12._object = (void *)0x80000001006FEB30;
  String.append(_:)(v12);
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v14 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v14);
  return 0;
}

Swift::Int sub_100294614()
{
  uint64_t v0;
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  Hasher._combine(_:)(*(_BYTE *)v0 & 1);
  Hasher._combine(_:)(*(_QWORD *)(v0 + 8));
  Hasher._combine(_:)(*(_BYTE *)(v0 + 16) & 1);
  Hasher._combine(_:)(*(_QWORD *)(v0 + 24));
  Hasher._combine(_:)(*(_BYTE *)(v0 + 32) & 1);
  return Hasher._finalize()();
}

void sub_100294698()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt8 v2;
  Swift::UInt v3;
  Swift::UInt8 v4;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_BYTE *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_BYTE *)(v0 + 32);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
}

Swift::Int sub_100294700(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt8 v2;
  Swift::UInt v3;
  Swift::UInt8 v4;
  Swift::UInt v5;
  Swift::UInt8 v6;
  _QWORD v8[9];

  v2 = *(_BYTE *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_BYTE *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_BYTE *)(v1 + 32);
  Hasher.init(_seed:)(v8, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

uint64_t sub_100294794(unsigned __int8 *a1, unsigned __int8 *a2)
{
  char v2;

  v2 = 0;
  if (((*a1 ^ *a2) & 1) == 0
    && *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1)
    && ((a1[16] ^ a2[16]) & 1) == 0
    && *((_QWORD *)a1 + 3) == *((_QWORD *)a2 + 3))
  {
    v2 = a2[32] ^ a1[32] ^ 1;
  }
  return v2 & 1;
}

id sub_1002947F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Swift::String v30;
  id v32;
  uint64_t v33;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend(*(id *)(v0+ *(int *)(type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0)+ 28)), "remObjectID");
  if (v5)
  {
    v6 = v5;
    v7 = objc_msgSend(v5, "uuid");

    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v9 = UUID.uuidString.getter(v8);
    v11 = v10;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    v12 = sub_1002949C4();
    v14 = v13;
    v32 = v12;
    v33 = v13;
    swift_bridgeObjectRetain(v13);
    v15._countAndFlagsBits = 46;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v14);
    v16 = v33;
    swift_bridgeObjectRetain(v33);
    v17._countAndFlagsBits = v9;
    v17._object = v11;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(v11);
    v18 = v16;
  }
  else
  {
    v19 = sub_1002949C4();
    v21 = v20;
    v32 = v19;
    v33 = v20;
    swift_bridgeObjectRetain(v20);
    v22._countAndFlagsBits = 46;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(v21);
    v24 = v32;
    v23 = v33;
    v26 = UUID.init()(v25);
    v27 = UUID.uuidString.getter(v26);
    v29 = v28;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    v32 = v24;
    v33 = v23;
    swift_bridgeObjectRetain(v23);
    v30._countAndFlagsBits = v27;
    v30._object = v29;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v29);
    v18 = v23;
  }
  swift_bridgeObjectRelease(v18);
  return v32;
}

id sub_1002949C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t updated;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void (*v19)(char *, uint64_t);
  void *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  Swift::String v28;
  void *object;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  const char *v33;
  unint64_t v34;
  void *v35;
  uint64_t v37;
  Swift::String v38;
  id v39[3];

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  v7 = objc_msgSend(*(id *)(v0 + *(int *)(updated + 28)), "list");
  v38._countAndFlagsBits = (uint64_t)v7;
  v8 = sub_10001A630((uint64_t *)&unk_100843F50);
  Optional.tryUnwrap(_:file:line:)(v39, 0x7265646E696D6572, 0xED00007473696C2ELL, 0xD000000000000095, 0x80000001006FD9A0, 152, v8);

  v11 = v39[0];
  v12 = objc_msgSend(v39[0], "remObjectID");

  if (v12)
  {
    v14 = objc_msgSend(v12, "uuid");

    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v16 = (void *)UUID.uuidString.getter(v15);
    v18 = v17;
    v19 = *(void (**)(char *, uint64_t))(v3 + 8);
    v19(v5, v2);
    v39[0] = v16;
    v39[1] = v18;
    v20 = (void *)sub_100293F54();
    if (v20)
    {
      v21 = v20;
      v22 = objc_msgSend(v20, "remObjectID");

      if (v22)
      {
        v23 = objc_msgSend(v22, "uuid");

        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v23);
        v25 = UUID.uuidString.getter(v24);
        v27 = v26;
        v19(v5, v2);
        v38._countAndFlagsBits = 46;
        v38._object = (void *)0xE100000000000000;
        v28._countAndFlagsBits = v25;
        v28._object = v27;
        String.append(_:)(v28);
        swift_bridgeObjectRelease(v27);
        object = v38._object;
        String.append(_:)(v38);
        swift_bridgeObjectRelease(object);
      }
    }
    v30 = *(_QWORD *)(v1 + *(int *)(updated + 20));
    v31 = 0xE700000000000000;
    v32 = 0x6E776F6E6B6E75;
    switch(v30)
    {
      case 0:
        break;
      case 1:
        v31 = 0xE300000000000000;
        v32 = 6579297;
        break;
      case 2:
        v33 = "titleMayHaveDirtyHashtag";
        goto LABEL_12;
      case 3:
        v33 = "notesMayHaveDirtyHashtag";
LABEL_12:
        v31 = (unint64_t)(v33 - 32) | 0x8000000000000000;
        v32 = 0xD000000000000018;
        break;
      case 4:
        v32 = 0xD00000000000001BLL;
        v31 = 0x80000001006FD190;
        break;
      case 5:
        v31 = 0xE800000000000000;
        v32 = 0x6574656C706D6F63;
        break;
      default:
        v31 = 0xEF746C7561666564;
        v32 = 0x206E776F6E6B6E75;
        break;
    }
    v38._countAndFlagsBits = 46;
    v38._object = (void *)0xE100000000000000;
    v34 = v31;
    String.append(_:)(*(Swift::String *)&v32);
    swift_bridgeObjectRelease(v31);
    v35 = v38._object;
    String.append(_:)(v38);
    swift_bridgeObjectRelease(v35);
    return v39[0];
  }
  else
  {
    v9 = UUID.init()(v13);
    v10 = UUID.uuidString.getter(v9);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return (id)v10;
}

unint64_t REMSharedEntitySyncActivityType.description.getter(uint64_t a1)
{
  unint64_t result;

  result = 0x6E776F6E6B6E75;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 6579297;
      break;
    case 2:
    case 3:
      result = 0xD000000000000018;
      break;
    case 4:
      result = 0xD00000000000001BLL;
      break;
    case 5:
      result = 0x6574656C706D6F63;
      break;
    default:
      result = 0x206E776F6E6B6E75;
      break;
  }
  return result;
}

void sub_100294E2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_scheduler);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once(&qword_1008370B8, sub_1002942AC);
    goto LABEL_4;
  }
  KeyPath = swift_getKeyPath(&unk_1006B2600);
  v8 = swift_getKeyPath(&unk_1006B2628);
  static Published.subscript.getter(&v16, v0, KeyPath, v8);
  swift_release(KeyPath);
  swift_release(v8);
  if ((v16 & 1) == 0)
  {
    v14 = objc_autoreleasePoolPush();
    sub_100295070(v0);
    objc_autoreleasePoolPop(v14);
    return;
  }
  if (qword_1008370B8 != -1)
    goto LABEL_9;
LABEL_4:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10001AAA8(v9, (uint64_t)qword_1008429D0);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    swift_slowDealloc(v13, -1, -1);
  }

}

uint64_t sub_100295000()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1006B2600);
  v2 = swift_getKeyPath(&unk_1006B2628);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

void sub_100295070(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _UNKNOWN **v10;
  uint8_t *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  _OWORD v31[2];
  char v32;
  uint64_t v33;

  if (qword_1008370B8 != -1)
    swift_once(&qword_1008370B8, sub_1002942AC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001AAA8(v2, (uint64_t)qword_1008429D0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "📔 RDSyncActivityEngine Starting...", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = swift_retain_n(a1, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter(v8);
  v10 = &off_100842000;
  if (os_log_type_enabled(v8, v9))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v33 = v12;
    *(_DWORD *)v11 = 136315138;
    v13 = *(_OWORD *)(a1
                    + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_appliedEngineConfiguration
                    + 16);
    v31[0] = *(_OWORD *)(a1
                       + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_appliedEngineConfiguration);
    v31[1] = v13;
    v32 = *(_BYTE *)(a1
                   + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_appliedEngineConfiguration
                   + 32);
    v14 = sub_100294464();
    v16 = v15;
    v30 = sub_10001A820(v14, v15, &v33);
    v10 = &off_100842000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "📔 RDSyncActivityEngine: Startup Parameter Summary: {%s}", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    swift_release_n(a1, 2);
  }
  v17 = sub_100295450();
  v18 = (char *)v10[326] + a1;
  if ((*v18 & 1) != 0 || (v18[16] & 1) != 0)
  {
    sub_100295E28();
    KeyPath = swift_getKeyPath(&unk_1006B2600);
    v25 = swift_getKeyPath(&unk_1006B2628);
    LOBYTE(v33) = 1;
    swift_retain(a1);
    v26 = static Published.subscript.setter(&v33, a1, KeyPath, v25);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "📔 RDSyncActivityEngine Started", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

  }
  else
  {
    v19 = Logger.logObject.getter(v17);
    v20 = static os_log_type_t.default.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "📔 RDSyncActivityEngine is in manual testing mode. All subscribed hooks are disabled.", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    v22 = swift_getKeyPath(&unk_1006B2600);
    v23 = swift_getKeyPath(&unk_1006B2628);
    LOBYTE(v33) = 1;
    swift_retain(a1);
    static Published.subscript.setter(&v33, a1, v22, v23);
  }
}

uint64_t sub_100295450()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  __n128 v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  void *v65;
  uint64_t v66;
  id v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  void (*v82)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t, __n128);
  uint64_t v95;
  uint64_t v96;
  id v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  id v109;

  v108 = *v0;
  v1 = sub_10001A630(&qword_10083A970);
  __chkstk_darwin(v1);
  v106 = (char *)&v74 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_10001A630((uint64_t *)&unk_100838070);
  v88 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v4 = (char *)&v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v6 = *(_QWORD *)(v5 - 8);
  v95 = v5;
  __chkstk_darwin(v5);
  v8 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = sub_10001A630((uint64_t *)&unk_10083A960);
  v85 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v10 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_10001A630(&qword_100842D18);
  v87 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v100 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_10001A630(&qword_100842D20);
  v96 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v102 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = RDSyncActivityNotificationEngineAuthor;
  v93 = RDSyncActivityNotificationEngineAuthor;
  v14 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(RDSyncActivityNotificationEngineAuthor);
  v16 = v15;
  v99 = sub_10001A630((uint64_t *)&unk_10083A340);
  v17 = swift_allocObject(v99, 48, 7);
  v98 = xmmword_1006A3C00;
  *(_OWORD *)(v17 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v17 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  *(_QWORD *)(v17 + 40) = v18;
  v97 = (id)objc_opt_self(NSNotificationCenter);
  v19 = objc_msgSend(v97, "defaultCenter");
  v81 = v8;
  NSNotificationCenter.publisher(for:object:)(CFSTR("RDStoreControllerDidEnableAccountsNotification"), 0);

  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("RDStoreControllerDidEnableAccountsNotificationAccountStoragesKey"));
  v22 = v21;
  v23 = (void *)sub_100398054(v20, v21, v14, v16, v17);
  v24 = swift_bridgeObjectRelease(v22);
  v94 = *(void (**)(char *, uint64_t, __n128))(v6 + 8);
  v94(v8, v5, v24);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v17);
  v109 = v23;
  v25 = sub_10001A630((uint64_t *)&unk_10084D080);
  v92 = v25;
  v26 = sub_10001A630((uint64_t *)&unk_100838090);
  v91 = v26;
  v90 = sub_1000A5F84(&qword_100847B20, (uint64_t *)&unk_10084D080, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v84 = v4;
  Publisher.map<A>(_:)(sub_1004A4448, 0, v25, v26, v90);
  v89 = sub_1000A5F84((unint64_t *)&unk_1008380A0, (uint64_t *)&unk_100838070, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v27 = v105;
  Publisher.filter(_:)(sub_1000F27FC, 0, v105, v89);
  v88 = *(_QWORD *)(v88 + 8);
  ((void (*)(char *, uint64_t))v88)(v4, v27);
  swift_release(v23);
  v28 = v101;
  v29 = *(_QWORD *)(v101
                  + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_accountSignInOrOutSubscriptionTransactionRegistrar);
  v30 = swift_allocObject(&unk_1007EC138, 32, 7);
  *(_QWORD *)(v30 + 16) = v29;
  *(_QWORD *)(v30 + 24) = 1;
  v31 = sub_1000A5F84(&qword_10083EEE0, (uint64_t *)&unk_10083A960, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v86 = v31;
  swift_retain(v29);
  v32 = v103;
  v33 = v100;
  v75 = v10;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)(0, 0, sub_10029E648, v30, 0, 0, 0, 0, 0, 0, v103, v31);
  swift_release(v30);
  v85 = *(_QWORD *)(v85 + 8);
  ((void (*)(char *, uint64_t))v85)(v10, v32);
  v109 = *(id *)(v28 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_scheduler);
  v34 = v109;
  v83 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v82 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 56);
  v35 = (uint64_t)v106;
  v82(v106, 1, 1, v83);
  v36 = sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v79 = v36;
  v37 = sub_1000A5F84(&qword_100842D28, &qword_100842D18, (uint64_t)&protocol conformance descriptor for Publishers.HandleEvents<A>);
  v78 = v37;
  v38 = sub_1000E51DC((unint64_t *)&qword_1008380B0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v80 = v38;
  v77 = v34;
  v39 = v102;
  v40 = v104;
  Publisher.receive<A>(on:options:)(&v109, v35, v104, v36, v37, v38);
  sub_10000882C(v35, &qword_10083A970);

  v87 = *(_QWORD *)(v87 + 8);
  ((void (*)(char *, uint64_t))v87)(v33, v40);
  v41 = (_QWORD *)swift_allocObject(&unk_1007EC160, 40, 7);
  v41[2] = sub_1002986C4;
  v41[3] = 0;
  v41[4] = v29;
  v76 = sub_1000A5F84(&qword_100842D30, &qword_100842D20, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v29);
  v42 = v107;
  v43 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)(v28, sub_10023DB6C, v41, 0, 0, v107, v108);
  swift_release(v41);
  v44 = *(void (**)(char *, uint64_t))(v96 + 8);
  v44(v39, v42);
  v45 = v28 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_cancellables;
  swift_beginAccess(v28 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_cancellables, &v109, 33, 0);
  AnyCancellable.store(in:)(v45);
  swift_endAccess(&v109);
  swift_release(v43);
  v46 = v93;
  v47 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v93);
  v49 = v48;
  v50 = swift_allocObject(v99, 48, 7);
  *(_OWORD *)(v50 + 16) = v98;
  *(_QWORD *)(v50 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
  *(_QWORD *)(v50 + 40) = v51;
  v52 = objc_msgSend(v97, "defaultCenter");
  v53 = v81;
  NSNotificationCenter.publisher(for:object:)(CFSTR("RDStoreControllerDidDisableAccountsNotification"), 0);

  v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("RDStoreControllerDidDisableAccountsNotificationAccountStoragesKey"));
  v56 = v55;
  v57 = (void *)sub_100398054(v54, v55, v47, v49, v50);
  v58 = swift_bridgeObjectRelease(v56);
  v94(v53, v95, v58);
  swift_bridgeObjectRelease(v49);
  swift_bridgeObjectRelease(v50);
  v109 = v57;
  v59 = v84;
  Publisher.map<A>(_:)(sub_1004A4448, 0, v92, v91, v90);
  v60 = v75;
  v61 = v105;
  Publisher.filter(_:)(sub_1000F27FC, 0, v105, v89);
  ((void (*)(char *, uint64_t))v88)(v59, v61);
  swift_release(v57);
  v62 = swift_allocObject(&unk_1007EC188, 32, 7);
  *(_QWORD *)(v62 + 16) = v29;
  *(_QWORD *)(v62 + 24) = 1;
  swift_retain(v29);
  v63 = v103;
  v64 = v100;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)(0, 0, sub_10029E698, v62, 0, 0, 0, 0, 0, 0, v103, v86);
  swift_release(v62);
  ((void (*)(char *, uint64_t))v85)(v60, v63);
  v65 = v77;
  v109 = v77;
  v66 = (uint64_t)v106;
  v82(v106, 1, 1, v83);
  v67 = v65;
  v68 = v102;
  v69 = v104;
  Publisher.receive<A>(on:options:)(&v109, v66, v104, v79, v78, v80);
  sub_10000882C(v66, &qword_10083A970);

  ((void (*)(char *, uint64_t))v87)(v64, v69);
  v70 = (_QWORD *)swift_allocObject(&unk_1007EC1B0, 40, 7);
  v70[2] = sub_1002986D8;
  v70[3] = 0;
  v70[4] = v29;
  swift_retain(v29);
  v71 = v107;
  v72 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)(v101, sub_10029E694, v70, 0, 0, v107, v108);
  swift_release(v70);
  v44(v68, v71);
  swift_beginAccess(v45, &v109, 33, 0);
  AnyCancellable.store(in:)(v45);
  swift_endAccess(&v109);
  return swift_release(v72);
}

uint64_t sub_100295E28()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t inited;
  uint64_t v71;
  uint64_t v72;
  Swift::Int v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  __n128 v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  _QWORD *v94;
  void *v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  id v110;
  char *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  id v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void (**v146)(char *, uint64_t);
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void (*v167)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  char v174[8];
  __int128 *v175;
  id v176;
  char v177[8];
  __int128 v178;
  __int128 v179;
  char v180;

  v1 = v0;
  v165 = *v0;
  v161 = sub_10001A630(&qword_100842C18);
  v160 = *(_QWORD *)(v161 - 8);
  __chkstk_darwin(v161);
  v157 = (char *)&v120 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = sub_10001A630((uint64_t *)&unk_100838030);
  v156 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159);
  v154 = (uint64_t *)((char *)&v120 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v148 = sub_10001A630(&qword_100842C20);
  v150 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148);
  v147 = (char *)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = sub_10001A630(&qword_100842C28);
  v151 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v132 = (char *)&v120 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = sub_10001A630(&qword_100842C30);
  v155 = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158);
  v153 = (char *)&v120 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_10001A630(&qword_100842C38);
  v163 = *(_QWORD *)(v164 - 8);
  __chkstk_darwin(v164);
  v162 = (char *)&v120 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = sub_10001A630(&qword_100842C40);
  v146 = *(void (***)(char *, uint64_t))(v145 - 8);
  __chkstk_darwin(v145);
  v139 = (char *)&v120 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_10001A630(&qword_100842C48);
  v136 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v133 = (char *)&v120 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = sub_10001A630(&qword_100842C50);
  v142 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v134 = (char *)&v120 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = sub_10001A630(&qword_100842C58);
  v144 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  v137 = (char *)&v120 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A630(&qword_100842C60);
  v13 = *(_QWORD *)(v12 - 8);
  v171 = v12;
  v172 = v13;
  v14 = __chkstk_darwin(v12);
  v141 = (char *)&v120 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v170 = (char *)&v120 - v16;
  v17 = sub_10001A630(&qword_10083A970);
  __chkstk_darwin(v17);
  v19 = (char *)&v120 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A630(&qword_10083EF10);
  __chkstk_darwin(v20);
  v123 = (char *)&v120 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v23 = *(_QWORD *)(v22 - 8);
  v122 = v22;
  __chkstk_darwin(v22);
  v121 = (char *)&v120 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_10001A630(&qword_100842C68);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (char *)&v120 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = sub_10001A630(&qword_100842C70);
  v126 = *(_QWORD *)(v124 - 8);
  __chkstk_darwin(v124);
  v30 = (char *)&v120 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_10001A630(&qword_100842C78);
  v129 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127);
  v32 = (char *)&v120 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_10001A630(&qword_100842C80);
  v130 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v125 = (char *)&v120 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = v1;
  v34 = *(_OWORD *)((char *)v1
                  + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_appliedEngineConfiguration
                  + 16);
  v178 = *(_OWORD *)((char *)v1
                   + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_appliedEngineConfiguration);
  v179 = v34;
  v180 = *((_BYTE *)v1
         + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_appliedEngineConfiguration
         + 32);
  v176 = &_swiftEmptySetSingleton;
  v131 = sub_10001A630((uint64_t *)&unk_10083DB60);
  Just.init(_:)(&v176, v131);
  v175 = &v178;
  Just.drop(while:)(sub_10029E2E8, v174, v25);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(*((_QWORD *)&v178 + 1));
  v35 = (uint64_t)v123;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v123, 1, 1, v22);
  v176 = *(id *)((char *)v1 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_scheduler);
  v36 = v176;
  v37 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56);
  v168 = v37;
  v167 = v38;
  ((void (*)(char *, uint64_t, uint64_t))v38)(v19, 1, 1);
  v39 = sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v40 = sub_1000A5F84(&qword_100842C88, &qword_100842C70, (uint64_t)&protocol conformance descriptor for A?.Publisher);
  v41 = sub_1000E51DC((unint64_t *)&qword_1008380B0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v140 = v36;
  v42 = v121;
  v43 = v124;
  v169 = v39;
  v166 = v41;
  Publisher.delay<A>(for:tolerance:scheduler:options:)(v121, v35, &v176, v19, v124, v39, v40, v41);
  v149 = v19;
  sub_10000882C((uint64_t)v19, &qword_10083A970);

  sub_10000882C(v35, &qword_10083EF10);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v42, v122);
  (*(void (**)(char *, uint64_t))(v126 + 8))(v30, v43);
  v44 = sub_1000A5F84(&qword_100842C90, &qword_100842C78, (uint64_t)&protocol conformance descriptor for Publishers.Delay<A, B>);
  v45 = v127;
  v46 = v125;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)(0, 0, sub_100298B9C, 0, 0, 0, 0, 0, 0, 0, v127, v44);
  (*(void (**)(char *, uint64_t))(v129 + 8))(v32, v45);
  v47 = sub_1000A5F84(&qword_100842C98, &qword_100842C80, (uint64_t)&protocol conformance descriptor for Publishers.HandleEvents<A>);
  v48 = v128;
  v49 = (void *)Publisher.eraseToAnyPublisher()(v128, v47);
  (*(void (**)(char *, uint64_t))(v130 + 8))(v46, v48);
  v50 = v173;
  v51 = *(void **)((char *)v173 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_storeController);
  v52 = RDSyncActivityNotificationEngineAuthor;
  v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(RDSyncActivityNotificationEngineAuthor);
  v55 = v54;
  v56 = sub_10001A630((uint64_t *)&unk_10083A340);
  v57 = swift_allocObject(v56, 64, 7);
  *(_OWORD *)(v57 + 16) = xmmword_1006A3C40;
  *(_QWORD *)(v57 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
  *(_QWORD *)(v57 + 40) = v58;
  *(_QWORD *)(v57 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(RDSharedInlineTagAutoConvertAuthor);
  *(_QWORD *)(v57 + 56) = v59;
  v60 = (void *)sub_100399F04(v51, v53, v55, v57);
  swift_bridgeObjectRelease(v55);
  swift_bridgeObjectRelease(v57);
  v176 = v60;
  v61 = swift_allocObject(&unk_1007EBFF8, 49, 7);
  v62 = v179;
  *(_OWORD *)(v61 + 16) = v178;
  *(_OWORD *)(v61 + 32) = v62;
  *(_BYTE *)(v61 + 48) = v180;
  v63 = sub_10001A630((uint64_t *)&unk_10083EF50);
  v64 = sub_1000A5F84((unint64_t *)&unk_10083EF60, (uint64_t *)&unk_10083EF50, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v65 = v133;
  Publisher.drop(while:)(sub_10029E30C, v61, v63, v64);
  swift_release(v61);
  swift_release(v176);
  v66 = swift_allocObject(&unk_1007EC020, 24, 7);
  swift_weakInit(v66 + 16, v50);
  v67 = sub_1000A5F84(&qword_100842CA0, &qword_100842C48, (uint64_t)&protocol conformance descriptor for Publishers.DropWhile<A>);
  v68 = v134;
  v69 = v135;
  Publisher.drop(while:)(sub_10029E340, v66, v135, v67);
  swift_release(v66);
  (*(void (**)(char *, uint64_t))(v136 + 8))(v65, v69);
  inited = swift_initStackObject(v56, v177);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  v176 = (id)type metadata accessor for REMCKSharedEntitySyncActivity();
  v71 = sub_10001A630(&qword_10083EF48);
  *(_QWORD *)(inited + 32) = String.init<A>(describing:)(&v176, v71);
  *(_QWORD *)(inited + 40) = v72;
  v73 = sub_1002E6C54(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1, &type metadata for String);
  v74 = swift_allocObject(&unk_1007EC048, 24, 7);
  *(_QWORD *)(v74 + 16) = v73;
  v75 = sub_1000A5F84(&qword_100842CA8, &qword_100842C50, (uint64_t)&protocol conformance descriptor for Publishers.DropWhile<A>);
  swift_bridgeObjectRetain(v73);
  v76 = v139;
  v77 = v138;
  Publisher.map<A>(_:)(sub_100188E48, v74, v138, v131, v75);
  swift_release(v74);
  v78 = sub_1000A5F84(&qword_100842CB0, &qword_100842C40, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v79 = v137;
  v80 = v145;
  Publisher.filter(_:)(sub_1000F27FC, 0, v145, v78);
  v146[1](v76, v80);
  v81 = swift_bridgeObjectRelease(v73);
  (*(void (**)(char *, uint64_t, __n128))(v142 + 8))(v68, v77, v81);
  v82 = sub_1000A5F84(&qword_100842CB8, &qword_100842C58, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v83 = v143;
  v84 = v170;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)(0, 0, sub_100298C58, 0, 0, 0, 0, 0, 0, 0, v143, v82);
  (*(void (**)(char *, uint64_t))(v144 + 8))(v79, v83);
  v176 = v49;
  v85 = v171;
  v86 = v141;
  (*(void (**)(char *, char *, uint64_t))(v172 + 16))(v141, v84, v171);
  v87 = sub_1000A5F84(&qword_100842CC0, &qword_100842C60, (uint64_t)&protocol conformance descriptor for Publishers.HandleEvents<A>);
  v146 = (void (**)(char *, uint64_t))v49;
  swift_retain(v49);
  v88 = v147;
  Publishers.Merge.init(_:_:)(&v176, v86, v63, v85, v64, v87);
  v89 = *(_QWORD *)((char *)v173
                  + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_journalUpdatesSubscriptionTransactionRegistrar);
  v90 = swift_allocObject(&unk_1007EC070, 32, 7);
  *(_QWORD *)(v90 + 16) = v89;
  *(_QWORD *)(v90 + 24) = 1;
  v91 = sub_1000A5F84(&qword_100842CC8, &qword_100842C20, (uint64_t)&protocol conformance descriptor for Publishers.Merge<A, B>);
  v145 = v89;
  swift_retain(v89);
  v92 = v148;
  v93 = v132;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)(0, 0, sub_10029E390, v90, 0, 0, 0, 0, 0, 0, v148, v91);
  swift_release(v90);
  (*(void (**)(char *, uint64_t))(v150 + 8))(v88, v92);
  sub_10001A630(&qword_100842CD0);
  if (qword_1008370C0 != -1)
    swift_once(&qword_1008370C0, sub_100297F78);
  v94 = v154;
  v95 = (void *)qword_1008429E8;
  *v154 = qword_1008429E8;
  v96 = *((_QWORD *)&v179 + 1);
  v97 = v95;
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(v96);
  v98 = v156;
  v99 = v159;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v156 + 104))(v94, enum case for Publishers.TimeGroupingStrategy.byTime<A>(_:), v159);
  v100 = (uint64_t)v149;
  v167(v149, 1, 1, v168);
  v101 = sub_1000A5F84(&qword_100842CD8, &qword_100842C28, (uint64_t)&protocol conformance descriptor for Publishers.HandleEvents<A>);
  v102 = v157;
  v103 = v152;
  v104 = v93;
  Publisher.collect<A>(_:options:)(v94, v100, v152, v169, v101, v166);
  v105 = sub_1000A5F84(&qword_100842CE0, &qword_100842C18, (uint64_t)&protocol conformance descriptor for Publishers.CollectByTime<A, B>);
  v106 = v153;
  v107 = v161;
  Publisher.map<A>(_:)(sub_100397AE8, 0, v161, &type metadata for RDStoreControllerNotificationCenter.CollectAndCoalescedChangedEntitiesWithInputCount, v105);
  (*(void (**)(char *, uint64_t))(v160 + 8))(v102, v107);
  sub_10000882C(v100, &qword_10083A970);
  (*(void (**)(_QWORD *, uint64_t))(v98 + 8))(v94, v99);
  (*(void (**)(char *, uint64_t))(v151 + 8))(v104, v103);
  v108 = v140;
  v176 = v140;
  v167((char *)v100, 1, 1, v168);
  v109 = sub_1000A5F84(&qword_100842CE8, &qword_100842C30, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v110 = v108;
  v111 = v162;
  v112 = v158;
  Publisher.receive<A>(on:options:)(&v176, v100, v158, v169, v109, v166);
  sub_10000882C(v100, &qword_10083A970);

  (*(void (**)(char *, uint64_t))(v155 + 8))(v106, v112);
  v113 = (_QWORD *)swift_allocObject(&unk_1007EC098, 40, 7);
  v114 = v145;
  v113[2] = v145;
  v113[3] = sub_100298D38;
  v113[4] = 0;
  sub_1000A5F84(&qword_100842CF0, &qword_100842C38, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v114);
  v115 = v173;
  v116 = v164;
  v117 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)(v173, sub_10029E3DC, v113, 0, 0, v164, v165);
  swift_release(v113);
  (*(void (**)(char *, uint64_t))(v163 + 8))(v111, v116);
  v118 = (uint64_t)v115 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_cancellables;
  swift_beginAccess((char *)v115 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_cancellables, &v176, 33, 0);
  AnyCancellable.store(in:)(v118);
  swift_endAccess(&v176);
  swift_release(v146);
  swift_release(v117);
  return (*(uint64_t (**)(char *, uint64_t))(v172 + 8))(v170, v171);
}

void sub_100296F40(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  unint64_t v19;
  __n128 v20;
  unint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  NSObject **v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v32 - v11;
  sub_1002972C4(0);
  v33 = a1;
  v13 = objc_msgSend(a1, "stringRepresentation");
  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v15 = v14;

  Date.init()(v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v12, 0, 1, v3);
  v17 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_userDefaults + 8);
  ObjectType = swift_getObjectType(*(_QWORD *)(v1
                                             + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_userDefaults));
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(ObjectType, v17);
  if (!v19)
    v19 = sub_1002B0C40((uint64_t)_swiftEmptyArrayStorage);
  v35 = v19;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v3) == 1)
  {
    sub_10000882C((uint64_t)v12, (uint64_t *)&unk_1008380D0);
    sub_1002CB4B0(v32, v15, (uint64_t)v10);
    swift_bridgeObjectRelease(v15);
    sub_10000882C((uint64_t)v10, (uint64_t *)&unk_1008380D0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v12, v3);
    v21 = v35;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v35);
    v34 = v21;
    v35 = 0x8000000000000000;
    sub_10028D17C((uint64_t)v6, v32, v15, isUniquelyReferenced_nonNull_native);
    v23 = v35;
    v35 = v34;
    swift_bridgeObjectRelease(v15);
    v20 = swift_bridgeObjectRelease(v23);
  }
  (*(void (**)(unint64_t, uint64_t, uint64_t, __n128))(v17 + 16))(v35, ObjectType, v17, v20);
  if (qword_1008370B8 != -1)
    swift_once(&qword_1008370B8, sub_1002942AC);
  v24 = type metadata accessor for Logger(0);
  sub_10001AAA8(v24, (uint64_t)qword_1008429D0);
  v25 = v33;
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v28 = 138543362;
    v35 = (unint64_t)v25;
    v30 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
    *v29 = v25;

    _os_log_impl((void *)&_mh_execute_header, v26, v27, "📔 RDSyncActivityEngine - logged sign in event for {accountID: %{public}@}", v28, 0xCu);
    v31 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v29, 1, v31);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {

    v26 = v25;
  }

}

void sub_1002972C4(char a1)
{
  uint64_t v1;
  char v2;
  id v3;
  _QWORD v4[3];
  uint64_t v5;
  char v6;

  v2 = a1 & 1;
  v3 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_storeController), "newBackgroundContextWithAuthor:", RDSyncActivityNotificationEngineAuthor);
  v4[2] = v3;
  v5 = v1;
  v6 = v2;
  NSManagedObjectContext.rem_performAndWait<A>(_:)(&type metadata for (), sub_10029E670, v4, &type metadata for () + 1);

}

void sub_100297568(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  NSObject **v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;

  v2 = v1;
  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(a1, "stringRepresentation");
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  v11 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_userDefaults + 8);
  ObjectType = swift_getObjectType(*(_QWORD *)(v2
                                             + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_userDefaults));
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(ObjectType, v11);
  if (!v13)
    v13 = sub_1002B0C40((uint64_t)_swiftEmptyArrayStorage);
  v23 = v13;
  sub_1002CB4B0(v8, v10, (uint64_t)v6);
  sub_10000882C((uint64_t)v6, (uint64_t *)&unk_1008380D0);
  (*(void (**)(NSObject *, uint64_t, uint64_t))(v11 + 16))(v23, ObjectType, v11);
  swift_bridgeObjectRelease(v10);
  if (qword_1008370B8 != -1)
    swift_once(&qword_1008370B8, sub_1002942AC);
  v14 = type metadata accessor for Logger(0);
  sub_10001AAA8(v14, (uint64_t)qword_1008429D0);
  v15 = a1;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v18 = 138543362;
    v23 = v15;
    v20 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
    *v19 = v15;

    _os_log_impl((void *)&_mh_execute_header, v16, v17, "📔 RDSyncActivityEngine - logged sign out event for {accountID: %{public}@}", v18, 0xCu);
    v21 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v19, 1, v21);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {

    v16 = v15;
  }

  sub_1002972C4(1);
}

uint64_t sub_1002977F0()
{
  return sub_10029782C((uint64_t)&unk_1006B26D8, (uint64_t)&unk_1006B2700);
}

uint64_t sub_100297804()
{
  return sub_10029782C((uint64_t)&unk_1006B2690, (uint64_t)&unk_1006B26B8);
}

uint64_t sub_100297818()
{
  return sub_10029782C((uint64_t)&unk_1006B2648, (uint64_t)&unk_1006B2670);
}

uint64_t sub_10029782C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_100297894(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t KeyPath;
  uint64_t v12;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v4 = v1;
  v14[2] = a1;
  v5 = sub_10001A630(&qword_100838108);
  NSManagedObjectContext.rem_performAndWait<A>(_:)(&v15, sub_10029E550, v14, v5);
  if (!v2)
  {
    v3 = v15;
    if (qword_1008370B8 != -1)
      swift_once(&qword_1008370B8, sub_1002942AC);
    v6 = type metadata accessor for Logger(0);
    sub_10001AAA8(v6, (uint64_t)qword_1008429D0);
    v7 = swift_bridgeObjectRetain(v3);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v10 = 134349056;
      v15 = *(_QWORD *)(v3 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16);
      swift_bridgeObjectRelease(v3);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "📔 RDSyncActivityEngine: Fetch Success - Consumed entries: %{public}ld", v10, 0xCu);
      swift_slowDealloc(v10, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease(v3);
    }
    if (*(_BYTE *)(v4
                  + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_appliedEngineConfiguration
                  + 32) == 1)
    {
      KeyPath = swift_getKeyPath(&unk_1006B26D8);
      v12 = swift_getKeyPath(&unk_1006B2700);
      v15 = v3;
      swift_bridgeObjectRetain(v3);
      swift_retain(v4);
      static Published.subscript.setter(&v15, v4, KeyPath, v12);
    }
  }
  return v3;
}

void sub_100297A74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t KeyPath;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53[24];
  char v54[24];
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;

  v3 = v2;
  v51 = a2;
  v5 = sub_10001A630(&qword_100842CF8);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (void **)((char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v11 = (void **)((char *)&v46 - v10);
  if (qword_1008370B8 != -1)
    swift_once(&qword_1008370B8, sub_1002942AC);
  v50 = v5;
  v12 = type metadata accessor for Logger(0);
  v49 = sub_10001AAA8(v12, (uint64_t)qword_1008429D0);
  v13 = Logger.logObject.getter(v49);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "📔 RDSyncActivityEngine: Deleting journal entries", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  v17 = *(_QWORD *)(a1 + 16);
  if (v17)
  {
    v48 = v2;
    v55 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v17);
    v18 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v52 = *(_QWORD *)(v6 + 72);
    v19 = v50;
    do
    {
      sub_100008868(v18, (uint64_t)v11, &qword_100842CF8);
      v20 = *(int *)(v19 + 48);
      v21 = (uint64_t)v9 + v20;
      v22 = *v11;
      *v9 = *v11;
      sub_100238E28((uint64_t)v11 + v20, (uint64_t)v9 + v20);
      v23 = v22;
      sub_10001C744(v21, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);
      v24 = sub_10000882C((uint64_t)v11, &qword_100842CF8);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v24);
      v25 = v55[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v25);
      v26 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v23);
      v16 = specialized ContiguousArray._endMutation()(v26);
      v18 += v52;
      --v17;
    }
    while (v17);
    v27 = (uint64_t)v55;
    v3 = v48;
  }
  else
  {
    v27 = (uint64_t)_swiftEmptyArrayStorage;
  }
  v57 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v27 >> 62)
  {
    if (v27 < 0)
      v39 = v27;
    else
      v39 = v27 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v27);
    v40 = _CocoaArrayWrapper.endIndex.getter(v39);
    swift_bridgeObjectRelease(v27);
    if (v40)
    {
LABEL_12:
      __chkstk_darwin(v16);
      v28 = v51;
      *(&v46 - 4) = v27;
      *(&v46 - 3) = v28;
      *(&v46 - 2) = (uint64_t)&v57;
      NSManagedObjectContext.rem_performAndWait<A>(_:)(&type metadata for (), sub_10029E408, &v46 - 6, &type metadata for () + 1);
      swift_bridgeObjectRelease(v27);
      if (v3)
      {
        swift_bridgeObjectRelease(v57);
      }
      else
      {
        v30 = Logger.logObject.getter(v29);
        v31 = static os_log_type_t.default.getter(v30);
        if (os_log_type_enabled(v30, v31))
        {
          v32 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v32 = 134217984;
          swift_beginAccess(&v57, v53, 0, 0);
          v33 = v57;
          if ((unint64_t)v57 >> 62)
          {
            if (v57 < 0)
              v45 = v57;
            else
              v45 = v57 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v57);
            v34 = _CocoaArrayWrapper.endIndex.getter(v45);
            swift_bridgeObjectRelease(v33);
          }
          else
          {
            v34 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          v55 = (_QWORD *)v34;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
          _os_log_impl((void *)&_mh_execute_header, v30, v31, "📔 RDSyncActivityEngine: Deleted journal entries: %ld", v32, 0xCu);
          swift_slowDealloc(v32, -1, -1);
        }

        v35 = v47;
        if (*(_BYTE *)(v47
                      + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_appliedEngineConfiguration
                      + 32) == 1)
        {
          swift_beginAccess(&v57, v54, 0, 0);
          v36 = (_QWORD *)v57;
          KeyPath = swift_getKeyPath(&unk_1006B2648);
          v38 = swift_getKeyPath(&unk_1006B2670);
          v55 = v36;
          swift_bridgeObjectRetain(v36);
          swift_retain(v35);
          static Published.subscript.setter(&v55, v35, KeyPath, v38);
        }
        swift_beginAccess(&v57, &v55, 0, 0);
      }
      return;
    }
  }
  else if (*(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_12;
  }
  swift_bridgeObjectRelease(v27);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.default.getter(v42);
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "📔 RDSyncActivityEngine: Up-to-date! No journal entries to delete", v44, 2u);
    swift_slowDealloc(v44, -1, -1);
  }

}

uint64_t sub_100297F78()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v20 = *(_QWORD *)(v0 - 8);
  v21 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS.QoSClass(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.utility(_:), v9);
  v13 = static OS_dispatch_queue.global(qos:)(v12);
  v14 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  static DispatchQoS.unspecified.getter(v14);
  v22 = _swiftEmptyArrayStorage;
  v15 = sub_10009FC50((unint64_t *)&qword_10083A990, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = sub_10001A630((uint64_t *)&unk_10083DBD0);
  v17 = sub_1000A5F84((unint64_t *)&qword_10083A9A0, (uint64_t *)&unk_10083DBD0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v16, v17, v3, v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v2, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v21);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000005BLL, 0x80000001006FEC10, v8, v5, v2, v13);
  qword_1008429E8 = result;
  return result;
}

uint64_t sub_1002981C0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1006B2600);
  v5 = swift_getKeyPath(&unk_1006B2628);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10029823C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1006B2600);
  v5 = swift_getKeyPath(&unk_1006B2628);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

void sub_1002982AC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27[16];
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;

  v28 = 258;
  v29 = a1;
  v6 = sub_10001A630(&qword_10083DFA8);
  NSManagedObjectContext.rem_performAndWait<A>(_:)(&v32, sub_100268FAC, v27, v6);
  if (!v3)
  {
    v7 = (uint64_t)v32;
    v8 = sub_1000A5F84(&qword_100842D38, &qword_10083DFA8, (uint64_t)&protocol conformance descriptor for [A]);
    v9 = Sequence.mapToSet<A>(_:)(sub_100298660, 0, v6, &type metadata for String, v8, &protocol witness table for String);
    swift_bridgeObjectRelease(v7);
    v10 = *(_QWORD *)(a2 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_userDefaults + 8);
    ObjectType = swift_getObjectType(*(_QWORD *)(a2
                                               + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_userDefaults));
    v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(ObjectType, v10);
    if (!v12)
      v12 = sub_1002B0C40((uint64_t)_swiftEmptyArrayStorage);
    v13 = sub_10011E910(v12);
    if (*(_QWORD *)(v9 + 16) <= *(_QWORD *)(v13 + 16) >> 3)
    {
      v32 = (_QWORD *)v13;
      sub_10059B880(v9);
      swift_bridgeObjectRelease(v9);
      v14 = v32;
    }
    else
    {
      v14 = sub_100215890(v9, v13);
      swift_bridgeObjectRelease(v9);
    }
    swift_retain(a2);
    sub_10029CFD8((uint64_t)v14, a2);
    swift_release(a2);
    if (v14[2])
    {
      if (qword_1008370B8 != -1)
        swift_once(&qword_1008370B8, sub_1002942AC);
      v15 = type metadata accessor for Logger(0);
      sub_10001AAA8(v15, (uint64_t)qword_1008429D0);
      v16 = swift_bridgeObjectRetain(v14);
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.default.getter(v17);
      if (os_log_type_enabled(v17, v18))
      {
        v19 = swift_slowAlloc(22, -1);
        v26 = swift_slowAlloc(64, -1);
        v32 = (_QWORD *)v26;
        *(_DWORD *)v19 = 136446466;
        if ((a3 & 1) != 0)
          v20 = 0x4574754F6E676973;
        else
          v20 = 0x76456E496E676973;
        if ((a3 & 1) != 0)
          v21 = 0xEC000000746E6576;
        else
          v21 = 0xEB00000000746E65;
        v30 = sub_10001A820(v20, v21, (uint64_t *)&v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
        swift_bridgeObjectRelease(v21);
        *(_WORD *)(v19 + 12) = 2082;
        v22 = swift_bridgeObjectRetain(v14);
        v23 = Set.description.getter(v22, &type metadata for String, &protocol witness table for String);
        v25 = v24;
        swift_bridgeObjectRelease(v14);
        v30 = sub_10001A820(v23, v25, (uint64_t *)&v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
        swift_bridgeObjectRelease_n(v14, 2);
        swift_bridgeObjectRelease(v25);
        swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v26, -1, -1);
        swift_slowDealloc(v19, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v14, 2);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v14);
    }
  }
}

void sub_100298660(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*a1, "stringRepresentation");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

void sub_1002986C4(uint64_t a1, uint64_t *a2)
{
  sub_1002986EC(a1, a2, "📔 RDSyncActivityEngine: Account Signed In {identifier: %{public}@, time: %{public}s}", (void (*)(void))sub_100296F40);
}

void sub_1002986D8(uint64_t a1, uint64_t *a2)
{
  sub_1002986EC(a1, a2, "📔 RDSyncActivityEngine: Account Signed Out {identifier: %{public}@, time: %{public}s}", (void (*)(void))sub_100297568);
}

void sub_1002986EC(uint64_t a1, uint64_t *a2, const char *a3, void (*a4)(void))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  unint64_t v21;
  int64_t v22;
  void *context;
  uint64_t v24;
  _QWORD v25[3];

  v7 = *a2;
  context = objc_autoreleasePoolPush();
  v24 = v7 + 56;
  v8 = 1 << *(_BYTE *)(v7 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v7 + 56);
  v11 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain(v7);
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v12 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v12++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v12 >= v11)
      goto LABEL_26;
    v21 = *(_QWORD *)(v24 + 8 * v12);
    if (!v21)
      break;
LABEL_21:
    v10 = (v21 - 1) & v21;
    v14 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_5:
    v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 24 * v14);
    v16 = (void *)v15[1];
    v17 = (void *)v15[2];
    v25[0] = *v15;
    v25[1] = v16;
    v25[2] = v17;
    v18 = v16;
    v19 = v17;
    sub_1002988D0((uint64_t)v25, a1, a3, a4);

  }
  v22 = v12 + 1;
  if (v12 + 1 >= v11)
    goto LABEL_26;
  v21 = *(_QWORD *)(v24 + 8 * v22);
  if (v21)
    goto LABEL_20;
  v22 = v12 + 2;
  if (v12 + 2 >= v11)
    goto LABEL_26;
  v21 = *(_QWORD *)(v24 + 8 * v22);
  if (v21)
    goto LABEL_20;
  v22 = v12 + 3;
  if (v12 + 3 >= v11)
    goto LABEL_26;
  v21 = *(_QWORD *)(v24 + 8 * v22);
  if (v21)
    goto LABEL_20;
  v22 = v12 + 4;
  if (v12 + 4 >= v11)
    goto LABEL_26;
  v21 = *(_QWORD *)(v24 + 8 * v22);
  if (v21)
    goto LABEL_20;
  v22 = v12 + 5;
  if (v12 + 5 >= v11)
  {
LABEL_26:
    swift_release(v7);
    objc_autoreleasePoolPop(context);
    return;
  }
  v21 = *(_QWORD *)(v24 + 8 * v22);
  if (v21)
  {
LABEL_20:
    v12 = v22;
    goto LABEL_21;
  }
  while (1)
  {
    v12 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v12 >= v11)
      goto LABEL_26;
    v21 = *(_QWORD *)(v24 + 8 * v12);
    ++v22;
    if (v21)
      goto LABEL_21;
  }
LABEL_28:
  __break(1u);
}

void sub_1002988D0(uint64_t a1, uint64_t a2, const char *a3, void (*a4)(void))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  os_log_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  os_log_t v36;
  uint64_t v37;
  void (*v38)(void);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v42 = a3;
  v43 = a2;
  v7 = type metadata accessor for Date(0);
  v40 = *(_QWORD *)(v7 - 8);
  v41 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void **)(a1 + 8);
  v10 = *(void **)(a1 + 16);
  if (qword_1008370B8 != -1)
    swift_once(&qword_1008370B8, sub_1002942AC);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_1008429D0);
  v13 = v11;
  v14 = v10;
  v15 = v13;
  v16 = v14;
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  v19 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    v20 = swift_slowAlloc(22, -1);
    v36 = v17;
    v21 = v20;
    v22 = (_QWORD *)swift_slowAlloc(8, -1);
    v37 = swift_slowAlloc(32, -1);
    v46 = v37;
    *(_DWORD *)v21 = 138543618;
    HIDWORD(v35) = v19;
    v44 = (uint64_t)v16;
    v39 = v4;
    v23 = v16;
    v38 = a4;
    v24 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
    *v22 = v16;

    *(_WORD *)(v21 + 12) = 2082;
    v26 = Date.init()(v25);
    v27 = Date.description.getter(v26);
    v29 = v28;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v9, v41);
    v44 = sub_10001A820(v27, v29, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
    v30 = v29;
    a4 = v38;
    swift_bridgeObjectRelease(v30);
    v31 = v36;
    _os_log_impl((void *)&_mh_execute_header, v36, BYTE4(v35), v42, (uint8_t *)v21, 0x16u);
    v32 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v22, 1, v32);
    swift_slowDealloc(v22, -1, -1);
    v33 = v37;
    swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {

  }
  v34 = v16;
  a4();

}

void sub_100298B9C(uint64_t a1)
{
  sub_100298C64(a1, "📔 RDSyncActivityEngine: Received request consume from engine start");
}

uint64_t sub_100298BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  char v7;
  _QWORD v9[3];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, (char *)v9 + 1, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    KeyPath = swift_getKeyPath(&unk_1006B2600);
    v6 = swift_getKeyPath(&unk_1006B2628);
    static Published.subscript.getter(v9, v4, KeyPath, v6);
    swift_release(KeyPath);
    swift_release(v6);
    swift_release(v4);
    v7 = LOBYTE(v9[0]) ^ 1;
  }
  else
  {
    v7 = 1;
  }
  return v7 & 1;
}

void sub_100298C58(uint64_t a1)
{
  sub_100298C64(a1, "📔 RDSyncActivityEngine: received request to consume from storeDidChange");
}

void sub_100298C64(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  NSObject *oslog;

  if (qword_1008370B8 != -1)
    swift_once(&qword_1008370B8, sub_1002942AC);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001AAA8(v3, (uint64_t)qword_1008429D0);
  oslog = Logger.logObject.getter(v4);
  v5 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v5, a2, v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

}

void sub_100298D38(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  sub_100298D7C(a1);
  objc_autoreleasePoolPop(v2);
}

void sub_100298D7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  _QWORD v21[4];
  uint64_t v22;
  _QWORD v23[3];
  _BYTE v24[8];
  uint64_t v25;

  if (qword_1008370B8 != -1)
    swift_once(&qword_1008370B8, sub_1002942AC);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001AAA8(v3, (uint64_t)qword_1008429D0);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "📔 RDSyncActivityEngine - Starting journal consumption", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_storeController), "newBackgroundContextWithAuthor:", RDSyncActivityNotificationEngineAuthor);
  v21[2] = a1;
  v21[3] = __chkstk_darwin(v8);
  NSManagedObjectContext.rem_performAndWait<A>(_:)(&type metadata for (), sub_10029E3F0, v21, &type metadata for () + 1);
  if (v1)
  {

    swift_errorRetain(v1);
    v9 = swift_errorRetain(v1);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v25 = v13;
      *(_DWORD *)v12 = 136446210;
      swift_getErrorValue(v1, v24, v23);
      v14 = Error.rem_errorDescription.getter(v23[1], v23[2]);
      v16 = v15;
      v22 = sub_10001A820(v14, v15, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, v23);
      swift_bridgeObjectRelease(v16);
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "📔 RDSyncActivityEngine - Unable to consume journal updates {error: %{public}s}", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

      swift_errorRelease(v1);
    }
    else
    {
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      swift_errorRelease(v1);

    }
  }
  else
  {

    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "📔 RDSyncActivityEngine - Finished journal consumption", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

  }
}

void sub_1002990BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;

  v4 = sub_100297894(a2);
  if (!v2)
  {
    v5 = v4;
    if (*(_QWORD *)(v4 + 16))
    {
      v6 = sub_100299218(v4);
      sub_1002994FC((uint64_t)v6, (uint64_t)sub_100299430, 0);
      swift_bridgeObjectRelease(v6);
      sub_100297A74(v5, a2);
      v8 = v7;
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(v8);
    }
    else
    {
      swift_bridgeObjectRelease(v4);
      if (qword_1008370B8 != -1)
        swift_once(&qword_1008370B8, sub_1002942AC);
      v9 = type metadata accessor for Logger(0);
      v10 = sub_10001AAA8(v9, (uint64_t)qword_1008429D0);
      v11 = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.default.getter(v11);
      if (os_log_type_enabled(v11, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "📔 RDSyncActivityEngine: Skipping journal entry processing, no changes to process", v13, 2u);
        swift_slowDealloc(v13, -1, -1);
      }

    }
  }
}

void *sub_100299218(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  void *v17;
  uint64_t v18;

  v2 = v1;
  if (qword_1008370B8 != -1)
    swift_once(&qword_1008370B8, sub_1002942AC);
  v4 = type metadata accessor for Logger(0);
  sub_10001AAA8(v4, (uint64_t)qword_1008429D0);
  v5 = swift_bridgeObjectRetain(a1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v8 = 134217984;
    v17 = *(void **)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
    swift_bridgeObjectRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "📔 RDSyncActivityEngine: Processing entries - %ld", v8, 0xCu);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease(a1);
  }
  v9 = &_swiftEmptyDictionarySingleton;
  v17 = &_swiftEmptyDictionarySingleton;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v11 = *(_QWORD *)(sub_10001A630(&qword_100842CF8) - 8);
    v12 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v13 = *(_QWORD *)(v11 + 72);
    swift_bridgeObjectRetain(a1);
    do
    {
      sub_10029A7C4((uint64_t *)&v17, v12);
      v12 += v13;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease(a1);
    v9 = v17;
  }
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_appliedEngineConfiguration + 32) & 1) != 0)
  {
    KeyPath = swift_getKeyPath(&unk_1006B2690);
    v15 = swift_getKeyPath(&unk_1006B26B8);
    v17 = v9;
    swift_bridgeObjectRetain(v9);
    swift_retain(v2);
    static Published.subscript.setter(&v17, v2, KeyPath, v15);
  }
  return v9;
}

void sub_100299430()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  if (qword_1008370B8 != -1)
    swift_once(&qword_1008370B8, sub_1002942AC);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008429D0);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "📔 RDSyncActivityEngine: Notifications posted successfully", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
  }

}

uint64_t sub_1002994FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  dispatch_group_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  dispatch_group_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD aBlock[5];
  uint64_t v28;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = dispatch_group_create();
  v24 = v13;
  v25 = v3;
  sub_10029D340(a1, (void (*)(uint64_t, uint64_t, _BYTE *))sub_10029E46C);
  v14 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_scheduler);
  v15 = swift_allocObject(&unk_1007EC0C0, 32, 7);
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  aBlock[4] = sub_10029E4A0;
  v28 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007EC0D8;
  v16 = _Block_copy(aBlock);
  v17 = sub_1000E51CC(a2, a3);
  static DispatchQoS.unspecified.getter(v17);
  v26 = _swiftEmptyArrayStorage;
  v18 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_10001A630((uint64_t *)&unk_100838000);
  v20 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v19, v20, v7, v18);
  OS_dispatch_group.notify(qos:flags:queue:execute:)(v12, v9, v14, v16);

  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v22);
  return swift_release(v28);
}

void sub_100299724(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[4];
  _QWORD *v29;
  void *v30;
  void *v31;

  v3 = v2;
  if (qword_1008370B8 != -1)
    goto LABEL_16;
  while (1)
  {
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10001AAA8(v6, (uint64_t)qword_1008429D0);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "📔 RDSyncActivityEngine: Starting Fetch", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    v11 = sub_10029D844();
    v12 = type metadata accessor for REMCKSharedEntitySyncActivity();
    v13 = NSManagedObjectContext.fetch<A>(_:)(v11, v12);
    if (v3)
    {

      return;
    }
    v14 = v13;
    v31 = &_swiftEmptyDictionarySingleton;
    if ((unint64_t)v13 >> 62)
      break;
    v15 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v13);
    if (!v15)
      goto LABEL_21;
LABEL_8:
    v29 = a2;
    v16 = 4;
    while (1)
    {
      v17 = (v14 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16 - 4, v14)
          : *(id *)(v14 + 8 * v16);
      v18 = v17;
      a2 = (_QWORD *)(v16 - 3);
      if (__OFADD__(v16 - 4, 1))
        break;
      v30 = v17;
      sub_100299A34((uint64_t)&v31, &v30);
      v3 = 0;

      ++v16;
      if (a2 == (_QWORD *)v15)
      {
        swift_bridgeObjectRelease_n(v14, 2);
        v19 = v31;
        a2 = v29;
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_16:
    swift_once(&qword_1008370B8, sub_1002942AC);
  }
  if (v13 < 0)
    v20 = v13;
  else
    v20 = v13 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v13);
  v15 = _CocoaArrayWrapper.endIndex.getter(v20);
  if (v15)
    goto LABEL_8;
LABEL_21:
  swift_bridgeObjectRelease_n(v14, 2);
  v19 = &_swiftEmptyDictionarySingleton;
LABEL_22:
  v21 = swift_bridgeObjectRetain(v19);
  v22 = sub_1001EA3A8(v21);
  swift_bridgeObjectRelease(v19);
  __chkstk_darwin(v23);
  v28[2] = v22;
  v28[3] = a1;
  v24 = sub_10001A630(&qword_100842D10);
  NSManagedObjectContext.rem_performAndWait<A>(_:)(&v31, sub_10029E5B0, v28, v24);
  swift_release(v22);
  v25 = (uint64_t)v31;
  swift_bridgeObjectRetain(v31);
  sub_10029D508((unint64_t)_swiftEmptyArrayStorage, (uint64_t)v19, v25);
  v27 = v26;
  swift_bridgeObjectRelease(v19);

  swift_bridgeObjectRelease_n(v25, 2);
  *a2 = v27;
}

void sub_100299A34(uint64_t a1, void **a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *a2;
  v7 = sub_10020DDC0();
  if (v7)
  {
    v8 = v7;
    v9 = objc_msgSend(v6, "objectID");
    v10 = v8;
    sub_1001913CC((uint64_t)v10, (uint64_t)v9);

  }
  else
  {
    if (qword_1008370B8 != -1)
      swift_once(&qword_1008370B8, sub_1002942AC);
    v11 = type metadata accessor for Logger(0);
    sub_10001AAA8(v11, (uint64_t)qword_1008429D0);
    v12 = v6;
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v28 = v16;
      *(_DWORD *)v15 = 136446210;
      v17 = objc_msgSend(v12, "uuidForChangeTracking");
      v25 = v16;
      if (v17)
      {
        v18 = v17;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v17);

        v19 = type metadata accessor for UUID(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v5, 0, 1, v19);
      }
      else
      {
        v20 = type metadata accessor for UUID(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v5, 1, 1, v20);
      }
      v21 = Optional.descriptionOrNil.getter(v3);
      v23 = v22;
      sub_10000882C((uint64_t)v5, (uint64_t *)&unk_100839C80);
      v26 = sub_10001A820(v21, v23, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);

      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "📔 RDSyncActivityEngine: Unable to make activity object for journal entry {identifier: %{public}s}", v15, 0xCu);
      v24 = v25;
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v15, -1, -1);

    }
    else
    {

    }
  }
}

void sub_100299CF4(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *updated;
  uint64_t v12;
  char *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  id v41;
  id v42;
  unint64_t v43;
  unint64_t v44;
  id v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t *v48;
  _QWORD *v49;
  _QWORD *v50;

  v48 = a1;
  v5 = sub_10001A630(&qword_100842CF8);
  v47 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v49 = (id *)((char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __chkstk_darwin(v6);
  v46 = (id *)((char *)&v45 - v9);
  __chkstk_darwin(v8);
  v50 = (id *)((char *)&v45 - v10);
  updated = (int *)type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  __chkstk_darwin(updated);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(void **)a2;
  v15 = *(void **)(a2 + 8);
  v16 = v14;
  v17 = v15;
  v18 = objc_msgSend(v17, "ckIdentifier");
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  if (*(_QWORD *)(a3 + 16) && (v22 = sub_10001A6DC(v19, v21), (v23 & 1) != 0))
  {
    v45 = *(id *)(*(_QWORD *)(a3 + 56) + 8 * v22);
    v24 = objc_msgSend(v17, "activityDate", swift_bridgeObjectRelease(v21).n128_f64[0]);
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v24);

    v25 = objc_msgSend(v17, "activityType");
    v26 = objc_msgSend(v17, "authorUserRecordIDString");
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v29 = v28;

    *(_QWORD *)&v13[updated[5]] = v25;
    v30 = (uint64_t *)&v13[updated[6]];
    *v30 = v27;
    v30[1] = v29;
    v31 = v45;
    *(_QWORD *)&v13[updated[7]] = v45;
    v32 = *(int *)(v5 + 48);
    v33 = v50;
    v34 = (uint64_t)v50 + v32;
    *v50 = v16;
    sub_100238E28((uint64_t)v13, (uint64_t)v33 + v32);
    v35 = *(int *)(v5 + 48);
    v36 = v46;
    v37 = (uint64_t)v46 + v35;
    *v46 = v16;
    sub_100238E28(v34, (uint64_t)v36 + v35);
    v38 = (uint64_t)v49 + *(int *)(v5 + 48);
    *v49 = v16;
    sub_100238EF0(v37, v38);
    v39 = v48;
    v40 = *v48;
    v41 = v16;
    v42 = v31;
    if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) == 0)
      v40 = sub_1002CA568(0, *(_QWORD *)(v40 + 16) + 1, 1, v40);
    v44 = *(_QWORD *)(v40 + 16);
    v43 = *(_QWORD *)(v40 + 24);
    if (v44 >= v43 >> 1)
      v40 = sub_1002CA568(v43 > 1, v44 + 1, 1, v40);
    *(_QWORD *)(v40 + 16) = v44 + 1;
    sub_10029E5C8((uint64_t)v49, v40+ ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))+ *(_QWORD *)(v47 + 72) * v44);

    *v39 = v40;
    sub_10000882C((uint64_t)v50, &qword_100842CF8);
    sub_10001C744((uint64_t)v13, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);
  }
  else
  {

    swift_bridgeObjectRelease(v21);
  }
}

void sub_10029A02C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  id v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD **v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t KeyPath;
  _QWORD *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *inited;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  Class isa;
  uint64_t v42;
  _QWORD **v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  id v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  id v57;
  _BYTE v58[40];
  _BYTE v59[56];
  _QWORD *v60;

  v4 = v3;
  v8 = (id)_s10PredicatesOMa(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
  {
LABEL_26:
    if (a1 < 0)
      v49 = a1;
    else
      v49 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v11 = _CocoaArrayWrapper.endIndex.getter(v49);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v12 = _swiftEmptyArrayStorage;
  v53 = (_QWORD *)a3;
  v55 = a2;
  v56 = v4;
  if (v11)
  {
    v60 = _swiftEmptyArrayStorage;
    v13 = &v60;
    sub_1001C1B0C(0, v11 & ~(v11 >> 63), 0);
    if (v11 < 0)
    {
      __break(1u);
      goto LABEL_31;
    }
    v52 = v8;
    v54 = v10;
    v14 = 0;
    v12 = v60;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, a1);
      else
        v15 = *(id *)(a1 + 8 * v14 + 32);
      v16 = v15;
      v17 = objc_msgSend(v15, "ckIdentifier", v52);
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v20 = v19;

      v60 = v12;
      v22 = v12[2];
      v21 = v12[3];
      if (v22 >= v21 >> 1)
      {
        sub_1001C1B0C(v21 > 1, v22 + 1, 1);
        v12 = v60;
      }
      ++v14;
      v12[2] = v22 + 1;
      v23 = &v12[2 * v22];
      v23[4] = v18;
      v23[5] = v20;
    }
    while (v11 != v14);
    v10 = v54;
    v8 = v52;
  }
  KeyPath = swift_getKeyPath(&unk_1006B2730);
  v25 = sub_1001DFA94((uint64_t)v12);
  swift_bridgeObjectRelease(v12);
  v26 = (void *)sub_10033E38C(KeyPath, (uint64_t)v25);
  swift_release(KeyPath);
  *(_QWORD *)v10 = v26;
  v10[8] = 0;
  swift_storeEnumTagMultiPayload(v10, v8, 1);
  v8 = v26;
  sub_10000D2C0();
  v28 = v27;
  v29 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = (_QWORD *)swift_initStackObject(v29, v59);
  *((_OWORD *)inited + 1) = xmmword_1006AAD80;
  inited[4] = swift_getKeyPath(&unk_1006B2760);
  inited[5] = swift_getKeyPath(&unk_1006B2730);
  v31 = swift_getKeyPath(&unk_1006B2798);
  inited[6] = v31;
  v60 = inited;
  specialized Array._endMutation()(v31);
  v32 = v60;
  v33 = (_QWORD *)swift_initStackObject(v29, v58);
  *((_OWORD *)v33 + 1) = xmmword_1006A7330;
  v34 = swift_getKeyPath(&unk_1006B27C8);
  v33[4] = v34;
  v60 = v33;
  specialized Array._endMutation()(v34);
  v35 = v60;
  a1 = sub_100358798((uint64_t)v32, (uint64_t)v60, 0, (uint64_t)v28);
  swift_bridgeObjectRelease(v35);
  swift_bridgeObjectRelease(v32);

  v36 = (_QWORD *)swift_allocObject(v29, 48, 7);
  *((_OWORD *)v36 + 1) = xmmword_1006A8550;
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  v37 = swift_getKeyPath(&unk_1006B2800);
  v36[4] = NSSortDescriptor.init<A, B>(keyPath:ascending:)(v37, 0);
  v38 = swift_getKeyPath(&unk_1006B2760);
  v39 = NSSortDescriptor.init<A, B>(keyPath:ascending:)(v38, 1);
  v36[5] = v39;
  v60 = v36;
  specialized Array._endMutation()(v39);
  v40 = v60;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend((id)a1, "setSortDescriptors:", isa, swift_bridgeObjectRelease(v40).n128_f64[0]);

  v42 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v43 = (_QWORD **)v56;
  v44 = NSManagedObjectContext.fetch<A>(_:)(a1, v42);
  v13 = v43;
  if (v43)
  {
    sub_10001C744((uint64_t)v10, _s10PredicatesOMa);

    return;
  }
  a2 = v44;
  v60 = &_swiftEmptyDictionarySingleton;
  if (!(v44 >> 62))
  {
    a3 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v44);
    if (a3)
      goto LABEL_17;
LABEL_35:

    swift_bridgeObjectRelease(a2);
    v48 = &_swiftEmptyDictionarySingleton;
LABEL_36:

    sub_10001C744((uint64_t)v10, _s10PredicatesOMa);
    swift_bridgeObjectRelease(a2);
    *v53 = v48;
    return;
  }
LABEL_31:
  if (a2 < 0)
    v50 = a2;
  else
    v50 = a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  a3 = _CocoaArrayWrapper.endIndex.getter(v50);
  if (!a3)
    goto LABEL_35;
LABEL_17:
  v54 = v10;
  v4 = a2 & 0xC000000000000001;
  v45 = 4;
  while (1)
  {
    if (v4)
      v46 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v45 - 4, a2);
    else
      v46 = (char *)*(id *)(a2 + 8 * v45);
    v10 = v46;
    v47 = v45 - 3;
    if (__OFADD__(v45 - 4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    v57 = v46;
    sub_10029A53C(&v60, &v57);
    if (v13)
      break;
    v13 = 0;

    ++v45;
    if (v47 == a3)
    {

      swift_bridgeObjectRelease(a2);
      v48 = v60;
      v10 = v54;
      goto LABEL_36;
    }
  }
  v51 = v60;
  swift_bridgeObjectRelease(a2);

  swift_bridgeObjectRelease(v51);
  __break(1u);
}

void sub_10029A53C(_QWORD *a1, id *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *a2;
  v4 = objc_msgSend(*a2, "ckIdentifier");
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

    v9 = v3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
    v26 = *a1;
    *a1 = 0x8000000000000000;
    sub_10028B870((uint64_t)v9, v6, v8, isUniquelyReferenced_nonNull_native);
    v11 = *a1;
    *a1 = v26;
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v11);
  }
  else
  {
    if (qword_1008370B8 != -1)
      swift_once(&qword_1008370B8, sub_1002942AC);
    v12 = type metadata accessor for Logger(0);
    sub_10001AAA8(v12, (uint64_t)qword_1008429D0);
    v13 = v3;
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v26 = v17;
      *(_DWORD *)v16 = 136446210;
      v18 = objc_msgSend(v13, "remObjectID");
      if (v18)
      {
        v19 = v18;
        v20 = objc_msgSend(v18, "description");

        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        v23 = v22;

      }
      else
      {
        v23 = 0xE300000000000000;
        v21 = 7104878;
      }
      v24 = sub_10001A820(v21, v23, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);

      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "📔 RDSyncActivityEngine: Unable to get ckIdentifier for reminder {identifier: %{public}s}", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_10029A7C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t updated;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  id v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  _UNKNOWN **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _UNKNOWN **v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  ValueMetadata *v84;
  _UNKNOWN **v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  os_log_type_t v94;
  const char *v95;
  const char *v96;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102[3];
  ValueMetadata *v103;
  _UNKNOWN **v104;

  v4 = sub_10001A630(&qword_100842CF8);
  __chkstk_darwin(v4);
  v6 = (char *)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  v98 = *(_QWORD *)(updated - 8);
  v8 = __chkstk_darwin(updated);
  v10 = (char *)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v98 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v98 - v15;
  __chkstk_darwin(v14);
  v17 = *(int *)(v4 + 48);
  v18 = (uint64_t)&v6[v17];
  v20 = (char *)&v98 - v19;
  sub_100238E28(a2 + v17, v18);
  sub_100238EF0(v18, (uint64_t)v20);
  if ((sub_10029B228((uint64_t)v20) & 1) != 0)
  {
    switch(*(_QWORD *)&v20[*(int *)(updated + 20)])
    {
      case 0:
      case 2:
      case 3:
      case 4:
        if (qword_1008370B8 != -1)
          swift_once(&qword_1008370B8, sub_1002942AC);
        v21 = type metadata accessor for Logger(0);
        sub_10001AAA8(v21, (uint64_t)qword_1008429D0);
        v22 = sub_100238E28((uint64_t)v20, (uint64_t)v16);
        v23 = Logger.logObject.getter(v22);
        v24 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v23, v24))
        {

          v39 = (uint64_t)v16;
          goto LABEL_32;
        }
        v25 = (uint8_t *)swift_slowAlloc(12, -1);
        v26 = swift_slowAlloc(32, -1);
        v102[0] = v26;
        *(_DWORD *)v25 = 136446210;
        v27 = *(_QWORD *)&v16[*(int *)(updated + 20)];
        v28 = 0x6E776F6E6B6E75;
        v29 = 0xE700000000000000;
        switch(v27)
        {
          case 0:
            break;
          case 1:
            v29 = 0xE300000000000000;
            v28 = 6579297;
            break;
          case 2:
            v93 = "titleMayHaveDirtyHashtag";
            goto LABEL_41;
          case 3:
            v93 = "notesMayHaveDirtyHashtag";
LABEL_41:
            v29 = (unint64_t)(v93 - 32) | 0x8000000000000000;
            v28 = 0xD000000000000018;
            break;
          case 4:
            v28 = 0xD00000000000001BLL;
            v29 = 0x80000001006FD190;
            break;
          case 5:
            v29 = 0xE800000000000000;
            v28 = 0x6574656C706D6F63;
            break;
          default:
            v28 = 0x206E776F6E6B6E75;
            v29 = 0xEF746C7561666564;
            break;
        }
        *(_QWORD *)&v99 = sub_10001A820(v28, v29, v102);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, (char *)&v99 + 8);
        swift_bridgeObjectRelease(v29);
        sub_10001C744((uint64_t)v16, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);
        v94 = v24;
        v95 = "📔 RDSyncActivityEngine: Received a journal entry with an unsupported activity type {type: %{public}s}";
        goto LABEL_52;
      case 1:
        v46 = sub_1002949C4();
        v48 = v47;
        v49 = *a1;
        if (*(_QWORD *)(*a1 + 16) && (v50 = sub_10001A6DC((uint64_t)v46, v47), (v51 & 1) != 0))
        {
          sub_100018618(*(_QWORD *)(v49 + 56) + 40 * v50, (uint64_t)&v99);
        }
        else
        {
          v101 = 0;
          v99 = 0u;
          v100 = 0u;
        }
        swift_bridgeObjectRelease(v48);
        if (*((_QWORD *)&v100 + 1))
        {
          sub_10001BCA8(&v99, (uint64_t)v102);
          v58 = (uint64_t)v103;
          v59 = v104;
          sub_10000A388(v102, (uint64_t)v103);
          v60 = ((uint64_t (*)(uint64_t, _UNKNOWN **))v59[1])(v58, v59);
          v61 = sub_10001A630(&qword_100844840);
          v62 = *(unsigned __int8 *)(v98 + 80);
          v63 = (v62 + 32) & ~v62;
          v64 = swift_allocObject(v61, v63 + *(_QWORD *)(v98 + 72), v62 | 7);
          *(_OWORD *)(v64 + 16) = xmmword_1006A3C00;
          sub_100238E28((uint64_t)v20, v64 + v63);
          *(_QWORD *)&v99 = v60;
          sub_1001E3048(v64);
          v65 = sub_100238CCC((_QWORD *)v99);
          v67 = v66;
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v102);
        }
        else
        {
          sub_10000882C((uint64_t)&v99, &qword_100842D08);
          v76 = sub_10001A630(&qword_100844840);
          v77 = *(unsigned __int8 *)(v98 + 80);
          v78 = (v77 + 32) & ~v77;
          v79 = swift_allocObject(v76, v78 + *(_QWORD *)(v98 + 72), v77 | 7);
          *(_OWORD *)(v79 + 16) = xmmword_1006A3C00;
          sub_100238E28((uint64_t)v20, v79 + v78);
          v65 = sub_100238CCC((_QWORD *)v79);
          v67 = v80;
        }
        v81 = sub_1002949C4();
        v83 = v82;
        v84 = &type metadata for RDAddedReminderNotificationContent;
        v85 = &off_1007EAA38;
        goto LABEL_37;
      case 5:
        v52 = sub_1002949C4();
        v54 = v53;
        v55 = *a1;
        if (*(_QWORD *)(*a1 + 16) && (v56 = sub_10001A6DC((uint64_t)v52, v53), (v57 & 1) != 0))
        {
          sub_100018618(*(_QWORD *)(v55 + 56) + 40 * v56, (uint64_t)&v99);
        }
        else
        {
          v101 = 0;
          v99 = 0u;
          v100 = 0u;
        }
        swift_bridgeObjectRelease(v54);
        if (*((_QWORD *)&v100 + 1))
        {
          sub_10001BCA8(&v99, (uint64_t)v102);
          v68 = (uint64_t)v103;
          v69 = v104;
          sub_10000A388(v102, (uint64_t)v103);
          v70 = ((uint64_t (*)(uint64_t, _UNKNOWN **))v69[1])(v68, v69);
          v71 = sub_10001A630(&qword_100844840);
          v72 = *(unsigned __int8 *)(v98 + 80);
          v73 = (v72 + 32) & ~v72;
          v74 = swift_allocObject(v71, v73 + *(_QWORD *)(v98 + 72), v72 | 7);
          *(_OWORD *)(v74 + 16) = xmmword_1006A3C00;
          sub_100238E28((uint64_t)v20, v74 + v73);
          *(_QWORD *)&v99 = v70;
          sub_1001E3048(v74);
          v65 = sub_100238CCC((_QWORD *)v99);
          v67 = v75;
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v102);
        }
        else
        {
          sub_10000882C((uint64_t)&v99, &qword_100842D08);
          v86 = sub_10001A630(&qword_100844840);
          v87 = *(unsigned __int8 *)(v98 + 80);
          v88 = (v87 + 32) & ~v87;
          v89 = swift_allocObject(v86, v88 + *(_QWORD *)(v98 + 72), v87 | 7);
          *(_OWORD *)(v89 + 16) = xmmword_1006A3C00;
          sub_100238E28((uint64_t)v20, v89 + v88);
          v65 = sub_100238CCC((_QWORD *)v89);
          v67 = v90;
        }
        v81 = sub_1002949C4();
        v83 = v91;
        v84 = &type metadata for RDCompletedReminderNotificationContent;
        v85 = &off_1007EC628;
LABEL_37:
        v103 = v84;
        v104 = v85;
        v102[0] = (uint64_t)v65;
        v102[1] = v67;
        sub_10031223C((uint64_t)v102, (uint64_t)v81, v83);
        v92 = (uint64_t)v20;
        return sub_10001C744(v92, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);
      default:
        if (qword_1008370B8 != -1)
          swift_once(&qword_1008370B8, sub_1002942AC);
        v40 = type metadata accessor for Logger(0);
        sub_10001AAA8(v40, (uint64_t)qword_1008429D0);
        v41 = sub_100238E28((uint64_t)v20, (uint64_t)v13);
        v23 = Logger.logObject.getter(v41);
        v42 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v23, v42))
        {

          v39 = (uint64_t)v13;
          goto LABEL_32;
        }
        v25 = (uint8_t *)swift_slowAlloc(12, -1);
        v26 = swift_slowAlloc(32, -1);
        v102[0] = v26;
        *(_DWORD *)v25 = 136446210;
        v43 = *(_QWORD *)&v13[*(int *)(updated + 20)];
        v44 = 0x6E776F6E6B6E75;
        v45 = 0xE700000000000000;
        switch(v43)
        {
          case 0:
            break;
          case 1:
            v45 = 0xE300000000000000;
            v44 = 6579297;
            break;
          case 2:
            v96 = "titleMayHaveDirtyHashtag";
            goto LABEL_48;
          case 3:
            v96 = "notesMayHaveDirtyHashtag";
LABEL_48:
            v45 = (unint64_t)(v96 - 32) | 0x8000000000000000;
            v44 = 0xD000000000000018;
            break;
          case 4:
            v44 = 0xD00000000000001BLL;
            v45 = 0x80000001006FD190;
            break;
          case 5:
            v45 = 0xE800000000000000;
            v44 = 0x6574656C706D6F63;
            break;
          default:
            v44 = 0x206E776F6E6B6E75;
            v45 = 0xEF746C7561666564;
            break;
        }
        *(_QWORD *)&v99 = sub_10001A820(v44, v45, v102);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, (char *)&v99 + 8);
        swift_bridgeObjectRelease(v45);
        sub_10001C744((uint64_t)v13, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);
        v94 = v42;
        v95 = "📔 RDSyncActivityEngine: Received a journal entry with an unknown activity type {type: %{public}s}";
LABEL_52:
        _os_log_impl((void *)&_mh_execute_header, v23, v94, v95, v25, 0xCu);
        swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v26, -1, -1);
        swift_slowDealloc(v25, -1, -1);

        break;
    }
  }
  else
  {
    if (qword_1008370B8 != -1)
      swift_once(&qword_1008370B8, sub_1002942AC);
    v30 = type metadata accessor for Logger(0);
    sub_10001AAA8(v30, (uint64_t)qword_1008429D0);
    v31 = sub_100238E28((uint64_t)v20, (uint64_t)v10);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.default.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v102[0] = v35;
      *(_DWORD *)v34 = 136446210;
      v36 = sub_1002947F0();
      v38 = v37;
      *(_QWORD *)&v99 = sub_10001A820((uint64_t)v36, v37, v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, (char *)&v99 + 8);
      swift_bridgeObjectRelease(v38);
      sub_10001C744((uint64_t)v10, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "📔 RDSyncActivityEngine: Entry is not eligible for notifications {%{public}s}", v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);

    }
    else
    {

      v39 = (uint64_t)v10;
LABEL_32:
      sub_10001C744(v39, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);
    }
  }
  v92 = (uint64_t)v20;
  return sub_10001C744(v92, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);
}

uint64_t sub_10029B228(uint64_t a1)
{
  uint64_t updated;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v12;
  char v13;
  char v14;
  _QWORD v15[2];
  id v16;
  void *v17;

  updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  v3 = __chkstk_darwin(updated);
  v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(*(id *)(a1 + *(int *)(v3 + 28)), "list");
  v15[1] = v6;
  v7 = sub_10001A630((uint64_t *)&unk_100843F50);
  Optional.tryUnwrap(_:file:line:)(&v16, 0x7265646E696D6572, 0xED00007473696C2ELL, 0xD000000000000095, 0x80000001006FD9A0, 152, v7);

  v8 = v16;
  v9 = objc_msgSend(v16, "remObjectID");

  v16 = v9;
  v10 = sub_10001A630((uint64_t *)&unk_100844910);
  Optional.tryUnwrap(_:file:line:)(&v17, 0xD000000000000010, 0x80000001006FEBF0, 0xD000000000000095, 0x80000001006FD9A0, 583, v10);

  v12 = v17;
  v13 = sub_10029B42C(v17, *(_QWORD *)(a1 + *(int *)(updated + 20)));
  sub_100238E28(a1, (uint64_t)v5);
  if ((v13 & 1) != 0)
  {
    sub_10001C744((uint64_t)v5, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);

    v14 = 0;
  }
  else
  {
    v14 = sub_10029B5F8((uint64_t)v5);

    sub_10001C744((uint64_t)v5, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);
  }
  return v14 & 1;
}

uint64_t sub_10029B42C(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t ObjectType;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_userDefaults + 8);
  ObjectType = swift_getObjectType(*(_QWORD *)(v2
                                             + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_userDefaults));
  v7 = objc_msgSend(a1, "stringRepresentation");
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 32))(v8, v10, ObjectType, v5);
  swift_bridgeObjectRelease(v10);
  switch(a2)
  {
    case 1:
      result = v11 & 1;
      break;
    case 5:
      result = (v11 >> 1) & 1;
      break;
    default:
      if (qword_1008370B8 != -1)
        swift_once(&qword_1008370B8, sub_1002942AC);
      v12 = type metadata accessor for Logger(0);
      v13 = sub_10001AAA8(v12, (uint64_t)qword_1008429D0);
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v16 = 134349056;
        v18 = a2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "📔 RDSyncActivityEngine: Unsupported notification type: %{public}ld", v16, 0xCu);
        swift_slowDealloc(v16, -1, -1);
      }

      result = 1;
      break;
  }
  return result;
}

uint64_t sub_10029B5F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  char v11;
  void *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  __n128 v28;
  _BYTE v29[16];

  v2 = v1;
  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v4);
  v6 = &v29[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v29[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1002941E0();
  v14 = v13;
  v15 = objc_msgSend(v13, "remObjectID");

  if (v15)
  {
    v16 = objc_msgSend(v15, "stringRepresentation");
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v19 = v18;

    v20 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_userDefaults);
    v21 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_userDefaults + 8);
    ObjectType = swift_getObjectType(v20);
    v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(ObjectType, v21);
    if (!v23)
      v23 = sub_1002B0C40((uint64_t)_swiftEmptyArrayStorage);
    v24 = v23;
    if (*(_QWORD *)(v23 + 16) && (v25 = sub_10001A6DC(v17, v19), (v26 & 1) != 0))
    {
      (*(void (**)(_BYTE *, unint64_t, uint64_t))(v8 + 16))(v6, *(_QWORD *)(v24 + 56) + *(_QWORD *)(v8 + 72) * v25, v7);
      v27 = 0;
    }
    else
    {
      v27 = 1;
    }
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, v27, 1, v7);
    swift_bridgeObjectRelease(v19);
    v28 = swift_bridgeObjectRelease(v24);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t, __n128))(v8 + 48))(v6, 1, v7, v28) != 1)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v10, v6, v7);
      v11 = static Date.< infix(_:_:)(v10, a1);

      (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
      return v11 & 1;
    }

    sub_10000882C((uint64_t)v6, (uint64_t *)&unk_1008380D0);
  }
  v11 = 1;
  return v11 & 1;
}

id sub_10029B82C(uint64_t a1, void *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  id v17;
  id v19;
  uint64_t v20;
  id v21;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v15 = a1;
    else
      v15 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v6 = _CocoaArrayWrapper.endIndex.getter(v15);
    if (!v6)
      goto LABEL_16;
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (!v6)
      goto LABEL_16;
  }
  if (v6 < 1)
    __break(1u);
  v7 = 0;
  do
  {
    if ((a1 & 0xC000000000000001) != 0)
      v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a1);
    else
      v8 = *(id *)(a1 + 8 * v7 + 32);
    v9 = v8;
    v10 = objc_msgSend(a2, "objectWithID:", v8);
    objc_msgSend(a2, "deleteObject:", v10);
    v11 = v9;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
    v13 = *(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v12 = *(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v13 >= v12 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1);
    ++v7;
    v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
    specialized Array._endMutation()(v14);

  }
  while (v6 != v7);
LABEL_16:
  swift_bridgeObjectRelease(a1);
  v21 = 0;
  v16 = objc_msgSend(a2, "save:", &v21);
  v17 = v21;
  if ((v16 & 1) != 0)
    return v21;
  v19 = v21;
  _convertNSErrorToError(_:)(v17);

  return (id)swift_willThrow(v20);
}

void sub_10029BA24(uint64_t a1, void *a2, _QWORD *a3, NSObject *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;
  unint64_t v17;
  id v18;
  Swift::String v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  id v31;
  NSObject *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;

  v33 = a5;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_group_enter(a4);
  v13 = a3[3];
  v14 = a3[4];
  sub_10000A388(a3, v13);
  v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
  v34 = 0xD000000000000031;
  v35 = 0x80000001006FEB80;
  v16._countAndFlagsBits = a1;
  v16._object = a2;
  String.append(_:)(v16);
  v17 = v35;
  v18 = v15;
  swift_bridgeObjectRetain(v17);
  v19._countAndFlagsBits = 46;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v17);
  v21 = v34;
  v20 = v35;
  v23 = UUID.init()(v22);
  v24 = UUID.uuidString.getter(v23);
  v26 = v25;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v34 = v21;
  v35 = v20;
  swift_bridgeObjectRetain(v20);
  v27._countAndFlagsBits = v24;
  v27._object = v26;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v20);
  v29 = v34;
  v28 = v35;
  v30 = (_QWORD *)swift_allocObject(&unk_1007EC110, 48, 7);
  v30[2] = v29;
  v30[3] = v28;
  v30[4] = v18;
  v30[5] = a4;
  v31 = v18;
  swift_bridgeObjectRetain(v28);
  v32 = a4;
  sub_1004853D8(v29, v28, v31, (uint64_t)sub_10029E4FC, (uint64_t)v30);
  swift_bridgeObjectRelease(v28);
  swift_release(v30);

}

void sub_10029BC40(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, NSObject *a5)
{
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t inited;
  unint64_t v38;
  uint64_t v39;
  NSObject *v40;
  _QWORD v41[3];
  _BYTE v42[8];
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[56];

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1008370B8 != -1)
      swift_once(&qword_1008370B8, sub_1002942AC);
    v10 = type metadata accessor for Logger(0);
    sub_10001AAA8(v10, (uint64_t)qword_1008429D0);
    swift_bridgeObjectRetain(a3);
    v11 = a4;
    swift_errorRetain(a1);
    swift_bridgeObjectRetain(a3);
    v12 = v11;
    v13 = swift_errorRetain(a1);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc(32, -1);
      v39 = swift_slowAlloc(96, -1);
      v44 = v39;
      *(_DWORD *)v16 = 136315650;
      swift_getErrorValue(a1, v42, v41);
      v17 = Error.rem_errorDescription.getter(v41[1], v41[2]);
      v40 = a5;
      v19 = v18;
      v43 = sub_10001A820(v17, v18, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
      swift_bridgeObjectRelease(v19);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      *(_WORD *)(v16 + 12) = 2082;
      swift_bridgeObjectRetain(a3);
      v43 = sub_10001A820(a2, a3, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v16 + 22) = 2082;
      v20 = objc_msgSend(v12, "body");
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v23 = v22;

      v24 = v21;
      a5 = v40;
      v43 = sub_10001A820(v24, v23, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);

      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "📔 RDSyncActivityEngine: Unable to post Shared List Activity notification {error: %s, identifier: %{public}s, body: %{public}s}", (uint8_t *)v16, 0x20u);
      swift_arrayDestroy(v39, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

      swift_bridgeObjectRelease_n(a3, 2);
    }
  }
  else
  {
    if (qword_1008370B8 != -1)
      swift_once(&qword_1008370B8, sub_1002942AC);
    v25 = type metadata accessor for Logger(0);
    sub_10001AAA8(v25, (uint64_t)qword_1008429D0);
    swift_bridgeObjectRetain_n(a3, 2);
    v26 = a4;
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc(22, -1);
      v30 = swift_slowAlloc(64, -1);
      v44 = v30;
      *(_DWORD *)v29 = 136446466;
      swift_bridgeObjectRetain(a3);
      v43 = sub_10001A820(a2, a3, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v29 + 12) = 2082;
      v31 = objc_msgSend(v26, "body");
      v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      v34 = v33;

      v43 = sub_10001A820(v32, v34, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);

      swift_bridgeObjectRelease(v34);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "📔 RDSyncActivityEngine: Posted Shared List Activity notification {identifier: %{public}s, body: %{public}s}", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    type metadata accessor for Analytics(0, v35);
    v36 = sub_10001A630((uint64_t *)&unk_10083A260);
    inited = swift_initStackObject(v36, v45);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
    *(_QWORD *)(inited + 32) = 0x696669746E656449;
    *(_QWORD *)(inited + 40) = 0xEA00000000007265;
    sub_1000151B0(0, (unint64_t *)&unk_10083FE30, NSString_ptr);
    *(_QWORD *)(inited + 48) = NSString.init(stringLiteral:)("Posted Shared List Activity Notification", 40, 2);
    v38 = sub_1002AF09C(inited);
    static Analytics.postEvent(_:payload:duration:)(0xD00000000000001CLL, 0x80000001006F6BE0, v38, 0, 1);
    swift_bridgeObjectRelease(v38);
  }
  dispatch_group_leave(a5);
}

uint64_t sub_10029C1D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine___debug_fetchedJournalEntries;
  v2 = sub_10001A630(&qword_100838100);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine___debug_processedJournalEntries;
  v4 = sub_10001A630(&qword_1008380F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine___debug_staleObjectIDs;
  v6 = sub_10001A630(&qword_1008380F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);

  swift_unknownObjectRelease(*(_QWORD *)(v0
                                       + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_userNotificationCenter));
  swift_unknownObjectRelease(*(_QWORD *)(v0
                                       + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_userDefaults));
  swift_bridgeObjectRelease();
  v7 = v0 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine__started;
  v8 = sub_10001A630(&qword_1008380E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_journalUpdatesSubscriptionTransactionRegistrar));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_accountSignInOrOutSubscriptionTransactionRegistrar));
  return v0;
}

uint64_t sub_10029C310()
{
  uint64_t v0;

  sub_10029C1D4();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

void sub_10029C334(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_10029D9FC(a2, a3, a4);
}

unint64_t sub_10029C344()
{
  uint64_t *v0;

  return REMSharedEntitySyncActivityType.description.getter(*v0);
}

uint64_t sub_10029C34C()
{
  return type metadata accessor for RDSharedListActivityNotificationsEngine(0);
}

uint64_t type metadata accessor for RDSharedListActivityNotificationsEngine(uint64_t a1)
{
  return sub_10001522C(a1, (uint64_t *)&unk_100842A70, (uint64_t)&nominal type descriptor for RDSharedListActivityNotificationsEngine);
}

void sub_10029C368(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[12];

  sub_10029C498(319, &qword_100842A80, &qword_100838108);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10029C498(319, &qword_100842A88, (uint64_t *)&unk_100838110);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_10029C498(319, &qword_100842A90, (uint64_t *)&unk_100846CB0);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        v10[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
        v10[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
        v10[5] = &unk_1006B2488;
        v10[6] = &unk_1006B2488;
        v10[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
        v10[8] = &unk_1006B24A0;
        sub_10029C4E4();
        if (v9 <= 0x3F)
        {
          v10[9] = *(_QWORD *)(v8 - 8) + 64;
          v10[10] = (char *)&value witness table for Builtin.NativeObject + 64;
          v10[11] = (char *)&value witness table for Builtin.NativeObject + 64;
          swift_updateClassMetadata2(a1, 256, 12, v10, a1 + 80);
        }
      }
    }
  }
}

void sub_10029C498(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = sub_1000A5A94(a3);
    v6 = type metadata accessor for Published(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_10029C4E4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100842A98)
  {
    v0 = type metadata accessor for Published(0, &type metadata for Bool);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100842A98);
  }
}

uint64_t getEnumTagSinglePayload for RDSharedListActivityNotificationsEngine.EngineConfiguration(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[33])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RDSharedListActivityNotificationsEngine.EngineConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSharedListActivityNotificationsEngine.EngineConfiguration()
{
  return &type metadata for RDSharedListActivityNotificationsEngine.EngineConfiguration;
}

uint64_t *sub_10029C5E4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    v12 = a3[7];
    v13 = *(void **)((char *)a2 + v12);
    *(uint64_t *)((char *)a1 + v12) = (uint64_t)v13;
    swift_bridgeObjectRetain(v11);
    v14 = v13;
  }
  return a1;
}

void sub_10029C690(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));

}

uint64_t sub_10029C6E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  v11 = a3[7];
  v12 = *(void **)(a2 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  swift_bridgeObjectRetain(v10);
  v13 = v12;
  return a1;
}

uint64_t sub_10029C764(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[7];
  v13 = *(void **)(a2 + v12);
  v14 = *(void **)(a1 + v12);
  *(_QWORD *)(a1 + v12) = v13;
  v15 = v13;

  return a1;
}

uint64_t sub_10029C804(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10029C874(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[7];
  v14 = *(void **)(a1 + v13);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);

  return a1;
}

uint64_t sub_10029C8FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10029C908);
}

uint64_t sub_10029C908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10029C984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10029C990);
}

uint64_t sub_10029C990(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(uint64_t a1)
{
  return sub_10001522C(a1, qword_100842BC8, (uint64_t)&nominal type descriptor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);
}

uint64_t sub_10029CA1C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = &unk_1006B24F8;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_10029CAAC()
{
  unint64_t result;

  result = qword_100842C08;
  if (!qword_100842C08)
  {
    result = swift_getWitnessTable(&unk_1006B2560, &type metadata for RDSharedListActivityNotificationsEngine.EngineConfiguration);
    atomic_store(result, (unint64_t *)&qword_100842C08);
  }
  return result;
}

uint64_t sub_10029CAF0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v10, v6, KeyPath, v8);
  swift_release(KeyPath);
  result = swift_release(v8);
  *a4 = v10;
  return result;
}

uint64_t sub_10029CB68(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v12;

  v7 = *a1;
  v8 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v10 = swift_getKeyPath(a6);
  v12 = v7;
  swift_bridgeObjectRetain(v7);
  swift_retain(v8);
  return static Published.subscript.setter(&v12, v8, KeyPath, v10);
}

uint64_t sub_10029CBDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v8 = *(_QWORD *)(a2 + 48);
  v7[2] = a2;
  v7[3] = a3;
  v5 = type metadata accessor for UnfairLock(0);
  swift_retain(v8);
  Lock.sync<A>(_:)(a4, v7, v5, (char *)&type metadata for () + 8, &protocol witness table for UnfairLock);
  return swift_release(v8);
}

void sub_10029CC58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  int64_t v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v37;
  _QWORD v38[5];
  void *v39;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = sub_1000151B0(0, (unint64_t *)&qword_100839928, off_1007D6718);
    v7 = sub_1000E51DC((unint64_t *)&unk_100843650, (unint64_t *)&qword_100839928, off_1007D6718, (uint64_t)&protocol conformance descriptor for NSObject);
    v8 = Set.Iterator.init(_cocoa:)(v38, v5, v6, v7);
    v3 = v38[0];
    v34 = v38[1];
    v9 = v38[2];
    v10 = v38[3];
    v11 = v38[4];
  }
  else
  {
    v12 = -1 << *(_BYTE *)(a1 + 32);
    v34 = a1 + 56;
    v13 = ~v12;
    v14 = -v12;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v11 = v15 & *(_QWORD *)(a1 + 56);
    v8 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v9 = v13;
    v10 = 0;
  }
  v32 = v9;
  v33 = (unint64_t)(v9 + 64) >> 6;
  while (v3 < 0)
  {
    v19 = __CocoaSet.Iterator.next()(v8);
    if (!v19)
      goto LABEL_40;
    v20 = v19;
    v37 = v19;
    v21 = sub_1000151B0(0, (unint64_t *)&qword_100839928, off_1007D6718);
    swift_unknownObjectRetain(v20);
    swift_dynamicCast(&v39, &v37, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
    v22 = v39;
    swift_unknownObjectRelease(v20);
    v17 = v11;
    if (!v22)
      goto LABEL_40;
LABEL_36:
    v27 = objc_msgSend(v22, "ckIdentifier", v32);
    if (v27)
    {
      v28 = v27;
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v31 = v30;

      if (v29 == a2 && v31 == a3)
      {
        swift_bridgeObjectRelease(a3);
LABEL_40:
        sub_1000C6560(v3);
        return;
      }
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, a2, a3, 0);
      swift_bridgeObjectRelease(v31);
      if ((v16 & 1) != 0)
        goto LABEL_40;
    }

    v11 = v17;
  }
  if (v11)
  {
    v17 = (v11 - 1) & v11;
    v18 = __clz(__rbit64(v11)) | (v10 << 6);
LABEL_35:
    v22 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v18);
    if (!v22)
      goto LABEL_40;
    goto LABEL_36;
  }
  v23 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    if (v23 >= v33)
      goto LABEL_40;
    v24 = v10;
    v25 = *(_QWORD *)(v34 + 8 * v23);
    ++v10;
    if (!v25)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v33)
        goto LABEL_40;
      v25 = *(_QWORD *)(v34 + 8 * v10);
      if (!v25)
      {
        v10 = v23 + 2;
        if (v23 + 2 >= v33)
          goto LABEL_40;
        v25 = *(_QWORD *)(v34 + 8 * v10);
        if (!v25)
        {
          v10 = v23 + 3;
          if (v23 + 3 >= v33)
            goto LABEL_40;
          v25 = *(_QWORD *)(v34 + 8 * v10);
          if (!v25)
          {
            v10 = v23 + 4;
            if (v23 + 4 >= v33)
              goto LABEL_40;
            v25 = *(_QWORD *)(v34 + 8 * v10);
            if (!v25)
            {
              v26 = v24 + 6;
              while (v33 != v26)
              {
                v25 = *(_QWORD *)(v34 + 8 * v26++);
                if (v25)
                {
                  v10 = v26 - 1;
                  goto LABEL_34;
                }
              }
              goto LABEL_40;
            }
          }
        }
      }
    }
LABEL_34:
    v17 = (v25 - 1) & v25;
    v18 = __clz(__rbit64(v25)) + (v10 << 6);
    goto LABEL_35;
  }
  __break(1u);
}

void sub_10029CFD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  uint64_t (*v22)(uint64_t, uint64_t);
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  char *v40;
  _QWORD *v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v4);
  v40 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 56);
  v38 = a1 + 56;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v6;
  v41 = (_QWORD *)(a2 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_userDefaults);
  v39 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v10 = 0;
  v37 = a1;
  while (1)
  {
    if (v9)
    {
      v43 = (v9 - 1) & v9;
      v13 = __clz(__rbit64(v9)) | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v14 >= v39)
      goto LABEL_30;
    v15 = *(_QWORD *)(v38 + 8 * v14);
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v39)
        goto LABEL_30;
      v15 = *(_QWORD *)(v38 + 8 * v10);
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v39)
          goto LABEL_30;
        v15 = *(_QWORD *)(v38 + 8 * v10);
        if (!v15)
        {
          v10 = v14 + 3;
          if (v14 + 3 >= v39)
            goto LABEL_30;
          v15 = *(_QWORD *)(v38 + 8 * v10);
          if (!v15)
            break;
        }
      }
    }
LABEL_23:
    v43 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    v20 = v41[1];
    ObjectType = swift_getObjectType(*v41);
    v22 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8);
    swift_bridgeObjectRetain(v19);
    v23 = v22(ObjectType, v20);
    v42 = v10;
    if (!v23)
      v23 = sub_1002B0C40((uint64_t)_swiftEmptyArrayStorage);
    v24 = v23;
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v18, v19);
    v27 = v26;
    swift_bridgeObjectRelease(v24);
    if ((v27 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
      v44 = v24;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1002D8A54();
        v24 = v44;
      }
      swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v24 + 48) + 16 * v25 + 8));
      v29 = *(_QWORD *)(v24 + 56);
      v30 = type metadata accessor for Date(0);
      v31 = *(_QWORD *)(v30 - 8);
      v32 = v29 + *(_QWORD *)(v31 + 72) * v25;
      v33 = v40;
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v40, v32, v30);
      v34 = v25;
      v12 = (uint64_t)v33;
      sub_10028A818(v34, v24);
      v35 = swift_bridgeObjectRelease(0x8000000000000000);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v31 + 56))(v33, 0, 1, v30, v35);
      a1 = v37;
    }
    else
    {
      v11 = type metadata accessor for Date(0);
      v12 = (uint64_t)v40;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v40, 1, 1, v11);
    }
    v10 = v42;
    sub_10000882C(v12, (uint64_t *)&unk_1008380D0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v24, ObjectType, v20);
    swift_bridgeObjectRelease(v19);
    v9 = v43;
  }
  v16 = v14 + 4;
  if (v16 >= v39)
  {
LABEL_30:
    swift_release(a1);
    return;
  }
  v15 = *(_QWORD *)(v38 + 8 * v16);
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v39)
      goto LABEL_30;
    v15 = *(_QWORD *)(v38 + 8 * v10);
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_32:
  __break(1u);
}

uint64_t sub_10029D340(uint64_t a1, void (*a2)(uint64_t, uint64_t, _BYTE *))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  _QWORD v18[2];
  _BYTE v19[40];
  uint64_t v20;

  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    v15 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v15 >= v7)
      return swift_release(a1);
    v16 = *(_QWORD *)(v20 + 8 * v15);
    ++v9;
    if (!v16)
    {
      v9 = v15 + 1;
      if (v15 + 1 >= v7)
        return swift_release(a1);
      v16 = *(_QWORD *)(v20 + 8 * v9);
      if (!v16)
      {
        v9 = v15 + 2;
        if (v15 + 2 >= v7)
          return swift_release(a1);
        v16 = *(_QWORD *)(v20 + 8 * v9);
        if (!v16)
        {
          v9 = v15 + 3;
          if (v15 + 3 >= v7)
            return swift_release(a1);
          v16 = *(_QWORD *)(v20 + 8 * v9);
          if (!v16)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v16 - 1) & v16;
    v11 = __clz(__rbit64(v16)) + (v9 << 6);
LABEL_5:
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v13 = *v12;
    v14 = v12[1];
    sub_100018618(*(_QWORD *)(a1 + 56) + 40 * v11, (uint64_t)v19);
    v18[0] = v13;
    v18[1] = v14;
    swift_bridgeObjectRetain(v14);
    a2(v13, v14, v19);
    result = sub_10000882C((uint64_t)v18, &qword_100842D00);
  }
  v17 = v15 + 4;
  if (v17 >= v7)
    return swift_release(a1);
  v16 = *(_QWORD *)(v20 + 8 * v17);
  if (v16)
  {
    v9 = v17;
    goto LABEL_22;
  }
  while (1)
  {
    v9 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v9 >= v7)
      return swift_release(a1);
    v16 = *(_QWORD *)(v20 + 8 * v9);
    ++v17;
    if (v16)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_10029D508(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  void *v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v36;
  _QWORD v37[2];
  unint64_t v38;

  v38 = a1;
  v4 = v3;
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v6 = a2;
    else
      v6 = a2 & 0xFFFFFFFFFFFFFF8;
    v34 = 0;
    v7 = 0;
    v8 = 0;
    v9 = __CocoaDictionary.makeIterator()(v6) | 0x8000000000000000;
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a2 + 32);
    v7 = ~v10;
    v34 = a2 + 64;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v8 = v12 & *(_QWORD *)(a2 + 64);
    v9 = a2;
  }
  v13 = swift_bridgeObjectRetain(a2);
  v14 = 0;
  v32 = (char *)&type metadata for Swift.AnyObject + 8;
  v33 = (unint64_t)(v7 + 64) >> 6;
  if ((v9 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_11:
  v15 = __CocoaDictionary.Iterator.next()(v13);
  if (!v15)
    goto LABEL_38;
  v17 = v15;
  v18 = v16;
  v36 = v15;
  v19 = sub_1000151B0(0, &qword_100843EA0, NSManagedObjectID_ptr);
  swift_unknownObjectRetain(v17);
  swift_dynamicCast(v37, &v36, v32, v19, 7);
  v20 = (id)v37[0];
  swift_unknownObjectRelease(v17);
  v36 = v18;
  v21 = sub_1000151B0(0, (unint64_t *)&unk_100840090, REMSharedEntitySyncActivity_ptr);
  swift_unknownObjectRetain(v18);
  swift_dynamicCast(v37, &v36, v32, v21, 7);
  v22 = (id)v37[0];
  swift_unknownObjectRelease(v18);
  v23 = v14;
  v24 = v8;
  if (!v20)
    goto LABEL_38;
  while (1)
  {
    v37[0] = v20;
    v37[1] = v22;
    sub_100299CF4(&v38, (uint64_t)v37, a3);
    if (v4)
    {
      v31 = v38;

      swift_bridgeObjectRelease(v31);
      sub_1000C6560(v9);
      return;
    }

    v14 = v23;
    v8 = v24;
    if ((v9 & 0x8000000000000000) != 0)
      goto LABEL_11;
LABEL_14:
    if (!v8)
      break;
    v24 = (v8 - 1) & v8;
    v25 = __clz(__rbit64(v8)) | (v14 << 6);
    v23 = v14;
LABEL_27:
    v28 = 8 * v25;
    v29 = *(void **)(*(_QWORD *)(v9 + 56) + v28);
    v20 = *(id *)(*(_QWORD *)(v9 + 48) + v28);
    v22 = v29;
    if (!v20)
      goto LABEL_38;
  }
  v23 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
    return;
  }
  if (v23 >= v33)
    goto LABEL_38;
  v26 = *(_QWORD *)(v34 + 8 * v23);
  if (v26)
  {
LABEL_26:
    v24 = (v26 - 1) & v26;
    v25 = __clz(__rbit64(v26)) + (v23 << 6);
    goto LABEL_27;
  }
  v27 = v14 + 2;
  if (v14 + 2 >= v33)
    goto LABEL_38;
  v26 = *(_QWORD *)(v34 + 8 * v27);
  if (v26)
    goto LABEL_25;
  v27 = v14 + 3;
  if (v14 + 3 >= v33)
    goto LABEL_38;
  v26 = *(_QWORD *)(v34 + 8 * v27);
  if (v26)
    goto LABEL_25;
  v27 = v14 + 4;
  if (v14 + 4 >= v33)
    goto LABEL_38;
  v26 = *(_QWORD *)(v34 + 8 * v27);
  if (v26)
  {
LABEL_25:
    v23 = v27;
    goto LABEL_26;
  }
  v23 = v14 + 5;
  if (v14 + 5 >= v33)
    goto LABEL_38;
  v26 = *(_QWORD *)(v34 + 8 * v23);
  if (v26)
    goto LABEL_26;
  v30 = v14 + 6;
  while (v33 != v30)
  {
    v26 = *(_QWORD *)(v34 + 8 * v30++);
    if (v26)
    {
      v23 = v30 - 1;
      goto LABEL_26;
    }
  }
LABEL_38:
  sub_1000C6560(v9);
}

id sub_10029D844()
{
  uint64_t KeyPath;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  Class isa;
  uint64_t v15;

  KeyPath = swift_getKeyPath(&unk_1006B2848);
  v1 = (void *)sub_1003428DC(KeyPath, (uint64_t)&off_1007E0170);
  swift_release(KeyPath);
  v2 = type metadata accessor for REMCKSharedEntitySyncActivity();
  v3 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(v2), "entity");
  objc_msgSend(v3, "setEntity:", v4);

  objc_msgSend(v3, "setAffectedStores:", 0);
  objc_msgSend(v3, "setPredicate:", v1);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  v5 = swift_getKeyPath(&unk_1006B2848);
  v6 = (void *)NSSortDescriptor.init<A, B>(keyPath:ascending:)(v5, 1);
  v7 = swift_getKeyPath(&unk_1006B2880);
  v8 = (void *)NSSortDescriptor.init<A, B>(keyPath:ascending:)(v7, 1);
  v9 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v10 = swift_allocObject(v9, 48, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1006A8550;
  *(_QWORD *)(v10 + 32) = v6;
  *(_QWORD *)(v10 + 40) = v8;
  v15 = v10;
  specialized Array._endMutation()(v10);
  v11 = v6;
  v12 = v8;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, "setSortDescriptors:", isa, swift_bridgeObjectRelease(v15).n128_f64[0]);

  return v3;
}

void sub_10029D9FC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  id *v21;
  NSObject *v22;
  int v23;
  uint64_t v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  __n128 v31;
  id v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  os_log_type_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  int v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  __n128 v67;
  _QWORD v68[2];
  int v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v72 = a3;
  v5 = type metadata accessor for RDUserNotificationAction(0);
  v73 = *(_QWORD **)(v5 - 8);
  v74 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)v68 - v9;
  v11 = (_QWORD *)type metadata accessor for RDUserNotificationType(0);
  v12 = (char *)*(v11 - 1);
  __chkstk_darwin(v11);
  v14 = (char *)v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)v68 - v16;
  v19 = __chkstk_darwin(v18);
  v21 = (id *)((char *)v68 - v20);
  v22 = *((_QWORD *)v12 + 2);
  ((void (*)(char *, uint64_t, _QWORD *, __n128))v22)((char *)v68 - v20, a2, v11, v19);
  v23 = (*((uint64_t (**)(id *, _QWORD *))v12 + 11))(v21, v11);
  if (v23 == enum case for RDUserNotificationType.reminderAlarm(_:)
    || v23 == enum case for RDUserNotificationType.todayNotificationForSingleReminder(_:))
  {
    goto LABEL_3;
  }
  if (v23 == enum case for RDUserNotificationType.caldavSharedList(_:))
  {
    (*((void (**)(id *, _QWORD *))v12 + 12))(v21, v11);

    goto LABEL_4;
  }
  if (v23 == enum case for RDUserNotificationType.assignmentNotification(_:))
  {
    (*((void (**)(id *, _QWORD *))v12 + 12))(v21, v11);
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  if (v23 == enum case for RDUserNotificationType.sharedListAddedReminderNotification(_:))
  {
    (*((void (**)(id *, _QWORD *))v12 + 12))(v21, v11);
    v11 = *v21;
    if (qword_1008370B8 != -1)
      swift_once(&qword_1008370B8, sub_1002942AC);
    v36 = type metadata accessor for Logger(0);
    sub_10001AAA8(v36, (uint64_t)qword_1008429D0);
    v21 = a1;
    swift_bridgeObjectRetain(v11);
    v22 = Logger.logObject.getter(v37);
    v38 = static os_log_type_t.default.getter(v22);
    v39 = v38;
    v12 = v7;
    if (os_log_type_enabled(v22, v38))
    {
      v40 = swift_slowAlloc(22, -1);
      v71 = v7;
      v41 = v40;
      v70 = swift_slowAlloc(64, -1);
      v76 = v70;
      *(_DWORD *)v41 = 136315394;
      v68[1] = v41 + 4;
      v42 = objc_msgSend(v21, "actionIdentifier");
      v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      v69 = v39;
      v45 = v44;

      v75 = sub_10001A820(v43, v45, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76);

      swift_bridgeObjectRelease();
      *(_WORD *)(v41 + 12) = 2080;
      v46 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      swift_bridgeObjectRetain(v11);
      v48 = Array.description.getter(v47, v46);
      v50 = v49;
      swift_bridgeObjectRelease();
      v75 = sub_10001A820(v48, v50, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76);
      swift_bridgeObjectRelease_n(v11, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v69, "📔 RDSyncActivityEngine: Processing shared list update notification {actionIdentifier:%s, reminderIDs: %s", (uint8_t *)v41, 0x16u);
      v51 = v70;
      swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1, -1);
      v52 = v41;
      v12 = v71;
      swift_slowDealloc(v52, -1, -1);

      goto LABEL_29;
    }
  }
  else
  {
    if (v23 == enum case for RDUserNotificationType.dueDateDeltaAlarm(_:))
    {
LABEL_3:
      (*((void (**)(id *, _QWORD *))v12 + 1))(v21, v11);
      goto LABEL_4;
    }
    if (v23 == enum case for RDUserNotificationType.todayNotification(_:)
      || v23 == enum case for RDUserNotificationType.todayNotificationBadge(_:)
      || v23 == enum case for RDUserNotificationType.beforeFirstUnlock(_:))
    {
LABEL_4:
      if (qword_1008370B8 != -1)
        swift_once(&qword_1008370B8, sub_1002942AC);
      v24 = type metadata accessor for Logger(0);
      sub_10001AAA8(v24, (uint64_t)qword_1008429D0);
      ((void (*)(char *, uint64_t, _QWORD *))v22)(v17, a2, v11);
      v25 = a1;
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = swift_slowAlloc(22, -1);
        v73 = (_QWORD *)swift_slowAlloc(8, -1);
        v74 = swift_slowAlloc(32, -1);
        v76 = v74;
        *(_DWORD *)v28 = 136315394;
        ((void (*)(char *, char *, _QWORD *))v22)(v14, v17, v11);
        v29 = String.init<A>(describing:)(v14, v11);
        v75 = sub_10001A820(v29, v30, &v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76);
        v31 = swift_bridgeObjectRelease();
        (*((void (**)(char *, _QWORD *, __n128))v12 + 1))(v17, v11, v31);
        *(_WORD *)(v28 + 12) = 2112;
        v75 = (uint64_t)v25;
        v32 = v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76);
        v33 = v73;
        *v73 = v25;

        _os_log_impl((void *)&_mh_execute_header, v26, v27, "📔 RDSyncActivityEngine: Unexpected notification type {type: %s, response: %@}", (uint8_t *)v28, 0x16u);
        v34 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v33, 1, v34);
        swift_slowDealloc(v33, -1, -1);
        v35 = v74;
        swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v35, -1, -1);
        swift_slowDealloc(v28, -1, -1);

      }
      else
      {
        (*((void (**)(char *, _QWORD *))v12 + 1))(v17, v11);

      }
      return;
    }
    _diagnoseUnexpectedEnumCase<A>(type:)(v11, v11);
    __break(1u);
  }

  swift_bridgeObjectRelease_n(v11, 2);
LABEL_29:
  v55 = v73;
  v56 = v74;
  v57 = (void (*)(char *, uint64_t, uint64_t))v73[2];
  v58 = v72;
  v57(v10, v72, v74);
  v59 = ((uint64_t (*)(char *, uint64_t))v55[11])(v10, v56);
  if (v59 != enum case for RDUserNotificationAction.defaultDismiss(_:)
    && v59 != enum case for RDUserNotificationAction.debugDismiss(_:)
    && v59 != enum case for RDUserNotificationAction.markAsCompleted(_:)
    && v59 != enum case for RDUserNotificationAction.snoozeForOneHour(_:)
    && v59 != enum case for RDUserNotificationAction.snoozeForOneDay(_:)
    && v59 != enum case for RDUserNotificationAction.snoozeToNextThirds(_:)
    && v59 != enum case for RDUserNotificationAction.snoozeToNextWeekend(_:)
    && v59 != enum case for RDUserNotificationAction.addToReminders(_:)
    && v59 != enum case for RDUserNotificationAction.viewAssignmentInList(_:)
    && v59 != enum case for RDUserNotificationAction.declineAssignment(_:))
  {
    if (v59 == enum case for RDUserNotificationAction.viewRemindersInList(_:))
      return;
    _diagnoseUnexpectedEnumCase<A>(type:)(v56, v56);
    __break(1u);
  }
  v60 = ((uint64_t (*)(char *, uint64_t, uint64_t))v57)(v12, v58, v56);
  v61 = Logger.logObject.getter(v60);
  v62 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v61, v62))
  {
    v63 = (uint8_t *)swift_slowAlloc(12, -1);
    v64 = swift_slowAlloc(32, -1);
    v76 = v64;
    *(_DWORD *)v63 = 136315138;
    v65 = RDUserNotificationAction.rawValue.getter(v64);
    v75 = sub_10001A820(v65, v66, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76);
    v67 = swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t, __n128))v55[1])(v12, v56, v67);
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "📔 RDSyncActivityEngine: Unexpected action %s for notification type .sharedListAddedReminderNotification", v63, 0xCu);
    swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v64, -1, -1);
    swift_slowDealloc(v63, -1, -1);
  }
  else
  {
    ((void (*)(char *, uint64_t))v55[1])(v12, v56);
  }

}

BOOL sub_10029E2E8()
{
  uint64_t v0;

  return (**(_BYTE **)(v0 + 16) & 1) == 0;
}

uint64_t sub_10029E2FC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 49, 7);
}

BOOL sub_10029E30C()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + 32) & 1) == 0;
}

uint64_t sub_10029E31C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10029E340(uint64_t a1)
{
  uint64_t v1;

  return sub_100298BA8(a1, v1);
}

uint64_t sub_10029E348()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10029E36C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10029E390(uint64_t a1)
{
  uint64_t v1;

  return sub_10029CBDC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)sub_100188F54);
}

uint64_t sub_10029E3B0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10029E3DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100183E48(a1, *a2, a2[1], *(_QWORD *)(v2 + 16), *(void (**)(uint64_t, uint64_t *))(v2 + 24), *(_QWORD *)(v2 + 32));
}

void sub_10029E3F0()
{
  uint64_t v0;

  sub_1002990BC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

id sub_10029E408()
{
  uint64_t v0;

  return sub_10029B82C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD **)(v0 + 32));
}

uint64_t sub_10029E424@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10029CAF0(a1, (uint64_t)&unk_1006B2648, (uint64_t)&unk_1006B2670, a2);
}

uint64_t sub_10029E448(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10029CB68(a1, a2, a3, a4, (uint64_t)&unk_1006B2648, (uint64_t)&unk_1006B2670);
}

void sub_10029E46C(uint64_t a1, void *a2, _QWORD *a3)
{
  uint64_t v3;

  sub_10029BA24(a1, a2, a3, *(NSObject **)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_10029E474()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10029E4A0()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t result;

  v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1)
    return v1();
  return result;
}

uint64_t sub_10029E4C8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 48, 7);
}

void sub_10029E4FC(uint64_t a1)
{
  uint64_t v1;

  sub_10029BC40(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(NSObject **)(v1 + 40));
}

uint64_t sub_10029E508@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10029CAF0(a1, (uint64_t)&unk_1006B2690, (uint64_t)&unk_1006B26B8, a2);
}

uint64_t sub_10029E52C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10029CB68(a1, a2, a3, a4, (uint64_t)&unk_1006B2690, (uint64_t)&unk_1006B26B8);
}

void sub_10029E550(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_100299724(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10029E568@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10029CAF0(a1, (uint64_t)&unk_1006B26D8, (uint64_t)&unk_1006B2700, a2);
}

uint64_t sub_10029E58C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10029CB68(a1, a2, a3, a4, (uint64_t)&unk_1006B26D8, (uint64_t)&unk_1006B2700);
}

void sub_10029E5B0(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_10029A02C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10029E5C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_100842CF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10029E648(uint64_t a1)
{
  uint64_t v1;

  return sub_10029CBDC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)sub_10029E69C);
}

void sub_10029E670()
{
  uint64_t v0;

  sub_1002982AC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

_QWORD *sub_10029E6A0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  void *v26;
  _QWORD *v27;
  id v28;
  _QWORD *v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  os_log_type_t v41;
  const char *v42;
  uint64_t v44;
  uint64_t v45;

  if ((sub_1002A0A88() & 1) == 0)
  {
    if (qword_100837340 != -1)
      swift_once(&qword_100837340, sub_10039CA78);
    v13 = type metadata accessor for Logger(0);
    sub_10001AAA8(v13, (uint64_t)qword_100847C10);
    v14 = v0;
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.info.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc(22, -1);
      v18 = swift_slowAlloc(64, -1);
      v45 = v18;
      *(_DWORD *)v17 = 136315394;
      v44 = sub_10001A820(0xD000000000000023, 0x80000001006FEC80, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
      *(_WORD *)(v17 + 12) = 2082;
      v19 = objc_msgSend(v14, "remObjectID");
      if (v19)
      {
        v20 = v19;
        v21 = objc_msgSend(v19, "description");

        v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
        v24 = v23;

      }
      else
      {
        v22 = 7104878;
        v24 = 0xE300000000000000;
      }
      v44 = sub_10001A820(v22, v24, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);

      swift_bridgeObjectRelease();
      v41 = v16;
      v42 = "📓 %s: Object is not eligible for journaling {remObjectID: %{public}s}";
      goto LABEL_25;
    }
LABEL_20:

    return _swiftEmptyArrayStorage;
  }
  if (qword_100837340 != -1)
    swift_once(&qword_100837340, sub_10039CA78);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_100847C10);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(22, -1);
    v6 = swift_slowAlloc(64, -1);
    v45 = v6;
    *(_DWORD *)v5 = 136315394;
    v44 = sub_10001A820(0xD000000000000023, 0x80000001006FEC80, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
    *(_WORD *)(v5 + 12) = 2082;
    v7 = objc_msgSend(v2, "remObjectID");
    if (v7)
    {
      v8 = v7;
      v9 = objc_msgSend(v7, "description");

      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v12 = v11;

    }
    else
    {
      v10 = 7104878;
      v12 = 0xE300000000000000;
    }
    v44 = sub_10001A820(v10, v12, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "📓 %s: Considering reminder activity {remObjectID: %{public}s}", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy(v6, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  v25 = objc_msgSend(v2, "storeControllerManagedObjectContext");
  if (!v25)
  {
    v14 = v2;
    v15 = Logger.logObject.getter(v14);
    v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v34))
    {
      v17 = swift_slowAlloc(22, -1);
      v18 = swift_slowAlloc(64, -1);
      v45 = v18;
      *(_DWORD *)v17 = 136315394;
      v44 = sub_10001A820(0xD000000000000023, 0x80000001006FEC80, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
      *(_WORD *)(v17 + 12) = 2082;
      v35 = objc_msgSend(v14, "remObjectID");
      if (v35)
      {
        v36 = v35;
        v37 = objc_msgSend(v35, "description");

        v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        v40 = v39;

      }
      else
      {
        v38 = 7104878;
        v40 = 0xE300000000000000;
      }
      v44 = sub_10001A820(v38, v40, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);

      swift_bridgeObjectRelease();
      v41 = v34;
      v42 = "📓 %s: Unable to unwrap optional storeControllerManagedObjectContext {remObjectID: %{public}s}";
LABEL_25:
      _os_log_impl((void *)&_mh_execute_header, v15, v41, v42, (uint8_t *)v17, 0x16u);
      swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      return _swiftEmptyArrayStorage;
    }
    goto LABEL_20;
  }
  v26 = v25;
  v27 = sub_1001DD6EC();
  v28 = v2;
  v29 = sub_1002A18D8((uint64_t)v27);
  swift_bridgeObjectRelease();

  v30 = v28;
  v31 = v26;
  sub_1002A19C4((uint64_t)v29, v31, v30);
  v33 = v32;
  swift_bridgeObjectRelease();

  return (_QWORD *)v33;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> REMCDReminder.validateForInsert_Swift()()
{
  sub_10029E6A0();
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall REMCDReminder.willSave_Swift()()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  double v4;

  if ((objc_msgSend(v0, "willSave_hasProcessedDueDateDeltaAlertsDataChanges") & 1) == 0)
  {
    objc_msgSend(v0, "setWillSave_hasProcessedDueDateDeltaAlertsDataChanges:", 1);
    v1 = objc_msgSend(v0, "changedValues");
    v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v3 = sub_10011E910(v2);
    LOBYTE(v2) = sub_1001B2278(0xD000000000000016, 0x80000001006F4610, v3);
    *(_QWORD *)&v4 = swift_bridgeObjectRelease().n128_u64[0];
    if ((v2 & 1) != 0)
      objc_msgSend(v0, "processDueDateDeltaAlertsDataChanges", v4);
  }
}

Swift::Void __swiftcall REMCDReminder.didSave_Swift()()
{
  void *v0;

  objc_msgSend(v0, "setWillSave_hasProcessedDueDateDeltaAlertsDataChanges:", 0);
}

Swift::Void __swiftcall REMCDReminder.willChangeValue_Swift(for:)(Swift::String a1)
{
  void *v1;

  objc_msgSend(v1, "setCachedDeserializedDueDateDeltaAlerts:", 0);
}

BOOL sub_10029EEB8()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[2];

  v1 = v0;
  v2 = objc_msgSend(v0, "currentUserShareParticipantID");
  if (v2)
  {
    v3 = v2;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v6 = v5;

  }
  else
  {
    if (qword_100837340 != -1)
      swift_once(&qword_100837340, sub_10039CA78);
    v7 = type metadata accessor for Logger(0);
    sub_10001AAA8(v7, (uint64_t)qword_100847C10);
    v8 = v0;
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v40[0] = v12;
      *(_DWORD *)v11 = 136446210;
      v13 = objc_msgSend(v8, "remObjectID");
      if (v13)
      {
        v14 = v13;
        v15 = objc_msgSend(v13, "description");

        v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        v18 = v17;

      }
      else
      {
        v16 = 7104878;
        v18 = 0xE300000000000000;
      }
      v38 = sub_10001A820(v16, v18, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "📓 REMSharedActivityJournaling: Unable to get currentUserShareParticipantID from reminder. Assuming unit testing and returning CKCurrentUserDefaultName {reminderObjectID: %{public}s}", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

    }
    else
    {

    }
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
    v6 = v19;
  }
  v20 = sub_10029F310();
  if (v21)
  {
    v40[0] = v4;
    v40[1] = v6;
    v38 = v20;
    v39 = v21;
    v22 = sub_1000E525C();
    v23 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v38, &type metadata for String, &type metadata for String, v22, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v23 == 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_100837340 != -1)
      swift_once(&qword_100837340, sub_10039CA78);
    v25 = type metadata accessor for Logger(0);
    sub_10001AAA8(v25, (uint64_t)qword_100847C10);
    v26 = v1;
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v40[0] = v30;
      *(_DWORD *)v29 = 136446210;
      v31 = objc_msgSend(v26, "remObjectID");
      if (v31)
      {
        v32 = v31;
        v33 = objc_msgSend(v31, "description");

        v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
        v36 = v35;

      }
      else
      {
        v34 = 7104878;
        v36 = 0xE300000000000000;
      }
      v38 = sub_10001A820(v34, v36, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "📓: Unable to get authorUserID for reminder {reminderObjectID: %{public}s}", v29, 0xCu);
      v24 = 1;
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {

      return 1;
    }
  }
  return v24;
}

uint64_t sub_10029F310()
{
  void *v0;
  id v1;
  void *v2;
  NSObject *v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  id v33;
  void *v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  __n128 v49;
  uint64_t v50;
  id v51;
  id v52;
  id v53;
  id v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  id v65;
  os_log_type_t v66;
  id v67;
  void *v68;
  id v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  double v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint64_t v81;
  double v82;
  id v83;
  void *v84;
  id v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  double v89;
  id v90;
  void *v91;
  id v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  os_log_type_t v96;
  const char *v97;
  uint64_t v99;
  os_log_type_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v1 = objc_msgSend(v0, "list");
  if (!v1)
  {
    if (qword_100837340 != -1)
      swift_once(&qword_100837340, sub_10039CA78);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100847C10);
    v7 = v0;
    v4 = Logger.logObject.getter(v7);
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v19))
    {
      v20 = swift_slowAlloc(22, -1);
      v21 = swift_slowAlloc(64, -1);
      v103 = v21;
      *(_DWORD *)v20 = 136446466;
      v22 = objc_msgSend(v7, "remObjectID");
      if (v22)
      {
        v23 = v22;
        v24 = objc_msgSend(v22, "description");

        v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
        v27 = v26;

      }
      else
      {
        v25 = 7104878;
        v27 = 0xE300000000000000;
      }
      v102 = sub_10001A820(v25, v27, &v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103);

      *(_QWORD *)&v73 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v20 + 12) = 2080;
      v74 = Bool.yesno.getter(objc_msgSend(v7, "isConcealed", v73));
      v102 = sub_10001A820(v74, v75, &v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v19, "📓 REMSharedActivityJournaling: Unable to get list from reminder {reminderObjectID: %{public}s, isConcealed: %s}", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy(v21, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
      goto LABEL_62;
    }

LABEL_25:
    return 0;
  }
  v2 = v1;
  v3 = objc_msgSend(v0, "ckServerRecord");
  if (!v3)
  {
    if (qword_100837340 != -1)
      swift_once(&qword_100837340, sub_10039CA78);
    v28 = type metadata accessor for Logger(0);
    sub_10001AAA8(v28, (uint64_t)qword_100847C10);
    v29 = v0;
    v4 = Logger.logObject.getter(v29);
    v30 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = swift_slowAlloc(32, -1);
      v103 = v32;
      *(_DWORD *)v31 = 136446210;
      v33 = objc_msgSend(v29, "remObjectID");
      if (v33)
      {
        v34 = v33;
        v35 = objc_msgSend(v33, "description");

        v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
        v38 = v37;

      }
      else
      {
        v36 = 7104878;
        v38 = 0xE300000000000000;
      }
      v102 = sub_10001A820(v36, v38, &v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v30, "📓 REMSharedActivityJournaling: Unable to get ckServerRecord for reminder {reminderObjectID: %{public}s}", v31, 0xCu);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);

      goto LABEL_62;
    }

    return 0;
  }
  v4 = v3;
  if ((objc_msgSend(v0, "isInserted") & 1) != 0)
  {
    v5 = -[NSObject creatorUserRecordID](v4, "creatorUserRecordID");
    if (!v5)
    {
      if (qword_100837340 != -1)
        swift_once(&qword_100837340, sub_10039CA78);
      v6 = type metadata accessor for Logger(0);
      sub_10001AAA8(v6, (uint64_t)qword_100847C10);
      v7 = v0;
      v8 = Logger.logObject.getter(v7);
      v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc(12, -1);
        v11 = swift_slowAlloc(32, -1);
        v103 = v11;
        *(_DWORD *)v10 = 136446210;
        v12 = objc_msgSend(v7, "remObjectID");
        if (v12)
        {
          v13 = v12;
          v14 = objc_msgSend(v12, "description");

          v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
          v17 = v16;

        }
        else
        {
          v15 = 7104878;
          v17 = 0xE300000000000000;
        }
        v102 = sub_10001A820(v15, v17, &v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103);

        swift_bridgeObjectRelease();
        v96 = v9;
        v97 = "📓 REMSharedActivityJournaling: Unable to get creatorUserRecordID from reminder {reminderObjectID: %{public}s}";
        goto LABEL_59;
      }

      goto LABEL_25;
    }
  }
  else
  {
    v5 = -[NSObject lastModifiedUserRecordID](v4, "lastModifiedUserRecordID");
    if (!v5)
    {
      if (qword_100837340 != -1)
        swift_once(&qword_100837340, sub_10039CA78);
      v64 = type metadata accessor for Logger(0);
      sub_10001AAA8(v64, (uint64_t)qword_100847C10);
      v65 = v0;
      v8 = Logger.logObject.getter(v65);
      v66 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v8, v66))
      {

LABEL_62:
        return 0;
      }
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v103 = v11;
      *(_DWORD *)v10 = 136446210;
      v67 = objc_msgSend(v65, "remObjectID");
      if (v67)
      {
        v68 = v67;
        v69 = objc_msgSend(v67, "description");

        v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
        v72 = v71;

      }
      else
      {
        v70 = 7104878;
        v72 = 0xE300000000000000;
      }
      v102 = sub_10001A820(v70, v72, &v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103);

      swift_bridgeObjectRelease();
      v96 = v66;
      v97 = "📓 REMSharedActivityJournaling: Unable to get lastModifiedUserRecordID from reminder {reminderObjectID: %{public}s}";
LABEL_59:
      _os_log_impl((void *)&_mh_execute_header, v8, v96, v97, v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

      goto LABEL_62;
    }
  }
  v39 = objc_msgSend(v5, "recordName");

  v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
  v42 = v41;

  v43 = objc_msgSend(v2, "ckServerShare");
  if (v43)
  {
    v44 = v43;
    v45 = objc_msgSend(v43, "participants");
    v46 = sub_1000151B0(0, (unint64_t *)&qword_100842DA0, CKShareParticipant_ptr);
    v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v45, v46);

    swift_bridgeObjectRetain(v42);
    v48 = sub_10039D8C8(v47, v40, v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v48)
    {
      if (qword_100837340 != -1)
        swift_once(&qword_100837340, sub_10039CA78);
      v76 = type metadata accessor for Logger(0);
      sub_10001AAA8(v76, (uint64_t)qword_100847C10);
      v77 = v0;
      swift_bridgeObjectRetain(v42);
      v79 = Logger.logObject.getter(v78);
      v80 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v79, v80))
      {
        v81 = swift_slowAlloc(22, -1);
        v101 = swift_slowAlloc(64, -1);
        v103 = v101;
        *(_DWORD *)v81 = 136446466;
        swift_bridgeObjectRetain(v42);
        v102 = sub_10001A820(v40, v42, &v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103);
        *(_QWORD *)&v82 = swift_bridgeObjectRelease_n(v42, 3).n128_u64[0];
        *(_WORD *)(v81 + 12) = 2082;
        v83 = objc_msgSend(v77, "remObjectID", v82);
        if (v83)
        {
          v84 = v83;
          v85 = objc_msgSend(v83, "description");

          v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
          v88 = v87;

        }
        else
        {
          v86 = 7104878;
          v88 = 0xE300000000000000;
        }
        v102 = sub_10001A820(v86, v88, &v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v79, v80, "📓 REMSharedActivityJournaling: Unable to get a participant for the reminder's author {authorID: %{public}s, reminderObjectID: %{public}s}", (uint8_t *)v81, 0x16u);
        swift_arrayDestroy(v101, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v101, -1, -1);
        swift_slowDealloc(v81, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v42, 2);
      }
      goto LABEL_62;
    }
    v49 = swift_bridgeObjectRelease();
    v40 = CKShareParticipant.participantID.getter(v49);

  }
  else
  {
    if (qword_100837340 != -1)
      swift_once(&qword_100837340, sub_10039CA78);
    v50 = type metadata accessor for Logger(0);
    sub_10001AAA8(v50, (uint64_t)qword_100847C10);
    v51 = v0;
    v52 = v2;
    v53 = v51;
    v54 = v52;
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v100 = v56;
      v57 = swift_slowAlloc(22, -1);
      v99 = swift_slowAlloc(64, -1);
      v103 = v99;
      *(_DWORD *)v57 = 136446466;
      v58 = objc_msgSend(v53, "remObjectID");
      if (v58)
      {
        v59 = v58;
        v60 = objc_msgSend(v58, "description");

        v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
        v63 = v62;

      }
      else
      {
        v63 = 0xE300000000000000;
        v61 = 7104878;
      }
      v102 = sub_10001A820(v61, v63, &v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103);

      *(_QWORD *)&v89 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v57 + 12) = 2082;
      v90 = objc_msgSend(v54, "remObjectID", v89);
      if (v90)
      {
        v91 = v90;
        v92 = objc_msgSend(v90, "description");

        v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
        v95 = v94;

      }
      else
      {
        v95 = 0xE300000000000000;
        v93 = 7104878;
      }
      v102 = sub_10001A820(v93, v95, &v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v55, v100, "📓 REMSharedActivityJournaling: Unable to get ckServerShare from reminder's list. Assuming unit testing and returning userRecordID {reminderObjectID: %{public}s, listObjectID: %{public}s}", (uint8_t *)v57, 0x16u);
      swift_arrayDestroy(v99, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v99, -1, -1);
      swift_slowDealloc(v57, -1, -1);

    }
    else
    {

    }
  }
  return v40;
}

uint64_t sub_1002A009C(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  id v25;
  void *v26;
  id v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  void *v29;
  uint64_t v30;
  uint64_t ObjCClassFromMetadata;
  NSString v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  void *v61;
  id v62;
  uint64_t v63;
  id v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  void *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  id v84;
  uint64_t result;
  void *v86;
  NSString v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t KeyPath;
  Swift::String v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  _QWORD v112[3];
  char v113[8];
  uint64_t v114;
  _BYTE v115[16];

  v2 = v1;
  v106 = a1;
  v3 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v3);
  v5 = (char *)&v95 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v108 = *(_QWORD *)(v6 - 8);
  v109 = v6;
  __chkstk_darwin(v6);
  v107 = (char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v95 - v9;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v15);
  v17 = (char *)&v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v95 - v19;
  *(_QWORD *)&v22 = __chkstk_darwin(v21).n128_u64[0];
  v24 = (char *)&v95 - v23;
  v25 = objc_msgSend(v2, "account", v22);
  if (!v25)
    goto LABEL_7;
  v26 = v25;
  v105 = v10;
  v27 = objc_msgSend(v25, "identifier");

  if (v27)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v27);

    v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
    v28(v20, 0, 1, v11);
  }
  else
  {
    v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
    v28(v20, 1, 1, v11);
  }
  sub_1000A5CA8((uint64_t)v20, (uint64_t)v24, (uint64_t *)&unk_100839C80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v24, 1, v11))
  {
    sub_10000882C((uint64_t)v24, (uint64_t *)&unk_100839C80);
LABEL_7:
    v29 = (void *)objc_opt_self(REMError);
    v30 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v30);
    v32 = String._bridgeToObjectiveC()();
    v33 = objc_msgSend(v29, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v32);

    swift_willThrow(v34);
    goto LABEL_8;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v24, v11);
  v50 = sub_10000882C((uint64_t)v24, (uint64_t *)&unk_100839C80);
  v51 = UUID.uuidString.getter(v50);
  v53 = v52;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  sub_1002A16C8((uint64_t)v5);
  v55 = v108;
  v54 = v109;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48))(v5, 1, v109) == 1)
  {
    swift_bridgeObjectRelease();
    v89 = sub_10000882C((uint64_t)v5, (uint64_t *)&unk_1008380D0);
    __chkstk_darwin(v89);
    sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    v90 = &unk_1006B28A8;
  }
  else
  {
    v101 = v51;
    v102 = v28;
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v105, v5, v54);
    v56 = sub_10029F310();
    if (v57)
    {
      v58 = v56;
      v59 = v57;
      v60 = objc_msgSend(v2, "parentCloudObject");
      v100 = v58;
      if (v60)
      {
        v61 = v60;
        v62 = objc_msgSend((id)swift_getObjCClassFromObject(), "cdEntityName");
        v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
        v103 = v63;

        v64 = objc_msgSend(v61, "ckIdentifier");
        if (v64)
        {
          v65 = v64;
          v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
          v104 = v66;

        }
        else
        {

          v99 = 0;
          v104 = 0;
        }
      }
      else
      {
        v99 = 0;
        v103 = 0;
        v104 = 0;
        v97 = 0;
      }
      v69 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
      v70 = (void *)swift_getObjCClassFromMetadata(v69);
      v71 = objc_msgSend(v70, "cdEntityName");
      v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
      v73 = v72;

      v74 = objc_msgSend(v2, "ckIdentifier");
      if (v74)
      {
        v75 = v74;
        v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
        v95 = v76;

        v77 = qword_1006B2908[(char)v106];
        v79 = v108;
        v78 = v109;
        v80 = v59;
        v81 = (uint64_t)v107;
        v82 = v53;
        v83 = v105;
        (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v107, v105, v109);
        v102(v17, 1, 1, v11);
        v84 = objc_allocWithZone((Class)REMSharedEntitySyncActivity);
        v49 = sub_1001074B8(v101, v82, v81, v77, v100, v80, v97, v103, v99, v104, v96, v95, v98, v73, (uint64_t)v17);
        (*(void (**)(char *, uint64_t))(v79 + 8))(v83, v78);
        return (uint64_t)v49;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v86 = (void *)objc_opt_self(REMError);
      v87 = String._bridgeToObjectiveC()();
      v33 = objc_msgSend(v86, "unexpectedNilPropertyWithClass:property:", v70, v87);

      swift_willThrow(v88);
      (*(void (**)(char *, uint64_t))(v108 + 8))(v105, v109);
LABEL_8:
      if (qword_100837340 != -1)
        swift_once(&qword_100837340, sub_10039CA78);
      v35 = type metadata accessor for Logger(0);
      sub_10001AAA8(v35, (uint64_t)qword_100847C10);
      v36 = v2;
      swift_errorRetain(v33);
      v37 = v36;
      v38 = swift_errorRetain(v33);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v39, v40))
      {
        v41 = swift_slowAlloc(32, -1);
        v42 = swift_slowAlloc(96, -1);
        v110 = v42;
        *(_DWORD *)v41 = 136315650;
        v114 = sub_10001A820(0xD000000000000010, 0x80000001006FECB0, &v110);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115);
        *(_WORD *)(v41 + 12) = 2082;
        v43 = objc_msgSend(v37, "remObjectID");
        if (v43)
        {
          v44 = v43;
          v45 = objc_msgSend(v43, "description");

          v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
          v48 = v47;

        }
        else
        {
          v48 = 0xE300000000000000;
          v46 = 7104878;
        }
        v114 = sub_10001A820(v46, v48, &v110);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115);

        swift_bridgeObjectRelease();
        *(_WORD *)(v41 + 22) = 2082;
        swift_getErrorValue(v33, v113, v112);
        v67 = Error.rem_errorDescription.getter(v112[1], v112[2]);
        v114 = sub_10001A820(v67, v68, &v110);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115);
        swift_bridgeObjectRelease();
        swift_errorRelease(v33);
        swift_errorRelease(v33);
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "📓 %s: An unexpected error occurred {remObjectID: %{public}s, description: %{public}s}", (uint8_t *)v41, 0x20u);
        swift_arrayDestroy(v42, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v42, -1, -1);
        swift_slowDealloc(v41, -1, -1);

        swift_errorRelease(v33);
        return 0;
      }
      else
      {
        swift_errorRelease(v33);

        swift_errorRelease(v33);
        swift_errorRelease(v33);

        return 0;
      }
    }
    swift_bridgeObjectRelease();
    __chkstk_darwin(v91);
    sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    v90 = &unk_1006B28D8;
  }
  KeyPath = swift_getKeyPath(v90);
  v110 = 0;
  v111 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v93._object = (void *)0x80000001006F8C10;
  v93._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v93);
  v114 = KeyPath;
  v94 = sub_10001A630((uint64_t *)&unk_10083AEC0);
  _print_unlocked<A, B>(_:_:)(&v114, &v110, v94, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v110, v111, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
  __break(1u);
  return result;
}

uint64_t sub_1002A0A88()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  void *v24;
  id v25;
  Swift::String v26;
  Swift::Bool v27;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (!objc_msgSend(v0, "isSharedViaICloud"))
  {
    if (qword_100837340 != -1)
      swift_once(&qword_100837340, sub_10039CA78);
    v10 = type metadata accessor for Logger(0);
    sub_10001AAA8(v10, (uint64_t)qword_100847C10);
    v2 = v0;
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.info.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = swift_slowAlloc(22, -1);
      v6 = swift_slowAlloc(64, -1);
      v38 = v6;
      *(_DWORD *)v5 = 136315394;
      v37 = sub_10001A820(0xD000000000000017, 0x80000001006FECD0, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
      *(_WORD *)(v5 + 12) = 2080;
      v11 = Bool.yesno.getter(objc_msgSend(v2, "isSharedViaICloud"));
      v37 = sub_10001A820(v11, v12, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);

      swift_bridgeObjectRelease();
      v9 = "📓 %s: Object is not eligible for journaling {isSharedViaICloud: %s}";
      goto LABEL_11;
    }
LABEL_29:

    return 0;
  }
  if ((objc_msgSend(v0, "isConcealed") & 1) == 0)
  {
    if (sub_10029EEB8())
    {
      if (qword_100837340 != -1)
        swift_once(&qword_100837340, sub_10039CA78);
      v16 = type metadata accessor for Logger(0);
      sub_10001AAA8(v16, (uint64_t)qword_100847C10);
      v2 = v0;
      v3 = Logger.logObject.getter(v2);
      v17 = static os_log_type_t.info.getter(v3);
      if (os_log_type_enabled(v3, v17))
      {
        v18 = swift_slowAlloc(22, -1);
        v19 = swift_slowAlloc(64, -1);
        v38 = v19;
        *(_DWORD *)v18 = 136315394;
        v37 = sub_10001A820(0xD000000000000017, 0x80000001006FECD0, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
        *(_WORD *)(v18 + 12) = 2080;
        v20 = sub_10029EEB8();
        v21 = Bool.yesno.getter(v20);
        v37 = sub_10001A820(v21, v22, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v3, v17, "📓 %s: Object is not eligible for journaling {isAuthoredByCurrentUser: %s}", (uint8_t *)v18, 0x16u);
        swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v19, -1, -1);
        v15 = v18;
        goto LABEL_13;
      }
    }
    else
    {
      v23 = objc_msgSend(v0, "managedObjectContext");
      if (v23)
      {
        v24 = v23;
        v25 = objc_msgSend(v23, "transactionAuthor");

        if (v25)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(v25);

          v26._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(RDStoreControllerICCloudContextAuthor);
          v27 = String.hasPrefix(_:)(v26);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v27)
            return 1;
        }
      }
      if (qword_100837340 != -1)
        swift_once(&qword_100837340, sub_10039CA78);
      v29 = type metadata accessor for Logger(0);
      sub_10001AAA8(v29, (uint64_t)qword_100847C10);
      v2 = v0;
      v3 = Logger.logObject.getter(v2);
      v30 = static os_log_type_t.info.getter(v3);
      if (os_log_type_enabled(v3, v30))
      {
        v31 = 7104878;
        v5 = swift_slowAlloc(22, -1);
        v6 = swift_slowAlloc(64, -1);
        v38 = v6;
        *(_DWORD *)v5 = 136315394;
        v37 = sub_10001A820(0xD000000000000017, 0x80000001006FECD0, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
        *(_WORD *)(v5 + 12) = 2082;
        v32 = objc_msgSend(v2, "managedObjectContext");
        if (v32
          && (v33 = v32,
              v34 = objc_msgSend(v32, "transactionAuthor"),
              v33,
              v34))
        {
          v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
          v36 = v35;

        }
        else
        {
          v36 = 0xE300000000000000;
        }
        v37 = sub_10001A820(v31, v36, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);

        swift_bridgeObjectRelease();
        v14 = v30;
        v9 = "📓 %s: Object is not eligible for journaling - transactionAuthor: %{public}s";
        v13 = v3;
        goto LABEL_12;
      }
    }
    goto LABEL_29;
  }
  if (qword_100837340 != -1)
    swift_once(&qword_100837340, sub_10039CA78);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_100847C10);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter(v3);
  if (!os_log_type_enabled(v3, v4))
    goto LABEL_29;
  v5 = swift_slowAlloc(22, -1);
  v6 = swift_slowAlloc(64, -1);
  v38 = v6;
  *(_DWORD *)v5 = 136315394;
  v37 = sub_10001A820(0xD000000000000017, 0x80000001006FECD0, &v38);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
  *(_WORD *)(v5 + 12) = 2080;
  v7 = Bool.yesno.getter(objc_msgSend(v2, "isConcealed"));
  v37 = sub_10001A820(v7, v8, &v38);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);

  swift_bridgeObjectRelease();
  v9 = "📓 %s: Object is not eligible for journaling {isConcealed: %s}";
LABEL_11:
  v13 = v3;
  v14 = v4;
LABEL_12:
  _os_log_impl((void *)&_mh_execute_header, v13, v14, v9, (uint8_t *)v5, 0x16u);
  swift_arrayDestroy(v6, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v6, -1, -1);
  v15 = v5;
LABEL_13:
  swift_slowDealloc(v15, -1, -1);

  return 0;
}

uint64_t sub_1002A11A8(void *a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  os_log_type_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  double v33;
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  os_log_type_t v40;
  const char *v41;
  uint64_t v43;
  os_log_type_t v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v5 = sub_10020F82C(a1, a2);
  if (v5)
  {
    if (qword_100837340 != -1)
      swift_once(&qword_100837340, sub_10039CA78);
    v6 = type metadata accessor for Logger(0);
    sub_10001AAA8(v6, (uint64_t)qword_100847C10);
    v7 = a1;
    v8 = a3;
    v9 = v7;
    v10 = v8;
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v44 = v12;
      v46 = v5;
      v13 = swift_slowAlloc(32, -1);
      v43 = swift_slowAlloc(96, -1);
      v49 = v43;
      *(_DWORD *)v13 = 136315650;
      v47 = sub_10001A820(0xD000000000000023, 0x80000001006FEC80, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      *(_WORD *)(v13 + 12) = 2082;
      v14 = objc_msgSend(v9, "activityTypeDescription");
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

      v47 = sub_10001A820(v15, v17, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);

      *(_QWORD *)&v18 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v13 + 22) = 2082;
      v19 = objc_msgSend(v10, "remObjectID", v18);
      if (v19)
      {
        v20 = v19;
        v21 = objc_msgSend(v19, "description");

        v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
        v24 = v23;

      }
      else
      {
        v22 = 7104878;
        v24 = 0xE300000000000000;
      }
      v5 = v46;
      v47 = sub_10001A820(v22, v24, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);

      swift_bridgeObjectRelease();
      v40 = v44;
LABEL_17:
      _os_log_impl((void *)&_mh_execute_header, v11, v40, v41, (uint8_t *)v13, 0x20u);
      swift_arrayDestroy(v43, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v13, -1, -1);

      return v5;
    }
  }
  else
  {
    if (qword_100837340 != -1)
      swift_once(&qword_100837340, sub_10039CA78);
    v25 = type metadata accessor for Logger(0);
    sub_10001AAA8(v25, (uint64_t)qword_100847C10);
    v26 = a1;
    v27 = a3;
    v9 = v26;
    v10 = v27;
    v11 = Logger.logObject.getter(v10);
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v28))
    {
      v45 = v28;
      v13 = swift_slowAlloc(32, -1);
      v43 = swift_slowAlloc(96, -1);
      v49 = v43;
      *(_DWORD *)v13 = 136315650;
      v47 = sub_10001A820(0xD000000000000023, 0x80000001006FEC80, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      *(_WORD *)(v13 + 12) = 2082;
      v29 = objc_msgSend(v9, "activityTypeDescription");
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      v32 = v31;

      v47 = sub_10001A820(v30, v32, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);

      *(_QWORD *)&v33 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v13 + 22) = 2082;
      v34 = objc_msgSend(v10, "remObjectID", v33);
      if (v34)
      {
        v35 = v34;
        v36 = objc_msgSend(v34, "description");

        v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
        v39 = v38;

      }
      else
      {
        v37 = 7104878;
        v39 = 0xE300000000000000;
      }
      v5 = 0;
      v47 = sub_10001A820(v37, v39, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);

      swift_bridgeObjectRelease();
      v40 = v45;
      goto LABEL_17;
    }
  }

  return v5;
}

uint64_t sub_1002A16C8@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  unsigned int v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = v1;
  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v8 = __chkstk_darwin(v7).n128_u64[0];
  v10 = (char *)&v23 - v9;
  v11 = objc_msgSend(v2, "isInserted", v8);
  v12 = objc_msgSend(v2, "ckServerRecord");
  v13 = v12;
  if (!v11)
  {
    if (v12)
    {
      v16 = objc_msgSend(v12, "modificationDate");

      if (v16)
      {
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v16);

        v17 = type metadata accessor for Date(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v6, 0, 1, v17);
      }
      else
      {
        v22 = type metadata accessor for Date(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v6, 1, 1, v22);
      }
      v21 = (uint64_t)v6;
      return sub_1000A5CA8(v21, a1, (uint64_t *)&unk_1008380D0);
    }
LABEL_8:
    v18 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a1, 1, 1, v18);
  }
  if (!v12)
    goto LABEL_8;
  v14 = objc_msgSend(v12, "creationDate");

  if (v14)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v14);

    v15 = type metadata accessor for Date(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v10, 0, 1, v15);
  }
  else
  {
    v20 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v10, 1, 1, v20);
  }
  v21 = (uint64_t)v10;
  return sub_1000A5CA8(v21, a1, (uint64_t *)&unk_1008380D0);
}

_QWORD *sub_1002A18D8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  result = _swiftEmptyArrayStorage;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain(a1);
    for (i = 0; i != v3; ++i)
    {
      v6 = sub_1002A009C(*(unsigned __int8 *)(a1 + i + 32));
      if (v6)
      {
        v7 = v6;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
        v9 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v8 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v9 >= v8 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1);
        v5 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
        specialized Array._endMutation()(v5);
      }
    }
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void sub_1002A19C4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v4 = v3;
  if ((unint64_t)a1 >> 62)
    goto LABEL_17;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v17))
  {
    v7 = 4;
    while (1)
    {
      v9 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a1)
         : *(id *)(a1 + 8 * v7);
      v10 = v9;
      v11 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      v12 = sub_1002A11A8(v9, a2, a3);
      if (v4)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        return;
      }
      v13 = v12;

      if (v13)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v14);
        v16 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v15 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v16 >= v15 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1);
        v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v13);
        specialized Array._endMutation()(v8);
      }
      ++v7;
      if (v11 == v6)
        goto LABEL_21;
    }
    __break(1u);
LABEL_17:
    if (a1 < 0)
      v17 = a1;
    else
      v17 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_21:
  swift_bridgeObjectRelease();
}

uint64_t sub_1002A1B54@<X0>(uint64_t a1@<X8>)
{
  return sub_10039D68C(a1);
}

uint64_t sub_1002A1B80()
{
  return 8;
}

_QWORD *sub_1002A1B8C(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1002A1B98@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_10039CB08();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1002A1BCC()
{
  return 8;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> REMCDReminder.validateForUpdate_Swift()()
{
  REMCDReminder.validateForInsert_Swift()();
}

uint64_t sub_1002A1BF4@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = sub_10001A630((uint64_t *)&unk_10083A280);
  inited = swift_initStackObject(v2, &v10);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C20;
  *(_QWORD *)(inited + 32) = 0x7265646E696D6572;
  *(_QWORD *)(inited + 40) = 0xEA00000000004449;
  *(_QWORD *)(inited + 48) = UUID.uuidString.getter(inited);
  *(_QWORD *)(inited + 56) = v4;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 80) = 0x44646574656C6564;
  *(_QWORD *)(inited + 88) = 0xEB00000000657461;
  v5 = type metadata accessor for RDPermanentlyHiddenReminder(0);
  *(double *)(inited + 96) = Date.timeIntervalSinceReferenceDate.getter(v5);
  *(_QWORD *)(inited + 120) = &type metadata for Double;
  *(_QWORD *)(inited + 128) = 0xD000000000000017;
  *(_QWORD *)(inited + 168) = &type metadata for Int;
  v6 = kREMSupportedVersionFor2024;
  *(_QWORD *)(inited + 136) = 0x80000001006F4060;
  *(_QWORD *)(inited + 144) = v6;
  *a1 = sub_10016E7E4(inited);
  v7 = enum case for REMJSONType.jsonObject(_:);
  v8 = type metadata accessor for REMJSONType(0);
  return (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(a1, v7, v8);
}

void sub_1002A1D2C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v43 = a2;
  v49 = sub_10001A630((uint64_t *)&unk_100842E10);
  v47 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v45 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for Date(0);
  v42 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v46 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_10001A630(&qword_100839B10);
  v5 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for UUID(0);
  v44 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v51 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630(&qword_100839B00);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for REMJSONType(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (uint64_t *)((char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v14 + 16))(v17, a1, v13, v15);
  v18 = (*(uint64_t (**)(uint64_t *, uint64_t))(v14 + 88))(v17, v13);
  if (v18 == enum case for REMJSONType.jsonObject(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v14 + 96))(v17, v13);
    v19 = *v17;
    (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for Dictionary<>.DeserializableValueType.integer<A, B><A1>(_:), v9);
    v54 = kREMSupportedVersionFor2024;
    v20 = v53;
    Dictionary<>.deserializeOptional<A>(key:valueType:defaultValue:)(&v55, 0xD000000000000017, 0x80000001006F4060, v12, &v54, v19, &type metadata for Int);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    if (v20)
    {
      swift_bridgeObjectRelease();
      return;
    }
    v27 = v55;
    if ((rem_isUnsupportedVersionByRuntime(v55) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v21 = type metadata accessor for REMJSONDeserializationError(0);
      v28 = sub_1002A222C();
      swift_allocError(v21, v28, 0, 0);
      v24 = v29;
      *v29 = v27;
      v25 = (unsigned int *)&enum case for REMJSONDeserializationError.notSupported(_:);
      goto LABEL_6;
    }
    v30 = v50;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Dictionary<>.DeserializableValueType.uuid<A, B><A1>(_:), v50);
    v32 = v51;
    v31 = v52;
    Dictionary<>.deserializeRequired<A>(key:valueType:)(0x7265646E696D6572, 0xEA00000000004449, v7, v19, v52);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v30);
    v33 = v47;
    v34 = v45;
    v35 = v49;
    (*(void (**)(char *, _QWORD, uint64_t))(v47 + 104))(v45, enum case for Dictionary<>.DeserializableValueType.date<A, B><A1>(_:), v49);
    v36 = v46;
    v37 = v48;
    Dictionary<>.deserializeRequired<A>(key:valueType:)(0x44646574656C6564, 0xEB00000000657461, v34, v19, v48);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
    v38 = swift_bridgeObjectRelease();
    v39 = v43;
    (*(void (**)(uint64_t, char *, uint64_t, __n128))(v44 + 32))(v43, v32, v31, v38);
    v40 = type metadata accessor for RDPermanentlyHiddenReminder(0);
    (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v39 + *(int *)(v40 + 20), v36, v37);
  }
  else
  {
    if (v18 == enum case for REMJSONType.jsonArray(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v14 + 96))(v17, v13);
      swift_bridgeObjectRelease();
      v21 = type metadata accessor for REMJSONDeserializationError(0);
      v22 = sub_1002A222C();
      swift_allocError(v21, v22, 0, 0);
      v24 = v23;
      v25 = (unsigned int *)&enum case for REMJSONDeserializationError.invalidData(_:);
LABEL_6:
      v26 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v24, *v25, v21);
      swift_willThrow(v26);
      return;
    }
    _diagnoseUnexpectedEnumCase<A>(type:)(v13, v13);
    __break(1u);
  }
}

uint64_t sub_1002A2204@<X0>(unint64_t *a1@<X8>)
{
  return sub_1002A1BF4(a1);
}

void sub_1002A2218(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1002A1D2C(a1, a2);
}

unint64_t sub_1002A222C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100839B18;
  if (!qword_100839B18)
  {
    v1 = type metadata accessor for REMJSONDeserializationError(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for REMJSONDeserializationError, v1);
    atomic_store(result, (unint64_t *)&qword_100839B18);
  }
  return result;
}

uint64_t sub_1002A2274@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD v19[5];
  __int128 v20;
  uint64_t v21;
  _QWORD v22[5];

  sub_100205D28(a1, (uint64_t)&v20);
  if (v21)
  {
    sub_10001BCA8(&v20, (uint64_t)v22);
    sub_100018618((uint64_t)v22, (uint64_t)&v20);
    v3 = sub_10001BA38((uint64_t)&v20, v21);
    __chkstk_darwin(v3);
    v5 = (_QWORD *)((char *)&v19[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v6 + 16))(v5);
    v7 = *v5;
    v8 = type metadata accessor for _MobileKeybagStateProvider._MKBEventsControllerImplementation();
    v19[3] = v8;
    v19[4] = &off_1007EC2D0;
    v19[0] = v7;
    v9 = type metadata accessor for _MobileKeybagStateProvider();
    v10 = swift_allocObject(v9, 98, 7);
    v11 = sub_10001BA38((uint64_t)v19, v8);
    __chkstk_darwin(v11);
    v13 = (_QWORD *)((char *)&v19[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v14 + 16))(v13);
    v15 = sub_1002A3D58(*v13, v10);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v19);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v20);
    a2[3] = v9;
    a2[4] = (uint64_t)&off_1007EC2F8;
    *a2 = v15;
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v22);
  }
  else
  {
    sub_1002A4218((uint64_t)&v20);
    if (qword_1008370D0 != -1)
      swift_once(&qword_1008370D0, sub_1002A261C);
    v17 = qword_100842E38;
    a2[3] = type metadata accessor for _MobileKeybagStateProvider();
    a2[4] = (uint64_t)&off_1007EC2F8;
    *a2 = v17;
    return swift_retain();
  }
}

uint64_t sub_1002A2454()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100842E20);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100842E20);
  if (qword_100837628 != -1)
    swift_once(&qword_100837628, sub_1004A1838);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872058);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1002A24E4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002A2518 + 4 * byte_1006B2970[a1]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_1002A2518()
{
  return 0x64656B636F6C6E75;
}

uint64_t sub_1002A2530()
{
  return 0x64656B636F6CLL;
}

uint64_t sub_1002A2544()
{
  return 0x676E696B636F6CLL;
}

uint64_t sub_1002A2558()
{
  return 0x64656C6261736964;
}

unint64_t sub_1002A2570()
{
  return 0xD000000000000010;
}

uint64_t sub_1002A258C()
{
  return 0x5065636172476E69;
}

uint64_t sub_1002A25B0()
{
  return 0x7472657373416E69;
}

uint64_t sub_1002A25D4()
{
  return 0x6C6E556F69426E69;
}

uint64_t sub_1002A25F4()
{
  unsigned __int8 *v0;

  return sub_1002A24E4(*v0);
}

uint64_t type metadata accessor for RDKeybagStateProviderFactory()
{
  return objc_opt_self(_TtC7remindd28RDKeybagStateProviderFactory);
}

uint64_t sub_1002A261C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v9[3];
  uint64_t v10;
  _UNKNOWN **v11;

  v10 = type metadata accessor for _MobileKeybagStateProvider._MKBEventsControllerImplementation();
  v11 = &off_1007EC2D0;
  v9[0] = swift_initStaticObject(v10, &unk_100837A10);
  v0 = type metadata accessor for _MobileKeybagStateProvider();
  v1 = swift_allocObject(v0, 98, 7);
  v2 = sub_10001BA38((uint64_t)v9, v10);
  __chkstk_darwin(v2);
  v4 = (_QWORD *)((char *)&v9[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v5 + 16))(v4);
  v6 = sub_1002A3D58(*v4, v1);
  result = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v9);
  qword_100842E38 = v6;
  return result;
}

uint64_t sub_1002A26F0@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 97);
  return result;
}

uint64_t sub_1002A26FC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 72))
    MKBEventsUnregister();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 88));
  return swift_deallocClassInstance(v0, 98, 7);
}

uint64_t type metadata accessor for _MobileKeybagStateProvider()
{
  return objc_opt_self(_TtC7reminddP33_99AA7822DE37A602875DE59F14E9E1BD26_MobileKeybagStateProvider);
}

void sub_1002A276C(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint8_t *v26;
  _DWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD aBlock[5];
  uint64_t v48;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  __chkstk_darwin(v4);
  v42 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v40 = *(_QWORD *)(v6 - 8);
  v41 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v45 = os_transaction_create("com.apple.remindd._MobileKeybagStateProvider.eventQueue_lockState.didSet");
  if (qword_1008370C8 != -1)
    swift_once(&qword_1008370C8, sub_1002A2454);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_10001AAA8(v13, (uint64_t)qword_100842E20);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "os_transaction INIT {name: com.apple.remindd._MobileKeybagStateProvider.eventQueue_lockState.didSet}", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  v18 = *(void **)(v1 + 56);
  *v12 = v18;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v12);
  v20 = (*(uint64_t (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v18 & 1) == 0)
  {
    __break(1u);
    JUMPOUT(0x1002A2E6CLL);
  }
  v21 = a1;
  v22 = *(unsigned __int8 *)(v1 + 96);
  v23 = Logger.logObject.getter(v20);
  v24 = static os_log_type_t.default.getter(v23);
  v25 = os_log_type_enabled(v23, v24);
  if (v22 == (_DWORD)v21)
  {
    if (v25)
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "os_transaction RELEASE {name: com.apple.remindd._MobileKeybagStateProvider.eventQueue_lockState.didSet}", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
      swift_unknownObjectRelease(v45);

    }
    else
    {

      swift_unknownObjectRelease(v45);
    }
  }
  else
  {
    if (v25)
    {
      v27 = (_DWORD *)swift_slowAlloc(22, -1);
      aBlock[0] = swift_slowAlloc(64, -1);
      *v27 = 136446466;
      __asm { BR              X9 }
    }

    v28 = *(void **)(v2 + 64);
    v29 = swift_allocObject(&unk_1007EC3B8, 40, 7);
    *(_QWORD *)(v29 + 16) = v2;
    *(_BYTE *)(v29 + 24) = v22;
    v30 = v45;
    *(_QWORD *)(v29 + 32) = v45;
    aBlock[4] = sub_1002A41C8;
    v48 = v29;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000094C8;
    aBlock[3] = &unk_1007EC3D0;
    v31 = _Block_copy(aBlock);
    v32 = v28;
    swift_retain();
    swift_unknownObjectRetain(v30);
    static DispatchQoS.unspecified.getter(v33);
    v46 = _swiftEmptyArrayStorage;
    v34 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v35 = sub_10001A630((uint64_t *)&unk_100838000);
    v36 = sub_1000C4C0C((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000);
    v37 = v42;
    v38 = v44;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v35, v36, v44, v34);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v37, v31);
    _Block_release(v31);
    swift_unknownObjectRelease(v30);

    (*(void (**)(char *, uint64_t))(v43 + 8))(v37, v38);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v8, v41);
    swift_release(v48);
  }
}

void sub_1002A2EB4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  char v7;

  v7 = a2;
  PassthroughSubject.send(_:)(&v7);
  if (qword_1008370C8 != -1)
    swift_once(&qword_1008370C8, sub_1002A2454);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001AAA8(v2, (uint64_t)qword_100842E20);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "os_transaction RELEASE {name: com.apple.remindd._MobileKeybagStateProvider.eventQueue_lockState.didSet}", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

}

uint64_t sub_1002A2F98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void *v17;
  id v18;
  uint64_t result;
  int v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD aBlock[5];
  uint64_t v41;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v37 = *(_QWORD *)(v2 - 8);
  v38 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v5 - 8);
  v36 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v34 = os_transaction_create("com.apple.remindd._MobileKeybagStateProvider.eventQueue_hasUnlockedSinceBoot.didSet");
  if (qword_1008370C8 != -1)
    swift_once(&qword_1008370C8, sub_1002A2454);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10001AAA8(v12, (uint64_t)qword_100842E20);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "os_transaction INIT {name: com.apple.remindd._MobileKeybagStateProvider.eventQueue_hasUnlockedSinceBoot.didSet}", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  v17 = *(void **)(v0 + 56);
  *v11 = v17;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v11);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v17 & 1) != 0)
  {
    v20 = *(unsigned __int8 *)(v0 + 97);
    v21 = Logger.logObject.getter(result);
    v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v23 = 67109120;
      LODWORD(aBlock[0]) = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(aBlock, (char *)aBlock + 4);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "_MobileKeybagStateProvider: Has unlocked since boot: %{BOOL}d", v23, 8u);
      swift_slowDealloc(v23, -1, -1);
    }

    v24 = *(void **)(v1 + 64);
    v25 = swift_allocObject(&unk_1007EC408, 40, 7);
    *(_QWORD *)(v25 + 16) = v1;
    *(_BYTE *)(v25 + 24) = v20;
    v26 = v34;
    *(_QWORD *)(v25 + 32) = v34;
    aBlock[4] = sub_1002A4208;
    v41 = v25;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000094C8;
    aBlock[3] = &unk_1007EC420;
    v27 = _Block_copy(aBlock);
    v28 = v24;
    swift_retain();
    swift_unknownObjectRetain(v26);
    static DispatchQoS.unspecified.getter(v29);
    v39 = _swiftEmptyArrayStorage;
    v30 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v31 = sub_10001A630((uint64_t *)&unk_100838000);
    v32 = sub_1000C4C0C((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000);
    v33 = v38;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v31, v32, v38, v30);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v27);
    _Block_release(v27);
    swift_unknownObjectRelease(v26);

    (*(void (**)(char *, uint64_t))(v37 + 8))(v4, v33);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v36);
    return swift_release(v41);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1002A337C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  char v8;

  v2 = *(_QWORD *)(a1 + 88);
  v8 = a2;
  swift_retain();
  CurrentValueSubject.send(_:)(&v8);
  swift_release(v2);
  if (qword_1008370C8 != -1)
    swift_once(&qword_1008370C8, sub_1002A2454);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001AAA8(v3, (uint64_t)qword_100842E20);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "os_transaction RELEASE {name: com.apple.remindd._MobileKeybagStateProvider.eventQueue_hasUnlockedSinceBoot.didSet}", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

}

uint64_t sub_1002A3470()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v16[5];
  uint64_t v17;

  v1 = v0;
  v2 = os_transaction_create("com.apple.remindd._MobileKeybagStateProvider.updateInternalStates");
  if (qword_1008370C8 != -1)
    swift_once(&qword_1008370C8, sub_1002A2454);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001AAA8(v3, (uint64_t)qword_100842E20);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "os_transaction INIT {name: com.apple.remindd._MobileKeybagStateProvider.updateInternalStates}", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = *(void **)(v1 + 56);
  v9 = swift_allocObject(&unk_1007EC340, 32, 7);
  *(_QWORD *)(v9 + 16) = v1;
  *(_QWORD *)(v9 + 24) = v2;
  v10 = swift_allocObject(&unk_1007EC368, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_1002A3948;
  *(_QWORD *)(v10 + 24) = v9;
  v16[4] = sub_1000098E4;
  v17 = v10;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_1000098C4;
  v16[3] = &unk_1007EC380;
  v11 = _Block_copy(v16);
  v12 = v17;
  v13 = v8;
  swift_retain();
  swift_unknownObjectRetain(v2);
  swift_retain();
  swift_release(v12);
  dispatch_sync(v13, v11);

  swift_unknownObjectRelease(v2);
  _Block_release(v11);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 93, 268, 30, 1);
  swift_release(v9);
  result = swift_release(v10);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

void sub_1002A3678(uint64_t a1)
{
  char v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  NSObject *oslog;

  if (sub_1002A4058() != *(_BYTE *)(a1 + 97))
  {
    *(_BYTE *)(a1 + 97) = sub_1002A4058();
    sub_1002A2F98();
  }
  if (*(unsigned __int8 *)(a1 + 96) != sub_1002A4178())
  {
    v2 = sub_1002A4178();
    v3 = *(_BYTE *)(a1 + 96);
    *(_BYTE *)(a1 + 96) = v2;
    sub_1002A276C(v3);
  }
  if (qword_1008370C8 != -1)
    swift_once(&qword_1008370C8, sub_1002A2454);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001AAA8(v4, (uint64_t)qword_100842E20);
  oslog = Logger.logObject.getter(v5);
  v6 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v6, "os_transaction RELEASE {name: com.apple.remindd._MobileKeybagStateProvider.updateInternalStates}", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

}

void sub_1002A3790()
{
  unint64_t v0;
  Class isa;

  v0 = sub_1002B0DF8((uint64_t)&off_1007E0198);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v0);
  qword_100842E40 = (uint64_t)isa;
}

uint64_t type metadata accessor for _MobileKeybagStateProvider._MKBEventsControllerImplementation()
{
  return objc_opt_self(_TtCC7reminddP33_99AA7822DE37A602875DE59F14E9E1BD26_MobileKeybagStateProvider34_MKBEventsControllerImplementation);
}

uint64_t storeEnumTagSinglePayload for RDKeybagLockState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1002A3854 + 4 * byte_1006B297E[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1002A3888 + 4 * byte_1006B2979[v4]))();
}

uint64_t sub_1002A3888(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002A3890(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002A3898);
  return result;
}

uint64_t sub_1002A38A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002A38ACLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1002A38B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002A38B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDKeybagLockState()
{
  return &type metadata for RDKeybagLockState;
}

unint64_t sub_1002A38D8()
{
  unint64_t result;

  result = qword_100843138;
  if (!qword_100843138)
  {
    result = swift_getWitnessTable(&unk_1006B2ABC, &type metadata for RDKeybagLockState);
    atomic_store(result, (unint64_t *)&qword_100843138);
  }
  return result;
}

uint64_t sub_1002A391C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1002A3948()
{
  uint64_t v0;

  sub_1002A3678(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1002A3950()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1002A3960(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t Strong;
  uint64_t v17;
  void *v18;
  id v19;
  char v20;
  unsigned __int8 v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  _BYTE v26[24];

  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v26[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a3 + 16;
  v10 = os_transaction_create("com.apple.remindd._MobileKeybagStateProvider.mkbEventRegistration.callback");
  if (qword_1008370C8 != -1)
    swift_once(&qword_1008370C8, sub_1002A2454);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_10001AAA8(v11, (uint64_t)qword_100842E20);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "os_transaction INIT {name: com.apple.remindd._MobileKeybagStateProvider.mkbEventRegistration.callback}", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  swift_beginAccess(v9, v26, 0, 0);
  Strong = swift_weakLoadStrong(v9);
  if (Strong)
  {
    v17 = Strong;
    v18 = *(void **)(Strong + 56);
    *v8 = v18;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
    v19 = v18;
    LOBYTE(v18) = _dispatchPreconditionTest(_:)(v8);
    (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
    if ((v18 & 1) == 0)
    {
      __break(1u);
      return;
    }
    if (a1)
    {
      if (a1 == 1)
      {
        *(_BYTE *)(v17 + 97) = 1;
        sub_1002A2F98();
      }
      else
      {
        v20 = sub_1002A4178();
        v21 = *(_BYTE *)(v17 + 96);
        *(_BYTE *)(v17 + 96) = v20;
        sub_1002A276C(v21);
      }
    }
    Strong = swift_release(v17);
  }
  v22 = Logger.logObject.getter(Strong);
  v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "os_transaction RELEASE {name: com.apple.remindd._MobileKeybagStateProvider.mkbEventRegistration.callback}", v24, 2u);
    swift_slowDealloc(v24, -1, -1);
  }
  swift_unknownObjectRelease(v10);

}

uint64_t sub_1002A3BC4(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  _QWORD v13[5];
  uint64_t v14;
  __int128 v15[2];
  _QWORD v16[5];

  v16[3] = type metadata accessor for _MobileKeybagStateProvider._MKBEventsControllerImplementation();
  v16[4] = &off_1007EC2D0;
  v16[0] = a2;
  swift_retain();
  sub_1002A3470();
  v4 = *(void **)(a1 + 56);
  v5 = swift_allocObject(&unk_1007EC458, 24, 7);
  swift_weakInit(v5 + 16, a1);
  sub_100018618((uint64_t)v16, (uint64_t)v15);
  v6 = swift_allocObject(&unk_1007EC480, 64, 7);
  *(_QWORD *)(v6 + 16) = v5;
  sub_10001BCA8(v15, v6 + 24);
  v7 = swift_allocObject(&unk_1007EC4A8, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_1002A42A8;
  *(_QWORD *)(v7 + 24) = v6;
  v13[4] = sub_1002A42D8;
  v14 = v7;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_1001BCC34;
  v13[3] = &unk_1007EC4C0;
  v8 = _Block_copy(v13);
  v9 = v14;
  v10 = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release(v9);
  v11 = MKBEventsRegister(v10, v8);
  _Block_release(v8);
  swift_release(v5);
  swift_release(v6);

  swift_release(v7);
  *(_QWORD *)(a1 + 72) = v11;
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v16);
}

uint64_t sub_1002A3D58(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD v32[3];
  uint64_t v33;
  _UNKNOWN **v34;

  v30 = a2;
  v29 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v3 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for _MobileKeybagStateProvider._MKBEventsControllerImplementation();
  v34 = &off_1007EC2D0;
  v32[0] = a1;
  v26[1] = sub_1000D30A4();
  static DispatchQoS.userInteractive.getter();
  v31 = _swiftEmptyArrayStorage;
  v12 = sub_10009FC50((unint64_t *)&qword_10083A990, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v28 = v12;
  v13 = sub_10001A630((uint64_t *)&unk_10083DBD0);
  v27 = v13;
  v14 = sub_1000C4C0C((unint64_t *)&qword_10083A9A0, (uint64_t *)&unk_10083DBD0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v13, v14, v6, v12);
  v15 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v17 = v5;
  v18 = v5;
  v19 = v29;
  v16(v18, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v29);
  v20 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000021, 0x80000001006FEFE0, v11, v8, v17, 0);
  v21 = v30;
  *(_QWORD *)(v30 + 56) = v20;
  static DispatchQoS.userInteractive.getter();
  v31 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v27, v14, v6, v28);
  v16(v17, v15, v19);
  *(_QWORD *)(v21 + 64) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000029, 0x80000001006FF010, v11, v8, v17, 0);
  *(_QWORD *)(v21 + 72) = 0;
  v22 = sub_10001A630(&qword_100843140);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  *(_QWORD *)(v21 + 80) = PassthroughSubject.init()();
  LOBYTE(v31) = 0;
  v23 = sub_10001A630(&qword_1008408D8);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  *(_QWORD *)(v21 + 88) = CurrentValueSubject.init(_:)(&v31);
  *(_WORD *)(v21 + 96) = 4;
  sub_100018618((uint64_t)v32, v21 + 16);
  v24 = sub_10000A388(v32, v33);
  sub_1002A3BC4(v21, *v24);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v32);
  return v21;
}

BOOL sub_1002A4058()
{
  int v0;
  int v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;

  v0 = MKBDeviceUnlockedSinceBoot();
  v1 = v0;
  if ((v0 & 0x80000000) == 0)
    return v0 == 1;
  if (qword_1008370C8 != -1)
    swift_once(&qword_1008370C8, sub_1002A2454);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001AAA8(v3, (uint64_t)qword_100842E20);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 67109120;
    v8 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "_MobileKeybagStateProvider: MKBDeviceUnlockedSinceBoot() unexpectedly returned %d. Assuming device is before first unlock.", v7, 8u);
    swift_slowDealloc(v7, -1, -1);
  }

  return 0;
}

uint64_t sub_1002A4178()
{
  unsigned int v0;

  if (qword_1008370D8 != -1)
    swift_once(&qword_1008370D8, sub_1002A3790);
  v0 = MKBGetDeviceLockState(qword_100842E40);
  if (v0 < 8)
    return v0 + 1;
  else
    return 0;
}

void sub_1002A41C8()
{
  uint64_t v0;

  sub_1002A2EB4(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1002A41DC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1002A4208()
{
  uint64_t v0;

  sub_1002A337C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1002A4218(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A630(&qword_100840910);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002A4258()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002A427C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

void sub_1002A42A8(char a1, uint64_t a2)
{
  uint64_t v2;

  sub_1002A3960(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1002A42B4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002A42D8(int a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1)
    v2 = 2 * (a1 == 1);
  else
    v2 = 1;
  return (*(uint64_t (**)(uint64_t))(v1 + 16))(v2);
}

void sub_1002A4324(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, "sharedToMeReminderCKIdentifier");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_1002A4388(uint64_t a1, void **a2)
{
  void *v2;
  NSString v3;
  id v4;

  v2 = *a2;
  if (*(_QWORD *)(a1 + 8))
    v3 = String._bridgeToObjectiveC()();
  else
    v3 = 0;
  v4 = v3;
  objc_msgSend(v2, "setSharedToMeReminderCKIdentifier:");

}

void sub_1002A43E4(uint64_t a1, char a2)
{
  uint64_t v3;

  v3 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v3);
  __asm { BR              X10 }
}

uint64_t sub_1002A4460()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  _QWORD *v3;
  void *v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  KeyPath = swift_getKeyPath(&unk_1006B2C18);
  v3 = sub_1001DF8D0(v0);
  v4 = (void *)sub_100341B90(KeyPath, (uint64_t)v3);
  swift_release(KeyPath);
  v5 = v4;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v5);
  v6 = *(_QWORD *)(v1 - 40);
  v8 = *(_QWORD *)(v6 + 16);
  v7 = *(_QWORD *)(v6 + 24);
  if (v8 >= v7 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1);
  v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v5);
  specialized Array._endMutation()(v9);

  v10 = sub_1000153F4(0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
  v11 = *(_QWORD *)(v1 - 40);
  v13 = *(_QWORD *)(v11 + 16);
  v12 = *(_QWORD *)(v11 + 24);
  if (v13 >= v12 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1);
  v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v10);
  specialized Array._endMutation()(v14);
  return sub_10000D2BC(*(_QWORD *)(v1 - 40));
}

id sub_1002A494C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "hashtagLabel");
  *a2 = result;
  return result;
}

id sub_1002A4984(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setHashtagLabel:", *a1);
}

id sub_1002A4998@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "type");
  *a2 = (_WORD)result;
  return result;
}

id sub_1002A49C8(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, "setType:", *a1);
}

id sub_1002A49DC(id result, char a2)
{
  if (a2 == 2 || a2 == 1)
    return result;
  if (!a2)
    return (id)swift_bridgeObjectRetain(result);
  return result;
}

id sub_1002A4A00@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "account");
  *a2 = result;
  return result;
}

id sub_1002A4A38(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setAccount:", *a1);
}

void sub_1002A4A54(void *a1, char a2)
{
  if (a2 == 2 || a2 == 1)
  {

  }
  else if (!a2)
  {
    swift_bridgeObjectRelease(a1);
  }
}

id sub_1002A4A78@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "reminder");
  *a2 = result;
  return result;
}

id sub_1002A4AB0(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setReminder:", *a1);
}

id sub_1002A4ADC@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "hashtagLabel");
  *a2 = result;
  return result;
}

id sub_1002A4B14(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setHashtagLabel:", *a1);
}

uint64_t sub_1002A4B28(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t inited;
  uint64_t KeyPath;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  Class isa;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  id v46;
  NSString v47;
  id v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  void *v52;
  unint64_t v53;
  _BOOL8 v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t result;
  uint64_t v63;
  Swift::String v64;
  uint64_t v65;
  _QWORD v66[2];
  id v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _OWORD v76[2];
  void *v77;
  __int128 v78;
  void *v79;
  _BYTE v80[56];
  _QWORD *v81;

  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  v71 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002A43E4(a1, 0);
  v9 = v8;
  v10 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v11 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v11), "entity");
  objc_msgSend(v10, "setEntity:", v12);

  objc_msgSend(v10, "setAffectedStores:", 0);
  objc_msgSend(v10, "setPredicate:", v9);
  objc_msgSend(v10, "setResultType:", 2);

  v70 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v70, v80);
  *(_OWORD *)(inited + 16) = xmmword_1006A8550;
  *(_QWORD *)(inited + 32) = swift_getKeyPath(&unk_1006B2D80);
  KeyPath = swift_getKeyPath(&unk_1006B2C18);
  *(_QWORD *)(inited + 40) = KeyPath;
  *(_QWORD *)&v78 = inited;
  specialized Array._endMutation()(KeyPath);
  v15 = v78;
  v81 = _swiftEmptyArrayStorage;
  sub_1001C1C48(0, 2, 0);
  v16 = v81;
  v17 = (_QWORD *)(v15 & 0xC000000000000001);
  v68 = v5;
  v74 = a2;
  v75 = v2;
  v18 = (uint64_t)v10;
  if ((v15 & 0xC000000000000001) != 0)
  {
    v19 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v15);
    v20 = (void *)v19;
  }
  else
  {
    v20 = *(void **)(v15 + 32);
    v19 = swift_retain();
  }
  v21 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v19);
  if (!v22)
    goto LABEL_51;
  v23 = v21;
  v24 = v22;
  v25 = &type metadata for String;
  v79 = &type metadata for String;
  swift_release(v20);
  *(_QWORD *)&v78 = v23;
  *((_QWORD *)&v78 + 1) = v24;
  v27 = v16[2];
  v26 = v16[3];
  v20 = (void *)(v27 + 1);
  if (v27 >= v26 >> 1)
  {
LABEL_45:
    sub_1001C1C48(v26 > 1, (int64_t)v20, 1);
    v16 = v81;
  }
  v16[2] = v20;
  sub_10001A6CC(&v78, &v16[4 * v27 + 4]);
  if (v17)
  {
    v28 = specialized _ArrayBuffer._getElementSlowPath(_:)(1, v15);
    v20 = (void *)v28;
  }
  else
  {
    v20 = *(void **)(v15 + 40);
    v28 = swift_retain();
  }
  v29 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v28);
  if (v30)
  {
    v31 = v29;
    v32 = v30;
    v79 = v25;
    swift_release(v20);
    *(_QWORD *)&v78 = v31;
    *((_QWORD *)&v78 + 1) = v32;
    v81 = v16;
    v34 = v16[2];
    v33 = v16[3];
    if (v34 >= v33 >> 1)
    {
      sub_1001C1C48(v33 > 1, v34 + 1, 1);
      v16 = v81;
    }
    v16[2] = v34 + 1;
    sub_10001A6CC(&v78, &v16[4 * v34 + 4]);
    swift_bridgeObjectRelease();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_release(v16);
    v36 = (void *)v18;
    objc_msgSend((id)v18, "setPropertiesToFetch:", isa);

    v37 = sub_1000151B0(0, &qword_10083E320, NSDictionary_ptr);
    v38 = v75;
    v39 = NSManagedObjectContext.fetch<A>(_:)(v18, v37);
    if (v38)
    {

    }
    else
    {
      v18 = v39;
      v81 = _swiftEmptyDictionarySingleton;
      if ((unint64_t)v39 >> 62)
      {
        if (v39 < 0)
          v63 = v39;
        else
          v63 = v39 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v39);
        v40 = _CocoaArrayWrapper.endIndex.getter(v63);
        swift_bridgeObjectRelease();
      }
      else
      {
        v40 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v66[1] = 0;
      v67 = v36;
      if (v40)
      {
        v75 = v18 & 0xC000000000000001;
        v17 = _swiftEmptyDictionarySingleton;
        v27 = 4;
        v74 = 0x80000001006B2BE0;
        v25 = &unk_10083D5B0;
        v69 = xmmword_1006A7330;
        v72 = (char *)&type metadata for Any + 8;
        v73 = v40;
        while (1)
        {
          if (v75)
            v46 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v27 - 4, v18);
          else
            v46 = *(id *)(v18 + 8 * v27);
          v20 = v46;
          v15 = v27 - 3;
          if (__OFADD__(v27 - 4, 1))
          {
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
            goto LABEL_45;
          }
          v47 = String._bridgeToObjectiveC()();
          v48 = objc_msgSend(v20, "valueForKey:", v47);

          if (v48)
          {
            _bridgeAnyObjectToAny(_:)(v76, v48);
            swift_unknownObjectRelease(v48);
          }
          else
          {
            memset(v76, 0, sizeof(v76));
          }
          sub_1000A5CA8((uint64_t)v76, (uint64_t)&v78, (uint64_t *)&unk_10083D5B0);
          if (v79)
          {
            v49 = type metadata accessor for UUID(0);
            v50 = swift_dynamicCast(v7, &v78, v72, v49, 6);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v7, v50 ^ 1u, 1, v49);
          }
          else
          {
            sub_10000882C((uint64_t)&v78, (uint64_t *)&unk_10083D5B0);
            v51 = type metadata accessor for UUID(0);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v7, 1, 1, v51);
          }
          v53 = sub_1002C6CCC((uint64_t)v7);
          v26 = v17[2];
          v54 = (v52 & 1) == 0;
          v55 = v26 + v54;
          if (__OFADD__(v26, v54))
            goto LABEL_43;
          v25 = v52;
          if (v17[3] < v55)
          {
            sub_1002D0CE4(v55, 1);
            v17 = v81;
            v56 = sub_1002C6CCC((uint64_t)v7);
            if ((v25 & 1) != (v57 & 1))
            {
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v68);
              __break(1u);
              goto LABEL_51;
            }
            v53 = v56;
          }
          if ((v25 & 1) != 0)
          {
            v41 = sub_10000882C((uint64_t)v7, (uint64_t *)&unk_100839C80);
            v17 = v81;
            v42 = (_QWORD *)(v81[7] + 8 * v53);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v41);
            v44 = *(_QWORD *)((*v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v43 = *(_QWORD *)((*v42 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v44 >= v43 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1);
            v45 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v44, v20);
            specialized Array._endMutation()(v45);
          }
          else
          {
            v58 = swift_allocObject(v70, 40, 7);
            *(_OWORD *)(v58 + 16) = v69;
            *(_QWORD *)(v58 + 32) = v20;
            *(_QWORD *)&v78 = v58;
            specialized Array._endMutation()(v58);
            v59 = v78;
            v17[(v53 >> 6) + 8] |= 1 << v53;
            sub_1000A5CA8((uint64_t)v7, v17[6] + *(_QWORD *)(v71 + 72) * v53, (uint64_t *)&unk_100839C80);
            *(_QWORD *)(v17[7] + 8 * v53) = v59;
            v60 = v17[2];
            v61 = __OFADD__(v60, 1);
            v26 = v60 + 1;
            if (v61)
              goto LABEL_44;
            v17[2] = v26;
          }
          v25 = &unk_10083D5B0;
          ++v27;
          if (v15 == v73)
            goto LABEL_40;
        }
      }
      v17 = _swiftEmptyDictionarySingleton;
LABEL_40:

      swift_bridgeObjectRelease();
    }
    return (uint64_t)v17;
  }
  else
  {
LABEL_51:
    *(_QWORD *)&v76[0] = 0;
    *((_QWORD *)&v76[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v64._countAndFlagsBits = 0xD00000000000002CLL;
    v64._object = (void *)0x80000001006F8C10;
    String.append(_:)(v64);
    v77 = v20;
    v65 = sub_10001A630(&qword_10083DAA0);
    _print_unlocked<A, B>(_:_:)(&v77, v76, v65, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *(_QWORD *)&v76[0], *((_QWORD *)&v76[0] + 1), "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1002A52BC(uint64_t a1, uint64_t a2)
{
  return sub_1002A52C8(a1, a2, &qword_10083DAA8);
}

uint64_t sub_1002A52C8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  Class isa;
  id v17;
  uint64_t result;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v6 = sub_10001A630((uint64_t *)&unk_100839E80);
  v7 = swift_allocObject(v6, 96, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1006A3C40;
  v8 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v7);
  if (v9)
  {
    *(_QWORD *)(v7 + 56) = &type metadata for String;
    *(_QWORD *)(v7 + 32) = v8;
    *(_QWORD *)(v7 + 40) = v9;
    v10 = swift_retain();
    v11 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v10);
    if (v12)
    {
      v13 = v11;
      v14 = v12;
      swift_release(a2);
      *(_QWORD *)(v7 + 88) = &type metadata for String;
      *(_QWORD *)(v7 + 64) = v13;
      *(_QWORD *)(v7 + 72) = v14;
      v15 = String._bridgeToObjectiveC()();
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v17 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v15, isa);

      return (uint64_t)v17;
    }
    v23 = 0;
    v24 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v20._object = (void *)0x80000001006F8C10;
    v20._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v20);
    v22 = a2;
  }
  else
  {
    v23 = 0;
    v24 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v19._object = (void *)0x80000001006F8C10;
    v19._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v19);
    v22 = a1;
  }
  v21 = sub_10001A630(a3);
  _print_unlocked<A, B>(_:_:)(&v22, &v23, v21, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v23, v24, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
  __break(1u);
  return result;
}

id sub_1002A55A0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerCloudKitNetworkActivityObserver();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RDStoreControllerCloudKitNetworkActivityObserver()
{
  return objc_opt_self(_TtC7remindd48RDStoreControllerCloudKitNetworkActivityObserver);
}

uint64_t sub_1002A5600@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t updated;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = sub_10001A630(&qword_1008418C8);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  v9 = *(_QWORD *)(updated - 8);
  if (v7)
  {
    sub_100238E28(a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), (uint64_t)v6);
    v10 = 0;
  }
  else
  {
    v10 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v6, v10, 1, updated);
  Optional.tryUnwrap(_:file:line:)(a2, 0xD000000000000013, 0x80000001006FDA80, 0xD0000000000000ADLL, 0x80000001006FF140, 102, v4);
  return sub_100239534((uint64_t)v6);
}

uint64_t sub_1002A5728(uint64_t a1)
{
  uint64_t v1;
  uint64_t updated;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  uint64_t v7;
  _QWORD v9[2];
  uint64_t v10;

  updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  __chkstk_darwin(updated);
  v5 = (_QWORD *)((char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1002A5600(a1, v5);
  if (!v1)
  {
    v6 = objc_msgSend(*(id *)((char *)v5 + *(int *)(updated + 28)), "list");
    v9[1] = v6;
    v7 = sub_10001A630((uint64_t *)&unk_100843F50);
    Optional.tryUnwrap(_:file:line:)(&v10, 0x7265646E696D6572, 0xED00007473696C2ELL, 0xD000000000000095, 0x80000001006FD9A0, 152, v7);

    updated = v10;
    sub_100238E6C((uint64_t)v5);
  }
  return updated;
}

void sub_1002A5864(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t updated;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  NSString v42;
  uint64_t i;
  uint64_t v44;
  id v45;
  void *v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  _BYTE *v56;
  void *v57;
  id v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSString v65;
  Swift::String v66;
  Swift::String v67;
  NSString v68;
  id v69;
  _BYTE v70[4];
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  id v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  Swift::OpaquePointer_optional v86;

  v3 = v2;
  v85 = a1;
  v5 = type metadata accessor for RDUserNotificationCategory(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v70[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  __chkstk_darwin(updated);
  v11 = &v70[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0)
      v41 = a2;
    else
      v41 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v12 = _CocoaArrayWrapper.endIndex.getter(v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(a2);
    v13 = _CocoaArrayWrapper.endIndex.getter(v41);
  }
  else
  {
    v12 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a2);
    v13 = v12;
  }
  v78 = v8;
  v79 = v6;
  v80 = v12;
  if (v13)
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
    }
    else
    {
      if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_41:
        swift_bridgeObjectRelease();
        v51 = (_QWORD *)v83;
        v52 = v80;
        v53 = v75;
        goto LABEL_43;
      }
      v14 = *(id *)(a2 + 32);
    }
    v15 = v14;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v15 = 0;
  }
  v81 = (uint64_t)v15;
  v16 = sub_10001A630(&qword_1008444B0);
  Optional.tryUnwrap(_:file:line:)(&v83, 0xD000000000000037, 0x80000001006FD800, 0xD0000000000000ADLL, 0x80000001006FF140, 42, v16);
  if (v2)
  {

    return;
  }
  v76 = v5;

  v77 = (id)v83;
  v17 = objc_msgSend((id)v83, "title");
  if (v17)
  {
    v18 = v17;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v21 = v20;

  }
  else
  {
    v19 = 0;
    v21 = 0;
  }
  v81 = v19;
  v82 = v21;
  v22 = sub_10001A630((uint64_t *)&unk_10083A370);
  Optional.tryUnwrap(_:file:line:)(&v83, 0xD000000000000021, 0x80000001006FD8F0, 0xD0000000000000ADLL, 0x80000001006FF140, 43, v22);
  v75 = (void *)v13;
  swift_bridgeObjectRelease();
  v24 = v83;
  v23 = v84;
  v25 = v85;
  sub_1002A5600(v85, v11);
  v73 = v24;
  v74 = v23;
  v3 = 0;
  v26 = (void *)sub_1002A60A4((uint64_t)v11);
  sub_100238E6C((uint64_t)v11);
  if (v26)
  {
    v27 = objc_msgSend(v26, "shortName");

    v28 = (uint64_t)v75;
    if (v27)
    {
      v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v30 = v29;

    }
    else
    {
      v72 = 0;
      v30 = 0;
    }
    v25 = v85;
  }
  else
  {
    v72 = 0;
    v30 = 0;
    v28 = (uint64_t)v75;
  }
  v31 = (void *)sub_1002A5728(v25);
  v75 = v30;
  v32 = objc_msgSend(v31, "name");

  if (v32)
  {
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v35 = v34;

  }
  else
  {
    v33 = 0;
    v35 = 0;
  }
  v81 = v33;
  v82 = v35;
  Optional.tryUnwrap(_:file:line:)(&v83, 0xD00000000000001CLL, 0x80000001006FD920, 0xD0000000000000ADLL, 0x80000001006FF140, 45, v22);
  v36 = (uint64_t)v75;
  swift_bridgeObjectRelease();
  v37 = v83;
  v38 = v84;
  v39 = (void *)sub_1002A5728(v85);
  v71 = objc_msgSend(v39, "shouldCategorizeGroceryItems");

  v11 = objc_msgSend(objc_allocWithZone((Class)UNMutableNotificationContent), "init");
  v40 = v73;
  v73 = v37;
  sub_1002A630C(v72, v36, v40, v74, v80, v37, v38, v71);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v42 = String._bridgeToObjectiveC()();
  objc_msgSend(v11, "setBody:", v42, swift_bridgeObjectRelease().n128_f64[0]);

  v83 = (unint64_t)_swiftEmptyArrayStorage;
  if (v28)
  {
    v75 = (void *)v38;
    if (v28 < 1)
    {
      __break(1u);
      return;
    }
    swift_bridgeObjectRetain_n(a2, 2);
    for (i = 0; i != v28; ++i)
    {
      if ((a2 & 0xC000000000000001) != 0)
        v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a2);
      else
        v45 = *(id *)(a2 + 8 * i + 32);
      v46 = v45;
      v47 = objc_msgSend(v45, "remObjectID");

      if (v47)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v48);
        v49 = *(_QWORD *)((v83 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v50 = *(_QWORD *)((v83 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v49 >= v50 >> 1)
        {
          v74 = *(_QWORD *)((v83 & 0xFFFFFFFFFFFFFF8) + 0x10);
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1);
          v49 = v74;
        }
        v44 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v49, v47);
        specialized Array._endMutation()(v44);
      }
    }
    goto LABEL_41;
  }
  swift_bridgeObjectRetain(a2);
  v51 = _swiftEmptyArrayStorage;
  v53 = (void *)v38;
  v52 = v80;
LABEL_43:
  swift_bridgeObjectRelease();
  v86.value._rawValue = v51;
  UNMutableNotificationContent.setReminderIDs(_:)(v86);
  swift_bridgeObjectRelease();
  v54 = (void *)sub_1002A5728(v85);
  v56 = v78;
  v55 = v79;
  if (v3)
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    v57 = v54;
    v58 = objc_msgSend(v54, "remObjectID");

    UNMutableNotificationContent.setListID(_:)(v58);
    v59 = (unsigned int *)&enum case for RDUserNotificationCategory.sharedListSingleReminderCompletedNotification(_:);
    if (v52 != 1)
      v59 = (unsigned int *)&enum case for RDUserNotificationCategory.sharedListMultipleRemindersCompletedNotification(_:);
    v60 = v76;
    v61 = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t))(v55 + 104))(v56, *v59, v76);
    v62 = RDUserNotificationCategory.rawValue.getter(v61);
    v64 = v63;
    (*(void (**)(_BYTE *, uint64_t))(v55 + 8))(v56, v60);
    v65 = String._bridgeToObjectiveC()();
    objc_msgSend(v11, "setCategoryIdentifier:", v65);

    v83 = v62;
    v84 = v64;
    swift_bridgeObjectRetain(v64);
    v66._countAndFlagsBits = 45;
    v66._object = (void *)0xE100000000000000;
    String.append(_:)(v66);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(v84);
    v67._countAndFlagsBits = v73;
    v67._object = v53;
    String.append(_:)(v67);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v68 = String._bridgeToObjectiveC()();
    objc_msgSend(v11, "setThreadIdentifier:", v68, swift_bridgeObjectRelease().n128_f64[0]);

    v69 = objc_msgSend((id)objc_opt_self(UNNotificationSound), "soundWithAlertType:", 11);
    objc_msgSend(v11, "setSound:", v69);

  }
}

void sub_1002A607C()
{
  uint64_t *v0;

  sub_1002A5864(*v0, v0[1]);
}

ValueMetadata *type metadata accessor for RDCompletedReminderNotificationContent()
{
  return &type metadata for RDCompletedReminderNotificationContent;
}

uint64_t sub_1002A60A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  void *v21;

  v3 = sub_100293F54();
  if (!v3)
    return 0;
  v4 = (void *)v3;
  v5 = a1;
  sub_1002941E0();
  if (v1)
  {

  }
  else
  {
    v7 = v6;
    v8 = objc_msgSend(v6, "remObjectID");

    v20 = v8;
    v9 = sub_10001A630((uint64_t *)&unk_100844910);
    Optional.tryUnwrap(_:file:line:)(&v21, 0xD000000000000019, 0x80000001006FDA40, 0xD0000000000000ADLL, 0x80000001006FF140, 113, v9);

    v10 = v21;
    v11 = objc_msgSend(*(id *)(a1+ *(int *)(type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0)+ 28)), "list");
    v12 = sub_10001A630((uint64_t *)&unk_100843F50);
    Optional.tryUnwrap(_:file:line:)(&v20, 0x7265646E696D6572, 0xED00007473696C2ELL, 0xD000000000000095, 0x80000001006FD9A0, 152, v12);

    v13 = v20;
    v14 = objc_msgSend(v20, "remObjectID", v11);

    v20 = v14;
    Optional.tryUnwrap(_:file:line:)(&v21, 0xD000000000000016, 0x80000001006FDA60, 0xD0000000000000ADLL, 0x80000001006FF140, 114, v9);

    v16 = v21;
    v17 = v10;
    v18 = v16;
    sub_1003CD720(v4);
    v5 = v19;

  }
  return v5;
}

uint64_t sub_1002A630C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  Swift::String v41;
  Swift::String v42;
  NSString v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;

  if (a2)
  {
    if (a5 == 1)
    {
      swift_bridgeObjectRetain(a2);
      v14 = (id)_REMGetLocalizedString(72);
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

      v18 = sub_10001A630((uint64_t *)&unk_10083A270);
      v19 = swift_allocObject(v18, 152, 7);
      *(_OWORD *)(v19 + 16) = xmmword_1006A3C20;
      *(_QWORD *)(v19 + 56) = &type metadata for String;
      v20 = sub_1000184F8();
      *(_QWORD *)(v19 + 32) = a1;
      *(_QWORD *)(v19 + 40) = a2;
      *(_QWORD *)(v19 + 96) = &type metadata for String;
      *(_QWORD *)(v19 + 104) = v20;
      *(_QWORD *)(v19 + 64) = v20;
      *(_QWORD *)(v19 + 72) = a3;
      *(_QWORD *)(v19 + 80) = a4;
      *(_QWORD *)(v19 + 136) = &type metadata for String;
      *(_QWORD *)(v19 + 144) = v20;
      *(_QWORD *)(v19 + 112) = a6;
      *(_QWORD *)(v19 + 120) = a7;
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRetain(a7);
      v21 = static String.localizedStringWithFormat(_:_:)(v15, v17, v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v21;
    }
    if ((a8 & 1) != 0)
    {
      if (a5 >= 2)
      {
        v52 = a1;
        swift_bridgeObjectRetain(a2);
        v31 = (void *)_REMGetLocalizedString(77);
LABEL_14:
        v33 = v31;
        v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
        v36 = v35;

        v37 = sub_10001A630((uint64_t *)&unk_10083A270);
        v38 = swift_allocObject(v37, 152, 7);
        *(_OWORD *)(v38 + 16) = xmmword_1006A3C20;
        *(_QWORD *)(v38 + 56) = &type metadata for String;
        v39 = sub_1000184F8();
        *(_QWORD *)(v38 + 32) = v52;
        *(_QWORD *)(v38 + 40) = a2;
        *(_QWORD *)(v38 + 96) = &type metadata for Int;
        *(_QWORD *)(v38 + 104) = &protocol witness table for Int;
        *(_QWORD *)(v38 + 64) = v39;
        *(_QWORD *)(v38 + 72) = a5;
        *(_QWORD *)(v38 + 136) = &type metadata for String;
        *(_QWORD *)(v38 + 144) = v39;
        *(_QWORD *)(v38 + 112) = a6;
        *(_QWORD *)(v38 + 120) = a7;
        swift_bridgeObjectRetain(a7);
        v30 = static String.localizedStringWithFormat(_:_:)(v34, v36, v38);
        goto LABEL_19;
      }
    }
    else if (a5 >= 2)
    {
      v52 = a1;
      swift_bridgeObjectRetain(a2);
      v31 = (void *)_REMGetLocalizedString(74);
      goto LABEL_14;
    }
LABEL_17:
    v40 = (void *)objc_opt_self(REMError);
    _StringGuts.grow(_:)(84);
    v41._object = (void *)0x80000001006FD940;
    v41._countAndFlagsBits = 0xD000000000000052;
    String.append(_:)(v41);
    v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    v43 = String._bridgeToObjectiveC()();
    objc_msgSend(v40, "internalErrorWithDebugDescription:", v43, swift_bridgeObjectRelease().n128_f64[0]);

    return swift_willThrow(v44);
  }
  if (a5 != 1)
  {
    if ((a8 & 1) != 0)
    {
      if (a5 < 2)
        goto LABEL_17;
      v32 = (void *)_REMGetLocalizedString(78);
    }
    else
    {
      if (a5 < 2)
        goto LABEL_17;
      v32 = (void *)_REMGetLocalizedString(75);
    }
    v45 = v32;
    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    v48 = v47;

    v49 = sub_10001A630((uint64_t *)&unk_10083A270);
    v50 = swift_allocObject(v49, 112, 7);
    *(_OWORD *)(v50 + 16) = xmmword_1006A3C40;
    *(_QWORD *)(v50 + 56) = &type metadata for Int;
    *(_QWORD *)(v50 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v50 + 32) = a5;
    *(_QWORD *)(v50 + 96) = &type metadata for String;
    *(_QWORD *)(v50 + 104) = sub_1000184F8();
    *(_QWORD *)(v50 + 72) = a6;
    *(_QWORD *)(v50 + 80) = a7;
    swift_bridgeObjectRetain(a7);
    v30 = static String.localizedStringWithFormat(_:_:)(v46, v48, v50);
    goto LABEL_19;
  }
  v23 = (id)_REMGetLocalizedString(73);
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v26 = v25;

  v27 = sub_10001A630((uint64_t *)&unk_10083A270);
  v28 = swift_allocObject(v27, 112, 7);
  *(_OWORD *)(v28 + 16) = xmmword_1006A3C40;
  *(_QWORD *)(v28 + 56) = &type metadata for String;
  v29 = sub_1000184F8();
  *(_QWORD *)(v28 + 32) = a3;
  *(_QWORD *)(v28 + 40) = a4;
  *(_QWORD *)(v28 + 96) = &type metadata for String;
  *(_QWORD *)(v28 + 104) = v29;
  *(_QWORD *)(v28 + 64) = v29;
  *(_QWORD *)(v28 + 72) = a6;
  *(_QWORD *)(v28 + 80) = a7;
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a7);
  v30 = static String.localizedStringWithFormat(_:_:)(v24, v26, v28);
LABEL_19:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v30;
}

uint64_t sub_1002A6780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100843178);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100843178);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1002A6810(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t KeyPath;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t result;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _QWORD *v48;
  _QWORD *v49;

  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v46 - v9;
  v49 = _swiftEmptyArrayStorage;
  if (a2 >> 6)
  {
    if (a2 >> 6 == 1)
    {
      KeyPath = swift_getKeyPath(&unk_1006B2F20);
      v12 = objc_msgSend((id)a1, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v12);

      v13 = type metadata accessor for UUID(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
      v14 = sub_1002E7F00(KeyPath, (uint64_t)v8);
      v15 = swift_release(KeyPath);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
      v17 = v49[2];
      v16 = v49[3];
      if (v17 >= v16 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1);
      v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v14);
      specialized Array._endMutation()(v18);
      sub_1002A7310((void *)a1, a2);
    }
    else
    {
      v30 = swift_getKeyPath(&unk_1006B2ED0);
      v31 = sub_100341904(v30);
      v32 = swift_release(v30);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v32);
      v34 = v49[2];
      v33 = v49[3];
      if (v34 >= v33 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1);
      v35 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v34, v31);
      specialized Array._endMutation()(v35);
    }
LABEL_24:
    v41 = sub_1000153F4(0);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v41);
    v43 = v49[2];
    v42 = v49[3];
    if (v43 >= v42 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1);
    v44 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v43, v41);
    specialized Array._endMutation()(v44);
    return sub_10000D2BC(v49);
  }
  v19 = swift_getKeyPath(&unk_1006B2F70);
  if ((unint64_t)a1 >> 62)
  {
    if (a1 >= 0)
      v45 = a1 & 0xFFFFFFFFFFFFFF8;
    else
      v45 = a1;
    swift_bridgeObjectRetain(a1);
    v20 = _CocoaArrayWrapper.endIndex.getter(v45);
    sub_1002A7310((void *)a1, a2);
  }
  else
  {
    v20 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v21 = _swiftEmptyArrayStorage;
  if (!v20)
  {
LABEL_21:
    v36 = sub_1003418F0(v19, (uint64_t)v21);
    v37 = swift_release(v19);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v37);
    v39 = v49[2];
    v38 = v49[3];
    if (v39 >= v38 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1);
    v40 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v39, v36);
    specialized Array._endMutation()(v40);
    if ((a2 & 1) == 0)
      return sub_10000D2BC(v49);
    goto LABEL_24;
  }
  v46 = v19;
  v47 = a2;
  v48 = _swiftEmptyArrayStorage;
  result = sub_1001C1BB8(0, v20 & ~(v20 >> 63), 0);
  if ((v20 & 0x8000000000000000) == 0)
  {
    v23 = 0;
    v21 = v48;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, a1);
      else
        v24 = *(id *)(a1 + 8 * v23 + 32);
      v25 = v24;
      v26 = objc_msgSend(v24, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

      v27 = type metadata accessor for UUID(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v10, 0, 1, v27);

      v48 = v21;
      v29 = v21[2];
      v28 = v21[3];
      if (v29 >= v28 >> 1)
      {
        sub_1001C1BB8(v28 > 1, v29 + 1, 1);
        v21 = v48;
      }
      ++v23;
      v21[2] = v29 + 1;
      sub_1000F2CE4((uint64_t)v10, (uint64_t)v21+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v29);
    }
    while (v20 != v23);
    LOBYTE(a2) = v47;
    v19 = v46;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002A6C08@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*a1, "sourceListIDURL");
  if (v3)
  {
    v4 = v3;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = type metadata accessor for URL(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for URL(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

void sub_1002A6C8C(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  NSURL *v10;
  void *v11;
  void *v12;
  uint64_t v13;

  v4 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10015CF8C(a1, (uint64_t)v6);
  v7 = *a2;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    URL._bridgeToObjectiveC()(v10);
    v11 = v12;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  objc_msgSend(v7, "setSourceListIDURL:", v11);

}

uint64_t sub_1002A6D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t result;

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v1 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006A7330;
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  KeyPath = swift_getKeyPath(&unk_1006B2FA8);
  v3 = NSSortDescriptor.init<A, B>(keyPath:ascending:)(KeyPath, 1);
  *(_QWORD *)(v1 + 32) = v3;
  result = specialized Array._endMutation()(v3);
  qword_100871D70 = v1;
  return result;
}

id sub_1002A6DFC@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id result;

  result = sub_100259474(*a1);
  if (!v2)
    *a2 = result;
  return result;
}

id sub_1002A6E28(void *a1, uint64_t a2, Class isa, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  double v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  _QWORD *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  NSObject *log;
  id type;
  os_log_type_t typea;
  id v37;
  uint64_t v38;

  v8 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v9 = swift_allocObject(v8, 40, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v9 + 32) = a1;
  v37 = (id)v9;
  specialized Array._endMutation()(v9);
  v10 = v37;
  type = a1;
  swift_bridgeObjectRetain(v37);
  v12 = (void *)sub_1002A6810(v11, 1);
  v13 = type metadata accessor for REMCDTemplate();
  v14 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v15 = objc_msgSend((id)swift_getObjCClassFromMetadata(v13), "entity");
  objc_msgSend(v14, "setEntity:", v15);

  objc_msgSend(v14, "setAffectedStores:", 0);
  objc_msgSend(v14, "setPredicate:", v12);

  if (isa)
  {
    v17 = sub_1001DFBD0((uint64_t)isa);
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v16 = swift_bridgeObjectRelease(v17).n128_u64[0];
  }
  objc_msgSend(v14, "setPropertiesToFetch:", isa, v16);

  if (a4)
    a4 = (uint64_t)Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v14, "setRelationshipKeyPathsForPrefetching:", a4);

  v18 = NSManagedObjectContext.fetch<A>(_:)(v14, v13);
  swift_bridgeObjectRelease_n(v37, 2);

  if (!v4)
  {
    if ((unint64_t)v18 >> 62)
    {
      if (v18 < 0)
        v32 = v18;
      else
        v32 = v18 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v18);
      if (_CocoaArrayWrapper.endIndex.getter(v32))
      {
LABEL_9:
        if ((v18 & 0xC000000000000001) != 0)
        {
          v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v18);
        }
        else
        {
          if (!*(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_30;
          }
          v21 = *(id *)(v18 + 32);
        }
        v10 = v21;
        swift_bridgeObjectRelease(v18);
        if ((unint64_t)v18 >> 62)
        {
          if (v18 < 0)
            v22 = v18;
          else
            v22 = v18 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v18);
          a4 = _CocoaArrayWrapper.endIndex.getter(v22);
          swift_bridgeObjectRelease(v18);
          if (a4 < 2)
            goto LABEL_14;
        }
        else
        {
          a4 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (a4 < 2)
          {
LABEL_14:
            swift_bridgeObjectRelease(v18);
            return v10;
          }
        }
        if (qword_1008370E0 == -1)
        {
LABEL_20:
          v23 = type metadata accessor for Logger(0);
          sub_10001AAA8(v23, (uint64_t)qword_100843178);
          v24 = type;
          swift_bridgeObjectRetain(v18);
          v26 = Logger.logObject.getter(v25);
          v27 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v26, v27))
          {
            typea = v27;
            v28 = swift_slowAlloc(22, -1);
            v29 = (_QWORD *)swift_slowAlloc(8, -1);
            *(_DWORD *)v28 = 138412546;
            v37 = v24;
            log = v26;
            v30 = v24;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
            *v29 = v24;

            *(_WORD *)(v28 + 12) = 2048;
            swift_bridgeObjectRelease(v18);
            v37 = (id)a4;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
            swift_bridgeObjectRelease(v18);
            _os_log_impl((void *)&_mh_execute_header, log, typea, "Found multiple instances of REMCDTemplate with identical objectID {objectID: %@, matches: %ld}", (uint8_t *)v28, 0x16u);
            v31 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v29, 1, v31);
            swift_slowDealloc(v29, -1, -1);
            swift_slowDealloc(v28, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v18, 2);
          }
          return v10;
        }
LABEL_30:
        swift_once(&qword_1008370E0, sub_1002A6780);
        goto LABEL_20;
      }
    }
    else
    {
      v20 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v18);
      if (v20)
        goto LABEL_9;
    }
    swift_bridgeObjectRelease_n(v18, 2);
    v33 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", type);
    swift_willThrow(v33);
  }
  return v10;
}

id sub_1002A72BC@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "parentAccount");
  *a2 = result;
  return result;
}

id sub_1002A72F4(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setParentAccount:", *a1);
}

void sub_1002A7310(void *a1, unsigned __int8 a2)
{
  if (a2 >> 6 == 1)
  {

  }
  else if (!(a2 >> 6))
  {
    swift_bridgeObjectRelease(a1);
  }
}

_QWORD *sub_1002A7334(uint64_t a1)
{
  uint32_t *p_ivar_base_size;
  unint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  double v25;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint32_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;

  p_ivar_base_size = (uint32_t *)type metadata accessor for Logger(0);
  v3 = *((_QWORD *)p_ivar_base_size - 1);
  __chkstk_darwin(p_ivar_base_size);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_21;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v7 = _swiftEmptyArrayStorage;
    v38 = v3;
    if (!v6)
      break;
    v41 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v6);
    if (v6 < 0)
    {
      __break(1u);
      goto LABEL_26;
    }
    v36 = p_ivar_base_size;
    v8 = 0;
    v3 = a1 & 0xC000000000000001;
    p_ivar_base_size = &RDDataAccess.ivar_base_size;
    while (v6 != v8)
    {
      if (v3)
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a1);
      else
        v9 = *(id *)(a1 + 8 * v8 + 32);
      v10 = v9;
      v11 = objc_msgSend(v9, "account");
      if (!v11)
      {
        v24 = (void *)objc_opt_self(REMError);
        v39 = 0;
        v40 = 0xE000000000000000;
        _StringGuts.grow(_:)(36);
        *(_QWORD *)&v25 = swift_bridgeObjectRelease().n128_u64[0];
        v39 = 0xD000000000000021;
        v40 = 0x80000001006FA600;
        v26 = objc_msgSend(v10, "description", v25);
        v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        v23 = v28;

        v29._countAndFlagsBits = v27;
        v29._object = v23;
        String.append(_:)(v29);
        swift_bridgeObjectRelease();
        v30._countAndFlagsBits = 125;
        v30._object = (void *)0xE100000000000000;
        String.append(_:)(v30);
        v31 = String._bridgeToObjectiveC()();
        objc_msgSend(v24, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

        swift_willThrow(v32);
        swift_release(v41);
        return v23;
      }
      v12 = v11;
      ++v8;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
      v14 = v41[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
      v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
      specialized ContiguousArray._endMutation()(v15);
      if (v6 == v8)
      {
        v7 = v41;
        p_ivar_base_size = v36;
        v3 = v38;
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_21:
    if (a1 < 0)
      v34 = a1;
    else
      v34 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v6 = _CocoaArrayWrapper.endIndex.getter(v34);
    swift_bridgeObjectRelease();
  }
LABEL_13:
  if (qword_1008370E0 == -1)
    goto LABEL_14;
LABEL_26:
  swift_once(&qword_1008370E0, sub_1002A6780);
LABEL_14:
  v16 = sub_10001AAA8((uint64_t)p_ivar_base_size, (uint64_t)qword_100843178);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint32_t *))(v3 + 16))(v5, v16, p_ivar_base_size);
  v39 = (unint64_t)v7;
  __chkstk_darwin(v17);
  *(&v35 - 2) = (uint64_t)v5;
  v18 = sub_10001A630(&qword_10083FE60);
  v19 = sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
  v20 = sub_1002A7AD8();
  v21 = v37;
  v22 = Sequence.map<A>(skippingError:_:)(sub_1002A7AD0, &v35 - 4, sub_1002A6DFC, 0, v18, v19, v20);
  if (v21)
  {
    swift_errorRelease(v21);
    v23 = _swiftEmptyArrayStorage;
  }
  else
  {
    v23 = (_QWORD *)v22;
  }
  (*(void (**)(char *, uint32_t *))(v38 + 8))(v5, p_ivar_base_size);
  swift_bridgeObjectRelease();
  return v23;
}

void sub_1002A76C4()
{
  sub_1001C1B0C(0, 5, 0);
  __asm { BR              X9 }
}

uint64_t sub_1002A7948(uint64_t a1, uint64_t a2, Class isa, Class a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  double v12;
  _QWORD *v13;
  uint64_t v14;

  swift_bridgeObjectRetain(a1);
  v8 = (void *)sub_1002A6810(v7, 1);
  v9 = type metadata accessor for REMCDTemplate();
  v10 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v11 = objc_msgSend((id)swift_getObjCClassFromMetadata(v9), "entity");
  objc_msgSend(v10, "setEntity:", v11);

  objc_msgSend(v10, "setAffectedStores:", 0);
  objc_msgSend(v10, "setPredicate:", v8);

  if (isa)
  {
    v13 = sub_1001DFBD0((uint64_t)isa);
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v12 = swift_bridgeObjectRelease(v13).n128_u64[0];
  }
  objc_msgSend(v10, "setPropertiesToFetch:", isa, v12);

  if (a4)
    a4 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v10, "setRelationshipKeyPathsForPrefetching:", a4);

  v14 = NSManagedObjectContext.fetch<A>(_:)(v10, v9);
  swift_bridgeObjectRelease(a1);

  return v14;
}

uint64_t sub_1002A7AD0(uint64_t a1, uint64_t a2)
{
  return sub_10033D8F4(a1, a2);
}

unint64_t sub_1002A7AD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100843190;
  if (!qword_100843190)
  {
    v1 = sub_1000A5A94(&qword_10083FE60);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100843190);
  }
  return result;
}

uint64_t sub_1002A7B24(void *a1, uint64_t a2, Class isa, Class a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t KeyPath;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  double v27;
  Class v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD *v32;

  v7 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = _swiftEmptyArrayStorage;
  KeyPath = swift_getKeyPath(&unk_1006B2F20);
  v11 = a1;
  v12 = objc_msgSend(v11, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v12);

  v13 = type metadata accessor for UUID(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v9, 0, 1, v13);
  v14 = sub_1002E7F00(KeyPath, (uint64_t)v9);
  v15 = swift_release(KeyPath);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
  v17 = v32[2];
  v16 = v32[3];
  if (v17 >= v16 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1);
  v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v14);
  specialized Array._endMutation()(v18);

  v19 = sub_1000153F4(0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v19);
  v21 = v32[2];
  v20 = v32[3];
  if (v21 >= v20 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1);
  v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v19);
  specialized Array._endMutation()(v22);
  v23 = (void *)sub_10000D2BC(v32);
  v24 = type metadata accessor for REMCDTemplate();
  v25 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v26 = objc_msgSend((id)swift_getObjCClassFromMetadata(v24), "entity");
  objc_msgSend(v25, "setEntity:", v26);

  objc_msgSend(v25, "setAffectedStores:", 0);
  objc_msgSend(v25, "setPredicate:", v23);

  if (isa)
  {
    sub_1001DFBD0((uint64_t)isa);
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v27 = swift_bridgeObjectRelease().n128_u64[0];
  }
  objc_msgSend(v25, "setPropertiesToFetch:", isa, v27);

  if (a4)
    a4 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v25, "setRelationshipKeyPathsForPrefetching:", a4);

  if (qword_1008370E8 != -1)
    swift_once(&qword_1008370E8, sub_1002A6D68);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  v28 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v25, "setSortDescriptors:", v28);

  v29 = NSManagedObjectContext.fetch<A>(_:)(v25, v24);
  return v29;
}

void sub_1002A7E68()
{
  sub_1001C1B0C(0, 15, 0);
  __asm { BR              X9 }
}

uint64_t sub_1002A80F0(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD aBlock[5];
  uint64_t v38;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v7 - 8);
  v34 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RDSharedInlineTagAutoConvertEngine.Configuration(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (_QWORD *)((char *)v32 - v14);
  v16 = a1;
  v17 = a2;
  v32[1] = v17;
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(2);
  *v15 = v16;
  v15[1] = v17;
  v15[2] = 0x4024000000000000;
  v18 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler();
  v19 = swift_allocObject(v18, 24, 7);
  *(_QWORD *)(v19 + 16) = v16;
  sub_1002A83EC((uint64_t)v15, (uint64_t)v13);
  v20 = type metadata accessor for RDSharedInlineTagAutoConvertEngine(0);
  v21 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  *(_QWORD *)(v21 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_cancellables) = &_swiftEmptySetSingleton;
  v22 = OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_babysitTarget;
  v23 = objc_allocWithZone((Class)type metadata accessor for RDSharedInlineTagAutoConvertEngine.BabysitTarget());
  v24 = v16;
  swift_retain(v19);
  *(_QWORD *)(v21 + v22) = objc_msgSend(v23, "init");
  sub_1002A8430((uint64_t)v13, v21 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_configuration);
  v25 = (uint64_t *)(v21 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_handler);
  *v25 = v19;
  v25[1] = (uint64_t)&off_1007E56E8;
  aBlock[4] = sub_1002A8474;
  v38 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007EC648;
  v26 = _Block_copy(aBlock);
  v27 = swift_retain(v21);
  static DispatchQoS.unspecified.getter(v27);
  v36 = _swiftEmptyArrayStorage;
  v28 = sub_1000D3124();
  v29 = sub_10001A630((uint64_t *)&unk_100838000);
  v30 = sub_1000D316C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v29, v30, v4, v28);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v26);
  _Block_release(v26);
  swift_release(v19);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v34);
  sub_1001AEDBC((uint64_t)v15);
  swift_release(v38);
  return v21;
}

uint64_t sub_1002A83EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RDSharedInlineTagAutoConvertEngine.Configuration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002A8430(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RDSharedInlineTagAutoConvertEngine.Configuration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_1002A8478()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id result;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("RDStoreControllerAccountIdentifier"));
  v3 = v2;
  result = objc_msgSend(v0, "metadata");
  if (!result)
  {
    __break(1u);
    return result;
  }
  v5 = result;
  v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(result, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  if (!*(_QWORD *)(v6 + 16) || (v7 = sub_10001A6DC(v1, v3), (v8 & 1) == 0))
  {
    v10 = 0u;
    v11 = 0u;
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(v6);
    goto LABEL_10;
  }
  sub_10001A670(*(_QWORD *)(v6 + 56) + 32 * v7, (uint64_t)&v10);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v6);
  if (!*((_QWORD *)&v11 + 1))
  {
LABEL_10:
    sub_1000F4294((uint64_t)&v10);
    return 0;
  }
  if (swift_dynamicCast(&v9, &v10, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    return (id)v9;
  else
    return 0;
}

uint64_t sub_1002A85A4(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD *v20;

  v2 = v1;
  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v9 = _swiftEmptyArrayStorage;
    if (!v8)
      return (uint64_t)v9;
    v20 = _swiftEmptyArrayStorage;
    result = sub_1001C1BB8(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0)
      break;
    v19[1] = v2;
    v11 = 0;
    v9 = v20;
    v2 = a1 & 0xC000000000000001;
    while (v8 != v11)
    {
      if (v2)
        v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, a1);
      else
        v12 = *(id *)(a1 + 8 * v11 + 32);
      v13 = v12;
      v14 = objc_msgSend(v12, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v14);

      v15 = type metadata accessor for UUID(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 0, 1, v15);

      v20 = v9;
      v17 = v9[2];
      v16 = v9[3];
      if (v17 >= v16 >> 1)
      {
        sub_1001C1BB8(v16 > 1, v17 + 1, 1);
        v9 = v20;
      }
      ++v11;
      v9[2] = v17 + 1;
      sub_1000F2CE4((uint64_t)v7, (uint64_t)v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v17);
      if (v8 == v11)
        return (uint64_t)v9;
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v8 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a1);
  }
  __break(1u);
  return result;
}

uint64_t sub_1002A878C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  __int16 v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v34;

  if (a3 < 0)
  {
    KeyPath = swift_getKeyPath(&unk_1006B3058);
    v24 = KeyPath;
    if ((a1 & 1) != 0)
      v26 = sub_100342B64(KeyPath);
    else
      v26 = sub_100342B24(KeyPath);
    goto LABEL_18;
  }
  if ((a3 & 1) != 0)
  {
    v5 = swift_getKeyPath(&unk_1006B3058);
    v6 = sub_100342B24(v5);
    v7 = swift_release(v5);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v7);
    v9 = _swiftEmptyArrayStorage[2];
    v8 = _swiftEmptyArrayStorage[3];
    if (v9 >= v8 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1);
    v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v6);
    specialized Array._endMutation()(v10);
  }
  v11 = swift_getKeyPath(&unk_1006B3098);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = _swiftEmptyArrayStorage;
  if (v12)
  {
    sub_1001C1F30(0, v12, 0);
    v13 = _swiftEmptyArrayStorage;
    v14 = (unsigned __int8 *)(a1 + 32);
    v15 = _swiftEmptyArrayStorage[2];
    do
    {
      v17 = *v14++;
      v16 = v17;
      v34 = v13;
      v18 = v13[3];
      if (v15 >= v18 >> 1)
      {
        sub_1001C1F30(v18 > 1, v15 + 1, 1);
        v13 = v34;
      }
      v13[2] = v15 + 1;
      *((_WORD *)v13 + v15++ + 16) = v16 + 1;
      --v12;
    }
    while (v12);
  }
  v19 = sub_100342918(v11, (uint64_t)v13);
  v20 = swift_release(v11);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
  v22 = _swiftEmptyArrayStorage[2];
  v21 = _swiftEmptyArrayStorage[3];
  if (v22 >= v21 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1);
  v23 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v19);
  specialized Array._endMutation()(v23);
  if (a2)
  {
    v24 = swift_getKeyPath(&unk_1006B30D0);
    v25 = sub_1002A85A4(a2);
    v26 = sub_10034292C(v24, v25);
LABEL_18:
    v28 = v26;
    v29 = swift_release(v24);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
    v31 = _swiftEmptyArrayStorage[2];
    v30 = _swiftEmptyArrayStorage[3];
    if (v31 >= v30 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1);
    v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v28);
    specialized Array._endMutation()(v32);
  }
  return sub_10000D2BC(_swiftEmptyArrayStorage);
}

id sub_1002A8A00(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  id v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t inited;
  Class isa;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Class v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  Class v33;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  _BYTE v39[104];
  __int128 v40;
  __int128 v41;
  _BYTE v42[104];

  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(v1), "entity");
  v5 = objc_msgSend(objc_allocWithZone((Class)NSBatchUpdateRequest), "initWithEntity:", v4);

  *(_QWORD *)&v40 = _swiftEmptyArrayStorage;
  KeyPath = swift_getKeyPath(&unk_1006B3058);
  v7 = sub_100342B24(KeyPath);
  v8 = swift_release(KeyPath);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v8);
  v10 = _swiftEmptyArrayStorage[2];
  v9 = _swiftEmptyArrayStorage[3];
  if (v10 >= v9 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1);
  v11 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v7);
  specialized Array._endMutation()(v11);
  v12 = (void *)sub_10000D2BC(v40);
  objc_msgSend(v5, "setPredicate:", v12);

  v13 = (id)sub_10001A630(&qword_10083ADC0);
  inited = swift_initStackObject(v13, v42);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  *(_QWORD *)&v40 = 0x656C706D6F437369;
  *((_QWORD *)&v40 + 1) = 0xEB00000000646574;
  AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), &v40, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(inited + 96) = &type metadata for Bool;
  *(_BYTE *)(inited + 72) = 1;
  sub_1002B007C(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v5, "setPropertiesToUpdate:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  objc_msgSend(v5, "setResultType:", 1);
  v37 = 0;
  v16 = objc_msgSend(a1, "executeRequest:error:", v5, &v37);
  v17 = v37;
  if (v16)
  {
    v18 = v16;
    *((_QWORD *)&v41 + 1) = sub_1000151B0(0, (unint64_t *)&unk_100846CA0, NSPersistentStoreResult_ptr);
    *(_QWORD *)&v40 = v18;
    v19 = sub_1000151B0(0, &qword_1008431A0, NSBatchUpdateResult_ptr);
    v20 = v17;
    throwingCast<A>(_:as:failureMessage:)(&v38, &v40, v19, 0, 0, v19);
    if (v2)
    {

      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v40);
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v40);
      v22 = v38;
      v23 = objc_msgSend(v38, "result");
      if (v23)
      {
        v24 = v23;
        _bridgeAnyObjectToAny(_:)(&v40, v23);
        swift_unknownObjectRelease(v24);
      }
      else
      {
        v40 = 0u;
        v41 = 0u;
      }
      v25 = sub_10001A630((uint64_t *)&unk_100846CB0);
      throwingCast<A>(_:as:failureMessage:)(&v38, &v40, v25, 0, 0, v25);
      sub_1000F4294((uint64_t)&v40);
      v26 = (uint64_t)v38;
      v36 = (id)objc_opt_self(NSManagedObjectContext);
      v27 = swift_initStackObject(v13, v39);
      *(_OWORD *)(v27 + 16) = xmmword_1006A3C00;
      *(_QWORD *)&v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUpdatedObjectsKey);
      *((_QWORD *)&v40 + 1) = v28;
      AnyHashable.init<A>(_:)((_QWORD *)(v27 + 32), &v40, &type metadata for String, &protocol witness table for String);
      *(_QWORD *)(v27 + 96) = v25;
      *(_QWORD *)(v27 + 72) = v26;
      swift_bridgeObjectRetain(v26);
      sub_1002B007C(v27);
      v29 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v30 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v31 = swift_allocObject(v30, 40, 7);
      *(_OWORD *)(v31 + 16) = xmmword_1006A7330;
      *(_QWORD *)(v31 + 32) = a1;
      *(_QWORD *)&v40 = v31;
      specialized Array._endMutation()(v31);
      sub_1000151B0(0, (unint64_t *)&unk_100846CC0, NSManagedObjectContext_ptr);
      v32 = a1;
      v33 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v36, "mergeChangesFromRemoteContextSave:intoContexts:", v29, v33, swift_bridgeObjectRelease().n128_f64[0]);

      if ((unint64_t)v26 >> 62)
      {
        if (v26 < 0)
          v35 = v26;
        else
          v35 = v26 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v26);
        v13 = (id)_CocoaArrayWrapper.endIndex.getter(v35);

        swift_bridgeObjectRelease_n(v26, 2);
      }
      else
      {
        v13 = *(id *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);

        swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    v13 = v37;
    _convertNSErrorToError(_:)(v17);

    swift_willThrow(v21);
  }
  return v13;
}

uint64_t sub_1002A8F2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006A8550;
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  KeyPath = swift_getKeyPath(&unk_1006B2FE8);
  *(_QWORD *)(v1 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)(KeyPath, 0);
  v3 = swift_getKeyPath(&unk_1006B3020);
  v4 = NSSortDescriptor.init<A, B>(keyPath:ascending:)(v3, 1);
  *(_QWORD *)(v1 + 40) = v4;
  result = specialized Array._endMutation()(v4);
  qword_100843198 = v1;
  return result;
}

uint64_t sub_1002A8FD8(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  Class isa;
  uint64_t v14;
  uint64_t v16;

  if (a2)
  {
    v4 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v5 = swift_allocObject(v4, 40, 7);
    *(_OWORD *)(v5 + 16) = xmmword_1006A7330;
    *(_QWORD *)(v5 + 32) = a2;
    v16 = v5;
    specialized Array._endMutation()(v5);
    v6 = v16;
  }
  else
  {
    v6 = 0;
  }
  v7 = a2;
  swift_bridgeObjectRetain(a1);
  v9 = (void *)sub_1002A878C(v8, v6, 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = type metadata accessor for REMCDGroceryOperationQueueItem();
  v11 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v10), "entity");
  objc_msgSend(v11, "setEntity:", v12);

  objc_msgSend(v11, "setAffectedStores:", 0);
  objc_msgSend(v11, "setPredicate:", v9);

  if (qword_1008370F0 != -1)
    swift_once(&qword_1008370F0, sub_1002A8F2C);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v11, "setSortDescriptors:", isa);

  objc_msgSend(v11, "setReturnsObjectsAsFaults:", 0);
  v14 = NSManagedObjectContext.fetch<A>(_:)(v11, v10);

  return v14;
}

const char *sub_1002A91C0()
{
  return "priorityRawValue";
}

id sub_1002A91CC@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "priorityRawValue");
  *a2 = (_WORD)result;
  return result;
}

id sub_1002A91FC(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, "setPriorityRawValue:", *a1);
}

uint64_t sub_1002A9210@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_creationDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_1002A923C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_1008380D0, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t (*)(void))&Date._bridgeToObjectiveC(), (SEL *)&selRef_setCreationDate_);
}

const char *sub_1002A9270()
{
  return "isCompleted";
}

id sub_1002A927C@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "isCompleted");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1002A92AC(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setIsCompleted:", *a1);
}

const char *sub_1002A92C0()
{
  return "operationTypeRawValue";
}

id sub_1002A92CC@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "operationTypeRawValue");
  *a2 = (_WORD)result;
  return result;
}

id sub_1002A92FC(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, "setOperationTypeRawValue:", *a1);
}

const char *sub_1002A9310()
{
  return "listIdentifier";
}

uint64_t sub_1002A931C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_listIdentifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_1002A9348(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_100839C80, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(void))&UUID._bridgeToObjectiveC(), (SEL *)&selRef_setListIdentifier_);
}

void sub_1002A937C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  Class isa;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;

  KeyPath = swift_getKeyPath(&unk_1006B3058);
  v2 = sub_100342B24(KeyPath);
  v3 = swift_release(KeyPath);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v3);
  v5 = _swiftEmptyArrayStorage[2];
  v4 = _swiftEmptyArrayStorage[3];
  if (v5 >= v4 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v4 > 1);
  v6 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5, v2);
  specialized Array._endMutation()(v6);
  v7 = (void *)sub_10000D2BC(_swiftEmptyArrayStorage);
  v8 = type metadata accessor for REMCDGroceryOperationQueueItem();
  v9 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v8), "entity");
  objc_msgSend(v9, "setEntity:", v10);

  objc_msgSend(v9, "setAffectedStores:", 0);
  objc_msgSend(v9, "setPredicate:", v7);

  objc_msgSend(v9, "setFetchLimit:", 1);
  if (qword_1008370F0 != -1)
    swift_once(&qword_1008370F0, sub_1002A8F2C);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v9, "setSortDescriptors:", isa);

  objc_msgSend(v9, "setReturnsObjectsAsFaults:", 0);
  v12 = NSManagedObjectContext.fetch<A>(_:)(v9, v8);
  if (v0)
  {

    return;
  }
  v13 = v12;
  if ((unint64_t)v12 >> 62)
  {
    if (v12 < 0)
      v15 = v12;
    else
      v15 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v12);
    v16 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease();
    if (!v16)
      goto LABEL_12;
  }
  else if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_12:
    swift_bridgeObjectRelease();

    return;
  }
  if ((v13 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0, v13);
    goto LABEL_12;
  }
  if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v14 = *(id *)(v13 + 32);
    goto LABEL_12;
  }
  __break(1u);
}

id sub_1002A9610(void *a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  Class isa;
  uint64_t v29;
  uint64_t v30;
  id v31;
  Class v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  _BYTE v37[104];
  __int128 v38;
  __int128 v39;

  *(_QWORD *)&v38 = _swiftEmptyArrayStorage;
  KeyPath = swift_getKeyPath(&unk_1006B3058);
  v4 = sub_100342B64(KeyPath);
  v5 = swift_release(KeyPath);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v5);
  v7 = _swiftEmptyArrayStorage[2];
  v6 = _swiftEmptyArrayStorage[3];
  if (v7 >= v6 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1);
  v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v4);
  specialized Array._endMutation()(v8);
  v9 = (id)sub_10000D2BC(v38);
  v10 = sub_1004BB6C8((uint64_t)v9);
  if (v1)
  {

  }
  else
  {
    v12 = (void *)v10;

    v13 = objc_msgSend(objc_allocWithZone((Class)NSBatchDeleteRequest), "initWithFetchRequest:", v12);
    objc_msgSend(v13, "setResultType:", 1);
    v35 = 0;
    v14 = objc_msgSend(a1, "executeRequest:error:", v13, &v35);
    v9 = v35;
    if (v14)
    {
      v15 = v14;
      *((_QWORD *)&v39 + 1) = sub_1000151B0(0, (unint64_t *)&unk_100846CA0, NSPersistentStoreResult_ptr);
      *(_QWORD *)&v38 = v15;
      v16 = sub_1000151B0(0, (unint64_t *)&unk_10083AE80, NSBatchDeleteResult_ptr);
      v17 = v9;
      throwingCast<A>(_:as:failureMessage:)(&v36, &v38, v16, 0, 0, v16);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v38);
      v20 = v36;
      v21 = objc_msgSend(v36, "result");
      if (v21)
      {
        v22 = v21;
        _bridgeAnyObjectToAny(_:)(&v38, v21);
        swift_unknownObjectRelease(v22);
      }
      else
      {
        v38 = 0u;
        v39 = 0u;
      }
      v23 = sub_10001A630((uint64_t *)&unk_100846CB0);
      throwingCast<A>(_:as:failureMessage:)(&v36, &v38, v23, 0, 0, v23);
      sub_1000F4294((uint64_t)&v38);
      v24 = (uint64_t)v36;
      v34 = (id)objc_opt_self(NSManagedObjectContext);
      v25 = sub_10001A630(&qword_10083ADC0);
      inited = swift_initStackObject(v25, v37);
      *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
      *(_QWORD *)&v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSDeletedObjectsKey);
      *((_QWORD *)&v38 + 1) = v27;
      AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), &v38, &type metadata for String, &protocol witness table for String);
      *(_QWORD *)(inited + 96) = v23;
      *(_QWORD *)(inited + 72) = v24;
      swift_bridgeObjectRetain(v24);
      sub_1002B007C(inited);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v29 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v30 = swift_allocObject(v29, 40, 7);
      *(_OWORD *)(v30 + 16) = xmmword_1006A7330;
      *(_QWORD *)(v30 + 32) = a1;
      *(_QWORD *)&v38 = v30;
      specialized Array._endMutation()(v30);
      sub_1000151B0(0, (unint64_t *)&unk_100846CC0, NSManagedObjectContext_ptr);
      v31 = a1;
      v32 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v34, "mergeChangesFromRemoteContextSave:intoContexts:", isa, v32, swift_bridgeObjectRelease().n128_f64[0]);

      if ((unint64_t)v24 >> 62)
      {
        if (v24 < 0)
          v33 = v24;
        else
          v33 = v24 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v24);
        v9 = (id)_CocoaArrayWrapper.endIndex.getter(v33);

        swift_bridgeObjectRelease();
      }
      else
      {
        v9 = *(id *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);

      }
      swift_bridgeObjectRelease();

    }
    else
    {
      v18 = v35;
      _convertNSErrorToError(_:)(v9);

      swift_willThrow(v19);
    }
  }
  return v9;
}

uint64_t sub_1002A9A70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008431A8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008431A8);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1002A9B00(uint64_t a1)
{
  id *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*v1, "objectIDs");
  v4 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  sub_1002A9D10(a1, v5, 128, 0);
  v7 = v6;
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1002A9BA0(uint64_t a1)
{
  id *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;

  v3 = objc_msgSend(*v1, "templateObjectID");
  if (qword_1008372C0 != -1)
    swift_once(&qword_1008372C0, sub_100374590);
  sub_1002A9D10(a1, (uint64_t)v3, 1, (objc_class *)qword_100871E70);
  v5 = v4;

  return v5;
}

NSString sub_1002A9C3C@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  NSString result;
  uint64_t v7;

  v4 = *a1;
  v5 = type metadata accessor for REMTemplateSectionStorageCDIngestor();
  swift_initStackObject(v5, &v7);
  result = sub_100400F1C(v4);
  if (!v2)
    *a2 = result;
  return result;
}

void *sub_1002A9C9C@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *v4;
  id v5;
  void *result;

  v4 = *a1;
  v5 = objc_msgSend((id)objc_opt_self(ICCloudConfiguration), "sharedConfiguration");
  objc_msgSend(v5, "templatePublicLinkTTL");

  result = sub_10015691C(v4);
  if (!v2)
    *a2 = result;
  return result;
}

void sub_1002A9D10(uint64_t a1, uint64_t a2, char a3, objc_class *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  objc_class *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  objc_class *v14;
  objc_class *v15;
  objc_class *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(Class, uint64_t, uint64_t, __n128);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Class v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  id v33;
  void *v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  Class isa;
  Class v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(Class, uint64_t, uint64_t, __n128);
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  Class v58;
  uint64_t v59;
  uint64_t v60;

  v58 = a4;
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (objc_class *)((char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  v13 = (char *)&v52 - v12;
  sub_1003746B0();
  v15 = v14;
  v16 = (objc_class *)sub_100374B40();
  v17 = v59;
  v18 = sub_100374DD8(a2, a3, a1, v58, v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v17)
  {
    v58 = v10;
    v59 = v7;
    if (qword_1008370F8 != -1)
      swift_once(&qword_1008370F8, sub_1002A9A70);
    v19 = v59;
    v20 = sub_10001AAA8(v59, (uint64_t)qword_1008431A8);
    v21 = v8;
    v22 = *(uint64_t (**)(Class, uint64_t, uint64_t, __n128))(v8 + 16);
    v53 = v20;
    v54 = v22;
    v23 = ((uint64_t (*)(char *))v22)(v13);
    v57 = &v52;
    v60 = v18;
    __chkstk_darwin(v23);
    *(&v52 - 2) = (uint64_t)v13;
    v24 = sub_10001A630(&qword_1008431C0);
    v25 = sub_1000151B0(0, &qword_1008431C8, REMTemplateSectionStorage_ptr);
    v26 = sub_1000C4C0C(&qword_1008431D0, &qword_1008431C0);
    v56 = v25;
    v27 = Sequence.map<A>(skippingError:_:)(sub_1002AA1E4, &v52 - 4, sub_1002A9C3C, 0, v24, v25, v26);
    v28 = v58;
    v29 = *(void (**)(char *, uint64_t))(v21 + 8);
    v29(v13, v19);
    v60 = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v18 >> 62)
    {
      if (v18 < 0)
        v51 = v18;
      else
        v51 = v18 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v18);
      v30 = _CocoaArrayWrapper.endIndex.getter(v51);
    }
    else
    {
      v30 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v18);
    }
    v55 = v27;
    v57 = (uint64_t *)v29;
    if (v30)
    {
      if (v30 < 1)
      {
        __break(1u);
        return;
      }
      for (i = 0; i != v30; ++i)
      {
        if ((v18 & 0xC000000000000001) != 0)
          v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v18);
        else
          v33 = *(id *)(v18 + 8 * i + 32);
        v34 = v33;
        v35 = objc_msgSend(v33, "template");

        if (v35)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v36);
          v38 = *(_QWORD *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v37 = *(_QWORD *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v38 >= v37 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1);
          v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, v35);
          specialized Array._endMutation()(v32);
        }
      }
      swift_bridgeObjectRelease();
      v39 = (_QWORD *)v60;
      v28 = v58;
    }
    else
    {
      swift_bridgeObjectRelease();
      v39 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    v60 = (uint64_t)v39;
    v40 = sub_10001A630(&qword_100851900);
    v41 = sub_1000C4C0C(&qword_10083FB78, &qword_100851900);
    v42 = sub_1002AA1F0();
    v43 = Sequence<>.unique()(v40, v41, v42);
    v44 = swift_bridgeObjectRelease();
    v45 = v54(v28, v53, v59, v44);
    v60 = v43;
    __chkstk_darwin(v45);
    *(&v52 - 2) = v46;
    v47 = sub_1000151B0(0, &qword_10083D0D8, REMTemplateStorage_ptr);
    Sequence.map<A>(skippingError:_:)(sub_1002AA238, &v52 - 4, sub_1002A9C9C, 0, v40, v47, v41);
    ((void (*)(Class, uint64_t))v57)(v58, v59);
    swift_bridgeObjectRelease();
    v48 = objc_allocWithZone((Class)REMTemplateSectionsDataViewInvocationResult);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v50 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v48, "initWithTemplateStorages:templateSectionStorages:", isa, v50, swift_bridgeObjectRelease().n128_f64[0]);

  }
}

uint64_t sub_1002AA1E4(uint64_t a1, uint64_t a2)
{
  return sub_1003812D8(a2);
}

unint64_t sub_1002AA1F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100844900;
  if (!qword_100844900)
  {
    v1 = type metadata accessor for REMCDTemplate();
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100844900);
  }
  return result;
}

uint64_t sub_1002AA238(uint64_t a1, uint64_t a2)
{
  return sub_100381090(a2);
}

uint64_t sub_1002AA244(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Subtasks;
  uint64_t v23;

  v23 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v20 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v6 = *(_QWORD *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void **)(v1 + 24);
  v21 = a1;
  sub_1002AA478(v13, a1);
  if (!v2)
  {
    v19 = v14;
    v15 = objc_msgSend(*(id *)(v1 + 40), "shouldSaveCompleted");
    v16 = (unsigned int *)&enum case for REMRemindersListDataView.ShowCompleted.on(_:);
    if (!v15)
      v16 = (unsigned int *)&enum case for REMRemindersListDataView.ShowCompleted.off(_:);
    (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *v16, v9);
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for REMRemindersListDataView.FetchSubtasks.on(_:), Subtasks);
    v17 = v20;
    (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v5, enum case for REMRemindersListDataView.SortingStyle.manual(_:), v23);
    v1 = sub_1003A27EC(v19, v21, (uint64_t)v12, (uint64_t)v8, (uint64_t)v5, 0);

    (*(void (**)(char *, uint64_t))(v17 + 8))(v5, v23);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, Subtasks);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return v1;
}

void sub_1002AA478(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  Class isa;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  Class v18;
  double v19;
  uint64_t v20;
  Class v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  Class v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  id v36;

  v4 = v2;
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  v9 = *(void **)(v2 + 24);
  *(_QWORD *)(v8 + 32) = v9;
  specialized Array._endMutation()(v8);
  v10 = objc_allocWithZone((Class)REMListsDataViewInvocation_fetchByObjectIDs);
  sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v11 = v9;
  isa = Array._bridgeToObjectiveC()().super.isa;
  v13 = objc_msgSend(v10, "initWithObjectIDs:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v14 = (void *)sub_10015B774(a2);
  if (!v3)
  {
    v15 = objc_opt_self(REMListsDataViewInvocationResult);
    v16 = swift_dynamicCastObjCClass(v14, v15);
    if (v16)
    {
      v17 = (void *)v16;
      v36 = v14;
      v18 = (Class)objc_msgSend(v17, "accountStorages");
      if (!v18)
      {
        v20 = sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
        static Array._unconditionallyBridgeFromObjectiveC(_:)(0, v20);
        v18 = Array._bridgeToObjectiveC()().super.isa;
        *(_QWORD *)&v19 = swift_bridgeObjectRelease().n128_u64[0];
      }
      v21 = (Class)objc_msgSend(v17, "listStorages", v19, v14);
      if (!v21)
      {
        v22 = sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
        static Array._unconditionallyBridgeFromObjectiveC(_:)(0, v22);
        v21 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
      v23 = (void *)objc_opt_self(REMListsDataView);
      v24 = *(_QWORD *)(v4 + 48);
      v25 = swift_allocObject(v7, 40, 7);
      *(_OWORD *)(v25 + 16) = xmmword_1006A7330;
      *(_QWORD *)(v25 + 32) = a1;
      specialized Array._endMutation()(v25);
      v26 = a1;
      v27 = Array._bridgeToObjectiveC()().super.isa;
      v28 = objc_msgSend(v23, "listsFromAccountStorages:listStorages:store:requestedListIDs:", v18, v21, v24, v27, swift_bridgeObjectRelease().n128_f64[0]);

      if (v28)
      {
        v29 = sub_1000151B0(0, &qword_10083DFC8, REMList_ptr);
        v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v28, v29);

        v31 = v26;
        v32 = sub_10011A634(v30);
        swift_bridgeObjectRelease();

        if (v32)
        {
          REMList.codable.getter();

          return;
        }
      }
      v33 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v26);
      swift_willThrow(v33);

      v14 = v35;
    }
    else
    {
      v34 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", a1);
      swift_willThrow(v34);
    }

  }
}

id sub_1002AA808(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  id v6;
  objc_class *v7;
  objc_class *v8;
  objc_class *v9;
  objc_class *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v4 = *(void **)(v1 + 24);
  v5 = qword_100837750;
  v6 = v4;
  if (v5 != -1)
    swift_once(&qword_100837750, sub_1004E80E4);
  v7 = (objc_class *)qword_1008721E8;
  sub_1004E8204();
  v9 = v8;
  v10 = (objc_class *)sub_1004E8694();
  v11 = sub_1004E892C((uint64_t)v4, 1, a1, v7, v9, v10);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v2)
  {
    if ((unint64_t)v11 >> 62)
    {
      if (v11 < 0)
        v14 = v11;
      else
        v14 = v11 & 0xFFFFFFFFFFFFFF8;
      v15 = type metadata accessor for REMCDBaseSection();
      swift_bridgeObjectRetain(v11);
      v6 = (id)_bridgeCocoaArray<A>(_:)(v14, v15);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain(v11);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v12);
      type metadata accessor for REMCDBaseSection();
      v6 = (id)v11;
    }
    swift_bridgeObjectRelease();
  }
  return v6;
}

void sub_1002AA93C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Class isa;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  __int128 v35;
  char v36[40];
  char v37[40];
  uint64_t v38;

  v2 = _s10PredicatesOMa_1(0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)&v36[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  v5 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v6 = swift_allocObject(v5, 40, 7);
  v35 = xmmword_1006A7330;
  *(_OWORD *)(v6 + 16) = xmmword_1006A7330;
  v7 = *(void **)(v0 + 24);
  *(_QWORD *)(v6 + 32) = v7;
  v38 = v6;
  specialized Array._endMutation()(v6);
  *v4 = v38;
  swift_storeEnumTagMultiPayload(v4, v2, 4);
  inited = swift_initStackObject(v5, v37);
  *(_OWORD *)(inited + 16) = v35;
  KeyPath = swift_getKeyPath(&unk_1006B3238);
  *(_QWORD *)(inited + 32) = KeyPath;
  v38 = inited;
  specialized Array._endMutation()(KeyPath);
  v10 = v38;
  v11 = swift_initStackObject(v5, v36);
  *(_OWORD *)(v11 + 16) = v35;
  v12 = swift_getKeyPath(&unk_1006B3268);
  *(_QWORD *)(v11 + 32) = v12;
  v38 = v11;
  specialized Array._endMutation()(v12);
  v13 = v38;
  v14 = v7;
  sub_10000A3AC();
  v16 = (void *)v15;
  v17 = (void *)sub_100358F8C(v10, v13, 0, v15);

  if (qword_1008376D0 != -1)
    swift_once(&qword_1008376D0, sub_1004A7024);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v17, "setSortDescriptors:", isa);

  v19 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v20 = NSManagedObjectContext.fetch<A>(_:)(v17, v19);
  if (v1)
  {

    sub_1000EC49C((uint64_t)v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  *(_QWORD *)&v35 = v14;
  v38 = v20;
  v21 = sub_10001A630(&qword_10083FF50);
  v22 = sub_1000EC4D8();
  v23 = Sequence.elements<A>(ofType:)(v19, v21, v19, v22);
  swift_bridgeObjectRelease();

  sub_1000EC49C((uint64_t)v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!((unint64_t)v23 >> 62))
  {
    v24 = v35;
    if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_7;
LABEL_18:
    swift_bridgeObjectRelease();
    v34 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v24);
    swift_willThrow(v34);
    return;
  }
  if (v23 < 0)
    v32 = v23;
  else
    v32 = v23 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v23);
  v33 = _CocoaArrayWrapper.endIndex.getter(v32);
  swift_bridgeObjectRelease();
  v24 = v35;
  if (!v33)
    goto LABEL_18;
LABEL_7:
  if ((v23 & 0xC000000000000001) != 0)
  {
    v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v23);
  }
  else
  {
    if (!*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v25 = *(id *)(v23 + 32);
  }
  v26 = v25;
  v27 = objc_msgSend(v25, "membershipsOfRemindersInSectionsAsData", swift_bridgeObjectRelease().n128_f64[0]);
  if (v27)
  {
    v28 = v27;
    v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v27);
    v31 = v30;

    sub_1000151B0(0, (unint64_t *)&qword_100840030, REMMemberships_ptr);
    static REMJSONRepresentable.fromJSONData(_:)(&v38, v29, v31);
    sub_1000A71C8(v29, v31);
  }

}

uint64_t type metadata accessor for RDTemplateOperationCopyRemindersFromREMListToTemplate()
{
  return objc_opt_self(_TtC7remindd53RDTemplateOperationCopyRemindersFromREMListToTemplate);
}

uint64_t sub_1002AAD64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008432F0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008432F0);
  if (qword_100837658 != -1)
    swift_once(&qword_100837658, sub_1004A18E0);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_1008720E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1002AADF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _BYTE v22[16];
  _BYTE v23[24];
  _BYTE v24[24];

  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_10083A360);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = v1 + OBJC_IVAR____TtC7remindd42RDDataStoreApplicationShortcutListProvider_storeControllerObservationToken;
  swift_beginAccess(v1 + OBJC_IVAR____TtC7remindd42RDDataStoreApplicationShortcutListProvider_storeControllerObservationToken, v24, 0, 0);
  sub_1000E542C(v9, (uint64_t)v4);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10000882C((uint64_t)v4, (uint64_t *)&unk_10083A360);
  }
  else
  {
    sub_1000E54B4((uint64_t)v4, (uint64_t)v8);
    if (qword_100837100 != -1)
      swift_once(&qword_100837100, sub_1002AAD64);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_10001AAA8(v10, (uint64_t)qword_1008432F0);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.info.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Removing RDDataStoreApplicationShortcutListProvider observer on store controller", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    v15 = *(_QWORD *)(v1 + 48);
    v16 = *(os_unfair_lock_s **)(v15 + 40);
    os_unfair_lock_lock(v16);
    __chkstk_darwin(v17);
    *(_QWORD *)&v22[-16] = v8;
    swift_beginAccess(v15 + 48, v23, 33, 0);
    sub_1001CE554((uint64_t (*)(unint64_t, __n128))sub_1000E54F8, (uint64_t)&v22[-32]);
    v19 = *(_QWORD *)(*(_QWORD *)(v15 + 48) + 16);
    if (v19 < v18)
    {
      __break(1u);
      return;
    }
    sub_1001CED20(v18, v19);
    swift_endAccess(v23);
    os_unfair_lock_unlock(v16);
    sub_1000A3F78((uint64_t)v8);
  }
  v20 = OBJC_IVAR____TtC7remindd42RDDataStoreApplicationShortcutListProvider_preferredDefaultListIDObservationToken;
  v21 = *(void **)(v1
                 + OBJC_IVAR____TtC7remindd42RDDataStoreApplicationShortcutListProvider_preferredDefaultListIDObservationToken);
  if (v21)
    objc_msgSend(v21, "stopObserving");
  swift_bridgeObjectRelease();
  sub_100008EFC(v1 + 24);

  swift_release(*(_QWORD *)(v1 + 48));
  sub_10000882C(v9, (uint64_t *)&unk_10083A360);
  swift_unknownObjectRelease(*(_QWORD *)(v1 + v20));

}

uint64_t sub_1002AB0B0()
{
  uint64_t v0;

  sub_1002AADF4();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1002AB0D4()
{
  return type metadata accessor for RDDataStoreApplicationShortcutListProvider(0);
}

uint64_t type metadata accessor for RDDataStoreApplicationShortcutListProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_100843350;
  if (!qword_100843350)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDDataStoreApplicationShortcutListProvider);
  return result;
}

void sub_1002AB118(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = &unk_1006B32E0;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_1000DFA6C(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    v4[5] = &unk_1006B32F8;
    v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[7] = &unk_1006B3310;
    swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
  }
}

void sub_1002AB1CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t inited;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  _QWORD aBlock[5];
  uint64_t v37;
  _BYTE v38[48];

  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_10083A360);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)aBlock - v6;
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (_QWORD *)((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(void **)(v1 + 40);
  *v11 = v12;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  v13 = v12;
  v14 = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once(&qword_100837100, sub_1002AAD64);
    goto LABEL_4;
  }
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC7remindd42RDDataStoreApplicationShortcutListProvider_isStarted) & 1) == 0)
  {
    *(_BYTE *)(v1 + OBJC_IVAR____TtC7remindd42RDDataStoreApplicationShortcutListProvider_isStarted) = 1;
    v20 = sub_10001A630((uint64_t *)&unk_10083A340);
    inited = swift_initStackObject(v20, v38);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
    v22 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
    v23 = objc_msgSend((id)swift_getObjCClassFromMetadata(v22), "cdEntityName");
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v26 = v25;

    *(_QWORD *)(inited + 32) = v24;
    *(_QWORD *)(inited + 40) = v26;
    v27 = sub_1002E6C54(inited);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, 1, &type metadata for String);
    v28 = swift_allocObject(&unk_1007EC720, 24, 7);
    swift_weakInit(v28 + 16, v1);
    swift_retain(v28);
    sub_100395434(v27, v13, (uint64_t)sub_1002AC6B0, v28, (uint64_t)v7);
    swift_bridgeObjectRelease(v27);
    swift_release_n(v28, 2);
    v29 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v7, 0, 1, v29);
    sub_1000E532C((uint64_t)v7, (uint64_t)v5);
    v30 = v1 + OBJC_IVAR____TtC7remindd42RDDataStoreApplicationShortcutListProvider_storeControllerObservationToken;
    swift_beginAccess(v1 + OBJC_IVAR____TtC7remindd42RDDataStoreApplicationShortcutListProvider_storeControllerObservationToken, aBlock, 33, 0);
    sub_1000E5374((uint64_t)v5, v30);
    swift_endAccess(aBlock);
    v31 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
    v32 = swift_allocObject(&unk_1007EC720, 24, 7);
    swift_weakInit(v32 + 16, v1);
    aBlock[4] = sub_1002AC6B8;
    v37 = v32;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E18E4;
    aBlock[3] = &unk_1007EC738;
    v33 = _Block_copy(aBlock);
    swift_release(v37);
    v34 = objc_msgSend(v31, "observePreferredDefaultListIDWithBlock:", v33);
    _Block_release(v33);

    v35 = *(_QWORD *)(v1
                    + OBJC_IVAR____TtC7remindd42RDDataStoreApplicationShortcutListProvider_preferredDefaultListIDObservationToken);
    *(_QWORD *)(v1
              + OBJC_IVAR____TtC7remindd42RDDataStoreApplicationShortcutListProvider_preferredDefaultListIDObservationToken) = v34;
    swift_unknownObjectRelease(v35);
    sub_1002AB6FC();
    return;
  }
  if (qword_100837100 != -1)
    goto LABEL_9;
LABEL_4:
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10001AAA8(v15, (uint64_t)qword_1008432F0);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "RDDataStoreApplicationShortcutListProvider must be started at most once", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

}

void sub_1002AB5F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _BYTE v10[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    sub_1002AB6FC();
    swift_release(v4);
  }
  else
  {
    if (qword_100837100 != -1)
      swift_once(&qword_100837100, sub_1002AAD64);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10001AAA8(v5, (uint64_t)qword_1008432F0);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.info.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Received store controller change notification after RDDataStoreApplicationShortcutListProvider was deallocated", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

  }
}

void sub_1002AB6FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __n128 v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  int64_t v53;
  int isUniquelyReferenced_nonNull_native;
  int64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  void (*v66)(char *, char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  id v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t, uint64_t, __n128);
  __n128 v108;
  char *v109;
  void (*v110)(char *, uint64_t, uint64_t);
  char *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t Strong;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  id v128;
  uint64_t v129;
  int v130;
  int v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  __int128 v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;

  v1 = v0;
  v2 = sub_10001A630(&qword_100843498);
  __chkstk_darwin(v2);
  v136 = (char *)&v125 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for REMAccountsListDataView.Model.GroupChild(0);
  v5 = *(_QWORD *)(v4 - 8);
  v143 = v4;
  v144 = v5;
  v6 = __chkstk_darwin(v4);
  v139 = (char *)&v125 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v135 = (char *)&v125 - v9;
  v10 = __chkstk_darwin(v8);
  v138 = (char *)&v125 - v11;
  __chkstk_darwin(v10);
  v129 = (uint64_t)&v125 - v12;
  v13 = type metadata accessor for REMAccountsListDataView.Model.Group(0);
  v133 = *(_QWORD *)(v13 - 8);
  v134 = v13;
  __chkstk_darwin(v13);
  v132 = (char *)&v125 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for REMAccountsListDataView.Model.AccountChild(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v125 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v125 - v20;
  v22 = type metadata accessor for DispatchPredicate(0);
  v23 = *(char **)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (uint64_t *)((char *)&v125 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = *(void **)(v1 + 40);
  *v25 = v26;
  (*((void (**)(_QWORD *, _QWORD, uint64_t))v23 + 13))(v25, enum case for DispatchPredicate.onQueue(_:), v22);
  v27 = v26;
  LOBYTE(v26) = _dispatchPreconditionTest(_:)(v25);
  (*((void (**)(_QWORD *, uint64_t))v23 + 1))(v25, v22);
  if ((v26 & 1) == 0)
  {
LABEL_79:
    __break(1u);
LABEL_80:
    swift_once(&qword_100837100, sub_1002AAD64);
LABEL_6:
    v33 = type metadata accessor for Logger(0);
    sub_10001AAA8(v33, (uint64_t)qword_1008432F0);
    swift_errorRetain(v23);
    v34 = swift_errorRetain(v23);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = (char *)swift_slowAlloc(32, -1);
      v148 = v38;
      *(_DWORD *)v37 = 136315138;
      v146 = (uint64_t)v23;
      swift_errorRetain(v23);
      v39 = sub_10001A630((uint64_t *)&unk_10083AA20);
      v40 = String.init<A>(describing:)(&v146, v39);
      v42 = v41;
      v146 = sub_10001A820(v40, v41, (uint64_t *)&v148);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147);
      swift_bridgeObjectRelease(v42);
      swift_errorRelease(v23);
      swift_errorRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Unable to fetch lists to use as application shortcuts {error: %s}", v37, 0xCu);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);

      swift_errorRelease(v23);
    }
    else
    {
      swift_errorRelease(v23);
      swift_errorRelease(v23);
      swift_errorRelease(v23);

    }
    return;
  }
  v28 = *(void **)(v1 + OBJC_IVAR____TtC7remindd42RDDataStoreApplicationShortcutListProvider_store);
  v148 = 0;
  v29 = objc_msgSend(v28, "fetchDefaultListWithError:", &v148);
  v30 = v29;
  if (v148)
  {
    v23 = v148;

    swift_willThrow(v31);
    if (qword_100837100 == -1)
      goto LABEL_6;
    goto LABEL_80;
  }
  v128 = v29;
  type metadata accessor for REMAccountsListDataView(0);
  v32 = static REMAccountsListDataView.fetchAccounts(store:diffingAgainst:)(v28, 0);
  v43 = v32;
  v125 = v1;
  v44 = *(_QWORD *)(v32 + 16);
  v145 = (uint64_t)v21;
  if (v44)
  {
    v45 = *(_QWORD *)(type metadata accessor for REMAccountsListDataView.Model.Account(0) - 8);
    v46 = v43 + ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80));
    v47 = *(_QWORD *)(v45 + 72);
    v141 = v43;
    v142 = v47;
    v48 = swift_bridgeObjectRetain(v43);
    v49 = _swiftEmptyArrayStorage;
    while (1)
    {
      v50 = REMAccountsListDataView.Model.Account.children.getter(v48);
      v51 = *(_QWORD *)(v50 + 16);
      v52 = v49[2];
      v53 = v52 + v51;
      if (__OFADD__(v52, v51))
      {
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
        goto LABEL_79;
      }
      v23 = (char *)v50;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v49);
      if (!isUniquelyReferenced_nonNull_native || v53 > v49[3] >> 1)
      {
        if (v52 <= v53)
          v55 = v52 + v51;
        else
          v55 = v52;
        v49 = (_QWORD *)sub_1002C88F8(isUniquelyReferenced_nonNull_native, v55, 1, (unint64_t)v49);
      }
      v21 = (char *)v145;
      if (*((_QWORD *)v23 + 2))
      {
        v56 = v49[2];
        if ((v49[3] >> 1) - v56 < v51)
          goto LABEL_77;
        v57 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
        v58 = *(_QWORD *)(v16 + 72);
        v59 = (char *)v49 + v57 + v58 * v56;
        if (&v23[v57] < &v59[v58 * v51] && v59 < &v23[v57 + v58 * v51])
        {
          _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
          __break(1u);
LABEL_82:
          _diagnoseUnexpectedEnumCase<A>(type:)(v15, v15);
          __break(1u);
          return;
        }
        swift_arrayInitWithCopy(v59);
        if (v51)
        {
          v61 = v49[2];
          v62 = __OFADD__(v61, v51);
          v63 = v61 + v51;
          if (v62)
            goto LABEL_78;
          v49[2] = v63;
        }
      }
      else if (v51)
      {
        goto LABEL_76;
      }
      v48 = swift_bridgeObjectRelease(v23);
      v46 += v142;
      if (!--v44)
      {
        swift_bridgeObjectRelease_n(v141, 2);
        goto LABEL_32;
      }
    }
  }
  swift_bridgeObjectRelease(v32);
  v49 = _swiftEmptyArrayStorage;
LABEL_32:
  v148 = (char *)_swiftEmptyArrayStorage;
  v64 = v49[2];
  if (v64)
  {
    v65 = (char *)v49 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    LODWORD(v141) = enum case for REMAccountsListDataView.Model.AccountChild.list(_:);
    v131 = enum case for REMAccountsListDataView.Model.AccountChild.customSmartList(_:);
    v127 = enum case for REMAccountsListDataView.Model.AccountChild.group(_:);
    v126 = enum case for REMAccountsListDataView.Model.GroupChild.customSmartList(_:);
    v130 = enum case for REMAccountsListDataView.Model.GroupChild.list(_:);
    v140 = *(_QWORD *)(v16 + 72);
    v66 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
    swift_bridgeObjectRetain(v49);
    v137 = xmmword_1006A3C00;
    v142 = (uint64_t)v19;
    do
    {
      v66(v21, v65, v15);
      v66(v19, v21, v15);
      v73 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v19, v15);
      if (v73 == (_DWORD)v141 || v73 == v131)
      {
        (*(void (**)(char *, uint64_t))(v16 + 96))(v19, v15);
        v67 = *(_QWORD *)v19;
        v68 = sub_10001A630(&qword_1008434A0);
        v69 = v144;
        v70 = *(unsigned __int8 *)(v144 + 80);
        v71 = (v70 + 32) & ~v70;
        v72 = swift_allocObject(v68, v71 + *(_QWORD *)(v144 + 72), v70 | 7);
        *(_OWORD *)(v72 + 16) = v137;
        *(_QWORD *)(v72 + v71) = v67;
        (*(void (**)(void))(v69 + 104))();
      }
      else
      {
        if (v73 != v127)
          goto LABEL_82;
        (*(void (**)(char *, uint64_t))(v16 + 96))(v19, v15);
        v74 = v132;
        v75 = v133;
        v76 = v19;
        v77 = v134;
        v78 = (*(uint64_t (**)(char *, char *, uint64_t))(v133 + 32))(v132, v76, v134);
        v72 = REMAccountsListDataView.Model.Group.lists.getter(v78);
        (*(void (**)(char *, uint64_t))(v75 + 8))(v74, v77);
      }
      v21 = (char *)v145;
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v145, v15);
      sub_1001E27C8(v72);
      v65 += v140;
      --v64;
      v19 = (char *)v142;
    }
    while (v64);
    swift_bridgeObjectRelease_n(v49, 2);
  }
  else
  {
    swift_bridgeObjectRelease(v49);
  }
  v79 = v148;
  v80 = v125;
  v81 = v144;
  v82 = v128;
  v83 = (uint64_t)v136;
  if (v128)
  {
    v84 = *((_QWORD *)v148 + 2);
    if (v84)
    {
      v85 = *(unsigned __int8 *)(v144 + 80);
      v141 = v85;
      v142 = (v85 + 32) & ~v85;
      v86 = &v148[v142];
      v145 = sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
      v87 = *(_QWORD *)(v81 + 72);
      v88 = v82;
      swift_bridgeObjectRetain(v79);
      v90 = 0;
      while (1)
      {
        v91 = (void *)REMAccountsListDataView.Model.GroupChild.objectID.getter(v89);
        v92 = objc_msgSend(v88, "objectID");
        v93 = static NSObject.== infix(_:_:)(v91);

        if ((v93 & 1) != 0)
          break;
        ++v90;
        v86 += v87;
        if (v84 == v90)
        {
          swift_bridgeObjectRelease(v79);
          v94 = v143;
          v81 = v144;
          goto LABEL_50;
        }
      }
      swift_bridgeObjectRelease(v79);
      v99 = v129;
      sub_1003DCA70(v90, v129);
      v94 = v143;
      v81 = v144;
      (*(void (**)(uint64_t, uint64_t))(v144 + 8))(v99, v143);
LABEL_50:
      v98 = v128;
      v83 = (uint64_t)v136;
      v95 = v141;
      v96 = v142;
    }
    else
    {
      v87 = *(_QWORD *)(v144 + 72);
      v95 = *(unsigned __int8 *)(v144 + 80);
      v96 = (v95 + 32) & ~v95;
      v97 = v128;
      v98 = v82;
      v94 = v143;
    }
    v100 = sub_10001A630(&qword_1008434A0);
    v101 = swift_allocObject(v100, v96 + v87, v95 | 7);
    *(_OWORD *)(v101 + 16) = xmmword_1006A3C00;
    *(_QWORD *)(v101 + v96) = REMList.codable.getter();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v81 + 104))(v101 + v96, enum case for REMAccountsListDataView.Model.GroupChild.list(_:), v94);
    v102 = v148;
    v146 = v101;
    swift_bridgeObjectRetain(v148);
    sub_1001E27C8(v103);
    v145 = v146;
    v104 = *(_QWORD *)(v146 + 16);
    if (v104)
    {
      v105 = v96;
      v106 = v145 + v96;
      v107 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v81 + 16);
      v108 = swift_bridgeObjectRetain(v145);
      v79 = (char *)_swiftEmptyArrayStorage;
      do
      {
        v109 = v138;
        v107(v138, v106, v94, v108);
        ((void (*)(uint64_t, char *, uint64_t))v107)(v83, v109, v94);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v81 + 56))(v83, 0, 1, v94);
        (*(void (**)(char *, uint64_t))(v81 + 8))(v109, v94);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v83, 1, v94) == 1)
        {
          sub_10000882C(v83, &qword_100843498);
        }
        else
        {
          v110 = *(void (**)(char *, uint64_t, uint64_t))(v81 + 32);
          v111 = v135;
          v110(v135, v83, v94);
          v110(v139, (uint64_t)v111, v94);
          if ((swift_isUniquelyReferenced_nonNull_native(v79) & 1) == 0)
            v79 = (char *)sub_1002C88E4(0, *((_QWORD *)v79 + 2) + 1, 1, (unint64_t)v79);
          v113 = *((_QWORD *)v79 + 2);
          v112 = *((_QWORD *)v79 + 3);
          if (v113 >= v112 >> 1)
            v79 = (char *)sub_1002C88E4(v112 > 1, v113 + 1, 1, (unint64_t)v79);
          *((_QWORD *)v79 + 2) = v113 + 1;
          v94 = v143;
          v110(&v79[v105 + v113 * v87], (uint64_t)v139, v143);
          v81 = v144;
          v83 = (uint64_t)v136;
        }
        v106 += v87;
        --v104;
      }
      while (v104);

      swift_bridgeObjectRelease_n(v145, 2);
      v102 = v148;
    }
    else
    {
      swift_bridgeObjectRelease(v145);

      v79 = (char *)_swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease(v102);
    v148 = v79;
    v80 = v125;
  }
  if (*((_QWORD *)v79 + 2) >= 4uLL)
    v114 = 4;
  else
    v114 = *((_QWORD *)v79 + 2);
  v115 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v116 = swift_unknownObjectRetain_n(v79, 2);
  v117 = (_QWORD *)swift_dynamicCastClass(v116, v115);
  if (!v117)
  {
    swift_bridgeObjectRelease(v79);
    v117 = _swiftEmptyArrayStorage;
  }
  v118 = v117[2];
  swift_release(v117);
  if (v118 == v114)
  {
    v119 = (_QWORD *)swift_dynamicCastClass(v79, v115);
    v120 = v128;
    if (!v119)
    {
      swift_bridgeObjectRelease(v79);
      v119 = _swiftEmptyArrayStorage;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v79);
    v119 = sub_1001E9244((uint64_t)v79, (uint64_t)&v79[(*(unsigned __int8 *)(v81 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80)], 0, (2 * v114) | 1);
    v120 = v128;
  }
  swift_bridgeObjectRelease(v79);
  v121 = *(_QWORD *)(v80 + 16);
  *(_QWORD *)(v80 + 16) = v119;
  swift_bridgeObjectRelease(v121);
  Strong = swift_unknownObjectWeakLoadStrong(v80 + 24, v122);
  if (Strong)
  {
    v124 = Strong;
    sub_1002AC79C(Strong);

    swift_unknownObjectRelease(v124);
  }
  else
  {

  }
}

uint64_t sub_1002AC3E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD v18[2];
  _QWORD *v19;
  _QWORD aBlock[5];
  uint64_t v21;
  _BYTE v22[24];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v22, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v12 = result;
    v18[1] = *(_QWORD *)(result + 40);
    aBlock[4] = sub_1002AC940;
    v21 = result;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000094C8;
    aBlock[3] = &unk_1007EC788;
    v13 = _Block_copy(aBlock);
    v14 = swift_retain(v12);
    static DispatchQoS.unspecified.getter(v14);
    v19 = _swiftEmptyArrayStorage;
    v15 = sub_1000D3124();
    v16 = sub_10001A630((uint64_t *)&unk_100838000);
    v17 = sub_1000D316C();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v16, v17, v3, v15);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v13);
    _Block_release(v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    swift_release(v12);
    return swift_release(v21);
  }
  return result;
}

void sub_1002AC5B4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if (qword_100837100 != -1)
    swift_once(&qword_100837100, sub_1002AAD64);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008432F0);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.info.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Received preferred default list ID changed after RDDataStoreApplicationShortcutListProvider was deallocated", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  sub_1002AB6FC();
}

uint64_t sub_1002AC68C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1002AC6B0(uint64_t a1)
{
  uint64_t v1;

  sub_1002AB5F0(a1, v1);
}

uint64_t sub_1002AC6B8(uint64_t a1)
{
  uint64_t v1;

  return sub_1002AC3E4(a1, v1);
}

_QWORD *sub_1002AC6C0(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  char *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;

  v3[4] = 0;
  swift_unknownObjectWeakInit(v3 + 3, 0);
  v7 = (char *)v3 + OBJC_IVAR____TtC7remindd42RDDataStoreApplicationShortcutListProvider_storeControllerObservationToken;
  v8 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(_QWORD *)((char *)v3
            + OBJC_IVAR____TtC7remindd42RDDataStoreApplicationShortcutListProvider_preferredDefaultListIDObservationToken) = 0;
  *((_BYTE *)v3 + OBJC_IVAR____TtC7remindd42RDDataStoreApplicationShortcutListProvider_isStarted) = 0;
  v3[5] = a1;
  v3[6] = a2;
  v9 = objc_allocWithZone((Class)REMStore);
  v10 = a1;
  swift_retain(a2);
  v11 = objc_msgSend(v9, "initWithDaemonController:", a3);
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC7remindd42RDDataStoreApplicationShortcutListProvider_store) = v11;
  v3[2] = _swiftEmptyArrayStorage;
  return v3;
}

uint64_t sub_1002AC79C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  _QWORD aBlock[5];
  uint64_t v19;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[4] = sub_1002AC938;
  v19 = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007EC760;
  v10 = _Block_copy(aBlock);
  v11 = swift_retain(a1);
  static DispatchQoS.unspecified.getter(v11);
  v17 = _swiftEmptyArrayStorage;
  v12 = sub_1000D3124();
  v13 = sub_10001A630((uint64_t *)&unk_100838000);
  v14 = sub_1000D316C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v2, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v10);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release(v19);
}

double sub_1002AC938()
{
  return sub_100408F20();
}

void sub_1002AC940()
{
  sub_1002AC5B4();
}

uint64_t sub_1002AC958(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_1008434E0, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.AppIntentsSectionsInvocation, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.AppIntentsSectionsInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002AC994()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008434A8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008434A8);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

double sub_1002ACA24@<D0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Configuration;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  id v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v42 = a2;
  v38 = a3;
  v40 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel(0);
  v44 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v39 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v36 - v6;
  v8 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v45 = (uint64_t)&v36 - v13;
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v15 = *(_QWORD *)(Configuration - 8);
  v16 = __chkstk_darwin(Configuration);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  REMRemindersListDataView.AppIntentsSectionsInvocation.Parameters.configuration.getter(v16);
  v43 = (uint64_t)a1;
  v19 = v46;
  v20 = sub_1002AE438(a1);
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, Configuration);
  }
  else
  {
    v22 = v20;
    v36 = v11;
    v37 = v8;
    v46 = v9;
    v24 = v39;
    v23 = v40;
    v25 = v7;
    v26 = v44;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, Configuration);
    v27 = objc_msgSend(v41, "fetchResultTokenToDiffAgainst");
    sub_100493C24(v27, v43, v45);

    v28 = v25;
    REMRemindersListDataView.ListsSectionsModel.init(lists:completedRemindersCount:hasCompletedReminders:prefetchedReminders:prefetchedDueReminders:)(v22, 0, 1, 2, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
    v29 = v24;
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v24, v28, v23);
    v30 = v46;
    v32 = v36;
    v31 = v37;
    v33 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v36, v45, v37);
    v34 = sub_10009FC50(&qword_100843608, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListsSectionsModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.ListsSectionsModel);
    v35 = sub_10009FC50(&qword_100843610, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListsSectionsModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.ListsSectionsModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)(v29, v32, v23, v34, v35);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v28, v23);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v33, v31);
  }
  return result;
}

void sub_1002ACCE4(_QWORD *a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  unint64_t v27;
  char v28;
  _QWORD *v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;

  v4 = v3;
  if (!*(_QWORD *)a2)
    return;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(id *)a2;
  v9 = objc_msgSend(v8, "remObjectID");
  if (!v9)
  {

    return;
  }
  v10 = v9;
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v18 = v7;
    else
      v18 = v7 & 0xFFFFFFFFFFFFFF8;
    v19 = v9;
    swift_bridgeObjectRetain(v7);
    v20 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease();
    if (v20 > 1)
      goto LABEL_5;
LABEL_16:
    swift_bridgeObjectRetain(v7);

    goto LABEL_17;
  }
  v11 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  v12 = v9;
  if (v11 <= 1)
    goto LABEL_16;
LABEL_5:
  sub_100204328(v10, a3);
  if (v3)
  {

    swift_errorRelease(v3);
    v4 = 0;
  }
  else
  {
    v14 = v13;
    if (v13)
    {
      v15 = _s8BaseListCMa();
      v16 = v14;
      v7 = REMOrderedIdentifierMap.reorder<A>(objects:)(v7, v15);

      v17 = v16;
      goto LABEL_18;
    }

  }
  swift_bridgeObjectRetain(v7);
LABEL_17:
  v17 = 0;
  v16 = v10;
LABEL_18:

  v21 = a3;
  v22 = sub_1002ADADC(v7, (uint64_t)v21);
  swift_bridgeObjectRelease();
  if (v4)
  {

  }
  else
  {

    v23 = *a1;
    v24 = *(_QWORD *)(*a1 + 16);
    v25 = v10;
    v26 = v25;
    if (v24 && (v27 = sub_1002C66DC((uint64_t)v25), (v28 & 1) != 0))
    {
      v29 = *(_QWORD **)(*(_QWORD *)(v23 + 56) + 8 * v27);
      swift_bridgeObjectRetain(v29);
    }
    else
    {
      v29 = _swiftEmptyArrayStorage;
    }

    sub_1001E25DC((uint64_t)v22);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
    v31 = *a1;
    *a1 = 0x8000000000000000;
    sub_10028D42C((uint64_t)v29, v26, isUniquelyReferenced_nonNull_native);
    *a1 = v31;

    swift_bridgeObjectRelease();
  }
}

void sub_1002ACF68(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  _QWORD **v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  objc_class *v31;
  objc_class *v32;
  objc_class *v33;
  objc_class *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *i;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  objc_class *v45;
  objc_class *v46;
  objc_class *v47;
  objc_class *v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  id v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  __n128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  id v80;
  void *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  id v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  __n128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD **v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;

  v4 = v3;
  v105 = a2;
  v103 = type metadata accessor for REMRemindersListDataView.SectionLite.SectionType(0);
  v101 = *(_QWORD *)(v103 - 8);
  v6 = __chkstk_darwin(v103);
  v102 = (char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for REMRemindersListDataView.SectionLite(0, v6);
  v9 = *(_QWORD *)(v8 - 8);
  v110 = v8;
  v111 = v9;
  v10 = __chkstk_darwin(v8);
  v113 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List.ListType(0, v10);
  v108 = *(_QWORD *)(v12 - 8);
  v109 = v12;
  __chkstk_darwin(v12);
  v104 = (char *)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v15 = __chkstk_darwin(v14).n128_u64[0];
  v106 = v2;
  v107 = (char *)&v99 - v16;
  v17 = *(_QWORD ***)(v2 + 16);
  v18 = objc_msgSend(v17, "entityName", v15);
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  v22 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v23 = objc_msgSend((id)swift_getObjCClassFromMetadata(v22), "cdEntityName");
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v26 = v25;

  if (v24 == v19 && v26 == v21)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v26, v19, v21, 0);
    swift_bridgeObjectRelease();
    if ((v27 & 1) == 0)
    {
      v38 = sub_1000151B0(0, (unint64_t *)&unk_100840000, off_1007D6720);
      v39 = objc_msgSend((id)swift_getObjCClassFromMetadata(v38), "cdEntityName");
      v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      v42 = v41;

      if (v40 == v19 && v42 == v21)
      {
        swift_bridgeObjectRelease_n(v21, 2);
      }
      else
      {
        v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v42, v19, v21, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v43 & 1) == 0)
        {
          v60 = v17;
          v112 = v3;
          v61 = v106;
          if (qword_100837108 != -1)
            swift_once(&qword_100837108, sub_1002AC994);
          v62 = type metadata accessor for Logger(0);
          sub_10001AAA8(v62, (uint64_t)qword_1008434A8);
          v63 = swift_retain_n(v61);
          v64 = Logger.logObject.getter(v63);
          v65 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v64, v65))
          {
            v66 = (uint8_t *)swift_slowAlloc(12, -1);
            v67 = (_QWORD *)swift_slowAlloc(8, -1);
            *(_DWORD *)v66 = 138412290;
            v115 = v60;
            v68 = v60;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116);
            *v67 = v60;
            swift_release_n(v61);
            _os_log_impl((void *)&_mh_execute_header, v64, v65, "[AppIntentsSectionsInvocation] Unexpected list type to fetch sections: %@", v66, 0xCu);
            v69 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v67, 1, v69);
            swift_slowDealloc(v67, -1, -1);
            swift_slowDealloc(v66, -1, -1);

          }
          else
          {

            swift_release_n(v61);
          }
          v71 = v105;
          v72 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List(0, v70);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v71, 1, 1, v72);
          return;
        }
      }
      v28 = a1;
      v44 = qword_100836F48;
      v30 = v17;
      if (v44 != -1)
        goto LABEL_58;
      goto LABEL_14;
    }
  }
  v28 = a1;
  swift_bridgeObjectRelease();
  v29 = qword_100837750;
  v30 = v17;
  if (v29 != -1)
    goto LABEL_39;
  while (1)
  {
    v31 = (objc_class *)qword_1008721E8;
    sub_1004E8204();
    v33 = v32;
    v34 = (objc_class *)sub_1004E8694();
    v35 = sub_1004E892C((uint64_t)v17, 1, v28, v31, v33, v34);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v4)
      break;
    v100 = v17;
    if (!((unint64_t)v35 >> 62))
    {
      swift_bridgeObjectRetain(v35);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v36);
      type metadata accessor for REMCDBaseSection();
      i = (unsigned int *)&enum case for REMRemindersListDataView.ListsSectionsModel.List.ListType.regular(_:);
LABEL_17:
      v4 = v35;
      goto LABEL_18;
    }
    if (v35 < 0)
      v95 = v35;
    else
      v95 = v35 & 0xFFFFFFFFFFFFFF8;
    v96 = type metadata accessor for REMCDBaseSection();
    swift_bridgeObjectRetain(v35);
    v4 = _bridgeCocoaArray<A>(_:)(v95, v96);
    swift_bridgeObjectRelease();
    for (i = (unsigned int *)&enum case for REMRemindersListDataView.ListsSectionsModel.List.ListType.regular(_:);
          ;
          i = (unsigned int *)&enum case for REMRemindersListDataView.ListsSectionsModel.List.ListType.customSmartList(_:))
    {
LABEL_18:
      v50 = swift_bridgeObjectRelease();
      (*(void (**)(char *, _QWORD, uint64_t, __n128))(v108 + 104))(v107, *i, v109, v50);
      if ((unint64_t)v4 >> 62)
      {
        if (v4 < 0)
          v73 = v4;
        else
          v73 = v4 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v4);
        v51 = _CocoaArrayWrapper.endIndex.getter(v73);
        swift_bridgeObjectRelease();
        v112 = 0;
        if (!v51)
        {
LABEL_44:
          swift_bridgeObjectRelease();
          v4 = *(_QWORD *)(v111 + 72);
          v28 = *(unsigned __int8 *)(v111 + 80);
          v17 = (_QWORD **)((v28 + 32) & ~v28);
          v30 = _swiftEmptyArrayStorage;
LABEL_45:
          v115 = v30;
          v74 = sub_10001A630(&qword_100844030);
          v75 = swift_allocObject(v74, (char *)v17 + v4, v28 | 7);
          *(_OWORD *)(v75 + 16) = xmmword_1006A3C00;
          v76 = v102;
          (*(void (**)(char *, _QWORD, uint64_t))(v101 + 104))(v102, enum case for REMRemindersListDataView.SectionLite.SectionType.sectionless(_:), v103);
          REMRemindersListDataView.SectionLite.init(type:reminders:)(v76, _swiftEmptyArrayStorage);
          v77 = sub_1001E305C(v75);
          v78 = REMObjectID.codable.getter(v77);
          v79 = *(void **)(v106 + 24);
          v80 = objc_msgSend(v79, "name");
          if (v80)
          {
            v81 = v80;
            v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
            v84 = v83;

          }
          else
          {
            v82 = 0;
            v84 = 0xE000000000000000;
          }
          v85 = objc_msgSend(v79, "color");
          if (v85)
          {
            v86 = v85;
            v87 = REMColor.codable.getter();

          }
          else
          {
            v87 = 0;
          }
          v89 = v107;
          v88 = v108;
          v90 = v104;
          v91 = v109;
          (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v104, v107, v109);
          v92 = v105;
          REMRemindersListDataView.ListsSectionsModel.List.init(listID:listName:listColor:listType:sections:)(v78, v82, v84, v87, v90, v115);
          v93.n128_f64[0] = (*(double (**)(char *, uint64_t))(v88 + 8))(v89, v91);
          v94 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List(0, v93);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 56))(v92, 0, 1, v94);
          return;
        }
      }
      else
      {
        v51 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
        v112 = 0;
        if (!v51)
          goto LABEL_44;
      }
      v114 = _swiftEmptyArrayStorage;
      v17 = &v114;
      sub_1001C1C64(0, v51 & ~(v51 >> 63), 0);
      if ((v51 & 0x8000000000000000) == 0)
        break;
      __break(1u);
LABEL_58:
      swift_once(&qword_100836F48, sub_1001BB6F0);
LABEL_14:
      v45 = (objc_class *)qword_100871D00;
      sub_1001BB810();
      v47 = v46;
      v48 = (objc_class *)sub_1001BBCA0();
      v35 = sub_1001BBE78((uint64_t)v17, 1, v28, v45, v47, v48);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v4)
        return;
      v100 = v17;
      if (!((unint64_t)v35 >> 62))
      {
        swift_bridgeObjectRetain(v35);
        dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v49);
        type metadata accessor for REMCDBaseSection();
        i = (unsigned int *)&enum case for REMRemindersListDataView.ListsSectionsModel.List.ListType.customSmartList(_:);
        goto LABEL_17;
      }
      if (v35 < 0)
        v97 = v35;
      else
        v97 = v35 & 0xFFFFFFFFFFFFFF8;
      v98 = type metadata accessor for REMCDBaseSection();
      swift_bridgeObjectRetain(v35);
      v4 = _bridgeCocoaArray<A>(_:)(v97, v98);
      swift_bridgeObjectRelease();
    }
    v52 = 0;
    v30 = v114;
    v53 = v4;
    v54 = v4 & 0xC000000000000001;
    while (v51 != v52)
    {
      if (v54)
        v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v52, v53);
      else
        v55 = *(id *)(v53 + 8 * v52 + 32);
      v56 = v55;
      v57 = v112;
      sub_1002AD8C0();
      if (v57)
      {
        swift_bridgeObjectRelease();
        swift_release(v30);

        (*(void (**)(char *, uint64_t))(v108 + 8))(v107, v109);
        return;
      }
      v112 = 0;

      v114 = v30;
      v59 = v30[2];
      v58 = v30[3];
      if (v59 >= v58 >> 1)
      {
        sub_1001C1C64(v58 > 1, v59 + 1, 1);
        v30 = v114;
      }
      ++v52;
      v30[2] = v59 + 1;
      v28 = *(unsigned __int8 *)(v111 + 80);
      v17 = (_QWORD **)((v28 + 32) & ~v28);
      v4 = *(_QWORD *)(v111 + 72);
      (*(void (**)(char *, char *, uint64_t))(v111 + 32))((char *)v17 + (_QWORD)v30 + v4 * v59, v113, v110);
      if (v51 == v52)
      {
        swift_bridgeObjectRelease();
        goto LABEL_45;
      }
    }
    __break(1u);
LABEL_39:
    swift_once(&qword_100837750, sub_1004E80E4);
  }
}

void sub_1002AD8C0()
{
  void *v0;
  void *v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t ObjCClassFromMetadata;
  NSString v20;
  uint64_t v21;
  id v22;

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  v3 = type metadata accessor for REMRemindersListDataView.SectionLite.SectionType(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (id *)((char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = 0;
  v7 = objc_msgSend(v0, "remObjectIDWithError:", &v22);
  v8 = v22;
  if (v7)
  {
    v9 = v7;
    v10 = v22;
    v11 = objc_msgSend(v1, "displayName");
    if (v11)
    {
      v12 = v11;
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v15 = v14;

      *v6 = REMObjectID.codable.getter();
      v6[1] = v13;
      v6[3] = 0;
      v6[4] = 0;
      v6[2] = v15;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for REMRemindersListDataView.SectionLite.SectionType.sectioned(_:), v3);
      REMRemindersListDataView.SectionLite.init(type:reminders:)(v6, _swiftEmptyArrayStorage);
    }
    else
    {
      v18 = (void *)objc_opt_self(REMError);
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata(ObjectType);
      v20 = String._bridgeToObjectiveC()();
      objc_msgSend(v18, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v20);

      swift_willThrow(v21);
    }

  }
  else
  {
    v16 = v22;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow(v17);
  }
}

uint64_t _s8BaseListCMa()
{
  return objc_opt_self(_TtCE7reminddCO19ReminderKitInternal24REMRemindersListDataView28AppIntentsSectionsInvocationP33_DB8668BBB8D7189043373753A58F51D18BaseList);
}

_QWORD *sub_1002ADADC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v3 = v2;
  v36 = a2;
  v5 = sub_10001A630(&qword_100843618);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List(0, v6);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v34 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v31 = (char *)&v29 - v13;
  if ((unint64_t)a1 >> 62)
    goto LABEL_21;
  v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v14)
  {
    v37 = v9;
    v33 = a1 & 0xC000000000000001;
    v35 = _swiftEmptyArrayStorage;
    v15 = 4;
    v32 = v8;
    v30 = a1;
    while (1)
    {
      v16 = v10;
      v17 = v15 - 4;
      if (!v33)
        break;
      v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v15 - 4, a1);
      v18 = __OFADD__(v17, 1);
      v19 = v15 - 3;
      if (v18)
        goto LABEL_20;
LABEL_11:
      sub_1002ACF68(v36, (uint64_t)v8);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (_QWORD *)swift_release(v10);
      }
      v9 = v14;
      swift_release(v10);
      v10 = v16;
      v20 = v37;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v8, 1, v37) == 1)
      {
        sub_1002AEED4((uint64_t)v8);
      }
      else
      {
        v21 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
        v22 = v31;
        v21(v31, v8, v20);
        v21(v34, v22, v20);
        v23 = (unint64_t)v35;
        if ((swift_isUniquelyReferenced_nonNull_native(v35) & 1) == 0)
          v23 = sub_1002C8738(0, *(_QWORD *)(v23 + 16) + 1, 1, v23);
        v25 = *(_QWORD *)(v23 + 16);
        v24 = *(_QWORD *)(v23 + 24);
        if (v25 >= v24 >> 1)
          v23 = sub_1002C8738(v24 > 1, v25 + 1, 1, v23);
        *(_QWORD *)(v23 + 16) = v25 + 1;
        v10 = v16;
        v26 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
        v35 = (_QWORD *)v23;
        v21((char *)(v23 + v26 + *(_QWORD *)(v16 + 72) * v25), v34, v37);
        a1 = v30;
      }
      ++v15;
      v14 = v9;
      v8 = v32;
      if (v19 == v9)
      {
        swift_bridgeObjectRelease();
        return v35;
      }
    }
    v10 = *(_QWORD *)(a1 + 8 * v15);
    swift_retain();
    v18 = __OFADD__(v17, 1);
    v19 = v15 - 3;
    if (!v18)
      goto LABEL_11;
LABEL_20:
    __break(1u);
LABEL_21:
    if (a1 < 0)
      v28 = a1;
    else
      v28 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v14 = _CocoaArrayWrapper.endIndex.getter(v28);
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void sub_1002ADDCC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20[2];
  uint64_t v21;

  v21 = a1;
  v6 = a2 + 64;
  v7 = 1 << *(_BYTE *)(a2 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a2 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v11 = 0;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = 8 * i;
    v18 = *(void **)(*(_QWORD *)(a2 + 56) + v17);
    v20[0] = *(id *)(*(_QWORD *)(a2 + 48) + v17);
    v20[1] = v18;
    v19 = v20[0];
    swift_bridgeObjectRetain(v18);
    sub_1002ACCE4(&v21, (uint64_t)v20, a3);
    if (v3)
    {
      swift_release(a2);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();

    if (v9)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v11 >= v10)
      goto LABEL_26;
    v15 = *(_QWORD *)(v6 + 8 * v11);
    if (!v15)
      break;
LABEL_17:
    v9 = (v15 - 1) & v15;
  }
  v16 = v11 + 1;
  if (v11 + 1 >= v10)
    goto LABEL_26;
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v11 + 2;
  if (v11 + 2 >= v10)
    goto LABEL_26;
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v11 + 3;
  if (v11 + 3 >= v10)
    goto LABEL_26;
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v11 + 4;
  if (v11 + 4 >= v10)
  {
LABEL_26:
    swift_release(a2);
    return;
  }
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
LABEL_16:
    v11 = v16;
    goto LABEL_17;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v10)
      goto LABEL_26;
    v15 = *(_QWORD *)(v6 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
}

void sub_1002ADFA0(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  void *v7;
  _QWORD *v8;
  id v9;
  id v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void **v27;
  id v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  id v32;
  id v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  char v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v7 = *(void **)(a1 + 40);
    v8 = (_QWORD *)*a3;
    v9 = *(id *)(a1 + 32);
    v10 = v7;
    v46 = a1;
    swift_bridgeObjectRetain(a1);
    v12 = sub_1002C66DC((uint64_t)v9);
    v13 = v8[2];
    v14 = (v11 & 1) == 0;
    v15 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v16 = v11;
    if (v8[3] < v15)
    {
      sub_1002CDEF8(v15, a2 & 1);
      v17 = sub_1002C66DC((uint64_t)v9);
      if ((v16 & 1) != (v18 & 1))
      {
LABEL_27:
        v45 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v45);
        __break(1u);
        return;
      }
      v12 = v17;
      v19 = (_QWORD *)*a3;
      if ((v16 & 1) == 0)
        goto LABEL_12;
LABEL_9:
      v20 = *(id *)(v19[7] + 8 * v12);

      v21 = v19[7];
      *(_QWORD *)(v21 + 8 * v12) = v20;
      v22 = v3 - 1;
      if (!v22)
      {
LABEL_14:
        swift_bridgeObjectRelease();
        return;
      }
LABEL_16:
      v27 = (void **)(v46 + 56);
      while (1)
      {
        v30 = *v27;
        v31 = (_QWORD *)*a3;
        v32 = *(v27 - 1);
        v33 = v30;
        v34 = sub_1002C66DC((uint64_t)v32);
        v36 = v31[2];
        v37 = (v35 & 1) == 0;
        v25 = __OFADD__(v36, v37);
        v38 = v36 + v37;
        if (v25)
          goto LABEL_25;
        v39 = v35;
        if (v31[3] < v38)
        {
          sub_1002CDEF8(v38, 1);
          v34 = sub_1002C66DC((uint64_t)v32);
          if ((v39 & 1) != (v40 & 1))
            goto LABEL_27;
        }
        v41 = (_QWORD *)*a3;
        v42 = 8 * v34;
        if ((v39 & 1) != 0)
        {
          v28 = *(id *)(v41[7] + 8 * v34);

          v29 = v41[7];
          *(_QWORD *)(v29 + v42) = v28;
        }
        else
        {
          v41[(v34 >> 6) + 8] |= 1 << v34;
          *(_QWORD *)(v41[6] + 8 * v34) = v32;
          *(_QWORD *)(v41[7] + 8 * v34) = v33;
          v43 = v41[2];
          v25 = __OFADD__(v43, 1);
          v44 = v43 + 1;
          if (v25)
            goto LABEL_26;
          v41[2] = v44;
        }
        v27 += 2;
        if (!--v22)
          goto LABEL_14;
      }
    }
    if ((a2 & 1) != 0)
    {
      v19 = (_QWORD *)*a3;
      if ((v11 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002D6C90();
      v19 = (_QWORD *)*a3;
      if ((v16 & 1) != 0)
        goto LABEL_9;
    }
LABEL_12:
    v19[(v12 >> 6) + 8] |= 1 << v12;
    v23 = 8 * v12;
    *(_QWORD *)(v19[6] + v23) = v9;
    *(_QWORD *)(v19[7] + v23) = v10;
    v24 = v19[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v19[2] = v26;
    v22 = v3 - 1;
    if (!v22)
      goto LABEL_14;
    goto LABEL_16;
  }
}

uint64_t sub_1002AE250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v23;
  uint64_t v24;

  v5 = a1;
  v24 = a1;
  if ((unint64_t)a2 >> 62)
    goto LABEL_17;
  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v21))
  {
    for (i = 4; ; ++i)
    {
      v5 = i - 4;
      v8 = (a2 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a2)
         : *(id *)(a2 + 8 * i);
      v9 = v8;
      v10 = i - 3;
      if (__OFADD__(v5, 1))
        break;
      v23 = 0;
      v11 = objc_msgSend(v8, "remObjectIDWithError:", &v23);
      v12 = v23;
      if (!v11)
      {
        v19 = v23;
        _convertNSErrorToError(_:)(v12);

        swift_willThrow(v20);
        v5 = v24;
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        return v5;
      }
      v13 = v11;
      v14 = *(_QWORD *)(a3 + 16);
      v15 = v23;
      if (v14 && (v16 = sub_1002C66DC((uint64_t)v13), (v17 & 1) != 0))
      {
        v18 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v16);
        swift_bridgeObjectRetain(v18);

        sub_1001E25DC(v18);
        v13 = v9;
      }
      else
      {

      }
      if (v10 == v6)
      {
        swift_bridgeObjectRelease();
        return v24;
      }
    }
    __break(1u);
LABEL_17:
    if (a2 < 0)
      v21 = a2;
    else
      v21 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1002AE438(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  id v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  void *v66;
  uint64_t i;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  void *v77;
  id v78;
  id v79;
  unint64_t v80;
  unint64_t v81;
  id v82;
  _QWORD *v83;
  id v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t result;
  uint64_t v95;
  void *v96;
  _QWORD *v97;
  int64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  uint64_t v105;

  v5 = (int64_t)a1;
  v6 = sub_10011DB60(a1);
  if (v2)
    return v1;
  v7 = (uint64_t)v6;
  v101 = sub_10034D638(0, (_QWORD *)v5, 0);
  if ((unint64_t)v7 >> 62)
    goto LABEL_29;
  v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v96 = (void *)v5;
    if (v8)
    {
      v105 = (uint64_t)_swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v8);
      if (v8 < 0)
        goto LABEL_60;
      v9 = 0;
      v5 = v7 & 0xC000000000000001;
      while (v8 != v9)
      {
        if (v5)
          v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v7);
        else
          v10 = *(id *)(v7 + 8 * v9 + 32);
        v11 = v10;
        v4 = _s8BaseListCMa();
        v3 = (_QWORD *)swift_allocObject(v4, 32, 7);
        v3[3] = v11;
        v104 = 0;
        v12 = v11;
        v13 = objc_msgSend(v12, "remObjectIDWithError:", &v104);
        v14 = v104;
        if (!v13)
        {
LABEL_26:
          v32 = v104;
          _convertNSErrorToError(_:)(v14);

          swift_willThrow(v33);
          swift_deallocPartialClassInstance(v3, v4, 32, 7, v34);

          v1 = v105;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release(v1);
          return v1;
        }
        v15 = v13;
        ++v9;
        v16 = v104;

        v3[2] = v15;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v17);
        v18 = *(_QWORD *)(v105 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
        v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v3);
        specialized ContiguousArray._endMutation()(v19);
        if (v8 == v9)
        {
          v20 = (_QWORD *)v105;
          swift_bridgeObjectRelease();
          goto LABEL_15;
        }
      }
      __break(1u);
      goto LABEL_28;
    }
    swift_bridgeObjectRelease();
    v20 = _swiftEmptyArrayStorage;
LABEL_15:
    if (!((unint64_t)v101 >> 62))
    {
      v7 = *(_QWORD *)((v101 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v7)
        break;
      goto LABEL_17;
    }
    v36 = v101 < 0 ? v101 : v101 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v101);
    v7 = _CocoaArrayWrapper.endIndex.getter(v36);
    swift_bridgeObjectRelease();
    if (!v7)
      break;
LABEL_17:
    v105 = (uint64_t)_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v7);
    if (v7 < 0)
      goto LABEL_94;
    v21 = 0;
    v22 = v101;
    v5 = v101 & 0xC000000000000001;
    while (v7 != v21)
    {
      if (v5)
        v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v22);
      else
        v23 = *(id *)(v22 + 8 * v21 + 32);
      v24 = v23;
      v4 = _s8BaseListCMa();
      v3 = (_QWORD *)swift_allocObject(v4, 32, 7);
      v3[3] = v24;
      v104 = 0;
      v12 = v24;
      v25 = objc_msgSend(v12, "remObjectIDWithError:", &v104);
      v14 = v104;
      if (!v25)
        goto LABEL_26;
      v26 = v25;
      ++v21;
      v27 = v104;

      v3[2] = v26;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v28);
      v29 = *(_QWORD *)(v105 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v29);
      v30 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v3);
      specialized ContiguousArray._endMutation()(v30);
      v22 = v101;
      if (v7 == v21)
      {
        v31 = (_QWORD *)v105;
        swift_bridgeObjectRelease();
        goto LABEL_38;
      }
    }
LABEL_28:
    __break(1u);
LABEL_29:
    if (v7 < 0)
      v35 = v7;
    else
      v35 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v8 = _CocoaArrayWrapper.endIndex.getter(v35);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v31 = _swiftEmptyArrayStorage;
LABEL_38:
  v105 = (uint64_t)v20;
  sub_1001E25F0((uint64_t)v31);
  v4 = v105;
  v105 = (uint64_t)_swiftEmptyDictionarySingleton;
  if ((unint64_t)v4 >> 62)
    goto LABEL_61;
  v37 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v4);
  v102 = v37;
  if (v37)
  {
LABEL_40:
    v99 = v4 & 0xC000000000000001;
    v38 = _swiftEmptyDictionarySingleton;
    v39 = 4;
    while (1)
    {
      v45 = v39 - 4;
      if (v99)
      {
        v46 = specialized _ArrayBuffer._getElementSlowPath(_:)(v39 - 4, v4);
        v47 = v39 - 3;
        if (__OFADD__(v45, 1))
          goto LABEL_57;
      }
      else
      {
        v46 = *(_QWORD *)(v4 + 8 * v39);
        swift_retain();
        v47 = v39 - 3;
        if (__OFADD__(v45, 1))
        {
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          if (v4 < 0)
            v64 = v4;
          else
            v64 = v4 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain_n(v4, 2);
          v37 = _CocoaArrayWrapper.endIndex.getter(v64);
          swift_bridgeObjectRelease();
          v102 = v37;
          if (!v37)
            break;
          goto LABEL_40;
        }
      }
      v48 = v4;
      v4 = (uint64_t)objc_msgSend(*(id *)(v46 + 24), "account", v96);
      v50 = sub_1002C68E8((void *)v4);
      v51 = v38[2];
      v52 = (v49 & 1) == 0;
      v53 = v51 + v52;
      if (__OFADD__(v51, v52))
        goto LABEL_58;
      v54 = v49;
      if (v38[3] < v53)
      {
        sub_1002CDF04(v53, 1);
        v38 = (_QWORD *)v105;
        v55 = sub_1002C68E8((void *)v4);
        if ((v54 & 1) != (v56 & 1))
        {
          v95 = sub_10001A630((uint64_t *)&unk_10083ADA0);
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v95);
          __break(1u);
          goto LABEL_112;
        }
        v50 = v55;
      }
      if ((v54 & 1) != 0)
      {

        v40 = (_QWORD *)(v38[7] + 8 * v50);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v41);
        v43 = *(_QWORD *)((*v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v42 = *(_QWORD *)((*v40 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v43 >= v42 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1);
        v44 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v43, v46);
        specialized Array._endMutation()(v44);
      }
      else
      {
        v57 = sub_10001A630((uint64_t *)&unk_10083AD90);
        v58 = swift_allocObject(v57, 40, 7);
        *(_OWORD *)(v58 + 16) = xmmword_1006A7330;
        *(_QWORD *)(v58 + 32) = v46;
        v104 = (id)v58;
        specialized Array._endMutation()(v58);
        v59 = v104;
        v38[(v50 >> 6) + 8] |= 1 << v50;
        v60 = 8 * v50;
        *(_QWORD *)(v38[6] + v60) = v4;
        *(_QWORD *)(v38[7] + v60) = v59;
        v61 = v38[2];
        v62 = __OFADD__(v61, 1);
        v63 = v61 + 1;
        if (v62)
          goto LABEL_59;
        v38[2] = v63;
      }
      v4 = v48;
      ++v39;
      v37 = v102;
      if (v47 == v102)
        goto LABEL_66;
    }
  }
  v38 = _swiftEmptyDictionarySingleton;
LABEL_66:
  swift_bridgeObjectRelease();
  v65 = v96;
  sub_1002ADDCC((uint64_t)_swiftEmptyDictionarySingleton, (uint64_t)v38, v65);
  v20 = 0;
  v96 = v66;
  swift_release(v38);

  v105 = (uint64_t)_swiftEmptyArrayStorage;
  if (!v37)
  {
    v3 = _swiftEmptyArrayStorage;
    v5 = (int64_t)_swiftEmptyArrayStorage;
    goto LABEL_79;
  }
  if (v37 < 1)
  {
    __break(1u);
    goto LABEL_110;
  }
  v3 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v4);
  for (i = 0; i != v37; ++i)
  {
    if ((v4 & 0xC000000000000001) != 0)
    {
      v69 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v4);
    }
    else
    {
      v69 = *(_QWORD *)(v4 + 8 * i + 32);
      swift_retain();
    }
    v70 = objc_msgSend(*(id *)(v69 + 24), "account", v96);
    v71 = swift_release(v69);
    if (v70)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v71);
      v73 = *(_QWORD *)((v105 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v72 = *(_QWORD *)((v105 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v73 >= v72 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v72 > 1);
      v68 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v73, v70);
      specialized Array._endMutation()(v68);
      v37 = v102;
    }
  }
  swift_bridgeObjectRelease();
  v5 = v105;
LABEL_79:
  swift_bridgeObjectRelease();
  if ((unint64_t)v5 >> 62)
    goto LABEL_95;
  v74 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v74)
  {
    while (1)
    {
      v105 = (uint64_t)v3;
      sub_1001C1E74(0, v74 & ~(v74 >> 63), 0);
      if (v74 < 0)
        break;
      v75 = 0;
      v100 = v5 & 0xC000000000000001;
      v103 = v105;
      v97 = v20;
      v98 = v5;
      while (v74 != v75)
      {
        if (v100)
          v76 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v75, v5);
        else
          v76 = *(id *)(v5 + 8 * v75 + 32);
        v77 = v76;
        v104 = 0;
        v78 = objc_msgSend(v76, "remObjectIDWithError:", &v104, v96);
        v1 = (uint64_t)v104;
        if (!v78)
        {
          v84 = v104;
          _convertNSErrorToError(_:)(v1);

          swift_willThrow(v85);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release(v103);

          return v1;
        }
        v79 = v78;
        v3 = (_QWORD *)v103;
        v105 = v103;
        v81 = *(_QWORD *)(v103 + 16);
        v80 = *(_QWORD *)(v103 + 24);
        v82 = v104;
        if (v81 >= v80 >> 1)
        {
          sub_1001C1E74(v80 > 1, v81 + 1, 1);
          v3 = (_QWORD *)v105;
        }
        ++v75;
        v3[2] = v81 + 1;
        v103 = (uint64_t)v3;
        v83 = &v3[2 * v81];
        v83[4] = v79;
        v83[5] = v77;
        v20 = v97;
        v5 = v98;
        if (v74 == v75)
        {
          swift_bridgeObjectRelease();
          v86 = v3;
          goto LABEL_100;
        }
      }
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      if (v5 < 0)
        v87 = v5;
      else
        v87 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
      v74 = _CocoaArrayWrapper.endIndex.getter(v87);
      swift_bridgeObjectRelease();
      if (!v74)
        goto LABEL_99;
    }
LABEL_110:
    __break(1u);
  }
LABEL_99:
  swift_bridgeObjectRelease();
  v86 = _swiftEmptyArrayStorage;
LABEL_100:
  v88 = v86[2];
  if (v88)
  {
    sub_10001A630(&qword_10083DF98);
    v89 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v88);
  }
  else
  {
    v89 = _swiftEmptyDictionarySingleton;
  }
  v105 = (uint64_t)v89;
  sub_1002ADFA0((uint64_t)v86, 1, &v105);
  if (v20)
  {
LABEL_112:
    swift_bridgeObjectRelease();
    result = swift_release(v105);
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v90 = v105;
    v91 = (uint64_t)sub_1001E8EE8(v105);
    swift_release(v90);
    swift_bridgeObjectRetain(v91);
    if (v91 < 0 || (v92 = (_QWORD *)v91, (v91 & 0x4000000000000000) != 0))
    {
      v92 = sub_1001E8BA0(v91);
      swift_release(v91);
    }
    v105 = (uint64_t)v92;
    sub_1005C29C0(&v105);
    swift_release(v91);
    v93 = v105;
    swift_bridgeObjectRetain(v96);
    v1 = sub_1002AE250((uint64_t)_swiftEmptyArrayStorage, v93, (uint64_t)v96);
    swift_release(v93);
    swift_bridgeObjectRelease_n(v96, 2);
    return v1;
  }
  return result;
}

uint64_t sub_1002AEED4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A630(&qword_100843618);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_1002AEF14()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id result;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v1);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A630((uint64_t *)&unk_10083A270);
  v5 = swift_allocObject(v4, 112, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1006A3C40;
  v6 = objc_msgSend(v0, "URL");
  if (v6)
  {
    v7 = v6;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v6);

    v8 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 0, 1, v8);
  }
  else
  {
    v9 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v3, 1, 1, v9);
  }
  v10 = String.init<A>(describing:)(v3, v1);
  v12 = v11;
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  v13 = sub_1000184F8();
  *(_QWORD *)(v5 + 64) = v13;
  *(_QWORD *)(v5 + 32) = v10;
  *(_QWORD *)(v5 + 40) = v12;
  result = objc_msgSend(v0, "identifier");
  if (result)
  {
    v15 = result;
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v18 = v17;

    *(_QWORD *)(v5 + 96) = &type metadata for String;
    *(_QWORD *)(v5 + 104) = v13;
    *(_QWORD *)(v5 + 72) = v16;
    *(_QWORD *)(v5 + 80) = v18;
    return (id)String.init(format:_:)(0xD000000000000027, 0x80000001006FF3D0, v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1002AF09C(uint64_t a1)
{
  return sub_1002B14F0(a1, (uint64_t *)&unk_1008436C0);
}

unint64_t sub_1002AF0A8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A630(&qword_100843910);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v6 = *(v5 - 2);
    v7 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain(v7);
    result = sub_10001A6DC(v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002AF1B8(uint64_t a1)
{
  return sub_1002AF5E4(a1, &qword_10083DF90);
}

unint64_t sub_1002AF1C4(uint64_t a1)
{
  return sub_1002B14F0(a1, (uint64_t *)&unk_100844160);
}

unint64_t sub_1002AF1D0(uint64_t a1)
{
  return sub_1002B1214(a1, &qword_100844040, &qword_100844038, (uint64_t (*)(char *))sub_1002C65F8, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

unint64_t sub_1002AF1F4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A630(&qword_10083E8E8);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v6 = *v5;
    v7 = (id)*(v5 - 1);
    swift_bridgeObjectRetain(v6);
    result = sub_1002C6FAC(v7);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v3[6] + v10) = v7;
    *(_QWORD *)(v3[7] + v10) = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v3[2] = v13;
    v5 += 2;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002AF2FC(uint64_t a1)
{
  return sub_1002B1214(a1, &qword_100844490, &qword_100844480, (uint64_t (*)(char *))sub_1002C65F8, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

unint64_t sub_1002AF320(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A630(&qword_1008436F8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_10001A6DC(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002AF440(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = sub_10001A630((uint64_t *)&unk_100843B40);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v24 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v24);
    return (unint64_t)v8;
  }
  sub_10001A630(&qword_100843B38);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (char *)v5 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100008868(v13, (uint64_t)v5, (uint64_t *)&unk_100843B40);
    v15 = *v5;
    result = sub_1002C66DC(*v5);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v8[6] + 8 * result) = v15;
    v19 = v8[7];
    v20 = type metadata accessor for REMManualOrdering.PinnedList(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, v10, v20);
    v21 = v8[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_12;
    v8[2] = v23;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v24 = v26;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1002AF5D8(uint64_t a1)
{
  return sub_1002AF5E4(a1, &qword_10083DF88);
}

unint64_t sub_1002AF5E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A630(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v8 = *v7;
    v9 = (id)*(v7 - 1);
    swift_retain(v8);
    result = sub_1002C66DC((uint64_t)v9);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = 8 * result;
    *(_QWORD *)(v5[6] + v12) = v9;
    *(_QWORD *)(v5[7] + v12) = v8;
    v13 = v5[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v5[2] = v15;
    v7 += 2;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002AF6E8(uint64_t a1)
{
  return sub_1002B0C5C(a1, (uint64_t *)&unk_100844450, &qword_100844448, (uint64_t (*)(_QWORD))&type metadata accessor for REMAccountsListDataView.Model.PinnedList);
}

unint64_t sub_1002AF704(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A630(&qword_100844428);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v6 = *v5;
    v7 = (id)*(v5 - 1);
    result = sub_1002C6760((uint64_t)v7);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v3[6] + v10) = v7;
    *(_QWORD *)(v3[7] + v10) = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v5 += 2;
    v3[2] = v13;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002AF800(uint64_t a1)
{
  return sub_1002B1744(a1, &qword_100844518);
}

unint64_t sub_1002AF80C(uint64_t a1)
{
  return sub_1002B14F0(a1, &qword_100844150);
}

unint64_t sub_1002AF818(uint64_t a1)
{
  return sub_1002B1744(a1, (uint64_t *)&unk_100844520);
}

unint64_t sub_1002AF824(uint64_t a1)
{
  return sub_10001BB78(a1, (uint64_t *)&unk_100844410, (uint64_t (*)(id))sub_1002C6730);
}

unint64_t sub_1002AF838(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A630((uint64_t *)&unk_100844180);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v6 = *v5;
    v7 = (id)*(v5 - 1);
    result = sub_1002C6690((uint64_t)v7);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v3[6] + v10) = v7;
    *(_QWORD *)(v3[7] + v10) = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v5 += 2;
    v3[2] = v13;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002AF934(uint64_t a1)
{
  return sub_1002B14F0(a1, (uint64_t *)&unk_100843810);
}

unint64_t sub_1002AF940(uint64_t a1)
{
  return sub_1002B10BC(a1, &qword_1008437F8);
}

unint64_t sub_1002AF94C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A630(&qword_100844560);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (void **)(a1 + 40);
  while (1)
  {
    v6 = *(v5 - 1);
    v7 = *v5;
    v8 = v6;
    v9 = v7;
    result = sub_1002C68FC(v6, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = 8 * result;
    *(_QWORD *)(v3[6] + v12) = v6;
    *(_QWORD *)(v3[7] + v12) = v9;
    v13 = v3[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v3[2] = v15;
    v5 += 2;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002AFA70(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A630(&qword_100844498);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v6 = *(v5 - 2);
    v7 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    result = sub_1002C6858(v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002AFB88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A630((uint64_t *)&unk_1008443B0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100008868(v7, (uint64_t)&v14, &qword_1008443E8);
    v8 = v14;
    result = sub_1002C66DC(v14);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = (unint64_t)sub_10001A6CC(&v15, (_OWORD *)(v4[7] + 32 * result));
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v7 += 40;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002AFCB4(uint64_t a1)
{
  return sub_1002B14F0(a1, &qword_100843688);
}

unint64_t sub_1002AFCC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  unint64_t result;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A630(&qword_100844690);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 1);
    v8 = *v6;
    v9 = (id)*(v6 - 2);
    swift_bridgeObjectRetain(v8);
    result = sub_1002C6B50((uint64_t)v9);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v9;
    v12 = (_QWORD *)(v4[7] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 3;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002AFDD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A630(&qword_100844698);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v7 = *v6;
    v8 = (id)*(v6 - 1);
    swift_unknownObjectRetain(v7);
    result = sub_1002C6B9C((uint64_t)v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = 8 * result;
    *(_QWORD *)(v4[6] + v11) = v8;
    *(_QWORD *)(v4[7] + v11) = v7;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002AFEDC(uint64_t a1)
{
  return sub_1002B1744(a1, &qword_100843B08);
}

unint64_t sub_1002AFEE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_10001A630(&qword_100843F10);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  sub_10001A630(&qword_100843EF8);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100008868(v13, (uint64_t)v5, &qword_100843F10);
    result = sub_1002C65F8((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1002B007C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A630(&qword_1008436B0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100008868(v7, (uint64_t)v16, &qword_1008436B8);
    result = sub_1002C6A88((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_10001A6CC(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002B01BC(uint64_t a1)
{
  return sub_1002B14F0(a1, &qword_100844550);
}

unint64_t sub_1002B01C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, char *, uint64_t);
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = sub_10001A630(&qword_100843778);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v27 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v27);
    return (unint64_t)v8;
  }
  sub_10001A630(&qword_100843770);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v29 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100008868(v13, (uint64_t)v5, &qword_100843778);
    result = sub_1002C65F8((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(_QWORD *)(v20 + 72) * v17;
    v22 = v18 + v21;
    v23 = *(void (**)(uint64_t, char *, uint64_t))(v20 + 32);
    v23(v22, v5, v19);
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v23)(v8[7] + v21, v10, v19);
    v24 = v8[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      goto LABEL_12;
    v8[2] = v26;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v27 = v29;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1002B0370(uint64_t a1)
{
  return sub_1002B0388(a1, &qword_100843C08);
}

unint64_t sub_1002B037C(uint64_t a1)
{
  return sub_1002B0388(a1, &qword_100843970);
}

unint64_t sub_1002B0388(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  id v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A630(a2);
  v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain();
  v6 = (void **)(a1 + 40);
  while (1)
  {
    v7 = *v6;
    v8 = *(v6 - 1);
    v9 = v7;
    result = sub_1002C6FAC(v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = 8 * result;
    *(_QWORD *)(v4[6] + v12) = v8;
    *(_QWORD *)(v4[7] + v12) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002B048C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A630((uint64_t *)&unk_100844830);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_unknownObjectRetain(v9);
    result = sub_10001A6DC(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002B05A4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A630(&qword_1008439F8);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v6 = *(v5 - 2);
    v7 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain(v7);
    swift_retain();
    result = sub_10001A6DC(v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002B06BC(uint64_t a1)
{
  return sub_1002B0388(a1, &qword_100843D98);
}

unint64_t sub_1002B06C8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A630(&qword_1008442B8);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (unint64_t *)(a1 + 56);
  while (1)
  {
    v6 = *(v5 - 3);
    v7 = *(v5 - 2);
    v8 = *(v5 - 1);
    v9 = *v5;
    swift_bridgeObjectRetain(v7);
    sub_1000A70E4(v8, v9);
    result = sub_10001A6DC(v6, v7);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v3[6] + 16 * result);
    *v12 = v6;
    v12[1] = v7;
    v13 = (uint64_t *)(v3[7] + 16 * result);
    *v13 = v8;
    v13[1] = v9;
    v14 = v3[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v5 += 4;
    v3[2] = v16;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002B07EC(uint64_t a1)
{
  return sub_1002B0388(a1, (uint64_t *)&unk_100843AD0);
}

unint64_t sub_1002B07F8(uint64_t a1)
{
  return sub_1002B0388(a1, (uint64_t *)&unk_100851E50);
}

unint64_t sub_1002B0804(uint64_t a1)
{
  return sub_1002B0388(a1, &qword_100844220);
}

unint64_t sub_1002B0810(uint64_t a1)
{
  return sub_1002B0388(a1, (uint64_t *)&unk_100851DC0);
}

unint64_t sub_1002B081C(uint64_t a1)
{
  return sub_1002B0388(a1, &qword_1008441C0);
}

unint64_t sub_1002B0828(uint64_t a1)
{
  return sub_10001BB78(a1, &qword_10083DF98, (uint64_t (*)(id))sub_1002C66DC);
}

unint64_t sub_1002B083C(uint64_t a1)
{
  return sub_1002B14F0(a1, &qword_1008438E0);
}

unint64_t sub_1002B0848(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A630(&qword_100843DF8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_10001A6DC(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 3;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002B0958(uint64_t a1)
{
  return sub_1002B0388(a1, &qword_100843CB0);
}

unint64_t sub_1002B0964(uint64_t a1)
{
  return sub_1002B0388(a1, &qword_100843CD8);
}

unint64_t sub_1002B0970(uint64_t a1)
{
  return sub_1002B0388(a1, &qword_100843D10);
}

unint64_t sub_1002B097C(uint64_t a1)
{
  return sub_1002B0388(a1, &qword_100843D38);
}

unint64_t sub_1002B0988(uint64_t a1)
{
  return sub_1002B0388(a1, &qword_100843D70);
}

unint64_t sub_1002B0994(uint64_t a1)
{
  return sub_1002B0388(a1, &qword_100843DD0);
}

unint64_t sub_1002B09A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A630(&qword_100843720);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  v22 = v3 + 64;
  swift_retain();
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v23 = v5;
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    v10 = v6[1];
    v12 = v6[2];
    v11 = v6[3];
    v14 = v6[4];
    v13 = v6[5];
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v13);
    result = sub_10001A6DC(v7, v8);
    if ((v16 & 1) != 0)
      break;
    *(_QWORD *)(v22 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = (uint64_t *)(v4[6] + 16 * result);
    *v17 = v7;
    v17[1] = v8;
    v18 = (_QWORD *)(v4[7] + 48 * result);
    *v18 = v9;
    v18[1] = v10;
    v18[2] = v12;
    v18[3] = v11;
    v18[4] = v14;
    v18[5] = v13;
    v19 = v4[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v4[2] = v21;
    v6 += 8;
    v5 = v23 - 1;
    if (v23 == 1)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002B0B00(uint64_t a1)
{
  return sub_1002B14F0(a1, &qword_100843738);
}

unint64_t sub_1002B0B0C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  unint64_t result;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A630(&qword_100843758);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v6 = (void *)*(v5 - 2);
    v7 = *(v5 - 1);
    v8 = *v5;
    v9 = (id)*(v5 - 3);
    v10 = v6;
    swift_bridgeObjectRetain(v8);
    result = sub_1002C66DC((uint64_t)v9);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v9;
    v13 = (_QWORD *)(v3[7] + 24 * result);
    *v13 = v10;
    v13[1] = v7;
    v13[2] = v8;
    v14 = v3[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v3[2] = v16;
    v5 += 4;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002B0C40(uint64_t a1)
{
  return sub_1002B0C5C(a1, &qword_100843B18, &qword_100843B10, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
}

unint64_t sub_1002B0C5C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t result;
  char v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(_QWORD);
  uint64_t *v34;

  v33 = a4;
  v34 = a2;
  v6 = sub_10001A630(a2);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
    v12 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v30 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v30);
    return (unint64_t)v12;
  }
  sub_10001A630(a3);
  v11 = static _DictionaryStorage.allocate(capacity:)(v10);
  v12 = (_QWORD *)v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
    goto LABEL_9;
  v14 = (char *)v9 + *(int *)(v6 + 48);
  v15 = v11 + 64;
  v16 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v32 = a1;
  v17 = a1 + v16;
  v18 = *(_QWORD *)(v7 + 72);
  swift_retain(v11);
  while (1)
  {
    sub_100008868(v17, (uint64_t)v9, v34);
    v19 = *v9;
    v20 = v9[1];
    result = sub_10001A6DC(*v9, v20);
    if ((v22 & 1) != 0)
      break;
    v23 = result;
    *(_QWORD *)(v15 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v24 = (uint64_t *)(v12[6] + 16 * result);
    *v24 = v19;
    v24[1] = v20;
    v25 = v12[7];
    v26 = v33(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v23, v14, v26);
    v27 = v12[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
      goto LABEL_12;
    v12[2] = v29;
    v17 += v18;
    if (!--v13)
    {
      swift_release(v12);
      v30 = v32;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1002B0DF8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A630((uint64_t *)&unk_1008441A0);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v6 = *((_QWORD *)v5 - 2);
    v7 = *((_QWORD *)v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain(v7);
    result = sub_10001A6DC(v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_BYTE *)(v3[7] + result) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v5 += 24;
    v3[2] = v14;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002B0F08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_10001A630(&qword_100844048);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  sub_10001A630(&qword_100844008);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100008868(v13, (uint64_t)v5, &qword_100844048);
    result = sub_1002C65F8((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_OWORD *)(v8[7] + 16 * v17) = *(_OWORD *)&v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1002B109C(uint64_t a1)
{
  return sub_10001BB78(a1, &qword_10083DFA0, (uint64_t (*)(id))sub_1002C66DC);
}

unint64_t sub_1002B10B0(uint64_t a1)
{
  return sub_1002B10BC(a1, &qword_1008439C8);
}

unint64_t sub_1002B10BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A630(a2);
  v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain();
  v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v7 = *v6;
    v8 = (id)*(v6 - 1);
    swift_bridgeObjectRetain(v7);
    result = sub_1002C66DC((uint64_t)v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = 8 * result;
    *(_QWORD *)(v4[6] + v11) = v8;
    *(_QWORD *)(v4[7] + v11) = v7;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002B11C0(uint64_t a1)
{
  return sub_1002B0388(a1, (uint64_t *)&unk_1008439D0);
}

unint64_t sub_1002B11CC(uint64_t a1)
{
  return sub_1002B0388(a1, (uint64_t *)&unk_100851C80);
}

unint64_t sub_1002B11D8(uint64_t a1)
{
  return sub_1002B0388(a1, (uint64_t *)&unk_100843F90);
}

unint64_t sub_1002B11E4(uint64_t a1)
{
  return sub_1002B1744(a1, &qword_100844570);
}

unint64_t sub_1002B11F0(uint64_t a1)
{
  return sub_1002B1214(a1, &qword_1008445A8, &qword_100844590, (uint64_t (*)(char *))sub_1002C6E44, (uint64_t (*)(_QWORD))&type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType);
}

unint64_t sub_1002B1214(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(char *), uint64_t (*a5)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t result;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(_QWORD);
  uint64_t (*v34)(char *);

  v33 = a5;
  v34 = a4;
  v8 = sub_10001A630(a2);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
  {
    v14 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v30 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v30);
    return (unint64_t)v14;
  }
  sub_10001A630(a3);
  v13 = static _DictionaryStorage.allocate(capacity:)(v12);
  v14 = (_QWORD *)v13;
  v15 = *(_QWORD *)(a1 + 16);
  if (!v15)
    goto LABEL_9;
  v16 = *(int *)(v8 + 48);
  v17 = a1;
  v18 = v13 + 64;
  v19 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v32 = v17;
  v20 = v17 + v19;
  v21 = *(_QWORD *)(v9 + 72);
  swift_retain();
  while (1)
  {
    sub_100008868(v20, (uint64_t)v11, a2);
    result = v34(v11);
    if ((v23 & 1) != 0)
      break;
    v24 = result;
    *(_QWORD *)(v18 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v25 = v14[6];
    v26 = v33(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v24, v11, v26);
    *(_QWORD *)(v14[7] + 8 * v24) = *(_QWORD *)&v11[v16];
    v27 = v14[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
      goto LABEL_12;
    v14[2] = v29;
    v20 += v21;
    if (!--v15)
    {
      swift_release(v14);
      v30 = v32;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1002B13B0(uint64_t a1)
{
  return sub_1002B1744(a1, &qword_100844120);
}

unint64_t sub_1002B13BC(uint64_t a1)
{
  return sub_1002B1744(a1, (uint64_t *)&unk_1008447F0);
}

unint64_t sub_1002B13C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A630((uint64_t *)&unk_100843850);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v8 = *(v6 - 1);
    v7 = *v6;
    swift_retain(v8);
    swift_retain(v7);
    result = sub_1002C6F10(v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = 8 * result;
    *(_QWORD *)(v4[6] + v11) = v8;
    *(_QWORD *)(v4[7] + v11) = v7;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002B14D0(uint64_t a1)
{
  return sub_10001BB78(a1, &qword_10083E000, (uint64_t (*)(id))sub_1002C66DC);
}

unint64_t sub_1002B14E4(uint64_t a1)
{
  return sub_1002B14F0(a1, &qword_100843718);
}

unint64_t sub_1002B14F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A630(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (void **)(a1 + 48);
  while (1)
  {
    v8 = (uint64_t)*(v7 - 2);
    v9 = (uint64_t)*(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain(v9);
    v11 = v10;
    result = sub_10001A6DC(v8, v9);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v5[6] + 16 * result);
    *v14 = v8;
    v14[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v11;
    v15 = v5[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v5[2] = v17;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002B1604(uint64_t a1)
{
  return sub_1002B1744(a1, &qword_100844000);
}

unint64_t sub_1002B1610(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  __int128 v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A630(&qword_100843F20);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (_OWORD *)(a1 + 48);
  while (1)
  {
    v6 = *((_QWORD *)v5 - 2);
    v7 = *((_QWORD *)v5 - 1);
    v14 = *v5;
    swift_bridgeObjectRetain(v7);
    swift_retain();
    result = sub_10001A6DC(v6, v7);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v3[6] + 16 * result);
    *v10 = v6;
    v10[1] = v7;
    *(_OWORD *)(v3[7] + 16 * result) = v14;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v3[2] = v13;
    v5 += 2;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002B1738(uint64_t a1)
{
  return sub_1002B1744(a1, &qword_1008438F8);
}

unint64_t sub_1002B1744(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A630(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v8 = *(v7 - 2);
    v9 = *(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    result = sub_10001A6DC(v8, v9);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v5[6] + 16 * result);
    *v13 = v8;
    v13[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v10;
    v14 = v5[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v5[2] = v16;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002B1858(uint64_t a1)
{
  return sub_1002B0388(a1, (uint64_t *)&unk_1008446B0);
}

unint64_t sub_1002B1864(uint64_t a1)
{
  return sub_1002B0388(a1, (uint64_t *)&unk_100843940);
}

unint64_t sub_1002B1870(uint64_t a1)
{
  return sub_1002B0388(a1, &qword_100843A00);
}

unint64_t sub_1002B187C(uint64_t a1)
{
  return sub_1002B0388(a1, (uint64_t *)&unk_1008518B0);
}

unint64_t sub_1002B1888(uint64_t a1)
{
  return sub_1002B0388(a1, &qword_100843A80);
}

unint64_t sub_1002B1894(uint64_t a1)
{
  return sub_1002B0388(a1, &qword_100843B68);
}

unint64_t sub_1002B18A0(uint64_t a1)
{
  return sub_1002B0388(a1, (uint64_t *)&unk_100843BC0);
}

unint64_t sub_1002B18AC(uint64_t a1)
{
  return sub_1002B0388(a1, &qword_100851A60);
}

unint64_t sub_1002B18B8(uint64_t a1)
{
  return sub_1002B0388(a1, &qword_100851C10);
}

uint64_t sub_1002B18C8(void *a1, uint64_t a2)
{
  return sub_1002B1A14(a1, a2, type metadata accessor for RDElementManualSortID);
}

uint64_t sub_1002B18D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  v4 = sub_10001A6DC(a1, a2);
  if ((v5 & 1) == 0)
    return 0;
  v6 = (uint64_t *)(*(_QWORD *)(a3 + 56) + 16 * v4);
  v7 = *v6;
  swift_bridgeObjectRetain(v6[1]);
  return v7;
}

void *sub_1002B1928(void *a1, uint64_t a2)
{
  return sub_1002B1B4C(a1, a2, (uint64_t (*)(void))sub_1002C66DC, (unint64_t *)&qword_100839900, off_1007D66E0);
}

void *sub_1002B1944(void *a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  char v9;
  id v10;
  uint64_t v12;
  void *v13;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v8 = sub_1002C6730((uint64_t)a1);
      if ((v9 & 1) != 0)
      {
        v7 = *(void **)(*(_QWORD *)(a2 + 56) + 8 * v8);
        v10 = v7;
        return v7;
      }
    }
    return 0;
  }
  if (a2 < 0)
    v3 = a2;
  else
    v3 = a2 & 0xFFFFFFFFFFFFFF8;
  v4 = a1;
  v5 = __CocoaDictionary.lookup(_:)(v4, v3);

  if (!v5)
    return 0;
  v12 = v5;
  v6 = type metadata accessor for REMList_Codable(0);
  swift_unknownObjectRetain(v5);
  swift_dynamicCast(&v13, &v12, (char *)&type metadata for Swift.AnyObject + 8, v6, 7);
  v7 = v13;
  swift_unknownObjectRelease(v5);
  return v7;
}

uint64_t sub_1002B1A08(void *a1, uint64_t a2)
{
  return sub_1002B1A14(a1, a2, type metadata accessor for RDAccountManualSortID);
}

uint64_t sub_1002B1A14(void *a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v9 = sub_1002C66DC((uint64_t)a1);
      if ((v10 & 1) != 0)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v9);
        swift_retain(v8);
        return v8;
      }
    }
    return 0;
  }
  v5 = a1;
  v6 = __CocoaDictionary.lookup(_:)();

  if (!v6)
    return 0;
  v12 = v6;
  v7 = a3(0);
  swift_unknownObjectRetain(v6);
  swift_dynamicCast(&v13, &v12, (char *)&type metadata for Swift.AnyObject + 8, v7, 7);
  v8 = v13;
  swift_unknownObjectRelease(v6);
  return v8;
}

void *sub_1002B1AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  char v5;
  void *v6;
  id v7;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  v4 = sub_10001A6DC(a1, a2);
  if ((v5 & 1) == 0)
    return 0;
  v6 = *(void **)(*(_QWORD *)(a3 + 56) + 8 * v4);
  v7 = v6;
  return v6;
}

void *sub_1002B1B30(void *a1, uint64_t a2)
{
  return sub_1002B1B4C(a1, a2, (uint64_t (*)(void))sub_1002C66DC, &qword_100846630, REMReminder_ptr);
}

void *sub_1002B1B4C(void *a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, _QWORD *a5)
{
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  char v13;
  id v14;
  uint64_t v16;
  void *v17;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v12 = a3();
      if ((v13 & 1) != 0)
      {
        v11 = *(void **)(*(_QWORD *)(a2 + 56) + 8 * v12);
        v14 = v11;
        return v11;
      }
    }
    return 0;
  }
  v8 = a1;
  v9 = __CocoaDictionary.lookup(_:)();

  if (!v9)
    return 0;
  v16 = v9;
  v10 = sub_1000151B0(0, a4, a5);
  swift_unknownObjectRetain(v9);
  swift_dynamicCast(&v17, &v16, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
  v11 = v17;
  swift_unknownObjectRelease(v9);
  return v11;
}

void *sub_1002B1C2C(void *a1, uint64_t a2)
{
  return sub_1002B1B4C(a1, a2, (uint64_t (*)(void))sub_1002C66DC, (unint64_t *)&unk_1008445F0, CNContact_ptr);
}

void *sub_1002B1C48(void *a1, uint64_t a2)
{
  return sub_1002B1B4C(a1, a2, (uint64_t (*)(void))sub_1002C66DC, &qword_10083DFC8, REMList_ptr);
}

uint64_t sub_1002B1C64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v11;
  uint64_t v12;

  v2 = a2;
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v8 = sub_1002C6F10(a1);
      if ((v9 & 1) != 0)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v8);
        swift_retain(v7);
        return v7;
      }
    }
    return 0;
  }
  if (a2 >= 0)
    v2 = a2 & 0xFFFFFFFFFFFFFF8;
  v4 = swift_retain(a1);
  v5 = __CocoaDictionary.lookup(_:)(v4, v2);
  swift_release(a1);
  if (!v5)
    return 0;
  v11 = v5;
  v6 = type metadata accessor for RDManualSortIDCache();
  swift_unknownObjectRetain(v5);
  swift_dynamicCast(&v12, &v11, (char *)&type metadata for Swift.AnyObject + 8, v6, 7);
  v7 = v12;
  swift_unknownObjectRelease(v5);
  return v7;
}

void *sub_1002B1D3C(void *a1, uint64_t a2)
{
  return sub_1002B1B4C(a1, a2, (uint64_t (*)(void))sub_1002C66DC, &qword_10083FF70, REMAccountStorage_ptr);
}

void *sub_1002B1D58(void *a1, uint64_t a2)
{
  return sub_1002B1B4C(a1, a2, (uint64_t (*)(void))sub_1002C66DC, (unint64_t *)&unk_100844190, REMListStorage_ptr);
}

void *sub_1002B1D74(void *a1, uint64_t a2)
{
  return sub_1002B1B4C(a1, a2, (uint64_t (*)(void))sub_1002C6C34, &qword_100844060, CKRecordID_ptr);
}

void *sub_1002B1D90(void *a1, uint64_t a2)
{
  return sub_1002B1B4C(a1, a2, (uint64_t (*)(void))sub_1002C66DC, &qword_100844408, REMAccount_ptr);
}

void *sub_1002B1DAC(void *a1, uint64_t a2)
{
  return sub_1002B1B4C(a1, a2, (uint64_t (*)(void))sub_1002C6690, &qword_100840020, off_1007D6690);
}

Swift::Int sub_1002B1DC8(uint64_t a1, char a2)
{
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, a1);
  if ((a2 & 1) != 0)
    v3 = 0x80000001006F43A0;
  else
    v3 = 0x80000001006F4360;
  String.hash(into:)(v5, 0xD000000000000012, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_1002B1E40(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1002B1E98()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0 + 33, 0x80000001006F4FC0);
  swift_bridgeObjectRelease(0x80000001006F4FC0);
  return Hasher._finalize()();
}

void sub_1002B1F38(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1002B1F84()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x72656767697274, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

void sub_1002B2000(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1002B2058()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0 + 18, 0x80000001006F5110);
  swift_bridgeObjectRelease(0x80000001006F5110);
  return Hasher._finalize()();
}

Swift::Int sub_1002B20D8(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  if ((a2 & 1) != 0)
    v3 = 0xD000000000000032;
  else
    v3 = 0xD000000000000021;
  if ((a2 & 1) != 0)
    v4 = 0x80000001006F4E60;
  else
    v4 = 0x80000001006F4E30;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_1002B2158(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1002B21A4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x64656E6769737361, 0xEC00000065746144);
  swift_bridgeObjectRelease(0xEC00000065746144);
  return Hasher._finalize()();
}

void sub_1002B2254(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1002B22A4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000016, 0x80000001006F3E60);
  swift_bridgeObjectRelease(0x80000001006F3E60);
  return Hasher._finalize()();
}

Swift::Int sub_1002B23A0(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v3 = 0xD00000000000001CLL;
  Hasher.init(_seed:)(v6, a1);
  if (a2)
  {
    if (a2 == 1)
    {
      v3 = 0xD00000000000001FLL;
      v4 = 0x80000001006F3F30;
    }
    else
    {
      v4 = 0x80000001006F3F50;
    }
  }
  else
  {
    v4 = 0x80000001006F3F10;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_1002B2440(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  if ((a2 & 1) != 0)
    v3 = 0xD000000000000016;
  else
    v3 = 0xD000000000000011;
  if ((a2 & 1) != 0)
    v4 = 0x80000001006F4270;
  else
    v4 = 0x80000001006F4250;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_1002B24C0(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  if ((a2 & 1) != 0)
    v3 = 0xD00000000000001ALL;
  else
    v3 = 0xD000000000000018;
  if ((a2 & 1) != 0)
    v4 = 0x80000001006F42B0;
  else
    v4 = 0x80000001006F4290;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_1002B2540(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1002B258C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 6911093, 0xE300000000000000);
  swift_bridgeObjectRelease(0xE300000000000000);
  return Hasher._finalize()();
}

void sub_1002B260C(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1002B2658()
{
  uint64_t v1;

  String.hash(into:)(&v1, 6911093, 0xE300000000000000);
  swift_bridgeObjectRelease(0xE300000000000000);
  return Hasher._finalize()();
}

void sub_1002B2700(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1002B2750()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x44497473696CLL, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

void sub_1002B27F0(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1002B2840()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6341746E65726170, 0xEF4449746E756F63);
  swift_bridgeObjectRelease(0xEF4449746E756F63);
  return Hasher._finalize()();
}

void sub_1002B28C8(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1002B2914()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000012, 0x80000001006F47A0);
  swift_bridgeObjectRelease(0x80000001006F47A0);
  return Hasher._finalize()();
}

void sub_1002B29D4(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1002B2A20()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6972745364697575, 0xEA0000000000676ELL);
  swift_bridgeObjectRelease(0xEA0000000000676ELL);
  return Hasher._finalize()();
}

void sub_1002B2AF8(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1002B2B44()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000017, 0x80000001006F4060);
  swift_bridgeObjectRelease(0x80000001006F4060);
  return Hasher._finalize()();
}

void sub_1002B2BF0(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1002B2C3C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000017, 0x80000001006F4060);
  swift_bridgeObjectRelease(0x80000001006F4060);
  return Hasher._finalize()();
}

uint64_t sub_1002B2CC0(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x65746E49656D6974;
  else
    v3 = 0x44497463656A626FLL;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xEC0000006C617672;
  if ((a2 & 1) != 0)
    v5 = 0x65746E49656D6974;
  else
    v5 = 0x44497463656A626FLL;
  if ((a2 & 1) != 0)
    v6 = 0xEC0000006C617672;
  else
    v6 = 0xE800000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_1002B2D74(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1002B2DC4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1002B2E3C + 4 * byte_1006B33DF[a2]))(0xD000000000000017);
}

uint64_t sub_1002B2E3C(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  char v3;

  v2 = 0x80000001006F4060;
  if (a1 == 0xD000000000000017 && v1 == 0x80000001006F4060)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD000000000000017, 0x80000001006F4060, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_1002B2EF8(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000010;
  else
    v3 = 0x68636E75616CLL;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0x80000001006F4E10;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000010;
  else
    v5 = 0x68636E75616CLL;
  if ((a2 & 1) != 0)
    v6 = 0x80000001006F4E10;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_1002B2FA0(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x44497463656A626FLL;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0xD000000000000012;
    else
      v4 = 0x74696D69786F7270;
    if (v3 == 1)
      v5 = 0x80000001006F4D50;
    else
      v5 = 0xE900000000000079;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0xD000000000000012;
      else
        v2 = 0x74696D69786F7270;
      if (v6 == 1)
        v7 = 0x80000001006F4D50;
      else
        v7 = 0xE900000000000079;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE800000000000000;
    v4 = 0x44497463656A626FLL;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE800000000000000;
  if (v4 != 0x44497463656A626FLL)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_1002B30C0(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x746E657665;
  else
    v3 = 0x44497463656A626FLL;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xE500000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x746E657665;
  else
    v5 = 0x44497463656A626FLL;
  if ((a2 & 1) != 0)
    v6 = 0xE500000000000000;
  else
    v6 = 0xE800000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_1002B3160(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1002B31B0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1002B324C + 4 * byte_1006B33E8[a2]))(0xD000000000000017);
}

uint64_t sub_1002B324C(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  char v3;

  v2 = 0x80000001006F4060;
  if (a1 == 0xD000000000000017 && v1 == 0x80000001006F4060)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD000000000000017, 0x80000001006F4060, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_1002B3330(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x4449746E65726170;
  else
    v3 = 0x49746E756F636361;
  if (v2)
    v4 = 0xE900000000000044;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x4449746E65726170;
  else
    v5 = 0x49746E756F636361;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xE900000000000044;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_1002B33D8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1002B3428(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1002B34F4 + 4 * byte_1006B33F4[a2]))(0x6972745364697575);
}

uint64_t sub_1002B34F4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6972745364697575 && v1 == 0xEA0000000000676ELL)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6972745364697575, 0xEA0000000000676ELL, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEA0000000000676ELL);
  return v2 & 1;
}

void sub_1002B3618(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1002B3668(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1002B371C + 4 * byte_1006B3401[a2]))(0xD000000000000012);
}

uint64_t sub_1002B371C(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  char v3;

  v2 = 0x80000001006F47A0;
  if (a1 == 0xD000000000000012 && v1 == 0x80000001006F47A0)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD000000000000012, 0x80000001006F47A0, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

void sub_1002B3804(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1002B3860(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1002B38D8 + 4 * byte_1006B340B[a2]))(0x6341746E65726170);
}

uint64_t sub_1002B38D8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6341746E65726170 && v1 == 0xEF4449746E756F63)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6341746E65726170, 0xEF4449746E756F63, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEF4449746E756F63);
  return v2 & 1;
}

uint64_t sub_1002B3998(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x706D6F4365746164;
  else
    v3 = 0x44497463656A626FLL;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xEE0073746E656E6FLL;
  if ((a2 & 1) != 0)
    v5 = 0x706D6F4365746164;
  else
    v5 = 0x44497463656A626FLL;
  if ((a2 & 1) != 0)
    v6 = 0xEE0073746E656E6FLL;
  else
    v6 = 0xE800000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_1002B3A48(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xE900000000000044;
  v3 = 0x49746E756F636361;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x6341746E65726170;
    else
      v5 = 0xD000000000000014;
    if (v4 == 1)
      v6 = 0xEF4449746E756F63;
    else
      v6 = 0x80000001006F3EE0;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x49746E756F636361;
  v6 = 0xE900000000000044;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x6341746E65726170;
    else
      v3 = 0xD000000000000014;
    if (v7 == 1)
      v2 = 0xEF4449746E756F63;
    else
      v2 = 0x80000001006F3EE0;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
  {
    v8 = 1;
    v2 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v3, v2, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  return v8 & 1;
}

uint64_t sub_1002B3B78(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 6911093;
  else
    v3 = 0x44497463656A626FLL;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xE300000000000000;
  if ((a2 & 1) != 0)
    v5 = 6911093;
  else
    v5 = 0x44497463656A626FLL;
  if ((a2 & 1) != 0)
    v6 = 0xE300000000000000;
  else
    v6 = 0xE800000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_1002B3C18(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1002B3C7C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1002B3CF8 + 4 * byte_1006B3415[a2]))(0x44497473696CLL);
}

uint64_t sub_1002B3CF8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x44497473696CLL && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x44497473696CLL, 0xE600000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000);
  return v2 & 1;
}

void sub_1002B3DBC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1002B3E0C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1002B3EA8 + 4 * byte_1006B3422[a2]))(6911093);
}

uint64_t sub_1002B3EA8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 6911093 && v1 == 0xE300000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 6911093, 0xE300000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE300000000000000);
  return v2 & 1;
}

uint64_t sub_1002B3F9C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6465696669646F6DLL;
  else
    v3 = 0x44497463656A626FLL;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xEC00000065746144;
  if ((a2 & 1) != 0)
    v5 = 0x6465696669646F6DLL;
  else
    v5 = 0x44497463656A626FLL;
  if ((a2 & 1) != 0)
    v6 = 0xEC00000065746144;
  else
    v6 = 0xE800000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_1002B4048(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1002B4098(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1002B410C + 4 * byte_1006B342E[a2]))(6911093);
}

uint64_t sub_1002B410C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 6911093 && v1 == 0xE300000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 6911093, 0xE300000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE300000000000000);
  return v2 & 1;
}

uint64_t sub_1002B41C8(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD00000000000001ALL;
  else
    v3 = 0xD000000000000018;
  if (v2)
    v4 = 0x80000001006F4290;
  else
    v4 = 0x80000001006F42B0;
  if ((a2 & 1) != 0)
    v5 = 0xD00000000000001ALL;
  else
    v5 = 0xD000000000000018;
  if ((a2 & 1) != 0)
    v6 = 0x80000001006F42B0;
  else
    v6 = 0x80000001006F4290;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_1002B4270(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000016;
  else
    v3 = 0xD000000000000011;
  if (v2)
    v4 = 0x80000001006F4250;
  else
    v4 = 0x80000001006F4270;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000016;
  else
    v5 = 0xD000000000000011;
  if ((a2 & 1) != 0)
    v6 = 0x80000001006F4270;
  else
    v6 = 0x80000001006F4250;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_1002B4318(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1002B4368(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1002B43B8 + 4 * byte_1006B3437[a2]))(6911093);
}

uint64_t sub_1002B43B8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 6911093 && v1 == 0xE300000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 6911093, 0xE300000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE300000000000000);
  return v2 & 1;
}

uint64_t sub_1002B444C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x44496D72616C61;
  else
    v3 = 0x49746E756F636361;
  if (v2)
    v4 = 0xE900000000000044;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x44496D72616C61;
  else
    v5 = 0x49746E756F636361;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE900000000000044;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_1002B44F4(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xD00000000000001CLL;
  v3 = 0x80000001006F3F10;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD00000000000001FLL;
    else
      v5 = 0xD00000000000001CLL;
    if (v4 == 1)
      v6 = 0x80000001006F3F30;
    else
      v6 = 0x80000001006F3F50;
    v7 = a2;
    if (!a2)
      goto LABEL_12;
  }
  else
  {
    v5 = 0xD00000000000001CLL;
    v6 = 0x80000001006F3F10;
    v7 = a2;
    if (!a2)
      goto LABEL_12;
  }
  if (v7 == 1)
  {
    v2 = 0xD00000000000001FLL;
    v3 = 0x80000001006F3F30;
  }
  else
  {
    v3 = 0x80000001006F3F50;
  }
LABEL_12:
  if (v5 == v2 && v6 == v3)
  {
    v8 = 1;
    v3 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v2, v3, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  return v8 & 1;
}

uint64_t sub_1002B45E8(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x736E6F6974636573;
  else
    v3 = 0x7265646E696D6572;
  if (v2)
    v4 = 0xE900000000000073;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x736E6F6974636573;
  else
    v5 = 0x7265646E696D6572;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xE900000000000073;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_1002B4690(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1002B46EC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1002B47D8 + 4 * byte_1006B3443[a2]))(0xD000000000000016);
}

uint64_t sub_1002B47D8(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  char v3;

  v2 = 0x80000001006F3E60;
  if (a1 == 0xD000000000000016 && v1 == 0x80000001006F3E60)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD000000000000016, 0x80000001006F3E60, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

void sub_1002B4918(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1002B4968(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1002B4A0C + 4 * byte_1006B3451[a2]))(0x64656E6769737361);
}

uint64_t sub_1002B4A0C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x64656E6769737361 && v1 == 0xEC00000065746144)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x64656E6769737361, 0xEC00000065746144, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEC00000065746144);
  return v2 & 1;
}

void sub_1002B4AE4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1002B4B40(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1002B4BA8 + 4 * byte_1006B345B[a2]))(0x7265646E696D6572);
}

uint64_t sub_1002B4BA8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7265646E696D6572 && v1 == 0xEA00000000004449)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x7265646E696D6572, 0xEA00000000004449, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEA00000000004449);
  return v2 & 1;
}

uint64_t sub_1002B4C60(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEC00000065746144;
  v3 = 0x6E6F697461657263;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x4E79616C70736964;
    else
      v5 = 0x73694C7472616D73;
    if (v4 == 1)
      v6 = 0xEB00000000656D61;
    else
      v6 = 0xE900000000000074;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x6E6F697461657263;
  v6 = 0xEC00000065746144;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x4E79616C70736964;
    else
      v3 = 0x73694C7472616D73;
    if (v7 == 1)
      v2 = 0xEB00000000656D61;
    else
      v2 = 0xE900000000000074;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
  {
    v8 = 1;
    v2 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v3, v2, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  return v8 & 1;
}

void sub_1002B4D98(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1002B4DE8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1002B4E44 + 4 * byte_1006B3463[a2]))(0x6E6F697461657263);
}

uint64_t sub_1002B4E44(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6E6F697461657263 && v1 == 0xEC00000065746144)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6E6F697461657263, 0xEC00000065746144, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEC00000065746144);
  return v2 & 1;
}

uint64_t sub_1002B4EE4(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEC00000065746144;
  v3 = 0x6E6F697461657263;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x4E79616C70736964;
    else
      v5 = 0x6574616C706D6574;
    if (v4 == 1)
      v6 = 0xEB00000000656D61;
    else
      v6 = 0xE800000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x6E6F697461657263;
  v6 = 0xEC00000065746144;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x4E79616C70736964;
    else
      v3 = 0x6574616C706D6574;
    if (v7 == 1)
      v2 = 0xEB00000000656D61;
    else
      v2 = 0xE800000000000000;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
  {
    v8 = 1;
    v2 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v3, v2, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  return v8 & 1;
}

uint64_t sub_1002B5014(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000032;
  else
    v3 = 0xD000000000000021;
  if (v2)
    v4 = 0x80000001006F4E30;
  else
    v4 = 0x80000001006F4E60;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000032;
  else
    v5 = 0xD000000000000021;
  if ((a2 & 1) != 0)
    v6 = 0x80000001006F4E60;
  else
    v6 = 0x80000001006F4E30;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_1002B50BC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1002B510C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1002B5170 + 4 * byte_1006B346B[a2]))(0x57676E69646E6570);
}

uint64_t sub_1002B5170(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x57676E69646E6570 && v1 == 0xEB000000006B726FLL)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x57676E69646E6570, 0xEB000000006B726FLL, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEB000000006B726FLL);
  return v2 & 1;
}

void sub_1002B5218(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1002B5264(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2;

  return ((uint64_t (*)(uint64_t))((char *)sub_1002B52D8 + 4 * byte_1006B3474[a2]))(v2 + 18);
}

uint64_t sub_1002B52D8(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  char v4;

  v3 = 0x80000001006F5110;
  if (a1 == v1 + 18 && v2 == 0x80000001006F5110)
  {
    v4 = 1;
    v3 = v2;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v2, v1 + 18, 0x80000001006F5110, 0);
  }
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return v4 & 1;
}

uint64_t sub_1002B5380(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x44497473696CLL;
  else
    v3 = 0x49746E756F636361;
  if (v2)
    v4 = 0xE900000000000044;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x44497473696CLL;
  else
    v5 = 0x49746E756F636361;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE900000000000044;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_1002B5424(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x617461646174656DLL;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0xD00000000000001DLL;
    else
      v4 = 0x6574616C706D6574;
    if (v3 == 1)
      v5 = 0x80000001006F4AB0;
    else
      v5 = 0xE800000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0xD00000000000001DLL;
      else
        v2 = 0x6574616C706D6574;
      if (v6 == 1)
        v7 = 0x80000001006F4AB0;
      else
        v7 = 0xE800000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE800000000000000;
    v4 = 0x617461646174656DLL;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE800000000000000;
  if (v4 != 0x617461646174656DLL)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

void sub_1002B553C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1002B558C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1002B55FC + 4 * byte_1006B347E[a2]))(0x72656767697274);
}

uint64_t sub_1002B55FC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x72656767697274 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x72656767697274, 0xE700000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE700000000000000);
  return v2 & 1;
}

uint64_t sub_1002B56A0(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7265646E696D6572;
  else
    v3 = 0x49746E756F636361;
  if (v2)
    v4 = 0xE900000000000044;
  else
    v4 = 0xEA00000000004449;
  if ((a2 & 1) != 0)
    v5 = 0x7265646E696D6572;
  else
    v5 = 0x49746E756F636361;
  if ((a2 & 1) != 0)
    v6 = 0xEA00000000004449;
  else
    v6 = 0xE900000000000044;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_1002B574C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1002B57B0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1002B581C + 4 * byte_1006B3487[a2]))(0x4E79616C70736964);
}

uint64_t sub_1002B581C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x4E79616C70736964 && v1 == 0xEB00000000656D61)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x4E79616C70736964, 0xEB00000000656D61, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEB00000000656D61);
  return v2 & 1;
}

void sub_1002B58D0(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1002B591C(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2;

  return ((uint64_t (*)(uint64_t))((char *)sub_1002B59B0 + 4 * byte_1006B3492[a2]))(v2 + 33);
}

uint64_t sub_1002B59B0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  char v4;

  v3 = 0x80000001006F4FC0;
  if (a1 == v1 + 33 && v2 == 0x80000001006F4FC0)
  {
    v4 = 1;
    v3 = v2;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v2, v1 + 33, 0x80000001006F4FC0, 0);
  }
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return v4 & 1;
}

uint64_t sub_1002B5A74(char a1, char a2)
{
  unint64_t v2;
  unint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 0x80000001006F43A0;
  else
    v2 = 0x80000001006F4360;
  if ((a2 & 1) != 0)
    v3 = 0x80000001006F43A0;
  else
    v3 = 0x80000001006F4360;
  if (v2 == v3)
  {
    v4 = 1;
    v3 = v2;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, v2, 0xD000000000000012, v3, 0);
  }
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return v4 & 1;
}

void sub_1002B5B14(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1002B5B54(uint64_t a1)
{
  String.hash(into:)(a1, 0x6972745364697575, 0xEA0000000000676ELL);
  return swift_bridgeObjectRelease(0xEA0000000000676ELL);
}

void sub_1002B5C18(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1002B5C58(uint64_t a1)
{
  String.hash(into:)(a1, 0xD000000000000012, 0x80000001006F47A0);
  return swift_bridgeObjectRelease(0x80000001006F47A0);
}

void sub_1002B5D04(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1002B5D48(uint64_t a1)
{
  String.hash(into:)(a1, 0x44497473696CLL, 0xE600000000000000);
  return swift_bridgeObjectRelease(0xE600000000000000);
}

void sub_1002B5DD4(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1002B5E14(uint64_t a1)
{
  String.hash(into:)(a1, 6911093, 0xE300000000000000);
  return swift_bridgeObjectRelease(0xE300000000000000);
}

uint64_t sub_1002B5EA8(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = 0xD00000000000001CLL;
  if (a2)
  {
    if (a2 == 1)
    {
      v3 = 0xD00000000000001FLL;
      v4 = 0x80000001006F3F30;
    }
    else
    {
      v4 = 0x80000001006F3F50;
    }
  }
  else
  {
    v4 = 0x80000001006F3F10;
  }
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

void sub_1002B5F24(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1002B5F68(uint64_t a1)
{
  String.hash(into:)(a1, 0xD000000000000016, 0x80000001006F3E60);
  return swift_bridgeObjectRelease(0x80000001006F3E60);
}

void sub_1002B6050(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1002B6090(uint64_t a1)
{
  String.hash(into:)(a1, 0x64656E6769737361, 0xEC00000065746144);
  return swift_bridgeObjectRelease(0xEC00000065746144);
}

void sub_1002B612C(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1002B6174(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, v1 + 18, 0x80000001006F5110);
  return swift_bridgeObjectRelease(0x80000001006F5110);
}

void sub_1002B61DC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1002B621C(uint64_t a1)
{
  String.hash(into:)(a1, 0x72656767697274, 0xE700000000000000);
  return swift_bridgeObjectRelease(0xE700000000000000);
}

void sub_1002B6284(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1002B62CC(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, v1 + 33, 0x80000001006F4FC0);
  return swift_bridgeObjectRelease(0x80000001006F4FC0);
}

id sub_1002B6354(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  Class isa;
  id v10;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain(a1);
    for (i = 0; i != v2; ++i)
    {
      v5 = *(void **)(a1 + 8 * i + 32);
      if (v5)
      {
        v6 = v5;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
        v8 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v7 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v8 >= v7 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1);
        v4 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v6);
        specialized Array._endMutation()(v4);
      }
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_1000151B0(0, (unint64_t *)&unk_100839910, NSPredicate_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v10 = objc_msgSend((id)objc_opt_self(NSCompoundPredicate), "andPredicateWithSubpredicates:", isa);

  return v10;
}

uint64_t sub_1002B6490(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[5];

  v1 = result;
  if ((result & 0xC000000000000001) != 0)
  {
    if (result >= 0)
      result &= 0xFFFFFFFFFFFFFF8uLL;
    v2 = __CocoaSet.makeIterator()(result);
    v3 = sub_10001A630((uint64_t *)&unk_10083AEC0);
    result = (uint64_t)Set.Iterator.init(_cocoa:)(v24, v2, v3, &protocol witness table for AnyKeyPath);
    v1 = v24[0];
    v21 = v24[1];
    v4 = v24[2];
    v5 = v24[3];
    v6 = v24[4];
  }
  else
  {
    v5 = 0;
    v7 = -1 << *(_BYTE *)(result + 32);
    v21 = result + 56;
    v4 = ~v7;
    v8 = -v7;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v6 = v9 & *(_QWORD *)(result + 56);
  }
  v10 = (unint64_t)(v4 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_12;
  while (1)
  {
    if (v6)
    {
      v11 = (v6 - 1) & v6;
      v12 = __clz(__rbit64(v6)) | (v5 << 6);
      v13 = v5;
      goto LABEL_31;
    }
    v18 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    if (v18 >= v10)
      return sub_1000C6560(v1);
    v19 = *(_QWORD *)(v21 + 8 * v18);
    v13 = v5 + 1;
    if (!v19)
    {
      v13 = v5 + 2;
      if (v5 + 2 >= v10)
        return sub_1000C6560(v1);
      v19 = *(_QWORD *)(v21 + 8 * v13);
      if (!v19)
      {
        v13 = v5 + 3;
        if (v5 + 3 >= v10)
          return sub_1000C6560(v1);
        v19 = *(_QWORD *)(v21 + 8 * v13);
        if (!v19)
        {
          v13 = v5 + 4;
          if (v5 + 4 >= v10)
            return sub_1000C6560(v1);
          v19 = *(_QWORD *)(v21 + 8 * v13);
          if (!v19)
          {
            v13 = v5 + 5;
            if (v5 + 5 >= v10)
              return sub_1000C6560(v1);
            v19 = *(_QWORD *)(v21 + 8 * v13);
            if (!v19)
            {
              v20 = v5 + 6;
              while (v10 != v20)
              {
                v19 = *(_QWORD *)(v21 + 8 * v20++);
                if (v19)
                {
                  v13 = v20 - 1;
                  goto LABEL_30;
                }
              }
              return sub_1000C6560(v1);
            }
          }
        }
      }
    }
LABEL_30:
    v11 = (v19 - 1) & v19;
    v12 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_31:
    v17 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v12);
    swift_retain();
    if (!v17)
      return sub_1000C6560(v1);
    while (1)
    {
      sub_1002DC7C8(&v23, v17, (uint64_t *)&unk_10083AEC0, (uint64_t *)&unk_1008436A0);
      result = swift_release(v23);
      v5 = v13;
      v6 = v11;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_12:
      v14 = __CocoaSet.Iterator.next()(result);
      if (v14)
      {
        v15 = v14;
        v22 = v14;
        swift_unknownObjectRetain(v14);
        v16 = sub_10001A630((uint64_t *)&unk_10083AEC0);
        swift_dynamicCast(&v23, &v22, (char *)&type metadata for Swift.AnyObject + 8, v16, 7);
        v17 = v23;
        swift_unknownObjectRelease(v15);
        v13 = v5;
        v11 = v6;
        if (v17)
          continue;
      }
      return sub_1000C6560(v1);
    }
  }
  __break(1u);
  return result;
}

void sub_1002B6724(uint64_t a1)
{
  sub_1002B6A50(a1, (uint64_t (*)(uint64_t))&type metadata accessor for REMObjectID_Codable, (unint64_t *)&unk_100840EC0, &qword_100840EB8);
}

void sub_1002B6740(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  _QWORD v25[5];

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v2 = __CocoaSet.makeIterator()(a1);
    v3 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
    v4 = sub_1000E51DC(&qword_100847B30, (unint64_t *)&qword_100839DE0, NSNumber_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    a1 = (uint64_t)Set.Iterator.init(_cocoa:)(v25, v2, v3, v4);
    v1 = v25[0];
    v22 = v25[1];
    v5 = v25[2];
    v6 = v25[3];
    v7 = v25[4];
  }
  else
  {
    v6 = 0;
    v8 = -1 << *(_BYTE *)(a1 + 32);
    v22 = a1 + 56;
    v5 = ~v8;
    v9 = -v8;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v7 = v10 & *(_QWORD *)(a1 + 56);
  }
  v21 = (unint64_t)(v5 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_12;
  while (1)
  {
    if (v7)
    {
      v11 = (v7 - 1) & v7;
      v12 = __clz(__rbit64(v7)) | (v6 << 6);
      v13 = v6;
      goto LABEL_31;
    }
    v18 = v6 + 1;
    if (__OFADD__(v6, 1))
      break;
    if (v18 >= v21)
      goto LABEL_34;
    v19 = *(_QWORD *)(v22 + 8 * v18);
    v13 = v6 + 1;
    if (!v19)
    {
      v13 = v6 + 2;
      if (v6 + 2 >= v21)
        goto LABEL_34;
      v19 = *(_QWORD *)(v22 + 8 * v13);
      if (!v19)
      {
        v13 = v6 + 3;
        if (v6 + 3 >= v21)
          goto LABEL_34;
        v19 = *(_QWORD *)(v22 + 8 * v13);
        if (!v19)
        {
          v13 = v6 + 4;
          if (v6 + 4 >= v21)
            goto LABEL_34;
          v19 = *(_QWORD *)(v22 + 8 * v13);
          if (!v19)
          {
            v13 = v6 + 5;
            if (v6 + 5 >= v21)
              goto LABEL_34;
            v19 = *(_QWORD *)(v22 + 8 * v13);
            if (!v19)
            {
              v20 = v6 + 6;
              while (v21 != v20)
              {
                v19 = *(_QWORD *)(v22 + 8 * v20++);
                if (v19)
                {
                  v13 = v20 - 1;
                  goto LABEL_30;
                }
              }
LABEL_34:
              sub_1000C6560(v1);
              return;
            }
          }
        }
      }
    }
LABEL_30:
    v11 = (v19 - 1) & v19;
    v12 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_31:
    v17 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v12);
    if (!v17)
      goto LABEL_34;
    while (1)
    {
      sub_1002DDAAC((Swift::Int *)&v24, v17, (unint64_t *)&qword_100839DE0, NSNumber_ptr, &qword_1008436E8);

      v6 = v13;
      v7 = v11;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_12:
      v14 = __CocoaSet.Iterator.next()(a1);
      if (v14)
      {
        v15 = v14;
        v23 = v14;
        v16 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
        swift_unknownObjectRetain(v15);
        swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v16, 7);
        v17 = v24;
        swift_unknownObjectRelease(v15);
        v13 = v6;
        v11 = v7;
        if (v17)
          continue;
      }
      goto LABEL_34;
    }
  }
  __break(1u);
}

void sub_1002B6A34(uint64_t a1)
{
  sub_1002B6A50(a1, (uint64_t (*)(uint64_t))type metadata accessor for RDDebounceableCKDatabaseNotification, &qword_100844380, &qword_100844388);
}

void sub_1002B6A50(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  _QWORD v32[5];

  v6 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v8 = __CocoaSet.makeIterator()(a1);
    v9 = a2(0);
    v10 = sub_10009FC50(a3, a2, (uint64_t)&protocol conformance descriptor for NSObject);
    a1 = (uint64_t)Set.Iterator.init(_cocoa:)(v32, v8, v9, v10);
    v6 = v32[0];
    v29 = v32[1];
    v11 = v32[2];
    v12 = v32[3];
    v13 = v32[4];
  }
  else
  {
    v12 = 0;
    v14 = -1 << *(_BYTE *)(a1 + 32);
    v29 = a1 + 56;
    v15 = ~v14;
    v16 = -v14;
    if (v16 < 64)
      v17 = ~(-1 << v16);
    else
      v17 = -1;
    v13 = v17 & *(_QWORD *)(a1 + 56);
    v11 = v15;
  }
  v28 = (unint64_t)(v11 + 64) >> 6;
  if (v6 < 0)
    goto LABEL_12;
  while (1)
  {
    if (v13)
    {
      v18 = (v13 - 1) & v13;
      v19 = __clz(__rbit64(v13)) | (v12 << 6);
      v20 = v12;
      goto LABEL_31;
    }
    v25 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v25 >= v28)
      goto LABEL_34;
    v26 = *(_QWORD *)(v29 + 8 * v25);
    v20 = v12 + 1;
    if (!v26)
    {
      v20 = v12 + 2;
      if (v12 + 2 >= v28)
        goto LABEL_34;
      v26 = *(_QWORD *)(v29 + 8 * v20);
      if (!v26)
      {
        v20 = v12 + 3;
        if (v12 + 3 >= v28)
          goto LABEL_34;
        v26 = *(_QWORD *)(v29 + 8 * v20);
        if (!v26)
        {
          v20 = v12 + 4;
          if (v12 + 4 >= v28)
            goto LABEL_34;
          v26 = *(_QWORD *)(v29 + 8 * v20);
          if (!v26)
          {
            v20 = v12 + 5;
            if (v12 + 5 >= v28)
              goto LABEL_34;
            v26 = *(_QWORD *)(v29 + 8 * v20);
            if (!v26)
            {
              v27 = v12 + 6;
              while (v28 != v27)
              {
                v26 = *(_QWORD *)(v29 + 8 * v27++);
                if (v26)
                {
                  v20 = v27 - 1;
                  goto LABEL_30;
                }
              }
LABEL_34:
              sub_1000C6560(v6);
              return;
            }
          }
        }
      }
    }
LABEL_30:
    v18 = (v26 - 1) & v26;
    v19 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_31:
    v24 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v19);
    if (!v24)
      goto LABEL_34;
    while (1)
    {
      sub_100017040((Swift::Int *)&v31, v24, a2, a4);

      v12 = v20;
      v13 = v18;
      if ((v6 & 0x8000000000000000) == 0)
        break;
LABEL_12:
      v21 = __CocoaSet.Iterator.next()(a1);
      if (v21)
      {
        v22 = v21;
        v30 = v21;
        v23 = a2(0);
        swift_unknownObjectRetain(v22);
        swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v23, 7);
        v24 = v31;
        swift_unknownObjectRelease(v22);
        v20 = v12;
        v18 = v13;
        if (v24)
          continue;
      }
      goto LABEL_34;
    }
  }
  __break(1u);
}

void sub_1002B6D14(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  id v13;

  v2 = 0;
  v3 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v7)
      goto LABEL_23;
    v11 = *(_QWORD *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      v2 = v10 + 1;
      if (v10 + 1 >= v7)
        goto LABEL_23;
      v11 = *(_QWORD *)(v3 + 8 * v2);
      if (!v11)
      {
        v2 = v10 + 2;
        if (v10 + 2 >= v7)
          goto LABEL_23;
        v11 = *(_QWORD *)(v3 + 8 * v2);
        if (!v11)
        {
          v2 = v10 + 3;
          if (v10 + 3 >= v7)
            goto LABEL_23;
          v11 = *(_QWORD *)(v3 + 8 * v2);
          if (!v11)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    sub_1002DDAAC((Swift::Int *)&v13, *(id *)(*(_QWORD *)(a1 + 56) + 8 * v9), (unint64_t *)&qword_100839928, off_1007D6718, (uint64_t *)&unk_100844750);

  }
  v12 = v10 + 4;
  if (v12 >= v7)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
  {
    v2 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v2 >= v7)
      goto LABEL_23;
    v11 = *(_QWORD *)(v3 + 8 * v2);
    ++v12;
    if (v11)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

void sub_1002B6EA0(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  id v13[2];

  v2 = 0;
  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v7)
      goto LABEL_23;
    v11 = *(_QWORD *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      v2 = v10 + 1;
      if (v10 + 1 >= v7)
        goto LABEL_23;
      v11 = *(_QWORD *)(v3 + 8 * v2);
      if (!v11)
      {
        v2 = v10 + 2;
        if (v10 + 2 >= v7)
          goto LABEL_23;
        v11 = *(_QWORD *)(v3 + 8 * v2);
        if (!v11)
        {
          v2 = v10 + 3;
          if (v10 + 3 >= v7)
            goto LABEL_23;
          v11 = *(_QWORD *)(v3 + 8 * v2);
          if (!v11)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    sub_1002DCD00(v13, *(id *)(*(_QWORD *)(a1 + 48) + 16 * v9), *(_QWORD *)(v9 + 8));

  }
  v12 = v10 + 4;
  if (v12 >= v7)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
  {
    v2 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v2 >= v7)
      goto LABEL_23;
    v11 = *(_QWORD *)(v3 + 8 * v2);
    ++v12;
    if (v11)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

void sub_1002B7008(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  int64_t v24;

  v2 = type metadata accessor for RDPermanentlyHiddenReminder(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v23 - v7;
  v9 = sub_10001A630((uint64_t *)&unk_100843FD0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = 0;
  v14 = *(_QWORD *)(a1 + 56);
  v23 = a1 + 56;
  v15 = 1 << *(_BYTE *)(a1 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v24 = (unint64_t)(v15 + 63) >> 6;
  if ((v16 & v14) == 0)
    goto LABEL_5;
LABEL_4:
  v18 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (i = v18 | (v13 << 6); ; i = __clz(__rbit64(v21)) + (v13 << 6))
  {
    sub_1000151E8(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v3 + 72) * i, (uint64_t)v12, type metadata accessor for RDPermanentlyHiddenReminder);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v12, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v12, 1, v2) == 1)
      goto LABEL_25;
    sub_1000B8680((uint64_t)v12, (uint64_t)v5, type metadata accessor for RDPermanentlyHiddenReminder);
    sub_1002DD10C((uint64_t)v8, (uint64_t)v5);
    sub_10011FF54((uint64_t)v8);
    if (v17)
      goto LABEL_4;
LABEL_5:
    v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v24)
      goto LABEL_24;
    v21 = *(_QWORD *)(v23 + 8 * v20);
    ++v13;
    if (!v21)
    {
      v13 = v20 + 1;
      if (v20 + 1 >= v24)
        goto LABEL_24;
      v21 = *(_QWORD *)(v23 + 8 * v13);
      if (!v21)
      {
        v13 = v20 + 2;
        if (v20 + 2 >= v24)
          goto LABEL_24;
        v21 = *(_QWORD *)(v23 + 8 * v13);
        if (!v21)
        {
          v13 = v20 + 3;
          if (v20 + 3 >= v24)
            goto LABEL_24;
          v21 = *(_QWORD *)(v23 + 8 * v13);
          if (!v21)
            break;
        }
      }
    }
LABEL_20:
    v17 = (v21 - 1) & v21;
  }
  v22 = v20 + 4;
  if (v22 >= v24)
  {
LABEL_24:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v3 + 56))(v12, 1, 1, v2, v10);
LABEL_25:
    swift_release(a1);
    return;
  }
  v21 = *(_QWORD *)(v23 + 8 * v22);
  if (v21)
  {
    v13 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    v13 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v13 >= v24)
      goto LABEL_24;
    v21 = *(_QWORD *)(v23 + 8 * v13);
    ++v22;
    if (v21)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
}

void sub_1002B72AC(uint64_t a1)
{
  uint64_t PredicateType;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;

  PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType(0);
  v3 = *(_QWORD *)(PredicateType - 8);
  __chkstk_darwin(PredicateType);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v23 - v7;
  __chkstk_darwin(v9);
  v11 = (char *)&v23 - v10;
  v12 = 0;
  v13 = *(_QWORD *)(a1 + 56);
  v24 = a1 + 56;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v12 << 6);
      goto LABEL_5;
    }
    v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v20 >= v17)
      goto LABEL_23;
    v21 = *(_QWORD *)(v24 + 8 * v20);
    ++v12;
    if (!v21)
    {
      v12 = v20 + 1;
      if (v20 + 1 >= v17)
        goto LABEL_23;
      v21 = *(_QWORD *)(v24 + 8 * v12);
      if (!v21)
      {
        v12 = v20 + 2;
        if (v20 + 2 >= v17)
          goto LABEL_23;
        v21 = *(_QWORD *)(v24 + 8 * v12);
        if (!v21)
        {
          v12 = v20 + 3;
          if (v20 + 3 >= v17)
            goto LABEL_23;
          v21 = *(_QWORD *)(v24 + 8 * v12);
          if (!v21)
            break;
        }
      }
    }
LABEL_22:
    v16 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v11, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v3 + 72) * v19, PredicateType);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v11, PredicateType);
    sub_1002DB5B0((uint64_t)v8, (uint64_t)v5);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, PredicateType);
  }
  v22 = v20 + 4;
  if (v22 >= v17)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v21 = *(_QWORD *)(v24 + 8 * v22);
  if (v21)
  {
    v12 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    v12 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v12 >= v17)
      goto LABEL_23;
    v21 = *(_QWORD *)(v24 + 8 * v12);
    ++v22;
    if (v21)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

void sub_1002B74D0(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16[2];

  v2 = 0;
  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v13 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v7)
      goto LABEL_23;
    v14 = *(_QWORD *)(v3 + 8 * v13);
    ++v2;
    if (!v14)
    {
      v2 = v13 + 1;
      if (v13 + 1 >= v7)
        goto LABEL_23;
      v14 = *(_QWORD *)(v3 + 8 * v2);
      if (!v14)
      {
        v2 = v13 + 2;
        if (v13 + 2 >= v7)
          goto LABEL_23;
        v14 = *(_QWORD *)(v3 + 8 * v2);
        if (!v14)
        {
          v2 = v13 + 3;
          if (v13 + 3 >= v7)
            goto LABEL_23;
          v14 = *(_QWORD *)(v3 + 8 * v2);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v14 - 1) & v14;
    v9 = __clz(__rbit64(v14)) + (v2 << 6);
LABEL_5:
    v10 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v9);
    v11 = *v10;
    v12 = v10[1];
    swift_bridgeObjectRetain(v12);
    sub_1002DB0E4(v16, v11, v12);
    swift_bridgeObjectRelease(v16[1]);
  }
  v15 = v13 + 4;
  if (v15 >= v7)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v14 = *(_QWORD *)(v3 + 8 * v15);
  if (v14)
  {
    v2 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v2 >= v7)
      goto LABEL_23;
    v14 = *(_QWORD *)(v3 + 8 * v2);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_1002B763C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100843620);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100843620);
  if (qword_100837608 != -1)
    swift_once(&qword_100837608, sub_1004A17C8);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1002B76CC()
{
  uint64_t v0;

  if (qword_100837110 != -1)
    swift_once(&qword_100837110, sub_1002B763C);
  v0 = type metadata accessor for Logger(0);
  return sub_10001AAA8(v0, (uint64_t)qword_100843620);
}

uint64_t sub_1002B771C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002B7750 + 4 * byte_1006B34D2[a1]))(0x70756F72477349, 0xE700000000000000);
}

uint64_t sub_1002B7750()
{
  return 0x626D456567646142;
}

uint64_t sub_1002B7770()
{
  return 0x726F6C6F43;
}

unint64_t sub_1002B7784()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_1002B7934()
{
  return 0x53676E6974726F53;
}

uint64_t sub_1002B7954(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002B7990 + 4 * byte_1006B34E7[a1]))(0x626D456567646162, 0xEB000000006D656CLL);
}

uint64_t sub_1002B7990()
{
  return 0x726F6C6F63;
}

unint64_t sub_1002B79A4()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_1002B7B78()
{
  return 0x53676E6974726F73;
}

uint64_t sub_1002B7B98(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = sub_1002B7954(*a1);
  v5 = v4;
  v6 = sub_1002B7954(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_1002B7C20()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  v2 = sub_1002B7954(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

double sub_1002B7C80(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = sub_1002B7954(*v1);
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

Swift::Int sub_1002B7CC0(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  v3 = sub_1002B7954(v2);
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1002B7D1C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1002E9FA4(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_1002B7D48@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1002B7954(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1002B7D70(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DD5D8;
}

_UNKNOWN **static REMCDList.recordTypes()()
{
  return &off_1007E0200;
}

uint64_t static REMCDList.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  id v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t result;

  v7 = a1;
  swift_bridgeObjectRetain(a3);
  v8 = a4;
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v10 = objc_msgSend((id)objc_opt_self(REMCDList), "objectWithRecordID:accountID:context:", v7, v9, v8);

  if (v10)
  {
    result = swift_dynamicCastUnknownClass(v10, v4);
    if (result)
      return result;

  }
  return 0;
}

id sub_1002B7EFC(void *a1)
{
  void *v1;
  id result;
  id v4;
  NSString v5;
  double v6;

  result = objc_msgSend(a1, "ic_isOwnedByCurrentUser");
  if ((result & 1) == 0)
  {
    sub_1002B7FC4();
    v4 = objc_msgSend(a1, "zoneID");
    v5 = objc_msgSend(v4, "ownerName");

    if (!v5)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v5 = String._bridgeToObjectiveC()();
      *(_QWORD *)&v6 = swift_bridgeObjectRelease().n128_u64[0];
    }
    objc_msgSend(v1, "updateSharedObjectOwnerName:", v5, v6);

    return objc_msgSend(v1, "setSharingStatus:", 2);
  }
  return result;
}

void sub_1002B7FC4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  id v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  _BYTE v31[40];
  uint64_t v32;
  uint64_t v33;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v31[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v5);
  v7 = &v31[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  *(_QWORD *)&v9 = __chkstk_darwin(v8).n128_u64[0];
  v11 = &v31[-v10 - 8];
  v12 = objc_msgSend(v0, "account", v9);
  if (v12)
  {
    v13 = v12;
    v14 = sub_10001A630((uint64_t *)&unk_10083AD90);
    inited = swift_initStackObject(v14, v31);
    *(_OWORD *)(inited + 16) = xmmword_1006A7330;
    *(_QWORD *)(inited + 32) = v0;
    v33 = inited;
    specialized Array._endMutation()(inited);
    v16 = v33;
    v17 = v0;
    sub_1005903B4(v16, 0);
    swift_bridgeObjectRelease();

  }
  else
  {
    if (qword_100837110 != -1)
      swift_once(&qword_100837110, sub_1002B763C);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100843620);
    v30 = v0;
    v19 = Logger.logObject.getter(v30);
    v20 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v33 = v22;
      *(_DWORD *)v21 = 136446210;
      v23 = objc_msgSend(v30, "identifier");
      if (v23)
      {
        v24 = v23;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v23);

        v25 = 0;
      }
      else
      {
        v25 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v7, v25, 1, v1);
      sub_1000A5CA8((uint64_t)v7, (uint64_t)v11, (uint64_t *)&unk_100839C80);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v11, 1, v1))
      {
        sub_10000882C((uint64_t)v11, (uint64_t *)&unk_100839C80);
        v26 = 0xE700000000000000;
        v27 = 0x6E776F6E6B6E75;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v11, v1);
        v28 = sub_10000882C((uint64_t)v11, (uint64_t *)&unk_100839C80);
        v27 = UUID.uuidString.getter(v28);
        v26 = v29;
        (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      }
      v32 = sub_10001A820(v27, v26, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Tried to update listIDsMergableOrdering after fetching share / undeleting list but list has no parent account {listID: %{public}s}", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

    }
    else
    {

    }
  }
}

id static REMCDList.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v8;
  NSString v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t MetatypeMetadata;
  uint64_t v21;
  unint64_t v22;
  double v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = v3;
  v8 = objc_msgSend(a1, "recordID");
  v9 = objc_msgSend(v8, "recordName");

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "newObjectWithCKRecordName:context:account:", v9, a3, a2);

  if (v10)
  {
    v11 = objc_msgSend(a2, "ckIdentifier");
    if (v11)
    {
      v12 = v11;
      objc_msgSend(v10, "mergeDataFromRecord:accountID:", a1, v11);

      objc_msgSend(v10, "setCkServerRecord:", a1);
      objc_msgSend(v10, "setInCloud:", 1);
      objc_msgSend(v10, "updateParentReferenceIfNecessary");
      v13 = objc_msgSend(a1, "recordID");
      sub_1002B7EFC(v13);

    }
    else
    {
      if (qword_100837110 != -1)
        swift_once(&qword_100837110, sub_1002B763C);
      v14 = type metadata accessor for Logger(0);
      sub_10001AAA8(v14, (uint64_t)qword_100843620);
      v15 = a2;
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = swift_slowAlloc(22, -1);
        v19 = swift_slowAlloc(64, -1);
        v31 = v19;
        v32 = v4;
        *(_DWORD *)v18 = 136446466;
        MetatypeMetadata = swift_getMetatypeMetadata(v4);
        v21 = String.init<A>(describing:)(&v32, MetatypeMetadata);
        v32 = sub_10001A820(v21, v22, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
        *(_QWORD *)&v23 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v18 + 12) = 2082;
        v24 = objc_msgSend(v15, "remObjectID", v23, v31);
        if (v24)
        {
          v25 = v24;
          v26 = objc_msgSend(v24, "description");

          v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
          v29 = v28;

        }
        else
        {
          v29 = 0xE300000000000000;
          v27 = 7104878;
        }
        v32 = sub_10001A820(v27, v29, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v18, 0x16u);
        swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v19, -1, -1);
        swift_slowDealloc(v18, -1, -1);

      }
      else
      {

      }
      return 0;
    }
  }
  return v10;
}

uint64_t static REMCDList.newPlaceholderObject(for:account:context:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v7;
  id v8;
  uint64_t result;
  objc_super v10;

  v10.receiver = (id)swift_getObjCClassFromMetadata(v3);
  v10.super_class = (Class)&OBJC_METACLASS___REMCDList;
  v7 = objc_msgSendSuper2(&v10, "newPlaceholderObjectForRecordID:account:context:", a1, a2, a3);
  if (v7)
  {
    v8 = v7;
    sub_1002B7EFC(a1);
    return (uint64_t)v8;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000032, 0x80000001006FF430, "remindd/REMCDList+CloudKit.swift", 32, 2, 219, 0);
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall REMCDList.objectWasDeletedFromCloudByAnotherDevice()()
{
  void *v0;
  objc_super v1;

  if ((objc_msgSend(v0, "isOwnedByCurrentUser") & 1) == 0)
    objc_msgSend(v0, "updateSharedObjectOwnerName:", 0);
  v1.receiver = v0;
  v1.super_class = (Class)REMCDList;
  objc_msgSendSuper2(&v1, "objectWasDeletedFromCloudByAnotherDevice");
}

Swift::String __swiftcall REMCDList.recordType()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = 1953720652;
  v1 = (void *)0xE400000000000000;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

void sub_1002B89D0(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t KeyPath;
  NSString v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  _BYTE v14[48];

  v3 = v2;
  if ((a2 & 1) != 0 || (sub_1002B8B88() & 1) == 0)
  {
    v4 = sub_10001A630((uint64_t *)&unk_10083AD90);
    inited = swift_initStackObject(v4, v14);
    *(_OWORD *)(inited + 16) = xmmword_1006A8550;
    *(_QWORD *)(inited + 32) = swift_getKeyPath(&unk_1006B35D0);
    KeyPath = swift_getKeyPath(&unk_1006B3608);
    *(_QWORD *)(inited + 40) = KeyPath;
    specialized Array._endMutation()(KeyPath);
    sub_100342188(v3, inited);
    swift_bridgeObjectRelease();
    v7 = String._bridgeToObjectiveC()();
    v8 = objc_msgSend(v3, "mutableOrderedSetValueForKey:", v7);

    if (v8)
    {
      v9 = v8;
      sub_1000A7610((void **)&v9->isa, 0);

    }
    else
    {
      if (qword_100837110 != -1)
        swift_once(&qword_100837110, sub_1002B763C);
      v10 = type metadata accessor for Logger(0);
      v11 = sub_10001AAA8(v10, (uint64_t)qword_100843620);
      v9 = Logger.logObject.getter(v11);
      v12 = static os_log_type_t.default.getter(v9);
      if (os_log_type_enabled(v9, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, v12, "Not sorting child reminders because REMCDList.mutableOrderedSetValue(forKey: reminders) is nil", v13, 2u);
        swift_slowDealloc(v13, -1, -1);
      }
    }

  }
}

uint64_t sub_1002B8B88()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t *v12;
  id v13;
  uint64_t v14;
  id v16;
  uint64_t v17;

  v1 = objc_msgSend(v0, "managedObjectContext");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = objc_opt_self(RDStoreControllerManagedObjectContext);
  v4 = swift_dynamicCastObjCClass(v2, v3);
  if (!v4)
  {
LABEL_11:

    return 0;
  }
  v5 = (void *)v4;
  v6 = (uint64_t)objc_msgSend(v0, "recordID");
  if (v6)
  {
    if ((objc_msgSend(v5, "containerShouldSortChildrenAfterFetchingWithRecordID:", v6) & 1) != 0)
    {
      if (qword_100837110 != -1)
        swift_once(&qword_100837110, sub_1002B763C);
      v7 = type metadata accessor for Logger(0);
      sub_10001AAA8(v7, (uint64_t)qword_100843620);
      v8 = (id)v6;
      v9 = Logger.logObject.getter(v8);
      v10 = static os_log_type_t.info.getter(v9);
      if (!os_log_type_enabled(v9, v10))
      {

        return 1;
      }
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v11 = 138543362;
      v16 = v8;
      v13 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
      *v12 = v6;

      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Sorting children (reminders and/or sections) deferred {listRecordID: %{public}@}", v11, 0xCu);
      v14 = sub_10001A630((uint64_t *)&unk_100839E70);
      v6 = 1;
      swift_arrayDestroy(v12, 1, v14);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      goto LABEL_9;
    }

    goto LABEL_11;
  }
LABEL_9:

  return v6;
}

void sub_1002B8DB8()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  Class isa;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[3];
  _BYTE v37[16];
  id v38;

  if ((sub_1002B8B88() & 1) == 0)
  {
    v1 = objc_msgSend(v0, "reminderIDsMergeableOrdering");
    if (v1)
    {
      v2 = v1;
      v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);
      v5 = v4;

      v6 = (void *)objc_opt_self(REMListStorage);
      isa = Data._bridgeToObjectiveC()().super.isa;
      v38 = 0;
      v8 = objc_msgSend(v6, "reminderIDsMergeableOrderingFromReminderIDUUIDStringsJSONData:error:", isa, &v38);

      v9 = v38;
      if (v8)
      {
        v10 = qword_100837110;
        v11 = v38;
        if (v10 != -1)
          swift_once(&qword_100837110, sub_1002B763C);
        v12 = type metadata accessor for Logger(0);
        sub_10001AAA8(v12, (uint64_t)qword_100843620);
        v13 = v0;
        v14 = Logger.logObject.getter(v13);
        v15 = static os_log_type_t.info.getter(v14);
        if (os_log_type_enabled(v14, v15))
        {
          v16 = (uint8_t *)swift_slowAlloc(12, -1);
          v34 = (void *)swift_slowAlloc(32, -1);
          v38 = v34;
          *(_DWORD *)v16 = 136315138;
          v17 = objc_msgSend(v13, "remObjectID");
          if (v17)
          {
            v18 = v17;
            v19 = objc_msgSend(v17, "description");

            v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
            v22 = v21;

          }
          else
          {
            v22 = 0xE300000000000000;
            v20 = 7104878;
          }
          v35 = sub_10001A820(v20, v22, (uint64_t *)&v38);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v14, v15, "REMCDList+CloudKit.sortChildReminders(): deserialized reminderIDsMergeableOrdering from data {remObjID: %s}", v16, 0xCu);
          swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v34, -1, -1);
          swift_slowDealloc(v16, -1, -1);

        }
        else
        {

        }
        sub_1002B89D0((uint64_t)v8, 1);

        sub_1000A71C8(v3, v5);
      }
      else
      {
        v23 = v38;
        v24 = _convertNSErrorToError(_:)(v9);

        swift_willThrow(v25);
        sub_1000A71C8(v3, v5);
        if (qword_100837110 != -1)
          swift_once(&qword_100837110, sub_1002B763C);
        v26 = type metadata accessor for Logger(0);
        sub_10001AAA8(v26, (uint64_t)qword_100843620);
        swift_errorRetain(v24);
        v27 = swift_errorRetain(v24);
        v28 = Logger.logObject.getter(v27);
        v29 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v28, v29))
        {
          v30 = (uint8_t *)swift_slowAlloc(12, -1);
          v31 = (void *)swift_slowAlloc(32, -1);
          v38 = v31;
          *(_DWORD *)v30 = 136315138;
          swift_getErrorValue(v24, v37, v36);
          v32 = Error.localizedDescription.getter(v36[1], v36[2]);
          v35 = sub_10001A820(v32, v33, (uint64_t *)&v38);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36);
          swift_bridgeObjectRelease();
          swift_errorRelease(v24);
          swift_errorRelease(v24);
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "Error decoding reminder IDs ordered set and thus not able to sort child reminders {error : %s}", v30, 0xCu);
          swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v31, -1, -1);
          swift_slowDealloc(v30, -1, -1);

          swift_errorRelease(v24);
        }
        else
        {
          swift_errorRelease(v24);
          swift_errorRelease(v24);
          swift_errorRelease(v24);

        }
      }
    }
  }
}

void sub_1002B9248()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  Class isa;
  id v29;
  uint64_t v30;
  os_log_type_t log;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35[2];

  v1 = v0;
  if ((sub_1002B8B88() & 1) == 0)
  {
    v2 = objc_msgSend(v0, "remObjectID");
    if (v2)
    {
      v32 = v2;
      v3 = objc_msgSend(v0, "storeControllerManagedObjectContext");
      if (v3)
      {
        v4 = v3;
        v5 = qword_100837758;
        v6 = v32;
        if (v5 != -1)
          swift_once(&qword_100837758, sub_1004E8168);
        v7 = sub_1004E892C((uint64_t)v32, 0, (uint64_t)v4, (Class)qword_1008721F0, 0, 0);

        v8 = objc_msgSend(v1, "sectionIDsOrderingAsData");
        if (v8)
        {
          v9 = v8;
          v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
          v12 = v11;

          sub_1000151B0(0, (unint64_t *)&qword_10083D440, REMOrderedIdentifierMap_ptr);
          static REMJSONRepresentable.fromJSONData(_:)(v35, v10, v12);
          sub_1000A71C8(v10, v12);
          v13 = (void *)v35[0];
          v14 = type metadata accessor for REMCDListSection();
          v15 = REMOrderedIdentifierMap.reorder<A>(objects:)(v7, v14);
          swift_bridgeObjectRelease();
          if (qword_100837110 != -1)
            swift_once(&qword_100837110, sub_1002B763C);
          v16 = type metadata accessor for Logger(0);
          sub_10001AAA8(v16, (uint64_t)qword_100843620);
          v17 = v1;
          v18 = Logger.logObject.getter(v17);
          v19 = static os_log_type_t.default.getter(v18);
          if (os_log_type_enabled(v18, v19))
          {
            log = v19;
            v33 = v13;
            v20 = (uint8_t *)swift_slowAlloc(12, -1);
            v30 = swift_slowAlloc(32, -1);
            v35[0] = v30;
            *(_DWORD *)v20 = 136315138;
            v21 = objc_msgSend(v17, "remObjectID");
            if (v21)
            {
              v22 = v21;
              v23 = objc_msgSend(v21, "description");

              v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
              v26 = v25;

            }
            else
            {
              v24 = 7104878;
              v26 = 0xE300000000000000;
            }
            v34 = sub_10001A820(v24, v26, v35);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v18, log, "REMCDList+CloudKit#sortChildSections(): Sorted child sections {cdList: %s}", v20, 0xCu);
            swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v30, -1, -1);
            swift_slowDealloc(v20, -1, -1);

          }
          else
          {

          }
        }
        else
        {
          v15 = v7;
        }
        sub_1001E0620(v15);
        swift_bridgeObjectRelease();
        v27 = objc_allocWithZone((Class)NSMutableOrderedSet);
        isa = Array._bridgeToObjectiveC()().super.isa;
        v29 = objc_msgSend(v27, "initWithArray:", isa, swift_bridgeObjectRelease().n128_f64[0]);

        objc_msgSend(v1, "setSections:", v29);
      }
      else
      {

      }
    }
  }
}

Swift::Void __swiftcall REMCDList.sortChildrenObjects()()
{
  sub_1002B8DB8();
  sub_1002B9248();
}

Swift::Void __swiftcall REMCDList.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  void *v2;
  void *v3;
  uint64_t ObjectType;
  NSString v6;
  id v7;
  NSString v8;
  double v9;
  NSString v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  id v16;
  objc_class *v17;
  id v18;
  void *v19;
  char v20;
  objc_super v21;

  v3 = v2;
  ObjectType = swift_getObjectType();
  v6 = String._bridgeToObjectiveC()();
  v21.receiver = v3;
  v21.super_class = (Class)REMCDList;
  objc_msgSendSuper2(&v21, "mergeDataFromRecord:accountID:", from.super.isa, v6);

  v7 = -[objc_class recordID](from.super.isa, "recordID");
  v8 = objc_msgSend(v7, "recordName");

  if (!v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v8 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v9 = swift_bridgeObjectRelease().n128_u64[0];
  }
  v10 = objc_msgSend(v3, "ckIdentifierFromRecordName:", v8, v9);

  if (!v10)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v10 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v11 = swift_bridgeObjectRelease().n128_u64[0];
  }
  objc_msgSend(v3, "setCkIdentifier:", v10, v11);

  v12 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  CKRecordKeyValueSetting.subscript.getter(0x70756F72477349, 0xE700000000000000, v12, &type metadata for Bool, &protocol witness table for Bool);
  v13 = v20 & 1;
  if ((_DWORD)v13 != objc_msgSend(v3, "isGroup"))
    objc_msgSend(v3, "setIsGroup:", v13);
  v20 = 0;
  v14 = objc_msgSend(v3, "mergeDataRevertedLocallyMarkedForDeletion");
  v15 = objc_msgSend(v3, "mergeDataRefusedToMergeMarkedForDeletion");
  v16 = v3;
  v17 = from.super.isa;
  sub_100437C6C(v17, v14, v15, v16, v16, v17, (uint64_t)&v20, ObjectType);
  if (objc_msgSend(v16, "mergeDataRevertedLocallyMarkedForDeletion"))
    sub_1002B7FC4();
  if (v20 == 1)
  {
    v18 = objc_msgSend(v16, "parentAccount");
    if (v18)
    {
      v19 = v18;
      if ((objc_msgSend(v18, "ckNeedsInitialFetchFromCloud") & 1) == 0)
        sub_1005902A4();

    }
  }
}

void sub_1002B9DD4(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[22];
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v60[21] = a5;
  v67 = a4;
  v72 = a3;
  v73 = a2;
  v6 = type metadata accessor for Date(0);
  v65 = *(_QWORD *)(v6 - 8);
  v66 = v6;
  __chkstk_darwin(v6);
  v60[1] = (char *)v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v69 = v8;
  v70 = v9;
  __chkstk_darwin(v8);
  v60[20] = (char *)v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v60[2] = (char *)v60 - v12;
  __chkstk_darwin(v13);
  v60[19] = (char *)v60 - v14;
  __chkstk_darwin(v15);
  v60[10] = (char *)v60 - v16;
  __chkstk_darwin(v17);
  v60[7] = (char *)v60 - v18;
  __chkstk_darwin(v19);
  v60[12] = (char *)v60 - v20;
  __chkstk_darwin(v21);
  v60[5] = (char *)v60 - v22;
  __chkstk_darwin(v23);
  v60[11] = (char *)v60 - v24;
  __chkstk_darwin(v25);
  v60[8] = (char *)v60 - v26;
  v27 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v27);
  v60[4] = (char *)v60 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  __chkstk_darwin(v30);
  v71 = type metadata accessor for UUID(0);
  v68 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  __chkstk_darwin(v31);
  v60[13] = (char *)v60 - v32;
  v61 = sub_10001A630((uint64_t *)&unk_10083B370);
  __chkstk_darwin(v61);
  v60[16] = (char *)v60 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v60[15] = (char *)v60 - v35;
  v36 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v36);
  v60[3] = (char *)v60 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  __chkstk_darwin(v39);
  v60[6] = (char *)v60 - v40;
  __chkstk_darwin(v41);
  v60[9] = (char *)v60 - v42;
  __chkstk_darwin(v43);
  v60[18] = (char *)v60 - v44;
  __chkstk_darwin(v45);
  v63 = (char *)v60 - v46;
  __chkstk_darwin(v47);
  __chkstk_darwin(v48);
  v64 = (char *)v60 - v49;
  __chkstk_darwin(v50);
  v60[14] = (char *)v60 - v51;
  __chkstk_darwin(v52);
  __chkstk_darwin(v53);
  v60[17] = (char *)v60 - v54;
  __chkstk_darwin(v55);
  v62 = (char *)v60 - v56;
  __chkstk_darwin(v57);
  __chkstk_darwin(v58);
  v59 = *a1;
  sub_1002B771C(v59);
  __asm { BR              X9 }
}

uint64_t sub_1002BA2A0(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

void sub_1002BA2C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __n128 v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t, __n128);
  Class isa;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t inited;
  _QWORD *v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  id v35;
  unsigned int v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  NSObject *v56;
  _WORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  uint8_t *v62;
  id v63;
  void *v64;

  v7 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  v8 = *(_QWORD *)(v2 + 216);
  v9 = *(void **)(v2 + 264);
  CKRecordKeyValueSetting.subscript.getter(a1, a2, v7, v8, &protocol witness table for Date);
  v10 = swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(v2 + 208);
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v11 + 48);
  isa = 0;
  if (v12(v3, 1, v8, v10) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v3, v8);
  }
  v14 = *(void **)(v2 + 272);
  objc_msgSend(v14, "setPinnedDate:", isa);

  v15 = sub_10027B738((uint64_t)objc_msgSend(v14, "sharingStatus"));
  if (v15 < 2)
  {
    v35 = objc_msgSend(v9, "recordID");
    v36 = objc_msgSend(v35, "ic_isOwnedByCurrentUser");

    if (!v36)
      return;
    v37 = objc_msgSend(v14, "pinnedDate");
    if (v37)
    {
      v38 = v37;
      v39 = *(_QWORD *)(v2 + 8);
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v37);

      v40 = *(_QWORD *)(v2 + 32);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v40, v39, v8);
      v41 = 1;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v40, 0, 1, v8);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v12)(v40, 1, v8) != 1)
        goto LABEL_21;
    }
    else
    {
      v40 = *(_QWORD *)(v2 + 32);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v40, 1, 1, v8);
    }
    v41 = 0;
LABEL_21:
    sub_10000882C(v40, (uint64_t *)&unk_1008380D0);
    objc_msgSend(v14, "setIsPinnedByCurrentUser:", v41);
    return;
  }
  v16 = v15;
  if (v15 - 3 >= 2)
  {
    if (v15 == 2)
    {
      v17 = sub_1002B76CC();
      v18 = *(_QWORD *)(v2 + 56);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v2 + 248) + 16))(v18, v17, *(_QWORD *)(v2 + 240));
      v19 = swift_allocObject(&unk_1007EC978, 24, 7);
      *(_QWORD *)(v19 + 16) = v14;
      v20 = v14;
      *(_QWORD *)(v2 + 272) = v20;
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.default.getter(v21);
      v23 = swift_allocObject(&unk_1007EC9A0, 17, 7);
      *(_BYTE *)(v23 + 16) = 34;
      v24 = swift_allocObject(&unk_1007EC9C8, 17, 7);
      *(_BYTE *)(v24 + 16) = 8;
      v25 = swift_allocObject(&unk_1007EC9F0, 32, 7);
      *(_QWORD *)(v25 + 16) = sub_1002EBBF8;
      *(_QWORD *)(v25 + 24) = v19;
      v26 = swift_allocObject(&unk_1007ECA18, 32, 7);
      *(_QWORD *)(v26 + 16) = sub_1000A66B8;
      *(_QWORD *)(v26 + 24) = v25;
      v27 = sub_10001A630((uint64_t *)&unk_100844760);
      inited = swift_initStackObject(v27, v2 + 488);
      sub_1001484C4(inited, 3);
      *v29 = sub_1002EBB38;
      v29[1] = v23;
      v29[2] = sub_1002EBB38;
      v29[3] = v24;
      v29[4] = sub_1002EBB30;
      v29[5] = v26;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v2 + 264) = v22;
      if (os_log_type_enabled(v21, (os_log_type_t)v22))
      {
        *(_QWORD *)(v2 + 256) = v21;
        v30 = (uint8_t *)sub_10009D4F8(12);
        v31 = swift_slowAlloc(32, -1);
        *(_QWORD *)(v4 - 240) = v31;
        *(_QWORD *)(v4 - 232) = 0;
        *(_WORD *)v30 = 258;
        *(_QWORD *)(v4 - 224) = v30 + 2;
        *(_QWORD *)(v4 - 256) = sub_1002EBB38;
        *(_QWORD *)(v4 - 248) = v23;
        sub_10009FB00((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 - 256), v4 - 224, v4 - 232, v4 - 240);
        swift_release(v23);
        *(_QWORD *)(v4 - 256) = sub_1002EBB38;
        *(_QWORD *)(v4 - 248) = v24;
        sub_10009FB00((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 - 256), v4 - 224, v4 - 232, v4 - 240);
        v32 = *(_QWORD *)(v2 + 56);
        swift_release(v24);
        *(_QWORD *)(v4 - 256) = sub_1002EBB30;
        *(_QWORD *)(v4 - 248) = v26;
        sub_10009FB00((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 - 256), v4 - 224, v4 - 232, v4 - 240);
        v33 = *(_QWORD *)(v2 + 240);
        swift_release(v26);
        v34 = *(NSObject **)(v2 + 256);
        _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)*(_DWORD *)(v2 + 264), "REMCDList.mergeData(from record:accountID:) will insert pending post-save action '.notify_SharedToMeListPinnedStateDidBecomeStale' {ckIdentifier: %{public}s}", v30, 0xCu);
        swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v31, -1, -1);
        sub_10009D4EC((uint64_t)v30);

        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 248) + 8))(v32, v33);
      }
      else
      {

        swift_release(v26);
        swift_release(v24);
        swift_release(v23);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 + 248) + 8))(v18, *(_QWORD *)(v2 + 240));
      }
      v63 = objc_msgSend(*(id *)(v2 + 272), "storeControllerManagedObjectContext");
      if (v63)
      {
        v64 = v63;
        *(_QWORD *)(v4 - 224) = objc_msgSend(v63, "pendingPostSaveActions");
        sub_1001E0830((_QWORD *)(v4 - 256), 2);
        objc_msgSend(v64, "setPendingPostSaveActions:", *(_QWORD *)(v4 - 224));

      }
    }
    else
    {
      v42 = sub_1002B76CC();
      (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v2 + 248) + 16))(*(_QWORD *)(v2 + 80), v42, *(_QWORD *)(v2 + 240));
      v43 = swift_allocObject(&unk_1007EC7E8, 24, 7);
      *(_QWORD *)(v43 + 16) = v14;
      v44 = swift_allocObject(&unk_1007EC810, 24, 7);
      *(_QWORD *)(v44 + 16) = v16;
      *(_QWORD *)(v2 + 272) = Logger.logObject.getter(v14);
      *(_DWORD *)(v2 + 264) = static os_log_type_t.fault.getter();
      v45 = swift_allocObject(&unk_1007EC838, 17, 7);
      *(_BYTE *)(v45 + 16) = 34;
      v46 = swift_allocObject(&unk_1007EC860, 17, 7);
      *(_BYTE *)(v46 + 16) = 8;
      v47 = swift_allocObject(&unk_1007EC888, 32, 7);
      *(_QWORD *)(v47 + 16) = sub_1002EBBF8;
      *(_QWORD *)(v47 + 24) = v43;
      v48 = swift_allocObject(&unk_1007EC8B0, 32, 7);
      *(_QWORD *)(v48 + 16) = sub_1000098E4;
      *(_QWORD *)(v48 + 24) = v47;
      v49 = swift_allocObject(&unk_1007EC8D8, 17, 7);
      *(_BYTE *)(v49 + 16) = 2;
      v50 = swift_allocObject(&unk_1007EC900, 17, 7);
      *(_BYTE *)(v50 + 16) = 8;
      v51 = swift_allocObject(&unk_1007EC928, 32, 7);
      *(_QWORD *)(v51 + 16) = sub_1002EBB3C;
      *(_QWORD *)(v51 + 24) = v44;
      v52 = swift_allocObject(&unk_1007EC950, 32, 7);
      *(_QWORD *)(v52 + 16) = sub_1002EB4C4;
      *(_QWORD *)(v52 + 24) = v51;
      v53 = sub_10001A630((uint64_t *)&unk_100844760);
      v54 = swift_initStackObject(v53, v4 - 216);
      sub_1001484C4(v54, 6);
      *v55 = sub_1002EB484;
      v55[1] = v45;
      v55[2] = sub_1002EBB38;
      v55[3] = v46;
      v55[4] = sub_1002EB49C;
      v55[5] = v48;
      v55[6] = sub_1002EBB38;
      v55[7] = v49;
      v55[8] = sub_1002EBB38;
      v55[9] = v50;
      v55[10] = sub_1002EB4EC;
      v55[11] = v52;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v56 = *(NSObject **)(v2 + 272);
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v56, (os_log_type_t)*(_DWORD *)(v2 + 264)))
      {
        v57 = (_WORD *)sub_10009D4F8(22);
        v58 = swift_slowAlloc(32, -1);
        *(_QWORD *)(v4 - 240) = v58;
        *(_QWORD *)(v4 - 232) = 0;
        *(_QWORD *)(v2 + 256) = v57;
        *v57 = 514;
        *(_QWORD *)(v4 - 224) = v57 + 1;
        *(_QWORD *)(v4 - 256) = sub_1002EB484;
        *(_QWORD *)(v4 - 248) = v45;
        sub_10009FB00((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 - 256), v4 - 224, v4 - 232, v4 - 240);
        swift_release(v45);
        *(_QWORD *)(v4 - 256) = sub_1002EBB38;
        *(_QWORD *)(v4 - 248) = v46;
        sub_10009FB00((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 - 256), v4 - 224, v4 - 232, v4 - 240);
        swift_release(v46);
        *(_QWORD *)(v4 - 256) = sub_1002EB49C;
        *(_QWORD *)(v4 - 248) = v48;
        sub_10009FB00((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 - 256), v4 - 224, v4 - 232, v4 - 240);
        v59 = *(_QWORD *)(v2 + 240);
        swift_release(v48);
        *(_QWORD *)(v4 - 256) = sub_1002EBB38;
        *(_QWORD *)(v4 - 248) = v49;
        sub_10009FB00((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 - 256), v4 - 224, v4 - 232, v4 - 240);
        swift_release(v49);
        *(_QWORD *)(v4 - 256) = sub_1002EBB38;
        *(_QWORD *)(v4 - 248) = v50;
        sub_10009FB00((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 - 256), v4 - 224, v4 - 232, v4 - 240);
        swift_release(v50);
        *(_QWORD *)(v4 - 256) = sub_1002EB4EC;
        *(_QWORD *)(v4 - 248) = v52;
        sub_10009FB00((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 - 256), v4 - 224, v4 - 232, v4 - 240);
        v60 = *(_QWORD *)(v2 + 80);
        swift_release(v52);
        v61 = *(NSObject **)(v2 + 272);
        v62 = *(uint8_t **)(v2 + 256);
        _os_log_impl((void *)&_mh_execute_header, v61, (os_log_type_t)*(_DWORD *)(v2 + 264), "REMCDList.mergeData(from record:accountID:) Unhandled sharingStatus {ckIdentifier: %{public}s, sharingStatus.rawValue: %{public}ld}", v62, 0x16u);
        swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v58, -1, -1);
        sub_10009D4EC((uint64_t)v62);

        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 248) + 8))(v60, v59);
      }
      else
      {

        swift_release(v52);
        swift_release(v50);
        swift_release(v49);
        swift_release(v48);
        swift_release(v46);
        swift_release(v45);
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 248) + 8))(*(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 240));
      }
    }
  }
}

void sub_1002BE680(void *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  double v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  void *v32;
  os_log_type_t v33;
  void *v34;
  _QWORD v35[3];
  _BYTE v36[8];
  uint64_t v37;
  uint64_t v38;
  id v39;

  v3 = v1;
  v5 = objc_msgSend(v1, "groceryLocalCorrectionsAsData");
  if (!v5)
  {
LABEL_12:
    v28 = a1;
    v27 = 0;
    goto LABEL_13;
  }
  v6 = v5;
  v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v9 = v8;

  sub_1000151B0(0, &qword_100844770, REMTextMemberships_ptr);
  static REMJSONRepresentable.fromJSONData(_:)(&v39, v7, v9);
  if (v2)
  {
    sub_1000A71C8(v7, v9);
    if (qword_100837388 != -1)
      swift_once(&qword_100837388, sub_1003A3A98);
    v10 = type metadata accessor for Logger(0);
    sub_10001AAA8(v10, (uint64_t)qword_100847DB0);
    v11 = v3;
    swift_errorRetain(v2);
    v12 = v11;
    v13 = swift_errorRetain(v2);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v33 = v15;
      v34 = a1;
      v16 = swift_slowAlloc(32, -1);
      v32 = (void *)swift_slowAlloc(96, -1);
      v39 = v32;
      *(_DWORD *)v16 = 136446722;
      v37 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
      v17 = sub_10001A630(&qword_10083D128);
      v18 = String.init<A>(describing:)(&v37, v17);
      v37 = sub_10001A820(v18, v19, (uint64_t *)&v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
      *(_QWORD *)&v20 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v16 + 12) = 2082;
      v21 = objc_msgSend(v12, "remObjectID", v20);
      if (v21)
      {
        v22 = v21;
        v23 = objc_msgSend(v21, "description");

        v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        v26 = v25;

      }
      else
      {
        v26 = 0xE300000000000000;
        v24 = 7104878;
      }
      v37 = sub_10001A820(v24, v26, (uint64_t *)&v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);

      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 22) = 2082;
      swift_getErrorValue(v2, v36, v35);
      v29 = Error.rem_errorDescription.getter(v35[1], v35[2]);
      v37 = sub_10001A820(v29, v30, (uint64_t *)&v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
      swift_bridgeObjectRelease();
      swift_errorRelease(v2);
      swift_errorRelease(v2);
      _os_log_impl((void *)&_mh_execute_header, v14, v33, "%{public}s#mergeGroceryLocalCorrections(_:): Failed to deserialize 'groceryLocalCorrectionsAsData' due to unexpected error. It will be overwritten. {objectID: %{public}s, error: %{public}s}", (uint8_t *)v16, 0x20u);
      swift_arrayDestroy(v32, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      swift_errorRelease(v2);
      a1 = v34;
    }
    else
    {
      swift_errorRelease(v2);

      swift_errorRelease(v2);
      swift_errorRelease(v2);

    }
    goto LABEL_12;
  }
  sub_1000A71C8(v7, v9);
  v27 = v39;
  v28 = objc_msgSend(v39, "mergingWith:", a1);
LABEL_13:
  v31 = v28;
  sub_100288A5C(v28, 1);

}

id sub_1002BEA84()
{
  void *v0;
  id result;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  result = objc_msgSend(v0, "parentAccount");
  if (!result)
  {
    result = objc_msgSend(v0, "storeControllerManagedObjectContext");
    if (result)
    {
      v2 = result;
      if (qword_100837958 != -1)
        swift_once(&qword_100837958, sub_1005B83A8);
      v3 = qword_100872288;
      v4 = (void *)swift_retain();
      v5 = sub_1003011F8(v4);

      swift_release(v3);
      return v5;
    }
  }
  return result;
}

uint64_t sub_1002BEB30(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;

  v1 = objc_msgSend(a1, "remObjectID");
  if (!v1)
    return 7104878;
  v2 = v1;
  v3 = objc_msgSend(v1, "description");

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  return v4;
}

uint64_t sub_1002BEBB4(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD))
{
  _QWORD v4[3];
  _BYTE v5[8];

  swift_getErrorValue(a1, v5, v4);
  return a2(v4[1], v4[2]);
}

uint64_t sub_1002BEBF0(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(a1, "ckIdentifier");
  if (v1)
  {
    v2 = v1;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  }
  v3 = sub_10001A630((uint64_t *)&unk_10083A370);
  v4 = Optional.descriptionOrNil.getter(v3);
  swift_bridgeObjectRelease();
  return v4;
}

CKRecord_optional __swiftcall REMCDList.newlyCreatedRecord()()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  Swift::Bool v25;
  id v26;
  unsigned __int8 v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  unsigned __int8 v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t ObjectType;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int (*v54)(char *, uint64_t, uint64_t);
  _QWORD *v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  id v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  void *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  id v95;
  void *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  Class isa;
  id v102;
  id v103;
  void *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  void *v108;
  Class v109;
  id v110;
  id v111;
  id v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  unsigned __int8 v120;
  id v121;
  id v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  void *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  void *v133;
  Class v134;
  id v135;
  id v136;
  id v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  objc_class *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  void *v154;
  objc_super v155;
  CKRecord_optional result;

  v1 = v0;
  v2 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v144 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v144 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v9);
  v11 = (char *)&v144 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v151 = (uint64_t)&v144 - v13;
  v14 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v14);
  v149 = (char *)&v144 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v150 = (uint64_t)&v144 - v17;
  __chkstk_darwin(v18);
  v20 = (char *)&v144 - v19;
  *(_QWORD *)&v22 = __chkstk_darwin(v21).n128_u64[0];
  v24 = (char *)&v144 - v23;
  v155.receiver = v1;
  v155.super_class = (Class)REMCDList;
  v26 = objc_msgSendSuper2(&v155, "newlyCreatedRecord", v22);
  if (!v26)
    goto LABEL_69;
  v146 = v11;
  v147 = v6;
  v148 = v5;
  v145 = v4;
  v27 = objc_msgSend(v1, "isGroup");
  *((_QWORD *)&v153 + 1) = &type metadata for Bool;
  v154 = &protocol witness table for Bool;
  LOBYTE(v152) = v27;
  v28 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  CKRecordKeyValueSetting.subscript.setter(&v152, 0x70756F72477349, 0xE700000000000000, v28);
  if (objc_msgSend(v1, "isOwnedByCurrentUser"))
  {
    v29 = objc_msgSend(v1, "parentAccount");
    v30 = v29;
    if (v29)

    *((_QWORD *)&v153 + 1) = &type metadata for Bool;
    v154 = &protocol witness table for Bool;
    LOBYTE(v152) = v30 != 0;
    CKRecordKeyValueSetting.subscript.setter(&v152, 0xD000000000000011, 0x80000001006FA670, v28);
    v31 = objc_msgSend(v1, "parentList");
    v32 = v31;
    if (!v31)
      goto LABEL_11;
    v33 = objc_msgSend(v31, "recordID");

    if (v33)
    {
      v34 = objc_msgSend(v26, "recordID");
      v35 = objc_msgSend(v34, "zoneID");

      v36 = objc_msgSend(v33, "zoneID");
      v37 = objc_msgSend(v35, "isEqual:", v36);

      if ((v37 & 1) != 0)
      {
        v32 = objc_msgSend(v1, "cloudKitReferenceWithRecordIDAndValidateAction:", v33);

LABEL_11:
        v38 = v32;
        CKRecord.subscript.setter(v32, 0x694C746E65726150, 0xEA00000000007473);

        goto LABEL_12;
      }

    }
    v32 = 0;
    goto LABEL_11;
  }
LABEL_12:
  v39 = objc_msgSend(v26, "encryptedValues", v8);
  v40 = objc_msgSend(v1, "name");
  if (v40)
  {
    v41 = v40;
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    v44 = v43;

    *((_QWORD *)&v153 + 1) = &type metadata for String;
    v154 = &protocol witness table for String;
    *(_QWORD *)&v152 = v42;
    *((_QWORD *)&v152 + 1) = v44;
  }
  else
  {
    v154 = 0;
    v152 = 0u;
    v153 = 0u;
  }
  ObjectType = swift_getObjectType();
  CKRecordKeyValueSetting.subscript.setter(&v152, 1701667150, 0xE400000000000000, ObjectType);
  swift_unknownObjectRelease(v39);
  v46 = objc_msgSend(v1, "color");
  if (v46)
  {
    v47 = v46;
    v48 = sub_10015F210();
    if (v49)
    {
      *((_QWORD *)&v153 + 1) = &type metadata for String;
      v154 = &protocol witness table for String;
      *(_QWORD *)&v152 = v48;
      *((_QWORD *)&v152 + 1) = v49;
    }
    else
    {
      v154 = 0;
      v152 = 0u;
      v153 = 0u;
    }
    CKRecordKeyValueSetting.subscript.setter(&v152, 0x726F6C6F43, 0xE500000000000000, v28);

  }
  else
  {
    CKRecord.subscript.setter(0, 0x726F6C6F43, 0xE500000000000000);
  }
  v50 = objc_msgSend(v1, "lastUserAccessDate");
  if (v50)
  {
    v51 = v50;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v50);

    v52 = type metadata accessor for Date(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v20, 0, 1, v52);
  }
  else
  {
    v52 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v20, 1, 1, v52);
  }
  sub_1000A5CA8((uint64_t)v20, (uint64_t)v24, (uint64_t *)&unk_1008380D0);
  type metadata accessor for Date(0);
  v53 = *(_QWORD *)(v52 - 8);
  v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48);
  if (v54(v24, 1, v52) == 1)
  {
    sub_10000882C((uint64_t)v24, (uint64_t *)&unk_1008380D0);
    v152 = 0u;
    v153 = 0u;
    v154 = 0;
  }
  else
  {
    *((_QWORD *)&v153 + 1) = v52;
    v154 = &protocol witness table for Date;
    v55 = sub_1000087F0(&v152);
    (*(void (**)(_QWORD *, char *, uint64_t))(v53 + 32))(v55, v24, v52);
  }
  CKRecordKeyValueSetting.subscript.setter(&v152, 0xD000000000000012, 0x80000001006FF470, v28);
  v56 = objc_msgSend(v1, "badgeEmblem");
  if (v56)
  {
    v57 = v56;
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
    v60 = v59;

    *((_QWORD *)&v153 + 1) = &type metadata for String;
    v154 = &protocol witness table for String;
    *(_QWORD *)&v152 = v58;
    *((_QWORD *)&v152 + 1) = v60;
  }
  else
  {
    v154 = 0;
    v152 = 0u;
    v153 = 0u;
  }
  CKRecordKeyValueSetting.subscript.setter(&v152, 0x626D456567646142, 0xEB000000006D656CLL, v28);
  v61 = objc_msgSend(v1, "sortingStyle");
  if (v61)
  {
    v62 = v61;
    v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    v65 = v64;

    *((_QWORD *)&v153 + 1) = &type metadata for String;
    v154 = &protocol witness table for String;
    *(_QWORD *)&v152 = v63;
    *((_QWORD *)&v152 + 1) = v65;
  }
  else
  {
    v154 = 0;
    v152 = 0u;
    v153 = 0u;
  }
  v66 = (uint64_t)v149;
  CKRecordKeyValueSetting.subscript.setter(&v152, 0x53676E6974726F53, 0xEC000000656C7974, v28);
  v67 = objc_msgSend(v1, "pinnedDate");
  if (v67)
  {
    v68 = v67;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v67);

    v69 = 0;
  }
  else
  {
    v69 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56))(v66, v69, 1, v52);
  v70 = v150;
  sub_1000A5CA8(v66, v150, (uint64_t *)&unk_1008380D0);
  if (v54((char *)v70, 1, v52) == 1)
  {
    sub_10000882C(v70, (uint64_t *)&unk_1008380D0);
    v152 = 0u;
    v153 = 0u;
    v154 = 0;
  }
  else
  {
    *((_QWORD *)&v153 + 1) = v52;
    v154 = &protocol witness table for Date;
    v71 = sub_1000087F0(&v152);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v53 + 32))(v71, v70, v52);
  }
  v73 = v147;
  v72 = v148;
  v74 = (uint64_t)v146;
  CKRecordKeyValueSetting.subscript.setter(&v152, 0x614464656E6E6950, 0xEA00000000006574, v28);
  v75 = objc_msgSend(v26, "encryptedValues");
  v76 = objc_msgSend(v1, "mostRecentTargetTemplateIdentifier");
  if (v76)
  {
    v77 = v76;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v76);

    v78 = 0;
  }
  else
  {
    v78 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56))(v74, v78, 1, v72);
  v79 = v151;
  sub_1000A5CA8(v74, v151, (uint64_t *)&unk_100839C80);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v79, 1, v72))
  {
    sub_10000882C(v79, (uint64_t *)&unk_100839C80);
    v152 = 0u;
    v153 = 0u;
    v154 = 0;
  }
  else
  {
    v80 = v144;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16))(v144, v79, v72);
    v81 = sub_10000882C(v79, (uint64_t *)&unk_100839C80);
    v82 = UUID.uuidString.getter(v81);
    v84 = v83;
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v80, v72);
    *((_QWORD *)&v153 + 1) = &type metadata for String;
    v154 = &protocol witness table for String;
    *(_QWORD *)&v152 = v82;
    *((_QWORD *)&v152 + 1) = v84;
  }
  v85 = swift_getObjectType();
  CKRecordKeyValueSetting.subscript.setter(&v152, 0xD000000000000022, 0x80000001006FA690, v85);
  swift_unknownObjectRelease(v75);
  CKRecord.subscript.setter(0, 0xD00000000000001CLL, 0x80000001006FF490);
  CKRecord.subscript.setter(0, 0xD000000000000021, 0x80000001006FF4B0);
  v86 = objc_msgSend(v1, "reminderIDsMergeableOrdering");
  v87 = v86;
  if (v86)
  {
    v88 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v86);
    v90 = v89;

    v91 = v145;
    static String.Encoding.utf8.getter();
    v92 = String.init(data:encoding:)(v88, v90, v91);
    v87 = v93;
    sub_1000A71C8(v88, v90);
    if (v87)
      v94 = String.count.getter(v92, v87);
    else
      v94 = 0;
  }
  else
  {
    v94 = 0;
    v92 = 0;
  }
  sub_10044E218(v92, (uint64_t)v87, v94, v26, 0x7265646E696D6552, 0xEB00000000734449, 0xD000000000000010, 0x80000001006FF4E0, 0, 1uLL);
  v95 = objc_msgSend(v1, "sectionIDsOrderingAsData", swift_bridgeObjectRelease().n128_f64[0]);
  if (v95)
  {
    v96 = v95;
    v97 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v95);
    v99 = v98;

    v100 = (void *)objc_opt_self(REMCDObject);
    sub_1000A70E4(v97, v99);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v102 = objc_msgSend(v100, "assetForData:", isa);

    CKRecord.subscript.setter(v102, 0xD000000000000018, 0x80000001006FA650);
    sub_1000A71C8(v97, v99);
    sub_1000A71C8(v97, v99);
  }
  else
  {
    CKRecord.subscript.setter(0, 0xD000000000000018, 0x80000001006FA650);
  }
  v103 = objc_msgSend(v1, "membershipsOfRemindersInSectionsAsData");
  if (v103)
  {
    v104 = v103;
    v105 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v103);
    v107 = v106;

    v108 = (void *)objc_opt_self(REMCDObject);
    sub_1000A70E4(v105, v107);
    v109 = Data._bridgeToObjectiveC()().super.isa;
    v110 = objc_msgSend(v108, "assetForData:", v109);

    CKRecord.subscript.setter(v110, 0xD000000000000026, 0x80000001006FA6F0);
    sub_1000A71C8(v105, v107);
    sub_1000A71C8(v105, v107);
  }
  else
  {
    CKRecord.subscript.setter(0, 0xD000000000000026, 0x80000001006FA6F0);
  }
  v111 = objc_msgSend(v26, "encryptedValues");
  v112 = objc_msgSend(v1, "membershipsOfRemindersInSectionsChecksum");
  if (v112)
  {
    v113 = v112;
    v114 = static String._unconditionallyBridgeFromObjectiveC(_:)(v112);
    v116 = v115;

    *((_QWORD *)&v153 + 1) = &type metadata for String;
    v154 = &protocol witness table for String;
    *(_QWORD *)&v152 = v114;
    *((_QWORD *)&v152 + 1) = v116;
  }
  else
  {
    v154 = 0;
    v152 = 0u;
    v153 = 0u;
  }
  v117 = swift_getObjectType();
  CKRecordKeyValueSetting.subscript.setter(&v152, 0xD000000000000028, 0x80000001006FA6C0, v117);
  swift_unknownObjectRelease(v111);
  v118 = objc_msgSend(v26, "encryptedValues");
  v119 = swift_getObjectType();
  v120 = objc_msgSend(v1, "shouldCategorizeGroceryItems");
  *((_QWORD *)&v153 + 1) = &type metadata for Bool;
  v154 = &protocol witness table for Bool;
  LOBYTE(v152) = v120;
  CKRecordKeyValueSetting.subscript.setter(&v152, 0xD00000000000001CLL, 0x80000001006FF500, v119);
  swift_unknownObjectRelease(v118);
  v121 = objc_msgSend(v26, "encryptedValues");
  v122 = objc_msgSend(v1, "groceryLocaleID");
  if (v122)
  {
    v123 = v122;
    v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(v122);
    v126 = v125;

    *((_QWORD *)&v153 + 1) = &type metadata for String;
    v154 = &protocol witness table for String;
    *(_QWORD *)&v152 = v124;
    *((_QWORD *)&v152 + 1) = v126;
  }
  else
  {
    v154 = 0;
    v152 = 0u;
    v153 = 0u;
  }
  v127 = swift_getObjectType();
  CKRecordKeyValueSetting.subscript.setter(&v152, 0x4C797265636F7247, 0xEF4449656C61636FLL, v127);
  swift_unknownObjectRelease(v121);
  v128 = objc_msgSend(v1, "groceryLocalCorrectionsAsData");
  if (v128)
  {
    v129 = v128;
    v130 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v128);
    v132 = v131;

    v133 = (void *)objc_opt_self(REMCDObject);
    sub_1000A70E4(v130, v132);
    v134 = Data._bridgeToObjectiveC()().super.isa;
    v135 = objc_msgSend(v133, "assetForData:", v134);

    CKRecord.subscript.setter(v135, 0xD00000000000001DLL, 0x80000001006FF520);
    sub_1000A71C8(v130, v132);
    sub_1000A71C8(v130, v132);
  }
  else
  {
    CKRecord.subscript.setter(0, 0xD00000000000001DLL, 0x80000001006FF520);
  }
  v136 = objc_msgSend(v26, "encryptedValues");
  v137 = objc_msgSend(v1, "groceryLocalCorrectionsChecksum");
  if (v137)
  {
    v138 = v137;
    v139 = static String._unconditionallyBridgeFromObjectiveC(_:)(v137);
    v141 = v140;

    *((_QWORD *)&v153 + 1) = &type metadata for String;
    v154 = &protocol witness table for String;
    *(_QWORD *)&v152 = v139;
    *((_QWORD *)&v152 + 1) = v141;
  }
  else
  {
    v154 = 0;
    v152 = 0u;
    v153 = 0u;
  }
  v142 = swift_getObjectType();
  CKRecordKeyValueSetting.subscript.setter(&v152, 0xD00000000000001FLL, 0x80000001006FF540, v142);
  swift_unknownObjectRelease(v136);
LABEL_69:
  v143 = (objc_class *)v26;
  result.value.super.isa = v143;
  result.is_nil = v25;
  return result;
}

Swift::String __swiftcall REMCDList.shareTitle()()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  Swift::String result;
  objc_super v9;

  v1 = objc_msgSend(v0, "name");
  if (!v1)
  {
    v9.receiver = v0;
    v9.super_class = (Class)REMCDList;
    v1 = objc_msgSendSuper2(&v9, "shareTitle");
  }
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v5 = v4;

  v6 = v3;
  v7 = v5;
  result._object = v7;
  result._countAndFlagsBits = v6;
  return result;
}

Swift::String __swiftcall REMCDList.shareType()()
{
  void *v0;
  uint64_t v1;
  Swift::String result;

  v0 = (void *)0x80000001006FF560;
  v1 = 0xD000000000000018;
  result._object = v0;
  result._countAndFlagsBits = v1;
  return result;
}

Swift::Void __swiftcall REMCDList.update(with:)(CKShare_optional with)
{
  uint64_t v1;
  uint64_t isa;
  Swift::OpaquePointer v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  unint64_t i;
  os_log_type_t v23;
  _BOOL4 v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  char v35;
  char **v36;
  id v37;
  char **v38;
  id v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  char ***v43;
  char **v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  id v64;
  void *v65;
  id v66;
  char **v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  id v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  void *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  id v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v102;
  unint64_t v103;
  uint64_t v104;
  _BOOL8 v105;
  uint64_t v106;
  char v107;
  unint64_t v108;
  char v109;
  uint64_t *v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  id v121;
  __n128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  id v127;
  id v128;
  uint64_t v129;
  id v130;
  id v131;
  id v132;
  id v133;
  __n128 v134;
  NSString v135;
  id v136;
  __n128 v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  Class v143;
  char *v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  NSString *v148;
  NSString *v149;
  NSString *v150;
  NSString *v151;
  NSString *v152;
  NSString *v153;
  NSString *v154;
  NSString *v155;
  uint64_t v156;
  NSString *v157;
  NSString *v158;
  NSString *v159;
  NSString *v160;
  NSString *v161;
  NSString *v162;
  NSString *v163;
  NSString *v164;
  id v165;
  id v166;
  id v167;
  id v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  id v172;
  id v173;
  id v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  double v179;
  NSString v180;
  double v181;
  unint64_t v182;
  NSString v183;
  double v184;
  unint64_t v185;
  NSString v186;
  double v187;
  unint64_t v188;
  NSString v189;
  double v190;
  unint64_t v191;
  NSString v192;
  double v193;
  unint64_t v194;
  NSString v195;
  double v196;
  unint64_t v197;
  id v198;
  id v199;
  char *v200;
  uint64_t v201;
  void (*v202)(char *, char *, uint64_t);
  uint64_t v203;
  char *v204;
  uint64_t v205;
  double v206;
  uint64_t v207;
  NSString v208;
  double v209;
  uint64_t v210;
  NSString v211;
  double v212;
  uint64_t v213;
  NSString v214;
  double v215;
  uint64_t v216;
  NSString v217;
  double v218;
  uint64_t v219;
  NSString v220;
  double v221;
  uint64_t v222;
  NSString v223;
  id v224;
  id v225;
  id v226;
  unint64_t v227;
  NSString v228;
  id v229;
  id v230;
  id v231;
  id v232;
  unint64_t v233;
  NSString v234;
  double v235;
  id v236;
  id v237;
  id v238;
  char v239;
  Class v240;
  _QWORD *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  int64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  int64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  void *v259;
  id v260;
  void *v261;
  char **v262;
  uint8_t *v263;
  uint64_t v264;
  id v265;
  void *v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void *v272;
  id v273;
  void *v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  unint64_t v296;
  unint64_t v297;
  const char *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  void *rawValue;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char *v306;
  char *v307;
  uint64_t v308;
  char *v309;
  uint64_t v310;
  char *v311;
  __int128 v312;
  NSString *v313;
  NSString *v314;
  NSString *v315;
  NSString *v316;
  NSString *v317;
  NSString *v318;
  NSString *v319;
  NSString *v320;
  void *v321;
  uint64_t v322;
  unint64_t v323;
  id v324;
  id v325;
  id v326;
  id v327;
  uint64_t v328;
  Swift::OpaquePointer v329;
  uint64_t v330;
  id v331;
  void *v332;
  __int128 v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  unint64_t v337;
  char **v338;
  _QWORD v339[4];
  id v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  void *v344;

  isa = (uint64_t)with.value.super.super.isa;
  v3._rawValue = (void *)type metadata accessor for Logger(0);
  v301 = *((_QWORD *)v3._rawValue - 1);
  __chkstk_darwin(v3._rawValue);
  v5 = (uint64_t)&v300 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (uint64_t)&v300 - v7;
  v9 = sub_10001A630(&qword_100843640);
  v10 = __chkstk_darwin(v9);
  v307 = (char *)&v300 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v310 = type metadata accessor for PersonNameComponents(0, v10);
  v308 = *(_QWORD *)(v310 - 8);
  __chkstk_darwin(v310);
  v306 = (char *)&v300 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v311 = (char *)&v300 - v14;
  v15 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v15);
  v309 = (char *)&v300 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100837110 == -1)
    goto LABEL_2;
  while (1)
  {
    swift_once(&qword_100837110, sub_1002B763C);
LABEL_2:
    v17 = sub_10001AAA8((uint64_t)v3._rawValue, (uint64_t)qword_100843620);
    v18 = (id)isa;
    v19 = (id)v1;
    v20 = v18;
    v21 = (uint64_t)v19;
    v305 = v17;
    i = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter(i);
    v24 = os_log_type_enabled((os_log_t)i, v23);
    v326 = (id)v21;
    v304 = v5;
    v303 = v8;
    rawValue = v3._rawValue;
    *(_QWORD *)&v333 = isa;
    if (v24)
    {
      v5 = swift_slowAlloc(22, -1);
      v3._rawValue = (void *)swift_slowAlloc(8, -1);
      v8 = swift_slowAlloc(32, -1);
      v340 = (id)v8;
      *(_DWORD *)v5 = 138412546;
      v332 = v20;
      v338 = (char **)v21;
      v25 = v326;
      v21 = (uint64_t)v326;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v338, v339);
      *(_QWORD *)v3._rawValue = v21;

      *(_WORD *)(v5 + 12) = 2080;
      v338 = (char **)isa;
      v26 = sub_10001A630(&qword_100843648);
      v27 = Optional.descriptionOrNil.getter(v26);
      v338 = (char **)sub_10001A820(v27, v28, (uint64_t *)&v340);
      v20 = v332;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v338, v339);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)i, v23, "Update list's sharing information and sharees with new CKShare {list: %@, share: %s}", (uint8_t *)v5, 0x16u);
      v29 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v3._rawValue, 1, v29);
      swift_slowDealloc(v3._rawValue, -1, -1);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v5, -1, -1);

    }
    else
    {

    }
    v30 = objc_msgSend((id)v21, "managedObjectContext");
    v327 = v30;
    if (!v30)
    {
      v36 = (char **)(id)v21;
      v37 = v20;
      v38 = v36;
      v39 = v37;
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v40, v41))
      {
        v42 = swift_slowAlloc(22, -1);
        v43 = (char ***)swift_slowAlloc(8, -1);
        v332 = (void *)swift_slowAlloc(32, -1);
        v340 = v332;
        *(_DWORD *)v42 = 138412546;
        v338 = v38;
        v44 = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v338, v339);
        *v43 = v38;

        *(_WORD *)(v42 + 12) = 2080;
        v338 = (char **)v333;
        v45 = sub_10001A630(&qword_100843648);
        v46 = Optional.descriptionOrNil.getter(v45);
        v338 = (char **)sub_10001A820(v46, v47, (uint64_t *)&v340);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v338, v339);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Failed to update REMCDList with CKShare: managed object context is nil {list: %@, CKShare: %s}", (uint8_t *)v42, 0x16u);
        v48 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v43, 1, v48);
        swift_slowDealloc(v43, -1, -1);
        v49 = v332;
        swift_arrayDestroy(v332, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v49, -1, -1);
        swift_slowDealloc(v42, -1, -1);

      }
      else
      {

      }
      return;
    }
    if (!(_QWORD)v333)
    {
      v50 = Logger.logObject.getter(v30);
      v51 = static os_log_type_t.default.getter(v50);
      if (os_log_type_enabled(v50, v51))
      {
        v52 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v52 = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "Share stopped, clear sharing information and sharees", v52, 2u);
        swift_slowDealloc(v52, -1, -1);
      }

      objc_msgSend((id)v21, "setSharingStatus:", 0);
      objc_msgSend((id)v21, "setSharedOwner:", 0);
      v53 = objc_msgSend((id)v21, "sharees");
      if (v53)
      {
        v54 = v53;
        i = sub_1000151B0(0, (unint64_t *)&qword_100839928, off_1007D6718);
        v55 = sub_1000E51DC((unint64_t *)&unk_100843650, (unint64_t *)&qword_100839928, off_1007D6718, (uint64_t)&protocol conformance descriptor for NSObject);
        v56 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v54, i, v55);

        swift_bridgeObjectRetain(v56);
        v58 = Logger.logObject.getter(v57);
        v59 = static os_log_type_t.default.getter(v58);
        if (os_log_type_enabled(v58, v59))
        {
          v60 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v60 = 134217984;
          if ((v56 & 0xC000000000000001) != 0)
          {
            if (v56 < 0)
              v61 = v56;
            else
              v61 = v56 & 0xFFFFFFFFFFFFFF8;
            v62 = (void *)__CocoaSet.count.getter(v61);
          }
          else
          {
            v62 = *(void **)(v56 + 16);
          }
          v340 = v62;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v340, &v341);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v58, v59, "Removing sharees {count: %ld}", v60, 0xCu);
          swift_slowDealloc(v60, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease();
        }
        if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
        {
LABEL_262:
          if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
            sub_1002E80C0((uint64_t)_swiftEmptyArrayStorage, (uint64_t *)&unk_100844750, (unint64_t *)&qword_100839928, off_1007D6718);
        }
        v240 = Set._bridgeToObjectiveC()().super.isa;
        objc_msgSend((id)v21, "setSharees:", v240, swift_bridgeObjectRelease().n128_f64[0]);

        v332 = (void *)i;
        if ((v56 & 0xC000000000000001) != 0)
        {
          if (v56 < 0)
            v242 = v56;
          else
            v242 = v56 & 0xFFFFFFFFFFFFFF8;
          v243 = __CocoaSet.makeIterator()(v242);
          v241 = Set.Iterator.init(_cocoa:)(&v340, v243, i, v55);
          v56 = (uint64_t)v340;
          *(_QWORD *)&v333 = v341;
          v244 = v342;
          v5 = v343;
          v245 = (unint64_t)v344;
        }
        else
        {
          v5 = 0;
          v246 = -1 << *(_BYTE *)(v56 + 32);
          v247 = *(_QWORD *)(v56 + 56);
          *(_QWORD *)&v333 = v56 + 56;
          v244 = ~v246;
          v248 = -v246;
          if (v248 < 64)
            v249 = ~(-1 << v248);
          else
            v249 = -1;
          v245 = v249 & v247;
        }
        v1 = v56 & 0x7FFFFFFFFFFFFFFFLL;
        v331 = (id)v244;
        v250 = (unint64_t)(v244 + 64) >> 6;
        for (i = (unint64_t)&selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
              (v56 & 0x8000000000000000) == 0;
              v245 = v8)
        {
          if (v245)
          {
            v8 = (v245 - 1) & v245;
            v253 = __clz(__rbit64(v245)) | (v5 << 6);
            v21 = v5;
          }
          else
          {
            v254 = v5 + 1;
            if (__OFADD__(v5, 1))
            {
              __break(1u);
              goto LABEL_220;
            }
            if (v254 >= v250)
              goto LABEL_200;
            v255 = *(_QWORD *)(v333 + 8 * v254);
            v21 = v5 + 1;
            if (!v255)
            {
              v21 = v5 + 2;
              if (v5 + 2 >= v250)
                goto LABEL_200;
              v255 = *(_QWORD *)(v333 + 8 * v21);
              if (!v255)
              {
                v21 = v5 + 3;
                if (v5 + 3 >= v250)
                  goto LABEL_200;
                v255 = *(_QWORD *)(v333 + 8 * v21);
                if (!v255)
                {
                  v21 = v5 + 4;
                  if (v5 + 4 >= v250)
                    goto LABEL_200;
                  v255 = *(_QWORD *)(v333 + 8 * v21);
                  if (!v255)
                  {
                    v256 = v5 + 5;
                    while (v250 != v256)
                    {
                      v255 = *(_QWORD *)(v333 + 8 * v256++);
                      if (v255)
                      {
                        v21 = v256 - 1;
                        goto LABEL_196;
                      }
                    }
                    goto LABEL_200;
                  }
                }
              }
            }
LABEL_196:
            v8 = (v255 - 1) & v255;
            v253 = __clz(__rbit64(v255)) + (v21 << 6);
          }
          v3._rawValue = *(id *)(*(_QWORD *)(v56 + 48) + 8 * v253);
          if (!v3._rawValue)
            goto LABEL_200;
LABEL_198:
          objc_msgSend(v327, "deleteObject:", v3._rawValue);

          v5 = v21;
        }
        v251 = __CocoaSet.Iterator.next()(v241);
        if (v251)
        {
          v252 = v251;
          v337 = v251;
          swift_unknownObjectRetain(v251);
          swift_dynamicCast(&v338, &v337, (char *)&type metadata for Swift.AnyObject + 8, v332, 7);
          v3._rawValue = v338;
          swift_unknownObjectRelease(v252);
          v21 = v5;
          v8 = v245;
          if (v3._rawValue)
            goto LABEL_198;
        }
LABEL_200:
        sub_1000C6560(v56);
      }

      return;
    }
    v31 = v20;
    v32 = objc_msgSend(v31, "owner");
    v325 = v31;
    v33 = objc_msgSend(v31, "currentUserParticipant");
    v34 = v33;
    if (!v32)
    {
      if (!v33)
      {
LABEL_24:
        v63 = 1;
LABEL_36:
        objc_msgSend((id)v21, "setSharingStatus:", v63);
        goto LABEL_37;
      }
      goto LABEL_26;
    }
    if (!v33)
    {
      v34 = v32;
LABEL_26:

      goto LABEL_27;
    }
    sub_1000151B0(0, (unint64_t *)&qword_100842DA0, CKShareParticipant_ptr);
    i = (unint64_t)v32;
    v35 = static NSObject.== infix(_:_:)(i);

    if ((v35 & 1) != 0)
      goto LABEL_24;
LABEL_27:
    v64 = objc_msgSend(v325, "currentUserParticipant");
    if (!v64)
    {
      v63 = 0;
      goto LABEL_36;
    }
    v65 = v64;
    v66 = objc_msgSend(v64, "acceptanceStatus");

    if (v66 == (id)1)
      v63 = 3;
    else
      v63 = 0;
    if (v66 != (id)2)
      goto LABEL_36;
    objc_msgSend((id)v21, "setSharingStatus:", 2);
    v67 = (char **)(id)v21;
    v68 = Logger.logObject.getter(v67);
    v69 = static os_log_type_t.default.getter(v68);
    if (os_log_type_enabled(v68, v69))
    {
      v70 = (uint8_t *)swift_slowAlloc(12, -1);
      v71 = swift_slowAlloc(32, -1);
      v338 = (char **)v71;
      *(_DWORD *)v70 = 136446210;
      v72 = objc_msgSend(v67, "ckIdentifier");
      if (v72)
      {
        v73 = v72;
        v74 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
        v76 = v75;

      }
      else
      {
        v74 = 0;
        v76 = 0;
      }
      v340 = v74;
      v341 = v76;
      v257 = sub_10001A630((uint64_t *)&unk_10083A370);
      v258 = Optional.descriptionOrNil.getter(v257);
      v3._rawValue = v259;
      swift_bridgeObjectRelease();
      v340 = (id)sub_10001A820(v258, (unint64_t)v3._rawValue, (uint64_t *)&v338);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v340, &v341);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "REMCDList.update(with share: CKShare?) will insert pending post-save action '.notify_SharedToMeListPinnedStateDidBecomeStale' {ckIdentifier: %{public}s}", v70, 0xCu);
      swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v70, -1, -1);

      v21 = (uint64_t)v326;
    }
    else
    {

    }
    v8 = (uint64_t)&selRef_saveServerShare_accountID_completionHandler_;
    v260 = objc_msgSend(v67, "storeControllerManagedObjectContext");
    if (v260)
    {
      v261 = v260;
      objc_msgSend(v260, "setPendingPostSaveActions:", (unint64_t)objc_msgSend(v260, "pendingPostSaveActions") | 2);

    }
    v262 = v67;
    i = Logger.logObject.getter(v262);
    v5 = static os_log_type_t.default.getter(i);
    if (os_log_type_enabled((os_log_t)i, (os_log_type_t)v5))
    {
      v263 = (uint8_t *)swift_slowAlloc(12, -1);
      v264 = swift_slowAlloc(32, -1);
      v338 = (char **)v264;
      *(_DWORD *)v263 = 136446210;
      v265 = objc_msgSend(v262, "ckIdentifier");
      if (v265)
      {
        v266 = v265;
        v267 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v265);
        v269 = v268;

      }
      else
      {
        v267 = 0;
        v269 = 0;
      }
      v340 = v267;
      v341 = v269;
      v270 = sub_10001A630((uint64_t *)&unk_10083A370);
      v271 = Optional.descriptionOrNil.getter(v270);
      v3._rawValue = v272;
      swift_bridgeObjectRelease();
      v340 = (id)sub_10001A820(v271, (unint64_t)v3._rawValue, (uint64_t *)&v338);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v340, &v341);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)i, (os_log_type_t)v5, "REMCDList.update(with share: CKShare?) will insert pending post-save action '.notify_SharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserDidBecomeStale' {ckIdentifier: %{public}s}", v263, 0xCu);
      swift_arrayDestroy(v264, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v264, -1, -1);
      swift_slowDealloc(v263, -1, -1);

      v21 = (uint64_t)v326;
      v8 = (uint64_t)&selRef_saveServerShare_accountID_completionHandler_;
    }
    else
    {

    }
    v273 = objc_msgSend(v262, "storeControllerManagedObjectContext");
    if (v273)
    {
      v274 = v273;
      objc_msgSend(v273, "setPendingPostSaveActions:", (unint64_t)objc_msgSend(v273, "pendingPostSaveActions") | 4);

    }
LABEL_37:
    v337 = sub_1002B14F0((uint64_t)_swiftEmptyArrayStorage, &qword_100844748);
    v336 = (uint64_t)&_swiftEmptySetSingleton;
    v77 = objc_msgSend((id)v21, "sharees");
    if (!v77)
      break;
    v78 = v77;
    v79 = sub_1000151B0(0, (unint64_t *)&qword_100839928, off_1007D6718);
    v1 = sub_1000E51DC((unint64_t *)&unk_100843650, (unint64_t *)&qword_100839928, off_1007D6718, (uint64_t)&protocol conformance descriptor for NSObject);
    isa = static Set._unconditionallyBridgeFromObjectiveC(_:)(v78, v79, v1);

    v330 = v79;
    if ((isa & 0xC000000000000001) != 0)
    {
      if (isa < 0)
        v81 = isa;
      else
        v81 = isa & 0xFFFFFFFFFFFFFF8;
      v82 = __CocoaSet.makeIterator()(v81);
      v80 = Set.Iterator.init(_cocoa:)(&v338, v82, v79, v1);
      isa = (uint64_t)v338;
      *(_QWORD *)&v333 = v339[0];
      v83 = v339[1];
      v84 = v339[2];
      i = v339[3];
    }
    else
    {
      v84 = 0;
      v85 = -1 << *(_BYTE *)(isa + 32);
      v86 = *(_QWORD *)(isa + 56);
      *(_QWORD *)&v333 = isa + 56;
      v87 = ~v85;
      v88 = -v85;
      if (v88 < 64)
        v89 = ~(-1 << v88);
      else
        v89 = -1;
      i = v89 & v86;
      v83 = v87;
    }
    v331 = (id)(isa & 0x7FFFFFFFFFFFFFFFLL);
    v328 = v83;
    v332 = (void *)((unint64_t)(v83 + 64) >> 6);
    v329._rawValue = (char *)&type metadata for Swift.AnyObject + 8;
    while (1)
    {
      if (isa < 0)
      {
        v91 = __CocoaSet.Iterator.next()(v80);
        if (!v91)
          goto LABEL_86;
        v92 = v91;
        v335 = v91;
        swift_unknownObjectRetain(v91);
        swift_dynamicCast(&v340, &v335, v329._rawValue, v330, 7);
        v3._rawValue = v340;
        swift_unknownObjectRelease(v92);
        v8 = v84;
        v5 = i;
        if (!v3._rawValue)
          goto LABEL_86;
      }
      else
      {
        if (i)
        {
          v5 = (i - 1) & i;
          v90 = __clz(__rbit64(i)) | (v84 << 6);
          v8 = v84;
        }
        else
        {
          v93 = v84 + 1;
          if (__OFADD__(v84, 1))
            goto LABEL_217;
          if (v93 >= (uint64_t)v332)
            goto LABEL_85;
          v94 = *(_QWORD *)(v333 + 8 * v93);
          v8 = v84 + 1;
          if (!v94)
          {
            v8 = v84 + 2;
            if (v84 + 2 >= (uint64_t)v332)
              goto LABEL_85;
            v94 = *(_QWORD *)(v333 + 8 * v8);
            if (!v94)
            {
              v8 = v84 + 3;
              if (v84 + 3 >= (uint64_t)v332)
                goto LABEL_85;
              v94 = *(_QWORD *)(v333 + 8 * v8);
              if (!v94)
              {
                v8 = v84 + 4;
                if (v84 + 4 >= (uint64_t)v332)
                  goto LABEL_85;
                v94 = *(_QWORD *)(v333 + 8 * v8);
                if (!v94)
                {
                  v95 = (void *)(v84 + 5);
                  while (v332 != v95)
                  {
                    v94 = *(_QWORD *)(v333 + 8 * (_QWORD)v95);
                    v95 = (char *)v95 + 1;
                    if (v94)
                    {
                      v8 = (uint64_t)v95 - 1;
                      goto LABEL_69;
                    }
                  }
LABEL_85:
                  i = 0;
LABEL_86:
                  sub_1000C6560(isa);
                  v21 = (uint64_t)v326;
                  goto LABEL_87;
                }
              }
            }
          }
LABEL_69:
          v5 = (v94 - 1) & v94;
          v90 = __clz(__rbit64(v94)) + (v8 << 6);
        }
        v3._rawValue = *(id *)(*(_QWORD *)(isa + 48) + 8 * v90);
        if (!v3._rawValue)
          goto LABEL_86;
      }
      v96 = objc_msgSend(v3._rawValue, "ckIdentifier");
      if (!v96)
      {
        v1 = (uint64_t)&v336;
        sub_1002DDAAC((Swift::Int *)&v340, v3._rawValue, (unint64_t *)&qword_100839928, off_1007D6718, (uint64_t *)&unk_100844750);

        goto LABEL_49;
      }
      v97 = v96;
      v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
      v100 = v99;

      v1 = v337;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v337);
      v340 = (id)v1;
      v337 = 0x8000000000000000;
      v103 = sub_10001A6DC(v98, v100);
      v104 = *(_QWORD *)(v1 + 16);
      v105 = (v102 & 1) == 0;
      v106 = v104 + v105;
      if (__OFADD__(v104, v105))
        break;
      v107 = v102;
      if (*(_QWORD *)(v1 + 24) >= v106)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v1 = (uint64_t)v340;
          if ((v102 & 1) == 0)
            goto LABEL_76;
        }
        else
        {
          sub_1002DA768(&qword_100844748);
          v1 = (uint64_t)v340;
          if ((v107 & 1) == 0)
            goto LABEL_76;
        }
      }
      else
      {
        sub_1002D48D4(v106, isUniquelyReferenced_nonNull_native, &qword_100844748);
        v108 = sub_10001A6DC(v98, v100);
        if ((v107 & 1) != (v109 & 1))
          goto LABEL_267;
        v103 = v108;
        v1 = (uint64_t)v340;
        if ((v107 & 1) == 0)
        {
LABEL_76:
          *(_QWORD *)(v1 + 8 * (v103 >> 6) + 64) |= 1 << v103;
          v110 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v103);
          *v110 = v98;
          v110[1] = v100;
          *(Swift::OpaquePointer *)(*(_QWORD *)(v1 + 56) + 8 * v103) = v3;
          v111 = *(_QWORD *)(v1 + 16);
          v112 = __OFADD__(v111, 1);
          v113 = v111 + 1;
          if (v112)
            goto LABEL_216;
          *(_QWORD *)(v1 + 16) = v113;
          swift_bridgeObjectRetain(v100);
          goto LABEL_81;
        }
      }
      v114 = *(_QWORD *)(v1 + 56);
      v115 = 8 * v103;

      *(Swift::OpaquePointer *)(v114 + v115) = v3;
LABEL_81:
      v337 = v1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_49:
      v84 = v8;
      i = v5;
    }
LABEL_215:
    __break(1u);
LABEL_216:
    __break(1u);
LABEL_217:
    __break(1u);
  }
LABEL_87:
  v324 = objc_msgSend(objc_allocWithZone((Class)CNContactStore), "init");
  v116 = objc_msgSend(v325, "participants");
  v117 = sub_1000151B0(0, (unint64_t *)&qword_100842DA0, CKShareParticipant_ptr);
  v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v116, v117);

  if (!((unint64_t)v1 >> 62))
  {
    v118 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v118)
      goto LABEL_89;
LABEL_224:
    swift_bridgeObjectRelease();
    v276 = v337;
    swift_bridgeObjectRetain(v337);
    sub_1002B6D14(v276);
    v56 = v336;
    if ((v336 & 0xC000000000000001) != 0)
    {
      if (v336 < 0)
        v278 = v336;
      else
        v278 = v336 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v336);
      v279 = __CocoaSet.count.getter(v278);
      swift_bridgeObjectRelease();
      if (v279)
      {
        v280 = __CocoaSet.makeIterator()(v278);
        i = sub_1000151B0(0, (unint64_t *)&qword_100839928, off_1007D6718);
        v281 = sub_1000E51DC((unint64_t *)&unk_100843650, (unint64_t *)&qword_100839928, off_1007D6718, (uint64_t)&protocol conformance descriptor for NSObject);
        v277 = Set.Iterator.init(_cocoa:)(&v340, v280, i, v281);
        v56 = (uint64_t)v340;
        v282 = v341;
        v283 = v342;
        v55 = v343;
        v3._rawValue = v344;
        goto LABEL_235;
      }
LABEL_258:

      swift_bridgeObjectRelease();
    }
    else
    {
      if (!*(_QWORD *)(v336 + 16))
        goto LABEL_258;
      v55 = 0;
      v284 = -1 << *(_BYTE *)(v336 + 32);
      v282 = v336 + 56;
      v283 = ~v284;
      v285 = -v284;
      if (v285 < 64)
        v286 = ~(-1 << v285);
      else
        v286 = -1;
      v3._rawValue = (void *)(v286 & *(_QWORD *)(v336 + 56));
LABEL_235:
      v332 = (void *)v283;
      v8 = (unint64_t)(v283 + 64) >> 6;
      v21 = (uint64_t)&selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
      *(_QWORD *)&v333 = (char *)&type metadata for Swift.AnyObject + 8;
      if ((v56 & 0x8000000000000000) == 0)
        goto LABEL_239;
      while (1)
      {
        v287 = __CocoaSet.Iterator.next()(v277);
        if (!v287)
          break;
        v288 = v287;
        v334 = v287;
        v289 = sub_1000151B0(0, (unint64_t *)&qword_100839928, off_1007D6718);
        swift_unknownObjectRetain(v288);
        swift_dynamicCast(&v335, &v334, v333, v289, 7);
        i = v335;
        swift_unknownObjectRelease(v288);
        v290 = v55;
        v291 = (uint64_t)v3._rawValue;
        if (!i)
          break;
        while (1)
        {
          objc_msgSend(v327, "deleteObject:", i);

          v55 = v290;
          v3._rawValue = (void *)v291;
          if (v56 < 0)
            break;
LABEL_239:
          if (v3._rawValue)
          {
            v291 = ((unint64_t)v3._rawValue - 1) & (unint64_t)v3._rawValue;
            v292 = __clz(__rbit64((unint64_t)v3._rawValue)) | (v55 << 6);
            v290 = v55;
          }
          else
          {
            v293 = v55 + 1;
            if (__OFADD__(v55, 1))
            {
              __break(1u);
              goto LABEL_262;
            }
            if (v293 >= v8)
              goto LABEL_259;
            v294 = *(_QWORD *)(v282 + 8 * v293);
            v290 = v55 + 1;
            if (!v294)
            {
              v290 = v55 + 2;
              if (v55 + 2 >= v8)
                goto LABEL_259;
              v294 = *(_QWORD *)(v282 + 8 * v290);
              if (!v294)
              {
                v290 = v55 + 3;
                if (v55 + 3 >= v8)
                  goto LABEL_259;
                v294 = *(_QWORD *)(v282 + 8 * v290);
                if (!v294)
                {
                  v290 = v55 + 4;
                  if (v55 + 4 >= v8)
                    goto LABEL_259;
                  v294 = *(_QWORD *)(v282 + 8 * v290);
                  if (!v294)
                  {
                    v295 = v55 + 5;
                    while (v8 != v295)
                    {
                      v294 = *(_QWORD *)(v282 + 8 * v295++);
                      if (v294)
                      {
                        v290 = v295 - 1;
                        goto LABEL_254;
                      }
                    }
                    goto LABEL_259;
                  }
                }
              }
            }
LABEL_254:
            v291 = (v294 - 1) & v294;
            v292 = __clz(__rbit64(v294)) + (v290 << 6);
          }
          i = (unint64_t)*(id *)(*(_QWORD *)(v56 + 48) + 8 * v292);
          if (!i)
            goto LABEL_259;
        }
      }
LABEL_259:
      sub_1000C6560(v56);

    }
    swift_bridgeObjectRelease();
    return;
  }
LABEL_220:
  if (v1 < 0)
    v275 = v1;
  else
    v275 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v1);
  v118 = _CocoaArrayWrapper.endIndex.getter(v275);
  swift_bridgeObjectRelease();
  if (!v118)
    goto LABEL_224;
LABEL_89:
  v323 = v1 & 0xC000000000000001;
  v119 = 4;
  v320 = CNContactGivenNameKey;
  v319 = CNContactMiddleNameKey;
  v318 = CNContactFamilyNameKey;
  v317 = CNContactNamePrefixKey;
  v316 = CNContactNameSuffixKey;
  v315 = CNContactNicknameKey;
  v314 = CNContactPhoneNumbersKey;
  v313 = CNContactEmailAddressesKey;
  v312 = xmmword_1006B3750;
  v333 = xmmword_1006A3C00;
  v322 = v1;
  v321 = (void *)v118;
  while (2)
  {
    v120 = v119 - 4;
    v328 = v119;
    if (v323)
      v121 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v119 - 4, v1);
    else
      v121 = *(id *)(v1 + 8 * v119);
    isa = (uint64_t)v121;
    if (__OFADD__(v120, 1))
    {
      __break(1u);
      goto LABEL_215;
    }
    v332 = (void *)(v120 + 1);
    v123 = CKShareParticipant.participantID.getter(v122);
    v125 = v124;
    v126 = sub_1002B1AEC(v123, v124, v337);
    v331 = (id)isa;
    if (v126)
    {
      v127 = v126;
      v128 = (id)sub_1002CB6E8(v123, v125, (void (*)(unint64_t, uint64_t, __n128))sub_100289D70, &qword_100844748);
      swift_bridgeObjectRelease();
      v330 = (uint64_t)v127;

    }
    else
    {
      swift_bridgeObjectRelease();
      v129 = sub_1000151B0(0, (unint64_t *)&qword_100839928, off_1007D6718);
      v130 = objc_msgSend((id)swift_getObjCClassFromMetadata(v129), "entity");
      v131 = objc_allocWithZone((Class)REMCDSharee);
      v132 = objc_msgSend(v131, "initWithEntity:insertIntoManagedObjectContext:", v130, v327);

      v133 = v132;
      CKShareParticipant.participantID.getter(v134);
      v135 = String._bridgeToObjectiveC()();
      objc_msgSend(v133, "setCkIdentifier:", v135, swift_bridgeObjectRelease().n128_f64[0]);

      v136 = v133;
      v138 = CKShareParticipant.participantID.getter(v137);
      v139 = v309;
      UUID.init(uuidString:)(v138, v140);
      swift_bridgeObjectRelease();
      v141 = type metadata accessor for UUID(0);
      v142 = *(_QWORD *)(v141 - 8);
      v143 = 0;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v142 + 48))(v139, 1, v141) != 1)
      {
        v144 = v309;
        v143 = UUID._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v142 + 8))(v144, v141);
      }
      objc_msgSend(v136, "setIdentifier:", v143);

      v128 = v136;
      v145 = objc_msgSend((id)v21, "account");
      objc_msgSend(v128, "setAccount:", v145);

      objc_msgSend((id)v21, "addShareesObject:", v128);
      v330 = (uint64_t)v128;
    }

    v146 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v147 = swift_allocObject(v146, 96, 7);
    *(_OWORD *)(v147 + 16) = v312;
    v148 = v320;
    v149 = v319;
    *(_QWORD *)(v147 + 32) = v320;
    *(_QWORD *)(v147 + 40) = v149;
    v150 = v318;
    v151 = v317;
    *(_QWORD *)(v147 + 48) = v318;
    *(_QWORD *)(v147 + 56) = v151;
    v152 = v316;
    v153 = v315;
    *(_QWORD *)(v147 + 64) = v316;
    *(_QWORD *)(v147 + 72) = v153;
    v154 = v314;
    v155 = v313;
    *(_QWORD *)(v147 + 80) = v314;
    *(_QWORD *)(v147 + 88) = v155;
    v340 = (id)v147;
    specialized Array._endMutation()(v147);
    v329._rawValue = v340;
    v156 = sub_10001A630(&qword_10083F400);
    i = swift_allocObject(v156, 48, 7);
    *(_OWORD *)(i + 16) = v333;
    v157 = v148;
    v158 = v149;
    v159 = v150;
    v160 = v151;
    v161 = v152;
    v162 = v153;
    v163 = v154;
    v164 = v155;
    v5 = (uint64_t)&selRef_subscriptionOwnerUserRecordID;
    v165 = v331;
    v166 = objc_msgSend(v331, "userIdentity");
    v167 = objc_msgSend(v166, "lookupInfo");

    if (v167)
    {
      v168 = objc_msgSend(v167, "emailAddress");

      if (v168)
      {
        v169 = static String._unconditionallyBridgeFromObjectiveC(_:)(v168);
        v171 = v170;

      }
      else
      {
        v169 = 0;
        v171 = 0;
      }
      v8 = v330;
      *(_QWORD *)(i + 32) = v169;
      *(_QWORD *)(i + 40) = v171;
    }
    else
    {
      *(_QWORD *)(i + 32) = 0;
      *(_QWORD *)(i + 40) = 0;
      v8 = v330;
    }
    v3._rawValue = (void *)swift_allocObject(v156, 48, 7);
    *((_OWORD *)v3._rawValue + 1) = v333;
    v172 = objc_msgSend(v165, "userIdentity");
    v173 = objc_msgSend(v172, "lookupInfo");

    if (v173)
    {
      v174 = objc_msgSend(v173, "phoneNumber");

      if (v174)
      {
        v175 = static String._unconditionallyBridgeFromObjectiveC(_:)(v174);
        v177 = v176;

      }
      else
      {
        v175 = 0;
        v177 = 0;
      }
      *((_QWORD *)v3._rawValue + 4) = v175;
      *((_QWORD *)v3._rawValue + 5) = v177;
    }
    else
    {
      *((_QWORD *)v3._rawValue + 4) = 0;
      *((_QWORD *)v3._rawValue + 5) = 0;
    }
    v178 = (void *)CNContactStore.contactFrom(emailAddresses:phoneNumbers:keysToFetch:)((Swift::OpaquePointer)i, v3, v329);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v179 = swift_bridgeObjectRelease().n128_u64[0];
    if (!v178)
    {
      v198 = objc_msgSend(v165, "userIdentity", v179);
      v199 = objc_msgSend(v198, "nameComponents");

      v21 = (uint64_t)v326;
      if (v199)
      {
        v200 = v306;
        static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)(v199);

        v201 = v308;
        v202 = *(void (**)(char *, char *, uint64_t))(v308 + 32);
        v203 = (uint64_t)v307;
        v204 = v200;
        i = v310;
        v202(v307, v204, v310);
        (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v201 + 56))(v203, 0, 1, i);
        if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v201 + 48))(v203, 1, i) != 1)
        {
          i = (unint64_t)v311;
          v205 = ((uint64_t (*)(char *, uint64_t, uint64_t))v202)(v311, v203, v310);
          PersonNameComponents.givenName.getter(v205);
          if (v207)
          {
            v208 = String._bridgeToObjectiveC()();
            *(_QWORD *)&v206 = swift_bridgeObjectRelease().n128_u64[0];
          }
          else
          {
            v208 = 0;
          }
          objc_msgSend((id)v8, "setFirstName:", v208, v206);

          PersonNameComponents.middleName.getter();
          if (v210)
          {
            v211 = String._bridgeToObjectiveC()();
            *(_QWORD *)&v209 = swift_bridgeObjectRelease().n128_u64[0];
          }
          else
          {
            v211 = 0;
          }
          objc_msgSend((id)v8, "setMiddleName:", v211, v209);

          PersonNameComponents.familyName.getter();
          if (v213)
          {
            v214 = String._bridgeToObjectiveC()();
            *(_QWORD *)&v212 = swift_bridgeObjectRelease().n128_u64[0];
          }
          else
          {
            v214 = 0;
          }
          objc_msgSend((id)v8, "setLastName:", v214, v212);

          PersonNameComponents.namePrefix.getter();
          if (v216)
          {
            v217 = String._bridgeToObjectiveC()();
            *(_QWORD *)&v215 = swift_bridgeObjectRelease().n128_u64[0];
          }
          else
          {
            v217 = 0;
          }
          objc_msgSend((id)v8, "setNamePrefix:", v217, v215);

          PersonNameComponents.nameSuffix.getter();
          if (v219)
          {
            v220 = String._bridgeToObjectiveC()();
            *(_QWORD *)&v218 = swift_bridgeObjectRelease().n128_u64[0];
          }
          else
          {
            v220 = 0;
          }
          objc_msgSend((id)v8, "setNameSuffix:", v220, v218);

          PersonNameComponents.nickname.getter();
          if (v222)
          {
            v223 = String._bridgeToObjectiveC()();
            *(_QWORD *)&v221 = swift_bridgeObjectRelease().n128_u64[0];
          }
          else
          {
            v223 = 0;
          }
          objc_msgSend((id)v8, "setNickname:", v223, v221);

          (*(void (**)(char *, uint64_t))(v308 + 8))(v311, v310);
          goto LABEL_148;
        }
      }
      else
      {
        v203 = (uint64_t)v307;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v308 + 56))(v307, 1, 1, v310);
      }
      sub_10000882C(v203, &qword_100843640);
      goto LABEL_148;
    }
    v180 = objc_msgSend(v178, "givenName", v179);
    v21 = (uint64_t)v326;
    if (!v180)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      i = v182;
      v180 = String._bridgeToObjectiveC()();
      *(_QWORD *)&v181 = swift_bridgeObjectRelease().n128_u64[0];
    }
    objc_msgSend((id)v8, "setFirstName:", v180, v181);

    v183 = objc_msgSend(v178, "middleName");
    if (!v183)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      i = v185;
      v183 = String._bridgeToObjectiveC()();
      *(_QWORD *)&v184 = swift_bridgeObjectRelease().n128_u64[0];
    }
    objc_msgSend((id)v8, "setMiddleName:", v183, v184);

    v186 = objc_msgSend(v178, "familyName");
    if (!v186)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      i = v188;
      v186 = String._bridgeToObjectiveC()();
      *(_QWORD *)&v187 = swift_bridgeObjectRelease().n128_u64[0];
    }
    objc_msgSend((id)v8, "setLastName:", v186, v187);

    v189 = objc_msgSend(v178, "namePrefix");
    if (!v189)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      i = v191;
      v189 = String._bridgeToObjectiveC()();
      *(_QWORD *)&v190 = swift_bridgeObjectRelease().n128_u64[0];
    }
    objc_msgSend((id)v8, "setNamePrefix:", v189, v190);

    v192 = objc_msgSend(v178, "nameSuffix");
    if (!v192)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      i = v194;
      v192 = String._bridgeToObjectiveC()();
      *(_QWORD *)&v193 = swift_bridgeObjectRelease().n128_u64[0];
    }
    objc_msgSend((id)v8, "setNameSuffix:", v192, v193);

    v195 = objc_msgSend(v178, "nickname");
    if (!v195)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      i = v197;
      v195 = String._bridgeToObjectiveC()();
      *(_QWORD *)&v196 = swift_bridgeObjectRelease().n128_u64[0];
    }
    objc_msgSend((id)v8, "setNickname:", v195, v196);

LABEL_148:
    v224 = objc_msgSend(v165, "userIdentity");
    v225 = objc_msgSend(v224, "lookupInfo");

    if (v225)
    {
      v226 = objc_msgSend(v225, "emailAddress");

      if (v226)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(v226);
        i = v227;

        v228 = String._bridgeToObjectiveC()();
        v229 = objc_msgSend(v228, "rem_addingMailto", swift_bridgeObjectRelease().n128_f64[0]);
        goto LABEL_154;
      }
    }
    v230 = objc_msgSend(v165, "userIdentity");
    v231 = objc_msgSend(v230, "lookupInfo");

    if (v231
      && (v232 = objc_msgSend(v231, "phoneNumber"), v231, v232))
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v232);
      i = v233;

      v228 = String._bridgeToObjectiveC()();
      v229 = objc_msgSend(v228, "rem_addingTel", swift_bridgeObjectRelease().n128_f64[0]);
LABEL_154:
      v234 = v229;

      if (!v234)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0);
        v234 = String._bridgeToObjectiveC()();
        *(_QWORD *)&v235 = swift_bridgeObjectRelease().n128_u64[0];
      }
      objc_msgSend((id)v8, "setAddress:", v234, v235);

    }
    else
    {
      objc_msgSend((id)v8, "setAddress:", 0);
    }
    v236 = objc_msgSend(v165, "permission");
    if ((unint64_t)v236 >= 4)
    {
      (*(void (**)(uint64_t, uint64_t, void *))(v301 + 16))(v303, v305, rawValue);
      v296 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
      v297 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
      v298 = "unknown permission";
      v299 = 18;
      goto LABEL_266;
    }
    objc_msgSend((id)v8, "setAccessLevel:", (0x2000100000000uLL >> (16 * v236)) & 3);
    v237 = objc_msgSend(v165, "acceptanceStatus");
    if ((unint64_t)v237 < 4)
    {
      objc_msgSend((id)v8, "setStatus:", (0x3000100050004uLL >> (16 * v237)) & 7);
      sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
      v238 = objc_msgSend(v325, "owner");
      v239 = static NSObject.== infix(_:_:)(v238);

      if ((v239 & 1) != 0)
        objc_msgSend((id)v21, "setSharedOwner:", v8);

      v1 = v322;
      if (v332 == v321)
        goto LABEL_224;
      v119 = v328 + 1;
      continue;
    }
    break;
  }
  (*(void (**)(uint64_t, uint64_t, void *))(v301 + 16))(v304, v305, rawValue);
  v296 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
  v297 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
  v298 = "unknown acceptanceStatus";
  v299 = 24;
LABEL_266:
  sub_1004A14D8((uint64_t)v298, v299, 2uLL, v296, v297);
  __break(1u);
LABEL_267:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void __swiftcall REMCDList.existingLocalObjectToMerge(with:)(REMCDObject_optional *__return_ptr retstr, NSPredicate_optional *with)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  _QWORD *v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  id v32;
  void *v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  id v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  __n128 v55;
  id v56;
  unint64_t v57;
  id v58;
  uint64_t v59;
  id v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  NSPredicate_optional *v64;
  unint64_t v65;
  uint64_t v66;
  id v67;
  Class isa;
  id v69;
  uint64_t ObjectType;
  id v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  id v80;
  id v81;
  id v82;
  NSObject *v83;
  int v84;
  uint64_t v85;
  id v86;
  void *v87;
  id v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  double v92;
  id v93;
  void *v94;
  id v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  int v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;

  v3 = v2;
  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v5);
  v7 = (char *)&v102 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v9 = __chkstk_darwin(v8).n128_u64[0];
  v11 = (char *)&v102 - v10;
  v12 = objc_msgSend(v3, "managedObjectContext", v9);
  if (!v12)
    return;
  v13 = v12;
  if ((objc_msgSend(v3, "isConcealed") & 1) != 0)
  {
    if (qword_100837110 != -1)
      swift_once(&qword_100837110, sub_1002B763C);
    v14 = type metadata accessor for Logger(0);
    sub_10001AAA8(v14, (uint64_t)qword_100843620);
    v15 = v3;
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc(22, -1);
      v19 = (_QWORD *)swift_slowAlloc(64, -1);
      v109 = v19;
      *(_DWORD *)v18 = 136446466;
      v20 = objc_msgSend(v15, "remObjectID");
      if (v20)
      {
        v21 = v20;
        v22 = objc_msgSend(v20, "description");

        v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
        v25 = v24;

      }
      else
      {
        v23 = 7104878;
        v25 = 0xE300000000000000;
      }
      v108 = sub_10001A820(v23, v25, (uint64_t *)&v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109);

      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 12) = 2082;
      v36 = sub_1004381F4();
      v108 = sub_10001A820(v36, v37, (uint64_t *)&v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "MERGE.LOCAL: ...Should not attempt to find existing local object for this concealed list, race condition? {self: %{public}s %{public}s}", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {

    }
    goto LABEL_17;
  }
  if ((objc_msgSend(v3, "isGroup") & 1) != 0)
    goto LABEL_17;
  if ((objc_msgSend(v3, "isShared") & 1) != 0)
    goto LABEL_17;
  v26 = objc_msgSend(v3, "name");
  if (!v26)
    goto LABEL_17;
  v27 = v26;
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v30 = v29;

  v109 = _swiftEmptyArrayStorage;
  KeyPath = swift_getKeyPath(&unk_1006B3538);
  v32 = objc_msgSend(v3, "account");
  if (v32)
  {
    v33 = v32;
    v34 = objc_msgSend(v32, "identifier");

    if (v34)
    {
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v34);

      v35 = type metadata accessor for UUID(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v7, 0, 1, v35);
    }
    else
    {
      v39 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v7, 1, 1, v39);
    }
    sub_1000A5CA8((uint64_t)v7, (uint64_t)v11, (uint64_t *)&unk_100839C80);
  }
  else
  {
    v38 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v11, 1, 1, v38);
  }
  v40 = sub_1002E72A0(KeyPath, (uint64_t)v11, (uint64_t *)&unk_100839C80, &qword_100843760);
  v41 = swift_release(KeyPath);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v41);
  v43 = v109[2];
  v42 = v109[3];
  if (v43 >= v42 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1);
  v44 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v43, v40);
  specialized Array._endMutation()(v44);
  v45 = swift_getKeyPath(&unk_1006B3588);
  v46 = sub_1002EA9F0(v45, v28, v30, 6);
  swift_release(v45);
  swift_bridgeObjectRelease();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v47);
  v49 = v109[2];
  v48 = v109[3];
  if (v49 >= v48 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1);
  v50 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v49, v46);
  specialized Array._endMutation()(v50);
  v51 = sub_1000152CC();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v51);
  v53 = v109[2];
  v52 = v109[3];
  if (v53 >= v52 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1);
  v54 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v53, v51);
  specialized Array._endMutation()(v54);
  v108 = (uint64_t)_swiftEmptyArrayStorage;
  sub_1000151B0(0, (unint64_t *)&unk_100839910, NSPredicate_ptr);
  v56 = (id)NSPredicate.init(format:_:)(0xD00000000000003BLL, 0x80000001006FF5C0, _swiftEmptyArrayStorage, v55);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v56);
  v58 = *(id *)((v108 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v57 = *(_QWORD *)((v108 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if ((unint64_t)v58 >= v57 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1);
  v59 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v58, v56);
  specialized Array._endMutation()(v59);
  v60 = sub_1002B6354((uint64_t)v109);
  if (v60)
  {
    v58 = v60;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v58);
    v62 = *(_QWORD *)((v108 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v61 = *(_QWORD *)((v108 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v62 >= v61 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1);
    v63 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v62, v58);
    specialized Array._endMutation()(v63);

  }
  if (with)
  {
    v64 = with;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v64);
    v58 = *(id *)((v108 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v65 = *(_QWORD *)((v108 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if ((unint64_t)v58 >= v65 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v65 > 1);
    v66 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v58, v64);
    specialized Array._endMutation()(v66);
  }
  v67 = objc_allocWithZone((Class)NSCompoundPredicate);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v69 = objc_msgSend(v67, "initWithType:subpredicates:", 1, isa, swift_bridgeObjectRelease().n128_f64[0]);

  ObjectType = swift_getObjectType();
  v71 = objc_msgSend((id)swift_getObjCClassFromMetadata(ObjectType), "ic_objectsMatchingPredicate:context:", v69, v13);
  v72 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
  v73 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v71, v72);

  if (!((unint64_t)v73 >> 62))
  {
    v74 = *(void **)((v73 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v74)
      goto LABEL_40;
LABEL_59:

    swift_bridgeObjectRelease();
    return;
  }
  if (v73 < 0)
    v101 = v73;
  else
    v101 = v73 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v73);
  v74 = (void *)_CocoaArrayWrapper.endIndex.getter(v101);
  swift_bridgeObjectRelease();
  if (!v74)
    goto LABEL_59;
LABEL_40:
  if ((v73 & 0xC000000000000001) != 0)
  {
    v75 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v73);
    goto LABEL_43;
  }
  if (*(_QWORD *)((v73 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v75 = *(id *)(v73 + 32);
LABEL_43:
    v58 = v75;
    swift_bridgeObjectRelease();
    v76 = objc_opt_self(REMCDList);
    v77 = swift_dynamicCastObjCClass(v58, v76);
    if (v77)
    {
      v74 = (void *)v77;
      if (qword_100837110 == -1)
        goto LABEL_45;
      goto LABEL_62;
    }

LABEL_17:
    return;
  }
  __break(1u);
LABEL_62:
  swift_once(&qword_100837110, sub_1002B763C);
LABEL_45:
  v78 = type metadata accessor for Logger(0);
  sub_10001AAA8(v78, (uint64_t)qword_100843620);
  v79 = v3;
  v80 = v58;
  v81 = v79;
  v82 = v80;
  v83 = Logger.logObject.getter(v82);
  v84 = static os_log_type_t.default.getter(v83);
  if (os_log_type_enabled(v83, (os_log_type_t)v84))
  {
    v104 = v84;
    v105 = v56;
    v85 = swift_slowAlloc(22, -1);
    v102 = swift_slowAlloc(64, -1);
    v107 = v102;
    *(_DWORD *)v85 = 136446466;
    v86 = objc_msgSend(v81, "remObjectID");
    if (v86)
    {
      v87 = v86;
      v88 = objc_msgSend(v86, "description");

      v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
      v91 = v90;

    }
    else
    {
      v91 = 0xE300000000000000;
      v89 = 7104878;
    }
    v103 = v82;
    v106 = sub_10001A820(v89, v91, &v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107);

    *(_QWORD *)&v92 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v85 + 12) = 2082;
    v93 = objc_msgSend(v74, "remObjectID", v92);
    if (v93)
    {
      v94 = v93;
      v95 = objc_msgSend(v93, "description");

      v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
      v98 = v97;

      v99 = v102;
    }
    else
    {
      v98 = 0xE300000000000000;
      v99 = v102;
      v96 = 7104878;
    }
    v106 = sub_10001A820(v96, v98, &v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107);
    v100 = v103;

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v83, (os_log_type_t)v104, "MERGE.LOCAL: ...REMCDList.existingLocalObjectToMerge found a matching local REMCDList! {self: %{public}s, matched: %{public}s}", (uint8_t *)v85, 0x16u);
    swift_arrayDestroy(v99, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v99, -1, -1);
    swift_slowDealloc(v85, -1, -1);

  }
  else
  {

  }
}

Swift::Bool __swiftcall REMCDList.merge(withLocalObject:)(REMCDObject *withLocalObject)
{
  void *v1;
  void *v2;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  REMCDObject *v29;
  unsigned __int8 v30;
  uint64_t v31;
  REMCDObject *v32;
  id v33;
  REMCDObject *v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  id v47;
  void *v48;
  void (*v49)(char *, uint64_t, uint64_t, _QWORD *);
  char *v50;
  uint64_t v51;
  id v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int (*v56)(char *, uint64_t, _QWORD *);
  unsigned int v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  uint64_t v68;
  uint64_t i;
  uint64_t v70;
  id v71;
  id v72;
  _QWORD *v73;
  void (*v74)(unint64_t, uint64_t, _QWORD *);
  unint64_t v75;
  uint64_t v76;
  char v77;
  unint64_t v78;
  uint64_t v79;
  REMCDObject *v80;
  id v81;
  id v82;
  NSObject *v83;
  os_log_type_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  void *v89;
  id v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  id v97;
  NSObject *v98;
  os_log_type_t v99;
  uint8_t *v100;
  uint64_t v101;
  id v102;
  void *v103;
  id v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  double v108;
  REMObjectID *v109;
  REMObjectID *v110;
  id v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  void *v119;
  double v120;
  REMObjectID *v121;
  REMObjectID *v122;
  id v123;
  unint64_t v124;
  unint64_t v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  id v129;
  Swift::String v130;
  id v131;
  void *v132;
  id v133;
  uint64_t v134;
  void *v135;
  void *v136;
  Swift::String v137;
  Swift::String v138;
  void *v139;
  NSString v140;
  NSString v141;
  NSString v142;
  id v143;
  void *v144;
  __n128 v145;
  uint64_t v146;
  uint64_t v147;
  REMCDObject *v148;
  unint64_t v149;
  id v150;
  void *v151;
  unsigned int v152;
  uint64_t v153;
  id v154;
  NSObject *v155;
  os_log_type_t v156;
  uint64_t v157;
  id v158;
  void *v159;
  id v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  id v164;
  void *v165;
  unint64_t v166;
  void (*v167)(uint64_t, unint64_t, _QWORD *);
  id v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void (*v177)(unint64_t, unint64_t, _QWORD *);
  unint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  char v181;
  void (*v182)(unint64_t, _QWORD *);
  uint64_t v183;
  REMCDObject *v184;
  id v185;
  id v186;
  REMCDObject *v187;
  id v188;
  id v189;
  NSObject *v190;
  int v191;
  _BOOL4 v192;
  uint64_t v193;
  id v194;
  void *v195;
  id v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  double v200;
  unsigned int v201;
  BOOL v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  Swift::String v206;
  unsigned int v207;
  BOOL v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  id v212;
  __n128 v213;
  REMCDObject *v214;
  double v215;
  id v216;
  void *v217;
  id v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  double v222;
  id v223;
  void *v224;
  id v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  id v229;
  uint64_t v230;
  id v231;
  double v232;
  id v233;
  void *v234;
  id v235;
  uint64_t v236;
  void *v237;
  void *v238;
  _QWORD *v239;
  Swift::String v240;
  Swift::String v241;
  id v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  Swift::String v248;
  Swift::String v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  _QWORD *v254;
  _QWORD *v255;
  id v256;
  id v257;
  NSString v258;
  id v259;
  id v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  _QWORD *v264;
  uint64_t v265;
  uint64_t v266;
  NSString v267;
  void *v268;
  NSString v269;
  uint64_t v270;
  uint64_t v271;
  NSString v272;
  id v273;
  void *v274;
  REMCDObject *v275;
  unint64_t v276;
  unint64_t v277;
  _QWORD *v278;
  Class isa;
  _QWORD *v280;
  void *v281;
  uint64_t v282;
  id v283;
  uint64_t v284;
  uint64_t j;
  uint64_t v286;
  id v287;
  void *v288;
  id v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t v292;
  _QWORD *v293;
  id v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  double v299;
  uint64_t v300;
  uint64_t v301;
  id v302;
  NSObject *v303;
  os_log_type_t v304;
  uint8_t *v305;
  uint64_t v306;
  id v307;
  void *v308;
  id v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  id v313;
  Class v314;
  id v315;
  id v316;
  id v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  Class v321;
  id v322;
  NSString v323;
  id v324;
  void *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  NSObject *v329;
  os_log_type_t v330;
  uint8_t *v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  REMCDObject *v336;
  id v337;
  REMCDObject *v338;
  id v339;
  NSObject *v340;
  os_log_type_t v341;
  uint64_t v342;
  id v343;
  void *v344;
  id v345;
  uint64_t v346;
  unint64_t v347;
  unint64_t v348;
  double v349;
  id v350;
  void *v351;
  id v352;
  uint64_t v353;
  unint64_t v354;
  unint64_t v355;
  _QWORD *v356;
  id v357;
  id v358;
  __n128 v360;
  uint64_t v361;
  int v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t *v365;
  char *v366;
  unint64_t v367;
  __n128 v368;
  REMCDObject *v369;
  _QWORD *v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unsigned int (*v374)(char *, uint64_t, _QWORD *);
  uint64_t v375;
  void (*v376)(char *, uint64_t, uint64_t, _QWORD *);
  void *v377;
  id v378;
  id v379;
  id v380;
  uint64_t v381;
  char *v382;
  id v383;
  _QWORD *v384;
  char *v385;
  REMCDObject *v386;
  unint64_t v387;
  _QWORD *v388;
  uint64_t v389;
  _QWORD v390[3];
  char v391[4];
  uint64_t v392;
  _QWORD *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;

  v2 = v1;
  v4 = (_QWORD *)type metadata accessor for UUID(0);
  v388 = (_QWORD *)*(v4 - 1);
  __chkstk_darwin(v4);
  v6 = (char *)&v360 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v387 = (unint64_t)v360.n128_u64 - v8;
  v9 = sub_10001A630((uint64_t *)&unk_10083B370);
  __chkstk_darwin(v9);
  v11 = (char *)&v360 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v12);
  v382 = (char *)&v360 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v360 - v15;
  __chkstk_darwin(v17);
  v19 = (char *)&v360 - v18;
  *(_QWORD *)&v21 = __chkstk_darwin(v20).n128_u64[0];
  v23 = (char *)&v360 - v22;
  v24 = objc_msgSend(v2, "managedObjectContext", v21);
  if (!v24)
    return (char)v24;
  v25 = v24;
  v385 = v6;
  v26 = objc_opt_self(REMCDList);
  v27 = swift_dynamicCastObjCClass(withLocalObject, v26);
  if (!v27)
  {

LABEL_72:
    LOBYTE(v24) = 0;
    return (char)v24;
  }
  v28 = (id)v27;
  v29 = withLocalObject;
  v30 = objc_msgSend(v28, "isConcealed");
  v380 = v25;
  if ((v30 & 1) != 0)
  {
    if (qword_100837110 != -1)
      swift_once(&qword_100837110, sub_1002B763C);
    v31 = type metadata accessor for Logger(0);
    sub_10001AAA8(v31, (uint64_t)qword_100843620);
    v32 = v29;
    v33 = v2;
    v34 = v32;
    v35 = v33;
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = 7104878;
      v39 = swift_slowAlloc(32, -1);
      v40 = swift_slowAlloc(96, -1);
      v396 = v40;
      *(_DWORD *)v39 = 136446722;
      v41 = objc_msgSend(v35, "remObjectID");
      if (v41)
      {
        v42 = v41;
        v43 = objc_msgSend(v41, "description");

        v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
        v46 = v45;

      }
      else
      {
        v46 = 0xE300000000000000;
        v44 = 7104878;
      }
      v394 = sub_10001A820(v44, v46, &v396);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v394, &v395);

      *(_QWORD *)&v108 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v39 + 12) = 2082;
      v109 = -[REMCDObject remObjectID](v34, "remObjectID", v108);
      if (v109)
      {
        v110 = v109;
        v111 = -[REMObjectID description](v109, "description");

        v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v111);
        v113 = v112;

      }
      else
      {
        v113 = 0xE300000000000000;
      }
      v394 = sub_10001A820(v38, v113, &v396);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v394, &v395);

      swift_bridgeObjectRelease();
      *(_WORD *)(v39 + 22) = 2082;
      v114 = sub_1004381F4();
      v394 = sub_10001A820(v114, v115, &v396);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v394, &v395);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "MERGE.LOCAL: ...Should not attempt to merge with a concealed local list, race condition or corrupted database? {self: %{public}s, local: %{public}s %{public}s}", (uint8_t *)v39, 0x20u);
      swift_arrayDestroy(v40, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

LABEL_71:
      goto LABEL_72;
    }

LABEL_52:
    goto LABEL_72;
  }
  v386 = v29;
  v47 = objc_msgSend(v28, "identifier");
  if (v47)
  {
    v48 = v47;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v47);

    v49 = (void (*)(char *, uint64_t, uint64_t, _QWORD *))v388[7];
    v50 = v23;
    v51 = 0;
  }
  else
  {
    v49 = (void (*)(char *, uint64_t, uint64_t, _QWORD *))v388[7];
    v50 = v23;
    v51 = 1;
  }
  v376 = v49;
  v49(v50, v51, 1, v4);
  v52 = objc_msgSend(v2, "identifier");
  if (v52)
  {
    v53 = v52;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v52);

    v54 = 0;
  }
  else
  {
    v54 = 1;
  }
  v376(v19, v54, 1, v4);
  v55 = (uint64_t)&v11[*(int *)(v9 + 48)];
  sub_100008868((uint64_t)v23, (uint64_t)v11, (uint64_t *)&unk_100839C80);
  sub_100008868((uint64_t)v19, v55, (uint64_t *)&unk_100839C80);
  v56 = (unsigned int (*)(char *, uint64_t, _QWORD *))v388[6];
  v57 = v56(v11, 1, v4);
  v384 = v4;
  if (v57 == 1)
  {
    sub_10000882C((uint64_t)v19, (uint64_t *)&unk_100839C80);
    sub_10000882C((uint64_t)v23, (uint64_t *)&unk_100839C80);
    if (v56((char *)v55, 1, v4) == 1)
    {
      sub_10000882C((uint64_t)v11, (uint64_t *)&unk_100839C80);
LABEL_37:
      if (qword_100837110 != -1)
        swift_once(&qword_100837110, sub_1002B763C);
      v79 = type metadata accessor for Logger(0);
      sub_10001AAA8(v79, (uint64_t)qword_100843620);
      v80 = v386;
      v81 = v2;
      v34 = v80;
      v82 = v81;
      v83 = Logger.logObject.getter(v82);
      v84 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v83, v84))
      {
        v85 = 7104878;
        v86 = swift_slowAlloc(22, -1);
        v87 = swift_slowAlloc(64, -1);
        v396 = v87;
        *(_DWORD *)v86 = 136446466;
        v88 = objc_msgSend(v82, "remObjectID");
        if (v88)
        {
          v89 = v88;
          v90 = objc_msgSend(v88, "description");

          v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
          v93 = v92;

        }
        else
        {
          v93 = 0xE300000000000000;
          v91 = 7104878;
        }
        v394 = sub_10001A820(v91, v93, &v396);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v394, &v395);

        *(_QWORD *)&v120 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v86 + 12) = 2082;
        v121 = -[REMCDObject remObjectID](v34, "remObjectID", v120);
        if (v121)
        {
          v122 = v121;
          v123 = -[REMObjectID description](v121, "description");

          v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v123);
          v125 = v124;

        }
        else
        {
          v125 = 0xE300000000000000;
        }
        v394 = sub_10001A820(v85, v125, &v396);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v394, &v395);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v83, v84, "MERGE.LOCAL: ...this REMCDList should not try to merge with itself! {self: %{public}s, local: %{public}s}", (uint8_t *)v86, 0x16u);
        swift_arrayDestroy(v87, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v87, -1, -1);
        swift_slowDealloc(v86, -1, -1);

        goto LABEL_71;
      }

      goto LABEL_52;
    }
    goto LABEL_22;
  }
  sub_100008868((uint64_t)v11, (uint64_t)v16, (uint64_t *)&unk_100839C80);
  v374 = v56;
  if (v56((char *)v55, 1, v4) == 1)
  {
    sub_10000882C((uint64_t)v19, (uint64_t *)&unk_100839C80);
    sub_10000882C((uint64_t)v23, (uint64_t *)&unk_100839C80);
    ((void (*)(char *, _QWORD *))v388[1])(v16, v4);
    v56 = v374;
LABEL_22:
    sub_10000882C((uint64_t)v11, (uint64_t *)&unk_10083B370);
    goto LABEL_23;
  }
  v73 = v388;
  v74 = (void (*)(unint64_t, uint64_t, _QWORD *))v388[4];
  v379 = v28;
  v75 = v387;
  v74(v387, v55, v4);
  v76 = sub_10009FC50((unint64_t *)&qword_10083B380, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v77 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v75, v4, v76);
  v4 = (_QWORD *)v73[1];
  v78 = v75;
  v28 = v379;
  ((void (*)(unint64_t, _QWORD *))v4)(v78, v384);
  sub_10000882C((uint64_t)v19, (uint64_t *)&unk_100839C80);
  sub_10000882C((uint64_t)v23, (uint64_t *)&unk_100839C80);
  ((void (*)(char *, _QWORD *))v4)(v16, v384);
  sub_10000882C((uint64_t)v11, (uint64_t *)&unk_100839C80);
  v56 = v374;
  if ((v77 & 1) != 0)
    goto LABEL_37;
LABEL_23:
  v58 = objc_msgSend(v2, "reminders");
  if (v58)
  {
    v59 = v58;
    v374 = v56;
    v396 = (uint64_t)v58;
    v60 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    v61 = sub_1000151B0(0, (unint64_t *)&unk_10083AE60, NSOrderedSet_ptr);
    v62 = sub_1000E51DC((unint64_t *)&qword_100841630, (unint64_t *)&unk_10083AE60, NSOrderedSet_ptr, (uint64_t)&protocol conformance descriptor for NSOrderedSet);
    v364 = v61;
    v363 = v62;
    v63 = Sequence.elements<A>(ofType:)(v60, v61, v60, v62);

    sub_1000151B0(0, (unint64_t *)&unk_100839910, NSPredicate_ptr);
    v64 = sub_10001A630((uint64_t *)&unk_10083A270);
    v65 = swift_allocObject(v64, 72, 7);
    *(_OWORD *)(v65 + 16) = xmmword_1006A3C00;
    v66 = (uint64_t)off_1007D66E0;
    *(_QWORD *)(v65 + 56) = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
    *(_QWORD *)(v65 + 64) = sub_1000E51DC((unint64_t *)&unk_100843660, (unint64_t *)&qword_100839900, off_1007D66E0, (uint64_t)&protocol conformance descriptor for NSObject);
    *(_QWORD *)(v65 + 32) = v28;
    v369 = v386;
    v383 = (id)NSPredicate.init(format:_:)(0x203D3D207473696CLL, 0xEA00000000004025, v65, v67);
    v393 = &_swiftEmptySetSingleton;
    v396 = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v63 >> 62)
    {
      if (v63 < 0)
        v127 = v63;
      else
        v127 = v63 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v63);
      v68 = _CocoaArrayWrapper.endIndex.getter(v127);
      swift_bridgeObjectRelease();
    }
    else
    {
      v68 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v377 = v2;
    if (v68)
    {
      if (v68 < 1)
      {
        __break(1u);
        goto LABEL_165;
      }
      for (i = 0; i != v68; ++i)
      {
        if ((v63 & 0xC000000000000001) != 0)
          v71 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v63);
        else
          v71 = *(id *)(v63 + 8 * i + 32);
        v66 = (uint64_t)v71;
        v72 = objc_msgSend(v71, "isConcealed");
        if ((v72 & 1) != 0)
        {

        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v72);
          v4 = *(_QWORD **)(v396 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v4);
          v70 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, v66);
          specialized ContiguousArray._endMutation()(v70);
        }
      }
      swift_bridgeObjectRelease();
      v94 = v396;
      v2 = v377;
    }
    else
    {
      swift_bridgeObjectRelease();
      v94 = (uint64_t)_swiftEmptyArrayStorage;
    }
    if (v94 < 0 || (v94 & 0x4000000000000000) != 0)
    {
      v128 = swift_retain();
      v116 = _CocoaArrayWrapper.endIndex.getter(v128);
      if (v116)
      {
LABEL_59:
        if (v116 >= 1)
        {
          v117 = 0;
          v68 = 0;
          do
          {
            if ((v94 & 0xC000000000000001) != 0)
              v118 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v117, v94);
            else
              v118 = *(id *)(v94 + 8 * v117 + 32);
            v119 = v118;
            ++v117;
            v396 = (uint64_t)v118;
            sub_1002C5860((void **)&v396, (uint64_t)v383, v2, (uint64_t)&v393);

          }
          while (v116 != v117);
LABEL_83:
          swift_release_n(v94);
          v129 = objc_msgSend(v2, "ckZoneOwnerName");
          if (v129)
          {

            v396 = 0;
            v397 = 0xE000000000000000;
            _StringGuts.grow(_:)(171);
            v130._countAndFlagsBits = 0xD0000000000000A8;
            v130._object = (void *)0x80000001006FF660;
            String.append(_:)(v130);
            v131 = objc_msgSend(v2, "remObjectID");
            if (v131)
            {
              v132 = v131;
              v133 = objc_msgSend(v131, "description");

              v134 = static String._unconditionallyBridgeFromObjectiveC(_:)(v133);
              v136 = v135;

            }
            else
            {
              v136 = (void *)0xE300000000000000;
              v134 = 7104878;
            }
            v137._countAndFlagsBits = v134;
            v137._object = v136;
            String.append(_:)(v137);
            swift_bridgeObjectRelease();
            v138._countAndFlagsBits = 125;
            v138._object = (void *)0xE100000000000000;
            String.append(_:)(v138);
            v139 = (void *)objc_opt_self(ICCloudContext);
            v140 = String._bridgeToObjectiveC()();
            v141 = String._bridgeToObjectiveC()();
            v142 = String._bridgeToObjectiveC()();
            objc_msgSend(v139, "faultAndPromptToFileRadarWithICTap2RadarType:title:description:logMessage:", 4, v140, v141, v142, swift_bridgeObjectRelease().n128_f64[0]);

          }
          v392 = (uint64_t)_swiftEmptyArrayStorage;
          v143 = objc_msgSend(v28, "reminders");
          v379 = v28;
          v4 = v384;
          if (!v143)
          {
            v264 = _swiftEmptyArrayStorage;
            goto LABEL_172;
          }
          v144 = v143;
          v396 = (uint64_t)v143;
          v66 = Sequence.elements<A>(ofType:)(v60, v364, v60, v363);

          if (!((unint64_t)v66 >> 62))
          {
            v146 = *(_QWORD *)((v66 & 0xFFFFFFFFFFFFF8) + 0x10);
            v147 = (uint64_t)v382;
            if (v146)
            {
LABEL_91:
              if (v146 >= 1)
              {
                v148 = 0;
                v149 = v66 & 0xC000000000000001;
                v372 = v66 + 32;
                v370 = _swiftEmptyArrayStorage;
                v365 = &v395;
                v145.n128_u64[0] = 136446466;
                v368 = v145;
                v367 = 0x80000001006FF640;
                v366 = (char *)&type metadata for Any + 8;
                v145.n128_u64[0] = 136446722;
                v360 = v145;
                v373 = v66;
                v375 = v146;
                v371 = v66 & 0xC000000000000001;
                while (1)
                {
                  v150 = v149
                       ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v148, v66)
                       : *(id *)(v372 + 8 * (_QWORD)v148);
                  v151 = v150;
                  v152 = objc_msgSend(v150, "isConcealed", v360.n128_u64[0], v360.n128_u64[1]);
                  v386 = v148;
                  if (v152)
                    break;
                  v378 = v151;
                  v164 = objc_msgSend(v151, "identifier");
                  if (v164)
                  {
                    v165 = v164;
                    v381 = v68;
                    v166 = v387;
                    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v164);

                    v167 = (void (*)(uint64_t, unint64_t, _QWORD *))v388[4];
                    v167(v147, v166, v4);
                    v376((char *)v147, 0, 1, v4);
                    if (v374((char *)v147, 1, v4) != 1)
                    {
                      v167((uint64_t)v385, v147, v4);
                      v169 = v393;
                      if (v393[2])
                      {
                        v170 = v393[5];
                        v171 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
                        swift_bridgeObjectRetain(v169);
                        v172 = dispatch thunk of Hashable._rawHashValue(seed:)(v170, v4, v171);
                        v173 = -1 << *((_BYTE *)v169 + 32);
                        v174 = v172 & ~v173;
                        if (((*(_QWORD *)((char *)v169 + ((v174 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v174) & 1) != 0)
                        {
                          v175 = ~v173;
                          v176 = v388[9];
                          v177 = (void (*)(unint64_t, unint64_t, _QWORD *))v388[2];
                          while (1)
                          {
                            v178 = v387;
                            v179 = v384;
                            v177(v387, v169[6] + v176 * v174, v384);
                            v180 = sub_10009FC50((unint64_t *)&qword_10083B380, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
                            v181 = dispatch thunk of static Equatable.== infix(_:_:)(v178, v385, v179, v180);
                            v182 = (void (*)(unint64_t, _QWORD *))v388[1];
                            v182(v178, v179);
                            if ((v181 & 1) != 0)
                              break;
                            v174 = (v174 + 1) & v175;
                            if (((*(_QWORD *)((char *)v169 + ((v174 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v174) & 1) == 0)
                              goto LABEL_113;
                          }
                          v213 = swift_bridgeObjectRelease();
                          v4 = v384;
                          ((void (*)(char *, _QWORD *, __n128))v182)(v385, v384, v213);

                          v28 = v379;
                          v2 = v377;
                          v68 = v381;
                          v147 = (uint64_t)v382;
                          v66 = v373;
                          v146 = v375;
                          v214 = v386;
                          v149 = v371;
                          goto LABEL_161;
                        }
LABEL_113:
                        swift_bridgeObjectRelease();
                        v28 = v379;
                        v2 = v377;
                        v149 = v371;
                      }
                      v68 = v381;
                      if (qword_100837110 != -1)
                        swift_once(&qword_100837110, sub_1002B763C);
                      v183 = type metadata accessor for Logger(0);
                      sub_10001AAA8(v183, (uint64_t)qword_100843620);
                      v184 = v369;
                      v185 = v378;
                      v186 = v2;
                      v187 = v184;
                      v188 = v185;
                      v189 = v186;
                      v190 = Logger.logObject.getter(v189);
                      v191 = static os_log_type_t.info.getter(v190);
                      v192 = os_log_type_enabled(v190, (os_log_type_t)v191);
                      v378 = v189;
                      if (v192)
                      {
                        v362 = v191;
                        v193 = swift_slowAlloc(32, -1);
                        v361 = swift_slowAlloc(96, -1);
                        v396 = v361;
                        *(_DWORD *)v193 = v360.n128_u32[0];
                        v194 = objc_msgSend(v188, "remObjectID");
                        if (v194)
                        {
                          v195 = v194;
                          v196 = objc_msgSend(v194, "description");

                          v197 = static String._unconditionallyBridgeFromObjectiveC(_:)(v196);
                          v199 = v198;

                        }
                        else
                        {
                          v199 = 0xE300000000000000;
                          v197 = 7104878;
                        }
                        v394 = sub_10001A820(v197, v199, &v396);
                        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v394, v365);

                        *(_QWORD *)&v215 = swift_bridgeObjectRelease().n128_u64[0];
                        *(_WORD *)(v193 + 12) = 2082;
                        v216 = objc_msgSend(v28, "remObjectID", v215);
                        if (v216)
                        {
                          v217 = v216;
                          v218 = objc_msgSend(v216, "description");

                          v219 = static String._unconditionallyBridgeFromObjectiveC(_:)(v218);
                          v221 = v220;

                        }
                        else
                        {
                          v221 = 0xE300000000000000;
                          v219 = 7104878;
                        }
                        v394 = sub_10001A820(v219, v221, &v396);
                        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v394, v365);

                        *(_QWORD *)&v222 = swift_bridgeObjectRelease().n128_u64[0];
                        *(_WORD *)(v193 + 22) = 2082;
                        v223 = objc_msgSend(v378, "remObjectID", v222);
                        if (v223)
                        {
                          v224 = v223;
                          v225 = objc_msgSend(v223, "description");

                          v226 = static String._unconditionallyBridgeFromObjectiveC(_:)(v225);
                          v228 = v227;

                        }
                        else
                        {
                          v228 = 0xE300000000000000;
                          v226 = 7104878;
                        }
                        v2 = v377;
                        v394 = sub_10001A820(v226, v228, &v396);
                        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v394, v365);
                        v229 = v378;

                        swift_bridgeObjectRelease();
                        _os_log_impl((void *)&_mh_execute_header, v190, (os_log_type_t)v362, "MERGE.LOCAL: ...this local reminder is not matched/merged so we're adding it to the list {local.reminder: %{public}s, local.list: %{public}s, cloud.list: %{public}s}", (uint8_t *)v193, 0x20u);
                        v230 = v361;
                        swift_arrayDestroy(v361, 3, (char *)&type metadata for Any + 8);
                        swift_slowDealloc(v230, -1, -1);
                        swift_slowDealloc(v193, -1, -1);

                      }
                      else
                      {

                      }
                      v231 = objc_msgSend(v188, "ckZoneOwnerName");
                      v4 = v384;
                      if (v231)
                      {

                        v396 = 0;
                        v397 = 0xE000000000000000;
                        _StringGuts.grow(_:)(19);
                        *(_QWORD *)&v232 = swift_bridgeObjectRelease().n128_u64[0];
                        v396 = 123;
                        v397 = 0xE100000000000000;
                        v233 = objc_msgSend(v188, "remObjectID", v232);
                        if (v233)
                        {
                          v234 = v233;
                          v235 = objc_msgSend(v233, "description");

                          v236 = static String._unconditionallyBridgeFromObjectiveC(_:)(v235);
                          v238 = v237;

                        }
                        else
                        {
                          v238 = (void *)0xE300000000000000;
                          v236 = 7104878;
                        }
                        v239 = v370;
                        v240._countAndFlagsBits = v236;
                        v240._object = v238;
                        String.append(_:)(v240);
                        swift_bridgeObjectRelease();
                        v241._countAndFlagsBits = 0x614E72656E776F20;
                        v241._object = (void *)0xED0000203D20656DLL;
                        String.append(_:)(v241);
                        v242 = objc_msgSend(v188, "ckZoneOwnerName");
                        if (v242)
                        {
                          v243 = v242;
                          v244 = static String._unconditionallyBridgeFromObjectiveC(_:)(v242);
                          v246 = v245;

                        }
                        else
                        {
                          v244 = 0;
                          v246 = 0;
                        }
                        v394 = v244;
                        v395 = v246;
                        v247 = sub_10001A630((uint64_t *)&unk_10083A370);
                        v248._countAndFlagsBits = String.init<A>(describing:)(&v394, v247);
                        String.append(_:)(v248);
                        swift_bridgeObjectRelease();
                        v249._countAndFlagsBits = 125;
                        v249._object = (void *)0xE100000000000000;
                        String.append(_:)(v249);
                        v250 = v396;
                        v251 = v397;
                        if ((swift_isUniquelyReferenced_nonNull_native(v239) & 1) == 0)
                          v239 = sub_1002C8224(0, v239[2] + 1, 1, v239);
                        v370 = v239;
                        v253 = v239[2];
                        v252 = v239[3];
                        if (v253 >= v252 >> 1)
                          v370 = sub_1002C8224((_QWORD *)(v252 > 1), v253 + 1, 1, v370);
                        v68 = v381;
                        v254 = v370;
                        v370[2] = v253 + 1;
                        v255 = &v254[2 * v253];
                        v255[4] = v250;
                        v255[5] = v251;
                        v4 = v384;
                      }
                      objc_msgSend(v28, "removeRemindersObject:", v188);
                      v256 = v378;
                      objc_msgSend(v378, "addRemindersObject:", v188);
                      objc_msgSend(v188, "setList:", v256);
                      v257 = objc_msgSend(v188, "createResolutionTokenMapIfNecessary");
                      v258 = String._bridgeToObjectiveC()();
                      v259 = objc_msgSend(v257, "getTokenForKey:", v258);

                      objc_msgSend(v259, "update");
                      objc_msgSend(v188, "updateChangeCount");
                      v260 = v188;
                      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v260);
                      v262 = *(_QWORD *)((v392 & 0xFFFFFFFFFFFFFF8) + 0x10);
                      v261 = *(_QWORD *)((v392 & 0xFFFFFFFFFFFFFF8) + 0x18);
                      if (v262 >= v261 >> 1)
                        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v261 > 1);
                      v263 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v262, v260);
                      specialized Array._endMutation()(v263);

                      ((void (*)(char *, _QWORD *))v388[1])(v385, v4);
                      v147 = (uint64_t)v382;
                      v66 = v373;
                      goto LABEL_159;
                    }
                    v68 = v381;
                  }
                  else
                  {
                    v376((char *)v147, 1, 1, v4);
                  }

                  sub_10000882C(v147, (uint64_t *)&unk_100839C80);
LABEL_160:
                  v214 = v386;
LABEL_161:
                  v148 = (REMCDObject *)((char *)&v214->super.super.isa + 1);
                  if (v148 == (REMCDObject *)v146)
                    goto LABEL_171;
                }
                v381 = v68;
                if (qword_100837110 != -1)
                  swift_once(&qword_100837110, sub_1002B763C);
                v153 = type metadata accessor for Logger(0);
                sub_10001AAA8(v153, (uint64_t)qword_100843620);
                v154 = v151;
                v155 = Logger.logObject.getter(v154);
                v156 = static os_log_type_t.info.getter(v155);
                if (os_log_type_enabled(v155, v156))
                {
                  v157 = swift_slowAlloc(22, -1);
                  v378 = (id)swift_slowAlloc(64, -1);
                  v394 = (uint64_t)v378;
                  *(_DWORD *)v157 = v368.n128_u32[0];
                  v158 = objc_msgSend(v154, "remObjectID");
                  if (v158)
                  {
                    v159 = v158;
                    v160 = objc_msgSend(v158, "description");

                    v161 = static String._unconditionallyBridgeFromObjectiveC(_:)(v160);
                    v163 = v162;

                  }
                  else
                  {
                    v163 = 0xE300000000000000;
                    v161 = 7104878;
                  }
                  *(_QWORD *)(v157 + 4) = sub_10001A820(v161, v163, &v394);

                  swift_bridgeObjectRelease();
                  *(_WORD *)(v157 + 12) = 2082;
                  v396 = 0;
                  v397 = 0xE000000000000000;
                  _StringGuts.grow(_:)(49);
                  *(_QWORD *)&v200 = swift_bridgeObjectRelease().n128_u64[0];
                  v396 = 0xD00000000000001FLL;
                  v397 = v367;
                  v201 = objc_msgSend(v154, "markedForDeletion", v200);
                  v202 = v201 == 0;
                  if (v201)
                    v203 = 1702195828;
                  else
                    v203 = 0x65736C6166;
                  if (v202)
                    v204 = 0xE500000000000000;
                  else
                    v204 = 0xE400000000000000;
                  v205 = v204;
                  String.append(_:)(*(Swift::String *)&v203);
                  swift_bridgeObjectRelease();
                  v206._countAndFlagsBits = 0x707075736E75202CLL;
                  v206._object = (void *)0xEE003D646574726FLL;
                  String.append(_:)(v206);
                  v207 = objc_msgSend(v154, "isUnsupported");
                  v208 = v207 == 0;
                  if (v207)
                    v209 = 1702195828;
                  else
                    v209 = 0x65736C6166;
                  if (v208)
                    v210 = 0xE500000000000000;
                  else
                    v210 = 0xE400000000000000;
                  v211 = v210;
                  String.append(_:)(*(Swift::String *)&v209);
                  swift_bridgeObjectRelease();
                  *(_QWORD *)(v157 + 14) = sub_10001A820(v396, v397, &v394);

                  swift_bridgeObjectRelease();
                  _os_log_impl((void *)&_mh_execute_header, v155, v156, "MERGE.LOCAL: ...deleting isConcealed local reminder permanently {reminder: %{public}s %{public}s}", (uint8_t *)v157, 0x16u);
                  v212 = v378;
                  swift_arrayDestroy(v378, 2, v366);
                  swift_slowDealloc(v212, -1, -1);
                  swift_slowDealloc(v157, -1, -1);

                  v168 = v380;
                  v4 = v384;
                  v66 = v373;
                  v2 = v377;
                  v149 = v371;
                }
                else
                {

                  v168 = v380;
                }
                v28 = v379;
                objc_msgSend(v379, "removeRemindersObject:", v154);
                objc_msgSend(v168, "deleteObject:", v154);

                v68 = v381;
                v147 = (uint64_t)v382;
LABEL_159:
                v146 = v375;
                goto LABEL_160;
              }
              __break(1u);
              goto LABEL_200;
            }
            goto LABEL_170;
          }
LABEL_166:
          if (v66 < 0)
            v265 = v66;
          else
            v265 = v66 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v66);
          v146 = _CocoaArrayWrapper.endIndex.getter(v265);
          v145 = swift_bridgeObjectRelease();
          v147 = (uint64_t)v382;
          if (v146)
            goto LABEL_91;
LABEL_170:
          v370 = _swiftEmptyArrayStorage;
LABEL_171:
          swift_bridgeObjectRelease();
          v264 = v370;
LABEL_172:
          if (v264[2])
          {
            v396 = (uint64_t)&off_1007E0260;
            swift_bridgeObjectRetain(v264);
            sub_1001E190C(v266);
            v267 = String._bridgeToObjectiveC()();
            if (v264[2])
              swift_bridgeObjectRetain(v264[5]);
            v268 = (void *)objc_opt_self(ICCloudContext);
            v269 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            v394 = v396;
            v270 = sub_10001A630((uint64_t *)&unk_10083AE10);
            v271 = sub_1000A5F84((unint64_t *)&qword_10083B050, (uint64_t *)&unk_10083AE10, (uint64_t)&protocol conformance descriptor for [A]);
            BidirectionalCollection<>.joined(separator:)(32, 0xE100000000000000, v270, v271);
            swift_bridgeObjectRelease();
            v272 = String._bridgeToObjectiveC()();
            objc_msgSend(v268, "faultAndPromptToFileRadarWithICTap2RadarType:title:description:logMessage:", 4, v267, v269, v272, swift_bridgeObjectRelease().n128_f64[0]);

          }
          if ((unint64_t)v392 >> 62)
          {
            if (v392 < 0)
              v297 = v392;
            else
              v297 = v392 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v392);
            v298 = _CocoaArrayWrapper.endIndex.getter(v297);
            swift_bridgeObjectRelease();
            if (!v298)
              goto LABEL_198;
          }
          else if (!*(_QWORD *)((v392 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            goto LABEL_198;
          }
          v273 = objc_msgSend(v2, "reminderIDsMergeableOrdering");
          if (v273)
          {
            v274 = v273;
            v275 = (REMCDObject *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v273);
            v277 = v276;

            v278 = (_QWORD *)objc_opt_self(REMListStorage);
            isa = Data._bridgeToObjectiveC()().super.isa;
            v396 = 0;
            v388 = v278;
            v280 = objc_msgSend(v278, "reminderIDsMergeableOrderingFromReminderIDUUIDStringsJSONData:error:", isa, &v396);

            v281 = (void *)v396;
            if (!v280)
            {
              v294 = (id)v396;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v295 = _convertNSErrorToError(_:)(v281);

              swift_willThrow(v296);
              sub_1000A71C8((uint64_t)v275, v277);
              goto LABEL_216;
            }
            v386 = v275;
            v387 = v277;
            v394 = (uint64_t)v280;
            v282 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
            v283 = v281;
            v396 = Sequence.elements<A>(ofType:)(v282, v364, v282, v363);
            v147 = v392;
            v394 = (uint64_t)_swiftEmptyArrayStorage;
            v4 = v280;
            if (!((unint64_t)v392 >> 62))
            {
              v284 = *(_QWORD *)((v392 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain_n(v392, 2);
              if (!v284)
              {
LABEL_204:
                swift_bridgeObjectRelease();
                v293 = _swiftEmptyArrayStorage;
LABEL_205:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_1001E0B58((uint64_t)v293);
                if (qword_100837110 != -1)
                  swift_once(&qword_100837110, sub_1002B763C);
                v301 = type metadata accessor for Logger(0);
                sub_10001AAA8(v301, (uint64_t)qword_100843620);
                v302 = v2;
                v303 = Logger.logObject.getter(v302);
                v304 = static os_log_type_t.info.getter(v303);
                if (os_log_type_enabled(v303, v304))
                {
                  v305 = (uint8_t *)swift_slowAlloc(12, -1);
                  v306 = swift_slowAlloc(32, -1);
                  v394 = v306;
                  *(_DWORD *)v305 = 136446210;
                  v307 = objc_msgSend(v302, "remObjectID");
                  if (v307)
                  {
                    v308 = v307;
                    v309 = objc_msgSend(v307, "description");

                    v310 = static String._unconditionallyBridgeFromObjectiveC(_:)(v309);
                    v312 = v311;

                  }
                  else
                  {
                    v312 = 0xE300000000000000;
                    v310 = 7104878;
                  }
                  v389 = sub_10001A820(v310, v312, &v394);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v389, v390);

                  swift_bridgeObjectRelease();
                  _os_log_impl((void *)&_mh_execute_header, v303, v304, "MERGE.LOCAL: ...updating reminderIDs ordering and re-sorting with added reminders {list: %{public}s}", v305, 0xCu);
                  swift_arrayDestroy(v306, 1, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v306, -1, -1);
                  swift_slowDealloc(v305, -1, -1);

                  v28 = v379;
                  v2 = v377;
                }
                else
                {

                }
                sub_1001DFD18(v396);
                swift_bridgeObjectRelease();
                v313 = objc_allocWithZone((Class)NSOrderedSet);
                v314 = Array._bridgeToObjectiveC()().super.isa;
                v315 = objc_msgSend(v313, "initWithArray:", v314, swift_bridgeObjectRelease().n128_f64[0]);

                v394 = 0;
                v316 = objc_msgSend(v388, "reminderIDUUIDStringsJSONDataFromReminderIDsMergeableOrdering:error:", v315, &v394);
                v317 = (id)v394;
                if (v316)
                {
                  v318 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v316);
                  v320 = v319;

                  v321 = Data._bridgeToObjectiveC()().super.isa;
                  objc_msgSend(v302, "setReminderIDsMergeableOrdering:", v321);

                  v322 = objc_msgSend(v302, "createResolutionTokenMapIfNecessary");
                  v323 = String._bridgeToObjectiveC()();
                  v324 = objc_msgSend(v322, "getTokenForKey:", v323);

                  objc_msgSend(v324, "update");
                  sub_1002B89D0((uint64_t)v315, 0);
                  sub_1000A71C8((uint64_t)v386, v387);

                  sub_1000A71C8(v318, v320);
                  goto LABEL_221;
                }
                v325 = v317;
                v295 = _convertNSErrorToError(_:)(v317);

                swift_willThrow(v326);
                sub_1000A71C8((uint64_t)v386, v387);

LABEL_216:
                if (qword_100837110 != -1)
                  swift_once(&qword_100837110, sub_1002B763C);
                v327 = type metadata accessor for Logger(0);
                sub_10001AAA8(v327, (uint64_t)qword_100843620);
                swift_errorRetain(v295);
                v328 = swift_errorRetain(v295);
                v329 = Logger.logObject.getter(v328);
                v330 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v329, v330))
                {
                  v331 = (uint8_t *)swift_slowAlloc(12, -1);
                  v332 = swift_slowAlloc(32, -1);
                  v396 = v332;
                  *(_DWORD *)v331 = 136315138;
                  swift_getErrorValue(v295, v391, v390);
                  v333 = Error.localizedDescription.getter(v390[1], v390[2]);
                  v394 = sub_10001A820(v333, v334, &v396);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v394, &v395);
                  swift_bridgeObjectRelease();
                  swift_errorRelease(v295);
                  swift_errorRelease(v295);
                  _os_log_impl((void *)&_mh_execute_header, v329, v330, "MERGE.LOCAL: Error decoding reminder IDs ordered set and thus not able to add local reminders and sort child reminders {error : %s}", v331, 0xCu);
                  swift_arrayDestroy(v332, 1, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v332, -1, -1);
                  swift_slowDealloc(v331, -1, -1);

                  swift_errorRelease(v295);
                }
                else
                {
                  swift_errorRelease(v295);
                  swift_errorRelease(v295);
                  swift_errorRelease(v295);

                }
                goto LABEL_221;
              }
LABEL_182:
              if (v284 < 1)
                __break(1u);
              for (j = 0; j != v284; ++j)
              {
                if ((v147 & 0xC000000000000001) != 0)
                  v287 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v147);
                else
                  v287 = *(id *)(v147 + 8 * j + 32);
                v288 = v287;
                v289 = objc_msgSend(v287, "remObjectID");

                if (v289)
                {
                  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v290);
                  v292 = *(_QWORD *)((v394 & 0xFFFFFFFFFFFFFF8) + 0x10);
                  v291 = *(_QWORD *)((v394 & 0xFFFFFFFFFFFFFF8) + 0x18);
                  if (v292 >= v291 >> 1)
                    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v291 > 1);
                  v286 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v292, v289);
                  specialized Array._endMutation()(v286);
                  v28 = v379;
                }
                v2 = v377;
              }
              swift_bridgeObjectRelease();
              v293 = (_QWORD *)v394;
              goto LABEL_205;
            }
LABEL_200:
            if (v147 < 0)
              v300 = v147;
            else
              v300 = v147 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain_n(v147, 2);
            v284 = _CocoaArrayWrapper.endIndex.getter(v300);
            if (!v284)
              goto LABEL_204;
            goto LABEL_182;
          }
LABEL_198:
          swift_bridgeObjectRelease();
          *(_QWORD *)&v299 = swift_bridgeObjectRelease().n128_u64[0];
LABEL_221:
          objc_msgSend(v2, "updateChangeCount", v299);
          if (qword_100837110 != -1)
            swift_once(&qword_100837110, sub_1002B763C);
          v335 = type metadata accessor for Logger(0);
          sub_10001AAA8(v335, (uint64_t)qword_100843620);
          v336 = v369;
          v337 = v2;
          v338 = v336;
          v339 = v337;
          v340 = Logger.logObject.getter(v339);
          v341 = static os_log_type_t.info.getter(v340);
          if (os_log_type_enabled(v340, v341))
          {
            v342 = swift_slowAlloc(22, -1);
            v388 = (_QWORD *)swift_slowAlloc(64, -1);
            v396 = (uint64_t)v388;
            *(_DWORD *)v342 = 136446466;
            v343 = objc_msgSend(v28, "remObjectID");
            if (v343)
            {
              v344 = v343;
              v345 = objc_msgSend(v343, "description");

              v346 = static String._unconditionallyBridgeFromObjectiveC(_:)(v345);
              v348 = v347;

            }
            else
            {
              v348 = 0xE300000000000000;
              v346 = 7104878;
            }
            v394 = sub_10001A820(v346, v348, &v396);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v394, &v395);

            *(_QWORD *)&v349 = swift_bridgeObjectRelease().n128_u64[0];
            *(_WORD *)(v342 + 12) = 2082;
            v350 = objc_msgSend(v339, "remObjectID", v349);
            if (v350)
            {
              v351 = v350;
              v352 = objc_msgSend(v350, "description");

              v353 = static String._unconditionallyBridgeFromObjectiveC(_:)(v352);
              v355 = v354;

            }
            else
            {
              v355 = 0xE300000000000000;
              v353 = 7104878;
            }
            v394 = sub_10001A820(v353, v355, &v396);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v394, &v395);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v340, v341, "MERGE.LOCAL: ...done merging local list to the cloud list, now delete the local object {local.list: %{public}s, cloud.list: %{public}s}", (uint8_t *)v342, 0x16u);
            v356 = v388;
            swift_arrayDestroy(v388, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v356, -1, -1);
            swift_slowDealloc(v342, -1, -1);

          }
          else
          {

          }
          v357 = v380;
          v358 = objc_msgSend(v28, "parentAccount");
          objc_msgSend(v358, "removeListsObject:", v28);

          objc_msgSend(v357, "deleteObject:", v28);
          swift_bridgeObjectRelease();
          LOBYTE(v24) = 1;
          return (char)v24;
        }
LABEL_165:
        __break(1u);
        goto LABEL_166;
      }
    }
    else
    {
      v116 = *(_QWORD *)(v94 + 16);
      swift_retain();
      if (v116)
        goto LABEL_59;
    }
    v68 = 0;
    goto LABEL_83;
  }
  v95 = v380;
  if (qword_100837110 != -1)
    swift_once(&qword_100837110, sub_1002B763C);
  v96 = type metadata accessor for Logger(0);
  sub_10001AAA8(v96, (uint64_t)qword_100843620);
  v97 = v2;
  v98 = Logger.logObject.getter(v97);
  v99 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v98, v99))
  {
    v100 = (uint8_t *)swift_slowAlloc(12, -1);
    v101 = swift_slowAlloc(32, -1);
    v396 = v101;
    *(_DWORD *)v100 = 136446210;
    v102 = objc_msgSend(v97, "remObjectID");
    if (v102)
    {
      v103 = v102;
      v104 = objc_msgSend(v102, "description");

      v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
      v107 = v106;

    }
    else
    {
      v105 = 7104878;
      v107 = 0xE300000000000000;
    }
    v394 = sub_10001A820(v105, v107, &v396);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v394, &v395);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v98, v99, "MERGE.LOCAL: ...childReminders is unexpectedly nil {self: %{public}s}", v100, 0xCu);
    swift_arrayDestroy(v101, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v101, -1, -1);
    swift_slowDealloc(v100, -1, -1);

    v95 = v380;
  }
  else
  {

  }
  v126 = objc_msgSend(v28, "parentAccount");
  objc_msgSend(v126, "removeListsObject:", v28);

  objc_msgSend(v95, "deleteObject:", v28);
  LOBYTE(v24) = 1;
  return (char)v24;
}

void sub_1002C5860(void **a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  NSObject *v31;
  int v32;
  _BOOL4 v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  id v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  void *v56;
  double v57;
  id v58;
  void *v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  double v64;
  id v65;
  void *v66;
  id v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  os_log_t v71;
  uint64_t v72;
  unsigned int v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  NSObject *v80;
  int v81;
  _BOOL4 v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  double v86;
  id v87;
  void *v88;
  id v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  double v93;
  id v94;
  void *v95;
  id v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  double v100;
  id v101;
  void *v102;
  id v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  void *v112;
  void (*v113)(uint64_t, uint64_t, uint64_t);
  char *v114;
  uint64_t v115;
  void (*v116)(uint64_t, uint64_t);
  double v117;
  id v118;
  void *v119;
  id v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  os_log_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v129 = a4;
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v8);
  v10 = (char *)&v124 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v127 = (char *)&v124 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v124 - v15;
  *(_QWORD *)&v18 = __chkstk_darwin(v17).n128_u64[0];
  v128 = (char *)&v124 - v19;
  v20 = *a1;
  v21 = objc_msgSend(v20, "existingLocalObjectToMergeWithPredicate:", a2, v18);
  if (v21)
  {
    v22 = v21;
    v133 = v16;
    v134 = v12;
    if (qword_100837110 != -1)
      swift_once(&qword_100837110, sub_1002B763C);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_10001AAA8(v23, (uint64_t)qword_100843620);
    v25 = v20;
    v26 = a3;
    v27 = v22;
    v28 = v25;
    v29 = v26;
    v30 = v27;
    v132 = v24;
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.info.getter(v31);
    v33 = os_log_type_enabled(v31, (os_log_type_t)v32);
    v135 = v10;
    v136 = v4;
    v130 = v11;
    if (v33)
    {
      LODWORD(v126) = v32;
      v34 = swift_slowAlloc(32, -1);
      v125 = swift_slowAlloc(96, -1);
      v139 = v125;
      *(_DWORD *)v34 = 136446722;
      v35 = objc_msgSend(v28, "remObjectID");
      if (v35)
      {
        v36 = v35;
        v37 = objc_msgSend(v35, "description");

        v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        v40 = v39;

      }
      else
      {
        v40 = 0xE300000000000000;
        v38 = 7104878;
      }
      v56 = v29;
      v131 = v31;
      v137 = sub_10001A820(v38, v40, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138);

      *(_QWORD *)&v57 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v34 + 12) = 2082;
      v58 = objc_msgSend(v30, "remObjectID", v57);
      if (v58)
      {
        v59 = v58;
        v60 = objc_msgSend(v58, "description");

        v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
        v63 = v62;

      }
      else
      {
        v63 = 0xE300000000000000;
        v61 = 7104878;
      }
      v137 = sub_10001A820(v61, v63, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138);

      *(_QWORD *)&v64 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v34 + 22) = 2082;
      v65 = objc_msgSend(v29, "remObjectID", v64);
      if (v65)
      {
        v66 = v65;
        v67 = objc_msgSend(v65, "description");

        v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
        v70 = v69;

      }
      else
      {
        v70 = 0xE300000000000000;
        v68 = 7104878;
      }
      v137 = sub_10001A820(v68, v70, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138);

      swift_bridgeObjectRelease();
      v71 = v131;
      _os_log_impl((void *)&_mh_execute_header, v131, (os_log_type_t)v126, "MERGE.LOCAL: ...BEFORE merging local reminder to cloud reminder {cloud: %{public}s, local: %{public}s, list: %{public}s}", (uint8_t *)v34, 0x20u);
      v72 = v125;
      swift_arrayDestroy(v125, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v72, -1, -1);
      swift_slowDealloc(v34, -1, -1);

      v11 = v130;
    }
    else
    {

      v56 = v29;
    }
    v73 = objc_msgSend(v28, "mergeWithLocalObject:", v30);
    v74 = v28;
    v75 = v56;
    v76 = v30;
    v77 = v74;
    v78 = v75;
    v79 = v76;
    v80 = Logger.logObject.getter(v79);
    v81 = static os_log_type_t.info.getter(v80);
    v82 = os_log_type_enabled(v80, (os_log_type_t)v81);
    LODWORD(v131) = v73;
    if (v82)
    {
      LODWORD(v132) = v81;
      v83 = swift_slowAlloc(42, -1);
      v126 = swift_slowAlloc(128, -1);
      v139 = v126;
      *(_DWORD *)v83 = 136446978;
      if (v73)
        v84 = 1702195828;
      else
        v84 = 0x65736C6166;
      if (v73)
        v85 = 0xE400000000000000;
      else
        v85 = 0xE500000000000000;
      v137 = sub_10001A820(v84, v85, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138);
      *(_QWORD *)&v86 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v83 + 12) = 2082;
      v87 = objc_msgSend(v77, "remObjectID", v86);
      if (v87)
      {
        v88 = v87;
        v89 = objc_msgSend(v87, "description");

        v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
        v92 = v91;

      }
      else
      {
        v92 = 0xE300000000000000;
        v90 = 7104878;
      }
      v137 = sub_10001A820(v90, v92, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138);

      *(_QWORD *)&v93 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v83 + 22) = 2082;
      v94 = objc_msgSend(v79, "remObjectID", v93);
      if (v94)
      {
        v95 = v94;
        v96 = objc_msgSend(v94, "description");

        v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
        v99 = v98;

      }
      else
      {
        v99 = 0xE300000000000000;
        v97 = 7104878;
      }
      v137 = sub_10001A820(v97, v99, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138);

      *(_QWORD *)&v100 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v83 + 32) = 2082;
      v101 = objc_msgSend(v78, "remObjectID", v100);
      if (v101)
      {
        v102 = v101;
        v103 = objc_msgSend(v101, "description");

        v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(v103);
        v106 = v105;

        v11 = v130;
      }
      else
      {
        v106 = 0xE300000000000000;
        v11 = v130;
        v104 = 7104878;
      }
      v137 = sub_10001A820(v104, v106, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v80, (os_log_type_t)v132, "MERGE.LOCAL: ...AFTER merging local reminder to cloud reminder (success: %{public}s, cloud: %{public}s, local: %{public}s, list: %{public}s}", (uint8_t *)v83, 0x2Au);
      v107 = v126;
      swift_arrayDestroy(v126, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v107, -1, -1);
      swift_slowDealloc(v83, -1, -1);

    }
    else
    {

    }
    v109 = v134;
    v108 = (uint64_t)v135;
    v110 = (uint64_t)v133;
    if ((_DWORD)v131)
    {
      v111 = objc_msgSend(v79, "identifier");
      if (v111)
      {
        v112 = v111;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v111);

        v113 = *(void (**)(uint64_t, uint64_t, uint64_t))(v109 + 32);
        v113(v108, v110, v11);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v109 + 56))(v108, 0, 1, v11);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v109 + 48))(v108, 1, v11) != 1)
        {
          v114 = v128;
          v113((uint64_t)v128, v108, v11);
          v115 = (uint64_t)v127;
          (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v127, v114, v11);
          sub_1002DB318(v110, v115);

          v116 = *(void (**)(uint64_t, uint64_t))(v109 + 8);
          v116(v110, v11);
          v116((uint64_t)v114, v11);
          return;
        }
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v109 + 56))(v108, 1, 1, v11);
      }

      sub_10000882C(v108, (uint64_t *)&unk_100839C80);
    }
    else
    {

    }
  }
  else
  {
    if (qword_100837110 != -1)
      swift_once(&qword_100837110, sub_1002B763C);
    v41 = type metadata accessor for Logger(0);
    sub_10001AAA8(v41, (uint64_t)qword_100843620);
    v42 = v20;
    v43 = a3;
    v44 = v42;
    v45 = v43;
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.info.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v136 = v4;
      v48 = swift_slowAlloc(22, -1);
      v49 = swift_slowAlloc(64, -1);
      v139 = v49;
      *(_DWORD *)v48 = 136446466;
      v50 = objc_msgSend(v44, "remObjectID");
      if (v50)
      {
        v51 = v50;
        v52 = objc_msgSend(v50, "description");

        v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
        v55 = v54;

      }
      else
      {
        v55 = 0xE300000000000000;
        v53 = 7104878;
      }
      v137 = sub_10001A820(v53, v55, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138);

      *(_QWORD *)&v117 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v48 + 12) = 2082;
      v118 = objc_msgSend(v45, "remObjectID", v117);
      if (v118)
      {
        v119 = v118;
        v120 = objc_msgSend(v118, "description");

        v121 = static String._unconditionallyBridgeFromObjectiveC(_:)(v120);
        v123 = v122;

      }
      else
      {
        v123 = 0xE300000000000000;
        v121 = 7104878;
      }
      v137 = sub_10001A820(v121, v123, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "MERGE.LOCAL: ...no matching local reminder found for cloud reminder {reminder: %{public}s, list: %{public}s}", (uint8_t *)v48, 0x16u);
      swift_arrayDestroy(v49, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);

    }
    else
    {

    }
  }
}

_QWORD *REMCDList.objectsToBeDeletedBeforeThisObject()()
{
  void *v0;
  id v1;
  id v2;
  id v3;

  v1 = objc_msgSend(v0, "reminders");
  if (v1)
    sub_1001E31E8(v1);
  v2 = objc_msgSend(v0, "childLists");
  if (v2)
    sub_1001E31E8(v2);
  v3 = objc_msgSend(v0, "childSmartLists");
  if (v3)
    sub_1001E31E8(v3);
  return _swiftEmptyArrayStorage;
}

Swift::Void __swiftcall REMCDList.restoreParentReferenceAfterUnmarkingForDeletion()()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(v0, "account");
  objc_msgSend(v0, "setParentAccount:", v1);

}

unint64_t sub_1002C65F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_1002C7D50(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (unint64_t *)&qword_10083B380, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_1002C6690(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1002C701C(a1, v4, &qword_100843EA0, NSManagedObjectID_ptr);
}

unint64_t sub_1002C66DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1002C701C(a1, v4, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
}

unint64_t sub_1002C6730(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1002C712C(a1, v4);
}

unint64_t sub_1002C6760(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return sub_1002C7234(a1, v7);
}

unint64_t sub_1002C67EC(unsigned __int8 a1)
{
  uint64_t v1;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, *(_QWORD *)(v1 + 40));
  Hasher._combine(_:)(a1);
  v3 = Hasher._finalize()();
  return sub_1002C73A8(a1, v3);
}

unint64_t sub_1002C6844(void *a1)
{
  return sub_1002C68FC(a1, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
}

unint64_t sub_1002C6858(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(a2);
    String.hash(into:)(v7, a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v5 = Hasher._finalize()();
  return sub_1002C7448(a1, a2, v5);
}

unint64_t sub_1002C68E8(void *a1)
{
  return sub_1002C68FC(a1, &qword_10083AA30, off_1007D6658);
}

unint64_t sub_1002C68FC(void *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  id v7;
  Swift::Int v8;
  _QWORD v10[9];

  Hasher.init(_seed:)(v10, *(_QWORD *)(v3 + 40));
  if (a1)
  {
    Hasher._combine(_:)(1u);
    v7 = a1;
    NSObject.hash(into:)(v10);

  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v8 = Hasher._finalize()();
  return sub_1002C7510(a1, v8, a2, a3);
}

unint64_t sub_1002C699C(Swift::UInt a1, Swift::UInt a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  v5 = Hasher._finalize()();
  return sub_1002C7608(a1, a2, v5);
}

unint64_t sub_1002C6A08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), a1);
  return sub_1002C7684(a1, v3);
}

unint64_t sub_1002C6A38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for CodingUserInfoKey(0);
  v6 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, &protocol witness table for CodingUserInfoKey);
  return sub_1002C7720(a1, v6);
}

unint64_t sub_1002C6A88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1002C7848(a1, v4);
}

unint64_t sub_1002C6AB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1002C701C(a1, v4, &qword_10083DFC8, REMList_ptr);
}

unint64_t sub_1002C6B04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1002C701C(a1, v4, (unint64_t *)&unk_10083FDE0, REMAssignment_ptr);
}

unint64_t sub_1002C6B50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1002C701C(a1, v4, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
}

unint64_t sub_1002C6B9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1002C701C(a1, v4, (unint64_t *)&qword_100838010, NSObject_ptr);
}

unint64_t sub_1002C6BE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1002C701C(a1, v4, (unint64_t *)&unk_10083BE40, off_1007D66D0);
}

unint64_t sub_1002C6C34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1002C701C(a1, v4, &qword_100844060, CKRecordID_ptr);
}

unint64_t sub_1002C6C80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1002C701C(a1, v4, (unint64_t *)&unk_10083D430, REMContactRepresentation_ptr);
}

unint64_t sub_1002C6CCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  Swift::Int v12;
  _QWORD v15[9];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v8);
  v10 = (char *)&v15[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)(v15, *(_QWORD *)(v2 + 40));
  sub_100008868(a1, (uint64_t)v10, (uint64_t *)&unk_100839C80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    v11 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v15, v4, v11);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v12 = Hasher._finalize()();
  return sub_1002C7A24(a1, v12);
}

unint64_t sub_1002C6E44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType(0);
  v6 = sub_10009FC50(&qword_100844598, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributesHarvester.CachedSuggestionType);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_1002C7D50(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType, &qword_1008445A0, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributesHarvester.CachedSuggestionType);
}

unint64_t sub_1002C6EDC(double a1)
{
  uint64_t v1;
  double v3;
  uint64_t v4;

  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = a1;
  else
    v3 = 0.0;
  v4 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), *(_QWORD *)&v3);
  return sub_1002C7E80(v4, a1);
}

unint64_t sub_1002C6F10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v1 + 40));
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 16);
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v3);
    String.hash(into:)(v7, v4, v3);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v5 = Hasher._finalize()();
  return sub_1002C7F18(a1, v5);
}

unint64_t sub_1002C6FAC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  Swift::Int v5;
  _QWORD v7[9];

  v2 = v1;
  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  v4 = a1;
  NSObject.hash(into:)(v7);

  v5 = Hasher._finalize()();
  return sub_1002C790C((uint64_t)v4, v5);
}

unint64_t sub_1002C701C(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  id v8;
  char v9;
  uint64_t v10;
  id v11;
  char v12;

  v5 = v4 + 64;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  i = a2 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_1000151B0(0, a3, a4);
    v8 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * i);
    v9 = static NSObject.== infix(_:_:)(v8);

    if ((v9 & 1) == 0)
    {
      v10 = ~v6;
      for (i = (i + 1) & v10; ((*(_QWORD *)(v5 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v10)
      {
        v11 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * i);
        v12 = static NSObject.== infix(_:_:)(v11);

        if ((v12 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1002C712C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    type metadata accessor for REMObjectID_Codable(0);
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1002C7234(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_1002C73A8(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1002C7448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = ~v5;
    v10 = *(_QWORD *)(v3 + 48);
    do
    {
      v11 = (_QWORD *)(v10 + 16 * v6);
      v12 = v11[1];
      if (v12)
      {
        if (a2)
        {
          v13 = *v11 == a1 && v12 == a2;
          if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
            return v6;
        }
      }
      else if (!a2)
      {
        return v6;
      }
      v6 = (v6 + 1) & v9;
    }
    while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  }
  return v6;
}

unint64_t sub_1002C7510(void *a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v10;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  char v16;

  v5 = v4 + 64;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = a2 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
  {
    v10 = v4;
    v12 = ~v6;
    do
    {
      v13 = *(void **)(*(_QWORD *)(v10 + 48) + 8 * v7);
      if (v13)
      {
        if (a1)
        {
          sub_1000151B0(0, a3, a4);
          v14 = v13;
          v15 = a1;
          v16 = static NSObject.== infix(_:_:)(v14);

          if ((v16 & 1) != 0)
            return v7;
        }
      }
      else if (!a1)
      {
        return v7;
      }
      v7 = (v7 + 1) & v12;
    }
    while (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

unint64_t sub_1002C7608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    do
    {
      v8 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * result);
      v10 = *v8;
      v9 = v8[1];
      if (v10 == a1 && v9 == a2)
        break;
      result = (result + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t sub_1002C7684(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1002C7720(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  v17 = a1;
  v5 = type metadata accessor for CodingUserInfoKey(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v17, v5, &protocol witness table for CodingUserInfoKey);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_1002C7848(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_1002933E0(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_10020DA24((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1002C790C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = static NSObject.== infix(_:_:)(v6);

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = static NSObject.== infix(_:_:)(v9);

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1002C7A24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  char *v27;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = v2;
  v35 = a1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v30 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_10083B370);
  __chkstk_darwin(v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v11);
  __chkstk_darwin(v12);
  v16 = (char *)&v29 - v15;
  v17 = v3 + 64;
  v36 = v3;
  v18 = -1 << *(_BYTE *)(v3 + 32);
  v19 = a2 & ~v18;
  if (((*(_QWORD *)(v3 + 64 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
  {
    v32 = v14;
    v33 = ~v18;
    v34 = *(_QWORD *)(v13 + 72);
    v29 = v8;
    v31 = v3 + 64;
    while (1)
    {
      sub_100008868(*(_QWORD *)(v36 + 48) + v34 * v19, (uint64_t)v16, (uint64_t *)&unk_100839C80);
      v20 = (uint64_t)&v10[*(int *)(v8 + 48)];
      sub_100008868((uint64_t)v16, (uint64_t)v10, (uint64_t *)&unk_100839C80);
      sub_100008868(v35, v20, (uint64_t *)&unk_100839C80);
      v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
      if (v21(v10, 1, v5) == 1)
        break;
      v22 = v32;
      sub_100008868((uint64_t)v10, v32, (uint64_t *)&unk_100839C80);
      if (v21((char *)v20, 1, v5) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v22, v5);
        v17 = v31;
LABEL_4:
        sub_10000882C((uint64_t)v10, (uint64_t *)&unk_10083B370);
        sub_10000882C((uint64_t)v16, (uint64_t *)&unk_100839C80);
        goto LABEL_5;
      }
      v23 = v30;
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v30, v20, v5);
      v24 = sub_10009FC50((unint64_t *)&qword_10083B380, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v25 = dispatch thunk of static Equatable.== infix(_:_:)(v22, v23, v5, v24);
      v26 = *(void (**)(char *, uint64_t))(v6 + 8);
      v27 = v23;
      v8 = v29;
      v26(v27, v5);
      v26((char *)v22, v5);
      sub_10000882C((uint64_t)v10, (uint64_t *)&unk_100839C80);
      sub_10000882C((uint64_t)v16, (uint64_t *)&unk_100839C80);
      v17 = v31;
      if ((v25 & 1) != 0)
        return v19;
LABEL_5:
      v19 = (v19 + 1) & v33;
      if (((*(_QWORD *)(v17 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
        return v19;
    }
    if (v21((char *)v20, 1, v5) == 1)
    {
      sub_10000882C((uint64_t)v10, (uint64_t *)&unk_100839C80);
      sub_10000882C((uint64_t)v16, (uint64_t *)&unk_100839C80);
      return v19;
    }
    goto LABEL_4;
  }
  return v19;
}

unint64_t sub_1002C7D50(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  unint64_t *v22;
  uint64_t v23;

  v22 = a4;
  v23 = a5;
  v6 = v5;
  v20 = a1;
  v21 = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - v10;
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = a2 & ~v12;
  if (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(_QWORD *)(v6 + 48) + v15 * v13, v8);
      v17 = sub_10009FC50(v22, v21, v23);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v20, v8, v17);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v18 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

unint64_t sub_1002C7E80(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a1 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = *(_QWORD *)(v2 + 48);
    if (*(double *)(v6 + 8 * result) != a2)
    {
      v7 = ~v4;
      for (result = (result + 1) & v7;
            ((*(_QWORD *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v7)
      {
        if (*(double *)(v6 + 8 * result) == a2)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1002C7F18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = ~v4;
    v7 = *(_QWORD *)(v2 + 48);
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    do
    {
      v10 = *(_QWORD *)(v7 + 8 * v5);
      v11 = *(_QWORD *)(v10 + 24);
      if (v11)
      {
        if (v9)
        {
          v12 = *(_QWORD *)(v10 + 16);
          v13 = v12 == v8 && v11 == v9;
          if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(v12, v11, v8, v9, 0) & 1) != 0)
            return v5;
        }
      }
      else if (!v9)
      {
        return v5;
      }
      v5 = (v5 + 1) & v6;
    }
    while (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

uint64_t sub_1002C7FDC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, &qword_1008437A0, type metadata accessor for RDStoreControllerNotificationCenter.Observer);
}

_QWORD *sub_1002C7FF0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100844818, (uint64_t *)&unk_100844820);
}

uint64_t sub_1002C8004(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, &qword_100843680, type metadata accessor for RDXPCEventStream.AlarmHandler);
}

uint64_t sub_1002C8018(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_10001A630(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = *(_QWORD *)(a6(0) - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (unint64_t)v18 + v22;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(_QWORD *)(v21 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v22);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v22);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1002EB318(0, v11, v23, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

_QWORD *sub_1002C8224(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A630((uint64_t *)&unk_10083A340);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1002E6DF4(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1002C8330(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C9D24(a1, a2, a3, a4, &qword_100843900, &qword_100843908);
}

_QWORD *sub_1002C8344(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843700, &qword_100843708);
}

_QWORD *sub_1002C8358(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A630((uint64_t *)&unk_100839E80);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1002E764C(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002C8464(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8518(a1, a2, a3, a4, &qword_10083F500, &qword_100844170);
}

uint64_t sub_1002C8478(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, &qword_10083BFA0, (uint64_t (*)(_QWORD))&type metadata accessor for REMRemindersListDataView.ReminderLite);
}

uint64_t sub_1002C848C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, &qword_100844030, (uint64_t (*)(_QWORD))&type metadata accessor for REMRemindersListDataView.SectionLite);
}

uint64_t sub_1002C84A0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, &qword_10083F530, (uint64_t (*)(_QWORD))&type metadata accessor for REMAccountsListDataView.Model.PinnedList);
}

uint64_t sub_1002C84B4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, &qword_100843B30, (uint64_t (*)(_QWORD))&type metadata accessor for REMManualOrdering.PinnedList);
}

uint64_t sub_1002C84C8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, &qword_100844420, (uint64_t (*)(_QWORD))&type metadata accessor for REMListPickerDataView.Model.Account);
}

uint64_t sub_1002C84DC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, (uint64_t *)&unk_1008444A0, (uint64_t (*)(_QWORD))&type metadata accessor for REMSearchCriterion);
}

uint64_t sub_1002C84F0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, &qword_10083F590, (uint64_t (*)(_QWORD))&type metadata accessor for REMRemindersListDataView.ListsModel.Sublist);
}

uint64_t sub_1002C8504(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8518(a1, a2, a3, a4, (uint64_t *)&unk_100843860, &qword_100846B60);
}

uint64_t sub_1002C8518(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_10001A630(a5);
  v14 = *(_QWORD *)(sub_10001A630(a6) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = *(_QWORD *)(sub_10001A630(a6) - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (unint64_t)v18 + v22;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(_QWORD *)(v21 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v22);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v22);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1002EAE70(0, v11, v23, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_1002C8724(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, &qword_100844558, (uint64_t (*)(_QWORD))&type metadata accessor for REMRemindersListDataView.TodayGroupModel.Group);
}

uint64_t sub_1002C8738(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, &qword_1008443F0, (uint64_t (*)(_QWORD))&type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List);
}

uint64_t sub_1002C874C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, (uint64_t *)&unk_100844670, (uint64_t (*)(_QWORD))&type metadata accessor for REMRemindersListDataView.DatesModel.Group);
}

uint64_t sub_1002C8760(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, &qword_100844538, (uint64_t (*)(_QWORD))&type metadata accessor for REMRemindersListDataView.CompletedDateBucketsModel.Day);
}

uint64_t sub_1002C8774(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, &qword_100844540, (uint64_t (*)(_QWORD))&type metadata accessor for REMRemindersListDataView.CompletedDateBucketsModel.Bucket);
}

uint64_t sub_1002C8788(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, &qword_1008444B8, (uint64_t (*)(_QWORD))&type metadata accessor for REMRemindersListDataView.ScheduledDateBucketsModel.Day);
}

uint64_t sub_1002C879C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, &qword_1008444C8, (uint64_t (*)(_QWORD))&type metadata accessor for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket);
}

uint64_t sub_1002C87B0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8518(a1, a2, a3, a4, &qword_100844610, &qword_100844618);
}

uint64_t sub_1002C87C4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, (uint64_t *)&unk_100850D50, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
}

_QWORD *sub_1002C87D8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A630(&qword_100841C90);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1002E7F9C(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002C88E4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, &qword_1008434A0, (uint64_t (*)(_QWORD))&type metadata accessor for REMAccountsListDataView.Model.GroupChild);
}

uint64_t sub_1002C88F8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, &qword_10083F528, (uint64_t (*)(_QWORD))&type metadata accessor for REMAccountsListDataView.Model.AccountChild);
}

_QWORD *sub_1002C890C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, (uint64_t *)&unk_100844390, (uint64_t *)&unk_10083FA50);
}

_QWORD *sub_1002C8920(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_10001A630(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 16 * v12 + 32, 7);
      v15 = j__malloc_size(v14);
      v16 = v15 - 32;
      if (v15 < 32)
        v16 = v15 - 17;
      v14[2] = v11;
      v14[3] = 2 * (v16 >> 4);
      v17 = v14 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v17 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v14 != a4 || v17 >= &a4[2 * v11 + 4])
          memmove(v17, a4 + 4, 16 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1002E97D8(0, v11, (unint64_t)v17, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1002C8A38(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100844378, (uint64_t *)&unk_10083FA50);
}

_QWORD *sub_1002C8A4C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A630((uint64_t *)&unk_100843C60);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1002E930C(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1002C8B58(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8C98(a1, a2, a3, a4, &qword_100843C58);
}

_QWORD *sub_1002C8B64(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A630(&qword_100843C50);
      v11 = (_QWORD *)swift_allocObject(v10, 144 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 144);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[18 * v8 + 4])
          memmove(v13, a4 + 4, 144 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1002E98DC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1002C8C8C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8C98(a1, a2, a3, a4, &qword_100843C48);
}

_QWORD *sub_1002C8C98(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_10001A630(a5);
      v12 = (_QWORD *)swift_allocObject(v11, 8 * v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v14 = v13 - 32;
      if (v13 < 32)
        v14 = v13 - 25;
      v12[2] = v9;
      v12[3] = 2 * (v14 >> 3);
      v15 = v12 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v15 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[v9 + 4])
          memmove(v15, a4 + 4, 8 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1002E930C(0, v9, (char *)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1002C8DA0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A630(&qword_1008447D0);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1002E99D0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002C8EC4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, &qword_10083DA80, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

_QWORD *sub_1002C8ED8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C93F8(a1, a2, a3, a4, &qword_10083F510, (uint64_t *)&unk_100844340);
}

_QWORD *sub_1002C8EEC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C9204(a1, a2, a3, a4, (uint64_t *)&unk_10083D630, (uint64_t *)&unk_1008473E0);
}

_QWORD *sub_1002C8F00(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8F0C(a1, a2, a3, a4, &qword_100843E60);
}

_QWORD *sub_1002C8F0C(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_10001A630(a5);
      v12 = (_QWORD *)swift_allocObject(v11, v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v12[2] = v9;
      v12[3] = 2 * v13 - 64;
      v14 = v12 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v12 != a4 || v14 >= (_QWORD *)((char *)a4 + v9 + 32))
          memmove(v14, a4 + 4, v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1002E8F10(0, v9, (char *)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1002C9000(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8F0C(a1, a2, a3, a4, &qword_100843E48);
}

_QWORD *sub_1002C900C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8F0C(a1, a2, a3, a4, &qword_100843E40);
}

_QWORD *sub_1002C9018(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8F0C(a1, a2, a3, a4, &qword_100843EC8);
}

_QWORD *sub_1002C9024(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8F0C(a1, a2, a3, a4, &qword_100843EB0);
}

_QWORD *sub_1002C9030(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8F0C(a1, a2, a3, a4, &qword_100843E68);
}

_QWORD *sub_1002C903C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8F0C(a1, a2, a3, a4, &qword_1008412C8);
}

_QWORD *sub_1002C9048(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8F0C(a1, a2, a3, a4, &qword_100843C90);
}

_QWORD *sub_1002C9054(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8F0C(a1, a2, a3, a4, &qword_10083D0E0);
}

_QWORD *sub_1002C9060(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8F0C(a1, a2, a3, a4, (uint64_t *)&unk_100843AA0);
}

_QWORD *sub_1002C906C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8F0C(a1, a2, a3, a4, &qword_100843A98);
}

_QWORD *sub_1002C9078(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8F0C(a1, a2, a3, a4, &qword_10083E868);
}

_QWORD *sub_1002C9084(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8F0C(a1, a2, a3, a4, &qword_100843BA0);
}

_QWORD *sub_1002C9090(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8F0C(a1, a2, a3, a4, (uint64_t *)&unk_100843B90);
}

_QWORD *sub_1002C909C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8F0C(a1, a2, a3, a4, &qword_1008446F0);
}

_QWORD *sub_1002C90A8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8F0C(a1, a2, a3, a4, &qword_1008446D8);
}

_QWORD *sub_1002C90B4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8F0C(a1, a2, a3, a4, &qword_100843A78);
}

_QWORD *sub_1002C90C0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8F0C(a1, a2, a3, a4, &qword_100843A60);
}

_QWORD *sub_1002C90CC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8F0C(a1, a2, a3, a4, &qword_100843C00);
}

_QWORD *sub_1002C90D8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8F0C(a1, a2, a3, a4, &qword_100843BE8);
}

_QWORD *sub_1002C90E4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8F0C(a1, a2, a3, a4, &qword_1008439B0);
}

_QWORD *sub_1002C90F0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8F0C(a1, a2, a3, a4, &qword_100843968);
}

_QWORD *sub_1002C90FC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8F0C(a1, a2, a3, a4, (uint64_t *)&unk_100843A30);
}

_QWORD *sub_1002C9108(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8F0C(a1, a2, a3, a4, &qword_100843A18);
}

_QWORD *sub_1002C9114(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, (uint64_t *)&unk_1008439B8, (uint64_t *)&unk_10083FA50);
}

_QWORD *sub_1002C9128(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843C20, &qword_100843C28);
}

_QWORD *sub_1002C913C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843990, &qword_100843998);
}

_QWORD *sub_1002C9150(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843C30, &qword_100843C38);
}

uint64_t sub_1002C9164(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8518(a1, a2, a3, a4, &qword_1008442D8, &qword_1008442E0);
}

_QWORD *sub_1002C9178(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843DB0, &qword_100843DB8);
}

_QWORD *sub_1002C918C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843DC0, &qword_100843DC8);
}

uint64_t sub_1002C91A0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, &qword_10083F508, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
}

_QWORD *sub_1002C91B4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, (uint64_t *)&unk_1008442C8, (uint64_t *)&unk_10083FA50);
}

_QWORD *sub_1002C91C8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843AE8, &qword_100843AF0);
}

_QWORD *sub_1002C91DC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843AF8, &qword_100843B00);
}

_QWORD *sub_1002C91F0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C9204(a1, a2, a3, a4, &qword_1008442A8, &qword_1008442B0);
}

_QWORD *sub_1002C9204(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_10001A630(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 8 * v12 + 32, 7);
      v15 = j__malloc_size(v14);
      v16 = v15 - 32;
      if (v15 < 32)
        v16 = v15 - 25;
      v14[2] = v11;
      v14[3] = 2 * (v16 >> 3);
      v17 = v14 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v17 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v14 != a4 || v17 >= &a4[v11 + 4])
          memmove(v17, a4 + 4, 8 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1002E9FF4(0, v11, (unint64_t)v17, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002C931C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, &qword_10083DAF8, type metadata accessor for RDHashtagLabelUpdater.HashtagTombstone);
}

_QWORD *sub_1002C9330(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100844260, &qword_100844268);
}

_QWORD *sub_1002C9344(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100844270, (uint64_t *)&unk_100844278);
}

_QWORD *sub_1002C9358(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100844228, &qword_100844230);
}

_QWORD *sub_1002C936C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100844238, (uint64_t *)&unk_100844240);
}

_QWORD *sub_1002C9380(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100844200, &qword_100844208);
}

_QWORD *sub_1002C9394(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100844210, &qword_100844218);
}

_QWORD *sub_1002C93A8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_1008441C8, &qword_1008441D0);
}

_QWORD *sub_1002C93BC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_1008441D8, (uint64_t *)&unk_1008441E0);
}

_QWORD *sub_1002C93D0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002CA0E8(a1, a2, a3, a4, &qword_1008447C8);
}

_QWORD *sub_1002C93E4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C93F8(a1, a2, a3, a4, &qword_1008447A0, &qword_1008447A8);
}

_QWORD *sub_1002C93F8(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_10001A630(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 40 * v12 + 32, 7);
      v15 = j__malloc_size(v14);
      v14[2] = v11;
      v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
      v16 = v14 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v14 != a4 || v16 >= &a4[5 * v11 + 4])
          memmove(v16, a4 + 4, 40 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v16 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1002EA690(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1002C9524(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8F0C(a1, a2, a3, a4, (uint64_t *)&unk_1008447B0);
}

_QWORD *sub_1002C9530(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A630((uint64_t *)&unk_100844790);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1002E8FF4(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1002C963C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A630((uint64_t *)&unk_100844720);
      v11 = (_QWORD *)swift_allocObject(v10, 4 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 29;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 2);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= (_QWORD *)((char *)a4 + 4 * v8 + 32))
          memmove(v14, a4 + 4, 4 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100018904(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1002C9748(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A630(&qword_10083F618);
      v11 = (_QWORD *)swift_allocObject(v10, 48 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[6 * v8 + 4])
          memmove(v13, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1002EA59C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1002C986C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A630(&qword_1008447C0);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1002EA498(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1002C9978(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A630(&qword_100843870);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1002E930C(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1002C9A84(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8F0C(a1, a2, a3, a4, &qword_100844778);
}

_QWORD *sub_1002C9A90(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C93F8(a1, a2, a3, a4, &qword_1008440B8, &qword_1008440C0);
}

_QWORD *sub_1002C9AA4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A630(&qword_100844068);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1002E94E4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1002C9BC8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A630((uint64_t *)&unk_100844070);
      v11 = (_QWORD *)swift_allocObject(v10, (v9 << 6) | 0x20, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 + 31;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 6);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[8 * v8 + 4])
          memmove(v14, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1002E93F4(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1002C9CD4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C9204(a1, a2, a3, a4, &qword_10083F570, (uint64_t *)&unk_100844080);
}

uint64_t sub_1002C9CE8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, &qword_1008440A8, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
}

uint64_t sub_1002C9CFC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, &qword_1008440B0, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
}

_QWORD *sub_1002C9D10(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C9D24(a1, a2, a3, a4, &qword_10083F438, (uint64_t *)&unk_100844090);
}

_QWORD *sub_1002C9D24(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_10001A630(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 24 * v12 + 32, 7);
      v15 = j__malloc_size(v14);
      v14[2] = v11;
      v14[3] = 2 * ((uint64_t)(v15 - 32) / 24);
      v16 = v14 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v14 != a4 || v16 >= &a4[3 * v11 + 4])
          memmove(v16, a4 + 4, 24 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v16 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1002E9204(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1002C9E54(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A630(&qword_1008401E0);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1002E90FC(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002C9F60(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8518(a1, a2, a3, a4, &qword_1008447E0, &qword_1008447E8);
}

_QWORD *sub_1002C9F74(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843CB8, &qword_100843CC0);
}

_QWORD *sub_1002C9F88(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843CC8, &qword_100843CD0);
}

_QWORD *sub_1002C9F9C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843CF0, &qword_100843CF8);
}

_QWORD *sub_1002C9FB0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843D00, &qword_100843D08);
}

_QWORD *sub_1002C9FC4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843D18, &qword_100843D20);
}

_QWORD *sub_1002C9FD8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843D28, &qword_100843D30);
}

_QWORD *sub_1002C9FEC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843D50, &qword_100843D58);
}

_QWORD *sub_1002CA000(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843D60, &qword_100843D68);
}

_QWORD *sub_1002CA014(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843D78, &qword_100843D80);
}

_QWORD *sub_1002CA028(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843D88, &qword_100843D90);
}

_QWORD *sub_1002CA03C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843DD8, &qword_100843DE0);
}

_QWORD *sub_1002CA050(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843DE8, &qword_100843DF0);
}

uint64_t sub_1002CA064(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, &qword_100844810, type metadata accessor for RDTimelineEngineReminder);
}

uint64_t sub_1002CA078(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, &qword_10083F658, type metadata accessor for RDTimelineEngineDueReminder);
}

uint64_t sub_1002CA08C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, (uint64_t *)&unk_100844800, type metadata accessor for RDTimelineEngineLocationReminder);
}

uint64_t sub_1002CA0A0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, (uint64_t *)&unk_10084BDC0, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
}

uint64_t sub_1002CA0B4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8518(a1, a2, a3, a4, &qword_100844658, (uint64_t *)&unk_100844660);
}

_QWORD *sub_1002CA0C8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8C98(a1, a2, a3, a4, &qword_10083FFF0);
}

_QWORD *sub_1002CA0D4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002CA0E8(a1, a2, a3, a4, &qword_10083F5B8);
}

_QWORD *sub_1002CA0E8(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_10001A630(a5);
      v12 = (_QWORD *)swift_allocObject(v11, 56 * v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v12[2] = v9;
      v12[3] = 2 * ((uint64_t)(v13 - 32) / 56);
      v14 = v12 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v12 != a4 || v14 >= &a4[7 * v9 + 4])
          memmove(v14, a4 + 4, 56 * v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1002EA114(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v12;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1002CA218(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A630(&qword_100844640);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1002EA798(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1002CA338(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A630(&qword_100843E88);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1002EA88C(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1002CA444(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A630(&qword_100843748);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1002E95D8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002CA568(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8518(a1, a2, a3, a4, (uint64_t *)&unk_100844850, &qword_100842CF8);
}

uint64_t sub_1002CA57C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, &qword_100844840, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);
}

_QWORD *sub_1002CA590(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8C98(a1, a2, a3, a4, &qword_100844710);
}

_QWORD *sub_1002CA59C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_1008439E8, &qword_1008439F0);
}

_QWORD *sub_1002CA5B0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843F70, &qword_100843F78);
}

_QWORD *sub_1002CA5C4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843F80, &qword_100843F88);
}

_QWORD *sub_1002CA5D8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843FA8, &qword_100843FB0);
}

_QWORD *sub_1002CA5EC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843FB8, &qword_100843FC0);
}

_QWORD *sub_1002CA600(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C9D24(a1, a2, a3, a4, &qword_100843F38, &qword_100843F40);
}

uint64_t sub_1002CA614(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8518(a1, a2, a3, a4, &qword_100843788, (uint64_t *)&unk_100843790);
}

_QWORD *sub_1002CA628(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C9D24(a1, a2, a3, a4, &qword_1008438B8, &qword_1008438C0);
}

_QWORD *sub_1002CA63C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A630(&qword_100843890);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1002E96CC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1002CA760(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C9D24(a1, a2, a3, a4, &qword_10083F650, (uint64_t *)&unk_100843690);
}

uint64_t sub_1002CA774(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, (uint64_t *)&unk_100844620, (uint64_t (*)(_QWORD))&type metadata accessor for REMSuggestedAttributeOutput);
}

_QWORD *sub_1002CA788(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A630(&qword_1008445D0);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1002E8540(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1002CA894(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C9D24(a1, a2, a3, a4, (uint64_t *)&unk_1008445C0, &qword_10083F5A8);
}

_QWORD *sub_1002CA8A8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A630((uint64_t *)&unk_1008445E0);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1002E8438(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002CA9B4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, &qword_100844128, (uint64_t (*)(_QWORD))&type metadata accessor for REMAccountSnapshotSummary);
}

uint64_t sub_1002CA9C8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8518(a1, a2, a3, a4, &qword_1008437A8, (uint64_t *)&unk_1008437B0);
}

_QWORD *sub_1002CA9DC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100844110, (uint64_t *)&unk_10083FA50);
}

uint64_t sub_1002CA9F0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, &qword_100844488, (uint64_t (*)(_QWORD))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicate);
}

uint64_t sub_1002CAA04(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, &qword_100844020, type metadata accessor for RDSavedURLAttachment);
}

uint64_t sub_1002CAA18(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, (uint64_t *)&unk_10083FCD0, type metadata accessor for RDPermanentlyHiddenReminder);
}

_QWORD *sub_1002CAA2C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A630(&qword_1008438E8);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1002E8540(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1002CAB38(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A630(&qword_100843F18);
      v11 = (_QWORD *)swift_allocObject(v10, 48 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[6 * v8 + 4])
          memmove(v13, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1002EB224(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002CAC58(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8018(a1, a2, a3, a4, &qword_100844718, (uint64_t (*)(_QWORD))&type metadata accessor for REMFeatureFlags);
}

_QWORD *sub_1002CAC6C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_1008446C8, &qword_1008446D0);
}

_QWORD *sub_1002CAC80(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_1008446E0, &qword_1008446E8);
}

uint64_t sub_1002CAC94(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002C8518(a1, a2, a3, a4, (uint64_t *)&unk_100843EE0, (uint64_t *)&unk_100850D60);
}

_QWORD *sub_1002CACA8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843958, &qword_100843960);
}

_QWORD *sub_1002CACBC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_1008439A0, &qword_1008439A8);
}

_QWORD *sub_1002CACD0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843A08, &qword_100843A10);
}

_QWORD *sub_1002CACE4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843A20, &qword_100843A28);
}

_QWORD *sub_1002CACF8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843A50, &qword_100843A58);
}

_QWORD *sub_1002CAD0C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843A68, &qword_100843A70);
}

_QWORD *sub_1002CAD20(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843A88, &qword_100843A90);
}

_QWORD *sub_1002CAD34(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843AB8, (uint64_t *)&unk_100843AC0);
}

_QWORD *sub_1002CAD48(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843B80, &qword_100843B88);
}

_QWORD *sub_1002CAD5C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843BA8, (uint64_t *)&unk_100843BB0);
}

_QWORD *sub_1002CAD70(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843BD8, &qword_100843BE0);
}

_QWORD *sub_1002CAD84(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843BF0, &qword_100843BF8);
}

_QWORD *sub_1002CAD98(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843C80, &qword_100843C88);
}

_QWORD *sub_1002CADAC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843C98, (uint64_t *)&unk_100843CA0);
}

_QWORD *sub_1002CADC0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843E30, &qword_100843E38);
}

_QWORD *sub_1002CADD4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843E50, &qword_100843E58);
}

_QWORD *sub_1002CADE8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002C8920(a1, a2, a3, a4, &qword_100843EB8, &qword_100843EC0);
}

void sub_1002CADFC(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a4();
  v7 = (void *)v6;
  v8 = *a1 + 8;
  if (v6)
    v10 = v6;
  else
    v10 = 0;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
  *a1 = v8;
  v9 = *a2;
  if (*a2)
  {
    *v9 = v7;
    *a2 = v9 + 1;
  }
  else
  {

  }
}

uint64_t sub_1002CAEAC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_10001A6DC(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  v14 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1002D6574();
    v10 = v14;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v7 + 8));
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 16 * v7);
  sub_100289B9C(v7, v10);
  v12 = *v3;
  *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_1002CAF90(uint64_t a1, uint64_t a2)
{
  return sub_1002CB19C(a1, a2, (void (*)(unint64_t, uint64_t, __n128))sub_100289D70, &qword_100844518);
}

double sub_1002CAFA4@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v3 = v2;
  swift_bridgeObjectRetain(*v3);
  v6 = sub_1002C6A38(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v9 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1002D6CA8();
      v9 = v13;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = type metadata accessor for CodingUserInfoKey(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
    sub_10001A6CC((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6), a2);
    sub_100289D78(v6, v9);
    *v3 = v9;
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

double sub_1002CB0A0@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_1002C6A88(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1002D6F10();
      v10 = v13;
    }
    sub_10020DA24(*(_QWORD *)(v10 + 48) + 40 * v7);
    sub_10001A6CC((_OWORD *)(*(_QWORD *)(v10 + 56) + 32 * v7), a2);
    sub_100289FFC(v7, v10);
    v11 = *v3;
    *v3 = v10;
    *(_QWORD *)&result = swift_bridgeObjectRelease(v11).n128_u64[0];
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_1002CB188(uint64_t a1, uint64_t a2)
{
  return sub_1002CB19C(a1, a2, (void (*)(unint64_t, uint64_t, __n128))sub_100289D70, &qword_100843B08);
}

uint64_t sub_1002CB19C(uint64_t a1, uint64_t a2, void (*a3)(unint64_t, uint64_t, __n128), uint64_t *a4)
{
  _QWORD *v4;
  _QWORD *v7;
  unint64_t v10;
  char v11;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v17;

  v7 = v4;
  swift_bridgeObjectRetain(*v7);
  v10 = sub_10001A6DC(a1, a2);
  LOBYTE(a2) = v11;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
  v13 = *v7;
  v17 = *v7;
  *v7 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1002DA91C(a4);
    v13 = v17;
  }
  v14 = swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v10);
  a3(v10, v13, v14);
  *v7 = v13;
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1002CB27C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __n128 v14;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;

  v3 = v2;
  swift_bridgeObjectRetain(*v3);
  v6 = sub_1002C65F8(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v9 = *v3;
    v18 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1002D712C();
      v9 = v18;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = type metadata accessor for UUID(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(_QWORD *)(v12 + 72) * v6;
    (*(void (**)(unint64_t, uint64_t))(v12 + 8))(v10 + v13, v11);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 32))(a2, *(_QWORD *)(v9 + 56) + v13, v11);
    sub_10028A1C4(v6, v9);
    *v3 = v9;
    v14 = swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))(v12 + 56))(a2, 0, 1, v11, v14);
  }
  else
  {
    v16 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v16 - 8) + 56))(a2, 1, 1, v16, v17);
  }
}

double sub_1002CB3AC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_10001A6DC(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1002D7BCC();
      v12 = v15;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    sub_10001A6CC((_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v9), a3);
    sub_10028A480(v9, v12);
    v13 = *v4;
    *v4 = v12;
    *(_QWORD *)&result = swift_bridgeObjectRelease(v13).n128_u64[0];
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_1002CB49C(uint64_t a1, uint64_t a2)
{
  return sub_1002CB6E8(a1, a2, (void (*)(unint64_t, uint64_t, __n128))sub_100289D70, &qword_100843718);
}

uint64_t sub_1002CB4B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_10001A6DC(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v21 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1002D95F0((uint64_t (*)(_QWORD))&type metadata accessor for Date, &qword_100843B10);
      v12 = v21;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    v13 = *(_QWORD *)(v12 + 56);
    v14 = type metadata accessor for Date(0);
    v15 = *(_QWORD *)(v14 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 32))(a3, v13 + *(_QWORD *)(v15 + 72) * v9, v14);
    sub_10028A818(v9, v12);
    v16 = *v4;
    *v4 = v12;
    v17 = swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))(v15 + 56))(a3, 0, 1, v14, v17);
  }
  else
  {
    v19 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v19 - 8) + 56))(a3, 1, 1, v19, v20);
  }
}

double sub_1002CB5F0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_10001A6DC(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1002D8A74();
      v12 = v15;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    sub_10001BCA8((__int128 *)(*(_QWORD *)(v12 + 56) + 40 * v9), a3);
    sub_10028AA14(v9, v12);
    v13 = *v4;
    *v4 = v12;
    *(_QWORD *)&result = swift_bridgeObjectRelease(v13).n128_u64[0];
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1002CB6E8(uint64_t a1, uint64_t a2, void (*a3)(unint64_t, uint64_t, __n128), uint64_t *a4)
{
  _QWORD *v4;
  _QWORD *v7;
  unint64_t v10;
  char v11;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v17;

  v7 = v4;
  swift_bridgeObjectRetain(*v7);
  v10 = sub_10001A6DC(a1, a2);
  LOBYTE(a2) = v11;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
  v13 = *v7;
  v17 = *v7;
  *v7 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1002DA768(a4);
    v13 = v17;
  }
  v14 = swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v10);
  a3(v10, v13, v14);
  *v7 = v13;
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1002CB7C8(void *a1)
{
  return sub_1002CBDBC(a1, (uint64_t)sub_1002C66DC, (void (*)(uint64_t, uint64_t))sub_100289D74, &qword_10083E000, sub_1001930B0);
}

uint64_t sub_1002CB7EC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  swift_bridgeObjectRetain(*v2);
  v4 = sub_1002C65F8(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v7 = *v2;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1002DAC98(&qword_100843F30);
    v7 = v12;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v4);
  sub_10028ABFC(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

double sub_1002CB8CC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v3 = v2;
  swift_bridgeObjectRetain(*v3);
  v6 = sub_1002C65F8(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v9 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1002D9870();
      v9 = v13;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
    sub_10001BCA8((__int128 *)(*(_QWORD *)(v9 + 56) + 40 * v6), a2);
    sub_10028AE9C(v6, v9);
    *v3 = v9;
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1002CB9D0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  swift_bridgeObjectRetain(*v2);
  v4 = sub_1002C65F8(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v7 = *v2;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1002D9AB0();
    v7 = v12;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v4);
  sub_10028ABFC(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1002CBAA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_1002C65F8(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    v21 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1002D9F4C(type metadata accessor for RDSavedReminder, &qword_100844028);
      v10 = v21;
    }
    v11 = *(_QWORD *)(v10 + 48);
    v12 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v7, v12);
    v13 = *(_QWORD *)(v10 + 56);
    v14 = type metadata accessor for RDSavedReminder(0);
    v15 = *(_QWORD *)(v14 - 8);
    sub_1000B8680(v13 + *(_QWORD *)(v15 + 72) * v7, a2, type metadata accessor for RDSavedReminder);
    sub_10028B148(v7, v10);
    v16 = *v3;
    *v3 = v10;
    v17 = swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))(v15 + 56))(a2, 0, 1, v14, v17);
  }
  else
  {
    v19 = type metadata accessor for RDSavedReminder(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v19 - 8) + 56))(a2, 1, 1, v19, v20);
  }
}

uint64_t sub_1002CBBF4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  v5 = sub_1002C66DC(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1002DA21C(&qword_100844178);
    v8 = v12;
  }

  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v5);
  sub_100289D74(v5, v8);
  v10 = *v2;
  *v2 = v8;
  swift_bridgeObjectRelease(v10);
  return v9;
}

uint64_t sub_1002CBCC0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  v4 = *v1;
  swift_bridgeObjectRetain(v4);
  v5 = sub_1002C66DC(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1002DA3C8(&qword_100843F48);
    v8 = v12;
  }

  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v5);
  sub_10028B41C(v5, v8);
  v10 = *v2;
  *v2 = v8;
  swift_bridgeObjectRelease(v10);
  return v9;
}

uint64_t sub_1002CBD98(void *a1)
{
  return sub_1002CBDBC(a1, (uint64_t)sub_1002C6C34, (void (*)(uint64_t, uint64_t))sub_100289D74, &qword_10083DFC0, sub_100193A18);
}

uint64_t sub_1002CBDBC(void *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t *a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t *v5;
  uint64_t *v8;
  uint64_t v10;
  uint64_t v12;
  id v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t *v17;
  __n128 v18;
  char v19;
  char v20;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v24;

  v8 = v5;
  v10 = *v5;
  if ((v10 & 0xC000000000000001) == 0)
  {
LABEL_8:
    v17 = a4;
    v18 = swift_bridgeObjectRetain(v10);
    a2 = ((uint64_t (*)(void *, __n128))a2)(a1, v18);
    v20 = v19;
    swift_bridgeObjectRelease();
    if ((v20 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
      v10 = *v8;
      v24 = *v8;
      *v8 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_1002DAECC(v17);
        v10 = v24;
      }
      goto LABEL_11;
    }
    return 0;
  }
  if (v10 < 0)
    v12 = v10;
  else
    v12 = v10 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v10);
  v13 = a1;
  a1 = (void *)__CocoaDictionary.lookup(_:)(v13, v12);

  if (!a1)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_unknownObjectRelease(a1);
  v14 = __CocoaDictionary.count.getter(v12);
  v10 = a5(v12, v14);
  swift_retain();
  a2 = ((uint64_t (*)(id))a2)(v13);
  v16 = v15;
  swift_release(v10);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_11:

  v22 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * a2);
  a3(a2, v10);
  *v8 = v10;
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t sub_1002CBF24(uint64_t a1, uint64_t a2)
{
  return sub_1002D4278(a1, a2, &qword_100843E98);
}

uint64_t sub_1002CBF30(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(&qword_100843EA8);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_36;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v36)
              goto LABEL_36;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + 4 * v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v30[1]);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + 4 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1002CC238(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(&qword_100843910);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v3;
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v31[1]);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v33, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v24 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1002CC53C(uint64_t a1, uint64_t a2)
{
  return sub_1002D55C8(a1, a2, &qword_10083DFD8);
}

Swift::Int sub_1002CC548(uint64_t a1, uint64_t a2)
{
  return sub_1002D55C8(a1, a2, &qword_100844400);
}

Swift::Int sub_1002CC554(uint64_t a1, uint64_t a2)
{
  return sub_1002D0368(a1, a2, &qword_10083DF88);
}

Swift::Int sub_1002CC560(uint64_t a1, uint64_t a2)
{
  return sub_1002D48D4(a1, a2, (uint64_t *)&unk_100844160);
}

uint64_t sub_1002CC56C(uint64_t a1, uint64_t a2)
{
  return sub_1002D37FC(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_100844038, (unint64_t *)&qword_100843670, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_1002CC590(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A630((uint64_t *)&unk_100844310);
  v7 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v9 = v8;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v3;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v10 + 63) >> 6;
    v13 = v8 + 64;
    result = swift_retain();
    v15 = 0;
    while (1)
    {
      if (v12)
      {
        v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v23 = v22 | (v15 << 6);
      }
      else
      {
        v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v24 >= v37)
          goto LABEL_36;
        v25 = v38[v24];
        ++v15;
        if (!v25)
        {
          v15 = v24 + 1;
          if (v24 + 1 >= v37)
            goto LABEL_36;
          v25 = v38[v15];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v37)
            {
LABEL_36:
              swift_release(v5);
              v3 = v36;
              if ((v7 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v25 = v38[v26];
            if (!v25)
            {
              while (1)
              {
                v15 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_43;
                if (v15 >= v37)
                  goto LABEL_36;
                v25 = v38[v15];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v15 = v26;
          }
        }
LABEL_33:
        v12 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      v31 = 8 * v23;
      v32 = *(void **)(*(_QWORD *)(v5 + 48) + v31);
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        v34 = v32;
        swift_bridgeObjectRetain(v33);
      }
      Hasher.init(_seed:)(v39, *(_QWORD *)(v9 + 40));
      v16 = v32;
      NSObject.hash(into:)(v39);

      result = Hasher._finalize()();
      v17 = -1 << *(_BYTE *)(v9 + 32);
      v18 = result & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v13 + 8 * (v18 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v13 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v19 == v28;
          if (v19 == v28)
            v19 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v19);
        }
        while (v30 == -1);
        v20 = __clz(__rbit64(~v30)) + (v19 << 6);
      }
      *(_QWORD *)(v13 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      v21 = 8 * v20;
      *(_QWORD *)(*(_QWORD *)(v9 + 48) + v21) = v16;
      *(_QWORD *)(*(_QWORD *)(v9 + 56) + v21) = v33;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v9;
  return result;
}

uint64_t sub_1002CC888(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  _OWORD *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A630((uint64_t *)&unk_1008443B0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v10 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v11 = ~(-1 << v9);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v9 + 63) >> 6;
    v14 = v7 + 64;
    result = swift_retain();
    v16 = 0;
    while (1)
    {
      if (v12)
      {
        v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v19 = v18 | (v16 << 6);
      }
      else
      {
        v20 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }
        if (v20 >= v13)
          goto LABEL_37;
        v21 = v10[v20];
        ++v16;
        if (!v21)
        {
          v16 = v20 + 1;
          if (v20 + 1 >= v13)
            goto LABEL_37;
          v21 = v10[v16];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v13)
            {
LABEL_37:
              swift_release(v5);
              if ((a2 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v34;
                goto LABEL_44;
              }
              v33 = 1 << *(_BYTE *)(v5 + 32);
              if (v33 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v10 = -1 << v33;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v10[v22];
            if (!v21)
            {
              while (1)
              {
                v16 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_46;
                if (v16 >= v13)
                  goto LABEL_37;
                v21 = v10[v16];
                ++v22;
                if (v21)
                  goto LABEL_24;
              }
            }
            v16 = v22;
          }
        }
LABEL_24:
        v12 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v16 << 6);
      }
      v23 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v19);
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v19);
      if ((a2 & 1) != 0)
      {
        sub_10001A6CC(v24, v35);
      }
      else
      {
        sub_10001A670((uint64_t)v24, (uint64_t)v35);
        v25 = v23;
      }
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v14 + 8 * (v27 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v14 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v14 + 8 * v28);
        }
        while (v32 == -1);
        v17 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v17) = v23;
      result = (uint64_t)sub_10001A6CC(v35, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v17));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_44:
  *v3 = v8;
  return result;
}

Swift::Int sub_1002CCB58(uint64_t a1, uint64_t a2)
{
  return sub_1002D0658(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for REMAccountsListDataView.ReminderCounts.ComputedCountContainer, (uint64_t *)&unk_100844460);
}

uint64_t sub_1002CCB6C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;

  v5 = type metadata accessor for UUID(0);
  v45 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = v2;
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(&qword_100844320);
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = swift_release(v8);
    v38 = v41;
LABEL_44:
    *v38 = v10;
    return result;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v43 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v42 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain();
  v17 = 0;
  HIDWORD(v40) = a2;
  v18 = 16;
  if ((a2 & 1) != 0)
    v18 = 32;
  v44 = v18;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_26;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v22 >= v42)
    {
      swift_release(v8);
      v38 = v41;
      v23 = v43;
      if ((v40 & 0x100000000) != 0)
      {
LABEL_39:
        v39 = 1 << *(_BYTE *)(v8 + 32);
        if (v39 >= 64)
          bzero(v23, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v23 = -1 << v39;
        *(_QWORD *)(v8 + 16) = 0;
      }
LABEL_43:
      result = swift_release(v8);
      goto LABEL_44;
    }
    v23 = v43;
    v24 = v43[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v42)
        goto LABEL_36;
      v24 = v43[v17];
      if (!v24)
        break;
    }
LABEL_25:
    v14 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_26:
    v26 = *(_QWORD *)(v45 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v45 + v44))(v7, *(_QWORD *)(v8 + 48) + v26 * v21, v5);
    v27 = v8;
    v28 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v21);
    v29 = *(_QWORD *)(v10 + 40);
    v30 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v5, v30);
    v31 = -1 << *(_BYTE *)(v10 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      v19 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v45 + 32))(*(_QWORD *)(v10 + 48) + v26 * v19, v7, v5);
    *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v10 + 16);
    v8 = v27;
  }
  v25 = v22 + 2;
  if (v25 >= v42)
  {
LABEL_36:
    swift_release(v8);
    v38 = v41;
    if ((v40 & 0x100000000) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
  v24 = v43[v25];
  if (v24)
  {
    v17 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v17 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v17 >= v42)
      goto LABEL_36;
    v24 = v43[v17];
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_46:
  __break(1u);
  return result;
}

Swift::Int sub_1002CCF08(uint64_t a1, uint64_t a2)
{
  return sub_1002D48D4(a1, a2, &qword_100844150);
}

Swift::Int sub_1002CCF14(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(&qword_1008436F8);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }
    v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v41)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v42 + 8 * v24);
    ++v14;
    if (!v26)
    {
      v14 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_36;
      v26 = *(_QWORD *)(v42 + 8 * v14);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v14 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v14 >= v41)
              goto LABEL_36;
            v26 = *(_QWORD *)(v42 + 8 * v14);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v14 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v36 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v32);
    v37 = *v36;
    v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }
    Hasher.init(_seed:)(v44, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v44, v35, v34);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v20 = v35;
    v20[1] = v34;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + v19);
    *v21 = v37;
    v21[1] = v38;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v25 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

void sub_1002CD238(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;
  _QWORD v43[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(&qword_100844428);
  v42 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v39 = v3;
  v40 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v24 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v25 = v24 | (v13 << 6);
      goto LABEL_34;
    }
    v26 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v26 >= v40)
      break;
    v27 = (_QWORD *)(v5 + 64);
    v28 = *(_QWORD *)(v41 + 8 * v26);
    ++v13;
    if (!v28)
    {
      v13 = v26 + 1;
      if (v26 + 1 >= v40)
        goto LABEL_36;
      v28 = *(_QWORD *)(v41 + 8 * v13);
      if (!v28)
      {
        v29 = v26 + 2;
        if (v29 >= v40)
        {
LABEL_36:
          swift_release(v5);
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v28 = *(_QWORD *)(v41 + 8 * v29);
        if (!v28)
        {
          while (1)
          {
            v13 = v29 + 1;
            if (__OFADD__(v29, 1))
              goto LABEL_45;
            if (v13 >= v40)
              goto LABEL_36;
            v28 = *(_QWORD *)(v41 + 8 * v13);
            ++v29;
            if (v28)
              goto LABEL_33;
          }
        }
        v13 = v29;
      }
    }
LABEL_33:
    v11 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v13 << 6);
LABEL_34:
    v34 = 8 * v25;
    v35 = *(void **)(*(_QWORD *)(v5 + 48) + v34);
    v36 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v34);
    if ((v42 & 1) == 0)
      v37 = v35;
    v14 = *(_QWORD *)(v8 + 40);
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v17 = v16;
    Hasher.init(_seed:)(v43, v14);
    String.hash(into:)(v43, v15, v17);
    v18 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    v19 = -1 << *(_BYTE *)(v8 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v32 = v21 == v31;
        if (v21 == v31)
          v21 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v33 == -1);
      v22 = __clz(__rbit64(~v33)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    v23 = 8 * v22;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v23) = v35;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v23) = v36;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v39;
  v27 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v27, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v27 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

Swift::Int sub_1002CD560(uint64_t a1, uint64_t a2)
{
  return sub_1002D4BE8(a1, a2, &qword_100844518);
}

Swift::Int sub_1002CD56C(uint64_t a1, uint64_t a2)
{
  return sub_1002D55C8(a1, a2, (uint64_t *)&unk_100844410);
}

Swift::Int sub_1002CD578(uint64_t a1, uint64_t a2)
{
  return sub_1002D55C8(a1, a2, &qword_10083DFF8);
}

Swift::Int sub_1002CD584(uint64_t a1, uint64_t a2)
{
  return sub_1002D0658(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for REMRemindersListDataView.ListsModel.Sublist, &qword_100844548);
}

uint64_t sub_1002CD598(uint64_t a1, uint64_t a2)
{
  return sub_1002D37FC(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1008444D8, (unint64_t *)&qword_100843670, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_1002CD5BC(uint64_t a1, uint64_t a2)
{
  return sub_1002D4278(a1, a2, (uint64_t *)&unk_100844180);
}

Swift::Int sub_1002CD5C8(uint64_t a1, uint64_t a2)
{
  return sub_1002D48D4(a1, a2, (uint64_t *)&unk_100843810);
}

Swift::Int sub_1002CD5D4(uint64_t a1, uint64_t a2)
{
  return sub_1002D3F9C(a1, a2, &qword_1008437F8);
}

Swift::Int sub_1002CD5E0(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int *v31;
  int64_t v32;
  _QWORD *v33;
  uint64_t v34[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(&qword_100844568);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v31 = v3;
    v9 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v32 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v19 = v18 | (v9 << 6);
      }
      else
      {
        v20 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v32)
          goto LABEL_36;
        v21 = v33[v20];
        ++v9;
        if (!v21)
        {
          v9 = v20 + 1;
          if (v20 + 1 >= v32)
            goto LABEL_36;
          v21 = v33[v9];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v31;
                goto LABEL_43;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v30;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                v9 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_45;
                if (v9 >= v32)
                  goto LABEL_36;
                v21 = v33[v9];
                ++v22;
                if (v21)
                  goto LABEL_33;
              }
            }
            v9 = v22;
          }
        }
LABEL_33:
        v12 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }
      v27 = *(_QWORD *)(v5 + 56);
      v28 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v19);
      v29 = *(_QWORD *)(v27 + 8 * v19);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(*(_QWORD *)(v27 + 8 * v19));
      Hasher.init(_seed:)(v34, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v28);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v25 = v16 == v24;
          if (v16 == v24)
            v16 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v17) = v28;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v17) = v29;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

uint64_t sub_1002CD8B0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(&qword_100844560);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_46;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v39 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v37 = v3;
  v38 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v14 << 6);
      goto LABEL_25;
    }
    v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      return result;
    }
    if (v19 >= v38)
      break;
    v20 = (_QWORD *)(v5 + 64);
    v21 = *(_QWORD *)(v39 + 8 * v19);
    ++v14;
    if (!v21)
    {
      v14 = v19 + 1;
      if (v19 + 1 >= v38)
        goto LABEL_39;
      v21 = *(_QWORD *)(v39 + 8 * v14);
      if (!v21)
      {
        v22 = v19 + 2;
        if (v22 >= v38)
        {
LABEL_39:
          swift_release(v5);
          v3 = v37;
          if ((a2 & 1) == 0)
            goto LABEL_46;
          goto LABEL_42;
        }
        v21 = *(_QWORD *)(v39 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v14 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_48;
            if (v14 >= v38)
              goto LABEL_39;
            v21 = *(_QWORD *)(v39 + 8 * v14);
            ++v22;
            if (v21)
              goto LABEL_24;
          }
        }
        v14 = v22;
      }
    }
LABEL_24:
    v11 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_25:
    v23 = 8 * v18;
    v24 = *(void **)(*(_QWORD *)(v5 + 48) + v23);
    v25 = *(void **)(*(_QWORD *)(v5 + 56) + v23);
    if ((a2 & 1) == 0)
    {
      v26 = v24;
      v27 = v25;
    }
    Hasher.init(_seed:)(v40, *(_QWORD *)(v8 + 40));
    if (v24)
    {
      Hasher._combine(_:)(1u);
      v28 = v24;
      NSObject.hash(into:)(v40);

    }
    else
    {
      Hasher._combine(_:)(0);
    }
    result = Hasher._finalize()();
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_47;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v12 + 8 * v31);
      }
      while (v35 == -1);
      v15 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = 8 * v15;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v16) = v24;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v16) = v25;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v37;
  v20 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_46;
LABEL_42:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v20, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v20 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_46:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1002CDBC4(uint64_t a1, uint64_t a2)
{
  return sub_1002D0658(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List, &qword_1008443F8);
}

uint64_t sub_1002CDBD8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  _QWORD *v34;
  __int128 v35;
  _QWORD v36[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(&qword_100844498);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v32 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_39;
        v19 = v34[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_39;
          v19 = v34[v14];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_39:
              swift_release(v5);
              v3 = v32;
              if ((a2 & 1) != 0)
              {
                v31 = 1 << *(_BYTE *)(v5 + 32);
                if (v31 >= 64)
                  bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v31;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v14 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_46;
                if (v14 >= v33)
                  goto LABEL_39;
                v19 = v34[v14];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v14 = v20;
          }
        }
LABEL_24:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
      v35 = v21;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v17 + 8);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain(*((_QWORD *)&v21 + 1));
        swift_bridgeObjectRetain(v22);
      }
      Hasher.init(_seed:)(v36, *(_QWORD *)(v8 + 40));
      if (v23)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain(v23);
        String.hash(into:)(v36, v35, v23);
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v8 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v12 + 8 * v26);
        }
        while (v30 == -1);
        v15 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_OWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15) = v35;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v15) = v22;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1002CDEF8(uint64_t a1, uint64_t a2)
{
  return sub_1002D55C8(a1, a2, &qword_10083DF98);
}

uint64_t sub_1002CDF04(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(&qword_100844648);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_46;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v14 << 6);
      goto LABEL_25;
    }
    v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      return result;
    }
    if (v19 >= v37)
      break;
    v20 = (_QWORD *)(v5 + 64);
    v21 = *(_QWORD *)(v38 + 8 * v19);
    ++v14;
    if (!v21)
    {
      v14 = v19 + 1;
      if (v19 + 1 >= v37)
        goto LABEL_39;
      v21 = *(_QWORD *)(v38 + 8 * v14);
      if (!v21)
      {
        v22 = v19 + 2;
        if (v22 >= v37)
        {
LABEL_39:
          swift_release(v5);
          v3 = v36;
          if ((a2 & 1) == 0)
            goto LABEL_46;
          goto LABEL_42;
        }
        v21 = *(_QWORD *)(v38 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v14 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_48;
            if (v14 >= v37)
              goto LABEL_39;
            v21 = *(_QWORD *)(v38 + 8 * v14);
            ++v22;
            if (v21)
              goto LABEL_24;
          }
        }
        v14 = v22;
      }
    }
LABEL_24:
    v11 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_25:
    v23 = 8 * v18;
    v24 = *(void **)(*(_QWORD *)(v5 + 48) + v23);
    v25 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v23);
    if ((a2 & 1) == 0)
    {
      v26 = v24;
      swift_bridgeObjectRetain(v25);
    }
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    if (v24)
    {
      Hasher._combine(_:)(1u);
      v27 = v24;
      NSObject.hash(into:)(v39);

    }
    else
    {
      Hasher._combine(_:)(0);
    }
    result = Hasher._finalize()();
    v28 = -1 << *(_BYTE *)(v8 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_47;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = 8 * v15;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v16) = v24;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v16) = v25;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v20 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_46;
LABEL_42:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v20, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v20 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_46:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1002CE21C(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int *v32;
  _QWORD *v33;
  __int128 v34;
  uint64_t v35[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(&qword_100844530);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v32 = v3;
    v33 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v20 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v22 >= v13)
          goto LABEL_36;
        v23 = v33[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v13)
            goto LABEL_36;
          v23 = v33[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v13)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v32;
                goto LABEL_43;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v31;
              v3 = v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v23 = v33[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_45;
                if (v9 >= v13)
                  goto LABEL_36;
                v23 = v33[v9];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v9 = v24;
          }
        }
LABEL_33:
        v12 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = *(_QWORD *)(v5 + 56);
      v34 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v30 = *(_QWORD *)(v29 + 8 * v21);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(*(_QWORD *)(v29 + 8 * v21));
      Hasher.init(_seed:)(v35, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v34);
      Hasher._combine(_:)(*((Swift::UInt *)&v34 + 1));
      result = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        v19 = v34;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        v19 = v34;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_OWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18) = v19;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v30;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

uint64_t sub_1002CE504(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(&qword_1008444C0);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v33 = -1 << v11;
    v34 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v11 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v22 >= v35)
          goto LABEL_36;
        v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v35)
            goto LABEL_36;
          v23 = v10[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_36:
              if ((a2 & 1) != 0)
              {
                if (v34 >= 64)
                  bzero((void *)(v5 + 64), 8 * v35);
                else
                  *v10 = v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_44;
                if (v9 >= v35)
                  goto LABEL_36;
                v23 = v10[v9];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v9 = v24;
          }
        }
LABEL_33:
        v13 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = 8 * v21;
      v30 = *(_QWORD *)(v5 + 56);
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v29);
      v32 = *(_QWORD *)(v30 + v29);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(*(_QWORD *)(v30 + v29));
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v31);
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 8 * v18;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v19) = v31;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v19) = v32;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_1002CE7B8(uint64_t a1, uint64_t a2)
{
  return sub_1002CF690(a1, a2, &qword_1008444D0);
}

Swift::Int sub_1002CE7C4(uint64_t a1, uint64_t a2)
{
  return sub_1002D4BE8(a1, a2, (uint64_t *)&unk_1008444E0);
}

uint64_t sub_1002CE7D0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  int v40;
  _OWORD v41[2];

  v3 = v2;
  v6 = type metadata accessor for CodingUserInfoKey(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_10001A630(&qword_1008443E0);
  v40 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v39 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v37 = v3;
  v38 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain();
  v19 = 0;
  while (1)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v38)
      break;
    v24 = v39;
    v25 = v39[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v38)
        goto LABEL_36;
      v25 = v39[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_36:
          swift_release(v10);
          v3 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v39[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v38)
              goto LABEL_36;
            v25 = v39[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v40 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      sub_10001A6CC((_OWORD *)(*(_QWORD *)(v10 + 56) + 32 * v22), v41);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      sub_10001A670(*(_QWORD *)(v10 + 56) + 32 * v22, (uint64_t)v41);
    }
    result = dispatch thunk of Hashable._rawHashValue(seed:)(*(_QWORD *)(v12 + 40), v6, &protocol witness table for CodingUserInfoKey);
    v29 = -1 << *(_BYTE *)(v12 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v17 + 8 * (v30 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v17 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v17 + 8 * v31);
      }
      while (v35 == -1);
      v20 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    result = (uint64_t)sub_10001A6CC(v41, (_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v20));
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v37;
  v24 = v39;
  if ((v40 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v10 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

uint64_t sub_1002CEB54(uint64_t a1, uint64_t a2)
{
  return sub_1002D37FC(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1008438F0, (unint64_t *)&qword_100843670, (uint64_t)&protocol conformance descriptor for UUID);
}

Swift::Int sub_1002CEB78(uint64_t a1, uint64_t a2)
{
  return sub_1002D3F9C(a1, a2, (uint64_t *)&unk_1008443A0);
}

Swift::Int sub_1002CEB84(uint64_t a1, uint64_t a2)
{
  return sub_1002D55C8(a1, a2, &qword_10083DFE0);
}

uint64_t sub_1002CEB90(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(&qword_1008436B0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v15 << 6);
      goto LABEL_25;
    }
    v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v22 >= v12)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v15;
    if (!v24)
    {
      v15 = v22 + 1;
      if (v22 + 1 >= v12)
        goto LABEL_37;
      v24 = *(_QWORD *)(v37 + 8 * v15);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v15 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_46;
            if (v15 >= v12)
              goto LABEL_37;
            v24 = *(_QWORD *)(v37 + 8 * v15);
            ++v25;
            if (v24)
              goto LABEL_24;
          }
        }
        v15 = v25;
      }
    }
LABEL_24:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_25:
    v26 = *(_QWORD *)(v5 + 48) + 40 * v21;
    if ((a2 & 1) != 0)
    {
      v27 = *(_OWORD *)v26;
      v28 = *(_OWORD *)(v26 + 16);
      v41 = *(_QWORD *)(v26 + 32);
      v39 = v27;
      v40 = v28;
      sub_10001A6CC((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v21), v38);
    }
    else
    {
      sub_1002933E0(v26, (uint64_t)&v39);
      sub_10001A670(*(_QWORD *)(v5 + 56) + 32 * v21, (uint64_t)v38);
    }
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v13 + 8 * v31);
      }
      while (v35 == -1);
      v16 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    v17 = *(_QWORD *)(v8 + 48) + 40 * v16;
    v18 = v39;
    v19 = v40;
    *(_QWORD *)(v17 + 32) = v41;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    result = (uint64_t)sub_10001A6CC(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v16));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1002CEEA4(uint64_t a1, uint64_t a2)
{
  return sub_1002D4BE8(a1, a2, &qword_100843B08);
}

uint64_t sub_1002CEEB0(uint64_t a1, uint64_t a2)
{
  return sub_1002D37FC(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t *)&unk_100844330, (unint64_t *)&qword_100843670, (uint64_t)&protocol conformance descriptor for UUID);
}

Swift::Int sub_1002CEED4(uint64_t a1, uint64_t a2)
{
  return sub_1002D4BE8(a1, a2, &qword_100843978);
}

Swift::Int sub_1002CEEE0(uint64_t a1, uint64_t a2)
{
  return sub_1002D48D4(a1, a2, &qword_100844550);
}

uint64_t sub_1002CEEEC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void (*v26)(unint64_t, _BYTE *, uint64_t);
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  _QWORD *v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(_BYTE *, unint64_t, uint64_t);
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[4];
  int v52;
  uint64_t *v53;
  int64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v59 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = &v51[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v11 = &v51[-v10];
  v12 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(&qword_100843770);
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  if (!*(_QWORD *)(v12 + 16))
  {
    v48 = v12;
LABEL_44:
    result = swift_release(v48);
    *v3 = v13;
    return result;
  }
  v14 = 1 << *(_BYTE *)(v12 + 32);
  v15 = *(_QWORD *)(v12 + 64);
  v55 = (_QWORD *)(v12 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v53 = v2;
  v54 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12;
  v19 = v13 + 64;
  v58 = v18;
  result = swift_retain(v18);
  v21 = 0;
  v52 = a2;
  v22 = 16;
  if ((a2 & 1) != 0)
    v22 = 32;
  v56 = v22;
  v57 = v9;
  while (1)
  {
    if (v17)
    {
      v27 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v28 = v27 | (v21 << 6);
      goto LABEL_26;
    }
    v29 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v29 >= v54)
    {
      v49 = v58;
      swift_release(v58);
      v3 = v53;
      v30 = v55;
      if ((v52 & 1) != 0)
      {
LABEL_39:
        v50 = 1 << *(_BYTE *)(v49 + 32);
        if (v50 >= 64)
          bzero(v30, ((unint64_t)(v50 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v30 = -1 << v50;
        *(_QWORD *)(v49 + 16) = 0;
      }
LABEL_43:
      v48 = v49;
      goto LABEL_44;
    }
    v30 = v55;
    v31 = v55[v29];
    ++v21;
    if (!v31)
    {
      v21 = v29 + 1;
      if (v29 + 1 >= v54)
        goto LABEL_36;
      v31 = v55[v21];
      if (!v31)
        break;
    }
LABEL_25:
    v17 = (v31 - 1) & v31;
    v28 = __clz(__rbit64(v31)) + (v21 << 6);
LABEL_26:
    v33 = v58;
    v34 = *(_QWORD *)(v59 + 72);
    v35 = v34 * v28;
    v36 = *(void (**)(_BYTE *, unint64_t, uint64_t))(v59 + v56);
    v36(v11, *(_QWORD *)(v58 + 48) + v34 * v28, v6);
    v37 = *(_QWORD *)(v33 + 56) + v35;
    v38 = v57;
    v36(v57, v37, v6);
    v39 = *(_QWORD *)(v13 + 40);
    v40 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v39, v6, v40);
    v41 = -1 << *(_BYTE *)(v13 + 32);
    v42 = result & ~v41;
    v43 = v42 >> 6;
    if (((-1 << v42) & ~*(_QWORD *)(v19 + 8 * (v42 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v42) & ~*(_QWORD *)(v19 + 8 * (v42 >> 6)))) | v42 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v44 = 0;
      v45 = (unint64_t)(63 - v41) >> 6;
      do
      {
        if (++v43 == v45 && (v44 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v46 = v43 == v45;
        if (v43 == v45)
          v43 = 0;
        v44 |= v46;
        v47 = *(_QWORD *)(v19 + 8 * v43);
      }
      while (v47 == -1);
      v23 = __clz(__rbit64(~v47)) + (v43 << 6);
    }
    *(_QWORD *)(v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v24 = v34 * v23;
    v25 = *(_QWORD *)(v13 + 48) + v34 * v23;
    v26 = *(void (**)(unint64_t, _BYTE *, uint64_t))(v59 + 32);
    v26(v25, v11, v6);
    result = ((uint64_t (*)(unint64_t, _BYTE *, uint64_t))v26)(*(_QWORD *)(v13 + 56) + v24, v38, v6);
    ++*(_QWORD *)(v13 + 16);
  }
  v32 = v29 + 2;
  if (v32 >= v54)
  {
LABEL_36:
    v49 = v58;
    swift_release(v58);
    v3 = v53;
    if ((v52 & 1) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
  v31 = v55[v32];
  if (v31)
  {
    v21 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    v21 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v21 >= v54)
      goto LABEL_36;
    v31 = v55[v21];
    ++v32;
    if (v31)
      goto LABEL_25;
  }
LABEL_46:
  __break(1u);
  return result;
}

Swift::Int sub_1002CF2C4(uint64_t a1, uint64_t a2)
{
  return sub_1002D55C8(a1, a2, &qword_10083DFA0);
}

uint64_t sub_1002CF2D0(uint64_t a1, uint64_t a2)
{
  return sub_1002D58F4(a1, a2, &qword_100843C08);
}

Swift::Int sub_1002CF2DC(uint64_t a1, uint64_t a2)
{
  return sub_1002D55C8(a1, a2, (uint64_t *)&unk_100843820);
}

uint64_t sub_1002CF2E8(uint64_t a1, uint64_t a2)
{
  return sub_1002D58F4(a1, a2, &qword_100843970);
}

Swift::Int sub_1002CF2F4(uint64_t a1, uint64_t a2)
{
  return sub_1002D3F9C(a1, a2, &qword_1008439C8);
}

uint64_t sub_1002CF300(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;

  v3 = v2;
  v6 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag(0);
  v42 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_10001A630((uint64_t *)&unk_10083BE30);
  v43 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v39 = v3;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v41 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v40 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_24;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v40)
      break;
    v23 = v41;
    v24 = v41[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v40)
        goto LABEL_36;
      v24 = v41[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_36:
          swift_release(v9);
          v3 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v18 >= v40)
              goto LABEL_36;
            v24 = v41[v18];
            ++v25;
            if (v24)
              goto LABEL_23;
          }
        }
        v18 = v25;
      }
    }
LABEL_23:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_24:
    v26 = *(void **)(*(_QWORD *)(v9 + 48) + 8 * v21);
    v27 = *(_QWORD *)(v42 + 72);
    v28 = *(_QWORD *)(v9 + 56) + v27 * v21;
    if ((v43 & 1) != 0)
    {
      sub_1000B8680(v28, (uint64_t)v8, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
    }
    else
    {
      sub_1000151E8(v28, (uint64_t)v8, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
      v29 = v26;
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v11 + 40));
    v30 = -1 << *(_BYTE *)(v11 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v16 + 8 * (v31 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v16 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v16 + 8 * v32);
      }
      while (v36 == -1);
      v19 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v19) = v26;
    result = sub_1000B8680((uint64_t)v8, *(_QWORD *)(v11 + 56) + v27 * v19, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release(v9);
  v3 = v39;
  v23 = v41;
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v37 = 1 << *(_BYTE *)(v9 + 32);
  if (v37 >= 64)
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v37;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  result = swift_release(v9);
  *v3 = v11;
  return result;
}

uint64_t sub_1002CF654(uint64_t a1, uint64_t a2)
{
  return sub_1002D58F4(a1, a2, &qword_100843D98);
}

Swift::Int sub_1002CF660(uint64_t a1, uint64_t a2)
{
  return sub_1002D3F9C(a1, a2, &qword_10083BE68);
}

Swift::Int sub_1002CF66C(uint64_t a1, uint64_t a2)
{
  return sub_1002D4BE8(a1, a2, &qword_1008442E8);
}

Swift::Int sub_1002CF678(uint64_t a1, uint64_t a2)
{
  return sub_1002D55C8(a1, a2, (uint64_t *)&unk_1008442F0);
}

uint64_t sub_1002CF684(uint64_t a1, uint64_t a2)
{
  return sub_1002CF690(a1, a2, &qword_100843EF8);
}

uint64_t sub_1002CF690(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t i;
  int v47;

  v5 = v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v5;
  if (*(_QWORD *)(*v5 + 24) > a1)
    a1 = *(_QWORD *)(*v5 + 24);
  sub_10001A630(a3);
  v47 = a2;
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_43;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 64);
  v45 = (_QWORD *)(v12 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v43 = v5;
  v44 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 64;
  result = swift_retain(v12);
  v21 = 0;
  for (i = v12; ; v12 = i)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v25 >= v44)
      break;
    v26 = v45;
    v27 = v45[v25];
    ++v21;
    if (!v27)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v44)
        goto LABEL_36;
      v27 = v45[v21];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v44)
        {
LABEL_36:
          swift_release(v12);
          v5 = v43;
          if ((v47 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = v45[v28];
        if (!v27)
        {
          while (1)
          {
            v21 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v21 >= v44)
              goto LABEL_36;
            v27 = v45[v21];
            ++v28;
            if (v27)
              goto LABEL_23;
          }
        }
        v21 = v28;
      }
    }
LABEL_23:
    v18 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_24:
    v29 = *(_QWORD *)(v9 + 72);
    v30 = *(_QWORD *)(v12 + 48) + v29 * v24;
    if ((v47 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v11, v30, v8);
      v31 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v24);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v30, v8);
      v31 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v24);
      swift_retain(v31);
    }
    v32 = *(_QWORD *)(v14 + 40);
    v33 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v8, v33);
    v34 = -1 << *(_BYTE *)(v14 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v14 + 48) + v29 * v22, v11, v8);
    *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v22) = v31;
    ++*(_QWORD *)(v14 + 16);
  }
  swift_release(v12);
  v5 = v43;
  v26 = v45;
  if ((v47 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v41 = 1 << *(_BYTE *)(v12 + 32);
  if (v41 >= 64)
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v41;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_43:
  result = swift_release(v12);
  *v5 = v14;
  return result;
}

uint64_t sub_1002CFA28(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  void *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char v39;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(&qword_1008442C0);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v3;
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v38 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v37;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v38 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v22);
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v22);
    v33 = *v32;
    v34 = v32[1];
    if ((v39 & 1) == 0)
    {
      v35 = v31;
      swift_bridgeObjectRetain(v34);
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v19) = v31;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v19);
    *v20 = v33;
    v20[1] = v34;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v37;
  v24 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_1002CFD0C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  __int128 v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(&qword_1008442B8);
  v7 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v9 = v8;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v3;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v10 + 63) >> 6;
    v13 = v8 + 64;
    result = swift_retain();
    v15 = 0;
    while (1)
    {
      if (v12)
      {
        v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v23 = v22 | (v15 << 6);
      }
      else
      {
        v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v24 >= v37)
          goto LABEL_36;
        v25 = v38[v24];
        ++v15;
        if (!v25)
        {
          v15 = v24 + 1;
          if (v24 + 1 >= v37)
            goto LABEL_36;
          v25 = v38[v15];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v37)
            {
LABEL_36:
              swift_release(v5);
              v3 = v36;
              if ((v7 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v25 = v38[v26];
            if (!v25)
            {
              while (1)
              {
                v15 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_43;
                if (v15 >= v37)
                  goto LABEL_36;
                v25 = v38[v15];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v15 = v26;
          }
        }
LABEL_33:
        v12 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      v31 = 16 * v23;
      v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
      v34 = *v32;
      v33 = v32[1];
      v39 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain(v33);
        sub_1000A70E4(v39, *((unint64_t *)&v39 + 1));
      }
      Hasher.init(_seed:)(v40, *(_QWORD *)(v9 + 40));
      String.hash(into:)(v40, v34, v33);
      result = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v18 == v28;
          if (v18 == v28)
            v18 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 16 * v19;
      v21 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v20);
      *v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(_QWORD *)(v9 + 56) + v20) = v39;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v9;
  return result;
}

uint64_t sub_1002D0018(uint64_t a1, uint64_t a2)
{
  return sub_1002D58F4(a1, a2, (uint64_t *)&unk_100843AD0);
}

uint64_t sub_1002D0024(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(&qword_1008438B0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v14 << 6);
      }
      else
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v19 >= v35)
          goto LABEL_37;
        v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          v14 = v19 + 1;
          if (v19 + 1 >= v35)
            goto LABEL_37;
          v20 = v36[v14];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              v3 = v34;
              if ((a2 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                v14 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_44;
                if (v14 >= v35)
                  goto LABEL_37;
                v20 = v36[v14];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v14 = v21;
          }
        }
LABEL_24:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
      v24 = *v22;
      v23 = v22[1];
      v25 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_10001A6CC(v25, v38);
      }
      else
      {
        sub_10001A670((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }
      Hasher.init(_seed:)(v37, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v37, v24, v23);
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
      *v16 = v24;
      v16[1] = v23;
      result = (uint64_t)sub_10001A6CC(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1002D0320(uint64_t a1, uint64_t a2)
{
  return sub_1002D4BE8(a1, a2, (uint64_t *)&unk_100844350);
}

uint64_t sub_1002D032C(uint64_t a1, uint64_t a2)
{
  return sub_1002D58F4(a1, a2, (uint64_t *)&unk_100851E50);
}

uint64_t sub_1002D0338(uint64_t a1, uint64_t a2)
{
  return sub_1002D58F4(a1, a2, &qword_100844220);
}

uint64_t sub_1002D0344(uint64_t a1, uint64_t a2)
{
  return sub_1002D58F4(a1, a2, (uint64_t *)&unk_100851DC0);
}

uint64_t sub_1002D0350(uint64_t a1, uint64_t a2)
{
  return sub_1002D58F4(a1, a2, &qword_1008441C0);
}

Swift::Int sub_1002D035C(uint64_t a1, uint64_t a2)
{
  return sub_1002D0368(a1, a2, &qword_10083DF90);
}

Swift::Int sub_1002D0368(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  Swift::Int result;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_10001A630(a3);
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v4;
  v38 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 64;
  result = swift_retain(v6);
  v16 = 0;
  while (1)
  {
    if (v12)
    {
      v22 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v23 = v22 | (v16 << 6);
      goto LABEL_34;
    }
    v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v13)
      break;
    v25 = (_QWORD *)(v6 + 64);
    v26 = *(_QWORD *)(v38 + 8 * v24);
    ++v16;
    if (!v26)
    {
      v16 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_36;
      v26 = *(_QWORD *)(v38 + 8 * v16);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v13)
        {
LABEL_36:
          swift_release(v6);
          v4 = v37;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v38 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v16 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v16 >= v13)
              goto LABEL_36;
            v26 = *(_QWORD *)(v38 + 8 * v16);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v16 = v27;
      }
    }
LABEL_33:
    v12 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v16 << 6);
LABEL_34:
    v32 = 8 * v23;
    v33 = *(void **)(*(_QWORD *)(v6 + 48) + v32);
    v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v32);
    if ((a2 & 1) == 0)
    {
      v35 = v33;
      swift_retain(v34);
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v9 + 40));
    v17 = -1 << *(_BYTE *)(v9 + 32);
    v18 = result & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v19 == v29;
        if (v19 == v29)
          v19 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v14 + 8 * v19);
      }
      while (v31 == -1);
      v20 = __clz(__rbit64(~v31)) + (v19 << 6);
    }
    *(_QWORD *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    v21 = 8 * v20;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + v21) = v33;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v21) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v4 = v37;
  v25 = (_QWORD *)(v6 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v6 + 32);
  if (v36 >= 64)
    bzero(v25, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v36;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

Swift::Int sub_1002D0638(uint64_t a1, uint64_t a2)
{
  return sub_1002D55C8(a1, a2, &qword_100843B20);
}

Swift::Int sub_1002D0644(uint64_t a1, uint64_t a2)
{
  return sub_1002D0658(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for REMManualOrdering.PinnedList, &qword_100843B38);
}

Swift::Int sub_1002D0658(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  Swift::Int result;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  int v45;

  v6 = v4;
  v9 = a3(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v42 - v11;
  v13 = *v6;
  if (*(_QWORD *)(*v6 + 24) > a1)
    a1 = *(_QWORD *)(*v6 + 24);
  sub_10001A630(a4);
  v45 = a2;
  v14 = static _DictionaryStorage.resize(original:capacity:move:)(v13, a1, a2);
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_43;
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 64);
  v44 = (_QWORD *)(v13 + 64);
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v42 = v6;
  v43 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 64;
  result = swift_retain(v13);
  v22 = 0;
  while (1)
  {
    if (v19)
    {
      v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v25 = v24 | (v22 << 6);
      goto LABEL_24;
    }
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v26 >= v43)
      break;
    v27 = v44;
    v28 = v44[v26];
    ++v22;
    if (!v28)
    {
      v22 = v26 + 1;
      if (v26 + 1 >= v43)
        goto LABEL_36;
      v28 = v44[v22];
      if (!v28)
      {
        v29 = v26 + 2;
        if (v29 >= v43)
        {
LABEL_36:
          swift_release(v13);
          v6 = v42;
          if ((v45 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v28 = v44[v29];
        if (!v28)
        {
          while (1)
          {
            v22 = v29 + 1;
            if (__OFADD__(v29, 1))
              goto LABEL_45;
            if (v22 >= v43)
              goto LABEL_36;
            v28 = v44[v22];
            ++v29;
            if (v28)
              goto LABEL_23;
          }
        }
        v22 = v29;
      }
    }
LABEL_23:
    v19 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_24:
    v30 = *(void **)(*(_QWORD *)(v13 + 48) + 8 * v25);
    v31 = *(_QWORD *)(v10 + 72);
    v32 = *(_QWORD *)(v13 + 56) + v31 * v25;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 32))(v12, v32, v9);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, v32, v9);
      v33 = v30;
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v15 + 40));
    v34 = -1 << *(_BYTE *)(v15 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v20 + 8 * (v35 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v20 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v20 + 8 * v36);
      }
      while (v40 == -1);
      v23 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * v23) = v30;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v10 + 32))(*(_QWORD *)(v15 + 56) + v31 * v23, v12, v9);
    ++*(_QWORD *)(v15 + 16);
  }
  swift_release(v13);
  v6 = v42;
  v27 = v44;
  if ((v45 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v41 = 1 << *(_BYTE *)(v13 + 32);
  if (v41 >= 64)
    bzero(v27, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v27 = -1 << v41;
  *(_QWORD *)(v13 + 16) = 0;
LABEL_43:
  result = swift_release(v13);
  *v6 = v15;
  return result;
}

uint64_t sub_1002D09A8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A630((uint64_t *)&unk_100844600);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v3;
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v38 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v37;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v38 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = 8 * v22;
    v32 = *(void **)(*(_QWORD *)(v5 + 48) + v31);
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      v34 = v33;
      v35 = v32;
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v37;
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1002D0C78(uint64_t a1, uint64_t a2)
{
  return sub_1002D55C8(a1, a2, &qword_10083E008);
}

Swift::Int sub_1002D0C84(uint64_t a1, uint64_t a2)
{
  return sub_1002D3F9C(a1, a2, &qword_100843878);
}

uint64_t sub_1002D0C90(uint64_t a1, uint64_t a2)
{
  return sub_1002D58F4(a1, a2, &qword_100843CB0);
}

uint64_t sub_1002D0C9C(uint64_t a1, uint64_t a2)
{
  return sub_1002D58F4(a1, a2, &qword_100843CD8);
}

uint64_t sub_1002D0CA8(uint64_t a1, uint64_t a2)
{
  return sub_1002D58F4(a1, a2, &qword_100843D10);
}

uint64_t sub_1002D0CB4(uint64_t a1, uint64_t a2)
{
  return sub_1002D58F4(a1, a2, &qword_100843D38);
}

uint64_t sub_1002D0CC0(uint64_t a1, uint64_t a2)
{
  return sub_1002D58F4(a1, a2, &qword_100843D70);
}

uint64_t sub_1002D0CCC(uint64_t a1, uint64_t a2)
{
  return sub_1002D58F4(a1, a2, &qword_100843DD0);
}

uint64_t sub_1002D0CD8(uint64_t a1, uint64_t a2)
{
  return sub_1002D5224(a1, a2, &qword_100843C40);
}

uint64_t sub_1002D0CE4(uint64_t a1, uint64_t a2)
{
  return sub_1002D1048(a1, a2, (uint64_t *)&unk_100844500);
}

uint64_t sub_1002D0CF0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t i;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(&qword_100843720);
  v41 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v39 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v38 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain();
    v14 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v14 << 6);
      }
      else
      {
        v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v23 >= v38)
          goto LABEL_36;
        v24 = v39[v23];
        ++v14;
        if (!v24)
        {
          v14 = v23 + 1;
          if (v23 + 1 >= v38)
            goto LABEL_36;
          v24 = v39[v14];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v38)
            {
LABEL_36:
              swift_release(v5);
              v3 = v2;
              if ((v41 & 1) != 0)
              {
                v37 = 1 << *(_BYTE *)(v5 + 32);
                if (v37 >= 64)
                  bzero(v39, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v39 = -1 << v37;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v24 = v39[v25];
            if (!v24)
            {
              while (1)
              {
                v14 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_43;
                if (v14 >= v38)
                  goto LABEL_36;
                v24 = v39[v14];
                ++v25;
                if (v24)
                  goto LABEL_33;
              }
            }
            v14 = v25;
          }
        }
LABEL_33:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
      v31 = *v30;
      v32 = v30[1];
      v33 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 48 * v22);
      v34 = v33[1];
      v35 = v33[3];
      v44 = v33[2];
      v36 = v33[5];
      v42 = *v33;
      v43 = v33[4];
      if ((v41 & 1) == 0)
      {
        swift_bridgeObjectRetain(v32);
        swift_bridgeObjectRetain(v34);
        swift_bridgeObjectRetain(v35);
        swift_bridgeObjectRetain(v36);
      }
      Hasher.init(_seed:)(v45, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v45, v31, v32);
      result = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v28 = v17 == v27;
          if (v17 == v27)
            v17 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
      *v19 = v31;
      v19[1] = v32;
      v20 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 48 * v18);
      *v20 = v42;
      v20[1] = v34;
      v20[2] = v44;
      v20[3] = v35;
      v20[4] = v43;
      v20[5] = v36;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_1002D103C(uint64_t a1, uint64_t a2)
{
  return sub_1002D1048(a1, a2, &qword_1008444F8);
}

uint64_t sub_1002D1048(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t result;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;

  v5 = v3;
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v5;
  if (*(_QWORD *)(*v5 + 24) > a1)
    a1 = *(_QWORD *)(*v5 + 24);
  sub_10001A630(a3);
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  if (*(_QWORD *)(v12 + 16))
  {
    v30 = v5;
    v14 = 1 << *(_BYTE *)(v12 + 32);
    v15 = (_QWORD *)(v12 + 64);
    v16 = -1;
    if (v14 < 64)
      v16 = ~(-1 << v14);
    v17 = v16 & *(_QWORD *)(v12 + 64);
    v18 = (unint64_t)(v14 + 63) >> 6;
    result = swift_retain();
    v20 = 0;
    while (1)
    {
      if (v17)
      {
        v22 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        v23 = v22 | (v20 << 6);
      }
      else
      {
        v24 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
          __break(1u);
LABEL_34:
          __break(1u);
          return result;
        }
        if (v24 >= v18)
          goto LABEL_25;
        v25 = v15[v24];
        ++v20;
        if (!v25)
        {
          v20 = v24 + 1;
          if (v24 + 1 >= v18)
            goto LABEL_25;
          v25 = v15[v20];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v18)
            {
LABEL_25:
              swift_release(v12);
              if ((a2 & 1) == 0)
              {
                result = swift_release(v12);
                v5 = v30;
                goto LABEL_32;
              }
              v28 = 1 << *(_BYTE *)(v12 + 32);
              if (v28 >= 64)
                bzero((void *)(v12 + 64), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v15 = -1 << v28;
              v5 = v30;
              *(_QWORD *)(v12 + 16) = 0;
              break;
            }
            v25 = v15[v26];
            if (!v25)
            {
              while (1)
              {
                v20 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_34;
                if (v20 >= v18)
                  goto LABEL_25;
                v25 = v15[v20];
                ++v26;
                if (v25)
                  goto LABEL_22;
              }
            }
            v20 = v26;
          }
        }
LABEL_22:
        v17 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v20 << 6);
      }
      v27 = *(_QWORD *)(v12 + 48) + *(_QWORD *)(v9 + 72) * v23;
      if ((a2 & 1) != 0)
      {
        sub_1000A5CA8(v27, (uint64_t)v11, (uint64_t *)&unk_100839C80);
        v21 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v23);
      }
      else
      {
        sub_100008868(v27, (uint64_t)v11, (uint64_t *)&unk_100839C80);
        v21 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v23);
        swift_bridgeObjectRetain(v21);
      }
      result = sub_1002D5BF0((uint64_t)v11, v21, v13);
    }
  }
  result = swift_release(v12);
LABEL_32:
  *v5 = v13;
  return result;
}

uint64_t sub_1002D12A8(uint64_t a1, uint64_t a2)
{
  return sub_1002D4278(a1, a2, (uint64_t *)&unk_100843E70);
}

Swift::Int sub_1002D12B4(uint64_t a1, uint64_t a2)
{
  return sub_1002D48D4(a1, a2, (uint64_t *)&unk_1008436C0);
}

Swift::Int sub_1002D12C0(uint64_t a1, uint64_t a2)
{
  return sub_1002D48D4(a1, a2, &qword_100843718);
}

uint64_t sub_1002D12CC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t i;
  int v47;
  uint64_t v48;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v48 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(&qword_100843730);
  v47 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v45 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v43 = v2;
  v44 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v44)
      break;
    v24 = v45;
    v25 = v45[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v44)
        goto LABEL_36;
      v25 = v45[v18];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v44)
        {
LABEL_36:
          swift_release(v9);
          v3 = v43;
          if ((v47 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v45[v26];
        if (!v25)
        {
          while (1)
          {
            v18 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v18 >= v44)
              goto LABEL_36;
            v25 = v45[v18];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v18 = v26;
      }
    }
LABEL_23:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v48 + 72);
    v28 = *(_QWORD *)(v9 + 48) + v27 * v22;
    if ((v47 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 32))(v8, v28, v6);
      v29 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v22);
      v31 = *v29;
      v30 = v29[1];
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v8, v28, v6);
      v32 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v22);
      v31 = *v32;
      v30 = v32[1];
      swift_bridgeObjectRetain(v30);
    }
    v33 = *(_QWORD *)(v11 + 40);
    v34 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v6, v34);
    v35 = -1 << *(_BYTE *)(v11 + 32);
    v36 = result & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v16 + 8 * (v36 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v16 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v16 + 8 * v37);
      }
      while (v41 == -1);
      v19 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v48 + 32))(*(_QWORD *)(v11 + 48) + v27 * v19, v8, v6);
    v20 = (_QWORD *)(*(_QWORD *)(v11 + 56) + 16 * v19);
    *v20 = v31;
    v20[1] = v30;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release(v9);
  v3 = v43;
  v24 = v45;
  if ((v47 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v42 = 1 << *(_BYTE *)(v9 + 32);
  if (v42 >= 64)
    bzero(v24, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v42;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  result = swift_release(v9);
  *v3 = v11;
  return result;
}

Swift::Int sub_1002D1678(uint64_t a1, uint64_t a2)
{
  return sub_1002D48D4(a1, a2, &qword_100843738);
}

uint64_t sub_1002D1684(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  char v41;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(&qword_100843758);
  v41 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v40 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v38 = v3;
  v39 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v40 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_36;
      v24 = *(_QWORD *)(v40 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_36:
          swift_release(v5);
          v3 = v38;
          if ((v41 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v40 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v39)
              goto LABEL_36;
            v24 = *(_QWORD *)(v40 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v21);
    v31 = *(_QWORD *)(v5 + 56) + 24 * v21;
    v32 = *(void **)v31;
    v33 = *(_QWORD *)(v31 + 8);
    v34 = *(_QWORD *)(v31 + 16);
    if ((v41 & 1) == 0)
    {
      v35 = v30;
      v36 = v32;
      swift_bridgeObjectRetain(v34);
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v18) = v30;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 24 * v18);
    *v19 = v32;
    v19[1] = v33;
    v19[2] = v34;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v38;
  v23 = (_QWORD *)(v5 + 64);
  if ((v41 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1002D1988(uint64_t a1, uint64_t a2)
{
  return sub_1002D48D4(a1, a2, &qword_100843710);
}

uint64_t sub_1002D1994(uint64_t a1, uint64_t a2)
{
  return sub_1002D3B9C(a1, a2, _s31ThreadSafePartialRepresentationVMa, &qword_100843750);
}

Swift::Int sub_1002D19A8(uint64_t a1, uint64_t a2)
{
  return sub_1002D2CE4(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for Date, &qword_100843B10);
}

Swift::Int sub_1002D19BC(uint64_t a1, uint64_t a2)
{
  return sub_1002D55C8(a1, a2, (uint64_t *)&unk_100844860);
}

Swift::Int sub_1002D19C8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];
  __int128 v40[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(&qword_100844848);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v14 << 6);
      goto LABEL_25;
    }
    v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v19 >= v36)
      break;
    v20 = (_QWORD *)(v5 + 64);
    v21 = *(_QWORD *)(v37 + 8 * v19);
    ++v14;
    if (!v21)
    {
      v14 = v19 + 1;
      if (v19 + 1 >= v36)
        goto LABEL_37;
      v21 = *(_QWORD *)(v37 + 8 * v14);
      if (!v21)
      {
        v22 = v19 + 2;
        if (v22 >= v36)
        {
LABEL_37:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v21 = *(_QWORD *)(v37 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v14 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_46;
            if (v14 >= v36)
              goto LABEL_37;
            v21 = *(_QWORD *)(v37 + 8 * v14);
            ++v22;
            if (v21)
              goto LABEL_24;
          }
        }
        v14 = v22;
      }
    }
LABEL_24:
    v11 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_25:
    v23 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
    v25 = *v23;
    v24 = v23[1];
    v26 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v18);
    if ((v38 & 1) != 0)
    {
      sub_10001BCA8(v26, (uint64_t)v40);
    }
    else
    {
      sub_100018618((uint64_t)v26, (uint64_t)v40);
      swift_bridgeObjectRetain(v24);
    }
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v25, v24);
    result = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v8 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v29);
      }
      while (v33 == -1);
      v15 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
    *v16 = v25;
    v16[1] = v24;
    result = sub_10001BCA8(v40, *(_QWORD *)(v8 + 56) + 40 * v15);
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v20 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v20, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v20 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1002D1CEC(uint64_t a1, uint64_t a2)
{
  return sub_1002D3F9C(a1, a2, &qword_100844650);
}

uint64_t sub_1002D1CF8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t i;
  int v47;
  uint64_t v48;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v48 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(&qword_100844008);
  v47 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v45 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v43 = v2;
  v44 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v44)
      break;
    v24 = v45;
    v25 = v45[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v44)
        goto LABEL_36;
      v25 = v45[v18];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v44)
        {
LABEL_36:
          swift_release(v9);
          v3 = v43;
          if ((v47 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v45[v26];
        if (!v25)
        {
          while (1)
          {
            v18 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v18 >= v44)
              goto LABEL_36;
            v25 = v45[v18];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v18 = v26;
      }
    }
LABEL_23:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v48 + 72);
    v28 = *(_QWORD *)(v9 + 48) + v27 * v22;
    if ((v47 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 32))(v8, v28, v6);
      v29 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v22);
      v31 = *v29;
      v30 = v29[1];
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v8, v28, v6);
      v32 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v22);
      v31 = *v32;
      v30 = v32[1];
      swift_bridgeObjectRetain(v30);
    }
    v33 = *(_QWORD *)(v11 + 40);
    v34 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v6, v34);
    v35 = -1 << *(_BYTE *)(v11 + 32);
    v36 = result & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v16 + 8 * (v36 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v16 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v16 + 8 * v37);
      }
      while (v41 == -1);
      v19 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v48 + 32))(*(_QWORD *)(v11 + 48) + v27 * v19, v8, v6);
    v20 = (_QWORD *)(*(_QWORD *)(v11 + 56) + 16 * v19);
    *v20 = v31;
    v20[1] = v30;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release(v9);
  v3 = v43;
  v24 = v45;
  if ((v47 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v42 = 1 << *(_BYTE *)(v9 + 32);
  if (v42 >= 64)
    bzero(v24, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v42;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  result = swift_release(v9);
  *v3 = v11;
  return result;
}

uint64_t sub_1002D20A4(uint64_t a1, uint64_t a2)
{
  return sub_1002D58F4(a1, a2, (uint64_t *)&unk_1008439D0);
}

uint64_t sub_1002D20B0(uint64_t a1, uint64_t a2)
{
  return sub_1002D58F4(a1, a2, (uint64_t *)&unk_100851C80);
}

uint64_t sub_1002D20BC(uint64_t a1, uint64_t a2)
{
  return sub_1002D58F4(a1, a2, (uint64_t *)&unk_100843F90);
}

uint64_t sub_1002D20C8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(&qword_1008439F8);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_retain();
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1002D23DC(uint64_t a1, uint64_t a2)
{
  return sub_1002D4BE8(a1, a2, &qword_100844570);
}

uint64_t sub_1002D23E8(uint64_t a1, uint64_t a2)
{
  return sub_1002D37FC(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType, &qword_100844590, &qword_100844598, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributesHarvester.CachedSuggestionType);
}

uint64_t sub_1002D240C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(&qword_1008445D8);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = a2;
    v35 = v3;
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v33 = -1 << v11;
    v34 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v18 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v19 = v18 | (v9 << 6);
      }
      else
      {
        v20 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v20 >= v14)
          goto LABEL_34;
        v21 = v10[v20];
        ++v9;
        if (!v21)
        {
          v9 = v20 + 1;
          if (v20 + 1 >= v14)
            goto LABEL_34;
          v21 = v10[v9];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v14)
            {
LABEL_34:
              if ((v36 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v35;
                goto LABEL_41;
              }
              if (v34 >= 64)
                bzero((void *)(v5 + 64), 8 * v14);
              else
                *v10 = v33;
              v3 = v35;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v10[v22];
            if (!v21)
            {
              while (1)
              {
                v9 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_43;
                if (v9 >= v14)
                  goto LABEL_34;
                v21 = v10[v9];
                ++v22;
                if (v21)
                  goto LABEL_24;
              }
            }
            v9 = v22;
          }
        }
LABEL_24:
        v13 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }
      v23 = 8 * v19;
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v23);
      v25 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v23);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v24);
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v15 + 8 * (v27 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v15 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v15 + 8 * v28);
        }
        while (v32 == -1);
        v16 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = 8 * v16;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v17) = v24;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v17) = v25;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_41:
  *v3 = v8;
  return result;
}

Swift::Int sub_1002D26B0(uint64_t a1, uint64_t a2)
{
  return sub_1002D4BE8(a1, a2, &qword_1008445B8);
}

uint64_t sub_1002D26BC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(&qword_1008445B0);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v38 = a2;
    v37 = v3;
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v35 = -1 << v11;
    v36 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v18 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v19 = v18 | (v9 << 6);
      }
      else
      {
        v20 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }
        if (v20 >= v14)
          goto LABEL_37;
        v21 = v10[v20];
        ++v9;
        if (!v21)
        {
          v9 = v20 + 1;
          if (v20 + 1 >= v14)
            goto LABEL_37;
          v21 = v10[v9];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v14)
            {
LABEL_37:
              if ((v38 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v37;
                goto LABEL_44;
              }
              if (v36 >= 64)
                bzero((void *)(v5 + 64), 8 * v14);
              else
                *v10 = v35;
              v3 = v37;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v10[v22];
            if (!v21)
            {
              while (1)
              {
                v9 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_46;
                if (v9 >= v14)
                  goto LABEL_37;
                v21 = v10[v9];
                ++v22;
                if (v21)
                  goto LABEL_24;
              }
            }
            v9 = v22;
          }
        }
LABEL_24:
        v13 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }
      v23 = 8 * v19;
      v24 = *(_QWORD *)(v5 + 48);
      v25 = *(_QWORD *)(v24 + v23);
      v26 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v23);
      if ((v25 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v27 = *(_QWORD *)(v24 + v23);
      else
        v27 = 0;
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v27);
      v28 = -1 << *(_BYTE *)(v8 + 32);
      v29 = result & ~v28;
      v30 = v29 >> 6;
      if (((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          v33 = v30 == v32;
          if (v30 == v32)
            v30 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v15 + 8 * v30);
        }
        while (v34 == -1);
        v16 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(_QWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = 8 * v16;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v17) = v25;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v17) = v26;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_44:
  *v3 = v8;
  return result;
}

Swift::Int sub_1002D2968(uint64_t a1, uint64_t a2)
{
  return sub_1002D4BE8(a1, a2, &qword_100844120);
}

Swift::Int sub_1002D2974(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(&qword_100843EF0);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_errorRetain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_1002D2C88(uint64_t a1, uint64_t a2)
{
  return sub_1002D37FC(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_100843F28, (unint64_t *)&qword_100843670, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_1002D2CAC(uint64_t a1, uint64_t a2)
{
  return sub_1002D37FC(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_100844480, (unint64_t *)&qword_100843670, (uint64_t)&protocol conformance descriptor for UUID);
}

Swift::Int sub_1002D2CD0(uint64_t a1, uint64_t a2)
{
  return sub_1002D2CE4(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for REMAccountsListDataView.Model.PinnedList, &qword_100844448);
}

Swift::Int sub_1002D2CE4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  Swift::Int result;
  int64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  int v47;
  char *v48;
  uint64_t v49;
  _QWORD v50[9];

  v6 = v4;
  v49 = a3(0);
  v9 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v48 = (char *)&v43 - v10;
  v11 = *v6;
  if (*(_QWORD *)(*v6 + 24) > a1)
    a1 = *(_QWORD *)(*v6 + 24);
  sub_10001A630(a4);
  v47 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_41;
  v44 = v6;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v46 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v45 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain(v11);
  v20 = 0;
  while (1)
  {
    if (v17)
    {
      v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v24 = v23 | (v20 << 6);
      goto LABEL_24;
    }
    v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v45)
      goto LABEL_36;
    v26 = v46[v25];
    ++v20;
    if (!v26)
    {
      v20 = v25 + 1;
      if (v25 + 1 >= v45)
        goto LABEL_36;
      v26 = v46[v20];
      if (!v26)
        break;
    }
LABEL_23:
    v17 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_24:
    v28 = *(_QWORD *)(v11 + 56);
    v29 = v11;
    v30 = (uint64_t *)(*(_QWORD *)(v11 + 48) + 16 * v24);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(v9 + 72);
    v34 = v28 + v33 * v24;
    if ((v47 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v48, v34, v49);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v48, v34, v49);
      swift_bridgeObjectRetain(v31);
    }
    Hasher.init(_seed:)(v50, *(_QWORD *)(v13 + 40));
    String.hash(into:)(v50, v32, v31);
    result = Hasher._finalize()();
    v35 = -1 << *(_BYTE *)(v13 + 32);
    v36 = result & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v18 + 8 * (v36 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v18 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v18 + 8 * v37);
      }
      while (v41 == -1);
      v21 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    v22 = (_QWORD *)(*(_QWORD *)(v13 + 48) + 16 * v21);
    *v22 = v32;
    v22[1] = v31;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v13 + 56) + v33 * v21, v48, v49);
    ++*(_QWORD *)(v13 + 16);
    v11 = v29;
  }
  v27 = v25 + 2;
  if (v27 < v45)
  {
    v26 = v46[v27];
    if (!v26)
    {
      while (1)
      {
        v20 = v27 + 1;
        if (__OFADD__(v27, 1))
          goto LABEL_43;
        if (v20 >= v45)
          goto LABEL_36;
        v26 = v46[v20];
        ++v27;
        if (v26)
          goto LABEL_23;
      }
    }
    v20 = v27;
    goto LABEL_23;
  }
LABEL_36:
  swift_release(v11);
  v6 = v44;
  if ((v47 & 1) != 0)
  {
    v42 = 1 << *(_BYTE *)(v11 + 32);
    if (v42 >= 64)
      bzero(v46, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v46 = -1 << v42;
    *(_QWORD *)(v11 + 16) = 0;
  }
LABEL_41:
  result = swift_release(v11);
  *v6 = v13;
  return result;
}

Swift::Int sub_1002D3048(uint64_t a1, uint64_t a2)
{
  return sub_1002D55C8(a1, a2, &qword_100844100);
}

Swift::Int sub_1002D3054(uint64_t a1, uint64_t a2)
{
  return sub_1002D55C8(a1, a2, &qword_10083E000);
}

uint64_t sub_1002D3060(uint64_t a1, uint64_t a2)
{
  return sub_1002D5224(a1, a2, &qword_100843F30);
}

Swift::Int sub_1002D306C(uint64_t a1, uint64_t a2)
{
  return sub_1002D4BE8(a1, a2, (uint64_t *)&unk_1008447F0);
}

uint64_t sub_1002D3078(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  int v43;
  __int128 v44[2];

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(&qword_1008440F8);
  v43 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v42 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v40 = v2;
  v41 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain();
  v19 = 0;
  while (1)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v41)
      break;
    v24 = v42;
    v25 = v42[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v41)
        goto LABEL_36;
      v25 = v42[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_36:
          swift_release(v10);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v42[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v41)
              goto LABEL_36;
            v25 = v42[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v43 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      sub_10001BCA8((__int128 *)(*(_QWORD *)(v10 + 56) + 40 * v22), (uint64_t)v44);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      sub_100018618(*(_QWORD *)(v10 + 56) + 40 * v22, (uint64_t)v44);
    }
    v29 = *(_QWORD *)(v12 + 40);
    v30 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v6, v30);
    v31 = -1 << *(_BYTE *)(v12 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v17 + 8 * (v32 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v17 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v17 + 8 * v33);
      }
      while (v37 == -1);
      v20 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    result = sub_10001BCA8(v44, *(_QWORD *)(v12 + 56) + 40 * v20);
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v40;
  v24 = v42;
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v38 = 1 << *(_BYTE *)(v10 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

uint64_t sub_1002D3420(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t i;
  int v45;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(&qword_1008440F0);
  v45 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v43 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v41 = v2;
  v42 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain();
  v19 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v42)
      break;
    v24 = v43;
    v25 = v43[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v42)
        goto LABEL_36;
      v25 = v43[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release(v10);
          v3 = v41;
          if ((v45 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v42)
              goto LABEL_36;
            v25 = v43[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
      swift_unknownObjectRetain(v29);
    }
    v30 = *(_QWORD *)(v12 + 40);
    v31 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    v32 = -1 << *(_BYTE *)(v12 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v17 + 8 * v34);
      }
      while (v38 == -1);
      v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v41;
  v24 = v43;
  if ((v45 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v10 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

uint64_t sub_1002D37B4(uint64_t a1, uint64_t a2)
{
  return sub_1002D37FC(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_100844018, (unint64_t *)&qword_100843670, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_1002D37D8(uint64_t a1, uint64_t a2)
{
  return sub_1002D37FC(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_100844010, (unint64_t *)&qword_100843670, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_1002D37FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  _QWORD *v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  int64_t v46;
  _QWORD *v47;
  uint64_t i;
  uint64_t (*v49)(uint64_t);
  unint64_t *v50;
  uint64_t v51;
  int v52;

  v50 = a5;
  v51 = a6;
  v8 = v6;
  v49 = a3;
  v11 = a3(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v45 - v13;
  v15 = *v8;
  if (*(_QWORD *)(*v8 + 24) > a1)
    a1 = *(_QWORD *)(*v8 + 24);
  sub_10001A630(a4);
  v52 = a2;
  v16 = static _DictionaryStorage.resize(original:capacity:move:)(v15, a1, a2);
  v17 = v16;
  if (!*(_QWORD *)(v15 + 16))
    goto LABEL_43;
  v18 = 1 << *(_BYTE *)(v15 + 32);
  v19 = *(_QWORD *)(v15 + 64);
  v47 = (_QWORD *)(v15 + 64);
  if (v18 < 64)
    v20 = ~(-1 << v18);
  else
    v20 = -1;
  v21 = v20 & v19;
  v45 = v8;
  v46 = (unint64_t)(v18 + 63) >> 6;
  v22 = v16 + 64;
  result = swift_retain();
  v24 = 0;
  for (i = v15; ; v15 = i)
  {
    if (v21)
    {
      v26 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v27 = v26 | (v24 << 6);
      goto LABEL_24;
    }
    v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v28 >= v46)
      break;
    v29 = v47;
    v30 = v47[v28];
    ++v24;
    if (!v30)
    {
      v24 = v28 + 1;
      if (v28 + 1 >= v46)
        goto LABEL_36;
      v30 = v47[v24];
      if (!v30)
      {
        v31 = v28 + 2;
        if (v31 >= v46)
        {
LABEL_36:
          swift_release(v15);
          v8 = v45;
          if ((v52 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v30 = v47[v31];
        if (!v30)
        {
          while (1)
          {
            v24 = v31 + 1;
            if (__OFADD__(v31, 1))
              goto LABEL_45;
            if (v24 >= v46)
              goto LABEL_36;
            v30 = v47[v24];
            ++v31;
            if (v30)
              goto LABEL_23;
          }
        }
        v24 = v31;
      }
    }
LABEL_23:
    v21 = (v30 - 1) & v30;
    v27 = __clz(__rbit64(v30)) + (v24 << 6);
LABEL_24:
    v32 = *(_QWORD *)(v12 + 72);
    v33 = *(_QWORD *)(v15 + 48) + v32 * v27;
    if ((v52 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v12 + 32))(v14, v33, v11);
      v34 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v27);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v14, v33, v11);
      v34 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v27);
      swift_bridgeObjectRetain(v34);
    }
    v35 = *(_QWORD *)(v17 + 40);
    v36 = sub_10009FC50(v50, v49, v51);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v35, v11, v36);
    v37 = -1 << *(_BYTE *)(v17 + 32);
    v38 = result & ~v37;
    v39 = v38 >> 6;
    if (((-1 << v38) & ~*(_QWORD *)(v22 + 8 * (v38 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v38) & ~*(_QWORD *)(v22 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v40 = 0;
      v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v42 = v39 == v41;
        if (v39 == v41)
          v39 = 0;
        v40 |= v42;
        v43 = *(_QWORD *)(v22 + 8 * v39);
      }
      while (v43 == -1);
      v25 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(_QWORD *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v12 + 32))(*(_QWORD *)(v17 + 48) + v32 * v25, v14, v11);
    *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v25) = v34;
    ++*(_QWORD *)(v17 + 16);
  }
  swift_release(v15);
  v8 = v45;
  v29 = v47;
  if ((v52 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v44 = 1 << *(_BYTE *)(v15 + 32);
  if (v44 >= 64)
    bzero(v29, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v29 = -1 << v44;
  *(_QWORD *)(v15 + 16) = 0;
LABEL_43:
  result = swift_release(v15);
  *v8 = v17;
  return result;
}

uint64_t sub_1002D3B88(uint64_t a1, uint64_t a2)
{
  return sub_1002D3B9C(a1, a2, type metadata accessor for RDSavedReminder, &qword_100844028);
}

uint64_t sub_1002D3B9C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  _QWORD *v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int64_t v48;
  _QWORD *v49;
  uint64_t i;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t (*v54)(_QWORD);

  v6 = v4;
  v54 = a3;
  v9 = a3(0);
  v51 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v53 = (uint64_t)&v47 - v10;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v6;
  if (*(_QWORD *)(*v6 + 24) > a1)
    a1 = *(_QWORD *)(*v6 + 24);
  sub_10001A630(a4);
  v52 = a2;
  v16 = static _DictionaryStorage.resize(original:capacity:move:)(v15, a1, a2);
  v17 = v16;
  if (!*(_QWORD *)(v15 + 16))
    goto LABEL_43;
  v18 = 1 << *(_BYTE *)(v15 + 32);
  v19 = *(_QWORD *)(v15 + 64);
  v49 = (_QWORD *)(v15 + 64);
  if (v18 < 64)
    v20 = ~(-1 << v18);
  else
    v20 = -1;
  v21 = v20 & v19;
  v47 = v6;
  v48 = (unint64_t)(v18 + 63) >> 6;
  v22 = v16 + 64;
  result = swift_retain();
  v24 = 0;
  for (i = v15; ; v15 = i)
  {
    if (v21)
    {
      v26 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v27 = v26 | (v24 << 6);
      goto LABEL_24;
    }
    v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v28 >= v48)
      break;
    v29 = v49;
    v30 = v49[v28];
    ++v24;
    if (!v30)
    {
      v24 = v28 + 1;
      if (v28 + 1 >= v48)
        goto LABEL_36;
      v30 = v49[v24];
      if (!v30)
      {
        v31 = v28 + 2;
        if (v31 >= v48)
        {
LABEL_36:
          swift_release(v15);
          v6 = v47;
          if ((v52 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v30 = v49[v31];
        if (!v30)
        {
          while (1)
          {
            v24 = v31 + 1;
            if (__OFADD__(v31, 1))
              goto LABEL_45;
            if (v24 >= v48)
              goto LABEL_36;
            v30 = v49[v24];
            ++v31;
            if (v30)
              goto LABEL_23;
          }
        }
        v24 = v31;
      }
    }
LABEL_23:
    v21 = (v30 - 1) & v30;
    v27 = __clz(__rbit64(v30)) + (v24 << 6);
LABEL_24:
    v32 = *(_QWORD *)(v12 + 72);
    v33 = *(_QWORD *)(v15 + 48) + v32 * v27;
    if ((v52 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v12 + 32))(v14, v33, v11);
      v34 = *(_QWORD *)(v15 + 56);
      v35 = *(_QWORD *)(v51 + 72);
      sub_1000B8680(v34 + v35 * v27, v53, v54);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v14, v33, v11);
      v36 = *(_QWORD *)(v15 + 56);
      v35 = *(_QWORD *)(v51 + 72);
      sub_1000151E8(v36 + v35 * v27, v53, v54);
    }
    v37 = *(_QWORD *)(v17 + 40);
    v38 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v37, v11, v38);
    v39 = -1 << *(_BYTE *)(v17 + 32);
    v40 = result & ~v39;
    v41 = v40 >> 6;
    if (((-1 << v40) & ~*(_QWORD *)(v22 + 8 * (v40 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v40) & ~*(_QWORD *)(v22 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v42 = 0;
      v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v44 = v41 == v43;
        if (v41 == v43)
          v41 = 0;
        v42 |= v44;
        v45 = *(_QWORD *)(v22 + 8 * v41);
      }
      while (v45 == -1);
      v25 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(_QWORD *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(*(_QWORD *)(v17 + 48) + v32 * v25, v14, v11);
    result = sub_1000B8680(v53, *(_QWORD *)(v17 + 56) + v35 * v25, v54);
    ++*(_QWORD *)(v17 + 16);
  }
  swift_release(v15);
  v6 = v47;
  v29 = v49;
  if ((v52 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v46 = 1 << *(_BYTE *)(v15 + 32);
  if (v46 >= 64)
    bzero(v29, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v29 = -1 << v46;
  *(_QWORD *)(v15 + 16) = 0;
LABEL_43:
  result = swift_release(v15);
  *v6 = v17;
  return result;
}

Swift::Int sub_1002D3F90(uint64_t a1, uint64_t a2)
{
  return sub_1002D3F9C(a1, a2, &qword_100844178);
}

Swift::Int sub_1002D3F9C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  Swift::Int result;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_10001A630(a3);
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v4;
  v38 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 64;
  result = swift_retain(v6);
  v16 = 0;
  while (1)
  {
    if (v12)
    {
      v22 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v23 = v22 | (v16 << 6);
      goto LABEL_34;
    }
    v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v13)
      break;
    v25 = (_QWORD *)(v6 + 64);
    v26 = *(_QWORD *)(v38 + 8 * v24);
    ++v16;
    if (!v26)
    {
      v16 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_36;
      v26 = *(_QWORD *)(v38 + 8 * v16);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v13)
        {
LABEL_36:
          swift_release(v6);
          v4 = v37;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v38 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v16 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v16 >= v13)
              goto LABEL_36;
            v26 = *(_QWORD *)(v38 + 8 * v16);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v16 = v27;
      }
    }
LABEL_33:
    v12 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v16 << 6);
LABEL_34:
    v32 = 8 * v23;
    v33 = *(void **)(*(_QWORD *)(v6 + 48) + v32);
    v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v32);
    if ((a2 & 1) == 0)
    {
      v35 = v33;
      swift_bridgeObjectRetain(v34);
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v9 + 40));
    v17 = -1 << *(_BYTE *)(v9 + 32);
    v18 = result & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v19 == v29;
        if (v19 == v29)
          v19 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v14 + 8 * v19);
      }
      while (v31 == -1);
      v20 = __clz(__rbit64(~v31)) + (v19 << 6);
    }
    *(_QWORD *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    v21 = 8 * v20;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + v21) = v33;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v21) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v4 = v37;
  v25 = (_QWORD *)(v6 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v6 + 32);
  if (v36 >= 64)
    bzero(v25, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v36;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

uint64_t sub_1002D426C(uint64_t a1, uint64_t a2)
{
  return sub_1002D4278(a1, a2, &qword_100843F48);
}

uint64_t sub_1002D4278(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_10001A630(a3);
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v4;
  v38 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 64;
  result = swift_retain();
  v16 = 0;
  while (1)
  {
    if (v12)
    {
      v22 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v23 = v22 | (v16 << 6);
      goto LABEL_34;
    }
    v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v13)
      break;
    v25 = (_QWORD *)(v6 + 64);
    v26 = *(_QWORD *)(v38 + 8 * v24);
    ++v16;
    if (!v26)
    {
      v16 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_36;
      v26 = *(_QWORD *)(v38 + 8 * v16);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v13)
        {
LABEL_36:
          swift_release(v6);
          v4 = v37;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v38 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v16 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v16 >= v13)
              goto LABEL_36;
            v26 = *(_QWORD *)(v38 + 8 * v16);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v16 = v27;
      }
    }
LABEL_33:
    v12 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v16 << 6);
LABEL_34:
    v32 = 8 * v23;
    v33 = *(void **)(*(_QWORD *)(v6 + 48) + v32);
    v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v32);
    if ((a2 & 1) == 0)
      v35 = v33;
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v9 + 40));
    v17 = -1 << *(_BYTE *)(v9 + 32);
    v18 = result & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v19 == v29;
        if (v19 == v29)
          v19 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v14 + 8 * v19);
      }
      while (v31 == -1);
      v20 = __clz(__rbit64(~v31)) + (v19 << 6);
    }
    *(_QWORD *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    v21 = 8 * v20;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + v21) = v33;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v21) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v4 = v37;
  v25 = (_QWORD *)(v6 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v6 + 32);
  if (v36 >= 64)
    bzero(v25, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v36;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

Swift::Int sub_1002D4540(uint64_t a1, uint64_t a2)
{
  return sub_1002D48D4(a1, a2, &qword_1008440D0);
}

Swift::Int sub_1002D454C(uint64_t a1, uint64_t a2)
{
  return sub_1002D48D4(a1, a2, (uint64_t *)&unk_100843ED0);
}

Swift::Int sub_1002D4558(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  _QWORD *v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A630((uint64_t *)&unk_100843850);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v37 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v36 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v14 << 6);
      }
      else
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }
        if (v19 >= v36)
          goto LABEL_39;
        v20 = v37[v19];
        ++v14;
        if (!v20)
        {
          v14 = v19 + 1;
          if (v19 + 1 >= v36)
            goto LABEL_39;
          v20 = v37[v14];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v36)
            {
LABEL_39:
              swift_release(v5);
              v3 = v35;
              if ((v38 & 1) != 0)
              {
                v34 = 1 << *(_BYTE *)(v5 + 32);
                if (v34 >= 64)
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v37 = -1 << v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v20 = v37[v21];
            if (!v20)
            {
              while (1)
              {
                v14 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_46;
                if (v14 >= v36)
                  goto LABEL_39;
                v20 = v37[v14];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v14 = v21;
          }
        }
LABEL_24:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      if ((v38 & 1) == 0)
      {
        swift_retain(v23);
        swift_retain(v24);
      }
      Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
      v25 = *(_QWORD *)(v23 + 24);
      if (v25)
      {
        v26 = *(_QWORD *)(v23 + 16);
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain(v25);
        String.hash(into:)(v39, v26, v25);
        swift_bridgeObjectRelease(v25);
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      result = Hasher._finalize()();
      v27 = -1 << *(_BYTE *)(v8 + 32);
      v28 = result & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          v32 = v29 == v31;
          if (v29 == v31)
            v29 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v12 + 8 * v29);
        }
        while (v33 == -1);
        v15 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v16) = v24;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1002D488C(uint64_t a1, uint64_t a2)
{
  return sub_1002D55C8(a1, a2, &qword_10083DFD0);
}

Swift::Int sub_1002D4898(uint64_t a1, uint64_t a2)
{
  return sub_1002D4BE8(a1, a2, &qword_1008440D8);
}

Swift::Int sub_1002D48A4(uint64_t a1, uint64_t a2)
{
  return sub_1002D55C8(a1, a2, &qword_10083DFC0);
}

Swift::Int sub_1002D48B0(uint64_t a1, uint64_t a2)
{
  return sub_1002D48D4(a1, a2, (uint64_t *)&unk_100844050);
}

Swift::Int sub_1002D48BC(uint64_t a1, uint64_t a2)
{
  return sub_1002D4BE8(a1, a2, &qword_100844000);
}

Swift::Int sub_1002D48C8(uint64_t a1, uint64_t a2)
{
  return sub_1002D48D4(a1, a2, &qword_1008438D8);
}

Swift::Int sub_1002D48D4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  _QWORD v41[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_10001A630(a3);
  v40 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v39 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v37 = v4;
  v38 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  result = swift_retain(v6);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v38)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v39 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v38)
        goto LABEL_36;
      v25 = *(_QWORD *)(v39 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_36:
          swift_release(v6);
          v4 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v39 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v38)
              goto LABEL_36;
            v25 = *(_QWORD *)(v39 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(void **)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      v35 = v34;
    }
    Hasher.init(_seed:)(v41, *(_QWORD *)(v9 + 40));
    String.hash(into:)(v41, v33, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v4 = v37;
  v24 = (_QWORD *)(v6 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v6 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

Swift::Int sub_1002D4BDC(uint64_t a1, uint64_t a2)
{
  return sub_1002D4BE8(a1, a2, &qword_100843FC8);
}

Swift::Int sub_1002D4BE8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_10001A630(a3);
  v38 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v36 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  result = swift_retain(v6);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v36)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v36)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v36)
        {
LABEL_36:
          swift_release(v6);
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v36)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      swift_bridgeObjectRetain(v34);
    }
    Hasher.init(_seed:)(v39, *(_QWORD *)(v9 + 40));
    String.hash(into:)(v39, v33, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v24 = (_QWORD *)(v6 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

Swift::Int sub_1002D4EF8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(&qword_100843DF8);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_36;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v36)
              goto LABEL_36;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v30[1]);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_1002D5200(uint64_t a1, uint64_t a2)
{
  return sub_1002D58F4(a1, a2, (uint64_t *)&unk_1008446B0);
}

Swift::Int sub_1002D520C(uint64_t a1, uint64_t a2)
{
  return sub_1002D55C8(a1, a2, (uint64_t *)&unk_10083E010);
}

uint64_t sub_1002D5218(uint64_t a1, uint64_t a2)
{
  return sub_1002D5224(a1, a2, (uint64_t *)&unk_1008446A0);
}

uint64_t sub_1002D5224(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t i;
  int v47;

  v5 = v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v5;
  if (*(_QWORD *)(*v5 + 24) > a1)
    a1 = *(_QWORD *)(*v5 + 24);
  sub_10001A630(a3);
  v47 = a2;
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_43;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 64);
  v45 = (_QWORD *)(v12 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v43 = v5;
  v44 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 64;
  result = swift_retain();
  v21 = 0;
  for (i = v12; ; v12 = i)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v25 >= v44)
      break;
    v26 = v45;
    v27 = v45[v25];
    ++v21;
    if (!v27)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v44)
        goto LABEL_36;
      v27 = v45[v21];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v44)
        {
LABEL_36:
          swift_release(v12);
          v5 = v43;
          if ((v47 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = v45[v28];
        if (!v27)
        {
          while (1)
          {
            v21 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v21 >= v44)
              goto LABEL_36;
            v27 = v45[v21];
            ++v28;
            if (v27)
              goto LABEL_23;
          }
        }
        v21 = v28;
      }
    }
LABEL_23:
    v18 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_24:
    v29 = *(_QWORD *)(v9 + 72);
    v30 = *(_QWORD *)(v12 + 48) + v29 * v24;
    if ((v47 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v11, v30, v8);
      v31 = *(id *)(*(_QWORD *)(v12 + 56) + 8 * v24);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v30, v8);
      v31 = *(id *)(*(_QWORD *)(v12 + 56) + 8 * v24);
    }
    v32 = *(_QWORD *)(v14 + 40);
    v33 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v8, v33);
    v34 = -1 << *(_BYTE *)(v14 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v14 + 48) + v29 * v22, v11, v8);
    *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v22) = v31;
    ++*(_QWORD *)(v14 + 16);
  }
  swift_release(v12);
  v5 = v43;
  v26 = v45;
  if ((v47 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v41 = 1 << *(_BYTE *)(v12 + 32);
  if (v41 >= 64)
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v41;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_43:
  result = swift_release(v12);
  *v5 = v14;
  return result;
}

Swift::Int sub_1002D55BC(uint64_t a1, uint64_t a2)
{
  return sub_1002D55C8(a1, a2, (uint64_t *)&unk_1008443C0);
}

Swift::Int sub_1002D55C8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  Swift::Int result;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_10001A630(a3);
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v38 = v4;
  v39 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 64;
  result = swift_retain(v6);
  v16 = 0;
  while (1)
  {
    if (v12)
    {
      v22 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v23 = v22 | (v16 << 6);
      goto LABEL_34;
    }
    v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v13)
      break;
    v25 = (_QWORD *)(v6 + 64);
    v26 = *(_QWORD *)(v39 + 8 * v24);
    ++v16;
    if (!v26)
    {
      v16 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_36;
      v26 = *(_QWORD *)(v39 + 8 * v16);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v13)
        {
LABEL_36:
          swift_release(v6);
          v4 = v38;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v39 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v16 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v16 >= v13)
              goto LABEL_36;
            v26 = *(_QWORD *)(v39 + 8 * v16);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v16 = v27;
      }
    }
LABEL_33:
    v12 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v16 << 6);
LABEL_34:
    v32 = 8 * v23;
    v33 = *(void **)(*(_QWORD *)(v6 + 48) + v32);
    v34 = *(void **)(*(_QWORD *)(v6 + 56) + v32);
    if ((a2 & 1) == 0)
    {
      v35 = v33;
      v36 = v34;
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v9 + 40));
    v17 = -1 << *(_BYTE *)(v9 + 32);
    v18 = result & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v19 == v29;
        if (v19 == v29)
          v19 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v14 + 8 * v19);
      }
      while (v31 == -1);
      v20 = __clz(__rbit64(~v31)) + (v19 << 6);
    }
    *(_QWORD *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    v21 = 8 * v20;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + v21) = v33;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v21) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v4 = v38;
  v25 = (_QWORD *)(v6 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v37 = 1 << *(_BYTE *)(v6 + 32);
  if (v37 >= 64)
    bzero(v25, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v37;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

uint64_t sub_1002D5894(uint64_t a1, uint64_t a2)
{
  return sub_1002D58F4(a1, a2, (uint64_t *)&unk_100843940);
}

uint64_t sub_1002D58A0(uint64_t a1, uint64_t a2)
{
  return sub_1002D58F4(a1, a2, &qword_100843A00);
}

uint64_t sub_1002D58AC(uint64_t a1, uint64_t a2)
{
  return sub_1002D58F4(a1, a2, (uint64_t *)&unk_1008518B0);
}

uint64_t sub_1002D58B8(uint64_t a1, uint64_t a2)
{
  return sub_1002D58F4(a1, a2, &qword_100843A80);
}

uint64_t sub_1002D58C4(uint64_t a1, uint64_t a2)
{
  return sub_1002D58F4(a1, a2, &qword_100843B68);
}

uint64_t sub_1002D58D0(uint64_t a1, uint64_t a2)
{
  return sub_1002D58F4(a1, a2, (uint64_t *)&unk_100843BC0);
}

uint64_t sub_1002D58DC(uint64_t a1, uint64_t a2)
{
  return sub_1002D58F4(a1, a2, &qword_100851A60);
}

uint64_t sub_1002D58E8(uint64_t a1, uint64_t a2)
{
  return sub_1002D58F4(a1, a2, &qword_100851C10);
}

uint64_t sub_1002D58F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  _QWORD v41[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_10001A630(a3);
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v40 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v38 = v4;
  v39 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v22 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v23 = v22 | (v15 << 6);
      goto LABEL_34;
    }
    v24 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v39)
      break;
    v25 = (_QWORD *)(v6 + 64);
    v26 = *(_QWORD *)(v40 + 8 * v24);
    ++v15;
    if (!v26)
    {
      v15 = v24 + 1;
      if (v24 + 1 >= v39)
        goto LABEL_36;
      v26 = *(_QWORD *)(v40 + 8 * v15);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v39)
        {
LABEL_36:
          swift_release(v6);
          v4 = v38;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v40 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v15 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v15 >= v39)
              goto LABEL_36;
            v26 = *(_QWORD *)(v40 + 8 * v15);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v15 = v27;
      }
    }
LABEL_33:
    v12 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v15 << 6);
LABEL_34:
    v32 = 8 * v23;
    v33 = *(void **)(*(_QWORD *)(v6 + 48) + v32);
    v34 = *(void **)(*(_QWORD *)(v6 + 56) + v32);
    if ((a2 & 1) == 0)
    {
      v35 = v33;
      v36 = v34;
    }
    Hasher.init(_seed:)(v41, *(_QWORD *)(v9 + 40));
    v16 = v33;
    NSObject.hash(into:)(v41);

    result = Hasher._finalize()();
    v17 = -1 << *(_BYTE *)(v9 + 32);
    v18 = result & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v13 + 8 * (v18 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v13 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v19 == v29;
        if (v19 == v29)
          v19 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v13 + 8 * v19);
      }
      while (v31 == -1);
      v20 = __clz(__rbit64(~v31)) + (v19 << 6);
    }
    *(_QWORD *)(v13 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    v21 = 8 * v20;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + v21) = v16;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v21) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v4 = v38;
  v25 = (_QWORD *)(v6 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v37 = 1 << *(_BYTE *)(v6 + 32);
  if (v37 >= 64)
    bzero(v25, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v37;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

uint64_t sub_1002D5BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  Swift::Int v15;
  unint64_t v16;
  uint64_t result;
  _QWORD v19[9];

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630((uint64_t *)&unk_100839C80);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v19[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)(v19, *(_QWORD *)(a3 + 40));
  sub_100008868(a1, (uint64_t)v13, (uint64_t *)&unk_100839C80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v13, v6);
    Hasher._combine(_:)(1u);
    v14 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v19, v6, v14);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  v15 = Hasher._finalize()();
  v16 = _HashTable.nextHole(atOrAfter:)(v15 & ~(-1 << *(_BYTE *)(a3 + 32)), a3 + 64, ~(-1 << *(_BYTE *)(a3 + 32)));
  *(_QWORD *)(a3 + 64 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
  result = sub_1000A5CA8(a1, *(_QWORD *)(a3 + 48) + *(_QWORD *)(v11 + 72) * v16, (uint64_t *)&unk_100839C80);
  *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v16) = a2;
  ++*(_QWORD *)(a3 + 16);
  return result;
}

id sub_1002D5DD0()
{
  return sub_1002DA3C8(&qword_100843E98);
}

void sub_1002D5DDC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_10001A630(&qword_100843EA8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 4 * v15;
    LODWORD(v17) = *(_DWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + v20) = (_DWORD)v17;
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1002D5F88()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_10001A630(&qword_100843910);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

id sub_1002D6134()
{
  return sub_1002DAECC(&qword_10083DFD8);
}

void *sub_1002D6140()
{
  return sub_1002D7DEC(&qword_10083DF88);
}

id sub_1002D614C()
{
  return sub_1002DA768((uint64_t *)&unk_100844160);
}

void sub_1002D6158()
{
  sub_1002D9D08((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_100844038);
}

id sub_1002D616C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  v1 = v0;
  sub_10001A630((uint64_t *)&unk_1008443B0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    sub_10001A670(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    sub_10001A6CC(v22, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1002D6330()
{
  return sub_1002D7FAC((uint64_t (*)(_QWORD))&type metadata accessor for REMAccountsListDataView.ReminderCounts.ComputedCountContainer, (uint64_t *)&unk_100844460);
}

void *sub_1002D6344()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A630(&qword_100844320);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v5);
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v25 = v5 + 64;
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v18);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1002D6568()
{
  return sub_1002DA768(&qword_100844150);
}

void sub_1002D6574()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_10001A630(&qword_1008436F8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v22);
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

id sub_1002D672C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v1 = v0;
  sub_10001A630(&qword_100844428);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1002D68CC()
{
  sub_1002DA91C(&qword_100844518);
}

id sub_1002D68D8()
{
  return sub_1002DAECC((uint64_t *)&unk_100844410);
}

id sub_1002D68E4()
{
  return sub_1002DAECC(&qword_10083DFF8);
}

id sub_1002D68F0()
{
  return sub_1002D7FAC((uint64_t (*)(_QWORD))&type metadata accessor for REMRemindersListDataView.ListsModel.Sublist, &qword_100844548);
}

id sub_1002D6904()
{
  return sub_1002DA3C8((uint64_t *)&unk_100844180);
}

id sub_1002D6910()
{
  return sub_1002DA768((uint64_t *)&unk_100843810);
}

void *sub_1002D691C()
{
  return sub_1002DA21C(&qword_1008437F8);
}

id sub_1002D6928()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10001A630(&qword_100844560);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = v18;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1002D6ACC()
{
  return sub_1002D7FAC((uint64_t (*)(_QWORD))&type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List, &qword_1008443F8);
}

void sub_1002D6AE0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10001A630(&qword_100844498);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v18);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    swift_bridgeObjectRetain(*((_QWORD *)&v19 + 1));
    swift_bridgeObjectRetain(v17);
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

id sub_1002D6C90()
{
  return sub_1002DAECC(&qword_10083DF98);
}

void *sub_1002D6C9C()
{
  return sub_1002D7618(&qword_1008444D0);
}

void *sub_1002D6CA8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _OWORD v26[2];

  v1 = v0;
  v2 = type metadata accessor for CodingUserInfoKey(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A630(&qword_1008443E0);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release(v6);
LABEL_28:
    *v1 = v8;
    return result;
  }
  v24 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v25 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v16)
        goto LABEL_26;
      v22 = *(_QWORD *)(v25 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    v20 = 32 * v18;
    sub_10001A670(*(_QWORD *)(v6 + 56) + v20, (uint64_t)v26);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v19, v5, v2);
    result = sub_10001A6CC(v26, (_OWORD *)(*(_QWORD *)(v8 + 56) + v20));
  }
  v23 = v21 + 2;
  if (v23 >= v16)
  {
LABEL_26:
    result = (void *)swift_release(v6);
    v1 = v24;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v25 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_1002D6EE4()
{
  sub_1002D9D08((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_1008438F0);
}

void *sub_1002D6EF8()
{
  return sub_1002DA21C((uint64_t *)&unk_1008443A0);
}

id sub_1002D6F04()
{
  return sub_1002DAECC(&qword_10083DFE0);
}

void *sub_1002D6F10()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  sub_10001A630(&qword_1008436B0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_1002933E0(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    sub_10001A670(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    result = sub_10001A6CC(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1002D70F4()
{
  sub_1002DA91C(&qword_100843B08);
}

void sub_1002D7100()
{
  sub_1002D9D08((uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t *)&unk_100844330);
}

void sub_1002D7114()
{
  sub_1002DA91C(&qword_100843978);
}

id sub_1002D7120()
{
  return sub_1002DA768(&qword_100844550);
}

void *sub_1002D712C()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  void (*v21)(unint64_t, char *, uint64_t);
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD **)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v25 - v6;
  sub_10001A630(&qword_100843770);
  v26 = v0;
  v8 = *v0;
  v9 = static _DictionaryStorage.copy(original:)(*v0);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_23:
    result = (void *)swift_release(v8);
    *v26 = v10;
    return result;
  }
  result = (void *)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12)
    result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  v27 = v8 + 64;
  v13 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v14 = 1 << *(_BYTE *)(v8 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v8 + 64);
  v28 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_9;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v22 >= v28)
      goto LABEL_23;
    v23 = *(_QWORD *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v28)
        goto LABEL_23;
      v23 = *(_QWORD *)(v27 + 8 * v13);
      if (!v23)
        break;
    }
LABEL_22:
    v16 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_9:
    v19 = v2[9] * v18;
    v20 = (void (*)(char *, unint64_t, uint64_t))v2[2];
    v20(v7, *(_QWORD *)(v8 + 48) + v19, v1);
    v20(v5, *(_QWORD *)(v8 + 56) + v19, v1);
    v21 = (void (*)(unint64_t, char *, uint64_t))v2[4];
    v21(*(_QWORD *)(v10 + 48) + v19, v7, v1);
    result = (void *)((uint64_t (*)(unint64_t, char *, uint64_t))v21)(*(_QWORD *)(v10 + 56) + v19, v5, v1);
  }
  v24 = v22 + 2;
  if (v24 >= v28)
    goto LABEL_23;
  v23 = *(_QWORD *)(v27 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v28)
      goto LABEL_23;
    v23 = *(_QWORD *)(v27 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

id sub_1002D7388()
{
  return sub_1002DAECC(&qword_10083DFA0);
}

id sub_1002D7394()
{
  return sub_1002DAECC(&qword_100843C08);
}

id sub_1002D73A0()
{
  return sub_1002DAECC((uint64_t *)&unk_100843820);
}

id sub_1002D73AC()
{
  return sub_1002DAECC(&qword_100843970);
}

void *sub_1002D73B8()
{
  return sub_1002DA21C(&qword_1008439C8);
}

id sub_1002D73C4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v1 = v0;
  v2 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag(0);
  v27 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A630((uint64_t *)&unk_10083BE30);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (id)swift_release(v5);
LABEL_28:
    *v1 = v7;
    return result;
  }
  v25 = v1;
  result = (id)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v26 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v15)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v11;
    if (!v22)
    {
      v11 = v21 + 1;
      if (v21 + 1 >= v15)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v11);
      if (!v22)
        break;
    }
LABEL_25:
    v14 = (v22 - 1) & v22;
    v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_12:
    v18 = 8 * v17;
    v19 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v17);
    v20 = *(_QWORD *)(v27 + 72) * v17;
    sub_1000151E8(*(_QWORD *)(v5 + 56) + v20, (uint64_t)v4, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v19;
    sub_1000B8680((uint64_t)v4, *(_QWORD *)(v7 + 56) + v20, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
    result = v19;
  }
  v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_26:
    result = (id)swift_release(v5);
    v1 = v25;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v11 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v11);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_1002D75F4()
{
  return sub_1002DAECC(&qword_100843D98);
}

id sub_1002D7600()
{
  return sub_1002DAECC((uint64_t *)&unk_1008442F0);
}

void *sub_1002D760C()
{
  return sub_1002D7618(&qword_100843EF8);
}

void *sub_1002D7618(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A630(a1);
  v26 = v1;
  v7 = *v1;
  v8 = static _DictionaryStorage.copy(original:)(*v1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v7);
    *v26 = v9;
    return result;
  }
  result = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  v27 = v7 + 64;
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v28 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v28)
        goto LABEL_26;
      v23 = *(_QWORD *)(v27 + 8 * v13);
      if (!v23)
        break;
    }
LABEL_25:
    v16 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(v7 + 48) + v19, v3);
    v20 = 8 * v18;
    v21 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v9 + 48) + v19, v6, v3);
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v20) = v21;
    result = (void *)swift_retain(v21);
  }
  v24 = v22 + 2;
  if (v24 >= v28)
    goto LABEL_26;
  v23 = *(_QWORD *)(v27 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1002D7848()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  sub_10001A630(&qword_1008442C0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v18);
    v20 = *v19;
    v21 = v19[1];
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v22 = v20;
    v22[1] = v21;
    v23 = v17;
    swift_bridgeObjectRetain(v21);
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_1002D79FC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  __int128 v24;

  v1 = v0;
  sub_10001A630(&qword_1008442B8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v24 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain(v18);
    result = (void *)sub_1000A70E4(v24, *((unint64_t *)&v24 + 1));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1002D7BC0()
{
  return sub_1002DAECC((uint64_t *)&unk_100843AD0);
}

void sub_1002D7BCC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_10001A630(&qword_1008438B0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    *v1 = v4;
    return;
  }
  v25 = v1;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_10001A670(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_10001A6CC(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

id sub_1002D7DB0()
{
  return sub_1002DAECC((uint64_t *)&unk_100851E50);
}

id sub_1002D7DBC()
{
  return sub_1002DAECC(&qword_100844220);
}

id sub_1002D7DC8()
{
  return sub_1002DAECC((uint64_t *)&unk_100851DC0);
}

id sub_1002D7DD4()
{
  return sub_1002DAECC(&qword_1008441C0);
}

void *sub_1002D7DE0()
{
  return sub_1002D7DEC(&qword_10083DF90);
}

void *sub_1002D7DEC(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v2 = v1;
  sub_10001A630(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      v10 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_26;
      v22 = *(_QWORD *)(v7 + 8 * v10);
      if (!v22)
        break;
    }
LABEL_25:
    v13 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    v19 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v19;
    v20 = v18;
    result = (void *)swift_retain(v19);
  }
  v23 = v21 + 2;
  if (v23 >= v14)
    goto LABEL_26;
  v22 = *(_QWORD *)(v7 + 8 * v23);
  if (v22)
  {
    v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v10);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1002D7F8C()
{
  return sub_1002DAECC(&qword_100843B20);
}

id sub_1002D7F98()
{
  return sub_1002D7FAC((uint64_t (*)(_QWORD))&type metadata accessor for REMManualOrdering.PinnedList, &qword_100843B38);
}

id sub_1002D7FAC(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int64_t v29;

  v4 = a1(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - v6;
  sub_10001A630(a2);
  v27 = v2;
  v8 = *v2;
  v9 = static _DictionaryStorage.copy(original:)(*v2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_26:
    result = (id)swift_release(v8);
    *v27 = v10;
    return result;
  }
  result = (id)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12)
    result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v28 = v8 + 64;
  v29 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v29)
      goto LABEL_26;
    v24 = *(_QWORD *)(v28 + 8 * v23);
    ++v14;
    if (!v24)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v29)
        goto LABEL_26;
      v24 = *(_QWORD *)(v28 + 8 * v14);
      if (!v24)
        break;
    }
LABEL_25:
    v17 = (v24 - 1) & v24;
    v19 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_12:
    v20 = 8 * v19;
    v21 = *(void **)(*(_QWORD *)(v8 + 48) + 8 * v19);
    v22 = *(_QWORD *)(v5 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(_QWORD *)(v8 + 56) + v22, v4);
    *(_QWORD *)(*(_QWORD *)(v10 + 48) + v20) = v21;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 56) + v22, v7, v4);
    result = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v29)
    goto LABEL_26;
  v24 = *(_QWORD *)(v28 + 8 * v25);
  if (v24)
  {
    v14 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v14 >= v29)
      goto LABEL_26;
    v24 = *(_QWORD *)(v28 + 8 * v14);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1002D81D0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10001A630((uint64_t *)&unk_100844600);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v18;
    result = v17;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1002D8374()
{
  return sub_1002DAECC(&qword_10083E008);
}

void *sub_1002D8380()
{
  return sub_1002DA21C(&qword_100843878);
}

id sub_1002D838C()
{
  return sub_1002DAECC(&qword_100843CB0);
}

id sub_1002D8398()
{
  return sub_1002DAECC(&qword_100843CD8);
}

id sub_1002D83A4()
{
  return sub_1002DAECC(&qword_100843D10);
}

id sub_1002D83B0()
{
  return sub_1002DAECC(&qword_100843D38);
}

id sub_1002D83BC()
{
  return sub_1002DAECC(&qword_100843D70);
}

id sub_1002D83C8()
{
  return sub_1002DAECC(&qword_100843DD0);
}

id sub_1002D83D4()
{
  return sub_1002DAC98(&qword_100843C40);
}

void sub_1002D83E0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;

  v1 = v0;
  sub_10001A630(&qword_100843720);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v30 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v30 >= v13)
      goto LABEL_26;
    v31 = *(_QWORD *)(v6 + 8 * v30);
    ++v9;
    if (!v31)
    {
      v9 = v30 + 1;
      if (v30 + 1 >= v13)
        goto LABEL_26;
      v31 = *(_QWORD *)(v6 + 8 * v9);
      if (!v31)
        break;
    }
LABEL_25:
    v12 = (v31 - 1) & v31;
    v15 = __clz(__rbit64(v31)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 48 * v15;
    v21 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = *v21;
    v23 = v21[1];
    v24 = v21[2];
    v25 = v21[3];
    v26 = v21[4];
    v27 = v21[5];
    v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v28 = v19;
    v28[1] = v18;
    v29 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v20);
    *v29 = v22;
    v29[1] = v23;
    v29[2] = v24;
    v29[3] = v25;
    v29[4] = v26;
    v29[5] = v27;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v27);
  }
  v32 = v30 + 2;
  if (v32 >= v13)
    goto LABEL_26;
  v31 = *(_QWORD *)(v6 + 8 * v32);
  if (v31)
  {
    v9 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v31 = *(_QWORD *)(v6 + 8 * v9);
    ++v32;
    if (v31)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

id sub_1002D85C8()
{
  return sub_1002DA3C8((uint64_t *)&unk_100843E70);
}

id sub_1002D85D4()
{
  return sub_1002DA768((uint64_t *)&unk_1008436C0);
}

id sub_1002D85E0()
{
  return sub_1002DA768(&qword_100843718);
}

void sub_1002D85EC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  const void *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v36 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v35 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A630(&qword_100843730);
  v32 = v0;
  v3 = *v0;
  v4 = static _DictionaryStorage.copy(original:)(*v0);
  v5 = *(_QWORD *)(v3 + 16);
  v38 = v4;
  if (!v5)
  {
    swift_release(v3);
    v30 = v38;
    v29 = v32;
LABEL_28:
    *v29 = v30;
    return;
  }
  v6 = v4;
  v7 = (void *)(v4 + 64);
  v8 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  v34 = (const void *)(v3 + 64);
  if (v6 != v3 || (unint64_t)v7 >= v3 + 64 + 8 * v8)
  {
    memmove(v7, v34, 8 * v8);
    v6 = v38;
  }
  v10 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v37 = v3;
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v33 = (unint64_t)(v11 + 63) >> 6;
  v15 = v35;
  v14 = v36;
  v16 = v38;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v10 << 6);
      v19 = v37;
      goto LABEL_12;
    }
    v26 = v10 + 1;
    v19 = v37;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v33)
      goto LABEL_26;
    v27 = *((_QWORD *)v34 + v26);
    ++v10;
    if (!v27)
    {
      v10 = v26 + 1;
      if (v26 + 1 >= v33)
        goto LABEL_26;
      v27 = *((_QWORD *)v34 + v10);
      if (!v27)
        break;
    }
LABEL_25:
    v13 = (v27 - 1) & v27;
    v18 = __clz(__rbit64(v27)) + (v10 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v1 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v15, *(_QWORD *)(v19 + 48) + v20, v14);
    v21 = 16 * v18;
    v22 = (uint64_t *)(*(_QWORD *)(v19 + 56) + 16 * v18);
    v23 = *v22;
    v24 = v22[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v16 + 48) + v20, v15, v14);
    v25 = (_QWORD *)(*(_QWORD *)(v16 + 56) + v21);
    *v25 = v23;
    v25[1] = v24;
    swift_bridgeObjectRetain(v24);
  }
  v28 = v26 + 2;
  if (v28 >= v33)
  {
LABEL_26:
    swift_release(v37);
    v29 = v32;
    v30 = v38;
    goto LABEL_28;
  }
  v27 = *((_QWORD *)v34 + v28);
  if (v27)
  {
    v10 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v10 >= v33)
      goto LABEL_26;
    v27 = *((_QWORD *)v34 + v10);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

id sub_1002D885C()
{
  return sub_1002DA768(&qword_100843738);
}

void sub_1002D8868()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  id v24;
  id v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  sub_10001A630(&qword_100843758);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 24 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v21 = *(void **)v19;
    v20 = *(_QWORD *)(v19 + 8);
    v22 = *(_QWORD *)(v19 + 16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v23 = v21;
    v23[1] = v20;
    v23[2] = v22;
    v24 = v17;
    v25 = v21;
    swift_bridgeObjectRetain(v22);
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

id sub_1002D8A34()
{
  return sub_1002DA768(&qword_100843710);
}

void *sub_1002D8A40()
{
  return sub_1002D9F4C(_s31ThreadSafePartialRepresentationVMa, &qword_100843750);
}

void *sub_1002D8A54()
{
  return sub_1002D95F0((uint64_t (*)(_QWORD))&type metadata accessor for Date, &qword_100843B10);
}

id sub_1002D8A68()
{
  return sub_1002DAECC((uint64_t *)&unk_100844860);
}

void *sub_1002D8A74()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  __int128 v26[2];

  v1 = v0;
  sub_10001A630(&qword_100844848);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release(v2);
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 40 * v15;
    sub_100018618(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_10001BCA8(v26, *(_QWORD *)(v4 + 56) + v20);
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1002D8C5C()
{
  return sub_1002DA21C(&qword_100844650);
}

void sub_1002D8C68()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  const void *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v36 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v35 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A630(&qword_100844008);
  v32 = v0;
  v3 = *v0;
  v4 = static _DictionaryStorage.copy(original:)(*v0);
  v5 = *(_QWORD *)(v3 + 16);
  v38 = v4;
  if (!v5)
  {
    swift_release(v3);
    v30 = v38;
    v29 = v32;
LABEL_28:
    *v29 = v30;
    return;
  }
  v6 = v4;
  v7 = (void *)(v4 + 64);
  v8 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  v34 = (const void *)(v3 + 64);
  if (v6 != v3 || (unint64_t)v7 >= v3 + 64 + 8 * v8)
  {
    memmove(v7, v34, 8 * v8);
    v6 = v38;
  }
  v10 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v37 = v3;
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v33 = (unint64_t)(v11 + 63) >> 6;
  v15 = v35;
  v14 = v36;
  v16 = v38;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v10 << 6);
      v19 = v37;
      goto LABEL_12;
    }
    v26 = v10 + 1;
    v19 = v37;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v33)
      goto LABEL_26;
    v27 = *((_QWORD *)v34 + v26);
    ++v10;
    if (!v27)
    {
      v10 = v26 + 1;
      if (v26 + 1 >= v33)
        goto LABEL_26;
      v27 = *((_QWORD *)v34 + v10);
      if (!v27)
        break;
    }
LABEL_25:
    v13 = (v27 - 1) & v27;
    v18 = __clz(__rbit64(v27)) + (v10 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v1 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v15, *(_QWORD *)(v19 + 48) + v20, v14);
    v21 = 16 * v18;
    v22 = (uint64_t *)(*(_QWORD *)(v19 + 56) + 16 * v18);
    v23 = *v22;
    v24 = v22[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v16 + 48) + v20, v15, v14);
    v25 = (_QWORD *)(*(_QWORD *)(v16 + 56) + v21);
    *v25 = v23;
    v25[1] = v24;
    swift_bridgeObjectRetain(v24);
  }
  v28 = v26 + 2;
  if (v28 >= v33)
  {
LABEL_26:
    swift_release(v37);
    v29 = v32;
    v30 = v38;
    goto LABEL_28;
  }
  v27 = *((_QWORD *)v34 + v28);
  if (v27)
  {
    v10 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v10 >= v33)
      goto LABEL_26;
    v27 = *((_QWORD *)v34 + v10);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

id sub_1002D8ED8()
{
  return sub_1002DAECC((uint64_t *)&unk_1008439D0);
}

id sub_1002D8EE4()
{
  return sub_1002DAECC((uint64_t *)&unk_100851C80);
}

id sub_1002D8EF0()
{
  return sub_1002DAECC((uint64_t *)&unk_100843F90);
}

void *sub_1002D8EFC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_10001A630(&qword_1008439F8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1002D90B0()
{
  sub_1002DA91C(&qword_100844570);
}

void sub_1002D90BC()
{
  sub_1002D9D08((uint64_t (*)(_QWORD))&type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType, &qword_100844590);
}

void *sub_1002D90D0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  sub_10001A630(&qword_1008445D8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1002D925C()
{
  sub_1002DA91C(&qword_1008445B8);
}

void *sub_1002D9268()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  sub_10001A630(&qword_1008445B0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1002D93F4()
{
  sub_1002DA91C(&qword_100844120);
}

void *sub_1002D9400()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_10001A630(&qword_100843EF0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_errorRetain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1002D95B4()
{
  sub_1002D9D08((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_100843F28);
}

void sub_1002D95C8()
{
  sub_1002D9D08((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_100844480);
}

void *sub_1002D95DC()
{
  return sub_1002D95F0((uint64_t (*)(_QWORD))&type metadata accessor for REMAccountsListDataView.Model.PinnedList, &qword_100844448);
}

void *sub_1002D95F0(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  v37 = a1(0);
  v4 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v6 = (char *)&v33 - v5;
  sub_10001A630(a2);
  v34 = v2;
  v7 = *v2;
  v8 = static _DictionaryStorage.copy(original:)(*v2);
  v9 = *(_QWORD *)(v7 + 16);
  v38 = v8;
  if (!v9)
  {
    result = (void *)swift_release(v7);
    v32 = v38;
    v31 = v34;
LABEL_28:
    *v31 = v32;
    return result;
  }
  v10 = v8;
  result = (void *)(v8 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v7 || (unint64_t)result >= v7 + 64 + 8 * v12)
  {
    result = memmove(result, (const void *)(v7 + 64), 8 * v12);
    v10 = v38;
  }
  v35 = v7 + 64;
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v7 + 16);
  v15 = 1 << *(_BYTE *)(v7 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v7 + 64);
  v36 = (unint64_t)(v15 + 63) >> 6;
  v18 = v37;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    v28 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v36)
      goto LABEL_26;
    v29 = *(_QWORD *)(v35 + 8 * v28);
    ++v14;
    if (!v29)
    {
      v14 = v28 + 1;
      if (v28 + 1 >= v36)
        goto LABEL_26;
      v29 = *(_QWORD *)(v35 + 8 * v14);
      if (!v29)
        break;
    }
LABEL_25:
    v17 = (v29 - 1) & v29;
    v20 = __clz(__rbit64(v29)) + (v14 << 6);
LABEL_12:
    v21 = 16 * v20;
    v22 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v20);
    v24 = *v22;
    v23 = v22[1];
    v25 = *(_QWORD *)(v4 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(v7 + 56) + v25, v18);
    v26 = v38;
    v27 = (_QWORD *)(*(_QWORD *)(v38 + 48) + v21);
    *v27 = v24;
    v27[1] = v23;
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v26 + 56) + v25, v6, v18);
    result = (void *)swift_bridgeObjectRetain(v23);
  }
  v30 = v28 + 2;
  if (v30 >= v36)
  {
LABEL_26:
    result = (void *)swift_release(v7);
    v31 = v34;
    v32 = v38;
    goto LABEL_28;
  }
  v29 = *(_QWORD *)(v35 + 8 * v30);
  if (v29)
  {
    v14 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v14 >= v36)
      goto LABEL_26;
    v29 = *(_QWORD *)(v35 + 8 * v14);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_1002D984C()
{
  return sub_1002DAECC(&qword_100844100);
}

id sub_1002D9858()
{
  return sub_1002DAECC(&qword_10083E000);
}

id sub_1002D9864()
{
  return sub_1002DAC98(&qword_100843F30);
}

void *sub_1002D9870()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27[2];

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A630(&qword_1008440F8);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release(v6);
LABEL_28:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v26 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v16)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    v20 = 40 * v18;
    sub_100018618(*(_QWORD *)(v6 + 56) + v20, (uint64_t)v27);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v19, v5, v2);
    result = (void *)sub_10001BCA8(v27, *(_QWORD *)(v8 + 56) + v20);
  }
  v23 = v21 + 2;
  if (v23 >= v16)
  {
LABEL_26:
    result = (void *)swift_release(v6);
    v1 = v25;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_1002D9AB0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A630(&qword_1008440F0);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    swift_release(v5);
    *v24 = v7;
    return;
  }
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    swift_unknownObjectRetain(v19);
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1002D9CE0()
{
  sub_1002D9D08((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_100844018);
}

void sub_1002D9CF4()
{
  sub_1002D9D08((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_100844010);
}

void sub_1002D9D08(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int64_t v29;

  v4 = a1(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - v6;
  sub_10001A630(a2);
  v27 = v2;
  v8 = *v2;
  v9 = static _DictionaryStorage.copy(original:)(*v2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_26:
    swift_release(v8);
    *v27 = v10;
    return;
  }
  v11 = (void *)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)v11 >= v8 + 64 + 8 * v12)
    memmove(v11, (const void *)(v8 + 64), 8 * v12);
  v28 = v8 + 64;
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v29 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v29)
      goto LABEL_26;
    v24 = *(_QWORD *)(v28 + 8 * v23);
    ++v14;
    if (!v24)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v29)
        goto LABEL_26;
      v24 = *(_QWORD *)(v28 + 8 * v14);
      if (!v24)
        break;
    }
LABEL_25:
    v17 = (v24 - 1) & v24;
    v19 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v5 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(_QWORD *)(v8 + 48) + v20, v4);
    v21 = 8 * v19;
    v22 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v19);
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 48) + v20, v7, v4);
    *(_QWORD *)(*(_QWORD *)(v10 + 56) + v21) = v22;
    swift_bridgeObjectRetain(v22);
  }
  v25 = v23 + 2;
  if (v25 >= v29)
    goto LABEL_26;
  v24 = *(_QWORD *)(v28 + 8 * v25);
  if (v24)
  {
    v14 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v14 >= v29)
      goto LABEL_26;
    v24 = *(_QWORD *)(v28 + 8 * v14);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_1002D9F38()
{
  return sub_1002D9F4C(type metadata accessor for RDSavedReminder, &qword_100844028);
}

void *sub_1002D9F4C(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t i;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD);
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t (*v41)(_QWORD);
  uint64_t v42;
  uint64_t v43;

  v41 = a1;
  v4 = a1(0);
  v40 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v39 = (char *)&v34 - v5;
  v38 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v37 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A630(a2);
  v34 = v2;
  v8 = *v2;
  v9 = static _DictionaryStorage.copy(original:)(*v2);
  v10 = *(_QWORD *)(v8 + 16);
  v43 = v9;
  if (!v10)
  {
    result = (void *)swift_release(v8);
    v33 = v43;
    v32 = v34;
LABEL_25:
    *v32 = v33;
    return result;
  }
  v11 = v9;
  result = (void *)(v9 + 64);
  v13 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v8 || (unint64_t)result >= v8 + 64 + 8 * v13)
  {
    result = memmove(result, (const void *)(v8 + 64), 8 * v13);
    v11 = v43;
  }
  v14 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v8 + 16);
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v42 = v8;
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v35 = v8 + 64;
  v36 = (unint64_t)(v15 + 63) >> 6;
  v19 = v37;
  v18 = v38;
  v20 = (uint64_t)v39;
  for (i = v43; ; result = (void *)sub_1000B8680(v20, *(_QWORD *)(i + 56) + v28, v27))
  {
    if (v17)
    {
      v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v23 = v22 | (v14 << 6);
      v24 = v42;
      goto LABEL_9;
    }
    v29 = v14 + 1;
    v24 = v42;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v29 >= v36)
      goto LABEL_23;
    v30 = *(_QWORD *)(v35 + 8 * v29);
    ++v14;
    if (!v30)
    {
      v14 = v29 + 1;
      if (v29 + 1 >= v36)
        goto LABEL_23;
      v30 = *(_QWORD *)(v35 + 8 * v14);
      if (!v30)
        break;
    }
LABEL_22:
    v17 = (v30 - 1) & v30;
    v23 = __clz(__rbit64(v30)) + (v14 << 6);
LABEL_9:
    v25 = *(_QWORD *)(v6 + 72) * v23;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v19, *(_QWORD *)(v24 + 48) + v25, v18);
    v26 = *(_QWORD *)(v24 + 56);
    v27 = v41;
    v28 = *(_QWORD *)(v40 + 72) * v23;
    sub_1000151E8(v26 + v28, v20, v41);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(i + 48) + v25, v19, v18);
  }
  v31 = v29 + 2;
  if (v31 >= v36)
  {
LABEL_23:
    result = (void *)swift_release(v42);
    v32 = v34;
    v33 = v43;
    goto LABEL_25;
  }
  v30 = *(_QWORD *)(v35 + 8 * v31);
  if (v30)
  {
    v14 = v31;
    goto LABEL_22;
  }
  while (1)
  {
    v14 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v14 >= v36)
      goto LABEL_23;
    v30 = *(_QWORD *)(v35 + 8 * v14);
    ++v31;
    if (v30)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1002DA210()
{
  return sub_1002DA21C(&qword_100844178);
}

void *sub_1002DA21C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v2 = v1;
  sub_10001A630(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      v10 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_26;
      v22 = *(_QWORD *)(v7 + 8 * v10);
      if (!v22)
        break;
    }
LABEL_25:
    v13 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    v19 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v19;
    v20 = v18;
    result = (void *)swift_bridgeObjectRetain(v19);
  }
  v23 = v21 + 2;
  if (v23 >= v14)
    goto LABEL_26;
  v22 = *(_QWORD *)(v7 + 8 * v23);
  if (v22)
  {
    v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v10);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1002DA3BC()
{
  return sub_1002DA3C8(&qword_100843F48);
}

id sub_1002DA3C8(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v2 = v1;
  sub_10001A630(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v14)
      goto LABEL_26;
    v21 = *(_QWORD *)(v7 + 8 * v20);
    ++v10;
    if (!v21)
    {
      v10 = v20 + 1;
      if (v20 + 1 >= v14)
        goto LABEL_26;
      v21 = *(_QWORD *)(v7 + 8 * v10);
      if (!v21)
        break;
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    v19 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v19;
    result = v18;
  }
  v22 = v20 + 2;
  if (v22 >= v14)
    goto LABEL_26;
  v21 = *(_QWORD *)(v7 + 8 * v22);
  if (v21)
  {
    v10 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v21 = *(_QWORD *)(v7 + 8 * v10);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1002DA560()
{
  return sub_1002DA768(&qword_1008440D0);
}

id sub_1002DA56C()
{
  return sub_1002DA768((uint64_t *)&unk_100843ED0);
}

void *sub_1002DA578()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v1 = v0;
  sub_10001A630((uint64_t *)&unk_100843850);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    swift_retain(v17);
    result = (void *)swift_retain(v18);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1002DA720()
{
  return sub_1002DAECC(&qword_10083DFD0);
}

void sub_1002DA72C()
{
  sub_1002DA91C(&qword_1008440D8);
}

id sub_1002DA738()
{
  return sub_1002DAECC(&qword_10083DFC0);
}

id sub_1002DA744()
{
  return sub_1002DA768((uint64_t *)&unk_100844050);
}

void sub_1002DA750()
{
  sub_1002DA91C(&qword_100844000);
}

id sub_1002DA75C()
{
  return sub_1002DA768(&qword_1008438D8);
}

id sub_1002DA768(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  sub_10001A630(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(void **)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    result = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1002DA910()
{
  sub_1002DA91C(&qword_100843FC8);
}

void sub_1002DA91C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  sub_10001A630(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    swift_release(v3);
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v21);
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_1002DAAC8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_10001A630(&qword_100843DF8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1002DAC74()
{
  return sub_1002DAECC((uint64_t *)&unk_1008446B0);
}

id sub_1002DAC80()
{
  return sub_1002DAECC((uint64_t *)&unk_10083E010);
}

id sub_1002DAC8C()
{
  return sub_1002DAC98((uint64_t *)&unk_1008446A0);
}

id sub_1002DAC98(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A630(a1);
  v26 = v1;
  v7 = *v1;
  v8 = static _DictionaryStorage.copy(original:)(*v1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_26:
    result = (id)swift_release(v7);
    *v26 = v9;
    return result;
  }
  result = (id)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v27 = v7 + 64;
  v28 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v28)
        goto LABEL_26;
      v23 = *(_QWORD *)(v27 + 8 * v13);
      if (!v23)
        break;
    }
LABEL_25:
    v16 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(v7 + 48) + v19, v3);
    v20 = 8 * v18;
    v21 = *(void **)(*(_QWORD *)(v7 + 56) + v20);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v9 + 48) + v19, v6, v3);
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v20) = v21;
    result = v21;
  }
  v24 = v22 + 2;
  if (v24 >= v28)
    goto LABEL_26;
  v23 = *(_QWORD *)(v27 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1002DAEC0()
{
  return sub_1002DAECC((uint64_t *)&unk_1008443C0);
}

id sub_1002DAECC(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v2 = v1;
  sub_10001A630(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      v10 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_26;
      v22 = *(_QWORD *)(v7 + 8 * v10);
      if (!v22)
        break;
    }
LABEL_25:
    v13 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    v19 = *(void **)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v19;
    v20 = v18;
    result = v19;
  }
  v23 = v21 + 2;
  if (v23 >= v14)
    goto LABEL_26;
  v22 = *(_QWORD *)(v7 + 8 * v23);
  if (v22)
  {
    v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v10);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1002DB068()
{
  return sub_1002DAECC((uint64_t *)&unk_100843940);
}

id sub_1002DB074()
{
  return sub_1002DAECC(&qword_100843A00);
}

id sub_1002DB080()
{
  return sub_1002DAECC((uint64_t *)&unk_1008518B0);
}

id sub_1002DB08C()
{
  return sub_1002DAECC(&qword_100843A80);
}

id sub_1002DB098()
{
  return sub_1002DAECC(&qword_100843B68);
}

id sub_1002DB0A4()
{
  return sub_1002DAECC((uint64_t *)&unk_100843BC0);
}

id sub_1002DB0B0()
{
  return sub_1002DAECC(&qword_100851A60);
}

id sub_1002DB0BC()
{
  return sub_1002DAECC(&qword_100851C10);
}

uint64_t sub_1002DB0C8(Swift::Int *a1, void *a2)
{
  return sub_1002DDAAC(a1, a2, &qword_1008440E0, UNNotificationCategory_ptr, &qword_1008440E8);
}

uint64_t sub_1002DB0E4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_1002E0E70(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1002DB290(uint64_t *a1, uint64_t a2)
{
  return sub_1002DC7C8(a1, a2, &qword_10083FD40, &qword_100843AB0);
}

uint64_t sub_1002DB2A4(uint64_t *a1, uint64_t a2)
{
  return sub_1002DC7C8(a1, a2, &qword_10083FCA0, &qword_100843848);
}

uint64_t sub_1002DB2B8(uint64_t *a1, uint64_t a2)
{
  return sub_1002DC7C8(a1, a2, (uint64_t *)&unk_10083AEC0, (uint64_t *)&unk_1008436A0);
}

uint64_t sub_1002DB2CC(Swift::Int *a1, void *a2)
{
  return sub_1002DDAAC(a1, a2, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr, &qword_100843728);
}

uint64_t sub_1002DB2E8(Swift::Int *a1, void *a2)
{
  return sub_1002DDAAC(a1, a2, (unint64_t *)&qword_10083AE90, off_1007D6708, &qword_100843B28);
}

uint64_t sub_1002DB304(Swift::Int *a1, void *a2)
{
  return sub_100017040(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for REMObjectID_Codable, &qword_100840EB8);
}

uint64_t sub_1002DB318(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  __n128 v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_10009FC50((unint64_t *)&qword_100843670, v12, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v10);
  v37 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v33 = v3;
    v34 = a1;
    v35 = ~v15;
    v36 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_10009FC50((unint64_t *)&qword_10083B380, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v37, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v36 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v35;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v33;
        a1 = v34;
        v26 = v36;
        goto LABEL_7;
      }
    }
    v32 = swift_bridgeObjectRelease(v21);
    ((void (*)(uint64_t, uint64_t, __n128))v25)(v37, v6, v32);
    v22(v34, *(_QWORD *)(*v33 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v37;
    v20(v9, v37, v6);
    v38 = *v3;
    *v3 = 0x8000000000000000;
    sub_1002E1328((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v38;
    v30 = swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v26 + 32))(a1, v28, v6, v30);
    return 1;
  }
}

uint64_t sub_1002DB574(uint64_t *a1, uint64_t a2)
{
  return sub_1002DC7C8(a1, a2, &qword_100843880, &qword_100843888);
}

uint64_t sub_1002DB588(_QWORD *a1, void *a2)
{
  return sub_1002DDDEC(a1, a2, &qword_100840DF8, (uint64_t *)&unk_100843C70);
}

uint64_t sub_1002DB59C(_QWORD *a1, void *a2)
{
  return sub_1002DDDEC(a1, a2, &qword_100840E38, (uint64_t *)&unk_100843E20);
}

uint64_t sub_1002DB5B0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t PredicateType;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  __n128 v27;
  char v28;
  char v29;
  uint64_t v30;
  __n128 v31;
  __n128 v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = v2;
  PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType(0);
  v7 = *(_QWORD *)(PredicateType - 8);
  __chkstk_darwin(PredicateType);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_10009FC50(&qword_100840EB0, v12, (uint64_t)&protocol conformance descriptor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
  swift_bridgeObjectRetain(v10);
  v38 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, PredicateType, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v34 = v3;
    v35 = a1;
    v36 = ~v15;
    v37 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, PredicateType);
      v23 = sub_10009FC50((unint64_t *)&qword_100844470, (uint64_t (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType, (uint64_t)&protocol conformance descriptor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v38, PredicateType, v23);
      v25 = *(void (**)(char *, uint64_t))(v37 + 8);
      v25(v9, PredicateType);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v36;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v34;
        a1 = v35;
        v26 = v37;
        goto LABEL_7;
      }
    }
    v33 = swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t, __n128))v25)(v38, PredicateType, v33);
    v22(v35, *(_QWORD *)(*v34 + 48) + v19 * v16, PredicateType);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    v27 = swift_isUniquelyReferenced_nonNull_native(*v3);
    v29 = v28;
    v30 = v38;
    ((void (*)(char *, uint64_t, uint64_t, __n128))v20)(v9, v38, PredicateType, v27);
    v39 = *v3;
    *v3 = 0x8000000000000000;
    sub_1002E1740((uint64_t)v9, v16, v29);
    *v3 = v39;
    v31 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v26 + 32))(a1, v30, PredicateType, v31);
    return 1;
  }
}

uint64_t sub_1002DB80C(uint64_t *a1, uint64_t a2)
{
  return sub_1002DC7C8(a1, a2, &qword_100843760, &qword_100843768);
}

uint64_t sub_1002DB820(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  __n128 v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = v2;
  v6 = type metadata accessor for REMManualOrdering.PinnedList(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_10009FC50(&qword_10083B598, v12, (uint64_t)&protocol conformance descriptor for REMManualOrdering.PinnedList);
  swift_bridgeObjectRetain(v10);
  v37 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v33 = v3;
    v34 = a1;
    v35 = ~v15;
    v36 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_10009FC50(&qword_100843B50, (uint64_t (*)(uint64_t))&type metadata accessor for REMManualOrdering.PinnedList, (uint64_t)&protocol conformance descriptor for REMManualOrdering.PinnedList);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v37, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v36 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v35;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v33;
        a1 = v34;
        v26 = v36;
        goto LABEL_7;
      }
    }
    v32 = swift_bridgeObjectRelease(v21);
    ((void (*)(uint64_t, uint64_t, __n128))v25)(v37, v6, v32);
    v22(v34, *(_QWORD *)(*v33 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v37;
    v20(v9, v37, v6);
    v38 = *v3;
    *v3 = 0x8000000000000000;
    sub_1002E1994((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v38;
    v30 = swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v26 + 32))(a1, v28, v6, v30);
    return 1;
  }
}

uint64_t sub_1002DBA7C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  __n128 v27;
  char v28;
  char v29;
  uint64_t v30;
  __n128 v31;
  __n128 v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = v2;
  v6 = type metadata accessor for REMAccountsListDataView.CachableProperty(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_10009FC50(&qword_100844430, v12, (uint64_t)&protocol conformance descriptor for REMAccountsListDataView.CachableProperty);
  swift_bridgeObjectRetain(v10);
  v38 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v34 = v3;
    v35 = a1;
    v36 = ~v15;
    v37 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_10009FC50(&qword_100844438, (uint64_t (*)(uint64_t))&type metadata accessor for REMAccountsListDataView.CachableProperty, (uint64_t)&protocol conformance descriptor for REMAccountsListDataView.CachableProperty);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v38, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v37 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v36;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v34;
        a1 = v35;
        v26 = v37;
        goto LABEL_7;
      }
    }
    v33 = swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t, __n128))v25)(v38, v6, v33);
    v22(v35, *(_QWORD *)(*v34 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    v27 = swift_isUniquelyReferenced_nonNull_native(*v3);
    v29 = v28;
    v30 = v38;
    ((void (*)(char *, uint64_t, uint64_t, __n128))v20)(v9, v38, v6, v27);
    v39 = *v3;
    *v3 = 0x8000000000000000;
    sub_1002E1BE8((uint64_t)v9, v16, v29);
    *v3 = v39;
    v31 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v26 + 32))(a1, v30, v6, v31);
    return 1;
  }
}

uint64_t sub_1002DBCD8(uint64_t *a1, uint64_t a2)
{
  return sub_1002DC7C8(a1, a2, &qword_100846BC0, &qword_100843E80);
}

uint64_t sub_1002DBCEC(Swift::Int *a1, void *a2)
{
  return sub_1002DDAAC(a1, a2, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr, &qword_100844680);
}

uint64_t sub_1002DBD08(Swift::Int *a1, void *a2)
{
  return sub_100017040(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedReminder, (uint64_t *)&unk_100843838);
}

uint64_t sub_1002DBD1C(Swift::Int *a1, void *a2)
{
  return sub_1002DDAAC(a1, a2, (unint64_t *)&qword_100839DE0, NSNumber_ptr, &qword_1008436E8);
}

uint64_t sub_1002DBD38(Swift::Int *a1, void *a2)
{
  return sub_1002DDAAC(a1, a2, (unint64_t *)&unk_10083D430, REMContactRepresentation_ptr, &qword_100844688);
}

uint64_t sub_1002DBD54(uint64_t *a1, uint64_t a2)
{
  return sub_1002DC7C8(a1, a2, &qword_1008436D0, (uint64_t *)&unk_1008436D8);
}

uint64_t sub_1002DBD68(Swift::Int *a1, void *a2)
{
  return sub_100017040(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for REMCDTemplate, &qword_100843B60);
}

uint64_t sub_1002DBD7C(_QWORD *a1, void *a2)
{
  return sub_1002DDDEC(a1, a2, &qword_100840DF0, (uint64_t *)&unk_100843C10);
}

uint64_t sub_1002DBD90(_QWORD *a1, void *a2)
{
  return sub_1002DDDEC(a1, a2, (uint64_t *)&unk_100840DB0, (uint64_t *)&unk_100843980);
}

uint64_t sub_1002DBDA4(Swift::Int *a1, void *a2)
{
  return sub_1002DDAAC(a1, a2, (unint64_t *)&qword_100839930, NSManagedObject_ptr, &qword_100844158);
}

uint64_t sub_1002DBDC0(_QWORD *a1, void *a2)
{
  return sub_1002DDDEC(a1, a2, &qword_100840E28, (uint64_t *)&unk_100843DA0);
}

uint64_t sub_1002DBDD4(Swift::Int *a1, void *a2)
{
  return sub_1002DDAAC(a1, a2, (unint64_t *)&qword_10083DA60, off_1007D66C8, &qword_100840EA0);
}

uint64_t sub_1002DBDF0(_QWORD *a1, void *a2)
{
  return sub_1002DDDEC(a1, a2, &qword_100843AE0, &qword_10083B588);
}

uint64_t sub_1002DBE04(Swift::Int *a1, void *a2)
{
  return sub_1002DDAAC(a1, a2, &qword_10083DAC0, REMHashtag_ptr, &qword_1008442A0);
}

uint64_t sub_1002DBE20(Swift::Int *a1, void *a2)
{
  return sub_1002DDAAC(a1, a2, (unint64_t *)&unk_10083FDE0, REMAssignment_ptr, &qword_100844288);
}

uint64_t sub_1002DBE3C(uint64_t *a1, uint64_t a2)
{
  return sub_1002DC7C8(a1, a2, &qword_10083DAA0, &qword_100844148);
}

uint64_t sub_1002DBE50(uint64_t *a1, uint64_t a2)
{
  return sub_1002DC7C8(a1, a2, (uint64_t *)&unk_10083DA70, (uint64_t *)&unk_100844360);
}

uint64_t sub_1002DBE64(_QWORD *a1, void *a2)
{
  return sub_1002DDDEC(a1, a2, &qword_100840E98, (uint64_t *)&unk_100844250);
}

uint64_t sub_1002DBE78(_QWORD *a1, void *a2)
{
  return sub_1002DDDEC(a1, a2, &qword_100840E90, &qword_100851E10);
}

uint64_t sub_1002DBE8C(_QWORD *a1, void *a2)
{
  return sub_1002DDDEC(a1, a2, &qword_100840E88, (uint64_t *)&unk_1008441F0);
}

uint64_t sub_1002DBEA0(_QWORD *a1, void *a2)
{
  return sub_1002DDDEC(a1, a2, &qword_100840E80, &qword_10083B648);
}

uint64_t sub_1002DBEB4(Swift::Int *a1, void *a2)
{
  return sub_1002DDAAC(a1, a2, &qword_10083AA30, off_1007D6658, &qword_100843830);
}

uint64_t sub_1002DBED0(Swift::Int *a1, void *a2)
{
  return sub_1002DDAAC(a1, a2, (unint64_t *)&unk_10083ADB0, off_1007D66F0, (uint64_t *)&unk_1008448E0);
}

uint64_t sub_1002DBEEC(Swift::Int *a1, void *a2)
{
  return sub_1002DD484(a1, a2, &qword_10083B640, &qword_1008441B0);
}

uint64_t sub_1002DBF00(_QWORD *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  char isUniquelyReferenced_nonNull_native;
  id v29;
  void *v31;
  id v32;
  _QWORD v33[9];

  v3 = v2;
  v6 = *v2;
  v7 = *(_QWORD *)(*v2 + 40);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v10 = v9;
  Hasher.init(_seed:)(v33, v7);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v33, v8, v10);
  v11 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v33[0] = *v3;
    *v3 = 0x8000000000000000;
    v29 = a2;
    sub_1002E1E3C((uint64_t)v29, v13, isUniquelyReferenced_nonNull_native);
    *v3 = v33[0];
    swift_bridgeObjectRelease();
    *a1 = v29;
    return 1;
  }
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13));
  v16 = v15;
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v14 == v17 && v16 == v18)
  {
LABEL_16:
    swift_bridgeObjectRelease_n(v16, 2);
  }
  else
  {
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v17, v18, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
    {
      v21 = ~v12;
      do
      {
        v13 = (v13 + 1) & v21;
        if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          goto LABEL_15;
        v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13));
        v16 = v23;
        v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
        if (v22 == v24 && v16 == v25)
          goto LABEL_16;
        v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v16, v24, v25, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      while ((v27 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease();
  v31 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v13);
  *a1 = v31;
  v32 = v31;
  return 0;
}

uint64_t sub_1002DC128(_QWORD *a1, void *a2)
{
  return sub_1002DDDEC(a1, a2, &qword_100840E00, &qword_10083B5C8);
}

uint64_t sub_1002DC13C(_QWORD *a1, void *a2)
{
  return sub_1002DDDEC(a1, a2, &qword_100840E08, (uint64_t *)&unk_100843CE0);
}

uint64_t sub_1002DC150(_QWORD *a1, void *a2)
{
  return sub_1002DDDEC(a1, a2, &qword_100840E10, &qword_10083B5E0);
}

uint64_t sub_1002DC164(_QWORD *a1, void *a2)
{
  return sub_1002DDDEC(a1, a2, &qword_100840E18, (uint64_t *)&unk_100843D40);
}

uint64_t sub_1002DC178(_QWORD *a1, void *a2)
{
  return sub_1002DDDEC(a1, a2, &qword_100840E20, &qword_10083B5F8);
}

uint64_t sub_1002DC18C(_QWORD *a1, void *a2)
{
  return sub_1002DDDEC(a1, a2, &qword_100840E30, &qword_10083B610);
}

uint64_t sub_1002DC1A0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  __n128 v29;
  __n128 v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = v2;
  v6 = type metadata accessor for Calendar.Component(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_10009FC50(&qword_100843E00, v12, (uint64_t)&protocol conformance descriptor for Calendar.Component);
  swift_bridgeObjectRetain(v10);
  v36 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v32 = v3;
    v33 = a1;
    v34 = ~v15;
    v35 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_10009FC50(&qword_100843E08, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v36, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v35 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v34;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v32;
        a1 = v33;
        v26 = v35;
        goto LABEL_7;
      }
    }
    v31 = swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t, __n128))v25)(v36, v6, v31);
    v22(v33, *(_QWORD *)(*v32 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v36;
    v20(v9, v36, v6);
    v37 = *v3;
    *v3 = 0x8000000000000000;
    sub_1002E2078((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    *v3 = v37;
    v29 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v26 + 32))(a1, v28, v6, v29);
    return 1;
  }
}

uint64_t sub_1002DC3FC(uint64_t *a1, uint64_t a2)
{
  return sub_1002DC7C8(a1, a2, &qword_100843F00, &qword_100843F08);
}

uint64_t sub_1002DC410(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), a2);
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v14 = *v3;
    *v3 = 0x8000000000000000;
    sub_1002E22CC(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1002DC508(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  __n128 v29;
  __n128 v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = v2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_10009FC50(&qword_10083F068, v12, (uint64_t)&protocol conformance descriptor for URL);
  swift_bridgeObjectRetain(v10);
  v36 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v32 = v3;
    v33 = a1;
    v34 = ~v15;
    v35 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_10009FC50(&qword_100844730, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v36, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v35 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v34;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v32;
        a1 = v33;
        v26 = v35;
        goto LABEL_7;
      }
    }
    v31 = swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t, __n128))v25)(v36, v6, v31);
    v22(v33, *(_QWORD *)(*v32 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v36;
    v20(v9, v36, v6);
    v37 = *v3;
    *v3 = 0x8000000000000000;
    sub_1002E23EC((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    *v3 = v37;
    v29 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v26 + 32))(a1, v28, v6, v29);
    return 1;
  }
}

uint64_t sub_1002DC764(uint64_t *a1, uint64_t a2)
{
  return sub_1002DC7C8(a1, a2, &qword_1008438C8, &qword_1008438D0);
}

uint64_t sub_1002DC778(_QWORD *a1, void *a2)
{
  return sub_1002DDDEC(a1, a2, &qword_1008439E0, (uint64_t *)&unk_100851830);
}

uint64_t sub_1002DC78C(_QWORD *a1, void *a2)
{
  return sub_1002DDDEC(a1, a2, (uint64_t *)&unk_100840E40, (uint64_t *)&unk_100843F60);
}

uint64_t sub_1002DC7A0(_QWORD *a1, void *a2)
{
  return sub_1002DDDEC(a1, a2, &qword_100843FA0, (uint64_t *)&unk_100851CD0);
}

uint64_t sub_1002DC7B4(uint64_t *a1, uint64_t a2)
{
  return sub_1002DC7C8(a1, a2, &qword_1008438A0, &qword_1008438A8);
}

uint64_t sub_1002DC7C8(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v7 = v4;
  v36 = a2;
  v10 = *v4;
  if ((*v4 & 0xC000000000000001) != 0)
  {
    if (v10 < 0)
      v11 = *v4;
    else
      v11 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v4);
    v12 = swift_retain(a2);
    v13 = __CocoaSet.member(for:)(v12, v11);
    swift_release(a2);
    if (v13)
    {
      swift_bridgeObjectRelease(v10);
      swift_release(a2);
      v34 = v13;
      swift_unknownObjectRetain(v13);
      v14 = sub_10001A630(a3);
      swift_dynamicCast(&v35, &v34, (char *)&type metadata for Swift.AnyObject + 8, v14, 7);
      *a1 = v35;
      swift_unknownObjectRelease(v13);
      return 0;
    }
    result = __CocoaSet.count.getter(v11);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v26 = sub_1002DDFA0(v11, result + 1, a4, a3);
    v35 = v26;
    v27 = *(_QWORD *)(v26 + 16);
    if (*(_QWORD *)(v26 + 24) <= v27)
    {
      v30 = v27 + 1;
      swift_retain(a2);
      sub_1002DF3CC(v30, a4, a3);
      v28 = v35;
    }
    else
    {
      v28 = v26;
      swift_retain(a2);
    }
    sub_1002E0D48(a2, v28, a3);
    v31 = *v7;
    *v7 = v28;
    swift_bridgeObjectRelease(v31);
    *a1 = a2;
    return 1;
  }
  v16 = *(_QWORD *)(v10 + 40);
  swift_bridgeObjectRetain(v10);
  v17 = sub_10001A630(a3);
  v18 = dispatch thunk of Hashable._rawHashValue(seed:)(v16, v17, &protocol witness table for AnyKeyPath);
  v19 = -1 << *(_BYTE *)(v10 + 32);
  v20 = v18 & ~v19;
  if (((*(_QWORD *)(v10 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease(v10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v23 = v36;
    v35 = *v4;
    *v4 = 0x8000000000000000;
    v24 = swift_retain(v23);
    sub_1002E1008(v24, v20, isUniquelyReferenced_nonNull_native, a4, a3);
    v25 = *v4;
    *v4 = v35;
    swift_bridgeObjectRelease(v25);
    *a1 = v23;
    return 1;
  }
  v21 = ~v19;
  while (1)
  {
    v35 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v20);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v35, &v36, v17, &protocol witness table for AnyKeyPath) & 1) != 0)
      break;
    v20 = (v20 + 1) & v21;
    if (((*(_QWORD *)(v10 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      goto LABEL_11;
  }
  swift_release(a2);
  swift_bridgeObjectRelease(v10);
  v29 = *(_QWORD *)(*(_QWORD *)(*v4 + 48) + 8 * v20);
  *a1 = v29;
  swift_retain(v29);
  return 0;
}

uint64_t sub_1002DCA88(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  __n128 v29;
  __n128 v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = v2;
  v6 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_10009FC50(&qword_100844578, v12, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributeOutput.Pipeline);
  swift_bridgeObjectRetain(v10);
  v36 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v32 = v3;
    v33 = a1;
    v34 = ~v15;
    v35 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_10009FC50(&qword_100844580, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributeOutput.Pipeline, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributeOutput.Pipeline);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v36, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v35 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v34;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v32;
        a1 = v33;
        v26 = v35;
        goto LABEL_7;
      }
    }
    v31 = swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t, __n128))v25)(v36, v6, v31);
    v22(v33, *(_QWORD *)(*v32 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v36;
    v20(v9, v36, v6);
    v37 = *v3;
    *v3 = 0x8000000000000000;
    sub_1002E2640((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    *v3 = v37;
    v29 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v26 + 32))(a1, v28, v6, v29);
    return 1;
  }
}

uint64_t sub_1002DCCE4(Swift::Int *a1, void *a2)
{
  return sub_1002DDAAC(a1, a2, (unint64_t *)&unk_1008479F0, NSEntityDescription_ptr, &qword_1008437C0);
}

uint64_t sub_1002DCD00(_QWORD *a1, void *a2, Swift::UInt a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  id v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  char isUniquelyReferenced_nonNull_native;
  id v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[9];

  v4 = v3;
  v8 = *v4;
  Hasher.init(_seed:)(v28, *(_QWORD *)(*v4 + 40));
  swift_bridgeObjectRetain(v8);
  v9 = a2;
  NSObject.hash(into:)(v28);

  Hasher._combine(_:)(a3);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v8 + 32);
  v12 = v10 & ~v11;
  v26 = v4;
  v27 = a1;
  if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = ~v11;
    sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
    while (1)
    {
      v14 = *(_QWORD *)(v8 + 48) + 16 * v12;
      v15 = *(_QWORD *)(v14 + 8);
      v16 = *(id *)v14;
      v17 = static NSObject.== infix(_:_:)(v16);

      if ((v17 & 1) != 0 && v15 == a3)
        break;
      v12 = (v12 + 1) & v13;
      if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_7;
    }

    swift_bridgeObjectRelease(v8);
    v18 = *(_QWORD *)(*v26 + 48) + 16 * v12;
    v20 = *(void **)v18;
    v19 = *(_QWORD *)(v18 + 8);
    *v27 = v20;
    v27[1] = v19;
    v21 = v20;
    return 0;
  }
  else
  {
LABEL_7:
    swift_bridgeObjectRelease(v8);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v26);
    v28[0] = *v26;
    *v26 = 0x8000000000000000;
    v24 = v9;
    sub_1002E2894(v24, a3, v12, isUniquelyReferenced_nonNull_native);
    v25 = *v26;
    *v26 = v28[0];
    swift_bridgeObjectRelease(v25);
    *v27 = v24;
    v27[1] = a3;
    return 1;
  }
}

uint64_t sub_1002DCEC0(Swift::UInt *a1, Swift::UInt a2, void *a3, void *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  char v23;
  Swift::UInt *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  id v31;
  id v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  _QWORD v36[9];

  v5 = v4;
  v10 = *v4;
  Hasher.init(_seed:)(v36, *(_QWORD *)(*v4 + 40));
  Hasher._combine(_:)(a2);
  swift_bridgeObjectRetain(v10);
  v11 = a3;
  v12 = a4;
  NSObject.hash(into:)(v36);
  v13 = v12;
  NSObject.hash(into:)(v36);

  v35 = v13;
  v14 = Hasher._finalize()();
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v34 = v5;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v17 = ~v15;
    do
    {
      v18 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 24 * v16);
      if (*v18 == a2)
      {
        v19 = (void *)v18[1];
        v20 = (void *)v18[2];
        sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
        v21 = v19;
        v22 = v20;
        if ((static NSObject.== infix(_:_:)(v21) & 1) != 0)
        {
          v23 = static NSObject.== infix(_:_:)(v22);

          if ((v23 & 1) != 0)
          {

            swift_bridgeObjectRelease(v10);
            v24 = (Swift::UInt *)(*(_QWORD *)(*v34 + 48) + 24 * v16);
            v25 = (void *)v24[1];
            v26 = (void *)v24[2];
            *a1 = *v24;
            a1[1] = (Swift::UInt)v25;
            a1[2] = (Swift::UInt)v26;
            v27 = v25;
            v28 = v26;
            return 0;
          }
        }
        else
        {

        }
      }
      v16 = (v16 + 1) & v17;
    }
    while (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0);
  }
  swift_bridgeObjectRelease(v10);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v34);
  v36[0] = *v34;
  *v34 = 0x8000000000000000;
  v31 = v11;
  v32 = v35;
  sub_1002E2A48(a2, v31, v32, v16, isUniquelyReferenced_nonNull_native);
  v33 = *v34;
  *v34 = v36[0];
  swift_bridgeObjectRelease(v33);
  *a1 = a2;
  a1[1] = (Swift::UInt)v31;
  result = 1;
  a1[2] = (Swift::UInt)v32;
  return result;
}

uint64_t sub_1002DD10C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[9];

  v3 = v2;
  v39 = a1;
  v5 = type metadata accessor for RDPermanentlyHiddenReminder(0);
  v37 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v35 - v9;
  __chkstk_darwin(v11);
  v13 = (char *)&v35 - v12;
  __chkstk_darwin(v14);
  v16 = (char *)&v35 - v15;
  v17 = *v3;
  Hasher.init(_seed:)(v44, *(_QWORD *)(*v3 + 40));
  v18 = type metadata accessor for UUID(0);
  v19 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v17);
  dispatch thunk of Hashable.hash(into:)(v44, v18, v19);
  v40 = v5;
  v43 = a2;
  v20 = type metadata accessor for Date(0);
  v21 = sub_10009FC50(&qword_100843918, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v44, v20, v21);
  v22 = Hasher._finalize()();
  v23 = -1 << *(_BYTE *)(v17 + 32);
  v24 = v22 & ~v23;
  v42 = v17 + 56;
  v25 = *(_QWORD *)(v17 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24;
  v38 = v16;
  if ((v25 & 1) != 0)
  {
    v36 = v3;
    v41 = ~v23;
    v26 = *(_QWORD *)(v37 + 72);
    v27 = v43;
    do
    {
      sub_1000151E8(*(_QWORD *)(v17 + 48) + v26 * v24, (uint64_t)v13, type metadata accessor for RDPermanentlyHiddenReminder);
      v28 = static UUID.== infix(_:_:)(v13, v27);
      sub_1000151E8((uint64_t)v13, (uint64_t)v10, type metadata accessor for RDPermanentlyHiddenReminder);
      sub_1000151E8(v27, (uint64_t)v7, type metadata accessor for RDPermanentlyHiddenReminder);
      if ((v28 & 1) != 0)
      {
        v29 = static Date.== infix(_:_:)(&v10[*(int *)(v40 + 20)], &v7[*(int *)(v40 + 20)]);
        sub_10011FF54((uint64_t)v7);
        sub_10011FF54((uint64_t)v10);
        sub_10011FF54((uint64_t)v13);
        if ((v29 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          sub_10011FF54(v43);
          sub_1000151E8(*(_QWORD *)(*v36 + 48) + v26 * v24, v39, type metadata accessor for RDPermanentlyHiddenReminder);
          return 0;
        }
      }
      else
      {
        sub_10011FF54((uint64_t)v7);
        sub_10011FF54((uint64_t)v10);
        sub_10011FF54((uint64_t)v13);
      }
      v24 = (v24 + 1) & v41;
    }
    while (((*(_QWORD *)(v42 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) != 0);
    swift_bridgeObjectRelease();
    v31 = v39;
    v3 = v36;
  }
  else
  {
    swift_bridgeObjectRelease();
    v31 = v39;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v33 = v43;
  v34 = (uint64_t)v38;
  sub_1000151E8(v43, (uint64_t)v38, type metadata accessor for RDPermanentlyHiddenReminder);
  v44[0] = *v3;
  *v3 = 0x8000000000000000;
  sub_1002E2C64(v34, v24, isUniquelyReferenced_nonNull_native);
  *v3 = v44[0];
  swift_bridgeObjectRelease();
  sub_1000B8680(v33, v31, type metadata accessor for RDPermanentlyHiddenReminder);
  return 1;
}

uint64_t sub_1002DD470(Swift::Int *a1, void *a2)
{
  return sub_1002DD484(a1, a2, &qword_100844630, &qword_100844638);
}

uint64_t sub_1002DD484(Swift::Int *a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  Swift::Int v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  id v23;
  char v24;
  void *v25;
  id v26;
  Swift::Int v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  char isUniquelyReferenced_nonNull_native;
  id v32;
  uint64_t v33;
  id v34;
  uint64_t v37;
  Swift::Int v38;

  v7 = v4;
  v10 = *v4;
  if ((*v4 & 0xC000000000000001) != 0)
  {
    if (v10 < 0)
      v11 = *v4;
    else
      v11 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v4);
    v12 = a2;
    v13 = __CocoaSet.member(for:)(v12, v11);

    if (v13)
    {
      swift_bridgeObjectRelease();

      v37 = v13;
      swift_unknownObjectRetain(v13);
      v14 = sub_10001A630(a3);
      swift_dynamicCast(&v38, &v37, (char *)&type metadata for Swift.AnyObject + 8, v14, 7);
      *a1 = v38;
      swift_unknownObjectRelease(v13);
      return 0;
    }
    result = __CocoaSet.count.getter(v11);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v27 = sub_1002DE5D8(v11, result + 1, a4, a3);
    v38 = v27;
    v28 = *(_QWORD *)(v27 + 16);
    if (*(_QWORD *)(v27 + 24) <= v28)
    {
      v33 = v28 + 1;
      v34 = v12;
      sub_1002E07F0(v33, a4);
      v29 = v38;
    }
    else
    {
      v29 = v27;
      v30 = v12;
    }
    sub_1002E0DF0((uint64_t)v12, v29);
    *v7 = v29;
    swift_bridgeObjectRelease();
    *a1 = (Swift::Int)v12;
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 40);
    swift_bridgeObjectRetain(v10);
    v17 = NSObject._rawHashValue(seed:)(v16);
    v18 = -1 << *(_BYTE *)(v10 + 32);
    v19 = v17 & ~v18;
    if (((*(_QWORD *)(v10 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
    {
      sub_10001A630(a3);
      v20 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v19);
      v21 = static NSObject.== infix(_:_:)(v20);

      if ((v21 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v25 = *(void **)(*(_QWORD *)(*v7 + 48) + 8 * v19);
        *a1 = (Swift::Int)v25;
        v26 = v25;
        return 0;
      }
      v22 = ~v18;
      while (1)
      {
        v19 = (v19 + 1) & v22;
        if (((*(_QWORD *)(v10 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
          break;
        v23 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v19);
        v24 = static NSObject.== infix(_:_:)(v23);

        if ((v24 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    v38 = *v7;
    *v7 = 0x8000000000000000;
    v32 = a2;
    sub_1002E2F50((uint64_t)v32, v19, isUniquelyReferenced_nonNull_native, a4, a3);
    *v7 = v38;
    swift_bridgeObjectRelease();
    *a1 = (Swift::Int)v32;
  }
  return 1;
}

void sub_1002DD72C(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, *(_QWORD *)(*(_QWORD *)v2 + 40));
  __asm { BR              X10 }
}

uint64_t sub_1002DD7A0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;
  _BYTE *v8;
  uint64_t v9;

  swift_bridgeObjectRetain(v1);
  String.hash(into:)(&v9, v2 + 18, 0x80000001006F5110);
  swift_bridgeObjectRelease(0x80000001006F5110);
  v3 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v1 + 32));
  if (((*(_QWORD *)(v1 + 56 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease(v1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
  v9 = *v7;
  *v7 = 0x8000000000000000;
  sub_1002E30D4(v0, v3, isUniquelyReferenced_nonNull_native);
  v5 = *v7;
  *v7 = v9;
  swift_bridgeObjectRelease(v5);
  result = 1;
  *v8 = (_BYTE)v0;
  return result;
}

uint64_t sub_1002DDA60(Swift::Int *a1, void *a2)
{
  return sub_1002DDAAC(a1, a2, (unint64_t *)&unk_10083FE30, NSString_ptr, (uint64_t *)&unk_1008446F8);
}

uint64_t sub_1002DDA7C(_QWORD *a1, void *a2)
{
  return sub_1002DDDEC(a1, a2, &qword_1008446C0, &qword_10083B680);
}

uint64_t sub_1002DDA90(Swift::Int *a1, void *a2)
{
  return sub_1002DDAAC(a1, a2, &qword_10083FF70, REMAccountStorage_ptr, (uint64_t *)&unk_100843930);
}

uint64_t sub_1002DDAAC(Swift::Int *a1, void *a2, unint64_t *a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v9;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  id v25;
  char v26;
  void *v27;
  id v28;
  Swift::Int v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  char isUniquelyReferenced_nonNull_native;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v42;
  Swift::Int v43;

  v9 = v5;
  v12 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    if (v12 < 0)
      v13 = *v5;
    else
      v13 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v5);
    v14 = a2;
    v15 = __CocoaSet.member(for:)();

    if (v15)
    {
      swift_bridgeObjectRelease(v12);

      v42 = v15;
      v16 = sub_1000151B0(0, a3, a4);
      swift_unknownObjectRetain(v15);
      swift_dynamicCast(&v43, &v42, (char *)&type metadata for Swift.AnyObject + 8, v16, 7);
      *a1 = v43;
      swift_unknownObjectRelease(v15);
      return 0;
    }
    result = __CocoaSet.count.getter(v13);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v29 = sub_1002DE1BC(v13, result + 1, a5, a3, a4);
    v43 = v29;
    v30 = *(_QWORD *)(v29 + 16);
    if (*(_QWORD *)(v29 + 24) <= v30)
    {
      v36 = v30 + 1;
      v37 = v14;
      sub_1002E07F0(v36, a5);
      v31 = v43;
    }
    else
    {
      v31 = v29;
      v32 = v14;
    }
    sub_1002E0DF0((uint64_t)v14, v31);
    v38 = *v9;
    *v9 = v31;
    swift_bridgeObjectRelease(v38);
    *a1 = (Swift::Int)v14;
  }
  else
  {
    v18 = *(_QWORD *)(v12 + 40);
    swift_bridgeObjectRetain(v12);
    v19 = NSObject._rawHashValue(seed:)(v18);
    v20 = -1 << *(_BYTE *)(v12 + 32);
    v21 = v19 & ~v20;
    v39 = a4;
    if (((*(_QWORD *)(v12 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
    {
      sub_1000151B0(0, a3, a4);
      v22 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * v21);
      v23 = static NSObject.== infix(_:_:)(v22);

      if ((v23 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v12);
        v27 = *(void **)(*(_QWORD *)(*v9 + 48) + 8 * v21);
        *a1 = (Swift::Int)v27;
        v28 = v27;
        return 0;
      }
      v24 = ~v20;
      while (1)
      {
        v21 = (v21 + 1) & v24;
        if (((*(_QWORD *)(v12 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          break;
        v25 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * v21);
        v26 = static NSObject.== infix(_:_:)(v25);

        if ((v26 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v12);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
    v43 = *v9;
    *v9 = 0x8000000000000000;
    v34 = a2;
    sub_1002E1198((uint64_t)v34, v21, isUniquelyReferenced_nonNull_native, a5, a3, v39);
    v35 = *v9;
    *v9 = v43;
    swift_bridgeObjectRelease(v35);
    *a1 = (Swift::Int)v34;
  }
  return 1;
}

uint64_t sub_1002DDD74(_QWORD *a1, void *a2)
{
  return sub_1002DDDEC(a1, a2, &qword_100843950, &qword_10083B540);
}

uint64_t sub_1002DDD88(_QWORD *a1, void *a2)
{
  return sub_1002DDDEC(a1, a2, &qword_100840DC0, &qword_10083B560);
}

uint64_t sub_1002DDD9C(_QWORD *a1, void *a2)
{
  return sub_1002DDDEC(a1, a2, &qword_100840DC8, (uint64_t *)&unk_100843A40);
}

uint64_t sub_1002DDDB0(_QWORD *a1, void *a2)
{
  return sub_1002DDDEC(a1, a2, (uint64_t *)&unk_100840DD0, &qword_10083B578);
}

uint64_t sub_1002DDDC4(_QWORD *a1, void *a2)
{
  return sub_1002DDDEC(a1, a2, (uint64_t *)&unk_100840DE0, (uint64_t *)&unk_100843B70);
}

uint64_t sub_1002DDDD8(_QWORD *a1, void *a2)
{
  return sub_1002DDDEC(a1, a2, &qword_100843BD0, &qword_10083B5A8);
}

uint64_t sub_1002DDDEC(_QWORD *a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  id v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  char v14;
  uint64_t v15;
  id v16;
  char v17;
  void *v18;
  id v19;
  char isUniquelyReferenced_nonNull_native;
  id v22;
  uint64_t v23;
  _QWORD v26[9];

  v5 = v4;
  v8 = *v5;
  Hasher.init(_seed:)(v26, *(_QWORD *)(*v5 + 40));
  swift_bridgeObjectRetain(v8);
  v9 = a2;
  NSObject.hash(into:)(v26);

  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v8 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
    v13 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v12);
    v14 = static NSObject.== infix(_:_:)(v13);

    if ((v14 & 1) != 0)
    {
LABEL_6:

      swift_bridgeObjectRelease(v8);
      v18 = *(void **)(*(_QWORD *)(*v5 + 48) + 8 * v12);
      *a1 = v18;
      v19 = v18;
      return 0;
    }
    v15 = ~v11;
    while (1)
    {
      v12 = (v12 + 1) & v15;
      if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        break;
      v16 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v12);
      v17 = static NSObject.== infix(_:_:)(v16);

      if ((v17 & 1) != 0)
        goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease(v8);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
  v26[0] = *v5;
  *v5 = 0x8000000000000000;
  v22 = v9;
  sub_1002E157C(v22, v12, isUniquelyReferenced_nonNull_native, a3, a4);
  v23 = *v5;
  *v5 = v26[0];
  swift_bridgeObjectRelease(v23);
  *a1 = v22;
  return 1;
}

uint64_t sub_1002DDFA0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a2)
  {
    sub_10001A630(a3);
    v8 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v26 = v8;
    v9 = __CocoaSet.makeIterator()(a1);
    for (i = __CocoaSet.Iterator.next()(v9); i; i = __CocoaSet.Iterator.next()(result))
    {
      v24 = i;
      v18 = sub_10001A630(a4);
      swift_dynamicCast(&v25, &v24, (char *)&type metadata for Swift.AnyObject + 8, v18, 7);
      v19 = *(_QWORD *)(v8 + 16);
      if (*(_QWORD *)(v8 + 24) <= v19)
      {
        sub_1002DF3CC(v19 + 1, a3, a4);
        v8 = v26;
      }
      v11 = v25;
      v24 = v25;
      result = dispatch thunk of Hashable._rawHashValue(seed:)(*(_QWORD *)(v8 + 40), v18, &protocol witness table for AnyKeyPath);
      v13 = v8 + 56;
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v8 + 56 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v8 + 56 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v20 = 0;
        v21 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v21 && (v20 & 1) != 0)
          {
            __break(1u);
            return result;
          }
          v22 = v16 == v21;
          if (v16 == v21)
            v16 = 0;
          v20 |= v22;
          v23 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v23 == -1);
        v17 = __clz(__rbit64(~v23)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v17) = v11;
      ++*(_QWORD *)(v8 + 16);
    }
    swift_release(v9);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  return v8;
}

Swift::Int sub_1002DE1A0(uint64_t a1, uint64_t a2)
{
  return sub_1002DE1BC(a1, a2, &qword_100843728, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
}

Swift::Int sub_1002DE1BC(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a2)
  {
    sub_10001A630(a3);
    v10 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v29 = v10;
    v11 = __CocoaSet.makeIterator()(a1);
    v12 = __CocoaSet.Iterator.next()(v11);
    if (v12)
    {
      v13 = v12;
      v14 = sub_1000151B0(0, a4, a5);
      do
      {
        v27 = v13;
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v14, 7);
        v10 = v29;
        v22 = *(_QWORD *)(v29 + 16);
        if (*(_QWORD *)(v29 + 24) <= v22)
        {
          sub_1002E07F0(v22 + 1, a3);
          v10 = v29;
        }
        v15 = v28;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v10 + 40));
        v17 = v10 + 56;
        v18 = -1 << *(_BYTE *)(v10 + 32);
        v19 = result & ~v18;
        v20 = v19 >> 6;
        if (((-1 << v19) & ~*(_QWORD *)(v10 + 56 + 8 * (v19 >> 6))) != 0)
        {
          v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v10 + 56 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v18) >> 6;
          do
          {
            if (++v20 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v20 == v24;
            if (v20 == v24)
              v20 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v17 + 8 * v20);
          }
          while (v26 == -1);
          v21 = __clz(__rbit64(~v26)) + (v20 << 6);
        }
        *(_QWORD *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
        *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v21) = v15;
        ++*(_QWORD *)(v10 + 16);
        v13 = __CocoaSet.Iterator.next()(result);
      }
      while (v13);
    }
    swift_release(v11);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v10;
}

Swift::Int sub_1002DE3BC(uint64_t a1, uint64_t a2)
{
  return sub_1002DE3D0(a1, a2, &qword_100840EB8, (uint64_t (*)(_QWORD))&type metadata accessor for REMObjectID_Codable);
}

Swift::Int sub_1002DE3D0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int result;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a2)
  {
    sub_10001A630(a3);
    v8 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v27 = v8;
    v9 = __CocoaSet.makeIterator()(a1);
    v10 = __CocoaSet.Iterator.next()(v9);
    if (v10)
    {
      v11 = v10;
      v12 = a4(0);
      do
      {
        v25 = v11;
        swift_dynamicCast(&v26, &v25, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
        v8 = v27;
        v20 = *(_QWORD *)(v27 + 16);
        if (*(_QWORD *)(v27 + 24) <= v20)
        {
          sub_1002E07F0(v20 + 1, a3);
          v8 = v27;
        }
        v13 = v26;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
        v15 = v8 + 56;
        v16 = -1 << *(_BYTE *)(v8 + 32);
        v17 = result & ~v16;
        v18 = v17 >> 6;
        if (((-1 << v17) & ~*(_QWORD *)(v8 + 56 + 8 * (v17 >> 6))) != 0)
        {
          v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v8 + 56 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v21 = 0;
          v22 = (unint64_t)(63 - v16) >> 6;
          do
          {
            if (++v18 == v22 && (v21 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v23 = v18 == v22;
            if (v18 == v22)
              v18 = 0;
            v21 |= v23;
            v24 = *(_QWORD *)(v15 + 8 * v18);
          }
          while (v24 == -1);
          v19 = __clz(__rbit64(~v24)) + (v18 << 6);
        }
        *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
        *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v19) = v13;
        ++*(_QWORD *)(v8 + 16);
        v11 = __CocoaSet.Iterator.next()(result);
      }
      while (v11);
    }
    swift_release(v9);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v8;
}

Swift::Int sub_1002DE5C4(uint64_t a1, uint64_t a2)
{
  return sub_1002DE3D0(a1, a2, &qword_100844300, (uint64_t (*)(_QWORD))type metadata accessor for RDClientConnection);
}

Swift::Int sub_1002DE5D8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  Swift::Int result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a2)
  {
    sub_10001A630(a3);
    v8 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v26 = v8;
    v9 = __CocoaSet.makeIterator()(a1);
    for (i = __CocoaSet.Iterator.next()(v9); i; i = __CocoaSet.Iterator.next()(result))
    {
      v24 = i;
      v18 = sub_10001A630(a4);
      swift_dynamicCast(&v25, &v24, (char *)&type metadata for Swift.AnyObject + 8, v18, 7);
      v19 = *(_QWORD *)(v8 + 16);
      if (*(_QWORD *)(v8 + 24) <= v19)
      {
        sub_1002E07F0(v19 + 1, a3);
        v8 = v26;
      }
      v11 = v25;
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
      v13 = v8 + 56;
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v8 + 56 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v8 + 56 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v20 = 0;
        v21 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v21 && (v20 & 1) != 0)
          {
            __break(1u);
            return result;
          }
          v22 = v16 == v21;
          if (v16 == v21)
            v16 = 0;
          v20 |= v22;
          v23 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v23 == -1);
        v17 = __clz(__rbit64(~v23)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v17) = v11;
      ++*(_QWORD *)(v8 + 16);
    }
    swift_release(v9);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v8;
}

Swift::Int sub_1002DE7BC(uint64_t a1, uint64_t a2)
{
  return sub_1002DE1BC(a1, a2, (uint64_t *)&unk_1008446F8, (unint64_t *)&unk_10083FE30, NSString_ptr);
}

Swift::Int sub_1002DE7D8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A630(&qword_1008436F0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_1002DEAB4(uint64_t a1)
{
  return sub_1002E07F0(a1, &qword_100840EB8);
}

Swift::Int sub_1002DEAC0(uint64_t a1)
{
  return sub_1002E07F0(a1, &qword_100840EA0);
}

void sub_1002DEACC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  _QWORD *v34;
  _QWORD v35[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A630((uint64_t *)&unk_100844780);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v32 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v34 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v33 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    swift_retain();
    v11 = 0;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v11 << 6);
      }
      else
      {
        v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v15 >= v33)
          goto LABEL_36;
        v16 = v34[v15];
        ++v11;
        if (!v16)
        {
          v11 = v15 + 1;
          if (v15 + 1 >= v33)
            goto LABEL_36;
          v16 = v34[v11];
          if (!v16)
          {
            v11 = v15 + 2;
            if (v15 + 2 >= v33)
              goto LABEL_36;
            v16 = v34[v11];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v33)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v16 = v34[v17];
              if (!v16)
              {
                while (1)
                {
                  v11 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_42;
                  if (v11 >= v33)
                    goto LABEL_36;
                  v16 = v34[v11];
                  ++v17;
                  if (v16)
                    goto LABEL_26;
                }
              }
              v11 = v17;
            }
          }
        }
LABEL_26:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v14);
      v19 = *(_QWORD *)(v6 + 40);
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v22 = v21;
      Hasher.init(_seed:)(v35, v19);
      String.hash(into:)(v35, v20, v22);
      v23 = Hasher._finalize()();
      swift_bridgeObjectRelease();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v10 + 8 * (v25 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v10 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v10 + 8 * v26);
        }
        while (v30 == -1);
        v12 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

uint64_t sub_1002DEDDC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  _QWORD v36[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A630(&qword_100844510);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v33 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v35 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v34 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
          return result;
        }
        if (v17 >= v34)
          goto LABEL_41;
        v18 = v35[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v34)
            goto LABEL_41;
          v18 = v35[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v34)
              goto LABEL_41;
            v18 = v35[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v34)
              {
LABEL_41:
                swift_release(v3);
                v2 = v33;
                v32 = 1 << *(_BYTE *)(v3 + 32);
                if (v32 > 63)
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v32;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v35[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_47;
                  if (v12 >= v34)
                    goto LABEL_41;
                  v18 = v35[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 32 * v16);
      v22 = *v20;
      v21 = v20[1];
      v23 = v20[2];
      v24 = v20[3];
      Hasher.init(_seed:)(v36, *(_QWORD *)(v6 + 40));
      if (v21)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain(v21);
        String.hash(into:)(v36, v22, v21);
        swift_bridgeObjectRelease();
        if (v24)
          goto LABEL_29;
      }
      else
      {
        Hasher._combine(_:)(0);
        if (v24)
        {
LABEL_29:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain(v24);
          String.hash(into:)(v36, v23, v24);
          swift_bridgeObjectRelease();
          goto LABEL_32;
        }
      }
      Hasher._combine(_:)(0);
LABEL_32:
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v6 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v10 + 8 * (v26 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v10 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_46;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v10 + 8 * v27);
        }
        while (v31 == -1);
        v13 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 32 * v13);
      *v14 = v22;
      v14[1] = v21;
      v14[2] = v23;
      v14[3] = v24;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_1002DF14C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A630(&qword_100844708);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 0;
    v8 = (uint64_t *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    v28 = -1 << v9;
    v29 = v2;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v30 = 1 << *(_BYTE *)(v3 + 32);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                if (v30 >= 64)
                  bzero((void *)(v3 + 56), 8 * v12);
                else
                  *v8 = v28;
                v2 = v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v20);
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_1002DF3CC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;

  v5 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_10001A630(a2);
  v8 = static _SetStorage.resize(original:capacity:move:)(v6, v7, 1);
  v9 = v8;
  if (*(_QWORD *)(v6 + 16))
  {
    v10 = 1 << *(_BYTE *)(v6 + 32);
    v35 = (_QWORD *)(v6 + 56);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v6 + 56);
    v33 = v5;
    v34 = (unint64_t)(v10 + 63) >> 6;
    v13 = v8 + 56;
    result = swift_retain(v6);
    v15 = 0;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v15 << 6);
      }
      else
      {
        v19 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v19 >= v34)
          goto LABEL_36;
        v20 = v35[v19];
        ++v15;
        if (!v20)
        {
          v15 = v19 + 1;
          if (v19 + 1 >= v34)
            goto LABEL_36;
          v20 = v35[v15];
          if (!v20)
          {
            v15 = v19 + 2;
            if (v19 + 2 >= v34)
              goto LABEL_36;
            v20 = v35[v15];
            if (!v20)
            {
              v21 = v19 + 3;
              if (v21 >= v34)
              {
LABEL_36:
                swift_release(v6);
                v5 = v33;
                v32 = 1 << *(_BYTE *)(v6 + 32);
                if (v32 > 63)
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v32;
                *(_QWORD *)(v6 + 16) = 0;
                break;
              }
              v20 = v35[v21];
              if (!v20)
              {
                while (1)
                {
                  v15 = v21 + 1;
                  if (__OFADD__(v21, 1))
                    goto LABEL_42;
                  if (v15 >= v34)
                    goto LABEL_36;
                  v20 = v35[v15];
                  ++v21;
                  if (v20)
                    goto LABEL_26;
                }
              }
              v15 = v21;
            }
          }
        }
LABEL_26:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v18);
      v23 = *(_QWORD *)(v9 + 40);
      v24 = sub_10001A630(a3);
      result = dispatch thunk of Hashable._rawHashValue(seed:)(v23, v24, &protocol witness table for AnyKeyPath);
      v25 = -1 << *(_BYTE *)(v9 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v13 + 8 * (v26 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v13 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v13 + 8 * v27);
        }
        while (v31 == -1);
        v16 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v16) = v22;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release(v6);
  *v5 = v9;
  return result;
}

uint64_t sub_1002DF6BC(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t);
  unint64_t *v48;
  uint64_t v49;

  v48 = a4;
  v49 = a5;
  v7 = v5;
  v47 = a2;
  v9 = a2(0);
  v46 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v42 - v10;
  v12 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_10001A630(a3);
  v13 = static _SetStorage.resize(original:capacity:move:)(v12, a1, 1);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_39;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 56);
  v45 = (_QWORD *)(v12 + 56);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v43 = v7;
  v44 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 56;
  result = swift_retain(v12);
  v21 = 0;
  while (1)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_26;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }
    if (v25 >= v44)
      goto LABEL_35;
    v26 = v45[v25];
    ++v21;
    if (!v26)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v44)
        goto LABEL_35;
      v26 = v45[v21];
      if (!v26)
      {
        v21 = v25 + 2;
        if (v25 + 2 >= v44)
          goto LABEL_35;
        v26 = v45[v21];
        if (!v26)
          break;
      }
    }
LABEL_25:
    v18 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v21 << 6);
LABEL_26:
    v28 = v12;
    v29 = *(_QWORD *)(v12 + 48);
    v30 = *(_QWORD *)(v46 + 72);
    v31 = *(void (**)(char *, unint64_t, uint64_t))(v46 + 32);
    v31(v11, v29 + v30 * v24, v9);
    v32 = *(_QWORD *)(v14 + 40);
    v33 = sub_10009FC50(v48, v47, v49);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v9, v33);
    v34 = -1 << *(_BYTE *)(v14 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v31)(*(_QWORD *)(v14 + 48) + v22 * v30, v11, v9);
    ++*(_QWORD *)(v14 + 16);
    v12 = v28;
  }
  v27 = v25 + 3;
  if (v27 < v44)
  {
    v26 = v45[v27];
    if (!v26)
    {
      while (1)
      {
        v21 = v27 + 1;
        if (__OFADD__(v27, 1))
          goto LABEL_41;
        if (v21 >= v44)
          goto LABEL_35;
        v26 = v45[v21];
        ++v27;
        if (v26)
          goto LABEL_25;
      }
    }
    v21 = v27;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v12);
  v7 = v43;
  v41 = 1 << *(_BYTE *)(v12 + 32);
  if (v41 > 63)
    bzero(v45, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v45 = -1 << v41;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_39:
  result = swift_release(v12);
  *v7 = v14;
  return result;
}

Swift::Int sub_1002DFA1C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  void *v22;
  Swift::UInt v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  _QWORD v35[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A630(&qword_100844108);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v33 = v2;
    v34 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v34[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v34[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v33;
                v32 = 1 << *(_BYTE *)(v3 + 32);
                if (v32 > 63)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v34[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v34[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = *(_QWORD *)(v3 + 48) + 16 * v17;
      v22 = *(void **)v21;
      v23 = *(_QWORD *)(v21 + 8);
      Hasher.init(_seed:)(v35, *(_QWORD *)(v6 + 40));
      v24 = v22;
      NSObject.hash(into:)(v35);

      Hasher._combine(_:)(v23);
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v6 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v24;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_1002DFD0C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::UInt v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  __int128 v37;
  _QWORD v38[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A630((uint64_t *)&unk_100840DA0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v36 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v34 = v2;
    v35 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    result = swift_retain(v3);
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v35)
          goto LABEL_36;
        v18 = v36[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v35)
            goto LABEL_36;
          v18 = v36[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v35)
              goto LABEL_36;
            v18 = v36[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v35)
              {
LABEL_36:
                swift_release(v3);
                v2 = v34;
                v33 = 1 << *(_BYTE *)(v3 + 32);
                if (v33 > 63)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v36[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v12 >= v35)
                    goto LABEL_36;
                  v18 = v36[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = v3;
      v21 = *(_QWORD *)(v3 + 48) + 24 * v16;
      v22 = *(_QWORD *)v21;
      v37 = *(_OWORD *)(v21 + 8);
      Hasher.init(_seed:)(v38, *(_QWORD *)(v6 + 40));
      Hasher._combine(_:)(v22);
      v23 = (id)v37;
      v24 = *((id *)&v37 + 1);
      NSObject.hash(into:)(v38);
      v25 = v24;
      NSObject.hash(into:)(v38);

      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v6 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v10 + 8 * (v27 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v10 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v10 + 8 * v28);
        }
        while (v32 == -1);
        v13 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v6 + 48) + 24 * v13;
      *(_QWORD *)v14 = v22;
      *(_OWORD *)(v14 + 8) = v37;
      ++*(_QWORD *)(v6 + 16);
      v3 = v20;
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_1002E0064(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[9];

  v2 = v1;
  v4 = type metadata accessor for RDPermanentlyHiddenReminder(0);
  v40 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  if (*(_QWORD *)(*v1 + 24) > a1)
    a1 = *(_QWORD *)(*v1 + 24);
  sub_10001A630((uint64_t *)&unk_100843920);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_39;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v39 = (_QWORD *)(v7 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v37 = v1;
  v38 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  result = swift_retain();
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }
    if (v20 >= v38)
      goto LABEL_35;
    v21 = v39[v20];
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v38)
        goto LABEL_35;
      v21 = v39[v16];
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v38)
          goto LABEL_35;
        v21 = v39[v16];
        if (!v21)
          break;
      }
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    v23 = v7;
    v24 = *(_QWORD *)(v40 + 72);
    sub_1000B8680(*(_QWORD *)(v7 + 48) + v24 * v19, (uint64_t)v6, type metadata accessor for RDPermanentlyHiddenReminder);
    Hasher.init(_seed:)(v42, *(_QWORD *)(v9 + 40));
    v25 = type metadata accessor for UUID(0);
    v26 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v42, v25, v26);
    v27 = type metadata accessor for Date(0);
    v28 = sub_10009FC50(&qword_100843918, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(v42, v27, v28);
    result = Hasher._finalize()();
    v29 = -1 << *(_BYTE *)(v9 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v14 + 8 * (v30 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v14 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      v7 = v23;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      v7 = v23;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v14 + 8 * v31);
      }
      while (v35 == -1);
      v17 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = sub_1000B8680((uint64_t)v6, *(_QWORD *)(v9 + 48) + v17 * v24, type metadata accessor for RDPermanentlyHiddenReminder);
    ++*(_QWORD *)(v9 + 16);
  }
  v22 = v20 + 3;
  if (v22 < v38)
  {
    v21 = v39[v22];
    if (!v21)
    {
      while (1)
      {
        v16 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_41;
        if (v16 >= v38)
          goto LABEL_35;
        v21 = v39[v16];
        ++v22;
        if (v21)
          goto LABEL_25;
      }
    }
    v16 = v22;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v7);
  v2 = v37;
  v36 = 1 << *(_BYTE *)(v7 + 32);
  if (v36 > 63)
    bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v39 = -1 << v36;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_39:
  result = swift_release(v7);
  *v2 = v9;
  return result;
}

Swift::Int sub_1002E0430(uint64_t a1)
{
  return sub_1002E07F0(a1, (uint64_t *)&unk_100840E50);
}

uint64_t sub_1002E043C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  _QWORD *v17;
  uint64_t v18[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A630(&qword_1008437D0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_28;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  v17 = (_QWORD *)(v3 + 56);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v3 + 56);
  v16 = (unint64_t)(v6 + 63) >> 6;
  swift_retain(v3);
  if (v8)
  {
    v9 = __clz(__rbit64(v8));
    goto LABEL_23;
  }
  if (v16 > 1)
  {
    v10 = *(_QWORD *)(v3 + 64);
    v11 = 1;
    if (v10)
      goto LABEL_22;
    v11 = 2;
    if (v16 > 2)
    {
      v10 = *(_QWORD *)(v3 + 72);
      if (v10)
        goto LABEL_22;
      v11 = 3;
      if (v16 > 3)
      {
        v10 = *(_QWORD *)(v3 + 80);
        if (!v10)
        {
          v12 = 4;
          if (v16 > 4)
          {
            v10 = *(_QWORD *)(v3 + 88);
            if (v10)
            {
              v11 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v11 = v12 + 1;
              if (__OFADD__(v12, 1))
              {
                __break(1u);
                JUMPOUT(0x1002E07DCLL);
              }
              if (v11 >= v16)
                break;
              v10 = v17[v11];
              ++v12;
              if (v10)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v9 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_23:
        v13 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v9);
        Hasher.init(_seed:)(v18, *(_QWORD *)(v5 + 40));
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  swift_release(v3);
  v14 = 1 << *(_BYTE *)(v3 + 32);
  if (v14 > 63)
    bzero(v17, ((unint64_t)(v14 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v17 = -1 << v14;
  *(_QWORD *)(v3 + 16) = 0;
LABEL_28:
  result = swift_release(v3);
  *v2 = v5;
  return result;
}

Swift::Int sub_1002E07F0(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1);
  v7 = v6;
  if (*(_QWORD *)(v4 + 16))
  {
    v31 = v3;
    v8 = 1 << *(_BYTE *)(v4 + 32);
    v9 = (_QWORD *)(v4 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v4 + 56);
    v12 = (unint64_t)(v8 + 63) >> 6;
    v13 = v6 + 56;
    result = swift_retain(v4);
    v15 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v15 << 6);
      }
      else
      {
        v19 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v19 >= v12)
          goto LABEL_36;
        v20 = v9[v19];
        ++v15;
        if (!v20)
        {
          v15 = v19 + 1;
          if (v19 + 1 >= v12)
            goto LABEL_36;
          v20 = v9[v15];
          if (!v20)
          {
            v15 = v19 + 2;
            if (v19 + 2 >= v12)
              goto LABEL_36;
            v20 = v9[v15];
            if (!v20)
            {
              v21 = v19 + 3;
              if (v21 >= v12)
              {
LABEL_36:
                swift_release(v4);
                v3 = v31;
                v30 = 1 << *(_BYTE *)(v4 + 32);
                if (v30 > 63)
                  bzero((void *)(v4 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v9 = -1 << v30;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v20 = v9[v21];
              if (!v20)
              {
                while (1)
                {
                  v15 = v21 + 1;
                  if (__OFADD__(v21, 1))
                    goto LABEL_42;
                  if (v15 >= v12)
                    goto LABEL_36;
                  v20 = v9[v15];
                  ++v21;
                  if (v20)
                    goto LABEL_26;
                }
              }
              v15 = v21;
            }
          }
        }
LABEL_26:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v18);
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v13 + 8 * v25);
        }
        while (v29 == -1);
        v16 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v22;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release(v4);
  *v3 = v7;
  return result;
}

uint64_t sub_1002E0A88(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD v33[9];

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1);
  v7 = v6;
  if (*(_QWORD *)(v4 + 16))
  {
    v32 = v3;
    v8 = 1 << *(_BYTE *)(v4 + 32);
    v9 = (_QWORD *)(v4 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v4 + 56);
    v12 = (unint64_t)(v8 + 63) >> 6;
    v13 = v6 + 56;
    result = swift_retain();
    v15 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v15 << 6);
      }
      else
      {
        v19 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v19 >= v12)
          goto LABEL_36;
        v20 = v9[v19];
        ++v15;
        if (!v20)
        {
          v15 = v19 + 1;
          if (v19 + 1 >= v12)
            goto LABEL_36;
          v20 = v9[v15];
          if (!v20)
          {
            v15 = v19 + 2;
            if (v19 + 2 >= v12)
              goto LABEL_36;
            v20 = v9[v15];
            if (!v20)
            {
              v21 = v19 + 3;
              if (v21 >= v12)
              {
LABEL_36:
                swift_release(v4);
                v3 = v32;
                v31 = 1 << *(_BYTE *)(v4 + 32);
                if (v31 > 63)
                  bzero((void *)(v4 + 56), ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v9 = -1 << v31;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v20 = v9[v21];
              if (!v20)
              {
                while (1)
                {
                  v15 = v21 + 1;
                  if (__OFADD__(v21, 1))
                    goto LABEL_42;
                  if (v15 >= v12)
                    goto LABEL_36;
                  v20 = v9[v15];
                  ++v21;
                  if (v20)
                    goto LABEL_26;
                }
              }
              v15 = v21;
            }
          }
        }
LABEL_26:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }
      v22 = *(void **)(*(_QWORD *)(v4 + 48) + 8 * v18);
      Hasher.init(_seed:)(v33, *(_QWORD *)(v7 + 40));
      v23 = v22;
      NSObject.hash(into:)(v33);

      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v7 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v13 + 8 * (v25 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v26);
        }
        while (v30 == -1);
        v16 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v23;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release(v4);
  *v3 = v7;
  return result;
}

unint64_t sub_1002E0D48(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;

  v5 = *(_QWORD *)(a2 + 40);
  v6 = sub_10001A630(a3);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v5, v6, &protocol witness table for AnyKeyPath);
  result = _HashTable.nextHole(atOrAfter:)(v7 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

unint64_t sub_1002E0DF0(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  unint64_t result;

  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
  result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_1002E0E70(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_1002DE7D8(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_1002E3434();
      goto LABEL_22;
    }
    sub_1002E4624(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

uint64_t sub_1002E1008(uint64_t result, unint64_t a2, char a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a5;
  v8 = result;
  v21 = result;
  v9 = *(_QWORD *)(*v5 + 16);
  v10 = *(_QWORD *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0)
    goto LABEL_12;
  v11 = v9 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1002DF3CC(v11, a4, a5);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_1002E397C(a4);
      goto LABEL_12;
    }
    sub_1002E5154(v11, a4, a5);
  }
  v12 = *v5;
  v13 = *(_QWORD *)(*v5 + 40);
  v6 = (uint64_t *)sub_10001A630(v6);
  result = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v6, &protocol witness table for AnyKeyPath);
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a2 = result & ~v14;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    do
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2);
      result = dispatch thunk of static Equatable.== infix(_:_:)(&v20, &v21, v6, &protocol witness table for AnyKeyPath);
      if ((result & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v16 = *v5;
  *(_QWORD *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2) = v8;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (!v18)
  {
    *(_QWORD *)(v16 + 16) = v19;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void sub_1002E1198(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, unint64_t *a5, _QWORD *a6)
{
  uint64_t *v6;
  uint64_t *v9;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v9 = v6;
  v12 = *(_QWORD *)(*v6 + 16);
  v13 = *(_QWORD *)(*v6 + 24);
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_14;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1002E07F0(v14, a4);
  }
  else
  {
    if (v13 > v12)
    {
      sub_1002E4484(a4);
      goto LABEL_14;
    }
    sub_1002E6418(v14, a4);
  }
  v15 = *v6;
  v16 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v6 + 40));
  v17 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = sub_1000151B0(0, a5, a6);
    v19 = *(id *)(*(_QWORD *)(v15 + 48) + 8 * a2);
    v20 = static NSObject.== infix(_:_:)(v19);

    if ((v20 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v18);
      __break(1u);
    }
    else
    {
      v21 = ~v17;
      while (1)
      {
        a2 = (a2 + 1) & v21;
        if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v22 = *(id *)(*(_QWORD *)(v15 + 48) + 8 * a2);
        v23 = static NSObject.== infix(_:_:)(v22);

        if ((v23 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v24 = *v9;
  *(_QWORD *)(*v9 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v24 + 48) + 8 * a2) = a1;
  v25 = *(_QWORD *)(v24 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v27;
}

uint64_t sub_1002E1328(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1002DF6BC(v12, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_100840E78, (unint64_t *)&qword_100843670, (uint64_t)&protocol conformance descriptor for UUID);
  }
  else
  {
    if (v11 > v10)
    {
      sub_1002E3B1C((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_100840E78);
      goto LABEL_12;
    }
    sub_1002E5414(v12, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_100840E78, (unint64_t *)&qword_100843670, (uint64_t)&protocol conformance descriptor for UUID);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_10009FC50((unint64_t *)&qword_10083B380, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void sub_1002E157C(void *a1, unint64_t a2, char a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  Swift::Int v14;
  uint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD v27[9];

  v9 = *(_QWORD *)(*v5 + 16);
  v10 = *(_QWORD *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0)
    goto LABEL_14;
  v11 = v9 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1002E0A88(v11, a4);
  }
  else
  {
    if (v10 > v9)
    {
      sub_1002E4484(a4);
      goto LABEL_14;
    }
    sub_1002E668C(v11, a4);
  }
  v12 = *v5;
  Hasher.init(_seed:)(v27, *(_QWORD *)(*v5 + 40));
  v13 = a1;
  NSObject.hash(into:)(v27);

  v14 = Hasher._finalize()();
  v15 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v14 & ~v15;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v26 = a5;
    sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
    v16 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * a2);
    v17 = static NSObject.== infix(_:_:)(v16);

    if ((v17 & 1) != 0)
    {
LABEL_13:
      v21 = sub_10001A630(v26);
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
      __break(1u);
    }
    else
    {
      v18 = ~v15;
      while (1)
      {
        a2 = (a2 + 1) & v18;
        if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v19 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * a2);
        v20 = static NSObject.== infix(_:_:)(v19);

        if ((v20 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v22 = *v5;
  *(_QWORD *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v22 + 48) + 8 * a2) = a1;
  v23 = *(_QWORD *)(v22 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (v24)
    __break(1u);
  else
    *(_QWORD *)(v22 + 16) = v25;
}

uint64_t sub_1002E1740(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t PredicateType;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, unint64_t, uint64_t);
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  v31 = a1;
  PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType(0);
  v7 = *(_QWORD *)(PredicateType - 8);
  v8 = __chkstk_darwin(PredicateType);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v30 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_12;
  v13 = v11 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1002DF6BC(v13, (uint64_t (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType, &qword_100840EA8, &qword_100840EB0, (uint64_t)&protocol conformance descriptor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
  }
  else
  {
    if (v12 > v11)
    {
      sub_1002E3B1C((uint64_t (*)(_QWORD))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType, &qword_100840EA8);
      goto LABEL_12;
    }
    sub_1002E5414(v13, (uint64_t (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType, &qword_100840EA8, &qword_100840EB0, (uint64_t)&protocol conformance descriptor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
  }
  v14 = *v3;
  v15 = *(_QWORD *)(*v3 + 40);
  v16 = sub_10009FC50(&qword_100840EB0, (uint64_t (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType, (uint64_t)&protocol conformance descriptor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
  v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, PredicateType, v16);
  v18 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v17 & ~v18;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v19 = ~v18;
    v20 = *(_QWORD *)(v7 + 72);
    v21 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v21(v10, *(_QWORD *)(v14 + 48) + v20 * a2, PredicateType);
      v22 = sub_10009FC50((unint64_t *)&qword_100844470, (uint64_t (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType, (uint64_t)&protocol conformance descriptor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v31, PredicateType, v22);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, PredicateType);
      if ((v23 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v19;
    }
    while (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v24 = v31;
  v25 = *v30;
  *(_QWORD *)(*v30 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v25 + 48) + *(_QWORD *)(v7 + 72) * a2, v24, PredicateType, v8);
  v27 = *(_QWORD *)(v25 + 16);
  v28 = __OFADD__(v27, 1);
  v29 = v27 + 1;
  if (!v28)
  {
    *(_QWORD *)(v25 + 16) = v29;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(PredicateType);
  __break(1u);
  return result;
}

uint64_t sub_1002E1994(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for REMManualOrdering.PinnedList(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1002DF6BC(v12, (uint64_t (*)(uint64_t))&type metadata accessor for REMManualOrdering.PinnedList, &qword_100843B58, &qword_10083B598, (uint64_t)&protocol conformance descriptor for REMManualOrdering.PinnedList);
  }
  else
  {
    if (v11 > v10)
    {
      sub_1002E3B1C((uint64_t (*)(_QWORD))&type metadata accessor for REMManualOrdering.PinnedList, &qword_100843B58);
      goto LABEL_12;
    }
    sub_1002E5414(v12, (uint64_t (*)(uint64_t))&type metadata accessor for REMManualOrdering.PinnedList, &qword_100843B58, &qword_10083B598, (uint64_t)&protocol conformance descriptor for REMManualOrdering.PinnedList);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_10009FC50(&qword_10083B598, (uint64_t (*)(uint64_t))&type metadata accessor for REMManualOrdering.PinnedList, (uint64_t)&protocol conformance descriptor for REMManualOrdering.PinnedList);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_10009FC50(&qword_100843B50, (uint64_t (*)(uint64_t))&type metadata accessor for REMManualOrdering.PinnedList, (uint64_t)&protocol conformance descriptor for REMManualOrdering.PinnedList);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

uint64_t sub_1002E1BE8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, unint64_t, uint64_t);
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  v31 = a1;
  v6 = type metadata accessor for REMAccountsListDataView.CachableProperty(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v30 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_12;
  v13 = v11 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1002DF6BC(v13, (uint64_t (*)(uint64_t))&type metadata accessor for REMAccountsListDataView.CachableProperty, &qword_100844440, &qword_100844430, (uint64_t)&protocol conformance descriptor for REMAccountsListDataView.CachableProperty);
  }
  else
  {
    if (v12 > v11)
    {
      sub_1002E3B1C((uint64_t (*)(_QWORD))&type metadata accessor for REMAccountsListDataView.CachableProperty, &qword_100844440);
      goto LABEL_12;
    }
    sub_1002E5414(v13, (uint64_t (*)(uint64_t))&type metadata accessor for REMAccountsListDataView.CachableProperty, &qword_100844440, &qword_100844430, (uint64_t)&protocol conformance descriptor for REMAccountsListDataView.CachableProperty);
  }
  v14 = *v3;
  v15 = *(_QWORD *)(*v3 + 40);
  v16 = sub_10009FC50(&qword_100844430, (uint64_t (*)(uint64_t))&type metadata accessor for REMAccountsListDataView.CachableProperty, (uint64_t)&protocol conformance descriptor for REMAccountsListDataView.CachableProperty);
  v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v6, v16);
  v18 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v17 & ~v18;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v19 = ~v18;
    v20 = *(_QWORD *)(v7 + 72);
    v21 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v21(v10, *(_QWORD *)(v14 + 48) + v20 * a2, v6);
      v22 = sub_10009FC50(&qword_100844438, (uint64_t (*)(uint64_t))&type metadata accessor for REMAccountsListDataView.CachableProperty, (uint64_t)&protocol conformance descriptor for REMAccountsListDataView.CachableProperty);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v31, v6, v22);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      if ((v23 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v19;
    }
    while (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v24 = v31;
  v25 = *v30;
  *(_QWORD *)(*v30 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v25 + 48) + *(_QWORD *)(v7 + 72) * a2, v24, v6, v8);
  v27 = *(_QWORD *)(v25 + 16);
  v28 = __OFADD__(v27, 1);
  v29 = v27 + 1;
  if (!v28)
  {
    *(_QWORD *)(v25 + 16) = v29;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void sub_1002E1E3C(uint64_t a1, unint64_t a2, char a3)
{
  Swift::Int v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[9];

  v4 = (uint64_t *)v3;
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  v8 = *(_QWORD *)(*(_QWORD *)v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_22;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1002DEACC(v9);
  }
  else
  {
    if (v8 > v7)
    {
      sub_1002E4484((uint64_t *)&unk_100844780);
LABEL_22:
      v29 = *v4;
      *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      *(_QWORD *)(*(_QWORD *)(v29 + 48) + 8 * a2) = a1;
      v30 = *(_QWORD *)(v29 + 16);
      v31 = __OFADD__(v30, 1);
      v32 = v30 + 1;
      if (!v31)
      {
        *(_QWORD *)(v29 + 16) = v32;
        return;
      }
      __break(1u);
      goto LABEL_25;
    }
    sub_1002E48D0(v9);
  }
  v10 = *(_QWORD *)v3;
  v11 = *(_QWORD *)(*(_QWORD *)v3 + 40);
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v14 = v13;
  Hasher.init(_seed:)(v34, v11);
  String.hash(into:)(v34, v12, v14);
  v3 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  v15 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v3 & ~v15;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
    goto LABEL_22;
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2));
  v3 = v17;
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v16 == v18 && v3 == v19)
  {
LABEL_25:
    swift_bridgeObjectRelease_n(v3, 2);
    goto LABEL_26;
  }
  v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v3, v18, v19, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v21 & 1) == 0)
  {
    v22 = ~v15;
    do
    {
      a2 = (a2 + 1) & v22;
      if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_22;
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2));
      v3 = v24;
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      if (v23 == v25 && v3 == v26)
        goto LABEL_25;
      v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v3, v25, v26, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    while ((v28 & 1) == 0);
  }
LABEL_26:
  type metadata accessor for URLResourceKey(0);
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v33);
  __break(1u);
}

uint64_t sub_1002E2078(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, unint64_t, uint64_t);
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  v31 = a1;
  v6 = type metadata accessor for Calendar.Component(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v30 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_12;
  v13 = v11 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1002DF6BC(v13, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t *)&unk_100843E10, &qword_100843E00, (uint64_t)&protocol conformance descriptor for Calendar.Component);
  }
  else
  {
    if (v12 > v11)
    {
      sub_1002E3B1C((uint64_t (*)(_QWORD))&type metadata accessor for Calendar.Component, (uint64_t *)&unk_100843E10);
      goto LABEL_12;
    }
    sub_1002E5414(v13, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t *)&unk_100843E10, &qword_100843E00, (uint64_t)&protocol conformance descriptor for Calendar.Component);
  }
  v14 = *v3;
  v15 = *(_QWORD *)(*v3 + 40);
  v16 = sub_10009FC50(&qword_100843E00, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
  v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v6, v16);
  v18 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v17 & ~v18;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v19 = ~v18;
    v20 = *(_QWORD *)(v7 + 72);
    v21 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v21(v10, *(_QWORD *)(v14 + 48) + v20 * a2, v6);
      v22 = sub_10009FC50(&qword_100843E08, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v31, v6, v22);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      if ((v23 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v19;
    }
    while (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v24 = v31;
  v25 = *v30;
  *(_QWORD *)(*v30 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v25 + 48) + *(_QWORD *)(v7 + 72) * a2, v24, v6, v8);
  v27 = *(_QWORD *)(v25 + 16);
  v28 = __OFADD__(v27, 1);
  v29 = v27 + 1;
  if (!v28)
  {
    *(_QWORD *)(v25 + 16) = v29;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

uint64_t sub_1002E22CC(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1002DF14C(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1002E37E8();
      goto LABEL_14;
    }
    sub_1002E4EF4(v8);
  }
  v9 = *v3;
  result = static Hasher._hash(seed:_:)(*(_QWORD *)(*v3 + 40), v5);
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = *(_QWORD *)(v9 + 48);
    if (*(_QWORD *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt);
      __break(1u);
    }
    else
    {
      v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v11 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2) = v5;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
  return result;
}

uint64_t sub_1002E23EC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, unint64_t, uint64_t);
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  v31 = a1;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v30 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_12;
  v13 = v11 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1002DF6BC(v13, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t *)&unk_100844738, &qword_10083F068, (uint64_t)&protocol conformance descriptor for URL);
  }
  else
  {
    if (v12 > v11)
    {
      sub_1002E3B1C((uint64_t (*)(_QWORD))&type metadata accessor for URL, (uint64_t *)&unk_100844738);
      goto LABEL_12;
    }
    sub_1002E5414(v13, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t *)&unk_100844738, &qword_10083F068, (uint64_t)&protocol conformance descriptor for URL);
  }
  v14 = *v3;
  v15 = *(_QWORD *)(*v3 + 40);
  v16 = sub_10009FC50(&qword_10083F068, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v6, v16);
  v18 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v17 & ~v18;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v19 = ~v18;
    v20 = *(_QWORD *)(v7 + 72);
    v21 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v21(v10, *(_QWORD *)(v14 + 48) + v20 * a2, v6);
      v22 = sub_10009FC50(&qword_100844730, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v31, v6, v22);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      if ((v23 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v19;
    }
    while (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v24 = v31;
  v25 = *v30;
  *(_QWORD *)(*v30 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v25 + 48) + *(_QWORD *)(v7 + 72) * a2, v24, v6, v8);
  v27 = *(_QWORD *)(v25 + 16);
  v28 = __OFADD__(v27, 1);
  v29 = v27 + 1;
  if (!v28)
  {
    *(_QWORD *)(v25 + 16) = v29;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

uint64_t sub_1002E2640(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, unint64_t, uint64_t);
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  v31 = a1;
  v6 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v30 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_12;
  v13 = v11 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1002DF6BC(v13, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributeOutput.Pipeline, &qword_100844588, &qword_100844578, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributeOutput.Pipeline);
  }
  else
  {
    if (v12 > v11)
    {
      sub_1002E3B1C((uint64_t (*)(_QWORD))&type metadata accessor for REMSuggestedAttributeOutput.Pipeline, &qword_100844588);
      goto LABEL_12;
    }
    sub_1002E5414(v13, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributeOutput.Pipeline, &qword_100844588, &qword_100844578, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributeOutput.Pipeline);
  }
  v14 = *v3;
  v15 = *(_QWORD *)(*v3 + 40);
  v16 = sub_10009FC50(&qword_100844578, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributeOutput.Pipeline, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributeOutput.Pipeline);
  v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v6, v16);
  v18 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v17 & ~v18;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v19 = ~v18;
    v20 = *(_QWORD *)(v7 + 72);
    v21 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v21(v10, *(_QWORD *)(v14 + 48) + v20 * a2, v6);
      v22 = sub_10009FC50(&qword_100844580, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributeOutput.Pipeline, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributeOutput.Pipeline);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v31, v6, v22);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      if ((v23 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v19;
    }
    while (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v24 = v31;
  v25 = *v30;
  *(_QWORD *)(*v30 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v25 + 48) + *(_QWORD *)(v7 + 72) * a2, v24, v6, v8);
  v27 = *(_QWORD *)(v25 + 16);
  v28 = __OFADD__(v27, 1);
  v29 = v27 + 1;
  if (!v28)
  {
    *(_QWORD *)(v25 + 16) = v29;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void sub_1002E2894(void *a1, Swift::UInt a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD v27[9];

  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 > v8 && (a4 & 1) != 0)
    goto LABEL_14;
  v10 = v8 + 1;
  if ((a4 & 1) != 0)
  {
    sub_1002DFA1C(v10);
  }
  else
  {
    if (v9 > v8)
    {
      sub_1002E3D40();
      goto LABEL_14;
    }
    sub_1002E5730(v10);
  }
  v11 = *v4;
  Hasher.init(_seed:)(v27, *(_QWORD *)(*v4 + 40));
  v12 = a1;
  NSObject.hash(into:)(v27);

  Hasher._combine(_:)(a2);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v11 + 32);
  a3 = v13 & ~v14;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = ~v14;
    sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
    while (1)
    {
      v16 = *(_QWORD *)(v11 + 48) + 16 * a3;
      v17 = *(_QWORD *)(v16 + 8);
      v18 = *(id *)v16;
      v19 = static NSObject.== infix(_:_:)(v18);

      if ((v19 & 1) != 0 && v17 == a2)
        break;
      a3 = (a3 + 1) & v15;
      if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
        goto LABEL_14;
    }
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for RDStoreControllerNotificationCenter.ChangedEntityFireValue);
    __break(1u);
  }
LABEL_14:
  v20 = *v25;
  *(_QWORD *)(*v25 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (_QWORD *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = a1;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
}

void sub_1002E2A48(Swift::UInt a1, void *a2, void *a3, unint64_t a4, char a5)
{
  uint64_t *v5;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  char v25;
  uint64_t v26;
  Swift::UInt *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD v34[9];

  v10 = *(_QWORD *)(*v5 + 16);
  v11 = *(_QWORD *)(*v5 + 24);
  if (v11 > v10 && (a5 & 1) != 0)
    goto LABEL_16;
  v12 = v10 + 1;
  if ((a5 & 1) != 0)
  {
    sub_1002DFD0C(v12);
  }
  else
  {
    if (v11 > v10)
    {
      sub_1002E3EF0();
      goto LABEL_16;
    }
    sub_1002E59EC(v12);
  }
  v13 = *v5;
  Hasher.init(_seed:)(v34, *(_QWORD *)(*v5 + 40));
  Hasher._combine(_:)(a1);
  v14 = a2;
  v15 = a3;
  NSObject.hash(into:)(v34);
  v16 = v15;
  NSObject.hash(into:)(v34);

  v17 = Hasher._finalize()();
  v18 = -1 << *(_BYTE *)(v13 + 32);
  a4 = v17 & ~v18;
  if (((*(_QWORD *)(v13 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0)
  {
    v19 = ~v18;
    do
    {
      v20 = (_QWORD *)(*(_QWORD *)(v13 + 48) + 24 * a4);
      if (*v20 == a1)
      {
        v21 = (void *)v20[1];
        v22 = (void *)v20[2];
        sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
        v23 = v21;
        v24 = v22;
        if ((static NSObject.== infix(_:_:)(v23) & 1) != 0)
        {
          v25 = static NSObject.== infix(_:_:)(v24);

          if ((v25 & 1) != 0)
          {
            ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for RDStoreControllerNotificationCenter.ChangedAccountFireValue);
            __break(1u);
            break;
          }
        }
        else
        {

        }
      }
      a4 = (a4 + 1) & v19;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0);
  }
LABEL_16:
  v26 = *v31;
  *(_QWORD *)(*v31 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  v27 = (Swift::UInt *)(*(_QWORD *)(v26 + 48) + 24 * a4);
  *v27 = a1;
  v27[1] = (Swift::UInt)a2;
  v27[2] = (Swift::UInt)a3;
  v28 = *(_QWORD *)(v26 + 16);
  v29 = __OFADD__(v28, 1);
  v30 = v28 + 1;
  if (v29)
    __break(1u);
  else
    *(_QWORD *)(v26 + 16) = v30;
}

uint64_t sub_1002E2C64(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[9];

  v40 = a1;
  v38 = type metadata accessor for RDPermanentlyHiddenReminder(0);
  v6 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - v10;
  __chkstk_darwin(v12);
  v14 = (char *)&v36 - v13;
  v15 = *(_QWORD *)(*v3 + 16);
  v16 = *(_QWORD *)(*v3 + 24);
  v36 = v6;
  v37 = v3;
  if (v16 > v15 && (a3 & 1) != 0)
    goto LABEL_15;
  v17 = v15 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1002E0064(v17);
  }
  else
  {
    if (v16 > v15)
    {
      sub_1002E40C8();
      goto LABEL_15;
    }
    sub_1002E5D14(v17);
  }
  v18 = *v3;
  Hasher.init(_seed:)(v41, *(_QWORD *)(*v3 + 40));
  v19 = type metadata accessor for UUID(0);
  v20 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v41, v19, v20);
  v21 = type metadata accessor for Date(0);
  v22 = sub_10009FC50(&qword_100843918, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v41, v21, v22);
  v23 = Hasher._finalize()();
  v24 = -1 << *(_BYTE *)(v18 + 32);
  a2 = v23 & ~v24;
  v39 = v18;
  v25 = v18 + 56;
  if (((*(_QWORD *)(v25 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v26 = ~v24;
    v27 = *(_QWORD *)(v6 + 72);
    v28 = v40;
    do
    {
      sub_1000151E8(*(_QWORD *)(v39 + 48) + v27 * a2, (uint64_t)v14, type metadata accessor for RDPermanentlyHiddenReminder);
      v29 = static UUID.== infix(_:_:)(v14, v28);
      sub_1000151E8((uint64_t)v14, (uint64_t)v11, type metadata accessor for RDPermanentlyHiddenReminder);
      sub_1000151E8(v28, (uint64_t)v8, type metadata accessor for RDPermanentlyHiddenReminder);
      if ((v29 & 1) != 0)
      {
        v30 = static Date.== infix(_:_:)(&v11[*(int *)(v38 + 20)], &v8[*(int *)(v38 + 20)]);
        sub_10011FF54((uint64_t)v8);
        sub_10011FF54((uint64_t)v11);
        sub_10011FF54((uint64_t)v14);
        if ((v30 & 1) != 0)
        {
          ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v38);
          __break(1u);
          break;
        }
      }
      else
      {
        sub_10011FF54((uint64_t)v8);
        sub_10011FF54((uint64_t)v11);
        sub_10011FF54((uint64_t)v14);
      }
      a2 = (a2 + 1) & v26;
    }
    while (((*(_QWORD *)(v25 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_15:
  v31 = *v37;
  *(_QWORD *)(*v37 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1000B8680(v40, *(_QWORD *)(v31 + 48) + *(_QWORD *)(v36 + 72) * a2, type metadata accessor for RDPermanentlyHiddenReminder);
  v33 = *(_QWORD *)(v31 + 16);
  v34 = __OFADD__(v33, 1);
  v35 = v33 + 1;
  if (v34)
    __break(1u);
  else
    *(_QWORD *)(v31 + 16) = v35;
  return result;
}

void sub_1002E2F50(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v7;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v7 = v5;
  v10 = *(_QWORD *)(*v5 + 16);
  v11 = *(_QWORD *)(*v5 + 24);
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_14;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1002E07F0(v12, a4);
  }
  else
  {
    if (v11 > v10)
    {
      sub_1002E4484(a4);
      goto LABEL_14;
    }
    sub_1002E6418(v12, a4);
  }
  v13 = *v5;
  v14 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v5 + 40));
  v15 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v14 & ~v15;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v16 = sub_10001A630(a5);
    v17 = *(id *)(*(_QWORD *)(v13 + 48) + 8 * a2);
    v18 = static NSObject.== infix(_:_:)(v17);

    if ((v18 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v16);
      __break(1u);
    }
    else
    {
      v19 = ~v15;
      while (1)
      {
        a2 = (a2 + 1) & v19;
        if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v20 = *(id *)(*(_QWORD *)(v13 + 48) + 8 * a2);
        v21 = static NSObject.== infix(_:_:)(v20);

        if ((v21 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v22 = *v7;
  *(_QWORD *)(*v7 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v22 + 48) + 8 * a2) = a1;
  v23 = *(_QWORD *)(v22 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (v24)
    __break(1u);
  else
    *(_QWORD *)(v22 + 16) = v25;
}

void *sub_1002E30D4(void *result, unint64_t a2, char a3)
{
  uint64_t v3;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;
  _QWORD v15[9];

  v5 = (char)result;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    v8 = v6 + 1;
    if ((a3 & 1) != 0)
    {
      sub_1002E043C(v8);
      goto LABEL_8;
    }
    if (v7 <= v6)
    {
      sub_1002E609C(v8);
LABEL_8:
      Hasher.init(_seed:)(v15, *(_QWORD *)(*(_QWORD *)v3 + 40));
      __asm { BR              X10 }
    }
    result = sub_1002E42E8();
  }
  v9 = *v13;
  *(_QWORD *)(*v13 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v9 + 48) + a2) = v14;
  v10 = *(_QWORD *)(v9 + 16);
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
  {
    __break(1u);
    JUMPOUT(0x1002E33DCLL);
  }
  *(_QWORD *)(v9 + 16) = v12;
  return result;
}

void *sub_1002E3434()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10001A630(&qword_1008436F0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_1002E35E4()
{
  return sub_1002E4484(&qword_100843728);
}

id sub_1002E35F0()
{
  return sub_1002E4484(&qword_100840EB8);
}

void *sub_1002E35FC()
{
  return sub_1002E3B1C((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_100840E78);
}

id sub_1002E3610()
{
  return sub_1002E4484(&qword_100844300);
}

void sub_1002E361C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_10001A630(&qword_100844510);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_28;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_28;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
      {
        v9 = v22 + 2;
        if (v22 + 2 >= v13)
          goto LABEL_28;
        v23 = *(_QWORD *)(v6 + 8 * v9);
        if (!v23)
          break;
      }
    }
LABEL_27:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 32 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_QWORD *)(v17 + 24);
    v19 = *(_QWORD *)(v4 + 48) + v16;
    v20 = *(_OWORD *)(v17 + 8);
    *(_QWORD *)v19 = *(_QWORD *)v17;
    *(_OWORD *)(v19 + 8) = v20;
    *(_QWORD *)(v19 + 24) = v18;
    v21 = v20;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v21);
  }
  v24 = v22 + 3;
  if (v24 >= v13)
    goto LABEL_28;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void *sub_1002E37E8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_10001A630(&qword_100844708);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1002E397C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  sub_10001A630(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_28;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
      {
        v10 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_28;
        v20 = *(_QWORD *)(v7 + 8 * v10);
        if (!v20)
          break;
      }
    }
LABEL_27:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    result = (void *)swift_retain(v18);
  }
  v21 = v19 + 3;
  if (v21 >= v14)
    goto LABEL_28;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1002E3B1C(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  uint64_t v13;
  unint64_t v14;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v4 = v2;
  v5 = a1(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - v7;
  sub_10001A630(a2);
  v9 = *v2;
  v10 = static _SetStorage.copy(original:)(*v2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = (void *)swift_release(v9);
LABEL_30:
    *v4 = v11;
    return result;
  }
  v28 = v4;
  result = (void *)(v10 + 56);
  v13 = v9 + 56;
  v14 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v14)
    result = memmove(result, (const void *)(v9 + 56), 8 * v14);
  v16 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
  v17 = 1 << *(_BYTE *)(v9 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(v9 + 56);
  v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }
    v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v24 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v24);
    ++v16;
    if (!v25)
    {
      v16 = v24 + 1;
      if (v24 + 1 >= v20)
        goto LABEL_28;
      v25 = *(_QWORD *)(v13 + 8 * v16);
      if (!v25)
      {
        v16 = v24 + 2;
        if (v24 + 2 >= v20)
          goto LABEL_28;
        v25 = *(_QWORD *)(v13 + 8 * v16);
        if (!v25)
          break;
      }
    }
LABEL_27:
    v19 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v16 << 6);
LABEL_12:
    v23 = *(_QWORD *)(v6 + 72) * v22;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(_QWORD *)(v9 + 48) + v23, v5);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v23, v8, v5);
  }
  v26 = v24 + 3;
  if (v26 >= v20)
  {
LABEL_28:
    result = (void *)swift_release(v9);
    v4 = v28;
    goto LABEL_30;
  }
  v25 = *(_QWORD *)(v13 + 8 * v26);
  if (v25)
  {
    v16 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v16 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v16);
    ++v26;
    if (v25)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

id sub_1002E3D40()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v1 = v0;
  sub_10001A630(&qword_100844108);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v13)
      goto LABEL_28;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_28;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
      {
        v9 = v21 + 2;
        if (v21 + 2 >= v13)
          goto LABEL_28;
        v22 = *(_QWORD *)(v6 + 8 * v9);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v19 = *(void **)v17;
    v18 = *(_QWORD *)(v17 + 8);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v19;
    v20[1] = v18;
    result = v19;
  }
  v23 = v21 + 3;
  if (v23 >= v13)
    goto LABEL_28;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_1002E3EF0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  __int128 v23;

  v1 = v0;
  sub_10001A630((uint64_t *)&unk_100840DA0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v23 = *(_OWORD *)(v17 + 8);
    *(_QWORD *)v18 = *(_QWORD *)v17;
    *(_OWORD *)(v18 + 8) = v23;
    v19 = (id)v23;
    result = *((id *)&v23 + 1);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1002E40C8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = type metadata accessor for RDPermanentlyHiddenReminder(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A630((uint64_t *)&unk_100843920);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release(v6);
LABEL_30:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    sub_1000151E8(*(_QWORD *)(v6 + 48) + v20, (uint64_t)v5, type metadata accessor for RDPermanentlyHiddenReminder);
    result = (void *)sub_1000B8680((uint64_t)v5, *(_QWORD *)(v8 + 48) + v20, type metadata accessor for RDPermanentlyHiddenReminder);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    result = (void *)swift_release(v6);
    v1 = v25;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_1002E42E8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_10001A630(&qword_1008437D0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_1002E4478()
{
  return sub_1002E4484((uint64_t *)&unk_1008446F8);
}

id sub_1002E4484(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  sub_10001A630(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (id)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_28;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
      {
        v10 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_28;
        v20 = *(_QWORD *)(v7 + 8 * v10);
        if (!v20)
          break;
      }
    }
LABEL_27:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    result = v18;
  }
  v21 = v19 + 3;
  if (v21 >= v14)
    goto LABEL_28;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_1002E4624(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A630(&qword_1008436F0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

void sub_1002E48D0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int64_t v34;
  _QWORD v35[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A630((uint64_t *)&unk_100844780);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v32 = v2;
  v33 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v34 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  swift_retain();
  v11 = 0;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_27;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v15 >= v34)
      goto LABEL_36;
    v16 = *(_QWORD *)(v33 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v34)
        goto LABEL_36;
      v16 = *(_QWORD *)(v33 + 8 * v11);
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v34)
          goto LABEL_36;
        v16 = *(_QWORD *)(v33 + 8 * v11);
        if (!v16)
          break;
      }
    }
LABEL_26:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_27:
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v14);
    v19 = *(_QWORD *)(v6 + 40);
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v22 = v21;
    Hasher.init(_seed:)(v35, v19);
    v23 = v18;
    String.hash(into:)(v35, v20, v22);
    v24 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    v25 = -1 << *(_BYTE *)(v6 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v10 + 8 * (v26 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v10 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v10 + 8 * v27);
      }
      while (v31 == -1);
      v12 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v12) = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v34)
  {
LABEL_36:
    swift_release_n(v3);
    v2 = v32;
    goto LABEL_38;
  }
  v16 = *(_QWORD *)(v33 + 8 * v17);
  if (v16)
  {
    v11 = v17;
    goto LABEL_26;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v34)
      goto LABEL_36;
    v16 = *(_QWORD *)(v33 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

uint64_t sub_1002E4BAC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int64_t v34;
  _QWORD v35[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A630(&qword_100844510);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_43:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v32 = v2;
  v33 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v34 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v9)
    {
      v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if (v17 >= v34)
      goto LABEL_41;
    v18 = *(_QWORD *)(v33 + 8 * v17);
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v34)
        goto LABEL_41;
      v18 = *(_QWORD *)(v33 + 8 * v12);
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v34)
          goto LABEL_41;
        v18 = *(_QWORD *)(v33 + 8 * v12);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 32 * v16);
    v22 = *v20;
    v21 = v20[1];
    v23 = v20[2];
    v24 = v20[3];
    Hasher.init(_seed:)(v35, *(_QWORD *)(v6 + 40));
    if (v21)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain_n(v21, 2);
      String.hash(into:)(v35, v22, v21);
      swift_bridgeObjectRelease();
      if (v24)
        goto LABEL_29;
    }
    else
    {
      Hasher._combine(_:)(0);
      swift_bridgeObjectRetain(v24);
      if (v24)
      {
LABEL_29:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain(v24);
        String.hash(into:)(v35, v23, v24);
        swift_bridgeObjectRelease();
        goto LABEL_32;
      }
    }
    Hasher._combine(_:)(0);
LABEL_32:
    result = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v6 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v10 + 8 * (v26 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v10 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v10 + 8 * v27);
      }
      while (v31 == -1);
      v13 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 32 * v13);
    *v14 = v22;
    v14[1] = v21;
    v14[2] = v23;
    v14[3] = v24;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v34)
  {
LABEL_41:
    result = swift_release_n(v3);
    v2 = v32;
    goto LABEL_43;
  }
  v18 = *(_QWORD *)(v33 + 8 * v19);
  if (v18)
  {
    v12 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v34)
      goto LABEL_41;
    v18 = *(_QWORD *)(v33 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_1002E4EF4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A630(&qword_100844708);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v28 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    result = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v20);
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    result = swift_release(v3);
    v2 = v28;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1002E5154(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;

  v5 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_10001A630(a2);
  v8 = static _SetStorage.resize(original:capacity:move:)(v6, v7, 0);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release(v6);
LABEL_38:
    *v5 = v9;
    return result;
  }
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v32 = v6 + 56;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 56);
  v33 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 56;
  result = swift_retain(v6);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_27;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v19 >= v33)
      goto LABEL_36;
    v20 = *(_QWORD *)(v32 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v33)
        goto LABEL_36;
      v20 = *(_QWORD *)(v32 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v33)
          goto LABEL_36;
        v20 = *(_QWORD *)(v32 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_26:
    v12 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_27:
    v22 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v18);
    v23 = *(_QWORD *)(v9 + 40);
    swift_retain(v22);
    v24 = sub_10001A630(a3);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v23, v24, &protocol witness table for AnyKeyPath);
    v25 = -1 << *(_BYTE *)(v9 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v13 + 8 * (v26 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v13 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v13 + 8 * v27);
      }
      while (v31 == -1);
      v16 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v16) = v22;
    ++*(_QWORD *)(v9 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v33)
  {
LABEL_36:
    result = swift_release_n(v6, 2);
    goto LABEL_38;
  }
  v20 = *(_QWORD *)(v32 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_26;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v33)
      goto LABEL_36;
    v20 = *(_QWORD *)(v32 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1002E5414(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int64_t v41;
  uint64_t (*v42)(uint64_t);
  unint64_t *v43;
  uint64_t v44;

  v43 = a4;
  v44 = a5;
  v7 = v5;
  v42 = a2;
  v9 = a2(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v39 - v11;
  v13 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_10001A630(a3);
  v14 = static _SetStorage.resize(original:capacity:move:)(v13, a1, 0);
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
  {
    result = swift_release(v13);
LABEL_37:
    *v7 = v15;
    return result;
  }
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 56);
  v39 = v7;
  v40 = v13 + 56;
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v41 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 56;
  result = swift_retain(v13);
  v22 = 0;
  while (1)
  {
    if (v19)
    {
      v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v25 = v24 | (v22 << 6);
      goto LABEL_26;
    }
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v26 >= v41)
      goto LABEL_35;
    v27 = *(_QWORD *)(v40 + 8 * v26);
    ++v22;
    if (!v27)
    {
      v22 = v26 + 1;
      if (v26 + 1 >= v41)
        goto LABEL_35;
      v27 = *(_QWORD *)(v40 + 8 * v22);
      if (!v27)
      {
        v22 = v26 + 2;
        if (v26 + 2 >= v41)
          goto LABEL_35;
        v27 = *(_QWORD *)(v40 + 8 * v22);
        if (!v27)
          break;
      }
    }
LABEL_25:
    v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v22 << 6);
LABEL_26:
    v29 = *(_QWORD *)(v10 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, *(_QWORD *)(v13 + 48) + v29 * v25, v9);
    v30 = *(_QWORD *)(v15 + 40);
    v31 = sub_10009FC50(v43, v42, v44);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v9, v31);
    v32 = -1 << *(_BYTE *)(v15 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v20 + 8 * (v33 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v20 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v20 + 8 * v34);
      }
      while (v38 == -1);
      v23 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v10 + 32))(*(_QWORD *)(v15 + 48) + v23 * v29, v12, v9);
    ++*(_QWORD *)(v15 + 16);
  }
  v28 = v26 + 3;
  if (v28 >= v41)
  {
LABEL_35:
    result = swift_release_n(v13, 2);
    v7 = v39;
    goto LABEL_37;
  }
  v27 = *(_QWORD *)(v40 + 8 * v28);
  if (v27)
  {
    v22 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v22 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v22 >= v41)
      goto LABEL_35;
    v27 = *(_QWORD *)(v40 + 8 * v22);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
  return result;
}

Swift::Int sub_1002E5730(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  void *v22;
  Swift::UInt v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A630(&qword_100844108);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v32 = v2;
  v33 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v33)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v33)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v33)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = *(_QWORD *)(v3 + 48) + 16 * v17;
    v22 = *(void **)v21;
    v23 = *(_QWORD *)(v21 + 8);
    Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
    v24 = v22;
    NSObject.hash(into:)(v34);

    Hasher._combine(_:)(v23);
    result = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v6 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v11 + 8 * v27);
      }
      while (v31 == -1);
      v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v24;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v33)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v32;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v33)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_1002E59EC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  Swift::UInt v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  __int128 v36;
  _QWORD v37[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A630((uint64_t *)&unk_100840DA0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v34 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v35 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  result = swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v9)
    {
      v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v35)
      goto LABEL_36;
    v18 = *(_QWORD *)(v34 + 8 * v17);
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v35)
        goto LABEL_36;
      v18 = *(_QWORD *)(v34 + 8 * v12);
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v35)
          goto LABEL_36;
        v18 = *(_QWORD *)(v34 + 8 * v12);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    v20 = *(_QWORD *)(v3 + 48) + 24 * v16;
    v21 = *(_QWORD *)v20;
    v36 = *(_OWORD *)(v20 + 8);
    Hasher.init(_seed:)(v37, *(_QWORD *)(v6 + 40));
    Hasher._combine(_:)(v21);
    v22 = (id)v36;
    v23 = *((id *)&v36 + 1);
    v24 = v22;
    v25 = v23;
    NSObject.hash(into:)(v37);
    v26 = v25;
    NSObject.hash(into:)(v37);

    result = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v6 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v10 + 8 * (v28 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v10 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v10 + 8 * v29);
      }
      while (v33 == -1);
      v13 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = *(_QWORD *)(v6 + 48) + 24 * v13;
    *(_QWORD *)v14 = v21;
    *(_OWORD *)(v14 + 8) = v36;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v35)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v34 + 8 * v19);
  if (v18)
  {
    v12 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v35)
      goto LABEL_36;
    v18 = *(_QWORD *)(v34 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1002E5D14(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[9];

  v2 = v1;
  v4 = type metadata accessor for RDPermanentlyHiddenReminder(0);
  v38 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  if (*(_QWORD *)(*v1 + 24) > a1)
    a1 = *(_QWORD *)(*v1 + 24);
  sub_10001A630((uint64_t *)&unk_100843920);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 0);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release(v7);
LABEL_37:
    *v2 = v9;
    return result;
  }
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v35 = v1;
  v36 = v7 + 56;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v37 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  result = swift_retain();
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v20 >= v37)
      goto LABEL_35;
    v21 = *(_QWORD *)(v36 + 8 * v20);
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v37)
        goto LABEL_35;
      v21 = *(_QWORD *)(v36 + 8 * v16);
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v37)
          goto LABEL_35;
        v21 = *(_QWORD *)(v36 + 8 * v16);
        if (!v21)
          break;
      }
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    v23 = *(_QWORD *)(v38 + 72);
    sub_1000151E8(*(_QWORD *)(v7 + 48) + v23 * v19, (uint64_t)v6, type metadata accessor for RDPermanentlyHiddenReminder);
    Hasher.init(_seed:)(v40, *(_QWORD *)(v9 + 40));
    v24 = type metadata accessor for UUID(0);
    v25 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v40, v24, v25);
    v26 = type metadata accessor for Date(0);
    v27 = sub_10009FC50(&qword_100843918, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(v40, v26, v27);
    result = Hasher._finalize()();
    v28 = -1 << *(_BYTE *)(v9 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v14 + 8 * (v29 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v14 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v14 + 8 * v30);
      }
      while (v34 == -1);
      v17 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = sub_1000B8680((uint64_t)v6, *(_QWORD *)(v9 + 48) + v17 * v23, type metadata accessor for RDPermanentlyHiddenReminder);
    ++*(_QWORD *)(v9 + 16);
  }
  v22 = v20 + 3;
  if (v22 >= v37)
  {
LABEL_35:
    result = swift_release_n(v7);
    v2 = v35;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v36 + 8 * v22);
  if (v21)
  {
    v16 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v16 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v16 >= v37)
      goto LABEL_35;
    v21 = *(_QWORD *)(v36 + 8 * v16);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1002E609C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A630(&qword_1008437D0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
    goto LABEL_26;
  }
  v6 = 1 << *(_BYTE *)(v3 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v3 + 56);
  v15 = (unint64_t)(v6 + 63) >> 6;
  swift_retain(v3);
  if (v8)
  {
    v9 = __clz(__rbit64(v8));
    goto LABEL_23;
  }
  if (v15 > 1)
  {
    v10 = *(_QWORD *)(v3 + 64);
    v11 = 1;
    if (v10)
      goto LABEL_22;
    v11 = 2;
    if (v15 > 2)
    {
      v10 = *(_QWORD *)(v3 + 72);
      if (v10)
        goto LABEL_22;
      v11 = 3;
      if (v15 > 3)
      {
        v10 = *(_QWORD *)(v3 + 80);
        if (!v10)
        {
          v12 = 4;
          if (v15 > 4)
          {
            v10 = *(_QWORD *)(v3 + 88);
            if (v10)
            {
              v11 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v11 = v12 + 1;
              if (__OFADD__(v12, 1))
              {
                __break(1u);
                JUMPOUT(0x1002E6404);
              }
              if (v11 >= v15)
                break;
              v10 = *(_QWORD *)(v3 + 56 + 8 * v11);
              ++v12;
              if (v10)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v9 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_23:
        v13 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v9);
        Hasher.init(_seed:)(v16, *(_QWORD *)(v5 + 40));
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  result = swift_release_n(v3, 2);
LABEL_26:
  *v2 = v5;
  return result;
}

Swift::Int sub_1002E6418(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  Swift::Int v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0);
  v7 = v6;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release(v4);
LABEL_38:
    *v3 = v7;
    return result;
  }
  v31 = v3;
  v8 = 1 << *(_BYTE *)(v4 + 32);
  v9 = v4 + 56;
  if (v8 < 64)
    v10 = ~(-1 << v8);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v4 + 56);
  v12 = (unint64_t)(v8 + 63) >> 6;
  v13 = v6 + 56;
  result = swift_retain(v4);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_27;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v19 >= v12)
      goto LABEL_36;
    v20 = *(_QWORD *)(v9 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v12)
        goto LABEL_36;
      v20 = *(_QWORD *)(v9 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v12)
          goto LABEL_36;
        v20 = *(_QWORD *)(v9 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_26:
    v11 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_27:
    v22 = *(_QWORD *)(v7 + 40);
    v23 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v18);
    result = NSObject._rawHashValue(seed:)(v22);
    v24 = -1 << *(_BYTE *)(v7 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v13 + 8 * (v25 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v26);
      }
      while (v30 == -1);
      v16 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v23;
    ++*(_QWORD *)(v7 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v12)
  {
LABEL_36:
    result = swift_release_n(v4, 2);
    v3 = v31;
    goto LABEL_38;
  }
  v20 = *(_QWORD *)(v9 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_26;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v12)
      goto LABEL_36;
    v20 = *(_QWORD *)(v9 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1002E668C(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD v32[9];

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_10001A630(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0);
  v7 = v6;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release(v4);
LABEL_38:
    *v3 = v7;
    return result;
  }
  v31 = v3;
  v8 = 1 << *(_BYTE *)(v4 + 32);
  v9 = v4 + 56;
  if (v8 < 64)
    v10 = ~(-1 << v8);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v4 + 56);
  v12 = (unint64_t)(v8 + 63) >> 6;
  v13 = v6 + 56;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_27;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v19 >= v12)
      goto LABEL_36;
    v20 = *(_QWORD *)(v9 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v12)
        goto LABEL_36;
      v20 = *(_QWORD *)(v9 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v12)
          goto LABEL_36;
        v20 = *(_QWORD *)(v9 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_26:
    v11 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_27:
    v22 = *(void **)(*(_QWORD *)(v4 + 48) + 8 * v18);
    Hasher.init(_seed:)(v32, *(_QWORD *)(v7 + 40));
    v23 = v22;
    NSObject.hash(into:)(v32);

    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v7 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v13 + 8 * (v25 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v26);
      }
      while (v30 == -1);
      v16 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v23;
    ++*(_QWORD *)(v7 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v12)
  {
LABEL_36:
    result = swift_release_n(v4, 2);
    v3 = v31;
    goto LABEL_38;
  }
  v20 = *(_QWORD *)(v9 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_26;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v12)
      goto LABEL_36;
    v20 = *(_QWORD *)(v9 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

void (*sub_1002E691C(void (**a1)(id *), unint64_t a2, uint64_t a3))(_QWORD *)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1002E6A9C(v6, a2, a3);
  return sub_1002E6970;
}

void (*sub_1002E6974(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1002E6B08(v6, a2, a3);
  return sub_1002E6970;
}

void (*sub_1002E69C8(uint64_t (**a1)(), unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1002E6B74(v6, a2, a3);
  return sub_1002E6970;
}

void (*sub_1002E6A1C(uint64_t **a1, unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_1002E6BE0(v6, a2, a3);
  return sub_1002E6970;
}

void sub_1002E6A70(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_1002E6A9C(void (*result)(id *), unint64_t a2, uint64_t a3))(id *)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return j__s7remindd24RDSavedDueDateDeltaAlertVwxx;
  }
  __break(1u);
  return result;
}

void (*sub_1002E6B08(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return destroy for RDSavedDueDateDeltaAlert;
  }
  __break(1u);
  return result;
}

uint64_t (*sub_1002E6B74(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain(*(_QWORD *)(a3 + 8 * a2 + 32));
LABEL_5:
    *v3 = v4;
    return sub_1002EBC0C;
  }
  __break(1u);
  return result;
}

uint64_t *sub_1002E6BE0(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return (uint64_t *)sub_1002E6C4C;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002E6C4C(_QWORD *a1)
{
  return swift_release(*a1);
}

Swift::Int sub_1002E6C54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10001A630(&qword_1008436F0);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v27 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v27 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      Hasher.init(_seed:)(v28, *(_QWORD *)(v3 + 40));
      swift_bridgeObjectRetain(v7);
      String.hash(into:)(v28, v8, v7);
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = v16[1];
        v18 = *v16 == v8 && v17 == v7;
        if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, v7, 0), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease(v7);
          goto LABEL_4;
        }
        v19 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v19;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v20 = (_QWORD *)(v15 + 16 * v11);
          v21 = v20[1];
          if (*v20 != v8 || v21 != v7)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, v7, 0);
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v23 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v23 = v8;
      v23[1] = v7;
      v24 = *(_QWORD *)(v3 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v26;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_1002E6DF4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

unint64_t sub_1002E6EE4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  double *i;
  double v5;
  double v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10001A630(&qword_1008445B0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = (double *)(a1 + 40); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = sub_1002C6EDC(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 8 * result;
      *(double *)(v3[6] + v9) = v5;
      *(double *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  return result;
}

void *sub_1002E6FB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for Calendar.Component(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_10001A630((uint64_t *)&unk_100843E10);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_10009FC50(&qword_100843E00, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_10009FC50(&qword_100843E08, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

uint64_t sub_1002E7220(uint64_t a1, void *a2)
{
  return sub_1002E8784(a1, a2, (uint64_t *)&unk_100843F50, (uint64_t *)&unk_10083AEC0);
}

uint64_t sub_1002E7234(uint64_t a1, void *a2)
{
  return sub_1002E8784(a1, a2, &qword_1008444B0, (uint64_t *)&unk_10083AEC0);
}

uint64_t sub_1002E7248(uint64_t a1, char a2)
{
  return sub_1002E89E4(a1, a2, (uint64_t *)&unk_10083AEC0);
}

uint64_t sub_1002E7254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002E8D5C(a1, a2, a3, (uint64_t *)&unk_10083AEC0);
}

uint64_t sub_1002E7260(uint64_t a1, uint64_t a2)
{
  return sub_1002E72A0(a1, a2, (uint64_t *)&unk_100839C80, &qword_100843760);
}

uint64_t sub_1002E7274(uint64_t a1, __int16 a2)
{
  return sub_1002E8B98(a1, a2, &qword_100843760);
}

uint64_t sub_1002E7280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002E8D5C(a1, a2, a3, &qword_100843760);
}

uint64_t sub_1002E728C(uint64_t a1, uint64_t a2)
{
  return sub_1002E72A0(a1, a2, (uint64_t *)&unk_100839C80, &qword_10083FD40);
}

uint64_t sub_1002E72A0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  NSString v13;
  Class isa;
  id v15;
  uint64_t result;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v8 = sub_10001A630((uint64_t *)&unk_100839E80);
  v9 = swift_allocObject(v8, 96, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1006A3C40;
  v10 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v11)
  {
    *(_QWORD *)(v9 + 56) = &type metadata for String;
    *(_QWORD *)(v9 + 32) = v10;
    *(_QWORD *)(v9 + 40) = v11;
    *(_QWORD *)(v9 + 88) = sub_10001A630(a3);
    v12 = sub_1000087F0((_QWORD *)(v9 + 64));
    sub_100008868(a2, (uint64_t)v12, a3);
    v13 = String._bridgeToObjectiveC()();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v9);
    v15 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v13, isa);

    sub_10000882C(a2, a3);
    return (uint64_t)v15;
  }
  else
  {
    v20 = 0;
    v21 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v17._object = (void *)0x80000001006F8C10;
    v17._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v17);
    v19 = a1;
    v18 = sub_10001A630(a4);
    _print_unlocked<A, B>(_:_:)(&v19, &v20, v18, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v20, v21, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1002E746C(uint64_t a1, uint64_t a2)
{
  return sub_1002E72A0(a1, a2, (uint64_t *)&unk_100839C80, &qword_100846BC0);
}

uint64_t sub_1002E7480(uint64_t a1, uint64_t a2)
{
  return sub_1002E72A0(a1, a2, (uint64_t *)&unk_100839C80, (uint64_t *)&unk_10083AEC0);
}

uint64_t sub_1002E7494(uint64_t a1, __int16 a2)
{
  return sub_1002E8B98(a1, a2, (uint64_t *)&unk_10083AEC0);
}

uint64_t sub_1002E74A0(uint64_t a1, uint64_t a2)
{
  return sub_1002E72A0(a1, a2, (uint64_t *)&unk_1008380D0, (uint64_t *)&unk_10083AEC0);
}

uint64_t sub_1002E74B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  Class isa;
  id v10;
  uint64_t result;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v4 = sub_10001A630((uint64_t *)&unk_100839E80);
  v5 = swift_allocObject(v4, 96, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1006A3C40;
  v6 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v5);
  if (v7)
  {
    *(_QWORD *)(v5 + 32) = v6;
    *(_QWORD *)(v5 + 40) = v7;
    *(_QWORD *)(v5 + 88) = &type metadata for Int64;
    *(_QWORD *)(v5 + 56) = &type metadata for String;
    *(_QWORD *)(v5 + 64) = a2;
    v8 = String._bridgeToObjectiveC()();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v5);
    v10 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v8, isa);

    return (uint64_t)v10;
  }
  else
  {
    v15 = 0;
    v16 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v12._object = (void *)0x80000001006F8C10;
    v12._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v12);
    v14 = a1;
    v13 = sub_10001A630((uint64_t *)&unk_10083AEC0);
    _print_unlocked<A, B>(_:_:)(&v14, &v15, v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v15, v16, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1002E764C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1002E7740(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  Class isa;
  id v10;
  uint64_t result;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v4 = sub_10001A630((uint64_t *)&unk_100839E80);
  v5 = swift_allocObject(v4, 96, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1006A3C40;
  v6 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v5);
  if (v7)
  {
    *(_QWORD *)(v5 + 56) = &type metadata for String;
    *(_QWORD *)(v5 + 32) = v6;
    *(_QWORD *)(v5 + 40) = v7;
    *(_QWORD *)(v5 + 88) = sub_10001A630((uint64_t *)&unk_10084DBC0);
    *(_BYTE *)(v5 + 64) = a2;
    v8 = String._bridgeToObjectiveC()();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v5);
    v10 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v8, isa);

    return (uint64_t)v10;
  }
  else
  {
    v15 = 0;
    v16 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v12._object = (void *)0x80000001006F8C10;
    v12._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v12);
    v14 = a1;
    v13 = sub_10001A630((uint64_t *)&unk_10083AEC0);
    _print_unlocked<A, B>(_:_:)(&v14, &v15, v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v15, v16, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1002E78E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002E8D5C(a1, a2, a3, &qword_10083FCA0);
}

uint64_t sub_1002E78EC(uint64_t a1, __int16 a2)
{
  return sub_1002E8B98(a1, a2, &qword_10083FCA0);
}

void sub_1002E78F8(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease(a1);
    if (v3)
    {
LABEL_3:
      sub_10001A630((uint64_t *)&unk_1008436A0);
      v4 = (_QWORD *)static _SetStorage.allocate(capacity:)(v3);
      v24 = a1;
      if (!v2)
        goto LABEL_4;
LABEL_11:
      if (a1 < 0)
        v7 = a1;
      else
        v7 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v5 = _CocoaArrayWrapper.endIndex.getter(v7);
      swift_bridgeObjectRelease(a1);
      if (!v5)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
  }
  v4 = &_swiftEmptySetSingleton;
  v24 = a1;
  if (v2)
    goto LABEL_11;
LABEL_4:
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
    return;
LABEL_15:
  v8 = 0;
  v9 = (char *)(v4 + 7);
  v23 = v5;
  while ((v24 & 0xC000000000000001) != 0)
  {
    v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v24);
    v11 = __OFADD__(v8++, 1);
    if (v11)
      goto LABEL_31;
LABEL_23:
    v26 = v10;
    v12 = v4[5];
    v13 = sub_10001A630((uint64_t *)&unk_10083AEC0);
    v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v12, v13, &protocol witness table for AnyKeyPath);
    v15 = -1 << *((_BYTE *)v4 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    v18 = *(_QWORD *)&v9[8 * (v16 >> 6)];
    v19 = 1 << v16;
    if (((1 << v16) & v18) != 0)
    {
      v20 = ~v15;
      while (1)
      {
        v25 = *(_QWORD *)(v4[6] + 8 * v16);
        if ((dispatch thunk of static Equatable.== infix(_:_:)(&v25, &v26, v13, &protocol witness table for AnyKeyPath) & 1) != 0)
          break;
        v16 = (v16 + 1) & v20;
        v17 = v16 >> 6;
        v18 = *(_QWORD *)&v9[8 * (v16 >> 6)];
        v19 = 1 << v16;
        if ((v18 & (1 << v16)) == 0)
        {
          v5 = v23;
          goto LABEL_28;
        }
      }
      swift_release(v10);
      v5 = v23;
      if (v8 == v23)
        return;
    }
    else
    {
LABEL_28:
      *(_QWORD *)&v9[8 * v17] = v19 | v18;
      *(_QWORD *)(v4[6] + 8 * v16) = v10;
      v21 = v4[2];
      v11 = __OFADD__(v21, 1);
      v22 = v21 + 1;
      if (v11)
        goto LABEL_32;
      v4[2] = v22;
      if (v8 == v5)
        return;
    }
  }
  if (v8 >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_33;
  v10 = *(_QWORD *)(v24 + 32 + 8 * v8);
  swift_retain();
  v11 = __OFADD__(v8++, 1);
  if (!v11)
    goto LABEL_23;
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
}

uint64_t sub_1002E7B5C(uint64_t a1, uint64_t a2)
{
  return sub_1002E72A0(a1, a2, (uint64_t *)&unk_100839C80, &qword_10083F300);
}

void sub_1002E7B70(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  id v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  char v36;
  uint64_t v37;
  id v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = a1;
  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease();
    if (v3)
    {
LABEL_3:
      sub_10001A630(&qword_100840EB8);
      v4 = (_QWORD *)static _SetStorage.allocate(capacity:)(v3);
      if (!v2)
        goto LABEL_4;
LABEL_11:
      if (v1 < 0)
        v7 = v1;
      else
        v7 = v1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v1);
      v5 = _CocoaArrayWrapper.endIndex.getter(v7);
      swift_bridgeObjectRelease();
      if (!v5)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
  }
  v4 = &_swiftEmptySetSingleton;
  if (v2)
    goto LABEL_11;
LABEL_4:
  v5 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
    return;
LABEL_15:
  v8 = (char *)(v4 + 7);
  v44 = v5;
  if ((v1 & 0xC000000000000001) != 0)
  {
    v9 = 0;
    v42 = v1;
    while (1)
    {
      v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v1);
      v11 = __OFADD__(v9++, 1);
      if (v11)
      {
        __break(1u);
        goto LABEL_43;
      }
      v12 = v10;
      v13 = NSObject._rawHashValue(seed:)(v4[5]);
      v14 = -1 << *((_BYTE *)v4 + 32);
      v15 = v13 & ~v14;
      v16 = v15 >> 6;
      v17 = *(_QWORD *)&v8[8 * (v15 >> 6)];
      v18 = 1 << v15;
      if (((1 << v15) & v17) != 0)
      {
        type metadata accessor for REMObjectID_Codable(0);
        v19 = *(id *)(v4[6] + 8 * v15);
        v20 = static NSObject.== infix(_:_:)(v19);

        if ((v20 & 1) != 0)
        {
LABEL_17:
          swift_unknownObjectRelease(v12);
          v1 = v42;
          goto LABEL_18;
        }
        v21 = ~v14;
        while (1)
        {
          v15 = (v15 + 1) & v21;
          v16 = v15 >> 6;
          v17 = *(_QWORD *)&v8[8 * (v15 >> 6)];
          v18 = 1 << v15;
          if ((v17 & (1 << v15)) == 0)
            break;
          v22 = *(id *)(v4[6] + 8 * v15);
          v23 = static NSObject.== infix(_:_:)(v22);

          if ((v23 & 1) != 0)
            goto LABEL_17;
        }
        v1 = v42;
      }
      *(_QWORD *)&v8[8 * v16] = v18 | v17;
      *(_QWORD *)(v4[6] + 8 * v15) = v12;
      v24 = v4[2];
      v11 = __OFADD__(v24, 1);
      v25 = v24 + 1;
      if (v11)
        goto LABEL_44;
      v4[2] = v25;
LABEL_18:
      if (v9 == v44)
        return;
    }
  }
  v26 = 0;
  v43 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v26 != v43)
  {
    v27 = v4[5];
    v28 = *(id *)(v1 + 32 + 8 * v26);
    v29 = NSObject._rawHashValue(seed:)(v27);
    v30 = -1 << *((_BYTE *)v4 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    v33 = *(_QWORD *)&v8[8 * (v31 >> 6)];
    v34 = 1 << v31;
    if (((1 << v31) & v33) != 0)
    {
      type metadata accessor for REMObjectID_Codable(0);
      v35 = *(id *)(v4[6] + 8 * v31);
      v36 = static NSObject.== infix(_:_:)(v35);

      if ((v36 & 1) != 0)
        goto LABEL_30;
      v37 = ~v30;
      v31 = (v31 + 1) & v37;
      v32 = v31 >> 6;
      v33 = *(_QWORD *)&v8[8 * (v31 >> 6)];
      v34 = 1 << v31;
      if ((v33 & (1 << v31)) != 0)
      {
        while (1)
        {
          v38 = *(id *)(v4[6] + 8 * v31);
          v39 = static NSObject.== infix(_:_:)(v38);

          if ((v39 & 1) != 0)
            break;
          v31 = (v31 + 1) & v37;
          v32 = v31 >> 6;
          v33 = *(_QWORD *)&v8[8 * (v31 >> 6)];
          v34 = 1 << v31;
          if ((v33 & (1 << v31)) == 0)
            goto LABEL_38;
        }
LABEL_30:

        v5 = v44;
        goto LABEL_31;
      }
LABEL_38:
      v5 = v44;
    }
    *(_QWORD *)&v8[8 * v32] = v34 | v33;
    *(_QWORD *)(v4[6] + 8 * v31) = v28;
    v40 = v4[2];
    v11 = __OFADD__(v40, 1);
    v41 = v40 + 1;
    if (v11)
      goto LABEL_45;
    v4[2] = v41;
LABEL_31:
    if (++v26 == v5)
      return;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
}

uint64_t sub_1002E7EC8(uint64_t a1, __int16 a2)
{
  return sub_1002E8B98(a1, a2, (uint64_t *)&unk_100843800);
}

uint64_t sub_1002E7ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002E8D5C(a1, a2, a3, (uint64_t *)&unk_100843800);
}

uint64_t sub_1002E7EE0(uint64_t a1, uint64_t a2)
{
  return sub_1002E72A0(a1, a2, (uint64_t *)&unk_100839C80, (uint64_t *)&unk_100843800);
}

uint64_t sub_1002E7EF4(uint64_t a1, __int16 a2)
{
  return sub_1002E8B98(a1, a2, (uint64_t *)&unk_1008443D0);
}

uint64_t sub_1002E7F00(uint64_t a1, uint64_t a2)
{
  return sub_1002E72A0(a1, a2, (uint64_t *)&unk_100839C80, &qword_10083FD70);
}

uint64_t sub_1002E7F14(uint64_t a1, uint64_t a2)
{
  return sub_1002E72A0(a1, a2, (uint64_t *)&unk_100839C80, &qword_1008437F0);
}

uint64_t sub_1002E7F28(uint64_t a1, uint64_t a2)
{
  return sub_1002E72A0(a1, a2, (uint64_t *)&unk_100839C80, (uint64_t *)&unk_1008437D8);
}

uint64_t sub_1002E7F3C(uint64_t a1, __int16 a2)
{
  return sub_1002E8B98(a1, a2, &qword_1008438A0);
}

uint64_t sub_1002E7F48(uint64_t a1, uint64_t a2)
{
  return sub_1002E72A0(a1, a2, (uint64_t *)&unk_100839C80, &qword_1008438A0);
}

uint64_t sub_1002E7F5C(uint64_t a1, __int16 a2)
{
  return sub_1002E8B98(a1, a2, &qword_1008438C8);
}

uint64_t sub_1002E7F68(uint64_t a1, uint64_t a2)
{
  return sub_1002E72A0(a1, a2, (uint64_t *)&unk_100839C80, &qword_1008438C8);
}

uint64_t sub_1002E7F7C(uint64_t a1, __int16 a2)
{
  return sub_1002E8B98(a1, a2, &qword_10083DAA0);
}

uint64_t sub_1002E7F88(uint64_t a1, uint64_t a2)
{
  return sub_1002E72A0(a1, a2, (uint64_t *)&unk_100839C80, &qword_10083DAA0);
}

uint64_t sub_1002E7F9C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 32 * a1 + 32;
    v7 = a3 + 32 * v4;
    if (v6 >= v7 || v6 + 32 * v4 <= a3)
    {
      sub_10001A630(&qword_1008444F0);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

void sub_1002E80A4(uint64_t a1)
{
  sub_1002E80C0(a1, &qword_100843728, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
}

void sub_1002E80C0(uint64_t a1, uint64_t *a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char v24;
  uint64_t v25;
  id v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  id v32;
  Swift::Int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  char v40;
  uint64_t v41;
  id v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v50;

  v5 = a1;
  v6 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v5);
    if (v7)
    {
LABEL_3:
      sub_10001A630(a2);
      v8 = (_QWORD *)static _SetStorage.allocate(capacity:)(v7);
      if (!v6)
        goto LABEL_4;
LABEL_11:
      if (v5 < 0)
        v11 = v5;
      else
        v11 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
      v9 = _CocoaArrayWrapper.endIndex.getter(v11);
      swift_bridgeObjectRelease(v5);
      if (!v9)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7)
      goto LABEL_3;
  }
  v8 = &_swiftEmptySetSingleton;
  if (v6)
    goto LABEL_11;
LABEL_4:
  v9 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v9)
    return;
LABEL_15:
  v12 = (char *)(v8 + 7);
  v50 = v9;
  if ((v5 & 0xC000000000000001) != 0)
  {
    v13 = 0;
    v46 = v5;
    while (1)
    {
      v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v5);
      v15 = __OFADD__(v13++, 1);
      if (v15)
      {
        __break(1u);
        goto LABEL_43;
      }
      v16 = v14;
      v17 = NSObject._rawHashValue(seed:)(v8[5]);
      v18 = -1 << *((_BYTE *)v8 + 32);
      v19 = v17 & ~v18;
      v20 = v19 >> 6;
      v21 = *(_QWORD *)&v12[8 * (v19 >> 6)];
      v22 = 1 << v19;
      if (((1 << v19) & v21) != 0)
      {
        sub_1000151B0(0, a3, a4);
        v23 = *(id *)(v8[6] + 8 * v19);
        v24 = static NSObject.== infix(_:_:)(v23);

        if ((v24 & 1) != 0)
        {
LABEL_17:
          swift_unknownObjectRelease(v16);
          v5 = v46;
          goto LABEL_18;
        }
        v25 = ~v18;
        while (1)
        {
          v19 = (v19 + 1) & v25;
          v20 = v19 >> 6;
          v21 = *(_QWORD *)&v12[8 * (v19 >> 6)];
          v22 = 1 << v19;
          if ((v21 & (1 << v19)) == 0)
            break;
          v26 = *(id *)(v8[6] + 8 * v19);
          v27 = static NSObject.== infix(_:_:)(v26);

          if ((v27 & 1) != 0)
            goto LABEL_17;
        }
        v5 = v46;
      }
      *(_QWORD *)&v12[8 * v20] = v22 | v21;
      *(_QWORD *)(v8[6] + 8 * v19) = v16;
      v28 = v8[2];
      v15 = __OFADD__(v28, 1);
      v29 = v28 + 1;
      if (v15)
        goto LABEL_44;
      v8[2] = v29;
LABEL_18:
      if (v13 == v50)
        return;
    }
  }
  v30 = 0;
  v47 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v30 != v47)
  {
    v31 = v8[5];
    v32 = *(id *)(v5 + 32 + 8 * v30);
    v33 = NSObject._rawHashValue(seed:)(v31);
    v34 = -1 << *((_BYTE *)v8 + 32);
    v35 = v33 & ~v34;
    v36 = v35 >> 6;
    v37 = *(_QWORD *)&v12[8 * (v35 >> 6)];
    v38 = 1 << v35;
    if (((1 << v35) & v37) != 0)
    {
      sub_1000151B0(0, a3, a4);
      v39 = *(id *)(v8[6] + 8 * v35);
      v40 = static NSObject.== infix(_:_:)(v39);

      if ((v40 & 1) != 0)
        goto LABEL_30;
      v41 = ~v34;
      v35 = (v35 + 1) & v41;
      v36 = v35 >> 6;
      v37 = *(_QWORD *)&v12[8 * (v35 >> 6)];
      v38 = 1 << v35;
      if ((v37 & (1 << v35)) != 0)
      {
        while (1)
        {
          v42 = *(id *)(v8[6] + 8 * v35);
          v43 = static NSObject.== infix(_:_:)(v42);

          if ((v43 & 1) != 0)
            break;
          v35 = (v35 + 1) & v41;
          v36 = v35 >> 6;
          v37 = *(_QWORD *)&v12[8 * (v35 >> 6)];
          v38 = 1 << v35;
          if ((v37 & (1 << v35)) == 0)
            goto LABEL_38;
        }
LABEL_30:

        v9 = v50;
        goto LABEL_31;
      }
LABEL_38:
      v9 = v50;
    }
    *(_QWORD *)&v12[8 * v36] = v38 | v37;
    *(_QWORD *)(v8[6] + 8 * v35) = v32;
    v44 = v8[2];
    v15 = __OFADD__(v44, 1);
    v45 = v44 + 1;
    if (v15)
      goto LABEL_45;
    v8[2] = v45;
LABEL_31:
    if (++v30 == v9)
      return;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
}

uint64_t sub_1002E8424(uint64_t a1, uint64_t a2)
{
  return sub_1002E72A0(a1, a2, (uint64_t *)&unk_100839C80, &qword_100843740);
}

uint64_t sub_1002E8438(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_10001A630(&qword_10083F5B0);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_1002E8540(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

void sub_1002E8628(uint64_t a1)
{
  uint64_t PredicateType;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t, __n128);
  uint64_t v14;

  PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType(0);
  v3 = *(_QWORD *)(PredicateType - 8);
  __chkstk_darwin(PredicateType);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v14 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v12 = *(_QWORD *)(v3 + 72);
    v13 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16);
    do
    {
      v13(v5, v11, PredicateType, v7);
      sub_1002DB5B0((uint64_t)v9, (uint64_t)v5);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v9, PredicateType);
      v11 += v12;
      --v10;
    }
    while (v10);
  }
}

uint64_t sub_1002E8714(uint64_t a1, uint64_t a2)
{
  return sub_1002E72A0(a1, a2, (uint64_t *)&unk_100839C80, &qword_100843780);
}

uint64_t sub_1002E8728(uint64_t a1, __int16 a2)
{
  return sub_1002E8B98(a1, a2, &qword_1008436D0);
}

uint64_t sub_1002E8734(uint64_t a1, uint64_t a2)
{
  return sub_1002E72A0(a1, a2, (uint64_t *)&unk_100839C80, &qword_1008436D0);
}

uint64_t sub_1002E8748(uint64_t a1, void *a2)
{
  return sub_1002E8784(a1, a2, (uint64_t *)&unk_10083ADA0, &qword_100844370);
}

uint64_t sub_1002E875C(uint64_t a1, void *a2)
{
  return sub_1002E8784(a1, a2, (uint64_t *)&unk_10083ADA0, &qword_1008436D0);
}

uint64_t sub_1002E8770(uint64_t a1, void *a2)
{
  return sub_1002E8784(a1, a2, (uint64_t *)&unk_10083ADA0, (uint64_t *)&unk_100844290);
}

uint64_t sub_1002E8784(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSString v13;
  Class isa;
  id v15;
  uint64_t result;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v8 = sub_10001A630((uint64_t *)&unk_100839E80);
  v9 = swift_allocObject(v8, 96, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1006A3C40;
  v10 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v9);
  if (v11)
  {
    *(_QWORD *)(v9 + 56) = &type metadata for String;
    *(_QWORD *)(v9 + 32) = v10;
    *(_QWORD *)(v9 + 40) = v11;
    *(_QWORD *)(v9 + 88) = sub_10001A630(a3);
    *(_QWORD *)(v9 + 64) = a2;
    v12 = a2;
    v13 = String._bridgeToObjectiveC()();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v9);
    v15 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v13, isa);

    return (uint64_t)v15;
  }
  else
  {
    v20 = 0;
    v21 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v17._object = (void *)0x80000001006F8C10;
    v17._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v17);
    v19 = a1;
    v18 = sub_10001A630(a4);
    _print_unlocked<A, B>(_:_:)(&v19, &v20, v18, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v20, v21, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1002E8930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002E8D5C(a1, a2, a3, &qword_1008437E8);
}

uint64_t sub_1002E893C(uint64_t a1, uint64_t a2)
{
  return sub_1002E72A0(a1, a2, (uint64_t *)&unk_100839C80, &qword_1008437E8);
}

uint64_t sub_1002E8950(uint64_t a1, uint64_t a2)
{
  return sub_1002E72A0(a1, a2, (uint64_t *)&unk_100839C80, &qword_1008441B8);
}

uint64_t sub_1002E8964(uint64_t a1, uint64_t a2)
{
  return sub_1002E72A0(a1, a2, (uint64_t *)&unk_100839C80, &qword_100844328);
}

uint64_t sub_1002E8978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002E8D5C(a1, a2, a3, &qword_100844328);
}

uint64_t sub_1002E8984(uint64_t a1, uint64_t a2)
{
  return sub_1002E72A0(a1, a2, (uint64_t *)&unk_100839C80, &qword_100843F00);
}

uint64_t sub_1002E8998(uint64_t a1, uint64_t a2)
{
  return sub_1002E72A0(a1, a2, (uint64_t *)&unk_100839C80, (uint64_t *)&unk_100844138);
}

uint64_t sub_1002E89AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002E8D5C(a1, a2, a3, &qword_10083DAA8);
}

uint64_t sub_1002E89B8(uint64_t a1, uint64_t a2)
{
  return sub_1002E72A0(a1, a2, (uint64_t *)&unk_100839C80, (uint64_t *)&unk_100844290);
}

uint64_t sub_1002E89CC(uint64_t a1, __int16 a2)
{
  return sub_1002E8B98(a1, a2, &qword_100843F00);
}

uint64_t sub_1002E89D8(uint64_t a1, char a2)
{
  return sub_1002E89E4(a1, a2, &qword_100843F00);
}

uint64_t sub_1002E89E4(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  Class isa;
  id v12;
  uint64_t result;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v6 = sub_10001A630((uint64_t *)&unk_100839E80);
  v7 = swift_allocObject(v6, 96, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1006A3C40;
  v8 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v7);
  if (v9)
  {
    *(_QWORD *)(v7 + 56) = &type metadata for String;
    *(_QWORD *)(v7 + 32) = v8;
    *(_QWORD *)(v7 + 40) = v9;
    *(_QWORD *)(v7 + 88) = &type metadata for Bool;
    *(_BYTE *)(v7 + 64) = a2 & 1;
    v10 = String._bridgeToObjectiveC()();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v7);
    v12 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v10, isa);

    return (uint64_t)v12;
  }
  else
  {
    v17 = 0;
    v18 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v14._object = (void *)0x80000001006F8C10;
    v14._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v14);
    v16 = a1;
    v15 = sub_10001A630(a3);
    _print_unlocked<A, B>(_:_:)(&v16, &v17, v15, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v17, v18, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1002E8B8C(uint64_t a1, __int16 a2)
{
  return sub_1002E8B98(a1, a2, &qword_100844130);
}

uint64_t sub_1002E8B98(uint64_t a1, __int16 a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  Class isa;
  id v12;
  uint64_t result;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v6 = sub_10001A630((uint64_t *)&unk_100839E80);
  v7 = swift_allocObject(v6, 96, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1006A3C40;
  v8 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v7);
  if (v9)
  {
    *(_QWORD *)(v7 + 56) = &type metadata for String;
    *(_QWORD *)(v7 + 32) = v8;
    *(_QWORD *)(v7 + 40) = v9;
    *(_QWORD *)(v7 + 88) = &type metadata for Int16;
    *(_WORD *)(v7 + 64) = a2;
    v10 = String._bridgeToObjectiveC()();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v7);
    v12 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v10, isa);

    return (uint64_t)v12;
  }
  else
  {
    v17 = 0;
    v18 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v14._object = (void *)0x80000001006F8C10;
    v14._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v14);
    v16 = a1;
    v15 = sub_10001A630(a3);
    _print_unlocked<A, B>(_:_:)(&v16, &v17, v15, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v17, v18, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1002E8D3C(uint64_t a1, uint64_t a2)
{
  return sub_1002E72A0(a1, a2, (uint64_t *)&unk_100839C80, &qword_100844130);
}

uint64_t sub_1002E8D50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002E8D5C(a1, a2, a3, &qword_1008440C8);
}

uint64_t sub_1002E8D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  Class isa;
  id v14;
  uint64_t result;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v8 = sub_10001A630((uint64_t *)&unk_100839E80);
  v9 = swift_allocObject(v8, 96, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1006A3C40;
  v10 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v11)
  {
    *(_QWORD *)(v9 + 56) = &type metadata for String;
    *(_QWORD *)(v9 + 32) = v10;
    *(_QWORD *)(v9 + 40) = v11;
    *(_QWORD *)(v9 + 88) = sub_10001A630((uint64_t *)&unk_10083A370);
    *(_QWORD *)(v9 + 64) = a2;
    *(_QWORD *)(v9 + 72) = a3;
    swift_bridgeObjectRetain(a3);
    v12 = String._bridgeToObjectiveC()();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v9);
    v14 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v12, isa);

    return (uint64_t)v14;
  }
  else
  {
    v19 = 0;
    v20 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v16._object = (void *)0x80000001006F8C10;
    v16._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v16);
    v18 = a1;
    v17 = sub_10001A630(a4);
    _print_unlocked<A, B>(_:_:)(&v18, &v19, v17, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v19, v20, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

char *sub_1002E8F10(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1002E8FF4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 32 * a1 + 32;
    v7 = a3 + 32 * v4;
    if (v6 >= v7 || v6 + 32 * v4 <= a3)
    {
      sub_10001A630(&qword_10083F4C8);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1002E90FC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      sub_10001A630(&qword_1008440A0);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1002E9204(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 24 * a1 + 32;
  v8 = a3 + 24 * v5;
  if (v7 >= v8 || v7 + 24 * v5 <= a3)
  {
    sub_10001A630(a5);
    swift_arrayInitWithCopy(a3);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_1002E930C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1002E93F4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1002E94E4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1002E95D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1002E96CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 24 * a1 + 32;
  v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    sub_10001A630(&qword_100843898);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1002E97D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v5 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v7 = a4 + 16 * a1 + 32;
    v8 = a3 + 16 * v5;
    if (v7 >= v8 || v7 + 16 * v5 <= a3)
    {
      sub_10001A630(a5);
      swift_arrayInitWithCopy(a3);
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1002E98DC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 144 * a1 + 32;
  v6 = a3 + 144 * v4;
  if (v5 >= v6 || v5 + 144 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1002E99D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 24 * a1 + 32;
  v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    sub_10001A630(&qword_1008447D8);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

id sub_1002E9ADC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __n128 v21;
  id v22;
  uint64_t v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  id v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint8_t *v34;
  void *v35;
  void *v36;
  Class isa;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD v49[2];
  uint8_t *v50;
  void *v51;
  uint64_t v52;
  _QWORD v53[3];
  _BYTE v54[16];
  id v55;

  v10 = type metadata accessor for String.Encoding(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100446CF4(a1, a2, a3, a4, a5, 0);
  if (!v15)
    return 0;
  v16 = v14;
  v17 = v15;
  static String.Encoding.utf8.getter();
  v18 = String.data(using:allowLossyConversion:)(v13, 0, v16, v17);
  v20 = v19;
  v21 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v13, v10, v21);
  if (v20 >> 60 == 15)
    return 0;
  if (qword_100837110 != -1)
    swift_once(&qword_100837110, sub_1002B763C);
  v24 = type metadata accessor for Logger(0);
  sub_10001AAA8(v24, (uint64_t)qword_100843620);
  v25 = a1;
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.info.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v51 = (void *)swift_slowAlloc(32, -1);
    v55 = v51;
    *(_DWORD *)v28 = 136315138;
    v49[1] = v28 + 4;
    v50 = v28;
    v29 = objc_msgSend(v25, "recordID");
    v30 = objc_msgSend(v29, "ckShortDescription");

    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v33 = v32;

    v52 = sub_10001A820(v31, v33, (uint64_t *)&v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53);

    swift_bridgeObjectRelease();
    v34 = v50;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Deserializing reminderIDsMergeableOrdering from readMaybeBigStringOrderedSet() {recordID: %s}", v50, 0xCu);
    v35 = v51;
    swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);

  }
  else
  {

  }
  v36 = (void *)objc_opt_self(REMListStorage);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v55 = 0;
  v22 = objc_msgSend(v36, "reminderIDsMergeableOrderingFromReminderIDUUIDStringsJSONData:error:", isa, &v55);

  v38 = v55;
  if (!v22)
  {
    v39 = v38;
    v40 = _convertNSErrorToError(_:)(v38);

    swift_willThrow(v41);
    swift_errorRetain(v40);
    v42 = swift_errorRetain(v40);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(12, -1);
      v46 = (void *)swift_slowAlloc(32, -1);
      v55 = v46;
      *(_DWORD *)v45 = 136315138;
      swift_getErrorValue(v40, v54, v53);
      v47 = Error.localizedDescription.getter(v53[1], v53[2]);
      v52 = sub_10001A820(v47, v48, (uint64_t *)&v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53);
      swift_bridgeObjectRelease();
      swift_errorRelease(v40);
      swift_errorRelease(v40);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Failed to parse UUID strings JSON data {error: %s}", v45, 0xCu);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);
      sub_1000A71B4(v18, v20);

      swift_errorRelease(v40);
    }
    else
    {
      swift_errorRelease(v40);
      swift_errorRelease(v40);
      swift_errorRelease(v40);
      sub_1000A71B4(v18, v20);

    }
    return 0;
  }
  return v22;
}

uint64_t sub_1002E9FA4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1007DD660, a1, a2, &unk_100837A70);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x15)
    return 21;
  else
    return v3;
}

uint64_t sub_1002E9FF4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v5 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v7 = a4 + 8 * a1 + 32;
    v8 = a3 + 8 * v5;
    if (v7 >= v8 || v7 + 8 * v5 <= a3)
    {
      sub_10001A630(a5);
      swift_arrayInitWithCopy(a3);
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

void sub_1002EA0F8(uint64_t a1)
{
  sub_1002E80C0(a1, &qword_100840EA0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
}

uint64_t sub_1002EA114(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 56 * a1 + 32;
  v6 = a3 + 56 * v4;
  if (v5 >= v6 || v5 + 56 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

void sub_1002EA204(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease();
    if (v3)
    {
LABEL_3:
      sub_10001A630(&qword_100843FE0);
      v4 = (_QWORD *)static _SetStorage.allocate(capacity:)(v3);
      v26 = a1;
      if (!v2)
        goto LABEL_4;
LABEL_11:
      if (a1 < 0)
        v7 = a1;
      else
        v7 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v5 = _CocoaArrayWrapper.endIndex.getter(v7);
      swift_bridgeObjectRelease();
      if (!v5)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
  }
  v4 = &_swiftEmptySetSingleton;
  v26 = a1;
  if (v2)
    goto LABEL_11;
LABEL_4:
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
    return;
LABEL_15:
  v8 = 0;
  v9 = (char *)(v4 + 7);
  v25 = v5;
  while ((v26 & 0xC000000000000001) != 0)
  {
    v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v26);
    v11 = __OFADD__(v8++, 1);
    if (v11)
      goto LABEL_32;
LABEL_24:
    v27 = v10;
    v29 = v10;
    v12 = v4[5];
    v13 = type metadata accessor for AnyCancellable(0);
    v14 = sub_10009FC50(&qword_100843FE8, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
    v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v12, v13, v14);
    v16 = -1 << *((_BYTE *)v4 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    v19 = *(_QWORD *)&v9[8 * (v17 >> 6)];
    v20 = 1 << v17;
    if (((1 << v17) & v19) != 0)
    {
      v21 = ~v16;
      v22 = sub_10009FC50(&qword_100843FF0, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
      do
      {
        v28 = *(_QWORD *)(v4[6] + 8 * v17);
        if ((dispatch thunk of static Equatable.== infix(_:_:)(&v28, &v29, v13, v22) & 1) != 0)
        {
          swift_release(v27);
          v5 = v25;
          goto LABEL_17;
        }
        v17 = (v17 + 1) & v21;
        v18 = v17 >> 6;
        v19 = *(_QWORD *)&v9[8 * (v17 >> 6)];
        v20 = 1 << v17;
      }
      while ((v19 & (1 << v17)) != 0);
      v5 = v25;
    }
    *(_QWORD *)&v9[8 * v18] = v20 | v19;
    *(_QWORD *)(v4[6] + 8 * v17) = v27;
    v23 = v4[2];
    v11 = __OFADD__(v23, 1);
    v24 = v23 + 1;
    if (v11)
      goto LABEL_33;
    v4[2] = v24;
LABEL_17:
    if (v8 == v5)
      return;
  }
  if (v8 >= *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_34;
  v10 = swift_retain();
  v11 = __OFADD__(v8++, 1);
  if (!v11)
    goto LABEL_24;
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
}

uint64_t sub_1002EA498(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      type metadata accessor for NLTagScheme(0);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1002EA59C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 48 * a1 + 32;
  v6 = a3 + 48 * v4;
  if (v5 >= v6 || v5 + 48 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1002EA690(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 40 * a1 + 32;
  v8 = a3 + 40 * v5;
  if (v7 >= v8 || v7 + 40 * v5 <= a3)
  {
    sub_10001A630(a5);
    swift_arrayInitWithCopy(a3);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1002EA798(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1002EA88C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 32 * a1 + 32;
    v7 = a3 + 32 * v4;
    if (v6 >= v7 || v6 + 32 * v4 <= a3)
    {
      sub_10001A630(&qword_100843E90);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

id sub_1002EA994@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "account");
  *a2 = result;
  return result;
}

id sub_1002EA9CC(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setAccount:", *a1);
}

uint64_t sub_1002EA9F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  Class isa;
  id v18;
  uint64_t result;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v23 = 0x3D3D204B25;
  v24 = 0xE500000000000000;
  v7._countAndFlagsBits = sub_100303B04(a4);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 4203808;
  v8._object = (void *)0xE300000000000000;
  String.append(_:)(v8);
  v9 = sub_10001A630((uint64_t *)&unk_100839E80);
  v10 = swift_allocObject(v9, 96, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1006A3C40;
  v11 = swift_retain();
  v12 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v11);
  if (v13)
  {
    v14 = v12;
    v15 = v13;
    swift_release(a1);
    *(_QWORD *)(v10 + 56) = &type metadata for String;
    *(_QWORD *)(v10 + 32) = v14;
    *(_QWORD *)(v10 + 40) = v15;
    *(_QWORD *)(v10 + 88) = sub_10001A630((uint64_t *)&unk_10083A370);
    *(_QWORD *)(v10 + 64) = a2;
    *(_QWORD *)(v10 + 72) = a3;
    swift_bridgeObjectRetain(a3);
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v18 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v16, isa);

    return (uint64_t)v18;
  }
  else
  {
    v23 = 0;
    v24 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v20._object = (void *)0x80000001006F8C10;
    v20._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v20);
    v22 = a1;
    v21 = sub_10001A630(&qword_100843760);
    _print_unlocked<A, B>(_:_:)(&v22, &v23, v21, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v23, v24, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

void *sub_1002EAC08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_10001A630(&qword_100844588);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_10009FC50(&qword_100844578, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributeOutput.Pipeline, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributeOutput.Pipeline);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v5, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_10009FC50(&qword_100844580, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributeOutput.Pipeline, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributeOutput.Pipeline);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v5, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

uint64_t sub_1002EAE70(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(sub_10001A630(a5) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

void sub_1002EAF88(uint64_t a1)
{
  sub_1002E80C0(a1, &qword_100844118, &qword_100843EA0, NSManagedObjectID_ptr);
}

Swift::Int sub_1002EAFA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  Swift::Int result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD v19[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10001A630(&qword_1008437C8);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)(v19, *(_QWORD *)(v3 + 40));
      Hasher._combine(_:)(v7);
      result = Hasher._finalize()();
      v9 = -1 << *(_BYTE *)(v3 + 32);
      v10 = result & ~v9;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
      v13 = 1 << v10;
      v14 = *(_QWORD *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(unsigned __int8 *)(v14 + v10) == (_DWORD)v7)
          goto LABEL_3;
        v15 = ~v9;
        while (1)
        {
          v10 = (v10 + 1) & v15;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            break;
          if (*(unsigned __int8 *)(v14 + v10) == (_DWORD)v7)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_BYTE *)(v14 + v10) = v7;
      v16 = *(_QWORD *)(v3 + 16);
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

Swift::Int sub_1002EB0E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  Swift::Int result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD v19[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10001A630(&qword_100843FF8);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(_QWORD *)(v6 + 8 * v4);
      Hasher.init(_seed:)(v19, *(_QWORD *)(v3 + 40));
      Hasher._combine(_:)(v7);
      result = Hasher._finalize()();
      v9 = -1 << *(_BYTE *)(v3 + 32);
      v10 = result & ~v9;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
      v13 = 1 << v10;
      v14 = *(_QWORD *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(_QWORD *)(v14 + 8 * v10) == v7)
          goto LABEL_3;
        v15 = ~v9;
        while (1)
        {
          v10 = (v10 + 1) & v15;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            break;
          if (*(_QWORD *)(v14 + 8 * v10) == v7)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_QWORD *)(v14 + 8 * v10) = v7;
      v16 = *(_QWORD *)(v3 + 16);
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_1002EB224(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 48 * a1 + 32;
  v6 = a3 + 48 * v4;
  if (v5 >= v6 || v5 + 48 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1002EB318(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1002EB440()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002EB464()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002EB474()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_BYTE **sub_1002EB484(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_10009FB34(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_1002EB48C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_1002EB49C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  sub_1000C96A4(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_1002EB4A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB4B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB4C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_1002EB4F0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB500()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

id sub_1002EB510()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t sub_1002EB518()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB528()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_1002EB538(uint64_t *a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v3;

  sub_1002CADFC(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_1002EB540()
{
  uint64_t v0;

  return sub_1002BEBB4(*(_QWORD *)(v0 + 16), (uint64_t (*)(_QWORD, _QWORD))&Error.localizedDescription.getter);
}

uint64_t sub_1002EB560()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB570()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB580()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002EB5A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB5B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB5C4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002EB5D4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1002EB5DC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB5EC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB5FC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB60C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB61C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  v3 = *a1 + 8;
  result = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v5, &v6);
  *a1 = v3;
  return result;
}

uint64_t sub_1002EB674()
{
  uint64_t v0;

  return sub_1002BEBF0(*(void **)(v0 + 16));
}

uint64_t sub_1002EB68C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB69C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB6AC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002EB6C0()
{
  uint64_t v0;

  return sub_1002BEB30(*(void **)(v0 + 16));
}

uint64_t sub_1002EB6D8()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002EB6FC()
{
  uint64_t v0;

  return sub_1002BEBB4(*(_QWORD *)(v0 + 16), (uint64_t (*)(_QWORD, _QWORD))&Error.rem_errorDescription.getter);
}

uint64_t sub_1002EB71C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB72C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB73C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB74C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB75C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB76C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB77C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002EB78C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB79C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB7AC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB7BC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB7CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB7DC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB7EC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002EB7FC()
{
  uint64_t v0;
  uint64_t MetatypeMetadata;
  uint64_t v3;

  v3 = *(_QWORD *)(v0 + 16);
  MetatypeMetadata = swift_getMetatypeMetadata();
  return String.init<A>(describing:)(&v3, MetatypeMetadata);
}

uint64_t sub_1002EB82C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB83C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB84C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB85C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB86C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002EB87C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t _s6FieldsOwet_1(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEC)
    goto LABEL_17;
  if (a2 + 20 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 20) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 20;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 20;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 20;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x15;
  v8 = v6 - 21;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s6FieldsOwst_1(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 20 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 20) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEB)
    return ((uint64_t (*)(void))((char *)&loc_1002EB968 + 4 * byte_1006B3510[v4]))();
  *a1 = a2 + 20;
  return ((uint64_t (*)(void))((char *)sub_1002EB99C + 4 * byte_1006B350B[v4]))();
}

uint64_t sub_1002EB99C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002EB9A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002EB9ACLL);
  return result;
}

uint64_t sub_1002EB9B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002EB9C0);
  *(_BYTE *)result = a2 + 20;
  return result;
}

uint64_t sub_1002EB9C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002EB9CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s6FieldsOMa_1()
{
  return &_s6FieldsON_1;
}

unint64_t sub_1002EB9E8(uint64_t a1)
{
  unint64_t result;

  result = sub_1002EBA0C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002EBA0C()
{
  unint64_t result;

  result = qword_100844870;
  if (!qword_100844870)
  {
    result = swift_getWitnessTable(&unk_1006B3670, &_s6FieldsON_1);
    atomic_store(result, (unint64_t *)&qword_100844870);
  }
  return result;
}

unint64_t sub_1002EBA50(uint64_t a1)
{
  unint64_t result;

  result = sub_1002EBA74();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002EBA74()
{
  unint64_t result;

  result = qword_100844878;
  if (!qword_100844878)
  {
    result = swift_getWitnessTable(&unk_1006B3638, &_s6FieldsON_1);
    atomic_store(result, (unint64_t *)&qword_100844878);
  }
  return result;
}

uint64_t sub_1002EBAB8()
{
  return sub_1000A5F84(&qword_100844880, &qword_100844888, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_1002EBAE8()
{
  unint64_t result;

  result = qword_100844890;
  if (!qword_100844890)
  {
    result = swift_getWitnessTable(&unk_1006B3720, &_s6FieldsON_1);
    atomic_store(result, (unint64_t *)&qword_100844890);
  }
  return result;
}

Swift::Int sub_1002EBC10(uint64_t a1)
{
  return sub_1002EC4A4(a1, &qword_100843728, (uint64_t (*)(uint64_t))&type metadata accessor for REMObjectID_Codable, (unint64_t *)&unk_100840EC0);
}

uint64_t sub_1002EBC2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t result;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  int64_t v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  _QWORD v46[2];
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  _QWORD v57[10];

  v54 = sub_10001A630((uint64_t *)&unk_100839C80);
  v49 = *(_QWORD *)(v54 - 8);
  v2 = __chkstk_darwin(v54);
  v4 = (char *)v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)v46 - v6;
  v8 = __chkstk_darwin(v5);
  v53 = (char *)v46 - v9;
  __chkstk_darwin(v8);
  v51 = (uint64_t)v46 - v10;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v50 = (char *)v46 - v16;
  v55 = a1;
  v17 = *(_QWORD *)(a1 + 16);
  if (v17)
  {
    sub_10001A630((uint64_t *)&unk_1008448F0);
    v18 = (_QWORD *)static _SetStorage.allocate(capacity:)(v17);
  }
  else
  {
    v18 = &_swiftEmptySetSingleton;
  }
  v19 = *(_QWORD *)(v55 + 56);
  v48 = v55 + 56;
  v20 = -1 << *(_BYTE *)(v55 + 32);
  if (-v20 < 64)
    v21 = ~(-1 << -(char)v20);
  else
    v21 = -1;
  v22 = v21 & v19;
  v46[1] = -1 << *(_BYTE *)(v55 + 32);
  v47 = (unint64_t)(63 - v20) >> 6;
  v23 = (char *)(v18 + 7);
  swift_bridgeObjectRetain(v55);
  result = swift_retain();
  v56 = 0;
  v52 = v4;
  while (1)
  {
    if (v22)
    {
      v26 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      v27 = v26 | (v56 << 6);
      goto LABEL_28;
    }
    v28 = v56 + 1;
    if (__OFADD__(v56, 1))
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v28 >= v47)
      goto LABEL_40;
    v29 = *(_QWORD *)(v48 + 8 * v28);
    v30 = v56 + 1;
    if (!v29)
    {
      v30 = v56 + 2;
      if (v56 + 2 >= v47)
        goto LABEL_40;
      v29 = *(_QWORD *)(v48 + 8 * v30);
      if (!v29)
      {
        v30 = v56 + 3;
        if (v56 + 3 >= v47)
          goto LABEL_40;
        v29 = *(_QWORD *)(v48 + 8 * v30);
        if (!v29)
        {
          v30 = v56 + 4;
          if (v56 + 4 >= v47)
            goto LABEL_40;
          v29 = *(_QWORD *)(v48 + 8 * v30);
          if (!v29)
            break;
        }
      }
    }
LABEL_27:
    v22 = (v29 - 1) & v29;
    v27 = __clz(__rbit64(v29)) + (v30 << 6);
    v56 = v30;
LABEL_28:
    v32 = v50;
    (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v50, *(_QWORD *)(v55 + 48) + *(_QWORD *)(v12 + 72) * v27, v11);
    v33 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v33(v15, v32, v11);
    v34 = v53;
    swift_dynamicCast(v53, v15, v11, v54, 7);
    v35 = (uint64_t)v34;
    v36 = v51;
    sub_1000A5CA8(v35, v51, (uint64_t *)&unk_100839C80);
    sub_1000A5CA8(v36, (uint64_t)v7, (uint64_t *)&unk_100839C80);
    Hasher.init(_seed:)(v57, v18[5]);
    v37 = (uint64_t)v52;
    sub_100008868((uint64_t)v7, (uint64_t)v52, (uint64_t *)&unk_100839C80);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v37, 1, v11) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v33(v15, (char *)v37, v11);
      Hasher._combine(_:)(1u);
      v38 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      dispatch thunk of Hashable.hash(into:)(v57, v11, v38);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    }
    result = Hasher._finalize()();
    v39 = -1 << *((_BYTE *)v18 + 32);
    v40 = result & ~v39;
    v41 = v40 >> 6;
    if (((-1 << v40) & ~*(_QWORD *)&v23[8 * (v40 >> 6)]) != 0)
    {
      v25 = __clz(__rbit64((-1 << v40) & ~*(_QWORD *)&v23[8 * (v40 >> 6)])) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v42 = 0;
      v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v44 = v41 == v43;
        if (v41 == v43)
          v41 = 0;
        v42 |= v44;
        v45 = *(_QWORD *)&v23[8 * v41];
      }
      while (v45 == -1);
      v25 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(_QWORD *)&v23[(v25 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v25;
    result = sub_1000A5CA8((uint64_t)v7, v18[6] + *(_QWORD *)(v49 + 72) * v25, (uint64_t *)&unk_100839C80);
    ++v18[2];
  }
  v31 = v56 + 5;
  if (v56 + 5 >= v47)
  {
LABEL_40:
    swift_release(v18);
    sub_1000C6560(v55);
    return (uint64_t)v18;
  }
  v29 = *(_QWORD *)(v48 + 8 * v31);
  if (v29)
  {
    v30 = v56 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v30 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v30 >= v47)
      goto LABEL_40;
    v29 = *(_QWORD *)(v48 + 8 * v30);
    ++v31;
    if (v29)
      goto LABEL_27;
  }
LABEL_42:
  __break(1u);
  return result;
}

Swift::Int sub_1002EC120(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  char *v8;
  Swift::Int result;
  int64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[9];
  _QWORD v33[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10001A630(&qword_100844908);
    v3 = (_QWORD *)static _SetStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptySetSingleton;
  }
  v31 = a1 + 56;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(63 - v4) >> 6;
  v8 = (char *)(v3 + 7);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v10 = 0;
  while (1)
  {
    if (v6)
    {
      v13 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_28;
    }
    v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v15 >= v7)
      goto LABEL_40;
    v16 = *(_QWORD *)(v31 + 8 * v15);
    v17 = v10 + 1;
    if (!v16)
    {
      v17 = v10 + 2;
      if (v10 + 2 >= v7)
        goto LABEL_40;
      v16 = *(_QWORD *)(v31 + 8 * v17);
      if (!v16)
      {
        v17 = v10 + 3;
        if (v10 + 3 >= v7)
          goto LABEL_40;
        v16 = *(_QWORD *)(v31 + 8 * v17);
        if (!v16)
        {
          v17 = v10 + 4;
          if (v10 + 4 >= v7)
            goto LABEL_40;
          v16 = *(_QWORD *)(v31 + 8 * v17);
          if (!v16)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v17 << 6);
    v10 = v17;
LABEL_28:
    v19 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v14);
    v20 = v19[1];
    v33[0] = *v19;
    v33[1] = v20;
    swift_bridgeObjectRetain(v20);
    v21 = sub_10001A630((uint64_t *)&unk_10083A370);
    swift_dynamicCast(v32, v33, &type metadata for String, v21, 7);
    v23 = v32[0];
    v22 = v32[1];
    Hasher.init(_seed:)(v32, v3[5]);
    if (v22)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v22);
      String.hash(into:)(v32, v23, v22);
      swift_bridgeObjectRelease(v22);
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    result = Hasher._finalize()();
    v24 = -1 << *((_BYTE *)v3 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)&v8[8 * (v25 >> 6)]) != 0)
    {
      v11 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)&v8[8 * (v25 >> 6)])) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)&v8[8 * v26];
      }
      while (v30 == -1);
      v11 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)&v8[(v11 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v11;
    v12 = (_QWORD *)(v3[6] + 16 * v11);
    *v12 = v23;
    v12[1] = v22;
    ++v3[2];
  }
  v18 = v10 + 5;
  if (v10 + 5 >= v7)
  {
LABEL_40:
    swift_release(v3);
    sub_1000C6560(a1);
    return (Swift::Int)v3;
  }
  v16 = *(_QWORD *)(v31 + 8 * v18);
  if (v16)
  {
    v17 = v10 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v17 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v17 >= v7)
      goto LABEL_40;
    v16 = *(_QWORD *)(v31 + 8 * v17);
    ++v18;
    if (v16)
      goto LABEL_27;
  }
LABEL_42:
  __break(1u);
  return result;
}

Swift::Int sub_1002EC450(uint64_t a1)
{
  return sub_1002EC4A4(a1, (uint64_t *)&unk_1008448E0, (uint64_t (*)(uint64_t))type metadata accessor for REMCDSavedReminder, &qword_10083B518);
}

uint64_t sub_1002EC46C(uint64_t a1)
{
  return sub_1002EC860(a1, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr, (unint64_t *)&qword_10083A1F0);
}

Swift::Int sub_1002EC488(uint64_t a1)
{
  return sub_1002EC4A4(a1, (uint64_t *)&unk_1008448E0, (uint64_t (*)(uint64_t))type metadata accessor for REMCDTemplate, (unint64_t *)&qword_100844900);
}

Swift::Int sub_1002EC4A4(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int result;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  _QWORD v45[5];

  v6 = a1;
  v7 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_11:
    v9 = &_swiftEmptySetSingleton;
    if (v7)
      goto LABEL_6;
LABEL_12:
    v18 = -1 << *(_BYTE *)(v6 + 32);
    v42 = v6 + 56;
    v15 = ~v18;
    v19 = -v18;
    if (v19 < 64)
      v20 = ~(-1 << v19);
    else
      v20 = -1;
    v17 = v20 & *(_QWORD *)(v6 + 56);
    swift_bridgeObjectRetain(v6);
    result = swift_retain(v9);
    v16 = 0;
    goto LABEL_16;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v8 = __CocoaSet.count.getter(a1);
  if (!v8)
    goto LABEL_11;
LABEL_5:
  sub_10001A630(a2);
  v9 = (_QWORD *)static _SetStorage.allocate(capacity:)(v8);
  if (!v7)
    goto LABEL_12;
LABEL_6:
  if (v6 < 0)
    v10 = v6;
  else
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v6);
  swift_retain(v9);
  v11 = __CocoaSet.makeIterator()(v10);
  v12 = a3(0);
  v13 = sub_10009FC50(a4, a3, (uint64_t)&protocol conformance descriptor for NSObject);
  result = (Swift::Int)Set.Iterator.init(_cocoa:)(v45, v11, v12, v13);
  v6 = v45[0];
  v42 = v45[1];
  v15 = v45[2];
  v16 = v45[3];
  v17 = v45[4];
LABEL_16:
  v21 = (unint64_t)(v15 + 64) >> 6;
  v22 = (char *)(v9 + 7);
  while (v6 < 0)
  {
    v26 = __CocoaSet.Iterator.next()(result);
    if (!v26)
      goto LABEL_50;
    v43 = v26;
    v27 = a3(0);
    swift_dynamicCast(&v44, &v43, (char *)&type metadata for Swift.AnyObject + 8, v27, 7);
    v28 = v44;
LABEL_41:
    result = NSObject._rawHashValue(seed:)(v9[5]);
    v34 = -1 << *((_BYTE *)v9 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)&v22[8 * (v35 >> 6)]) != 0)
    {
      v23 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)&v22[8 * (v35 >> 6)])) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_51;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)&v22[8 * v36];
      }
      while (v40 == -1);
      v23 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)&v22[(v23 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v23;
    *(_QWORD *)(v9[6] + 8 * v23) = v28;
    ++v9[2];
  }
  if (v17)
  {
    v24 = __clz(__rbit64(v17));
    v17 &= v17 - 1;
    v25 = v24 | (v16 << 6);
LABEL_40:
    v28 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * v25);
    v44 = v28;
    v33 = v28;
    goto LABEL_41;
  }
  v29 = v16 + 1;
  if (!__OFADD__(v16, 1))
  {
    if (v29 >= v21)
      goto LABEL_50;
    v30 = *(_QWORD *)(v42 + 8 * v29);
    v31 = v16 + 1;
    if (!v30)
    {
      v31 = v16 + 2;
      if (v16 + 2 >= v21)
        goto LABEL_50;
      v30 = *(_QWORD *)(v42 + 8 * v31);
      if (!v30)
      {
        v31 = v16 + 3;
        if (v16 + 3 >= v21)
          goto LABEL_50;
        v30 = *(_QWORD *)(v42 + 8 * v31);
        if (!v30)
        {
          v31 = v16 + 4;
          if (v16 + 4 >= v21)
            goto LABEL_50;
          v30 = *(_QWORD *)(v42 + 8 * v31);
          if (!v30)
          {
            v31 = v16 + 5;
            if (v16 + 5 >= v21)
              goto LABEL_50;
            v30 = *(_QWORD *)(v42 + 8 * v31);
            if (!v30)
            {
              v32 = v16 + 6;
              while (v21 != v32)
              {
                v30 = *(_QWORD *)(v42 + 8 * v32++);
                if (v30)
                {
                  v31 = v32 - 1;
                  goto LABEL_39;
                }
              }
LABEL_50:
              v44 = 0;
              swift_release(v9);
              sub_1000C6560(v6);
              return (Swift::Int)v9;
            }
          }
        }
      }
    }
LABEL_39:
    v17 = (v30 - 1) & v30;
    v25 = __clz(__rbit64(v30)) + (v31 << 6);
    v16 = v31;
    goto LABEL_40;
  }
LABEL_51:
  __break(1u);
  return result;
}

uint64_t sub_1002EC844(uint64_t a1)
{
  return sub_1002EC860(a1, (unint64_t *)&qword_100839DE0, NSNumber_ptr, &qword_100847B30);
}

uint64_t sub_1002EC860(uint64_t a1, unint64_t *a2, _QWORD *a3, unint64_t *a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  _OWORD v48[2];
  uint64_t v49;
  void *v50;
  _QWORD v51[6];

  v7 = a1;
  v8 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
      goto LABEL_5;
LABEL_11:
    v10 = &_swiftEmptySetSingleton;
    if (v8)
      goto LABEL_6;
LABEL_12:
    v19 = -1 << *(_BYTE *)(v7 + 32);
    v44 = v7 + 56;
    v16 = ~v19;
    v20 = -v19;
    if (v20 < 64)
      v21 = ~(-1 << v20);
    else
      v21 = -1;
    v18 = v21 & *(_QWORD *)(v7 + 56);
    swift_bridgeObjectRetain(v7);
    result = swift_retain();
    v17 = 0;
    goto LABEL_16;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v9 = __CocoaSet.count.getter(a1);
  if (!v9)
    goto LABEL_11;
LABEL_5:
  sub_10001A630(&qword_1008448D8);
  v10 = (_QWORD *)static _SetStorage.allocate(capacity:)(v9);
  if (!v8)
    goto LABEL_12;
LABEL_6:
  if (v7 < 0)
    v11 = v7;
  else
    v11 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  swift_retain();
  v12 = __CocoaSet.makeIterator()(v11);
  v13 = sub_1000151B0(0, a2, a3);
  v14 = sub_1000E51DC(a4, a2, a3, (uint64_t)&protocol conformance descriptor for NSObject);
  result = (uint64_t)Set.Iterator.init(_cocoa:)(v51, v12, v13, v14);
  v7 = v51[0];
  v44 = v51[1];
  v16 = v51[2];
  v17 = v51[3];
  v18 = v51[4];
LABEL_16:
  v43 = (unint64_t)(v16 + 64) >> 6;
  v22 = (char *)(v10 + 7);
  while (v7 < 0)
  {
    v27 = __CocoaSet.Iterator.next()(result);
    if (!v27)
      goto LABEL_50;
    *(_QWORD *)&v48[0] = v27;
    v28 = sub_1000151B0(0, a2, a3);
    swift_dynamicCast(&v50, v48, (char *)&type metadata for Swift.AnyObject + 8, v28, 7);
    v29 = v50;
LABEL_41:
    *(_QWORD *)&v45 = v29;
    v35 = sub_1000151B0(0, a2, a3);
    swift_dynamicCast(v48, &v45, v35, &type metadata for AnyHashable, 7);
    v45 = v48[0];
    v46 = v48[1];
    v47 = v49;
    result = AnyHashable._rawHashValue(seed:)(v10[5]);
    v36 = -1 << *((_BYTE *)v10 + 32);
    v37 = result & ~v36;
    v38 = v37 >> 6;
    if (((-1 << v37) & ~*(_QWORD *)&v22[8 * (v37 >> 6)]) != 0)
    {
      v23 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)&v22[8 * (v37 >> 6)])) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v39 = 0;
      v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_51;
        }
        v41 = v38 == v40;
        if (v38 == v40)
          v38 = 0;
        v39 |= v41;
        v42 = *(_QWORD *)&v22[8 * v38];
      }
      while (v42 == -1);
      v23 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(_QWORD *)&v22[(v23 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v23;
    v24 = v10[6] + 40 * v23;
    *(_OWORD *)v24 = v45;
    *(_OWORD *)(v24 + 16) = v46;
    *(_QWORD *)(v24 + 32) = v47;
    ++v10[2];
  }
  if (v18)
  {
    v25 = __clz(__rbit64(v18));
    v18 &= v18 - 1;
    v26 = v25 | (v17 << 6);
LABEL_40:
    v29 = *(void **)(*(_QWORD *)(v7 + 48) + 8 * v26);
    v50 = v29;
    v34 = v29;
    goto LABEL_41;
  }
  v30 = v17 + 1;
  if (!__OFADD__(v17, 1))
  {
    if (v30 >= v43)
      goto LABEL_50;
    v31 = *(_QWORD *)(v44 + 8 * v30);
    v32 = v17 + 1;
    if (!v31)
    {
      v32 = v17 + 2;
      if (v17 + 2 >= v43)
        goto LABEL_50;
      v31 = *(_QWORD *)(v44 + 8 * v32);
      if (!v31)
      {
        v32 = v17 + 3;
        if (v17 + 3 >= v43)
          goto LABEL_50;
        v31 = *(_QWORD *)(v44 + 8 * v32);
        if (!v31)
        {
          v32 = v17 + 4;
          if (v17 + 4 >= v43)
            goto LABEL_50;
          v31 = *(_QWORD *)(v44 + 8 * v32);
          if (!v31)
          {
            v32 = v17 + 5;
            if (v17 + 5 >= v43)
              goto LABEL_50;
            v31 = *(_QWORD *)(v44 + 8 * v32);
            if (!v31)
            {
              v33 = v17 + 6;
              while (v43 != v33)
              {
                v31 = *(_QWORD *)(v44 + 8 * v33++);
                if (v31)
                {
                  v32 = v33 - 1;
                  goto LABEL_39;
                }
              }
LABEL_50:
              v50 = 0;
              swift_release(v10);
              sub_1000C6560(v7);
              return (uint64_t)v10;
            }
          }
        }
      }
    }
LABEL_39:
    v18 = (v31 - 1) & v31;
    v26 = __clz(__rbit64(v31)) + (v32 << 6);
    v17 = v32;
    goto LABEL_40;
  }
LABEL_51:
  __break(1u);
  return result;
}

void sub_1002ECC8C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_title, a2);
}

void sub_1002ECC98(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setTitle_);
}

uint64_t sub_1002ECCA4@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*a1, "dueDate");
  if (v3)
  {
    v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

void sub_1002ECD28(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  uint64_t v11;

  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008868(a1, (uint64_t)v6, (uint64_t *)&unk_1008380D0);
  v7 = *a2;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  objc_msgSend(v7, "setDueDate:", isa);

}

void sub_1002ECE0C(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  int64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];
  id v34;

  v4 = v3;
  v5 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    if (a3 < 0)
      v7 = a3;
    else
      v7 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v8 = __CocoaSet.makeIterator()(v7);
    v9 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    v10 = sub_1000E51DC((unint64_t *)&qword_1008448D0, (unint64_t *)&qword_10083AE90, off_1007D6708, (uint64_t)&protocol conformance descriptor for NSObject);
    v11 = Set.Iterator.init(_cocoa:)(v33, v8, v9, v10);
    v5 = v33[0];
    v31 = v33[1];
    v12 = v33[2];
    v13 = v33[3];
    v14 = v33[4];
  }
  else
  {
    v15 = -1 << *(_BYTE *)(a3 + 32);
    v31 = a3 + 56;
    v16 = ~v15;
    v17 = -v15;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v14 = v18 & *(_QWORD *)(a3 + 56);
    swift_bridgeObjectRetain(a3);
    v12 = v16;
    v13 = 0;
  }
  v30 = (unint64_t)(v12 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_11:
  v19 = __CocoaSet.Iterator.next()(v11);
  if (v19)
  {
    v20 = v19;
    v32 = v19;
    v21 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    swift_unknownObjectRetain(v20);
    swift_dynamicCast(&v34, &v32, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
    v22 = v34;
    swift_unknownObjectRelease(v20);
    v23 = v13;
    v24 = v14;
    while (v22)
    {
      v34 = v22;
      v28 = a1(&v34);

      if (v4 || (v28 & 1) != 0)
        break;
      v13 = v23;
      v14 = v24;
      if (v5 < 0)
        goto LABEL_11;
LABEL_14:
      if (v14)
      {
        v24 = (v14 - 1) & v14;
        v25 = __clz(__rbit64(v14)) | (v13 << 6);
        v23 = v13;
      }
      else
      {
        v23 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
          return;
        }
        if (v23 >= v30)
          break;
        v26 = *(_QWORD *)(v31 + 8 * v23);
        if (!v26)
        {
          v27 = v13 + 2;
          if (v13 + 2 >= v30)
            break;
          v26 = *(_QWORD *)(v31 + 8 * v27);
          if (v26)
            goto LABEL_25;
          v27 = v13 + 3;
          if (v13 + 3 >= v30)
            break;
          v26 = *(_QWORD *)(v31 + 8 * v27);
          if (v26)
            goto LABEL_25;
          v27 = v13 + 4;
          if (v13 + 4 >= v30)
            break;
          v26 = *(_QWORD *)(v31 + 8 * v27);
          if (v26)
          {
LABEL_25:
            v23 = v27;
          }
          else
          {
            v23 = v13 + 5;
            if (v13 + 5 >= v30)
              break;
            v26 = *(_QWORD *)(v31 + 8 * v23);
            if (!v26)
            {
              v29 = v13 + 6;
              while (v30 != v29)
              {
                v26 = *(_QWORD *)(v31 + 8 * v29++);
                if (v26)
                {
                  v23 = v29 - 1;
                  goto LABEL_26;
                }
              }
              break;
            }
          }
        }
LABEL_26:
        v24 = (v26 - 1) & v26;
        v25 = __clz(__rbit64(v26)) + (v23 << 6);
      }
      v22 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v25);
    }
  }
  sub_1000C6560(v5);
}

uint64_t sub_1002ED144(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v24;
  id v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v31;
  int64_t v32;

  v2 = a1 + 64;
  v3 = *(_BYTE *)(a1 + 32);
  v4 = 1 << v3;
  v5 = -1;
  if (1 << v3 < 64)
    v5 = ~(-1 << (1 << v3));
  v6 = v5 & *(_QWORD *)(a1 + 64);
  if (v6)
  {
    v7 = 0;
    v8 = __clz(__rbit64(v6));
    v9 = (v6 - 1) & v6;
    v32 = (unint64_t)(v4 + 63) >> 6;
  }
  else
  {
    v14 = v3 & 0x3F;
    if (v14 <= 6)
      return 0;
    v32 = (unint64_t)(v4 + 63) >> 6;
    v26 = *(_QWORD *)(a1 + 72);
    if (v26)
    {
      v7 = 1;
    }
    else
    {
      if (v14 < 8)
        return 0;
      v26 = *(_QWORD *)(a1 + 80);
      if (v26)
      {
        v7 = 2;
      }
      else
      {
        v26 = *(_QWORD *)(a1 + 88);
        if (v26)
        {
          v7 = 3;
        }
        else
        {
LABEL_41:
          if (v14 < 9)
            return 0;
          v26 = *(_QWORD *)(a1 + 96);
          if (v26)
          {
            v7 = 4;
          }
          else
          {
            v26 = *(_QWORD *)(a1 + 104);
            if (!v26)
              goto LABEL_47;
            v7 = 5;
          }
        }
      }
    }
LABEL_34:
    v9 = (v26 - 1) & v26;
    v8 = __clz(__rbit64(v26)) + (v7 << 6);
  }
  v10 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v8);
  v12 = *v10;
  v11 = v10[1];
  v13 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v8);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(v11);
  v31 = v13;
  while (1)
  {
    if (v9)
    {
      v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_24;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v17 >= v32)
      goto LABEL_30;
    v18 = *(_QWORD *)(v2 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_30;
      v18 = *(_QWORD *)(v2 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v32)
          goto LABEL_30;
        v18 = *(_QWORD *)(v2 + 8 * v7);
        if (!v18)
        {
          v7 = v17 + 3;
          if (v17 + 3 >= v32)
            goto LABEL_30;
          v18 = *(_QWORD *)(v2 + 8 * v7);
          if (!v18)
            break;
        }
      }
    }
LABEL_23:
    v14 = v18 - 1;
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_24:
    v20 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    if (*v20 != v12 || v22 != v11)
    {
      v24 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v16);
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, v12, v11, 1) & 1) != 0)
      {
        swift_bridgeObjectRetain(v22);
        v25 = v24;

        swift_bridgeObjectRelease(v11);
        v31 = v25;
        v11 = v22;
        v12 = v21;
      }
    }
  }
  v19 = v17 + 4;
  if (v19 >= v32)
  {
LABEL_30:
    swift_release(a1);
    return v12;
  }
  v18 = *(_QWORD *)(v2 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v32)
      goto LABEL_30;
    v18 = *(_QWORD *)(v2 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_23;
  }
  __break(1u);
LABEL_47:
  v27 = 0;
  v28 = 6;
  if (v32 > 6)
    v28 = v32;
  v29 = v28 - 6;
  while (v29 != v27)
  {
    v26 = *(_QWORD *)(a1 + 112 + 8 * v27++);
    if (v26)
    {
      v7 = v27 + 5;
      goto LABEL_34;
    }
  }
  return 0;
}

void sub_1002ED43C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_timeZone, a2);
}

void sub_1002ED448(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setTimeZone_);
}

id sub_1002ED454@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "allDay");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1002ED484(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setAllDay:", *a1);
}

uint64_t sub_1002ED498(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002ED4CC + 4 * byte_1006B3760[a1]))(0x7344496D72616C61, 0xE800000000000000);
}

uint64_t sub_1002ED4CC()
{
  return 0x7961446C6C61;
}

unint64_t sub_1002ED4E0()
{
  return 0xD000000000000026;
}

uint64_t sub_1002ED6E8()
{
  return 0x7461447472617473;
}

uint64_t sub_1002ED708()
{
  return 0x656E6F5A656D6974;
}

uint64_t sub_1002ED75C()
{
  return 0x6974634172657375;
}

uint64_t sub_1002ED77C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008448A0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008448A0);
  if (qword_100837608 != -1)
    swift_once(&qword_100837608, sub_1004A17C8);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1002ED80C(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void *i;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  id v11;
  char isUniquelyReferenced_nonNull_native;
  double v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[5];

  v2 = v1;
  i = a1;
  v4 = objc_msgSend(a1, "ckIdentifier");
  if (!v4)
  {
    if (qword_100837118 == -1)
      goto LABEL_7;
    goto LABEL_49;
  }
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v8 = v7;

  if (!*(_QWORD *)(*v2 + 16)
    || (swift_bridgeObjectRetain(v8), sub_10001A6DC(v6, v8), v10 = v9, swift_bridgeObjectRelease(), (v10 & 1) == 0))
  {
    v11 = i;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v52[0] = *v2;
    *v2 = 0x8000000000000000;
    sub_10028B870((uint64_t)v11, v6, v8, isUniquelyReferenced_nonNull_native);
    *v2 = v52[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)&v13 = swift_bridgeObjectRelease().n128_u64[0];
    while (1)
    {
      v24 = objc_msgSend(i, "children", v13);
      if (!v24)
        return;
      v25 = v24;
      v26 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
      v27 = sub_1000E51DC((unint64_t *)&qword_1008448D0, (unint64_t *)&qword_10083AE90, off_1007D6708, (uint64_t)&protocol conformance descriptor for NSObject);
      v47 = v26;
      v28 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v25, v26, v27);

      if ((v28 & 0xC000000000000001) != 0)
      {
        if (v28 < 0)
          v30 = v28;
        else
          v30 = v28 & 0xFFFFFFFFFFFFFF8;
        if (!__CocoaSet.count.getter(v30))
        {
LABEL_45:
          swift_bridgeObjectRelease();
          return;
        }
        v31 = __CocoaSet.makeIterator()(v30);
        v29 = Set.Iterator.init(_cocoa:)(v52, v31, v26, v27);
        v28 = v52[0];
        v49 = v52[1];
        v32 = v52[2];
        v33 = v52[3];
        v34 = v52[4];
      }
      else
      {
        if (!*(_QWORD *)(v28 + 16))
          goto LABEL_45;
        v33 = 0;
        v35 = -1 << *(_BYTE *)(v28 + 32);
        v49 = v28 + 56;
        v32 = ~v35;
        v36 = -v35;
        if (v36 < 64)
          v37 = ~(-1 << v36);
        else
          v37 = -1;
        v34 = v37 & *(_QWORD *)(v28 + 56);
      }
      for (i = (void *)((unint64_t)(v32 + 64) >> 6); v28 < 0; v34 = v38)
      {
        v41 = __CocoaSet.Iterator.next()(v29);
        if (!v41)
          goto LABEL_46;
        v42 = v41;
        v50 = v41;
        swift_unknownObjectRetain(v41);
        swift_dynamicCast(&v51, &v50, (char *)&type metadata for Swift.AnyObject + 8, v47, 7);
        v43 = (id)v51;
        swift_unknownObjectRelease(v42);
        v40 = v33;
        v38 = v34;
        if (!v43)
          goto LABEL_46;
LABEL_43:
        sub_1002ED80C(v43);

        v33 = v40;
      }
      if (v34)
        break;
      v44 = v33 + 1;
      if (!__OFADD__(v33, 1))
      {
        if (v44 < (uint64_t)i)
        {
          v45 = *(_QWORD *)(v49 + 8 * v44);
          v40 = v33 + 1;
          if (v45)
            goto LABEL_41;
          v40 = v33 + 2;
          if (v33 + 2 < (uint64_t)i)
          {
            v45 = *(_QWORD *)(v49 + 8 * v40);
            if (v45)
              goto LABEL_41;
            v40 = v33 + 3;
            if (v33 + 3 < (uint64_t)i)
            {
              v45 = *(_QWORD *)(v49 + 8 * v40);
              if (v45)
                goto LABEL_41;
              v40 = v33 + 4;
              if (v33 + 4 < (uint64_t)i)
              {
                v45 = *(_QWORD *)(v49 + 8 * v40);
                if (!v45)
                {
                  v46 = v33 + 5;
                  while (i != (void *)v46)
                  {
                    v45 = *(_QWORD *)(v49 + 8 * v46++);
                    if (v45)
                    {
                      v40 = v46 - 1;
                      goto LABEL_41;
                    }
                  }
                  goto LABEL_46;
                }
LABEL_41:
                v38 = (v45 - 1) & v45;
                v39 = __clz(__rbit64(v45)) + (v40 << 6);
LABEL_42:
                v43 = *(id *)(*(_QWORD *)(v28 + 48) + 8 * v39);
                if (v43)
                  goto LABEL_43;
              }
            }
          }
        }
LABEL_46:
        sub_1000C6560(v28);
        return;
      }
      __break(1u);
LABEL_49:
      swift_once(&qword_100837118, sub_1002ED77C);
LABEL_7:
      v14 = type metadata accessor for Logger(0);
      sub_10001AAA8(v14, (uint64_t)qword_1008448A0);
      v15 = i;
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(12, -1);
        v48 = swift_slowAlloc(32, -1);
        v52[0] = v48;
        *(_DWORD *)v18 = 136315138;
        v19 = objc_msgSend(v15, "remObjectID");
        v51 = (uint64_t)v19;
        v20 = sub_10001A630((uint64_t *)&unk_100844910);
        v21 = Optional.descriptionOrNil.getter(v20);
        v23 = v22;

        v51 = sub_10001A820(v21, v23, v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "addSubtree: ckIdentifier is nil {objectID: %s}", v18, 0xCu);
        swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v48, -1, -1);
        swift_slowDealloc(v18, -1, -1);

      }
      else
      {

      }
    }
    v38 = (v34 - 1) & v34;
    v39 = __clz(__rbit64(v34)) | (v33 << 6);
    v40 = v33;
    goto LABEL_42;
  }
  swift_bridgeObjectRelease();
}

uint64_t sub_1002EDD58(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002EDD8C + 4 * byte_1006B377B[a1]))(0x7344496D72616C41, 0xE800000000000000);
}

uint64_t sub_1002EDD8C()
{
  return 0x7961446C6C41;
}

unint64_t sub_1002EDDA0()
{
  return 0xD000000000000025;
}

uint64_t sub_1002EDFA8()
{
  return 0x7461447472617453;
}

uint64_t sub_1002EDFC8()
{
  return 0x656E6F5A656D6954;
}

uint64_t sub_1002EE01C()
{
  return 0x6974634172657355;
}

uint64_t sub_1002EE03C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  NSString v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;

  v0 = CKRecord.subscript.getter(0x6552746E65726150, 0xEE007265646E696DLL);
  if (!v0)
    return 0;
  v1 = v0;
  v2 = objc_opt_self(CKReference);
  v3 = (void *)swift_dynamicCastObjCClass(v1, v2);
  if (!v3)
  {
    swift_unknownObjectRelease(v1);
    return 0;
  }
  v4 = objc_msgSend(v3, "recordID");
  v5 = objc_msgSend(v4, "recordName");

  if (!v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v7 = v6;
    v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
  }
  v8 = objc_msgSend((id)objc_opt_self(REMCDObject), "ckIdentifierFromRecordName:", v5);

  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  swift_unknownObjectRelease(v1);

  return v9;
}

uint64_t sub_1002EE164(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = sub_1002ED498(*a1);
  v5 = v4;
  v6 = sub_1002ED498(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_1002EE1EC()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  v2 = sub_1002ED498(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

double sub_1002EE24C(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = sub_1002ED498(*v1);
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

Swift::Int sub_1002EE28C(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  v3 = sub_1002ED498(v2);
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1002EE2E8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100300328(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_1002EE314@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1002ED498(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1002EE33C(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DD8B0;
}

_UNKNOWN **static REMCDReminder.recordTypes()()
{
  return &off_1007E0290;
}

uint64_t static REMCDReminder.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  id v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t result;

  v7 = a1;
  swift_bridgeObjectRetain(a3);
  v8 = a4;
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v10 = objc_msgSend((id)objc_opt_self(REMCDReminder), "objectWithRecordID:accountID:context:", v7, v9, v8);

  if (v10)
  {
    result = swift_dynamicCastUnknownClass(v10, v4);
    if (result)
      return result;

  }
  return 0;
}

id static REMCDReminder.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v8;
  NSString v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t MetatypeMetadata;
  uint64_t v20;
  unint64_t v21;
  double v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = v3;
  v8 = objc_msgSend(a1, "recordID");
  v9 = objc_msgSend(v8, "recordName");

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "newObjectWithCKRecordName:context:account:", v9, a3, a2);

  if (v10)
  {
    v11 = objc_msgSend(a2, "ckIdentifier");
    if (v11)
    {
      v12 = v11;
      objc_msgSend(v10, "mergeDataFromRecord:accountID:", a1, v11);

      sub_1002EE828();
      objc_msgSend(v10, "setCkServerRecord:", a1);
      objc_msgSend(v10, "setInCloud:", 1);
      objc_msgSend(v10, "updateParentReferenceIfNecessary");
    }
    else
    {
      if (qword_100837118 != -1)
        swift_once(&qword_100837118, sub_1002ED77C);
      v13 = type metadata accessor for Logger(0);
      sub_10001AAA8(v13, (uint64_t)qword_1008448A0);
      v14 = a2;
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = swift_slowAlloc(22, -1);
        v18 = swift_slowAlloc(64, -1);
        v30 = v18;
        v31 = v4;
        *(_DWORD *)v17 = 136446466;
        MetatypeMetadata = swift_getMetatypeMetadata(v4);
        v20 = String.init<A>(describing:)(&v31, MetatypeMetadata);
        v31 = sub_10001A820(v20, v21, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
        *(_QWORD *)&v22 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v17 + 12) = 2082;
        v23 = objc_msgSend(v14, "remObjectID", v22, v30);
        if (v23)
        {
          v24 = v23;
          v25 = objc_msgSend(v23, "description");

          v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
          v28 = v27;

        }
        else
        {
          v28 = 0xE300000000000000;
          v26 = 7104878;
        }
        v31 = sub_10001A820(v26, v28, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v18, -1, -1);
        swift_slowDealloc(v17, -1, -1);

      }
      else
      {

      }
      return 0;
    }
  }
  return v10;
}

void sub_1002EE828()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  NSObject *v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  id v41;
  void *v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  unsigned int (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  id v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  unint64_t v60;
  double v61;
  id v62;
  void *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  NSString v71;
  id v72;
  uint64_t v73;
  void *ObjCClassFromMetadata;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  Class isa;
  void (*v87)(uint64_t, uint64_t);
  uint64_t v88;
  id v89;
  NSObject *v90;
  os_log_type_t v91;
  _BOOL4 v92;
  uint8_t *v93;
  id v94;
  void *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  double v101;
  id v102;
  void *v103;
  id v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  id v112;
  uint64_t v113;
  os_log_type_t v114;
  uint64_t v115;
  uint64_t v116;
  double v117;
  id v118;
  void *v119;
  id v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void (*v127)(uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  id v133;
  void (*v134)(uint64_t, char *, uint64_t);
  unsigned int (*v135)(char *, uint64_t, uint64_t);
  void (*v136)(uint64_t, uint64_t);
  void (*v137)(char *, uint64_t, uint64_t, uint64_t);
  id v138;
  uint64_t v139;
  uint64_t v140;
  NSObject *v141;
  uint64_t v142;
  uint64_t v143;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v132 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v6);
  v8 = (char *)&v132 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v132 - v10;
  __chkstk_darwin(v12);
  v14 = (char *)&v132 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)&v132 - v16;
  __chkstk_darwin(v18);
  v20 = (char *)&v132 - v19;
  *(_QWORD *)&v22 = __chkstk_darwin(v21).n128_u64[0];
  v24 = (char *)&v132 - v23;
  if ((objc_msgSend(v1, "isOwnedByCurrentUser", v22) & 1) != 0)
    return;
  v25 = objc_msgSend(v1, "managedObjectContext");
  if (!v25)
  {
    if (qword_100837118 != -1)
      swift_once(&qword_100837118, sub_1002ED77C);
    v47 = type metadata accessor for Logger(0);
    v48 = sub_10001AAA8(v47, (uint64_t)qword_1008448A0);
    v141 = Logger.logObject.getter(v48);
    v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v141, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v141, v49, "Trying to create REMCDSharedToMeReminderPlaceholder to a reminder object without MOC", v50, 2u);
      swift_slowDealloc(v50, -1, -1);
    }
    goto LABEL_18;
  }
  v139 = (uint64_t)v5;
  v140 = v2;
  v141 = v25;
  v26 = objc_msgSend(v1, "storeControllerManagedObjectContext");
  if (!v26
    || (v27 = v26,
        v28 = objc_msgSend(v26, "storeController"),
        v27,
        !v28))
  {
    if (qword_100837118 != -1)
      swift_once(&qword_100837118, sub_1002ED77C);
    v35 = type metadata accessor for Logger(0);
    sub_10001AAA8(v35, (uint64_t)qword_1008448A0);
    v36 = v1;
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = swift_slowAlloc(32, -1);
      v143 = v40;
      *(_DWORD *)v39 = 136446210;
      v41 = objc_msgSend(v36, "remObjectID");
      if (v41)
      {
        v42 = v41;
        v43 = objc_msgSend(v41, "description");

        v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
        v46 = v45;

      }
      else
      {
        v44 = 7104878;
        v46 = 0xE300000000000000;
      }
      v142 = sub_10001A820(v44, v46, &v143);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "REMCDReminder+CloudKit: Could not create REMCDSharedToMeReminderPlaceholder because storeController isn't available {reminder: %{public}s}", v39, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

      return;
    }

LABEL_18:
    return;
  }
  v29 = objc_msgSend(v1, "account");
  v138 = v28;
  if (!v29)
  {
LABEL_24:
    if (qword_100837118 != -1)
      swift_once(&qword_100837118, sub_1002ED77C);
    v53 = type metadata accessor for Logger(0);
    sub_10001AAA8(v53, (uint64_t)qword_1008448A0);
    v54 = v1;
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = swift_slowAlloc(32, -1);
      v139 = swift_slowAlloc(96, -1);
      v143 = v139;
      *(_DWORD *)v57 = 136446722;
      v58 = objc_msgSend(v54, "account");

      if (v58)
        v59 = 15649;
      else
        v59 = 61;
      if (v58)
        v60 = 0xE200000000000000;
      else
        v60 = 0xE100000000000000;
      v142 = sub_10001A820(v59, v60, &v143);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143);

      *(_QWORD *)&v61 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v57 + 12) = 2082;
      v62 = objc_msgSend(v54, "account", v61);
      if (v62)
      {
        v63 = v62;
        v64 = objc_msgSend(v62, "identifier");

        if (v64)
        {
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v64);

          v65 = 0;
        }
        else
        {
          v65 = 1;
        }
        v99 = v140;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, v65, 1, v140);
        sub_1000A5CA8((uint64_t)v8, (uint64_t)v11, (uint64_t *)&unk_100839C80);
        v100 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v99);
        if (v100 == 1)
          v98 = 61;
        else
          v98 = 15649;
        if (v100 == 1)
          v97 = 0xE100000000000000;
        else
          v97 = 0xE200000000000000;
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v11, 1, 1, v140);
        v97 = 0xE100000000000000;
        v98 = 61;
      }
      sub_10000882C((uint64_t)v11, (uint64_t *)&unk_100839C80);
      v142 = sub_10001A820(v98, v97, &v143);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143);

      *(_QWORD *)&v101 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v57 + 22) = 2082;
      v102 = objc_msgSend(v54, "remObjectID", v101);
      if (v102)
      {
        v103 = v102;
        v104 = objc_msgSend(v102, "description");

        v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
        v107 = v106;

      }
      else
      {
        v105 = 7104878;
        v107 = 0xE300000000000000;
      }
      v142 = sub_10001A820(v105, v107, &v143);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "REMCDReminder+CloudKit: Could not create REMCDSharedToMeReminderPlaceholder because accountIdentifier is nil where account %{public}s nil and account.identifier %{public}s nil, {reminder: %{public}s}", (uint8_t *)v57, 0x20u);
      v108 = v139;
      swift_arrayDestroy(v139, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v108, -1, -1);
      v109 = v57;
      goto LABEL_56;
    }

LABEL_37:
    return;
  }
  v30 = v29;
  v31 = objc_msgSend(v29, "identifier");

  if (v31)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v31);

    v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v33 = v20;
    v34 = 0;
  }
  else
  {
    v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v33 = v20;
    v34 = 1;
  }
  v51 = v140;
  v137 = v32;
  v32(v33, v34, 1, v140);
  v28 = v138;
  sub_1000A5CA8((uint64_t)v20, (uint64_t)v24, (uint64_t *)&unk_100839C80);
  v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
  if (v52(v24, 1, v51))
  {
    sub_10000882C((uint64_t)v24, (uint64_t *)&unk_100839C80);
    goto LABEL_24;
  }
  v66 = v139;
  v134 = *(void (**)(uint64_t, char *, uint64_t))(v3 + 16);
  v135 = v52;
  v134(v139, v24, v51);
  v67 = sub_10000882C((uint64_t)v24, (uint64_t *)&unk_100839C80);
  v68 = UUID.uuidString.getter(v67);
  v70 = v69;
  v136 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v136(v66, v51);
  v71 = String._bridgeToObjectiveC()();
  v72 = objc_msgSend(v28, "storeForAccountIdentifier:", v71);

  if (!v72)
  {
    v110 = v70;
    if (qword_100837118 != -1)
      swift_once(&qword_100837118, sub_1002ED77C);
    v111 = type metadata accessor for Logger(0);
    sub_10001AAA8(v111, (uint64_t)qword_1008448A0);
    v112 = v1;
    swift_bridgeObjectRetain(v70);
    v55 = Logger.logObject.getter(v113);
    v114 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v55, v114))
    {

      swift_bridgeObjectRelease_n(v110, 2);
      goto LABEL_57;
    }
    v115 = swift_slowAlloc(22, -1);
    v116 = swift_slowAlloc(64, -1);
    v143 = v116;
    *(_DWORD *)v115 = 136446466;
    swift_bridgeObjectRetain(v110);
    v142 = sub_10001A820(v68, v110, &v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143);
    *(_QWORD *)&v117 = swift_bridgeObjectRelease_n(v110, 3).n128_u64[0];
    *(_WORD *)(v115 + 12) = 2082;
    v118 = objc_msgSend(v112, "remObjectID", v117);
    if (v118)
    {
      v119 = v118;
      v120 = objc_msgSend(v118, "description");

      v121 = static String._unconditionallyBridgeFromObjectiveC(_:)(v120);
      v123 = v122;

    }
    else
    {
      v121 = 7104878;
      v123 = 0xE300000000000000;
    }
    v142 = sub_10001A820(v121, v123, &v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v55, v114, "REMCDReminder+CloudKit: Could not create REMCDSharedToMeReminderPlaceholder because there is problem finding the persistent store for the accountIdentifier %{public}s and the reminder {reminder: %{public}s}", (uint8_t *)v115, 0x16u);
    swift_arrayDestroy(v116, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v116, -1, -1);
    v109 = v115;
LABEL_56:
    swift_slowDealloc(v109, -1, -1);

LABEL_57:
    return;
  }
  swift_bridgeObjectRelease();
  v73 = sub_1000151B0(0, &qword_100844930, off_1007D6710);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v73);
  v75 = v72;
  v76 = objc_msgSend(ObjCClassFromMetadata, "entity");
  v77 = objc_allocWithZone((Class)ObjCClassFromMetadata);
  v78 = objc_msgSend(v77, "initWithEntity:insertIntoManagedObjectContext:", v76, v141);
  v79 = v75;
  v80 = v78;
  -[NSObject assignObject:toPersistentStore:](v141, "assignObject:toPersistentStore:", v80, v79);

  v81 = v80;
  v82 = objc_msgSend(v1, "account");
  objc_msgSend(v81, "setAccount:", v82);

  v83 = v81;
  v84 = objc_msgSend(ObjCClassFromMetadata, "newObjectID");
  v85 = objc_msgSend(v84, "uuid");

  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v85);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v87 = v136;
  v136(v66, v140);
  objc_msgSend(v83, "setIdentifier:", isa);

  objc_msgSend(v83, "setReminder:", v1);
  if (qword_100837118 != -1)
    swift_once(&qword_100837118, sub_1002ED77C);
  v88 = type metadata accessor for Logger(0);
  sub_10001AAA8(v88, (uint64_t)qword_1008448A0);
  v89 = v83;
  v90 = Logger.logObject.getter(v89);
  v91 = static os_log_type_t.default.getter(v90);
  v92 = os_log_type_enabled(v90, v91);
  v28 = v138;
  if (v92)
  {
    v133 = v79;
    v93 = (uint8_t *)swift_slowAlloc(12, -1);
    v132 = swift_slowAlloc(32, -1);
    v143 = v132;
    *(_DWORD *)v93 = 136446210;
    v94 = objc_msgSend(v89, "identifier");
    if (v94)
    {
      v95 = v94;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v94);

      v96 = 0;
    }
    else
    {
      v96 = 1;
    }
    v124 = v140;
    v137(v14, v96, 1, v140);
    sub_1000A5CA8((uint64_t)v14, (uint64_t)v17, (uint64_t *)&unk_100839C80);
    if (v135(v17, 1, v124))
    {
      v125 = 7104878;
      sub_10000882C((uint64_t)v17, (uint64_t *)&unk_100839C80);
      v126 = 0xE300000000000000;
    }
    else
    {
      v127 = v87;
      v128 = v139;
      v134(v139, v17, v124);
      v129 = sub_10000882C((uint64_t)v17, (uint64_t *)&unk_100839C80);
      v125 = UUID.uuidString.getter(v129);
      v126 = v130;
      v127(v128, v124);
      v28 = v138;
    }
    v142 = sub_10001A820(v125, v126, &v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v90, v91, "Creating REMCDSharedToMeReminderPlaceholder for CloudKit: %{public}s", v93, 0xCu);
    v131 = v132;
    swift_arrayDestroy(v132, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v131, -1, -1);
    swift_slowDealloc(v93, -1, -1);

    goto LABEL_37;
  }

}

Swift::String __swiftcall REMCDReminder.recordType()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = 0x7265646E696D6552;
  v1 = (void *)0xE800000000000000;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::Void __swiftcall REMCDReminder.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  void *v2;
  id v4;
  void *v5;
  id v6;
  char v7;
  NSString v8;
  id v9;
  NSString v10;
  double v11;
  NSString v12;
  double v13;
  id v14;
  void *v15;
  id v16;
  char v17;
  char v18;
  char v19;
  id v20;
  objc_class *v21;
  id v22;
  void *v23;
  char v24;
  char v25;
  objc_super v26;

  v4 = objc_msgSend(v2, "parentReminder");
  if (v4 && (v5 = v4, v6 = objc_msgSend(v4, "list"), v5, v6))
  {

    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  v8 = String._bridgeToObjectiveC()();
  v26.receiver = v2;
  v26.super_class = (Class)REMCDReminder;
  objc_msgSendSuper2(&v26, "mergeDataFromRecord:accountID:", from.super.isa, v8);

  v9 = -[objc_class recordID](from.super.isa, "recordID");
  v10 = objc_msgSend(v9, "recordName");

  if (!v10)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v10 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v11 = swift_bridgeObjectRelease().n128_u64[0];
  }
  v12 = objc_msgSend(v2, "ckIdentifierFromRecordName:", v10, v11);

  if (!v12)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v12 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v13 = swift_bridgeObjectRelease().n128_u64[0];
  }
  objc_msgSend(v2, "setCkIdentifier:", v12, v13);

  v14 = objc_msgSend(v2, "parentReminder");
  if (v14 && (v15 = v14, v16 = objc_msgSend(v14, "list"), v15, v16))
  {

    v17 = 1;
  }
  else
  {
    v17 = 0;
  }
  v25 = v7 & v17;
  v24 = 0;
  v18 = objc_msgSend(v2, "mergeDataRevertedLocallyMarkedForDeletion");
  v19 = objc_msgSend(v2, "mergeDataRefusedToMergeMarkedForDeletion");
  v20 = v2;
  v21 = from.super.isa;
  sub_1004481FC((char *)v21, v18, v19, v20, (uint64_t)v20, (uint64_t)v21, (uint64_t)&v24, (uint64_t)&v25);

  if (v25 == 1)
  {
    v22 = objc_msgSend(v20, "list");
    if (v22)
    {
      v23 = v22;
      if ((objc_msgSend(v22, "ckNeedsInitialFetchFromCloud") & 1) == 0)
        sub_1002B8DB8();

    }
  }
  if (objc_msgSend(v20, "isPlaceholder"))
    sub_1002EE828();
}

void sub_1002EFAC4(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[22];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v49[12] = a5;
  v49[20] = a4;
  v52 = a2;
  v53 = a3;
  v51 = type metadata accessor for UUID(0);
  v49[17] = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v49[8] = (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_10001A630((uint64_t *)&unk_10083B370);
  __chkstk_darwin(v50);
  v49[11] = (char *)v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v49[15] = (char *)v49 - v9;
  __chkstk_darwin(v10);
  v49[10] = (char *)v49 - v11;
  v12 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v12);
  v49[5] = (char *)v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v49[2] = (char *)v49 - v15;
  __chkstk_darwin(v16);
  v49[16] = (char *)v49 - v17;
  __chkstk_darwin(v18);
  v49[1] = (char *)v49 - v19;
  __chkstk_darwin(v20);
  v49[18] = (char *)v49 - v21;
  __chkstk_darwin(v22);
  v49[4] = (char *)v49 - v23;
  __chkstk_darwin(v24);
  v49[7] = (char *)v49 - v25;
  __chkstk_darwin(v26);
  v49[14] = (char *)v49 - v27;
  __chkstk_darwin(v28);
  v49[13] = (char *)v49 - v29;
  __chkstk_darwin(v30);
  v49[21] = (char *)v49 - v31;
  __chkstk_darwin(v32);
  v49[3] = (char *)v49 - v33;
  __chkstk_darwin(v34);
  v49[6] = (char *)v49 - v35;
  __chkstk_darwin(v36);
  v49[9] = (char *)v49 - v37;
  __chkstk_darwin(v38);
  __chkstk_darwin(v39);
  v49[19] = (char *)v49 - v40;
  v41 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v41);
  v42 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v42);
  __chkstk_darwin(v43);
  __chkstk_darwin(v44);
  __chkstk_darwin(v45);
  __chkstk_darwin(v46);
  __chkstk_darwin(v47);
  v48 = *a1;
  sub_1002EDD58(*a1);
  __asm { BR              X9 }
}

uint64_t sub_1002EFEF0()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

void sub_1002EFF14()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  _BYTE *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t);
  int v31;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  id v47;
  void *v48;
  uint64_t v49;
  void *v50;
  id v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  void (*v71)(uint64_t, uint64_t);
  id v72;
  void *v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  void *v79;
  id v80;
  id v81;
  void *v82;
  id v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  void (*v102)(uint64_t, uint64_t);
  void *v103;
  int v104;

  *(_QWORD *)&v2 = swift_bridgeObjectRelease().n128_u64[0];
  v3 = *(_BYTE **)(v1 - 160);
  if ((*v3 & 1) == 0)
  {
    *v3 = 1;
    v4 = *(void **)(v1 - 128);
    v5 = objc_msgSend(v4, "list", v2);
    if (v5)
    {
      v6 = v5;
      v7 = objc_msgSend(v5, "identifier");

      if (v7)
      {
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v7);

        v8 = *(_QWORD *)(v1 - 184);
        v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
        v10 = v0;
        v11 = 0;
      }
      else
      {
        v8 = *(_QWORD *)(v1 - 184);
        v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
        v10 = v0;
        v11 = 1;
      }
      v14 = *(_QWORD *)(v1 - 136);
      *(_QWORD *)(v1 - 160) = v9;
      v9(v10, v11, 1, v14);
      v15 = *(_QWORD *)(v1 - 200);
      v16 = *(_QWORD *)(v1 - 248);
      v17 = *(_QWORD *)(v1 - 240);
      v18 = v0;
      v13 = *(_QWORD *)(v1 - 168);
      sub_1000A5CA8(v18, v13, (uint64_t *)&unk_100839C80);
    }
    else
    {
      v8 = *(_QWORD *)(v1 - 184);
      v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
      v13 = *(_QWORD *)(v1 - 168);
      v14 = *(_QWORD *)(v1 - 136);
      *(_QWORD *)(v1 - 160) = v12;
      v12(v13, 1, 1, v14);
      v15 = *(_QWORD *)(v1 - 200);
      v16 = *(_QWORD *)(v1 - 248);
      v17 = *(_QWORD *)(v1 - 240);
    }
    v19 = CKRecord.subscript.getter(1953720652, 0xE400000000000000);
    if (v19)
    {
      v20 = v19;
      v21 = objc_opt_self(CKReference);
      v22 = (void *)swift_dynamicCastObjCClass(v20, v21);
      if (!v22)
        swift_unknownObjectRelease(v20);
    }
    else
    {
      v22 = 0;
    }
    v23 = sub_100437D04(v22, v4);

    objc_msgSend(v4, "setList:", v23);
    v24 = objc_msgSend(v4, "list");
    if (v24)
    {
      v25 = v24;
      v26 = objc_msgSend(v24, "identifier");

      if (v26)
      {
        v27 = *(_QWORD *)(v1 - 272);
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

        v28 = 0;
      }
      else
      {
        v28 = 1;
        v27 = *(_QWORD *)(v1 - 272);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 - 160))(v27, v28, 1, v14);
      sub_1000A5CA8(v27, v16, (uint64_t *)&unk_100839C80);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 - 160))(v16, 1, 1, v14);
    }
    v29 = v17 + *(int *)(*(_QWORD *)(v1 - 144) + 48);
    sub_100008868(v16, v17, (uint64_t *)&unk_100839C80);
    sub_100008868(v13, v29, (uint64_t *)&unk_100839C80);
    v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    if (v30(v17, 1, v14) == 1)
    {
      sub_10000882C(v16, (uint64_t *)&unk_100839C80);
      v31 = v30(v29, 1, v14);
      if (v31 == 1)
        v32 = (uint64_t *)&unk_100839C80;
      else
        v32 = (uint64_t *)&unk_10083B370;
      if (v31 == 1)
        v33 = -1;
      else
        v33 = 0;
      *(_DWORD *)(v1 - 240) = v33;
    }
    else
    {
      v34 = *(_QWORD *)(v1 - 296);
      sub_100008868(v17, v34, (uint64_t *)&unk_100839C80);
      if (v30(v29, 1, v14) == 1)
      {
        sub_10000882C(v16, (uint64_t *)&unk_100839C80);
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v34, v14);
        *(_DWORD *)(v1 - 240) = 0;
        v32 = (uint64_t *)&unk_10083B370;
      }
      else
      {
        v35 = *(_QWORD *)(v1 - 256);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v35, v29, v14);
        v36 = sub_10009FC50((unint64_t *)&qword_10083B380, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v37 = v34;
        *(_DWORD *)(v1 - 240) = dispatch thunk of static Equatable.== infix(_:_:)(v34, v35, v14, v36);
        v38 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
        v39 = v35;
        v15 = *(_QWORD *)(v1 - 200);
        v38(v39, v14);
        v32 = (uint64_t *)&unk_100839C80;
        sub_10000882C(v16, (uint64_t *)&unk_100839C80);
        v38(v37, v14);
      }
    }
    v40 = *(_QWORD *)(v1 - 216);
    v41 = *(_QWORD *)(v1 - 208);
    sub_10000882C(v17, v32);
    v42 = objc_msgSend(v4, "parentReminder");
    v43 = CKRecord.subscript.getter(0x6552746E65726150, 0xEE007265646E696DLL);
    if (v43)
    {
      v44 = v43;
      v45 = objc_opt_self(CKReference);
      v46 = (void *)swift_dynamicCastObjCClass(v44, v45);
      if (!v46)
        swift_unknownObjectRelease(v44);
    }
    else
    {
      v46 = 0;
    }
    v47 = sub_1000C8F4C(v46);
    if (v47)
    {
      v48 = v47;
      v49 = objc_opt_self(REMCDReminder);
      v50 = (void *)swift_dynamicCastObjCClass(v48, v49);
      if (!v50)

    }
    else
    {
      v50 = 0;
    }

    objc_msgSend(v4, "setParentReminder:", v50);
    v51 = objc_msgSend(v4, "parentReminder");
    if (v51)
    {
      v52 = v51;
      v53 = objc_msgSend(v51, "identifier");

      if (v53)
      {
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v53);

        v54 = 0;
      }
      else
      {
        v54 = 1;
      }
      v55 = *(_QWORD *)(v1 - 192);
      v56 = *(_QWORD *)(v1 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v1 - 160))(v40, v54, 1, *(_QWORD *)(v1 - 136));
      sub_1000A5CA8(v40, v56, (uint64_t *)&unk_100839C80);
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v1 - 160))(*(_QWORD *)(v1 - 152), 1, 1, *(_QWORD *)(v1 - 136));
      v55 = *(_QWORD *)(v1 - 192);
    }
    *(_QWORD *)(v1 - 200) = v42;
    if (v42)
    {
      v57 = objc_msgSend(v42, "identifier");
      if (v57)
      {
        v58 = v57;
        v59 = *(_QWORD *)(v1 - 264);
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v57);

        v60 = 0;
      }
      else
      {
        v60 = 1;
        v59 = *(_QWORD *)(v1 - 264);
      }
      v61 = *(_QWORD *)(v1 - 136);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 - 160))(v59, v60, 1, v61);
      sub_1000A5CA8(v59, v41, (uint64_t *)&unk_100839C80);
    }
    else
    {
      v61 = *(_QWORD *)(v1 - 136);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 - 160))(v41, 1, 1, v61);
    }
    v62 = *(_QWORD *)(v1 - 152);
    v63 = v15 + *(int *)(*(_QWORD *)(v1 - 144) + 48);
    sub_100008868(v62, v15, (uint64_t *)&unk_100839C80);
    sub_100008868(v41, v63, (uint64_t *)&unk_100839C80);
    if (v30(v15, 1, v61) == 1)
    {
      sub_10000882C(v41, (uint64_t *)&unk_100839C80);
      sub_10000882C(v62, (uint64_t *)&unk_100839C80);
      if (v30(v63, 1, v61) == 1)
      {
        sub_10000882C(v15, (uint64_t *)&unk_100839C80);
        v64 = 0;
LABEL_57:
        v72 = objc_msgSend(v4, "parentReminder");
        if (v72
          && (v73 = v72, v74 = objc_msgSend(v72, "list"), v73, v74))
        {
          v75 = objc_msgSend(v74, "identifier");

          if (v75)
          {
            v76 = *(_QWORD *)(v1 - 312);
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v75);

            v77 = 0;
          }
          else
          {
            v77 = 1;
            v76 = *(_QWORD *)(v1 - 312);
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v1 - 160))(v76, v77, 1, *(_QWORD *)(v1 - 136));
          sub_1000A5CA8(v76, *(_QWORD *)(v1 - 176), (uint64_t *)&unk_100839C80);
        }
        else
        {
          (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v1 - 160))(*(_QWORD *)(v1 - 176), 1, 1, *(_QWORD *)(v1 - 136));
        }
        if ((*(_DWORD *)(v1 - 240) & 1) == 0)
        {
          v78 = objc_msgSend(v4, "parentReminder");
          if (v78)
          {
            v79 = v78;
            if ((objc_msgSend(v78, "ckNeedsInitialFetchFromCloud") & 1) == 0
              && (objc_msgSend(v79, "markedForDeletion") & 1) == 0)
            {
              v80 = objc_msgSend(v4, "list");
              objc_msgSend(v79, "setList:", v80);

            }
          }
        }
        v81 = objc_msgSend(v4, "parentReminder");
        *(_DWORD *)(v1 - 152) = v64;
        if (v81
          && (v82 = v81, v83 = objc_msgSend(v81, "list"), v82, v83))
        {
          v84 = objc_msgSend(v83, "identifier");

          if (v84)
          {
            v85 = *(_QWORD *)(v1 - 304);
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v84);

            v86 = 0;
            v88 = *(_QWORD *)(v1 - 232);
            v87 = *(_BYTE **)(v1 - 224);
            v89 = *(_QWORD *)(v1 - 136);
            v90 = *(_QWORD *)(v1 - 176);
          }
          else
          {
            v86 = 1;
            v88 = *(_QWORD *)(v1 - 232);
            v87 = *(_BYTE **)(v1 - 224);
            v89 = *(_QWORD *)(v1 - 136);
            v90 = *(_QWORD *)(v1 - 176);
            v85 = *(_QWORD *)(v1 - 304);
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 - 160))(v85, v86, 1, v89);
          sub_1000A5CA8(v85, v55, (uint64_t *)&unk_100839C80);
        }
        else
        {
          v89 = *(_QWORD *)(v1 - 136);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 - 160))(v55, 1, 1, v89);
          v88 = *(_QWORD *)(v1 - 232);
          v87 = *(_BYTE **)(v1 - 224);
          v90 = *(_QWORD *)(v1 - 176);
        }
        v91 = *(_DWORD *)(v1 - 240) ^ 1;
        v92 = v88 + *(int *)(*(_QWORD *)(v1 - 144) + 48);
        sub_100008868(v55, v88, (uint64_t *)&unk_100839C80);
        sub_100008868(v90, v92, (uint64_t *)&unk_100839C80);
        if (v30(v88, 1, v89) == 1)
        {
          sub_10000882C(v55, (uint64_t *)&unk_100839C80);
          v93 = v30(v92, 1, v89);
          v94 = *(_QWORD *)(v1 - 168);
          if (v93 == 1)
          {
            sub_10000882C(v88, (uint64_t *)&unk_100839C80);
            v95 = 0;
LABEL_84:
            v103 = *(void **)(v1 - 200);
            v104 = *(_DWORD *)(v1 - 152);
            sub_1002F19DC(*(void **)(v1 - 120), v103, v91 & 1, v95 & 1);

            sub_10000882C(v90, (uint64_t *)&unk_100839C80);
            sub_10000882C(v94, (uint64_t *)&unk_100839C80);
            *v87 = (*v87 | v91 | v104) & 1;
            return;
          }
        }
        else
        {
          v96 = *(_QWORD *)(v1 - 280);
          sub_100008868(v88, v96, (uint64_t *)&unk_100839C80);
          if (v30(v92, 1, v89) != 1)
          {
            v97 = *(_QWORD *)(v1 - 184);
            v98 = *(_QWORD *)(v1 - 256);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 32))(v98, v92, v89);
            v99 = sub_10009FC50((unint64_t *)&qword_10083B380, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v100 = v96;
            v101 = dispatch thunk of static Equatable.== infix(_:_:)(v96, v98, v89, v99);
            v102 = *(void (**)(uint64_t, uint64_t))(v97 + 8);
            v102(v98, v89);
            sub_10000882C(*(_QWORD *)(v1 - 192), (uint64_t *)&unk_100839C80);
            v102(v100, v89);
            sub_10000882C(v88, (uint64_t *)&unk_100839C80);
            v95 = v101 ^ 1;
            v94 = *(_QWORD *)(v1 - 168);
            goto LABEL_84;
          }
          sub_10000882C(v55, (uint64_t *)&unk_100839C80);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 184) + 8))(v96, v89);
          v94 = *(_QWORD *)(v1 - 168);
        }
        sub_10000882C(v88, (uint64_t *)&unk_10083B370);
        v95 = 1;
        goto LABEL_84;
      }
    }
    else
    {
      v65 = *(_QWORD *)(v1 - 288);
      sub_100008868(v15, v65, (uint64_t *)&unk_100839C80);
      if (v30(v63, 1, v61) != 1)
      {
        v66 = *(_QWORD *)(v1 - 184);
        v67 = v15;
        v68 = *(_QWORD *)(v1 - 256);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v68, v63, v61);
        v69 = sub_10009FC50((unint64_t *)&qword_10083B380, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v70 = dispatch thunk of static Equatable.== infix(_:_:)(v65, v68, v61, v69);
        v71 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
        v71(v68, v61);
        sub_10000882C(v41, (uint64_t *)&unk_100839C80);
        sub_10000882C(*(_QWORD *)(v1 - 152), (uint64_t *)&unk_100839C80);
        v71(v65, v61);
        v55 = *(_QWORD *)(v1 - 192);
        sub_10000882C(v67, (uint64_t *)&unk_100839C80);
        v64 = v70 ^ 1;
        goto LABEL_57;
      }
      sub_10000882C(v41, (uint64_t *)&unk_100839C80);
      sub_10000882C(*(_QWORD *)(v1 - 152), (uint64_t *)&unk_100839C80);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 184) + 8))(v65, v61);
    }
    sub_10000882C(v15, (uint64_t *)&unk_10083B370);
    v64 = 1;
    goto LABEL_57;
  }
}

void sub_1002F19DC(void *a1, void *a2, int a3, int a4)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  char **v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  double v65;
  id v66;
  void *v67;
  void *v68;
  id v69;
  void *v70;
  uint64_t v71;
  unint64_t v72;
  double v73;
  id v74;
  void *v75;
  id v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  id v81;
  id v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  void *v89;
  id v90;
  id v91;
  id v92;
  void *v93;
  id v94;
  id v95;
  uint64_t v96;
  void (*v97)(char *, uint64_t, uint64_t, uint64_t);
  void *v98;
  void *v99;
  uint64_t v100;
  id v101;
  void *v102;
  uint8_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int (*v108)(uint64_t, uint64_t, uint64_t);
  uint64_t v109;
  char v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  uint8_t *v114;
  const char *v115;
  id v116;
  char *v117;
  id v118;
  char *v119;
  id v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(char *, uint64_t, uint64_t, uint64_t);
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char v129;
  void (*v130)(char *, uint64_t);
  uint64_t v131;
  id v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int (*v138)(uint64_t, uint64_t, uint64_t);
  uint64_t v139;
  uint64_t v140;
  char *v141;
  NSObject *v142;
  os_log_type_t v143;
  uint8_t *v144;
  uint64_t v145;
  id v146;
  void (*v147)(char *, uint64_t, uint64_t);
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  void (*v153)(char *, uint64_t);
  NSObject *v154;
  os_log_type_t v155;
  _BOOL4 v156;
  uint8_t *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  id v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  id v169;
  id v170;
  NSObject *v171;
  os_log_type_t v172;
  uint8_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  id v178;
  NSObject *v179;
  os_log_type_t v180;
  uint8_t *v181;
  id v182;
  NSObject *v183;
  os_log_type_t v184;
  uint8_t *v185;
  uint64_t v186;
  NSObject *v187;
  os_log_type_t v188;
  uint8_t *v189;
  uint64_t v190;
  __n128 v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  NSObject *v201;
  os_log_type_t v202;
  uint8_t *v203;
  id v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  double v209;
  id v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int *v219;
  uint64_t v220;
  uint64_t v221;
  __n128 v222;
  void (**v223)(char *, uint64_t, uint64_t, __n128);
  char *v224;
  uint64_t v225;
  uint64_t v226;
  NSObject *v227;
  os_log_type_t v228;
  int v229;
  uint64_t v230;
  uint8_t *v231;
  __n128 v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint8_t *v239;
  id v240;
  void (**v241)(char *, uint64_t, uint64_t, __n128);
  __n128 v242;
  void (**v243)(char *, uint64_t, uint64_t, __n128);
  char *v244;
  uint64_t v245;
  id v246;
  NSObject *v247;
  os_log_type_t v248;
  uint8_t *v249;
  id v250;
  id v251;
  void *v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  id v256;
  char v257;
  double v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  id v262;
  NSObject *v263;
  os_log_type_t v264;
  uint8_t *v265;
  void *v266;
  uint64_t v267;
  id v268;
  id v269;
  id v270;
  id v271;
  id v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  id v278;
  id v279;
  NSObject *v280;
  int v281;
  _BOOL4 v282;
  uint64_t v283;
  uint8_t *v284;
  char **v285;
  _QWORD *v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  uint64_t v293;
  unint64_t v294;
  id v295;
  void *v296;
  id v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  id v306;
  char *v307;
  id v308;
  NSObject *v309;
  os_log_type_t v310;
  _BOOL4 v311;
  uint8_t *v312;
  id v313;
  _QWORD *v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  unint64_t v318;
  uint8_t *v319;
  char *v320;
  char **v321;
  uint64_t v322;
  uint64_t v323;
  id v324;
  uint64_t v325;
  uint64_t v326;
  NSObject *v327;
  os_log_type_t v328;
  uint8_t *v329;
  id v330;
  id v331;
  char *v332;
  char *v333;
  char *v334;
  id v335;
  void *v336;
  id v337;
  id v338;
  void (*v339)(uint64_t, uint64_t, uint64_t, char **);
  char *v340;
  id v341;
  id v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unsigned int (*v347)(uint64_t, uint64_t, char **);
  char *v348;
  uint64_t v349;
  char *v350;
  NSObject *v351;
  os_log_type_t v352;
  uint8_t *v353;
  id v354;
  _QWORD *v355;
  uint64_t v356;
  char *v357;
  uint64_t v358;
  char v359;
  char *v360;
  uint8_t *v361;
  char *v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  unint64_t v366;
  char *v367;
  id v368;
  void *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  id v373;
  void *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  Swift::String v379;
  id v380;
  void *v381;
  id v382;
  uint64_t v383;
  void *v384;
  void *v385;
  Swift::String v386;
  Swift::String v387;
  id v388;
  void *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  Swift::String v394;
  Swift::String v395;
  id v396;
  void *v397;
  id v398;
  void *v399;
  void *v400;
  Swift::String v401;
  Swift::String v402;
  id v403;
  void *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  Swift::String v408;
  Swift::String v409;
  void *v410;
  NSString v411;
  NSString v412;
  NSString v413;
  char v414;
  char *v415;
  id v416;
  id v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  NSObject *v424;
  os_log_type_t v425;
  uint8_t *v426;
  id v427;
  void *v428;
  id v429;
  double v430;
  id v431;
  void *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  NSObject *v437;
  os_log_type_t v438;
  uint8_t *v439;
  uint8_t *v440;
  uint64_t **v441;
  id v442;
  void *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  NSObject *v452;
  os_log_type_t v453;
  uint8_t *v454;
  uint8_t *v455;
  uint8_t *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  char *v461;
  char *v462;
  uint64_t v463;
  char *v464;
  char *v465;
  char *v466;
  char *v467;
  char *v468;
  uint64_t v469;
  uint64_t v470;
  char *v471;
  char *v472;
  char *v473;
  char *v474;
  char *v475;
  char *v476;
  uint64_t v477;
  char *v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  char *v482;
  char *v483;
  void *v484;
  void (**v485)(char *, uint64_t, uint64_t, __n128);
  uint64_t v486;
  uint8_t *v487;
  uint64_t v488;
  char *v489;
  uint64_t v490;
  int *v491;
  char *v492;
  uint64_t v493;
  id v494;
  char *v495;
  uint64_t v496;
  uint64_t v497;
  id v498;
  char v499[8];
  _QWORD *v500;
  uint64_t v501;
  id v502;
  unint64_t v503;
  uint64_t v504;
  void *v505;

  LODWORD(v489) = a4;
  LODWORD(v493) = a3;
  v494 = a2;
  v484 = a1;
  v5 = type metadata accessor for Logger(0);
  v485 = *(void (***)(char *, uint64_t, uint64_t, __n128))(v5 - 8);
  __chkstk_darwin(v5);
  v483 = (char *)&v459 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v464 = (char *)&v459 - v8;
  __chkstk_darwin(v9);
  v471 = (char *)&v459 - v10;
  __chkstk_darwin(v11);
  v472 = (char *)&v459 - v12;
  __chkstk_darwin(v13);
  v473 = (char *)&v459 - v14;
  v488 = type metadata accessor for URL(0);
  v486 = *(_QWORD *)(v488 - 8);
  __chkstk_darwin(v488);
  v468 = (char *)&v459 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v482 = (char *)&v459 - v17;
  __chkstk_darwin(v18);
  v474 = (char *)&v459 - v19;
  v480 = sub_10001A630((uint64_t *)&unk_100844920);
  __chkstk_darwin(v480);
  v469 = (uint64_t)&v459 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v477 = (uint64_t)&v459 - v22;
  v23 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v23);
  v479 = (uint64_t)&v459 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v475 = (char *)&v459 - v26;
  __chkstk_darwin(v27);
  v466 = (char *)&v459 - v28;
  __chkstk_darwin(v29);
  v467 = (char *)&v459 - v30;
  __chkstk_darwin(v31);
  v465 = (char *)&v459 - v32;
  __chkstk_darwin(v33);
  v470 = (uint64_t)&v459 - v34;
  __chkstk_darwin(v35);
  v481 = (uint64_t)&v459 - v36;
  __chkstk_darwin(v37);
  v476 = (char *)&v459 - v38;
  v39 = type metadata accessor for UUID(0);
  v40 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v478 = (char *)&v459 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v491 = (int *)sub_10001A630((uint64_t *)&unk_10083B370);
  __chkstk_darwin(v491);
  v496 = (uint64_t)&v459 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v43);
  v45 = (char *)&v459 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  v487 = (uint8_t *)&v459 - v47;
  __chkstk_darwin(v48);
  v495 = (char *)&v459 - v49;
  __chkstk_darwin(v50);
  v52 = (char *)&v459 - v51;
  __chkstk_darwin(v53);
  v492 = (char *)&v459 - v54;
  if (qword_100837118 != -1)
    swift_once(&qword_100837118, sub_1002ED77C);
  v490 = v5;
  v55 = sub_10001AAA8(v5, (uint64_t)qword_1008448A0);
  v498 = v4;
  v56 = Logger.logObject.getter(v498);
  v57 = static os_log_type_t.default.getter(v56);
  v58 = os_log_type_enabled(v56, v57);
  v59 = &selRef_isConcealed;
  v497 = v55;
  if (v58)
  {
    v459 = v39;
    v461 = v52;
    v462 = v45;
    v463 = v40;
    v60 = swift_slowAlloc(32, -1);
    v460 = swift_slowAlloc(96, -1);
    v504 = v460;
    *(_DWORD *)v60 = 136315650;
    v61 = v498;
    v502 = objc_msgSend(v498, "remObjectID");
    v62 = sub_10001A630((uint64_t *)&unk_100844910);
    v63 = String.init<A>(describing:)(&v502, v62);
    v502 = (id)sub_10001A820(v63, v64, &v504);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v502, &v503);

    *(_QWORD *)&v65 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v60 + 12) = 2080;
    v66 = objc_msgSend(v61, "parentReminder", v65);
    if (v66)
    {
      v67 = v66;
      v68 = v498;
      v69 = objc_msgSend(v66, "remObjectID");

    }
    else
    {
      v68 = v498;
      v69 = 0;
    }
    v502 = v69;
    v71 = String.init<A>(describing:)(&v502, v62);
    v502 = (id)sub_10001A820(v71, v72, &v504);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v502, &v503);

    *(_QWORD *)&v73 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v60 + 22) = 2080;
    v74 = objc_msgSend(v68, "list", v73);
    if (v74)
    {
      v75 = v74;
      v76 = objc_msgSend(v74, "remObjectID");

    }
    else
    {
      v76 = 0;
    }
    v39 = v459;
    v502 = v76;
    v77 = String.init<A>(describing:)(&v502, v62);
    v502 = (id)sub_10001A820(v77, v78, &v504);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v502, &v503);
    v79 = v498;

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "validateAndFixupReminderTree BEGIN {objectID: %s, parentID: %s, listID: %s}", (uint8_t *)v60, 0x20u);
    v80 = v460;
    swift_arrayDestroy(v460, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v80, -1, -1);
    swift_slowDealloc(v60, -1, -1);

    v59 = &selRef_isConcealed;
    v40 = v463;
    v45 = v462;
    v52 = v461;
  }
  else
  {

    v70 = v498;
  }
  v81 = objc_msgSend(v498, "parentReminder");

  if (!v81)
  {
    v82 = objc_msgSend(v498, v59[106]);

    if (!v82)
    {
      v112 = Logger.logObject.getter(v83);
      v113 = static os_log_type_t.default.getter(v112);
      if (os_log_type_enabled(v112, v113))
      {
        v114 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v114 = 0;
        v115 = "validateAndFixupReminderTree: Reminder is detached from lists. Nothing needs to be done.";
        goto LABEL_50;
      }
      goto LABEL_51;
    }
  }
  v84 = objc_msgSend(v498, v59[106]);

  if (!v84)
  {
    v86 = Logger.logObject.getter(v85);
    v87 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v86, v87))
    {
      v88 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v88 = 0;
      _os_log_impl((void *)&_mh_execute_header, v86, v87, "validateAndFixupReminderTree: Reminder has parent but no list. Assuming self.list = parent.list.", v88, 2u);
      swift_slowDealloc(v88, -1, -1);
    }

    v89 = v498;
    v90 = objc_msgSend(v498, "parentReminder");
    v91 = objc_msgSend(v90, v59[106]);

    objc_msgSend(v89, "setList:", v91);
  }
  v92 = objc_msgSend(v498, "parentReminder");
  if (v92)
  {
    v93 = v92;
    v94 = objc_msgSend(v92, "identifier");

    v95 = v494;
    v96 = (uint64_t)v492;
    if (v94)
    {
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v94);

      v97 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56);
      v97(v52, 0, 1, v39);
    }
    else
    {
      v97 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56);
      v97(v52, 1, 1, v39);
    }
    sub_1000A5CA8((uint64_t)v52, v96, (uint64_t *)&unk_100839C80);
    v98 = v95;
    if (v95)
      goto LABEL_25;
LABEL_22:
    v99 = v98;
    v100 = (uint64_t)v495;
    v97(v495, 1, 1, v39);
    goto LABEL_29;
  }
  v97 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56);
  v96 = (uint64_t)v492;
  v97(v492, 1, 1, v39);
  v98 = v494;
  if (!v494)
    goto LABEL_22;
LABEL_25:
  v99 = v98;
  v101 = objc_msgSend(v98, "identifier");
  if (v101)
  {
    v102 = v101;
    v103 = v487;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v101);

    v104 = 0;
    v100 = (uint64_t)v495;
  }
  else
  {
    v104 = 1;
    v100 = (uint64_t)v495;
    v103 = v487;
  }
  v97((char *)v103, v104, 1, v39);
  sub_1000A5CA8((uint64_t)v103, v100, (uint64_t *)&unk_100839C80);
LABEL_29:
  v105 = v496;
  v106 = v496 + v491[12];
  sub_100008868(v96, v496, (uint64_t *)&unk_100839C80);
  v107 = v105;
  sub_100008868(v100, v106, (uint64_t *)&unk_100839C80);
  v108 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
  if (v108(v107, 1, v39) == 1)
  {
    sub_10000882C(v100, (uint64_t *)&unk_100839C80);
    v107 = v496;
    sub_10000882C(v96, (uint64_t *)&unk_100839C80);
    if (v108(v106, 1, v39) == 1)
    {
      v109 = sub_10000882C(v107, (uint64_t *)&unk_100839C80);
      v110 = v493;
      if ((v493 & 1) == 0)
        goto LABEL_46;
      goto LABEL_36;
    }
LABEL_35:
    sub_10000882C(v107, (uint64_t *)&unk_10083B370);
    v110 = v493;
    goto LABEL_36;
  }
  sub_100008868(v107, (uint64_t)v45, (uint64_t *)&unk_100839C80);
  if (v108(v106, 1, v39) == 1)
  {
    sub_10000882C((uint64_t)v495, (uint64_t *)&unk_100839C80);
    sub_10000882C(v96, (uint64_t *)&unk_100839C80);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v45, v39);
    goto LABEL_35;
  }
  v127 = v478;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v478, v106, v39);
  v128 = sub_10009FC50((unint64_t *)&qword_10083B380, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v129 = dispatch thunk of static Equatable.== infix(_:_:)(v45, v127, v39, v128);
  v130 = *(void (**)(char *, uint64_t))(v40 + 8);
  v130(v127, v39);
  sub_10000882C((uint64_t)v495, (uint64_t *)&unk_100839C80);
  sub_10000882C(v96, (uint64_t *)&unk_100839C80);
  v130(v45, v39);
  v109 = sub_10000882C(v107, (uint64_t *)&unk_100839C80);
  v110 = v493;
  if ((v129 & 1) != 0 && (v493 & 1) == 0)
  {
LABEL_46:
    v112 = Logger.logObject.getter(v109);
    v113 = static os_log_type_t.default.getter(v112);
    if (os_log_type_enabled(v112, v113))
    {
      v114 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v114 = 0;
      v115 = "validateAndFixupReminderTree: Neither parent nor list is changed. Nothing needs to be done.";
      goto LABEL_50;
    }
    goto LABEL_51;
  }
LABEL_36:
  v111 = sub_1002FC20C(v99, v110 & 1, v489 & 1);
  if ((v111 & 1) != 0)
  {
    v112 = Logger.logObject.getter(v111);
    v113 = static os_log_type_t.default.getter(v112);
    if (os_log_type_enabled(v112, v113))
    {
      v114 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v114 = 0;
      v115 = "validateAndFixupReminderTree: Current reminder tree looks good. Skipping the fixup.";
LABEL_50:
      _os_log_impl((void *)&_mh_execute_header, v112, v113, v115, v114, 2u);
      swift_slowDealloc(v114, -1, -1);
    }
LABEL_51:

LABEL_232:
    sub_1002FCF40(v498);
    return;
  }
  v116 = objc_msgSend(v498, "parentReminder");
  v117 = (char *)objc_msgSend(v116, "parentReminder");

  if (!v117)
    v117 = (char *)objc_msgSend(v498, "parentReminder");
  v118 = objc_msgSend(v117, "parentReminder");

  v495 = v117;
  if (v118)
  {
    if (v117)
    {
      v119 = v117;
      v120 = objc_msgSend(v119, "objectID");
      v121 = objc_msgSend(v120, "URIRepresentation");

      v122 = (uint64_t)v476;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v121);

      v123 = v486;
      v124 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v486 + 56);
      v125 = (char *)v122;
      v126 = 0;
    }
    else
    {
      v123 = v486;
      v124 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v486 + 56);
      v122 = (uint64_t)v476;
      v125 = v476;
      v126 = 1;
    }
    v131 = v488;
    v124(v125, v126, 1, v488);
    v132 = objc_msgSend(v498, "objectID");
    v133 = objc_msgSend(v132, "URIRepresentation");

    v134 = v481;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v133);

    v124((char *)v134, 0, 1, v131);
    v135 = v477;
    v136 = v477 + *(int *)(v480 + 48);
    sub_100008868(v122, v477, (uint64_t *)&unk_100839C70);
    sub_100008868(v134, v136, (uint64_t *)&unk_100839C70);
    v137 = v123;
    v138 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v123 + 48);
    if (v138(v135, 1, v131) == 1)
    {
      sub_10000882C(v134, (uint64_t *)&unk_100839C70);
      sub_10000882C(v122, (uint64_t *)&unk_100839C70);
      if (v138(v136, 1, v488) == 1)
      {
        v139 = sub_10000882C(v135, (uint64_t *)&unk_100839C70);
LABEL_64:
        v154 = Logger.logObject.getter(v139);
        v155 = static os_log_type_t.error.getter();
        v156 = os_log_type_enabled(v154, v155);
        v99 = v494;
        if (v156)
        {
          v157 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v157 = 0;
          _os_log_impl((void *)&_mh_execute_header, v154, v155, "validateAndFixupReminderTree: Detected a loop in the new reminder tree. Multiple client may have raced. Going to fix the tree locally.", v157, 2u);
          swift_slowDealloc(v157, -1, -1);
        }

        goto LABEL_70;
      }
    }
    else
    {
      v140 = v470;
      sub_100008868(v135, v470, (uint64_t *)&unk_100839C70);
      if (v138(v136, 1, v488) != 1)
      {
        v147 = *(void (**)(char *, uint64_t, uint64_t))(v123 + 32);
        v148 = v122;
        v149 = v474;
        v150 = v488;
        v147(v474, v136, v488);
        v151 = sub_10009FC50(&qword_100844730, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v152 = dispatch thunk of static Equatable.== infix(_:_:)(v140, v149, v150, v151);
        v153 = *(void (**)(char *, uint64_t))(v137 + 8);
        v153(v149, v150);
        sub_10000882C(v481, (uint64_t *)&unk_100839C70);
        sub_10000882C(v148, (uint64_t *)&unk_100839C70);
        v153((char *)v140, v150);
        v139 = sub_10000882C(v135, (uint64_t *)&unk_100839C70);
        if ((v152 & 1) != 0)
          goto LABEL_64;
LABEL_59:
        v141 = v117;
        v142 = Logger.logObject.getter(v141);
        v143 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v142, v143))
        {
          v144 = (uint8_t *)swift_slowAlloc(12, -1);
          v145 = swift_slowAlloc(32, -1);
          v504 = v145;
          *(_DWORD *)v144 = 136315138;
          if (v117)
            v146 = objc_msgSend(v141, "remObjectID");
          else
            v146 = 0;
          v502 = v146;
          v158 = sub_10001A630((uint64_t *)&unk_100844910);
          v159 = Optional.descriptionOrNil.getter(v158);
          v161 = v160;

          v502 = (id)sub_10001A820(v159, v161, &v504);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v502, &v503);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v142, v143, "validateAndFixupReminderTree: There seems to be a multi-layer subtask tree in the database because the new root had both parent and children. Totally unexpected because the save request should have been rejected. {rootID: %s}", v144, 0xCu);
          swift_arrayDestroy(v145, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v145, -1, -1);
          swift_slowDealloc(v144, -1, -1);

        }
        else
        {

        }
        v99 = v494;
        goto LABEL_70;
      }
      sub_10000882C(v481, (uint64_t *)&unk_100839C70);
      sub_10000882C(v122, (uint64_t *)&unk_100839C70);
      (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v140, v488);
    }
    sub_10000882C(v135, (uint64_t *)&unk_100844920);
    goto LABEL_59;
  }
LABEL_70:
  if (!v99)
  {
    v505 = &_swiftEmptyDictionarySingleton;
    v169 = v495;
    if (!v495)
      goto LABEL_90;
    goto LABEL_87;
  }
  v162 = objc_msgSend(v498, "children");
  if (v162)
  {
    v163 = v162;
    v164 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    v165 = sub_1000E51DC((unint64_t *)&qword_1008448D0, (unint64_t *)&qword_10083AE90, off_1007D6708, (uint64_t)&protocol conformance descriptor for NSObject);
    v166 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v163, v164, v165);

    if ((v166 & 0xC000000000000001) != 0)
    {
      v167 = v166 < 0 ? v166 : v166 & 0xFFFFFFFFFFFFFF8;
      v168 = __CocoaSet.count.getter(v167);
    }
    else
    {
      v168 = *(_QWORD *)(v166 + 16);
    }
    swift_bridgeObjectRelease();
    if (v168)
    {
      v170 = v498;
      v171 = Logger.logObject.getter(v170);
      v172 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v171, v172))
      {
        v173 = (uint8_t *)swift_slowAlloc(12, -1);
        v174 = swift_slowAlloc(32, -1);
        v504 = v174;
        *(_DWORD *)v173 = 136315138;
        v502 = objc_msgSend(v170, "remObjectID");
        v175 = sub_10001A630((uint64_t *)&unk_100844910);
        v176 = String.init<A>(describing:)(&v502, v175);
        v502 = (id)sub_10001A820(v176, v177, &v504);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v502, &v503);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v171, v172, "validateAndFixupReminderTree: There seems to be a multi-layer subtask tree in the database because the current reminder had both parent and children. Totally unexpected because the save request should have been rejected. {objectID: %s}", v173, 0xCu);
        swift_arrayDestroy(v174, 1, (char *)&type metadata for Any + 8);
        v99 = v494;
        swift_slowDealloc(v174, -1, -1);
        swift_slowDealloc(v173, -1, -1);

      }
      else
      {

      }
    }
  }
  v505 = &_swiftEmptyDictionarySingleton;
  v178 = v99;
  v179 = Logger.logObject.getter(v178);
  v180 = static os_log_type_t.default.getter(v179);
  if (os_log_type_enabled(v179, v180))
  {
    v181 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v181 = 0;
    _os_log_impl((void *)&_mh_execute_header, v179, v180, "validateAndFixupReminderTree: Reminder has old root.", v181, 2u);
    swift_slowDealloc(v181, -1, -1);
  }

  sub_1002ED80C(v178);
  v169 = v495;
  if (v495)
  {
LABEL_87:
    v182 = v169;
    v183 = Logger.logObject.getter(v182);
    v184 = static os_log_type_t.default.getter(v183);
    if (os_log_type_enabled(v183, v184))
    {
      v185 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v185 = 0;
      _os_log_impl((void *)&_mh_execute_header, v183, v184, "validateAndFixupReminderTree: Reminder has new root.", v185, 2u);
      swift_slowDealloc(v185, -1, -1);
    }

    sub_1002ED80C(v182);
  }
LABEL_90:
  sub_1002ED80C(v498);
  v187 = Logger.logObject.getter(v186);
  v188 = static os_log_type_t.default.getter(v187);
  if (os_log_type_enabled(v187, v188))
  {
    v189 = (uint8_t *)swift_slowAlloc(12, -1);
    v190 = swift_slowAlloc(32, -1);
    v504 = v190;
    *(_DWORD *)v189 = 136446210;
    swift_beginAccess(&v505, v499, 0, 0);
    v191 = swift_bridgeObjectRetain(v505);
    v192 = sub_1001E927C(v191);
    swift_bridgeObjectRelease();
    v193 = Array.description.getter(v192, &type metadata for String);
    v195 = v194;
    swift_release(v192);
    v502 = (id)sub_10001A820(v193, v195, &v504);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v502, &v503);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v187, v188, "validateAndFixupReminderTree {potentiallyConnectedReminders: %{public}s}", v189, 0xCu);
    swift_arrayDestroy(v190, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v190, -1, -1);
    swift_slowDealloc(v189, -1, -1);
  }

  v196 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  swift_beginAccess(&v505, &v504, 0, 0);
  swift_bridgeObjectRetain(v505);
  v493 = v196;
  sub_1002FD290(v197, v484);
  v199 = v198;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(v199);
  v201 = Logger.logObject.getter(v200);
  v202 = static os_log_type_t.default.getter(v201);
  if (os_log_type_enabled(v201, v202))
  {
    v203 = (uint8_t *)swift_slowAlloc(12, -1);
    v204 = (id)swift_slowAlloc(32, -1);
    v502 = v204;
    *(_DWORD *)v203 = 136446210;
    swift_bridgeObjectRetain(v199);
    v206 = Dictionary.description.getter(v205, &type metadata for String, &type metadata for String, &protocol witness table for String);
    v208 = v207;
    swift_bridgeObjectRelease();
    v500 = (_QWORD *)sub_10001A820(v206, v208, (uint64_t *)&v502);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v500, &v501);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v201, v202, "validateAndFixupReminderTree {rootMap: %{public}s}", v203, 0xCu);
    swift_arrayDestroy(v204, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v204, -1, -1);
    swift_slowDealloc(v203, -1, -1);

  }
  else
  {

    *(_QWORD *)&v209 = swift_bridgeObjectRelease().n128_u64[0];
  }
  v210 = objc_msgSend(v498, "ckIdentifier", v209);
  if (!v210)
    goto LABEL_102;
  v211 = v210;
  v212 = static String._unconditionallyBridgeFromObjectiveC(_:)(v210);
  v214 = v213;

  swift_bridgeObjectRetain(v214);
  v215 = sub_1002B18D4(v212, v214, v199);
  v217 = v216;
  swift_bridgeObjectRelease();
  if (!v217)
  {
    swift_bridgeObjectRelease();
    goto LABEL_102;
  }
  swift_beginAccess(&v505, &v502, 32, 0);
  v218 = (uint64_t)v505;
  swift_bridgeObjectRetain(v217);
  v219 = (int *)sub_1002B18C4(v215, v217, v218);
  swift_bridgeObjectRelease();
  v491 = v219;
  if (!v219)
  {
    swift_endAccess(&v502);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_102:
    v242 = swift_bridgeObjectRelease();
    v243 = v485;
    v244 = v483;
    v245 = v490;
    v485[2](v483, v497, v490, v242);
    v246 = v498;
    v247 = Logger.logObject.getter(v246);
    v248 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v247, v248))
    {
      v249 = (uint8_t *)swift_slowAlloc(12, -1);
      v250 = (id)swift_slowAlloc(32, -1);
      v502 = v250;
      *(_DWORD *)v249 = 136446210;
      v251 = objc_msgSend(v246, "ckIdentifier");
      if (v251)
      {
        v252 = v251;
        v253 = static String._unconditionallyBridgeFromObjectiveC(_:)(v251);
        v255 = v254;

      }
      else
      {
        v253 = 7104878;
        v255 = 0xE300000000000000;
      }
      v256 = v495;
      v500 = (_QWORD *)sub_10001A820(v253, v255, (uint64_t *)&v502);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v500, &v501);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v247, v248, "validateAndFixupReminderTree: Can't resolve the root of the reminder tree. {ckIdentifier: %{public}s}", v249, 0xCu);
      swift_arrayDestroy(v250, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v250, -1, -1);
      swift_slowDealloc(v249, -1, -1);

      ((void (*)(char *, uint64_t))v485[1])(v483, v490);
    }
    else
    {

      ((void (*)(char *, uint64_t))v243[1])(v244, v245);
    }
    goto LABEL_231;
  }
  v496 = v212;
  swift_endAccess(&v502);
  swift_bridgeObjectRetain(v217);
  swift_bridgeObjectRetain(v218);
  v221 = sub_1003000F8(v220, v199, v215, v217);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v222 = swift_bridgeObjectRelease();
  v223 = v485;
  v224 = v473;
  v225 = v490;
  v492 = (char *)v485[2];
  ((void (*)(char *, uint64_t, uint64_t, __n128))v492)(v473, v497, v490, v222);
  v226 = swift_retain_n(v221);
  v227 = Logger.logObject.getter(v226);
  v228 = static os_log_type_t.default.getter(v227);
  v229 = v228;
  if (os_log_type_enabled(v227, v228))
  {
    v230 = swift_slowAlloc(12, -1);
    LODWORD(v489) = v229;
    v231 = (uint8_t *)v230;
    v494 = (id)swift_slowAlloc(32, -1);
    v502 = v494;
    v487 = v231;
    *(_DWORD *)v231 = 136446210;
    v483 = (char *)(v231 + 4);
    v232 = swift_bridgeObjectRetain(v221);
    v233 = sub_1001E927C(v232);
    swift_release(v221);
    v234 = v221;
    v235 = Array.description.getter(v233, &type metadata for String);
    v237 = v236;
    swift_release(v233);
    v238 = v235;
    v221 = v234;
    v500 = (_QWORD *)sub_10001A820(v238, v237, (uint64_t *)&v502);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v500, &v501);
    swift_release(v234);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v239 = v487;
    _os_log_impl((void *)&_mh_execute_header, v227, (os_log_type_t)v489, "validateAndFixupReminderTree: {allConnectedReminders: %{public}s}", v487, 0xCu);
    v240 = v494;
    swift_arrayDestroy(v494, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v240, -1, -1);
    swift_slowDealloc(v239, -1, -1);

    v241 = (void (**)(char *, uint64_t, uint64_t, __n128))v485[1];
    ((void (*)(char *, uint64_t))v241)(v473, v490);
  }
  else
  {

    swift_release(v221);
    swift_bridgeObjectRelease();
    v241 = (void (**)(char *, uint64_t, uint64_t, __n128))v223[1];
    ((void (*)(char *, uint64_t))v241)(v224, v225);
  }
  if (v496 == v215 && v217 == v214)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v257 = _stringCompareWithSmolCheck(_:_:expecting:)(v496, v214, v215, v217, 0);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v258 = swift_bridgeObjectRelease().n128_u64[0];
    if ((v257 & 1) == 0)
    {
      v262 = objc_msgSend(v491, "ckParentReminderIdentifier", v258);
      v259 = v472;
      if (v262)
      {

        goto LABEL_117;
      }
LABEL_121:
      v269 = v491;
      goto LABEL_123;
    }
  }
  sub_1002EE03C();
  v259 = v472;
  if (!v260)
    goto LABEL_121;
  swift_bridgeObjectRelease();
LABEL_117:
  v263 = Logger.logObject.getter(v261);
  v264 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v263, v264))
  {
    v265 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v265 = 0;
    _os_log_impl((void *)&_mh_execute_header, v263, v264, "validateAndFixupReminderTree: Detected a loop in reminder tree in CK server data. Selecting a stable root.", v265, 2u);
    swift_slowDealloc(v265, -1, -1);
  }

  sub_1002ED144(v221);
  if (v267)
  {
    v268 = v266;
    swift_bridgeObjectRelease();
    goto LABEL_124;
  }
  v269 = v498;
LABEL_123:
  v268 = v269;
LABEL_124:
  v270 = v268;
  v271 = objc_msgSend(v270, "objectID");
  v272 = objc_msgSend(v271, "URIRepresentation");

  v273 = v482;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v272);

  __chkstk_darwin(v274);
  *(&v459 - 2) = (uint64_t)v273;
  sub_100247474((uint64_t (*)(id *))sub_1003004E4, (uint64_t)(&v459 - 4), v221);
  v276 = v275;
  v484 = 0;
  v277 = v490;
  ((void (*)(char *, uint64_t, uint64_t))v492)(v259, v497, v490);
  v278 = v270;
  swift_bridgeObjectRetain_n(v276, 2);
  v279 = v278;
  v280 = Logger.logObject.getter(v279);
  v281 = static os_log_type_t.default.getter(v280);
  v282 = os_log_type_enabled(v280, (os_log_type_t)v281);
  v496 = v276;
  v485 = v241;
  if (v282)
  {
    LODWORD(v494) = v281;
    v283 = swift_slowAlloc(22, -1);
    v489 = (char *)swift_slowAlloc(64, -1);
    v502 = v489;
    *(_DWORD *)v283 = 136315394;
    v284 = (uint8_t *)(v283 + 4);
    v285 = &selRef_isConcealed;
    v286 = objc_msgSend(v279, "remObjectID");
    v500 = v286;
    v487 = (uint8_t *)sub_10001A630((uint64_t *)&unk_100844910);
    v287 = Optional.descriptionOrNil.getter(v487);
    v289 = v288;

    v500 = (_QWORD *)sub_10001A820(v287, v289, (uint64_t *)&v502);
    v290 = v496;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v500, &v501);

    swift_bridgeObjectRelease();
    *(_WORD *)(v283 + 12) = 2082;
    if ((unint64_t)v290 >> 62)
    {
      if (v290 < 0)
        v458 = v290;
      else
        v458 = v290 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v290);
      v291 = _CocoaArrayWrapper.endIndex.getter(v458);
      swift_bridgeObjectRelease();
    }
    else
    {
      v291 = *(_QWORD *)((v290 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v292 = _swiftEmptyArrayStorage;
    if (v291)
    {
      v500 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v291);
      if (v291 < 0)
      {
        __break(1u);
        goto LABEL_242;
      }
      v293 = 0;
      v294 = v496 & 0xC000000000000001;
      do
      {
        if (v294)
          v295 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v293, v496);
        else
          v295 = *(id *)(v496 + 8 * v293 + 32);
        v296 = v295;
        ++v293;
        v297 = objc_msgSend(v295, "remObjectID");

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v298);
        v299 = v500[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v299);
        v300 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v299, v297);
        specialized ContiguousArray._endMutation()(v300);
      }
      while (v291 != v293);
      v292 = v500;
    }
    v303 = Array.description.getter(v292, v487);
    v305 = v304;
    swift_bridgeObjectRelease();
    v500 = (_QWORD *)sub_10001A820(v303, v305, (uint64_t *)&v502);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v500, &v501);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v280, (os_log_type_t)v494, "validateAndFixupReminderTree {resolvedRoot: %s, childReminders: %{public}s}", (uint8_t *)v283, 0x16u);
    v306 = v489;
    swift_arrayDestroy(v489, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v306, -1, -1);
    swift_slowDealloc(v283, -1, -1);

    v301 = v472;
    v277 = v490;
    v302 = v490;
    v241 = v485;
  }
  else
  {

    swift_bridgeObjectRelease_n(v276, 2);
    v301 = v259;
    v302 = v277;
  }
  ((void (*)(char *, uint64_t))v241)(v301, v302);
  v307 = v471;
  ((void (*)(char *, uint64_t, uint64_t))v492)(v471, v497, v277);
  v308 = v279;
  v309 = Logger.logObject.getter(v308);
  v310 = static os_log_type_t.default.getter(v309);
  v311 = os_log_type_enabled(v309, v310);
  v494 = v308;
  if (v311)
  {
    v312 = (uint8_t *)swift_slowAlloc(12, -1);
    v313 = (id)swift_slowAlloc(32, -1);
    v502 = v313;
    *(_DWORD *)v312 = 136315138;
    v489 = (char *)(v312 + 4);
    v314 = objc_msgSend(v494, "remObjectID");
    v500 = v314;
    v315 = sub_10001A630((uint64_t *)&unk_100844910);
    v316 = Optional.descriptionOrNil.getter(v315);
    v318 = v317;

    v500 = (_QWORD *)sub_10001A820(v316, v318, (uint64_t *)&v502);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v500, &v501);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v309, v310, "validateAndFixupReminderTree: Going to update root. {objectID: %s}", v312, 0xCu);
    swift_arrayDestroy(v313, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v313, -1, -1);
    v319 = v312;
    v308 = v494;
    swift_slowDealloc(v319, -1, -1);

    v320 = v471;
  }
  else
  {

    v320 = v307;
  }
  ((void (*)(char *, uint64_t))v241)(v320, v277);
  v285 = (char **)v488;
  v321 = &selRef_isConcealed;
  v322 = (uint64_t)v466;
  v323 = (uint64_t)v465;
  v324 = objc_msgSend(v308, "parentReminder");

  v326 = (uint64_t)v467;
  if (v324)
  {
    v327 = Logger.logObject.getter(v325);
    v328 = static os_log_type_t.default.getter(v327);
    if (os_log_type_enabled(v327, v328))
    {
      v329 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v329 = 0;
      _os_log_impl((void *)&_mh_execute_header, v327, v328, "validateAndFixupReminderTree: ...Updated {root.parent: nil}", v329, 2u);
      swift_slowDealloc(v329, -1, -1);
    }

    objc_msgSend(v308, "setParentReminder:", 0);
  }
  v489 = (char *)objc_msgSend(v498, "list");
  if (!v489)
    v489 = (char *)objc_msgSend(v308, "list");
  v330 = objc_msgSend(v498, "objectID");
  v331 = objc_msgSend(v330, "URIRepresentation");

  v332 = v474;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v331);

  LOBYTE(v330) = static URL.== infix(_:_:)(v482, v332);
  v487 = *(uint8_t **)(v486 + 8);
  ((void (*)(char *, char **))v487)(v332, v285);
  if ((v330 & 1) != 0 || (objc_msgSend(v308, "ckNeedsInitialFetchFromCloud") & 1) == 0)
  {
    if ((objc_msgSend(v308, "markedForDeletion") & 1) != 0)
    {
      v333 = 0;
    }
    else
    {
      v333 = v489;
      v334 = v489;
    }
    v335 = objc_msgSend(v494, "list");
    if (v335)
    {
      v336 = v335;
      v337 = objc_msgSend(v335, "objectID");
      v338 = objc_msgSend(v337, "URIRepresentation");

      static URL._unconditionallyBridgeFromObjectiveC(_:)(v338);
      v339 = *(void (**)(uint64_t, uint64_t, uint64_t, char **))(v486 + 56);
      v339(v323, 0, 1, v285);
    }
    else
    {
      v339 = *(void (**)(uint64_t, uint64_t, uint64_t, char **))(v486 + 56);
      v339(v323, 1, 1, v285);
    }
    if (v333)
    {
      v340 = v333;
      v341 = objc_msgSend(v340, "objectID");
      v342 = objc_msgSend(v341, "URIRepresentation");

      static URL._unconditionallyBridgeFromObjectiveC(_:)(v342);
      v343 = 0;
    }
    else
    {
      v343 = 1;
    }
    v339(v326, v343, 1, v285);
    v344 = v469;
    v345 = v469 + *(int *)(v480 + 48);
    sub_100008868(v323, v469, (uint64_t *)&unk_100839C70);
    v346 = v344;
    sub_100008868(v326, v345, (uint64_t *)&unk_100839C70);
    v347 = *(unsigned int (**)(uint64_t, uint64_t, char **))(v486 + 48);
    if (v347(v346, 1, v285) == 1)
    {
      sub_10000882C(v326, (uint64_t *)&unk_100839C70);
      v346 = v469;
      sub_10000882C(v323, (uint64_t *)&unk_100839C70);
      v321 = &selRef_isConcealed;
      if (v347(v345, 1, v285) == 1)
      {
        sub_10000882C(v346, (uint64_t *)&unk_100839C70);
LABEL_168:
        v350 = v333;
LABEL_201:

        goto LABEL_202;
      }
    }
    else
    {
      sub_100008868(v346, v322, (uint64_t *)&unk_100839C70);
      v321 = &selRef_isConcealed;
      if (v347(v345, 1, v285) != 1)
      {
        v356 = v322;
        v357 = v474;
        (*(void (**)(char *, uint64_t, char **))(v486 + 32))(v474, v345, v285);
        v358 = sub_10009FC50(&qword_100844730, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v359 = dispatch thunk of static Equatable.== infix(_:_:)(v356, v357, v285, v358);
        v360 = v357;
        v361 = v487;
        ((void (*)(char *, char **))v487)(v360, v285);
        sub_10000882C(v326, (uint64_t *)&unk_100839C70);
        sub_10000882C(v323, (uint64_t *)&unk_100839C70);
        ((void (*)(uint64_t, char **))v361)(v356, v285);
        sub_10000882C(v346, (uint64_t *)&unk_100839C70);
        if ((v359 & 1) != 0)
          goto LABEL_168;
LABEL_163:
        v348 = v464;
        v349 = v490;
        ((void (*)(char *, uint64_t, uint64_t))v492)(v464, v497, v490);
        v350 = v333;
        v351 = Logger.logObject.getter(v350);
        v352 = static os_log_type_t.default.getter(v351);
        if (os_log_type_enabled(v351, v352))
        {
          v353 = (uint8_t *)swift_slowAlloc(12, -1);
          v354 = (id)swift_slowAlloc(32, -1);
          v502 = v354;
          *(_DWORD *)v353 = 136315138;
          v492 = v333;
          if (v333)
            v355 = objc_msgSend(v350, "remObjectID");
          else
            v355 = 0;
          v362 = v350;
          v500 = v355;
          v363 = sub_10001A630((uint64_t *)&unk_100844910);
          v364 = Optional.descriptionOrNil.getter(v363);
          v366 = v365;

          v500 = (_QWORD *)sub_10001A820(v364, v366, (uint64_t *)&v502);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v500, &v501);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v351, v352, "validateAndFixupReminderTree: ...Updated {root.list: %s}", v353, 0xCu);
          swift_arrayDestroy(v354, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v354, -1, -1);
          swift_slowDealloc(v353, -1, -1);

          ((void (*)(char *, uint64_t))v485)(v464, v490);
          v285 = (char **)v488;
          v321 = &selRef_isConcealed;
          v350 = v362;
          v333 = v492;
        }
        else
        {

          ((void (*)(char *, uint64_t))v485)(v348, v349);
        }
        if (!v333)
          goto LABEL_200;
        v367 = v350;
        v368 = objc_msgSend(v494, "ckZoneOwnerName");
        if (v368)
        {
          v369 = v368;
          v370 = static String._unconditionallyBridgeFromObjectiveC(_:)(v368);
          v372 = v371;

        }
        else
        {
          v370 = 0;
          v372 = 0;
        }
        v373 = objc_msgSend(v367, "ckZoneOwnerName");
        if (v373)
        {
          v374 = v373;
          v375 = static String._unconditionallyBridgeFromObjectiveC(_:)(v373);
          v377 = v376;

          if (v372)
          {
            if (v377)
            {
              if (v370 == v375 && v372 == v377)
              {

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
LABEL_200:
                objc_msgSend(v494, "setList:", v350);
                goto LABEL_201;
              }
              v414 = _stringCompareWithSmolCheck(_:_:expecting:)(v370, v372, v375, v377, 0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v414 & 1) != 0)
              {
LABEL_199:

                goto LABEL_200;
              }
LABEL_185:
              v492 = v350;
              v378 = 7104878;
              v502 = 0;
              v503 = 0xE000000000000000;
              _StringGuts.grow(_:)(109);
              v379._countAndFlagsBits = 0xD000000000000039;
              v379._object = (void *)0x80000001006FF8C0;
              String.append(_:)(v379);
              v380 = objc_msgSend(v494, "remObjectID");
              if (v380)
              {
                v381 = v380;
                v382 = objc_msgSend(v380, "description");

                v383 = static String._unconditionallyBridgeFromObjectiveC(_:)(v382);
                v385 = v384;

              }
              else
              {
                v385 = (void *)0xE300000000000000;
                v383 = 7104878;
              }
              v386._countAndFlagsBits = v383;
              v386._object = v385;
              String.append(_:)(v386);
              swift_bridgeObjectRelease();
              v387._countAndFlagsBits = 0x4E72656E776F205DLL;
              v387._object = (void *)0xEE00203D20656D61;
              String.append(_:)(v387);
              v388 = objc_msgSend(v494, "ckZoneOwnerName");
              if (v388)
              {
                v389 = v388;
                v390 = static String._unconditionallyBridgeFromObjectiveC(_:)(v388);
                v392 = v391;

              }
              else
              {
                v390 = 0;
                v392 = 0;
              }
              v500 = (_QWORD *)v390;
              v501 = v392;
              v393 = sub_10001A630((uint64_t *)&unk_10083A370);
              v394._countAndFlagsBits = String.init<A>(describing:)(&v500, v393);
              String.append(_:)(v394);
              swift_bridgeObjectRelease();
              v395._countAndFlagsBits = 0x467473696C202C29;
              v395._object = (void *)0xEF5B746F6F52726FLL;
              String.append(_:)(v395);
              v396 = objc_msgSend(v367, "remObjectID");
              if (v396)
              {
                v397 = v396;
                v398 = objc_msgSend(v396, "description");

                v378 = static String._unconditionallyBridgeFromObjectiveC(_:)(v398);
                v400 = v399;

              }
              else
              {
                v400 = (void *)0xE300000000000000;
              }
              v401._countAndFlagsBits = v378;
              v401._object = v400;
              String.append(_:)(v401);
              swift_bridgeObjectRelease();
              v402._countAndFlagsBits = 0x72656E6E776F205DLL;
              v402._object = (void *)0xEF203D20656D614ELL;
              String.append(_:)(v402);
              v403 = objc_msgSend(v367, "ckZoneOwnerName");
              if (v403)
              {
                v404 = v403;
                v405 = static String._unconditionallyBridgeFromObjectiveC(_:)(v403);
                v407 = v406;

              }
              else
              {
                v405 = 0;
                v407 = 0;
              }
              v500 = (_QWORD *)v405;
              v501 = v407;
              v408._countAndFlagsBits = String.init<A>(describing:)(&v500, v393);
              String.append(_:)(v408);
              swift_bridgeObjectRelease();
              v409._countAndFlagsBits = 0;
              v409._object = (void *)0xE000000000000000;
              String.append(_:)(v409);
              v410 = (void *)objc_opt_self(ICCloudContext);
              v411 = String._bridgeToObjectiveC()();
              v412 = String._bridgeToObjectiveC()();
              v413 = String._bridgeToObjectiveC()();
              objc_msgSend(v410, "faultAndPromptToFileRadarWithICTap2RadarType:title:description:logMessage:", 4, v411, v412, v413, swift_bridgeObjectRelease().n128_f64[0]);

              v321 = &selRef_isConcealed;
              v350 = v492;
              goto LABEL_200;
            }
          }
          else if (!v377)
          {
            goto LABEL_199;
          }
        }
        else if (!v372)
        {
          goto LABEL_199;
        }
        swift_bridgeObjectRelease();
        goto LABEL_185;
      }
      sub_10000882C(v326, (uint64_t *)&unk_100839C70);
      sub_10000882C(v323, (uint64_t *)&unk_100839C70);
      ((void (*)(uint64_t, char **))v487)(v322, v285);
    }
    sub_10000882C(v346, (uint64_t *)&unk_100844920);
    goto LABEL_163;
  }
LABEL_202:
  v284 = (uint8_t *)v489;
  if (v489)
  {
    v415 = v489;
    v416 = objc_msgSend(v415, "objectID");
    v417 = objc_msgSend(v416, "URIRepresentation");

    v418 = (uint64_t)v475;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v417);

    v419 = 0;
    v420 = v493;
    v421 = v496;
    v277 = (uint64_t)v468;
  }
  else
  {
    v419 = 1;
    v420 = v493;
    v421 = v496;
    v277 = (uint64_t)v468;
    v418 = (uint64_t)v475;
  }
  v422 = v486;
  (*(void (**)(uint64_t, uint64_t, uint64_t, char **))(v486 + 56))(v418, v419, 1, v285);
  v502 = &_swiftEmptySetSingleton;
  (*(void (**)(uint64_t, char *, char **))(v422 + 16))(v277, v482, v285);
  v423 = sub_100008868(v418, v479, (uint64_t *)&unk_100839C70);
  v424 = Logger.logObject.getter(v423);
  v425 = static os_log_type_t.default.getter(v424);
  if (os_log_type_enabled(v424, v425))
  {
    v426 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v426 = 0;
    _os_log_impl((void *)&_mh_execute_header, v424, v425, "validateAndFixupReminderTree: Going to update newly computed children.", v426, 2u);
    swift_slowDealloc(v426, -1, -1);
  }

  v427 = v494;
  sub_1002FD6BC(v421, (uint64_t *)&v502, v277, v494, v479, v284);
  v428 = v427;
  v429 = objc_msgSend(v498, v321[303], swift_bridgeObjectRelease().n128_f64[0]);

  if (v429)
  {
    v431 = objc_msgSend(v498, "children");
    if (v431)
    {
      v432 = v431;
      v433 = sub_1000E51DC((unint64_t *)&qword_1008448D0, (unint64_t *)&qword_10083AE90, off_1007D6708, (uint64_t)&protocol conformance descriptor for NSObject);
      v434 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v432, v420, v433);

      if ((v434 & 0xC000000000000001) != 0)
      {
        if (v434 < 0)
          v435 = v434;
        else
          v435 = v434 & 0xFFFFFFFFFFFFFF8;
        v436 = __CocoaSet.count.getter(v435);
      }
      else
      {
        v436 = *(_QWORD *)(v434 + 16);
      }
      if (v436)
      {
        v437 = Logger.logObject.getter(v436);
        v438 = static os_log_type_t.default.getter(v437);
        if (os_log_type_enabled(v437, v438))
        {
          v439 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v439 = 0;
          _os_log_impl((void *)&_mh_execute_header, v437, v438, "validateAndFixupReminderTree: Going to update old children.", v439, 2u);
          v440 = v439;
          v428 = v494;
          swift_slowDealloc(v440, -1, -1);
        }

        v441 = sub_1001EA4CC(v434);
        swift_bridgeObjectRelease();
        sub_1002FD6BC((uint64_t)v441, (uint64_t *)&v502, v277, v428, v479, v284);
        swift_release(v441);
      }
      else
      {
        *(_QWORD *)&v430 = swift_bridgeObjectRelease().n128_u64[0];
      }
    }
  }
  v442 = objc_msgSend(v428, "children", v430);
  if (!v442)
  {

    v451 = v479;
    v447 = (uint64_t)v475;
LABEL_230:

    sub_10000882C(v451, (uint64_t *)&unk_100839C70);
    v456 = v487;
    ((void (*)(uint64_t, char **))v487)(v277, v285);
    sub_10000882C(v447, (uint64_t *)&unk_100839C70);
    ((void (*)(char *, char **))v456)(v482, v285);
    swift_bridgeObjectRelease();
LABEL_231:
    swift_bridgeObjectRelease();
    goto LABEL_232;
  }
  v443 = v442;
  v444 = sub_1000E51DC((unint64_t *)&qword_1008448D0, (unint64_t *)&qword_10083AE90, off_1007D6708, (uint64_t)&protocol conformance descriptor for NSObject);
  v445 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v443, v420, v444);

  __chkstk_darwin(v446);
  *(&v459 - 4) = (uint64_t)&v502;
  v447 = (uint64_t)v475;
  *(&v459 - 3) = (uint64_t)v482;
  *(&v459 - 2) = v447;
  v289 = (unint64_t)v484;
  sub_1002476A0(sub_100300500, (uint64_t)(&v459 - 6), v445);
  if (!v289)
  {
    v449 = v448;
    if ((unint64_t)v448 >> 62)
    {
      if (v448 < 0)
        v457 = v448;
      else
        v457 = v448 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v448);
      v450 = _CocoaArrayWrapper.endIndex.getter(v457);
      swift_bridgeObjectRelease();
    }
    else
    {
      v450 = *(_QWORD *)((v448 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v428 = v494;
    v451 = v479;
    if (v450)
    {
      v452 = Logger.logObject.getter(v448);
      v453 = static os_log_type_t.default.getter(v452);
      if (os_log_type_enabled(v452, v453))
      {
        v454 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v454 = 0;
        _os_log_impl((void *)&_mh_execute_header, v452, v453, "validateAndFixupReminderTree: Going to update mismatched lists of remaining children attached to root.", v454, 2u);
        v455 = v454;
        v428 = v494;
        swift_slowDealloc(v455, -1, -1);
      }

      sub_1002FD6BC(v449, (uint64_t *)&v502, v277, v428, v451, v284);
    }

    swift_bridgeObjectRelease();
    goto LABEL_230;
  }
LABEL_242:

  swift_errorRelease(v289);
  sub_10000882C(v479, (uint64_t *)&unk_100839C70);
  ((void (*)(uint64_t, char **))v487)(v277, v285);
  __break(1u);
}

id REMCDReminder.ckServerRecord.getter()
{
  objc_super v1;

  v1.super_class = (Class)REMCDReminder;
  return objc_msgSendSuper2(&v1, "ckServerRecord");
}

void REMCDReminder.ckServerRecord.setter(void *a1)
{
  objc_super v2;

  v2.super_class = (Class)REMCDReminder;
  objc_msgSendSuper2(&v2, "setCkServerRecord:", a1);
  sub_1002F4F74();

}

double sub_1002F4F74()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  double result;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  id v15;

  v1 = v0;
  v2 = objc_msgSend(v0, "ckServerRecord");
  if (v2)
  {
    v3 = v2;
    v4 = sub_1002EE03C();
    v6 = v5;

  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  v7 = objc_msgSend(v1, "ckParentReminderIdentifier");
  if (!v7)
  {
    if (!v6)
      return result;
LABEL_13:
    v15 = String._bridgeToObjectiveC()();
LABEL_15:
    objc_msgSend(v1, "setCkParentReminderIdentifier:", v15, swift_bridgeObjectRelease().n128_f64[0]);

    return result;
  }
  v9 = v7;
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v12 = v11;

  if (!v6)
  {
    v15 = 0;
    goto LABEL_15;
  }
  if (v10 != v4 || v6 != v12)
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, v4, v6, 0);
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0)
      goto LABEL_17;
    goto LABEL_13;
  }
  swift_bridgeObjectRelease();
LABEL_17:
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

CKRecord_optional __swiftcall REMCDReminder.newlyCreatedRecord()()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  char *v39;
  Swift::Bool v40;
  objc_class *v41;
  _QWORD v42[21];
  char *v44;
  uint64_t v45;
  char v46;
  objc_super v47;
  CKRecord_optional result;

  v1 = v0;
  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v6);
  v8 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v42[17] = (char *)v42 - v10;
  v11 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v11);
  v42[16] = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)v42 - v14;
  __chkstk_darwin(v16);
  v42[15] = (char *)v42 - v17;
  __chkstk_darwin(v18);
  v20 = (char *)v42 - v19;
  __chkstk_darwin(v21);
  v42[14] = (char *)v42 - v22;
  __chkstk_darwin(v23);
  v25 = (char *)v42 - v24;
  __chkstk_darwin(v26);
  v42[13] = (char *)v42 - v27;
  __chkstk_darwin(v28);
  v42[19] = (char *)v42 - v29;
  __chkstk_darwin(v30);
  v42[12] = (char *)v42 - v31;
  __chkstk_darwin(v32);
  v42[20] = (char *)v42 - v33;
  __chkstk_darwin(v34);
  v42[11] = (char *)v42 - v35;
  *(_QWORD *)&v37 = __chkstk_darwin(v36).n128_u64[0];
  v39 = (char *)v42 - v38;
  v47.receiver = v1;
  v47.super_class = (Class)REMCDReminder;
  if (objc_msgSendSuper2(&v47, "newlyCreatedRecord", v37))
  {
    v45 = 27;
    v42[4] = v25;
    v42[5] = v20;
    v42[6] = v15;
    v42[9] = v8;
    v42[2] = v5;
    v42[7] = v3;
    v42[8] = v2;
    v42[1] = &v46;
    v42[18] = v1;
    v44 = v39;
    v41 = (objc_class *)((uint64_t (*)(void))loc_1002F54E8)();
  }
  else
  {
    v41 = 0;
  }
  result.value.super.isa = v41;
  result.is_nil = v40;
  return result;
}

void __swiftcall REMCDReminder.parentCloud()(REMCDObject_optional *__return_ptr retstr)
{
  void *v1;
  id v2;

  v2 = objc_msgSend(v1, "list");
}

void __swiftcall REMCDReminder.existingLocalObjectToMerge(with:)(REMCDObject_optional *__return_ptr retstr, NSPredicate_optional *with)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t KeyPath;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  __n128 v85;
  id v86;
  unint64_t v87;
  id v88;
  uint64_t v89;
  void *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  NSPredicate_optional *v94;
  unint64_t v95;
  uint64_t v96;
  id v97;
  Class isa;
  uint64_t ObjectType;
  id v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  id v109;
  id v110;
  id v111;
  NSObject *v112;
  int v113;
  uint64_t v114;
  id v115;
  void *v116;
  id v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  double v121;
  id v122;
  void *v123;
  id v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  int v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;

  v3 = v2;
  v5 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v5);
  v7 = (char *)&v131 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v8);
  v10 = (char *)&v131 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v12 = __chkstk_darwin(v11).n128_u64[0];
  v14 = (char *)&v131 - v13;
  v15 = objc_msgSend(v3, "managedObjectContext", v12);
  if (!v15)
    return;
  v16 = v15;
  if ((objc_msgSend(v3, "isConcealed") & 1) != 0)
  {
    if (qword_100837118 != -1)
      swift_once(&qword_100837118, sub_1002ED77C);
    v17 = type metadata accessor for Logger(0);
    sub_10001AAA8(v17, (uint64_t)qword_1008448A0);
    v18 = v3;
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(22, -1);
      v22 = (_QWORD *)swift_slowAlloc(64, -1);
      v138 = v22;
      *(_DWORD *)v21 = 136446466;
      v23 = objc_msgSend(v18, "remObjectID");
      if (v23)
      {
        v24 = v23;
        v25 = objc_msgSend(v23, "description");

        v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
        v28 = v27;

      }
      else
      {
        v26 = 7104878;
        v28 = 0xE300000000000000;
      }
      v137 = sub_10001A820(v26, v28, (uint64_t *)&v138);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138);

      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 2082;
      v39 = sub_1004381F4();
      v137 = sub_10001A820(v39, v40, (uint64_t *)&v138);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "MERGE.LOCAL: ...Should not attempt to find existing local object for this concealed reminder, race condition? {self: %{public}s %{public}s}", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      goto LABEL_17;
    }

    goto LABEL_14;
  }
  v29 = objc_msgSend(v3, "parentReminder");

  if (v29)
    goto LABEL_17;
  v30 = objc_msgSend(v3, "title");
  if (!v30)
    goto LABEL_17;
  v31 = v30;
  v134 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v33 = v32;

  v138 = _swiftEmptyArrayStorage;
  KeyPath = swift_getKeyPath(&unk_1006B37B8);
  v35 = objc_msgSend(v3, "account");
  if (v35)
  {
    v36 = v35;
    v37 = objc_msgSend(v35, "identifier");

    if (v37)
    {
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v37);

      v38 = type metadata accessor for UUID(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v10, 0, 1, v38);
    }
    else
    {
      v42 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v10, 1, 1, v42);
    }
    sub_1000A5CA8((uint64_t)v10, (uint64_t)v14, (uint64_t *)&unk_100839C80);
  }
  else
  {
    v41 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v14, 1, 1, v41);
  }
  v43 = sub_1002E7480(KeyPath, (uint64_t)v14);
  v44 = swift_release(KeyPath);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v44);
  v46 = v138[2];
  v45 = v138[3];
  if (v46 >= v45 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1);
  v47 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v46, v43);
  specialized Array._endMutation()(v47);
  v48 = swift_getKeyPath(&unk_1006B3808);
  v49 = sub_1002E7254(v48, (uint64_t)v134, v33);
  swift_release(v48);
  swift_bridgeObjectRelease();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v50);
  v52 = v138[2];
  v51 = v138[3];
  if (v52 >= v51 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1);
  v53 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v52, v49);
  specialized Array._endMutation()(v53);
  v54 = swift_getKeyPath(&unk_1006B3838);
  v55 = objc_msgSend(v3, "dueDate");
  if (v55)
  {
    v56 = v55;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v55);

    v57 = type metadata accessor for Date(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v7, 0, 1, v57);
  }
  else
  {
    v58 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v7, 1, 1, v58);
  }
  v59 = sub_1002E74A0(v54, (uint64_t)v7);
  v60 = swift_release(v54);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v60);
  v62 = v138[2];
  v61 = v138[3];
  if (v62 >= v61 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1);
  v63 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v62, v59);
  specialized Array._endMutation()(v63);
  v64 = swift_getKeyPath(&unk_1006B3868);
  v65 = sub_1002E7248(v64, (char)objc_msgSend(v3, "allDay"));
  v66 = swift_release(v64);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v66);
  v68 = v138[2];
  v67 = v138[3];
  if (v68 >= v67 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v67 > 1);
  v69 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v68, v65);
  specialized Array._endMutation()(v69);
  v70 = swift_getKeyPath(&unk_1006B38A0);
  v71 = objc_msgSend(v3, "timeZone");
  if (v71)
  {
    v72 = v71;
    v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
    v75 = v74;

  }
  else
  {
    v73 = 0;
    v75 = 0;
  }
  v76 = sub_1002E7254(v70, v73, v75);
  swift_release(v70);
  swift_bridgeObjectRelease();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v77);
  v79 = v138[2];
  v78 = v138[3];
  if (v79 >= v78 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v78 > 1);
  v80 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v79, v76);
  specialized Array._endMutation()(v80);
  v81 = sub_1000153F4(0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v81);
  v83 = v138[2];
  v82 = v138[3];
  if (v83 >= v82 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v82 > 1);
  v84 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v83, v81);
  specialized Array._endMutation()(v84);
  v137 = (uint64_t)_swiftEmptyArrayStorage;
  sub_1000151B0(0, (unint64_t *)&unk_100839910, NSPredicate_ptr);
  v86 = (id)NSPredicate.init(format:_:)(0xD00000000000003BLL, 0x80000001006FF5C0, _swiftEmptyArrayStorage, v85);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v86);
  v88 = *(id *)((v137 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v87 = *(_QWORD *)((v137 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if ((unint64_t)v88 >= v87 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v87 > 1);
  v89 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v88, v86);
  specialized Array._endMutation()(v89);
  v90 = (void *)sub_10000D2BC(v138);
  if (v90)
  {
    v88 = v90;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v88);
    v92 = *(_QWORD *)((v137 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v91 = *(_QWORD *)((v137 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v92 >= v91 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v91 > 1);
    v93 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v92, v88);
    specialized Array._endMutation()(v93);

  }
  if (with)
  {
    v94 = with;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v94);
    v88 = *(id *)((v137 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v95 = *(_QWORD *)((v137 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if ((unint64_t)v88 >= v95 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v95 > 1);
    v96 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v88, v94);
    specialized Array._endMutation()(v96);
  }
  v97 = objc_allocWithZone((Class)NSCompoundPredicate);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v18 = objc_msgSend(v97, "initWithType:subpredicates:", 1, isa, swift_bridgeObjectRelease().n128_f64[0]);

  ObjectType = swift_getObjectType();
  v100 = objc_msgSend((id)swift_getObjCClassFromMetadata(ObjectType), "ic_objectsMatchingPredicate:context:", v18, v16);
  v101 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
  v102 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v100, v101);

  if (!((unint64_t)v102 >> 62))
  {
    v103 = *(void **)((v102 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v103)
      goto LABEL_52;
LABEL_71:

    swift_bridgeObjectRelease();
    return;
  }
  if (v102 < 0)
    v130 = v102;
  else
    v130 = v102 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v102);
  v103 = (void *)_CocoaArrayWrapper.endIndex.getter(v130);
  swift_bridgeObjectRelease();
  if (!v103)
    goto LABEL_71;
LABEL_52:
  if ((v102 & 0xC000000000000001) != 0)
  {
    v104 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v102);
LABEL_55:
    v88 = v104;
    swift_bridgeObjectRelease();
    v105 = objc_opt_self(REMCDReminder);
    v106 = swift_dynamicCastObjCClass(v88, v105);
    if (!v106)
    {

LABEL_14:
LABEL_17:

      return;
    }
    v103 = (void *)v106;
    if (qword_100837118 == -1)
      goto LABEL_57;
    goto LABEL_74;
  }
  if (*(_QWORD *)((v102 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v104 = *(id *)(v102 + 32);
    goto LABEL_55;
  }
  __break(1u);
LABEL_74:
  swift_once(&qword_100837118, sub_1002ED77C);
LABEL_57:
  v107 = type metadata accessor for Logger(0);
  sub_10001AAA8(v107, (uint64_t)qword_1008448A0);
  v108 = v3;
  v109 = v88;
  v110 = v108;
  v111 = v109;
  v112 = Logger.logObject.getter(v111);
  v113 = static os_log_type_t.info.getter(v112);
  if (os_log_type_enabled(v112, (os_log_type_t)v113))
  {
    v133 = v113;
    v134 = v86;
    v114 = swift_slowAlloc(22, -1);
    v131 = swift_slowAlloc(64, -1);
    v136 = v131;
    *(_DWORD *)v114 = 136446466;
    v115 = objc_msgSend(v110, "remObjectID");
    if (v115)
    {
      v116 = v115;
      v117 = objc_msgSend(v115, "description");

      v118 = static String._unconditionallyBridgeFromObjectiveC(_:)(v117);
      v120 = v119;

    }
    else
    {
      v120 = 0xE300000000000000;
      v118 = 7104878;
    }
    v132 = v111;
    v135 = sub_10001A820(v118, v120, &v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136);

    *(_QWORD *)&v121 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v114 + 12) = 2082;
    v122 = objc_msgSend(v103, "remObjectID", v121);
    if (v122)
    {
      v123 = v122;
      v124 = objc_msgSend(v122, "description");

      v125 = static String._unconditionallyBridgeFromObjectiveC(_:)(v124);
      v127 = v126;

      v128 = v131;
    }
    else
    {
      v127 = 0xE300000000000000;
      v128 = v131;
      v125 = 7104878;
    }
    v135 = sub_10001A820(v125, v127, &v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136);
    v129 = v132;

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v112, (os_log_type_t)v133, "MERGE.LOCAL: ......REMCDReminder.existingLocalObjectToMerge found a matching local REMCDReminder! {self: %{public}s, matched: %{public}s}", (uint8_t *)v114, 0x16u);
    swift_arrayDestroy(v128, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v128, -1, -1);
    swift_slowDealloc(v114, -1, -1);

  }
  else
  {

  }
}

Swift::Bool __swiftcall REMCDReminder.merge(withLocalObject:)(REMCDObject *withLocalObject)
{
  NSObject *v1;
  NSObject *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  char *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  REMCDObject *v56;
  NSObject *v57;
  REMCDObject *v58;
  NSObject *v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  void *v66;
  id v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  id v71;
  void *v72;
  void (*v73)(char *, uint64_t, uint64_t, uint64_t);
  id v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int (*v78)(uint64_t, uint64_t, uint64_t);
  NSObject *v79;
  id v80;
  id v81;
  void *v82;
  char *v83;
  _QWORD *v84;
  void (*v85)(char *, char *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  unsigned int (*v88)(uint64_t, uint64_t, uint64_t);
  char *v89;
  id v90;
  void *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  uint64_t v96;
  char v97;
  void (*v98)(char *, uint64_t);
  uint64_t v99;
  REMCDObject *v100;
  NSObject *v101;
  NSObject *v102;
  NSObject *v103;
  os_log_type_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  void *v109;
  id v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  double v114;
  REMObjectID *v115;
  REMObjectID *v116;
  id v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  double v122;
  REMObjectID *v123;
  REMObjectID *v124;
  id v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  void (*v129)(char *, char *, uint64_t);
  char *v130;
  char *v131;
  REMCDObject *v132;
  NSObject *v133;
  REMCDObject *v134;
  _QWORD *v135;
  REMCDObject *v136;
  NSObject *v137;
  NSObject *v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  id v143;
  void *v144;
  id v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  void (*v149)(char *, uint64_t, __n128);
  char *v150;
  double v151;
  id v152;
  void *v153;
  uint64_t v154;
  id v155;
  unint64_t v156;
  unint64_t v157;
  __n128 v158;
  uint64_t v159;
  unint64_t v160;
  __n128 v161;
  char *v162;
  uint64_t v163;
  char *v164;
  __n128 v165;
  uint64_t v166;
  unint64_t v167;
  __n128 v168;
  NSObject *v169;
  uint64_t v170;
  id v171;
  id v172;
  id v173;
  uint64_t v175;
  void (*v176)(char *, uint64_t, uint64_t, uint64_t);
  REMCDObject *v177;
  char *v178;
  char *v179;
  char *v180;
  id v181;
  char *v182;
  char *v183;
  char *v184;
  char *v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  char *v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  id v196;
  char *v197;
  char *v198;
  char *v199;
  _QWORD *v200;
  uint64_t v201;
  NSObject *v202;
  uint64_t v203;
  _BYTE v204[24];
  uint64_t v205;

  v2 = v1;
  v4 = type metadata accessor for NSFastEnumerationIterator(0);
  v193 = *(_QWORD *)(v4 - 8);
  v194 = v4;
  __chkstk_darwin(v4);
  v197 = (char *)&v175 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v198 = (char *)&v175 - v7;
  v201 = type metadata accessor for URL(0);
  v191 = *(_QWORD *)(v201 - 8);
  __chkstk_darwin(v201);
  v184 = (char *)&v175 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v9);
  v190 = (char *)&v175 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v11);
  v189 = (char *)&v175 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v188 = (char *)&v175 - v14;
  __chkstk_darwin(v15);
  v187 = (char *)&v175 - v16;
  __chkstk_darwin(v17);
  v186 = (char *)&v175 - v18;
  __chkstk_darwin(v19);
  v185 = (char *)&v175 - v20;
  __chkstk_darwin(v21);
  v182 = (char *)&v175 - v22;
  __chkstk_darwin(v23);
  v192 = (char *)&v175 - v24;
  v195 = type metadata accessor for Date(0);
  v200 = *(_QWORD **)(v195 - 8);
  __chkstk_darwin(v195);
  v179 = (char *)&v175 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v178 = (char *)&v175 - v27;
  __chkstk_darwin(v28);
  v180 = (char *)&v175 - v29;
  __chkstk_darwin(v30);
  v199 = (char *)&v175 - v31;
  __chkstk_darwin(v32);
  v183 = (char *)&v175 - v33;
  v34 = type metadata accessor for UUID(0);
  v35 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v37 = (char *)&v175 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_10001A630((uint64_t *)&unk_10083B370);
  __chkstk_darwin(v38);
  v40 = (char *)&v175 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v41);
  v43 = (char *)&v175 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  v46 = (char *)&v175 - v45;
  *(_QWORD *)&v48 = __chkstk_darwin(v47).n128_u64[0];
  v50 = (char *)&v175 - v49;
  v202 = v2;
  v51 = -[NSObject managedObjectContext](v2, "managedObjectContext", v48);
  if (!v51)
    return (char)v51;
  v196 = v51;
  v52 = objc_opt_self(REMCDReminder);
  v53 = swift_dynamicCastObjCClass(withLocalObject, v52);
  if (!v53)
  {
LABEL_51:

    goto LABEL_52;
  }
  v54 = (void *)v53;
  v177 = withLocalObject;
  if ((objc_msgSend(v54, "isConcealed") & 1) != 0)
  {
    if (qword_100837118 != -1)
      swift_once(&qword_100837118, sub_1002ED77C);
    v55 = type metadata accessor for Logger(0);
    sub_10001AAA8(v55, (uint64_t)qword_1008448A0);
    v56 = v177;
    v57 = v202;
    v58 = v56;
    v59 = v57;
    v60 = Logger.logObject.getter(v59);
    v61 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v61))
    {
      v62 = 7104878;
      v63 = swift_slowAlloc(32, -1);
      v64 = swift_slowAlloc(96, -1);
      v205 = v64;
      *(_DWORD *)v63 = 136446722;
      v65 = -[NSObject remObjectID](v59, "remObjectID");
      if (v65)
      {
        v66 = v65;
        v67 = objc_msgSend(v65, "description");

        v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
        v70 = v69;

      }
      else
      {
        v70 = 0xE300000000000000;
        v68 = 7104878;
      }
      v203 = sub_10001A820(v68, v70, &v205);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, v204);

      *(_QWORD *)&v114 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v63 + 12) = 2082;
      v115 = -[REMCDObject remObjectID](v58, "remObjectID", v114);
      if (v115)
      {
        v116 = v115;
        v117 = -[REMObjectID description](v115, "description");

        v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v117);
        v119 = v118;

      }
      else
      {
        v119 = 0xE300000000000000;
      }
      v203 = sub_10001A820(v62, v119, &v205);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, v204);

      swift_bridgeObjectRelease();
      *(_WORD *)(v63 + 22) = 2082;
      v120 = sub_1004381F4();
      v203 = sub_10001A820(v120, v121, &v205);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, v204);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "MERGE.LOCAL: ...Should not attempt to merge with a concealed local reminder, race condition or corrupted database? {self: %{public}s, local: %{public}s %{public}s}", (uint8_t *)v63, 0x20u);
      swift_arrayDestroy(v64, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v63, -1, -1);

      goto LABEL_51;
    }

LABEL_39:
LABEL_52:
    LOBYTE(v51) = 0;
    return (char)v51;
  }
  v181 = v54;
  v71 = objc_msgSend(v54, "identifier");
  if (v71)
  {
    v72 = v71;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v71);

    v73 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56);
    v73(v50, 0, 1, v34);
  }
  else
  {
    v73 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56);
    v73(v50, 1, 1, v34);
  }
  v74 = -[NSObject identifier](v202, "identifier");
  if (v74)
  {
    v75 = v74;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v74);

    v76 = 0;
  }
  else
  {
    v76 = 1;
  }
  v73(v46, v76, 1, v34);
  v77 = (uint64_t)&v40[*(int *)(v38 + 48)];
  sub_100008868((uint64_t)v50, (uint64_t)v40, (uint64_t *)&unk_100839C80);
  sub_100008868((uint64_t)v46, v77, (uint64_t *)&unk_100839C80);
  v78 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
  if (v78((uint64_t)v40, 1, v34) == 1)
  {
    sub_10000882C((uint64_t)v46, (uint64_t *)&unk_100839C80);
    sub_10000882C((uint64_t)v50, (uint64_t *)&unk_100839C80);
    if (v78(v77, 1, v34) == 1)
    {
      sub_10000882C((uint64_t)v40, (uint64_t *)&unk_100839C80);
      v79 = v202;
LABEL_29:
      if (qword_100837118 != -1)
        swift_once(&qword_100837118, sub_1002ED77C);
      v99 = type metadata accessor for Logger(0);
      sub_10001AAA8(v99, (uint64_t)qword_1008448A0);
      v100 = v177;
      v101 = v79;
      v58 = v100;
      v102 = v101;
      v103 = Logger.logObject.getter(v102);
      v104 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v103, v104))
      {
        v105 = 7104878;
        v106 = swift_slowAlloc(22, -1);
        v107 = swift_slowAlloc(64, -1);
        v205 = v107;
        *(_DWORD *)v106 = 136446466;
        v108 = -[NSObject remObjectID](v102, "remObjectID");
        if (v108)
        {
          v109 = v108;
          v110 = objc_msgSend(v108, "description");

          v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(v110);
          v113 = v112;

        }
        else
        {
          v113 = 0xE300000000000000;
          v111 = 7104878;
        }
        v203 = sub_10001A820(v111, v113, &v205);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, v204);

        *(_QWORD *)&v122 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v106 + 12) = 2082;
        v123 = -[REMCDObject remObjectID](v58, "remObjectID", v122);
        if (v123)
        {
          v124 = v123;
          v125 = -[REMObjectID description](v123, "description");

          v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v125);
          v127 = v126;

        }
        else
        {
          v127 = 0xE300000000000000;
        }
        v203 = sub_10001A820(v105, v127, &v205);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, v204);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v103, v104, "MERGE.LOCAL: ......should not try to merge with itself! {self: %{public}s, local: %{public}s}", (uint8_t *)v106, 0x16u);
        swift_arrayDestroy(v107, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v107, -1, -1);
        swift_slowDealloc(v106, -1, -1);

        goto LABEL_51;
      }

      goto LABEL_39;
    }
    goto LABEL_21;
  }
  sub_100008868((uint64_t)v40, (uint64_t)v43, (uint64_t *)&unk_100839C80);
  if (v78(v77, 1, v34) == 1)
  {
    sub_10000882C((uint64_t)v46, (uint64_t *)&unk_100839C80);
    sub_10000882C((uint64_t)v50, (uint64_t *)&unk_100839C80);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v43, v34);
LABEL_21:
    sub_10000882C((uint64_t)v40, (uint64_t *)&unk_10083B370);
    v80 = v181;
    v79 = v202;
    goto LABEL_22;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v37, v77, v34);
  v96 = sub_10009FC50((unint64_t *)&qword_10083B380, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v97 = dispatch thunk of static Equatable.== infix(_:_:)(v43, v37, v34, v96);
  v98 = *(void (**)(char *, uint64_t))(v35 + 8);
  v98(v37, v34);
  sub_10000882C((uint64_t)v46, (uint64_t *)&unk_100839C80);
  sub_10000882C((uint64_t)v50, (uint64_t *)&unk_100839C80);
  v98(v43, v34);
  sub_10000882C((uint64_t)v40, (uint64_t *)&unk_100839C80);
  v80 = v181;
  v79 = v202;
  if ((v97 & 1) != 0)
    goto LABEL_29;
LABEL_22:
  v81 = -[NSObject lastModifiedDate](v79, "lastModifiedDate");
  if (!v81)
  {
    v86 = (uint64_t)v192;
    v176 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v200[7];
    v176(v192, 1, 1, v195);
    goto LABEL_44;
  }
  v82 = v81;
  v83 = v199;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v81);

  v84 = v200;
  v85 = (void (*)(char *, char *, uint64_t))v200[4];
  v86 = (uint64_t)v192;
  v87 = v195;
  v85(v192, v83, v195);
  v176 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v84[7];
  v176((char *)v86, 0, 1, v87);
  v88 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v84[6];
  if (v88(v86, 1, v87) == 1)
  {
LABEL_44:
    sub_10000882C(v86, (uint64_t *)&unk_1008380D0);
LABEL_45:
    v192 = (char *)-[NSObject createResolutionTokenMapIfNecessary](v79, "createResolutionTokenMapIfNecessary");
    JUMPOUT(0x1002F9208);
  }
  v89 = v183;
  v85(v183, (char *)v86, v87);
  v90 = objc_msgSend(v80, "lastModifiedDate");
  if (!v90)
  {
    v86 = (uint64_t)v182;
    v176(v182, 1, 1, v87);
    goto LABEL_43;
  }
  v91 = v90;
  v92 = v199;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v90);

  v86 = (uint64_t)v182;
  v85(v182, v92, v87);
  v176((char *)v86, 0, 1, v87);
  if (v88(v86, 1, v87) == 1)
  {
LABEL_43:
    ((void (*)(char *, uint64_t))v84[1])(v89, v87);
    goto LABEL_44;
  }
  v93 = v180;
  v85(v180, (char *)v86, v87);
  v94 = sub_10009FC50((unint64_t *)&qword_100842190, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  if ((dispatch thunk of static Comparable.< infix(_:_:)(v89, v93, v87, v94) & 1) != 0)
  {
    v95 = (void (*)(char *, uint64_t))v84[1];
    v95(v93, v87);
    v95(v89, v87);
    goto LABEL_45;
  }
  if (qword_100837118 != -1)
    swift_once(&qword_100837118, sub_1002ED77C);
  v128 = type metadata accessor for Logger(0);
  sub_10001AAA8(v128, (uint64_t)qword_1008448A0);
  v129 = (void (*)(char *, char *, uint64_t))v84[2];
  v130 = v178;
  v129(v178, v89, v87);
  v131 = v179;
  v129(v179, v93, v87);
  v132 = v177;
  v133 = v79;
  v134 = v132;
  v135 = v84;
  v136 = v134;
  v137 = v133;
  v138 = Logger.logObject.getter(v137);
  v139 = static os_log_type_t.info.getter(v138);
  if (os_log_type_enabled(v138, (os_log_type_t)v139))
  {
    LODWORD(v201) = v139;
    v202 = v138;
    v140 = 7104878;
    v141 = swift_slowAlloc(42, -1);
    v142 = swift_slowAlloc(128, -1);
    v205 = v142;
    *(_DWORD *)v141 = 136446978;
    v143 = -[NSObject remObjectID](v137, "remObjectID");
    if (v143)
    {
      v144 = v143;
      v145 = objc_msgSend(v143, "description");

      v146 = static String._unconditionallyBridgeFromObjectiveC(_:)(v145);
      v148 = v147;

    }
    else
    {
      v148 = 0xE300000000000000;
      v146 = 7104878;
    }
    v150 = v178;
    v203 = sub_10001A820(v146, v148, &v205);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, v204);

    *(_QWORD *)&v151 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v141 + 12) = 2082;
    v152 = objc_msgSend(v181, "remObjectID", v151);
    if (v152)
    {
      v153 = v152;
      v154 = v142;
      v155 = objc_msgSend(v152, "description");

      v140 = static String._unconditionallyBridgeFromObjectiveC(_:)(v155);
      v157 = v156;

    }
    else
    {
      v154 = v142;
      v157 = 0xE300000000000000;
    }
    v203 = sub_10001A820(v140, v157, &v205);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, v204);

    v158 = swift_bridgeObjectRelease();
    *(_WORD *)(v141 + 22) = 2082;
    v159 = Date.debugDescription.getter(v158);
    v203 = sub_10001A820(v159, v160, &v205);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, v204);
    v161 = swift_bridgeObjectRelease();
    v149 = (void (*)(char *, uint64_t, __n128))v200[1];
    v162 = v150;
    v163 = v195;
    v149(v162, v195, v161);
    *(_WORD *)(v141 + 32) = 2082;
    v164 = v179;
    v166 = Date.debugDescription.getter(v165);
    v203 = sub_10001A820(v166, v167, &v205);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, v204);
    v168 = swift_bridgeObjectRelease();
    v149(v164, v163, v168);
    v169 = v202;
    _os_log_impl((void *)&_mh_execute_header, v202, (os_log_type_t)v201, "MERGE.LOCAL: ......server copy is newer, keep server data and delete local. {cloud: %{public}s, local: %{public}s, cloud.lastmod: %{public}s, local.lastmod: %{public}s}", (uint8_t *)v141, 0x2Au);
    swift_arrayDestroy(v154, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v154, -1, -1);
    v170 = v141;
    v87 = v163;
    swift_slowDealloc(v170, -1, -1);

    v89 = v183;
    v93 = v180;
  }
  else
  {

    v149 = (void (*)(char *, uint64_t, __n128))v135[1];
    ((void (*)(char *, uint64_t))v149)(v130, v87);
    ((void (*)(char *, uint64_t))v149)(v131, v87);

  }
  v171 = v181;
  v172 = objc_msgSend(v181, "list");
  objc_msgSend(v172, "removeRemindersObject:", v171);

  v173 = v196;
  objc_msgSend(v196, "deleteObject:", v171);

  ((void (*)(char *, uint64_t))v149)(v93, v87);
  ((void (*)(char *, uint64_t))v149)(v89, v87);
  LOBYTE(v51) = 1;
  return (char)v51;
}

uint64_t sub_1002FB01C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1002FB030(a1, a2, a3, a4, (Class *)REMCRMergeableOrderedSet_ptr, (uint64_t (*)(void *, uint64_t, unint64_t))sub_100259BE8);
}

uint64_t sub_1002FB030(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, Class *a5, uint64_t (*a6)(void *, uint64_t, unint64_t))
{
  void *v6;
  void *v7;
  uint64_t v8;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v7 = v6;
  v8 = 0;
  if (a2 >> 60 != 15)
  {
    sub_1000A70E4(a1, a2);
    v15 = sub_100437E08(a3, a4);
    if (v15)
    {
      v16 = v15;
      v17 = objc_allocWithZone(*a5);
      sub_1000A70D0(a1, a2);
      v8 = a6(v16, a1, a2);
      sub_1000A71B4(a1, a2);

      sub_1000A71B4(a1, a2);
    }
    else
    {
      if (qword_1008374E8 != -1)
        swift_once(&qword_1008374E8, sub_100438310);
      v18 = type metadata accessor for Logger(0);
      sub_10001AAA8(v18, (uint64_t)qword_10084AA70);
      v19 = v7;
      swift_bridgeObjectRetain_n(a4, 2);
      v20 = v19;
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = swift_slowAlloc(22, -1);
        v27 = (_QWORD *)swift_slowAlloc(8, -1);
        v28 = swift_slowAlloc(32, -1);
        v30 = v28;
        *(_DWORD *)v23 = 136446466;
        swift_bridgeObjectRetain(a4);
        v29 = sub_10001A820(a3, a4, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
        swift_bridgeObjectRelease_n(a4, 3);
        *(_WORD *)(v23 + 12) = 2112;
        v29 = (uint64_t)v20;
        v24 = v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
        *v27 = v20;

        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Unable to deserialize CR property from CKRecord because replicaIDSource isn't available {key: %{public}s, cdObject: %@}", (uint8_t *)v23, 0x16u);
        v25 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v27, 1, v25);
        swift_slowDealloc(v27, -1, -1);
        swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v28, -1, -1);
        swift_slowDealloc(v23, -1, -1);

        sub_1000A71B4(a1, a2);
      }
      else
      {
        sub_1000A71B4(a1, a2);

        swift_bridgeObjectRelease_n(a4, 2);
      }
      return 0;
    }
  }
  return v8;
}

_QWORD *REMCDReminder.objectsToBeDeletedBeforeThisObject()()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t v25;

  v1 = v0;
  v2 = objc_msgSend(v0, "recurrenceRules");
  if (v2)
    sub_1001E31E8(v2);
  v3 = objc_msgSend(v0, "attachments");
  if (v3)
    sub_1001E31E8(v3);
  v4 = objc_msgSend(v0, "alarmStorage");
  if (v4)
    sub_1001E31E8(v4);
  v5 = objc_msgSend(v0, "children");
  if (v5)
  {
    v6 = v5;
    v7 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    v8 = sub_1000E51DC((unint64_t *)&qword_1008448D0, (unint64_t *)&qword_10083AE90, off_1007D6708, (uint64_t)&protocol conformance descriptor for NSObject);
    v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v6, v7, v8);

    v10 = sub_1001EA4CC(v9);
    swift_bridgeObjectRelease();
    v11 = sub_1001E062C((uint64_t)v10);
    swift_release(v10);
    sub_1001E09F4(v11);
  }
  v12 = objc_msgSend(v1, "assignments");
  if (v12)
  {
    v13 = v12;
    v14 = sub_1000151B0(0, &qword_100840020, off_1007D6690);
    v15 = sub_1000E51DC((unint64_t *)&unk_1008448C0, &qword_100840020, off_1007D6690, (uint64_t)&protocol conformance descriptor for NSObject);
    v16 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v13, v14, v15);

    v17 = sub_1001EA504(v16);
    swift_bridgeObjectRelease();
    v18 = sub_1001E0640((uint64_t)v17);
    swift_release(v17);
    sub_1001E09F4(v18);
  }
  v19 = objc_msgSend(v1, "hashtags");
  if (v19)
  {
    v20 = v19;
    v21 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    v22 = sub_1000E51DC((unint64_t *)&qword_10083BDF0, (unint64_t *)&qword_10083DA60, off_1007D66C8, (uint64_t)&protocol conformance descriptor for NSObject);
    v23 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v20, v21, v22);

    v24 = sub_1001EA4E8(v23);
    swift_bridgeObjectRelease();
    v25 = sub_1001E0654((uint64_t)v24);
    swift_release(v24);
    sub_1001E09F4(v25);
  }
  return _swiftEmptyArrayStorage;
}

Swift::Void __swiftcall REMCDReminder.fixBrokenReferences()()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  char **v5;
  char **v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  char **v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  double v51;
  id v52;
  void *v53;
  id v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  id v58;
  void *v59;
  id v60;
  id v61;
  id v62;
  id v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  id v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  double v73;
  id v74;
  void *v75;
  id v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  os_log_type_t v81;
  NSObject *log;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  if (qword_100837118 != -1)
    swift_once(&qword_100837118, sub_1002ED77C);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_1008448A0);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  v5 = &selRef_isConcealed;
  v6 = &selRef_isConcealed;
  if (!os_log_type_enabled(v3, v4))
  {

    goto LABEL_19;
  }
  v7 = swift_slowAlloc(32, -1);
  v83 = swift_slowAlloc(96, -1);
  v86 = v83;
  *(_DWORD *)v7 = 136315650;
  v8 = objc_msgSend(v2, "remObjectID");
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(v8, "description");

    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

  }
  else
  {
    v13 = 0xE300000000000000;
    v11 = 7104878;
  }
  v85 = sub_10001A820(v11, v13, &v86);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);

  *(_QWORD *)&v14 = swift_bridgeObjectRelease().n128_u64[0];
  *(_WORD *)(v7 + 12) = 2082;
  v15 = objc_msgSend(v2, "list", v14);
  if (v15)
  {
    v16 = v15;
    v17 = objc_msgSend(v15, "remObjectID");
    if (v17)
    {
      v18 = v17;
      v19 = objc_msgSend(v17, "description");

      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v22 = v21;

      goto LABEL_13;
    }

  }
  v22 = 0xE300000000000000;
  v20 = 7104878;
LABEL_13:
  v85 = sub_10001A820(v20, v22, &v86);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);

  *(_QWORD *)&v23 = swift_bridgeObjectRelease().n128_u64[0];
  *(_WORD *)(v7 + 22) = 2082;
  v6 = &selRef_isConcealed;
  v24 = objc_msgSend(v2, "parentReminder", v23);
  if (!v24)
  {
LABEL_17:
    v31 = 0xE300000000000000;
    v5 = &selRef_isConcealed;
    v33 = v83;
    v32 = 7104878;
    goto LABEL_18;
  }
  v25 = v24;
  v26 = objc_msgSend(v24, "remObjectID");
  if (!v26)
  {

    goto LABEL_17;
  }
  v27 = v26;
  v28 = objc_msgSend(v26, "description");

  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  v31 = v30;

  v32 = v29;
  v6 = &selRef_isConcealed;
  v5 = &selRef_isConcealed;
  v33 = v83;
LABEL_18:
  v85 = sub_10001A820(v32, v31, &v86);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fixing broken references for reminder {reminderID: %s, list: %{public}s, parentReminder: %{public}s}", (uint8_t *)v7, 0x20u);
  swift_arrayDestroy(v33, 3, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v33, -1, -1);
  swift_slowDealloc(v7, -1, -1);

LABEL_19:
  v34 = objc_msgSend(v2, v5[106]);
  v35 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
  if (v34)
  {
    v36 = v34;
    if (objc_msgSend(v34, "markedForDeletion")
      && (objc_msgSend(v2, "markedForDeletion") & 1) == 0)
    {
      v37 = v2;
      v38 = v36;
      v39 = v37;
      v40 = v38;
      v41 = Logger.logObject.getter(v40);
      v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        v81 = v42;
        log = v41;
        v43 = swift_slowAlloc(22, -1);
        v44 = swift_slowAlloc(64, -1);
        v86 = v44;
        *(_DWORD *)v43 = 136446466;
        v45 = objc_msgSend(v39, "remObjectID");
        v80 = v44;
        if (v45)
        {
          v46 = v45;
          v47 = objc_msgSend(v45, "description");

          v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
          v50 = v49;

        }
        else
        {
          v50 = 0xE300000000000000;
          v48 = 7104878;
        }
        v85 = sub_10001A820(v48, v50, &v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);

        *(_QWORD *)&v51 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v43 + 12) = 2082;
        v52 = objc_msgSend(v40, "remObjectID", v51);
        if (v52)
        {
          v53 = v52;
          v54 = objc_msgSend(v52, "description");

          v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
          v57 = v56;

          v35 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
        }
        else
        {
          v57 = 0xE300000000000000;
          v35 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
          v55 = 7104878;
        }
        v85 = sub_10001A820(v55, v57, &v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, log, v81, "List is marked for deletion but this reminer is not {reminderID: %{public}s, list: %{public}s}", (uint8_t *)v43, 0x16u);
        swift_arrayDestroy(v80, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v80, -1, -1);
        swift_slowDealloc(v43, -1, -1);

        v6 = &selRef_isConcealed;
      }
      else
      {

      }
      objc_msgSend(v39, "markForDeletion");
    }
    objc_msgSend(v36, v35[37]);

  }
  v58 = objc_msgSend(v2, v6[303]);
  if (v58)
  {
    v59 = v58;
    if (objc_msgSend(v58, "markedForDeletion")
      && (objc_msgSend(v2, "markedForDeletion") & 1) == 0)
    {
      v60 = v2;
      v61 = v59;
      v62 = v60;
      v63 = v61;
      v64 = Logger.logObject.getter(v63);
      v65 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v64, v65))
      {
        v66 = swift_slowAlloc(22, -1);
        v84 = swift_slowAlloc(64, -1);
        v86 = v84;
        *(_DWORD *)v66 = 136446466;
        v67 = objc_msgSend(v62, "remObjectID");
        if (v67)
        {
          v68 = v67;
          v69 = objc_msgSend(v67, "description");

          v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
          v72 = v71;

        }
        else
        {
          v72 = 0xE300000000000000;
          v70 = 7104878;
        }
        v85 = sub_10001A820(v70, v72, &v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);

        *(_QWORD *)&v73 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v66 + 12) = 2082;
        v74 = objc_msgSend(v63, "remObjectID", v73);
        if (v74)
        {
          v75 = v74;
          v76 = objc_msgSend(v74, "description");

          v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
          v79 = v78;

        }
        else
        {
          v79 = 0xE300000000000000;
          v77 = 7104878;
        }
        v85 = sub_10001A820(v77, v79, &v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "Parent reminder is marked for deletion but this reminer is not {reminderID: %{public}s, parentReminder: %{public}s}", (uint8_t *)v66, 0x16u);
        swift_arrayDestroy(v84, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v84, -1, -1);
        swift_slowDealloc(v66, -1, -1);

        v35 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
      }
      else
      {

      }
      objc_msgSend(v62, "markForDeletion");
    }
    objc_msgSend(v59, v35[37]);

  }
}

uint64_t sub_1002FC20C(void *a1, char a2, char a3)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  NSObject *v16;
  uint32_t *p_ivar_base_size;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint8_t *v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  NSObject *v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  id v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  id v68;
  void *v69;
  id v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint8_t *v93;
  uint64_t v94;
  char *v95;
  void *v96;

  v4 = v3;
  v8 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v8);
  v10 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v12 = __chkstk_darwin(v11).n128_u64[0];
  v14 = (char *)&v94 - v13;
  v15 = objc_msgSend(v4, "parentReminder", v12);
  if (!v15)
    goto LABEL_32;
  v16 = v15;
  p_ivar_base_size = (_DWORD *)(&RDDataAccess + 8);
  if ((a3 & 1) == 0 || (-[NSObject markedForDeletion](v15, "markedForDeletion") & 1) != 0)
  {
LABEL_17:
    v43 = objc_msgSend(v4, *((SEL *)p_ivar_base_size + 487));
    if (v43)
    {
      v44 = v43;
      v96 = 0;
      v45 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
      v46 = sub_1000E51DC((unint64_t *)&qword_1008448D0, (unint64_t *)&qword_10083AE90, off_1007D6708, (uint64_t)&protocol conformance descriptor for NSObject);
      v47 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v44, v45, v46);

      if ((v47 & 0xC000000000000001) != 0)
      {
        v48 = v47 < 0 ? v47 : v47 & 0xFFFFFFFFFFFFFF8;
        v49 = __CocoaSet.count.getter(v48);
      }
      else
      {
        v49 = *(_QWORD *)(v47 + 16);
      }
      swift_bridgeObjectRelease();
      if (v49)
        goto LABEL_26;
    }
    v50 = -[NSObject parentReminder](v16, "parentReminder");

    if (v50)
    {
LABEL_26:
      if (qword_100837118 != -1)
        swift_once(&qword_100837118, sub_1002ED77C);
      v51 = type metadata accessor for Logger(0);
      v52 = sub_10001AAA8(v51, (uint64_t)qword_1008448A0);
      v53 = Logger.logObject.getter(v52);
      v54 = static os_log_type_t.default.getter(v53);
      if (!os_log_type_enabled(v53, v54))
      {

        return 0;
      }
      v55 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "canSkipFixupReminderTree: Multiple layers of subtasks. Need to flatten.", v55, 2u);
      swift_slowDealloc(v55, -1, -1);

      goto LABEL_62;
    }

LABEL_32:
    if ((a2 & 1) != 0 && (objc_msgSend(v4, "markedForDeletion") & 1) == 0)
    {
      v57 = objc_msgSend(v4, "children");
      if (v57)
      {
        v58 = v57;
        v59 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
        v60 = sub_1000E51DC((unint64_t *)&qword_1008448D0, (unint64_t *)&qword_10083AE90, off_1007D6708, (uint64_t)&protocol conformance descriptor for NSObject);
        v61 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v58, v59, v60);

        if ((v61 & 0xC000000000000001) != 0)
        {
          if (v61 < 0)
            v62 = v61;
          else
            v62 = v61 & 0xFFFFFFFFFFFFFF8;
          if (__CocoaSet.count.getter(v62))
          {
LABEL_40:
            if (qword_100837118 != -1)
              swift_once(&qword_100837118, sub_1002ED77C);
            v63 = type metadata accessor for Logger(0);
            v64 = sub_10001AAA8(v63, (uint64_t)qword_1008448A0);
            v65 = Logger.logObject.getter(v64);
            v66 = static os_log_type_t.info.getter(v65);
            if (os_log_type_enabled(v65, v66))
            {
              v67 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v67 = 0;
              _os_log_impl((void *)&_mh_execute_header, v65, v66, "canSkipFixupReminderTree: List changed and has children. Need to validate children.", v67, 2u);
              swift_slowDealloc(v67, -1, -1);
            }

            v68 = objc_msgSend(v4, "list");
            if (v68)
            {
              v69 = v68;
              v70 = objc_msgSend(v68, "objectID");
              v71 = objc_msgSend(v70, "URIRepresentation");

              static URL._unconditionallyBridgeFromObjectiveC(_:)(v71);
              v72 = type metadata accessor for URL(0);
              v73 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v10, 0, 1, v72);
            }
            else
            {
              v87 = type metadata accessor for URL(0);
              v73 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 56))(v10, 1, 1, v87);
            }
            __chkstk_darwin(v73);
            *(&v94 - 2) = (uint64_t)v10;
            sub_1002ECE0C(sub_100300520, (uint64_t)(&v94 - 4), v61);
            v89 = v88;
            swift_bridgeObjectRelease();
            if ((v89 & 1) != 0)
            {
              v91 = Logger.logObject.getter(v90);
              v92 = static os_log_type_t.default.getter(v91);
              if (os_log_type_enabled(v91, v92))
              {
                v93 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v93 = 0;
                _os_log_impl((void *)&_mh_execute_header, v91, v92, "canSkipFixupReminderTree: Child list mismatch. Need to fixup.", v93, 2u);
                swift_slowDealloc(v93, -1, -1);
              }

              v86 = (uint64_t)v10;
              goto LABEL_72;
            }
            sub_10000882C((uint64_t)v10, (uint64_t *)&unk_100839C70);
            if (!a1)
              return 1;
            goto LABEL_49;
          }
        }
        else if (*(_QWORD *)(v61 + 16))
        {
          goto LABEL_40;
        }
        swift_bridgeObjectRelease();
      }
    }
    if (!a1)
      return 1;
LABEL_49:
    v53 = a1;
    v74 = -[NSObject children](v53, "children");
    if (v74)
    {
      v75 = v74;
      v76 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
      v77 = sub_1000E51DC((unint64_t *)&qword_1008448D0, (unint64_t *)&qword_10083AE90, off_1007D6708, (uint64_t)&protocol conformance descriptor for NSObject);
      v78 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v75, v76, v77);

      if ((v78 & 0xC000000000000001) != 0)
      {
        v79 = v78 < 0 ? v78 : v78 & 0xFFFFFFFFFFFFFF8;
        v80 = __CocoaSet.count.getter(v79);
      }
      else
      {
        v80 = *(_QWORD *)(v78 + 16);
      }
      swift_bridgeObjectRelease();
      if (v80)
      {
        if (qword_100837118 != -1)
          swift_once(&qword_100837118, sub_1002ED77C);
        v81 = type metadata accessor for Logger(0);
        v82 = sub_10001AAA8(v81, (uint64_t)qword_1008448A0);
        v83 = Logger.logObject.getter(v82);
        v84 = static os_log_type_t.default.getter(v83);
        if (os_log_type_enabled(v83, v84))
        {
          v85 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v85 = 0;
          _os_log_impl((void *)&_mh_execute_header, v83, v84, "canSkipFixupReminderTree: Moving across parent. We can't skip the validation because self's children may have been flattened to siblings in previous saves.", v85, 2u);
          swift_slowDealloc(v85, -1, -1);
        }

LABEL_62:
        return 0;
      }
    }

    return 1;
  }
  v95 = v10;
  v96 = a1;
  if (qword_100837118 != -1)
    swift_once(&qword_100837118, sub_1002ED77C);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_10001AAA8(v18, (uint64_t)qword_1008448A0);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.info.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "canSkipFixupReminderTree: Parent changed list. Need to validate siblings.", v22, 2u);
    v23 = v22;
    p_ivar_base_size = &RDDataAccess.ivar_base_size;
    swift_slowDealloc(v23, -1, -1);
  }

  v24 = objc_msgSend(v4, "list");
  if (v24)
  {
    v25 = v24;
    v26 = objc_msgSend(v24, "objectID");
    v27 = objc_msgSend(v26, "URIRepresentation");

    p_ivar_base_size = (_DWORD *)(&RDDataAccess + 8);
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v27);

    v28 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v14, 0, 1, v28);
  }
  else
  {
    v29 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v14, 1, 1, v29);
  }
  a1 = v96;
  v30 = objc_msgSend(v16, *((SEL *)p_ivar_base_size + 487));
  if (!v30)
  {
LABEL_16:
    sub_10000882C((uint64_t)v14, (uint64_t *)&unk_100839C70);
    v10 = v95;
    goto LABEL_17;
  }
  v31 = v30;
  v32 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v33 = sub_1000E51DC((unint64_t *)&qword_1008448D0, (unint64_t *)&qword_10083AE90, off_1007D6708, (uint64_t)&protocol conformance descriptor for NSObject);
  v34 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v31, v32, v33);

  __chkstk_darwin(v35);
  *(&v94 - 2) = (uint64_t)v14;
  sub_1002ECE0C(sub_100300800, (uint64_t)(&v94 - 4), v34);
  v37 = v36;
  swift_bridgeObjectRelease();
  if ((v37 & 1) == 0)
  {
    a1 = v96;
    p_ivar_base_size = &RDDataAccess.ivar_base_size;
    goto LABEL_16;
  }
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.default.getter(v39);
  if (os_log_type_enabled(v39, v40))
  {
    v41 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "canSkipFixupReminderTree: Sibling list mismatch. Need to fixup.", v41, 2u);
    swift_slowDealloc(v41, -1, -1);
    v42 = v16;
  }
  else
  {
    v42 = v39;
    v39 = v16;
  }

  v86 = (uint64_t)v14;
LABEL_72:
  sub_10000882C(v86, (uint64_t *)&unk_100839C70);
  return 0;
}

uint64_t sub_1002FCBE4(id *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  id v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  char v31;
  char *v32;
  uint64_t v33;
  char v34;
  void (*v35)(char *, uint64_t);
  char *v37;
  char *v38;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v38 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630((uint64_t *)&unk_100844920);
  __chkstk_darwin(v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v10);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v14 = __chkstk_darwin(v13).n128_u64[0];
  v16 = (char *)&v37 - v15;
  v17 = objc_msgSend(*a1, "list", v14);
  if (v17)
  {
    v18 = v17;
    v19 = objc_msgSend(v17, "objectID");
    v37 = v16;
    v20 = v9;
    v21 = v4;
    v22 = v7;
    v23 = v19;
    v24 = v5;
    v25 = v12;
    v26 = a2;
    v27 = objc_msgSend(v19, "URIRepresentation");

    v7 = v22;
    v4 = v21;
    v9 = v20;
    v16 = v37;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v27);

    a2 = v26;
    v12 = v25;
    v5 = v24;
    v28 = 0;
  }
  else
  {
    v28 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v16, v28, 1, v4);
  v29 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_100008868((uint64_t)v16, (uint64_t)v9, (uint64_t *)&unk_100839C70);
  sub_100008868(a2, v29, (uint64_t *)&unk_100839C70);
  v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v30((uint64_t)v9, 1, v4) != 1)
  {
    sub_100008868((uint64_t)v9, (uint64_t)v12, (uint64_t *)&unk_100839C70);
    if (v30(v29, 1, v4) != 1)
    {
      v32 = v38;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v38, v29, v4);
      v33 = sub_10009FC50(&qword_100844730, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v34 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v32, v4, v33);
      v35 = *(void (**)(char *, uint64_t))(v5 + 8);
      v35(v32, v4);
      sub_10000882C((uint64_t)v16, (uint64_t *)&unk_100839C70);
      v35(v12, v4);
      sub_10000882C((uint64_t)v9, (uint64_t *)&unk_100839C70);
      v31 = v34 ^ 1;
      return v31 & 1;
    }
    sub_10000882C((uint64_t)v16, (uint64_t *)&unk_100839C70);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
    goto LABEL_9;
  }
  sub_10000882C((uint64_t)v16, (uint64_t *)&unk_100839C70);
  if (v30(v29, 1, v4) != 1)
  {
LABEL_9:
    sub_10000882C((uint64_t)v9, (uint64_t *)&unk_100844920);
    v31 = 1;
    return v31 & 1;
  }
  sub_10000882C((uint64_t)v9, (uint64_t *)&unk_100839C70);
  v31 = 0;
  return v31 & 1;
}

void sub_1002FCF40(void *a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  double v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  id v23;
  uint64_t v24;

  if (qword_100837118 != -1)
    swift_once(&qword_100837118, sub_1002ED77C);
  v2 = type metadata accessor for Logger(0);
  sub_10001AAA8(v2, (uint64_t)qword_1008448A0);
  v22 = a1;
  v3 = Logger.logObject.getter(v22);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(32, -1);
    v6 = swift_slowAlloc(96, -1);
    v24 = v6;
    *(_DWORD *)v5 = 136315650;
    v23 = objc_msgSend(v22, "remObjectID");
    v7 = sub_10001A630((uint64_t *)&unk_100844910);
    v8 = String.init<A>(describing:)(&v23, v7);
    v23 = (id)sub_10001A820(v8, v9, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);

    *(_QWORD *)&v10 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v5 + 12) = 2080;
    v11 = objc_msgSend(v22, "parentReminder", v10);
    if (v11)
    {
      v12 = v11;
      v13 = objc_msgSend(v11, "remObjectID");

    }
    else
    {
      v13 = 0;
    }
    v23 = v13;
    v14 = String.init<A>(describing:)(&v23, v7);
    v23 = (id)sub_10001A820(v14, v15, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);

    *(_QWORD *)&v16 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v5 + 22) = 2080;
    v17 = objc_msgSend(v22, "list", v16);
    if (v17)
    {
      v18 = v17;
      v19 = objc_msgSend(v17, "remObjectID");

    }
    else
    {
      v19 = 0;
    }
    v23 = v19;
    v20 = String.init<A>(describing:)(&v23, v7);
    v23 = (id)sub_10001A820(v20, v21, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "validateAndFixupReminderTree END {objectID: %s, parentID: %s, listID: %s}", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy(v6, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
}

void sub_1002FD290(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  void *v33;
  void *v34;
  unint64_t v35;

  v3 = v2;
  sub_1002FF0E0(a1);
  v7 = v6;
  v35 = v6;
  v8 = objc_msgSend(a2, "recordID");
  v9 = objc_msgSend(v8, "recordName");

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v3), "ckIdentifierFromRecordName:", v9);

  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  v14 = sub_1002EE03C();
  if (v15)
  {
    v16 = v14;
    v17 = v15;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
    v34 = (void *)v7;
    v35 = 0x8000000000000000;
    sub_10028B8BC(v16, v17, v11, v13, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1002CAEAC(v11, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = v35;
  }
  v34 = &_swiftEmptyDictionarySingleton;
  v19 = a1 + 64;
  v20 = 1 << *(_BYTE *)(a1 + 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & *(_QWORD *)(a1 + 64);
  v23 = (unint64_t)(v20 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v24 = 0;
  while (1)
  {
    if (v22)
    {
      v25 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      v26 = v25 | (v24 << 6);
      goto LABEL_10;
    }
    v30 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v30 >= v23)
      goto LABEL_30;
    v31 = *(_QWORD *)(v19 + 8 * v30);
    ++v24;
    if (!v31)
    {
      v24 = v30 + 1;
      if (v30 + 1 >= v23)
        goto LABEL_30;
      v31 = *(_QWORD *)(v19 + 8 * v24);
      if (!v31)
      {
        v24 = v30 + 2;
        if (v30 + 2 >= v23)
          goto LABEL_30;
        v31 = *(_QWORD *)(v19 + 8 * v24);
        if (!v31)
        {
          v24 = v30 + 3;
          if (v30 + 3 >= v23)
            goto LABEL_30;
          v31 = *(_QWORD *)(v19 + 8 * v24);
          if (!v31)
          {
            v24 = v30 + 4;
            if (v30 + 4 >= v23)
              goto LABEL_30;
            v31 = *(_QWORD *)(v19 + 8 * v24);
            if (!v31)
              break;
          }
        }
      }
    }
LABEL_29:
    v22 = (v31 - 1) & v31;
    v26 = __clz(__rbit64(v31)) + (v24 << 6);
LABEL_10:
    v27 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v26);
    v28 = *v27;
    v29 = v27[1];
    v33 = &_swiftEmptySetSingleton;
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v7);
    sub_1002FF3FC(v28, v29, v7, &v34, (uint64_t *)&v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v32 = v30 + 5;
  if (v32 >= v23)
  {
LABEL_30:
    swift_release(a1);
    swift_bridgeObjectRelease();
    return;
  }
  v31 = *(_QWORD *)(v19 + 8 * v32);
  if (v31)
  {
    v24 = v32;
    goto LABEL_29;
  }
  while (1)
  {
    v24 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v24 >= v23)
      goto LABEL_30;
    v31 = *(_QWORD *)(v19 + 8 * v24);
    ++v32;
    if (v31)
      goto LABEL_29;
  }
LABEL_32:
  __break(1u);
}

BOOL sub_1002FD5A8(id *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v13;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)&v6 = __chkstk_darwin(v4).n128_u64[0];
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(*a1, "objectID", v6);
  v10 = objc_msgSend(v9, "URIRepresentation");

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v11 = sub_10009FC50(&qword_100844730, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)(v8, a2, v4, v11);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return (a2 & 1) == 0;
}

double sub_1002FD6BC(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4, uint64_t a5, uint8_t *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint8_t *v36;
  id v37;
  Swift::String v38;
  void *v39;
  NSString v40;
  NSString v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  __n128 v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t, __n128);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  void *v70;
  id v71;
  id v72;
  uint64_t v73;
  void (*v74)(uint8_t *, uint64_t, uint64_t, uint64_t);
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t, uint64_t, uint64_t);
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint8_t *);
  id v88;
  NSObject *v89;
  os_log_type_t v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  id v96;
  void *v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  void (*v107)(uint64_t, uint8_t *);
  uint8_t *v108;
  uint8_t *v109;
  NSObject *v110;
  uint8_t *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint8_t *v116;
  uint8_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint8_t *v120;
  id v121;
  void *v122;
  uint64_t v123;
  uint8_t *v124;
  Swift::String v125;
  id v126;
  id v127;
  void *v128;
  id v129;
  uint64_t v130;
  void *v131;
  void *v132;
  uint8_t *v133;
  Swift::String v134;
  Swift::String v135;
  id v136;
  void *v137;
  uint64_t v138;
  uint8_t *v139;
  uint8_t *v140;
  uint64_t v141;
  Swift::String v142;
  Swift::String v143;
  id v144;
  void *v145;
  id v146;
  uint64_t v147;
  void *v148;
  void *v149;
  Swift::String v150;
  Swift::String v151;
  id v152;
  uint64_t v153;
  double result;
  unint64_t v155;
  void *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint8_t *v160;
  uint8_t **v161;
  id v162;
  uint8_t *v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  __n128 v171;
  uint64_t v172;
  uint8_t *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint8_t *v177;
  void (*v178)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint8_t *v183;
  uint64_t v184;
  uint64_t v185;
  void (*v186)(uint64_t, uint64_t);
  id v187;
  uint64_t v188;
  uint8_t *v189;
  uint64_t v190;
  unint64_t v191;
  char v192[8];

  v170 = a5;
  v162 = a4;
  v169 = a3;
  v182 = a2;
  v181 = sub_10001A630((uint64_t *)&unk_100844920);
  __chkstk_darwin(v181);
  v9 = (uint64_t)&v155 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v168 = (uint64_t)&v155 - v11;
  v12 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v12);
  v159 = (uint64_t)&v155 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v175 = (char *)&v155 - v15;
  __chkstk_darwin(v16);
  v158 = (uint64_t)&v155 - v17;
  __chkstk_darwin(v18);
  v20 = (uint8_t *)&v155 - v19;
  __chkstk_darwin(v21);
  v23 = (uint8_t *)&v155 - v22;
  v24 = type metadata accessor for URL(0);
  v185 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v167 = (char *)&v155 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v174 = (uint64_t)&v155 - v27;
  __chkstk_darwin(v28);
  v30 = (char *)&v155 - v29;
  if ((unint64_t)a1 >> 62)
    goto LABEL_80;
  v31 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v31)
  {
    v166 = a1 & 0xC000000000000001;
    v32 = swift_beginAccess(v182, v192, 0, 0);
    v161 = &v189;
    v33 = 4;
    v32.n128_u64[0] = 136315138;
    v171 = v32;
    v157 = (char *)&type metadata for Any + 8;
    v173 = a6;
    v156 = (void *)0x80000001006FF930;
    v155 = 0x80000001006FF970;
    v172 = a1;
    v184 = v24;
    v177 = v23;
    v165 = v9;
    v163 = v20;
    v176 = v30;
    v164 = v31;
    while (1)
    {
      v42 = v33 - 4;
      v180 = v33;
      if (!v166)
        break;
      v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v33 - 4, a1);
      v44 = v42 + 1;
      if (__OFADD__(v42, 1))
        goto LABEL_79;
LABEL_13:
      v179 = v44;
      v45 = v43;
      v46 = objc_msgSend(v45, "objectID", v155);
      v47 = objc_msgSend(v46, "URIRepresentation");

      static URL._unconditionallyBridgeFromObjectiveC(_:)(v47);
      v48 = *v182;
      swift_bridgeObjectRetain(*v182);
      LOBYTE(v47) = sub_1001B2984((uint64_t)v30, v48);
      v49 = swift_bridgeObjectRelease();
      if ((v47 & 1) != 0)
      {

        (*(void (**)(char *, uint64_t))(v185 + 8))(v30, v24);
        goto LABEL_84;
      }
      v50 = v30;
      v51 = v185;
      v52 = *(void (**)(char *, char *, uint64_t, __n128))(v185 + 16);
      v53 = (uint64_t)v167;
      v52(v167, v50, v24, v49);
      swift_beginAccess(v182, &v190, 33, 0);
      v54 = v174;
      sub_1002DC508(v174, v53);
      swift_endAccess(&v190);
      v186 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
      v186(v54, v24);
      if (qword_100837118 != -1)
        swift_once(&qword_100837118, sub_1002ED77C);
      v55 = type metadata accessor for Logger(0);
      v56 = sub_10001AAA8(v55, (uint64_t)qword_1008448A0);
      v37 = v45;
      v183 = (uint8_t *)v56;
      v57 = Logger.logObject.getter(v37);
      v58 = static os_log_type_t.default.getter(v57);
      v59 = os_log_type_enabled(v57, v58);
      v187 = v37;
      if (v59)
      {
        v60 = swift_slowAlloc(12, -1);
        v61 = swift_slowAlloc(32, -1);
        v190 = v61;
        *(_DWORD *)v60 = v171.n128_u32[0];
        v62 = objc_msgSend(v187, "remObjectID");
        v188 = (uint64_t)v62;
        v63 = sub_10001A630((uint64_t *)&unk_100844910);
        v64 = Optional.descriptionOrNil.getter(v63);
        v66 = v65;

        *(_QWORD *)(v60 + 4) = sub_10001A820(v64, v66, &v190);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "validateAndFixupReminderTree: ...Going to update child. {objectID: %s}", (uint8_t *)v60, 0xCu);
        swift_arrayDestroy(v61, 1, v157);
        v67 = v61;
        v37 = v187;
        v68 = (uint64_t)v175;
        swift_slowDealloc(v67, -1, -1);
        swift_slowDealloc(v60, -1, -1);

        v20 = v163;
      }
      else
      {

        v20 = v163;
        v68 = (uint64_t)v175;
      }
      v69 = objc_msgSend(v37, "parentReminder");
      if (v69)
      {
        v70 = v69;
        v71 = objc_msgSend(v69, "objectID");
        v72 = objc_msgSend(v71, "URIRepresentation");

        static URL._unconditionallyBridgeFromObjectiveC(_:)(v72);
        v73 = v185;
        v74 = *(void (**)(uint8_t *, uint64_t, uint64_t, uint64_t))(v185 + 56);
        v75 = v23;
        v76 = 0;
      }
      else
      {
        v73 = v185;
        v74 = *(void (**)(uint8_t *, uint64_t, uint64_t, uint64_t))(v185 + 56);
        v75 = v23;
        v76 = 1;
      }
      v24 = v184;
      v74(v75, v76, 1, v184);
      ((void (*)(uint8_t *, uint64_t, uint64_t))v52)(v20, v169, v24);
      v178 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v74;
      v74(v20, 0, 1, v24);
      v77 = v168;
      v78 = v168 + *(int *)(v181 + 48);
      sub_100008868((uint64_t)v23, v168, (uint64_t *)&unk_100839C70);
      sub_100008868((uint64_t)v20, v78, (uint64_t *)&unk_100839C70);
      a6 = v23;
      v79 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
      if (v79(v77, 1, v24) == 1)
      {
        sub_10000882C((uint64_t)v20, (uint64_t *)&unk_100839C70);
        sub_10000882C((uint64_t)a6, (uint64_t *)&unk_100839C70);
        v80 = v79(v78, 1, v24);
        v30 = v176;
        if (v80 == 1)
        {
          sub_10000882C(v77, (uint64_t *)&unk_100839C70);
          goto LABEL_33;
        }
      }
      else
      {
        a6 = (uint8_t *)v24;
        v81 = v158;
        sub_100008868(v77, v158, (uint64_t *)&unk_100839C70);
        v82 = v79(v78, 1, (uint64_t)a6);
        v30 = v176;
        if (v82 != 1)
        {
          v83 = v174;
          (*(void (**)(uint64_t, uint64_t, uint8_t *))(v185 + 32))(v174, v78, a6);
          v84 = sub_10009FC50(&qword_100844730, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
          v85 = dispatch thunk of static Equatable.== infix(_:_:)(v81, v83, a6, v84);
          v86 = v68;
          v87 = (void (*)(uint64_t, uint8_t *))v186;
          v186(v83, (uint64_t)a6);
          sub_10000882C((uint64_t)v20, (uint64_t *)&unk_100839C70);
          sub_10000882C((uint64_t)v177, (uint64_t *)&unk_100839C70);
          v87(v81, a6);
          v68 = v86;
          v37 = v187;
          sub_10000882C(v77, (uint64_t *)&unk_100839C70);
          v24 = (uint64_t)a6;
          if ((v85 & 1) != 0)
            goto LABEL_33;
          goto LABEL_29;
        }
        sub_10000882C((uint64_t)v20, (uint64_t *)&unk_100839C70);
        sub_10000882C((uint64_t)v177, (uint64_t *)&unk_100839C70);
        v186(v81, (uint64_t)a6);
      }
      sub_10000882C(v77, (uint64_t *)&unk_100844920);
LABEL_29:
      v88 = v162;
      a6 = v183;
      v89 = Logger.logObject.getter(v88);
      v90 = static os_log_type_t.default.getter(v89);
      if (os_log_type_enabled(v89, v90))
      {
        v20 = (uint8_t *)swift_slowAlloc(12, -1);
        v91 = swift_slowAlloc(32, -1);
        v190 = v91;
        *(_DWORD *)v20 = v171.n128_u32[0];
        v160 = v20 + 4;
        v92 = objc_msgSend(v88, "remObjectID");
        v188 = (uint64_t)v92;
        v93 = sub_10001A630((uint64_t *)&unk_100844910);
        a6 = (uint8_t *)Optional.descriptionOrNil.getter(v93);
        v95 = v94;

        v188 = sub_10001A820((uint64_t)a6, v95, &v190);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, v161);

        v30 = v176;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v89, v90, "validateAndFixupReminderTree: ......Updated {child.parent: %s}", v20, 0xCu);
        swift_arrayDestroy(v91, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v91, -1, -1);
        swift_slowDealloc(v20, -1, -1);

      }
      else
      {

      }
      v37 = v187;
      objc_msgSend(v187, "setParentReminder:", v88);
      v68 = (uint64_t)v175;
      v24 = v184;
LABEL_33:
      v96 = objc_msgSend(v37, "list");
      if (v96)
      {
        v97 = v96;
        a6 = (uint8_t *)objc_msgSend(v96, "objectID");
        v98 = -[uint8_t URIRepresentation](a6, "URIRepresentation");

        static URL._unconditionallyBridgeFromObjectiveC(_:)(v98);
        v99 = 0;
      }
      else
      {
        v99 = 1;
      }
      v178(v68, v99, 1, v24);
      v9 = v165;
      v100 = v165 + *(int *)(v181 + 48);
      sub_100008868(v68, v165, (uint64_t *)&unk_100839C70);
      sub_100008868(v170, v100, (uint64_t *)&unk_100839C70);
      if (v79(v9, 1, v24) == 1)
      {
        sub_10000882C(v68, (uint64_t *)&unk_100839C70);
        v101 = v79(v100, 1, v24);
        v23 = v177;
        if (v101 == 1)
        {
          sub_10000882C(v9, (uint64_t *)&unk_100839C70);
LABEL_43:
          v186((uint64_t)v30, v24);

          a1 = v172;
          goto LABEL_7;
        }
        goto LABEL_41;
      }
      a6 = (uint8_t *)v24;
      v102 = v159;
      sub_100008868(v9, v159, (uint64_t *)&unk_100839C70);
      if (v79(v100, 1, (uint64_t)a6) == 1)
      {
        sub_10000882C(v68, (uint64_t *)&unk_100839C70);
        v186(v102, (uint64_t)a6);
        v24 = (uint64_t)a6;
LABEL_41:
        sub_10000882C(v9, (uint64_t *)&unk_100844920);
        goto LABEL_44;
      }
      v103 = v174;
      (*(void (**)(uint64_t, uint64_t, uint8_t *))(v185 + 32))(v174, v100, a6);
      v104 = sub_10009FC50(&qword_100844730, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v105 = dispatch thunk of static Equatable.== infix(_:_:)(v102, v103, a6, v104);
      v106 = v103;
      v107 = (void (*)(uint64_t, uint8_t *))v186;
      v186(v106, (uint64_t)a6);
      sub_10000882C(v68, (uint64_t *)&unk_100839C70);
      v107(v102, a6);
      sub_10000882C(v9, (uint64_t *)&unk_100839C70);
      v24 = (uint64_t)a6;
      v23 = v177;
      if ((v105 & 1) != 0)
        goto LABEL_43;
LABEL_44:
      v108 = v173;
      v109 = v173;
      a6 = v183;
      v110 = Logger.logObject.getter(v109);
      v20 = (uint8_t *)static os_log_type_t.default.getter(v110);
      if (os_log_type_enabled(v110, (os_log_type_t)v20))
      {
        v111 = (uint8_t *)swift_slowAlloc(12, -1);
        v112 = swift_slowAlloc(32, -1);
        v190 = v112;
        *(_DWORD *)v111 = v171.n128_u32[0];
        if (v108)
          v108 = (uint8_t *)-[uint8_t remObjectID](v109, "remObjectID");
        v9 = (uint64_t)(v111 + 4);
        v188 = (uint64_t)v108;
        v113 = sub_10001A630((uint64_t *)&unk_100844910);
        a6 = (uint8_t *)Optional.descriptionOrNil.getter(v113);
        v115 = v114;

        v188 = sub_10001A820((uint64_t)a6, v115, &v190);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, v161);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v110, (os_log_type_t)v20, "validateAndFixupReminderTree: ......Updated {child.list: %s}", v111, 0xCu);
        swift_arrayDestroy(v112, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v112, -1, -1);
        swift_slowDealloc(v111, -1, -1);

        a1 = v172;
        v24 = v184;
        v30 = v176;
        v37 = v187;
      }
      else
      {

        a1 = v172;
      }
      if (!v173)
        goto LABEL_6;
      v183 = v109;
      v116 = v109;
      v117 = (uint8_t *)objc_msgSend(v37, "ckZoneOwnerName");
      if (v117)
      {
        v20 = v117;
        v118 = a1;
        v119 = static String._unconditionallyBridgeFromObjectiveC(_:)(v117);
        a6 = v120;

      }
      else
      {
        v118 = a1;
        v119 = 0;
        a6 = 0;
      }
      v121 = -[uint8_t ckZoneOwnerName](v116, "ckZoneOwnerName");
      if (!v121)
      {
        a1 = v118;
        if (a6)
          goto LABEL_62;
LABEL_75:

        goto LABEL_76;
      }
      v122 = v121;
      v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(v121);
      v20 = v124;

      if (!a6)
      {
        a1 = v118;
        if (v20)
        {
LABEL_62:
          swift_bridgeObjectRelease();
LABEL_63:
          v190 = 0;
          v191 = 0xE000000000000000;
          _StringGuts.grow(_:)(100);
          v125._countAndFlagsBits = 0xD000000000000031;
          v125._object = v156;
          String.append(_:)(v125);
          v126 = v187;
          v127 = objc_msgSend(v187, "remObjectID");
          if (v127)
          {
            v128 = v127;
            v129 = objc_msgSend(v127, "description");

            v130 = static String._unconditionallyBridgeFromObjectiveC(_:)(v129);
            v132 = v131;

          }
          else
          {
            v132 = (void *)0xE300000000000000;
            v130 = 7104878;
          }
          v133 = v116;
          v134._countAndFlagsBits = v130;
          v134._object = v132;
          String.append(_:)(v134);
          swift_bridgeObjectRelease();
          v135._countAndFlagsBits = 0x4E72656E776F205DLL;
          v135._object = (void *)0xEE00203D20656D61;
          String.append(_:)(v135);
          v136 = objc_msgSend(v126, "ckZoneOwnerName");
          v109 = v183;
          if (v136)
          {
            v137 = v136;
            v138 = static String._unconditionallyBridgeFromObjectiveC(_:)(v136);
            v140 = v139;

          }
          else
          {
            v138 = 0;
            v140 = 0;
          }
          v188 = v138;
          v189 = v140;
          v141 = sub_10001A630((uint64_t *)&unk_10083A370);
          v142._countAndFlagsBits = String.init<A>(describing:)(&v188, v141);
          String.append(_:)(v142);
          swift_bridgeObjectRelease();
          v143._countAndFlagsBits = 0x6E6572727563202CLL;
          v143._object = (void *)0xEE005B7473694C74;
          String.append(_:)(v143);
          v144 = -[uint8_t remObjectID](v133, "remObjectID");
          if (v144)
          {
            v145 = v144;
            v146 = objc_msgSend(v144, "description");

            v147 = static String._unconditionallyBridgeFromObjectiveC(_:)(v146);
            v149 = v148;

          }
          else
          {
            v149 = (void *)0xE300000000000000;
            v147 = 7104878;
          }
          v150._countAndFlagsBits = v147;
          v150._object = v149;
          String.append(_:)(v150);
          swift_bridgeObjectRelease();
          v151._countAndFlagsBits = 0x72656E6E776F205DLL;
          v151._object = (void *)0xEF203D20656D614ELL;
          String.append(_:)(v151);
          v152 = -[uint8_t ckZoneOwnerName](v133, "ckZoneOwnerName");
          if (v152)
          {
            v34 = v152;
            v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v152);
            v20 = v36;

          }
          else
          {
            v35 = 0;
            v20 = 0;
          }
          v37 = v187;
          v188 = v35;
          v189 = v20;
          v38._countAndFlagsBits = String.init<A>(describing:)(&v188, v141);
          String.append(_:)(v38);
          swift_bridgeObjectRelease();
          v9 = v191;
          v39 = (void *)objc_opt_self(ICCloudContext);
          v40 = String._bridgeToObjectiveC()();
          v41 = String._bridgeToObjectiveC()();
          a6 = (uint8_t *)String._bridgeToObjectiveC()();
          objc_msgSend(v39, "faultAndPromptToFileRadarWithICTap2RadarType:title:description:logMessage:", 4, v40, v41, a6, swift_bridgeObjectRelease().n128_f64[0]);

          a1 = v172;
          v24 = v184;
          v30 = v176;
          goto LABEL_6;
        }
        goto LABEL_75;
      }
      if (!v20)
        goto LABEL_62;
      a1 = v118;
      if (v119 != v123 || a6 != v20)
      {
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v119, a6, v123, v20, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v9 & 1) == 0)
          goto LABEL_63;
        goto LABEL_75;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_76:
      v109 = v183;
      v24 = v184;
      v37 = v187;
LABEL_6:
      objc_msgSend(v37, "setList:", v109);

      v186((uint64_t)v30, v24);
      v23 = v177;
LABEL_7:
      v33 = v180 + 1;
      if (v179 == v164)
        goto LABEL_84;
    }
    v43 = *(id *)(a1 + 8 * v33);
    v44 = v42 + 1;
    if (!__OFADD__(v42, 1))
      goto LABEL_13;
LABEL_79:
    __break(1u);
LABEL_80:
    if (a1 < 0)
      v153 = a1;
    else
      v153 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v31 = _CocoaArrayWrapper.endIndex.getter(v153);
  }
LABEL_84:
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_1002FE90C(void **a1, uint64_t *a2, void (*a3)(char *, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void *v29;
  uint64_t v30;
  id v31;
  id v32;
  __n128 v33;
  void (*v34)(char *, uint64_t, __n128);
  void (*v35)(char *, void (*)(_QWORD, _QWORD), uint64_t);
  id v36;
  void *v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  char v50;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  id v57;
  void *v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char v68;
  void (*v69)(uint64_t, uint64_t);
  id v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  void (*v76)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82[24];
  void (*v83)(char *, uint64_t);

  v80 = a4;
  v83 = a3;
  v79 = sub_10001A630((uint64_t *)&unk_100844920);
  __chkstk_darwin(v79);
  v74 = (uint64_t)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v77 = (uint64_t)&v70 - v8;
  v9 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v9);
  v71 = (uint64_t)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v73 = (char *)&v70 - v12;
  __chkstk_darwin(v13);
  v81 = (uint64_t)&v70 - v14;
  __chkstk_darwin(v15);
  v76 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v70 - v16);
  __chkstk_darwin(v17);
  v19 = (char *)&v70 - v18;
  __chkstk_darwin(v20);
  v75 = (char *)&v70 - v21;
  v22 = type metadata accessor for URL(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (char *)&v70 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v28 = (char *)&v70 - v27;
  v29 = *a1;
  swift_beginAccess(a2, v82, 0, 0);
  v30 = *a2;
  v31 = objc_msgSend(v29, "objectID", swift_bridgeObjectRetain(v30).n128_f64[0]);
  v32 = objc_msgSend(v31, "URIRepresentation");

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v32);
  LOBYTE(v32) = sub_1001B2984((uint64_t)v28, v30);
  v33 = swift_bridgeObjectRelease();
  v34 = *(void (**)(char *, uint64_t, __n128))(v23 + 8);
  v72 = v28;
  v34(v28, v22, v33);
  v78 = v23;
  v35 = *(void (**)(char *, void (*)(_QWORD, _QWORD), uint64_t))(v23 + 16);
  v35(v25, (void (*)(_QWORD, _QWORD))v83, v22);
  if ((v32 & 1) == 0)
  {
    v83 = (void (*)(char *, uint64_t))v34;
    v70 = v29;
    v36 = objc_msgSend(v29, "parentReminder");
    if (v36)
    {
      v37 = v36;
      v38 = objc_msgSend(v36, "objectID");
      v39 = objc_msgSend(v38, "URIRepresentation");

      v40 = (uint64_t)v75;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v39);

      v41 = v78;
      v42 = *(char **)(v78 + 56);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v42)(v40, 0, 1, v22);
    }
    else
    {
      v41 = v78;
      v42 = *(char **)(v78 + 56);
      v40 = (uint64_t)v75;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v42)(v75, 1, 1, v22);
    }
    v43 = (uint64_t)v76;
    v35(v19, (void (*)(_QWORD, _QWORD))v25, v22);
    v76 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v42;
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v42)(v19, 0, 1, v22);
    v44 = v77;
    v45 = v77 + *(int *)(v79 + 48);
    sub_100008868(v40, v77, (uint64_t *)&unk_100839C70);
    sub_100008868((uint64_t)v19, v45, (uint64_t *)&unk_100839C70);
    v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48);
    if (v46(v44, 1, v22) == 1)
    {
      sub_10000882C((uint64_t)v19, (uint64_t *)&unk_100839C70);
      sub_10000882C(v40, (uint64_t *)&unk_100839C70);
      v83(v25, v22);
      if (v46(v45, 1, v22) == 1)
      {
        sub_10000882C(v44, (uint64_t *)&unk_100839C70);
        v47 = v81;
        sub_100008868(v80, v81, (uint64_t *)&unk_100839C70);
        goto LABEL_17;
      }
    }
    else
    {
      sub_100008868(v44, v43, (uint64_t *)&unk_100839C70);
      if (v46(v45, 1, v22) != 1)
      {
        v52 = v72;
        (*(void (**)(char *, uint64_t, uint64_t))(v78 + 32))(v72, v45, v22);
        v53 = sub_10009FC50(&qword_100844730, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        LODWORD(v75) = dispatch thunk of static Equatable.== infix(_:_:)(v43, v52, v22, v53);
        v54 = v52;
        v55 = v44;
        v56 = v83;
        v83(v54, v22);
        sub_10000882C((uint64_t)v19, (uint64_t *)&unk_100839C70);
        sub_10000882C(v40, (uint64_t *)&unk_100839C70);
        v56(v25, v22);
        v56((char *)v43, v22);
        sub_10000882C(v55, (uint64_t *)&unk_100839C70);
        v47 = v81;
        sub_100008868(v80, v81, (uint64_t *)&unk_100839C70);
        if ((v75 & 1) == 0)
          goto LABEL_13;
LABEL_17:
        v57 = objc_msgSend(v70, "list");
        if (v57)
        {
          v58 = v57;
          v59 = objc_msgSend(v57, "objectID");
          v60 = objc_msgSend(v59, "URIRepresentation");

          v61 = (uint64_t)v73;
          static URL._unconditionallyBridgeFromObjectiveC(_:)(v60);

          v62 = 0;
        }
        else
        {
          v62 = 1;
          v61 = (uint64_t)v73;
        }
        v76(v61, v62, 1, v22);
        v63 = v74;
        v64 = v74 + *(int *)(v79 + 48);
        sub_100008868(v61, v74, (uint64_t *)&unk_100839C70);
        sub_100008868(v47, v64, (uint64_t *)&unk_100839C70);
        if (v46(v63, 1, v22) == 1)
        {
          sub_10000882C(v61, (uint64_t *)&unk_100839C70);
          sub_10000882C(v47, (uint64_t *)&unk_100839C70);
          if (v46(v64, 1, v22) == 1)
          {
            v49 = v63;
            goto LABEL_14;
          }
        }
        else
        {
          v65 = v71;
          sub_100008868(v63, v71, (uint64_t *)&unk_100839C70);
          if (v46(v64, 1, v22) != 1)
          {
            v66 = v72;
            (*(void (**)(char *, uint64_t, uint64_t))(v78 + 32))(v72, v64, v22);
            v67 = sub_10009FC50(&qword_100844730, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
            v68 = dispatch thunk of static Equatable.== infix(_:_:)(v65, v66, v22, v67);
            v69 = (void (*)(uint64_t, uint64_t))v83;
            v83(v66, v22);
            sub_10000882C(v61, (uint64_t *)&unk_100839C70);
            sub_10000882C(v47, (uint64_t *)&unk_100839C70);
            v69(v65, v22);
            sub_10000882C(v63, (uint64_t *)&unk_100839C70);
            v50 = v68 ^ 1;
            return v50 & 1;
          }
          sub_10000882C(v61, (uint64_t *)&unk_100839C70);
          sub_10000882C(v47, (uint64_t *)&unk_100839C70);
          v83((char *)v65, v22);
        }
        sub_10000882C(v63, (uint64_t *)&unk_100844920);
        v50 = 1;
        return v50 & 1;
      }
      sub_10000882C((uint64_t)v19, (uint64_t *)&unk_100839C70);
      sub_10000882C(v40, (uint64_t *)&unk_100839C70);
      v48 = (void (*)(uint64_t, uint64_t))v83;
      v83(v25, v22);
      v48(v43, v22);
    }
    sub_10000882C(v44, (uint64_t *)&unk_100844920);
    goto LABEL_12;
  }
  ((void (*)(char *, uint64_t))v34)(v25, v22);
LABEL_12:
  v47 = v81;
  sub_100008868(v80, v81, (uint64_t *)&unk_100839C70);
LABEL_13:
  v49 = v47;
LABEL_14:
  sub_10000882C(v49, (uint64_t *)&unk_100839C70);
  v50 = 0;
  return v50 & 1;
}

void sub_1002FF0E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  Swift::Int v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD v42[9];
  _QWORD *v43;

  v3 = a1 + 64;
  v2 = *(_QWORD *)(a1 + 64);
  v41 = &_swiftEmptyDictionarySingleton;
  v43 = &_swiftEmptyDictionarySingleton;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & v2;
  v7 = (unint64_t)(63 - v4) >> 6;
  swift_bridgeObjectRetain(a1);
  v8 = 0;
  if (!v6)
    goto LABEL_8;
LABEL_5:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v10 = v9 | (v8 << 6);
  while (1)
  {
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v13 = *v11;
    v12 = v11[1];
    v14 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v10);
    swift_bridgeObjectRetain(v12);
    v15 = v14;
    v16 = objc_msgSend(v15, "ckParentReminderIdentifier");
    if (v16)
    {
      v21 = v16;
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v39 = v23;
      v40 = v22;

      v24 = v41;
      v25 = v41[2];
      if (v41[3] <= v25)
      {
        sub_1002CCF14(v25 + 1, 1);
        v24 = v43;
      }
      v41 = v24;
      Hasher.init(_seed:)(v42, v24[5]);
      String.hash(into:)(v42, v13, v12);
      v26 = Hasher._finalize()();
      v27 = (char *)(v41 + 8);
      v28 = -1 << *((_BYTE *)v41 + 32);
      v29 = v26 & ~v28;
      v30 = v29 >> 6;
      if (((-1 << v29) & ~v41[(v29 >> 6) + 8]) == 0)
      {
        v32 = 0;
        v33 = (unint64_t)(63 - v28) >> 6;
        while (++v30 != v33 || (v32 & 1) == 0)
        {
          v34 = v30 == v33;
          if (v30 == v33)
            v30 = 0;
          v32 |= v34;
          v35 = *(_QWORD *)&v27[8 * v30];
          if (v35 != -1)
          {
            v31 = __clz(__rbit64(~v35)) + (v30 << 6);
            goto LABEL_36;
          }
        }
        goto LABEL_40;
      }
      v31 = __clz(__rbit64((-1 << v29) & ~v41[(v29 >> 6) + 8])) | v29 & 0x7FFFFFFFFFFFFFC0;
LABEL_36:
      *(_QWORD *)&v27[(v31 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v31;
      v36 = 16 * v31;
      v37 = (_QWORD *)(v41[6] + v36);
      *v37 = v13;
      v37[1] = v12;
      v38 = (uint64_t *)(v41[7] + v36);
      *v38 = v40;
      v38[1] = v39;
      ++v41[2];

      if (v6)
        goto LABEL_5;
    }
    else
    {

      swift_bridgeObjectRelease();
      if (v6)
        goto LABEL_5;
    }
LABEL_8:
    v17 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    if (v17 >= v7)
      goto LABEL_38;
    v18 = *(_QWORD *)(v3 + 8 * v17);
    v19 = v8 + 1;
    if (!v18)
    {
      v19 = v8 + 2;
      if (v8 + 2 >= v7)
        goto LABEL_38;
      v18 = *(_QWORD *)(v3 + 8 * v19);
      if (!v18)
      {
        v19 = v8 + 3;
        if (v8 + 3 >= v7)
          goto LABEL_38;
        v18 = *(_QWORD *)(v3 + 8 * v19);
        if (!v18)
        {
          v19 = v8 + 4;
          if (v8 + 4 >= v7)
            goto LABEL_38;
          v18 = *(_QWORD *)(v3 + 8 * v19);
          if (!v18)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v18 - 1) & v18;
    v10 = __clz(__rbit64(v18)) + (v19 << 6);
    v8 = v19;
  }
  v20 = v8 + 5;
  if (v8 + 5 >= v7)
  {
LABEL_38:
    sub_1000C6560(a1);
    return;
  }
  v18 = *(_QWORD *)(v3 + 8 * v20);
  if (v18)
  {
    v19 = v8 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v19 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v19 >= v7)
      goto LABEL_38;
    v18 = *(_QWORD *)(v3 + 8 * v19);
    ++v20;
    if (v18)
      goto LABEL_23;
  }
LABEL_41:
  __break(1u);
}

uint64_t sub_1002FF3FC(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  unint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char isUniquelyReferenced_nonNull_native;
  char v52;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;

  if (qword_100837118 != -1)
    swift_once(&qword_100837118, sub_1002ED77C);
  v10 = type metadata accessor for Logger(0);
  sub_10001AAA8(v10, (uint64_t)qword_1008448A0);
  v11 = swift_bridgeObjectRetain_n(a2, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v53 = a5;
    v15 = swift_slowAlloc(32, -1);
    v56 = v15;
    *(_DWORD *)v14 = 136446210;
    swift_bridgeObjectRetain(a2);
    v55 = sub_10001A820(a1, a2, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "findReminderRoot BEGIN {id: %{public}s}", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    v16 = v15;
    a5 = v53;
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v17 = *a4;
  if (*(_QWORD *)(*a4 + 16))
  {
    swift_bridgeObjectRetain(a2);
    v18 = sub_10001A6DC(a1, a2);
    if ((v19 & 1) != 0)
    {
      v20 = (uint64_t *)(*(_QWORD *)(v17 + 56) + 16 * v18);
      v21 = *v20;
      v22 = v20[1];
      swift_bridgeObjectRetain_n(v22, 3);
      swift_bridgeObjectRelease();
      v23 = swift_bridgeObjectRetain_n(a2, 2);
      v24 = Logger.logObject.getter(v23);
      v25 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v24, v25))
      {
        v26 = swift_slowAlloc(22, -1);
        v27 = swift_slowAlloc(64, -1);
        v56 = v27;
        *(_DWORD *)v26 = 136446466;
        swift_bridgeObjectRetain(a2);
        v55 = sub_10001A820(a1, a2, &v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
        swift_bridgeObjectRelease_n(a2, 3);
        *(_WORD *)(v26 + 12) = 2082;
        swift_bridgeObjectRetain(v22);
        v55 = sub_10001A820(v21, v22, &v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
        swift_bridgeObjectRelease_n(v22, 3);
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "findReminderRoot: Root already computed. {%{public}s => %{public}s}", (uint8_t *)v26, 0x16u);
        swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v27, -1, -1);
        swift_slowDealloc(v26, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v22, 2);
        swift_bridgeObjectRelease_n(a2, 2);
      }
      goto LABEL_25;
    }
    swift_bridgeObjectRelease();
  }
  if ((sub_1001B2278(a1, a2, *a5) & 1) != 0)
  {
    v28 = swift_bridgeObjectRetain_n(a2, 4);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = swift_slowAlloc(22, -1);
      v32 = swift_slowAlloc(64, -1);
      v56 = v32;
      *(_DWORD *)v31 = 136446466;
      swift_bridgeObjectRetain(a2);
      v55 = sub_10001A820(a1, a2, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      swift_bridgeObjectRelease_n(a2, 3);
      *(_WORD *)(v31 + 12) = 2082;
      swift_bridgeObjectRetain(a2);
      v55 = sub_10001A820(a1, a2, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      swift_bridgeObjectRelease_n(a2, 3);
      v33 = "findReminderRoot: Already visited this reminder. There is a loop. Assuming root is self. {%{public}s => %{public}s}";
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, v29, v30, v33, (uint8_t *)v31, 0x16u);
      swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);

LABEL_24:
      swift_bridgeObjectRetain_n(a2, 2);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a4);
      v56 = *a4;
      *a4 = 0x8000000000000000;
      sub_10028B8BC(a1, a2, a1, a2, isUniquelyReferenced_nonNull_native);
      *a4 = v56;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain(a2);
      v21 = a1;
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  swift_bridgeObjectRetain(a2);
  sub_1002DB0E4(&v56, a1, a2);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a3 + 16))
  {
LABEL_20:
    v49 = swift_bridgeObjectRetain_n(a2, 4);
    v29 = Logger.logObject.getter(v49);
    v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = swift_slowAlloc(22, -1);
      v32 = swift_slowAlloc(64, -1);
      v56 = v32;
      *(_DWORD *)v31 = 136446466;
      swift_bridgeObjectRetain(a2);
      v55 = sub_10001A820(a1, a2, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      swift_bridgeObjectRelease_n(a2, 3);
      *(_WORD *)(v31 + 12) = 2082;
      swift_bridgeObjectRetain(a2);
      v55 = sub_10001A820(a1, a2, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      swift_bridgeObjectRelease_n(a2, 3);
      v33 = "findReminderRoot: This reminder has no parent. The root is self. {%{public}s => %{public}s}";
      goto LABEL_22;
    }
LABEL_23:

    swift_bridgeObjectRelease_n(a2, 4);
    goto LABEL_24;
  }
  swift_bridgeObjectRetain(a2);
  v34 = sub_10001A6DC(a1, a2);
  if ((v35 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  v36 = (uint64_t *)(*(_QWORD *)(a3 + 56) + 16 * v34);
  v37 = *v36;
  v38 = v36[1];
  swift_bridgeObjectRetain(v38);
  v39 = swift_bridgeObjectRelease();
  v54 = a4;
  v21 = sub_1002FF3FC(v37, v38, a3, a4, a5, v39);
  v41 = v40;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n(a2, 2);
  v42 = swift_bridgeObjectRetain_n(v41, 2);
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = swift_slowAlloc(22, -1);
    v46 = a1;
    v47 = swift_slowAlloc(64, -1);
    v56 = v47;
    *(_DWORD *)v45 = 136446466;
    swift_bridgeObjectRetain(a2);
    v55 = sub_10001A820(v46, a2, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v45 + 12) = 2082;
    swift_bridgeObjectRetain(v41);
    v55 = sub_10001A820(v21, v41, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
    swift_bridgeObjectRelease_n(v41, 3);
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "findReminderRoot: Recursively found the root. {%{public}s => %{public}s}", (uint8_t *)v45, 0x16u);
    swift_arrayDestroy(v47, 2, (char *)&type metadata for Any + 8);
    v48 = v47;
    a1 = v46;
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v45, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v41, 2);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v41);
  v52 = swift_isUniquelyReferenced_nonNull_native(*v54);
  v56 = *v54;
  *v54 = 0x8000000000000000;
  sub_10028B8BC(v21, v41, a1, a2, v52);
  *v54 = v56;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_25:
  sub_1002FFD28(a1, a2);
  return v21;
}

double sub_1002FFD28(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  double result;
  uint64_t v11;
  uint64_t v12;

  if (qword_100837118 != -1)
    swift_once(&qword_100837118, sub_1002ED77C);
  v4 = type metadata accessor for Logger(0);
  sub_10001AAA8(v4, (uint64_t)qword_1008448A0);
  v5 = swift_bridgeObjectRetain_n(a2, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v12 = v9;
    *(_DWORD *)v8 = 136446210;
    swift_bridgeObjectRetain(a2);
    v11 = sub_10001A820(a1, a2, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "findReminderRoot END {id: %{public}s}", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    *(_QWORD *)&result = swift_bridgeObjectRelease_n(a2, 2).n128_u64[0];
  }
  return result;
}

void sub_1002FFEC4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  char v28;
  uint64_t v32;
  int64_t v35;

  v32 = 0;
  v8 = 0;
  v9 = a3 + 64;
  v10 = 1 << *(_BYTE *)(a3 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(a3 + 64);
  v35 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    while (v12)
    {
      v13 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v14 = v13 | (v8 << 6);
      if (*(_QWORD *)(a4 + 16))
      {
LABEL_22:
        v18 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v14);
        v19 = *(void **)(*(_QWORD *)(a3 + 56) + 8 * v14);
        v21 = *v18;
        v20 = v18[1];
        swift_bridgeObjectRetain(v20);
        v22 = v19;
        v23 = sub_10001A6DC(v21, v20);
        if ((v24 & 1) != 0)
        {
          v25 = (_QWORD *)(*(_QWORD *)(a4 + 56) + 16 * v23);
          v26 = v25[1];
          if (*v25 == a5 && v26 == a6)
          {
            swift_bridgeObjectRelease();

LABEL_30:
            *(unint64_t *)((char *)a1 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
            if (__OFADD__(v32++, 1))
            {
              __break(1u);
LABEL_33:
              sub_1004B2090(a1, a2, v32, a3);
              return;
            }
          }
          else
          {
            v28 = _stringCompareWithSmolCheck(_:_:expecting:)(*v25, v26, a5, a6, 0);
            swift_bridgeObjectRelease();

            if ((v28 & 1) != 0)
              goto LABEL_30;
          }
        }
        else
        {
          swift_bridgeObjectRelease();

        }
      }
    }
    v15 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v15 >= v35)
      goto LABEL_33;
    v16 = *(_QWORD *)(v9 + 8 * v15);
    ++v8;
    if (!v16)
    {
      v8 = v15 + 1;
      if (v15 + 1 >= v35)
        goto LABEL_33;
      v16 = *(_QWORD *)(v9 + 8 * v8);
      if (!v16)
      {
        v8 = v15 + 2;
        if (v15 + 2 >= v35)
          goto LABEL_33;
        v16 = *(_QWORD *)(v9 + 8 * v8);
        if (!v16)
          break;
      }
    }
LABEL_21:
    v12 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v8 << 6);
    if (*(_QWORD *)(a4 + 16))
      goto LABEL_22;
  }
  v17 = v15 + 3;
  if (v17 >= v35)
    goto LABEL_33;
  v16 = *(_QWORD *)(v9 + 8 * v17);
  if (v16)
  {
    v8 = v17;
    goto LABEL_21;
  }
  while (1)
  {
    v8 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v8 >= v35)
      goto LABEL_33;
    v16 = *(_QWORD *)(v9 + 8 * v8);
    ++v17;
    if (v16)
      goto LABEL_21;
  }
LABEL_35:
  __break(1u);
}

uint64_t sub_1003000F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v9;
  unsigned int v10;
  unint64_t v11;
  size_t v12;
  uint64_t isStackAllocationSafe;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v20;

  v9 = *(_BYTE *)(a1 + 32);
  v10 = v9 & 0x3F;
  v11 = (unint64_t)((1 << v9) + 63) >> 6;
  v12 = 8 * v11;
  swift_bridgeObjectRetain_n(a2, 2);
  isStackAllocationSafe = swift_bridgeObjectRetain_n(a4, 2);
  if (v10 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v12, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v20 - ((v12 + 15) & 0x3FFFFFFFFFFFFFF0), v12);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    sub_1002FFEC4((unint64_t *)((char *)&v20 - ((v12 + 15) & 0x3FFFFFFFFFFFFFF0)), v11, a1, a2, a3, a4);
    v15 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v4)
      swift_willThrow(v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v17 = (void *)swift_slowAlloc(v12, -1);
    bzero(v17, v12);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    sub_1002FFEC4((unint64_t *)v17, v11, a1, a2, a3, a4);
    v15 = v18;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_slowDealloc(v17, -1, -1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_100300328(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1007DD8F0, a1, a2, &unk_100837A80);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x1B)
    return 27;
  else
    return v3;
}

unint64_t sub_100300378()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008448B8;
  if (!qword_1008448B8)
  {
    v1 = sub_1000A5A94((uint64_t *)&unk_10083AE10);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1008448B8);
  }
  return result;
}

id sub_1003003D4@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "account");
  *a2 = result;
  return result;
}

id sub_10030040C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setAccount:", *a1);
}

void sub_100300428(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_title, a2);
}

void sub_100300444(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setTitle_);
}

id sub_100300468@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "allDay");
  *a2 = (_BYTE)result;
  return result;
}

id sub_100300498(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setAllDay:", *a1);
}

void sub_1003004AC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_timeZone, a2);
}

void sub_1003004C8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setTimeZone_);
}

BOOL sub_1003004E4(id *a1)
{
  uint64_t v1;

  return sub_1002FD5A8(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100300500(void **a1)
{
  uint64_t v1;

  return sub_1002FE90C(a1, *(uint64_t **)(v1 + 16), *(void (**)(char *, uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32)) & 1;
}

uint64_t sub_100300520(id *a1)
{
  uint64_t v1;

  return sub_1002FCBE4(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t _s6FieldsOwet_2(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE6)
    goto LABEL_17;
  if (a2 + 26 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 26) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 26;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 26;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 26;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1B;
  v8 = v6 - 27;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s6FieldsOwst_2(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 26 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 26) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE5)
    return ((uint64_t (*)(void))((char *)&loc_100300618 + 4 * byte_1006B379B[v4]))();
  *a1 = a2 + 26;
  return ((uint64_t (*)(void))((char *)sub_10030064C + 4 * byte_1006B3796[v4]))();
}

uint64_t sub_10030064C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100300654(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10030065CLL);
  return result;
}

uint64_t sub_100300668(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100300670);
  *(_BYTE *)result = a2 + 26;
  return result;
}

uint64_t sub_100300674(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10030067C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s6FieldsOMa_2()
{
  return &_s6FieldsON_2;
}

unint64_t sub_100300698(uint64_t a1)
{
  unint64_t result;

  result = sub_1003006BC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1003006BC()
{
  unint64_t result;

  result = qword_100844938;
  if (!qword_100844938)
  {
    result = swift_getWitnessTable(&unk_1006B3908, &_s6FieldsON_2);
    atomic_store(result, (unint64_t *)&qword_100844938);
  }
  return result;
}

unint64_t sub_100300700(uint64_t a1)
{
  unint64_t result;

  result = sub_100300724();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100300724()
{
  unint64_t result;

  result = qword_100844940;
  if (!qword_100844940)
  {
    result = swift_getWitnessTable(&unk_1006B38D0, &_s6FieldsON_2);
    atomic_store(result, (unint64_t *)&qword_100844940);
  }
  return result;
}

unint64_t sub_10030076C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100844948;
  if (!qword_100844948)
  {
    v1 = sub_1000A5A94(&qword_100844950);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100844948);
  }
  return result;
}

unint64_t sub_1003007BC()
{
  unint64_t result;

  result = qword_100844958;
  if (!qword_100844958)
  {
    result = swift_getWitnessTable(&unk_1006B39B8, &_s6FieldsON_2);
    atomic_store(result, (unint64_t *)&qword_100844958);
  }
  return result;
}

uint64_t sub_100300800(id *a1)
{
  return sub_100300520(a1) & 1;
}

uint64_t sub_100300818()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v33;
  void **aBlock;
  _QWORD v35[4];
  uint64_t v36;
  void *v37;

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v33 - v8;
  Date.init()(v7);
  v10 = objc_msgSend(v0, "storeController");
  if (v10)
  {
    v11 = v10;
    v12 = objc_msgSend(v10, "inMemoryPrimaryActiveCKAccountREMObjectID");
    if (qword_100837120 != -1)
      swift_once(&qword_100837120, sub_100302270);
    v13 = type metadata accessor for Logger(0);
    sub_10001AAA8(v13, (uint64_t)qword_100844960);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v9, v2);
    static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
    v14 = static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.info.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (_DWORD *)swift_slowAlloc(18, -1);
      v33 = v3;
      v18 = v17;
      *v17 = 68157952;
      LODWORD(aBlock) = 4;
      v19 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4);
      *((_WORD *)v18 + 4) = 2048;
      aBlock = COERCE_VOID_(Date.rem_elapsedInMilliseconds.getter(v19));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v35);
      v20 = *(void (**)(char *, uint64_t))(v33 + 8);
      v20(v6, v2);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "primaryActiveCloudKitAccountREMObjectID: {elapsed: %.*f ms}", (uint8_t *)v18, 0x12u);
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {

      v20 = *(void (**)(char *, uint64_t))(v3 + 8);
      v20(v6, v2);
    }
    v20(v9, v2);
    return (uint64_t)v12;
  }
  if (qword_100837120 != -1)
    swift_once(&qword_100837120, sub_100302270);
  v21 = type metadata accessor for Logger(0);
  v22 = sub_10001AAA8(v21, (uint64_t)qword_100844960);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "primaryActiveCloudKitAccountREMObjectID: Cannot get the RDStoreController from RDStoreControllerManagedObjectContext. Fallback to call REMCDAccount._groundTruth_primaryActiveCloudKitAccountInContext(in:).", v25, 2u);
    swift_slowDealloc(v25, -1, -1);
  }

  v37 = 0;
  v26 = swift_allocObject(&unk_1007ED978, 32, 7);
  *(_QWORD *)(v26 + 16) = &v37;
  *(_QWORD *)(v26 + 24) = v1;
  v27 = swift_allocObject(&unk_1007ED9A0, 32, 7);
  *(_QWORD *)(v27 + 16) = sub_100303980;
  *(_QWORD *)(v27 + 24) = v26;
  v35[3] = sub_1000098E4;
  v36 = v27;
  aBlock = _NSConcreteStackBlock;
  v35[0] = 1107296256;
  v35[1] = sub_1000098C4;
  v35[2] = &unk_1007ED9B8;
  v28 = _Block_copy(&aBlock);
  v29 = v36;
  v30 = v1;
  swift_retain(v27);
  swift_release(v29);
  objc_msgSend(v30, "performBlockAndWait:", v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v27, "", 118, 305, 28, 1);
  result = swift_release(v27);
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    v12 = v37;
    swift_release(v26);
    return (uint64_t)v12;
  }
  __break(1u);
  return result;
}

void sub_100300C1C(void *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  id v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v6 = sub_10001A630(&qword_100839C20);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630(&qword_100844978);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    goto LABEL_16;
  v46 = a3;
  v47 = a2;
  v14 = a1;
  if (!objc_msgSend(v14, "inactive"))
  {

    v27 = v14;
    v28 = objc_msgSend(v27, "remObjectID");
    if (v28)
    {
      v29 = v28;
      v30 = objc_msgSend(v27, "objectID");
      if ((objc_msgSend(v30, "isTemporaryID") & 1) != 0)
      {
        if (qword_100837120 != -1)
          swift_once(&qword_100837120, sub_100302270);
        v31 = type metadata accessor for Logger(0);
        sub_10001AAA8(v31, (uint64_t)qword_100844960);
        v32 = v29;
        v33 = Logger.logObject.getter(v32);
        v34 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v33, v34))
        {
          v35 = (uint8_t *)swift_slowAlloc(12, -1);
          v47 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v35 = 138543362;
          v50 = (uint64_t)v32;
          v36 = v32;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);
          v37 = v47;
          *v47 = v29;

          _os_log_impl((void *)&_mh_execute_header, v33, v34, "primaryActiveCloudKitAccountOptimized: Unexpectedly the primaryActiveCloudKitAccount.objectID() isTemporary, current design is to defer setting the account NSManagedObjectID cache until after saved {remObjectID: %{public}@}", v35, 0xCu);
          v38 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v37, 1, v38);
          swift_slowDealloc(v37, -1, -1);
          swift_slowDealloc(v35, -1, -1);

        }
        else
        {

        }
      }
      else
      {
        (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for REMCache.ExecutionMode.asynchronously<A, B>(_:), v10);
        v42 = swift_allocObject(&unk_1007ED8D8, 32, 7);
        *(_QWORD *)(v42 + 16) = v30;
        *(_QWORD *)(v42 + 24) = v29;
        v43 = v30;
        v44 = v29;
        dispatch thunk of REMCache.performReadAndWrite(_:operations:)(v13, sub_100303904, v42);

        swift_release(v42);
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      }
      goto LABEL_24;
    }

LABEL_16:
    v40 = enum case for REMCache.ExecutionMode.asynchronously<A, B>(_:);
    (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for REMCache.ExecutionMode.asynchronously<A, B>(_:), v10);
    dispatch thunk of REMCache.performReadAndWrite(_:operations:)(v13, sub_100303420, 0);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 104))(v9, v40, v6);
    dispatch thunk of REMCache.performReadAndWrite(_:operations:)(v9, sub_10030342C, 0);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    if (!a1)
    {
      v16 = 0;
      v41 = v48;
LABEL_25:
      objc_msgSend(v41, "updateInMemoryPrimaryActiveCKAccountREMObjectIDIfNecessary:", v16);
      goto LABEL_26;
    }
    v27 = a1;
LABEL_24:
    v41 = v48;
    v16 = objc_msgSend(v27, "remObjectID");
    goto LABEL_25;
  }
  if (qword_100837120 != -1)
    swift_once(&qword_100837120, sub_100302270);
  v15 = type metadata accessor for Logger(0);
  sub_10001AAA8(v15, (uint64_t)qword_100844960);
  v16 = v14;
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v50 = v20;
    *(_DWORD *)v19 = 136446210;
    v21 = objc_msgSend(v16, "remObjectID");
    if (v21)
    {
      v22 = v21;
      v23 = objc_msgSend(v21, "description");

      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v26 = v25;

    }
    else
    {
      v26 = 0xE300000000000000;
      v24 = 7104878;
    }
    v49 = sub_10001A820(v24, v26, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "updatePrimaryActiveCloudKitAccount: ATTENTION Someone is trying to inactivate an existing CK account {remObjectID: %{public}s}", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    v39 = v46;
  }
  else
  {

    v39 = v46;
  }
  sub_100300C1C(0, v47, v39);
LABEL_26:

}

id sub_1003011F8(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  void (*v27)(_BYTE *, _QWORD, _QWORD *);
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void (*v33)(_BYTE *, _QWORD *);
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  NSObject *v38;
  void *v39;
  int *v40;
  id v41;
  id v42;
  double v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  id v48;
  id v49;
  void *v50;
  _QWORD *v51;
  char v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  double v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(_BYTE *, uint64_t);
  id v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  id v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(_BYTE *, uint64_t);
  id v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  id v86;
  uint64_t v87;
  NSObject *v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  id v98;
  void *v99;
  _QWORD *v100;
  char v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  _QWORD *v105;
  NSObject *v106;
  _QWORD *v107;
  NSObject *v108;
  NSObject *v109;
  int v110;
  uint64_t v111;
  _QWORD *v112;
  id v113;
  void *v114;
  id v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  double v121;
  double v122;
  double v123;
  NSObject *v124;
  os_log_type_t v125;
  uint8_t *v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  _BYTE *v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  _BYTE *v136;
  uint64_t v137;
  uint64_t v138;
  NSObject *v139;
  os_log_type_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _BYTE v146[12];
  int v147;
  double v148;
  _QWORD *v149;
  _BYTE *v150;
  void (*v151)(_BYTE *, _QWORD, _QWORD *);
  _BYTE *v152;
  _BYTE *v153;
  void *v154;
  id v155;
  uint64_t v156;
  uint64_t v157;
  id v158;
  NSObject *v159;
  _QWORD *v160;
  id v161;
  _QWORD *p_isa;
  _BYTE *v163;
  uint64_t v164;
  double v165;
  double v166;
  uint64_t v167;

  v2 = v1;
  v161 = a1;
  p_isa = (_QWORD *)sub_10001A630(&qword_100844978);
  v3 = *(p_isa - 1);
  __chkstk_darwin(p_isa);
  v5 = &v146[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = &v146[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __chkstk_darwin(v8);
  v13 = &v146[-v12];
  v14 = __chkstk_darwin(v11);
  v16 = &v146[-v15];
  v17 = __chkstk_darwin(v14);
  v19 = &v146[-v18];
  v20 = __chkstk_darwin(v17);
  v163 = &v146[-v21];
  Date.init()(v20);
  v22 = -[NSObject storeController](v2, "storeController");
  if (!v22)
  {
    if (qword_100837120 != -1)
      swift_once(&qword_100837120, sub_100302270);
    v68 = type metadata accessor for Logger(0);
    v69 = sub_10001AAA8(v68, (uint64_t)qword_100844960);
    v70 = Logger.logObject.getter(v69);
    v71 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v70, v71))
    {
      v72 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v72 = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "primaryActiveCloudKitAccountOptimized: Cannot get the RDStoreController from RDStoreControllerManagedObjectContext. Fallback to call REMCDAccount._groundTruth_primaryActiveCloudKitAccountInContext(in:).", v72, 2u);
      swift_slowDealloc(v72, -1, -1);
    }

    v73 = objc_msgSend((id)objc_opt_self(REMCDAccount), "_groundTruth_primaryActiveCloudKitAccountInContext:", v2);
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v163, v6);
    return v73;
  }
  v23 = v22;
  v24 = objc_msgSend(v22, "inMemoryPrimaryActiveCKAccountREMObjectID");
  if (!v24)
  {
    v74 = v23;
    if (qword_100837120 != -1)
      swift_once(&qword_100837120, sub_100302270);
    v75 = type metadata accessor for Logger(0);
    sub_10001AAA8(v75, (uint64_t)qword_100844960);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v10, v163, v6);
    static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
    v76 = static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
    v77 = Logger.logObject.getter(v76);
    v78 = static os_log_type_t.info.getter(v77);
    if (os_log_type_enabled(v77, v78))
    {
      v79 = swift_slowAlloc(18, -1);
      *(_DWORD *)v79 = 68157952;
      LODWORD(v166) = 4;
      v80 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, (char *)&v166 + 4);
      *(_WORD *)(v79 + 8) = 2048;
      v166 = Date.rem_elapsedInMilliseconds.getter(v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, &v167);
      v81 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
      v81(v10, v6);
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "primaryActiveCloudKitAccountOptimized: Returning nil because inMemoryPrimaryActiveCKAccountREMObjectID is nil {elapsed: %.*f ms}", (uint8_t *)v79, 0x12u);
      swift_slowDealloc(v79, -1, -1);

    }
    else
    {

      v81 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
      v81(v10, v6);
    }
    v81(v163, v6);
    return 0;
  }
  v150 = (void (*)(_QWORD, _QWORD))v19;
  v153 = v13;
  v158 = v23;
  v25 = v24;
  v26 = swift_allocObject(&unk_1007ED900, 24, 7);
  *(_QWORD *)(v26 + 16) = 0;
  v27 = *(void (**)(_BYTE *, _QWORD, _QWORD *))(v3 + 104);
  v159 = v2;
  v28 = v16;
  v29 = v6;
  v30 = v7;
  v31 = p_isa;
  v151 = v27;
  v27(v5, enum case for REMCache.ExecutionMode.synchronously<A, B>(_:), p_isa);
  v32 = swift_allocObject(&unk_1007ED928, 32, 7);
  *(_QWORD *)(v32 + 16) = v26;
  *(_QWORD *)(v32 + 24) = v25;
  v157 = v26;
  swift_retain(v26);
  v154 = v25;
  v160 = v25;
  dispatch thunk of REMCache.performReadOnly(_:operations:)(v5, sub_1000D21DC, v32);
  swift_release(v32);
  v33 = *(void (**)(_BYTE *, _QWORD *))(v3 + 8);
  v152 = v5;
  v34 = v31;
  v35 = v30;
  v36 = v29;
  v37 = v28;
  v38 = v159;
  v33(v5, v34);
  swift_beginAccess(v26 + 16, &v166, 0, 0);
  v39 = *(void **)(v26 + 16);
  v40 = &OBJC_IVAR___ICBatchFetchHelper__managedObjectContext;
  if (v39)
  {
    v156 = v36;
    v165 = 0.0;
    v41 = v39;
    v42 = -[NSObject existingObjectWithID:error:](v38, "existingObjectWithID:error:", v41, &v165);
    v43 = v165;
    if (v42)
    {
      v44 = v42;
      v45 = objc_opt_self(REMCDAccount);
      v46 = swift_dynamicCastObjCClass(v44, v45);
      if (v46)
      {
        v47 = (void *)v46;
        v149 = v160;
        v48 = *(id *)&v43;
        v49 = objc_msgSend(v47, "remObjectID");
        if (v49)
        {
          v50 = v49;
          v155 = v47;
          sub_1001A9820();
          v51 = v149;
          v52 = static NSObject.== infix(_:_:)(v51);

          if ((v52 & 1) != 0)
          {
            v53 = qword_100837120;
            v54 = v44;
            v55 = v156;
            if (v53 != -1)
              swift_once(&qword_100837120, sub_100302270);
            v56 = type metadata accessor for Logger(0);
            sub_10001AAA8(v56, (uint64_t)qword_100844960);
            v57 = v150;
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v35 + 16))(v150, v163, v55);
            static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
            static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
            v58 = COERCE_DOUBLE(v41);
            v59 = Logger.logObject.getter(*(_QWORD *)&v58);
            v60 = static os_log_type_t.info.getter(v59);
            if (os_log_type_enabled(v59, v60))
            {
              v61 = swift_slowAlloc(28, -1);
              p_isa = &v54->isa;
              v62 = v61;
              v160 = (_QWORD *)swift_slowAlloc(8, -1);
              *(_DWORD *)v62 = 68158210;
              LODWORD(v165) = 4;
              v161 = v51;
              v63 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, (char *)&v165 + 4);
              *(_WORD *)(v62 + 8) = 2048;
              v165 = Date.rem_elapsedInMilliseconds.getter(v63);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &v166);
              v64 = *(void (**)(_BYTE *, uint64_t))(v35 + 8);
              v64(v57, v156);
              *(_WORD *)(v62 + 18) = 2112;
              v165 = v58;
              v65 = *(id *)&v58;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &v166);
              v66 = v160;
              *v160 = v39;

              _os_log_impl((void *)&_mh_execute_header, v59, v60, "primaryActiveCloudKitAccountOptimized: RDPrimaryActiveCloudKitAccountManagedObjectIDCache hit {elapsed: %.*f ms, mid: %@}", (uint8_t *)v62, 0x1Cu);
              v67 = sub_10001A630((uint64_t *)&unk_100839E70);
              swift_arrayDestroy(v66, 1, v67);
              swift_slowDealloc(v66, -1, -1);
              swift_slowDealloc(v62, -1, -1);

              v51 = v65;
              v58 = *(double *)&v158;
            }
            else
            {

              v64 = *(void (**)(_BYTE *, uint64_t))(v35 + 8);
              v64(v57, v156);
              v59 = v54;
            }
            v144 = v157;

            v64(v163, v156);
            goto LABEL_58;
          }

          v36 = v156;
          v40 = &OBJC_IVAR___ICBatchFetchHelper__managedObjectContext;
          goto LABEL_27;
        }

      }
      else
      {
        v85 = *(id *)&v43;

      }
    }
    else
    {
      v82 = *(id *)&v165;
      v83 = _convertNSErrorToError(_:)(*(_QWORD *)&v43);

      swift_willThrow(v84);
      swift_errorRelease(v83);
    }
    v36 = v156;
  }
LABEL_27:
  v150 = (void (*)(_QWORD, _QWORD))v33;
  v86 = objc_msgSend((id)objc_opt_self(v40 + 888), "_groundTruth_primaryActiveCloudKitAccountInContext:", v38);
  v87 = qword_100837120;
  v155 = v86;
  v88 = v86;
  if (v87 != -1)
    swift_once(&qword_100837120, sub_100302270);
  v89 = type metadata accessor for Logger(0);
  sub_10001AAA8(v89, (uint64_t)qword_100844960);
  v149 = *(_QWORD **)(v35 + 16);
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v149)(v37, v163, v36);
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  v90 = static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  v91 = Logger.logObject.getter(v90);
  v92 = static os_log_type_t.info.getter(v91);
  if (os_log_type_enabled(v91, v92))
  {
    v93 = swift_slowAlloc(18, -1);
    *(_DWORD *)v93 = 68157952;
    LODWORD(v165) = 4;
    v94 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, (char *)&v165 + 4);
    *(_WORD *)(v93 + 8) = 2048;
    v165 = Date.rem_elapsedInMilliseconds.getter(v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &v166);
    v95 = *(_QWORD **)(v35 + 8);
    ((void (*)(_BYTE *, uint64_t))v95)(v37, v36);
    _os_log_impl((void *)&_mh_execute_header, v91, v92, "primaryActiveCloudKitAccountOptimized: RDPrimaryActiveCloudKitAccountManagedObjectIDCache miss (before cache-write) {elapsed: %.*f ms}", (uint8_t *)v93, 0x12u);
    swift_slowDealloc(v93, -1, -1);

    if (v88)
      goto LABEL_31;
  }
  else
  {
    v95 = *(_QWORD **)(v35 + 8);
    ((void (*)(_BYTE *, uint64_t))v95)(v37, v36);

    if (v88)
    {
LABEL_31:
      v97 = v160;
      v98 = -[NSObject remObjectID](v88, "remObjectID");
      v159 = v88;
      if (v98)
      {
        v99 = v98;
        sub_1001A9820();
        v100 = v97;
        v101 = static NSObject.== infix(_:_:)(v100);

        if ((v101 & 1) != 0)
        {
LABEL_47:
          v122 = COERCE_DOUBLE(-[NSObject objectID](v88, "objectID"));
          if ((objc_msgSend(*(id *)&v122, "isTemporaryID") & 1) != 0)
          {
            v123 = COERCE_DOUBLE(v97);
            v124 = Logger.logObject.getter(*(_QWORD *)&v123);
            v125 = static os_log_type_t.fault.getter();
            if (os_log_type_enabled(v124, v125))
            {
              v160 = v95;
              v126 = (uint8_t *)swift_slowAlloc(12, -1);
              v127 = (_QWORD *)swift_slowAlloc(8, -1);
              *(_DWORD *)v126 = 138543362;
              v165 = v123;
              v123 = COERCE_DOUBLE(*(id *)&v123);
              v95 = v160;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &v166);
              *v127 = v154;

              _os_log_impl((void *)&_mh_execute_header, v124, v125, "primaryActiveCloudKitAccountOptimized: Unexpectedly primary CK REMCDAccount's objectID() isTemporary, should have saved the CD account before trying to access it via this API {remObjectID: %{public}@}", v126, 0xCu);
              v128 = sub_10001A630((uint64_t *)&unk_100839E70);
              swift_arrayDestroy(v127, 1, v128);
              swift_slowDealloc(v127, -1, -1);
              swift_slowDealloc(v126, -1, -1);
              v129 = v157;
              v130 = *(double *)&v159;
            }
            else
            {

              v130 = v123;
              v122 = v123;
              v129 = v157;
            }

            ((void (*)(_BYTE *, uint64_t))v95)(v163, v36);
            v143 = v129;
            goto LABEL_59;
          }
          v131 = v152;
          v132 = p_isa;
          v151(v152, enum case for REMCache.ExecutionMode.asynchronously<A, B>(_:), p_isa);
          v133 = swift_allocObject(&unk_1007ED950, 32, 7);
          *(double *)(v133 + 16) = v122;
          *(_QWORD *)(v133 + 24) = v97;
          v134 = v97;
          v135 = *(id *)&v122;
          dispatch thunk of REMCache.performReadAndWrite(_:operations:)(v131, sub_1000D2164, v133);
          swift_release(v133);
          v150(v131, v132);
          v136 = v153;
          ((void (*)(_BYTE *, _BYTE *, uint64_t))v149)(v153, v163, v36);
          static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
          v137 = static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
          v138 = v36;
          v139 = Logger.logObject.getter(v137);
          v140 = static os_log_type_t.default.getter(v139);
          if (os_log_type_enabled(v139, v140))
          {
            v141 = swift_slowAlloc(18, -1);
            *(_DWORD *)v141 = 68157952;
            LODWORD(v165) = 4;
            p_isa = v135;
            v142 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, (char *)&v165 + 4);
            *(_WORD *)(v141 + 8) = 2048;
            v165 = Date.rem_elapsedInMilliseconds.getter(v142);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &v166);
            ((void (*)(_BYTE *, uint64_t))v95)(v136, v138);
            _os_log_impl((void *)&_mh_execute_header, v139, v140, "primaryActiveCloudKitAccountOptimized: RDPrimaryActiveCloudKitAccountManagedObjectIDCache miss + write (after cache-write) {elapsed: %.*f ms (from start)}", (uint8_t *)v141, 0x12u);
            swift_slowDealloc(v141, -1, -1);

            v134 = p_isa;
            v135 = v158;
          }
          else
          {

            ((void (*)(_BYTE *, uint64_t))v95)(v136, v138);
            v139 = v88;
          }
          v144 = v157;

          ((void (*)(_BYTE *, uint64_t))v95)(v163, v138);
LABEL_58:
          v143 = v144;
LABEL_59:
          swift_release(v143);
          return v155;
        }
      }
      else
      {

      }
      v105 = v97;
      v106 = v88;
      v107 = v105;
      v108 = v106;
      v109 = Logger.logObject.getter(v108);
      v110 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v109, (os_log_type_t)v110))
      {
        v147 = v110;
        v160 = v95;
        v156 = v36;
        v111 = swift_slowAlloc(22, -1);
        v112 = (_QWORD *)swift_slowAlloc(8, -1);
        v148 = COERCE_DOUBLE(swift_slowAlloc(32, -1));
        v165 = v148;
        *(_DWORD *)v111 = 136446466;
        v113 = -[NSObject remObjectID](v108, "remObjectID");
        if (v113)
        {
          v114 = v113;
          v115 = objc_msgSend(v113, "description");

          v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
          v118 = v117;

        }
        else
        {
          v118 = 0xE300000000000000;
          v116 = 7104878;
        }
        v164 = sub_10001A820(v116, v118, (uint64_t *)&v165);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, &v165);

        swift_bridgeObjectRelease(v118);
        *(_WORD *)(v111 + 12) = 2114;
        v164 = (uint64_t)v107;
        v119 = v107;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, &v165);
        *v112 = v154;

        _os_log_impl((void *)&_mh_execute_header, v109, (os_log_type_t)v147, "primaryActiveCloudKitAccountOptimized: Mismatching cdAccount.remObjectID with inMemoryPrimaryActiveCKAccountREMObjectID {cdAccount.remObjectID: %{public}s, in-memory: %{public}@}", (uint8_t *)v111, 0x16u);
        v120 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v112, 1, v120);
        swift_slowDealloc(v112, -1, -1);
        v121 = v148;
        swift_arrayDestroy(*(_QWORD *)&v148, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(*(_QWORD *)&v121, -1, -1);
        swift_slowDealloc(v111, -1, -1);

        v36 = v156;
        v95 = v160;
      }
      else
      {

      }
      v88 = v159;
      goto LABEL_47;
    }
  }
  v102 = Logger.logObject.getter(v96);
  v103 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v102, v103))
  {
    v104 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v104 = 0;
    _os_log_impl((void *)&_mh_execute_header, v102, v103, "primaryActiveCloudKitAccountOptimized: Unexpectedly fetched no active CK account from persistence. Should have returned early for nil inMemoryPrimaryActiveCKAccountREMObjectID if no active CK account is signed in. Indicates there is a bug.", v104, 2u);
    swift_slowDealloc(v104, -1, -1);
  }

  ((void (*)(_BYTE *, uint64_t))v95)(v163, v36);
  swift_release(v157);
  return 0;
}

uint64_t sub_100302270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100844960);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100844960);
  if (qword_100837608 != -1)
    swift_once(&qword_100837608, sub_1004A17C8);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_100302300(void *a1)
{
  void *v1;
  void *v2;
  id v4;
  unsigned int v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  char v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  const char *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint32_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  id v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  _QWORD *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  id v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  _QWORD *v51;
  uint64_t v52;
  id v53;
  uint64_t v54;

  v2 = v1;
  v4 = objc_msgSend(a1, "accountTypeHost");
  v5 = objc_msgSend(v4, "isPrimaryCloudKit");

  if (!v5)
  {
    if (qword_100837120 != -1)
      swift_once(&qword_100837120, sub_100302270);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100844960);
    v50 = a1;
    v19 = Logger.logObject.getter(v50);
    v20 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(22, -1);
      v22 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v21 = 138543618;
      v23 = objc_msgSend(v50, "remObjectID");
      v53 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      *v22 = v23;
      *(_WORD *)(v21 + 12) = 2048;
      v53 = objc_msgSend(v50, "type");
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);

      v24 = "primaryCloudKitAccountDidDisable: Passed in an account storage that is not .primaryCloudKit {remObjectID: %{"
            "public}@, type: %ld}";
      v25 = v19;
      v26 = v20;
      v27 = (uint8_t *)v21;
      v28 = 22;
LABEL_14:
      _os_log_impl((void *)&_mh_execute_header, v25, v26, v24, v27, v28);
      v29 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v22, 1, v29);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      return;
    }
LABEL_19:

    goto LABEL_20;
  }
  if ((objc_msgSend(a1, "markedForRemoval") & 1) == 0 && !objc_msgSend(a1, "inactive"))
  {
    if (qword_100837120 != -1)
      swift_once(&qword_100837120, sub_100302270);
    v30 = type metadata accessor for Logger(0);
    sub_10001AAA8(v30, (uint64_t)qword_100844960);
    v50 = a1;
    v19 = Logger.logObject.getter(v50);
    v31 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v19, v31))
    {
      v21 = swift_slowAlloc(12, -1);
      v22 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v21 = 138543362;
      v32 = objc_msgSend(v50, "remObjectID");
      v53 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      *v22 = v32;

      v24 = "primaryCloudKitAccountDidDisable: Passed in an account storage that is neither markedForRemoval nor inactive"
            " {remObjectID: %{public}@}";
      v25 = v19;
      v26 = v31;
      v27 = (uint8_t *)v21;
      v28 = 12;
      goto LABEL_14;
    }
    goto LABEL_19;
  }
  v50 = objc_msgSend(a1, "remObjectID");
  v6 = objc_msgSend(v2, "inMemoryPrimaryActiveCKAccountREMObjectID");
  if (!v6)
    goto LABEL_20;
  v7 = v6;
  sub_1001A9820();
  v8 = v50;
  v9 = v7;
  v10 = static NSObject.== infix(_:_:)(v9);

  if ((v10 & 1) == 0)
  {
    if (qword_100837120 != -1)
      swift_once(&qword_100837120, sub_100302270);
    v33 = type metadata accessor for Logger(0);
    sub_10001AAA8(v33, (uint64_t)qword_100844960);
    v34 = v8;
    v35 = v9;
    v50 = v34;
    v36 = v35;
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = swift_slowAlloc(22, -1);
      v40 = (_QWORD *)swift_slowAlloc(8, -1);
      v41 = (id)swift_slowAlloc(32, -1);
      v53 = v41;
      *(_DWORD *)v39 = 136446466;
      v42 = sub_10001A630((uint64_t *)&unk_100844910);
      v43 = Optional.descriptionOrNil.getter(v42);
      v52 = sub_10001A820(v43, v44, (uint64_t *)&v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);

      swift_bridgeObjectRelease();
      *(_WORD *)(v39 + 12) = 2114;
      v52 = (uint64_t)v50;
      v45 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
      *v40 = v50;

      _os_log_impl((void *)&_mh_execute_header, v37, v38, "primaryCloudKitAccountDidDisable: A different primary active CloudKit account already exists (inMemoryPrimaryActiveCKAccountREMObjectID != nil) when we are removing or deactivating another different CloudKit account, not updating the in-memory value in this case {currentAccountID: %{public}s, removedAccountID: %{public}@}", (uint8_t *)v39, 0x16u);
      v46 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v40, 1, v46);
      swift_slowDealloc(v40, -1, -1);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v39, -1, -1);

      return;
    }

LABEL_20:
    return;
  }
  if (qword_100837120 != -1)
    swift_once(&qword_100837120, sub_100302270);
  v11 = type metadata accessor for Logger(0);
  sub_10001AAA8(v11, (uint64_t)qword_100844960);
  v12 = v8;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v51 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v15 = 138543362;
    v53 = v12;
    v16 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
    *v51 = v12;

    _os_log_impl((void *)&_mh_execute_header, v13, v14, "primaryCloudKitAccountDidDisable: Primary CloudKit account removed or deactivated, unsetting both inMemoryPrimaryActiveCKAccountREMObjectID and clear its NSManagedObjectID cache {removing: %{public}@}", v15, 0xCu);
    v17 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v51, 1, v17);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

  }
  if (qword_100837958 != -1)
    swift_once(&qword_100837958, sub_1005B83A8);
  v47 = (_QWORD *)qword_100872288;
  v48 = qword_100837960;
  swift_retain();
  if (v48 != -1)
    swift_once(&qword_100837960, sub_1005B8A54);
  v49 = qword_100872290;
  swift_retain();
  sub_100300C1C(0, v47, v49);
  swift_release(v47);
  swift_release(v49);

}

void sub_100302AC4(void *a1)
{
  void *v1;
  void *v2;
  id v4;
  unsigned int v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  NSObject **v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint32_t v16;
  uint64_t v17;
  os_log_type_t v18;
  NSObject *v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  char v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  NSObject **v44;
  NSObject *v45;
  uint64_t v46;
  _QWORD *v47;
  id v48;
  NSObject *v49;
  id v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;

  v2 = v1;
  v4 = objc_msgSend(a1, "accountTypeHost");
  v5 = objc_msgSend(v4, "isPrimaryCloudKit");

  if (!v5)
  {
    if (qword_100837120 != -1)
      swift_once(&qword_100837120, sub_100302270);
    v17 = type metadata accessor for Logger(0);
    sub_10001AAA8(v17, (uint64_t)qword_100844960);
    v48 = a1;
    v7 = Logger.logObject.getter(v48);
    v18 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v7, v18))
    {
      v9 = swift_slowAlloc(22, -1);
      v10 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v9 = 138543618;
      v19 = objc_msgSend(v48, "remObjectID");
      v52 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
      *v10 = v19;
      *(_WORD *)(v9 + 12) = 2048;
      v52 = objc_msgSend(v48, "type");
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);

      v12 = "primaryCloudKitAccountDidEnable: Passed in an account storage that is not .primaryCloudKit {remObjectID: %{p"
            "ublic}@, type: %ld}";
      v13 = v7;
      v14 = v18;
      v15 = (uint8_t *)v9;
      v16 = 22;
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  if ((objc_msgSend(a1, "markedForRemoval") & 1) != 0
    || (objc_msgSend(a1, "inactive") & 1) != 0)
  {
    if (qword_100837120 != -1)
      swift_once(&qword_100837120, sub_100302270);
    v6 = type metadata accessor for Logger(0);
    sub_10001AAA8(v6, (uint64_t)qword_100844960);
    v48 = a1;
    v7 = Logger.logObject.getter(v48);
    v8 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc(12, -1);
      v10 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v9 = 138543362;
      v11 = objc_msgSend(v48, "remObjectID");
      v52 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
      *v10 = v11;

      v12 = "primaryCloudKitAccountDidEnable: Passed in an account storage that is markedForRemoval or inactive {remObjec"
            "tID: %{public}@}";
      v13 = v7;
      v14 = v8;
      v15 = (uint8_t *)v9;
      v16 = 12;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v13, v14, v12, v15, v16);
      v20 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v10, 1, v20);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

      return;
    }
LABEL_13:

    return;
  }
  v21 = objc_msgSend(a1, "remObjectID");
  v22 = objc_msgSend(v2, "inMemoryPrimaryActiveCKAccountREMObjectID");
  if (v22)
  {
    sub_1001A9820();
    v23 = v21;
    v24 = v22;
    v25 = static NSObject.== infix(_:_:)(v24);

    if ((v25 & 1) == 0)
    {
      if (qword_100837120 != -1)
        swift_once(&qword_100837120, sub_100302270);
      v26 = type metadata accessor for Logger(0);
      sub_10001AAA8(v26, (uint64_t)qword_100844960);
      v27 = v23;
      v28 = v24;
      v29 = v27;
      v30 = v28;
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = swift_slowAlloc(22, -1);
        v47 = (_QWORD *)swift_slowAlloc(8, -1);
        v49 = swift_slowAlloc(32, -1);
        v52 = v49;
        *(_DWORD *)v33 = 136446466;
        v34 = sub_10001A630((uint64_t *)&unk_100844910);
        v35 = Optional.descriptionOrNil.getter(v34);
        v51 = sub_10001A820(v35, v36, (uint64_t *)&v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);

        swift_bridgeObjectRelease();
        *(_WORD *)(v33 + 12) = 2114;
        v51 = (uint64_t)v29;
        v37 = v29;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
        *v47 = v29;

        _os_log_impl((void *)&_mh_execute_header, v31, v32, "primaryCloudKitAccountDidEnable: A primary active CloudKit account already exists (inMemoryPrimaryActiveCKAccountREMObjectID != nil) when we are adding or activating another different CloudKit account, we will still update the in-memory value {currentAccountID: %{public}s, newAccountID: %{public}@}", (uint8_t *)v33, 0x16u);
        v38 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v47, 1, v38);
        swift_slowDealloc(v47, -1, -1);
        swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v49, -1, -1);
        swift_slowDealloc(v33, -1, -1);

      }
      else
      {

      }
    }
  }
  if (qword_100837120 != -1)
    swift_once(&qword_100837120, sub_100302270);
  v39 = type metadata accessor for Logger(0);
  sub_10001AAA8(v39, (uint64_t)qword_100844960);
  v40 = v21;
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.default.getter(v41);
  if (os_log_type_enabled(v41, v42))
  {
    v50 = v22;
    v43 = (uint8_t *)swift_slowAlloc(12, -1);
    v44 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v43 = 138543362;
    v52 = v40;
    v45 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
    *v44 = v40;

    v22 = v50;
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "primaryCloudKitAccountDidEnable: Primary CloudKit account added or activated, setting inMemoryPrimaryActiveCKAccountREMObjectID {newAccountID: %{public}@}", v43, 0xCu);
    v46 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v44, 1, v46);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v43, -1, -1);
  }
  else
  {

    v41 = v40;
  }

  objc_msgSend(v2, "updateInMemoryPrimaryActiveCKAccountREMObjectIDIfNecessary:", v40);
}

void sub_1003031FC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;

  REMCacheContext.setObject(_:forKey:)(a2, a3);
  if (qword_100837120 != -1)
    swift_once(&qword_100837120, sub_100302270);
  v5 = type metadata accessor for Logger(0);
  sub_10001AAA8(v5, (uint64_t)qword_100844960);
  v6 = a3;
  v7 = a2;
  v16 = v6;
  v8 = v7;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = (_QWORD *)swift_slowAlloc(16, -1);
    *(_DWORD *)v11 = 138543618;
    v17 = v16;
    v13 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
    *v12 = v16;

    *(_WORD *)(v11 + 12) = 2114;
    v17 = v8;
    v14 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
    v12[1] = a2;

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "updatePrimaryActiveCloudKitAccount: Writing RDPrimaryActiveCloudKitAccountManagedObjectIDCache with updated CD account {remObjectID: %{public}@, mid: %{public}@}", (uint8_t *)v11, 0x16u);
    v15 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v12, 2, v15);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

  }
}

void sub_100303420(uint64_t a1)
{
  sub_100303438(a1, "updatePrimaryActiveCloudKitAccount: Clearing RDPrimaryActiveCloudKitAccountManagedObjectIDCache with nil input account");
}

void sub_10030342C(uint64_t a1)
{
  sub_100303438(a1, "updatePrimaryActiveCloudKitAccount: Clearing RDPredefinedSmartListAndManualOrderingManagedObjectIDCache with nil input account");
}

void sub_100303438(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  NSObject *oslog;

  REMCacheContext.clearAll()();
  if (qword_100837120 != -1)
    swift_once(&qword_100837120, sub_100302270);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001AAA8(v3, (uint64_t)qword_100844960);
  oslog = Logger.logObject.getter(v4);
  v5 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v5, a2, v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

}

NSString sub_100303514()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_100871D78 = (uint64_t)result;
  return result;
}

void sub_100303548(char a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v17;
  void *v18;
  char **v19;
  id v20;
  uint64_t v21;
  uint64_t v22;

  v2 = v1;
  if (qword_100837120 != -1)
    swift_once(&qword_100837120, sub_100302270);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001AAA8(v4, (uint64_t)qword_100844960);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    *(_DWORD *)v8 = 136446210;
    v22 = v9;
    if ((a1 & 1) != 0)
      v10 = 0x64656C62616E65;
    else
      v10 = 0x64656C6261736964;
    if ((a1 & 1) != 0)
      v11 = 0xE700000000000000;
    else
      v11 = 0xE800000000000000;
    v21 = sub_10001A820(v10, v11, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "cloudKitAccountsDidChange(cloudKitAccountsChange: %{public}s)", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  v12 = objc_msgSend((id)objc_opt_self(REMAppleAccountUtilities), "sharedInstance");
  objc_msgSend(v12, "invalidateICloudACAccounts");

  v13 = objc_msgSend((id)objc_opt_self(REMCDAccount), "clearAppleCloudKitTable");
  if ((_DWORD)v13)
  {
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.info.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Released all cached CloudKit REMCD accounts", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

  }
  v17 = objc_msgSend(v2, "cloudContext");
  v18 = v17;
  v19 = &selRef_accountsDidDisable;
  if ((a1 & 1) != 0)
    v19 = &selRef_accountsDidEnable;
  objc_msgSend(v17, *v19);

  v20 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_100837128 != -1)
    swift_once(&qword_100837128, sub_100303514);
  objc_msgSend(v20, "postNotificationName:object:", qword_100871D78, 0);

}

void sub_100303858(void **a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;

  v3 = objc_msgSend((id)objc_opt_self(REMCDAccount), "_groundTruth_primaryActiveCloudKitAccountInContext:", a2);
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, "remObjectID");

  }
  else
  {
    v5 = 0;
  }
  v6 = *a1;
  *a1 = v5;

}

uint64_t sub_1003038D8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100303904(uint64_t a1)
{
  uint64_t v1;

  sub_1003031FC(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_10030390C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100303930()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10030395C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100303980()
{
  uint64_t v0;

  sub_100303858(*(void ***)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100303988()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10030399C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  Swift::String v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;

  v1 = *v0;
  result = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v3)
  {
    v7 = 0;
    v8 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v4._object = (void *)0x80000001006F8C10;
    v4._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v4);
    v6 = v0;
    v5 = type metadata accessor for PartialKeyPath(0, *(_QWORD *)(v1 + class metadata base offset for PartialKeyPath));
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v6, v5);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v7, v8, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_100303A74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100844980);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100844980);
  if (qword_100837628 != -1)
    swift_once(&qword_100837628, sub_1004A1838);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872058);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100303B04(char a1)
{
  Swift::String v2;
  Swift::String v3;

  if ((a1 & 2) != 0)
  {
    v2._countAndFlagsBits = 99;
    v2._object = (void *)0xE100000000000000;
    String.append(_:)(v2);
  }
  if ((a1 & 4) != 0)
  {
    v3._countAndFlagsBits = 100;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
  }
  swift_bridgeObjectRelease(0xE000000000000000);
  return 0;
}

void sub_100303BB8(id *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_100303BCC(a1, a2);
}

void sub_100303BCC(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  id v4;

  v3 = objc_msgSend(*a1, "objectID");
  v4 = objc_msgSend(v3, "persistentStore");

  *a2 = v4;
}

uint64_t sub_100303C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

void **_s9UtilitiesO29ManualSortHintPersistenceHostOwCP(void **a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  *a1 = *a2;
  v4 = v3;
  return a1;
}

void **sub_100303C68(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  v5 = v4;

  return a1;
}

_QWORD *initializeWithTake for RDStoreControllerNotificationCenter.EntityFilterOption(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void **sub_100303CA8(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t sub_100303CD8(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_100303D34(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t type metadata accessor for TypedPredicate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6C78(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TypedPredicate);
}

uint64_t sub_100303D94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100844A18);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100844A18);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_100303E24(char *a1)
{
  sub_1002B4D98(*a1);
}

void sub_100303E30()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_100303E7C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6E6F697461657263, 0xEC00000065746144);
  swift_bridgeObjectRelease(0xEC00000065746144);
  return Hasher._finalize()();
}

void sub_100303EE4()
{
  __asm { BR              X10 }
}

uint64_t sub_100303F20(uint64_t a1)
{
  String.hash(into:)(a1, 0x6E6F697461657263, 0xEC00000065746144);
  return swift_bridgeObjectRelease(0xEC00000065746144);
}

void sub_100303F74(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_100303FBC()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6E6F697461657263, 0xEC00000065746144);
  swift_bridgeObjectRelease(0xEC00000065746144);
  return Hasher._finalize()();
}

unint64_t sub_100304024@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100304274(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100304050()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_100304080 + 4 * byte_1006B3A7C[*v0]))();
}

void sub_100304080(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "creationDate");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_1003040A4(_QWORD *a1@<X8>)
{
  *a1 = 1701667182;
  a1[1] = 0xE400000000000000;
}

void sub_1003040B8(_QWORD *a1@<X8>)
{
  *a1 = 1701869940;
  a1[1] = 0xE400000000000000;
}

void sub_1003040CC(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E02F0;
}

unint64_t sub_1003040DC@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100304274(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100304100()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100304130 + 4 * byte_1006B3A80[*v0]))(0x44497463656A626FLL, 0xE800000000000000);
}

uint64_t sub_100304130()
{
  return 0x6E6F697461657263;
}

uint64_t sub_100304150()
{
  return 1701667182;
}

uint64_t sub_100304160()
{
  return 1701869940;
}

uint64_t sub_100304170@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DE1E8, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_1003041CC(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E0318;
}

uint64_t sub_1003041DC@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DE1E8, v3);
  result = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t type metadata accessor for REMHashtagCDIngestor()
{
  return objc_opt_self(_TtC7remindd20REMHashtagCDIngestor);
}

_UNKNOWN **sub_10030425C()
{
  return &off_1007EDA78;
}

_UNKNOWN **sub_100304268()
{
  return &off_1007EDA48;
}

unint64_t sub_100304274(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DE238, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

NSObject *sub_1003042BC(void *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  NSObject *v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t, NSObject *);
  id v39;
  void *v40;
  id v41;
  uint64_t v42;
  NSObject *v43;
  id v44;
  id v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  NSObject *v52;
  int v53;
  uint64_t v54;
  _QWORD *v55;
  id v56;
  uint64_t v57;
  unint64_t v58;
  double v59;
  id v60;
  void *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  NSObject *v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  _QWORD *v70;
  NSObject *v71;
  uint64_t v72;
  id v73;
  void *v74;
  uint64_t v75;
  id v76;
  void *v77;
  uint64_t v78;
  void (*v79)(char *, char *, uint64_t);
  char *v80;
  uint64_t v81;
  void *v82;
  Class v83;
  id v84;
  uint64_t v85;
  id v86;
  NSString v87;
  Class v88;
  void *v89;
  id v90;
  id v91;
  id v92;
  uint64_t v93;
  NSObject *v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  _QWORD *v98;
  NSObject *v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  void *v103;
  unint64_t v104;
  uint64_t ObjCClassFromMetadata;
  NSString v106;
  uint64_t v107;
  unint64_t v109;
  uint64_t v110;
  NSString v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  NSString v115;
  uint64_t v116;
  id v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  id v123;
  NSObject *v124;
  uint64_t v125;
  uint64_t v126;
  NSObject *v127;
  uint64_t v128;

  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v4);
  v6 = (char *)&v117 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v119 = *(_QWORD *)(v7 - 8);
  v120 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v117 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v118 = (char *)&v117 - v11;
  v124 = type metadata accessor for UUID(0);
  isa = v124[-1].isa;
  __chkstk_darwin(v124);
  v122 = (char *)&v117 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v14);
  v16 = (char *)&v117 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v117 - v18;
  *(_QWORD *)&v21 = __chkstk_darwin(v20).n128_u64[0];
  v125 = (uint64_t)&v117 - v22;
  v127 = 0;
  v23 = objc_msgSend(a1, "remObjectIDWithError:", &v127, v21);
  v24 = v127;
  v123 = v23;
  if (v23)
  {
    v25 = v127;
    if ((a2 & 1) == 0 || (objc_msgSend(a1, "markedForDeletion") & 1) == 0)
    {
      v26 = objc_msgSend(a1, "sharedToMeReminderCKIdentifier");
      if (!v26)
      {
        v32 = objc_msgSend(a1, "reminder");
        if (v32
          && (v33 = v32,
              v34 = objc_msgSend(v32, "remObjectID"),
              v33,
              v34))
        {
          v35 = objc_msgSend(v34, "uuid");

          v36 = v125;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v35);

          (*((void (**)(uint64_t, _QWORD, uint64_t, NSObject *))isa + 7))(v36, 0, 1, v124);
        }
        else
        {
          (*((void (**)(uint64_t, uint64_t, uint64_t, NSObject *))isa + 7))(v125, 1, 1, v124);
        }
        LODWORD(v121) = 0;
LABEL_16:
        v39 = objc_msgSend(a1, "account");
        if (!v39
          || (v40 = v39,
              v41 = objc_msgSend(v39, "remObjectID"),
              v40,
              (v117 = v41) == 0))
        {
LABEL_20:
          v44 = objc_msgSend(a1, "account", v117);

          if (v44)
          {
            v30 = 0xE900000000000029;
            v45 = v123;
            if ((_DWORD)v121)
            {
LABEL_22:
              swift_bridgeObjectRelease();
              if (qword_100837138 != -1)
                swift_once(&qword_100837138, sub_100303D94);
              v46 = type metadata accessor for Logger(0);
              sub_10001AAA8(v46, (uint64_t)qword_100844A18);
              v47 = a1;
              v48 = v45;
              v49 = v47;
              v50 = v48;
              v51 = v49;
              v52 = Logger.logObject.getter(v51);
              v53 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v52, (os_log_type_t)v53))
              {
                LODWORD(v122) = v53;
                v54 = swift_slowAlloc(32, -1);
                v55 = (_QWORD *)swift_slowAlloc(8, -1);
                v124 = swift_slowAlloc(64, -1);
                v126 = (uint64_t)v50;
                v127 = v124;
                *(_DWORD *)v54 = 138543874;
                v56 = v50;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127);
                *v55 = v45;

                *(_WORD *)(v54 + 12) = 2082;
                v57 = Bool.yesno.getter(objc_msgSend(v51, "markedForDeletion"));
                v126 = sub_10001A820(v57, v58, (uint64_t *)&v127);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127);

                *(_QWORD *)&v59 = swift_bridgeObjectRelease().n128_u64[0];
                *(_WORD *)(v54 + 22) = 2082;
                v60 = objc_msgSend(v51, "sharedToMeReminderCKIdentifier", v59);
                if (v60)
                {
                  v61 = v60;
                  v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
                  v64 = v63;

                }
                else
                {
                  v64 = 0xE300000000000000;
                  v62 = 7104878;
                }
                v126 = sub_10001A820(v62, v64, (uint64_t *)&v127);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127);

                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v122, "REMHashtagCDIngestor: cdHashtag.reminderIdentifier is nil {cdHashtag.remObjectID: %{public}@, markedForDeletion: %{public}s, cdHashtag.sharedToMeReminderCKIdentifier: %{public}s}", (uint8_t *)v54, 0x20u);
                v101 = sub_10001A630((uint64_t *)&unk_100839E70);
                swift_arrayDestroy(v55, 1, v101);
                swift_slowDealloc(v55, -1, -1);
                v102 = v124;
                swift_arrayDestroy(v124, 2, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v102, -1, -1);
                swift_slowDealloc(v54, -1, -1);

                v30 = 0x80000001006F47A0;
                v42 = v125;
                v45 = v123;
              }
              else
              {

                v30 = 0x80000001006F47A0;
                v42 = v125;
              }
LABEL_47:
              v103 = (void *)objc_opt_self(REMError);
              v104 = sub_10030545C();
              ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v104);
              v106 = String._bridgeToObjectiveC()();
              objc_msgSend(v103, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v106, swift_bridgeObjectRelease().n128_f64[0]);

              swift_willThrow(v107);
LABEL_48:
              sub_10000882C(v42, (uint64_t *)&unk_100839C80);
              return v30;
            }
          }
          else
          {
            v45 = v123;
            if (qword_100837138 != -1)
              swift_once(&qword_100837138, sub_100303D94);
            v65 = type metadata accessor for Logger(0);
            sub_10001AAA8(v65, (uint64_t)qword_100844A18);
            v66 = v45;
            v67 = Logger.logObject.getter(v66);
            v68 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v67, v68))
            {
              v69 = (uint8_t *)swift_slowAlloc(12, -1);
              v70 = (_QWORD *)swift_slowAlloc(8, -1);
              *(_DWORD *)v69 = 138543362;
              v127 = v66;
              v71 = v66;
              v45 = v123;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128);
              *v70 = v45;

              _os_log_impl((void *)&_mh_execute_header, v67, v68, "REMHashtagCDIngestor: cdHashtag.account is nil {cdHashtag.remObjectID: %{public}@}", v69, 0xCu);
              v72 = sub_10001A630((uint64_t *)&unk_100839E70);
              swift_arrayDestroy(v70, 1, v72);
              swift_slowDealloc(v70, -1, -1);
              swift_slowDealloc(v69, -1, -1);
            }
            else
            {

              v67 = v66;
            }

            v30 = 0xE700000000000000;
            if ((_DWORD)v121)
              goto LABEL_22;
          }
          v92 = objc_msgSend(a1, "reminder");

          v42 = v125;
          if (!v92)
          {
            swift_bridgeObjectRelease();
            if (qword_100837138 != -1)
              swift_once(&qword_100837138, sub_100303D94);
            v93 = type metadata accessor for Logger(0);
            sub_10001AAA8(v93, (uint64_t)qword_100844A18);
            v94 = v45;
            v95 = Logger.logObject.getter(v94);
            v96 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v95, v96))
            {
              v97 = (uint8_t *)swift_slowAlloc(12, -1);
              v98 = (_QWORD *)swift_slowAlloc(8, -1);
              *(_DWORD *)v97 = 138412290;
              v127 = v94;
              v99 = v94;
              v45 = v123;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128);
              *v98 = v45;

              _os_log_impl((void *)&_mh_execute_header, v95, v96, "REMHashtagCDIngestor: cdHashtag.reminder is nil when nil reminder reference is not legit {cdHashtag.remObjectID: %@}", v97, 0xCu);
              v100 = sub_10001A630((uint64_t *)&unk_100839E70);
              swift_arrayDestroy(v98, 1, v100);
              swift_slowDealloc(v98, -1, -1);
              swift_slowDealloc(v97, -1, -1);

            }
            else
            {

            }
            v30 = 0xE800000000000000;
          }
          goto LABEL_47;
        }
        v42 = v125;
        sub_10011D420(v125, (uint64_t)v16);
        v43 = v124;
        if ((*((unsigned int (**)(char *, uint64_t, NSObject *))isa + 6))(v16, 1, v124) == 1)
        {

          sub_10000882C((uint64_t)v16, (uint64_t *)&unk_100839C80);
          goto LABEL_20;
        }
        (*((void (**)(char *, char *, NSObject *))isa + 4))(v122, v16, v43);
        v73 = objc_msgSend(a1, "name");
        if (!v73)
        {
          v30 = objc_opt_self(REMError);
          v109 = sub_10030545C();
          v110 = swift_getObjCClassFromMetadata(v109);
          v111 = String._bridgeToObjectiveC()();
          -[NSObject unexpectedNilPropertyWithClass:property:](v30, "unexpectedNilPropertyWithClass:property:", v110, v111);

          swift_willThrow(v112);
          (*((void (**)(char *, NSObject *))isa + 1))(v122, v43);
          goto LABEL_48;
        }
        v74 = v73;
        v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);

        v76 = objc_msgSend(a1, "creationDate");
        if (v76)
        {
          v77 = v76;
          v121 = v75;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v76);

          v78 = v119;
          v79 = *(void (**)(char *, char *, uint64_t))(v119 + 32);
          v80 = v9;
          v81 = v120;
          v79(v6, v80, v120);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v6, 0, 1, v81);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v6, 1, v81) != 1)
          {
            v79(v118, v6, v81);
            v82 = (void *)objc_opt_self(REMReminder);
            v83 = UUID._bridgeToObjectiveC()().super.isa;
            v84 = objc_msgSend(v82, "objectIDWithUUID:", v83);

            v85 = (int)objc_msgSend(a1, "type");
            v86 = objc_allocWithZone((Class)REMHashtag);
            v87 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            v88 = Date._bridgeToObjectiveC()().super.isa;
            v89 = v86;
            v90 = v123;
            v91 = v117;
            v30 = objc_msgSend(v89, "initWithObjectID:accountID:reminderID:type:name:creationDate:", v123, v117, v84, v85, v87, v88);

            (*(void (**)(char *, uint64_t))(v78 + 8))(v118, v120);
            (*((void (**)(char *, NSObject *))isa + 1))(v122, v124);
            sub_10000882C(v125, (uint64_t *)&unk_100839C80);
            return v30;
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v119 + 56))(v6, 1, 1, v120);
        }
        swift_bridgeObjectRelease();
        sub_10000882C((uint64_t)v6, (uint64_t *)&unk_1008380D0);
        v30 = objc_opt_self(REMError);
        v113 = sub_10030545C();
        v114 = swift_getObjCClassFromMetadata(v113);
        v115 = String._bridgeToObjectiveC()();
        -[NSObject unexpectedNilPropertyWithClass:property:](v30, "unexpectedNilPropertyWithClass:property:", v114, v115);

        swift_willThrow(v116);
        (*((void (**)(char *, NSObject *))isa + 1))(v122, v124);
        goto LABEL_48;
      }

    }
    v27 = objc_msgSend(a1, "reminderIdentifier");
    if (v27)
    {
      v28 = v27;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v27);

      v29 = 0;
    }
    else
    {
      v29 = 1;
    }
    v37 = v125;
    v38 = (void (*)(char *, uint64_t, uint64_t, NSObject *))*((_QWORD *)isa + 7);
    LODWORD(v121) = 1;
    v38(v19, v29, 1, v124);
    sub_1000F2CE4((uint64_t)v19, v37);
    goto LABEL_16;
  }
  v30 = v127;
  _convertNSErrorToError(_:)(v24);

  swift_willThrow(v31);
  return v30;
}

uint64_t sub_100305068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  __chkstk_darwin(v6);
  v4 = type metadata accessor for Date(0);
  result = __chkstk_darwin(v4);
  if (*(_QWORD *)(a3 + 16))
  {
    swift_bridgeObjectRetain(a3);
    __asm { BR              X9 }
  }
  return result;
}

void sub_100305308(void *a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  objc_class *v12;
  Class isa;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    v14 = *(void **)(v3 + 24);
    sub_1003FD010(1, v14, a3);
    if (v4)
      return;
    v16 = v15;
    objc_msgSend(a1, "setReminder:", v15);
    v17 = objc_msgSend(v14, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v17);

    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    objc_msgSend(a1, "setReminderIdentifier:", isa);

  }
  else
  {
    sub_1003FCFE4(0, *(void **)(v3 + 16), a3);
    if (v4)
      return;
    isa = v12;
    objc_msgSend(a1, "setAccount:", v12);
  }

}

unint64_t sub_10030545C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083DA60;
  if (!qword_10083DA60)
  {
    v1 = objc_opt_self(REMCDHashtag);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10083DA60);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for REMHashtagCDIngestor.RelationshipKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1003054E4 + 4 * byte_1006B3A89[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100305518 + 4 * byte_1006B3A84[v4]))();
}

uint64_t sub_100305518(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100305520(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100305528);
  return result;
}

uint64_t sub_100305534(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10030553CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100305540(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100305548(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMHashtagCDIngestor.RelationshipKey()
{
  return &type metadata for REMHashtagCDIngestor.RelationshipKey;
}

uint64_t storeEnumTagSinglePayload for REMHashtagCDIngestor.ValueKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1003055B0 + 4 * byte_1006B3A93[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1003055E4 + 4 * byte_1006B3A8E[v4]))();
}

uint64_t sub_1003055E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003055EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003055F4);
  return result;
}

uint64_t sub_100305600(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100305608);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10030560C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100305614(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMHashtagCDIngestor.ValueKey()
{
  return &type metadata for REMHashtagCDIngestor.ValueKey;
}

uint64_t sub_100305630()
{
  return sub_1000BAEEC(&qword_100844C28, &qword_10083BE58);
}

unint64_t sub_100305658()
{
  unint64_t result;

  result = qword_100844C30;
  if (!qword_100844C30)
  {
    result = swift_getWitnessTable(&unk_1006B3BC4, &type metadata for REMHashtagCDIngestor.ValueKey);
    atomic_store(result, (unint64_t *)&qword_100844C30);
  }
  return result;
}

uint64_t sub_10030569C()
{
  return sub_1000BAEEC(&qword_100844C38, &qword_100844C40);
}

unint64_t sub_1003056C4()
{
  unint64_t result;

  result = qword_100844C48;
  if (!qword_100844C48)
  {
    result = swift_getWitnessTable(&unk_1006B3C9C, &type metadata for REMHashtagCDIngestor.RelationshipKey);
    atomic_store(result, (unint64_t *)&qword_100844C48);
  }
  return result;
}

uint64_t *RDSynchronizedKeyValueStore.default.unsafeMutableAddressor()
{
  if (qword_100837148 != -1)
    swift_once(&qword_100837148, sub_1003080F0);
  return &static RDSynchronizedKeyValueStore.default;
}

uint64_t sub_100305748(uint64_t a1, uint64_t a2)
{
  return sub_1003069AC(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for Locale, &qword_100844D40, (uint64_t)&protocol conformance descriptor for Locale);
}

uint64_t sub_100305764(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a2[4];
  v8 = a2[5];
  v9 = v5 == v7 && v6 == v8;
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0), result = 0, (v10 & 1) != 0))
  {
    v12 = v2 - 1;
    if (!v12)
      return 1;
    v13 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v15 = *(i - 1);
      v16 = *i;
      v17 = *(v13 - 1);
      v18 = *v13;
      v19 = v15 == v17 && v16 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0) & 1) == 0)
        break;
      v13 += 2;
      if (!--v12)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_100305828(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  char *v27;
  uint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v42 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630((uint64_t *)&unk_10084C100);
  __chkstk_darwin(v10);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
  __chkstk_darwin(v44);
  v43 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v39 - v16;
  v45 = a1;
  v46 = a2;
  v18 = *(_QWORD *)(a1 + 16);
  if (v18 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v18 || v45 == v46)
    return 1;
  v40 = v9;
  v19 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v41 = *(_QWORD *)(v15 + 72);
  v20 = (uint64_t)v43;
  v39 = v10;
  while (1)
  {
    sub_1000151E8(v45 + v19, (uint64_t)v17, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
    sub_1000151E8(v46 + v19, v20, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
    v21 = (uint64_t)&v12[*(int *)(v10 + 48)];
    sub_1000CDA2C((uint64_t)v17, (uint64_t)v12);
    sub_1000CDA2C(v20, v21);
    v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
    if (v22(v12, 1, v4) != 1)
      break;
    if (v22((char *)v21, 1, v4) != 1)
      goto LABEL_22;
    sub_10000882C((uint64_t)v12, (uint64_t *)&unk_1008380D0);
LABEL_12:
    v32 = *(int *)(v44 + 20);
    v33 = &v17[v32];
    v34 = *(_QWORD *)&v17[v32 + 8];
    v35 = (_QWORD *)(v20 + v32);
    v36 = v35[1];
    if (v34)
    {
      if (!v36)
        goto LABEL_23;
      v37 = *(_QWORD *)v33 == *v35 && v34 == v36;
      if (!v37 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v33, v34, *v35, v36, 0) & 1) == 0)
        goto LABEL_23;
    }
    else if (v36)
    {
      goto LABEL_23;
    }
    sub_10001C744(v20, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
    sub_10001C744((uint64_t)v17, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
    v19 += v41;
    if (!--v18)
      return 1;
  }
  v23 = v5;
  v24 = (uint64_t)v40;
  sub_1000CDA2C((uint64_t)v12, (uint64_t)v40);
  if (v22((char *)v21, 1, v4) != 1)
  {
    v25 = v23;
    v26 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 32);
    v27 = v42;
    v26(v42, v21, v4);
    v28 = sub_10009FC50((unint64_t *)&qword_100839DB0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v29 = dispatch thunk of static Equatable.== infix(_:_:)(v24, v27, v4, v28);
    v30 = *(void (**)(char *, uint64_t))(v25 + 8);
    v30(v27, v4);
    v31 = v24;
    v5 = v25;
    v10 = v39;
    v30((char *)v31, v4);
    sub_10000882C((uint64_t)v12, (uint64_t *)&unk_1008380D0);
    v20 = (uint64_t)v43;
    if ((v29 & 1) == 0)
      goto LABEL_23;
    goto LABEL_12;
  }
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v24, v4);
  v20 = (uint64_t)v43;
LABEL_22:
  sub_10000882C((uint64_t)v12, (uint64_t *)&unk_10084C100);
LABEL_23:
  sub_10001C744(v20, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
  sub_10001C744((uint64_t)v17, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
  return 0;
}

uint64_t sub_100305BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t result;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v4 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v66 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v11 || a1 == a2)
    return 1;
  v71 = v8;
  v12 = 0;
  v13 = a1 + 32;
  v74 = a2 + 32;
  v73 = v11;
  while (1)
  {
    v15 = (unsigned __int8 *)(v13 + (v12 << 6));
    v16 = *v15;
    v17 = v15[1];
    v18 = *((_QWORD *)v15 + 1);
    v19 = *((_QWORD *)v15 + 2);
    v20 = *((_QWORD *)v15 + 3);
    v21 = *((_QWORD *)v15 + 4);
    v23 = *((_QWORD *)v15 + 5);
    v22 = *((_QWORD *)v15 + 6);
    v24 = *((_QWORD *)v15 + 7);
    v25 = (unsigned __int8 *)(v74 + (v12 << 6));
    v26 = *v25;
    v27 = v25[1];
    v28 = *((_QWORD *)v25 + 1);
    v29 = *((_QWORD *)v25 + 2);
    v30 = *((_QWORD *)v25 + 3);
    v79 = *((_QWORD *)v25 + 4);
    v80 = *((_QWORD *)v25 + 5);
    v31 = *((_QWORD *)v25 + 7);
    v81 = *((_QWORD *)v25 + 6);
    if (v16 == 2)
    {
      if (v26 != 2)
        return 0;
    }
    else
    {
      v14 = 0;
      v32 = (v16 & 1) == 0;
      if (v26 == 2 || ((v32 ^ v26) & 1) == 0)
        return v14;
    }
    if (v17 == 2)
    {
      if (v27 != 2)
        return 0;
    }
    else
    {
      v14 = 0;
      v33 = (v17 & 1) == 0;
      if (v27 == 2 || ((v33 ^ v27) & 1) == 0)
        return v14;
    }
    v77 = v21;
    v78 = v20;
    if (v19)
    {
      if (!v29)
        return 0;
      if (v18 != v28 || v19 != v29)
      {
        v34 = v29;
        v75 = v24;
        v35 = v22;
        v36 = v23;
        v72 = v19;
        v37 = v30;
        v38 = v13;
        v39 = v12;
        v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v28, v29, 0);
        v19 = v72;
        v11 = v73;
        v23 = v36;
        v21 = v77;
        v20 = v78;
        v22 = v35;
        v24 = v75;
        v29 = v34;
        v12 = v39;
        v13 = v38;
        v30 = v37;
        if ((v40 & 1) == 0)
          return 0;
      }
    }
    else if (v29)
    {
      return 0;
    }
    v76 = v29;
    if (v20)
    {
      if (!v30)
        goto LABEL_41;
      v41 = v21;
      v42 = v23;
      v43 = v23;
      v44 = v22;
      v45 = v30;
      v46 = v30;
      v47 = v13;
      v48 = v19;
      v49 = v12;
      v50 = sub_1001F69CC(v20, v41, v43, v22, v45, v79, v80, v81);
      v19 = v48;
      v13 = v47;
      v30 = v46;
      v11 = v73;
      v29 = v76;
      v12 = v49;
      if ((v50 & 1) == 0)
        return 0;
    }
    else
    {
      v42 = v23;
      v44 = v22;
      if (v30)
      {
        v20 = v78;
LABEL_41:
        v58 = v22;
        v59 = v20;
        v60 = v23;
        sub_1001FC0A8(v20, v21, v23, v22);
        v61 = v30;
        v62 = v30;
        v64 = v79;
        v63 = v80;
        v65 = v81;
        sub_1001FC0A8(v61, v79, v80, v81);
        sub_1001F92A0(v59, v21, v60, v58);
        sub_1001F92A0(v62, v64, v63, v65);
        return 0;
      }
    }
    v75 = v30;
    v51 = *(_QWORD *)(v24 + 16);
    if (v51 != *(_QWORD *)(v31 + 16))
      return 0;
    if (v51 && v24 != v31)
      break;
LABEL_5:
    ++v12;
    v14 = 1;
    if (v12 == v11)
      return v14;
  }
  v67 = v13;
  v68 = v12;
  v52 = (*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
  v72 = v19;
  v53 = v29;
  swift_bridgeObjectRetain(v19);
  v69 = v42;
  v70 = v44;
  sub_1001FC0A8(v78, v77, v42, v44);
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRetain(v24);
  sub_1001FC0A8(v75, v79, v80, v81);
  swift_bridgeObjectRetain(v31);
  v54 = 0;
  v55 = *(_QWORD *)(v71 + 72);
  while (1)
  {
    result = sub_1000151E8(v24 + v52, (uint64_t)v10, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
    if (v54 >= *(_QWORD *)(v31 + 16))
      break;
    sub_1000151E8(v31 + v52, (uint64_t)v6, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
    v57 = sub_1001F4B7C((uint64_t)v10, (uint64_t)v6);
    sub_10001C744((uint64_t)v6, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
    sub_10001C744((uint64_t)v10, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
    if (!v57)
    {
      swift_bridgeObjectRelease();
      sub_1001F92A0(v75, v79, v80, v81);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1001F92A0(v78, v77, v69, v70);
      swift_bridgeObjectRelease();
      return 0;
    }
    ++v54;
    v52 += v55;
    if (v51 == v54)
    {
      swift_bridgeObjectRelease();
      sub_1001F92A0(v75, v79, v80, v81);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1001F92A0(v78, v77, v69, v70);
      swift_bridgeObjectRelease();
      v11 = v73;
      v13 = v67;
      v12 = v68;
      goto LABEL_5;
    }
  }
  __break(1u);
  return result;
}

BOOL sub_10030605C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v17;
  uint64_t v19;

  v4 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      return 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      do
      {
        sub_1000151E8(a1 + v12, (uint64_t)v10, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
        sub_1000151E8(a2 + v12, (uint64_t)v6, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
        v15 = sub_1001F4B7C((uint64_t)v10, (uint64_t)v6);
        sub_10001C744((uint64_t)v6, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
        sub_10001C744((uint64_t)v10, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
        v17 = v14-- != 0;
        if (!v15)
          break;
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    return 0;
  }
  return v15;
}

void sub_100306198(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v4 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v65 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 != *(_QWORD *)(a2 + 16) || !v11 || a1 == a2)
    return;
  v12 = 0;
  v13 = a1 + 32;
  v14 = a2 + 32;
  while (1)
  {
    v15 = (uint64_t *)(v13 + 24 * v12);
    v16 = v15[2];
    v17 = (uint64_t *)(v14 + 24 * v12);
    v18 = v17[1];
    v19 = v17[2];
    v86 = v15[1];
    v87 = v18;
    if (v86)
    {
      if (!v87)
        return;
      v20 = *v15;
      v21 = *v17;
      if (*v15 != *v17 || v86 != v87)
      {
        v72 = v19;
        v23 = v16;
        v24 = v12;
        v25 = v13;
        v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v86, v21, v87, 0);
        v13 = v25;
        v12 = v24;
        v16 = v23;
        v19 = v72;
        if ((v26 & 1) == 0)
          return;
      }
    }
    else if (v87)
    {
      return;
    }
    v27 = *(_QWORD *)(v16 + 16);
    if (v27 != *(_QWORD *)(v19 + 16))
      return;
    if (v27 && v16 != v19)
      break;
LABEL_20:
    if (++v12 == v11)
      return;
  }
  v65 = v14;
  v66 = v13;
  v67 = v12;
  v68 = v11;
  v71 = v5;
  v74 = v19 + 32;
  v75 = v16 + 32;
  swift_bridgeObjectRetain(v87);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v16);
  v29 = 0;
  v73 = v16;
  while (1)
  {
    if (v29 >= *(_QWORD *)(v19 + 16))
      goto LABEL_65;
    v30 = (unsigned __int8 *)(v75 + (v29 << 6));
    v31 = *v30;
    v32 = v30[1];
    v33 = *((_QWORD *)v30 + 1);
    v34 = *((_QWORD *)v30 + 2);
    v35 = *((_QWORD *)v30 + 3);
    v84 = *((_QWORD *)v30 + 4);
    v36 = *((_QWORD *)v30 + 6);
    v85 = *((_QWORD *)v30 + 5);
    v37 = *((_QWORD *)v30 + 7);
    v79 = v29;
    v38 = (unsigned __int8 *)(v74 + (v29 << 6));
    v39 = *v38;
    v40 = v38[1];
    v41 = *((_QWORD *)v38 + 1);
    v42 = *((_QWORD *)v38 + 2);
    v43 = *((_QWORD *)v38 + 3);
    v44 = *((_QWORD *)v38 + 5);
    v81 = *((_QWORD *)v38 + 4);
    v82 = v44;
    v45 = *((_QWORD *)v38 + 7);
    v83 = *((_QWORD *)v38 + 6);
    if (v31 == 2)
    {
      if (v39 != 2)
        goto LABEL_58;
    }
    else if (v39 == 2 || ((((v31 & 1) == 0) ^ v39) & 1) == 0)
    {
      goto LABEL_58;
    }
    if (v32 == 2)
    {
      if (v40 != 2)
        goto LABEL_58;
    }
    else if (v40 == 2 || ((((v32 & 1) == 0) ^ v40) & 1) == 0)
    {
      goto LABEL_58;
    }
    v80 = v36;
    if (v34)
    {
      if (!v42)
        goto LABEL_58;
      if (v33 != v41 || v34 != v42)
      {
        v46 = v34;
        v47 = v42;
        v48 = v43;
        v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, v41, v42, 0);
        v34 = v46;
        v43 = v48;
        v42 = v47;
        v36 = v80;
        if ((v49 & 1) == 0)
        {
LABEL_58:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_59;
        }
      }
    }
    else if (v42)
    {
      goto LABEL_58;
    }
    v77 = v43;
    v78 = v35;
    v76 = v42;
    if (!v35)
    {
      if (!v43)
        goto LABEL_46;
      v58 = v77;
      v35 = v78;
LABEL_63:
      v60 = v84;
      v59 = v85;
      v61 = v35;
      sub_1001FC0A8(v35, v84, v85, v36);
      v63 = v81;
      v62 = v82;
      v64 = v83;
      sub_1001FC0A8(v58, v81, v82, v83);
      sub_1001F92A0(v61, v60, v59, v36);
      sub_1001F92A0(v58, v63, v62, v64);
LABEL_57:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v86 = v87;
LABEL_59:
      swift_bridgeObjectRelease();
      return;
    }
    if (!v43)
    {
      v58 = 0;
      goto LABEL_63;
    }
    v50 = v34;
    v51 = sub_1001F69CC(v35, v84, v85, v36, v43, v81, v82, v83);
    v34 = v50;
    if ((v51 & 1) == 0)
      goto LABEL_57;
LABEL_46:
    v52 = *(_QWORD *)(v37 + 16);
    if (v52 != *(_QWORD *)(v45 + 16))
      goto LABEL_57;
    if (v52 && v37 != v45)
      break;
LABEL_22:
    v29 = v79 + 1;
    if (v79 + 1 == v27)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v5 = v71;
      v12 = v67;
      v11 = v68;
      v13 = v66;
      v14 = v65;
      goto LABEL_20;
    }
  }
  v69 = v27;
  v70 = v34;
  v72 = v19;
  v53 = v71;
  v54 = (*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
  swift_bridgeObjectRetain(v34);
  sub_1001FC0A8(v78, v84, v85, v80);
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRetain(v37);
  sub_1001FC0A8(v77, v81, v82, v83);
  swift_bridgeObjectRetain(v45);
  v55 = 0;
  v56 = *(_QWORD *)(v53 + 72);
  while (1)
  {
    sub_1000151E8(v37 + v54, (uint64_t)v10, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
    if (v55 >= *(_QWORD *)(v45 + 16))
      break;
    sub_1000151E8(v45 + v54, (uint64_t)v7, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
    v57 = sub_1001F7000((uint64_t)v10, (uint64_t)v7);
    sub_10001C744((uint64_t)v7, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
    sub_10001C744((uint64_t)v10, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
    if (!v57)
    {
      swift_bridgeObjectRelease();
      sub_1001F92A0(v77, v81, v82, v83);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1001F92A0(v78, v84, v85, v80);
      swift_bridgeObjectRelease();
      goto LABEL_57;
    }
    ++v55;
    v54 += v56;
    if (v52 == v55)
    {
      swift_bridgeObjectRelease();
      sub_1001F92A0(v77, v81, v82, v83);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1001F92A0(v78, v84, v85, v80);
      swift_bridgeObjectRelease();
      v19 = v72;
      v27 = v69;
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_65:
  __break(1u);
}

BOOL sub_100306730(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  v3 = a1 + 5;
  v4 = a2 + 5;
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

int32x2_t sub_10030679C(int64x2_t *a1, int64x2_t *a2)
{
  uint64_t v2;
  int64x2_t *v4;
  int64x2_t *v5;
  uint64_t v6;
  int64x2_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int32x2_t result;

  v2 = a1[1].i64[0];
  if (v2 == a2[1].i64[0] && v2 && a1 != a2 && a1[2].i64[0] == a2[2].i64[0] && a1[2].i64[1] == a2[2].i64[1])
  {
    v4 = a1 + 3;
    v5 = a2 + 3;
    v6 = v2 - 1;
    do
    {
      if (!v6)
        break;
      v7 = *v4++;
      v8 = v7;
      v9 = *v5++;
      result = vmovn_s64(vceqq_s64(v8, v9));
      --v6;
    }
    while ((result.i32[0] & result.i32[1] & 1) != 0);
  }
  return result;
}

uint64_t sub_100306820(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _OWORD *v3;
  _OWORD *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;
  BOOL v16;
  _OWORD v18[9];
  _OWORD v19[9];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v14 = 1;
    }
    else
    {
      v3 = (_OWORD *)(a1 + 32);
      v4 = (_OWORD *)(a2 + 32);
      v5 = v2 - 1;
      do
      {
        v6 = v3[7];
        v18[6] = v3[6];
        v18[7] = v6;
        v18[8] = v3[8];
        v7 = v3[3];
        v18[2] = v3[2];
        v18[3] = v7;
        v8 = v3[5];
        v18[4] = v3[4];
        v18[5] = v8;
        v9 = v3[1];
        v18[0] = *v3;
        v18[1] = v9;
        v10 = v4[7];
        v19[6] = v4[6];
        v19[7] = v10;
        v19[8] = v4[8];
        v11 = v4[3];
        v19[2] = v4[2];
        v19[3] = v11;
        v12 = v4[5];
        v19[4] = v4[4];
        v19[5] = v12;
        v13 = v4[1];
        v19[0] = *v4;
        v19[1] = v13;
        sub_1000A7044(v18);
        sub_1000A7044(v19);
        v14 = sub_1000E85CC((double *)v18, (uint64_t)v19);
        sub_1000A7128(v19);
        sub_1000A7128(v18);
        v16 = v5-- != 0;
        if ((v14 & 1) == 0)
          break;
        v3 += 9;
        v4 += 9;
      }
      while (v16);
    }
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

BOOL sub_100306924(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  uint64_t v5;
  _BOOL8 result;
  double v7;
  double v8;
  double v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
    return 0;
  v3 = (double *)(a1 + 40);
  v4 = (double *)(a2 + 40);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v7 = *v3++;
    v8 = v7;
    v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

uint64_t sub_100306990(uint64_t a1, uint64_t a2)
{
  return sub_1003069AC(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (unint64_t *)&qword_10083B380, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_1003069AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, unint64_t, uint64_t);
  uint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void (*v27)(uint64_t, uint64_t);
  BOOL v29;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, unint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);

  v10 = a3(0);
  v11 = __chkstk_darwin(v10);
  __chkstk_darwin(v11);
  v15 = (char *)&v31 - v14;
  v16 = *(_QWORD *)(a1 + 16);
  if (v16 == *(_QWORD *)(a2 + 16))
  {
    if (!v16 || a1 == a2)
    {
      v26 = 1;
    }
    else
    {
      v34 = v13;
      v35 = v12;
      v36 = a3;
      v17 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      v31 = *(_QWORD *)(v12 + 72);
      v32 = a1;
      v33 = *(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 16);
      v18 = v16 - 1;
      v19 = v13;
      do
      {
        v20 = v33;
        v33((uint64_t)v15, a1 + v17, v10);
        v21 = a2;
        v20(v19, a2 + v17, v10);
        v22 = a4;
        v23 = a4;
        v24 = a5;
        v25 = sub_10009FC50(v23, v36, a5);
        v26 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v19, v10, v25);
        v27 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
        v27(v19, v10);
        v27((uint64_t)v15, v10);
        v29 = v18-- != 0;
        if ((v26 & 1) == 0)
          break;
        v17 += v31;
        a5 = v24;
        a4 = v22;
        a2 = v21;
        a1 = v32;
      }
      while (v29);
    }
  }
  else
  {
    v26 = 0;
  }
  return v26 & 1;
}

uint64_t sub_100306B50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[9];
  uint64_t v21;
  uint64_t v22;

  v22 = type metadata accessor for RDSavedURLAttachment(0);
  v4 = __chkstk_darwin(v22);
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v9 = (char *)v20 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10 == *(_QWORD *)(a2 + 16))
  {
    if (!v10 || a1 == a2)
      return 1;
    v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v21 = *(_QWORD *)(v7 + 72);
    v20[4] = (char *)v20 - v8;
    v20[5] = v6;
    v20[3] = a2;
    v20[8] = a1;
    while (1)
    {
      sub_1000151E8(a1 + v11, (uint64_t)v9, type metadata accessor for RDSavedURLAttachment);
      sub_1000151E8(a2 + v11, (uint64_t)v6, type metadata accessor for RDSavedURLAttachment);
      if ((static URL.== infix(_:_:)(v9, v6) & 1) == 0)
        break;
      v12 = *(int *)(v22 + 20);
      v13 = *(_QWORD *)&v9[v12];
      v14 = *(_QWORD *)&v9[v12 + 8];
      v15 = (uint64_t *)&v6[v12];
      v16 = v15[1];
      if (v14 >> 60 != 15)
      {
        if (v16 >> 60 != 15)
          __asm { BR              X8 }
LABEL_12:
        v18 = v13;
        v19 = *v15;
        sub_1000A70D0(v13, v14);
        sub_1000A70D0(v19, v16);
        sub_1000A71B4(v18, v14);
        sub_1000A71B4(v19, v16);
        break;
      }
      if (v16 >> 60 != 15)
        goto LABEL_12;
      sub_10001C744((uint64_t)v6, type metadata accessor for RDSavedURLAttachment);
      sub_10001C744((uint64_t)v9, type metadata accessor for RDSavedURLAttachment);
      v11 += v21;
      if (!--v10)
        return 1;
    }
    sub_10001C744((uint64_t)v6, type metadata accessor for RDSavedURLAttachment);
    sub_10001C744((uint64_t)v9, type metadata accessor for RDSavedURLAttachment);
  }
  return 0;
}

uint64_t sub_1003077C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (uint64_t *)(a2 + 64);
    for (i = (uint64_t *)(a1 + 64); *(i - 4) == *(v3 - 4); i += 5)
    {
      v5 = *(i - 3);
      v6 = *(i - 2);
      v7 = *(i - 1);
      v8 = *i;
      v9 = *(v3 - 3);
      v10 = *(v3 - 2);
      v11 = *(v3 - 1);
      v12 = *v3;
      v13 = v5 == v9 && v6 == v10;
      if (!v13 && (_stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v9, v10, 0) & 1) == 0)
        break;
      v14 = v7 == v11 && v8 == v12;
      if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v11, v12, 0) & 1) == 0)
        break;
      v3 += 5;
      if (!--v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_100307898(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int64x2_t *v8;
  _QWORD *v9;
  double v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  int64x2_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  double v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t i;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  int64x2_t *v40;
  int64x2_t *v41;
  uint64_t j;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t k;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t m;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t n;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t ii;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = 0;
    v4 = a1 + 32;
    v5 = a2 + 32;
    while (1)
    {
      v6 = v4 + 88 * v3;
      v7 = *(_QWORD **)v6;
      v8 = *(int64x2_t **)(v6 + 8);
      v9 = *(_QWORD **)(v6 + 16);
      v10 = *(double *)(v6 + 24);
      v11 = *(_BYTE *)(v6 + 32);
      v13 = *(_QWORD *)(v6 + 40);
      v12 = *(_QWORD *)(v6 + 48);
      v14 = *(_QWORD *)(v6 + 56);
      v15 = *(_QWORD **)(v6 + 64);
      v17 = *(_QWORD **)(v6 + 72);
      v16 = *(_QWORD **)(v6 + 80);
      v18 = v5 + 88 * v3;
      v20 = *(_QWORD **)v18;
      v19 = *(int64x2_t **)(v18 + 8);
      v21 = *(_QWORD **)(v18 + 16);
      v22 = *(double *)(v18 + 24);
      v23 = *(unsigned __int8 *)(v18 + 32);
      v25 = *(_QWORD *)(v18 + 40);
      v24 = *(_QWORD *)(v18 + 48);
      v27 = *(_QWORD *)(v18 + 56);
      v26 = *(_QWORD **)(v18 + 64);
      v29 = *(_QWORD **)(v18 + 72);
      v28 = *(_QWORD **)(v18 + 80);
      if (v7)
      {
        if (!v20)
          return 0;
        v30 = v7[2];
        if (v30 != v20[2])
          return 0;
        if (v30)
          v31 = v7 == v20;
        else
          v31 = 1;
        if (!v31)
        {
          if (v7[4] != v20[4])
            return 0;
          v32 = v7 + 5;
          v33 = v20 + 5;
          for (i = v30 - 1; i; --i)
          {
            v36 = *v32++;
            v35 = v36;
            v37 = *v33++;
            if (v35 != v37)
              return 0;
          }
        }
      }
      else if (v20)
      {
        return 0;
      }
      if (v8)
      {
        if (!v19)
          return 0;
        v38 = v8[1].i64[0];
        if (v38 != v19[1].i64[0])
          return 0;
        if (v38 && v8 != v19)
        {
          result = 0;
          if (v8[2].i64[0] != v19[2].i64[0] || v8[2].i64[1] != v19[2].i64[1])
            return result;
          v40 = v8 + 3;
          v41 = v19 + 3;
          for (j = v38 - 1; j; --j)
          {
            result = 0;
            v43 = *v40++;
            v44 = v43;
            v45 = *v41++;
            *(int32x2_t *)v44.i8 = vmovn_s64(vceqq_s64(v44, v45));
            if ((v44.i32[0] & v44.i32[1] & 1) == 0)
              return result;
          }
        }
      }
      else if (v19)
      {
        return 0;
      }
      if (v9)
      {
        if (!v21)
          return 0;
        v46 = v9[2];
        if (v46 != v21[2])
          return 0;
        if (v46 && v9 != v21)
        {
          if (v9[4] != v21[4])
            return 0;
          v47 = v9 + 5;
          v48 = v21 + 5;
          for (k = v46 - 1; k; --k)
          {
            result = 0;
            v51 = *v47++;
            v50 = v51;
            v52 = *v48++;
            if (v50 != v52)
              return result;
          }
        }
      }
      else if (v21)
      {
        return 0;
      }
      result = 0;
      if ((v11 & 1) != 0)
      {
        if (!v23)
          return result;
      }
      else if ((v23 & 1) != 0 || v10 != v22)
      {
        return result;
      }
      if (v13 != v25 || v12 != v24 || v14 != v27)
        return result;
      if (v15)
      {
        if (!v26)
          return 0;
        v53 = v15[2];
        if (v53 != v26[2])
          return 0;
        if (v53 && v15 != v26)
        {
          if (v15[4] != v26[4])
            return 0;
          v54 = v15 + 5;
          v55 = v26 + 5;
          for (m = v53 - 1; m; --m)
          {
            result = 0;
            v58 = *v54++;
            v57 = v58;
            v59 = *v55++;
            if (v57 != v59)
              return result;
          }
        }
      }
      else if (v26)
      {
        return 0;
      }
      if (v17)
      {
        if (!v29)
          return 0;
        v60 = v17[2];
        if (v60 != v29[2])
          return 0;
        if (v60 && v17 != v29)
        {
          if (v17[4] != v29[4])
            return 0;
          v61 = v17 + 5;
          v62 = v29 + 5;
          for (n = v60 - 1; n; --n)
          {
            result = 0;
            v65 = *v61++;
            v64 = v65;
            v66 = *v62++;
            if (v64 != v66)
              return result;
          }
        }
      }
      else if (v29)
      {
        return 0;
      }
      if (v16)
      {
        if (!v28)
          return 0;
        v67 = v16[2];
        if (v67 != v28[2])
          return 0;
        if (v67 && v16 != v28)
        {
          if (v16[4] != v28[4])
            return 0;
          v68 = v16 + 5;
          v69 = v28 + 5;
          for (ii = v67 - 1; ii; --ii)
          {
            result = 0;
            v72 = *v68++;
            v71 = v72;
            v73 = *v69++;
            if (v71 != v73)
              return result;
          }
        }
      }
      else if (v28)
      {
        return 0;
      }
      ++v3;
      result = 1;
      if (v3 == v2)
        return result;
    }
  }
  return 1;
}

uint64_t sub_100307C00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  double v6;
  void *v7;
  double v8;
  uint64_t v9;
  id v10;
  id v11;
  char v12;
  uint64_t result;
  uint64_t v14;
  double *v15;
  double *v16;
  double v17;
  double v18;
  void *v19;
  double v20;
  double v21;
  id v22;
  id v23;
  unsigned __int8 v24;
  BOOL v26;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(double *)(a1 + 40);
  v7 = *(void **)(a2 + 32);
  v8 = *(double *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(id *)(a1 + 32);
  v11 = v7;
  v12 = static NSObject.== infix(_:_:)(v10);

  result = 0;
  if ((v12 & 1) != 0 && v6 == v8 && v5 == v9)
  {
    if (v2 == 1)
      return 1;
    v14 = v2 - 2;
    v15 = (double *)(a2 + 72);
    v16 = (double *)(a1 + 72);
    do
    {
      v17 = *v16;
      v18 = *(v16 - 1);
      v19 = (void *)*((_QWORD *)v15 - 2);
      v20 = *(v15 - 1);
      v21 = *v15;
      v22 = *((id *)v16 - 2);
      v23 = v19;
      v24 = static NSObject.== infix(_:_:)(v22);

      if (*(_QWORD *)&v17 == *(_QWORD *)&v21)
        result = v24 & (v18 == v20);
      else
        result = 0;
      v26 = v14-- != 0;
      if ((_DWORD)result != 1)
        break;
      v15 += 3;
      v16 += 3;
    }
    while (v26);
  }
  return result;
}

id sub_100307D6C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id result;
  void *v12;
  id v13;
  void *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  unint64_t v24;
  unint64_t v25;
  void **v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  v2 = a2;
  v3 = a1;
  v4 = (unint64_t)a1 >> 62;
  if (!((unint64_t)a1 >> 62))
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_3;
LABEL_50:
    if (v2 < 0)
      v31 = v2;
    else
      v31 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v32 = _CocoaArrayWrapper.endIndex.getter(v31);
    swift_bridgeObjectRelease(v2);
    if (v5 == v32)
      goto LABEL_4;
LABEL_54:
    LOBYTE(v5) = 0;
    return (id)(v5 & 1);
  }
  if (a1 < 0)
    v30 = a1;
  else
    v30 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v30);
  swift_bridgeObjectRelease(v3);
  v6 = (unint64_t)v2 >> 62;
  if ((unint64_t)v2 >> 62)
    goto LABEL_50;
LABEL_3:
  if (v5 != *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_54;
LABEL_4:
  if (!v5)
    goto LABEL_37;
  v7 = v3 & 0xFFFFFFFFFFFFFF8;
  if (v3 < 0)
    v7 = v3;
  if (!v4)
    v7 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
  v8 = v2 & 0xFFFFFFFFFFFFFF8;
  v9 = (v2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v2 < 0)
    v10 = v2;
  else
    v10 = v2 & 0xFFFFFFFFFFFFFF8;
  if (v6)
    v9 = v10;
  if (v7 == v9)
  {
LABEL_37:
    LOBYTE(v5) = 1;
    return (id)(v5 & 1);
  }
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_60;
  v33 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0)
    goto LABEL_61;
  for (result = *(id *)(v3 + 32); ; result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3))
  {
    v12 = result;
    if ((v2 & 0xC000000000000001) == 0)
      break;
    v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v2);
LABEL_21:
    v14 = v13;
    sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    v15 = static NSObject.== infix(_:_:)(v12);

    if ((v15 & 1) == 0)
      goto LABEL_54;
    v16 = v5 - 1;
    if (v5 == 1)
      return (id)(v5 & 1);
    if (((v2 | v3) & 0xC000000000000001) != 0)
    {
      v17 = 0;
      v18 = v5 - 2;
      while (v16 != v17)
      {
        v5 = v17 + 1;
        if (v33)
          v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17 + 1, v3);
        else
          v19 = *(id *)(v3 + 40 + 8 * v17);
        v20 = v19;
        if ((v2 & 0xC000000000000001) != 0)
        {
          v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17 + 1, v2);
        }
        else
        {
          if (v5 >= *(_QWORD *)(v8 + 16))
            goto LABEL_59;
          v21 = *(id *)(v2 + 40 + 8 * v17);
        }
        v22 = v21;
        v5 = static NSObject.== infix(_:_:)(v20);

        if ((v5 & 1) != 0 && v18 != v17++)
          continue;
        return (id)(v5 & 1);
      }
      __break(1u);
    }
    else
    {
      v24 = *(_QWORD *)(v8 + 16);
      if (v24 <= 1)
        v24 = 1;
      v25 = v24 - 1;
      v26 = (void **)(v3 + 40);
      v8 = v2 + 40;
      while (v16)
      {
        if (!v25)
          goto LABEL_58;
        v28 = *v26++;
        v27 = v28;
        v29 = *(void **)v8;
        v8 += 8;
        v2 = v27;
        v3 = v29;
        v5 = static NSObject.== infix(_:_:)(v2);

        if ((v5 & 1) != 0)
        {
          --v25;
          if (--v16)
            continue;
        }
        return (id)(v5 & 1);
      }
    }
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    ;
  }
  if (*(_QWORD *)(v8 + 16))
  {
    v13 = *(id *)(v2 + 32);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_100308060()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100844C50);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100844C50);
  if (qword_100837628 != -1)
    swift_once(&qword_100837628, sub_1004A1838);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872058);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_QWORD *sub_1003080F0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *result;

  v0 = type metadata accessor for RDSynchronizedKeyValueStore();
  v1 = swift_allocObject(v0, 48, 7);
  result = sub_10030816C(0);
  static RDSynchronizedKeyValueStore.default = v1;
  return result;
}

uint64_t static RDSynchronizedKeyValueStore.default.getter()
{
  if (qword_100837148 != -1)
    swift_once(&qword_100837148, sub_1003080F0);
  return swift_retain();
}

_QWORD *sub_10030816C(id a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  NSString v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  if (qword_100836F28 != -1)
    swift_once(&qword_100836F28, sub_1001BA8F8);
  v4 = (void *)qword_100871CE8;
  v2[5] = qword_100871CE8;
  if (a1)
  {
    v5 = v4;
  }
  else
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(REMUniversalAppBundleIdentifier);
    v7 = v6;
    v8 = objc_allocWithZone((Class)NSUbiquitousKeyValueStore);
    v9 = v4;
    v10 = String._bridgeToObjectiveC()();
    a1 = objc_msgSend(v8, "initWithStoreIdentifier:type:", v10, 2, swift_bridgeObjectRelease(v7).n128_f64[0]);

    v5 = (id)v2[5];
  }
  v2[2] = a1;
  v11 = type metadata accessor for RDNotifydEventStream();
  swift_allocObject(v11, 40, 7);
  v12 = sub_1001FF2D4(v5, 1);
  v13 = *(_QWORD *)(v12 + 16);
  v14 = *(_QWORD *)(v12 + 24);
  *(_QWORD *)(v12 + 16) = sub_10030829C;
  *(_QWORD *)(v12 + 24) = 0;
  sub_1000A5C24(v13, v14);
  v2[3] = v12;
  v2[4] = &off_1007E9D68;
  return v2;
}

void sub_10030829C()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  if (qword_100837140 != -1)
    swift_once(&qword_100837140, sub_100308060);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100844C50);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "RDSynchronizedKeyValueStore.ubkvsEventStream: received .ubiquitousKeyValueStoreDidChangeNotification", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
  }

}

Swift::Bool __swiftcall RDSynchronizedKeyValueStore.synchronize()()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "synchronize");
}

uint64_t RDSynchronizedKeyValueStore.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return v0;
}

uint64_t RDSynchronizedKeyValueStore.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 48, 7);
}

void RDSynchronizedKeyValueStore.ChangeEvent.Reason.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

BOOL static RDSynchronizedKeyValueStore.ChangeEvent.Reason.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

Swift::Int RDSynchronizedKeyValueStore.ChangeEvent.Reason.hashValue.getter(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t RDSynchronizedKeyValueStore.ChangeEvent.reason.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t static RDSynchronizedKeyValueStore.ChangeEvent.__derived_struct_equals(_:_:)(_QWORD *a1, char a2, _QWORD *a3, char a4)
{
  return sub_100305764(a1, a3) & (a2 == a4);
}

uint64_t sub_1003084A4(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a2 + 8);
  return sub_100305764(*(_QWORD **)a1, *(_QWORD **)a2) & (v2 == v3);
}

uint64_t RDSynchronizedKeyValueStore.storeDidChangeExternally(label:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = v2;
  v23 = a1;
  v5 = sub_10001A630(&qword_100844C68);
  v24 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630(&qword_100844C70);
  v25 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  NSNotificationCenter.publisher(for:object:)(NSUbiquitousKeyValueStoreDidChangeExternallyNotification, *(_QWORD *)(v3 + 16));

  v16 = swift_allocObject(&unk_1007EDC60, 32, 7);
  *(_QWORD *)(v16 + 16) = v23;
  *(_QWORD *)(v16 + 24) = a2;
  v17 = sub_10009FC50((unint64_t *)&qword_10084A2A0, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
  swift_bridgeObjectRetain(a2);
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)(0, 0, sub_100308E78, v16, 0, 0, 0, 0, 0, 0, v11, v17);
  swift_release(v16);
  v18 = sub_1000A5F84(&qword_100844C78, &qword_100844C68, (uint64_t)&protocol conformance descriptor for Publishers.HandleEvents<A>);
  Publisher.compactMap<A>(_:)(sub_100308A28, 0, v5, &type metadata for RDSynchronizedKeyValueStore.ChangeEvent, v18);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v5);
  v19 = sub_1000A5F84(&qword_100844C80, &qword_100844C70, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v20 = Publisher.eraseToAnyPublisher()(v8, v19);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return v20;
}

void sub_100308764(__n128 a1)
{
  sub_100308E80(a1);
  __asm { BR              X10 }
}

void static RDSynchronizedKeyValueStore.ChangeEvent.Reason.reason(from:)(__n128 a1)
{
  sub_100308E80(a1);
}

void sub_100308A28(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD *v19;
  _QWORD v20[5];
  __int128 v21;
  __int128 v22;

  sub_100308E80(a2);
  v4 = v3;
  v6 = Notification.userInfo.getter(v5);
  if (!v6)
  {
    v21 = 0u;
    v22 = 0u;
LABEL_11:
    sub_10000882C((uint64_t)&v21, (uint64_t *)&unk_10083D5B0);
    v12 = 0;
    goto LABEL_12;
  }
  v7 = v6;
  *(_QWORD *)&v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUbiquitousKeyValueStoreChangedKeysKey);
  *((_QWORD *)&v21 + 1) = v8;
  AnyHashable.init<A>(_:)(v20, &v21, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v7 + 16) && (v9 = sub_1002C6A88((uint64_t)v20), (v10 & 1) != 0))
  {
    sub_10001A670(*(_QWORD *)(v7 + 56) + 32 * v9, (uint64_t)&v21);
  }
  else
  {
    v21 = 0u;
    v22 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10020DA24((uint64_t)v20);
  if (!*((_QWORD *)&v22 + 1))
    goto LABEL_11;
  v11 = sub_10001A630((uint64_t *)&unk_10083AE10);
  if (swift_dynamicCast(v20, &v21, (char *)&type metadata for Any + 8, v11, 6))
    v12 = (_QWORD *)v20[0];
  else
    v12 = 0;
LABEL_12:
  if (v4 >= 2u)
  {
    if (v4 == 2)
    {
      if (qword_100837140 != -1)
        swift_once(&qword_100837140, sub_100308060);
      v14 = type metadata accessor for Logger(0);
      v15 = sub_10001AAA8(v14, (uint64_t)qword_100844C50);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "RDSynchronizedKeyValueStore.storeDidChangeExternally: Received NSUbiquitousKeyValueStoreQuotaViolationChange but remindd doesn't currently handle it", v18, 2u);
        swift_slowDealloc(v18, -1, -1);
      }

    }
    v19 = _swiftEmptyArrayStorage;
    if (v12)
      v19 = v12;
  }
  else
  {
    *(_QWORD *)&v21 = v12;
    v13 = sub_10001A630(&qword_100844D58);
    Optional.tryUnwrap(_:file:line:)(v20, 0xD000000000000042, 0x80000001006FFC00, 0xD00000000000007FLL, 0x80000001006FFB40, 135, v13);
    swift_bridgeObjectRelease();
    v19 = (_QWORD *)v20[0];
  }
  *(_QWORD *)a1 = v19;
  *(_BYTE *)(a1 + 8) = v4;
}

unint64_t _s7remindd27RDSynchronizedKeyValueStoreC11ChangeEventV6ReasonO05ubkvsfhC0AGSgSi_tcfC_0(unint64_t result)
{
  if (result >= 4)
    return 4;
  return result;
}

uint64_t sub_100308E54()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100308E78(__n128 a1)
{
  sub_100308764(a1);
}

void sub_100308E80(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  char v12;
  Swift::String v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  id v26;

  v2 = Notification.userInfo.getter(a1);
  if (!v2)
  {
    v24 = 0u;
    v25 = 0u;
LABEL_11:
    sub_10000882C((uint64_t)&v24, (uint64_t *)&unk_10083D5B0);
    v8 = 0;
    goto LABEL_12;
  }
  v3 = v2;
  *(_QWORD *)&v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUbiquitousKeyValueStoreChangeReasonKey);
  *((_QWORD *)&v24 + 1) = v4;
  AnyHashable.init<A>(_:)(&v22, &v24, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v3 + 16) && (v5 = sub_1002C6A88((uint64_t)&v22), (v6 & 1) != 0))
  {
    sub_10001A670(*(_QWORD *)(v3 + 56) + 32 * v5, (uint64_t)&v24);
  }
  else
  {
    v24 = 0u;
    v25 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10020DA24((uint64_t)&v22);
  if (!*((_QWORD *)&v25 + 1))
    goto LABEL_11;
  v7 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  if (swift_dynamicCast(&v22, &v24, (char *)&type metadata for Any + 8, v7, 6))
    v8 = v22;
  else
    v8 = 0;
LABEL_12:
  v22 = v8;
  v9 = sub_10001A630(&qword_100844D48);
  Optional.tryUnwrap(_:file:line:)(&v26, 0xD000000000000061, 0x80000001006FFAD0, 0xD00000000000007FLL, 0x80000001006FFB40, 159, v9);

  if (!v1)
  {
    v10 = v26;
    v11 = objc_msgSend(v26, "integerValue");
    v12 = 4;
    if ((unint64_t)v11 < 4)
      v12 = (char)v11;
    LOBYTE(v26) = v12;
    v22 = 0;
    v23 = 0xE000000000000000;
    _StringGuts.grow(_:)(63);
    v13._countAndFlagsBits = 0xD00000000000003DLL;
    v13._object = (void *)0x80000001006FFBC0;
    String.append(_:)(v13);
    v14 = objc_msgSend(v10, "description");
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    v18._countAndFlagsBits = v15;
    v18._object = v17;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19 = v22;
    v20 = v23;
    v21 = sub_10001A630(&qword_100844D50);
    Optional.tryUnwrap(_:file:line:)(&v24, v19, v20, 0xD00000000000007FLL, 0x80000001006FFB40, 161, v21);
    swift_bridgeObjectRelease();

  }
}

unint64_t sub_10030910C()
{
  unint64_t result;

  result = qword_100844C88;
  if (!qword_100844C88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RDSynchronizedKeyValueStore.ChangeEvent.Reason, &type metadata for RDSynchronizedKeyValueStore.ChangeEvent.Reason);
    atomic_store(result, (unint64_t *)&qword_100844C88);
  }
  return result;
}

uint64_t type metadata accessor for RDSynchronizedKeyValueStore()
{
  return objc_opt_self(_TtC7remindd27RDSynchronizedKeyValueStore);
}

uint64_t initializeBufferWithCopyOfBuffer for RDSynchronizedKeyValueStore.ChangeEvent(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for RDStoreControllerNotificationCenter.EntityFilterOption(_QWORD *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t *assignWithCopy for RDSynchronizedKeyValueStore.ChangeEvent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t *assignWithTake for RDSynchronizedKeyValueStore.ChangeEvent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDSynchronizedKeyValueStore.ChangeEvent(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 9))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDSynchronizedKeyValueStore.ChangeEvent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 9) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSynchronizedKeyValueStore.ChangeEvent()
{
  return &type metadata for RDSynchronizedKeyValueStore.ChangeEvent;
}

uint64_t storeEnumTagSinglePayload for RDSynchronizedKeyValueStore.ChangeEvent.Reason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100309318 + 4 * byte_1006B3CD9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10030934C + 4 * byte_1006B3CD4[v4]))();
}

uint64_t sub_10030934C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100309354(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10030935CLL);
  return result;
}

uint64_t sub_100309368(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100309370);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100309374(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10030937C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDSynchronizedKeyValueStore.ChangeEvent.Reason()
{
  return &type metadata for RDSynchronizedKeyValueStore.ChangeEvent.Reason;
}

uint64_t sub_10030939C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100844D60);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100844D60);
  if (qword_100837608 != -1)
    swift_once(&qword_100837608, sub_1004A17C8);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100309434(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1002B5424(*a1, *a2);
}

Swift::Int sub_100309440()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0x80000001006F4AB0;
  v3 = 0xD00000000000001DLL;
  if (v1 != 1)
  {
    v3 = 0x6574616C706D6574;
    v2 = 0xE800000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x617461646174656DLL;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1003094E4(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0x80000001006F4AB0;
  v3 = 0xD00000000000001DLL;
  if (*v1 != 1)
  {
    v3 = 0x6574616C706D6574;
    v2 = 0xE800000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x617461646174656DLL;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100309564(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0x80000001006F4AB0;
  v4 = 0xD00000000000001DLL;
  if (v2 != 1)
  {
    v4 = 0x6574616C706D6574;
    v3 = 0xE800000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x617461646174656DLL;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE800000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_100309604@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10030BC38(*a1);
  *a2 = result;
  return result;
}

void sub_100309630(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE800000000000000;
  v4 = 0x80000001006F4AB0;
  v5 = 0xD00000000000001DLL;
  if (v2 != 1)
  {
    v5 = 0x6574616C706D6574;
    v4 = 0xE800000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x617461646174656DLL;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

void sub_100309694(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E03A8;
}

_UNKNOWN **static REMCDSavedReminder.recordTypes()()
{
  return &off_1007E03D0;
}

uint64_t static REMCDSavedReminder.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v8;
  id v9;
  id v10;
  NSString v11;
  id v12;
  uint64_t result;

  v8 = type metadata accessor for REMCDSavedReminder();
  v9 = a1;
  swift_bridgeObjectRetain(a3);
  v10 = a4;
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v8), "objectWithRecordID:accountID:context:", v9, v11, v10);

  if (v12)
  {
    result = swift_dynamicCastClass(v12, v4);
    if (result)
      return result;

  }
  return 0;
}

id static REMCDSavedReminder.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v8;
  NSString v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t MetatypeMetadata;
  uint64_t v20;
  unint64_t v21;
  double v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = v3;
  v8 = objc_msgSend(a1, "recordID");
  v9 = objc_msgSend(v8, "recordName");

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "newObjectWithCKRecordName:context:account:", v9, a3, a2);

  if (v10)
  {
    v11 = objc_msgSend(a2, "ckIdentifier");
    if (v11)
    {
      v12 = v11;
      objc_msgSend(v10, "setAccount:", a2);
      objc_msgSend(v10, "mergeDataFromRecord:accountID:", a1, v12);

      objc_msgSend(v10, "setCkServerRecord:", a1);
      objc_msgSend(v10, "setInCloud:", 1);
      objc_msgSend(v10, "updateParentReferenceIfNecessary");
    }
    else
    {
      if (qword_100837150 != -1)
        swift_once(&qword_100837150, sub_10030939C);
      v13 = type metadata accessor for Logger(0);
      sub_10001AAA8(v13, (uint64_t)qword_100844D60);
      v14 = a2;
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = swift_slowAlloc(22, -1);
        v18 = swift_slowAlloc(64, -1);
        v30 = v18;
        v31 = v4;
        *(_DWORD *)v17 = 136446466;
        MetatypeMetadata = swift_getMetatypeMetadata(v4);
        v20 = String.init<A>(describing:)(&v31, MetatypeMetadata);
        v31 = sub_10001A820(v20, v21, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
        *(_QWORD *)&v22 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v17 + 12) = 2082;
        v23 = objc_msgSend(v14, "remObjectID", v22, v30);
        if (v23)
        {
          v24 = v23;
          v25 = objc_msgSend(v23, "description");

          v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
          v28 = v27;

        }
        else
        {
          v28 = 0xE300000000000000;
          v26 = 7104878;
        }
        v31 = sub_10001A820(v26, v28, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v18, -1, -1);
        swift_slowDealloc(v17, -1, -1);

      }
      else
      {

      }
      return 0;
    }
  }
  return v10;
}

Swift::String __swiftcall REMCDSavedReminder.recordType()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = 0x6D65526465766153;
  v1 = (void *)0xED00007265646E69;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::Void __swiftcall REMCDSavedReminder.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  void *v2;
  NSString v4;
  id v5;
  NSString v6;
  double v7;
  NSString v8;
  double v9;
  id v10;
  objc_class *v11;
  objc_super v12;

  v4 = String._bridgeToObjectiveC()();
  v12.receiver = v2;
  v12.super_class = (Class)type metadata accessor for REMCDSavedReminder();
  objc_msgSendSuper2(&v12, "mergeDataFromRecord:accountID:", from.super.isa, v4);

  v5 = -[objc_class recordID](from.super.isa, "recordID");
  v6 = objc_msgSend(v5, "recordName");

  if (!v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v6 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v7 = swift_bridgeObjectRelease().n128_u64[0];
  }
  v8 = objc_msgSend(v2, "ckIdentifierFromRecordName:", v6, v7);

  if (!v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v8 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v9 = swift_bridgeObjectRelease().n128_u64[0];
  }
  objc_msgSend(v2, "setCkIdentifier:", v8, v9);

  objc_msgSend(v2, "mergeDataRevertedLocallyMarkedForDeletion");
  objc_msgSend(v2, "mergeDataRefusedToMergeMarkedForDeletion");
  v10 = v2;
  v11 = from.super.isa;
  sub_10044910C(v11, v10, v10, v11);

}

void sub_100309E24(_BYTE *a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  int *v28;
  char *v29;
  id v30;
  uint64_t ObjectType;
  unint64_t v32;
  Class isa;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  id v40;
  id v41;
  void *v42;
  void *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t, uint64_t);
  int v55;
  Class v56;
  Class v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  NSString v61;
  uint64_t v62;
  id v63;
  objc_class *v64;
  Class v65;
  uint64_t v66;
  char *v67;
  id v68;
  char *v69;
  id v70;
  void *v71;
  id v72;
  uint64_t v73;
  _BOOL8 v74;
  char *v75;
  _BOOL8 v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  int *v81;
  id v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;

  v82 = a2;
  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v5);
  v7 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = (int *)type metadata accessor for UUID(0);
  v8 = *((_QWORD *)v81 - 1);
  __chkstk_darwin(v81);
  v10 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v15);
  v17 = (char *)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v77 - v19;
  v21 = type metadata accessor for RDSavedReminder(0);
  *(_QWORD *)&v24 = __chkstk_darwin(v21).n128_u64[0];
  if (!*a1)
  {
    v78 = v14;
    v79 = v20;
    v80 = v17;
    v81 = v22;
    v29 = (char *)&v77 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    v30 = objc_msgSend(a3, "encryptedValues", v24);
    ObjectType = swift_getObjectType();
    CKRecordKeyValueSetting.subscript.getter(0x617461646174654DLL, 0xE800000000000000, ObjectType, &type metadata for Data, &protocol witness table for Data);
    swift_unknownObjectRelease(v30);
    v32 = v84;
    if (v84 >> 60 == 15)
    {
      isa = 0;
    }
    else
    {
      v39 = v83;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000A71B4(v39, v32);
    }
    v40 = v82;
    objc_msgSend(v82, "setMetadata:", isa);

    v41 = objc_msgSend(v40, "metadata");
    if (v41)
    {
      v42 = v41;
      v43 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v41);
      v45 = v44;

      v46 = type metadata accessor for JSONDecoder(0);
      v47 = swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
      v48 = JSONDecoder.init()(v47);
      v49 = sub_10009FC50(&qword_100840F08, type metadata accessor for RDSavedReminder, (uint64_t)&unk_1006A9E88);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)(v81, v43, v45, v81, v49);
      v82 = v43;
      swift_release(v48);
      v53 = (uint64_t)v79;
      sub_1000CDA2C((uint64_t)v29, (uint64_t)v79);
      v54 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
      v55 = v54(v53, 1, v11);
      if (v55 == 1)
      {
        v56 = 0;
      }
      else
      {
        v58 = v53;
        v56 = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v58, v11);
      }
      v59 = v11;
      objc_msgSend(v40, "setCreationDate:", v56);

      v60 = v81;
      swift_bridgeObjectRetain(*(_QWORD *)&v29[v81[14] + 8]);
      v61 = String._bridgeToObjectiveC()();
      objc_msgSend(v40, "setTitle:", v61, swift_bridgeObjectRelease().n128_f64[0]);

      if (*(_QWORD *)&v29[v60[11]] >= 0x7FFFuLL)
        v62 = 0x7FFFLL;
      else
        v62 = *(_QWORD *)&v29[v60[11]];
      v63 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithShort:", v62);
      objc_msgSend(v40, "setPriority:", v63);

      v64 = (objc_class *)sub_10013DE3C();
      v65 = v64;
      v66 = (uint64_t)v82;
      v67 = v80;
      if (v64)
      {
        v68 = -[objc_class date](v64, "date");

        v69 = v78;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v68);

        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v67, v69, v59);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v67, 0, 1, v59);
        if (v54((uint64_t)v67, 1, v59) == 1)
        {
          v65 = 0;
        }
        else
        {
          v65 = Date._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v12 + 8))(v67, v59);
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v80, 1, 1, v59);
      }
      objc_msgSend(v40, "setDisplayDateDate:", v65);

      v70 = sub_10013DE3C();
      if (v70)
      {
        v71 = v70;
        v72 = objc_msgSend(v70, "isAllDay");

      }
      else
      {
        v72 = 0;
      }
      objc_msgSend(v40, "setDisplayDateIsAllDay:", v72);
      v73 = *(_QWORD *)&v29[v81[9]];
      if (v73)
        v74 = *(_QWORD *)(v73 + 16) != 0;
      else
        v74 = 0;
      objc_msgSend(v40, "setHasHashtags:", v74);
      v75 = &v29[v81[5]];
      if (*(_QWORD *)v75)
      {
        if (*(_QWORD *)(*((_QWORD *)v75 + 1) + 16))
          v76 = 1;
        else
          v76 = *(_QWORD *)(*((_QWORD *)v75 + 3) + 16) != 0;
      }
      else
      {
        v76 = 0;
      }
      objc_msgSend(v40, "setHasLocationTriggersOrVehicleEventTriggers:", v76);
      sub_1000A71C8(v66, v45);
      sub_1000D6E60((uint64_t)v29);
    }
    else
    {
      objc_msgSend(v40, "setCreationDate:", 0);
      objc_msgSend(v40, "setTitle:", 0);
      objc_msgSend(v40, "setPriority:", 0);
      objc_msgSend(v40, "setDisplayDateDate:", 0);
      objc_msgSend(v40, "setDisplayDateIsAllDay:", 0);
      objc_msgSend(v40, "setHasHashtags:", 0);
      objc_msgSend(v40, "setHasLocationTriggersOrVehicleEventTriggers:", 0);
    }
    return;
  }
  if (*a1 != 1)
  {
    v34 = CKRecord.subscript.getter(0x6574616C706D6554, 0xE800000000000000);
    if (v34)
    {
      v35 = v34;
      v36 = objc_opt_self(CKReference);
      v37 = (void *)swift_dynamicCastObjCClass(v35, v36);
      v38 = v82;
      if (!v37)
        swift_unknownObjectRelease(v35);
    }
    else
    {
      v37 = 0;
      v38 = v82;
    }
    v50 = sub_1000C8F60(v37);

    if (v50)
    {
      v51 = type metadata accessor for REMCDTemplate();
      v52 = (void *)swift_dynamicCastClass(v50, v51);
      if (v52)
      {
LABEL_21:
        v82 = v52;
        objc_msgSend(v38, "setTemplate:");

        return;
      }

    }
    v52 = 0;
    goto LABEL_21;
  }
  v25 = CKRecord.subscript.getter(0xD00000000000001DLL, 0x80000001006FFD10);
  if (!v25)
    goto LABEL_7;
  v85 = v25;
  v26 = sub_10001A630(&qword_1008398E0);
  if ((swift_dynamicCast(&v83, &v85, v26, &type metadata for String, 6) & 1) == 0)
    goto LABEL_7;
  UUID.init(uuidString:)(v83, v84);
  v27 = swift_bridgeObjectRelease();
  v28 = v81;
  if ((*(unsigned int (**)(char *, uint64_t, int *, __n128))(v8 + 48))(v7, 1, v81, v27) == 1)
  {
    sub_10011E85C((uint64_t)v7);
LABEL_7:
    objc_msgSend(v82, "setParentSavedReminderIdentifier:", 0);
    return;
  }
  (*(void (**)(char *, char *, int *))(v8 + 32))(v10, v7, v28);
  v57 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v82, "setParentSavedReminderIdentifier:", v57);

  (*(void (**)(char *, int *))(v8 + 8))(v10, v28);
}

CKRecord_optional __swiftcall REMCDSavedReminder.newlyCreatedRecord()()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  objc_class *v12;
  id v13;
  Swift::Bool v14;
  __int128 v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjectType;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  id v52;
  NSObject *v53;
  os_log_type_t v54;
  _DWORD *v55;
  id v56;
  void *v57;
  id v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  id v71;
  void *v72;
  id v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  objc_class *v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  void *v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  char *v85;
  char *v86;
  char *v87;
  id v88;
  unint64_t v89;
  __int128 v90;
  __int128 v91;
  void *v92;
  objc_super v93;
  uint64_t v94;
  uint64_t v95;
  CKRecord_optional result;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v85 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v5);
  v7 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v9 = __chkstk_darwin(v8).n128_u64[0];
  v11 = (char *)&v78 - v10;
  if (objc_msgSend(v0, "isOwnedByCurrentUser", v9))
  {
    v12 = (objc_class *)type metadata accessor for REMCDSavedReminder();
    v93.receiver = v0;
    v93.super_class = v12;
    v13 = objc_msgSendSuper2(&v93, "newlyCreatedRecord");
    v16 = v13;
    if (v13)
    {
      v17 = 0;
      v89 = 0x80000001006FFD10;
      *(_QWORD *)&v15 = 136446210;
      v84 = v15;
      v82 = (char *)&type metadata for Any + 8;
      v83 = v3;
      v86 = v11;
      v87 = v7;
      v88 = v13;
      v81 = v0;
      while (1)
      {
        if (!*((_BYTE *)&off_1007E0430 + v17 + 32))
        {
          v18 = objc_msgSend(v16, "encryptedValues");
          v19 = objc_msgSend(v1, "metadata");
          if (v19)
          {
            v20 = v19;
            v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v19);
            v23 = v22;

            *((_QWORD *)&v91 + 1) = &type metadata for Data;
            v92 = &protocol witness table for Data;
            *(_QWORD *)&v90 = v21;
            *((_QWORD *)&v90 + 1) = v23;
            v16 = v88;
          }
          else
          {
            v92 = 0;
            v90 = 0u;
            v91 = 0u;
          }
          ObjectType = swift_getObjectType();
          CKRecordKeyValueSetting.subscript.setter(&v90, 0x617461646174654DLL, 0xE800000000000000, ObjectType);
          swift_unknownObjectRelease(v18);
          goto LABEL_7;
        }
        if (*((_BYTE *)&off_1007E0430 + v17 + 32) == 1)
        {
          v25 = objc_msgSend(v1, "parentSavedReminderIdentifier");
          if (v25)
          {
            v26 = v25;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v25);

            v27 = 0;
          }
          else
          {
            v27 = 1;
          }
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v7, v27, 1, v2);
          sub_1000F2CE4((uint64_t)v7, (uint64_t)v11);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2))
          {
            sub_10011E85C((uint64_t)v11);
            v90 = 0u;
            v91 = 0u;
            v92 = 0;
          }
          else
          {
            v45 = v85;
            (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v85, v11, v2);
            v46 = sub_10011E85C((uint64_t)v11);
            v47 = UUID.uuidString.getter(v46);
            v49 = v48;
            (*(void (**)(char *, uint64_t))(v3 + 8))(v45, v2);
            *((_QWORD *)&v91 + 1) = &type metadata for String;
            v92 = &protocol witness table for String;
            *(_QWORD *)&v90 = v47;
            *((_QWORD *)&v90 + 1) = v49;
          }
          v50 = sub_10011D06C();
          CKRecordKeyValueSetting.subscript.setter(&v90, 0xD00000000000001DLL, v89, v50);
          goto LABEL_7;
        }
        if ((objc_msgSend(v1, "markedForDeletion") & 1) != 0)
          break;
        v41 = objc_msgSend(v1, "template");
        if (!v41)
        {
          if (qword_100837150 != -1)
            swift_once(&qword_100837150, sub_10030939C);
          v51 = type metadata accessor for Logger(0);
          sub_10001AAA8(v51, (uint64_t)qword_100844D60);
          v52 = v1;
          v53 = Logger.logObject.getter(v52);
          v54 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v53, v54))
          {
            v55 = (_DWORD *)swift_slowAlloc(12, -1);
            v79 = swift_slowAlloc(32, -1);
            *(_QWORD *)&v90 = v79;
            v80 = v55;
            *v55 = v84;
            v56 = objc_msgSend(v52, "remObjectID");
            if (v56)
            {
              v57 = v56;
              v58 = objc_msgSend(v56, "description");

              v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
              v61 = v60;

              v3 = v83;
            }
            else
            {
              v61 = 0xE300000000000000;
              v59 = 7104878;
            }
            v62 = sub_10001A820(v59, v61, (uint64_t *)&v90);
            v63 = (uint8_t *)v80;
            *(_QWORD *)(v80 + 1) = v62;

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v53, v54, "REMCDSavedReminder+CloudKit: Unexpectedly got cdSavedReminder.template == nil in newlyCreatedRecord() (key=.template) {savedReminder: %{public}s}", v63, 0xCu);
            v64 = v79;
            swift_arrayDestroy(v79, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v64, -1, -1);
            swift_slowDealloc(v63, -1, -1);

            v11 = v86;
            v7 = v87;
            v16 = v88;
            goto LABEL_7;
          }

          goto LABEL_35;
        }
        v42 = v41;
        v43 = objc_msgSend(v41, "recordID");
        v44 = objc_msgSend(v1, "cloudKitReferenceWithRecordIDAndValidateAction:", v43);

        CKRecord.subscript.setter(v44, 0x6574616C706D6554, 0xE800000000000000);
LABEL_7:
        if (++v17 == 3)
          goto LABEL_48;
      }
      if (qword_100837150 != -1)
        swift_once(&qword_100837150, sub_10030939C);
      v28 = type metadata accessor for Logger(0);
      sub_10001AAA8(v28, (uint64_t)qword_100844D60);
      v29 = v1;
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.info.getter(v30);
      if (os_log_type_enabled(v30, v31))
      {
        v32 = swift_slowAlloc(12, -1);
        v33 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v90 = v33;
        *(_DWORD *)v32 = v84;
        v34 = objc_msgSend(v29, "remObjectID");
        if (v34)
        {
          v35 = v34;
          v36 = v2;
          v37 = objc_msgSend(v34, "description");

          v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
          v40 = v39;

          v2 = v36;
          v1 = v81;
        }
        else
        {
          v40 = 0xE300000000000000;
          v38 = 7104878;
        }
        *(_QWORD *)(v32 + 4) = sub_10001A820(v38, v40, (uint64_t *)&v90);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "REMCDSavedReminder+CloudKit: newlyCreatedRecord() (key=.template) unsetting template CK reference as the saved reminder is markedForDeletion {savedReminder: %{public}s}", (uint8_t *)v32, 0xCu);
        swift_arrayDestroy(v33, 1, v82);
        swift_slowDealloc(v33, -1, -1);
        swift_slowDealloc(v32, -1, -1);

        v3 = v83;
        v16 = v88;
      }
      else
      {

      }
      CKRecord.subscript.setter(0, 0x6574616C706D6554, 0xE800000000000000);
LABEL_35:
      v11 = v86;
      v7 = v87;
      goto LABEL_7;
    }
  }
  else
  {
    if (qword_100837150 != -1)
      swift_once(&qword_100837150, sub_10030939C);
    v65 = type metadata accessor for Logger(0);
    sub_10001AAA8(v65, (uint64_t)qword_100844D60);
    v66 = v0;
    v67 = Logger.logObject.getter(v66);
    v68 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v67, v68))
    {
      v69 = (uint8_t *)swift_slowAlloc(12, -1);
      v70 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v90 = v70;
      *(_DWORD *)v69 = 136446210;
      v71 = objc_msgSend(v66, "remObjectID");
      if (v71)
      {
        v72 = v71;
        v73 = objc_msgSend(v71, "description");

        v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
        v76 = v75;

      }
      else
      {
        v74 = 7104878;
        v76 = 0xE300000000000000;
      }
      v94 = sub_10001A820(v74, v76, (uint64_t *)&v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "REMCDSavedReminder will not be used to represent a reminder in a public template, which is fetched from a template's public link, and is not expected to be shared. It shouldn't be uploaded for non-owner (savedReminderID: %{public}s)", v69, 0xCu);
      swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v70, -1, -1);
      swift_slowDealloc(v69, -1, -1);

    }
    else
    {

    }
    v16 = 0;
  }
LABEL_48:
  v77 = (objc_class *)v16;
  result.value.super.isa = v77;
  result.is_nil = v14;
  return result;
}

Swift::Void __swiftcall REMCDSavedReminder.fixBrokenReferences()()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  void *v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  char **v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  double v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  if (qword_100837150 != -1)
    swift_once(&qword_100837150, sub_10030939C);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_100844D60);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  v5 = &selRef_subscriptionOwnerUserRecordID;
  if (!os_log_type_enabled(v3, v4))
  {

    goto LABEL_14;
  }
  v6 = 7104878;
  v7 = swift_slowAlloc(22, -1);
  v8 = swift_slowAlloc(64, -1);
  v48 = v8;
  *(_DWORD *)v7 = 136446466;
  v9 = objc_msgSend(v2, "remObjectID");
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(v9, "description");

    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

  }
  else
  {
    v14 = 0xE300000000000000;
    v12 = 7104878;
  }
  v47 = sub_10001A820(v12, v14, &v48);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);

  *(_QWORD *)&v15 = swift_bridgeObjectRelease().n128_u64[0];
  *(_WORD *)(v7 + 12) = 2082;
  v16 = objc_msgSend(v2, "template", v15);
  if (!v16)
    goto LABEL_12;
  v17 = v16;
  v18 = objc_msgSend(v16, "remObjectID");
  if (!v18)
  {

LABEL_12:
    v22 = 0xE300000000000000;
    goto LABEL_13;
  }
  v19 = v18;
  v20 = objc_msgSend(v18, "description");

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v22 = v21;

LABEL_13:
  v5 = &selRef_subscriptionOwnerUserRecordID;
  v47 = sub_10001A820(v6, v22, &v48);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fixing broken references for saved reminder {savedReminderID: %{public}s, templateID: %{public}s}", (uint8_t *)v7, 0x16u);
  swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v8, -1, -1);
  swift_slowDealloc(v7, -1, -1);

LABEL_14:
  v23 = objc_msgSend(v2, v5[38]);
  if (!v23)
    return;
  v24 = v23;
  if (objc_msgSend(v23, "markedForDeletion")
    && (objc_msgSend(v2, "markedForDeletion") & 1) == 0)
  {
    v25 = v2;
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v26, v27))
    {

LABEL_28:
      objc_msgSend(v25, "markForDeletion");
      goto LABEL_29;
    }
    v28 = v5;
    v29 = swift_slowAlloc(22, -1);
    v30 = swift_slowAlloc(64, -1);
    v48 = v30;
    *(_DWORD *)v29 = 136446466;
    v31 = objc_msgSend(v25, "remObjectID");
    if (v31)
    {
      v32 = v31;
      v33 = objc_msgSend(v31, "description");

      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      v36 = v35;

    }
    else
    {
      v36 = 0xE300000000000000;
      v34 = 7104878;
    }
    v47 = sub_10001A820(v34, v36, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);

    *(_QWORD *)&v37 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v29 + 12) = 2082;
    v38 = objc_msgSend(v25, v28[38], v37);
    v46 = v30;
    if (v38)
    {
      v39 = v38;
      v40 = objc_msgSend(v38, "remObjectID");
      if (v40)
      {
        v41 = v40;
        v42 = objc_msgSend(v40, "description");

        v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
        v45 = v44;

LABEL_27:
        v47 = sub_10001A820(v43, v45, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Template is marked for deletion but saved reminder is not {savedReminderID: %{public}s, templateID: %{public}s}", (uint8_t *)v29, 0x16u);
        swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v46, -1, -1);
        swift_slowDealloc(v29, -1, -1);

        goto LABEL_28;
      }

    }
    v45 = 0xE300000000000000;
    v43 = 7104878;
    goto LABEL_27;
  }
LABEL_29:
  objc_msgSend(v24, "forcePushToCloud");

}

Swift::Void __swiftcall REMCDSavedReminder.cleanUpAfterLocalObjectMerge()()
{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t ObjectType;
  uint64_t v11;

  if (qword_100837150 != -1)
    swift_once(&qword_100837150, sub_10030939C);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_100844D60);
  v9 = v0;
  v2 = Logger.logObject.getter(v9);
  v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v11 = v5;
    *(_DWORD *)v4 = 136315138;
    ObjectType = swift_getObjectType();
    v6 = sub_10001A630(&qword_100844D78);
    v7 = String.init<A>(describing:)(&ObjectType, v6);
    ObjectType = sub_10001A820(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v11);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);

  }
  else
  {

  }
}

_QWORD *REMCDSavedReminder.objectsToBeDeletedBeforeThisObject()()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;

  v1 = objc_msgSend(v0, "attachments");
  if (v1)
  {
    v2 = v1;
    v3 = type metadata accessor for REMCDSavedAttachment();
    v4 = sub_10009FC50((unint64_t *)&unk_100840010, (uint64_t (*)(uint64_t))type metadata accessor for REMCDSavedAttachment, (uint64_t)&protocol conformance descriptor for NSObject);
    v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v2, v3, v4);

    v6 = sub_1001EA520(v5);
    swift_bridgeObjectRelease();
    v7 = sub_1001E0668((uint64_t)v6);
    swift_release(v6);
    sub_1001E09F4(v7);
  }
  return _swiftEmptyArrayStorage;
}

unint64_t sub_10030BC38(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007E0340, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t _s7remindd18REMCDSavedReminderC26existingLocalObjectToMerge4withSo11REMCDObjectCSgSo11NSPredicateCSg_tF_0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t ObjectType;
  uint64_t v12;

  if (qword_100837150 != -1)
    swift_once(&qword_100837150, sub_10030939C);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_100844D60);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType();
    v7 = sub_10001A630(&qword_100844D78);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    ObjectType = sub_10001A820(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t _s7remindd18REMCDSavedReminderC5merge15withLocalObjectSbSo11REMCDObjectC_tF_0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t ObjectType;
  uint64_t v12;

  if (qword_100837150 != -1)
    swift_once(&qword_100837150, sub_10030939C);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_100844D60);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType();
    v7 = sub_10001A630(&qword_100844D78);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    ObjectType = sub_10001A820(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t _s6FieldsOwst_3(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10030C044 + 4 * byte_1006B3DC5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10030C078 + 4 * asc_1006B3DC0[v4]))();
}

uint64_t sub_10030C078(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10030C080(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10030C088);
  return result;
}

uint64_t sub_10030C094(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10030C09CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10030C0A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10030C0A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s6FieldsOMa_3()
{
  return &_s6FieldsON_3;
}

unint64_t sub_10030C0C4(uint64_t a1)
{
  unint64_t result;

  result = sub_10030C0E8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10030C0E8()
{
  unint64_t result;

  result = qword_100844D80;
  if (!qword_100844D80)
  {
    result = swift_getWitnessTable(&unk_1006B3E10, &_s6FieldsON_3);
    atomic_store(result, (unint64_t *)&qword_100844D80);
  }
  return result;
}

unint64_t sub_10030C12C(uint64_t a1)
{
  unint64_t result;

  result = sub_10030C150();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10030C150()
{
  unint64_t result;

  result = qword_100844D88;
  if (!qword_100844D88)
  {
    result = swift_getWitnessTable(&unk_1006B3DD8, &_s6FieldsON_3);
    atomic_store(result, (unint64_t *)&qword_100844D88);
  }
  return result;
}

unint64_t sub_10030C198()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100844D90;
  if (!qword_100844D90)
  {
    v1 = sub_1000A5A94(&qword_100844D98);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100844D90);
  }
  return result;
}

unint64_t sub_10030C1E8()
{
  unint64_t result;

  result = qword_100844DA0;
  if (!qword_100844DA0)
  {
    result = swift_getWitnessTable(&unk_1006B3EC0, &_s6FieldsON_3);
    atomic_store(result, (unint64_t *)&qword_100844DA0);
  }
  return result;
}

uint64_t sub_10030C22C()
{
  return 0x4E79616C70736964;
}

uint64_t sub_10030C24C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61)
  {
    result = swift_bridgeObjectRelease(0xEB00000000656D61);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4E79616C70736964, 0xEB00000000656D61, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10030C2F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10030C81C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10030C320(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10030C81C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10030C348@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v5 = sub_10001A630(&qword_100844DB8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000A388(a1, v9);
  v11 = sub_10030C81C();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RDSavedTemplateSection.CodingKeys, &type metadata for RDSavedTemplateSection.CodingKeys, v11, v9, v10);
  if (v2)
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v12, v5);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  *a2 = v13;
  a2[1] = v15;
  return result;
}

uint64_t sub_10030C46C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = sub_10001A630(&qword_100844DC8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  sub_10000A388(a1, v9);
  v11 = sub_10030C81C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RDSavedTemplateSection.CodingKeys, &type metadata for RDSavedTemplateSection.CodingKeys, v11, v9, v10);
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v7, v8, v12, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int sub_10030C558()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v2 = *v0;
  v1 = v0[1];
  Hasher.init(_seed:)(v4, 0);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v1);
    String.hash(into:)(v4, v2, v1);
    swift_bridgeObjectRelease(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void sub_10030C5D4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[1];
  if (v3)
  {
    v4 = *v1;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v3);
    String.hash(into:)(a1, v4, v3);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_10030C648(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v3 = *v1;
  v2 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v2);
    String.hash(into:)(v5, v3, v2);
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t sub_10030C6C0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v3 = a1[1];
  v4 = a2[1];
  if (v3)
  {
    if (v4)
    {
      v5 = *a1;
      v6 = v5 == *a2 && v3 == v4;
      if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)(v5, v3, *a2, v4, 0) & 1) != 0)
        return 1;
    }
  }
  else if (!v4)
  {
    return 1;
  }
  return 0;
}

uint64_t getEnumTagSinglePayload for RDSavedTemplateSection(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RDSavedTemplateSection(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSavedTemplateSection()
{
  return &type metadata for RDSavedTemplateSection;
}

unint64_t sub_10030C7D8()
{
  unint64_t result;

  result = qword_100844DB0;
  if (!qword_100844DB0)
  {
    result = swift_getWitnessTable(&unk_1006B3F18, &type metadata for RDSavedTemplateSection);
    atomic_store(result, (unint64_t *)&qword_100844DB0);
  }
  return result;
}

unint64_t sub_10030C81C()
{
  unint64_t result;

  result = qword_100844DC0;
  if (!qword_100844DC0)
  {
    result = swift_getWitnessTable(&unk_1006B4094, &type metadata for RDSavedTemplateSection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100844DC0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RDSavedTemplateSection.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10030C8A0 + 4 * byte_1006B3EF0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10030C8C0 + 4 * byte_1006B3EF5[v4]))();
}

_BYTE *sub_10030C8A0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10030C8C0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10030C8C8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10030C8D0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10030C8D8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10030C8E0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for RDSavedTemplateSection.CodingKeys()
{
  return &type metadata for RDSavedTemplateSection.CodingKeys;
}

unint64_t sub_10030C900()
{
  unint64_t result;

  result = qword_100844DD0;
  if (!qword_100844DD0)
  {
    result = swift_getWitnessTable(&unk_1006B406C, &type metadata for RDSavedTemplateSection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100844DD0);
  }
  return result;
}

unint64_t sub_10030C948()
{
  unint64_t result;

  result = qword_100844DD8;
  if (!qword_100844DD8)
  {
    result = swift_getWitnessTable(&unk_1006B3FDC, &type metadata for RDSavedTemplateSection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100844DD8);
  }
  return result;
}

unint64_t sub_10030C990()
{
  unint64_t result;

  result = qword_100844DE0;
  if (!qword_100844DE0)
  {
    result = swift_getWitnessTable(&unk_1006B4004, &type metadata for RDSavedTemplateSection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100844DE0);
  }
  return result;
}

uint64_t sub_10030C9D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100844DE8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100844DE8);
  if (qword_100837670 != -1)
    swift_once(&qword_100837670, sub_1004A1934);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872130);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10030CA64(void *a1, uint64_t (*a2)(uint64_t, _QWORD), uint64_t a3)
{
  void **v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  int v29;
  _BOOL4 v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t MetatypeMetadata;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  void *v39;
  id v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  char *v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  Class v53;
  id v54;
  uint64_t *v55;
  os_log_t v56;
  id v57;
  id v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  int v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  id v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  double v74;
  char *v75;
  void (*v76)(os_log_t, uint64_t);
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  id v82;
  uint64_t v83;
  id v84;
  void *v85;
  unsigned __int8 v86;
  id v87;
  char *v88;
  id v89;
  NSObject *v90;
  os_log_type_t v91;
  uint64_t v92;
  os_log_type_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  id v100;
  char *v101;
  uint64_t v102;
  char *v103;
  double v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  os_log_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t ObjCClassFromMetadata;
  NSString v117;
  id v118;
  uint64_t v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  char *v128;
  uint64_t *v129;
  os_log_t v130;
  uint64_t v131;
  os_log_t v132;
  uint64_t v133;
  void (*v134)(char *, uint64_t);
  uint64_t (*v135)(uint64_t, _QWORD);
  id v136;
  void *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  _QWORD v144[3];
  char v145[16];
  double v146;
  uint64_t v147;
  _QWORD v148[2];

  v4 = (uint64_t)v3;
  v135 = a2;
  v136 = a1;
  v6 = *v3;
  v7 = type metadata accessor for RDPublicTemplate(0);
  __chkstk_darwin(v7);
  v129 = (uint64_t *)((char *)&v125 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v133 = type metadata accessor for UUID(0);
  v132 = *(os_log_t *)(v133 - 8);
  __chkstk_darwin(v133);
  v141 = (uint64_t)&v125 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v143 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = ((char *)&v125 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  v15 = (char *)&v125 - v14;
  __chkstk_darwin(v16);
  v138 = (char *)&v125 - v17;
  __chkstk_darwin(v18);
  v20 = (char *)&v125 - v19;
  __chkstk_darwin(v21);
  v23 = (char *)&v125 - v22;
  if (qword_100837158 != -1)
    swift_once(&qword_100837158, sub_10030C9D4);
  v24 = type metadata accessor for Logger(0);
  v25 = sub_10001AAA8(v24, (uint64_t)qword_100844DE8);
  v26 = swift_retain_n(v4);
  v131 = v25;
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter(v27);
  v29 = v28;
  v30 = os_log_type_enabled(v27, v28);
  v139 = v20;
  v140 = (uint64_t)v6;
  v142 = v23;
  v130 = v12;
  v128 = v15;
  if (v30)
  {
    v31 = swift_slowAlloc(42, -1);
    v32 = (_QWORD *)swift_slowAlloc(16, -1);
    v137 = (void *)swift_slowAlloc(32, -1);
    v146 = *(double *)&v137;
    v147 = (uint64_t)v6;
    *(_DWORD *)v31 = 136446978;
    v127 = v10;
    MetatypeMetadata = swift_getMetatypeMetadata(v6);
    LODWORD(v134) = v29;
    v34 = String.init<A>(describing:)(&v147, MetatypeMetadata);
    v147 = sub_10001A820(v34, v35, (uint64_t *)&v146);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148);
    swift_bridgeObjectRelease();
    *(_WORD *)(v31 + 12) = 2114;
    v36 = a3;
    v37 = *(void **)(v4 + 16);
    v147 = (uint64_t)v37;
    v38 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148);
    *v32 = v37;
    a3 = v36;
    swift_release_n(v4);
    *(_WORD *)(v31 + 22) = 2114;
    v39 = *(void **)(v4 + 24);
    v147 = (uint64_t)v39;
    v40 = v39;
    v10 = v127;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148);
    v32[1] = v39;
    v20 = v139;
    swift_release_n(v4);
    *(_WORD *)(v31 + 32) = 2048;
    swift_release(v4);
    v147 = 1000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148);
    swift_release(v4);
    _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v134, "%{public}s: Start execution {templateObjectID: %{public}@, templatePublicLinkConfiguration: %{public}@, remindersCountLimit: %ld}", (uint8_t *)v31, 0x2Au);
    v41 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v32, 2, v41);
    swift_slowDealloc(v32, -1, -1);
    v42 = v137;
    swift_arrayDestroy(v137, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

    v43 = swift_release_n(v4);
  }
  v44 = Date.init()(v43);
  v45 = *(void **)(v4 + 16);
  v137 = *(void **)(v4 + 24);
  v46 = v138;
  v47 = static Date.now.getter(v44);
  Date.addingTimeInterval(_:)(v47, *(double *)(v4 + 40));
  v134 = *(void (**)(char *, uint64_t))(v143 + 8);
  v134(v46, v10);
  v48 = objc_msgSend(v45, "uuid");
  v49 = v141;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v48);

  v50 = (uint64_t)v136;
  v126 = sub_100369840(v49, (uint64_t)v136);
  v51 = v50;
  v52 = objc_autoreleasePoolPush();
  sub_1002A76C4();
  v54 = sub_1002A6E28(v45, v51, v53, 0);
  swift_bridgeObjectRelease();
  v55 = v129;
  sub_1004902E0(v141, (uint64_t)v20, v137, 1000, v129);

  objc_autoreleasePoolPop(v52);
  v82 = v126;
  sub_10057AFEC(v55);
  v83 = (uint64_t)v142;
  v84 = sub_10057B2FC();
  if (!v84)
  {
    v114 = type metadata accessor for REMCDPublicTemplate();
    v115 = (void *)objc_opt_self(REMError);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v114);
    v117 = String._bridgeToObjectiveC()();
    v118 = objc_msgSend(v115, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v117);

    swift_willThrow(v119);
    goto LABEL_18;
  }
  v85 = v84;
  v147 = 0;
  v86 = objc_msgSend(v136, "save:", &v147);
  v87 = (id)v147;
  if ((v86 & 1) == 0)
  {
    v120 = (id)v147;
    v118 = (id)_convertNSErrorToError(_:)(v87);

    swift_willThrow(v121);
LABEL_18:
    sub_10030DBA4((uint64_t)v129);
    ((void (*)(uint64_t, uint64_t))v132[1].isa)(v141, v133);
    v56 = v130;
    (*(void (**)(os_log_t, uint64_t, uint64_t))(v143 + 16))(v130, v83, v10);
    v57 = v45;
    swift_errorRetain(v118);
    v58 = v57;
    v59 = swift_errorRetain(v118);
    v60 = Logger.logObject.getter(v59);
    v61 = static os_log_type_t.error.getter(v60);
    v62 = v61;
    if (os_log_type_enabled(v60, v61))
    {
      v63 = swift_slowAlloc(42, -1);
      v64 = (_QWORD *)swift_slowAlloc(8, -1);
      v136 = (id)swift_slowAlloc(64, -1);
      v146 = *(double *)&v136;
      *(_DWORD *)v63 = 136446978;
      LODWORD(v133) = v62;
      v147 = v140;
      v65 = swift_getMetatypeMetadata(v140);
      v132 = v60;
      v66 = v10;
      v67 = String.init<A>(describing:)(&v147, v65);
      v141 = a3;
      v147 = sub_10001A820(v67, v68, (uint64_t *)&v146);
      v143 = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148);
      swift_bridgeObjectRelease();
      *(_WORD *)(v63 + 12) = 2114;
      v147 = (uint64_t)v58;
      v69 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148);
      *v64 = v58;

      v10 = v66;
      *(_WORD *)(v63 + 22) = 2082;
      swift_getErrorValue(v118, v145, v144);
      v70 = Error.rem_errorDescription.getter(v144[1], v144[2]);
      v147 = sub_10001A820(v70, v71, (uint64_t *)&v146);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148);
      swift_bridgeObjectRelease();
      swift_errorRelease(v118);
      v72 = swift_errorRelease(v118);
      *(_WORD *)(v63 + 32) = 2048;
      v73 = v138;
      Date.init()(v72);
      v74 = Date.timeIntervalSince(_:)(v56);
      v75 = v73;
      v76 = (void (*)(os_log_t, uint64_t))v134;
      v134(v75, v66);
      v147 = *(_QWORD *)&v74;
      v4 = v143;
      a3 = v141;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148);
      v76(v56, v66);
      v60 = v132;
      _os_log_impl((void *)&_mh_execute_header, v132, (os_log_type_t)v133, "%{public}s: Failed to create preview of template's public content. {templateObjectID: %{public}@, privacy: .public), error: %{public}s, elapsedSeconds: %f}", (uint8_t *)v63, 0x2Au);
      v77 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v64, 1, v77);
      swift_slowDealloc(v64, -1, -1);
      v78 = v136;
      swift_arrayDestroy(v136, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v78, -1, -1);
      swift_slowDealloc(v63, -1, -1);
    }
    else
    {

      swift_errorRelease(v118);
      swift_errorRelease(v118);
      v76 = (void (*)(os_log_t, uint64_t))v134;
      v134((char *)v56, v10);
    }

    v79 = v140;
    swift_errorRetain(v118);
    v124 = v79;
    v80 = (uint64_t)v142;
    sub_10030D758((uint64_t)v118, 1, v58, v137, v4, (uint64_t)v142, v135, a3, v124);
    swift_errorRelease(v118);
    swift_errorRelease(v118);
    v76((os_log_t)v80, v10);
    return ((uint64_t (*)(char *, uint64_t))v76)(v139, v10);
  }
  v88 = v128;
  (*(void (**)(char *, uint64_t, uint64_t))(v143 + 16))(v128, v83, v10);
  v89 = v85;
  v90 = Logger.logObject.getter(v87);
  v91 = static os_log_type_t.default.getter(v90);
  v136 = v85;
  v92 = v10;
  v93 = v91;
  if (os_log_type_enabled(v90, v91))
  {
    v94 = swift_slowAlloc(32, -1);
    v130 = v90;
    v95 = v94;
    v96 = swift_slowAlloc(8, -1);
    v127 = v92;
    v97 = (_QWORD *)v96;
    v125 = v96;
    v131 = swift_slowAlloc(32, -1);
    v147 = v131;
    *(_DWORD *)v95 = 136446722;
    v98 = sub_1000D92EC(v140);
    v146 = COERCE_DOUBLE(sub_10001A820(v98, v99, &v147));
    v143 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147);
    swift_bridgeObjectRelease();
    *(_WORD *)(v95 + 12) = 2114;
    v146 = *(double *)&v89;
    v100 = v89;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147);
    *v97 = v136;

    *(_WORD *)(v95 + 22) = 2048;
    v101 = v138;
    Date.init()(v102);
    v103 = v128;
    v104 = Date.timeIntervalSince(_:)(v128);
    v105 = v101;
    v106 = v127;
    v76 = (void (*)(os_log_t, uint64_t))v134;
    v134(v105, v127);
    v146 = v104;
    v83 = (uint64_t)v142;
    v4 = v143;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147);
    v107 = v103;
    v108 = v106;
    v76((os_log_t)v107, v106);
    v109 = v130;
    _os_log_impl((void *)&_mh_execute_header, v130, v93, "%{public}s: Saved preview in cache {previewObjectID: %{public}@, elapsedSeconds: %f}", (uint8_t *)v95, 0x20u);
    v110 = sub_10001A630((uint64_t *)&unk_100839E70);
    v111 = v125;
    swift_arrayDestroy(v125, 1, v110);
    swift_slowDealloc(v111, -1, -1);
    v112 = v131;
    swift_arrayDestroy(v131, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v112, -1, -1);
    swift_slowDealloc(v95, -1, -1);

    v113 = v140;
    v10 = v108;
  }
  else
  {

    v76 = (void (*)(os_log_t, uint64_t))v134;
    v134(v88, v92);

    v10 = v92;
    v113 = v140;
  }
  v122 = (uint64_t)v136;
  v123 = v89;
  sub_10030D758(v122, 0, v45, v137, v4, v83, v135, a3, v113);

  sub_10030DBA4((uint64_t)v129);
  v76((os_log_t)v83, v10);
  ((void (*)(uint64_t, uint64_t))v132[1].isa)(v141, v133);
  return ((uint64_t (*)(char *, uint64_t))v76)(v139, v10);
}

uint64_t sub_10030D758(uint64_t a1, int a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, _QWORD), uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t MetatypeMetadata;
  uint64_t v31;
  unint64_t v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  double v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  os_log_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  os_log_t v48;
  int v49;
  uint64_t v50;
  int v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, _QWORD);
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v54 = a8;
  v55 = a7;
  v57 = a5;
  v53 = a1;
  v13 = type metadata accessor for Date(0);
  v58 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v52 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v47 - v16;
  if (qword_100837158 != -1)
    swift_once(&qword_100837158, sub_10030C9D4);
  v18 = type metadata accessor for Logger(0);
  sub_10001AAA8(v18, (uint64_t)qword_100844DE8);
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v17, a6, v13);
  v19 = a3;
  v20 = a4;
  swift_retain_n(v57);
  v21 = v19;
  v56 = v17;
  v22 = v21;
  v23 = v20;
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter(v24);
  v26 = v25;
  if (os_log_type_enabled(v24, v25))
  {
    v49 = v26;
    v27 = swift_slowAlloc(52, -1);
    v48 = v24;
    v28 = v27;
    v29 = (_QWORD *)swift_slowAlloc(16, -1);
    v50 = swift_slowAlloc(32, -1);
    v59 = v50;
    v60 = a9;
    *(_DWORD *)v28 = 136447234;
    v51 = a2;
    MetatypeMetadata = swift_getMetatypeMetadata(a9);
    v31 = String.init<A>(describing:)(&v60, MetatypeMetadata);
    v60 = sub_10001A820(v31, v32, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61);
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2114;
    v60 = (uint64_t)v22;
    v33 = v22;
    v47 = v13;
    v34 = v33;
    LOBYTE(a2) = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61);
    *v29 = v22;

    *(_WORD *)(v28 + 22) = 2114;
    v60 = (uint64_t)v23;
    v35 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61);
    v29[1] = v23;

    *(_WORD *)(v28 + 32) = 2048;
    v36 = v57;
    swift_release(v57);
    v60 = 1000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61);
    v37 = swift_release(v36);
    *(_WORD *)(v28 + 42) = 2048;
    v38 = v52;
    Date.init()(v37);
    v39 = v56;
    v40 = Date.timeIntervalSince(_:)(v56);
    v41 = *(void (**)(char *, uint64_t))(v58 + 8);
    v42 = v47;
    v41(v38, v47);
    v60 = *(_QWORD *)&v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61);
    v41(v39, v42);
    v43 = v48;
    _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v49, "%{public}s: Finished execution {templateObjectID: %{public}@, templatePublicLinkConfiguration: %{public}@, remindersCountLimit: %ld, elapsedSeconds: %f}", (uint8_t *)v28, 0x34u);
    v44 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v29, 2, v44);
    swift_slowDealloc(v29, -1, -1);
    v45 = v50;
    swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v28, -1, -1);

  }
  else
  {

    swift_release_n(v57);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v56, v13);

  }
  return v55(v53, a2 & 1);
}

uint64_t sub_10030DB58()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for RDTemplateOperationCreateTemplatePublicContentPreview()
{
  return objc_opt_self(_TtC7remindd53RDTemplateOperationCreateTemplatePublicContentPreview);
}

uint64_t sub_10030DBA4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RDPublicTemplate(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

NSString sub_10030DBE0(void *a1)
{
  NSString *v1;
  uint64_t v2;
  NSString v4;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  id v8;
  id v9;
  void *v10;
  _QWORD *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t MetatypeMetadata;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t ObjCClassFromMetadata;
  uint64_t v33;
  uint64_t v35;
  _QWORD *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  NSObject *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  void *v48;
  id v49;
  id v50;
  id v51;
  objc_class *v52;
  Class isa;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  id v65;
  uint64_t v66;

  v4 = *v1;
  v65 = 0;
  v5 = objc_msgSend(a1, "remObjectIDWithError:", &v65);
  v6 = v65;
  if (!v5)
  {
    v28 = v65;
    _convertNSErrorToError(_:)(v6);

    swift_willThrow(v29);
    return v4;
  }
  v7 = v5;
  v8 = v65;
  v9 = objc_msgSend(a1, "account");
  if (!v9
    || (v10 = v9, v11 = objc_msgSend(v9, "remObjectID"), v10, !v11))
  {
    if (qword_100837168 != -1)
      swift_once(&qword_100837168, sub_10030E364);
    v17 = type metadata accessor for Logger(0);
    sub_10001AAA8(v17, (uint64_t)qword_100844ED0);
    v11 = v7;
    v18 = Logger.logObject.getter(v11);
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc(22, -1);
      v21 = (_QWORD *)swift_slowAlloc(8, -1);
      v62 = swift_slowAlloc(32, -1);
      v65 = v4;
      v66 = v62;
      *(_DWORD *)v20 = 136315394;
      MetatypeMetadata = swift_getMetatypeMetadata(v4);
      v23 = String.init<A>(describing:)(&v65, MetatypeMetadata);
      v25 = v24;
      v65 = (id)sub_10001A820(v23, v24, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
      swift_bridgeObjectRelease(v25);
      *(_WORD *)(v20 + 12) = 2112;
      v65 = v11;
      v26 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
      *v21 = v7;

      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s: cdListSection.account is nil {cdListSection.remObjectID: %@}", (uint8_t *)v20, 0x16u);
      v27 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v21, 1, v27);
      swift_slowDealloc(v21, -1, -1);
      swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

    }
    v30 = (void *)objc_opt_self(REMError);
    v31 = type metadata accessor for REMCDListSection();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v31);
    v4 = String._bridgeToObjectiveC()();
    objc_msgSend(v30, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v4);

    swift_willThrow(v33);
    goto LABEL_14;
  }
  v12 = objc_msgSend(a1, "displayName");
  if (!v12)
  {
    if (qword_100837168 != -1)
      swift_once(&qword_100837168, sub_10030E364);
    v35 = type metadata accessor for Logger(0);
    sub_10001AAA8(v35, (uint64_t)qword_100844ED0);
    v36 = v7;
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = swift_slowAlloc(22, -1);
      v61 = (_QWORD *)swift_slowAlloc(8, -1);
      v63 = swift_slowAlloc(32, -1);
      v65 = v4;
      v66 = v63;
      *(_DWORD *)v39 = 136315394;
      v40 = swift_getMetatypeMetadata(v4);
      v64 = v7;
      v41 = String.init<A>(describing:)(&v65, v40);
      v43 = v42;
      v65 = (id)sub_10001A820(v41, v42, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
      swift_bridgeObjectRelease(v43);
      *(_WORD *)(v39 + 12) = 2112;
      v65 = v36;
      v44 = v37;
      v45 = v36;
      v46 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
      *v61 = v64;

      v36 = v45;
      _os_log_impl((void *)&_mh_execute_header, v44, v38, "%s: cdListSection.displayName is nil {cdListSection.remObjectID: %@}", (uint8_t *)v39, 0x16u);
      v47 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v61, 1, v47);
      swift_slowDealloc(v61, -1, -1);
      swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1, -1);
      swift_slowDealloc(v39, -1, -1);

    }
    else
    {

    }
    v57 = (void *)objc_opt_self(REMError);
    v58 = type metadata accessor for REMCDListSection();
    v59 = swift_getObjCClassFromMetadata(v58);
    v4 = String._bridgeToObjectiveC()();
    objc_msgSend(v57, "unexpectedNilPropertyWithClass:property:", v59, v4);

    swift_willThrow(v60);
LABEL_14:

    return v4;
  }
  v13 = v12;
  v4 = (NSString)static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  v16 = sub_10030EEA8(a1, v7, v11, (uint64_t)v4, v15);
  if (v2)
  {

    swift_bridgeObjectRelease(v15);
  }
  else
  {
    v48 = v16;
    v49 = objc_msgSend(a1, "canonicalName", swift_bridgeObjectRelease(v15).n128_f64[0]);
    objc_msgSend(v48, "setCanonicalName:", v49);

    v50 = v48;
    objc_msgSend(v50, "setMinimumSupportedVersion:", objc_msgSend(a1, "minimumSupportedVersion"));

    v51 = v50;
    objc_msgSend(v51, "setEffectiveMinimumSupportedVersion:", objc_msgSend(a1, "effectiveMinimumSupportedVersion"));

    objc_msgSend(v51, "setResolutionTokenMap:", 0);
    v4 = v51;
    v52 = (objc_class *)objc_msgSend(a1, "resolutionTokenMapData");
    isa = v52;
    if (v52)
    {
      v54 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v52);
      v56 = v55;

      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000A71C8(v54, v56);
    }
    objc_msgSend(v4, "setResolutionTokenMapData:", isa);

  }
  return v4;
}

uint64_t sub_10030E340(uint64_t a1)
{
  return sub_1001489A4(a1, qword_100844EB8, &qword_100837690, (uint64_t)qword_100872190, (uint64_t)sub_1004A19A4);
}

uint64_t sub_10030E364(uint64_t a1)
{
  return sub_1001489A4(a1, qword_100844ED0, &qword_100837688, (uint64_t)qword_100872178, (uint64_t)sub_1004A1988);
}

void sub_10030E388(char *a1)
{
  sub_1002B3160(*a1);
}

void sub_10030E394()
{
  char *v0;

  sub_1004F4E24(*v0);
}

void sub_10030E39C()
{
  __asm { BR              X10 }
}

uint64_t sub_10030E3D8(uint64_t a1)
{
  String.hash(into:)(a1, 0xD000000000000017, 0x80000001006F4060);
  return swift_bridgeObjectRelease(0x80000001006F4060);
}

void sub_10030E46C(uint64_t a1)
{
  char *v1;

  sub_1002B2AF8(a1, *v1);
}

unint64_t sub_10030E474@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10030F3D0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10030E4A0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_10030E4D0 + 4 * byte_1006B4155[*v0]))();
}

void sub_10030E4D0(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000017;
  a1[1] = 0x80000001006F4060;
}

void sub_10030E4F0(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "creationDate");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_10030E514(_QWORD *a1@<X8>)
{
  *a1 = 0x4E79616C70736964;
  a1[1] = 0xEB00000000656D61;
}

void sub_10030E538(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "canonicalName");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_10030E560(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E0458;
}

unint64_t sub_10030E570@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10030F3D0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10030E594()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10030E5C4 + 4 * byte_1006B415A[*v0]))(0x44497463656A626FLL, 0xE800000000000000);
}

unint64_t sub_10030E5C4()
{
  return 0xD000000000000017;
}

uint64_t sub_10030E5E0()
{
  return 0x6E6F697461657263;
}

uint64_t sub_10030E600()
{
  return 0x4E79616C70736964;
}

uint64_t sub_10030E620()
{
  return 0x6163696E6F6E6163;
}

uint64_t sub_10030E644(char *a1, char *a2)
{
  return sub_1002B2D70(*a1, *a2);
}

Swift::Int sub_10030E650()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x4449746E65726170;
  else
    v2 = 0x49746E756F636361;
  if (v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xE900000000000044;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10030E6D4(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x4449746E65726170;
  else
    v2 = 0x49746E756F636361;
  if (*v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xE900000000000044;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10030E734(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x4449746E65726170;
  else
    v3 = 0x49746E756F636361;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xE900000000000044;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10030E7B4@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DC768, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_10030E810(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x49746E756F636361;
  if (*v1)
    v2 = 0x4449746E65726170;
  v3 = 0xE900000000000044;
  if (*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

void sub_10030E854(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E0480;
}

uint64_t sub_10030E864@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DC768, v3);
  result = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_10030E8C4()
{
  _BYTE *v0;

  if (*v0)
    return 0x4449746E65726170;
  else
    return 0x49746E756F636361;
}

void sub_10030E904()
{
  sub_10030E920();
}

void sub_10030E920()
{
  JUMPOUT(0x10030EA54);
}

_QWORD *sub_10030EEA8(void *a1, _QWORD *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  _QWORD *v21;
  id v22;
  id v23;
  NSString v24;
  id v25;
  id v26;
  objc_class *v27;
  Class isa;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t MetatypeMetadata;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t ObjCClassFromMetadata;
  NSString v45;
  uint64_t v46;
  id v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;

  v51 = a4;
  v50 = *v5;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v14);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = a1;
  v17 = objc_msgSend(a1, "list");
  if (v17
    && (v18 = v17, v19 = objc_msgSend(v17, "remObjectID"), v18, v19))
  {
    v50 = v10;
    v20 = objc_allocWithZone((Class)REMListSectionStorage);
    v21 = a2;
    v22 = a3;
    swift_bridgeObjectRetain(a5);
    v23 = v19;
    v24 = String._bridgeToObjectiveC()();
    v25 = objc_msgSend(v20, "initWithObjectID:accountID:parentID:displayName:", v21, v22, v23, v24, swift_bridgeObjectRelease(a5).n128_f64[0]);

    a2 = v25;
    v26 = v52;
    v27 = (objc_class *)objc_msgSend(v52, "creationDate");
    isa = v27;
    if (v27)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v27);

      v29 = v50;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v13, v50);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v29);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v29) == 1)
      {
        isa = 0;
      }
      else
      {
        isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v29);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v16, 1, 1, v50);
    }
    objc_msgSend(a2, "setCreationDate:", isa);

    v47 = objc_msgSend(v26, "canonicalName");
    objc_msgSend(a2, "setCanonicalName:", v47);

  }
  else
  {
    if (qword_100837168 != -1)
      swift_once(&qword_100837168, sub_10030E364);
    v30 = type metadata accessor for Logger(0);
    sub_10001AAA8(v30, (uint64_t)qword_100844ED0);
    v31 = a2;
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = swift_slowAlloc(22, -1);
      a2 = (_QWORD *)swift_slowAlloc(8, -1);
      v52 = (id)swift_slowAlloc(32, -1);
      v53 = v52;
      *(_DWORD *)v34 = 136315394;
      v54 = v50;
      MetatypeMetadata = swift_getMetatypeMetadata(v50);
      v36 = String.init<A>(describing:)(&v54, MetatypeMetadata);
      v38 = v37;
      v54 = sub_10001A820(v36, v37, (uint64_t *)&v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);
      swift_bridgeObjectRelease(v38);
      *(_WORD *)(v34 + 12) = 2112;
      v54 = (uint64_t)v31;
      v39 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);
      *a2 = v31;

      _os_log_impl((void *)&_mh_execute_header, v32, v33, "%s: cdListSection.list is nil {cdListSection.remObjectID: %@}", (uint8_t *)v34, 0x16u);
      v40 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(a2, 1, v40);
      swift_slowDealloc(a2, -1, -1);
      v41 = v52;
      swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v34, -1, -1);

    }
    else
    {

    }
    v42 = (void *)objc_opt_self(REMError);
    v43 = type metadata accessor for REMCDListSection();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v43);
    v45 = String._bridgeToObjectiveC()();
    objc_msgSend(v42, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v45);

    swift_willThrow(v46);
  }
  return a2;
}

uint64_t type metadata accessor for REMListSectionStorageCDIngestor()
{
  return objc_opt_self(_TtC7remindd31REMListSectionStorageCDIngestor);
}

_UNKNOWN **sub_10030F3B8()
{
  return &off_1007EE128;
}

_UNKNOWN **sub_10030F3C4()
{
  return &off_1007EE0F8;
}

unint64_t sub_10030F3D0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DC7B8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

_QWORD *sub_10030F418(id a1, char a2)
{
  uint64_t v3;
  _QWORD *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if ((a2 & 1) != 0)
  {
    v6 = objc_msgSend(a1, "parentID");
    v7 = v6;
    v4 = _swiftEmptyArrayStorage;
    if (v6)
    {
      v8 = v6;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v8);
      v10 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v9 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v10 >= v9 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1);
      v11 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v8);
      specialized Array._endMutation()(v11);
      v4 = _swiftEmptyArrayStorage;
    }

  }
  else
  {
    v3 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v4 = (_QWORD *)swift_allocObject(v3, 40, 7);
    *((_OWORD *)v4 + 1) = xmmword_1006A7330;
    v5 = objc_msgSend(a1, "accountID");
    v4[4] = v5;
    specialized Array._endMutation()(v5);
  }
  return v4;
}

void sub_10030F530(void *a1, void *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  int v23;
  uint64_t v24;
  char *v25;
  uint64_t MetatypeMetadata;
  uint64_t v27;
  unint64_t v28;
  double v29;
  _QWORD *v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void *v38;
  unint64_t v39;
  uint64_t ObjCClassFromMetadata;
  NSString v41;
  uint64_t v42;
  _QWORD v43[4];
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;

  v8 = (_QWORD *)*v3;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v44 = (char *)v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v12);
  v47 = (char *)v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v49 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)&v15 = __chkstk_darwin(v14).n128_u64[0];
  v48 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = objc_msgSend(a2, "createResolutionTokenMapIfNecessary", v15);
  v17 = objc_msgSend(a1, "resolutionTokenMap");
  if (v17)
  {
    v45 = v10;
    v46 = v9;
    v18 = v17;
    v19 = sub_100406080((uint64_t)v17, a3);
    if (*(_QWORD *)(a3 + 16))
    {
      v43[0] = v18;
      v43[1] = v4;
      swift_bridgeObjectRetain(a3);
      v43[2] = a2;
      v43[3] = a3;
      __asm { BR              X9 }
    }

  }
  else
  {
    if (qword_100837160 != -1)
      swift_once(&qword_100837160, sub_10030E340);
    v20 = type metadata accessor for Logger(0);
    sub_10001AAA8(v20, (uint64_t)qword_100844EB8);
    swift_bridgeObjectRetain_n(a3, 2);
    v21 = a1;
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v22, (os_log_type_t)v23))
    {
      LODWORD(v47) = v23;
      v24 = swift_slowAlloc(32, -1);
      v25 = (char *)swift_slowAlloc(8, -1);
      v49 = swift_slowAlloc(64, -1);
      v51 = v49;
      *(_DWORD *)v24 = 136315650;
      v52 = v8;
      MetatypeMetadata = swift_getMetatypeMetadata(v8);
      v27 = String.init<A>(describing:)(&v52, MetatypeMetadata);
      v52 = (_QWORD *)sub_10001A820(v27, v28, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
      *(_QWORD *)&v29 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v24 + 12) = 2114;
      v30 = objc_msgSend(v21, "objectID", v29);
      v52 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
      v48 = v25;
      *(_QWORD *)v25 = v30;

      *(_WORD *)(v24 + 22) = 2082;
      v31 = *(_QWORD *)(a3 + 16);
      if (v31)
      {
        v44 = (char *)&v53;
        v45 = v24;
        v46 = (uint64_t)v22;
        v52 = _swiftEmptyArrayStorage;
        sub_1001C1B0C(0, v31, 0);
        __asm { BR              X9 }
      }
      v32 = Array.description.getter(_swiftEmptyArrayStorage, &type metadata for String);
      v34 = v33;
      swift_bridgeObjectRelease();
      v52 = (_QWORD *)sub_10001A820(v32, v34, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v47, "%s: merge(storage:into cdSection:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}s}", (uint8_t *)v24, 0x20u);
      v35 = sub_10001A630((uint64_t *)&unk_100839E70);
      v36 = v48;
      swift_arrayDestroy(v48, 1, v35);
      swift_slowDealloc(v36, -1, -1);
      v37 = v49;
      swift_arrayDestroy(v49, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    v38 = (void *)objc_opt_self(REMError);
    v39 = sub_1003107F4();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v39);
    v41 = String._bridgeToObjectiveC()();
    objc_msgSend(v38, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v41);

    swift_willThrow(v42);
  }

}

void sub_10030FE70(id a1, id a2, char a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t inited;
  id v17;
  id v18;
  NSString v19;
  id v20;
  NSObject *v21;
  void *v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  double v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  id v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t MetatypeMetadata;
  uint64_t v49;
  unint64_t v50;
  double v51;
  id v52;
  uint64_t v53;
  void *v54;
  unint64_t v55;
  uint64_t ObjCClassFromMetadata;
  NSString v57;
  uint64_t v58;
  NSObject *v59;
  uint64_t v60;
  NSObject *v61;
  id v62;
  NSObject *v63;
  id v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  void *v68;
  id v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  double v73;
  id v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  NSObject *v79;
  uint64_t v80;
  os_log_type_t v81;
  NSObject *v82;
  os_log_type_t typea;
  os_log_type_t type[8];
  NSObject *loga;
  os_log_t log;
  uint64_t v87;
  void *v88;
  id v89;
  char v90[40];
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  if ((a3 & 1) != 0)
  {
    v11 = *v4;
    v12 = objc_msgSend(a2, "createResolutionTokenMapIfNecessary");
    v13 = objc_msgSend(a1, "resolutionTokenMap");
    if (v13)
    {
      v14 = v13;
      v15 = sub_10001A630(&qword_100843A78);
      inited = swift_initStackObject(v15, v90);
      *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
      *(_BYTE *)(inited + 32) = 1;
      v17 = sub_1004062CC(v14, inited);
      swift_setDeallocating(inited);
      v18 = objc_msgSend(a1, "listID");
      sub_100404454(1);
      v19 = String._bridgeToObjectiveC()();
      LODWORD(inited) = objc_msgSend(v12, "mergeWithMap:forKey:", v17, v19, swift_bridgeObjectRelease().n128_f64[0]);

      if ((_DWORD)inited)
      {
        if (v18)
        {
          v20 = v18;
          sub_1003FD068(1, v20, a4);
          if (v5)
          {

            return;
          }
          v59 = v21;

        }
        else
        {
          v59 = 0;
        }
        if (qword_100837160 != -1)
          swift_once(&qword_100837160, sub_10030E340);
        v60 = type metadata accessor for Logger(0);
        sub_10001AAA8(v60, (uint64_t)qword_100844EB8);
        log = v59;
        v61 = v59;
        v62 = a2;
        v63 = v61;
        v64 = v62;
        v65 = Logger.logObject.getter(v64);
        v66 = static os_log_type_t.info.getter(v65);
        if (os_log_type_enabled(v65, v66))
        {
          v81 = v66;
          v82 = v65;
          v79 = v63;
          v89 = v12;
          v67 = swift_slowAlloc(22, -1);
          v80 = swift_slowAlloc(64, -1);
          v93 = v80;
          *(_DWORD *)v67 = 136446466;
          v68 = v64;
          v69 = objc_msgSend(v64, "remObjectID");
          v91 = (uint64_t)v69;
          v78 = sub_10001A630((uint64_t *)&unk_100844910);
          v70 = Optional.descriptionOrNil.getter(v78);
          v72 = v71;

          v91 = sub_10001A820(v70, v72, &v93);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);

          *(_QWORD *)type = v68;
          *(_QWORD *)&v73 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v67 + 12) = 2082;
          if (log)
          {
            v63 = v79;
            v74 = -[NSObject remObjectID](v79, "remObjectID", v73);
            v91 = (uint64_t)v74;
            v75 = Optional.descriptionOrNil.getter(v78);
            v77 = v76;

          }
          else
          {
            v77 = 0xE90000000000003ELL;
            v75 = 0x7473696C206F6E3CLL;
            v63 = v79;
          }
          v91 = sub_10001A820(v75, v77, &v93);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v82, v81, "Updating cdListSection.list {cdListSection: %{public}s, list: %{public}s}", (uint8_t *)v67, 0x16u);
          swift_arrayDestroy(v80, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v80, -1, -1);
          swift_slowDealloc(v67, -1, -1);

          v12 = v89;
          v64 = *(id *)type;
        }
        else
        {

        }
        objc_msgSend(v64, "setList:", v63);

      }
    }
    else
    {
      if (qword_100837160 != -1)
        swift_once(&qword_100837160, sub_10030E340);
      v88 = v12;
      v41 = type metadata accessor for Logger(0);
      sub_10001AAA8(v41, (uint64_t)qword_100844EB8);
      v42 = a1;
      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v43, v44))
      {
        v45 = swift_slowAlloc(32, -1);
        v46 = (_QWORD *)swift_slowAlloc(8, -1);
        v47 = swift_slowAlloc(64, -1);
        v91 = v47;
        *(_DWORD *)v45 = 136315650;
        v93 = v11;
        MetatypeMetadata = swift_getMetatypeMetadata(v11);
        v49 = String.init<A>(describing:)(&v93, MetatypeMetadata);
        v93 = sub_10001A820(v49, v50, &v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94);
        *(_QWORD *)&v51 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v45 + 12) = 2114;
        v52 = objc_msgSend(v42, "objectID", v51);
        v93 = (uint64_t)v52;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94);
        *v46 = v52;

        *(_WORD *)(v45 + 22) = 2082;
        v93 = sub_10001A820(0x4449746E65726170, 0xE800000000000000, &v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94);
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "%s: establishRelationship(onStorage:into cdListSection:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}", (uint8_t *)v45, 0x20u);
        v53 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v46, 1, v53);
        swift_slowDealloc(v46, -1, -1);
        swift_arrayDestroy(v47, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1, -1);
        swift_slowDealloc(v45, -1, -1);

      }
      else
      {

      }
      v54 = (void *)objc_opt_self(REMError);
      v55 = sub_1003107F4();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v55);
      v57 = String._bridgeToObjectiveC()();
      objc_msgSend(v54, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v57);

      swift_willThrow(v58);
    }
  }
  else
  {
    v9 = objc_msgSend(a1, "accountID");
    sub_1003FD03C(0, v9, a4);
    if (v5)
    {

    }
    else
    {
      v22 = v10;
      if (qword_100837160 != -1)
        swift_once(&qword_100837160, sub_10030E340);
      v23 = type metadata accessor for Logger(0);
      sub_10001AAA8(v23, (uint64_t)qword_100844EB8);
      v24 = a2;
      v25 = v22;
      v26 = v24;
      v27 = v25;
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.info.getter(v28);
      if (os_log_type_enabled(v28, v29))
      {
        v30 = swift_slowAlloc(22, -1);
        v87 = swift_slowAlloc(64, -1);
        v93 = v87;
        *(_DWORD *)v30 = 136446466;
        v31 = objc_msgSend(v26, "remObjectID");
        v32 = sub_10001A630((uint64_t *)&unk_100844910);
        loga = v28;
        v33 = Optional.descriptionOrNil.getter(v32);
        typea = v29;
        v35 = v34;

        v91 = sub_10001A820(v33, v35, &v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);

        *(_QWORD *)&v36 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v30 + 12) = 2082;
        v37 = objc_msgSend(v27, "remObjectID", v36);
        v91 = (uint64_t)v37;
        v38 = Optional.descriptionOrNil.getter(v32);
        v40 = v39;

        v91 = sub_10001A820(v38, v40, &v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, loga, typea, "Updating cdListSection.account {cdListSection: %{public}s, account: %{public}s}", (uint8_t *)v30, 0x16u);
        swift_arrayDestroy(v87, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v87, -1, -1);
        swift_slowDealloc(v30, -1, -1);

      }
      else
      {

      }
      objc_msgSend(v26, "setAccount:", v27);

    }
  }
}

unint64_t sub_1003107F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083AC08;
  if (!qword_10083AC08)
  {
    v1 = objc_opt_self(REMListSectionStorage);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10083AC08);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for REMListSectionStorageCDIngestor.RelationshipKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10031087C + 4 * byte_1006B4164[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1003108B0 + 4 * byte_1006B415F[v4]))();
}

uint64_t sub_1003108B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003108B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003108C0);
  return result;
}

uint64_t sub_1003108CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003108D4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1003108D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003108E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMListSectionStorageCDIngestor.RelationshipKey()
{
  return &type metadata for REMListSectionStorageCDIngestor.RelationshipKey;
}

uint64_t storeEnumTagSinglePayload for REMListSectionStorageCDIngestor.ValueKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100310948 + 4 * byte_1006B416E[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10031097C + 4 * byte_1006B4169[v4]))();
}

uint64_t sub_10031097C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100310984(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10031098CLL);
  return result;
}

uint64_t sub_100310998(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003109A0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1003109A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003109AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMListSectionStorageCDIngestor.ValueKey()
{
  return &type metadata for REMListSectionStorageCDIngestor.ValueKey;
}

uint64_t sub_1003109C8()
{
  return sub_1000BAEEC(&qword_100845088, &qword_100845090);
}

unint64_t sub_1003109F0()
{
  unint64_t result;

  result = qword_100845098;
  if (!qword_100845098)
  {
    result = swift_getWitnessTable(&unk_1006B429C, &type metadata for REMListSectionStorageCDIngestor.ValueKey);
    atomic_store(result, (unint64_t *)&qword_100845098);
  }
  return result;
}

uint64_t sub_100310A34()
{
  return sub_1000BAEEC(&qword_1008450A0, &qword_1008450A8);
}

unint64_t sub_100310A5C()
{
  unint64_t result;

  result = qword_1008450B0;
  if (!qword_1008450B0)
  {
    result = swift_getWitnessTable(&unk_1006B4374, &type metadata for REMListSectionStorageCDIngestor.RelationshipKey);
    atomic_store(result, (unint64_t *)&qword_1008450B0);
  }
  return result;
}

uint64_t sub_100310AA0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = v1;
  v38 = type metadata accessor for RDXPCEventStream.Alarm(0);
  __chkstk_darwin(v38);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = (void *)v2[2];
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  v14 = v13;
  v15 = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v15 & 1) != 0)
  {
    if (qword_100837178 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100837178, sub_100310DE0);
LABEL_3:
  v16 = type metadata accessor for Logger(0);
  sub_10001AAA8(v16, (uint64_t)qword_1008450B8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v37 = a1;
  v18 = v39;
  v19 = v17(v8, a1, v39);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc(12, -1);
    v35 = v17;
    v23 = (uint8_t *)v22;
    v24 = swift_slowAlloc(32, -1);
    v41 = v24;
    v36 = v2;
    *(_DWORD *)v23 = 136446210;
    v25 = Date.description.getter(v24);
    v27 = v26;
    v40 = sub_10001A820(v25, v26, &v41);
    v2 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);
    v28 = swift_bridgeObjectRelease(v27);
    (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v8, v39, v28);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Adding XPC time event {date: %{public}s}", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    v29 = v24;
    v18 = v39;
    swift_slowDealloc(v29, -1, -1);
    v30 = v23;
    v17 = v35;
    swift_slowDealloc(v30, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v18);
  }

  v32 = v2[3];
  v31 = v2[4];
  v17(&v5[*(int *)(v38 + 24)], v37, v18);
  *(_QWORD *)v5 = v32;
  *((_QWORD *)v5 + 1) = v31;
  v5[16] = 1;
  swift_bridgeObjectRetain(v31);
  sub_1001CCD30((uint64_t)v5);
  return sub_10001C744((uint64_t)v5, type metadata accessor for RDXPCEventStream.Alarm);
}

uint64_t sub_100310DAC(uint64_t a1, uint64_t a2)
{
  sub_100311B84(a1, a2);
  return sub_1000A5C24(a1, a2);
}

uint64_t sub_100310DE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008450B8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008450B8);
  if (qword_1008375F8 != -1)
    swift_once(&qword_1008375F8, sub_1004A1790);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FC8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100310E70(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 == *a2 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0);
}

Swift::Int sub_100310EA0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4, 0);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v4, v1, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t sub_100310EF8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(a1, v4, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100310F3C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100310F90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD aBlock[5];
  uint64_t v36;
  char v37[24];

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v32 = *(_QWORD *)(v1 - 8);
  v33 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v30 = *(_QWORD *)(v4 - 8);
  v31 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630(&qword_1008451B8);
  __chkstk_darwin(v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RDXPCEventStream.Token(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v30 - v15;
  v17 = v0 + OBJC_IVAR____TtC7remindd28RDXPCActivityTimeEventStream_xpcEventStreamToken;
  swift_beginAccess(v0 + OBJC_IVAR____TtC7remindd28RDXPCActivityTimeEventStream_xpcEventStreamToken, v37, 0, 0);
  sub_100311D34(v17, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    return sub_100311D7C((uint64_t)v9);
  sub_100311DBC((uint64_t)v9, (uint64_t)v16);
  v19 = *(_QWORD *)(v0 + 40);
  sub_100311E00((uint64_t)v16, (uint64_t)v13);
  v20 = *(unsigned __int8 *)(v11 + 80);
  v21 = (v20 + 16) & ~v20;
  v22 = (v12 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = swift_allocObject(&unk_1007EE3B8, v22 + 8, v20 | 7);
  sub_100311DBC((uint64_t)v13, v23 + v21);
  *(_QWORD *)(v23 + v22) = v19;
  aBlock[4] = sub_100311ED0;
  v36 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007EE3D0;
  v24 = _Block_copy(aBlock);
  v25 = swift_retain();
  static DispatchQoS.unspecified.getter(v25);
  v34 = _swiftEmptyArrayStorage;
  v26 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = sub_10001A630((uint64_t *)&unk_100838000);
  v28 = sub_1000D316C();
  v29 = v33;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v27, v28, v33, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v6, v3, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v3, v29);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v31);
  sub_10001C744((uint64_t)v16, type metadata accessor for RDXPCEventStream.Token);
  return swift_release(v36);
}

uint64_t sub_100311294@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  id v24;
  uint64_t v26;

  v4 = v3;
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (uint64_t *)((char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = (void *)v4[2];
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8, v10);
  v14 = v13;
  v15 = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v15 & 1) != 0)
  {
    if (qword_100837178 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100837178, sub_100310DE0);
LABEL_3:
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10001AAA8(v16, (uint64_t)qword_1008450B8);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.info.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Registering Time Event Handler", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

  v21 = v4[3];
  v22 = v4[4];
  v23 = (_QWORD *)swift_allocObject(&unk_1007EE390, 40, 7);
  v23[2] = v14;
  v23[3] = a1;
  v23[4] = a2;
  v24 = v14;
  swift_retain();
  sub_1001CC990(v21, v22, (uint64_t)sub_100311D28, (uint64_t)v23, a3);
  return swift_release(v23);
}

uint64_t sub_10031146C()
{
  uint64_t v0;

  sub_100310F90();

  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + 40));
  sub_100311D7C(v0 + OBJC_IVAR____TtC7remindd28RDXPCActivityTimeEventStream_xpcEventStreamToken);
  sub_1000A5C24(*(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd28RDXPCActivityTimeEventStream_eventHandler), *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd28RDXPCActivityTimeEventStream_eventHandler + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1003114CC()
{
  return type metadata accessor for RDXPCActivityTimeEventStream(0);
}

uint64_t type metadata accessor for RDXPCActivityTimeEventStream(uint64_t a1)
{
  uint64_t result;

  result = qword_100845100;
  if (!qword_100845100)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDXPCActivityTimeEventStream);
  return result;
}

void sub_100311510(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = &unk_1006B43E0;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_1003115AC(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = &unk_1006B43F8;
    swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
  }
}

void sub_1003115AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100845110)
  {
    v2 = type metadata accessor for RDXPCEventStream.Token(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100845110);
  }
}

uint64_t getEnumTagSinglePayload for RDXPCActivityTimeEventStream.Name(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDXPCActivityTimeEventStream.Name(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDXPCActivityTimeEventStream.Name()
{
  return &type metadata for RDXPCActivityTimeEventStream.Name;
}

unint64_t sub_100311698()
{
  unint64_t result;

  result = qword_1008451B0;
  if (!qword_1008451B0)
  {
    result = swift_getWitnessTable(&unk_1006B4458, &type metadata for RDXPCActivityTimeEventStream.Name);
    atomic_store(result, (unint64_t *)&qword_1008451B0);
  }
  return result;
}

uint64_t sub_1003116DC(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (uint64_t *)((char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v12 = a4;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8, v10);
  v13 = a4;
  v14 = (char *)_dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v14 & 1) != 0)
  {
    v14 = xpc_copy_description(a3);
    if (qword_100837178 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100837178, sub_100310DE0);
LABEL_3:
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10001AAA8(v15, (uint64_t)qword_1008450B8);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v26 = v20;
    *(_DWORD *)v19 = 136315138;
    v21 = String.init(cString:)(v14);
    v25 = sub_10001A820(v21, v22, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "XPCActivityTimeEventStream received event {xpc_event: %s}", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }

  v23 = swift_slowDealloc(v14, -1, -1);
  return a5(v23);
}

void sub_100311904(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v4 = type metadata accessor for RDXPCEventStream.Token(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100837178 != -1)
    swift_once(&qword_100837178, sub_100310DE0);
  v7 = type metadata accessor for Logger(0);
  sub_10001AAA8(v7, (uint64_t)qword_1008450B8);
  v8 = sub_100311E00(a1, (uint64_t)v6);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v17 = a2;
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    *(_DWORD *)v11 = 136315138;
    v18 = 0;
    v19 = 0xE000000000000000;
    v20 = v12;
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    v18 = 0xD000000000000017;
    v19 = 0x80000001006FC630;
    v13 = type metadata accessor for UUID(0);
    v14 = sub_10009FC50((unint64_t *)&qword_10083FA40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v13, v14);
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 62;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    v18 = sub_10001A820(v18, v19, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    sub_10001C744((uint64_t)v6, type metadata accessor for RDXPCEventStream.Token);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Unregistering xpcEventStreamToken {xpcEventStreamToken: %s}", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    sub_10001C744((uint64_t)v6, type metadata accessor for RDXPCEventStream.Token);
  }

  sub_1001CCBE0(a1);
}

uint64_t sub_100311B84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[24];

  v5 = sub_10001A630(&qword_1008451B8);
  __chkstk_darwin(v5);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = (uint64_t *)(v2 + OBJC_IVAR____TtC7remindd28RDXPCActivityTimeEventStream_eventHandler);
  v9 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7remindd28RDXPCActivityTimeEventStream_eventHandler);
  v10 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7remindd28RDXPCActivityTimeEventStream_eventHandler + 8);
  *v8 = a1;
  v8[1] = a2;
  sub_1000E51CC(a1, a2);
  sub_1000A5C24(v9, v10);
  result = sub_100310F90();
  v12 = *v8;
  if (*v8)
  {
    v13 = v8[1];
    swift_retain();
    sub_100311294(v12, v13, (uint64_t)v7);
    sub_1000A5C24(v12, v13);
    v14 = type metadata accessor for RDXPCEventStream.Token(0);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v7, 0, 1, v14);
    v15 = v2 + OBJC_IVAR____TtC7remindd28RDXPCActivityTimeEventStream_xpcEventStreamToken;
    swift_beginAccess(v15, v17, 33, 0);
    sub_100311CB4((uint64_t)v7, v15);
    return swift_endAccess(v17);
  }
  return result;
}

uint64_t sub_100311CB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_1008451B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100311CFC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100311D28(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_1003116DC(a1, a2, a3, *(void **)(v3 + 16), *(uint64_t (**)(uint64_t))(v3 + 24));
}

uint64_t sub_100311D34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_1008451B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100311D7C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A630(&qword_1008451B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100311DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RDXPCEventStream.Token(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100311E00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RDXPCEventStream.Token(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100311E44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(type metadata accessor for RDXPCEventStream.Token(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v2 | 7;
  v5 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v0 + v3;
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_release(*(_QWORD *)(v0 + v5));
  return swift_deallocObject(v0, v5 + 8, v4);
}

void sub_100311ED0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for RDXPCEventStream.Token(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_100311904(v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100311F10(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_10001A6CC((_OWORD *)a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v8 = *v2;
    *v2 = 0x8000000000000000;
    sub_10028BD30(v9, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v8;
    swift_bridgeObjectRelease();
    v5 = type metadata accessor for CodingUserInfoKey(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    sub_10000882C(a1, (uint64_t *)&unk_10083D5B0);
    sub_1002CAFA4(a2, v9);
    v7 = type metadata accessor for CodingUserInfoKey(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a2, v7);
    return sub_10000882C((uint64_t)v9, (uint64_t *)&unk_10083D5B0);
  }
}

uint64_t sub_100311FF4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  char isUniquelyReferenced_nonNull_native;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v10 + 48))(a1, 1, v9, v11) == 1)
  {
    sub_10000882C(a1, (uint64_t *)&unk_100839C80);
    sub_1002CB27C(a2, (uint64_t)v8);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
    return sub_10000882C((uint64_t)v8, (uint64_t *)&unk_100839C80);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v13, a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v18 = *v3;
    *v3 = 0x8000000000000000;
    sub_10028C430((uint64_t)v13, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v18;
    v16 = swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v10 + 8))(a2, v9, v16);
  }
}

void sub_100312168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];

  v4 = v3;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_10001A6CC((_OWORD *)a1, v10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v9 = *v3;
    *v3 = 0x8000000000000000;
    sub_10028CB74(v10, a2, a3, isUniquelyReferenced_nonNull_native);
    v8 = *v3;
    *v4 = v9;
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    sub_10000882C(a1, (uint64_t *)&unk_10083D5B0);
    sub_1002CB3AC(a2, a3, v10);
    swift_bridgeObjectRelease(a3);
    sub_10000882C((uint64_t)v10, (uint64_t *)&unk_10083D5B0);
  }
}

void sub_10031223C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  __int128 v10[2];

  v4 = v3;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_10001BCA8((__int128 *)a1, (uint64_t)v10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v9 = *v3;
    *v3 = 0x8000000000000000;
    sub_10028D2F8(v10, a2, a3, isUniquelyReferenced_nonNull_native);
    v8 = *v3;
    *v4 = v9;
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    sub_10000882C(a1, &qword_100842D08);
    sub_1002CB5F0(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease(a3);
    sub_10000882C((uint64_t)v10, &qword_100842D08);
  }
}

uint64_t sub_100312310(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_10001BCA8((__int128 *)a1, (uint64_t)v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v8 = *v2;
    *v2 = 0x8000000000000000;
    sub_10028E04C(v9, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v8;
    swift_bridgeObjectRelease();
    v5 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    sub_10000882C(a1, &qword_100841488);
    sub_1002CB8CC(a2, (uint64_t)v9);
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a2, v7);
    return sub_10000882C((uint64_t)v9, &qword_100841488);
  }
}

uint64_t sub_1003123F4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = v2;
  v6 = sub_10001A630((uint64_t *)&unk_100839CD0);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RDSavedReminder(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, __n128))(v13 + 48))(a1, 1, v10) == 1)
  {
    sub_10000882C(a1, (uint64_t *)&unk_100839CD0);
    sub_1002CBAA8(a2, (uint64_t)v8);
    v14 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(a2, v14);
    return sub_10000882C((uint64_t)v8, (uint64_t *)&unk_100839CD0);
  }
  else
  {
    sub_1000D6E1C(a1, (uint64_t)v12);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v20 = *v3;
    *v3 = 0x8000000000000000;
    sub_10028E370((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native);
    v17 = *v3;
    *v3 = v20;
    swift_bridgeObjectRelease(v17);
    v18 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a2, v18);
  }
}

uint64_t sub_10031256C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008451C0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008451C0);
  if (qword_100837670 != -1)
    swift_once(&qword_100837670, sub_1004A1934);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872130);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1003125FC(id a1)
{
  void **v1;
  void *v2;
  id v3;
  void **v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t MetatypeMetadata;
  uint64_t v32;
  unint64_t v33;
  NSObject *v34;
  uint64_t *v35;
  void *v36;
  id v37;
  double v38;
  void *v39;
  id v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t *v44;
  void *v45;
  void *v46;
  objc_class *v47;
  objc_class *v48;
  id v49;
  NSObject *v50;
  void *v51;
  void *v52;
  void *v53;
  double v54;
  uint64_t *v55;
  uint64_t v56;
  _OWORD *v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t *v63;
  uint64_t *v64;
  NSObject *v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  void **v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t *v78;
  _BYTE *v79;
  double v80;
  _BYTE *v81;
  _BYTE *v82;
  NSObject *v83;
  uint64_t v84;
  int *v85;
  double v86;
  uint64_t v87;
  void *v88;
  _QWORD *v89;
  NSObject *v90;
  id v91;
  NSObject *v92;
  id v93;
  id v94;
  double v95;
  double *v96;
  id v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  double *v101;
  id v102;
  uint64_t v103;
  double v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  NSObject *v108;
  Class isa;
  uint64_t v110;
  NSObject *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  void *v116;
  NSObject *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  id v121;
  id v122;
  id v123;
  void **v124;
  void *v125;
  void **v126;
  unsigned int v127;
  void **v128;
  void **v129;
  _BYTE *v130;
  uint64_t v131;
  NSObject *v132;
  os_log_type_t v133;
  void **v134;
  int v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  unint64_t v139;
  id v140;
  id v141;
  void **v142;
  uint64_t v143;
  _BYTE *v144;
  _BYTE *v145;
  double v146;
  _BYTE *v147;
  void (*v148)(_QWORD, _QWORD);
  os_log_t v149;
  uint64_t v150;
  _QWORD *v151;
  id v152;
  unsigned int v153;
  double v154;
  uint64_t v155;
  NSObject *v156;
  os_log_type_t v157;
  int v158;
  uint64_t v159;
  double *v160;
  NSObject *v161;
  id v162;
  id v163;
  double v164;
  _QWORD *v165;
  uint64_t v166;
  _BYTE *v167;
  os_log_t v168;
  double v169;
  _BYTE *v170;
  uint64_t v171;
  uint64_t v172;
  void **v173;
  uint64_t v174;
  void **v175;
  uint64_t v176;
  id v177;
  uint64_t v178;
  _BYTE *v179;
  uint64_t *v180;
  uint64_t v181;
  NSObject *v182;
  os_log_type_t v183;
  int v184;
  uint64_t v185;
  double *v186;
  uint64_t v187;
  unint64_t v188;
  id v189;
  id v190;
  uint64_t v191;
  double v192;
  _QWORD *v193;
  uint64_t v194;
  _BYTE *v195;
  _BYTE *v196;
  double v197;
  _BYTE *v198;
  void (*v199)(_QWORD, _QWORD);
  uint64_t v200;
  void **v201;
  uint64_t *v202;
  void (*v203)(_QWORD, _QWORD);
  unint64_t v204;
  _BYTE v205[4];
  int v206;
  _QWORD *v207;
  double v208;
  double v209;
  id v210;
  _BYTE *v211;
  os_log_t v212;
  _BYTE *v213;
  _BYTE *v214;
  uint64_t *v215;
  int *v216;
  _BYTE *v217;
  uint64_t v218;
  uint64_t *v219;
  id v220;
  void **v221;
  NSObject *v222;
  double v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  void **v230;
  double v231;
  _OWORD v232[2];
  _OWORD v233[2];
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;

  v3 = v2;
  v4 = v1;
  v227 = *v1;
  v216 = (int *)type metadata accessor for RDPublicTemplate(0);
  __chkstk_darwin(v216);
  v219 = (uint64_t *)&v205[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v224 = type metadata accessor for UUID(0);
  v223 = *(double *)(v224 - 8);
  __chkstk_darwin(v224);
  v222 = &v205[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v213 = &v205[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v13 = &v205[-v12];
  __chkstk_darwin(v14);
  v16 = &v205[-v15];
  __chkstk_darwin(v17);
  v214 = &v205[-v18];
  __chkstk_darwin(v19);
  v217 = &v205[-v20];
  __chkstk_darwin(v21);
  v23 = (uint64_t *)&v205[-v22];
  if (qword_100837180 != -1)
    swift_once(&qword_100837180, sub_10031256C);
  v24 = type metadata accessor for Logger(0);
  v25 = sub_10001AAA8(v24, (uint64_t)qword_1008451C0);
  v26 = swift_retain_n(v4);
  v218 = v25;
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter(v27);
  LODWORD(v221) = v28;
  v29 = os_log_type_enabled(v27, v28);
  v225 = v9;
  v226 = v8;
  v211 = v13;
  v212 = v16;
  if (v29)
  {
    v30 = swift_slowAlloc(42, -1);
    v208 = COERCE_DOUBLE(swift_slowAlloc(16, -1));
    v209 = COERCE_DOUBLE(swift_slowAlloc(32, -1));
    v231 = v209;
    *(_DWORD *)v30 = 136446978;
    v229 = (uint64_t)v227;
    MetatypeMetadata = swift_getMetatypeMetadata(v227);
    v220 = a1;
    v32 = String.init<A>(describing:)(&v229, MetatypeMetadata);
    v210 = v2;
    v229 = sub_10001A820(v32, v33, (uint64_t *)&v231);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &v230);
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2114;
    v34 = v27;
    v35 = v23;
    v36 = v4[3];
    v229 = (uint64_t)v36;
    v37 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &v230);
    v38 = v208;
    **(_QWORD **)&v208 = v36;
    swift_release_n(v4);
    *(_WORD *)(v30 + 22) = 2114;
    v39 = v4[4];
    v229 = (uint64_t)v39;
    v40 = v39;
    v3 = v210;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &v230);
    *(_QWORD *)(*(_QWORD *)&v38 + 8) = v39;
    v23 = v35;
    swift_release_n(v4);
    *(_WORD *)(v30 + 32) = 2048;
    swift_release(v4);
    v229 = 50;
    a1 = v220;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &v230);
    swift_release(v4);
    _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v221, "%{public}s: Start execution {templateObjectID: %{public}@, targetListObjectID: %{public}@, limitPerSave: %ld}", (uint8_t *)v30, 0x2Au);
    v41 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(*(_QWORD *)&v38, 2, v41);
    swift_slowDealloc(*(_QWORD *)&v38, -1, -1);
    v42 = v209;
    swift_arrayDestroy(*(_QWORD *)&v209, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(*(_QWORD *)&v42, -1, -1);
    swift_slowDealloc(v30, -1, -1);

  }
  else
  {

    v43 = swift_release_n(v4);
  }
  v44 = v23;
  Date.init()(v43);
  v45 = objc_autoreleasePoolPush();
  v46 = v4[3];
  sub_1003692F8();
  v48 = v47;
  v49 = objc_msgSend(v46, "uuid");
  v50 = v222;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v49);

  sub_100369478((uint64_t)v50, (uint64_t)a1, v48);
  if (v3)
  {
    (*(void (**)(NSObject *, uint64_t))(*(_QWORD *)&v223 + 8))(v50, v224);
    swift_bridgeObjectRelease();
    v56 = v226;
    objc_autoreleasePoolPop(v45);
    (*(void (**)(uint64_t *, uint64_t))(v225 + 8))(v44, v56);

    return;
  }
  v52 = a1;
  v53 = v51;
  v210 = v46;
  v220 = v52;
  (*(void (**)(NSObject *, uint64_t))(*(_QWORD *)&v223 + 8))(v50, v224);
  v54 = COERCE_DOUBLE(objc_msgSend(v53, "objectID", swift_bridgeObjectRelease().n128_f64[0]));
  v55 = v219;
  sub_10057B4DC(v219);
  v209 = v54;
  v224 = 0;

  v57 = (_OWORD *)((char *)v55 + v216[10]);
  v58 = v57[1];
  v232[0] = *v57;
  v232[1] = v58;
  v59 = v57[3];
  v233[0] = v57[2];
  v233[1] = v59;
  sub_10031567C((uint64_t *)v232);
  sub_10001C744((uint64_t)v55, type metadata accessor for RDPublicTemplate);
  objc_autoreleasePoolPop(v45);
  v60 = v225;
  v61 = v226;
  v62 = v217;
  v63 = v44;
  v219 = *(uint64_t **)(v225 + 16);
  ((void (*)(_BYTE *, uint64_t *, uint64_t))v219)(v217, v44, v226);
  swift_retain();
  sub_10031567C((uint64_t *)v232);
  swift_retain();
  v64 = sub_10031567C((uint64_t *)v232);
  v65 = Logger.logObject.getter(v64);
  v66 = static os_log_type_t.default.getter(v65);
  v67 = os_log_type_enabled(v65, (os_log_type_t)v66);
  v215 = v44;
  if (v67)
  {
    v68 = swift_slowAlloc(42, -1);
    v69 = v4;
    v70 = (int *)swift_slowAlloc(8, -1);
    v216 = v70;
    v223 = COERCE_DOUBLE(swift_slowAlloc(32, -1));
    v231 = v223;
    *(_DWORD *)v68 = 136446978;
    v222 = v65;
    v229 = (uint64_t)v227;
    v71 = swift_getMetatypeMetadata(v227);
    v221 = v69;
    v72 = String.init<A>(describing:)(&v229, v71);
    v229 = sub_10001A820(v72, v73, (uint64_t *)&v231);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &v230);
    swift_bridgeObjectRelease();
    *(_WORD *)(v68 + 12) = 2114;
    v74 = v62;
    v75 = v210;
    v229 = (uint64_t)v210;
    v76 = v210;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &v230);
    *(_QWORD *)v70 = v75;
    swift_release_n(v221);
    *(_WORD *)(v68 + 22) = 2048;
    v77 = *(_QWORD *)(*(_QWORD *)&v232[0] + 16);
    sub_100315704((uint64_t *)v232);
    v229 = v77;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &v230);
    v78 = sub_100315704((uint64_t *)v232);
    *(_WORD *)(v68 + 32) = 2048;
    v79 = v214;
    Date.init()(v78);
    v80 = Date.timeIntervalSince(_:)(v74);
    v81 = *(_BYTE **)(v225 + 8);
    v4 = v221;
    ((void (*)(_BYTE *, uint64_t))v81)(v79, v61);
    v229 = *(_QWORD *)&v80;
    v82 = v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &v230);
    ((void (*)(_BYTE *, uint64_t))v81)(v74, v61);
    v83 = v222;
    _os_log_impl((void *)&_mh_execute_header, v222, (os_log_type_t)v66, "%{public}s: Fetched saved reminders in public template {templateObjectID: %{public}@, topLevelRemindersCount: %ld, elapsedSeconds: %f}", (uint8_t *)v68, 0x2Au);
    v84 = sub_10001A630((uint64_t *)&unk_100839E70);
    v85 = v216;
    swift_arrayDestroy(v216, 1, v84);
    swift_slowDealloc(v85, -1, -1);
    v86 = v223;
    swift_arrayDestroy(*(_QWORD *)&v223, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(*(_QWORD *)&v86, -1, -1);
    v87 = v68;
    v63 = v215;
    swift_slowDealloc(v87, -1, -1);

  }
  else
  {
    sub_100315704((uint64_t *)v232);
    swift_release_n(v4);
    sub_100315704((uint64_t *)v232);
    v82 = *(_BYTE **)(v60 + 8);
    ((void (*)(_BYTE *, uint64_t))v82)(v62, v61);

  }
  v89 = *((_QWORD **)v4 + 4);
  v88 = v4[5];
  v229 = 0;
  v90 = objc_msgSend(v88, "fetchListWithObjectID:error:", v89, &v229);
  v91 = (id)v229;
  if (!v90)
  {
    v102 = (id)v229;
    sub_100315704((uint64_t *)v232);
    _convertNSErrorToError(_:)(v91);

    swift_willThrow(v103);
    ((void (*)(uint64_t *, uint64_t))v82)(v63, v226);

    return;
  }
  v92 = v90;
  v208 = *(double *)&v89;
  v93 = objc_allocWithZone((Class)REMSaveRequest);
  v94 = v91;
  v95 = COERCE_DOUBLE(objc_msgSend(v93, "initWithStore:", v88));
  v96 = (double *)sub_1002B01C8((uint64_t)_swiftEmptyArrayStorage);
  v229 = (uint64_t)v96;
  v216 = (int *)objc_msgSend(*(id *)&v95, "updateList:", v92);
  v97 = objc_msgSend(v216, "sectionsContextChangeItem");
  if (v97)
  {
    v98 = v97;
    sub_1000A5CA8((uint64_t)v233, (uint64_t)&v235, (uint64_t *)&qword_100845298);
    sub_1000A5CA8((uint64_t)&v235, (uint64_t)&v236, (uint64_t *)&qword_100845298);
    v99 = v236;
    if (v236
      && (sub_1000A5CA8((uint64_t)v233 + 8, (uint64_t)&v234, (uint64_t *)&qword_1008452A0),
          sub_1000A5CA8((uint64_t)&v234, (uint64_t)&v237, (uint64_t *)&qword_1008452A0),
          (v100 = v237) != 0))
    {
      sub_1000F4348(&v235);
      sub_1000F4348(&v234);
      v101 = (double *)sub_100315BDC(v99, v100, *(void **)&v95, v98);

      sub_1000F4320(&v235);
      sub_1000F4320(&v234);
      swift_bridgeObjectRelease();
      v229 = (uint64_t)v101;
      v96 = v101;
    }
    else
    {

    }
  }
  v104 = v96[2];
  v217 = v82;
  v223 = v95;
  if (v104 == 0.0 || *(_QWORD *)(*(_QWORD *)&v232[0] + 16))
  {
    LODWORD(v221) = 1;
    goto LABEL_21;
  }
  v231 = 0.0;
  v153 = objc_msgSend(*(id *)&v95, "saveSynchronouslyWithError:", &v231);
  v154 = v231;
  if (v153)
  {
    v155 = v226;
    ((void (*)(os_log_t, uint64_t *, uint64_t))v219)(v212, v63, v226);
    swift_retain_n(v4);
    v156 = Logger.logObject.getter(*(id *)&v154);
    v157 = static os_log_type_t.default.getter(v156);
    v158 = v157;
    if (os_log_type_enabled(v156, v157))
    {
      v159 = swift_slowAlloc(42, -1);
      v160 = (double *)swift_slowAlloc(16, -1);
      *(_DWORD *)v159 = 134349826;
      v231 = v104;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, v232);
      *(_WORD *)(v159 + 12) = 2114;
      LODWORD(v221) = v158;
      v161 = v92;
      v162 = v210;
      v231 = *(double *)&v210;
      v163 = v210;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, v232);
      *(_QWORD *)v160 = v162;
      v92 = v161;
      swift_release_n(v4);
      *(_WORD *)(v159 + 22) = 2114;
      v164 = v208;
      v231 = v208;
      v165 = *(id *)&v208;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, v232);
      v160[1] = v164;
      v166 = swift_release_n(v4);
      *(_WORD *)(v159 + 32) = 2048;
      v167 = v214;
      Date.init()(v166);
      v168 = v212;
      v169 = Date.timeIntervalSince(_:)(v212);
      v170 = v167;
      v171 = v226;
      ((void (*)(_BYTE *, uint64_t))v217)(v170, v226);
      v231 = v169;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, v232);
      ((void (*)(os_log_t, uint64_t))v217)(v168, v171);
      _os_log_impl((void *)&_mh_execute_header, v156, (os_log_type_t)v221, "RDTemplateOperationCopyRemindersFromPublicTemplateToREMList: Copied %{public}ld sections to target list {templateObjectID: %{public}@, targetListObjectID: %{public}@, elapsedSeconds: %f}", (uint8_t *)v159, 0x2Au);
      v172 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v160, 2, v172);
      swift_slowDealloc(v160, -1, -1);
      swift_slowDealloc(v159, -1, -1);
    }
    else
    {
      swift_release_n(v4);
      ((void (*)(os_log_t, uint64_t))v82)(v212, v155);
    }

    LODWORD(v221) = 0;
LABEL_21:
    v105 = (uint64_t)v4;
    v231 = *(double *)v232;
    v106 = sub_10001A630(&qword_10083DA88);
    v107 = sub_100315788();
    v108 = BidirectionalCollection<>.slices(by:)(50, v106, v107);
    v231 = 0.0;
    isa = v108[2].isa;
    v222 = v92;
    v212 = v108;
    if (isa)
    {
      v110 = 0;
      v111 = v108 + 7;
      while (1)
      {
        v113 = (uint64_t)v111[-1].isa;
        v112 = (unint64_t)v111->isa;
        v114 = (uint64_t)v111[-3].isa;
        v115 = (char *)v111[-2].isa;
        swift_unknownObjectRetain(v114);
        v116 = objc_autoreleasePoolPush();
        v204 = v112;
        v117 = v222;
        v118 = v224;
        sub_100313C64((char)v221, v110, *(void **)&v223, v105, (uint64_t)v222, v114, v115, v113, v204, (uint64_t *)v232, &v231, &v229, v215, v227);
        if (v118)
          break;
        v224 = 0;
        ++v110;
        objc_autoreleasePoolPop(v116);
        swift_unknownObjectRelease(v114);
        v111 += 4;
        if (isa == (Class)v110)
          goto LABEL_25;
      }
      objc_autoreleasePoolPop(v116);
      swift_bridgeObjectRelease();
      sub_100315704((uint64_t *)v232);

      swift_unknownObjectRelease(v114);
      ((void (*)(uint64_t *, uint64_t))v217)(v215, v226);
      goto LABEL_42;
    }
LABEL_25:
    swift_bridgeObjectRelease();
    sub_100315704((uint64_t *)v232);
    v119 = v226;
    v120 = v105;
    if (v209 == 0.0)
      goto LABEL_39;
    v230 = 0;
    v121 = *(id *)&v209;
    v122 = v220;
    v123 = objc_msgSend(v220, "existingObjectWithID:error:", v121, &v230);
    v124 = v230;
    if (v123)
    {
      v125 = v123;
      v126 = v230;
      objc_msgSend(v122, "deleteObject:", v125);
      v230 = 0;
      v127 = objc_msgSend(v122, "save:", &v230);
      v128 = v230;
      if (v127)
      {
        v129 = v230;
        objc_msgSend(v122, "reset");
        v130 = v211;
        ((void (*)(_BYTE *, uint64_t *, uint64_t))v219)(v211, v215, v119);
        v131 = swift_retain_n(v120);
        v132 = Logger.logObject.getter(v131);
        v133 = static os_log_type_t.default.getter(v132);
        v134 = (void **)v120;
        v135 = v133;
        if (os_log_type_enabled(v132, v133))
        {
          v136 = swift_slowAlloc(32, -1);
          v137 = (_QWORD *)swift_slowAlloc(8, -1);
          v207 = v137;
          v220 = (id)swift_slowAlloc(32, -1);
          v230 = (void **)v220;
          *(_DWORD *)v136 = 136446722;
          v221 = v134;
          v138 = sub_1000D92EC((uint64_t)v227);
          v212 = v132;
          v228 = sub_10001A820(v138, v139, (uint64_t *)&v230);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v228, &v229);
          swift_bridgeObjectRelease();
          *(_WORD *)(v136 + 12) = 2114;
          v206 = v135;
          v140 = v210;
          v228 = (uint64_t)v210;
          v141 = v210;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v228, &v229);
          *v137 = v140;
          v142 = v221;
          v143 = swift_release_n(v221);
          *(_WORD *)(v136 + 22) = 2048;
          v144 = v214;
          Date.init()(v143);
          v145 = v211;
          v146 = Date.timeIntervalSince(_:)(v211);
          v147 = v144;
          v148 = (void (*)(_QWORD, _QWORD))v217;
          ((void (*)(_BYTE *, uint64_t))v217)(v147, v119);
          v228 = *(_QWORD *)&v146;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v228, &v229);
          v148(v145, v119);
          v149 = v212;
          _os_log_impl((void *)&_mh_execute_header, v212, (os_log_type_t)v206, "%{public}s: Deleted REMCDPublicTemplate in Core Data store {templateObjectID: %{public}@, elapsedSeconds: %f}", (uint8_t *)v136, 0x20u);
          v150 = sub_10001A630((uint64_t *)&unk_100839E70);
          v151 = v207;
          swift_arrayDestroy(v207, 1, v150);
          swift_slowDealloc(v151, -1, -1);
          v152 = v220;
          swift_arrayDestroy(v220, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v152, -1, -1);
          swift_slowDealloc(v136, -1, -1);

          v120 = (uint64_t)v142;
        }
        else
        {
          swift_release_n(v120);
          ((void (*)(_BYTE *, uint64_t))v217)(v130, v119);

        }
LABEL_39:
        v179 = v213;
        v180 = v215;
        ((void (*)(_BYTE *, uint64_t *, uint64_t))v219)(v213, v215, v119);
        v181 = swift_retain_n(v120);
        v182 = Logger.logObject.getter(v181);
        v183 = static os_log_type_t.default.getter(v182);
        v184 = v183;
        if (os_log_type_enabled(v182, v183))
        {
          v185 = swift_slowAlloc(52, -1);
          v186 = (double *)swift_slowAlloc(16, -1);
          v221 = (void **)swift_slowAlloc(32, -1);
          v230 = v221;
          *(_DWORD *)v185 = 136447234;
          LODWORD(v220) = v184;
          v187 = sub_1000D92EC((uint64_t)v227);
          v228 = sub_10001A820(v187, v188, (uint64_t *)&v230);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v228, &v229);
          swift_bridgeObjectRelease();
          *(_WORD *)(v185 + 12) = 2114;
          v189 = v210;
          v228 = (uint64_t)v210;
          v190 = v210;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v228, &v229);
          *(_QWORD *)v186 = v189;
          swift_release_n(v120);
          *(_WORD *)(v185 + 22) = 2114;
          v191 = v226;
          v192 = v208;
          v228 = *(_QWORD *)&v208;
          v193 = *(id *)&v208;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v228, &v229);
          v186[1] = v192;
          swift_release_n(v120);
          *(_WORD *)(v185 + 32) = 2048;
          swift_release(v120);
          v228 = 50;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v228, &v229);
          v194 = swift_release(v120);
          *(_WORD *)(v185 + 42) = 2048;
          v195 = v214;
          Date.init()(v194);
          v196 = v213;
          v197 = Date.timeIntervalSince(_:)(v213);
          v198 = v195;
          v199 = (void (*)(_QWORD, _QWORD))v217;
          ((void (*)(_BYTE *, uint64_t))v217)(v198, v191);
          v228 = *(_QWORD *)&v197;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v228, &v229);
          v199(v196, v191);
          _os_log_impl((void *)&_mh_execute_header, v182, (os_log_type_t)v220, "%{public}s: Finished execution {templateObjectID: %{public}@, targetListObjectID: %{public}@, limitPerSave: %ld, elapsedSeconds: %f}", (uint8_t *)v185, 0x34u);
          v200 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v186, 2, v200);
          swift_slowDealloc(v186, -1, -1);
          v201 = v221;
          swift_arrayDestroy(v221, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v201, -1, -1);
          v202 = v215;
          swift_slowDealloc(v185, -1, -1);

          (*(void (**)(uint64_t *, uint64_t))(v225 + 8))(v202, v191);
        }
        else
        {
          swift_release_n(v120);
          v203 = (void (*)(_QWORD, _QWORD))v217;
          ((void (*)(_BYTE *, uint64_t))v217)(v179, v119);

          v203(v180, v119);
        }
        goto LABEL_42;
      }
      v175 = v230;
      _convertNSErrorToError(_:)(v128);

      swift_willThrow(v176);
    }
    else
    {
      v173 = v230;
      _convertNSErrorToError(_:)(v124);

      swift_willThrow(v174);
    }

    ((void (*)(uint64_t *, uint64_t))v217)(v215, v119);
    swift_bridgeObjectRelease();
    return;
  }
  v177 = *(id *)&v231;
  sub_100315704((uint64_t *)v232);
  _convertNSErrorToError(_:)(*(_QWORD *)&v154);

  swift_willThrow(v178);
  ((void (*)(uint64_t *, uint64_t))v82)(v63, v226);
LABEL_42:

  swift_bridgeObjectRelease();
}

void sub_100313C64(char a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, unint64_t a9, uint64_t *a10, double *a11, uint64_t *a12, uint64_t *a13, _QWORD *a14)
{
  uint64_t v14;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (**v38)(uint64_t, uint64_t *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  char *v51;
  uint64_t v52;
  __n128 v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  NSString v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  id v73;
  id v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  char v78;
  char v79;
  __n128 v80;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v82;
  void (*v83)(unint64_t, uint64_t);
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  __n128 v87;
  void (*v88)(unint64_t, uint64_t);
  uint64_t v89;
  _QWORD *v90;
  char v91;
  uint64_t v92;
  __n128 v93;
  void *v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  uint64_t v98;
  _QWORD *v99;
  id v100;
  unint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  NSString v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  uint64_t v112;
  double v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  NSURL *v122;
  void *v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  double v128;
  id v129;
  unsigned int v130;
  _QWORD *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t *v138;
  NSObject *v139;
  os_log_type_t v140;
  int v141;
  uint64_t v142;
  uint64_t MetatypeMetadata;
  uint64_t v144;
  unint64_t v145;
  double *v146;
  double v147;
  void *v148;
  id v149;
  double *v150;
  void *v151;
  id v152;
  uint64_t v153;
  char *v154;
  char *v155;
  double v156;
  void (*v157)(uint64_t, uint64_t *, uint64_t);
  uint64_t v158;
  os_log_t v159;
  uint64_t v160;
  void (*v161)(_QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  void (*v165)(uint64_t, uint64_t);
  void *v166;
  uint64_t v167;
  uint64_t ObjCClassFromMetadata;
  NSString v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  void (**v181)(uint64_t, uint64_t *, uint64_t);
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  id v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t *v192;
  id v193;
  char *v194;
  id v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  id v201;
  uint64_t v202;
  void *v203;
  double *v204;
  uint64_t v205;
  id v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  _QWORD *v213;
  id v214;
  uint64_t *v215;
  void *v216;
  void (*v217)(uint64_t, uint64_t, __n128);
  unint64_t v218;
  void (**v219)(uint64_t, uint64_t *, uint64_t);
  char *v220;
  uint64_t v221;
  void (*v222)(uint64_t, char *, uint64_t);
  unsigned int (*v223)(char *, uint64_t, uint64_t);
  NSObject *v224;
  _QWORD *v225;
  uint64_t v226;
  void (*v227)(char *, _QWORD, uint64_t, uint64_t);
  double v228;
  _QWORD *v229;
  char v230[8];
  void (*v231)(_QWORD, _QWORD, _QWORD, _QWORD);
  char v232[8];
  char v233[8];
  char v234[8];
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;

  v208 = a7;
  v200 = a6;
  v186 = a4;
  v204 = a11;
  v215 = a10;
  v179 = type metadata accessor for URL(0);
  v178 = *(_QWORD *)(v179 - 8);
  __chkstk_darwin(v179);
  v177 = (char *)&v171 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for RDSavedURLAttachment(0);
  v176 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v175 = (char *)&v171 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v210 = type metadata accessor for RDSavedReminder(0);
  v199 = *(_QWORD *)(v210 - 8);
  __chkstk_darwin(v210);
  v185 = (uint64_t)&v171 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v197 = (uint64_t)&v171 - v25;
  __chkstk_darwin(v26);
  v198 = (uint64_t)&v171 - v27;
  __chkstk_darwin(v28);
  v211 = (uint64_t)&v171 - v29;
  v30 = type metadata accessor for UUID(0);
  v189 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v212 = (char *)&v171 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v184 = (char *)&v171 - v33;
  __chkstk_darwin(v34);
  v207 = (uint64_t)&v171 - v35;
  __chkstk_darwin(v36);
  v226 = (uint64_t)&v171 - v37;
  v182 = type metadata accessor for Date(0);
  v38 = *(void (***)(uint64_t, uint64_t *, uint64_t))(v182 - 8);
  __chkstk_darwin(v182);
  v180 = (char *)&v171 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v190 = (char *)&v171 - v41;
  v42 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v42);
  v181 = (void (**)(uint64_t, uint64_t *, uint64_t))((char *)&v171 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v44);
  v183 = (char *)&v171 - v45;
  __chkstk_darwin(v46);
  v194 = (char *)&v171 - v47;
  __chkstk_darwin(v48);
  v220 = (char *)&v171 - v49;
  if ((a1 & 1) == 0 || a2)
    v50 = objc_msgSend(objc_allocWithZone((Class)REMSaveRequest), "initWithStore:", *(_QWORD *)(v186 + 40));
  else
    v50 = a3;
  v214 = v50;
  v201 = objc_msgSend(v50, "updateList:", a5);
  v191 = (char *)objc_msgSend(v201, "sectionsContextChangeItem");
  v213 = (_QWORD *)sub_1002B01C8((uint64_t)_swiftEmptyArrayStorage);
  v51 = v208;
  v52 = v189;
  v219 = v38;
  if (a9 >> 1 != a8)
  {
    v218 = a9 >> 1;
    swift_unknownObjectRetain(v200);
    v53 = swift_beginAccess(v204, v232, 1, 0);
    v56 = v218;
    v55 = v215;
    v192 = v215 + 3;
    v57 = v14;
    v54 = (unint64_t)v201;
    while (1)
    {
      if (a8 >= v56)
      {
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
        goto LABEL_77;
      }
      v221 = *(_QWORD *)(v52 + 72);
      v58 = v220;
      v224 = *(NSObject **)(v52 + 16);
      ((void (*)(char *, char *, uint64_t, __n128))v224)(v220, &v51[v221 * a8], v30, v53);
      v227 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56);
      v227(v58, 0, 1, v30);
      v223 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
      if (v223(v58, 1, v30) == 1)
      {
        v38 = v219;
        goto LABEL_58;
      }
      v59 = v226;
      v222 = *(void (**)(uint64_t, char *, uint64_t))(v52 + 32);
      v222(v226, v58, v30);
      if (!*(_QWORD *)(v55[2] + 16) || (v225 = (_QWORD *)v55[2], v60 = sub_1002C65F8(v59), (v61 & 1) == 0))
      {
        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v59, v30);
        v38 = v219;
        goto LABEL_10;
      }
      v62 = v225[7];
      v196 = *(_QWORD *)(v199 + 72);
      v63 = v198;
      sub_1000151E8(v62 + v196 * v60, v198, type metadata accessor for RDSavedReminder);
      v64 = v211;
      sub_1000D6E1C(v63, v211);
      v195 = (id)objc_opt_self(REMReminder);
      v65 = objc_msgSend(v195, "newObjectID");
      v66 = String._bridgeToObjectiveC()();
      v67 = objc_msgSend(v214, "addReminderWithTitle:toListChangeItem:reminderObjectID:", v66, v54, v65);

      sub_10048DAE0(v64, v67);
      if (v57)
      {

        sub_10001C744(v211, type metadata accessor for RDSavedReminder);
        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v226, v30);
LABEL_72:
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease(v200);
        return;
      }
      v216 = v67;

      sub_1000A5CA8((uint64_t)v192, (uint64_t)v234, &qword_1008452B0);
      sub_1000A5CA8((uint64_t)v234, (uint64_t)&v236, &qword_1008452B0);
      v68 = v236;
      if (v236)
      {
        v51 = v212;
        v69 = v207;
        if (*(_QWORD *)(v236 + 16))
        {
          v70 = sub_1002C65F8(v226);
          if ((v71 & 1) != 0)
          {
            swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v68 + 56) + 8 * v70));
            sub_100316174(v72, v216);
            swift_bridgeObjectRelease();
          }
        }
      }
      else
      {
        v51 = v212;
        v69 = v207;
      }
      ((void (*)(uint64_t, uint64_t, uint64_t))v224)(v69, v226, v30);
      v73 = objc_msgSend(v216, "objectID");
      v74 = objc_msgSend(v73, "uuid");

      v75 = (uint64_t)v194;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v74);

      v227((char *)v75, 0, 1, v30);
      if (v223((char *)v75, 1, v30) == 1)
      {
        sub_10000882C(v75, (uint64_t *)&unk_100839C80);
        v76 = v213;
        swift_bridgeObjectRetain(v213);
        v77 = sub_1002C65F8(v69);
        v79 = v78;
        v80 = swift_bridgeObjectRelease();
        if ((v79 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v76);
          v229 = v76;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_1002D712C();
            v76 = v229;
          }
          v82 = v77 * v221;
          v83 = *(void (**)(unint64_t, uint64_t))(v52 + 8);
          v83(v76[6] + v77 * v221, v30);
          v84 = v229;
          v85 = v229[7] + v82;
          v86 = (uint64_t)v183;
          v222((uint64_t)v183, (char *)v85, v30);
          v213 = v84;
          sub_10028A1C4(v77, (uint64_t)v84);
          v87 = swift_bridgeObjectRelease();
          ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))v227)(v86, 0, 1, v30, v87);
          v88 = v83;
          v54 = (unint64_t)v201;
        }
        else
        {
          v86 = (uint64_t)v183;
          ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v227)(v183, 1, 1, v30, v80);
          v88 = *(void (**)(unint64_t, uint64_t))(v52 + 8);
        }
        v217 = (void (*)(uint64_t, uint64_t, __n128))v88;
        v88(v69, v30);
        sub_10000882C(v86, (uint64_t *)&unk_100839C80);
        v55 = v215;
        v51 = v212;
      }
      else
      {
        v89 = (uint64_t)v184;
        v222((uint64_t)v184, (char *)v75, v30);
        v90 = v213;
        v91 = swift_isUniquelyReferenced_nonNull_native(v213);
        v229 = v90;
        v92 = v207;
        sub_10028C430(v89, v207, v91);
        v213 = v229;
        v93 = swift_bridgeObjectRelease();
        v217 = *(void (**)(uint64_t, uint64_t, __n128))(v52 + 8);
        v217(v92, v30, v93);
        v55 = v215;
      }
      v94 = v216;
      objc_msgSend((id)v54, "insertReminderChangeItem:afterReminderChangeItem:", v216, 0);
      v95 = v55[1];
      if (*(_QWORD *)(v95 + 16))
      {
        v96 = sub_1002C65F8(v226);
        if ((v97 & 1) != 0)
        {
          v98 = *(_QWORD *)(*(_QWORD *)(v95 + 56) + 8 * v96);
          v193 = objc_msgSend(v94, "subtaskContext", swift_bridgeObjectRetain(v98).n128_f64[0]);
          if (v193)
          {
            v203 = *(void **)(v98 + 16);
            v209 = v98;
            if (v203)
            {
              v54 = 0;
              v202 = v98 + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80));
              v38 = v181;
              v99 = v225;
              while (1)
              {
                if (v54 >= *(_QWORD *)(v209 + 16))
                  goto LABEL_75;
                ((void (*)(_QWORD, unint64_t, uint64_t))v224)(v38, v202 + v54 * v221, v30);
                v227((char *)v38, 0, 1, v30);
                if (v223((char *)v38, 1, v30) == 1)
                  goto LABEL_40;
                v222((uint64_t)v51, (char *)v38, v30);
                if (v99[2])
                {
                  v101 = sub_1002C65F8((uint64_t)v51);
                  if ((v102 & 1) != 0)
                  {
                    v103 = v185;
                    sub_1000151E8(v99[7] + v101 * v196, v185, type metadata accessor for RDSavedReminder);
                    v188 = v57;
                    v104 = v197;
                    sub_1000D6E1C(v103, v197);
                    v105 = objc_msgSend(v195, "newObjectID");
                    v106 = String._bridgeToObjectiveC()();
                    v107 = objc_msgSend(v214, "addReminderWithTitle:toReminderSubtaskContextChangeItem:reminderObjectID:", v106, v193, v105);

                    v187 = v107;
                    v108 = v188;
                    sub_10048DAE0(v104, v107);
                    v57 = v108;
                    if (v108)
                    {

                      sub_10001C744(v197, type metadata accessor for RDSavedReminder);
                      v164 = (uint64_t)v212;
LABEL_71:
                      v165 = (void (*)(uint64_t, uint64_t))v217;
                      ((void (*)(uint64_t, uint64_t))v217)(v164, v30);
                      swift_bridgeObjectRelease();
                      sub_10001C744(v211, type metadata accessor for RDSavedReminder);
                      v165(v226, v30);
                      goto LABEL_72;
                    }

                    sub_1000A5CA8((uint64_t)v234, (uint64_t)&v235, &qword_1008452B0);
                    v109 = v235;
                    v55 = v215;
                    v51 = v212;
                    if (v235)
                    {
                      if (*(_QWORD *)(v235 + 16))
                      {
                        v110 = sub_1002C65F8((uint64_t)v212);
                        if ((v111 & 1) != 0)
                        {
                          v112 = *(_QWORD *)(*(_QWORD *)(v109 + 56) + 8 * v110);
                          *(_QWORD *)&v113 = swift_bridgeObjectRetain(v112).n128_u64[0];
                          v114 = objc_msgSend(v187, "attachmentContext", v113);
                          if (!v114)
                          {
                            v166 = (void *)objc_opt_self(REMError);
                            v167 = sub_1000151B0(0, &qword_1008452B8, REMReminderChangeItem_ptr);
                            ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v167);
                            v169 = String._bridgeToObjectiveC()();
                            objc_msgSend(v166, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v169);

                            swift_willThrow(v170);
                            swift_bridgeObjectRelease();

                            sub_10001C744(v197, type metadata accessor for RDSavedReminder);
                            v164 = (uint64_t)v51;
                            goto LABEL_71;
                          }
                          v206 = v114;
                          v115 = *(_QWORD *)(v112 + 16);
                          if (v115)
                          {
                            v173 = a8;
                            v174 = v30;
                            v188 = 0;
                            v116 = v176;
                            v117 = v112
                                 + ((*(unsigned __int8 *)(v176 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v176 + 80));
                            v172 = v112;
                            swift_bridgeObjectRetain(v112);
                            v205 = *(_QWORD *)(v116 + 72);
                            v118 = v179;
                            v119 = v178;
                            v120 = v177;
                            v121 = (uint64_t)v175;
                            do
                            {
                              sub_1000151E8(v117, v121, type metadata accessor for RDSavedURLAttachment);
                              (*(void (**)(char *, uint64_t, uint64_t))(v119 + 16))(v120, v121, v118);
                              sub_10001C744(v121, type metadata accessor for RDSavedURLAttachment);
                              URL._bridgeToObjectiveC()(v122);
                              v124 = v123;
                              (*(void (**)(char *, uint64_t))(v119 + 8))(v120, v118);

                              v117 += v205;
                              --v115;
                            }
                            while (v115);

                            swift_bridgeObjectRelease_n(v172, 2);
                            v57 = v188;
                            v55 = v215;
                            v51 = v212;
                            v52 = v189;
                            v30 = v174;
                            v38 = v181;
                            a8 = v173;
                          }
                          else
                          {
                            swift_bridgeObjectRelease();

                            v51 = v212;
                          }
                        }
                      }
                    }
                    v100 = v187;
                    objc_msgSend(v193, "insertReminderChangeItem:afterReminderChangeItem:", v187, 0);

                    sub_10001C744(v197, type metadata accessor for RDSavedReminder);
                    v99 = v225;
                  }
                }
                ++v54;
                ((void (*)(char *, uint64_t))v217)(v51, v30);
                if ((void *)v54 == v203)
                  goto LABEL_39;
              }
            }
            v38 = v181;
LABEL_39:
            v227((char *)v38, 1, 1, v30);
LABEL_40:

            swift_bridgeObjectRelease();
            v54 = (unint64_t)v201;
            goto LABEL_36;
          }
          swift_bridgeObjectRelease();
        }
      }

LABEL_36:
      v38 = v219;
      v51 = v208;
      sub_10001C744(v211, type metadata accessor for RDSavedReminder);
      ((void (*)(uint64_t, uint64_t))v217)(v226, v30);
      if (__OFADD__(*(_QWORD *)v204, 1))
        goto LABEL_76;
      ++*(_QWORD *)v204;
LABEL_10:
      ++a8;
      v56 = v218;
      if (a8 == v218)
        goto LABEL_7;
    }
  }
  v227 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v189 + 56);
  v53 = swift_unknownObjectRetain(v200);
  v54 = (unint64_t)v201;
  v55 = v215;
LABEL_7:
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v227)(v220, 1, 1, v30, v53);
LABEL_58:
  swift_unknownObjectRelease(v200);
  sub_1000A5CA8((uint64_t)(v55 + 6), (uint64_t)v233, &qword_1008452A8);
  sub_1000A5CA8((uint64_t)v233, (uint64_t)&v237, &qword_1008452A8);
  v125 = v237;
  v30 = (uint64_t)v190;
  v51 = v191;
  v126 = (uint64_t)v213;
  if (v237)
  {
    v127 = *a12;
    if (*(_QWORD *)(*a12 + 16))
    {
      if (v213[2])
      {
        swift_bridgeObjectRetain(*a12);
        sub_10031639C(v125, v127, v126, v51);
        swift_bridgeObjectRelease();
      }
    }
  }
  *(_QWORD *)&v128 = swift_bridgeObjectRelease().n128_u64[0];
  v229 = 0;
  v129 = v214;
  v130 = objc_msgSend(v214, "saveSynchronouslyWithError:", &v229, v128);
  v131 = v229;
  if (v130)
  {
    v55 = a13;
    v132 = qword_100837180;
    v133 = v229;
    if (v132 != -1)
LABEL_77:
      swift_once(&qword_100837180, sub_10031256C);
    v134 = type metadata accessor for Logger(0);
    sub_10001AAA8(v134, (uint64_t)qword_1008451C0);
    v135 = v182;
    v38[2](v30, v55, v182);
    v136 = v186;
    swift_retain_n(v186);
    v137 = v215;
    sub_10031567C(v215);
    swift_retain();
    v138 = sub_10031567C(v137);
    v139 = Logger.logObject.getter(v138);
    v140 = static os_log_type_t.default.getter(v139);
    v141 = v140;
    if (os_log_type_enabled(v139, v140))
    {
      LODWORD(v226) = v141;
      v142 = swift_slowAlloc(62, -1);
      v225 = (_QWORD *)swift_slowAlloc(16, -1);
      v227 = (void (*)(char *, _QWORD, uint64_t, uint64_t))swift_slowAlloc(32, -1);
      v231 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v227;
      *(_DWORD *)v142 = 136447490;
      v229 = a14;
      MetatypeMetadata = swift_getMetatypeMetadata(a14);
      v144 = String.init<A>(describing:)(&v229, MetatypeMetadata);
      v229 = (_QWORD *)sub_10001A820(v144, v145, (uint64_t *)&v231);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230);
      swift_bridgeObjectRelease();
      *(_WORD *)(v142 + 12) = 2048;
      v146 = v204;
      swift_beginAccess(v204, &v229, 0, 0);
      v228 = *v146;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v228, &v229);
      *(_WORD *)(v142 + 22) = 2048;
      v147 = *(double *)(*v137 + 16);
      sub_100315704(v137);
      v228 = v147;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v228, &v229);
      sub_100315704(v137);
      v224 = v139;
      *(_WORD *)(v142 + 32) = 2114;
      v148 = *(void **)(v136 + 24);
      v228 = *(double *)&v148;
      v149 = v148;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v228, &v229);
      v150 = (double *)v225;
      *(double *)v225 = *(double *)&v148;
      swift_release_n(v136);
      *(_WORD *)(v142 + 42) = 2114;
      v151 = *(void **)(v136 + 32);
      v228 = *(double *)&v151;
      v152 = v151;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v228, &v229);
      v150[1] = *(double *)&v151;
      v153 = swift_release_n(v136);
      *(_WORD *)(v142 + 52) = 2048;
      v154 = v180;
      Date.init()(v153);
      v155 = v190;
      v156 = Date.timeIntervalSince(_:)(v190);
      v157 = v219[1];
      v158 = v182;
      ((void (*)(char *, uint64_t))v157)(v154, v182);
      v228 = v156;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v228, &v229);
      ((void (*)(char *, uint64_t))v157)(v155, v158);
      v159 = v224;
      _os_log_impl((void *)&_mh_execute_header, v224, (os_log_type_t)v226, "%{public}s: Copied %ld out of %ld top-level reminders to target list {templateObjectID: %{public}@, targetListObjectID: %{public}@, elapsedSeconds: %f}", (uint8_t *)v142, 0x3Eu);
      v160 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v150, 2, v160);
      swift_slowDealloc(v150, -1, -1);
      v161 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v227;
      swift_arrayDestroy(v227, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v161, -1, -1);
      swift_slowDealloc(v142, -1, -1);

      return;
    }
    sub_100315704(v137);
    sub_100315704(v137);
    swift_release_n(v136);
    ((void (*)(uint64_t, uint64_t))v219[1])(v30, v135);

  }
  else
  {
    v162 = v229;
    _convertNSErrorToError(_:)(v131);

    swift_willThrow(v163);
  }

}

