void sub_1004CF080(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t ObjCClassFromMetadata;
  NSString v13;
  id v14;
  void *v15;
  _QWORD v16[7];
  id v17;
  _QWORD v18[5];
  __int128 v19;
  uint64_t v20;

  v6 = swift_allocObject(&unk_1007F6988, 24, 7);
  *(_QWORD *)(v6 + 16) = a3;
  v7 = *(void **)(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController);
  _Block_copy(a3);
  if (objc_msgSend(v7, "supportsTemplateOperation"))
  {
    sub_100008868(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_publicCloudDatabaseController, (uint64_t)&v19, &qword_100846568);
    if (v20)
    {
      sub_10001BCA8(&v19, (uint64_t)v18);
      v8 = sub_1000184A8(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)&v19);
      __chkstk_darwin(v8);
      v16[2] = sub_100009438;
      v16[3] = v6;
      v16[4] = a1;
      v16[5] = v18;
      sub_10035288C((uint64_t)&v19, (uint64_t)sub_1004D2890, (uint64_t)v16);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v18);
      swift_release(v6);
    }
    else
    {
      sub_10000882C((uint64_t)&v19, &qword_100846568);
      v10 = (void *)objc_opt_self(REMError);
      v11 = type metadata accessor for RDXPCStorePerformer();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v11);
      v13 = String._bridgeToObjectiveC()();
      v14 = objc_msgSend(v10, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v13);

      v15 = (void *)_convertErrorToNSError(_:)(v14);
      ((void (**)(_QWORD, _QWORD, void *))a3)[2](a3, 0, v15);
      swift_release(v6);

    }
  }
  else
  {
    v9 = objc_msgSend((id)objc_opt_self(REMError), "notSupportedError");
    v17 = (id)_convertErrorToNSError(_:)(v9);
    ((void (**)(_QWORD, _QWORD, id))a3)[2](a3, 0, v17);
    swift_release(v6);

  }
}

uint64_t sub_1004CF30C(uint64_t a1, uint64_t a2)
{
  _BYTE v4[48];

  sub_1000184A8(a1 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v4);
  sub_10035288C((uint64_t)v4, (uint64_t)sub_1004C0EF4, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 16))(a2, 0);
}

void sub_1004CF554(uint64_t a1, _QWORD *a2, void *a3, void *a4, int a5, void (**a6)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  void *v23;
  NSString v24;
  id v25;
  uint64_t v26;
  id v27;

  v12 = sub_10001A630(&qword_100839A10);
  __chkstk_darwin(v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_allocObject(&unk_1007F68E8, 24, 7);
  *(_QWORD *)(v15 + 16) = a6;
  if (a2[2])
  {
    LODWORD(v27) = a5;
    v16 = a2[4];
    v17 = a2[5];
    v18 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v14, 1, 1, v18);
    v19 = swift_allocObject(&unk_1007F6910, 97, 7);
    *(_QWORD *)(v19 + 16) = 0;
    *(_QWORD *)(v19 + 24) = 0;
    *(_QWORD *)(v19 + 32) = a2;
    *(_QWORD *)(v19 + 40) = v16;
    *(_QWORD *)(v19 + 48) = v17;
    *(_QWORD *)(v19 + 56) = sub_100009434;
    *(_QWORD *)(v19 + 64) = v15;
    *(_QWORD *)(v19 + 72) = a1;
    *(_QWORD *)(v19 + 80) = a4;
    *(_QWORD *)(v19 + 88) = a3;
    *(_BYTE *)(v19 + 96) = v27 & 1;
    _Block_copy(a6);
    v20 = a3;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(a2);
    swift_retain();
    swift_bridgeObjectRetain(a1);
    v21 = a4;
    v22 = sub_1000CAAE0((uint64_t)v14, (uint64_t)&unk_10084CBC8, v19);
    swift_release(v15);
    swift_release(v22);
  }
  else
  {
    v23 = (void *)objc_opt_self(REMError);
    _Block_copy(a6);
    v24 = String._bridgeToObjectiveC()();
    v25 = objc_msgSend(v23, "invalidParameterErrorWithDescription:", v24);

    v27 = (id)_convertErrorToNSError(_:)(v25);
    ((void (**)(_QWORD, _QWORD, id))a6)[2](a6, 0, v27);
    swift_release(v15);

  }
}

void sub_1004CF778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  char v6[16];
  uint64_t v7;
  void **v8;
  void *v9;
  _BYTE v10[56];

  v9 = 0;
  sub_1000184A8(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v10);
  v7 = a1;
  v8 = &v9;
  sub_10035288C((uint64_t)v10, (uint64_t)sub_1004D2510, (uint64_t)v6);
  v5 = v9;
  (*(void (**)(uint64_t, void *, _QWORD))(a3 + 16))(a3, v9, 0);

}

uint64_t sub_1004CFA94(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v6;
  _QWORD v8[6];
  _BYTE v9[56];

  v6 = swift_allocObject(&unk_1007F6898, 24, 7);
  *(_QWORD *)(v6 + 16) = a3;
  sub_1000184A8(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v9);
  v8[2] = a2;
  v8[3] = a1;
  v8[4] = sub_1004D2F64;
  v8[5] = v6;
  _Block_copy(a3);
  sub_10035288C((uint64_t)v9, (uint64_t)sub_1004D2438, (uint64_t)v8);
  return swift_release(v6);
}

uint64_t sub_1004CFCF0(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v6;
  _BYTE v8[16];
  void (*v9)(objc_class *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[56];

  v6 = swift_allocObject(&unk_1007F6870, 24, 7);
  *(_QWORD *)(v6 + 16) = a3;
  sub_1000184A8(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v12);
  v9 = sub_1004D23FC;
  v10 = v6;
  v11 = a1;
  _Block_copy(a3);
  sub_10035288C((uint64_t)v12, (uint64_t)sub_1004D2404, (uint64_t)v8);
  return swift_release(v6);
}

void sub_1004CFFEC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1004D0050()
{
  void *v0;
  uint64_t (**v1)(_QWORD, _QWORD, __n128);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  double v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  double v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t (**v45)(_QWORD, _QWORD, __n128);
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  id v49;
  uint64_t v50;
  void *v51[14];

  sub_10001ABA4(1024, 2147483519);
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0)
      v42 = v2;
    else
      v42 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v3 = _CocoaArrayWrapper.endIndex.getter(v42);
    if (v3)
      goto LABEL_3;
LABEL_32:
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v2);
  if (!v3)
    goto LABEL_32;
LABEL_3:
  v45 = v1;
  if (v3 < 1)
  {
    __break(1u);
    _Block_release(v1);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    __break(1u);
    JUMPOUT(0x1004D05A4);
  }
  v4 = 0;
  v5 = v2 & 0xC000000000000001;
  v6 = &qword_100837000;
  v46 = v3;
  v47 = v2;
  v48 = v2 & 0xC000000000000001;
  do
  {
    if (v5)
      v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v2);
    else
      v7 = *(id *)(v2 + 8 * v4 + 32);
    v8 = v7;
    if (v6[224] != -1)
      swift_once(&qword_100837700, sub_1004BC0B4);
    v9 = type metadata accessor for Logger(0);
    sub_10001AAA8(v9, (uint64_t)qword_10084CAB8);
    v10 = v8;
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc(32, -1);
      v14 = (void *)swift_slowAlloc(96, -1);
      v51[0] = v14;
      *(_DWORD *)v13 = 136315650;
      v49 = objc_msgSend(v10, "personHandle");
      v15 = sub_10001A630(&qword_10084CB88);
      v16 = Optional.descriptionOrNil.getter(v15);
      v18 = v17;

      *(_QWORD *)(v13 + 4) = sub_10001A820(v16, v18, (uint64_t *)v51);
      *(_QWORD *)&v19 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v13 + 12) = 2080;
      v20 = objc_msgSend(v10, "aliases", v19);
      if (v20)
      {
        v21 = v20;
        v22 = sub_1000151B0(0, &qword_10084CB98, INPersonHandle_ptr);
        static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

      }
      v23 = sub_10001A630(&qword_10084CB90);
      v24 = Optional.descriptionOrNil.getter(v23);
      v26 = v25;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v13 + 14) = sub_10001A820(v24, v26, (uint64_t *)v51);

      *(_QWORD *)&v27 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v13 + 22) = 2080;
      v28 = objc_msgSend(v10, "contactIdentifier", v27);
      if (v28)
      {
        v29 = v28;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v28);

      }
      v30 = sub_10001A630((uint64_t *)&unk_10083A370);
      v31 = Optional.descriptionOrNil.getter(v30);
      v33 = v32;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v13 + 24) = sub_10001A820(v31, v33, (uint64_t *)v51);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "notifyOfInteraction: {personHandle: %s, aliases: %s, contactIdentifier: %s}", (uint8_t *)v13, 0x20u);
      swift_arrayDestroy(v14, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

      v3 = v46;
      v2 = v47;
      v6 = &qword_100837000;
    }
    else
    {

    }
    ++v4;
    v5 = v48;
  }
  while (v3 != v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(v2);
  v34 = 0;
  v1 = v45;
  do
  {
    if (v48)
      v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v2);
    else
      v36 = *(id *)(v2 + 8 * v34 + 32);
    v37 = v36;
    v51[0] = v36;
    sub_1004C42C0(v51, &v50);

    v39 = v50;
    if (v50)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v38);
      v41 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v40 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v41 >= v40 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1);
      v35 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v41, v39);
      specialized Array._endMutation()(v35);
    }
    ++v34;
  }
  while (v3 != v34);
  swift_bridgeObjectRelease();
LABEL_33:
  sub_1004BBA30((uint64_t)_swiftEmptyArrayStorage);
  v43 = swift_bridgeObjectRelease();
  return v1[2](v1, 0, v43);
}

void sub_1004D05B4()
{
  id v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;

  v0 = objc_msgSend((id)objc_opt_self(UMUserManager), "sharedManager");
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, "currentPersona");

    if (v2)
    {
      v3 = objc_msgSend(v2, "generateAndRestorePersonaContextWithPersonaUniqueString:", 0);

      if (v3)
      {
        v4 = qword_100837700;
        v5 = v3;
        if (v4 != -1)
          swift_once(&qword_100837700, sub_1004BC0B4);
        v6 = type metadata accessor for Logger(0);
        sub_10001AAA8(v6, (uint64_t)qword_10084CAB8);
        v15 = v5;
        v7 = Logger.logObject.getter(v15);
        v8 = static os_log_type_t.error.getter(v7);
        if (os_log_type_enabled(v7, v8))
        {
          v9 = (uint8_t *)swift_slowAlloc(12, -1);
          v10 = swift_slowAlloc(32, -1);
          v17 = v10;
          *(_DWORD *)v9 = 136446210;
          v16 = (uint64_t)v15;
          v11 = v15;
          v12 = sub_10001A630((uint64_t *)&unk_10083AA20);
          v13 = String.init<A>(describing:)(&v16, v12);
          v16 = sub_10001A820(v13, v14, &v17);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to drop persona for account utils calls {error: %{public}s}", v9, 0xCu);
          swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v10, -1, -1);
          swift_slowDealloc(v9, -1, -1);

        }
        else
        {

        }
      }
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1004D0820(char a1, uint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v6;
  id v7;
  id v8;
  void *v9;
  NSString v10;
  id v11;
  id v12;

  v6 = swift_allocObject(&unk_1007F6820, 24, 7);
  *(_QWORD *)(v6 + 16) = a3;
  _Block_copy(a3);
  sub_1004D05B4();
  v7 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a2
                                                             + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController), "accountUtils"));
  if (v7)
  {
    v8 = v7;
    if (qword_100836F10 != -1)
      swift_once(&qword_100836F10, sub_1001BA718);
    sub_100546670(a1 & 1, (void *)qword_100871CD0, (uint64_t)sub_1004D308C, v6);
    swift_release(v6);
    swift_release(v8);
  }
  else
  {
    v9 = (void *)objc_opt_self(REMError);
    v10 = String._bridgeToObjectiveC()();
    v11 = objc_msgSend(v9, "internalErrorWithDebugDescription:", v10);

    v12 = (id)_convertErrorToNSError(_:)(v11);
    ((void (**)(_QWORD, _QWORD, _QWORD, id))a3)[2](a3, 0, 0, v12);
    swift_release(v6);

  }
}

void sub_1004D0994(uint64_t a1, void *a2, char a3, uint64_t a4, void (**a5)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  NSString v19;
  id v20;
  id v21;

  v10 = swift_allocObject(&unk_1007F67D0, 24, 7);
  *(_QWORD *)(v10 + 16) = a5;
  _Block_copy(a5);
  sub_1004D05B4();
  v11 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a4
                                                              + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController), "accountUtils"));
  if (v11)
  {
    v12 = v11;
    if (qword_100836F10 != -1)
      swift_once(&qword_100836F10, sub_1001BA718);
    v13 = (void *)qword_100871CD0;
    v14 = swift_allocObject(&unk_1007F67F8, 32, 7);
    *(_QWORD *)(v14 + 16) = sub_1004D23F4;
    *(_QWORD *)(v14 + 24) = v10;
    swift_retain();
    sub_100545C5C(a1, a2, a3 & 1, v13, (uint64_t)sub_1000098EC, v14);
    swift_release(v10);
    swift_release(v12);
    swift_release(v14);
  }
  else
  {
    v15 = (void *)objc_opt_self(REMError);
    _StringGuts.grow(_:)(60);
    v16._object = (void *)0x8000000100705E20;
    v16._countAndFlagsBits = 0xD000000000000039;
    String.append(_:)(v16);
    v17._countAndFlagsBits = a1;
    v17._object = a2;
    String.append(_:)(v17);
    v18._countAndFlagsBits = 125;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    v19 = String._bridgeToObjectiveC()();
    v20 = objc_msgSend(v15, "internalErrorWithDebugDescription:", v19, swift_bridgeObjectRelease().n128_f64[0]);

    v21 = (id)_convertErrorToNSError(_:)(v20);
    ((void (**)(_QWORD, _QWORD, _QWORD, id))a5)[2](a5, 0, 0, v21);
    swift_release(v10);

  }
}

void sub_1004D0BBC(uint64_t a1, void (**a2)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  NSString v10;
  id v11;
  id v12;

  v4 = swift_allocObject(&unk_1007F6780, 24, 7);
  *(_QWORD *)(v4 + 16) = a2;
  _Block_copy(a2);
  sub_1004D05B4();
  v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a1
                                                             + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController), "accountUtils"));
  if (v5)
  {
    v6 = v5;
    if (qword_100836F10 != -1)
      swift_once(&qword_100836F10, sub_1001BA718);
    v7 = (void *)qword_100871CD0;
    v8 = swift_allocObject(&unk_1007F67A8, 32, 7);
    *(_QWORD *)(v8 + 16) = sub_1004D23EC;
    *(_QWORD *)(v8 + 24) = v4;
    swift_retain();
    sub_1005468C8(v7, (uint64_t)sub_1000098EC, v8);
    swift_release(v4);
    swift_release(v6);
    swift_release(v8);
  }
  else
  {
    v9 = (void *)objc_opt_self(REMError);
    v10 = String._bridgeToObjectiveC()();
    v11 = objc_msgSend(v9, "internalErrorWithDebugDescription:", v10);

    v12 = (id)_convertErrorToNSError(_:)(v11);
    ((void (**)(_QWORD, _QWORD, id))a2)[2](a2, 0, v12);
    swift_release(v4);

  }
}

void sub_1004D0D5C(uint64_t a1, void *a2, uint64_t a3, void (**a4)(_QWORD, _QWORD))
{
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  NSString v17;
  id v18;
  id v19;

  v8 = swift_allocObject(&unk_1007F6730, 24, 7);
  *(_QWORD *)(v8 + 16) = a4;
  _Block_copy(a4);
  sub_1004D05B4();
  v9 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a3
                                                             + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController), "accountUtils"));
  if (v9)
  {
    v10 = v9;
    if (qword_100836F10 != -1)
      swift_once(&qword_100836F10, sub_1001BA718);
    v11 = qword_100871CD0;
    v12 = swift_allocObject(&unk_1007F6758, 32, 7);
    *(_QWORD *)(v12 + 16) = sub_100119B24;
    *(_QWORD *)(v12 + 24) = v8;
    swift_retain();
    sub_100546AF4(a1, (unint64_t)a2, v11, (uint64_t)sub_1000098EC, v12);
    swift_release(v8);
    swift_release(v10);
    swift_release(v12);
  }
  else
  {
    v13 = (void *)objc_opt_self(REMError);
    _StringGuts.grow(_:)(108);
    v14._object = (void *)0x8000000100705D70;
    v14._countAndFlagsBits = 0xD000000000000069;
    String.append(_:)(v14);
    v15._countAndFlagsBits = a1;
    v15._object = a2;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 125;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    v17 = String._bridgeToObjectiveC()();
    v18 = objc_msgSend(v13, "internalErrorWithDebugDescription:", v17, swift_bridgeObjectRelease().n128_f64[0]);

    v19 = (id)_convertErrorToNSError(_:)(v18);
    ((void (**)(_QWORD, id))a4)[2](a4, v19);
    swift_release(v8);

  }
}

void sub_1004D0F64(uint64_t a1, void (**a2)(_QWORD, _QWORD))
{
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  NSString v10;
  id v11;
  id v12;

  v4 = swift_allocObject(&unk_1007F66E0, 24, 7);
  *(_QWORD *)(v4 + 16) = a2;
  _Block_copy(a2);
  sub_1004D05B4();
  v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a1
                                                             + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController), "accountUtils"));
  if (v5)
  {
    v6 = v5;
    if (qword_100836F10 != -1)
      swift_once(&qword_100836F10, sub_1001BA718);
    v7 = qword_100871CD0;
    v8 = swift_allocObject(&unk_1007F6708, 32, 7);
    *(_QWORD *)(v8 + 16) = sub_100119B24;
    *(_QWORD *)(v8 + 24) = v4;
    swift_retain();
    sub_100547930(v7, (uint64_t)sub_100119B20, v8);
    swift_release(v4);
    swift_release(v6);
    swift_release(v8);
  }
  else
  {
    v9 = (void *)objc_opt_self(REMError);
    v10 = String._bridgeToObjectiveC()();
    v11 = objc_msgSend(v9, "internalErrorWithDebugDescription:", v10);

    v12 = (id)_convertErrorToNSError(_:)(v11);
    ((void (**)(_QWORD, id))a2)[2](a2, v12);
    swift_release(v4);

  }
}

void sub_1004D1100(void *a1, uint64_t a2)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  char *v15;
  _QWORD v16[8];

  v4 = objc_msgSend((id)objc_opt_self(ICCloudConfiguration), "sharedConfiguration");
  v5 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
  v6 = swift_allocObject(&unk_1007F6640, 24, 7);
  *(_QWORD *)(v6 + 16) = v4;
  v7 = swift_allocObject(&unk_1007F6668, 24, 7);
  *(_QWORD *)(v7 + 16) = v5;
  v8 = swift_allocObject(&unk_1007F6690, 24, 7);
  *(_QWORD *)(v8 + 16) = v4;
  v9 = swift_allocObject(&unk_1007F66B8, 24, 7);
  *(_QWORD *)(v9 + 16) = v5;
  v16[0] = sub_1004D23B8;
  v16[1] = v6;
  v16[2] = sub_1004D23B8;
  v16[3] = v7;
  v16[4] = sub_1004D23E4;
  v16[5] = v8;
  v16[6] = sub_1004D23E4;
  v16[7] = v9;
  v10 = qword_100836F10;
  v11 = v4;
  v12 = v5;
  v13 = a1;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v10 != -1)
    swift_once(&qword_100836F10, sub_1001BA718);
  v14 = (void *)qword_100871CD0;
  objc_allocWithZone((Class)type metadata accessor for RDXPCSuggestedAttributesPerformer(0));
  v15 = sub_1001B7978(v13, (uint64_t)v16, v14);
  (*(void (**)(uint64_t, char *, _QWORD))(a2 + 16))(a2, v15, 0);
  swift_release(v9);
  swift_release(v8);
  swift_release(v7);
  swift_release(v6);

}

uint64_t sub_1004D12F4(uint64_t a1)
{
  id v2;
  id v3;
  Class isa;
  NSString v5;
  id v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _OWORD v14[2];
  __int128 v15;
  __int128 v16;

  v2 = objc_msgSend((id)objc_opt_self(ICCloudConfiguration), "sharedConfiguration");
  v3 = objc_msgSend(v2, "suggestedAttributesHarvestingOverrides");

  if (!v3)
  {
    v15 = 0u;
    v16 = 0u;
LABEL_11:
    sub_10000882C((uint64_t)&v15, (uint64_t *)&unk_10083D5B0);
    goto LABEL_12;
  }
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v3, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = String._bridgeToObjectiveC()();
  v6 = -[objc_class valueForKey:](isa, "valueForKey:", v5);

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)(v14, v6);
    swift_unknownObjectRelease(v6);
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  sub_1000A5CA8((uint64_t)v14, (uint64_t)&v15, (uint64_t *)&unk_10083D5B0);
  if (!*((_QWORD *)&v16 + 1))
    goto LABEL_11;
  v7 = sub_10001A630(&qword_100846F58);
  if (!swift_dynamicCast(v14, &v15, (char *)&type metadata for Any + 8, v7, 6))
  {
LABEL_12:
    v12 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __n128))(a1 + 16))(a1, v12, 0, v8);
  }
  v9 = *(_QWORD *)&v14[0];
  if (!*(_QWORD *)(*(_QWORD *)&v14[0] + 16)
    || (v10 = sub_10001A6DC(0x4F64656C62616E65, 0xEC000000534F696ELL), (v11 & 1) == 0))
  {
    v8 = swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v12 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 56) + v10);
  v8 = swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __n128))(a1 + 16))(a1, v12, 0, v8);
}

void sub_1004D1508(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  id v15;
  NSString v16;
  id v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  id v37;
  id v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;
  id v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  id v57;
  os_log_type_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)&v6 = __chkstk_darwin(v4).n128_u64[0];
  v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(a1, "uuid", v6);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v9);

  v11 = UUID.uuidString.getter(v10);
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v14 = objc_msgSend((id)objc_opt_self(REMAppleAccountUtilities), "sharedInstance");
  v15 = objc_msgSend(v14, "accountStore");

  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend(v15, "accountWithIdentifier:", v16);

  if (!v17)
  {
    v27 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", a1);
    swift_willThrow(v27);

    v28 = (void *)_convertErrorToNSError(_:)(v27);
    v29 = objc_msgSend(v28, "domain");
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v32 = v31;

    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMErrorDomain);
    if (v30 == v34 && v32 == v33)
    {
      swift_bridgeObjectRelease_n(v32, 2);
    }
    else
    {
      v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v32, v34, v33, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v35 & 1) == 0)
      {
        if (qword_100837700 != -1)
          swift_once(&qword_100837700, sub_1004BC0B4);
        v56 = type metadata accessor for Logger(0);
        sub_10001AAA8(v56, (uint64_t)qword_10084CAB8);
        v57 = v27;
        swift_bridgeObjectRetain(v13);
        v38 = v57;
        v39 = Logger.logObject.getter(v38);
        v58 = static os_log_type_t.error.getter(v39);
        if (os_log_type_enabled(v39, v58))
        {
          v41 = swift_slowAlloc(22, -1);
          v59 = swift_slowAlloc(64, -1);
          v70 = v59;
          *(_DWORD *)v41 = 136446466;
          v67 = v28;
          swift_bridgeObjectRetain(v13);
          v68 = sub_10001A820(v11, v13, &v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);
          swift_bridgeObjectRelease_n(v13, 3);
          *(_WORD *)(v41 + 12) = 2082;
          v68 = (uint64_t)v38;
          v60 = v38;
          v61 = sub_10001A630((uint64_t *)&unk_10083AA20);
          v62 = String.init<A>(describing:)(&v68, v61);
          v68 = sub_10001A820(v62, v63, &v70);
          v28 = v67;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v39, v58, "xpcPerformer.isManagedAccount: Error when looking up the ACAccount {acAccountID: %{public}s, error: %{public}s}", (uint8_t *)v41, 0x16u);
          swift_arrayDestroy(v59, 2, (char *)&type metadata for Any + 8);
          v51 = v59;
          goto LABEL_23;
        }
LABEL_24:

        swift_bridgeObjectRelease_n(v13, 2);
        goto LABEL_25;
      }
    }
    if (qword_100837700 != -1)
      swift_once(&qword_100837700, sub_1004BC0B4);
    v36 = type metadata accessor for Logger(0);
    sub_10001AAA8(v36, (uint64_t)qword_10084CAB8);
    v37 = v28;
    swift_bridgeObjectRetain(v13);
    v38 = v37;
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.error.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      v41 = swift_slowAlloc(22, -1);
      v66 = swift_slowAlloc(64, -1);
      v70 = v66;
      *(_DWORD *)v41 = 136446466;
      v67 = a2;
      swift_bridgeObjectRetain(v13);
      v68 = sub_10001A820(v11, v13, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);
      swift_bridgeObjectRelease_n(v13, 3);
      *(_WORD *)(v41 + 12) = 2082;
      v65 = v41 + 14;
      v42 = v38;
      v43 = objc_msgSend(v42, "description");
      v44 = v28;
      v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
      v46 = v27;
      v48 = v47;

      a2 = v67;
      v49 = v45;
      v28 = v44;
      v68 = sub_10001A820(v49, v48, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);

      v27 = v46;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "xpcPerformer.isManagedAccount: REMError when looking up the ACAccount {acAccountID: %{public}s, error: %{public}s}", (uint8_t *)v41, 0x16u);
      v50 = v66;
      swift_arrayDestroy(v66, 2, (char *)&type metadata for Any + 8);
      v51 = v50;
LABEL_23:
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v41, -1, -1);

LABEL_25:
      v15 = v27;
      v55 = (id)_convertErrorToNSError(_:)(v15);
      (*((void (**)(void *, _QWORD, id))a2 + 2))(a2, 0, v55);

      v20 = v15;
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  v18 = (unint64_t)objc_msgSend(v17, "MCIsManaged");
  if (qword_100837700 != -1)
    swift_once(&qword_100837700, sub_1004BC0B4);
  v19 = type metadata accessor for Logger(0);
  sub_10001AAA8(v19, (uint64_t)qword_10084CAB8);
  v20 = v17;
  swift_bridgeObjectRetain(v13);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v67 = a2;
    v24 = swift_slowAlloc(28, -1);
    v64 = (_QWORD *)swift_slowAlloc(8, -1);
    v65 = swift_slowAlloc(32, -1);
    v70 = v65;
    *(_DWORD *)v24 = 136446722;
    swift_bridgeObjectRetain(v13);
    v68 = sub_10001A820(v11, v13, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);
    swift_bridgeObjectRelease_n(v13, 3);
    *(_WORD *)(v24 + 12) = 1024;
    LODWORD(v66) = v18;
    LODWORD(v68) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, (char *)&v68 + 4);
    *(_WORD *)(v24 + 18) = 2114;
    v25 = objc_msgSend(v20, "displayAccount");
    v26 = v25;
    if (v25)
      v68 = (uint64_t)v25;
    else
      v68 = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);
    v52 = v64;
    *v64 = v26;

    _os_log_impl((void *)&_mh_execute_header, v22, v23, "xpcPerformer.isManagedAccount: ACAccount.rem_isManagedAppleID result {acAccountID: %{public}s, isManaged: %{BOOL}d, displayAccount: %{public}@}", (uint8_t *)v24, 0x1Cu);
    v53 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v52, 1, v53);
    swift_slowDealloc(v52, -1, -1);
    v54 = v65;
    swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v24, -1, -1);

    a2 = v67;
    v18 = v66;
  }
  else
  {

    swift_bridgeObjectRelease_n(v13, 2);
  }
  v55 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", v18);
  (*((void (**)(void *, id, _QWORD))a2 + 2))(a2, v55, 0);
LABEL_26:

}

uint64_t sub_1004D1DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v6[3];
  _BYTE v7[48];

  sub_1000184A8(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v7);
  v6[2] = a1;
  sub_10035288C((uint64_t)v7, (uint64_t)sub_1004D22F4, (uint64_t)v6);
  return (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, 0);
}

uint64_t sub_1004D1FF4(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v8;
  _QWORD v10[6];
  _BYTE v11[56];

  v8 = swift_allocObject(&unk_1007F65A0, 24, 7);
  *(_QWORD *)(v8 + 16) = a4;
  sub_1000184A8(a3 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v11);
  v10[2] = a2;
  v10[3] = sub_10011701C;
  v10[4] = v8;
  v10[5] = a1;
  _Block_copy(a4);
  sub_10035288C((uint64_t)v11, (uint64_t)sub_1004D2294, (uint64_t)v10);
  return swift_release(v8);
}

uint64_t sub_1004D2270()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1004D2294(void *a1)
{
  uint64_t v1;

  sub_1004C6B0C(a1, *(void **)(v1 + 16), *(void (**)(void))(v1 + 24), *(_QWORD *)(v1 + 32), *(uint8_t **)(v1 + 40));
}

unint64_t sub_1004D22B0()
{
  unint64_t result;

  result = qword_10084CB70;
  if (!qword_10084CB70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PermanentlyHideError, &type metadata for PermanentlyHideError);
    atomic_store(result, (unint64_t *)&qword_10084CB70);
  }
  return result;
}

void sub_1004D22F4(void *a1)
{
  uint64_t v1;

  sub_1004C63BC(a1, *(void **)(v1 + 16));
}

void sub_1004D230C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1004C632C(a1, a2, *(_QWORD *)(v2 + 16));
}

double sub_1004D2314(uint64_t a1)
{
  uint64_t v1;

  return sub_1004C5804(a1, *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(void (**)(__n128))(v1 + 32));
}

void sub_1004D2338()
{
  uint64_t v0;

  sub_1004C7410(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(unsigned __int8 *)(v0 + 40));
}

void sub_1004D2364()
{
  uint64_t v0;

  sub_1004C8764(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1004D2380()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1004D23AC()
{
  uint64_t v0;

  sub_1004C95B8(*(void **)(v0 + 16));
}

Class sub_1004D23B8()
{
  uint64_t v0;

  return sub_1001B78C4(*(void **)(v0 + 16));
}

uint64_t sub_1004D23C0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

Class sub_1004D23E4()
{
  uint64_t v0;

  return sub_1001B78D0(*(void **)(v0 + 16));
}

void sub_1004D23EC(char a1, uint64_t a2)
{
  uint64_t v2;

  sub_1004C337C(a1, a2, *(_QWORD *)(v2 + 16));
}

void sub_1004D23F4(char a1, char a2, uint64_t a3)
{
  uint64_t v3;

  sub_1004C4D54(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

void sub_1004D23FC(objc_class *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1004C423C(a1, a2, *(_QWORD *)(v2 + 16));
}

void sub_1004D2404(void *a1)
{
  uint64_t v1;

  sub_1004C39E4(a1, *(void (**)(_QWORD, id))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

void sub_1004D2420(void *a1)
{
  uint64_t v1;

  sub_1004C3678(a1, *(void **)(v1 + 16));
}

uint64_t sub_1004D2438(void *a1)
{
  uint64_t v1;

  return sub_1004C3078(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1004D2454()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1004D2490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t *v5;

  v2 = *(_QWORD *)(v0 + 40);
  v3 = swift_task_alloc(dword_10084CBB4);
  v4 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_1000CAD70;
  *(_OWORD *)(v3 + 16) = v4;
  v5 = (uint64_t *)swift_task_alloc(dword_10084E234);
  *(_QWORD *)(v3 + 32) = v5;
  *v5 = v3;
  v5[1] = (uint64_t)sub_1004C3248;
  return sub_10051AC54(v2);
}

void sub_1004D2510(uint64_t a1)
{
  uint64_t v1;

  sub_1004C2C74(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1004D2530()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));

  return swift_deallocObject(v0, 97, 7);
}

uint64_t sub_1004D2584(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v4 = v1[3];
  v12 = v1[2];
  v5 = v1[4];
  v6 = v1[5];
  v7 = v1[6];
  v8 = v1[7];
  v9 = v1[8];
  v10 = (_QWORD *)swift_task_alloc(dword_10084CBC4);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1000CAD70;
  return sub_1004C1A2C(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1004D2644(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;

  v16 = *(_OWORD *)(v3 + 32);
  v8 = *(_BYTE *)(v3 + 48);
  v9 = *(_QWORD *)(v3 + 56);
  v10 = *(_QWORD *)(v3 + 64);
  v11 = swift_task_alloc(dword_10084CBD4);
  v12 = *(_OWORD *)(v3 + 16);
  *(_QWORD *)(v4 + 16) = v11;
  *(_QWORD *)v11 = v4;
  *(_QWORD *)(v11 + 8) = sub_1000CB064;
  *(_QWORD *)(v11 + 112) = v9;
  *(_QWORD *)(v11 + 120) = v10;
  *(_BYTE *)(v11 + 216) = v8;
  *(_OWORD *)(v11 + 80) = v12;
  *(_OWORD *)(v11 + 96) = v16;
  *(_QWORD *)(v11 + 72) = a1;
  v13 = *a3;
  v14 = a3[1];
  *(_QWORD *)(v11 + 128) = *a2;
  *(_QWORD *)(v11 + 136) = v13;
  *(_QWORD *)(v11 + 144) = v14;
  return swift_task_switch(sub_1004C2444, 0, 0);
}

void sub_1004D26F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1004C19AC(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1004D2700()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1004D2734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = swift_task_alloc(dword_10084CBF4);
  v5 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_1000CB064;
  *(_QWORD *)(v4 + 40) = v3;
  *(_OWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 16) = v2;
  return swift_task_switch(sub_1004C17D8, 0, 0);
}

const char *sub_1004D27AC()
{
  return "groceryLocalCorrectionsChecksum";
}

void sub_1004D27B8(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_groceryLocalCorrectionsChecksum, a2);
}

void sub_1004D27D4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setGroceryLocalCorrectionsChecksum_);
}

void sub_1004D2800(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_ckIdentifier, a2);
}

void sub_1004D281C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setCkIdentifier_);
}

const char *sub_1004D2838()
{
  return "ckCloudState";
}

id sub_1004D2844@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "ckCloudState");
  *a2 = result;
  return result;
}

id sub_1004D287C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setCkCloudState:", *a1);
}

void sub_1004D2890(void *a1)
{
  uint64_t v1;

  sub_1004C0C08(a1, *(void (**)(_QWORD, id))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1004D28AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1004D28D0(uint64_t a1)
{
  uint64_t v1;

  sub_1004C0A18(a1, *(void (**)(_QWORD, id))(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40));
}

void sub_1004D28EC(void *a1)
{
  uint64_t v1;

  sub_1004C07FC(a1, *(void (**)(_QWORD, id))(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(void **)(v1 + 40));
}

void sub_1004D2908(uint64_t a1)
{
  uint64_t v1;

  sub_1004C05B4(a1, *(void (**)(_QWORD, _QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(void **)(v1 + 40), *(_QWORD *)(v1 + 48));
}

void sub_1004D2928(uint64_t a1)
{
  uint64_t v1;

  sub_1004C00D0(a1, *(void **)(v1 + 16), *(void (**)(id, id))(v1 + 24));
}

double sub_1004D2948()
{
  return sub_1004D2998(2);
}

uint64_t sub_1004D2954()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 56));

  return swift_deallocObject(v0, 72, 7);
}

double sub_1004D2990()
{
  return sub_1004D2998(1);
}

double sub_1004D2998(char a1)
{
  uint64_t *v1;

  return sub_1004C0040(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], a1);
}

void sub_1004D29C0(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_1004BFFAC(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

uint64_t sub_1004D29C8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1004D29FC()
{
  uint64_t v0;

  sub_1004BFDFC(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1004D2A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 16))(a2, a3, a4, a1);
}

uint64_t sub_1004D2A3C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004D2A60()
{
  return sub_1004D2AE4((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

void sub_1004D2A6C(void *a1, void *a2, char a3)
{
  uint64_t v3;

  sub_1004BEBCC(a1, a2, a3 & 1, *(_QWORD *)(v3 + 16));
}

uint64_t sub_1004D2A7C()
{
  return sub_1004D2AE4((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

void sub_1004D2A88(void *a1, uint64_t a2, char a3)
{
  uint64_t *v3;

  sub_1004BF210(a1, a2, a3 & 1, v3[2], v3[3], v3[4]);
}

void sub_1004D2A98()
{
  uint64_t v0;

  sub_1004BFA34(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1004D2AA8()
{
  uint64_t v0;

  return sub_1004BC71C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

void sub_1004D2AB4(uint64_t a1)
{
  uint64_t v1;

  sub_1004BE214(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_1004D2AD8()
{
  return sub_1004D2AE4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1004D2AE4(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 16));
  a1(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, 40, 7);
}

uint64_t sub_1004D2B1C(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1004BE6D4(a1, a2, *(_QWORD *)(v2 + 16), *(uint64_t (**)(void *, uint64_t))(v2 + 24), *(_QWORD *)(v2 + 32));
}

void sub_1004D2B28(uint64_t a1)
{
  uint64_t v1;

  sub_1004BDD48(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1004D2B44()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 48, 7);
}

void sub_1004D2B78(int a1)
{
  uint64_t v1;

  sub_1004BE184(a1, *(void (**)(id, _QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(id *)(v1 + 40));
}

uint64_t sub_1004D2B84()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004D2BA8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  swift_release(*(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_release(*(_QWORD *)(v0 + 144));
  return swift_deallocObject(v0, 152, 7);
}

void sub_1004D2C2C()
{
  uint64_t v0;
  uint64_t v1;

  LOBYTE(v1) = *(_BYTE *)(v0 + 128);
  sub_1004BCE0C(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), v1, *(void (**)(_QWORD))(v0 + 136));
}

uint64_t sub_1004D2C78()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004D2CA4()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_10084CC0C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1000CB064;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_10084CC08 + dword_10084CC08))(v2, v3);
}

uint64_t sub_1004D2D0C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_10084CC1C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1000CB064;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_10084CC18 + dword_10084CC18))(v2, v3, v4);
}

uint64_t sub_1004D2D88()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1004D2DB4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10084CC2C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000CB064;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_10084CC28 + dword_10084CC28))(a1, v4, v5, v6);
}

uint64_t sub_1004D2E38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10084CC3C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000CB064;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10084CC38 + dword_10084CC38))(a1, v4);
}

void sub_1004D2EA8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_1004A1AF8(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_1004D2EC0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1004D2F28(a1, a2, (uint64_t (*)(uint64_t))type metadata accessor for RDXPCStorePerformer, a3);
}

NSObject *sub_1004D2EDC@<X0>(uint64_t a1@<X0>, NSObject **a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *result;

  result = sub_1004BC1E0(a1, *(void **)(v2 + 16));
  if (!v3)
    *a2 = result;
  return result;
}

uint64_t sub_1004D2F08@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1004D2F28(a1, 0, type metadata accessor for RDXPCSuggestedAttributesPerformer, a2);
}

uint64_t sub_1004D2F28@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;

  return sub_1004BC934(a1, *(void ***)(v4 + 16), *(_QWORD **)(v4 + 24), **(void ***)(v4 + 32), *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 56), *(_QWORD *)(v4 + 64), a4, a2, a3);
}

void sub_1004D3044(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1004D2EA8(a1, a2);
}

uint64_t sub_1004D3090(void *a1)
{
  void *v1;
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;

  v3 = a1;
  if (!a1)
  {
    v3 = sub_1004D31AC();
    if (!v3)
    {
      LOBYTE(v8) = 0;
      return v8 & 1;
    }
  }
  v4 = a1;
  v5 = v3;
  v6 = objc_msgSend(v1, "assignmentContext");
  if (!v6)
    goto LABEL_7;
  v7 = v6;
  v8 = objc_msgSend(v6, "currentAssignment");

  if (!v8)
  {
LABEL_8:
    v10 = v5;
    goto LABEL_9;
  }
  v9 = objc_msgSend(v8, "assigneeID");

  if (!v9)
  {
LABEL_7:
    LOBYTE(v8) = 0;
    goto LABEL_8;
  }
  sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
  v10 = objc_msgSend(v5, "objectID");
  LOBYTE(v8) = static NSObject.== infix(_:_:)(v10);

  v5 = v9;
LABEL_9:

  return v8 & 1;
}

id sub_1004D31AC()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = objc_msgSend(v0, "list");
  v2 = objc_msgSend(v1, "shareeContext");

  if (!v2)
    return 0;
  v3 = objc_msgSend(v2, "sharees");

  v4 = sub_1000151B0(0, &qword_10083A228, REMSharee_ptr);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  v6 = objc_msgSend(v0, "list");
  v7 = objc_msgSend(v6, "currentUserShareParticipantID");

  if (v7)
  {
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    swift_bridgeObjectRetain(v10);
    v7 = sub_1004D32F0(v5, v8, v10);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v10);
    v5 = v10;
  }
  swift_bridgeObjectRelease(v5);
  return v7;
}

void *sub_1004D32F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[4];
  uint64_t v29;

  v4 = v3;
  v29 = a3;
  v27 = a2;
  v6 = type metadata accessor for UUID(0);
  v25 = *(_QWORD *)(v6 - 8);
  v26 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_13;
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v9; v9 = _CocoaArrayWrapper.endIndex.getter(v21))
  {
    v23[1] = v4;
    v24 = a1 & 0xC000000000000001;
    v10 = 4;
    while (1)
    {
      v4 = v10 - 4;
      v11 = v24 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, a1) : *(id *)(a1 + 8 * v10);
      v12 = v11;
      v13 = v10 - 3;
      if (__OFADD__(v4, 1))
        break;
      v14 = objc_msgSend(v11, "objectID");
      v15 = objc_msgSend(v14, "uuid");

      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v16 = UUID.uuidString.getter();
      v18 = v17;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v26);
      v28[2] = v16;
      v28[3] = v18;
      v28[0] = v27;
      v28[1] = v29;
      v19 = sub_1000E525C();
      v20 = StringProtocol.caseInsensitiveCompare<A>(_:)(v28, &type metadata for String, &type metadata for String, v19, v19);
      swift_bridgeObjectRelease(v18);
      if (!v20)
      {
        swift_bridgeObjectRelease(a1);
        return v12;
      }

      ++v10;
      if (v13 == v9)
        goto LABEL_17;
    }
    __break(1u);
LABEL_13:
    if (a1 < 0)
      v21 = a1;
    else
      v21 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_17:
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_1004D34F0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t result;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  void (*v12)(uint64_t (*)(), uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = (void *)v1[2];
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    v9 = v1[8];
    ObjectType = swift_getObjectType(v1[7]);
    v11 = swift_allocObject(&unk_1007F71E8, 24, 7);
    swift_weakInit(v11 + 16, v1);
    v12 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v9 + 16);
    swift_retain(v11);
    v12(sub_1004D421C, v11, ObjectType, v9);
    swift_release(v11);
    return sub_1004D396C();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004D360C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084CC98);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084CC98);
  if (qword_1008375E8 != -1)
    swift_once(&qword_1008375E8, sub_1004A1758);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871F98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1004D369C(void *a1)
{
  uint64_t v2;
  void *v3;
  _QWORD v4[6];

  v2 = REMStoreSyncReasonSignificantTimeChanged;
  v4[4] = sub_1004D373C;
  v4[5] = 0;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 1107296256;
  v4[2] = sub_1000E18E4;
  v4[3] = &unk_1007F7200;
  v3 = _Block_copy(v4);
  objc_msgSend(a1, "triggerThrottledSyncWithReason:discretionary:completion:", v2, 1, v3);
  _Block_release(v3);
}

void sub_1004D373C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  NSObject *oslog;
  uint64_t v12;
  uint64_t v13;

  if (qword_100837718 != -1)
    swift_once(&qword_100837718, sub_1004D360C);
  v2 = type metadata accessor for Logger(0);
  sub_10001AAA8(v2, (uint64_t)qword_10084CC98);
  swift_errorRetain(a1);
  v3 = swift_errorRetain(a1);
  oslog = Logger.logObject.getter(v3);
  v4 = static os_log_type_t.info.getter(oslog);
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = a1;
    v13 = v6;
    *(_DWORD *)v5 = 136446210;
    swift_errorRetain(a1);
    v7 = sub_10001A630(&qword_10083C158);
    v8 = String.init<A>(describing:)(&v12, v7);
    v10 = v9;
    v12 = sub_10001A820(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Polling sync did finish {error: %{public}s}", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);

  }
}

uint64_t sub_1004D3918(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    sub_1004D396C();
    return swift_release(v3);
  }
  return result;
}

uint64_t sub_1004D396C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  id v21;
  uint64_t ObjectType;
  void (*v23)(uint64_t, char *);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __n128 v49;
  void (*v50)(char *, uint64_t, __n128);
  os_log_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  __n128 v65;
  void (*v66)(char *, uint64_t, __n128);
  void (*v68)(char *, uint64_t);
  char *v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  _QWORD v72[2];
  os_log_t v73;
  int v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;

  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v3 = __chkstk_darwin(v2);
  v78 = (char *)v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)v72 - v5;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v76 = (char *)v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)v72 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)v72 - v14;
  v16 = type metadata accessor for DispatchPredicate(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(void **)(v1 + 16);
  *(_QWORD *)v19 = v20;
  (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v19);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  if ((v20 & 1) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  v19 = *(char **)(v1 + 32);
  ObjectType = swift_getObjectType(*(_QWORD *)(v1 + 24));
  v23 = (void (*)(uint64_t, char *))*((_QWORD *)v19 + 1);
  v77 = ObjectType;
  v23(ObjectType, v19);
  v24 = v8;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1000EA320((uint64_t)v6);
    if (qword_100837718 == -1)
    {
LABEL_4:
      v25 = type metadata accessor for Logger(0);
      v26 = sub_10001AAA8(v25, (uint64_t)qword_10084CC98);
      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.default.getter(v27);
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "nil lastSyncPoll. Polling", v29, 2u);
        swift_slowDealloc(v29, -1, -1);
      }

      v24 = v8;
LABEL_17:
      v69 = v78;
      Date.init()(v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v69, 0, 1, v7);
      v70 = (*((uint64_t (**)(char *, uint64_t, char *))v19 + 2))(v69, v77, v19);
      return (*(uint64_t (**)(uint64_t))(v1 + 40))(v70);
    }
LABEL_20:
    swift_once(&qword_100837718, sub_1004D360C);
    goto LABEL_4;
  }
  v31 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v32 = v15;
  v31(v15, v6, v7);
  v33 = *(_QWORD *)(v1 + 80);
  v34 = swift_getObjectType(*(_QWORD *)(v1 + 72));
  v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v34, v33);
  v37 = *(_QWORD *)&v36;
  if (Date.timeIntervalSinceNow.getter(v35) < -v36)
  {
    if (qword_100837718 != -1)
      swift_once(&qword_100837718, sub_1004D360C);
    v38 = type metadata accessor for Logger(0);
    sub_10001AAA8(v38, (uint64_t)qword_10084CC98);
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v13, v15, v7);
    static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
    v39 = static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.default.getter(v40);
    v42 = v41;
    if (os_log_type_enabled(v40, v41))
    {
      v43 = swift_slowAlloc(28, -1);
      v74 = v42;
      v44 = v43;
      v76 = (char *)swift_slowAlloc(32, -1);
      v80 = v76;
      *(_DWORD *)v44 = 136446722;
      v72[1] = v44 + 4;
      v45 = sub_1003AA7C4();
      v73 = v40;
      v46 = dispatch thunk of CustomStringConvertible.description.getter(v7, v45);
      v48 = v47;
      v79 = sub_10001A820(v46, v47, (uint64_t *)&v80);
      v75 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);
      v49 = swift_bridgeObjectRelease(v48);
      v50 = *(void (**)(char *, uint64_t, __n128))(v24 + 8);
      v50(v13, v7, v49);
      *(_WORD *)(v44 + 12) = 1040;
      LODWORD(v79) = 3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, (char *)&v79 + 4);
      *(_WORD *)(v44 + 18) = 2048;
      v79 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);
      v51 = v73;
      _os_log_impl((void *)&_mh_execute_header, v73, (os_log_type_t)v74, "lastSyncPoll > configurationInterval. Polling {lastSyncPoll: %{public}s, throttingInterval: %.*f}", (uint8_t *)v44, 0x1Cu);
      v52 = v76;
      swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v44, -1, -1);

      v30 = ((uint64_t (*)(char *, uint64_t))v50)(v75, v7);
    }
    else
    {

      v68 = *(void (**)(char *, uint64_t))(v24 + 8);
      v68(v13, v7);
      v30 = ((uint64_t (*)(char *, uint64_t))v68)(v15, v7);
    }
    goto LABEL_17;
  }
  if (qword_100837718 != -1)
    swift_once(&qword_100837718, sub_1004D360C);
  v53 = type metadata accessor for Logger(0);
  sub_10001AAA8(v53, (uint64_t)qword_10084CC98);
  v54 = v76;
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v76, v32, v7);
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  v55 = static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  v56 = Logger.logObject.getter(v55);
  v57 = static os_log_type_t.default.getter(v56);
  if (os_log_type_enabled(v56, v57))
  {
    v58 = swift_slowAlloc(28, -1);
    v75 = v32;
    v59 = v58;
    v60 = swift_slowAlloc(32, -1);
    v80 = (char *)v60;
    *(_DWORD *)v59 = 136446722;
    v61 = sub_1003AA7C4();
    v62 = dispatch thunk of CustomStringConvertible.description.getter(v7, v61);
    v64 = v63;
    v79 = sub_10001A820(v62, v63, (uint64_t *)&v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);
    v65 = swift_bridgeObjectRelease(v64);
    v66 = *(void (**)(char *, uint64_t, __n128))(v24 + 8);
    v66(v54, v7, v65);
    *(_WORD *)(v59 + 12) = 1040;
    LODWORD(v79) = 3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, (char *)&v79 + 4);
    *(_WORD *)(v59 + 18) = 2048;
    v79 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "lastSyncPoll < throttingInterval. Not Polling {lastSyncPoll: %{public}s, throttingInterval: %.*f}", (uint8_t *)v59, 0x1Cu);
    swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1, -1);
    swift_slowDealloc(v59, -1, -1);

    return ((uint64_t (*)(char *, uint64_t))v66)(v75, v7);
  }
  else
  {

    v71 = *(void (**)(char *, uint64_t))(v24 + 8);
    v71(v54, v7);
    return ((uint64_t (*)(char *, uint64_t))v71)(v32, v7);
  }
}

uint64_t sub_1004D406C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 56));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 72));
  return swift_deallocClassInstance(v0, 88, 7);
}

uint64_t sub_1004D40B0@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(v1, "lastSyncPoll");
  if (v3)
  {
    v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

void sub_1004D4134(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  Class v7;
  Class isa;
  Class v9;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4);
  v7 = 0;
  if (v6 != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    v7 = isa;
  }
  v9 = v7;
  objc_msgSend(v2, "setLastSyncPoll:");

}

id sub_1004D41C8()
{
  void *v0;

  return objc_msgSend(v0, "launchAndSignificantTimeChangePollThrottleInterval");
}

uint64_t type metadata accessor for RDSyncPoller()
{
  return objc_opt_self(_TtC7remindd12RDSyncPoller);
}

uint64_t sub_1004D41F8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004D421C()
{
  uint64_t v0;

  return sub_1004D3918(v0);
}

uint64_t sub_1004D4224(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_10084CDA8, (uint64_t (*)(uint64_t))&type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsInvocation, (uint64_t)&protocol conformance descriptor for REMHashtagLabelDataView.AllHashtagLabelsInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void *sub_1004D4260(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;

  v2 = a2;
  v3 = a1;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if ((a2 & 0xC000000000000001) != 0)
      goto LABEL_5;
LABEL_11:
    if (v4 > *(_QWORD *)(v2 + 16) >> 3)
      return sub_100215370(v3, v2);
    goto LABEL_13;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v4 = __CocoaSet.count.getter(a1);
  if ((v2 & 0xC000000000000001) == 0)
    goto LABEL_11;
LABEL_5:
  if (v2 < 0)
    v5 = v2;
  else
    v5 = v2 & 0xFFFFFFFFFFFFFF8;
  if (v4 > __CocoaSet.count.getter(v5) / 8)
  {
    swift_bridgeObjectRetain(v2);
    v6 = __CocoaSet.count.getter(v5);
    v7 = sub_1002DE3BC(v5, v6);
    swift_bridgeObjectRelease();
    v2 = v7;
    return sub_100215370(v3, v2);
  }
LABEL_13:
  sub_10059B56C(v3);
  return (void *)v2;
}

uint64_t sub_1004D4354(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v27;

  v2 = a1 + 64;
  v3 = *(_BYTE *)(a1 + 32);
  v4 = 1 << v3;
  v5 = -1;
  if (1 << v3 < 64)
    v5 = ~(-1 << (1 << v3));
  v6 = v5 & *(_QWORD *)(a1 + 64);
  if (!v6)
  {
    v11 = v3 & 0x3F;
    if (v11 > 6)
    {
      v27 = (unint64_t)(v4 + 63) >> 6;
      v22 = *(_QWORD *)(a1 + 72);
      if (v22)
      {
        v7 = 1;
        goto LABEL_43;
      }
      if (v11 >= 8)
      {
        v22 = *(_QWORD *)(a1 + 80);
        if (v22)
        {
          v7 = 2;
        }
        else
        {
          v22 = *(_QWORD *)(a1 + 88);
          if (!v22)
            goto LABEL_50;
          v7 = 3;
        }
        goto LABEL_43;
      }
    }
    return 0;
  }
  v7 = 0;
  v8 = __clz(__rbit64(v6));
  v9 = (v6 - 1) & v6;
  v27 = (unint64_t)(v4 + 63) >> 6;
  while (2)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v8);
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(v10);
LABEL_7:
    v12 = v10 & 0xC000000000000001;
    if (v10 < 0)
      v13 = v10;
    else
      v13 = v10 & 0xFFFFFFFFFFFFFF8;
    if (v9)
    {
LABEL_11:
      v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v15 = v14 | (v7 << 6);
      goto LABEL_28;
    }
    while (1)
    {
      v16 = v7 + 1;
      if (__OFADD__(v7, 1))
        break;
      if (v16 >= v27)
        goto LABEL_39;
      v17 = *(_QWORD *)(v2 + 8 * v16);
      ++v7;
      if (!v17)
      {
        v7 = v16 + 1;
        if (v16 + 1 >= v27)
          goto LABEL_39;
        v17 = *(_QWORD *)(v2 + 8 * v7);
        if (!v17)
        {
          v7 = v16 + 2;
          if (v16 + 2 >= v27)
            goto LABEL_39;
          v17 = *(_QWORD *)(v2 + 8 * v7);
          if (!v17)
          {
            v7 = v16 + 3;
            if (v16 + 3 >= v27)
              goto LABEL_39;
            v17 = *(_QWORD *)(v2 + 8 * v7);
            if (!v17)
            {
              v18 = v16 + 4;
              if (v18 >= v27)
              {
LABEL_39:
                swift_release(a1);
                return v10;
              }
              v17 = *(_QWORD *)(v2 + 8 * v18);
              if (!v17)
              {
                while (1)
                {
                  v7 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    break;
                  if (v7 >= v27)
                    goto LABEL_39;
                  v17 = *(_QWORD *)(v2 + 8 * v7);
                  ++v18;
                  if (v17)
                    goto LABEL_27;
                }
                __break(1u);
LABEL_56:
                v23 = 0;
                v24 = 6;
                if (v27 > 6)
                  v24 = v27;
                v25 = v24 - 6;
                while (v25 != v23)
                {
                  v22 = *(_QWORD *)(a1 + 112 + 8 * v23++);
                  if (v22)
                  {
                    v7 = v23 + 5;
                    goto LABEL_43;
                  }
                }
                return 0;
              }
              v7 = v18;
            }
          }
        }
      }
LABEL_27:
      v9 = (v17 - 1) & v17;
      v15 = __clz(__rbit64(v17)) + (v7 << 6);
LABEL_28:
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v15);
      if ((v19 & 0xC000000000000001) != 0)
      {
        if (v19 < 0)
          v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v15);
        else
          v20 = v19 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v19);
        v21 = __CocoaSet.count.getter(v20);
        if (v12)
        {
LABEL_33:
          if (v21 < __CocoaSet.count.getter(v13))
            goto LABEL_6;
          goto LABEL_37;
        }
      }
      else
      {
        v21 = *(_QWORD *)(v19 + 16);
        swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v15));
        if (v12)
          goto LABEL_33;
      }
      if (v21 < *(_QWORD *)(v10 + 16))
      {
LABEL_6:
        swift_bridgeObjectRelease(v10);
        v10 = v19;
        goto LABEL_7;
      }
LABEL_37:
      swift_bridgeObjectRelease(v19);
      if (v9)
        goto LABEL_11;
    }
    __break(1u);
LABEL_50:
    if (v11 >= 9)
    {
      v22 = *(_QWORD *)(a1 + 96);
      if (v22)
      {
        v7 = 4;
      }
      else
      {
        v22 = *(_QWORD *)(a1 + 104);
        if (!v22)
          goto LABEL_56;
        v7 = 5;
      }
LABEL_43:
      v9 = (v22 - 1) & v22;
      v8 = __clz(__rbit64(v22)) + (v7 << 6);
      continue;
    }
    return 0;
  }
}

uint64_t sub_1004D4658(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v27;

  v2 = a1 + 64;
  v3 = *(_BYTE *)(a1 + 32);
  v4 = 1 << v3;
  v5 = -1;
  if (1 << v3 < 64)
    v5 = ~(-1 << (1 << v3));
  v6 = v5 & *(_QWORD *)(a1 + 64);
  if (!v6)
  {
    v11 = v3 & 0x3F;
    if (v11 > 6)
    {
      v27 = (unint64_t)(v4 + 63) >> 6;
      v22 = *(_QWORD *)(a1 + 72);
      if (v22)
      {
        v7 = 1;
        goto LABEL_43;
      }
      if (v11 >= 8)
      {
        v22 = *(_QWORD *)(a1 + 80);
        if (v22)
        {
          v7 = 2;
        }
        else
        {
          v22 = *(_QWORD *)(a1 + 88);
          if (!v22)
            goto LABEL_50;
          v7 = 3;
        }
        goto LABEL_43;
      }
    }
    return 0;
  }
  v7 = 0;
  v8 = __clz(__rbit64(v6));
  v9 = (v6 - 1) & v6;
  v27 = (unint64_t)(v4 + 63) >> 6;
  while (2)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v8);
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(v10);
LABEL_7:
    if (v10 < 0)
      v12 = v10;
    else
      v12 = v10 & 0xFFFFFFFFFFFFFF8;
    if (v9)
    {
LABEL_11:
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v7 << 6);
      goto LABEL_28;
    }
    while (1)
    {
      v15 = v7 + 1;
      if (__OFADD__(v7, 1))
        break;
      if (v15 >= v27)
        goto LABEL_39;
      v16 = *(_QWORD *)(v2 + 8 * v15);
      ++v7;
      if (!v16)
      {
        v7 = v15 + 1;
        if (v15 + 1 >= v27)
          goto LABEL_39;
        v16 = *(_QWORD *)(v2 + 8 * v7);
        if (!v16)
        {
          v7 = v15 + 2;
          if (v15 + 2 >= v27)
            goto LABEL_39;
          v16 = *(_QWORD *)(v2 + 8 * v7);
          if (!v16)
          {
            v7 = v15 + 3;
            if (v15 + 3 >= v27)
              goto LABEL_39;
            v16 = *(_QWORD *)(v2 + 8 * v7);
            if (!v16)
            {
              v17 = v15 + 4;
              if (v17 >= v27)
              {
LABEL_39:
                swift_release(a1);
                return v10;
              }
              v16 = *(_QWORD *)(v2 + 8 * v17);
              if (!v16)
              {
                while (1)
                {
                  v7 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    break;
                  if (v7 >= v27)
                    goto LABEL_39;
                  v16 = *(_QWORD *)(v2 + 8 * v7);
                  ++v17;
                  if (v16)
                    goto LABEL_27;
                }
                __break(1u);
LABEL_56:
                v23 = 0;
                v24 = 6;
                if (v27 > 6)
                  v24 = v27;
                v25 = v24 - 6;
                while (v25 != v23)
                {
                  v22 = *(_QWORD *)(a1 + 112 + 8 * v23++);
                  if (v22)
                  {
                    v7 = v23 + 5;
                    goto LABEL_43;
                  }
                }
                return 0;
              }
              v7 = v17;
            }
          }
        }
      }
LABEL_27:
      v9 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v7 << 6);
LABEL_28:
      v18 = *(_QWORD *)(a1 + 56);
      v19 = *(_QWORD *)(v18 + 8 * v14);
      if ((v10 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain(*(_QWORD *)(v18 + 8 * v14));
        v20 = __CocoaSet.count.getter(v12);
        if ((v19 & 0xC000000000000001) == 0)
          goto LABEL_36;
      }
      else
      {
        v20 = *(_QWORD *)(v10 + 16);
        swift_bridgeObjectRetain(*(_QWORD *)(v18 + 8 * v14));
        if ((v19 & 0xC000000000000001) == 0)
        {
LABEL_36:
          if (v20 < *(_QWORD *)(v19 + 16))
            goto LABEL_6;
          goto LABEL_37;
        }
      }
      if (v19 < 0)
        v21 = v19;
      else
        v21 = v19 & 0xFFFFFFFFFFFFFF8;
      if (v20 < __CocoaSet.count.getter(v21))
      {
LABEL_6:
        swift_bridgeObjectRelease(v10);
        v10 = v19;
        goto LABEL_7;
      }
LABEL_37:
      swift_bridgeObjectRelease(v19);
      if (v9)
        goto LABEL_11;
    }
    __break(1u);
LABEL_50:
    if (v11 >= 9)
    {
      v22 = *(_QWORD *)(a1 + 96);
      if (v22)
      {
        v7 = 4;
      }
      else
      {
        v22 = *(_QWORD *)(a1 + 104);
        if (!v22)
          goto LABEL_56;
        v7 = 5;
      }
LABEL_43:
      v9 = (v22 - 1) & v22;
      v8 = __clz(__rbit64(v22)) + (v7 << 6);
      continue;
    }
    return 0;
  }
}

uint64_t sub_1004D495C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084CD70);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084CD70);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1004D49EC(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_10084CDD0, (uint64_t (*)(uint64_t))&type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsDetailedInvocation, (uint64_t)&protocol conformance descriptor for REMHashtagLabelDataView.AllHashtagLabelsDetailedInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1004D4A28@<X0>(id *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  _QWORD *v31;
  id v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t *v48;
  id v49;
  uint64_t v50;

  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v5);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v8);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v12 = __chkstk_darwin(v11).n128_u64[0];
  v14 = (char *)&v47 - v13;
  v15 = *a1;
  v16 = objc_msgSend(*a1, "name", v12);
  if (v16)
  {
    v17 = v16;
    v18 = a2;
    v48 = v2;
    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v20 = v19;

    v21 = objc_msgSend(v15, "canonicalName");
    if (v21)
    {
      v22 = v21;
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v25 = v24;

    }
    else
    {
      v23 = 0;
      v25 = 0;
    }
    v34 = objc_msgSend(v15, "firstOccurrenceCreationDate");
    if (v34)
    {
      v35 = v34;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v34);

      v36 = type metadata accessor for Date(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v14, 0, 1, v36);
    }
    else
    {
      v37 = type metadata accessor for Date(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v14, 1, 1, v37);
    }
    v38 = objc_msgSend(v15, "recencyDate");
    if (v38)
    {
      v39 = v38;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v38);

      v40 = type metadata accessor for Date(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v10, 0, 1, v40);
    }
    else
    {
      v41 = type metadata accessor for Date(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v10, 1, 1, v41);
    }
    v42 = objc_msgSend(v15, "uuidForChangeTracking");
    if (v42)
    {
      v43 = v42;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v42);

      v44 = type metadata accessor for UUID(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v7, 0, 1, v44);
    }
    else
    {
      v45 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v7, 1, 1, v45);
    }
    a2 = v18;
    type metadata accessor for REMHashtagLabelDetailed_Codable(0);
    result = REMHashtagLabelDetailed_Codable.__allocating_init(name:canonicalName:firstOccurrenceCreationDate:recencyDate:uuidForChangeTracking:)(v47, v20, v23, v25, v14, v10, v7);
  }
  else
  {
    if (qword_100837720 != -1)
      swift_once(&qword_100837720, sub_1004D495C);
    v26 = type metadata accessor for Logger(0);
    sub_10001AAA8(v26, (uint64_t)qword_10084CD70);
    v27 = v15;
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = (_QWORD *)swift_slowAlloc(8, -1);
      v48 = a2;
      *(_DWORD *)v30 = 138412290;
      v32 = objc_msgSend(v27, "objectID");
      v49 = v32;
      a2 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      *v31 = v32;

      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Unexpected nil name REMCDHashtagLabel from AllHashtagLabelsInvocation {mid: %@}", v30, 0xCu);
      v33 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v31, 1, v33);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);

    }
    else
    {

    }
    result = 0;
  }
  *a2 = result;
  return result;
}

uint64_t sub_1004D4E5C(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_10084CDF8, (uint64_t (*)(uint64_t))&type metadata accessor for REMHashtagLabelDataView.ReminderIDsIncludeExcludeOperationInvocation, (uint64_t)&protocol conformance descriptor for REMHashtagLabelDataView.ReminderIDsIncludeExcludeOperationInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1004D4E98@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1004D5E54(a1, a2);
}

uint64_t sub_1004D4EAC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = REMObjectID.codable.getter(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1004D4EE4(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_10084CE20, (uint64_t (*)(uint64_t))&type metadata accessor for REMHashtagLabelDataView.HashtagLabelsReferencedByCustomSmartListFiltersInvocation, (uint64_t)&protocol conformance descriptor for REMHashtagLabelDataView.HashtagLabelsReferencedByCustomSmartListFiltersInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_1004D4F20(uint64_t a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t Style;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  id v36;
  Class isa;
  uint64_t v38;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  Class v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  id v55;
  id v56;
  void *v57;
  unint64_t v58;
  unint64_t v59;
  id v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  char *v75;
  char *v76;
  void (*v77)(char *, _QWORD *);
  void (*v78)(char *, char *, _QWORD *);
  char *v79;
  char *v80;
  void (*v81)(char *, _QWORD *);
  uint64_t v82;
  uint64_t v83;
  __n128 v84;
  char *v85;
  uint64_t v86;
  void *v87;
  __n128 v88;
  uint64_t v89;
  Swift::String v90;
  uint64_t v91;
  int v92;
  int v93;
  void (*v94)(char *, _QWORD *);
  uint64_t v95;
  char *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  char *v102;
  __n128 v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  id v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  _QWORD v119[3];
  char v120[8];
  uint64_t v121;
  __int128 v122;
  void *v123;
  char v124[12];
  _QWORD *v125;

  v106 = a3;
  v107 = a5;
  v101 = sub_10001A630(&qword_10083E950);
  v9 = __chkstk_darwin(v101);
  v112 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for REMHashtagLabelCollection(0, v9);
  v111 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v104 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v108 = (char *)&v92 - v13;
  __chkstk_darwin(v14);
  v110 = (char *)&v92 - v15;
  v16 = _s10PredicatesOMa_3(0);
  v17 = __chkstk_darwin(v16);
  v114 = (uint64_t)&v92 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  Style = type metadata accessor for REMHashtagLabelDataView.HashtagLabelInFilterFetchStyle(0, v17);
  v20 = *(_QWORD *)(Style - 8);
  v21 = __chkstk_darwin(Style);
  v23 = (char *)&v92 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v20 + 16))(v23, a4, Style, v21);
  v24 = (*(uint64_t (**)(char *, uint64_t))(v20 + 88))(v23, Style);
  if (v24 == enum case for REMHashtagLabelDataView.HashtagLabelInFilterFetchStyle.cachedOrStore(_:))
  {
    v25 = sub_1004D731C(a1, (uint64_t)a2);
    v27 = a1;
    if (v25)
    {
      v28 = v25;
      v29 = v26;
      sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
      swift_bridgeObjectRetain(v28);
      v30 = v29;
      LOBYTE(v29) = static NSObject.== infix(_:_:)(v30);

      REMHashtagLabelDataView.HashtagLabelsReferencedByCustomSmartListFiltersInvocation.Result.init(labels:isUpToDate:)(v28, v29 & 1);
      swift_bridgeObjectRelease();
      return;
    }
    goto LABEL_5;
  }
  v27 = a1;
  if (v24 == enum case for REMHashtagLabelDataView.HashtagLabelInFilterFetchStyle.store(_:))
  {
LABEL_5:
    v31 = v5;
    swift_storeEnumTagMultiPayload(v114, v16, 11);
    sub_1000069D8();
    v33 = v32;
    v34 = (void *)sub_1000151B0(0, (unint64_t *)&unk_100840000, off_1007D6720);
    v35 = (uint64_t)objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    v36 = objc_msgSend((id)swift_getObjCClassFromMetadata(v34), "entity");
    objc_msgSend((id)v35, "setEntity:", v36);

    objc_msgSend((id)v35, "setAffectedStores:", 0);
    objc_msgSend((id)v35, "setPredicate:", v33);

    if (qword_100837900 != -1)
      goto LABEL_40;
    while (1)
    {
      sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      v109 = (id)v35;
      objc_msgSend((id)v35, "setSortDescriptors:", isa);

      v38 = sub_10001A630((uint64_t *)&unk_10083AD90);
      inited = swift_initStackObject(v38, v124);
      *(_OWORD *)(inited + 16) = xmmword_1006A7330;
      KeyPath = swift_getKeyPath(&unk_1006BF580);
      *(_QWORD *)(inited + 32) = KeyPath;
      *(_QWORD *)&v122 = inited;
      specialized Array._endMutation()(KeyPath);
      v41 = v122;
      v125 = _swiftEmptyArrayStorage;
      sub_1001C1C48(0, 1, 0);
      v42 = v125;
      if ((v41 & 0xC000000000000001) != 0)
      {
        v43 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v41);
        Style = v43;
      }
      else
      {
        Style = *(_QWORD *)(v41 + 32);
        v43 = swift_retain();
      }
      v99 = v27;
      v100 = a2;
      v44 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v43);
      if (!v45)
      {
        *(_QWORD *)&v122 = 0;
        *((_QWORD *)&v122 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(46);
        v90._object = (void *)0x80000001006F8C10;
        v90._countAndFlagsBits = 0xD00000000000002CLL;
        String.append(_:)(v90);
        v121 = Style;
        v91 = sub_10001A630(&qword_10083FD40);
        _print_unlocked<A, B>(_:_:)(&v121, &v122, v91, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v122, *((_QWORD *)&v122 + 1), "remindd/TypedPredicate.swift", 28, 2, 19, 0);
        __break(1u);
        break;
      }
      v46 = v44;
      a2 = v45;
      v123 = &type metadata for String;
      swift_release(Style);
      *(_QWORD *)&v122 = v46;
      *((_QWORD *)&v122 + 1) = a2;
      v48 = v42[2];
      v47 = v42[3];
      if (v48 >= v47 >> 1)
      {
        sub_1001C1C48(v47 > 1, v48 + 1, 1);
        v42 = v125;
      }
      v42[2] = v48 + 1;
      sub_10001A6CC(&v122, &v42[4 * v48 + 4]);
      swift_bridgeObjectRelease();
      v49 = Array._bridgeToObjectiveC()().super.isa;
      swift_release(v42);
      v50 = v109;
      objc_msgSend(v109, "setPropertiesToFetch:", v49);

      v51 = NSManagedObjectContext.fetch<A>(_:)(v50, v34);
      v52 = v31;
      if (v31)
      {
        sub_10047ADB0(v114);

        return;
      }
      v35 = v51;
      REMHashtagLabelCollection.init()();
      if ((unint64_t)v35 >> 62)
      {
        if (v35 < 0)
          v83 = v35;
        else
          v83 = v35 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v35);
        v54 = _CocoaArrayWrapper.endIndex.getter(v83);
        v53 = swift_bridgeObjectRelease();
        if (!v54)
        {
LABEL_45:
          v84 = swift_bridgeObjectRelease();
          v85 = v110;
          v86 = REMHashtagLabelCollection.labels.getter(v84);
          v87 = (void *)REMFetchResultToken.codable.getter();
          sub_1004D75C0(v86, (uint64_t)v87, v99, (uint64_t)v100);

          v88 = swift_bridgeObjectRelease();
          v89 = REMHashtagLabelCollection.labels.getter(v88);
          REMHashtagLabelDataView.HashtagLabelsReferencedByCustomSmartListFiltersInvocation.Result.init(labels:isUpToDate:)(v89, 1);

          (*(void (**)(char *, uint64_t))(v111 + 8))(v85, v105);
          sub_10047ADB0(v114);
          return;
        }
      }
      else
      {
        v54 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v54)
          goto LABEL_45;
      }
      v116 = v35 & 0xC000000000000001;
      v98 = enum case for REMCustomSmartListFilterDescriptor.FilterHashtags.hashtags(_:);
      v93 = enum case for REMCustomSmartListFilterDescriptor.FilterHashtags.untagged(_:);
      v92 = enum case for REMCustomSmartListFilterDescriptor.FilterHashtags.any(_:);
      v27 = 4;
      v53.n128_u64[0] = 136315138;
      v103 = v53;
      v102 = (char *)&type metadata for Any + 8;
      v113 = v35;
      v115 = v54;
      while (1)
      {
        v55 = v116
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v27 - 4, v35)
            : *(id *)(v35 + 8 * v27);
        v34 = v55;
        v31 = v27 - 3;
        if (__OFADD__(v27 - 4, 1))
          break;
        v56 = objc_msgSend(v55, "filterData");
        if (v56)
        {
          v57 = v56;
          a2 = (_QWORD *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v56);
          v59 = v58;

          type metadata accessor for REMCustomSmartListFilterDescriptor(0);
          sub_1000A70E4((uint64_t)a2, v59);
          v60 = objc_msgSend(v34, "minimumSupportedVersion");
          v117 = a2;
          v61 = (void *)REMCustomSmartListFilterDescriptor.__allocating_init(data:minimumSupportedVersion:)(a2, v59, v60);
          v118 = v59;
          if (v52)
          {
            if (qword_100837720 != -1)
              swift_once(&qword_100837720, sub_1004D495C);
            v62 = type metadata accessor for Logger(0);
            sub_10001AAA8(v62, (uint64_t)qword_10084CD70);
            swift_errorRetain(v52);
            v63 = swift_errorRetain(v52);
            v64 = Logger.logObject.getter(v63);
            v65 = static os_log_type_t.error.getter(v64);
            if (os_log_type_enabled(v64, v65))
            {
              v66 = swift_slowAlloc(12, -1);
              a2 = (_QWORD *)swift_slowAlloc(32, -1);
              *(_QWORD *)&v122 = a2;
              *(_DWORD *)v66 = v103.n128_u32[0];
              swift_getErrorValue(v52, v120, v119);
              v67 = Error.rem_errorDescription.getter(v119[1], v119[2]);
              *(_QWORD *)(v66 + 4) = sub_10001A820(v67, v68, (uint64_t *)&v122);
              swift_bridgeObjectRelease();
              swift_errorRelease(v52);
              swift_errorRelease(v52);
              _os_log_impl((void *)&_mh_execute_header, v64, v65, "HashtagLabelsReferencedByCustomSmartListFiltersInvocation: failed to decode filter {error: %s}", (uint8_t *)v66, 0xCu);
              swift_arrayDestroy(a2, 1, v102);
              swift_slowDealloc(a2, -1, -1);
              v69 = v66;
              v35 = v113;
              swift_slowDealloc(v69, -1, -1);

              swift_errorRelease(v52);
              sub_1000A71C8((uint64_t)v117, v118);
            }
            else
            {
              sub_1000A71C8((uint64_t)v117, v118);

              swift_errorRelease(v52);
              swift_errorRelease(v52);
              swift_errorRelease(v52);

            }
            v52 = 0;
            v54 = v115;
            goto LABEL_18;
          }
          v70 = v61;
          a2 = v112;
          REMCustomSmartListFilterDescriptor.hashtags.getter();

          v71 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterHashtags(0);
          v72 = *(_QWORD *)(v71 - 8);
          if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v72 + 48))(a2, 1, v71) == 1)
          {
LABEL_30:

            sub_1000A71C8((uint64_t)v117, v118);
LABEL_35:
            v35 = v113;
            goto LABEL_18;
          }
          v73 = (*(uint64_t (**)(_QWORD *, uint64_t))(v72 + 88))(a2, v71);
          if (v73 == v98)
          {
            (*(void (**)(_QWORD *, uint64_t))(v72 + 96))(a2, v71);
            v74 = *a2;
            v95 = a2[1];
            v96 = (char *)a2 + *(int *)(sub_10001A630(&qword_10083E980) + 64);
            v75 = v104;
            REMHashtagLabelCollection.init(labels:)(v74);
            v76 = v110;
            REMHashtagLabelCollection.union(_:)(v75);
            v77 = *(void (**)(char *, _QWORD *))(v111 + 8);
            v94 = v77;
            a2 = (_QWORD *)v105;
            v77(v75, (_QWORD *)v105);
            v77(v76, a2);
            v97 = 0;
            v78 = *(void (**)(char *, char *, _QWORD *))(v111 + 32);
            v79 = v108;
            v78(v76, v108, a2);
            REMHashtagLabelCollection.init(labels:)(v95);
            REMHashtagLabelCollection.union(_:)(v75);

            sub_1000A71C8((uint64_t)v117, v118);
            v80 = v75;
            v54 = v115;
            v81 = v94;
            v94(v80, a2);
            v81(v76, a2);
            v78(v76, v79, a2);
            v52 = v97;
            v82 = type metadata accessor for REMCustomSmartListFilterDescriptor.Operation(0);
            (*(void (**)(char *, uint64_t))(*(_QWORD *)(v82 - 8) + 8))(v96, v82);
            goto LABEL_35;
          }
          if (v73 == v93)
            goto LABEL_30;
          v35 = v113;
          if (v73 != v92)
            goto LABEL_48;

          sub_1000A71C8((uint64_t)v117, v118);
        }

LABEL_18:
        ++v27;
        if (v31 == v54)
          goto LABEL_45;
      }
      __break(1u);
LABEL_40:
      swift_once(&qword_100837900, sub_10058B5F8);
    }
  }
  _diagnoseUnexpectedEnumCase<A>(type:)(Style, Style);
  __break(1u);
LABEL_48:
  _diagnoseUnexpectedEnumCase<A>(type:)(v101, v101);
  __break(1u);
}

void sub_1004D5ADC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = objc_msgSend(*a1, "filterData");
  if (v3)
  {
    v4 = v3;
    v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0xF000000000000000;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_1004D5B40(uint64_t a1, void **a2)
{
  void *v2;
  Class isa;
  Class v4;

  v2 = *a2;
  if (*(_QWORD *)(a1 + 8) >> 60 == 15)
    isa = 0;
  else
    isa = Data._bridgeToObjectiveC()().super.isa;
  v4 = isa;
  objc_msgSend(v2, "setFilterData:");

}

uint64_t sub_1004D5BA4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v7 = sub_10001A630(&qword_10084CE88);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10000A388(a1, v11);
  v13 = sub_1004D814C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s5CacheV10CodingKeysON_0, &_s5CacheV10CodingKeysON_0, v13, v11, v12);
  v21 = a2;
  v20 = 0;
  v14 = sub_10001A630((uint64_t *)&unk_10083AE10);
  v15 = sub_1004D8190(&qword_100840418, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v7, v14, v15);
  if (!v3)
  {
    v21 = a3;
    v20 = 1;
    v16 = type metadata accessor for REMFetchResultToken_Codable(0);
    v17 = sub_10009FC50(&qword_10084CE90, (uint64_t (*)(uint64_t))&type metadata accessor for REMFetchResultToken_Codable, (uint64_t)&protocol conformance descriptor for REMFetchResultToken_Codable);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v7, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1004D5D30()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E656B6F74;
  else
    return 0x736C6562616CLL;
}

uint64_t sub_1004D5D64@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1004D7E70(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004D5D88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004D814C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004D5DB0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004D814C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004D5DD8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1004D7F50(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1004D5E00(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1004D5BA4(a1, *v1, v1[1]);
}

uint64_t sub_1004D5E18(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_10084CE48, (uint64_t (*)(uint64_t))&type metadata accessor for REMHashtagLabelDataView.HashtagIDsWithHashtagLabelNamesInvocation, (uint64_t)&protocol conformance descriptor for REMHashtagLabelDataView.HashtagIDsWithHashtagLabelNamesInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1004D5E54@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD v15[2];

  v4 = sub_10001A630((uint64_t *)&unk_10083FBE0);
  __chkstk_darwin(v4);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[1];
  v15[0] = *a1;
  v15[1] = v7;
  static Locale.current.getter(v8);
  v9 = type metadata accessor for Locale(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v6, 0, 1, v9);
  v10 = sub_1000E525C();
  v11 = StringProtocol.foldedStringForWriting(locale:)(v6, &type metadata for String, v10);
  v13 = v12;
  result = sub_10000882C((uint64_t)v6, (uint64_t *)&unk_10083FBE0);
  *a2 = v11;
  a2[1] = v13;
  return result;
}

uint64_t sub_1004D5F38@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(_BYTE *, _QWORD);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[32];
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  _QWORD *v36;

  v2 = *(_QWORD *)(result + 16);
  if ((v2 & 0xC000000000000001) != 0)
  {
    v30 = a2;
    if (v2 < 0)
      v3 = *(_QWORD *)(result + 16);
    else
      v3 = v2 & 0xFFFFFFFFFFFFFF8;
    result = __CocoaSet.count.getter(v3);
    v4 = _swiftEmptyArrayStorage;
    if (!result)
    {
LABEL_21:
      a2 = v30;
      goto LABEL_22;
    }
    v5 = result;
    v36 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(result);
    result = __CocoaSet.startIndex.getter(v3);
    v33 = result;
    v34 = v6;
    a2 = 1;
    v35 = 1;
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_10;
    __break(1u);
  }
  v5 = *(_QWORD *)(v2 + 16);
  v4 = _swiftEmptyArrayStorage;
  if (!v5)
  {
LABEL_22:
    *(_QWORD *)a2 = v4;
    return result;
  }
  v30 = a2;
  v36 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v5);
  v33 = sub_100364E8C(v2);
  v34 = v7;
  v35 = v8 & 1;
LABEL_10:
  v9 = v2 & 0xFFFFFFFFFFFFFF8;
  if (v2 < 0)
    v9 = v2;
  v31 = v9;
  while (1)
  {
    while (1)
    {
      v15 = v33;
      v16 = v34;
      v17 = v35;
      sub_100364660(v33, v34, v35, v2);
      v19 = v18;
      v20 = REMObjectID.codable.getter(v18);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v21);
      v22 = v36[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v22);
      v23 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
      result = specialized ContiguousArray._endMutation()(v23);
      if ((v2 & 0xC000000000000001) != 0)
        break;
      v10 = sub_10036456C(v15, v16, v17, v2);
      v12 = v11;
      v14 = v13;
      sub_1000E515C(v15, v16, v17);
      v33 = v10;
      v34 = v12;
      v35 = v14 & 1;
      if (!--v5)
        goto LABEL_20;
    }
    if ((v17 & 1) == 0)
      break;
    v24 = __CocoaSet.Index.handleBitPattern.getter(v15, v16);
    if (v24)
    {
      swift_isUniquelyReferenced_nonNull_native(v24);
      v26 = v25;
    }
    else
    {
      v26 = 1;
    }
    v27 = sub_10001A630(&qword_1008466D8);
    v28 = (void (*)(_BYTE *, _QWORD))Set.Index._asCocoa.modify(v32, v27);
    __CocoaSet.formIndex(after:isUnique:)(v29, v26, v31);
    v28(v32, 0);
    if (!--v5)
    {
LABEL_20:
      result = sub_1000E515C(v33, v34, v35);
      v4 = v36;
      goto LABEL_21;
    }
  }
  __break(1u);
  return result;
}

id sub_1004D6148@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *a2 = *a1;
  return v2;
}

uint64_t sub_1004D6174()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(v0, "hashtagLabelsInCustomSmartListFilterCache");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void sub_1004D61D8(uint64_t a1, unint64_t a2)
{
  void *v2;
  Class isa;

  if (a2 >> 60 == 15)
  {
    isa = 0;
    objc_msgSend(v2, "setHashtagLabelsInCustomSmartListFilterCache:", 0);
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71B4(a1, a2);
    objc_msgSend(v2, "setHashtagLabelsInCustomSmartListFilterCache:", isa);
  }

}

uint64_t sub_1004D6248(uint64_t a1)
{
  return sub_1004D6264(a1, (uint64_t)sub_1004D8398);
}

uint64_t sub_1004D6264(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  BOOL v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = v2;
  sub_10001A630((uint64_t *)&unk_100844520);
  result = static _DictionaryStorage.copy(original:)(a1);
  v6 = 0;
  v31 = a1;
  v9 = *(_QWORD *)(a1 + 64);
  v8 = a1 + 64;
  v7 = v9;
  v10 = 1 << *(_BYTE *)(v8 - 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v7;
  v29 = (unint64_t)(v10 + 63) >> 6;
  v30 = result + 64;
  v33 = (_QWORD *)result;
  if (!v12)
    goto LABEL_5;
LABEL_4:
  v37 = v3;
  v34 = (v12 - 1) & v12;
  v35 = v6;
  for (i = __clz(__rbit64(v12)) | (v6 << 6); ; i = __clz(__rbit64(v16)) + (v15 << 6))
  {
    v18 = (uint64_t *)(*(_QWORD *)(v31 + 48) + 16 * i);
    v19 = v18[1];
    v36 = *v18;
    v20 = *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * i);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    v21 = sub_10001A630(&qword_10084CE60);
    v22 = type metadata accessor for REMObjectID_Codable(0);
    v23 = sub_1004D7A10(&qword_10084CE68, &qword_10084CE60);
    v24 = sub_10009FC50((unint64_t *)&unk_100840EC0, (uint64_t (*)(uint64_t))&type metadata accessor for REMObjectID_Codable, (uint64_t)&protocol conformance descriptor for NSObject);
    v25 = Sequence.mapToSet<A>(_:)(a2, 0, v21, v22, v23, v24);
    v3 = v37;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v30 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    result = (uint64_t)v33;
    v26 = (_QWORD *)(v33[6] + 16 * i);
    *v26 = v36;
    v26[1] = v19;
    *(_QWORD *)(v33[7] + 8 * i) = v25;
    v27 = v33[2];
    v14 = __OFADD__(v27, 1);
    v28 = v27 + 1;
    if (v14)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v33[2] = v28;
    v12 = v34;
    v6 = v35;
    if (v34)
      goto LABEL_4;
LABEL_5:
    v14 = __OFADD__(v6, 1);
    v15 = v6 + 1;
    if (v14)
      goto LABEL_25;
    if (v15 >= v29)
      return result;
    v16 = *(_QWORD *)(v8 + 8 * v15);
    if (!v16)
      break;
LABEL_15:
    v37 = v3;
    v34 = (v16 - 1) & v16;
    v35 = v15;
  }
  v17 = v15 + 1;
  if (v15 + 1 >= v29)
    return result;
  v16 = *(_QWORD *)(v8 + 8 * v17);
  if (v16)
    goto LABEL_14;
  v17 = v15 + 2;
  if (v15 + 2 >= v29)
    return result;
  v16 = *(_QWORD *)(v8 + 8 * v17);
  if (v16)
    goto LABEL_14;
  v17 = v15 + 3;
  if (v15 + 3 >= v29)
    return result;
  v16 = *(_QWORD *)(v8 + 8 * v17);
  if (v16)
  {
LABEL_14:
    v15 = v17;
    goto LABEL_15;
  }
  while (1)
  {
    v15 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v15 >= v29)
      return result;
    v16 = *(_QWORD *)(v8 + 8 * v15);
    ++v17;
    if (v16)
      goto LABEL_15;
  }
LABEL_26:
  __break(1u);
  return result;
}

Swift::Int sub_1004D650C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  Swift::Int result;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  char v21;
  _QWORD *v22;
  unint64_t v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  _QWORD *v36;

  v2 = a2;
  v4 = a1 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (v4)
      return sub_1003F16D0(a1, a2);
    else
      return sub_10050A4A0(a1, a2);
  }
  if (!v4)
  {
    v8 = type metadata accessor for REMObjectID_Codable(0);
    v9 = &_swiftEmptySetSingleton;
    v36 = &_swiftEmptySetSingleton;
    if (v2 < 0)
      v10 = v2;
    else
      v10 = v2 & 0xFFFFFFFFFFFFFF8;
    v11 = __CocoaSet.makeIterator()(v10);
    v12 = __CocoaSet.Iterator.next()(v11);
    if (!v12)
    {
LABEL_35:
      swift_release(v11);
      return (Swift::Int)v9;
    }
    v13 = a1 + 56;
    while (1)
    {
      v34 = v12;
      swift_dynamicCast(&v35, &v34, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
      if (*(_QWORD *)(a1 + 16))
      {
        v14 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a1 + 40));
        v15 = -1 << *(_BYTE *)(a1 + 32);
        v16 = v14 & ~v15;
        if (((*(_QWORD *)(v13 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
        {
          v17 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v16);
          v18 = static NSObject.== infix(_:_:)(v17);

          if ((v18 & 1) != 0)
          {
LABEL_21:
            v22 = v36;
            v23 = v36[2];
            if (v36[3] <= v23)
            {
              sub_1002DEAB4(v23 + 1);
              v22 = v36;
            }
            v24 = v35;
            result = NSObject._rawHashValue(seed:)(v22[5]);
            v25 = v22 + 7;
            v26 = -1 << *((_BYTE *)v22 + 32);
            v27 = result & ~v26;
            v28 = v27 >> 6;
            if (((-1 << v27) & ~v22[(v27 >> 6) + 7]) != 0)
            {
              v29 = __clz(__rbit64((-1 << v27) & ~v22[(v27 >> 6) + 7])) | v27 & 0x7FFFFFFFFFFFFFC0;
            }
            else
            {
              v30 = 0;
              v31 = (unint64_t)(63 - v26) >> 6;
              do
              {
                if (++v28 == v31 && (v30 & 1) != 0)
                {
                  __break(1u);
                  return result;
                }
                v32 = v28 == v31;
                if (v28 == v31)
                  v28 = 0;
                v30 |= v32;
                v33 = v25[v28];
              }
              while (v33 == -1);
              v29 = __clz(__rbit64(~v33)) + (v28 << 6);
            }
            *(_QWORD *)((char *)v25 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
            *(_QWORD *)(v22[6] + 8 * v29) = v24;
            ++v22[2];
            goto LABEL_14;
          }
          v19 = ~v15;
          while (1)
          {
            v16 = (v16 + 1) & v19;
            if (((*(_QWORD *)(v13 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
              break;
            v20 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v16);
            v21 = static NSObject.== infix(_:_:)(v20);

            if ((v21 & 1) != 0)
              goto LABEL_21;
          }
        }
      }

LABEL_14:
      v12 = __CocoaSet.Iterator.next()(result);
      if (!v12)
      {
        v9 = v36;
        goto LABEL_35;
      }
    }
  }
  if (a2 >= 0)
    v2 = a2 & 0xFFFFFFFFFFFFFF8;
  v5 = __CocoaSet.count.getter(v2);
  v6 = sub_1002DE3BC(v2, v5);
  return sub_1003F16D0(a1, v6);
}

uint64_t sub_1004D6808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  int v9;
  char v10;
  objc_class *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  objc_class *v16;
  uint64_t *v17;
  uint64_t v18;
  id v19;
  NSString v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  _QWORD *v27;

  v1 = type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsInvocation.SortingStyle(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A630(&qword_1008422D8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  REMHashtagLabelDataView.AllHashtagLabelsInvocation.Parameters.sortingStyle.getter(v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v8, 1, v1) == 1)
  {
    sub_10000882C((uint64_t)v8, &qword_1008422D8);
LABEL_5:
    v10 = 0;
    goto LABEL_8;
  }
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v8, v1);
  v9 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v4, v1);
  if (v9 == enum case for REMHashtagLabelDataView.AllHashtagLabelsInvocation.SortingStyle.alphabetical(_:))
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v8, v1);
    goto LABEL_5;
  }
  if (v9 != enum case for REMHashtagLabelDataView.AllHashtagLabelsInvocation.SortingStyle.recencyDate(_:))
  {
    result = _diagnoseUnexpectedEnumCase<A>(type:)(v1, v1);
    __break(1u);
    return result;
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v8, v1);
  v10 = 1;
LABEL_8:
  v11 = (objc_class *)sub_1001DFBD0((uint64_t)&off_1007DB320);
  swift_arrayDestroy(&unk_1007DB340, 1, &type metadata for String);
  v12 = _swiftEmptyArrayStorage;
  v13 = sub_10037C198(0, 2, v10, v11, (Class)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  if (!v0)
  {
    v14 = sub_10037C46C(v13);
    swift_bridgeObjectRelease();
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v15);
      v16 = (objc_class *)type metadata accessor for REMHashtagLabel_Codable(0);
      v17 = (uint64_t *)(v14 + 40);
      do
      {
        v18 = *v17;
        v19 = objc_allocWithZone(v16);
        swift_bridgeObjectRetain(v18);
        v20 = String._bridgeToObjectiveC()();
        v21 = objc_msgSend(v19, "initWithName:", v20, swift_bridgeObjectRelease().n128_f64[0]);

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
        v23 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
        v24 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v21);
        specialized ContiguousArray._endMutation()(v24);
        v17 += 2;
        --v15;
      }
      while (v15);
      v12 = v27;
    }
    swift_bridgeObjectRelease();
  }
  return (uint64_t)v12;
}

const char *sub_1004D6AB8()
{
  return "filterData";
}

void sub_1004D6ACC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;

  swift_bridgeObjectRetain(a1);
  v3 = sub_1004D4658(v2);
  swift_bridgeObjectRelease();
  if (!v3)
  {
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
      goto LABEL_31;
    return;
  }
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v9 = 0;
  while (1)
  {
    if (v7)
    {
      v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_6;
    }
    v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v13 >= v8)
      goto LABEL_26;
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v9;
    if (!v14)
    {
      v9 = v13 + 1;
      if (v13 + 1 >= v8)
        goto LABEL_26;
      v14 = *(_QWORD *)(v4 + 8 * v9);
      if (!v14)
      {
        v9 = v13 + 2;
        if (v13 + 2 >= v8)
          goto LABEL_26;
        v14 = *(_QWORD *)(v4 + 8 * v9);
        if (!v14)
        {
          v9 = v13 + 3;
          if (v13 + 3 >= v8)
            goto LABEL_26;
          v14 = *(_QWORD *)(v4 + 8 * v9);
          if (!v14)
          {
            v9 = v13 + 4;
            if (v13 + 4 >= v8)
              goto LABEL_26;
            v14 = *(_QWORD *)(v4 + 8 * v9);
            if (!v14)
              break;
          }
        }
      }
    }
LABEL_25:
    v7 = (v14 - 1) & v14;
    v11 = __clz(__rbit64(v14)) + (v9 << 6);
LABEL_6:
    swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v11));
    sub_1002B6724(v12);
  }
  v15 = v13 + 5;
  if (v15 >= v8)
  {
LABEL_26:
    swift_release(a1);
    return;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
    v9 = v15;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v9 >= v8)
      goto LABEL_26;
    v14 = *(_QWORD *)(v4 + 8 * v9);
    ++v15;
    if (v14)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
LABEL_31:
  if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    sub_1002E7B70((uint64_t)_swiftEmptyArrayStorage);
}

void sub_1004D6CA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  swift_bridgeObjectRetain(a1);
  v3 = sub_1004D4354(v2);
  swift_bridgeObjectRelease();
  if (!v3)
  {
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
      goto LABEL_31;
    return;
  }
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v9 = 0;
  while (1)
  {
    if (v7)
    {
      v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_6;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v14 >= v8)
      goto LABEL_26;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v9;
    if (!v15)
    {
      v9 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_26;
      v15 = *(_QWORD *)(v4 + 8 * v9);
      if (!v15)
      {
        v9 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_26;
        v15 = *(_QWORD *)(v4 + 8 * v9);
        if (!v15)
        {
          v9 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_26;
          v15 = *(_QWORD *)(v4 + 8 * v9);
          if (!v15)
          {
            v9 = v14 + 4;
            if (v14 + 4 >= v8)
              goto LABEL_26;
            v15 = *(_QWORD *)(v4 + 8 * v9);
            if (!v15)
              break;
          }
        }
      }
    }
LABEL_25:
    v7 = (v15 - 1) & v15;
    v11 = __clz(__rbit64(v15)) + (v9 << 6);
LABEL_6:
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v11);
    swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v11 + 8));
    swift_bridgeObjectRetain(v12);
    v3 = sub_1004D650C(v13, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v16 = v14 + 5;
  if (v16 >= v8)
  {
LABEL_26:
    swift_release(a1);
    return;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v9 = v16;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v9 >= v8)
      goto LABEL_26;
    v15 = *(_QWORD *)(v4 + 8 * v9);
    ++v16;
    if (v15)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
LABEL_31:
  if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    sub_1002E7B70((uint64_t)_swiftEmptyArrayStorage);
}

_QWORD *sub_1004D6EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v5 = v4;
  v49 = a3;
  v9 = (_QWORD *)type metadata accessor for REMHashtagLabelDataView.Operation(0);
  v10 = *(v9 - 1);
  __chkstk_darwin(v9);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16))
  {
    v50 = a1;
    v13 = sub_10001A630(&qword_100841A60);
    v14 = sub_1004D7A10((unint64_t *)&qword_100841A68, &qword_100841A60);
    v15 = Sequence.compactMapToSet<A>(_:)(sub_1004D4E98, 0, v13, &type metadata for String, v14, &protocol witness table for String);
    v16 = sub_10037DD78(v15, 0, a4);
    swift_bridgeObjectRelease();
    if (v4)
      return v9;
    v48 = sub_1004D6264(v16, (uint64_t)sub_1004D4EAC);
    v5 = 0;
    swift_bridgeObjectRelease();
    if (!*(_QWORD *)(a2 + 16))
      goto LABEL_4;
  }
  else
  {
    v48 = sub_1002AF818((uint64_t)_swiftEmptyArrayStorage);
    if (!*(_QWORD *)(a2 + 16))
    {
LABEL_4:
      v47 = a4;
      v17 = sub_1002AF818((uint64_t)_swiftEmptyArrayStorage);
      goto LABEL_8;
    }
  }
  v50 = a2;
  v18 = sub_10001A630(&qword_100841A60);
  v19 = sub_1004D7A10((unint64_t *)&qword_100841A68, &qword_100841A60);
  v20 = Sequence.compactMapToSet<A>(_:)(sub_1004D4E98, 0, v18, &type metadata for String, v19, &protocol witness table for String);
  v21 = sub_10037DD78(v20, 0, a4);
  if (v5)
    goto LABEL_14;
  v22 = v21;
  v47 = a4;
  swift_bridgeObjectRelease();
  v17 = sub_1004D6264(v22, (uint64_t)sub_1004D4EAC);
  swift_bridgeObjectRelease();
LABEL_8:
  sub_1004D6ACC(v17);
  v24 = v23;
  v25 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, _QWORD *, __n128))(v10 + 16))(v12, v49, v9, v25);
  v26 = (*(uint64_t (**)(char *, _QWORD *))(v10 + 88))(v12, v9);
  if (v26 == enum case for REMHashtagLabelDataView.Operation.all(_:))
  {
    v27 = v47;
    if (*(_QWORD *)(v48 + 16) == *(_QWORD *)(a1 + 16))
    {
      sub_1004D6CA8(v48);
      v9 = v28;
    }
    else
    {
      v9 = &_swiftEmptySetSingleton;
    }
    swift_bridgeObjectRelease();
    v33 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a1 + 16))
    {
      if (v33)
      {
        v34 = v24;
        v35 = (uint64_t)v9;
LABEL_21:
        v9 = sub_1004D4260(v34, v35);
        goto LABEL_15;
      }
      goto LABEL_15;
    }
    swift_bridgeObjectRelease();
    if (v33)
    {
      v36 = sub_10037DD78(2, 2, v27);
      if (!v5)
      {
        v37 = sub_1004D6264(v36, (uint64_t)sub_1004D8398);
        swift_bridgeObjectRelease();
        sub_1004D6ACC(v37);
        v39 = v38;
        swift_release(v37);
        v34 = v24;
        v35 = v39;
        goto LABEL_21;
      }
LABEL_15:
      swift_bridgeObjectRelease();
      return v9;
    }
    goto LABEL_30;
  }
  v29 = v47;
  if (v26 == enum case for REMHashtagLabelDataView.Operation.some(_:))
  {
    sub_1004D6ACC(v48);
    v9 = v30;
    swift_bridgeObjectRelease();
    if (!*(_QWORD *)(a2 + 16))
    {
      v40 = *(_QWORD *)(a1 + 16);
      swift_bridgeObjectRelease();
      if (v40)
        return v9;
LABEL_30:
      swift_bridgeObjectRelease();
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0
        || !_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      {
        return &_swiftEmptySetSingleton;
      }
      sub_1002E7B70((uint64_t)_swiftEmptyArrayStorage);
      return (_QWORD *)v45;
    }
    v31 = sub_10037DD78(2, 2, v29);
    if (!v5)
    {
      v41 = sub_1004D6264(v31, (uint64_t)sub_1004D8398);
      swift_bridgeObjectRelease();
      sub_1004D6ACC(v41);
      v43 = v42;
      swift_release(v41);
      v44 = sub_1004D4260(v24, v43);
      swift_bridgeObjectRelease();
      sub_10059DA70((uint64_t)v44, v9);
      return (_QWORD *)v45;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  result = (_QWORD *)_diagnoseUnexpectedEnumCase<A>(type:)(v9, v9);
  __break(1u);
  return result;
}

uint64_t sub_1004D731C(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType;
  uint64_t v4;
  __n128 v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  ObjectType = swift_getObjectType();
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(ObjectType, a2);
  v7 = v6;
  result = 0;
  if (v6 >> 60 != 15)
  {
    v9 = type metadata accessor for PropertyListDecoder(0, v5);
    swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    v10 = PropertyListDecoder.init()();
    v11 = sub_1004D7988();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&_s5CacheVN, v4, v7, &_s5CacheVN, v11);
    swift_release(v10);
    sub_1000A71B4(v4, v7);
    return v12;
  }
  return result;
}

uint64_t sub_1004D75C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t ObjectType;
  _QWORD v19[2];

  v7 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v8 = PropertyListEncoder.init()();
  v19[0] = a1;
  v19[1] = a2;
  v9 = sub_1004D79CC();
  v10 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v19, &_s5CacheVN, v9);
  v12 = v11;
  if (qword_100837720 != -1)
    swift_once(&qword_100837720, sub_1004D495C);
  v13 = type metadata accessor for Logger(0);
  sub_10001AAA8(v13, (uint64_t)qword_10084CD70);
  v14 = sub_1000A70E4(v10, v12);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    *(_DWORD *)swift_slowAlloc(12, -1) = 134217984;
    __asm { BR              X10 }
  }
  sub_1000A71C8(v10, v12);

  swift_release(v8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a4 + 16))(v10, v12, ObjectType, a4);
}

unint64_t sub_1004D7988()
{
  unint64_t result;

  result = qword_10084CE50;
  if (!qword_10084CE50)
  {
    result = swift_getWitnessTable(&unk_1006BF5D8, &_s5CacheVN);
    atomic_store(result, (unint64_t *)&qword_10084CE50);
  }
  return result;
}

unint64_t sub_1004D79CC()
{
  unint64_t result;

  result = qword_10084CE58;
  if (!qword_10084CE58)
  {
    result = swift_getWitnessTable(&unk_1006BF5B0, &_s5CacheVN);
    atomic_store(result, (unint64_t *)&qword_10084CE58);
  }
  return result;
}

uint64_t sub_1004D7A10(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1000A5A94(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004D7A50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  objc_class *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  id v26;
  uint64_t v27;

  v1 = type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsInvocation.SortingStyle(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A630(&qword_1008422D8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  REMHashtagLabelDataView.AllHashtagLabelsDetailedInvocation.Parameters.sortingStyle.getter(v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v8, 1, v1) == 1)
  {
    sub_10000882C((uint64_t)v8, &qword_1008422D8);
LABEL_5:
    v10 = 0;
    goto LABEL_8;
  }
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v8, v1);
  v9 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v4, v1);
  if (v9 == enum case for REMHashtagLabelDataView.AllHashtagLabelsInvocation.SortingStyle.alphabetical(_:))
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v8, v1);
    goto LABEL_5;
  }
  if (v9 != enum case for REMHashtagLabelDataView.AllHashtagLabelsInvocation.SortingStyle.recencyDate(_:))
  {
    result = _diagnoseUnexpectedEnumCase<A>(type:)(v1, v1);
    __break(1u);
    return result;
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v8, v1);
  v10 = 1;
LABEL_8:
  v11 = (objc_class *)sub_1001DFBD0((uint64_t)&off_1007DB468);
  swift_arrayDestroy(&unk_1007DB488, 1, &type metadata for String);
  v12 = sub_10037C198(0, 2, v10, v11, (Class)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  if (!v0)
  {
    v27 = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v12 >> 62)
      goto LABEL_23;
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v12);
    for (; v13; v13 = _CocoaArrayWrapper.endIndex.getter(v23))
    {
      v14 = 4;
      while (1)
      {
        v16 = (v12 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14 - 4, v12)
            : *(id *)(v12 + 8 * v14);
        v17 = v16;
        v18 = v14 - 3;
        if (__OFADD__(v14 - 4, 1))
          break;
        v26 = v16;
        sub_1004D4A28(&v26, &v25);

        v20 = v25;
        if (v25)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v19);
          v22 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v21 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v22 >= v21 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1);
          v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
          specialized Array._endMutation()(v15);
        }
        ++v14;
        if (v18 == v13)
        {
          swift_bridgeObjectRelease();
          v10 = v27;
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_23:
      if (v12 < 0)
        v23 = v12;
      else
        v23 = v12 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v12);
    }
    swift_bridgeObjectRelease();
    v10 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_28:
    swift_bridgeObjectRelease();
  }
  return v10;
}

uint64_t *_s5CacheVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = *a2;
  v4 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = (uint64_t)v4;
  swift_bridgeObjectRetain(v3);
  v5 = v4;
  return a1;
}

void _s5CacheVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)a1);

}

uint64_t *_s5CacheVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = (void *)a2[1];
  v7 = (void *)a1[1];
  a1[1] = (uint64_t)v6;
  v8 = v6;

  return a1;
}

_QWORD *_s5CacheVwta(_QWORD *a1, _OWORD *a2)
{
  void *v4;

  swift_bridgeObjectRelease(*a1);
  v4 = (void *)a1[1];
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *_s5CacheVMa_0()
{
  return &_s5CacheVN;
}

uint64_t sub_1004D7E70(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x736C6562616CLL && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736C6562616CLL, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E656B6F74 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E656B6F74, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1004D7F50(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;

  v3 = sub_10001A630(&qword_10084CE70);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10000A388(a1, v7);
  v9 = sub_1004D814C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s5CacheV10CodingKeysON_0, &_s5CacheV10CodingKeysON_0, v9, v7, v8);
  if (v1)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  }
  else
  {
    v10 = sub_10001A630((uint64_t *)&unk_10083AE10);
    HIBYTE(v16) = 0;
    v11 = sub_1004D8190(&qword_10083F6A8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v10, (char *)&v16 + 7, v3, v10, v11);
    v7 = (uint64_t)v17;
    v13 = type metadata accessor for REMFetchResultToken_Codable(0);
    HIBYTE(v16) = 1;
    v14 = sub_10009FC50(&qword_10084CE80, (uint64_t (*)(uint64_t))&type metadata accessor for REMFetchResultToken_Codable, (uint64_t)&protocol conformance descriptor for REMFetchResultToken_Codable);
    swift_bridgeObjectRetain(v7);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v13, (char *)&v16 + 7, v3, v13, v14);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v15 = v17;
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);

    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_1004D814C()
{
  unint64_t result;

  result = qword_10084CE78;
  if (!qword_10084CE78)
  {
    result = swift_getWitnessTable(&unk_1006BF6C4, &_s5CacheV10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_10084CE78);
  }
  return result;
}

uint64_t sub_1004D8190(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000A5A94((uint64_t *)&unk_10083AE10);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s5CacheV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1004D823C + 4 * byte_1006BF435[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1004D8270 + 4 * asc_1006BF430[v4]))();
}

uint64_t sub_1004D8270(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004D8278(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1004D8280);
  return result;
}

uint64_t sub_1004D828C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1004D8294);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1004D8298(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004D82A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s5CacheV10CodingKeysOMa_0()
{
  return &_s5CacheV10CodingKeysON_0;
}

unint64_t sub_1004D82C0()
{
  unint64_t result;

  result = qword_10084CE98;
  if (!qword_10084CE98)
  {
    result = swift_getWitnessTable(&unk_1006BF69C, &_s5CacheV10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_10084CE98);
  }
  return result;
}

unint64_t sub_1004D8308()
{
  unint64_t result;

  result = qword_10084CEA0;
  if (!qword_10084CEA0)
  {
    result = swift_getWitnessTable(&unk_1006BF60C, &_s5CacheV10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_10084CEA0);
  }
  return result;
}

unint64_t sub_1004D8350()
{
  unint64_t result;

  result = qword_10084CEA8;
  if (!qword_10084CEA8)
  {
    result = swift_getWitnessTable(&unk_1006BF634, &_s5CacheV10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_10084CEA8);
  }
  return result;
}

uint64_t sub_1004D8398@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1004D4EAC(a1, a2);
}

unint64_t sub_1004D83AC(uint64_t a1)
{
  unint64_t result;

  result = sub_1004D83D0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1004D83D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10084CEE8;
  if (!qword_10084CEE8)
  {
    v1 = type metadata accessor for REMSuggestedAttributesFeatureExtractor(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for REMSuggestedAttributesFeatureExtractor, v1);
    atomic_store(result, (unint64_t *)&qword_10084CEE8);
  }
  return result;
}

uint64_t sub_1004D8418()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084CEB0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084CEB0);
  if (qword_100837630 != -1)
    swift_once(&qword_100837630, sub_1004A1854);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872070);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

unint64_t sub_1004D84A8@<X0>(unint64_t a1@<X1>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t result;
  __n128 v28;
  __n128 v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *countAndFlagsBits;
  unint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  void (*v47)(char *, char *, uint64_t);
  char v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (*v86)(char *, unint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  char *v92;
  __n128 v93;
  uint64_t v94;
  char v95;
  BOOL v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  __n128 v100;
  uint64_t v101;
  void *object;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  Swift::String v118;
  uint64_t v119;
  void (*v120)(Swift::String *, _QWORD);
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  Swift::String v124;
  Swift::String v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  void *v129;
  Swift::String v130;
  Swift::String v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  void *v136;
  Swift::String v137;
  Swift::String v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  void *v143;
  Swift::String v144;
  Swift::String v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  void *v150;
  Swift::String v151;
  Swift::String v152;
  __n128 v153;
  Swift::String v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  void *v160;
  unint64_t v161;
  uint64_t v162;
  void *v163;
  void *v164;
  uint64_t v165;
  void *v166;
  void *v167;
  uint64_t v168;
  void *v169;
  void *v170;
  Swift::String v171;
  uint64_t v172;
  _QWORD v173[3];
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  void (*v179)(char *, uint64_t);
  char *v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void (*v199)(char *, char *, uint64_t);
  __int128 v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  Swift::String v208;
  Swift::String v209;
  uint64_t v210;
  void *v211;

  v201 = a1;
  v191 = a3;
  v195 = type metadata accessor for Date(0);
  v194 = *(_QWORD *)(v195 - 8);
  __chkstk_darwin(v195);
  v186 = (char *)&v174 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = sub_10001A630((uint64_t *)&unk_100846C40);
  __chkstk_darwin(v190);
  v189 = (char *)&v174 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v6);
  v196 = (uint64_t)&v174 - v8;
  v188 = type metadata accessor for REMSuggestedAttributesTrainer.Result.IntentionalWord(0, v7);
  v187 = *(_QWORD *)(v188 - 8);
  __chkstk_darwin(v188);
  v192 = (uint64_t)&v174 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v174 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = sub_10001A630((uint64_t *)&unk_100840780);
  v197 = *(_QWORD *)(v198 - 8);
  __chkstk_darwin(v198);
  v15 = (char *)&v174 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v174 - v17;
  v20 = type metadata accessor for REMSuggestedAttributeInputDataFrame(0, v19);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v174 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = REMSuggestedAttributesFeatureExtractor.Parameters.maxSampleCount.getter(v22);
  v26 = v202;
  result = sub_100255528(v25, v201);
  if (!v26)
  {
    v180 = v15;
    v178 = v13;
    v177 = v11;
    v184 = v21;
    v176 = v10;
    v183 = v20;
    v185 = a2;
    REMSuggestedAttributeInputDataFrame.init(reminderDataSourceArray:)(v28);
    v30 = REMSuggestedAttributeInputDataFrame.index.getter(v29);
    __chkstk_darwin(v30);
    v193 = v24;
    v173[2] = v24;
    v31 = sub_1003511A8((void (*)(uint64_t *__return_ptr, uint64_t *))sub_100255910, (uint64_t)v173);
    v182 = 0;
    v179 = *(void (**)(char *, uint64_t))(v197 + 8);
    v179(v18, v198);
    countAndFlagsBits = _swiftEmptyDictionarySingleton;
    v209._countAndFlagsBits = (uint64_t)_swiftEmptyDictionarySingleton;
    v33 = v31[2];
    v181 = v31;
    if (v33)
    {
      v34 = v31 + 7;
      v200 = xmmword_1006A3C00;
      do
      {
        v36 = *(v34 - 3);
        v37 = *(v34 - 2);
        v38 = *(v34 - 1);
        v39 = *v34;
        swift_bridgeObjectRetain_n(*v34, 2);
        swift_bridgeObjectRetain(v37);
        v41 = sub_10001A6DC(v38, v39);
        v42 = countAndFlagsBits[2];
        v43 = (v40 & 1) == 0;
        v44 = v42 + v43;
        if (__OFADD__(v42, v43))
        {
          __break(1u);
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        v11 = v40;
        if (countAndFlagsBits[3] < v44)
        {
          sub_1002CE7C4(v44, 1);
          countAndFlagsBits = (_QWORD *)v209._countAndFlagsBits;
          v45 = sub_10001A6DC(v38, v39);
          if ((v11 & 1) != (v46 & 1))
          {
            result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
            __break(1u);
            return result;
          }
          v41 = v45;
        }
        if ((v11 & 1) != 0)
        {
          v201 = v33;
          v202 = v36;
          swift_bridgeObjectRelease();
          v47 = (void (*)(char *, char *, uint64_t))countAndFlagsBits[7];
          v11 = *((_QWORD *)v47 + v41);
          swift_isUniquelyReferenced_nonNull_native(v11);
          v199 = v47;
          *((_QWORD *)v47 + v41) = v11;
          if ((v48 & 1) == 0)
          {
            v11 = (uint64_t)sub_1002C87D8(0, *(_QWORD *)(v11 + 16) + 1, 1, (_QWORD *)v11);
            *((_QWORD *)v199 + v41) = v11;
          }
          v50 = *(_QWORD *)(v11 + 16);
          v49 = *(_QWORD *)(v11 + 24);
          v51 = v50 + 1;
          v33 = v201;
          if (v50 >= v49 >> 1)
          {
            v175 = v50 + 1;
            v52 = sub_1002C87D8((_QWORD *)(v49 > 1), v50 + 1, 1, (_QWORD *)v11);
            v51 = v175;
            v11 = (uint64_t)v52;
            *((_QWORD *)v199 + v41) = v52;
          }
          *(_QWORD *)(v11 + 16) = v51;
          v35 = (_QWORD *)(v11 + 32 * v50);
          v35[4] = v202;
          v35[5] = v37;
          v35[6] = v38;
          v35[7] = v39;
        }
        else
        {
          v53 = sub_10001A630(&qword_100841C90);
          v54 = swift_allocObject(v53, 64, 7);
          *(_OWORD *)(v54 + 16) = v200;
          *(_QWORD *)(v54 + 32) = v36;
          *(_QWORD *)(v54 + 40) = v37;
          *(_QWORD *)(v54 + 48) = v38;
          *(_QWORD *)(v54 + 56) = v39;
          countAndFlagsBits[(v41 >> 6) + 8] |= 1 << v41;
          v55 = (uint64_t *)(countAndFlagsBits[6] + 16 * v41);
          *v55 = v38;
          v55[1] = v39;
          *(_QWORD *)(countAndFlagsBits[7] + 8 * v41) = v54;
          v56 = countAndFlagsBits[2];
          v57 = __OFADD__(v56, 1);
          v58 = v56 + 1;
          if (v57)
            goto LABEL_40;
          countAndFlagsBits[2] = v58;
        }
        v34 += 4;
        --v33;
      }
      while (v33);
    }
    swift_bridgeObjectRelease();
    v59 = v182;
    sub_100246A20((uint64_t)countAndFlagsBits);
    v41 = v60;
    v11 = v59;
    swift_release(countAndFlagsBits);
    if (qword_100837728 != -1)
LABEL_41:
      swift_once(&qword_100837728, sub_1004D8418);
    v61 = type metadata accessor for Logger(0);
    sub_10001AAA8(v61, (uint64_t)qword_10084CEB0);
    swift_bridgeObjectRetain_n(v41, 2);
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.default.getter(v63);
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc(12, -1);
      v66 = swift_slowAlloc(32, -1);
      v209._countAndFlagsBits = v66;
      *(_DWORD *)v65 = 136315138;
      v202 = v11;
      swift_bridgeObjectRetain(v41);
      v68 = Array.description.getter(v67, &type metadata for String);
      v70 = v69;
      swift_bridgeObjectRelease();
      v208._countAndFlagsBits = sub_10001A820(v68, v70, &v209._countAndFlagsBits);
      v11 = v202;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v208, &v208._object);
      swift_bridgeObjectRelease_n(v41, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Training REMFilteredTitleEmbedding with %s", v65, 0xCu);
      swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v65, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v41, 2);
    }
    v71 = v184;
    v72 = v193;
    v73 = type metadata accessor for REMFilteredTitleEmbedding(0);
    swift_allocObject(v73, *(unsigned int *)(v73 + 48), *(unsigned __int16 *)(v73 + 52));
    v74 = REMFilteredTitleEmbedding.init(from:stopWordThresholdByPercent:)(v41, 0.8);
    if (v11)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v72, v183);
    }
    else
    {
      v75 = v74;
      v76 = REMSuggestedAttributeInputDataFrame.title.getter();
      swift_retain();
      v77 = sub_100255928(v76);
      swift_release(v76);
      swift_release(v75);
      v209._countAndFlagsBits = REMFilteredTitleEmbedding.vector(for:)(0, 0xE000000000000000, v78);
      v79 = sub_10001A630(&qword_100841C98);
      swift_allocObject(v79, *(unsigned int *)(v79 + 48), *(unsigned __int16 *)(v79 + 52));
      v202 = Series.init(_:defaultValue:)(v77, &v209);
      sub_1004D94C4();
      v80 = (uint64_t)v178;
      static REMPaths.writableURLForMLModel()();
      v201 = type metadata accessor for REMSuggestedAttributesTrainer(0);
      v81 = dispatch thunk of Series.values.getter(v201);
      *(_QWORD *)&v200 = REMSuggestedAttributesFeatureExtractor.Parameters.numOfIntentWords.getter();
      v82 = REMSuggestedAttributesFeatureExtractor.Parameters.randomSeed.getter();
      v83 = type metadata accessor for MersenneTwister(0);
      swift_allocObject(v83, *(unsigned int *)(v83 + 48), *(unsigned __int16 *)(v83 + 52));
      v84 = MersenneTwister.init(seed:)(v82);
      v210 = v73;
      v211 = &protocol witness table for REMFilteredTitleEmbedding;
      v209._countAndFlagsBits = v75;
      v85 = swift_retain();
      v86 = (uint64_t (*)(char *, unint64_t, uint64_t))REMSuggestedAttributesFeatureExtractor.Parameters.outputFileName.getter(v85);
      v88 = v192;
      v89 = v200;
      v199 = (void (*)(char *, char *, uint64_t))v81;
      *(_QWORD *)&v200 = v84;
      v90 = sub_10024D6A8(v192, v81, v80, v89, 0, v84, &v209, v86, v87);
      v182 = v75;
      (*(void (**)(uint64_t, uint64_t))(v187 + 8))(v88, v188);
      swift_bridgeObjectRelease();
      swift_release(v200);
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v209);
      swift_retain();
      v91 = sub_100255D24(v202);
      v192 = 0;
      v188 = v90;
      swift_release(v90);
      v92 = v180;
      Series.index.getter(v93);
      strcpy((char *)&v209, "missing intent");
      HIBYTE(v209._object) = -18;
      v94 = sub_10001A630(&qword_100841CA8);
      swift_allocObject(v94, *(unsigned int *)(v94 + 48), *(unsigned __int16 *)(v94 + 52));
      v201 = Series.init(_:index:defaultValue:)(v91, v92, &v209);
      v95 = ((uint64_t (*)(void))REMSuggestedAttributesFeatureExtractor.Parameters.includeTitleVector.getter)();
      v96 = (v95 & 1) == 0;
      if ((v95 & 1) != 0)
        v97 = 0xA726F746365762CLL;
      else
        v97 = 10;
      if (v96)
        v98 = 0xE100000000000000;
      else
        v98 = 0xE800000000000000;
      v209._countAndFlagsBits = 0xD000000000000036;
      v209._object = (void *)0x8000000100706220;
      v99 = v98;
      String.append(_:)(*(Swift::String *)&v97);
      v100 = swift_bridgeObjectRelease();
      v101 = v209._countAndFlagsBits;
      object = v209._object;
      v208 = v209;
      v103 = v193;
      REMSuggestedAttributeInputDataFrame.index.getter(v100);
      v104 = (uint64_t)v189;
      v105 = v198;
      v199 = *(void (**)(char *, char *, uint64_t))(v197 + 16);
      v199(v189, v92, v198);
      v106 = sub_1000A5F84(&qword_100846C50, (uint64_t *)&unk_100840780, (uint64_t)&protocol conformance descriptor for OrderedSet<A>);
      dispatch thunk of Collection.startIndex.getter(v105);
      v179(v92, v105);
      v107 = v190;
      *(_QWORD *)(v104 + *(int *)(v190 + 36)) = v209._countAndFlagsBits;
      v108 = v196;
      sub_100435408(v104, v196);
      v109 = (uint64_t *)(v108 + *(int *)(v107 + 36));
      v110 = *v109;
      *(_QWORD *)&v200 = v106;
      dispatch thunk of Collection.endIndex.getter(&v209, v105, v106);
      v111 = v202;
      if (v110 == v209._countAndFlagsBits)
      {
        v112 = v184;
      }
      else
      {
        v113 = v186;
        v114 = v196;
        v115 = v198;
        v116 = v180;
        v117 = v200;
        do
        {
          v120 = (void (*)(Swift::String *, _QWORD))dispatch thunk of Collection.subscript.read(&v209, v109, v115, v117);
          v122 = *v121;
          v120(&v209, 0);
          v199(v116, (char *)v114, v115);
          dispatch thunk of Collection.formIndex(after:)(v109, v115, v117);
          v179(v116, v115);
          v123 = REMSuggestedAttributeInputDataFrame.iloc(_:)(v122);
          v124._countAndFlagsBits = REMSuggestedAttributeInput.title.getter(v123);
          String.append(_:)(v124);
          swift_bridgeObjectRelease();
          v125._countAndFlagsBits = 44;
          v125._object = (void *)0xE100000000000000;
          String.append(_:)(v125);
          v126 = REMSuggestedAttributeInput.creationDate.getter();
          v127 = Date.description.getter(v126);
          v129 = v128;
          (*(void (**)(char *, uint64_t))(v194 + 8))(v113, v195);
          v130._countAndFlagsBits = v127;
          v130._object = v129;
          String.append(_:)(v130);
          swift_bridgeObjectRelease();
          v131._countAndFlagsBits = 44;
          v131._object = (void *)0xE100000000000000;
          String.append(_:)(v131);
          v133 = REMSuggestedAttributeInput.list.getter(v132);
          v134 = REMSuggestedList.description.getter(v133);
          v136 = v135;
          swift_release(v133);
          v137._countAndFlagsBits = v134;
          v137._object = v136;
          String.append(_:)(v137);
          swift_bridgeObjectRelease();
          v138._countAndFlagsBits = 44;
          v138._object = (void *)0xE100000000000000;
          String.append(_:)(v138);
          v140 = REMSuggestedAttributeInput.dueDayOfWeek.getter(v139);
          v141 = REMSuggestedWeekDay.description.getter();
          v143 = v142;
          swift_release(v140);
          v144._countAndFlagsBits = v141;
          v144._object = v143;
          String.append(_:)(v144);
          swift_bridgeObjectRelease();
          v145._countAndFlagsBits = 44;
          v145._object = (void *)0xE100000000000000;
          String.append(_:)(v145);
          v147 = REMSuggestedAttributeInput.location.getter(v146);
          v148 = dispatch thunk of ClassificationLabel.description.getter(v147);
          v150 = v149;
          swift_release(v147);
          v151._countAndFlagsBits = v148;
          v151._object = v150;
          String.append(_:)(v151);
          swift_bridgeObjectRelease();
          v152._countAndFlagsBits = 44;
          v152._object = (void *)0xE100000000000000;
          String.append(_:)(v152);
          dispatch thunk of Series.iloc(_:)(&v209, v122);
          String.append(_:)(v209);
          v153 = swift_bridgeObjectRelease();
          if ((REMSuggestedAttributesFeatureExtractor.Parameters.includeTitleVector.getter(v153) & 1) != 0)
          {
            v154._countAndFlagsBits = 44;
            v154._object = (void *)0xE100000000000000;
            String.append(_:)(v154);
            v155 = dispatch thunk of Series.iloc(_:)(&v207, v122);
            v156 = v207;
            v157 = dispatch thunk of RDVector.data.getter(v155);
            swift_release(v156);
            v158 = Array.description.getter(v157, &type metadata for Double);
            v160 = v159;
            swift_bridgeObjectRelease();
            v209._countAndFlagsBits = v158;
            v209._object = v160;
            v205 = 91;
            v206 = 0xE100000000000000;
            v203 = 0;
            v204 = 0xE000000000000000;
            v161 = sub_1000E525C();
            v162 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v205, &v203, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v161, v161, v161);
            v164 = v163;
            swift_bridgeObjectRelease();
            v209._countAndFlagsBits = v162;
            v209._object = v164;
            v204 = 0xE000000000000000;
            v205 = 93;
            v206 = 0xE100000000000000;
            v203 = 0;
            v165 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v205, &v203, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v161, v161, v161);
            v167 = v166;
            swift_bridgeObjectRelease();
            v209._countAndFlagsBits = v165;
            v209._object = v167;
            v204 = 0xE000000000000000;
            v205 = 32;
            v206 = 0xE100000000000000;
            v203 = 0;
            v168 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v205, &v203, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v161, v161, v161);
            v170 = v169;
            swift_bridgeObjectRelease();
            v171._countAndFlagsBits = v168;
            v171._object = v170;
            String.append(_:)(v171);
            v111 = v202;
            swift_bridgeObjectRelease();
          }
          v118._countAndFlagsBits = 10;
          v118._object = (void *)0xE100000000000000;
          String.append(_:)(v118);
          swift_release(v123);
          v119 = *v109;
          v114 = v196;
          v115 = v198;
          v117 = v200;
          dispatch thunk of Collection.endIndex.getter(&v209, v198, v200);
          v96 = v119 == v209._countAndFlagsBits;
          v116 = v180;
        }
        while (!v96);
        v101 = v208._countAndFlagsBits;
        object = v208._object;
        v112 = v184;
        v103 = v193;
      }
      v172 = v177;
      sub_100435450(v196);
      REMSuggestedAttributesFeatureExtractor.Result.init(success:featureString:)(1, v101, object);
      swift_release(v182);
      swift_release(v111);
      swift_release(v201);
      swift_release(v188);
      (*(void (**)(char *, uint64_t))(v172 + 8))(v178, v176);
      return (*(uint64_t (**)(char *, uint64_t))(v112 + 8))(v103, v183);
    }
  }
  return result;
}

unint64_t sub_1004D94C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083F1E0;
  if (!qword_10083F1E0)
  {
    v1 = objc_opt_self(REMPaths);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10083F1E0);
  }
  return result;
}

void sub_1004D9500(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t inited;
  void *v8;
  void *i;
  void *v10;
  void *v11;
  _BYTE v12[64];
  _QWORD v13[5];
  char v14;

  v6 = type metadata accessor for RDPublicCloudDatabaseControllerMock();
  inited = swift_initStackObject(v6, v12);
  *(_QWORD *)(inited + 16) = objc_msgSend((id)objc_opt_self(REMError), "cancelledError");
  *(_BYTE *)(inited + 56) = 1;
  v13[3] = v6;
  v13[4] = &off_1007E6258;
  v13[0] = inited;
  sub_1003759E0();
  if (!v3)
  {
    for (i = v8; i; i = v11)
    {
      v10 = objc_autoreleasePoolPush();
      sub_1004DBFFC(i, v2, a2, (uint64_t)v13, 1, a1, &v14);
      objc_autoreleasePoolPop(v10);

      sub_1003759E0();
    }
  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v13);
}

uint64_t sub_1004D961C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084CEF0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084CEF0);
  if (qword_100837670 != -1)
    swift_once(&qword_100837670, sub_1004A1934);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872130);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_1004D96AC()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(REMLog), "templates");
  qword_10084CF08 = (uint64_t)result;
  return result;
}

uint64_t sub_1004D96E4(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v27 = *(_QWORD *)(v6 - 8);
  v28 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v25 - v15;
  v25 = *(_QWORD *)(v1 + 88);
  static DispatchTime.now()(v14);
  + infix(_:_:)(v13, a1);
  v26 = *(void (**)(char *, uint64_t))(v10 + 8);
  v26(v13, v9);
  v17 = swift_allocObject(&unk_1007F7498, 24, 7);
  swift_weakInit(v17 + 16, v1);
  aBlock[4] = sub_1004DED04;
  v32 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007F74B0;
  v18 = _Block_copy(aBlock);
  v19 = swift_retain(v17);
  static DispatchQoS.unspecified.getter(v19);
  v30 = _swiftEmptyArrayStorage;
  v20 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_10001A630((uint64_t *)&unk_100838000);
  v22 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v21, v22, v3, v20);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v16, v8, v5, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v28);
  v26(v16, v9);
  v23 = v32;
  swift_release(v17);
  return swift_release(v23);
}

uint64_t sub_1004D998C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  _BYTE v13[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v13, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    swift_beginAccess(result + 104, &v12, 0, 0);
    v4 = *(_QWORD *)(v3 + 104);
    if ((v4 & 0xC000000000000001) != 0)
    {
      if (v4 < 0)
        v5 = *(_QWORD *)(v3 + 104);
      else
        v5 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*(_QWORD *)(v3 + 104));
      v6 = __CocoaSet.count.getter(v5);
      swift_bridgeObjectRelease(v4);
      if (!v6)
      {
LABEL_9:
        sub_1004D9A8C();
        sub_1004DA48C(1);
        Strong = swift_unknownObjectWeakLoadStrong(v3 + 56, v7);
        if (Strong)
        {
          v9 = Strong;
          v10 = *(_QWORD *)(v3 + 64);
          ObjectType = swift_getObjectType(Strong);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 8))(v3, ObjectType, v10);
          swift_release(v3);
          return swift_unknownObjectRelease(v9);
        }
      }
    }
    else if (!*(_QWORD *)(v4 + 16))
    {
      goto LABEL_9;
    }
    return swift_release(v3);
  }
  return result;
}

void sub_1004D9A8C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  id v24;
  char v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  Swift::Int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  id v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  _QWORD *v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t, uint64_t, uint64_t);
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  id v107;
  id v108[4];

  v106 = *v0;
  v1 = sub_10001A630(&qword_10084D058);
  v2 = *(_QWORD *)(v1 - 8);
  v101 = v1;
  v102 = v2;
  __chkstk_darwin(v1);
  v100 = (char *)&v84 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A630((uint64_t *)&unk_100838070);
  v92 = *(_QWORD *)(v4 - 8);
  v93 = v4;
  __chkstk_darwin(v4);
  v91 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_10083A960);
  v95 = *(_QWORD *)(v6 - 8);
  v96 = v6;
  __chkstk_darwin(v6);
  v94 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_100838080);
  v98 = *(_QWORD *)(v8 - 8);
  v99 = v8;
  __chkstk_darwin(v8);
  v97 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630(&qword_10083A970);
  __chkstk_darwin(v10);
  v86 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A630((uint64_t *)&unk_10084D060);
  v104 = *(_QWORD *)(v12 - 8);
  v105 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_10001A630((uint64_t *)&unk_10083DB50);
  v87 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v16 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_10001A630((uint64_t *)&unk_10084D070);
  v89 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v18 = (char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchPredicate(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (uint64_t *)((char *)&v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = (void *)v0[11];
  *v22 = v23;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v20 + 104))(v22, enum case for DispatchPredicate.onQueue(_:), v19);
  v24 = v23;
  v25 = _dispatchPreconditionTest(_:)(v22);
  (*(void (**)(_QWORD *, uint64_t))(v20 + 8))(v22, v19);
  if ((v25 & 1) != 0)
  {
    v103 = v0;
    v26 = (void *)v0[9];
    v27 = RDTemplateOperationAuthor;
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(RDTemplateOperationAuthor);
    v30 = v29;
    v31 = sub_10001A630((uint64_t *)&unk_10083A340);
    v32 = swift_allocObject(v31, 48, 7);
    *(_OWORD *)(v32 + 16) = xmmword_1006A3C00;
    *(_QWORD *)(v32 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    *(_QWORD *)(v32 + 40) = v33;
    v34 = (void *)sub_100399F04(v26, v28, v30, v32);
    swift_bridgeObjectRelease(v30);
    swift_bridgeObjectRelease(v32);
    v35 = sub_1002E6C54((uint64_t)&off_1007E10F8);
    swift_arrayDestroy(&unk_1007E1118, 1, &type metadata for String);
    v108[0] = v34;
    v36 = swift_allocObject(&unk_1007F7650, 24, 7);
    *(_QWORD *)(v36 + 16) = v35;
    swift_bridgeObjectRetain(v35);
    v37 = sub_10001A630((uint64_t *)&unk_10083EF50);
    v38 = sub_10001A630((uint64_t *)&unk_10083DB60);
    v39 = sub_1000A5F84((unint64_t *)&unk_10083EF60, (uint64_t *)&unk_10083EF50, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.map<A>(_:)(sub_100188E48, v36, v37, v38, v39);
    swift_release(v36);
    v40 = sub_1000A5F84((unint64_t *)&unk_10083DB70, (uint64_t *)&unk_10084D060, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v41 = v105;
    Publisher.filter(_:)(sub_1000F27FC, 0, v105, v40);
    (*(void (**)(char *, unint64_t))(v104 + 8))(v14, v41);
    swift_release(v34);
    swift_bridgeObjectRelease(v35);
    v42 = v24;
    v108[0] = v24;
    v43 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v85 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56);
    v44 = (uint64_t)v86;
    v85(v86, 1, 1, v43);
    v45 = sub_1000D30A4();
    v105 = v45;
    v46 = sub_1000A5F84(&qword_10083EF70, (uint64_t *)&unk_10083DB50, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
    v47 = sub_10009FC50((unint64_t *)&qword_1008380B0, (uint64_t (*)(uint64_t))sub_1000D30A4, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
    v104 = v47;
    v48 = v42;
    v49 = v88;
    Publisher.receive<A>(on:options:)(v108, v44, v88, v45, v46, v47);
    sub_10000882C(v44, &qword_10083A970);

    (*(void (**)(char *, uint64_t))(v87 + 8))(v16, v49);
    sub_1000A5F84(&qword_10084F6F0, (uint64_t *)&unk_10084D070, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v50 = v103;
    v51 = v90;
    v52 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)(v103, sub_1004DACDC, 0, 0, 0, v90, v106);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v18, v51);
    v53 = v50 + 13;
    swift_beginAccess(v50 + 13, v108, 33, 0);
    AnyCancellable.store(in:)(v50 + 13);
    swift_endAccess(v108);
    swift_release(v52);
    v54 = (void *)sub_100399C74((void *)0xD000000000000016, 0x80000001006F56A0, 0);
    v108[0] = v54;
    v55 = sub_10001A630((uint64_t *)&unk_10084D080);
    v56 = sub_10001A630((uint64_t *)&unk_100838090);
    v57 = sub_1000A5F84(&qword_100847B20, (uint64_t *)&unk_10084D080, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v58 = v91;
    Publisher.map<A>(_:)(sub_1004A4448, 0, v55, v56, v57);
    v59 = sub_1000A5F84((unint64_t *)&unk_1008380A0, (uint64_t *)&unk_100838070, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v61 = v93;
    v60 = v94;
    Publisher.filter(_:)(sub_1000F27FC, 0, v93, v59);
    (*(void (**)(char *, uint64_t))(v92 + 8))(v58, v61);
    swift_release(v54);
    v108[0] = v48;
    v62 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v85;
    v85((char *)v44, 1, 1, v43);
    v63 = sub_1000A5F84(&qword_10083EEE0, (uint64_t *)&unk_10083A960, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
    v64 = v48;
    v65 = v96;
    v66 = v97;
    Publisher.receive<A>(on:options:)(v108, v44, v96, v105, v63, v104);
    sub_10000882C(v44, &qword_10083A970);

    (*(void (**)(char *, uint64_t))(v95 + 8))(v60, v65);
    sub_1000A5F84((unint64_t *)&unk_10083AA00, (uint64_t *)&unk_100838080, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v67 = v103;
    v68 = v99;
    v69 = v106;
    v70 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)(v103, sub_1004DAD00, 0, 0, 0, v99, v106);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v66, v68);
    swift_beginAccess(v53, v108, 33, 0);
    AnyCancellable.store(in:)(v53);
    swift_endAccess(v108);
    swift_release(v70);
    v71 = (void *)v67[12];
    v72 = v67;
    v107 = v64;
    v108[0] = v71;
    v62(v44, 1, 1, v43);
    v73 = v64;
    swift_retain(v71);
    v74 = sub_10001A630(&qword_10084D090);
    v75 = sub_1000A5F84(&qword_10084D098, &qword_10084D090, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v76 = v100;
    Publisher.receive<A>(on:options:)(&v107, v44, v74, v105, v75, v104);
    sub_10000882C(v44, &qword_10083A970);

    swift_release(v108[0]);
    sub_1000A5F84(qword_10084D0A0, &qword_10084D058, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v77 = v101;
    v78 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)(v72, sub_1000081F0, 0, 0, 0, v101, v69);
    (*(void (**)(char *, uint64_t))(v102 + 8))(v76, v77);
    swift_beginAccess(v53, v108, 33, 0);
    AnyCancellable.store(in:)(v53);
    swift_endAccess(v108);
    swift_release(v78);
    if (qword_100837730 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100837730, sub_1004D961C);
LABEL_3:
  v79 = type metadata accessor for Logger(0);
  v80 = sub_10001AAA8(v79, (uint64_t)qword_10084CEF0);
  v81 = Logger.logObject.getter(v80);
  v82 = static os_log_type_t.default.getter(v81);
  if (os_log_type_enabled(v81, v82))
  {
    v83 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v83 = 0;
    _os_log_impl((void *)&_mh_execute_header, v81, v82, "RDTemplateOperationQueue: Did set up subscriptions", v83, 2u);
    swift_slowDealloc(v83, -1, -1);
  }

}

uint64_t sub_1004DA48C(int a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  id v32;
  void *v33;
  NSString v34;
  id v35;
  uint64_t v36;
  uint64_t inited;
  NSString v38;
  unint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  _BOOL4 v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  int v69;
  char v70[56];
  _QWORD aBlock[5];
  uint64_t v72;

  v2 = v1;
  v69 = a1;
  v3 = *v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = __chkstk_darwin(v4);
  v68 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v60 - v8;
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = (void *)v2[11];
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_17:
    swift_once(&qword_100837730, sub_1004D961C);
    goto LABEL_4;
  }
  if ((v2[15] & 1) != 0)
    return result;
  *((_BYTE *)v2 + 120) = 1;
  sub_1004DAA18(0);
  if (qword_100837730 != -1)
    goto LABEL_17;
LABEL_4:
  v67 = v3;
  v17 = type metadata accessor for Logger(0);
  v18 = sub_10001AAA8(v17, (uint64_t)qword_10084CEF0);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "RDTemplateOperationQueue: Began handling template operation queue items", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

  Date.init()(v22);
  v23 = swift_allocObject(&unk_1007F74E8, 24, 7);
  *(_QWORD *)(v23 + 16) = 0;
  v24 = objc_msgSend((id)objc_opt_self(DABabysitter), "sharedBabysitter");
  v66 = v23;
  if (v24)
  {
    v25 = v24;
    v63 = v5;
    v26 = v9;
    v27 = v4;
    v28 = 17;
    if ((v69 & 1) != 0)
      v28 = 19;
    v29 = v2[v28];
    swift_bridgeObjectRetain(v29);
    v30 = v2[22];
    v31 = String._bridgeToObjectiveC()();
    v32 = objc_msgSend(v25, "tokenByRegisteringAccount:forOperationWithName:", v30, v31);

    *(_QWORD *)(v23 + 16) = v32;
    v65 = v32 == 0;
    if (v32)
    {
      swift_bridgeObjectRelease(v29);
    }
    else
    {
      v33 = (void *)objc_opt_self(REMError);
      v34 = String._bridgeToObjectiveC()();
      v35 = objc_msgSend(v33, "babySatErrorWithOperationName:", v34);

      v36 = sub_10001A630((uint64_t *)&unk_10083DAB0);
      inited = swift_initStackObject(v36, v70);
      *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
      *(_QWORD *)(inited + 32) = 0x696669746E656469;
      *(_QWORD *)(inited + 40) = 0xEA00000000007265;
      v38 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v29);
      *(_QWORD *)(inited + 48) = v38;
      v39 = sub_1002AFCB4(inited);
      v62 = type metadata accessor for Analytics(0, v40);
      v41 = v2[20];
      v61 = v2[21];
      v42 = sub_1003B0B84(v39);
      swift_bridgeObjectRelease(v39);
      v43 = v35;
      v44 = v35;
      static Analytics.postEvent(_:payload:error:performAutoBugCaptureOnError:)(v41, v61, v42, v43, 1);
      swift_bridgeObjectRelease(v42);

    }
    v4 = v27;

    v9 = v26;
    v5 = v63;
  }
  else
  {
    v65 = 0;
  }
  v64 = v9;
  v45 = objc_msgSend((id)v2[9], "newBackgroundContextWithAuthor:", RDTemplateOperationAuthor);
  v46 = swift_allocObject(&unk_1007F7498, 24, 7);
  swift_weakInit(v46 + 16, v2);
  v47 = v68;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v68, v9, v4);
  v48 = *(unsigned __int8 *)(v5 + 80);
  v49 = (v48 + 24) & ~v48;
  v50 = (v49 + v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  v51 = v4;
  v52 = (v49 + v6 + 39) & 0xFFFFFFFFFFFFFFF8;
  v53 = swift_allocObject(&unk_1007F7510, v52 + 8, v48 | 7);
  *(_QWORD *)(v53 + 16) = v46;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v53 + v49, v47, v51);
  v54 = v53 + ((v49 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  v55 = v66;
  *(_QWORD *)v54 = v66;
  *(_BYTE *)(v54 + 8) = v65;
  v56 = v53 + v50;
  *(_QWORD *)v56 = v45;
  *(_BYTE *)(v56 + 8) = v69 & 1;
  *(_QWORD *)(v53 + v52) = v67;
  aBlock[4] = sub_1004DEDD8;
  v72 = v53;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007F7528;
  v57 = _Block_copy(aBlock);
  v58 = v72;
  swift_retain(v55);
  v59 = v45;
  swift_release(v58);
  objc_msgSend(v59, "performBlock:", v57);
  _Block_release(v57);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v64, v51);
  return swift_release(v55);
}

void sub_1004DAA18(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;

  v3 = type metadata accessor for OSSignpostID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100837730 != -1)
    swift_once(&qword_100837730, sub_1004D961C);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10001AAA8(v7, (uint64_t)qword_10084CEF0);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "os_transaction INIT {name: com.apple.remindd.RDTemplateOperationQueue.handleIncompleteOperationQueueItems}", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  if (*(_BYTE *)(v1 + 120) != (a1 & 1))
  {
    if (*(_BYTE *)(v1 + 120))
    {
      v12 = os_transaction_create("com.apple.remindd.RDTemplateOperationQueue");
      v13 = *(_QWORD *)(v1 + 112);
      *(_QWORD *)(v1 + 112) = v12;
      v14 = swift_unknownObjectRelease(v13);
      v15 = static os_signpost_type_t.begin.getter(v14);
      if (qword_100837738 != -1)
        swift_once(&qword_100837738, sub_1004D96AC);
      v16 = qword_10084CF08;
      static OSSignpostID.exclusive.getter();
      os_signpost(_:dso:log:name:signpostID:)(v15, &_mh_execute_header, v16, "RDTemplateOperationQueue.handleIncompleteOperationQueueItems", 60, 2, v6);
      v17 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
    else
    {
      v18 = static os_signpost_type_t.end.getter();
      if (qword_100837738 != -1)
        swift_once(&qword_100837738, sub_1004D96AC);
      v19 = qword_10084CF08;
      static OSSignpostID.exclusive.getter();
      os_signpost(_:dso:log:name:signpostID:)(v18, &_mh_execute_header, v19, "RDTemplateOperationQueue.handleIncompleteOperationQueueItems", 60, 2, v6);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      v20 = *(_QWORD *)(v1 + 112);
      *(_QWORD *)(v1 + 112) = 0;
      v17 = swift_unknownObjectRelease(v20);
    }
    v21 = Logger.logObject.getter(v17);
    v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "os_transaction RELEASE {name: com.apple.remindd.RDTemplateOperationQueue.handleIncompleteOperationQueueItems}", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

  }
}

uint64_t sub_1004DACDC()
{
  return sub_1004DA48C(0);
}

void sub_1004DAD00()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  sub_1004DAD44();
  objc_autoreleasePoolPop(v0);
}

void sub_1004DAD44()
{
  id v0;
  void *v1;
  NSString v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v0 = objc_msgSend((id)objc_opt_self(DABabysitter), "sharedBabysitter");
  if (v0)
  {
    v1 = v0;
    v2 = String._bridgeToObjectiveC()();
    objc_msgSend(v1, "giveAccountWithIDAnotherChance:", v2);

    if (qword_100837730 != -1)
      swift_once(&qword_100837730, sub_1004D961C);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10001AAA8(v3, (uint64_t)qword_10084CEF0);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v11 = v8;
      *(_DWORD *)v7 = 136446210;
      v9 = sub_10001A820(0xD000000000000035, 0x8000000100706390, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "RDTemplateOperationQueue: Reset babysitter upon enabled/disabled CloudKit account(s) for {waiterID: %{public}s}", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }

  }
}

void sub_1004DAF1C()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  id v7;
  _QWORD v8[5];
  _QWORD *v9;

  v1 = *v0;
  v2 = objc_msgSend((id)v0[9], "newBackgroundContextWithAuthor:", RDTemplateOperationAuthor);
  v3 = swift_allocObject(&unk_1007F7498, 24, 7);
  swift_weakInit(v3 + 16, v0);
  v4 = (_QWORD *)swift_allocObject(&unk_1007F7678, 40, 7);
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = v1;
  v8[4] = sub_1004DEFCC;
  v9 = v4;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_1000094C8;
  v8[3] = &unk_1007F7690;
  v5 = _Block_copy(v8);
  v6 = v9;
  v7 = v2;
  swift_release(v6);
  objc_msgSend(v7, "performBlock:", v5);
  _Block_release(v5);

}

uint64_t sub_1004DB020(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, char a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  id v15;
  void *v16;
  void *i;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[32];

  v12 = a1 + 16;
  swift_beginAccess(a1 + 16, v39, 0, 0);
  result = swift_weakLoadStrong(v12);
  if (result)
  {
    v14 = result;
    if ((a4 & 1) != 0)
    {
      type metadata accessor for REMCDTemplateOperationQueueItem();
      v20 = sub_100375408(a5);
      if (qword_100837730 != -1)
        swift_once(&qword_100837730, sub_1004D961C);
      v21 = type metadata accessor for Logger(0);
      v22 = sub_10001AAA8(v21, (uint64_t)qword_10084CEF0);
      v23 = Logger.logObject.getter(v22);
      v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = swift_slowAlloc(22, -1);
        v26 = swift_slowAlloc(32, -1);
        v38 = v26;
        *(_DWORD *)v25 = 134218242;
        v36 = (uint64_t)v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
        *(_WORD *)(v25 + 12) = 2080;
        if ((a6 & 1) != 0)
          v27 = 1702195828;
        else
          v27 = 0x65736C6166;
        if ((a6 & 1) != 0)
          v28 = 0xE400000000000000;
        else
          v28 = 0xE500000000000000;
        v36 = sub_10001A820(v27, v28, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
        swift_bridgeObjectRelease(v28);
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "RDTemplateOperationQueue: Blocked by babysitter. Batch completed all incomplete template operation queue items. {affectedCount: %ld, isOnLaunch: %s}", (uint8_t *)v25, 0x16u);
        swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v26, -1, -1);
        swift_slowDealloc(v25, -1, -1);
      }

    }
    else
    {
      v15 = objc_msgSend(objc_allocWithZone((Class)REMStore), "initWithDaemonController:", *(_QWORD *)(result + 80));
      swift_weakInit(&v38, v14);
      LOBYTE(v36) = 0;
      sub_1003759E0();
      for (i = v16; i; i = v19)
      {
        v18 = objc_autoreleasePoolPush();
        sub_1004DCB40(i, a7, v15, v14 + 16, 0, a5, &v36, (uint64_t)&v38);
        objc_autoreleasePoolPop(v18);

        sub_1003759E0();
      }
      swift_weakDestroy(&v38);
      if ((v36 & 1) != 0)
      {
        v29 = sub_100376118(a5);
        if (qword_100837730 != -1)
          swift_once(&qword_100837730, sub_1004D961C);
        v30 = type metadata accessor for Logger(0);
        v31 = sub_10001AAA8(v30, (uint64_t)qword_10084CEF0);
        v32 = Logger.logObject.getter(v31);
        v33 = static os_log_type_t.default.getter(v32);
        if (os_log_type_enabled(v32, v33))
        {
          v34 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v34 = 134217984;
          v38 = (uint64_t)v29;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39);
          _os_log_impl((void *)&_mh_execute_header, v32, v33, "RDTemplateOperationQueue: Batch deleted completed template operation queue items. {deletionCount: %ld}", v34, 0xCu);
          swift_slowDealloc(v34, -1, -1);
        }

        sub_1004DBDC8((uint64_t)v29);
      }
      else
      {

      }
    }
    sub_1004DB888(v14, a2, a3);
    return swift_release(v14);
  }
  return result;
}

uint64_t sub_1004DB888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD aBlock[5];
  uint64_t v34;

  v28[0] = a3;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v29 = *(_QWORD *)(v8 - 8);
  v30 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[1] = *(_QWORD *)(a1 + 88);
  v15 = swift_allocObject(&unk_1007F7498, 24, 7);
  swift_weakInit(v15 + 16, a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  v16 = *(unsigned __int8 *)(v12 + 80);
  v17 = (v16 + 24) & ~v16;
  v18 = (v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_1007F7600, v18 + 8, v16 | 7);
  *(_QWORD *)(v19 + 16) = v15;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v19 + v17, v14, v11);
  v20 = v28[0];
  *(_QWORD *)(v19 + v18) = v28[0];
  aBlock[4] = sub_1004DEF38;
  v34 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007F7618;
  v21 = _Block_copy(aBlock);
  swift_retain(v15);
  v22 = swift_retain(v20);
  static DispatchQoS.unspecified.getter(v22);
  v32 = _swiftEmptyArrayStorage;
  v23 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_10001A630((uint64_t *)&unk_100838000);
  v25 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v24, v25, v5, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v30);
  v26 = v34;
  swift_release(v15);
  return swift_release(v26);
}

uint64_t sub_1004DBB3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t Strong;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD aBlock[5];
  uint64_t v33;
  __int128 v34[2];
  char v35[24];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a2, v35, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v14 = result;
    Strong = swift_unknownObjectWeakLoadStrong(result + 56, v13);
    swift_unknownObjectRelease(Strong);
    if (Strong)
    {
      v30 = *(_QWORD *)(v14 + 88);
      v16 = swift_allocObject(&unk_1007F7498, 24, 7);
      swift_weakInit(v16 + 16, v14);
      sub_100018618(a1, (uint64_t)v34);
      v17 = swift_allocObject(&unk_1007F7560, 64, 7);
      *(_QWORD *)(v17 + 16) = v16;
      sub_10001BCA8(v34, v17 + 24);
      aBlock[4] = sub_1004DEE70;
      v33 = v17;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000094C8;
      aBlock[3] = &unk_1007F7578;
      v18 = _Block_copy(aBlock);
      v29 = v9;
      v19 = v18;
      v20 = swift_retain(v16);
      static DispatchQoS.unspecified.getter(v20);
      v31 = _swiftEmptyArrayStorage;
      v21 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v22 = sub_10001A630((uint64_t *)&unk_100838000);
      v28 = v8;
      v23 = v5;
      v24 = v22;
      v25 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v24, v25, v4, v21);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v19);
      _Block_release(v19);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v4);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v28);
      v26 = v33;
      swift_release(v14);
      swift_release(v16);
      v27 = v26;
    }
    else
    {
      v27 = v14;
    }
    return swift_release(v27);
  }
  return result;
}

uint64_t sub_1004DBDC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t Strong;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD aBlock[5];
  uint64_t v29;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 56, v11);
  result = swift_unknownObjectRelease(Strong);
  if (Strong)
  {
    v26 = *(_QWORD *)(v1 + 88);
    v14 = swift_allocObject(&unk_1007F7498, 24, 7);
    swift_weakInit(v14 + 16, v1);
    v15 = swift_allocObject(&unk_1007F75B0, 32, 7);
    *(_QWORD *)(v15 + 16) = v14;
    *(_QWORD *)(v15 + 24) = a1;
    aBlock[4] = sub_1004DEEA0;
    v29 = v15;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000094C8;
    aBlock[3] = &unk_1007F75C8;
    v16 = _Block_copy(aBlock);
    v17 = swift_retain(v14);
    static DispatchQoS.unspecified.getter(v17);
    v27 = _swiftEmptyArrayStorage;
    v18 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v25 = v7;
    v19 = v4;
    v20 = v18;
    v21 = sub_10001A630((uint64_t *)&unk_100838000);
    v22 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v21, v22, v3, v20);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v16);
    _Block_release(v16);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v25);
    v23 = v29;
    swift_release(v14);
    return swift_release(v23);
  }
  return result;
}

uint64_t sub_1004DBFFC(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, _BYTE *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  id v16;
  uint64_t v17;
  uint8_t *v18;
  char **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  _QWORD *v39;
  id v40;
  uint64_t v41;
  _QWORD *v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  void *v47;
  id v48;
  unsigned __int8 v49;
  id v50;
  id v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  _QWORD *v55;
  id v56;
  uint64_t v57;
  void *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  _QWORD *v65;
  id v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  _QWORD *v75;
  id v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v82;
  NSObject *log;
  uint64_t v85;
  void *v86;
  id v87;
  id v88;
  _QWORD v90[3];
  _BYTE v91[8];
  uint64_t v92;
  _QWORD v93[3];
  _BYTE v94[8];
  __int128 v95;
  uint64_t v96;
  id v97;
  _BYTE v98[16];
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;

  v8 = v7;
  if (qword_100837730 != -1)
    swift_once(&qword_100837730, sub_1004D961C);
  v11 = type metadata accessor for Logger(0);
  sub_10001AAA8(v11, (uint64_t)qword_10084CEF0);
  v12 = a1;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v82 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v15 = 138543362;
    v101 = v12;
    v16 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102);
    *v82 = v12;

    _os_log_impl((void *)&_mh_execute_header, v13, v14, "RDTemplateOperationQueue: Handling incomplete template operation queue item with top priority. {templateOperationQueueItem: %{public}@}", v15, 0xCu);
    v17 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v82, 1, v17);
    swift_slowDealloc(v82, -1, -1);
    v18 = v15;
    v8 = v7;
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {

  }
  sub_1004DD6C8(v12, a3, (uint64_t)&v101);
  sub_1004DEC98((uint64_t)&v101, (uint64_t)&v95);
  v19 = &selRef_isConcealed;
  if (v96)
  {
    sub_10001BCA8(&v95, (uint64_t)&v97);
    v20 = v99;
    v21 = v100;
    sub_10000A388(&v97, v99);
    v22 = v8;
    (*(void (**)(void *, uint64_t, uint64_t))(v21 + 16))(a6, v20, v21);
    if (v8)
    {
      swift_errorRetain(v8);
      v23 = v12;
      v24 = swift_errorRetain(v8);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v87 = v12;
        v27 = swift_slowAlloc(22, -1);
        v28 = (_QWORD *)swift_slowAlloc(8, -1);
        v85 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v95 = v85;
        *(_DWORD *)v27 = 138543618;
        log = v25;
        v29 = objc_msgSend(v23, "objectID");
        v92 = (uint64_t)v29;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93);
        *v28 = v29;

        *(_WORD *)(v27 + 12) = 2082;
        swift_getErrorValue(v22, v91, v90);
        v30 = Error.rem_errorDescription.getter(v90[1], v90[2]);
        v32 = v31;
        v92 = sub_10001A820(v30, v31, (uint64_t *)&v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93);
        swift_bridgeObjectRelease(v32);
        swift_errorRelease(v22);
        swift_errorRelease(v22);
        _os_log_impl((void *)&_mh_execute_header, log, v26, "RDTemplateOperationQueue: Failed to complete template operation queue item. {templateOperationQueueItem.objectID: %{public}@, error: %{public}s}", (uint8_t *)v27, 0x16u);
        v33 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v28, 1, v33);
        swift_slowDealloc(v28, -1, -1);
        swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v85, -1, -1);
        v34 = v27;
        v12 = v87;
        swift_slowDealloc(v34, -1, -1);

        v19 = &selRef_isConcealed;
        swift_errorRelease(v22);
      }
      else
      {
        swift_errorRelease(v8);

        swift_errorRelease(v8);
        swift_errorRelease(v8);

      }
    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v97);
  }
  else
  {
    sub_10000882C((uint64_t)&v95, (uint64_t *)&unk_10084D038);
    v35 = v12;
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v88 = v12;
      v39 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v38 = 138543362;
      v40 = objc_msgSend(v35, "objectID");
      v97 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98);
      *v39 = v40;
      v19 = &selRef_isConcealed;

      _os_log_impl((void *)&_mh_execute_header, v36, v37, "RDTemplateOperationQueue: Failed to create template operation for template operation queue item. {templateOperationQueueItem.objectID: %{public}@}", v38, 0xCu);
      v41 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v39, 1, v41);
      v42 = v39;
      v12 = v88;
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v38, -1, -1);

    }
    else
    {

    }
  }
  v43 = objc_msgSend(v12, v19[247], v82);
  v97 = 0;
  v44 = objc_msgSend(a6, "existingObjectWithID:error:", v43, &v97);

  v45 = v97;
  if (v44)
  {
    v46 = type metadata accessor for REMCDTemplateOperationQueueItem();
    v47 = (void *)swift_dynamicCastClass(v44, v46);
    v48 = v45;
    if (!v47)
    {

      v51 = v12;
      v62 = Logger.logObject.getter(v51);
      v63 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v62, v63))
      {
        v64 = (uint8_t *)swift_slowAlloc(12, -1);
        v65 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v64 = 138543362;
        v66 = objc_msgSend(v51, v19[247]);
        v97 = v66;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98);
        *v65 = v66;

        _os_log_impl((void *)&_mh_execute_header, v62, v63, "RDTemplateOperationQueue: Failed to retrieve template operation queue item by objectID. {templateOperationQueueItem.objectID: %{public}@}", v64, 0xCu);
        v67 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v65, 1, v67);
        swift_slowDealloc(v65, -1, -1);
        swift_slowDealloc(v64, -1, -1);

        goto LABEL_31;
      }

      goto LABEL_30;
    }
    objc_msgSend(v47, "setIsCompleted:", 1);
    v97 = 0;
    v49 = objc_msgSend(a6, "save:", &v97);
    v50 = v97;
    if ((v49 & 1) != 0)
    {
      *a7 = 1;
      v51 = v12;
      v52 = Logger.logObject.getter(v50);
      v53 = static os_log_type_t.default.getter(v52);
      if (os_log_type_enabled(v52, v53))
      {
        v54 = (uint8_t *)swift_slowAlloc(12, -1);
        v55 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v54 = 138543362;
        v56 = objc_msgSend(v51, v19[247]);
        v97 = v56;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98);
        *v55 = v56;

        _os_log_impl((void *)&_mh_execute_header, v52, v53, "RDTemplateOperationQueue: Completed template operation queue item with top priority. {templateOperationQueueItem.objectID: %{public}@}", v54, 0xCu);
        v57 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v55, 1, v57);
        swift_slowDealloc(v55, -1, -1);
        swift_slowDealloc(v54, -1, -1);

        goto LABEL_31;
      }

LABEL_30:
      goto LABEL_31;
    }
    v58 = v12;
    v68 = v97;
    v60 = _convertNSErrorToError(_:)(v50);

    swift_willThrow(v69);
  }
  else
  {
    v58 = v12;
    v59 = v97;
    v60 = _convertNSErrorToError(_:)(v45);

    swift_willThrow(v61);
  }
  swift_errorRetain(v60);
  v70 = v58;
  v71 = swift_errorRetain(v60);
  v72 = Logger.logObject.getter(v71);
  v73 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v72, v73))
  {
    v74 = swift_slowAlloc(22, -1);
    v75 = (_QWORD *)swift_slowAlloc(8, -1);
    v86 = (void *)swift_slowAlloc(32, -1);
    v97 = v86;
    *(_DWORD *)v74 = 138543618;
    v76 = objc_msgSend(v70, "objectID");
    *(_QWORD *)&v95 = v76;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, (char *)&v95 + 8);
    *v75 = v76;

    *(_WORD *)(v74 + 12) = 2082;
    swift_getErrorValue(v60, v94, v93);
    v77 = Error.rem_errorDescription.getter(v93[1], v93[2]);
    v79 = v78;
    *(_QWORD *)&v95 = sub_10001A820(v77, v78, (uint64_t *)&v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, (char *)&v95 + 8);
    swift_bridgeObjectRelease(v79);
    swift_errorRelease(v60);
    swift_errorRelease(v60);
    _os_log_impl((void *)&_mh_execute_header, v72, v73, "RDTemplateOperationQueue: Failed to save managed object context after completing template operation queue item. {templateOperationQueueItem.objectID: %{public}@, error: %{public}s}", (uint8_t *)v74, 0x16u);
    v80 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v75, 1, v80);
    swift_slowDealloc(v75, -1, -1);
    swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v86, -1, -1);
    swift_slowDealloc(v74, -1, -1);

    swift_errorRelease(v60);
  }
  else
  {
    swift_errorRelease(v60);

    swift_errorRelease(v60);
    swift_errorRelease(v60);

  }
LABEL_31:
  objc_msgSend(a6, "reset");
  return sub_10000882C((uint64_t)&v101, (uint64_t *)&unk_10084D038);
}

uint64_t sub_1004DCB40(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, _BYTE *a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v17;
  uint64_t v18;
  char **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  _QWORD *v38;
  id v39;
  uint64_t v40;
  _QWORD *v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  void *v46;
  id v47;
  unsigned __int8 v48;
  id v49;
  id v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  _QWORD *v54;
  id v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  _QWORD *v63;
  id v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  _QWORD *v73;
  id v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v80;
  NSObject *log;
  uint64_t v84;
  void *v85;
  id v86;
  id v87;
  _QWORD v89[3];
  _BYTE v90[8];
  uint64_t v91;
  _QWORD v92[3];
  _BYTE v93[8];
  __int128 v94;
  uint64_t v95;
  id v96;
  _BYTE v97[16];
  uint64_t v98;
  uint64_t v99;
  id v100;
  uint64_t v101;

  v9 = v8;
  if (qword_100837730 != -1)
    swift_once(&qword_100837730, sub_1004D961C);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_10084CEF0);
  v13 = a1;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v80 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v16 = 138543362;
    v100 = v13;
    v17 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101);
    *v80 = v13;

    _os_log_impl((void *)&_mh_execute_header, v14, v15, "RDTemplateOperationQueue: Handling incomplete template operation queue item with top priority. {templateOperationQueueItem: %{public}@}", v16, 0xCu);
    v18 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v80, 1, v18);
    swift_slowDealloc(v80, -1, -1);
    v9 = v8;
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

  }
  sub_1004DD6C8(v13, a3, (uint64_t)&v100);
  sub_1004DEC98((uint64_t)&v100, (uint64_t)&v94);
  v19 = &selRef_isConcealed;
  if (v95)
  {
    sub_10001BCA8(&v94, (uint64_t)&v96);
    v20 = v98;
    v21 = v99;
    sub_10000A388(&v96, v98);
    v22 = v9;
    (*(void (**)(void *, uint64_t, uint64_t))(v21 + 16))(a6, v20, v21);
    if (v9)
    {
      swift_errorRetain(v9);
      v86 = v13;
      v23 = v13;
      v24 = swift_errorRetain(v9);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = swift_slowAlloc(22, -1);
        v28 = (_QWORD *)swift_slowAlloc(8, -1);
        v84 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v94 = v84;
        *(_DWORD *)v27 = 138543618;
        log = v25;
        v29 = objc_msgSend(v23, "objectID");
        v91 = (uint64_t)v29;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92);
        *v28 = v29;

        *(_WORD *)(v27 + 12) = 2082;
        swift_getErrorValue(v22, v90, v89);
        v30 = Error.rem_errorDescription.getter(v89[1], v89[2]);
        v32 = v31;
        v91 = sub_10001A820(v30, v31, (uint64_t *)&v94);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92);
        swift_bridgeObjectRelease(v32);
        swift_errorRelease(v22);
        swift_errorRelease(v22);
        _os_log_impl((void *)&_mh_execute_header, log, v26, "RDTemplateOperationQueue: Failed to complete template operation queue item. {templateOperationQueueItem.objectID: %{public}@, error: %{public}s}", (uint8_t *)v27, 0x16u);
        v33 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v28, 1, v33);
        swift_slowDealloc(v28, -1, -1);
        swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v84, -1, -1);
        swift_slowDealloc(v27, -1, -1);

        v19 = &selRef_isConcealed;
        swift_errorRelease(v22);
      }
      else
      {
        swift_errorRelease(v9);

        swift_errorRelease(v9);
        swift_errorRelease(v9);

      }
      v13 = v86;
    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v96);
  }
  else
  {
    sub_10000882C((uint64_t)&v94, (uint64_t *)&unk_10084D038);
    v34 = v13;
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v87 = v13;
      v38 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v37 = 138543362;
      v39 = objc_msgSend(v34, "objectID");
      v96 = v39;
      v19 = &selRef_isConcealed;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97);
      *v38 = v39;

      _os_log_impl((void *)&_mh_execute_header, v35, v36, "RDTemplateOperationQueue: Failed to create template operation for template operation queue item. {templateOperationQueueItem.objectID: %{public}@}", v37, 0xCu);
      v40 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v38, 1, v40);
      v41 = v38;
      v13 = v87;
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v37, -1, -1);

    }
    else
    {

    }
  }
  v42 = objc_msgSend(v13, v19[247]);
  v96 = 0;
  v43 = objc_msgSend(a6, "existingObjectWithID:error:", v42, &v96);

  v44 = v96;
  if (!v43)
  {
    v57 = v96;
    v58 = _convertNSErrorToError(_:)(v44);

    swift_willThrow(v59);
    goto LABEL_26;
  }
  v45 = type metadata accessor for REMCDTemplateOperationQueueItem();
  v46 = (void *)swift_dynamicCastClass(v43, v45);
  v47 = v44;
  if (v46)
  {
    objc_msgSend(v46, "setIsCompleted:", 1);
    v96 = 0;
    v48 = objc_msgSend(a6, "save:", &v96);
    v49 = v96;
    if ((v48 & 1) != 0)
    {
      *a7 = 1;
      v50 = v13;
      v51 = Logger.logObject.getter(v49);
      v52 = static os_log_type_t.default.getter(v51);
      if (os_log_type_enabled(v51, v52))
      {
        v53 = (uint8_t *)swift_slowAlloc(12, -1);
        v54 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v53 = 138543362;
        v55 = objc_msgSend(v50, v19[247]);
        v96 = v55;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97);
        *v54 = v55;

        _os_log_impl((void *)&_mh_execute_header, v51, v52, "RDTemplateOperationQueue: Completed template operation queue item with top priority. {templateOperationQueueItem.objectID: %{public}@}", v53, 0xCu);
        v56 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v54, 1, v56);
        swift_slowDealloc(v54, -1, -1);
        swift_slowDealloc(v53, -1, -1);

        goto LABEL_32;
      }

      goto LABEL_31;
    }
    v66 = v96;
    v58 = _convertNSErrorToError(_:)(v49);

    swift_willThrow(v67);
LABEL_26:
    swift_errorRetain(v58);
    v68 = v13;
    v69 = swift_errorRetain(v58);
    v70 = Logger.logObject.getter(v69);
    v71 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v70, v71))
    {
      v72 = swift_slowAlloc(22, -1);
      v73 = (_QWORD *)swift_slowAlloc(8, -1);
      v85 = (void *)swift_slowAlloc(32, -1);
      v96 = v85;
      *(_DWORD *)v72 = 138543618;
      v74 = objc_msgSend(v68, v19[247]);
      *(_QWORD *)&v94 = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, (char *)&v94 + 8);
      *v73 = v74;

      *(_WORD *)(v72 + 12) = 2082;
      swift_getErrorValue(v58, v93, v92);
      v75 = Error.rem_errorDescription.getter(v92[1], v92[2]);
      v77 = v76;
      *(_QWORD *)&v94 = sub_10001A820(v75, v76, (uint64_t *)&v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, (char *)&v94 + 8);
      swift_bridgeObjectRelease(v77);
      swift_errorRelease(v58);
      swift_errorRelease(v58);
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "RDTemplateOperationQueue: Failed to save managed object context after completing template operation queue item. {templateOperationQueueItem.objectID: %{public}@, error: %{public}s}", (uint8_t *)v72, 0x16u);
      v78 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v73, 1, v78);
      swift_slowDealloc(v73, -1, -1);
      swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v85, -1, -1);
      swift_slowDealloc(v72, -1, -1);

      swift_errorRelease(v58);
    }
    else
    {
      swift_errorRelease(v58);

      swift_errorRelease(v58);
      swift_errorRelease(v58);

    }
    goto LABEL_32;
  }

  v50 = v13;
  v60 = Logger.logObject.getter(v50);
  v61 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v60, v61))
  {
    v62 = (uint8_t *)swift_slowAlloc(12, -1);
    v63 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v62 = 138543362;
    v64 = objc_msgSend(v50, v19[247]);
    v96 = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97);
    *v63 = v64;

    _os_log_impl((void *)&_mh_execute_header, v60, v61, "RDTemplateOperationQueue: Failed to retrieve template operation queue item by objectID. {templateOperationQueueItem.objectID: %{public}@}", v62, 0xCu);
    v65 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v63, 1, v65);
    swift_slowDealloc(v63, -1, -1);
    swift_slowDealloc(v62, -1, -1);

    goto LABEL_32;
  }

LABEL_31:
LABEL_32:
  sub_1004DEC98((uint64_t)&v100, (uint64_t)&v94);
  if (v95)
  {
    sub_10001BCA8(&v94, (uint64_t)&v96);
    sub_1004DBB3C((uint64_t)&v96, a8);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v96);
  }
  else
  {
    sub_10000882C((uint64_t)&v94, (uint64_t *)&unk_10084D038);
  }
  objc_msgSend(a6, "reset");
  return sub_10000882C((uint64_t)&v100, (uint64_t *)&unk_10084D038);
}

void sub_1004DD6C8(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _UNKNOWN **v28;
  NSObject *v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  id v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  _UNKNOWN **v60;
  id v61;
  _QWORD *type;
  os_log_type_t log;
  NSObject *v64;
  void *v65;
  id v67;
  uint64_t v68;
  id v69;

  switch((unsigned __int16)objc_msgSend(a1, "operationTypeRawValue"))
  {
    case 1u:
      v21 = sub_1001A9F34();
      if (!v21)
        goto LABEL_22;
      v22 = v21;
      v23 = sub_1001AA0F8();
      if (!v23)
        goto LABEL_21;
      v24 = v23;
      v25 = type metadata accessor for RDTemplateOperationCopyRemindersFromTemplateToREMList();
      v26 = swift_allocObject(v25, 56, 7);
      *(_BYTE *)(v26 + 16) = 0;
      *(_QWORD *)(v26 + 24) = v22;
      *(_QWORD *)(v26 + 32) = v24;
      v27 = a2;
      *(_QWORD *)(v26 + 40) = a2;
      *(_QWORD *)(v26 + 48) = 50;
      v28 = &off_1007F2AF8;
      goto LABEL_13;
    case 2u:
      v29 = sub_1001A9F34();
      if (!v29)
        goto LABEL_22;
      v22 = v29;
      v30 = sub_1001AA0F8();
      if (!v30)
        goto LABEL_21;
      v31 = v30;
      v25 = type metadata accessor for RDTemplateOperationCopyRemindersFromPublicTemplateToREMList();
      v26 = swift_allocObject(v25, 56, 7);
      *(_BYTE *)(v26 + 16) = 1;
      *(_QWORD *)(v26 + 24) = v22;
      *(_QWORD *)(v26 + 32) = v31;
      v27 = a2;
      *(_QWORD *)(v26 + 40) = a2;
      *(_QWORD *)(v26 + 48) = 50;
      v28 = &off_1007EE430;
LABEL_13:
      *(_QWORD *)(a3 + 24) = v25;
      *(_QWORD *)(a3 + 32) = v28;
      *(_QWORD *)a3 = v26;
      v32 = v27;
      return;
    case 3u:
    case 4u:
      v5 = sub_1001A9F34();
      if (!v5)
        goto LABEL_22;
      v6 = v5;
      v7 = sub_1001AA0F8();
      if (!v7)
        goto LABEL_16;
      v8 = v7;
      v9 = objc_msgSend(a1, "configurationData");
      if (!v9)
      {

        v6 = v8;
LABEL_16:

        goto LABEL_22;
      }
      v10 = v9;
      v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v13 = v12;

      v69 = 0;
      v14 = objc_msgSend(a2, "fetchPrimaryActiveCloudKitAccountREMObjectIDWithError:", &v69);
      v15 = v69;
      if (!v14)
      {
        v67 = (id)v11;
        v35 = v69;
        v36 = _convertNSErrorToError(_:)(v15);

        swift_willThrow(v37);
        swift_errorRelease(v36);
        if (qword_100837730 != -1)
          swift_once(&qword_100837730, sub_1004D961C);
        v38 = type metadata accessor for Logger(0);
        sub_10001AAA8(v38, (uint64_t)qword_10084CEF0);
        v39 = a1;
        v40 = v6;
        v41 = v8;
        v42 = v39;
        v43 = v40;
        v44 = v41;
        v45 = Logger.logObject.getter(v44);
        v46 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v45, v46))
        {
          v47 = swift_slowAlloc(32, -1);
          type = (_QWORD *)swift_slowAlloc(16, -1);
          v65 = (void *)swift_slowAlloc(32, -1);
          v69 = v65;
          *(_DWORD *)v47 = 136315650;
          v64 = v45;
          sub_1001A9EF0();
          v48 = sub_10001A630(&qword_10084D048);
          log = v46;
          v49 = Optional.descriptionOrNil.getter(v48);
          v51 = v50;
          v68 = sub_10001A820(v49, v50, (uint64_t *)&v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);

          swift_bridgeObjectRelease(v51);
          *(_WORD *)(v47 + 12) = 2114;
          v68 = (uint64_t)v43;
          v52 = v43;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);
          *type = v6;

          *(_WORD *)(v47 + 22) = 2114;
          v68 = (uint64_t)v44;
          v53 = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);
          type[1] = v8;

          v22 = v64;
          _os_log_impl((void *)&_mh_execute_header, v64, log, "RDTemplateOperationQueue: Cannot create template operation without primary active CloudKit account {operationType: %s, templateObjectID: %{public}@, listObjectID: %{public}@}", (uint8_t *)v47, 0x20u);
          v54 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(type, 2, v54);
          swift_slowDealloc(type, -1, -1);
          swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v65, -1, -1);
          swift_slowDealloc(v47, -1, -1);
          sub_1000A71C8((uint64_t)v67, v13);

LABEL_21:
        }
        else
        {

          sub_1000A71C8((uint64_t)v67, v13);
        }
LABEL_22:
        *(_QWORD *)(a3 + 32) = 0;
        *(_OWORD *)a3 = 0u;
        *(_OWORD *)(a3 + 16) = 0u;
        return;
      }
      v16 = v14;
      v17 = type metadata accessor for JSONDecoder(0);
      swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
      v18 = JSONDecoder.init()(v15);
      v19 = type metadata accessor for REMTemplateConfiguration_Codable(0);
      v20 = sub_10009FC50(&qword_10084D050, (uint64_t (*)(uint64_t))&type metadata accessor for REMTemplateConfiguration_Codable, (uint64_t)&protocol conformance descriptor for REMTemplateConfiguration_Codable);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)(v19, v11, v13, v19, v20);
      swift_release(v18);
      v55 = v69;
      v56 = sub_1001A9EF0();
      if (v56 == 2)
      {
        v57 = type metadata accessor for RDTemplateOperationCopyRemindersFromREMListToTemplate();
        v58 = swift_allocObject(v57, 65, 7);
        *(_BYTE *)(v58 + 64) = 2;
        *(_QWORD *)(v58 + 16) = v6;
        *(_QWORD *)(v58 + 24) = v8;
        *(_QWORD *)(v58 + 32) = v16;
        *(_QWORD *)(v58 + 40) = v55;
        v59 = a2;
        *(_QWORD *)(v58 + 48) = a2;
        *(_QWORD *)(v58 + 56) = 50;
        v60 = &off_1007EC698;
      }
      else
      {
        v57 = type metadata accessor for RDTemplateOperationCopyRemindersFromCustomSmartListToTemplate();
        v58 = swift_allocObject(v57, 65, 7);
        *(_BYTE *)(v58 + 64) = 3;
        *(_QWORD *)(v58 + 16) = v6;
        *(_QWORD *)(v58 + 24) = v8;
        *(_QWORD *)(v58 + 32) = v16;
        *(_QWORD *)(v58 + 40) = v55;
        v59 = a2;
        *(_QWORD *)(v58 + 48) = a2;
        *(_QWORD *)(v58 + 56) = 50;
        v60 = &off_1007E5018;
      }
      *(_QWORD *)(a3 + 24) = v57;
      *(_QWORD *)(a3 + 32) = v60;
      v61 = v59;
      sub_1000A71C8(v11, v13);
      *(_QWORD *)a3 = v58;
      return;
    case 5u:
      v33 = type metadata accessor for RDTemplateOperationBatchDeleteCachedPublicTemplates();
      v34 = swift_allocObject(v33, 32, 7);
      *(_BYTE *)(v34 + 16) = 4;
      *(_QWORD *)(v34 + 24) = 0;
      *(_QWORD *)(a3 + 24) = v33;
      *(_QWORD *)(a3 + 32) = &off_1007EA058;
      *(_QWORD *)a3 = v34;
      return;
    default:
      goto LABEL_22;
  }
}

uint64_t sub_1004DDFBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  _BYTE v11[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v11, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v6 = result;
    Strong = swift_unknownObjectWeakLoadStrong(result + 56, v5);
    if (Strong)
    {
      v8 = Strong;
      v9 = *(_QWORD *)(v6 + 64);
      ObjectType = swift_getObjectType(Strong);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 16))(v6, a2, ObjectType, v9);
      swift_release(v6);
      return swift_unknownObjectRelease(v8);
    }
    else
    {
      return swift_release(v6);
    }
  }
  return result;
}

uint64_t sub_1004DE05C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  _BYTE v11[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v11, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v6 = result;
    Strong = swift_unknownObjectWeakLoadStrong(result + 56, v5);
    if (Strong)
    {
      v8 = Strong;
      v9 = *(_QWORD *)(v6 + 64);
      ObjectType = swift_getObjectType(Strong);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 24))(v6, a2, ObjectType, v9);
      swift_release(v6);
      return swift_unknownObjectRelease(v8);
    }
    else
    {
      return swift_release(v6);
    }
  }
  return result;
}

void sub_1004DE0FC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t Strong;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t MetatypeMetadata;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  Class isa;
  uint64_t v39;
  id v40;
  unsigned int v41;
  id v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t ObjectType;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint8_t *v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  _QWORD v79[3];
  char v80[16];
  id aBlock;
  _QWORD v82[4];
  uint64_t v83;
  _QWORD *v84;
  _BYTE v85[24];

  v78 = a3;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v76 = *(_QWORD *)(v9 - 8);
  v77 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v85, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v17 = Strong;
    v74 = v6;
    if (qword_100837958 != -1)
      swift_once(&qword_100837958, sub_1005B83A8);
    v18 = qword_100872288;
    v19 = (void *)swift_retain(qword_100872288);
    v20 = sub_1003011F8(v19);
    swift_release(v18);
    if (!v20)
    {
      v35 = v17;
LABEL_11:
      swift_release(v35);
      return;
    }
    v75 = v17;
    if (sub_100375FE8(4))
    {
      swift_release(v75);

      return;
    }
    v36 = type metadata accessor for REMCDTemplateOperationQueueItem();
    v37 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v36)), "initWithContext:", a2);
    v73 = v20;
    objc_msgSend(v37, "setAccount:", v20);
    objc_msgSend(v37, "setOperationTypeRawValue:", 5);
    Date.init()(objc_msgSend(v37, "setPriorityRawValue:", 10));
    isa = Date._bridgeToObjectiveC()().super.isa;
    v39 = v12;
    v40 = v37;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v39);
    objc_msgSend(v37, "setCreationDate:", isa);

    aBlock = 0;
    v41 = objc_msgSend(a2, "save:", &aBlock);
    v42 = aBlock;
    if (v41)
    {
      v43 = qword_100837730;
      v44 = aBlock;
      if (v43 != -1)
        swift_once(&qword_100837730, sub_1004D961C);
      v45 = type metadata accessor for Logger(0);
      v46 = sub_10001AAA8(v45, (uint64_t)qword_10084CEF0);
      v47 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.default.getter(v47);
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc(12, -1);
        v50 = (void *)swift_slowAlloc(32, -1);
        aBlock = v50;
        *(_DWORD *)v49 = 136315138;
        v72 = v49 + 4;
        v51 = sub_1000D92EC((uint64_t)v78);
        v53 = v52;
        v84 = (_QWORD *)sub_10001A820(v51, v52, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85);
        swift_bridgeObjectRelease(v53);
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "%s: Inserted template operation queue item for batch deleting cached public templates", v49, 0xCu);
        swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1, -1);
        swift_slowDealloc(v49, -1, -1);
      }

      v54 = v75;
      v56 = swift_unknownObjectWeakLoadStrong(v75 + 56, v55);
      if (v56)
      {
        v57 = v56;
        v58 = *(_QWORD *)(v54 + 64);
        ObjectType = swift_getObjectType(v56);
        (*(void (**)(uint64_t, id, uint64_t, uint64_t))(v58 + 32))(v54, v40, ObjectType, v58);
        swift_unknownObjectRelease(v57);
      }
      v78 = *(void **)(v54 + 88);
      v60 = swift_allocObject(&unk_1007F7498, 24, 7);
      swift_weakInit(v60 + 16, v54);
      v82[3] = sub_1004DEFD8;
      v83 = v60;
      aBlock = _NSConcreteStackBlock;
      v82[0] = 1107296256;
      v82[1] = sub_1000094C8;
      v82[2] = &unk_1007F76B8;
      v61 = _Block_copy(&aBlock);
      v62 = swift_retain(v60);
      static DispatchQoS.unspecified.getter(v62);
      v84 = _swiftEmptyArrayStorage;
      v63 = v40;
      v64 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v65 = sub_10001A630((uint64_t *)&unk_100838000);
      v66 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v84, v65, v66, v5, v64);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v61);
      _Block_release(v61);

      (*(void (**)(char *, uint64_t))(v74 + 8))(v8, v5);
      (*(void (**)(char *, uint64_t))(v76 + 8))(v11, v77);
      swift_release(v54);
      v67 = v83;
      swift_release(v60);
      v35 = v67;
      goto LABEL_11;
    }
    v68 = aBlock;
    v69 = _convertNSErrorToError(_:)(v42);

    swift_willThrow(v70);
    v71 = v73;
    v21 = v73;
    if (qword_100837730 != -1)
      swift_once(&qword_100837730, sub_1004D961C);
    v22 = type metadata accessor for Logger(0);
    sub_10001AAA8(v22, (uint64_t)qword_10084CEF0);
    swift_errorRetain(v69);
    v23 = swift_errorRetain(v69);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(22, -1);
      v27 = (_QWORD *)swift_slowAlloc(64, -1);
      v84 = v27;
      *(_DWORD *)v26 = 136315394;
      aBlock = v78;
      MetatypeMetadata = swift_getMetatypeMetadata(v78);
      v29 = String.init<A>(describing:)(&aBlock, MetatypeMetadata);
      v31 = v30;
      aBlock = (id)sub_10001A820(v29, v30, (uint64_t *)&v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v82);
      swift_bridgeObjectRelease(v31);
      *(_WORD *)(v26 + 12) = 2082;
      swift_getErrorValue(v69, v80, v79);
      v32 = Error.rem_errorDescription.getter(v79[1], v79[2]);
      v34 = v33;
      aBlock = (id)sub_10001A820(v32, v33, (uint64_t *)&v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v82);
      swift_bridgeObjectRelease(v34);
      swift_errorRelease(v69);
      swift_errorRelease(v69);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "%s: Failed to insert template operation queue item for batch deleting cached public templates {error: %{public}s}", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      swift_release(v75);
      swift_errorRelease(v69);
    }
    else
    {

      swift_release(v75);
      swift_errorRelease(v69);
      swift_errorRelease(v69);
      swift_errorRelease(v69);

    }
  }
}

uint64_t sub_1004DE8B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    sub_1004DA48C(0);
    return swift_release(v3);
  }
  return result;
}

id sub_1004DE978()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDTemplateOperationQueue.BabysitTarget();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1004DE9AC()
{
  uint64_t v0;

  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 16));
  sub_100008EFC(v0 + 56);

  swift_release(*(_QWORD *)(v0 + 96));
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_1004DEA20()
{
  uint64_t v0;

  sub_1004DE9AC();
  return swift_deallocClassInstance(v0, 184, 7);
}

uint64_t type metadata accessor for RDTemplateOperationQueue()
{
  return objc_opt_self(_TtC7remindd24RDTemplateOperationQueue);
}

uint64_t type metadata accessor for RDTemplateOperationQueue.BabysitTarget()
{
  return objc_opt_self(_TtCC7remindd24RDTemplateOperationQueueP33_03AEDCAF47C2C623D845E2853D7EEB6713BabysitTarget);
}

void sub_1004DEA80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t Strong;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  double v19;
  void (*v20)(_BYTE *, uint64_t);
  double v21;
  _BYTE v22[24];

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v6);
  v10 = &v22[-v9 - 8];
  a1 += 16;
  swift_beginAccess(a1, v22, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v12 = Strong;
    v13 = *(_BYTE *)(Strong + 120);
    *(_BYTE *)(v12 + 120) = 0;
    sub_1004DAA18(v13);
    swift_release(v12);
  }
  if (qword_100837730 != -1)
    swift_once(&qword_100837730, sub_1004D961C);
  v14 = type metadata accessor for Logger(0);
  sub_10001AAA8(v14, (uint64_t)qword_10084CEF0);
  v15 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v10, a2, v4);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v18 = 134217984;
    Date.init()(v18);
    v19 = Date.timeIntervalSince(_:)(v10);
    v20 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
    v20(v8, v4);
    v21 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22);
    v20(v10, v4);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "RDTemplateOperationQueue: Finished handling template operation queue items {elapsedSeconds: %f}", v18, 0xCu);
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v10, v4);
  }

}

uint64_t sub_1004DEC98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_10084D038);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004DECE0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004DED04()
{
  uint64_t v0;

  return sub_1004D998C(v0);
}

uint64_t sub_1004DED0C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004DED30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + 7) & 0xFFFFFFFFFFFFF8;
  v8 = (v5 + 23) & 0xFFFFFFFFFFFFF8;
  v9 = ((v5 + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v7));

  return swift_deallocObject(v0, v9, v6);
}

uint64_t sub_1004DEDD8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v2 + *(_QWORD *)(v1 + 64);
  return sub_1004DB020(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + ((v3 + 7) & 0xFFFFFFFFFFFFFFF8)), *(_BYTE *)(v0 + ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(void **)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_BYTE *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v0 + ((v3 + 39) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1004DEE44()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1004DEE70()
{
  uint64_t v0;

  return sub_1004DDFBC(*(_QWORD *)(v0 + 16), v0 + 24);
}

uint64_t sub_1004DEE7C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004DEEA0()
{
  uint64_t v0;

  return sub_1004DE05C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1004DEEA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1004DEF38()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 80);
  sub_1004DEA80(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1004DEF7C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004DEFA0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

void sub_1004DEFCC()
{
  uint64_t v0;

  sub_1004DE0FC(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1004DEFD8()
{
  uint64_t v0;

  return sub_1004DE8B4(v0);
}

uint64_t sub_1004DF008(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t WitnessTable;
  char v16;

  if ((static Array<A>.== infix(_:_:)(*a1, *a2, a3, *(_QWORD *)(a5 + 8)) & 1) != 0
    && (v12 = a1[1],
        v13 = a2[1],
        v14 = type metadata accessor for Array(0, a3),
        WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v14),
        (static Dictionary<>.== infix(_:_:)(v12, v13, a3, v14, a5, WitnessTable) & 1) != 0)
    && (static Dictionary<>.== infix(_:_:)(a1[2], a2[2], a3, a4, a5, *(_QWORD *)(a6 + 8)) & 1) != 0
    && (static Dictionary<>.== infix(_:_:)(a1[3], a2[3], a4, &type metadata for Double, a6, &protocol witness table for Double) & 1) != 0)
  {
    v16 = static Set.== infix(_:_:)(a1[4], a2[4], a4, a6);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_1004DF130(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  return sub_1004DF008(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t sub_1004DF140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

uint64_t sub_1004DF148(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 24));
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initEnumMetadataMultiPayload(a1, 0, 2, v5);
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1004DF1D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    v11 = *((unsigned __int8 *)a2 + v6);
    if (v11 >= 2)
    {
      if (v6 <= 3)
        v12 = v6;
      else
        v12 = 4;
      __asm { BR              X15 }
    }
    if (v11 == 1)
    {
      (*(void (**)(uint64_t *))(v5 + 16))(a1);
      *((_BYTE *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v6) = 0;
    }
  }
  else
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain(v10);
  }
  return v3;
}

uint64_t sub_1004DF2FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v2 - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (v6 < 2)
  {
    if (v6 == 1)
      v3 = *(_QWORD *)(v2 - 8);
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  else
  {
    if (v4 <= 3)
      v7 = v4;
    else
      v7 = 4;
    return ((uint64_t (*)(void))((char *)&loc_1004DF348 + 4 * byte_1006BF835[v7]))();
  }
}

uint64_t sub_1004DF39C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t sub_1004DF470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t sub_1004DF5EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t sub_1004DF6C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t sub_1004DF83C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  if (v3 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1004DF904 + 4 * byte_1006BF858[(v4 - 1)]))();
}

void sub_1004DF950(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64);
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = &dword_100000004;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = &_mh_execute_header.magic + 1;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_1004DFAFC(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64);
  if (v2 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64))
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1004DFB48 + 4 * byte_1006BF866[v3]))();
}

void sub_1004DFB90(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  if (a2 > 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16)
                                                                                              - 8)
                                                                                  + 64))
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    else
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    v6 = a2 - 2;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 2;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    if (v4 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    a1[v4] = a2;
  }
}

uint64_t type metadata accessor for RDManualSortHint.ValidationError(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for RDManualSortHint.ValidationError);
}

uint64_t sub_1004DFC84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 56);
}

double sub_1004DFC8C(_QWORD *a1)
{
  double result;

  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1[4]).n128_u64[0];
  return result;
}

uint64_t *sub_1004DFCCC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  v7 = a2[4];
  a1[4] = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t *sub_1004DFD38(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a2[4];
  v13 = a1[4];
  a1[4] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

_QWORD *sub_1004DFDDC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  v6 = a1[4];
  a1[4] = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t sub_1004DFE40(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1004DFE88(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for RDManualSortHint(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for RDManualSortHint);
}

uint64_t sub_1004DFEDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084D1B0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084D1B0);
  if (qword_100837608 != -1)
    swift_once(&qword_100837608, sub_1004A17C8);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1004DFF6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  _QWORD aBlock[5];
  uint64_t v18;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[4] = sub_1004E18AC;
  v18 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007F7918;
  v9 = _Block_copy(aBlock);
  v10 = swift_retain();
  static DispatchQoS.unspecified.getter(v10);
  v16 = _swiftEmptyArrayStorage;
  v11 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v12 = sub_10001A630((uint64_t *)&unk_100838000);
  v13 = sub_1000D316C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v18);
}

void sub_1004E0124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (uint64_t *)((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v1 + 24);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2, v4);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    if (qword_100837740 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100837740, sub_1004DFEDC);
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10001AAA8(v9, (uint64_t)qword_10084D1B0);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "ICCCU: Starting ICCloudConfigurationUpdater", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  sub_1004E028C(v14);
}

void sub_1004E028C(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  char *v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void (*v29)(id, uint64_t (*)(), _QWORD *, uint64_t, uint64_t);
  char *v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[24];
  char v46[24];

  v2 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v42 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(a1);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v6 + 88);
  v40 = *(_QWORD *)(v7 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v40);
  v9 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v43 = *(_QWORD *)(v9 - 8);
  v44 = v9;
  __chkstk_darwin(v9);
  v41 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v37 - v12;
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (uint64_t *)((char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = (void *)*((_QWORD *)v2 + 3);
  *v18 = v19;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v15 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v14, v16);
  v39 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v18, v14);
  if ((v19 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once(&qword_100837740, sub_1004DFEDC);
    goto LABEL_5;
  }
  v20 = v7;
  v21 = &v2[*(_QWORD *)(*(_QWORD *)v2 + 120)];
  v22 = swift_beginAccess(v21, v46, 0, 0);
  v23 = v43;
  v24 = v44;
  (*(void (**)(char *, char *, uint64_t, __n128))(v43 + 16))(v13, v21, v44, v22);
  v38 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48))(v13, 1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v13, v24);
  if (v25 == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v5, &v2[*(_QWORD *)(*(_QWORD *)v2 + 128)], v3);
    v26 = swift_allocObject(&unk_1007F7950, 24, 7);
    swift_weakInit(v26 + 16, v2);
    v27 = (_QWORD *)swift_allocObject(&unk_1007F7978, 40, 7);
    v27[2] = v3;
    v27[3] = v20;
    v27[4] = v26;
    v28 = v40;
    v29 = *(void (**)(id, uint64_t (*)(), _QWORD *, uint64_t, uint64_t))(v40 + 24);
    swift_retain();
    v30 = v41;
    v29(v39, sub_1004E18F8, v27, v3, v28);
    swift_release(v27);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v5, v3);
    swift_release(v26);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v30, 0, 1, AssociatedTypeWitness);
    v31 = swift_beginAccess(v21, v45, 33, 0);
    (*(void (**)(char *, char *, uint64_t, __n128))(v43 + 40))(v21, v30, v44, v31);
    swift_endAccess(v45);
    sub_1004E0EAC();
    return;
  }
  if (qword_100837740 != -1)
    goto LABEL_9;
LABEL_5:
  v32 = type metadata accessor for Logger(0);
  v33 = sub_10001AAA8(v32, (uint64_t)qword_10084D1B0);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v34, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "ICCCU: Unexpectedly having an existing non-nil scheduler (xpcActivity) when trying to create and schedule a new one", v36, 2u);
    swift_slowDealloc(v36, -1, -1);
  }

}

id sub_1004E064C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if (qword_100837740 != -1)
    swift_once(&qword_100837740, sub_1004DFEDC);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084D1B0);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "ICCCU: Running scheduled background activity, let's check if we should download remote cloud configuration file", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  return sub_1004E071C();
}

id sub_1004E071C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  id v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t ObjectType;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  __n128 v47;
  void (*v48)(char *, uint64_t, __n128);
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  __n128 v61;
  void (*v62)(char *, uint64_t, __n128);
  char *v63;
  void (*v65)(char *, uint64_t);
  char *v66;
  void (*v67)(char *, uint64_t);
  _QWORD v68[2];
  int v69;
  char *v70;
  char *v71;
  uint64_t v72;
  id v73;
  char *v74;
  uint64_t v75;
  char *v76;

  v1 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v1);
  v74 = (char *)v68 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v5 = (char *)v68 - v4;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v71 = (char *)v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)v68 - v10;
  __chkstk_darwin(v12);
  v14 = (char *)v68 - v13;
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (_QWORD *)((char *)v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = (void *)v0[3];
  *v19 = v20;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v16 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v15, v17);
  v21 = v20;
  v22 = _dispatchPreconditionTest(_:)(v19);
  (*(void (**)(_QWORD *, uint64_t))(v16 + 8))(v19, v15);
  if ((v22 & 1) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  v73 = (id)v0[2];
  objc_msgSend(v73, "cloudConfigurationDownloadThrottleInterval");
  v24 = v23;
  v15 = v0[5];
  ObjectType = swift_getObjectType();
  v26 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v72 = ObjectType;
  v26(ObjectType, v15);
  v22 = v6;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_1000EA320((uint64_t)v5);
    if (qword_100837740 == -1)
    {
LABEL_4:
      v27 = type metadata accessor for Logger(0);
      v28 = sub_10001AAA8(v27, (uint64_t)qword_10084D1B0);
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.default.getter(v29);
      v31 = v7;
      if (os_log_type_enabled(v29, v30))
      {
        v32 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "ICCCU: lastCloudConfigurationDownload == nil, downloading remote config", v32, 2u);
        swift_slowDealloc(v32, -1, -1);
      }

LABEL_17:
      v66 = v74;
      Date.init()(v33);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v66, 0, 1, v22);
      (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v66, v72, v15);
      return objc_msgSend(v73, "downloadRemoteConfiguration");
    }
LABEL_20:
    swift_once(&qword_100837740, sub_1004DFEDC);
    goto LABEL_4;
  }
  v34 = v14;
  v35 = v5;
  v36 = v6;
  v37 = (*(uint64_t (**)(char *, char *))(v7 + 32))(v14, v35);
  if (Date.timeIntervalSinceNow.getter(v37) < -v24)
  {
    if (qword_100837740 != -1)
      swift_once(&qword_100837740, sub_1004DFEDC);
    v38 = type metadata accessor for Logger(0);
    sub_10001AAA8(v38, (uint64_t)qword_10084D1B0);
    v31 = v7;
    v22 = v6;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v34, v6);
    static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
    v39 = static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.default.getter(v40);
    v42 = v41;
    if (os_log_type_enabled(v40, v41))
    {
      v43 = swift_slowAlloc(28, -1);
      v71 = (char *)swift_slowAlloc(32, -1);
      v76 = v71;
      *(_DWORD *)v43 = 136446722;
      v68[1] = v43 + 4;
      v44 = sub_10009FC50((unint64_t *)&qword_100846B70, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v69 = v42;
      v45 = dispatch thunk of CustomStringConvertible.description.getter(v6, v44);
      v75 = sub_10001A820(v45, v46, (uint64_t *)&v76);
      v70 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76);
      v47 = swift_bridgeObjectRelease();
      v48 = *(void (**)(char *, uint64_t, __n128))(v31 + 8);
      v48(v11, v6, v47);
      *(_WORD *)(v43 + 12) = 1040;
      LODWORD(v75) = 3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, (char *)&v75 + 4);
      *(_WORD *)(v43 + 18) = 2048;
      v75 = *(_QWORD *)&v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76);
      _os_log_impl((void *)&_mh_execute_header, v40, (os_log_type_t)v69, "ICCCU: lastCloudConfigurationDownload > configurationInterval, should download remote config {lastCloudConfigurationDownload: %{public}s, throttingInterval: %.*f}", (uint8_t *)v43, 0x1Cu);
      v49 = v71;
      swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v43, -1, -1);

      v33 = ((uint64_t (*)(char *, uint64_t))v48)(v70, v6);
    }
    else
    {

      v65 = *(void (**)(char *, uint64_t))(v31 + 8);
      v65(v11, v6);
      v33 = ((uint64_t (*)(char *, uint64_t))v65)(v34, v6);
    }
    goto LABEL_17;
  }
  if (qword_100837740 != -1)
    swift_once(&qword_100837740, sub_1004DFEDC);
  v50 = type metadata accessor for Logger(0);
  sub_10001AAA8(v50, (uint64_t)qword_10084D1B0);
  v51 = v71;
  v52 = v14;
  v53 = v36;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v71, v52, v36);
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  v54 = static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  v55 = Logger.logObject.getter(v54);
  v56 = static os_log_type_t.default.getter(v55);
  if (os_log_type_enabled(v55, v56))
  {
    v57 = swift_slowAlloc(28, -1);
    v74 = (char *)swift_slowAlloc(32, -1);
    v76 = v74;
    *(_DWORD *)v57 = 136446722;
    v58 = sub_10009FC50((unint64_t *)&qword_100846B70, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v59 = dispatch thunk of CustomStringConvertible.description.getter(v53, v58);
    v75 = sub_10001A820(v59, v60, (uint64_t *)&v76);
    v70 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76);
    v61 = swift_bridgeObjectRelease();
    v62 = *(void (**)(char *, uint64_t, __n128))(v7 + 8);
    v62(v51, v53, v61);
    *(_WORD *)(v57 + 12) = 1040;
    LODWORD(v75) = 3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, (char *)&v75 + 4);
    *(_WORD *)(v57 + 18) = 2048;
    v75 = *(_QWORD *)&v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76);
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "ICCCU: lastCloudConfigurationDownload < throttingInterval, not downloading remote config {lastCloudConfigurationDownload: %{public}s, throttingInterval: %.*f}", (uint8_t *)v57, 0x1Cu);
    v63 = v74;
    swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v63, -1, -1);
    swift_slowDealloc(v57, -1, -1);

    return (id)((uint64_t (*)(char *, uint64_t))v62)(v70, v53);
  }
  else
  {

    v67 = *(void (**)(char *, uint64_t))(v7 + 8);
    v67(v51, v36);
    return (id)((uint64_t (*)(char *, uint64_t))v67)(v34, v36);
  }
}

uint64_t sub_1004E0E50(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    sub_1004E064C();
    return swift_release(v3);
  }
  return result;
}

void sub_1004E0EAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t AssociatedConformanceWitness;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char v42[24];

  v1 = v0;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v38 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  v39 = *(_QWORD *)(v38 + 8);
  v40 = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v39);
  v4 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v37 - v6;
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v9);
  v41 = (char *)&v37 - v10;
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (uint64_t *)((char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(void **)(v1 + 24);
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11, v13);
  v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v15, v11);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v18 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 120);
  v19 = swift_beginAccess(v18, v42, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v7, v18, v4, v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if (qword_100837740 == -1)
    {
LABEL_4:
      v20 = type metadata accessor for Logger(0);
      v21 = sub_10001AAA8(v20, (uint64_t)qword_10084D1B0);
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "ICCCU: Unexpectedly could not create an background scheduler (xpcActivity) when trying to schedule a new one", v24, 2u);
        swift_slowDealloc(v24, -1, -1);
      }

      return;
    }
LABEL_16:
    swift_once(&qword_100837740, sub_1004DFEDC);
    goto LABEL_4;
  }
  v25 = v8;
  v26 = v41;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v41, v7, AssociatedTypeWitness);
  v27 = v40;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v39, v40, AssociatedTypeWitness, &unk_10078A83C, &unk_10078A844);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(AssociatedTypeWitness, AssociatedConformanceWitness) & 1) != 0)
  {
    if (qword_100837740 != -1)
      swift_once(&qword_100837740, sub_1004DFEDC);
    v29 = type metadata accessor for Logger(0);
    v30 = sub_10001AAA8(v29, (uint64_t)qword_10084D1B0);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "ICCCU: Unexpectedly having pending activity on the background scheduler (xpcActivity) when trying to create and schedule a new one", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }

  }
  else
  {
    objc_msgSend(*(id *)(v1 + 16), "cloudConfigurationDownloadThrottleInterval");
    v35 = v34;
    v36 = swift_getAssociatedConformanceWitness(v38, v27, AssociatedTypeWitness, &unk_10078A3EC, &unk_10078A3FC);
    (*(void (**)(uint64_t, uint64_t, double))(v36 + 24))(AssociatedTypeWitness, v36, v35);
    (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
  }
  (*(void (**)(char *, uint64_t))(v25 + 8))(v26, AssociatedTypeWitness);
}

uint64_t *sub_1004E1294()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;

  v1 = *v0;
  swift_unknownObjectRelease(v0[2]);

  swift_unknownObjectRelease(v0[4]);
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 120);
  v4 = v1 + 80;
  v3 = *(_QWORD *)(v1 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8));
  v6 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v2, v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 128), v3);
  return v0;
}

uint64_t sub_1004E1340()
{
  uint64_t v0;

  sub_1004E1294();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1004E1364()
{
  return sub_1004DFF6C();
}

uint64_t sub_1004E1384@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(v1, "lastCloudConfigurationDownload");
  if (v3)
  {
    v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

void sub_1004E1408(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  Class v7;
  Class isa;
  Class v9;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4);
  v7 = 0;
  if (v6 != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    v7 = isa;
  }
  v9 = v7;
  objc_msgSend(v2, "setLastCloudConfigurationDownload:");

}

uint64_t sub_1004E149C(uint64_t a1)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD v7[5];

  v7[0] = "\b";
  v7[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v7[2] = &unk_1006BFA68;
  v2 = *(_QWORD *)(a1 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8));
  result = type metadata accessor for Optional(319, AssociatedTypeWitness);
  if (v5 <= 0x3F)
  {
    v7[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_checkMetadataState(319, v2);
    if (v6 <= 0x3F)
    {
      v7[4] = *(_QWORD *)(result - 8) + 64;
      result = swift_initClassMetadata2(a1, 0, 5, v7, a1 + 96);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for RDICCloudConfigurationUpdater(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6C78(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RDICCloudConfigurationUpdater);
}

void sub_1004E1580(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  Swift::Int v12;
  __int128 v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  int v22;
  char v23;
  Swift::Int v24;

  v2 = v1;
  sub_1003B7FC4(a1, 0.0, 1.0);
  v3 = *(double *)(v1 + 16);
  v5 = v4 + 1.0;
  if (qword_100837740 != -1)
    swift_once(&qword_100837740, sub_1004DFEDC);
  v6 = v3 * v5;
  v7 = type metadata accessor for Logger(0);
  sub_10001AAA8(v7, (uint64_t)qword_10084D1B0);
  v8 = swift_retain();
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    *(_DWORD *)v11 = 134218240;
    *(_QWORD *)&v13 = *(_QWORD *)(v2 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, (char *)&v13 + 8);
    swift_release(v2);
    *(_WORD *)(v11 + 12) = 2048;
    *(double *)&v13 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, (char *)&v13 + 8);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "ICCCU-XPCActivity: Updating scheduler (xpcActivity) criteria {inputDelay: %f, randomizedDelay: %f}", (uint8_t *)v11, 0x16u);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    swift_release(v2);
  }
  v12 = sub_1002EAFA4((uint64_t)&off_1007E0BE8);
  v13 = xmmword_1006B8C90;
  v14 = v6;
  v15 = 0;
  v16 = 0;
  v17 = 65537;
  v18 = 0;
  v19 = 0x4024000000000000;
  v20 = 0;
  v21 = 0;
  v22 = 33619969;
  v23 = 7;
  v24 = v12;
  sub_1004F53D0((uint64_t)&v13);
  swift_bridgeObjectRelease();
}

uint64_t sub_1004E175C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for RDICCloudConfigurationUpdaterXPCActivity()
{
  return objc_opt_self(_TtC7remindd40RDICCloudConfigurationUpdaterXPCActivity);
}

void sub_1004E17A0(uint64_t a1)
{
  sub_1004E1580(a1);
}

uint64_t type metadata accessor for RDICCloudConfigurationUpdaterXPCActivityFactory()
{
  return objc_opt_self(_TtC7remindd47RDICCloudConfigurationUpdaterXPCActivityFactory);
}

_UNKNOWN **sub_1004E17E0()
{
  return &off_1007F78C0;
}

void sub_1004E17EC(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;

  v8 = type metadata accessor for RDICCloudConfigurationUpdaterXPCActivity();
  v9 = swift_allocObject(v8, 32, 7);
  *(_QWORD *)(v9 + 16) = 0;
  v10 = (_QWORD *)swift_allocObject(&unk_1007F79A0, 40, 7);
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  v11 = type metadata accessor for RDDynamicXPCActivity();
  swift_allocObject(v11, 128, 7);
  v12 = a1;
  swift_retain();
  sub_1004F69CC(1, (uint64_t)sub_1000A5B1C, (uint64_t)v10);
  *(_QWORD *)(v9 + 24) = v13;
  *a4 = v9;
}

_UNKNOWN **sub_1004E18A0()
{
  return &off_1007F78E0;
}

uint64_t sub_1004E18B0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004E18D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1004E18F8()
{
  uint64_t v0;

  return sub_1004E0E50(*(_QWORD *)(v0 + 32));
}

uint64_t sub_1004E1914()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1004E1940@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t PredicateType;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  id v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  id v60;
  void *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t (*v71)(char *, uint64_t);
  uint64_t v72;
  char v73;
  id v74;
  id v75;
  id v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  id v82;
  char *v83;
  char *v84;
  unint64_t v85;
  unint64_t *v86;
  __objc2_class **v87;
  uint64_t v88;
  __objc2_class **v89;
  unint64_t *v90;
  void *v91;
  id v92;
  void *v93;
  id v94;
  void *v95;
  id v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  uint64_t v107;
  char v108;
  id v109;
  int v110;
  uint64_t v111;
  char v112;
  __n128 v113;
  unsigned __int8 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t result;
  __int16 v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  void (*v141)(char *, uint64_t);
  uint64_t v142;
  id v143;
  uint64_t v144;
  id v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  _QWORD v149[3];
  char *v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  unint64_t v155;

  v143 = a1;
  v133 = a3;
  v134 = type metadata accessor for NSFastEnumerationIterator(0);
  v126 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v137 = (char *)&v125 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v5);
  v132 = (uint64_t)&v125 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v139 = (char *)&v125 - v8;
  __chkstk_darwin(v9);
  v140 = (uint64_t)&v125 - v10;
  PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType(0);
  v12 = *(_QWORD *)(PredicateType - 8);
  __chkstk_darwin(PredicateType);
  v14 = (char *)&v125 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v15);
  v131 = (uint64_t)&v125 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v130 = (uint64_t)&v125 - v18;
  __chkstk_darwin(v19);
  v129 = (uint64_t)&v125 - v20;
  __chkstk_darwin(v21);
  v125 = (char *)&v125 - v22;
  __chkstk_darwin(v23);
  v128 = (char *)&v125 - v24;
  __chkstk_darwin(v25);
  v27 = (char *)&v125 - v26;
  __chkstk_darwin(v28);
  v30 = (char *)&v125 - v29;
  __chkstk_darwin(v31);
  v127 = (char *)&v125 - v32;
  __chkstk_darwin(v33);
  v138 = (char *)&v125 - v34;
  __chkstk_darwin(v35);
  v37 = (char *)&v125 - v36;
  __chkstk_darwin(v38);
  v40 = (char *)&v125 - v39;
  v41 = type metadata accessor for UUID(0);
  v42 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56);
  v135 = v40;
  v43 = v42(v40, 1, 1, v41);
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.hashtags.getter(v43);
  v144 = a2;
  LOBYTE(a2) = sub_1001B26B4((uint64_t)v14, a2);
  v44 = *(void (**)(char *, uint64_t))(v12 + 8);
  v142 = PredicateType;
  v141 = v44;
  v44(v14, PredicateType);
  v136 = v27;
  if ((a2 & 1) != 0)
  {
    v45 = objc_msgSend(v143, "identifier");
    if (v45)
    {
      v46 = v45;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v45);

      v47 = 0;
    }
    else
    {
      v47 = 1;
    }
    v48 = (uint64_t)v135;
    sub_10000882C((uint64_t)v135, (uint64_t *)&unk_100839C80);
    v42(v37, v47, 1, v41);
    sub_1000A5CA8((uint64_t)v37, v48, (uint64_t *)&unk_100839C80);
    v27 = v136;
  }
  v49 = (uint64_t)v138;
  v50 = v42(v138, 1, 1, v41);
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.lists.getter(v50);
  v51 = sub_1001B26B4((uint64_t)v14, v144);
  v141(v14, v142);
  if ((v51 & 1) != 0)
  {
    v52 = objc_msgSend(v143, "list");
    if (v52)
    {
      v53 = v52;
      v54 = objc_msgSend(v52, "identifier");

      if (v54)
      {
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v54);

        v55 = 0;
      }
      else
      {
        v55 = 1;
      }
      sub_10000882C(v49, (uint64_t *)&unk_100839C80);
      v42(v30, v55, 1, v41);
      v56 = (uint64_t)v127;
      sub_1000A5CA8((uint64_t)v30, (uint64_t)v127, (uint64_t *)&unk_100839C80);
    }
    else
    {
      sub_10000882C(v49, (uint64_t *)&unk_100839C80);
      v56 = (uint64_t)v127;
      v42(v127, 1, 1, v41);
    }
    sub_1000A5CA8(v56, v49, (uint64_t *)&unk_100839C80);
  }
  v57 = v42(v27, 1, 1, v41);
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.account.getter(v57);
  v58 = sub_1001B26B4((uint64_t)v14, v144);
  v141(v14, v142);
  v59 = (uint64_t)v139;
  if ((v58 & 1) != 0)
  {
    v60 = objc_msgSend(v143, "account");
    if (v60)
    {
      v61 = v60;
      v62 = objc_msgSend(v60, "identifier");

      if (v62)
      {
        v63 = (uint64_t)v125;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v62);

        v64 = 0;
      }
      else
      {
        v64 = 1;
        v63 = (uint64_t)v125;
      }
      sub_10000882C((uint64_t)v27, (uint64_t *)&unk_100839C80);
      v42((char *)v63, v64, 1, v41);
      v65 = (uint64_t)v128;
      sub_1000A5CA8(v63, (uint64_t)v128, (uint64_t *)&unk_100839C80);
    }
    else
    {
      sub_10000882C((uint64_t)v27, (uint64_t *)&unk_100839C80);
      v65 = (uint64_t)v128;
      v42(v128, 1, 1, v41);
    }
    sub_1000A5CA8(v65, (uint64_t)v27, (uint64_t *)&unk_100839C80);
  }
  v66 = type metadata accessor for Date(0);
  v67 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56);
  v68 = v67(v140, 1, 1, v66);
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.date.getter(v68);
  v69 = sub_1001B26B4((uint64_t)v14, v144);
  v70 = v142;
  v71 = (uint64_t (*)(char *, uint64_t))v141;
  v72 = ((uint64_t (*)(char *, uint64_t))v141)(v14, v142);
  if ((v69 & 1) != 0
    || (static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.partOfDay.getter(v72),
        v73 = sub_1001B26B4((uint64_t)v14, v144),
        v74 = (id)v71(v14, v70),
        (v73 & 1) != 0))
  {
    v75 = v143;
    v76 = objc_msgSend(v143, "displayDateDate");
    if (v76)
    {
      v77 = v76;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v76);

      v78 = 0;
    }
    else
    {
      v78 = 1;
    }
    v79 = v140;
    sub_10000882C(v140, (uint64_t *)&unk_1008380D0);
    v67(v59, v78, 1, v66);
    sub_1000A5CA8(v59, v79, (uint64_t *)&unk_1008380D0);
    v74 = objc_msgSend(v75, "displayDateIsAllDay");
    LODWORD(v128) = (_DWORD)v74;
    v80 = v134;
  }
  else
  {
    LODWORD(v128) = 2;
    v80 = v134;
    v75 = v143;
  }
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.location.getter(v74);
  v81 = sub_1001B26B4((uint64_t)v14, v144);
  v82 = (id)v71(v14, v70);
  if ((v81 & 1) != 0 && (v82 = objc_msgSend(v75, "alarmStorage")) != 0)
  {
    v155 = (unint64_t)_swiftEmptyArrayStorage;
    v83 = (char *)v82;
    v84 = v137;
    NSOrderedSet.makeIterator()();
    v127 = v83;

    v85 = sub_10025F8F0();
    dispatch thunk of IteratorProtocol.next()(&v153, v80, v85);
    if (v154)
    {
      v86 = (unint64_t *)&unk_1008398F0;
      v87 = off_1007D6660;
      v139 = (char *)v85;
      do
      {
        sub_10001A6CC(&v153, &v152);
        sub_10001A670((uint64_t)&v152, (uint64_t)v149);
        v88 = sub_1000151B0(0, v86, v87);
        if (swift_dynamicCast(&v146, v149, (char *)&type metadata for Any + 8, v88, 6))
        {
          v89 = v87;
          v90 = v86;
          v91 = (void *)v146;
          v92 = objc_msgSend((id)v146, "remObjectID");
          if (v92)
          {
            v93 = v92;
            v94 = objc_msgSend(v91, "account");
            if (v94)
            {
              v95 = v94;
              v96 = objc_msgSend(v94, "remObjectID");

              if (v96)
              {
                v97 = objc_msgSend(v91, "trigger");
                if (v97
                  && (v145 = v97,
                      v98 = sub_1000151B0(0, (unint64_t *)&unk_100840BD0, off_1007D6680),
                      v99 = sub_10001A630(&qword_10083DE78),
                      (swift_dynamicCast(&v146, &v145, v98, v99, 6) & 1) != 0))
                {
                  if (*((_QWORD *)&v147 + 1))
                  {
                    sub_10001BCA8(&v146, (uint64_t)v149);
                    v100 = v151;
                    v125 = v150;
                    sub_10000A388(v149, (uint64_t)v150);
                    v125 = (char *)(*(uint64_t (**)(id, void *, char *, uint64_t))(v100 + 8))(v96, v93, v125, v100);

                    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v149);
                    v101 = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v152);
                    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v101);
                    v103 = *(_QWORD *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x10);
                    v102 = *(_QWORD *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x18);
                    v80 = v134;
                    if (v103 >= v102 >> 1)
                      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v102 > 1);
                    v104 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v103, v125);
                    specialized Array._endMutation()(v104);
                    v84 = v137;
                    v86 = v90;
                    v87 = v89;
                    v85 = (unint64_t)v139;
                    goto LABEL_49;
                  }
                }
                else
                {
                  v148 = 0;
                  v146 = 0u;
                  v147 = 0u;
                }

                sub_10000882C((uint64_t)&v146, &qword_10083DE80);
              }
              else
              {

              }
              v84 = v137;
            }
            else
            {

            }
          }
          else
          {

          }
          v86 = v90;
          v87 = v89;
          v85 = (unint64_t)v139;
        }
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v152);
LABEL_49:
        dispatch thunk of IteratorProtocol.next()(&v153, v80, v85);
      }
      while (v154);
    }
    (*(void (**)(char *, uint64_t))(v126 + 8))(v84, v80);
    v105 = v155;

    v75 = v143;
    v70 = v142;
    v71 = (uint64_t (*)(char *, uint64_t))v141;
  }
  else
  {
    v105 = 0;
  }
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.priorities.getter(v82);
  v106 = sub_1001B26B4((uint64_t)v14, v144);
  v107 = v71(v14, v70);
  if ((v106 & 1) != 0)
  {
    if (((unint64_t)objc_msgSend(v75, "priority") & 0x8000000000000000) != 0)
    {
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
      __break(1u);
      return result;
    }
    v107 = REMReminderPriorityLevelForPriority();
    v139 = (char *)v107;
  }
  else
  {
    v139 = 0;
  }
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.flagged.getter(v107);
  v108 = sub_1001B26B4((uint64_t)v14, v144);
  v109 = (id)v71(v14, v70);
  if ((v108 & 1) != 0)
  {
    v109 = objc_msgSend(v75, "flagged");
    v110 = (uint64_t)v109 > 0;
  }
  else
  {
    v110 = 2;
  }
  LODWORD(v137) = v110;
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.completed.getter(v109);
  v111 = v144;
  v112 = sub_1001B26B4((uint64_t)v14, v144);
  v113 = swift_bridgeObjectRelease(v111);
  ((void (*)(char *, uint64_t, __n128))v71)(v14, v70, v113);
  v142 = v105;
  LODWORD(v141) = v106;
  if ((v112 & 1) != 0)
    v114 = objc_msgSend(v75, "completed");
  else
    v114 = 2;
  v115 = (uint64_t)v135;
  v116 = v129;
  sub_100008868((uint64_t)v135, v129, (uint64_t *)&unk_100839C80);
  v117 = (uint64_t)v138;
  v118 = v130;
  sub_100008868((uint64_t)v138, v130, (uint64_t *)&unk_100839C80);
  v119 = (uint64_t)v136;
  v120 = v131;
  sub_100008868((uint64_t)v136, v131, (uint64_t *)&unk_100839C80);
  v121 = v140;
  v122 = v132;
  sub_100008868(v140, v132, (uint64_t *)&unk_1008380D0);
  HIBYTE(v124) = v114;
  LOBYTE(v124) = (_BYTE)v137;
  REMCustomSmartListFilterDescriptor.PostFetchPredicate.FilterableReminder.init(identifier:listIdentifier:accountIdentifier:displayDateDate:displayDateIsAllDay:alarmTriggers:priority:flagged:completed:)(v116, v118, v120, v122, v128, v142, v139, (v141 & 1) == 0, v124);

  sub_10000882C(v121, (uint64_t *)&unk_1008380D0);
  sub_10000882C(v119, (uint64_t *)&unk_100839C80);
  sub_10000882C(v117, (uint64_t *)&unk_100839C80);
  return sub_10000882C(v115, (uint64_t *)&unk_100839C80);
}

uint64_t sub_1004E2734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084D420);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084D420);
  if (qword_100837608 != -1)
    swift_once(&qword_100837608, sub_1004A17C8);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_QWORD *sub_1004E27C4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;

  v3 = v2;
  v6 = type metadata accessor for UnfairLock.Options(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RDTransactionRegistrar();
  v10 = (_QWORD *)swift_allocObject(v9, 56, 7);
  v10[4] = 0;
  v10[5] = 0;
  v10[2] = 0xD000000000000031;
  v10[3] = 0x8000000100706580;
  v17 = _swiftEmptyArrayStorage;
  v11 = sub_10015EB64();
  v12 = sub_10001A630((uint64_t *)&unk_10083DBB0);
  v13 = sub_10032031C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v12, v13, v6, v11);
  v14 = type metadata accessor for UnfairLock(0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v10[6] = UnfairLock.init(options:)(v8);
  v3[4] = v10;
  v3[5] = 0;
  v3[2] = a1;
  v3[3] = a2;
  return v3;
}

id sub_1004E28EC()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 40);
  if (v1)
  {
    v2 = *(id *)(v0 + 40);
  }
  else
  {
    v3 = objc_msgSend((id)objc_opt_self(REMCloudContainer), "newCloudContainerWithPublicCloudDatabase");
    v4 = *(void **)(v0 + 40);
    *(_QWORD *)(v0 + 40) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

void sub_1004E2954(void *a1, void *a2, char a3, void *a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, _QWORD), uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  double v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  double v40;
  void (*v41)(char *, uint64_t);
  os_log_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t MetatypeMetadata;
  uint64_t v53;
  unint64_t v54;
  double v55;
  id v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  double v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  unint64_t v65;
  os_log_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  os_log_t v70;
  os_log_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, _QWORD);
  _QWORD v78[3];
  _BYTE v79[8];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v76 = a6;
  v77 = a7;
  v74 = a8;
  v75 = a9;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v73 = (char *)&v68 - v20;
  __chkstk_darwin(v21);
  v23 = (char *)&v68 - v22;
  if ((a3 & 1) != 0)
  {
    swift_errorRetain(a2);
    if (qword_100837748 != -1)
      swift_once(&qword_100837748, sub_1004E2734);
    v44 = type metadata accessor for Logger(0);
    sub_10001AAA8(v44, (uint64_t)qword_10084D420);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a5, v15);
    sub_10013D030(a2, 1);
    v45 = a1;
    sub_10013D030(a2, 1);
    v46 = v45;
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.error.getter(v47);
    v49 = v48;
    if (os_log_type_enabled(v47, v48))
    {
      v50 = swift_slowAlloc(42, -1);
      LODWORD(v71) = v49;
      v51 = v50;
      v72 = swift_slowAlloc(96, -1);
      v80 = v72;
      v81 = a10;
      *(_DWORD *)v51 = 136446978;
      v70 = v47;
      MetatypeMetadata = swift_getMetatypeMetadata(a10);
      v53 = String.init<A>(describing:)(&v81, MetatypeMetadata);
      v81 = sub_10001A820(v53, v54, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82);
      *(_QWORD *)&v55 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v51 + 12) = 2082;
      v56 = objc_msgSend(v46, "recordName", v55);
      v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
      v69 = v16;
      v59 = v58;

      v81 = sub_10001A820(v57, v59, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82);

      swift_bridgeObjectRelease();
      *(_WORD *)(v51 + 22) = 2048;
      v60 = v73;
      Date.init()(v61);
      v62 = Date.timeIntervalSince(_:)(v18);
      v63 = *(void (**)(char *, uint64_t))(v69 + 8);
      v63(v60, v15);
      v81 = *(_QWORD *)&v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82);
      v63(v18, v15);
      *(_WORD *)(v51 + 32) = 2082;
      swift_getErrorValue(a2, v79, v78);
      v64 = Error.rem_errorDescription.getter(v78[1], v78[2]);
      v81 = sub_10001A820(v64, v65, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82);
      swift_bridgeObjectRelease();
      sub_1001172E0(a2, 1);
      sub_1001172E0(a2, 1);
      v66 = v70;
      _os_log_impl((void *)&_mh_execute_header, v70, (os_log_type_t)v71, "%{public}s: [perRecordSaveBlock] Failed to save CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f, error: %{public}s}", (uint8_t *)v51, 0x2Au);
      v67 = v72;
      swift_arrayDestroy(v72, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1, -1);
      swift_slowDealloc(v51, -1, -1);

    }
    else
    {

      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      sub_1001172E0(a2, 1);
      sub_1001172E0(a2, 1);

    }
    swift_errorRetain(a2);
    sub_1004E3AC0((uint64_t)a2, 1, v76, v77, v74, v75, (uint64_t)sub_100189370);
    sub_1001172E0(a2, 1);
    sub_1001172E0(a2, 1);
  }
  else
  {
    if (qword_100837748 != -1)
      swift_once(&qword_100837748, sub_1004E2734);
    v24 = type metadata accessor for Logger(0);
    sub_10001AAA8(v24, (uint64_t)qword_10084D420);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v23, a5, v15);
    v25 = a4;
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter(v26);
    v28 = v27;
    if (os_log_type_enabled(v26, v27))
    {
      v29 = swift_slowAlloc(32, -1);
      v72 = swift_slowAlloc(64, -1);
      v80 = v72;
      v81 = a10;
      *(_DWORD *)v29 = 136446722;
      v71 = v26;
      v30 = swift_getMetatypeMetadata(a10);
      v31 = String.init<A>(describing:)(&v81, v30);
      v81 = sub_10001A820(v31, v32, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82);
      *(_QWORD *)&v33 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v29 + 12) = 2082;
      v34 = objc_msgSend(v25, "recordName", v33);
      v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      LODWORD(v70) = v28;
      v37 = v36;

      v81 = sub_10001A820(v35, v37, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82);

      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 22) = 2048;
      v38 = v73;
      Date.init()(v39);
      v40 = Date.timeIntervalSince(_:)(v23);
      v41 = *(void (**)(char *, uint64_t))(v16 + 8);
      v41(v38, v15);
      v81 = *(_QWORD *)&v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82);
      v41(v23, v15);
      v42 = v71;
      _os_log_impl((void *)&_mh_execute_header, v71, (os_log_type_t)v70, "%{public}s: Did save CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f}", (uint8_t *)v29, 0x20u);
      v43 = v72;
      swift_arrayDestroy(v72, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {

      (*(void (**)(char *, uint64_t))(v16 + 8))(v23, v15);
    }
    sub_1004E3AC0(0, 0, v76, v77, v74, v75, (uint64_t)sub_100189370);
  }
}

void sub_1004E3000(void *a1, uint64_t a2, void (*a3)(void), void (*a4)(void), uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  int v29;
  _BOOL4 v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t MetatypeMetadata;
  uint64_t v35;
  unint64_t v36;
  double v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  objc_class *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  Swift::Bool v49;
  id v50;
  Class isa;
  objc_class *v52;
  id v53;
  id v54;
  void *v55;
  id v56;
  void *v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  void *v67;
  void (*v68)(void);
  uint64_t v69;
  void (**v70)(void);
  void (*v71)(void);
  unint64_t v72;
  void (*v73)(void);
  uint64_t v74;
  id v75;
  objc_class *v76;
  void (*v77)(char *, char *, _QWORD *);
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  void (**v81)(void);
  id v82;
  uint64_t v83;
  uint64_t (*v84)(uint64_t, uint64_t);
  objc_class *v85;
  Swift::String v86;
  id v87;
  NSString v88;
  char *v89;
  id v90;
  NSObject *v91;
  os_log_type_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  double v99;
  id v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  char *v107;
  double v108;
  void (*v109)(id, _QWORD *);
  uint64_t v110;
  id v111;
  id v112;
  unint64_t v113;
  void (*v114)(uint64_t, char *, _QWORD *);
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  void (*v120)(char *, char *, _QWORD *);
  id v121;
  id v122;
  unint64_t v123;
  uint64_t v124;
  void (*v125)(void);
  char *v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(void);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  objc_class *v134;
  char *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD v139[2];
  Swift::OpaquePointer_optional v140;
  Swift::OpaquePointer_optional v141;

  v132 = a5;
  v133 = a6;
  v131 = a2;
  v12 = *(_QWORD *)v7;
  v136 = (_QWORD *)type metadata accessor for Date(0);
  v13 = *(v136 - 1);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v136);
  __chkstk_darwin(v15);
  v17 = (char *)&v113 - v16;
  v19 = __chkstk_darwin(v18);
  v135 = (char *)&v113 - v20;
  v21 = (*(uint64_t (**)(__n128))(v7 + 16))(v19);
  if ((v21 & 1) == 0)
  {
    v136 = objc_msgSend((id)objc_opt_self(REMError), "internetNotReachableError");
    a3();

    return;
  }
  v128 = v13;
  v129 = a3;
  v125 = a4;
  v126 = (char *)&v113 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = v12;
  v138 = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 48);
  __chkstk_darwin(v21);
  v123 = v22;
  *(&v113 - 2) = v22;
  *(&v113 - 1) = 1;
  v23 = type metadata accessor for UnfairLock(0);
  swift_retain();
  Lock.sync<A>(_:)(sub_10029E69C, &v113 - 4, v23, &type metadata for () + 1, &protocol witness table for UnfairLock);
  swift_release(v138);
  v130 = swift_allocObject(&unk_1007F7A00, 17, 7);
  *(_BYTE *)(v130 + 16) = 0;
  if (qword_100837748 != -1)
    swift_once(&qword_100837748, sub_1004E2734);
  v24 = type metadata accessor for Logger(0);
  v25 = sub_10001AAA8(v24, (uint64_t)qword_10084D420);
  v26 = a1;
  v124 = v25;
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter(v27);
  v29 = v28;
  v30 = os_log_type_enabled(v27, v28);
  v31 = v17;
  v32 = v136;
  if (v30)
  {
    v33 = swift_slowAlloc(22, -1);
    v134 = (objc_class *)swift_slowAlloc(64, -1);
    v137 = (uint64_t)v134;
    *(_DWORD *)v33 = 136446466;
    v138 = v127;
    MetatypeMetadata = swift_getMetatypeMetadata(v127);
    v35 = String.init<A>(describing:)(&v138, MetatypeMetadata);
    LODWORD(v122) = v29;
    v138 = sub_10001A820(v35, v36, &v137);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v139);
    *(_QWORD *)&v37 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v33 + 12) = 2082;
    v121 = (id)(v33 + 14);
    v38 = objc_msgSend(v26, "recordName", v37);
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v41 = v40;

    v32 = v136;
    v42 = v39;
    v31 = v17;
    v138 = sub_10001A820(v42, v41, &v137);
    v43 = v135;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v139);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v122, "%{public}s: Will delete CKRecord for publicCloudObject {recordName: %{public}s}", (uint8_t *)v33, 0x16u);
    v44 = v134;
    swift_arrayDestroy(v134, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v33, -1, -1);

  }
  else
  {

    v43 = v135;
  }
  Date.init()(v45);
  v46 = sub_1004E28EC();
  sub_1000151B0(0, &qword_10084D4E8, CKModifyRecordsOperation_ptr);
  v47 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v48 = swift_allocObject(v47, 40, 7);
  *(_OWORD *)(v48 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v48 + 32) = v26;
  v138 = v48;
  specialized Array._endMutation()(v48);
  v49 = v138;
  v50 = v26;
  v140.value._rawValue = 0;
  v140.is_nil = v49;
  isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v140, v141).super.super.super.super.isa;
  -[objc_class setQualityOfService:](isa, "setQualityOfService:", 17);
  -[objc_class setQueuePriority:](isa, "setQueuePriority:", 0);
  v52 = isa;
  v53 = objc_msgSend(v46, "publicCloudDatabase");
  -[objc_class setDatabase:](v52, "setDatabase:", v53);

  v134 = v52;
  v54 = -[objc_class configuration](v52, "configuration");
  if (!v54)
  {
    __break(1u);
    goto LABEL_16;
  }
  v55 = v54;
  v122 = v50;
  objc_msgSend(v54, "setContainer:", v46);

  v56 = -[objc_class configuration](v134, "configuration");
  if (!v56)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v57 = v56;
  v121 = v46;
  objc_msgSend(v56, "setTimeoutIntervalForRequest:", a7);

  v58 = -[objc_class configuration](v134, "configuration");
  if (!v58)
  {
LABEL_17:
    __break(1u);
    return;
  }
  v59 = v58;
  objc_msgSend(v58, "setTimeoutIntervalForResource:", a7);

  v60 = v128;
  v120 = *(void (**)(char *, char *, _QWORD *))(v128 + 16);
  v120(v31, v43, v32);
  v61 = *(unsigned __int8 *)(v60 + 80);
  v62 = (v61 + 24) & ~v61;
  v119 = v61 | 7;
  v115 = (v14 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
  v63 = (v115 + 15) & 0xFFFFFFFFFFFFFFF8;
  v117 = v63;
  v116 = (v63 + 23) & 0xFFFFFFFFFFFFFFF8;
  v64 = (v116 + 15) & 0xFFFFFFFFFFFFFFF8;
  v118 = v64 + 8;
  v113 = v64;
  v65 = v43;
  v66 = swift_allocObject(&unk_1007F7A78, v64 + 8, v61 | 7);
  v67 = v122;
  *(_QWORD *)(v66 + 16) = v122;
  v114 = *(void (**)(uint64_t, char *, _QWORD *))(v60 + 32);
  v114(v66 + v62, v31, v136);
  v68 = v129;
  v69 = v130;
  *(_QWORD *)(v66 + ((v14 + v62 + 7) & 0xFFFFFFFFFFFFFFF8)) = v130;
  v70 = (void (**)(void))(v66 + v63);
  v71 = v125;
  *v70 = v68;
  v70[1] = v71;
  v72 = v123;
  *(_QWORD *)(v66 + ((v63 + 23) & 0xFFFFFFFFFFFFFFF8)) = v123;
  v73 = v71;
  v74 = v127;
  *(_QWORD *)(v66 + v64) = v127;
  v75 = v67;
  swift_retain();
  swift_retain();
  swift_retain();
  v76 = v134;
  CKModifyRecordsOperation.perRecordDeleteBlock.setter(sub_1004E6A84, v66);
  v77 = v120;
  v120(v31, v65, v136);
  v78 = swift_allocObject(&unk_1007F7AA0, v118, v119);
  *(_QWORD *)(v78 + 16) = v75;
  v79 = v78 + v62;
  v80 = v136;
  v122 = v31;
  v114(v79, v31, v136);
  *(_QWORD *)(v78 + v115) = v69;
  v81 = (void (**)(void))(v78 + v117);
  *v81 = v129;
  v81[1] = v73;
  *(_QWORD *)(v78 + v116) = v72;
  *(_QWORD *)(v78 + v113) = v74;
  v82 = v75;
  swift_retain();
  swift_retain();
  swift_retain();
  CKModifyRecordsOperation.modifyRecordsResultBlock.setter(sub_1004E6A94, v78);
  v138 = 0x6574656C6544;
  v139[0] = 0xE600000000000000;
  v83 = v133;
  v84 = *(uint64_t (**)(uint64_t, uint64_t))(v133 + 24);
  v85 = v76;
  v86._countAndFlagsBits = v84(v132, v83);
  String.append(_:)(v86);
  swift_bridgeObjectRelease();
  v87 = objc_msgSend(objc_allocWithZone((Class)CKOperationGroup), "init");
  v88 = String._bridgeToObjectiveC()();
  objc_msgSend(v87, "setName:", v88);

  objc_msgSend(v87, "setQuantity:", 1);
  objc_msgSend(v87, "setExpectedSendSize:", 1);
  objc_msgSend(v87, "setExpectedReceiveSize:", 1);
  -[objc_class setGroup:](v85, "setGroup:", v87, swift_bridgeObjectRelease().n128_f64[0]);

  v89 = v126;
  v77(v126, v135, v80);
  v90 = v82;
  v91 = Logger.logObject.getter(v90);
  v92 = static os_log_type_t.default.getter(v91);
  if (os_log_type_enabled(v91, v92))
  {
    v93 = swift_slowAlloc(32, -1);
    v134 = v85;
    v94 = v93;
    v95 = swift_slowAlloc(64, -1);
    v137 = v95;
    v138 = v74;
    *(_DWORD *)v94 = 136446722;
    v96 = swift_getMetatypeMetadata(v74);
    v97 = String.init<A>(describing:)(&v138, v96);
    v138 = sub_10001A820(v97, v98, &v137);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v139);
    *(_QWORD *)&v99 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v94 + 12) = 2082;
    v100 = objc_msgSend(v90, "recordName", v99);
    v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
    v103 = v102;

    v104 = v101;
    v80 = v136;
    v138 = sub_10001A820(v104, v103, &v137);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v139);

    swift_bridgeObjectRelease();
    *(_WORD *)(v94 + 22) = 2048;
    v105 = v122;
    Date.init()(v106);
    v107 = v126;
    v108 = Date.timeIntervalSince(_:)(v126);
    v109 = *(void (**)(id, _QWORD *))(v128 + 8);
    v109(v105, v80);
    v138 = *(_QWORD *)&v108;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v139);
    v109(v107, v80);
    _os_log_impl((void *)&_mh_execute_header, v91, v92, "%{public}s: Deleting CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f}", (uint8_t *)v94, 0x20u);
    swift_arrayDestroy(v95, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v95, -1, -1);
    v110 = v94;
    v85 = v134;
    swift_slowDealloc(v110, -1, -1);
  }
  else
  {

    v109 = *(void (**)(id, _QWORD *))(v128 + 8);
    v109(v89, v80);
  }

  v111 = v121;
  v112 = objc_msgSend(v121, "publicCloudDatabase");
  objc_msgSend(v112, "addOperation:", v85);

  v109(v135, v80);
  swift_release(v130);
}

uint64_t sub_1004E3AC0(uint64_t a1, char a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD), uint64_t a5, uint64_t a6, uint64_t a7)
{
  _BYTE *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[5];
  uint64_t v18;
  _BYTE v19[24];
  _BYTE v20[24];

  v13 = (_BYTE *)(a3 + 16);
  result = swift_beginAccess(a3 + 16, v20, 0, 0);
  if ((*(_BYTE *)(a3 + 16) & 1) == 0)
  {
    swift_beginAccess(v13, v19, 1, 0);
    *v13 = 1;
    v15 = a4(a1, a2 & 1);
    v18 = *(_QWORD *)(a6 + 48);
    __chkstk_darwin(v15);
    v17[2] = a6;
    v17[3] = 1;
    v16 = type metadata accessor for UnfairLock(0);
    swift_retain(v18);
    Lock.sync<A>(_:)(a7, v17, v16, (char *)&type metadata for () + 8, &protocol witness table for UnfairLock);
    return swift_release(v18);
  }
  return result;
}

uint64_t sub_1004E3BD4(void *a1, uint64_t a2, char a3, void *a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, _QWORD), uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  double v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  double v40;
  void (*v41)(char *, uint64_t);
  os_log_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t MetatypeMetadata;
  uint64_t v53;
  unint64_t v54;
  double v55;
  id v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  double v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  unint64_t v65;
  os_log_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  os_log_t v71;
  os_log_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, _QWORD);
  _QWORD v79[3];
  _BYTE v80[8];
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v77 = a6;
  v78 = a7;
  v75 = a8;
  v76 = a9;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v74 = (char *)&v69 - v20;
  __chkstk_darwin(v21);
  v23 = (char *)&v69 - v22;
  if ((a3 & 1) != 0)
  {
    swift_errorRetain(a2);
    if (qword_100837748 != -1)
      swift_once(&qword_100837748, sub_1004E2734);
    v44 = type metadata accessor for Logger(0);
    sub_10001AAA8(v44, (uint64_t)qword_10084D420);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a5, v15);
    sub_1000D026C(a2, 1);
    v45 = a1;
    sub_1000D026C(a2, 1);
    v46 = v45;
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.error.getter(v47);
    v49 = v48;
    if (os_log_type_enabled(v47, v48))
    {
      v50 = swift_slowAlloc(42, -1);
      LODWORD(v72) = v49;
      v51 = v50;
      v73 = swift_slowAlloc(96, -1);
      v81 = v73;
      v82 = a10;
      *(_DWORD *)v51 = 136446978;
      v71 = v47;
      MetatypeMetadata = swift_getMetatypeMetadata(a10);
      v53 = String.init<A>(describing:)(&v82, MetatypeMetadata);
      v82 = sub_10001A820(v53, v54, &v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
      *(_QWORD *)&v55 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v51 + 12) = 2082;
      v56 = objc_msgSend(v46, "recordName", v55);
      v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
      v70 = v16;
      v59 = v58;

      v82 = sub_10001A820(v57, v59, &v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);

      swift_bridgeObjectRelease();
      *(_WORD *)(v51 + 22) = 2048;
      v60 = v74;
      Date.init()(v61);
      v62 = Date.timeIntervalSince(_:)(v18);
      v63 = *(void (**)(char *, uint64_t))(v70 + 8);
      v63(v60, v15);
      v82 = *(_QWORD *)&v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
      v63(v18, v15);
      *(_WORD *)(v51 + 32) = 2082;
      swift_getErrorValue(a2, v80, v79);
      v64 = Error.rem_errorDescription.getter(v79[1], v79[2]);
      v82 = sub_10001A820(v64, v65, &v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
      swift_bridgeObjectRelease();
      sub_1000D0278(a2, 1);
      sub_1000D0278(a2, 1);
      v66 = v71;
      _os_log_impl((void *)&_mh_execute_header, v71, (os_log_type_t)v72, "%{public}s: [perRecordDeleteBlock] Failed to delete CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f, error: %{public}s}", (uint8_t *)v51, 0x2Au);
      v67 = v73;
      swift_arrayDestroy(v73, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1, -1);
      swift_slowDealloc(v51, -1, -1);

    }
    else
    {

      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      sub_1000D0278(a2, 1);
      sub_1000D0278(a2, 1);

    }
    swift_errorRetain(a2);
    sub_1004E3AC0(a2, 1, v77, v78, v75, v76, (uint64_t)sub_100189370);
    sub_1000D0278(a2, 1);
    return sub_1000D0278(a2, 1);
  }
  else
  {
    if (qword_100837748 != -1)
      swift_once(&qword_100837748, sub_1004E2734);
    v24 = type metadata accessor for Logger(0);
    sub_10001AAA8(v24, (uint64_t)qword_10084D420);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v23, a5, v15);
    v25 = a4;
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter(v26);
    v28 = v27;
    if (os_log_type_enabled(v26, v27))
    {
      v29 = swift_slowAlloc(32, -1);
      v73 = swift_slowAlloc(64, -1);
      v81 = v73;
      v82 = a10;
      *(_DWORD *)v29 = 136446722;
      v72 = v26;
      v30 = swift_getMetatypeMetadata(a10);
      v31 = String.init<A>(describing:)(&v82, v30);
      v82 = sub_10001A820(v31, v32, &v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
      *(_QWORD *)&v33 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v29 + 12) = 2082;
      v34 = objc_msgSend(v25, "recordName", v33);
      v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      LODWORD(v71) = v28;
      v37 = v36;

      v82 = sub_10001A820(v35, v37, &v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);

      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 22) = 2048;
      v38 = v74;
      Date.init()(v39);
      v40 = Date.timeIntervalSince(_:)(v23);
      v41 = *(void (**)(char *, uint64_t))(v16 + 8);
      v41(v38, v15);
      v82 = *(_QWORD *)&v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
      v41(v23, v15);
      v42 = v72;
      _os_log_impl((void *)&_mh_execute_header, v72, (os_log_type_t)v71, "%{public}s: Did delete CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f}", (uint8_t *)v29, 0x20u);
      v43 = v73;
      swift_arrayDestroy(v73, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {

      (*(void (**)(char *, uint64_t))(v16 + 8))(v23, v15);
    }
    return sub_1004E3AC0(0, 0, v77, v78, v75, v76, (uint64_t)sub_100189370);
  }
}

void sub_1004E4280(uint64_t a1, char a2, void *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, _QWORD), uint64_t a7, uint64_t a8, uint64_t a9, const char *a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  id v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t MetatypeMetadata;
  uint64_t v32;
  unint64_t v33;
  double v34;
  void *v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  double v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  int v49;
  uint64_t v50;
  os_log_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, _QWORD);
  _QWORD v58[3];
  _BYTE v59[8];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v55 = a7;
  v56 = a5;
  v57 = a6;
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (char *)&v47 - v21;
  if ((a2 & 1) != 0)
  {
    v54 = a11;
    swift_errorRetain(a1);
    if (qword_100837748 != -1)
      swift_once(&qword_100837748, sub_1004E2734);
    v23 = type metadata accessor for Logger(0);
    sub_10001AAA8(v23, (uint64_t)qword_10084D420);
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v22, a4, v16);
    sub_1000D026C(a1, 1);
    v24 = a3;
    sub_1000D026C(a1, 1);
    v25 = v24;
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    v28 = v27;
    if (os_log_type_enabled(v26, v27))
    {
      v51 = v26;
      v52 = a10;
      v29 = swift_slowAlloc(42, -1);
      v49 = v28;
      v30 = v29;
      v50 = swift_slowAlloc(96, -1);
      v60 = v50;
      v61 = a9;
      *(_DWORD *)v30 = 136446978;
      MetatypeMetadata = swift_getMetatypeMetadata(a9);
      v53 = a8;
      v32 = String.init<A>(describing:)(&v61, MetatypeMetadata);
      v61 = sub_10001A820(v32, v33, &v60);
      v48 = &v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62);
      *(_QWORD *)&v34 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v30 + 12) = 2082;
      v35 = v25;
      v36 = objc_msgSend(v25, "recordName", v34, v30 + 14);
      v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      v39 = v38;

      v61 = sub_10001A820(v37, v39, &v60);
      v40 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v48);

      a8 = v53;
      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 22) = 2048;
      Date.init()(v41);
      v42 = Date.timeIntervalSince(_:)(v22);
      v43 = *(void (**)(char *, uint64_t))(v17 + 8);
      v43(v19, v16);
      v61 = *(_QWORD *)&v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v40);
      v43(v22, v16);
      *(_WORD *)(v30 + 32) = 2082;
      swift_getErrorValue(a1, v59, v58);
      v44 = Error.rem_errorDescription.getter(v58[1], v58[2]);
      v61 = sub_10001A820(v44, v45, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v40);
      swift_bridgeObjectRelease();
      sub_1000D0278(a1, 1);
      sub_1000D0278(a1, 1);
      v26 = v51;
      _os_log_impl((void *)&_mh_execute_header, v51, (os_log_type_t)v49, v52, (uint8_t *)v30, 0x2Au);
      v46 = v50;
      swift_arrayDestroy(v50, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v30, -1, -1);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
      sub_1000D0278(a1, 1);
      sub_1000D0278(a1, 1);
    }

    swift_errorRetain(a1);
    sub_1004E3AC0(a1, 1, v56, v57, v55, a8, v54);
    sub_1000D0278(a1, 1);
    sub_1000D0278(a1, 1);
  }
}

id sub_1004E4688(void *a1, uint64_t a2, void (*a3)(_QWORD *), uint64_t a4, uint64_t a5, _QWORD *a6, double a7)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t MetatypeMetadata;
  uint64_t v34;
  unint64_t v35;
  double v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  id v42;
  uint64_t v43;
  id result;
  id v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  Class isa;
  id v51;
  id v52;
  id v53;
  void *v54;
  uint64_t v55;
  char *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  void *v71;
  void (*v72)(_QWORD);
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  char *v83;
  _QWORD *v84;
  void *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  _QWORD *v92;
  uint64_t (*v93)(uint64_t, _QWORD *);
  id v94;
  Swift::String v95;
  id v96;
  NSString v97;
  char *v98;
  id v99;
  NSObject *v100;
  os_log_type_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  double v106;
  id v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  double v114;
  void (*v115)(char *, uint64_t);
  uint64_t v116;
  id v117;
  id v118;
  void *v119;
  uint64_t v120;
  void (*v121)(uint64_t, char *, uint64_t);
  uint64_t v122;
  uint64_t v123;
  id v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  void (*v129)(char *, char *, uint64_t);
  uint64_t v130;
  void (*v131)(_QWORD);
  uint64_t v132;
  uint64_t v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD v144[2];

  v138 = a6;
  v133 = a2;
  v136 = *(_QWORD *)v7;
  v13 = sub_1000A5A94((uint64_t *)&unk_10083AA20);
  v137 = a5;
  v14 = type metadata accessor for Result(0, a5, v13, &protocol self-conformance witness table for Error);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v120 - v16);
  v141 = type metadata accessor for Date(0);
  v135 = *(_QWORD *)(v141 - 8);
  v18 = *(_QWORD *)(v135 + 64);
  __chkstk_darwin(v141);
  __chkstk_darwin(v19);
  v139 = (char *)&v120 - v20;
  v22 = __chkstk_darwin(v21);
  v140 = (char *)&v120 - v23;
  v24 = (*(uint64_t (**)(__n128))(v7 + 16))(v22);
  if ((v24 & 1) == 0)
  {
    *v17 = objc_msgSend((id)objc_opt_self(REMError), "internetNotReachableError");
    swift_storeEnumTagMultiPayload(v17, v14, 1);
    a3(v17);
    return (id)(*(uint64_t (**)(_QWORD *, uint64_t))(v15 + 8))(v17, v14);
  }
  v131 = (void (*)(_QWORD))a3;
  v127 = a4;
  v128 = (char *)&v120 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 48);
  __chkstk_darwin(v24);
  v130 = v25;
  *(&v120 - 2) = v25;
  *(&v120 - 1) = 1;
  v26 = type metadata accessor for UnfairLock(0);
  swift_retain();
  Lock.sync<A>(_:)(sub_100188F54, &v120 - 4, v26, &type metadata for () + 1, &protocol witness table for UnfairLock);
  swift_release(v143);
  v132 = swift_allocObject(&unk_1007F7A00, 17, 7);
  *(_BYTE *)(v132 + 16) = 0;
  if (qword_100837748 != -1)
    swift_once(&qword_100837748, sub_1004E2734);
  v27 = type metadata accessor for Logger(0);
  v28 = sub_10001AAA8(v27, (uint64_t)qword_10084D420);
  v29 = a1;
  v126 = v28;
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter(v30);
  if (os_log_type_enabled(v30, v31))
  {
    v32 = swift_slowAlloc(22, -1);
    v134 = (id)swift_slowAlloc(64, -1);
    v142 = (uint64_t)v134;
    *(_DWORD *)v32 = 136446466;
    v143 = v136;
    MetatypeMetadata = swift_getMetatypeMetadata(v136);
    v34 = String.init<A>(describing:)(&v143, MetatypeMetadata);
    v143 = sub_10001A820(v34, v35, &v142);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144);
    *(_QWORD *)&v36 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v32 + 12) = 2082;
    v129 = (void (*)(char *, char *, uint64_t))(v32 + 14);
    v37 = objc_msgSend(v29, "recordName", v36);
    v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v40 = v39;

    v41 = v140;
    v143 = sub_10001A820(v38, v40, &v142);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "%{public}s: Will fetch publicCloudObject from public cloud database {recordName: %{public}s}", (uint8_t *)v32, 0x16u);
    v42 = v134;
    swift_arrayDestroy(v134, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {

    v41 = v140;
  }
  Date.init()(v43);
  v45 = sub_1004E28EC();
  v46 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v47 = swift_allocObject(v46, 40, 7);
  *(_OWORD *)(v47 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v47 + 32) = v29;
  v143 = v47;
  specialized Array._endMutation()(v47);
  v48 = objc_allocWithZone((Class)CKFetchRecordsOperation);
  sub_1000151B0(0, &qword_100844060, CKRecordID_ptr);
  v49 = v29;
  isa = Array._bridgeToObjectiveC()().super.isa;
  v51 = objc_msgSend(v48, "initWithRecordIDs:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  objc_msgSend(v51, "setQualityOfService:", 17);
  objc_msgSend(v51, "setQueuePriority:", 8);
  v52 = v51;
  v53 = objc_msgSend(v45, "publicCloudDatabase");
  objc_msgSend(v52, "setDatabase:", v53);

  v134 = v52;
  result = objc_msgSend(v52, "configuration");
  if (!result)
  {
    __break(1u);
    goto LABEL_16;
  }
  v54 = result;
  objc_msgSend(result, "setContainer:", v45);

  result = objc_msgSend(v134, "configuration");
  v55 = v135;
  v56 = v139;
  if (!result)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v57 = result;
  v124 = v49;
  v125 = v45;
  objc_msgSend(result, "setTimeoutIntervalForRequest:", a7);

  result = objc_msgSend(v134, "configuration");
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  v58 = result;
  objc_msgSend(result, "setTimeoutIntervalForResource:", a7);

  v129 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
  v129(v56, v41, v141);
  v59 = *(unsigned __int8 *)(v55 + 80);
  v60 = (v59 + 32) & ~v59;
  v122 = v59 | 7;
  v123 = v18 + 7;
  v61 = (v18 + 7 + v60) & 0xFFFFFFFFFFFFFFF8;
  v62 = (v61 + 15) & 0xFFFFFFFFFFFFFFF8;
  v63 = (v62 + 15) & 0xFFFFFFFFFFFFFFF8;
  v64 = (v63 + 15) & 0xFFFFFFFFFFFFFFF8;
  v65 = (v64 + 23) & 0xFFFFFFFFFFFFFFF8;
  v66 = (v65 + 15) & 0xFFFFFFFFFFFFFFF8;
  v67 = swift_allocObject(&unk_1007F7A28, v66 + 8, v59 | 7);
  v68 = v138;
  *(_QWORD *)(v67 + 16) = v137;
  *(_QWORD *)(v67 + 24) = v68;
  v69 = v67 + v60;
  v121 = *(void (**)(uint64_t, char *, uint64_t))(v55 + 32);
  v70 = v139;
  v121(v69, v139, v141);
  *(_QWORD *)(v67 + v61) = v133;
  v71 = v124;
  *(_QWORD *)(v67 + v62) = v124;
  v72 = v131;
  v73 = v132;
  *(_QWORD *)(v67 + v63) = v132;
  v74 = (_QWORD *)(v67 + v64);
  v75 = v127;
  *v74 = v72;
  v74[1] = v75;
  *(_QWORD *)(v67 + v65) = v130;
  *(_QWORD *)(v67 + v66) = v136;
  v124 = v71;
  swift_retain();
  swift_retain();
  swift_retain();
  v76 = v134;
  CKFetchRecordsOperation.perRecordResultBlock.setter(sub_1004E6844, v67);
  v129(v70, v140, v141);
  v77 = (v59 + 40) & ~v59;
  v78 = (v123 + v77) & 0xFFFFFFFFFFFFFFF8;
  v79 = (v78 + 15) & 0xFFFFFFFFFFFFFFF8;
  v80 = (v79 + 23) & 0xFFFFFFFFFFFFFFF8;
  v81 = (v80 + 15) & 0xFFFFFFFFFFFFFFF8;
  v82 = (_QWORD *)swift_allocObject(&unk_1007F7A50, v81 + 8, v122);
  v84 = v138;
  v83 = v139;
  v82[2] = v137;
  v82[3] = v84;
  v85 = v124;
  v82[4] = v124;
  v121((uint64_t)v82 + v77, v83, v141);
  *(_QWORD *)((char *)v82 + v78) = v73;
  v86 = (_QWORD *)((char *)v82 + v79);
  v87 = v141;
  v88 = v130;
  *v86 = v131;
  v86[1] = v75;
  *(_QWORD *)((char *)v82 + v80) = v88;
  v89 = v136;
  *(_QWORD *)((char *)v82 + v81) = v136;
  v90 = v89;
  v91 = v85;
  swift_retain();
  swift_retain();
  swift_retain();
  CKFetchRecordsOperation.fetchRecordsResultBlock.setter(sub_1004E69D4, v82);
  v143 = 0x6863746546;
  v144[0] = 0xE500000000000000;
  v92 = v138;
  v93 = (uint64_t (*)(uint64_t, _QWORD *))v138[3];
  v94 = v76;
  v95._countAndFlagsBits = v93(v137, v92);
  String.append(_:)(v95);
  swift_bridgeObjectRelease();
  v96 = objc_msgSend(objc_allocWithZone((Class)CKOperationGroup), "init");
  v97 = String._bridgeToObjectiveC()();
  objc_msgSend(v96, "setName:", v97);

  objc_msgSend(v96, "setQuantity:", 1);
  objc_msgSend(v96, "setExpectedSendSize:", 1);
  objc_msgSend(v96, "setExpectedReceiveSize:", 1);
  objc_msgSend(v94, "setGroup:", v96, swift_bridgeObjectRelease().n128_f64[0]);
  v138 = v94;

  v98 = v128;
  v129(v128, v140, v87);
  v99 = v91;
  v100 = Logger.logObject.getter(v99);
  v101 = static os_log_type_t.default.getter(v100);
  if (os_log_type_enabled(v100, v101))
  {
    v102 = swift_slowAlloc(32, -1);
    v137 = swift_slowAlloc(64, -1);
    v142 = v137;
    v143 = v90;
    *(_DWORD *)v102 = 136446722;
    v103 = swift_getMetatypeMetadata(v90);
    v104 = String.init<A>(describing:)(&v143, v103);
    v143 = sub_10001A820(v104, v105, &v142);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144);
    *(_QWORD *)&v106 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v102 + 12) = 2082;
    v107 = objc_msgSend(v99, "recordName", v106);
    v108 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
    v110 = v109;

    v111 = v108;
    v87 = v141;
    v143 = sub_10001A820(v111, v110, &v142);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144);

    swift_bridgeObjectRelease();
    *(_WORD *)(v102 + 22) = 2048;
    v112 = v139;
    Date.init()(v113);
    v114 = Date.timeIntervalSince(_:)(v98);
    v115 = *(void (**)(char *, uint64_t))(v135 + 8);
    v115(v112, v87);
    v143 = *(_QWORD *)&v114;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144);
    v115(v98, v87);
    _os_log_impl((void *)&_mh_execute_header, v100, v101, "%{public}s: Fetching CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f}", (uint8_t *)v102, 0x20u);
    v116 = v137;
    swift_arrayDestroy(v137, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v116, -1, -1);
    swift_slowDealloc(v102, -1, -1);
  }
  else
  {

    v115 = *(void (**)(char *, uint64_t))(v135 + 8);
    v115(v98, v87);
  }

  v117 = v125;
  v118 = objc_msgSend(v125, "publicCloudDatabase");
  v119 = v138;
  objc_msgSend(v118, "addOperation:", v138);

  v115(v140, v87);
  return (id)swift_release(v132);
}

void sub_1004E51E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, __n128), uint64_t a4, uint64_t a5)
{
  _BYTE *v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[5];
  uint64_t v14;
  _BYTE v15[24];
  _BYTE v16[24];

  v9 = (_BYTE *)(a2 + 16);
  swift_beginAccess(a2 + 16, v16, 0, 0);
  if ((*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    v10 = swift_beginAccess(v9, v15, 1, 0);
    *v9 = 1;
    v11 = a3(a1, v10);
    v14 = *(_QWORD *)(a5 + 48);
    __chkstk_darwin(v11);
    v13[2] = a5;
    v13[3] = 1;
    v12 = type metadata accessor for UnfairLock(0);
    swift_retain();
    Lock.sync<A>(_:)(sub_100188F4C, v13, v12, &type metadata for () + 1, &protocol witness table for UnfairLock);
    swift_release(v14);
  }
}

uint64_t sub_1004E52E4(NSObject *a1, void *a2, char a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t (*a8)(uint64_t, __n128), uint64_t a9, uint64_t a10, NSObject *a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  Class isa;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  Class v38;
  NSObject *v39;
  NSObject *v40;
  NSObject *v41;
  os_log_type_t v42;
  int v43;
  _BOOL4 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  double v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  double v57;
  void (*v58)(_BYTE *, NSObject *);
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  NSObject *v62;
  NSObject *v63;
  os_log_type_t v64;
  int v65;
  _BOOL4 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t MetatypeMetadata;
  uint64_t v71;
  void *v72;
  unint64_t v73;
  double v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  double v84;
  void (*v85)(_BYTE *, os_log_t);
  _BYTE *v86;
  os_log_t v87;
  uint64_t v88;
  unint64_t v89;
  NSObject *v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  _BYTE *v94;
  uint64_t v95;
  void (*v96)(id, uint64_t, uint64_t);
  id v97;
  _BYTE *v99;
  id v100;
  NSObject *v101;
  os_log_type_t v102;
  int v103;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  double v109;
  id v110;
  uint64_t v111;
  NSObject *v112;
  uint64_t v113;
  void (*v114)(_BYTE *, NSObject *);
  unint64_t v115;
  unint64_t v116;
  _BYTE *v117;
  uint64_t v118;
  double v119;
  os_log_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t (*v125)(uint64_t, __n128);
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE *v130;
  uint64_t v131;
  _BYTE v132[12];
  int v133;
  uint64_t v134;
  _BYTE *v135;
  uint64_t v136;
  void *v137;
  Class v138;
  id v139;
  void (*v140)(_BYTE *, uint64_t, NSObject *);
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  id v145;
  os_log_t v146;
  _BYTE *v147;
  _BYTE *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t (*v152)(uint64_t, __n128);
  uint64_t v153;
  NSObject *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD v158[3];
  char v159[8];
  uint64_t v160;
  os_log_t v161;
  char v162[8];

  v151 = a7;
  v152 = a8;
  v145 = a6;
  v144 = a5;
  v156 = a4;
  v154 = a1;
  v146 = a11;
  v150 = a10;
  v149 = a9;
  v15 = sub_1000A5A94((uint64_t *)&unk_10083AA20);
  v16 = type metadata accessor for Result(0, a12, v15, &protocol self-conformance witness table for Error);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = &v132[-v18];
  v157 = a12;
  v141 = *(_QWORD *)(a12 - 8);
  __chkstk_darwin(v20);
  v148 = &v132[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = type metadata accessor for Date(0);
  isa = v22[-1].isa;
  __chkstk_darwin(v22);
  __chkstk_darwin(v24);
  v26 = &v132[-v25];
  __chkstk_darwin(v27);
  __chkstk_darwin(v28);
  v147 = &v132[-v29];
  __chkstk_darwin(v30);
  v34 = &v132[-v33];
  v153 = v17;
  v155 = a13;
  if ((a3 & 1) != 0)
  {
    swift_errorRetain(a2);
    if (qword_100837748 != -1)
      swift_once(&qword_100837748, sub_1004E2734);
    v60 = type metadata accessor for Logger(0);
    sub_10001AAA8(v60, (uint64_t)qword_10084D420);
    (*((void (**)(_BYTE *, uint64_t, NSObject *))isa + 2))(v26, v156, v22);
    sub_10013D030(a2, 1);
    v61 = v154;
    sub_10013D030(a2, 1);
    v62 = v61;
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.error.getter(v63);
    v65 = v64;
    v66 = os_log_type_enabled(v63, v64);
    v67 = v153;
    if (v66)
    {
      v68 = swift_slowAlloc(42, -1);
      v142 = v16;
      v69 = v68;
      v156 = swift_slowAlloc(96, -1);
      v160 = v156;
      *(_DWORD *)v69 = 136446978;
      v154 = v63;
      v161 = v146;
      MetatypeMetadata = swift_getMetatypeMetadata(v146);
      v138 = isa;
      v71 = String.init<A>(describing:)(&v161, MetatypeMetadata);
      v143 = v19;
      v72 = a2;
      v161 = (os_log_t)sub_10001A820(v71, v73, &v160);
      v146 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, v162);
      *(_QWORD *)&v74 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v69 + 12) = 2082;
      v75 = -[NSObject recordName](v62, "recordName", v74);
      v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
      LODWORD(v148) = v65;
      v77 = v67;
      v78 = v76;
      v80 = v79;

      a2 = v72;
      v19 = v143;
      v81 = v78;
      v67 = v77;
      v161 = (os_log_t)sub_10001A820(v81, v80, &v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, v162);

      swift_bridgeObjectRelease();
      *(_WORD *)(v69 + 22) = 2048;
      v82 = v147;
      Date.init()(v83);
      v84 = Date.timeIntervalSince(_:)(v26);
      v85 = (void (*)(_BYTE *, os_log_t))*((_QWORD *)v138 + 1);
      v86 = v82;
      v87 = v146;
      v85(v86, v146);
      v161 = *(os_log_t *)&v84;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, v162);
      v85(v26, v87);
      *(_WORD *)(v69 + 32) = 2082;
      swift_getErrorValue(a2, v159, v158);
      v88 = Error.rem_errorDescription.getter(v158[1], v158[2]);
      v161 = (os_log_t)sub_10001A820(v88, v89, &v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, v162);
      swift_bridgeObjectRelease();
      sub_1001172E0(a2, 1);
      sub_1001172E0(a2, 1);
      v90 = v154;
      _os_log_impl((void *)&_mh_execute_header, v154, (os_log_type_t)v148, "%{public}s: [perRecordResultBlock] Failed to fetch CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f, error: %{public}s}", (uint8_t *)v69, 0x2Au);
      v91 = v156;
      swift_arrayDestroy(v156, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v91, -1, -1);
      v92 = v69;
      v16 = v142;
      swift_slowDealloc(v92, -1, -1);

    }
    else
    {

      (*((void (**)(_BYTE *, NSObject *))isa + 1))(v26, v22);
      sub_1001172E0(a2, 1);
      sub_1001172E0(a2, 1);

    }
    *v19 = a2;
    swift_storeEnumTagMultiPayload(v19, v16, 1);
    swift_errorRetain(a2);
    sub_1004E51E4((uint64_t)v19, v151, v152, v149, v150);
    sub_1001172E0(a2, 1);
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v67 + 8))(v19, v16);
  }
  else
  {
    v135 = v32;
    v136 = v31;
    v35 = qword_100837748;
    v139 = a2;
    if (v35 != -1)
      swift_once(&qword_100837748, sub_1004E2734);
    v36 = type metadata accessor for Logger(0);
    v37 = sub_10001AAA8(v36, (uint64_t)qword_10084D420);
    v38 = isa;
    v39 = v22;
    v140 = (void (*)(_BYTE *, uint64_t, NSObject *))*((_QWORD *)isa + 2);
    v140(v34, v156, v22);
    v40 = v154;
    v154 = v37;
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.default.getter(v41);
    v43 = v42;
    v44 = os_log_type_enabled(v41, v42);
    v137 = a2;
    v142 = v16;
    v143 = v19;
    if (v44)
    {
      v45 = swift_slowAlloc(32, -1);
      v138 = v38;
      v46 = v45;
      v134 = swift_slowAlloc(64, -1);
      v160 = v134;
      *(_DWORD *)v46 = 136446722;
      v133 = v43;
      v161 = v146;
      v47 = swift_getMetatypeMetadata(v146);
      v48 = String.init<A>(describing:)(&v161, v47);
      v161 = (os_log_t)sub_10001A820(v48, v49, &v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, v162);
      *(_QWORD *)&v50 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v46 + 12) = 2082;
      v51 = -[NSObject recordName](v40, "recordName", v50);
      v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      v54 = v53;

      v161 = (os_log_t)sub_10001A820(v52, v54, &v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, v162);

      swift_bridgeObjectRelease();
      *(_WORD *)(v46 + 22) = 2048;
      v55 = v147;
      Date.init()(v56);
      v57 = Date.timeIntervalSince(_:)(v34);
      v58 = (void (*)(_BYTE *, NSObject *))*((_QWORD *)v138 + 1);
      v58(v55, v39);
      v161 = *(os_log_t *)&v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, v162);
      v58(v34, v39);
      _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v133, "%{public}s: Did fetch CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f}", (uint8_t *)v46, 0x20u);
      v59 = v134;
      swift_arrayDestroy(v134, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v46, -1, -1);
    }
    else
    {

      v58 = (void (*)(_BYTE *, NSObject *))*((_QWORD *)v38 + 1);
      v58(v34, v22);
    }

    v93 = v39;
    v94 = v148;
    v95 = v155;
    v96 = *(void (**)(id, uint64_t, uint64_t))(v155 + 8);
    v97 = v139;
    v96(v97, v157, v95);
    v99 = v135;
    v140(v135, v156, v93);
    v100 = v145;
    v101 = Logger.logObject.getter(v100);
    v102 = static os_log_type_t.default.getter(v101);
    v103 = v102;
    if (os_log_type_enabled(v101, v102))
    {
      v105 = swift_slowAlloc(32, -1);
      v156 = swift_slowAlloc(64, -1);
      v160 = v156;
      *(_DWORD *)v105 = 136446722;
      LODWORD(v154) = v103;
      v161 = v146;
      v106 = swift_getMetatypeMetadata(v146);
      v107 = String.init<A>(describing:)(&v161, v106);
      v161 = (os_log_t)sub_10001A820(v107, v108, &v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, v162);
      *(_QWORD *)&v109 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v105 + 12) = 2082;
      v110 = objc_msgSend(v100, "recordName", v109);
      v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(v110);
      v146 = v101;
      v112 = v93;
      v113 = v111;
      v114 = v58;
      v116 = v115;

      v94 = v148;
      v161 = (os_log_t)sub_10001A820(v113, v116, &v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, v162);

      swift_bridgeObjectRelease();
      *(_WORD *)(v105 + 22) = 2048;
      v117 = v147;
      Date.init()(v118);
      v119 = Date.timeIntervalSince(_:)(v99);
      v114(v117, v112);
      v161 = *(os_log_t *)&v119;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, v162);
      v114(v99, v112);
      v120 = v146;
      _os_log_impl((void *)&_mh_execute_header, v146, (os_log_type_t)v154, "%{public}s: Did initialize publicCloudObject from CKRecord {recordName: %{public}s, elapsedSeconds: %f}", (uint8_t *)v105, 0x20u);
      v121 = v156;
      swift_arrayDestroy(v156, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v121, -1, -1);
      swift_slowDealloc(v105, -1, -1);

    }
    else
    {

      v58(v99, v93);
    }
    v122 = v137;
    v123 = v142;
    v124 = (uint64_t)v143;
    v126 = v151;
    v125 = v152;
    v127 = v150;
    v128 = v149;
    v129 = v141;
    v130 = v94;
    v131 = v157;
    (*(void (**)(_QWORD *, _BYTE *, uint64_t))(v141 + 16))(v143, v130, v157);
    swift_storeEnumTagMultiPayload(v124, v123, 0);
    sub_1004E51E4(v124, v126, v125, v128, v127);
    sub_1001172E0(v122, 0);
    (*(void (**)(uint64_t, uint64_t))(v153 + 8))(v124, v123);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v129 + 8))(v148, v131);
  }
}

void sub_1004E61EC(uint64_t a1, char a2, void *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, __n128), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  id v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t MetatypeMetadata;
  uint64_t v36;
  unint64_t v37;
  double v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  double v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  unint64_t v48;
  os_log_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[2];
  uint64_t *v55;
  int v56;
  uint64_t v57;
  os_log_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t, __n128);
  _QWORD v68[3];
  char v69[8];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v66 = a5;
  v67 = a6;
  v17 = sub_1000A5A94((uint64_t *)&unk_10083AA20);
  v65 = a10;
  v18 = type metadata accessor for Result(0, a10, v17, &protocol self-conformance witness table for Error);
  v63 = *(_QWORD *)(v18 - 8);
  v64 = v18;
  __chkstk_darwin(v18);
  v62 = (_QWORD *)((char *)v54 - v19);
  v20 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v26 = (char *)v54 - v25;
  if ((a2 & 1) != 0)
  {
    v60 = a11;
    v61 = a7;
    swift_errorRetain(a1);
    if (qword_100837748 != -1)
      swift_once(&qword_100837748, sub_1004E2734);
    v27 = type metadata accessor for Logger(0);
    sub_10001AAA8(v27, (uint64_t)qword_10084D420);
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v26, a4, v20);
    sub_1000D026C(a1, 1);
    v28 = a3;
    sub_1000D026C(a1, 1);
    v29 = v28;
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter(v30);
    v32 = v31;
    if (os_log_type_enabled(v30, v31))
    {
      v58 = v30;
      v33 = swift_slowAlloc(42, -1);
      v56 = v32;
      v34 = v33;
      v57 = swift_slowAlloc(96, -1);
      v70 = v57;
      v71 = a9;
      *(_DWORD *)v34 = 136446978;
      v59 = a8;
      MetatypeMetadata = swift_getMetatypeMetadata(a9);
      v36 = String.init<A>(describing:)(&v71, MetatypeMetadata);
      v71 = sub_10001A820(v36, v37, &v70);
      v55 = &v72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
      *(_QWORD *)&v38 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v34 + 12) = 2082;
      v54[1] = v34 + 14;
      v39 = objc_msgSend(v29, "recordName", v38);
      v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      v42 = v41;

      a8 = v59;
      v71 = sub_10001A820(v40, v42, &v70);
      v43 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v55);

      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 22) = 2048;
      Date.init()(v44);
      v45 = Date.timeIntervalSince(_:)(v26);
      v46 = *(void (**)(char *, uint64_t))(v21 + 8);
      v46(v23, v20);
      v71 = *(_QWORD *)&v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v43);
      v46(v26, v20);
      *(_WORD *)(v34 + 32) = 2082;
      swift_getErrorValue(a1, v69, v68);
      v47 = Error.rem_errorDescription.getter(v68[1], v68[2]);
      v71 = sub_10001A820(v47, v48, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v43);
      swift_bridgeObjectRelease();
      sub_1000D0278(a1, 1);
      sub_1000D0278(a1, 1);
      v49 = v58;
      _os_log_impl((void *)&_mh_execute_header, v58, (os_log_type_t)v56, "%{public}s: [fetchRecordsResultBlock] Failed to fetch CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f, error: %{public}s}", (uint8_t *)v34, 0x2Au);
      v50 = v57;
      swift_arrayDestroy(v57, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v34, -1, -1);

    }
    else
    {

      (*(void (**)(char *, uint64_t))(v21 + 8))(v26, v20);
      sub_1000D0278(a1, 1);
      sub_1000D0278(a1, 1);

    }
    v51 = v61;
    v52 = (uint64_t)v62;
    *v62 = a1;
    v53 = v64;
    swift_storeEnumTagMultiPayload(v52, v64, 1);
    swift_errorRetain(a1);
    sub_1004E51E4(v52, v66, v67, v51, a8);
    sub_1000D0278(a1, 1);
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v52, v53);
  }
}

uint64_t sub_1004E6688()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for RDPublicCloudDatabaseController()
{
  return objc_opt_self(_TtC7remindd31RDPublicCloudDatabaseController);
}

id sub_1004E66DC(_QWORD *a1, void (*a2)(void), void (*a3)(void), double a4)
{
  uint64_t *v4;
  uint64_t v8;
  _QWORD *v9;

  v8 = *v4;
  v9 = sub_10000A388(a1, a1[3]);
  return sub_1004E6AA8((uint64_t)v9, a2, a3, v8, a4);
}

void sub_1004E672C(void *a1, uint64_t a2, void (*a3)(void), void (*a4)(void), uint64_t a5, uint64_t a6, double a7)
{
  sub_1004E3000(a1, a2, a3, a4, a5, a6, a7);
}

id sub_1004E674C(void *a1, uint64_t a2, void (*a3)(_QWORD *), uint64_t a4, uint64_t a5, _QWORD *a6, double a7)
{
  return sub_1004E4688(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1004E676C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1004E677C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release(*(_QWORD *)(v0 + v7));
  swift_release(*(_QWORD *)(v0 + v8 + 8));
  swift_release(*(_QWORD *)(v0 + v9));
  return swift_deallocObject(v0, ((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_1004E6844(NSObject *a1, void *a2, char a3)
{
  uint64_t v3;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v6 = a3 & 1;
  v7 = *(_QWORD *)(v3 + 16);
  v8 = *(_QWORD *)(v3 + 24);
  v9 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_1004E52E4(a1, a2, v6, v3 + v10, *(_QWORD *)(v3 + v11), *(void **)(v3 + v12), *(_QWORD *)(v3 + v13), *(uint64_t (**)(uint64_t, __n128))(v3 + ((v13 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v3 + ((v13 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v3 + ((((v13 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)), *(NSObject **)(v3+ ((((((v13 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)), v7, v8);
}

uint64_t sub_1004E6910()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7 + 8));
  swift_release(*(_QWORD *)(v0 + v8));
  return swift_deallocObject(v0, ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

void sub_1004E69D4(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1004E61EC(a1, v4, *(void **)(v2 + 32), v2 + v8, *(_QWORD *)(v2 + v9), *(uint64_t (**)(uint64_t, __n128))(v2 + ((v9 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v2 + ((((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((((((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)), v5, v6);
}

uint64_t sub_1004E6A84(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1004E7A04(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004E3BD4);
}

void sub_1004E6A94(uint64_t a1, char a2)
{
  sub_1004E7B90(a1, a2, "%{public}s: [modifyRecordsResultBlock] Failed to delete CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f, error: %{public}s}", (uint64_t)sub_100189370);
}

id sub_1004E6AA8(uint64_t a1, void (*a2)(void), void (*a3)(void), uint64_t a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  Class v28;
  uint64_t v29;
  uint64_t v30;
  objc_class *v31;
  NSObject *v32;
  os_log_type_t v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t MetatypeMetadata;
  uint64_t v39;
  objc_class *v40;
  unint64_t v41;
  double v42;
  id v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  Class isa;
  objc_class *v59;
  id v60;
  id result;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  objc_class *v74;
  void (*v75)(void);
  uint64_t v76;
  void (**v77)(void);
  void (*v78)(void);
  uint64_t v79;
  uint64_t v80;
  objc_class *v81;
  objc_class *v82;
  uint64_t v83;
  uint64_t v84;
  void (**v85)(void);
  uint64_t v86;
  objc_class *v87;
  objc_class *v88;
  Swift::String v89;
  id v90;
  NSString v91;
  char *v92;
  uint64_t v93;
  objc_class *v94;
  NSObject *v95;
  os_log_type_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  double v102;
  id v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  objc_class *v109;
  char *v110;
  double v111;
  void (*v112)(char *, uint64_t);
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  objc_class *v118;
  char **v119;
  id v120;
  id v121;
  uint64_t v122;
  void (*v123)(uint64_t, char *, uint64_t);
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  objc_class *v131;
  void (*v132)(char *, char *, uint64_t);
  id v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(void);
  uint64_t v139;
  uint64_t v140;
  void (*v141)(void);
  uint64_t v142;
  char *v143;
  objc_class *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148[2];
  uint64_t v149;
  uint64_t v150;
  _UNKNOWN **v151;
  Swift::OpaquePointer_optional v152;
  Swift::OpaquePointer_optional v153;

  v145 = *(_QWORD *)a4;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v143 = (char *)&v122 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v122 - v14;
  __chkstk_darwin(v16);
  v144 = (objc_class *)((char *)&v122 - v17);
  __chkstk_darwin(v18);
  v20 = (char *)&v122 - v19;
  v21 = type metadata accessor for RDPublicTemplate(0);
  v150 = v21;
  v151 = &off_1007E3118;
  v22 = sub_1000087F0(&v149);
  v23 = sub_100378738(a1, (uint64_t)v22);
  v24 = (*(uint64_t (**)(uint64_t))(a4 + 16))(v23);
  if ((v24 & 1) == 0)
  {
    v51 = objc_msgSend((id)objc_opt_self(REMError), "internetNotReachableError");
    a2();

    return (id)_s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v149);
  }
  v141 = a2;
  v138 = a3;
  v135 = v15;
  v146 = *(_QWORD *)(*(_QWORD *)(a4 + 32) + 48);
  __chkstk_darwin(v24);
  v137 = v25;
  *(&v122 - 2) = v25;
  *(&v122 - 1) = 1;
  v26 = type metadata accessor for UnfairLock(0);
  swift_retain();
  Lock.sync<A>(_:)(sub_10029E69C, &v122 - 4, v26, &type metadata for () + 1, &protocol witness table for UnfairLock);
  swift_release(v146);
  v142 = swift_allocObject(&unk_1007F7A00, 17, 7);
  *(_BYTE *)(v142 + 16) = 0;
  v27 = sub_10000A388(&v149, v150);
  v28 = sub_1000D6C38((uint64_t)v27 + *(int *)(v21 + 32));
  if (qword_100837748 != -1)
    swift_once(&qword_100837748, sub_1004E2734);
  v29 = type metadata accessor for Logger(0);
  v30 = sub_10001AAA8(v29, (uint64_t)qword_10084D420);
  v31 = v28;
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.default.getter(v32);
  v34 = v33;
  v35 = os_log_type_enabled(v32, v33);
  v140 = v11;
  if (v35)
  {
    v36 = swift_slowAlloc(22, -1);
    LODWORD(v133) = v34;
    v37 = v36;
    v136 = swift_slowAlloc(64, -1);
    v148[0] = v136;
    *(_DWORD *)v37 = 136446466;
    v146 = v145;
    MetatypeMetadata = swift_getMetatypeMetadata(v145);
    v134 = v30;
    v39 = String.init<A>(describing:)(&v146, MetatypeMetadata);
    v40 = v31;
    v146 = sub_10001A820(v39, v41, v148);
    v139 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147);
    *(_QWORD *)&v42 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v37 + 12) = 2082;
    v132 = (void (*)(char *, char *, uint64_t))(v37 + 14);
    v43 = -[objc_class recordName](v31, "recordName", v42);
    v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    v45 = v20;
    v47 = v46;

    v11 = v140;
    v48 = v44;
    v30 = v134;
    v146 = sub_10001A820(v48, v47, v148);
    v10 = v139;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147);

    v20 = v45;
    v31 = v40;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v133, "%{public}s: Will save CKRecord for publicCloudObject {recordName: %{public}s}", (uint8_t *)v37, 0x16u);
    v49 = v136;
    swift_arrayDestroy(v136, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1, -1);
    swift_slowDealloc(v37, -1, -1);

  }
  else
  {

  }
  Date.init()(v50);
  v52 = sub_1004E28EC();
  sub_10000A388(&v149, v150);
  sub_1000D5D7C();
  v54 = v53;
  v131 = v31;
  sub_1000151B0(0, &qword_10084D4E8, CKModifyRecordsOperation_ptr);
  v55 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v56 = swift_allocObject(v55, 40, 7);
  *(_OWORD *)(v56 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v56 + 32) = v54;
  v146 = v56;
  specialized Array._endMutation()(v56);
  v57 = (void *)v146;
  v133 = v54;
  v152.value._rawValue = v57;
  v152.is_nil = 0;
  isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v152, v153).super.super.super.super.isa;
  -[objc_class setQualityOfService:](isa, "setQualityOfService:", 17);
  -[objc_class setQueuePriority:](isa, "setQueuePriority:", 8);
  v59 = isa;
  v60 = objc_msgSend(v52, "publicCloudDatabase");
  -[objc_class setDatabase:](v59, "setDatabase:", v60);

  -[objc_class setSavePolicy:](v59, "setSavePolicy:", 2);
  v144 = v59;
  result = -[objc_class configuration](v59, "configuration");
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }
  v62 = result;
  objc_msgSend(result, "setContainer:", v52);

  result = -[objc_class configuration](v144, "configuration");
  if (!result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v63 = result;
  v134 = v30;
  v130 = v52;
  objc_msgSend(result, "setTimeoutIntervalForRequest:", a5);

  result = -[objc_class configuration](v144, "configuration");
  if (result)
  {
    v64 = result;
    objc_msgSend(result, "setTimeoutIntervalForResource:", a5);

    v132 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v65 = v11;
    v66 = v135;
    v132(v135, v20, v10);
    v67 = *(unsigned __int8 *)(v65 + 80);
    v68 = v65;
    v128 = v67 | 7;
    v69 = (v67 + 24) & ~v67;
    v129 = v69;
    v139 = v10;
    v70 = (v12 + v69 + 7) & 0xFFFFFFFFFFFFFFF8;
    v125 = v70;
    v71 = (v70 + 15) & 0xFFFFFFFFFFFFFFF8;
    v126 = (v71 + 23) & 0xFFFFFFFFFFFFFFF8;
    v136 = (uint64_t)v20;
    v72 = (v126 + 15) & 0xFFFFFFFFFFFFFFF8;
    v127 = v72 + 8;
    v124 = v72;
    v73 = swift_allocObject(&unk_1007F7AC8, v72 + 8, v67 | 7);
    v74 = v131;
    *(_QWORD *)(v73 + 16) = v131;
    v123 = *(void (**)(uint64_t, char *, uint64_t))(v68 + 32);
    v123(v73 + v69, v66, v10);
    v75 = v141;
    v76 = v142;
    *(_QWORD *)(v73 + v70) = v142;
    v77 = (void (**)(void))(v73 + v71);
    v78 = v138;
    *v77 = v75;
    v77[1] = v78;
    v79 = v137;
    *(_QWORD *)(v73 + ((v71 + 23) & 0xFFFFFFFFFFFFFFF8)) = v137;
    v80 = v145;
    *(_QWORD *)(v73 + v72) = v145;
    v81 = v74;
    swift_retain();
    swift_retain();
    swift_retain();
    v82 = v144;
    CKModifyRecordsOperation.perRecordSaveBlock.setter(sub_1004E79F8, v73);
    v83 = v139;
    v132(v66, (char *)v136, v139);
    v84 = swift_allocObject(&unk_1007F7AF0, v127, v128);
    *(_QWORD *)(v84 + 16) = v81;
    v123(v84 + v129, v66, v83);
    *(_QWORD *)(v84 + v125) = v76;
    v85 = (void (**)(void))(v84 + v71);
    *v85 = v141;
    v85[1] = v78;
    *(_QWORD *)(v84 + v126) = v79;
    *(_QWORD *)(v84 + v124) = v80;
    v86 = v136;
    v87 = v81;
    swift_retain();
    swift_retain();
    swift_retain();
    CKModifyRecordsOperation.modifyRecordsResultBlock.setter(sub_1004E7B7C, v84);
    v146 = 1702256979;
    v147 = 0xE400000000000000;
    v88 = v82;
    v89._countAndFlagsBits = CKRecord.recordType.getter(v88);
    String.append(_:)(v89);
    swift_bridgeObjectRelease();
    v90 = objc_msgSend(objc_allocWithZone((Class)CKOperationGroup), "init");
    v91 = String._bridgeToObjectiveC()();
    objc_msgSend(v90, "setName:", v91);

    objc_msgSend(v90, "setQuantity:", 1);
    objc_msgSend(v90, "setExpectedSendSize:", 1);
    objc_msgSend(v90, "setExpectedReceiveSize:", 1);
    -[objc_class setGroup:](v88, "setGroup:", v90, swift_bridgeObjectRelease().n128_f64[0]);

    v92 = v143;
    v93 = v86;
    v132(v143, (char *)v86, v83);
    v94 = v87;
    v95 = Logger.logObject.getter(v94);
    v96 = static os_log_type_t.default.getter(v95);
    v97 = v96;
    if (os_log_type_enabled(v95, v96))
    {
      v98 = swift_slowAlloc(32, -1);
      v144 = (objc_class *)swift_slowAlloc(64, -1);
      v148[0] = (uint64_t)v144;
      *(_DWORD *)v98 = 136446722;
      v146 = v145;
      v99 = swift_getMetatypeMetadata(v145);
      v100 = String.init<A>(describing:)(&v146, v99);
      LODWORD(v145) = v97;
      v146 = sub_10001A820(v100, v101, v148);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147);
      *(_QWORD *)&v102 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v98 + 12) = 2082;
      v103 = -[objc_class recordName](v94, "recordName", v102);
      v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(v103);
      v106 = v105;

      v146 = sub_10001A820(v104, v106, v148);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147);

      swift_bridgeObjectRelease();
      *(_WORD *)(v98 + 22) = 2048;
      v107 = v135;
      Date.init()(v108);
      v109 = v88;
      v110 = v143;
      v111 = Date.timeIntervalSince(_:)(v143);
      v112 = *(void (**)(char *, uint64_t))(v140 + 8);
      v113 = v107;
      v114 = v139;
      v112(v113, v139);
      v146 = *(_QWORD *)&v111;
      v115 = v114;
      v116 = v136;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147);
      v117 = v110;
      v88 = v109;
      v112(v117, v114);
      _os_log_impl((void *)&_mh_execute_header, v95, (os_log_type_t)v145, "%{public}s: Saving CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f}", (uint8_t *)v98, 0x20u);
      v118 = v144;
      swift_arrayDestroy(v144, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v118, -1, -1);
      swift_slowDealloc(v98, -1, -1);

      v119 = &selRef_showRemindersAsOverdue;
    }
    else
    {

      v112 = *(void (**)(char *, uint64_t))(v140 + 8);
      v115 = v139;
      v112(v92, v139);

      v119 = &selRef_showRemindersAsOverdue;
      v116 = v93;
    }
    v120 = v130;
    v121 = objc_msgSend(v130, v119[235]);
    objc_msgSend(v121, "addOperation:", v88);

    v112((char *)v116, v115);
    swift_release(v142);
    return (id)_s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v149);
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1004E79F8(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1004E7A04(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004E2954);
}

uint64_t sub_1004E7A04(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v8 = a3 & 1;
  v9 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  return a4(a1, a2, v8, *(_QWORD *)(v4 + 16), v4 + v10, *(_QWORD *)(v4 + v11), *(_QWORD *)(v4 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v4 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v4 + ((((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v4+ ((((((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1004E7AB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7 + 8));
  swift_release(*(_QWORD *)(v0 + v8));
  return swift_deallocObject(v0, ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

void sub_1004E7B7C(uint64_t a1, char a2)
{
  sub_1004E7B90(a1, a2, "%{public}s: [modifyRecordsResultBlock] Failed to save CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f, error: %{public}s}", (uint64_t)sub_100189370);
}

void sub_1004E7B90(uint64_t a1, char a2, const char *a3, uint64_t a4)
{
  uint64_t v4;
  char v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v8 = a2 & 1;
  v9 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1004E4280(a1, v8, *(void **)(v4 + 16), v4 + v10, *(_QWORD *)(v4 + v11), *(uint64_t (**)(uint64_t, _QWORD))(v4 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v4 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v4 + ((((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v4 + ((((((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)), a3, a4);
}

uint64_t sub_1004E7C40(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  _QWORD *v21;
  uint64_t result;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t inited;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[48];
  _QWORD *v60;
  _QWORD *v61;

  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v57 - v9;
  v61 = _swiftEmptyArrayStorage;
  if (a2 < 0)
  {
    KeyPath = swift_getKeyPath(&unk_1006BFC08);
    if ((unint64_t)a1 >> 62)
    {
      if (a1 >= 0)
        v56 = a1 & 0xFFFFFFFFFFFFFF8;
      else
        v56 = a1;
      swift_bridgeObjectRetain(a1);
      v20 = _CocoaArrayWrapper.endIndex.getter(v56);
      sub_1001BC180((id)a1, a2);
    }
    else
    {
      v20 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    v21 = _swiftEmptyArrayStorage;
    if (v20)
    {
      v60 = _swiftEmptyArrayStorage;
      result = sub_1001C1BB8(0, v20 & ~(v20 >> 63), 0);
      if (v20 < 0)
      {
        __break(1u);
        return result;
      }
      v58 = KeyPath;
      v23 = 0;
      v21 = v60;
      do
      {
        if ((a1 & 0xC000000000000001) != 0)
          v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, a1);
        else
          v24 = *(id *)(a1 + 8 * v23 + 32);
        v25 = v24;
        v26 = objc_msgSend(v24, "uuid");
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

        v27 = type metadata accessor for UUID(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v8, 0, 1, v27);

        v60 = v21;
        v29 = v21[2];
        v28 = v21[3];
        if (v29 >= v28 >> 1)
        {
          sub_1001C1BB8(v28 > 1, v29 + 1, 1);
          v21 = v60;
        }
        ++v23;
        v21[2] = v29 + 1;
        sub_1000F2CE4((uint64_t)v8, (uint64_t)v21+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v29);
      }
      while (v20 != v23);
      KeyPath = v58;
    }
    v30 = sub_100341ECC(KeyPath, (uint64_t)v21);
    v31 = swift_release(KeyPath);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v31);
    v33 = v61[2];
    v32 = v61[3];
    if (v33 >= v32 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1);
    v34 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, v30);
    specialized Array._endMutation()(v34);
  }
  else
  {
    v11 = swift_getKeyPath(&unk_1006BFD48);
    v12 = objc_msgSend((id)a1, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v12);

    v13 = type metadata accessor for UUID(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v10, 0, 1, v13);
    v14 = sub_1002E8424(v11, (uint64_t)v10);
    v15 = swift_release(v11);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
    v17 = v61[2];
    v16 = v61[3];
    if (v17 >= v16 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1);
    v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v14);
    specialized Array._endMutation()(v18);
    sub_1001BC180((id)a1, a2);
    if ((a2 & 1) == 0)
      goto LABEL_26;
  }
  v35 = sub_10001CC08(0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v35);
  v37 = v61[2];
  v36 = v61[3];
  if (v37 >= v36 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1);
  v38 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v35);
  specialized Array._endMutation()(v38);
  v39 = sub_10001A630(&qword_10084D4F0);
  inited = swift_initStackObject(v39, v59);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
  v41 = swift_getKeyPath(&unk_1006BFC38);
  v42 = sub_100341EE0(v41);
  swift_release(v41);
  *(_QWORD *)(inited + 32) = v42;
  v43 = swift_getKeyPath(&unk_1006BFC78);
  v44 = sub_100341F04(v43);
  v45 = swift_release(v43);
  *(_QWORD *)(inited + 40) = v44;
  v60 = (_QWORD *)inited;
  specialized Array._endMutation()(v45);
  v46 = sub_10001CC54(v60);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v46);
  v48 = v61[2];
  v47 = v61[3];
  if (v48 >= v47 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1);
  v49 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v48, v46);
  specialized Array._endMutation()(v49);
LABEL_26:
  v50 = swift_getKeyPath(&unk_1006BFCE8);
  v51 = sub_100341F04(v50);
  v52 = swift_release(v50);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v52);
  v54 = v61[2];
  v53 = v61[3];
  if (v54 >= v53 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1);
  v55 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v54, v51);
  specialized Array._endMutation()(v55);
  return sub_10000D2BC(v61);
}

uint64_t sub_1004E80E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t result;

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v1 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006A7330;
  sub_1001A54DC();
  KeyPath = swift_getKeyPath(&unk_1006BFC38);
  v3 = NSSortDescriptor.init<A, B>(keyPath:ascending:)(KeyPath, 1);
  *(_QWORD *)(v1 + 32) = v3;
  result = specialized Array._endMutation()(v3);
  qword_1008721E8 = v1;
  return result;
}

uint64_t sub_1004E8168()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006A8550;
  sub_1001A54DC();
  KeyPath = swift_getKeyPath(&unk_1006BFDA0);
  *(_QWORD *)(v1 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)(KeyPath, 1);
  v3 = swift_getKeyPath(&unk_1006BFC08);
  v4 = NSSortDescriptor.init<A, B>(keyPath:ascending:)(v3, 1);
  *(_QWORD *)(v1 + 40) = v4;
  result = specialized Array._endMutation()(v4);
  qword_1008721F0 = v1;
  return result;
}

void sub_1004E8204()
{
  sub_1001C1B0C(0, 5, 0);
  __asm { BR              X10; loc_1004E82EC }
}

uint64_t sub_1004E8694()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t result;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27[48];

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v0, v27);
  *(_OWORD *)(inited + 16) = xmmword_1006A8550;
  *(_QWORD *)(inited + 32) = swift_getKeyPath(&unk_1006BFDD0);
  KeyPath = swift_getKeyPath(&unk_1006BFC38);
  *(_QWORD *)(inited + 40) = KeyPath;
  v25 = inited;
  specialized Array._endMutation()(KeyPath);
  if ((inited & 0xC000000000000001) != 0)
  {
    v3 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v25);
    v4 = v3;
  }
  else
  {
    v4 = *(_QWORD *)(v25 + 32);
    v3 = swift_retain();
  }
  v5 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v3);
  if (!v6)
    goto LABEL_18;
  v7 = v5;
  v8 = v6;
  swift_release(v4);
  v9 = _swiftEmptyArrayStorage;
  if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
    v9 = sub_1002C8224(0, _swiftEmptyArrayStorage[2] + 1, 1, _swiftEmptyArrayStorage);
  v11 = v9[2];
  v10 = v9[3];
  if (v11 >= v10 >> 1)
    v9 = sub_1002C8224((_QWORD *)(v10 > 1), v11 + 1, 1, v9);
  v9[2] = v11 + 1;
  v12 = &v9[2 * v11];
  v12[4] = v7;
  v12[5] = v8;
  if ((inited & 0xC000000000000001) != 0)
  {
    v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(1, inited);
    v4 = v13;
  }
  else
  {
    v4 = *(_QWORD *)(inited + 40);
    v13 = swift_retain();
  }
  v14 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v13);
  if (v15)
  {
    v16 = v14;
    v17 = v15;
    swift_release(v4);
    if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
      v9 = sub_1002C8224(0, v9[2] + 1, 1, v9);
    v19 = v9[2];
    v18 = v9[3];
    if (v19 >= v18 >> 1)
      v9 = sub_1002C8224((_QWORD *)(v18 > 1), v19 + 1, 1, v9);
    v9[2] = v19 + 1;
    v20 = &v9[2 * v19];
    v20[4] = v16;
    v20[5] = v17;
    swift_bridgeObjectRelease(inited);
    return (uint64_t)v9;
  }
  else
  {
LABEL_18:
    v25 = 0;
    v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v22._object = (void *)0x80000001006F8C10;
    v22._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v22);
    v24 = v4;
    v23 = sub_10001A630(&qword_100843740);
    _print_unlocked<A, B>(_:_:)(&v24, &v25, v23, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v25, v26, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1004E892C(uint64_t a1, char a2, uint64_t a3, Class a4, Class isa, Class a6)
{
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  double v13;
  _QWORD *v14;
  uint64_t v15;

  v9 = (void *)sub_1004E7C40(a1, a2);
  v10 = type metadata accessor for REMCDListSection();
  v11 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v10), "entity");
  objc_msgSend(v11, "setEntity:", v12);

  objc_msgSend(v11, "setAffectedStores:", 0);
  objc_msgSend(v11, "setPredicate:", v9);

  if (isa)
  {
    v14 = sub_1001DFBD0((uint64_t)isa);
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v13 = swift_bridgeObjectRelease(v14).n128_u64[0];
  }
  objc_msgSend(v11, "setPropertiesToFetch:", isa, v13);

  if (a6)
    a6 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v11, "setRelationshipKeyPathsForPrefetching:", a6);

  if (a4)
  {
    sub_1001A54DC();
    a4 = Array._bridgeToObjectiveC()().super.isa;
  }
  objc_msgSend(v11, "setSortDescriptors:", a4);

  v15 = NSManagedObjectContext.fetch<A>(_:)(v11, v10);
  return v15;
}

uint64_t sub_1004E8AD8@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_identifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_1004E8B04(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_100839C80, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(void))&UUID._bridgeToObjectiveC(), (SEL *)&selRef_setIdentifier_);
}

id sub_1004E8B38@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "list");
  *a2 = result;
  return result;
}

id sub_1004E8B70(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setList:", *a1);
}

id sub_1004E8B8C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "account");
  *a2 = result;
  return result;
}

id sub_1004E8BC4(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setAccount:", *a1);
}

uint64_t sub_1004E8BE8@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_creationDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_1004E8C14(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_1008380D0, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t (*)(void))&Date._bridgeToObjectiveC(), (SEL *)&selRef_setCreationDate_);
}

uint64_t type metadata accessor for RDObjectDescription()
{
  return objc_opt_self(_TtC7remindd19RDObjectDescription);
}

uint64_t sub_1004E8C68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];

  v25[0] = swift_getObjectType(a1);
  v2 = sub_10001A630(&qword_100847A00);
  v3 = String.init<A>(describing:)(v25, v2);
  v5 = v4;
  v25[0] = v3;
  v25[1] = v4;
  v6 = sub_1000E525C();
  v7 = StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)(46, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, &type metadata for String, v6);
  swift_bridgeObjectRelease(v5);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = (uint64_t *)(v7 + 32 * v8);
    v10 = *v9;
    v11 = v9[1];
    v13 = v9[2];
    v12 = v9[3];
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRelease(v7);
  }
  else
  {
    v14 = swift_bridgeObjectRelease(v7);
    v10 = Substring.init(_:)(0x296C696E28, 0xE500000000000000, v14);
    v11 = v15;
    v13 = v16;
    v12 = v17;
  }
  v25[0] = a1;
  v18 = sub_10001A630((uint64_t *)&unk_10083A270);
  v19 = swift_allocObject(v18, 112, 7);
  *(_OWORD *)(v19 + 16) = xmmword_1006A3C40;
  v20 = static String._fromSubstring(_:)(v10, v11, v13, v12, (__n128)xmmword_1006A3C40);
  v22 = v21;
  *(_QWORD *)(v19 + 56) = &type metadata for String;
  *(_QWORD *)(v19 + 64) = sub_1000184F8();
  *(_QWORD *)(v19 + 32) = v20;
  *(_QWORD *)(v19 + 40) = v22;
  *(_QWORD *)(v19 + 96) = sub_10001A630(&qword_10084D590);
  *(_QWORD *)(v19 + 104) = sub_1004E8E2C();
  *(_QWORD *)(v19 + 72) = v25;
  v23 = String.init(format:_:)(0x7025203A4025, 0xE600000000000000, v19);
  swift_bridgeObjectRelease(v12);
  return v23;
}

unint64_t sub_1004E8E2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10084D598;
  if (!qword_10084D598)
  {
    v1 = sub_1000A5A94(&qword_10084D590);
    result = swift_getWitnessTable(&protocol conformance descriptor for UnsafePointer<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10084D598);
  }
  return result;
}

uint64_t sub_1004E8E78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084D5A0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084D5A0);
  if (qword_1008375F8 != -1)
    swift_once(&qword_1008375F8, sub_1004A1790);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FC8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1004E8F08()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  void (*v7)(_QWORD *, uint64_t, uint64_t);
  id v8;
  char v9;
  uint64_t (*v10)(_QWORD *, uint64_t);
  uint64_t result;
  id v12;
  char v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  __n128 v20;
  uint64_t Strong;
  char *v22;
  _BYTE v23[16];

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v23[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = *(void **)&v0[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_queue];
  *v4 = v5;
  v6 = enum case for DispatchPredicate.onQueue(_:);
  v7 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v2 + 104);
  v7(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v8 = v5;
  v9 = _dispatchPreconditionTest(_:)(v4);
  v10 = *(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8);
  result = v10(v4, v1);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  sub_1004E90DC();
  *v4 = v8;
  v7(v4, v6, v1);
  v12 = v8;
  v13 = _dispatchPreconditionTest(_:)(v4);
  result = v10(v4, v1);
  if ((v13 & 1) == 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  *v4 = v12;
  v7(v4, v6, v1);
  v14 = v12;
  v15 = _dispatchPreconditionTest(_:)(v4);
  result = v10(v4, v1);
  if ((v15 & 1) != 0)
  {
    v16 = *sub_10000A388(&v0[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_dataSource], *(_QWORD *)&v0[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_dataSource + 24]);
    v17 = swift_retain(v16);
    v18 = sub_10036631C(v17);
    swift_release(v16);
    v19 = sub_1004EC3F0(v18, 0, 0);
    v20 = swift_bridgeObjectRelease(v18);
    Strong = swift_unknownObjectUnownedLoadStrong(&v0[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_delegate], v20);
    v22 = v0;
    sub_100203CA0(v22, (uint64_t)v19, Strong);

    swift_bridgeObjectRelease(v19);
    return swift_unknownObjectRelease(Strong);
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_1004E90DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  void (*v7)(uint64_t *, uint64_t, uint64_t);
  id v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t);
  char *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  id v63;
  int64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  _BOOL4 v79;
  uint8_t *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  __int128 v115;
  double (*__ptr32 *v116)();
  uint64_t *v117;
  uint64_t v118;
  void (*v119)(uint64_t *, uint64_t, uint64_t);
  void (*v120)(uint64_t *, uint64_t);
  char *v121;
  int64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  _QWORD *v127;
  unint64_t v128;
  unint64_t v129;
  int64_t v130;
  unint64_t v131;
  int64_t v132;
  void (*v133)(uint64_t *, uint64_t);
  uint64_t v134;
  uint64_t *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  id v141;
  __n128 v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void (*v147)(uint64_t *, uint64_t, uint64_t);
  char v148;
  id v149;
  void *v150;
  uint64_t v151;
  id v152;
  id v153;
  id v154;
  NSObject *v155;
  os_log_type_t v156;
  uint8_t *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint8_t *v163;
  int64_t v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  int64_t v169;
  unint64_t v170;
  unint64_t v171;
  int64_t v172;
  unint64_t v173;
  int64_t v174;
  uint64_t *v175;
  uint64_t v176;
  unint64_t v177;
  char v178;
  id v179;
  __n128 v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  void (*v185)(uint64_t *, uint64_t);
  id v186;
  void *v187;
  uint64_t v188;
  char *v189;
  __int128 v190;
  uint64_t *v191;
  void (*v192)(uint64_t *, uint64_t, uint64_t);
  uint64_t *v193;
  id v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int v199;
  void (*v200)(uint64_t *, uint64_t);
  char *v201;
  uint64_t v202;
  int64_t v203;
  char *v204;
  id v205;
  _QWORD *v206;
  _QWORD v207[3];
  uint64_t v208[3];
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  uint64_t v214;
  int64_t v215;
  uint64_t v216;
  unint64_t v217;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v188 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_queue);
  *v4 = (uint64_t)v5;
  v6 = enum case for DispatchPredicate.onQueue(_:);
  v7 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 104);
  v7(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v8 = v5;
  v9 = _dispatchPreconditionTest(_:)(v4);
  v10 = *(void (**)(uint64_t *, uint64_t))(v2 + 8);
  v10(v4, v1);
  if ((v9 & 1) == 0)
    goto LABEL_143;
  v11 = *(char **)(v0 + OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_locationManager);
  v197 = OBJC_IVAR____TtC7remindd17RDLocationManager_queue;
  v12 = *(void **)&v11[OBJC_IVAR____TtC7remindd17RDLocationManager_queue];
  *v4 = (uint64_t)v12;
  v7(v4, v6, v1);
  v13 = v12;
  v9 = _dispatchPreconditionTest(_:)(v4);
  v200 = v10;
  v10(v4, v1);
  if ((v9 & 1) == 0)
  {
LABEL_144:
    __break(1u);
    goto LABEL_145;
  }
  v204 = v11;
  v196 = OBJC_IVAR____TtC7remindd17RDLocationManager_q_locationManager;
  if (*(_QWORD *)&v11[OBJC_IVAR____TtC7remindd17RDLocationManager_q_locationManager])
  {
    v192 = v7;
    v199 = v6;
    v193 = v4;
    v198 = v1;
    v9 = *sub_10000A388((_QWORD *)(v0 + OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_dataSource), *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_dataSource + 24));
    v14 = swift_retain(v9);
    v15 = sub_10036631C(v14);
    swift_release(v9);
    v211 = &_swiftEmptySetSingleton;
    v212 = &_swiftEmptySetSingleton;
    v16 = *(_QWORD *)(v15 + 16);
    v203 = v15;
    if (v16)
    {
      v17 = (id *)(v15 + 48);
      v206 = &_swiftEmptyDictionarySingleton;
      while (1)
      {
        v18 = *(v17 - 2);
        v19 = *(v17 - 1);
        v9 = (uint64_t)*v17;
        v205 = v18;
        v20 = v19;
        v21 = sub_1004EC57C((void *)v9);
        v23 = v22;
        v24 = (id)v9;
        swift_bridgeObjectRetain(v23);
        v25 = (uint64_t)v206;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v206);
        v213 = (_QWORD *)v25;
        v28 = sub_10001A6DC(v21, v23);
        v29 = *(_QWORD *)(v25 + 16);
        v30 = (v27 & 1) == 0;
        v31 = v29 + v30;
        if (__OFADD__(v29, v30))
        {
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        v9 = v27;
        if (*(_QWORD *)(v25 + 24) >= v31)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_1002DA75C();
        }
        else
        {
          sub_1002D48C8(v31, isUniquelyReferenced_nonNull_native);
          v32 = sub_10001A6DC(v21, v23);
          if ((v9 & 1) != (v33 & 1))
          {
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
            __break(1u);
            return;
          }
          v28 = v32;
        }
        v34 = v213;
        v206 = v213;
        if ((v9 & 1) != 0)
        {
          v9 = v213[7];

          *(_QWORD *)(v9 + 8 * v28) = v24;
        }
        else
        {
          v213[(v28 >> 6) + 8] |= 1 << v28;
          v35 = (uint64_t *)(v34[6] + 16 * v28);
          *v35 = v21;
          v35[1] = v23;
          *(_QWORD *)(v34[7] + 8 * v28) = v24;
          v36 = v34[2];
          v37 = __OFADD__(v36, 1);
          v38 = v36 + 1;
          if (v37)
            goto LABEL_139;
          v34[2] = v38;
          swift_bridgeObjectRetain(v23);
        }
        swift_bridgeObjectRelease(v23);
        swift_bridgeObjectRelease(0x8000000000000000);
        sub_1002DB0E4((uint64_t *)&v213, v21, v23);

        swift_bridgeObjectRelease(v214);
        v17 += 3;
        if (!--v16)
          goto LABEL_23;
      }
    }
    v206 = &_swiftEmptyDictionarySingleton;
LABEL_23:
    swift_bridgeObjectRelease(v203);
    v44 = sub_10046B968();
    v45 = v44;
    if ((v44 & 0xC000000000000001) != 0)
    {
      if (v44 >= 0)
        v44 &= 0xFFFFFFFFFFFFFF8uLL;
      v9 = __CocoaSet.makeIterator()(v44);
      v46 = sub_1004EC764();
      v47 = sub_1002040FC((unint64_t *)&qword_10084B7E0, 255, (uint64_t (*)(uint64_t))sub_1004EC764, (uint64_t)&protocol conformance descriptor for NSObject);
      v44 = (uint64_t)Set.Iterator.init(_cocoa:)(&v213, v9, v46, v47);
      v45 = (uint64_t)v213;
      v48 = v214;
      v49 = v215;
      v50 = v216;
      v51 = v217;
    }
    else
    {
      v50 = 0;
      v52 = -1 << *(_BYTE *)(v44 + 32);
      v48 = v44 + 56;
      v49 = ~v52;
      v53 = -v52;
      if (v53 < 64)
        v54 = ~(-1 << v53);
      else
        v54 = -1;
      v51 = v54 & *(_QWORD *)(v44 + 56);
    }
    v205 = (id)(v45 & 0x7FFFFFFFFFFFFFFFLL);
    v203 = v49;
    v55 = (unint64_t)(v49 + 64) >> 6;
    if (v45 < 0)
      goto LABEL_34;
    while (1)
    {
      if (v51)
      {
        v56 = (v51 - 1) & v51;
        v57 = __clz(__rbit64(v51)) | (v50 << 6);
        v58 = v50;
        v59 = (uint64_t)v206;
        goto LABEL_51;
      }
      v64 = v50 + 1;
      v59 = (uint64_t)v206;
      if (__OFADD__(v50, 1))
        goto LABEL_142;
      if (v64 >= v55)
        break;
      v65 = *(_QWORD *)(v48 + 8 * v64);
      v58 = v50 + 1;
      if (!v65)
      {
        v58 = v50 + 2;
        if (v50 + 2 >= v55)
          break;
        v65 = *(_QWORD *)(v48 + 8 * v58);
        if (!v65)
        {
          v58 = v50 + 3;
          if (v50 + 3 >= v55)
            break;
          v65 = *(_QWORD *)(v48 + 8 * v58);
          if (!v65)
          {
            v58 = v50 + 4;
            if (v50 + 4 >= v55)
              break;
            v65 = *(_QWORD *)(v48 + 8 * v58);
            if (!v65)
            {
              v66 = v50 + 5;
              do
              {
                if (v55 == v66)
                  goto LABEL_54;
                v65 = *(_QWORD *)(v48 + 8 * v66++);
              }
              while (!v65);
              v58 = v66 - 1;
            }
          }
        }
      }
      v56 = (v65 - 1) & v65;
      v57 = __clz(__rbit64(v65)) + (v58 << 6);
LABEL_51:
      v63 = *(id *)(*(_QWORD *)(v45 + 48) + 8 * v57);
      if (!v63)
        break;
      while (1)
      {
        v67 = sub_1004EC57C(v63);
        v69 = v68;
        swift_bridgeObjectRetain(v68);
        v9 = (uint64_t)v63;
        v70 = swift_isUniquelyReferenced_nonNull_native(v59);
        v208[0] = v59;
        sub_10028ED8C(v9, v67, v69, v70);
        v206 = (_QWORD *)v208[0];
        swift_bridgeObjectRelease(v69);
        swift_bridgeObjectRelease(0x8000000000000000);
        sub_1002DB0E4(v208, v67, v69);

        swift_bridgeObjectRelease(v208[1]);
        v50 = v58;
        v51 = v56;
        if ((v45 & 0x8000000000000000) == 0)
          break;
LABEL_34:
        v60 = __CocoaSet.Iterator.next()(v44);
        if (v60)
        {
          v61 = v60;
          v207[0] = v60;
          v62 = sub_1004EC764();
          swift_unknownObjectRetain(v61);
          swift_dynamicCast(v208, v207, (char *)&type metadata for Swift.AnyObject + 8, v62, 7);
          v63 = (id)v208[0];
          swift_unknownObjectRelease(v61);
          v58 = v50;
          v56 = v51;
          v59 = (uint64_t)v206;
          if (v63)
            continue;
        }
        goto LABEL_54;
      }
    }
LABEL_54:
    sub_1000C6560(v45);
    v71 = (uint64_t)v211;
    v72 = (uint64_t)v212;
    if (v212[2] <= v211[2] >> 3)
    {
      v208[0] = (uint64_t)v211;
      swift_bridgeObjectRetain(v211);
      swift_bridgeObjectRetain(v72);
      sub_10059B880(v74);
      swift_bridgeObjectRelease(v72);
      v9 = v208[0];
    }
    else
    {
      swift_bridgeObjectRetain(v211);
      swift_bridgeObjectRetain(v72);
      v9 = (uint64_t)sub_100215890(v73, v71);
      swift_bridgeObjectRelease(v72);
    }
    if (*(_QWORD *)(v71 + 16) <= *(_QWORD *)(v72 + 16) >> 3)
    {
      v208[0] = v72;
      swift_bridgeObjectRetain(v71);
      swift_bridgeObjectRetain(v72);
      sub_10059B880(v71);
      swift_bridgeObjectRelease(v71);
      v75 = (char *)v208[0];
    }
    else
    {
      swift_bridgeObjectRetain(v71);
      swift_bridgeObjectRetain(v72);
      v75 = (char *)sub_100215890(v71, v72);
      swift_bridgeObjectRelease(v71);
    }
    v201 = v75;
    if (qword_100837760 == -1)
    {
LABEL_61:
      v195 = type metadata accessor for Logger(0);
      v76 = sub_10001AAA8(v195, (uint64_t)qword_10084D5A0);
      v77 = Logger.logObject.getter(v76);
      v78 = static os_log_type_t.debug.getter();
      v79 = os_log_type_enabled(v77, v78);
      v205 = (id)v9;
      if (v79)
      {
        v80 = (uint8_t *)swift_slowAlloc(12, -1);
        v81 = swift_slowAlloc(32, -1);
        v208[0] = v81;
        *(_DWORD *)v80 = 136315138;
        v203 = (int64_t)(v80 + 4);
        swift_beginAccess(&v212, v207, 0, 0);
        v82 = v212;
        swift_bridgeObjectRetain(v212);
        v84 = Set.description.getter(v83, &type metadata for String, &protocol witness table for String);
        v86 = v85;
        swift_bridgeObjectRelease(v82);
        v210 = sub_10001A820(v84, v86, v208);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v210, &v211);
        swift_bridgeObjectRelease(v86);
        _os_log_impl((void *)&_mh_execute_header, v77, v78, "reconcileAllGeofences desiredSet = %s", v80, 0xCu);
        swift_arrayDestroy(v81, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v81, -1, -1);
        swift_slowDealloc(v80, -1, -1);
      }

      v88 = Logger.logObject.getter(v87);
      v89 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v88, v89))
      {
        v90 = (uint8_t *)swift_slowAlloc(12, -1);
        v91 = swift_slowAlloc(32, -1);
        v210 = v91;
        *(_DWORD *)v90 = 136315138;
        swift_beginAccess(&v211, v208, 0, 0);
        v92 = v211;
        swift_bridgeObjectRetain(v211);
        v94 = Set.description.getter(v93, &type metadata for String, &protocol witness table for String);
        v96 = v95;
        swift_bridgeObjectRelease(v92);
        v209 = sub_10001A820(v94, v96, &v210);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, &v210);
        swift_bridgeObjectRelease(v96);
        _os_log_impl((void *)&_mh_execute_header, v88, v89, "reconcileAllGeofences existingSet = %s", v90, 0xCu);
        swift_arrayDestroy(v91, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v91, -1, -1);
        swift_slowDealloc(v90, -1, -1);
      }

      v9 = (uint64_t)v205;
      v97 = v201;
      v98 = swift_bridgeObjectRetain_n(v205, 2);
      v99 = Logger.logObject.getter(v98);
      v100 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v99, v100))
      {
        v101 = (uint8_t *)swift_slowAlloc(12, -1);
        v102 = swift_slowAlloc(32, -1);
        v210 = v102;
        *(_DWORD *)v101 = 136315138;
        swift_bridgeObjectRetain(v205);
        v103 = Set.description.getter(v205, &type metadata for String, &protocol witness table for String);
        v105 = v104;
        swift_bridgeObjectRelease(v205);
        v209 = sub_10001A820(v103, v105, &v210);
        v9 = (uint64_t)v205;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, &v210);
        swift_bridgeObjectRelease_n(v9, 2);
        swift_bridgeObjectRelease(v105);
        _os_log_impl((void *)&_mh_execute_header, v99, v100, "reconcileAllGeofences setToRemove = %s", v101, 0xCu);
        swift_arrayDestroy(v102, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v102, -1, -1);
        swift_slowDealloc(v101, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v9, 2);
      }
      v106 = swift_bridgeObjectRetain_n(v97, 2);
      v107 = Logger.logObject.getter(v106);
      v108 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v107, v108))
      {
        v109 = (uint8_t *)swift_slowAlloc(12, -1);
        v110 = swift_slowAlloc(32, -1);
        v210 = v110;
        *(_DWORD *)v109 = 136315138;
        swift_bridgeObjectRetain(v97);
        v112 = Set.description.getter(v111, &type metadata for String, &protocol witness table for String);
        v114 = v113;
        swift_bridgeObjectRelease(v97);
        v209 = sub_10001A820(v112, v114, &v210);
        v9 = (uint64_t)v205;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, &v210);
        swift_bridgeObjectRelease_n(v97, 2);
        swift_bridgeObjectRelease(v114);
        _os_log_impl((void *)&_mh_execute_header, v107, v108, "reconcileAllGeofences setToAdd = %s", v109, 0xCu);
        swift_arrayDestroy(v110, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v110, -1, -1);
        swift_slowDealloc(v109, -1, -1);

        v116 = &off_1006A3000;
        v117 = v193;
        v118 = v199;
        v119 = v192;
        v120 = v200;
        v121 = v204;
      }
      else
      {

        swift_bridgeObjectRelease_n(v97, 2);
        v117 = v193;
        v118 = v199;
        v119 = v192;
        v120 = v200;
        v121 = v204;
        v116 = &off_1006A3000;
      }
      v122 = 0;
      v123 = *(_QWORD *)(v9 + 56);
      v202 = v9 + 56;
      v124 = 1 << *(_BYTE *)(v9 + 32);
      v125 = -1;
      if (v124 < 64)
        v125 = ~(-1 << v124);
      v126 = v125 & v123;
      v203 = (unint64_t)(v124 + 63) >> 6;
      v191 = &v210;
      *(_QWORD *)&v115 = *((_QWORD *)v116 + 369);
      v190 = v115;
      v189 = (char *)&type metadata for Any + 8;
      while (1)
      {
        v127 = v206;
        while (1)
        {
          do
          {
            while (v126)
            {
              v128 = __clz(__rbit64(v126));
              v126 &= v126 - 1;
              v129 = v128 | (v122 << 6);
              if (v127[2])
                goto LABEL_94;
            }
            v130 = v122 + 1;
            if (__OFADD__(v122, 1))
              goto LABEL_131;
            if (v130 >= v203)
            {
LABEL_103:
              swift_release(v9);
              v164 = 0;
              v165 = v201 + 56;
              v166 = 1 << v201[32];
              v167 = -1;
              if (v166 < 64)
                v167 = ~(-1 << v166);
              v168 = v167 & *((_QWORD *)v201 + 7);
              v169 = (unint64_t)(v166 + 63) >> 6;
              v205 = v201 + 56;
              v203 = v169;
              while (1)
              {
                if (v168)
                {
                  v170 = __clz(__rbit64(v168));
                  v168 &= v168 - 1;
                  v171 = v170 | (v164 << 6);
                  if (!v127[2])
                    continue;
LABEL_124:
                  v175 = (uint64_t *)(*((_QWORD *)v201 + 6) + 16 * v171);
                  v176 = *v175;
                  v9 = v175[1];
                  swift_bridgeObjectRetain(v9);
                  v177 = sub_10001A6DC(v176, v9);
                  if ((v178 & 1) != 0)
                  {
                    v179 = *(id *)(v127[7] + 8 * v177);
                    v180 = swift_bridgeObjectRelease(v9);
                    v181 = *(void **)&v121[OBJC_IVAR____TtC7remindd17RDLocationManager_queue];
                    *v117 = (uint64_t)v181;
                    v182 = v199;
                    v183 = v198;
                    ((void (*)(uint64_t *, _QWORD, uint64_t, __n128))v119)(v117, v199, v198, v180);
                    v9 = v181;
                    v184 = _dispatchPreconditionTest(_:)(v117);
                    v185 = v200;
                    v200(v117, v183);
                    if ((v184 & 1) == 0)
                      goto LABEL_136;
                    *v117 = v9;
                    v119(v117, v182, v183);
                    v186 = (id)v9;
                    v9 = _dispatchPreconditionTest(_:)(v117);
                    v185(v117, v183);
                    if ((v9 & 1) == 0)
                      goto LABEL_137;
                    v121 = v204;
                    v187 = *(void **)&v204[OBJC_IVAR____TtC7remindd17RDLocationManager_q_locationManager];
                    if (!v187)
                      goto LABEL_138;
                    v9 = v187;
                    sub_10046B204((void *)v9, v121, v179);

                    v165 = v205;
                    v127 = v206;
                    v169 = v203;
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v9);
                  }
                }
                else
                {
                  v172 = v164 + 1;
                  if (__OFADD__(v164, 1))
                    goto LABEL_132;
                  if (v172 >= v169)
                  {
LABEL_129:
                    swift_release(v201);
                    swift_bridgeObjectRelease(v211);
                    swift_bridgeObjectRelease(v212);
                    swift_bridgeObjectRelease(v127);
                    return;
                  }
                  v173 = v165[v172];
                  ++v164;
                  if (!v173)
                  {
                    v164 = v172 + 1;
                    if (v172 + 1 >= v169)
                      goto LABEL_129;
                    v173 = v165[v164];
                    if (!v173)
                    {
                      v164 = v172 + 2;
                      if (v172 + 2 >= v169)
                        goto LABEL_129;
                      v173 = v165[v164];
                      if (!v173)
                      {
                        v174 = v172 + 3;
                        if (v174 >= v169)
                          goto LABEL_129;
                        v173 = v165[v174];
                        if (!v173)
                        {
                          while (1)
                          {
                            v164 = v174 + 1;
                            if (__OFADD__(v174, 1))
                              goto LABEL_141;
                            if (v164 >= v169)
                              goto LABEL_129;
                            v173 = v165[v164];
                            ++v174;
                            if (v173)
                              goto LABEL_123;
                          }
                        }
                        v164 = v174;
                      }
                    }
                  }
LABEL_123:
                  v168 = (v173 - 1) & v173;
                  v171 = __clz(__rbit64(v173)) + (v164 << 6);
                  if (v127[2])
                    goto LABEL_124;
                }
              }
            }
            v131 = *(_QWORD *)(v202 + 8 * v130);
            ++v122;
            if (!v131)
            {
              v122 = v130 + 1;
              if (v130 + 1 >= v203)
                goto LABEL_103;
              v131 = *(_QWORD *)(v202 + 8 * v122);
              if (!v131)
              {
                v122 = v130 + 2;
                if (v130 + 2 >= v203)
                  goto LABEL_103;
                v131 = *(_QWORD *)(v202 + 8 * v122);
                if (!v131)
                {
                  v132 = v130 + 3;
                  if (v132 >= v203)
                    goto LABEL_103;
                  v131 = *(_QWORD *)(v202 + 8 * v132);
                  if (!v131)
                  {
                    while (1)
                    {
                      v122 = v132 + 1;
                      if (__OFADD__(v132, 1))
                        break;
                      if (v122 >= v203)
                        goto LABEL_103;
                      v131 = *(_QWORD *)(v202 + 8 * v122);
                      ++v132;
                      if (v131)
                        goto LABEL_93;
                    }
LABEL_140:
                    __break(1u);
LABEL_141:
                    __break(1u);
LABEL_142:
                    __break(1u);
LABEL_143:
                    __break(1u);
                    goto LABEL_144;
                  }
                  v122 = v132;
                }
              }
            }
LABEL_93:
            v126 = (v131 - 1) & v131;
            v129 = __clz(__rbit64(v131)) + (v122 << 6);
          }
          while (!v127[2]);
LABEL_94:
          v133 = v120;
          v134 = v118;
          v135 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v129);
          v136 = v127;
          v138 = *v135;
          v137 = v135[1];
          swift_bridgeObjectRetain(v137);
          v139 = sub_10001A6DC(v138, v137);
          if ((v140 & 1) != 0)
            break;
          swift_bridgeObjectRelease(v137);
          v127 = v136;
          v9 = (uint64_t)v205;
          v118 = v134;
          v120 = v133;
        }
        v141 = *(id *)(v136[7] + 8 * v139);
        v142 = swift_bridgeObjectRelease(v137);
        v143 = *(void **)&v121[v197];
        *v117 = (uint64_t)v143;
        v144 = v134;
        v145 = v134;
        v146 = v198;
        ((void (*)(uint64_t *, uint64_t, uint64_t, __n128))v119)(v117, v145, v198, v142);
        v9 = v143;
        v147 = v119;
        v148 = _dispatchPreconditionTest(_:)(v117);
        v133(v117, v146);
        if ((v148 & 1) == 0)
          goto LABEL_133;
        *v117 = v9;
        v147(v117, v144, v146);
        v149 = (id)v9;
        v9 = _dispatchPreconditionTest(_:)(v117);
        v133(v117, v146);
        if ((v9 & 1) == 0)
          goto LABEL_134;
        v119 = v147;
        v121 = v204;
        v150 = *(void **)&v204[v196];
        if (!v150)
          goto LABEL_135;
        v151 = qword_100837550;
        v152 = v150;
        if (v151 != -1)
          swift_once(&qword_100837550, sub_10046AFD8);
        sub_10001AAA8(v195, (uint64_t)qword_10084B710);
        v153 = v141;
        swift_unknownObjectRetain_n(v121, 2);
        v154 = v153;
        v155 = Logger.logObject.getter(v154);
        v156 = static os_log_type_t.default.getter(v155);
        if (os_log_type_enabled(v155, v156))
        {
          v157 = (uint8_t *)swift_slowAlloc(12, -1);
          v158 = swift_slowAlloc(32, -1);
          v210 = v158;
          *(_DWORD *)v157 = v190;
          v159 = sub_10046D204(v154);
          v194 = v152;
          v161 = v160;
          v209 = sub_10001A820(v159, v160, &v210);
          v121 = v204;
          v119 = v192;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, v191);

          swift_unknownObjectRelease_n(v121, 2);
          v162 = v161;
          v152 = v194;
          swift_bridgeObjectRelease(v162);
          _os_log_impl((void *)&_mh_execute_header, v155, v156, "stopMonitoring: %s", v157, 0xCu);
          swift_arrayDestroy(v158, 1, v189);
          swift_slowDealloc(v158, -1, -1);
          v163 = v157;
          v117 = v193;
          swift_slowDealloc(v163, -1, -1);

        }
        else
        {

          swift_unknownObjectRelease_n(v121, 2);
        }
        v120 = v200;
        v9 = (uint64_t)v205;
        objc_msgSend(v152, "stopMonitoringForRegion:", v154);

        v118 = v199;
      }
    }
LABEL_145:
    swift_once(&qword_100837760, sub_1004E8E78);
    goto LABEL_61;
  }
  if (qword_100837760 != -1)
    swift_once(&qword_100837760, sub_1004E8E78);
  v39 = type metadata accessor for Logger(0);
  v40 = sub_10001AAA8(v39, (uint64_t)qword_10084D5A0);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v43 = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "locationManager hasn't started. Not reconciling geofences.", v43, 2u);
    swift_slowDealloc(v43, -1, -1);
  }

}

void sub_1004EA550(void (*a1)(void), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  a1();
  if (qword_100837760 != -1)
    swift_once(&qword_100837760, sub_1004E8E78);
  v6 = type metadata accessor for Logger(0);
  sub_10001AAA8(v6, (uint64_t)qword_10084D5A0);
  v7 = swift_bridgeObjectRetain_n(a4, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v13 = v11;
    *(_DWORD *)v10 = 136446210;
    swift_bridgeObjectRetain(a4);
    v12 = sub_10001A820(a3, a4, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "os_transaction RELEASE {name: com.apple.remindd.RDLocationAlarmProducer.%{public}s}", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
  }
}

uint64_t sub_1004EA778()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD, uint64_t, __n128);
  id v9;
  void (*v10)(_QWORD *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t result;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint8_t *v31;
  void (*v32)(_QWORD *, uint64_t);
  unsigned int v33;
  void (*v34)(_QWORD *, _QWORD, uint64_t, __n128);
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (uint8_t **)((char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)&v0[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_queue];
  *v5 = v6;
  v7 = enum case for DispatchPredicate.onQueue(_:);
  v8 = *(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v2 + 104);
  v8(v5, enum case for DispatchPredicate.onQueue(_:), v1, v3);
  v9 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  v10 = *(void (**)(_QWORD *, uint64_t))(v2 + 8);
  v10(v5, v1);
  if ((v6 & 1) != 0)
  {
    if (qword_100837760 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100837760, sub_1004E8E78);
LABEL_3:
  v11 = type metadata accessor for Logger(0);
  v12 = sub_10001AAA8(v11, (uint64_t)qword_10084D5A0);
  v13 = v0;
  v35 = v12;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(12, -1);
    v34 = v8;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc(32, -1);
    v32 = v10;
    v19 = v18;
    v33 = v7;
    *(_DWORD *)v17 = 136315138;
    v31 = v17 + 4;
    v36 = 60;
    v37 = 0xE100000000000000;
    v38 = v18;
    v20._countAndFlagsBits = sub_1004E8C68((uint64_t)v13);
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 62;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    v36 = sub_10001A820(v36, v37, &v38);
    v7 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Starting location alarm producer {producer: %s}", v17, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    v22 = v19;
    v10 = v32;
    swift_slowDealloc(v22, -1, -1);
    v23 = v17;
    v8 = v34;
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

  }
  v24 = *(_QWORD *)&v13[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_locationManager];
  v25 = *(void **)(v24 + OBJC_IVAR____TtC7remindd17RDLocationManager_queue);
  *v5 = v25;
  ((void (*)(_QWORD *, uint64_t, uint64_t))v8)(v5, v7, v1);
  v26 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)(v5);
  result = ((uint64_t (*)(_QWORD *, uint64_t))v10)(v5, v1);
  if ((v25 & 1) != 0)
  {
    if (*(_QWORD *)(v24 + OBJC_IVAR____TtC7remindd17RDLocationManager_q_locationManager))
    {
      v28 = Logger.logObject.getter(result);
      v29 = static os_log_type_t.info.getter(v28);
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "locationManager started, reconciling all geofences", v30, 2u);
        swift_slowDealloc(v30, -1, -1);
      }

      return sub_1004E8F08();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004EAAD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v15;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (uint64_t *)((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v1 + OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_queue);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2, v4);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    if (qword_100837760 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100837760, sub_1004E8E78);
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10001AAA8(v9, (uint64_t)qword_10084D5A0);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.info.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "alarmDatabaseDidChange, reconciling all geofences", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  return sub_1004E8F08();
}

unint64_t sub_1004EAC40()
{
  return 0xD000000000000017;
}

uint64_t sub_1004EAC5C()
{
  return sub_1004EA778();
}

uint64_t sub_1004EAC7C()
{
  return sub_1004EAAD0();
}

uint64_t sub_1004EAC9C()
{
  return sub_1004E8F08();
}

uint64_t sub_1004EACBC(char *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  __n128 v17;
  uint64_t Strong;
  char *v19;
  _BYTE v20[16];

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = *(void **)&a1[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_queue];
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4, v6);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) != 0)
  {
    v12 = *sub_10000A388(&a1[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_dataSource], *(_QWORD *)&a1[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_dataSource + 24]);
    v13 = swift_retain();
    v14 = sub_10036631C(v13);
    v15 = swift_release(v12);
    __chkstk_darwin(v15);
    *(_QWORD *)&v20[-16] = a2;
    v20[-8] = 1;
    v16 = sub_100200DBC((void (*)(uint64_t *__return_ptr, id *))sub_1004EC828, (uint64_t)&v20[-32], v14);
    v17 = swift_bridgeObjectRelease();
    Strong = swift_unknownObjectUnownedLoadStrong(&a1[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_delegate], v17);
    v19 = a1;
    sub_100203CA0(v19, (uint64_t)v16, Strong);

    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease(Strong);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004EAE40(char *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  __n128 v17;
  uint64_t Strong;
  char *v19;
  _BYTE v20[16];

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = *(void **)&a1[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_queue];
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4, v6);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) != 0)
  {
    v12 = *sub_10000A388(&a1[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_dataSource], *(_QWORD *)&a1[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_dataSource + 24]);
    v13 = swift_retain();
    v14 = sub_10036631C(v13);
    v15 = swift_release(v12);
    __chkstk_darwin(v15);
    *(_QWORD *)&v20[-16] = a2;
    v20[-8] = 0;
    v16 = sub_100200DBC((void (*)(uint64_t *__return_ptr, id *))sub_1004EC808, (uint64_t)&v20[-32], v14);
    v17 = swift_bridgeObjectRelease();
    Strong = swift_unknownObjectUnownedLoadStrong(&a1[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_delegate], v17);
    v19 = a1;
    sub_100203CA0(v19, (uint64_t)v16, Strong);

    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease(Strong);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1004EAFC0(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char **v35;
  unsigned int v36;
  id v37;
  id v38;
  char *v39;
  uint64_t v40;
  char *v41;
  id v42;
  uint64_t v43;
  id v44;
  char *v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  id v50;
  char *v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  __n128 v73;
  void (*v74)(char *, uint64_t);
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  char *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  __n128 v88;
  void (*v89)(char *, uint64_t);
  void *v90;
  id v91;
  id v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  _QWORD *v100;
  void (*v101)(char *, uint64_t);
  id v102;
  char *v103;
  char *v104;
  id v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;

  v106 = a4;
  v110 = type metadata accessor for Date(0);
  v113 = *(_QWORD *)(v110 - 8);
  v7 = __chkstk_darwin(v110);
  v104 = (char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v103 = (char *)&v101 - v10;
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v101 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v101 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v101 - v18;
  __chkstk_darwin(v17);
  v112 = (char *)&v101 - v20;
  v21 = type metadata accessor for Calendar(0);
  v107 = *(_QWORD *)(v21 - 8);
  v108 = v21;
  __chkstk_darwin(v21);
  v111 = (char *)&v101 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(void **)a1;
  v24 = *(void **)(a1 + 8);
  v25 = *(void **)(a1 + 16);
  v109 = v23;
  v105 = v24;
  v114 = v25;
  v26 = objc_msgSend(v114, "identifier");
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v29 = v28;

  if (!a2)
  {
    swift_bridgeObjectRelease(v29);
    goto LABEL_13;
  }
  v30 = objc_msgSend(a2, "identifier");
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v33 = v32;

  if (v27 == v31 && v29 == v33)
  {
    swift_bridgeObjectRelease_n(v29, 2);
    goto LABEL_7;
  }
  v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v29, v31, v33, 0);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v33);
  if ((v34 & 1) == 0)
  {
LABEL_13:
    v37 = v109;
    v50 = v109;
    v51 = v111;
    v52 = static Calendar.current.getter(v50);
    v41 = v112;
    Date.init()(v52);
    v53 = 1;
    goto LABEL_32;
  }
LABEL_7:
  v35 = &selRef_notifyOnEntry;
  if ((a3 & 1) == 0)
    v35 = &selRef_notifyOnExit;
  v36 = objc_msgSend(v114, *v35);
  v37 = v109;
  v38 = v109;
  v39 = v111;
  v40 = static Calendar.current.getter(v38);
  v41 = v112;
  Date.init()(v40);
  if (!v36)
  {
    v53 = 1;
    v51 = v39;
    goto LABEL_32;
  }
  v42 = objc_msgSend(v38, "displayDate");
  v43 = v113;
  if (!v42)
  {
    if (qword_100837760 != -1)
      swift_once(&qword_100837760, sub_1004E8E78);
    v54 = type metadata accessor for Logger(0);
    v55 = sub_10001AAA8(v54, (uint64_t)qword_10084D5A0);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.default.getter(v56);
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Reminder has no displayDate, firing geofence as active", v58, 2u);
      swift_slowDealloc(v58, -1, -1);
    }

    v53 = 0;
    goto LABEL_20;
  }
  v102 = v42;
  v44 = objc_msgSend(v42, "date");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v44);

  v45 = v19;
  LOBYTE(v44) = Calendar.isDate(_:inSameDayAs:)(v19, v41);
  v46 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
  v47 = v19;
  v48 = v110;
  v46(v16, v47, v110);
  v46(v13, v41, v48);
  if ((v44 & 1) == 0)
  {
    v59 = sub_1002040FC((unint64_t *)&qword_100842190, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v60 = dispatch thunk of static Comparable.< infix(_:_:)(v13, v16, v48, v59);
    v49 = *(void (**)(char *, uint64_t))(v43 + 8);
    v49(v13, v48);
    v49(v16, v48);
    if ((v60 & 1) == 0)
      goto LABEL_26;
    if (qword_100837760 != -1)
      swift_once(&qword_100837760, sub_1004E8E78);
    v61 = type metadata accessor for Logger(0);
    sub_10001AAA8(v61, (uint64_t)qword_10084D5A0);
    v62 = v103;
    v63 = ((uint64_t (*)(char *, char *, uint64_t))v46)(v103, v45, v48);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.default.getter(v64);
    if (os_log_type_enabled(v64, v65))
    {
      v66 = swift_slowAlloc(12, -1);
      v101 = v49;
      v67 = (uint8_t *)v66;
      v104 = (char *)swift_slowAlloc(32, -1);
      v117 = v104;
      *(_DWORD *)v67 = 136315138;
      v68 = sub_1002040FC((unint64_t *)&qword_100846B70, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v69 = dispatch thunk of CustomStringConvertible.description.getter(v110, v68);
      v71 = v70;
      v115 = sub_10001A820(v69, v70, (uint64_t *)&v117);
      v37 = v109;
      v72 = v110;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116);
      v73 = swift_bridgeObjectRelease(v71);
      v74 = v101;
      ((void (*)(char *, uint64_t, __n128))v101)(v62, v72, v73);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "Reminder has displayDate that's in the future, firing geofence as passive instead of active. {displayDate.date: %s}", v67, 0xCu);
      v53 = 1;
      v75 = v104;
      swift_arrayDestroy(v104, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v75, -1, -1);
      swift_slowDealloc(v67, -1, -1);

      v74(v45, v72);
    }
    else
    {

      v49(v62, v48);
      v49(v45, v48);
      v53 = 1;
    }
LABEL_20:
    v51 = v111;
    v41 = v112;
    goto LABEL_32;
  }
  v49 = *(void (**)(char *, uint64_t))(v43 + 8);
  v49(v13, v48);
  v49(v16, v48);
LABEL_26:
  v76 = v104;
  if (qword_100837760 != -1)
    swift_once(&qword_100837760, sub_1004E8E78);
  v77 = type metadata accessor for Logger(0);
  sub_10001AAA8(v77, (uint64_t)qword_10084D5A0);
  v78 = ((uint64_t (*)(char *, char *, uint64_t))v46)(v76, v45, v48);
  v79 = Logger.logObject.getter(v78);
  v80 = v45;
  v81 = static os_log_type_t.default.getter(v79);
  if (os_log_type_enabled(v79, v81))
  {
    v103 = v80;
    v82 = (uint8_t *)swift_slowAlloc(12, -1);
    v83 = swift_slowAlloc(32, -1);
    v117 = (char *)v83;
    *(_DWORD *)v82 = 136315138;
    v101 = v49;
    v84 = sub_1002040FC((unint64_t *)&qword_100846B70, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v85 = dispatch thunk of CustomStringConvertible.description.getter(v48, v84);
    v87 = v86;
    v115 = sub_10001A820(v85, v86, (uint64_t *)&v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116);
    v88 = swift_bridgeObjectRelease(v87);
    v89 = v101;
    ((void (*)(char *, uint64_t, __n128))v101)(v76, v48, v88);
    _os_log_impl((void *)&_mh_execute_header, v79, v81, "Reminder has displayDate that's in the past or same day, firing geofence as active as usual {displayDate.date: %s}", v82, 0xCu);
    swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v83, -1, -1);
    swift_slowDealloc(v82, -1, -1);

    v89(v103, v48);
  }
  else
  {

    v49(v76, v48);
    v49(v80, v48);
  }
  v53 = 0;
  v51 = v111;
  v41 = v112;
  v37 = v109;
LABEL_32:
  v90 = v105;
  v91 = v37;
  v92 = v90;
  v93 = sub_1005BB458(v92);
  v95 = v94;
  v97 = v96;
  v99 = v98;

  (*(void (**)(char *, uint64_t))(v113 + 8))(v41, v110);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v51, v108);

  v100 = v106;
  *v106 = v91;
  v100[1] = v93;
  v100[2] = v95;
  v100[3] = v97;
  *((_BYTE *)v100 + 32) = v99;
  *((_BYTE *)v100 + 33) = v53;
  *((_BYTE *)v100 + 34) = 0;
}

void sub_1004EB864(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  Swift::String v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  Swift::String v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  id v37;
  NSString v38;
  id v39;
  id v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v54 = *(_QWORD *)(v4 - 8);
  v55 = v4;
  __chkstk_darwin(v4);
  v56 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v8 = __chkstk_darwin(v6).n128_u64[0];
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend(v1, "structuredLocation", v8);
  v57 = REMStructuredLocation.clCircularRegion.getter();

  v12 = objc_msgSend(a1, "objectID");
  v13 = objc_msgSend(v12, "uuid");

  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v15 = UUID.uuidString.getter(v14);
  v17 = v16;
  v18 = *(void (**)(char *, uint64_t))(v7 + 8);
  v18(v10, v6);
  v58 = v15;
  v59 = v17;
  swift_bridgeObjectRetain(v17);
  v19._countAndFlagsBits = 47;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  *(_QWORD *)&v20 = swift_bridgeObjectRelease().n128_u64[0];
  v21 = v58;
  v22 = v59;
  v23 = objc_msgSend(v2, "objectID", v20);
  v24 = objc_msgSend(v23, "uuid");

  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v26 = UUID.uuidString.getter(v25);
  v28 = v27;
  v18(v10, v6);
  v58 = v21;
  v59 = v22;
  v29 = (void *)v57;
  swift_bridgeObjectRetain(v22);
  v30._countAndFlagsBits = v26;
  v30._object = v28;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  objc_msgSend(v29, "center", swift_bridgeObjectRelease().n128_f64[0]);
  v32 = v31;
  v34 = v33;
  objc_msgSend(v29, "radius");
  v36 = v35;
  v37 = objc_allocWithZone((Class)CLCircularRegion);
  v38 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v39 = objc_msgSend(v37, "initWithCenter:radius:identifier:", v38, v32, v34, v36);

  objc_msgSend(v39, "setGeoReferenceFrame:", objc_msgSend(v29, "geoReferenceFrame"));
  v40 = objc_msgSend(v2, "proximity");
  if (!v40)
    goto LABEL_12;
  if (v40 == (id)2)
  {
    objc_msgSend(v39, "setNotifyOnEntry:", 0);
    objc_msgSend(v39, "setNotifyOnExit:", 1);
    v41 = 0;
    goto LABEL_11;
  }
  if (v40 == (id)1)
  {
    objc_msgSend(v39, "setNotifyOnEntry:", 1);
    objc_msgSend(v39, "setNotifyOnExit:", 0);
    v42 = objc_msgSend(v2, "structuredLocation");
    v43 = objc_msgSend(v42, "contactLabel");

    if (!v43)
    {
      v44 = objc_msgSend(v2, "structuredLocation");
      v43 = objc_msgSend(v44, "title");

      if (!v43)
        goto LABEL_12;
    }
    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    v47 = v46;

    if ((String.containsNameOfHomeLocation.getter(v45, v47) & 1) != 0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v48 = String.containsNameOfWorkLocation.getter(v45, v47);
      swift_bridgeObjectRelease();
      if ((v48 & 1) == 0)
      {
LABEL_12:

        return;
      }
    }
    v41 = 1;
LABEL_11:
    v49 = v39;
    objc_msgSend(v49, "setConservativeEntry:", v41);

    goto LABEL_12;
  }
  if (qword_100837760 != -1)
    swift_once(&qword_100837760, sub_1004E8E78);
  v50 = v55;
  v51 = sub_10001AAA8(v55, (uint64_t)qword_10084D5A0);
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v56, v51, v50);
  v52 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
  v53 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
  sub_1004A14D8((uint64_t)"unknown proximity", 17, 2uLL, v52, v53);
  __break(1u);
}

void sub_1004EBD10(void *a1)
{
  sub_1004EB864(a1);
}

uint64_t type metadata accessor for RDLocationAlarmProducer()
{
  return objc_opt_self(_TtC7remindd23RDLocationAlarmProducer);
}

uint64_t sub_1004EBD50(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1002040FC(&qword_10084D600, a2, (uint64_t (*)(uint64_t))type metadata accessor for RDLocationAlarmProducer, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1004EBD8C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint8_t *v19;
  void **v20;
  void **v21;
  uint64_t v22;
  void **v23;
  Swift::String v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint8_t *v40;
  void **v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  void **aBlock;
  unint64_t v63;
  uint64_t (*v64)(uint64_t);
  void *v65;
  void *v66;
  _QWORD *v67;

  v58 = a5;
  v59 = a1;
  v55 = a4;
  v60 = a2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v57 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100837760 != -1)
    swift_once(&qword_100837760, sub_1004E8E78);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_10001AAA8(v13, (uint64_t)qword_10084D5A0);
  v15 = swift_bridgeObjectRetain_n(a3, 2);
  v54 = v14;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  v18 = os_log_type_enabled(v16, v17);
  v56 = v12;
  if (v18)
  {
    v53 = v8;
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = (void **)swift_slowAlloc(32, -1);
    v52 = v10;
    v21 = v20;
    aBlock = v20;
    *(_DWORD *)v19 = 136446210;
    swift_bridgeObjectRetain(a3);
    v22 = v60;
    v61 = (_QWORD *)sub_10001A820(v60, (unint64_t)a3, (uint64_t *)&aBlock);
    v8 = v53;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &aBlock);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "os_transaction INIT {name: com.apple.remindd.RDLocationAlarmProducer.%{public}s}", v19, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    v23 = v21;
    v10 = v52;
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v19, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
    v22 = v60;
  }
  aBlock = 0;
  v63 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease(v63);
  aBlock = (void **)0xD00000000000002ALL;
  v63 = 0x8000000100706650;
  v24._countAndFlagsBits = v22;
  v24._object = a3;
  String.append(_:)(v24);
  v25 = v63;
  v26 = String.utf8CString.getter(aBlock, v63);
  swift_bridgeObjectRelease(v25);
  v27 = os_transaction_create(v26 + 32);
  swift_release(v26);
  if (v27)
  {
    v28 = (_QWORD *)swift_allocObject(&unk_1007F7BC8, 56, 7);
    v29 = v58;
    v28[2] = v55;
    v28[3] = v29;
    v28[4] = v22;
    v28[5] = a3;
    v28[6] = v27;
    v66 = sub_1004EC7F8;
    v67 = v28;
    aBlock = _NSConcreteStackBlock;
    v63 = 1107296256;
    v64 = sub_1000094C8;
    v65 = &unk_1007F7BE0;
    v30 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain(a3);
    swift_retain(v29);
    v31 = swift_unknownObjectRetain(v27);
    v32 = v56;
    static DispatchQoS.unspecified.getter(v31);
    v61 = _swiftEmptyArrayStorage;
    v33 = sub_1002040FC((unint64_t *)&qword_10083A210, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v34 = sub_10001A630((uint64_t *)&unk_100838000);
    v35 = sub_1000D316C();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v61, v34, v35, v6, v33);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v32, v8, v30);
    _Block_release(v30);
    swift_unknownObjectRelease(v27);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v8, v6);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v32, v9);
  }
  else
  {
    v36 = swift_bridgeObjectRetain_n(a3, 2);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v52 = v10;
      v39 = swift_slowAlloc(12, -1);
      v53 = v8;
      v40 = (uint8_t *)v39;
      v41 = (void **)swift_slowAlloc(32, -1);
      aBlock = v41;
      *(_DWORD *)v40 = 136446210;
      swift_bridgeObjectRetain(a3);
      v61 = (_QWORD *)sub_10001A820(v60, (unint64_t)a3, (uint64_t *)&aBlock);
      v10 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &aBlock);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "RDLocationAlarmProducer: Couldn't create os_transaction_t for %{public}s", v40, 0xCu);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      v8 = v53;
      swift_slowDealloc(v40, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    v42 = v55;
    v43 = v56;
    v44 = swift_allocObject(&unk_1007F7B78, 32, 7);
    v45 = v58;
    *(_QWORD *)(v44 + 16) = v42;
    *(_QWORD *)(v44 + 24) = v45;
    v66 = sub_1000098EC;
    v67 = (_QWORD *)v44;
    aBlock = _NSConcreteStackBlock;
    v63 = 1107296256;
    v64 = sub_1000094C8;
    v65 = &unk_1007F7B90;
    v46 = _Block_copy(&aBlock);
    v47 = swift_retain(v45);
    static DispatchQoS.unspecified.getter(v47);
    v61 = _swiftEmptyArrayStorage;
    v48 = sub_1002040FC((unint64_t *)&qword_10083A210, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v49 = sub_10001A630((uint64_t *)&unk_100838000);
    v50 = sub_1000D316C();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v61, v49, v50, v6, v48);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v43, v8, v46);
    _Block_release(v46);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v8, v6);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v43, v9);
  }
  return swift_release(v67);
}

_QWORD *sub_1004EC3F0(uint64_t a1, void *a2, char a3)
{
  int64_t v3;
  _QWORD *v4;
  void **v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  char v23;
  __int128 v24;
  char v25;
  uint64_t v27;
  id v28[3];
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  _QWORD *v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    v35 = _swiftEmptyArrayStorage;
    sub_1001C2124(0, v3, 0);
    v4 = _swiftEmptyArrayStorage;
    v7 = (void **)(a1 + 48);
    v25 = a3 & 1;
    while (1)
    {
      v8 = *(v7 - 1);
      v9 = *v7;
      v28[0] = *(v7 - 2);
      v28[1] = v8;
      v28[2] = v9;
      v10 = v28[0];
      v11 = v8;
      v12 = v9;
      sub_1004EAFC0((uint64_t)v28, a2, v25, &v29);
      if (v27)
        break;
      v27 = 0;

      v13 = v29;
      v14 = v30;
      v15 = v31;
      v16 = v32;
      v17 = v33;
      v18 = v34;
      v35 = v4;
      v20 = v4[2];
      v19 = v4[3];
      if (v20 >= v19 >> 1)
      {
        v24 = v30;
        v23 = v34;
        sub_1001C2124(v19 > 1, v20 + 1, 1);
        v18 = v23;
        v14 = v24;
        v4 = v35;
      }
      v4[2] = v20 + 1;
      v21 = &v4[5 * v20];
      v21[4] = v13;
      *(_OWORD *)(v21 + 5) = v14;
      v21[7] = v15;
      *((_BYTE *)v21 + 64) = v16;
      *((_BYTE *)v21 + 65) = v17;
      *((_BYTE *)v21 + 66) = v18;
      v7 += 3;
      if (!--v3)
        return v4;
    }
    swift_release(v4);

  }
  return v4;
}

uint64_t sub_1004EC57C(void *a1)
{
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  Swift::String v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v25;
  unint64_t v26;

  v2 = objc_msgSend(a1, "identifier");
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  v6 = objc_opt_self(CLCircularRegion);
  v7 = swift_dynamicCastObjCClass(a1, v6);
  if (v7)
  {
    v8 = (void *)v7;
    v25 = 0;
    v26 = 0xE000000000000000;
    v9 = a1;
    objc_msgSend(v8, "center");
    Double.write<A>(to:)(&v25, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v10._countAndFlagsBits = 44;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    objc_msgSend(v8, "center");
    Double.write<A>(to:)(&v25, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v12 = v25;
    v11 = (void *)v26;
    v25 = 0;
    v26 = 0xE000000000000000;
    objc_msgSend(v8, "radius");
    Double.write<A>(to:)(&v25, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v13 = v25;
    v14 = (void *)v26;
    LODWORD(v25) = objc_msgSend(v8, "geoReferenceFrame");
    v15 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
    v17 = v16;
    v25 = v3;
    v26 = v5;
    v18._countAndFlagsBits = 95;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    v19._countAndFlagsBits = v12;
    v19._object = v11;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(v11);
    v20._countAndFlagsBits = 95;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    v21._countAndFlagsBits = v13;
    v21._object = v14;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(v14);
    v22._countAndFlagsBits = 95;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    v23._countAndFlagsBits = v15;
    v23._object = v17;
    String.append(_:)(v23);

    swift_bridgeObjectRelease(v17);
    return v25;
  }
  return v3;
}

unint64_t sub_1004EC764()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100846C20;
  if (!qword_100846C20)
  {
    v1 = objc_opt_self(CLRegion);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100846C20);
  }
  return result;
}

uint64_t sub_1004EC7A0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004EC7C4()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_unknownObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

void sub_1004EC7F8()
{
  uint64_t v0;

  sub_1004EA550(*(void (**)(void))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

void sub_1004EC808(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_1004EAFC0(a1, *(void **)(v2 + 16), *(_BYTE *)(v2 + 24), a2);
}

void sub_1004EC828(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1004EC808(a1, a2);
}

void sub_1004EC844(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  char v23;
  __n128 v24;
  char *v25;
  uint64_t v26;
  __n128 v27;
  char *v28;
  _QWORD v29[2];
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t, __n128);
  uint64_t (*v32)(char *);
  uint64_t v33;
  char *v34;

  v4 = v3;
  v32 = a1;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v34 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v10);
  v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 + 16);
  v29[0] = a3;
  v29[1] = a2;
  if (v13)
  {
    v14 = a2 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v15 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16);
    v30 = *(_QWORD *)(v8 + 72);
    v31 = v15;
    v16 = swift_bridgeObjectRetain(a2);
    v17 = v8;
    while (1)
    {
      v33 = v13;
      v31(v12, v14, v7, v16);
      v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v17 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v18)(v12, 0, 1, v7);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v12, 1, v7) == 1)
        break;
      v19 = v17;
      v20 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
      v21 = v4;
      v22 = v34;
      v20(v34, v12, v7);
      v23 = v32(v22);
      v4 = v21;
      if (v21)
      {
        (*(void (**)(char *, uint64_t))(v19 + 8))(v34, v7);
        swift_bridgeObjectRelease();
        return;
      }
      if ((v23 & 1) != 0)
      {
        v27 = swift_bridgeObjectRelease();
        v28 = (char *)v29[0];
        ((void (*)(_QWORD, char *, uint64_t, __n128))v20)(v29[0], v34, v7, v27);
        v25 = v28;
        v26 = 0;
        goto LABEL_11;
      }
      v17 = v19;
      (*(void (**)(char *, uint64_t))(v19 + 8))(v34, v7);
      v14 += v30;
      v13 = v33 - 1;
      if (v33 == 1)
        goto LABEL_9;
    }
  }
  else
  {
    v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v8 + 56);
    v16 = swift_bridgeObjectRetain(a2);
LABEL_9:
    v18(v12, 1, 1, v7, v16);
  }
  v24 = swift_bridgeObjectRelease();
  v25 = (char *)v29[0];
  v26 = 1;
LABEL_11:
  v18(v25, v26, 1, v7, v24);
}

void sub_1004ECA78(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 v16;
  int64_t v17;
  unint64_t v18;
  unint64_t i;
  unint64_t v21;
  int64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t (*v32)(char *);
  uint64_t v33;

  v32 = a1;
  v29 = a3;
  v5 = type metadata accessor for RDPermanentlyHiddenReminder(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630((uint64_t *)&unk_100843FD0);
  __chkstk_darwin(v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a2 + 56);
  v30 = a2 + 56;
  v13 = 1 << *(_BYTE *)(a2 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v31 = (unint64_t)(v13 + 63) >> 6;
  v33 = a2;
  v16 = swift_bridgeObjectRetain(a2);
  v17 = 0;
  if (!v15)
    goto LABEL_5;
LABEL_4:
  v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (i = v18 | (v17 << 6); ; i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    sub_10011FECC(*(_QWORD *)(v33 + 48) + *(_QWORD *)(v6 + 72) * i, (uint64_t)v11);
    v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v23(v11, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
    {
      swift_release(v33);
      v25 = v29;
      goto LABEL_31;
    }
    sub_10011FF10((uint64_t)v11, (uint64_t)v8);
    v24 = v32(v8);
    if (v3)
    {
      sub_10011FF54((uint64_t)v8);
      swift_release(v33);
      return;
    }
    if ((v24 & 1) != 0)
    {
      swift_release(v33);
      v26 = v29;
      sub_10011FF10((uint64_t)v8, v29);
      v27 = v26;
      v28 = 0;
LABEL_32:
      v23((char *)v27, v28, 1, v5);
      return;
    }
    sub_10011FF54((uint64_t)v8);
    if (v15)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v17++, 1))
      break;
    if (v17 >= v31)
      goto LABEL_30;
    v21 = *(_QWORD *)(v30 + 8 * v17);
    if (!v21)
    {
      v22 = v17 + 1;
      if (v17 + 1 >= v31)
        goto LABEL_30;
      v21 = *(_QWORD *)(v30 + 8 * v22);
      if (v21)
        goto LABEL_16;
      v22 = v17 + 2;
      if (v17 + 2 >= v31)
        goto LABEL_30;
      v21 = *(_QWORD *)(v30 + 8 * v22);
      if (v21)
        goto LABEL_16;
      v22 = v17 + 3;
      if (v17 + 3 >= v31)
        goto LABEL_30;
      v21 = *(_QWORD *)(v30 + 8 * v22);
      if (v21)
      {
LABEL_16:
        v17 = v22;
        goto LABEL_17;
      }
      v22 = v17 + 4;
      if (v17 + 4 < v31)
      {
        v21 = *(_QWORD *)(v30 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v17 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_34;
            if (v17 >= v31)
              goto LABEL_30;
            v21 = *(_QWORD *)(v30 + 8 * v17);
            ++v22;
            if (v21)
              goto LABEL_17;
          }
        }
        goto LABEL_16;
      }
LABEL_30:
      v25 = v29;
      v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
      ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v23)(v11, 1, 1, v5, v16);
      swift_release(v33);
LABEL_31:
      v27 = v25;
      v28 = 1;
      goto LABEL_32;
    }
LABEL_17:
    v15 = (v21 - 1) & v21;
  }
  __break(1u);
LABEL_34:
  __break(1u);
}

void sub_1004ECD80(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t);
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(uint64_t, uint64_t, uint64_t);
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  char *v85;
  char v86;
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  void *v105;

  v2 = v1;
  v91 = *v1;
  v4 = type metadata accessor for RDPermanentlyHiddenReminder(0);
  v5 = *(_QWORD *)(v4 - 8);
  v100 = v4;
  v101 = v5;
  __chkstk_darwin(v4);
  v99 = (uint64_t)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v98 = (uint64_t)&v89 - v8;
  __chkstk_darwin(v9);
  v11 = (char *)&v89 - v10;
  __chkstk_darwin(v12);
  v97 = (uint64_t)&v89 - v13;
  v14 = sub_10001A630((uint64_t *)&unk_100843FD0);
  __chkstk_darwin(v14);
  v93 = (uint64_t)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v96 = (uint64_t)&v89 - v17;
  __chkstk_darwin(v18);
  v102 = (uint64_t)&v89 - v19;
  v20 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v89 = (char *)&v89 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v94 = (char *)&v89 - v24;
  v25 = sub_10001A630((uint64_t *)&unk_10084C100);
  __chkstk_darwin(v25);
  v27 = (char *)&v89 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v28);
  v90 = (char *)&v89 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v32 = (char *)&v89 - v31;
  __chkstk_darwin(v33);
  v103 = (char *)&v89 - v34;
  __chkstk_darwin(v35);
  v95 = (uint64_t)&v89 - v36;
  __chkstk_darwin(v37);
  v92 = (char *)&v89 - v38;
  v39 = a1;
  v40 = a1 + OBJC_IVAR____TtC7remindd21RDRecentlyDeletedInfo_lastPermanentlyHiddenRemindersCleanupDate;
  v41 = (uint64_t)&v27[*(int *)(v25 + 48)];
  sub_1000CDA2C((uint64_t)v2 + OBJC_IVAR____TtC7remindd21RDRecentlyDeletedInfo_lastPermanentlyHiddenRemindersCleanupDate, (uint64_t)v27);
  sub_1000CDA2C(v40, v41);
  v42 = v21;
  v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  LODWORD(v40) = v43(v41, 1, v20);
  v44 = v43((uint64_t)v27, 1, v20);
  if ((_DWORD)v40 == 1)
  {
    if (v44 == 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56))(v92, 1, 1, v20);
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if (v44 != 1)
  {
    v46 = v95;
    sub_1000CDA74((uint64_t)v27, v95);
    v47 = (uint64_t)v103;
    sub_1000CDA74(v41, (uint64_t)v103);
    sub_1000CDA2C(v46, (uint64_t)v32);
    if (v43((uint64_t)v32, 1, v20) == 1)
    {
      v48 = v46;
    }
    else
    {
      v49 = v42;
      v50 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
      v51 = v94;
      v50(v94, v32, v20);
      v32 = v90;
      sub_1000CDA2C(v47, (uint64_t)v90);
      if (v43((uint64_t)v32, 1, v20) != 1)
      {
        v85 = v89;
        v50(v89, v32, v20);
        v86 = static Date.> infix(_:_:)(v51, v85);
        v87 = *(void (**)(char *, uint64_t))(v49 + 8);
        v87(v85, v20);
        sub_10000882C(v95, (uint64_t *)&unk_1008380D0);
        if ((v86 & 1) != 0)
        {
          sub_10000882C((uint64_t)v103, (uint64_t *)&unk_1008380D0);
          v88 = (uint64_t)v92;
          v50(v92, v51, v20);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v49 + 56))(v88, 0, 1, v20);
          goto LABEL_14;
        }
        v87(v51, v20);
        v27 = v103;
        goto LABEL_12;
      }
      (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v20);
      v48 = v95;
    }
    sub_10000882C(v48, (uint64_t *)&unk_1008380D0);
    v27 = v103;
    sub_10000882C((uint64_t)v32, (uint64_t *)&unk_1008380D0);
LABEL_12:
    v45 = (uint64_t)v27;
    goto LABEL_13;
  }
  v45 = v41;
LABEL_13:
  sub_1000CDA74(v45, (uint64_t)v92);
LABEL_14:
  v52 = *(_QWORD *)(v39 + 16);
  v104 = v52;
  v105 = &_swiftEmptySetSingleton;
  v53 = v2[2];
  v54 = *(_QWORD *)(v53 + 56);
  v94 = (char *)(v53 + 56);
  v55 = 1 << *(_BYTE *)(v53 + 32);
  v56 = -1;
  if (v55 < 64)
    v56 = ~(-1 << v55);
  v57 = v56 & v54;
  v95 = (unint64_t)(v55 + 63) >> 6;
  swift_bridgeObjectRetain(v52);
  v103 = (char *)v53;
  v58 = swift_bridgeObjectRetain(v53);
  v59 = 0;
  v60 = v100;
  while (1)
  {
    v64 = v102;
    if (v57)
    {
      v65 = __clz(__rbit64(v57));
      v57 &= v57 - 1;
      v66 = v65 | (v59 << 6);
      goto LABEL_33;
    }
    if (__OFADD__(v59++, 1))
    {
      __break(1u);
      goto LABEL_48;
    }
    if (v59 >= v95)
      goto LABEL_42;
    v68 = *(_QWORD *)&v94[8 * v59];
    if (!v68)
      break;
LABEL_32:
    v57 = (v68 - 1) & v68;
    v66 = __clz(__rbit64(v68)) + (v59 << 6);
LABEL_33:
    v70 = v101;
    sub_10011FECC(*((_QWORD *)v103 + 6) + *(_QWORD *)(v101 + 72) * v66, v102);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v70 + 56))(v64, 0, 1, v60);
    v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48);
    if (v71(v64, 1, v60) == 1)
      goto LABEL_43;
    v72 = v11;
    v73 = v64;
    v74 = v97;
    v75 = sub_10011FF10(v73, v97);
    __chkstk_darwin(v75);
    *(&v89 - 2) = (char *)v74;
    swift_bridgeObjectRetain(v52);
    v76 = v96;
    sub_1004ECA78((uint64_t (*)(char *))sub_1001CE528, v52, v96);
    v77 = swift_bridgeObjectRelease();
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t, __n128))v71)(v76, 1, v60, v77) == 1)
    {
      sub_10000882C(v76, (uint64_t *)&unk_100843FD0);
LABEL_18:
      v61 = v99;
      sub_10011FECC(v74, v99);
      v62 = v98;
      sub_1002DD10C(v98, v61);
      v63 = v62;
      v11 = v72;
      goto LABEL_19;
    }
    sub_10011FF10(v76, (uint64_t)v11);
    if ((static Date.> infix(_:_:)(&v11[*(int *)(v60 + 20)], v74 + *(int *)(v60 + 20)) & 1) == 0)
    {
      sub_10011FF54((uint64_t)v11);
      goto LABEL_18;
    }
    v78 = v99;
    sub_10011FECC((uint64_t)v11, v99);
    v79 = v98;
    sub_1002DD10C(v98, v78);
    v80 = v79;
    v11 = v72;
    sub_10011FF54(v80);
    v81 = v93;
    sub_10059C440((uint64_t)v11, v93);
    sub_10000882C(v81, (uint64_t *)&unk_100843FD0);
    v63 = (uint64_t)v11;
LABEL_19:
    sub_10011FF54(v63);
    sub_10011FF54(v74);
  }
  v69 = v59 + 1;
  if (v59 + 1 >= v95)
    goto LABEL_42;
  v68 = *(_QWORD *)&v94[8 * v69];
  if (v68)
    goto LABEL_31;
  v69 = v59 + 2;
  if (v59 + 2 >= v95)
    goto LABEL_42;
  v68 = *(_QWORD *)&v94[8 * v69];
  if (v68)
    goto LABEL_31;
  v69 = v59 + 3;
  if (v59 + 3 >= v95)
  {
LABEL_42:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v101 + 56))(v102, 1, 1, v100, v58);
LABEL_43:
    swift_release(v103);
    v82 = v91;
    sub_1002B7008(v104);
    v83 = v105;
    v84 = swift_allocObject(v82, *(unsigned int *)(v82 + 48), *(unsigned __int16 *)(v82 + 52));
    *(_QWORD *)(v84 + 16) = v83;
    sub_1000CDA74((uint64_t)v92, v84 + OBJC_IVAR____TtC7remindd21RDRecentlyDeletedInfo_lastPermanentlyHiddenRemindersCleanupDate);
    return;
  }
  v68 = *(_QWORD *)&v94[8 * v69];
  if (v68)
  {
LABEL_31:
    v59 = v69;
    goto LABEL_32;
  }
  while (1)
  {
    v59 = v69 + 1;
    if (__OFADD__(v69, 1))
      break;
    if (v59 >= v95)
      goto LABEL_42;
    v68 = *(_QWORD *)&v94[8 * v59];
    ++v69;
    if (v68)
      goto LABEL_32;
  }
LABEL_48:
  __break(1u);
}

uint64_t sub_1004ED588()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_10000882C(v0 + OBJC_IVAR____TtC7remindd21RDRecentlyDeletedInfo_lastPermanentlyHiddenRemindersCleanupDate, (uint64_t *)&unk_1008380D0);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1004ED5C8()
{
  return type metadata accessor for RDRecentlyDeletedInfo(0);
}

uint64_t type metadata accessor for RDRecentlyDeletedInfo(uint64_t a1)
{
  uint64_t result;

  result = qword_10084D630;
  if (!qword_10084D630)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDRecentlyDeletedInfo);
  return result;
}

void sub_1004ED60C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_1000D7B50(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

uint64_t sub_1004ED688(uint64_t *a1, uint64_t *a2)
{
  return sub_1004ED694(*a1, *a2);
}

uint64_t sub_1004ED694(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t *v20;
  char v21;
  unint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A630((uint64_t *)&unk_10084C100);
  __chkstk_darwin(v11);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004F5D30(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  if ((v14 & 1) != 0)
  {
    v15 = a1 + OBJC_IVAR____TtC7remindd21RDRecentlyDeletedInfo_lastPermanentlyHiddenRemindersCleanupDate;
    v16 = a2 + OBJC_IVAR____TtC7remindd21RDRecentlyDeletedInfo_lastPermanentlyHiddenRemindersCleanupDate;
    v17 = (uint64_t)&v13[*(int *)(v11 + 48)];
    sub_1000CDA2C(v15, (uint64_t)v13);
    sub_1000CDA2C(v16, v17);
    v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v18((uint64_t)v13, 1, v4) == 1)
    {
      v19 = v18(v17, 1, v4);
      if (v19 == 1)
        v20 = (uint64_t *)&unk_1008380D0;
      else
        v20 = (uint64_t *)&unk_10084C100;
      if (v19 == 1)
        v21 = -1;
      else
        v21 = 0;
    }
    else
    {
      sub_1000CDA2C((uint64_t)v13, (uint64_t)v10);
      if (v18(v17, 1, v4) == 1)
      {
        v21 = 0;
        v20 = (uint64_t *)&unk_10084C100;
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v17, v4);
        v22 = sub_10023F5B0();
        v21 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v7, v4, v22);
        v23 = *(void (**)(char *, uint64_t))(v5 + 8);
        v23(v7, v4);
        v20 = (uint64_t *)&unk_1008380D0;
        v23(v10, v4);
      }
    }
    sub_10000882C((uint64_t)v13, v20);
  }
  else
  {
    v21 = 0;
  }
  return v21 & 1;
}

uint64_t static ICCloudContext.base64EncodedHMACString(from:usingSalt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return String.base64EncodedHMACString(using:)(a3, a4, a1, a2);
}

void sub_1004ED97C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1004ED994(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_1007F7C70);
}

void sub_1004ED988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1004ED994(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_1007F7C48);
}

void sub_1004ED994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  void *v10;
  uint64_t v11;
  _QWORD v12[5];
  uint64_t v13;

  if (a3)
  {
    v12[4] = a3;
    v13 = a4;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    v12[2] = sub_100135698;
    v12[3] = a7;
    v10 = _Block_copy(v12);
    v11 = v13;
    swift_retain();
    swift_release(v11);
  }
  else
  {
    v10 = 0;
  }
  objc_msgSend(v7, "updateCloudContextStateWithSyncOption:syncReason:withCompletionHandler:", a1, a2, v10);
  _Block_release(v10);
}

uint64_t sub_1004EDA60()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 32, 7);
}

void sub_1004EDADC(uint64_t a1)
{
  sub_1004EDB70(a1, -4, &qword_100872200);
}

void sub_1004EDB08(uint64_t a1)
{
  sub_1004EDB70(a1, -2, &qword_100872208);
}

void sub_1004EDB34(uint64_t a1)
{
  sub_1004EDB70(a1, -3, &qword_100872210);
}

void sub_1004EDB60(uint64_t a1)
{
  sub_1004EDB70(a1, -5, &qword_100872218);
}

void sub_1004EDB70(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSString v8;
  id v9;

  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("com.apple.remindd.RDAccountPropertiesErrorDomain"));
  v6 = v5;
  v7 = objc_allocWithZone((Class)NSError);
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "initWithDomain:code:userInfo:", v8, a2, 0, swift_bridgeObjectRelease(v6).n128_f64[0]);

  *a3 = v9;
}

char *sub_1004EDC24(void *a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  char *v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  id v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  char *v36;
  uint64_t *v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  _QWORD *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  objc_class *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  id v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  uint64_t v67;
  uint64_t inited;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  __n128 v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v99;
  id v100;
  id v101;
  uint64_t v102;
  char *v103;
  void *v104;
  id v105;
  uint64_t v106;
  _QWORD *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  objc_class *ObjectType;
  char *v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  char v122[24];
  uint64_t v123;
  char v124;
  id v125;
  objc_super v126;

  v9 = v8;
  v119 = a3;
  v105 = a2;
  v104 = a1;
  ObjectType = (objc_class *)swift_getObjectType();
  v111 = sub_10001A630((uint64_t *)&unk_100838070);
  v109 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v108 = (char *)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = (_QWORD *)type metadata accessor for NSNotificationCenter.Publisher(0);
  v106 = *(v107 - 1);
  __chkstk_darwin(v107);
  v103 = (char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A630((uint64_t *)&unk_10083A960);
  v112 = *(_QWORD *)(v17 - 8);
  v113 = v17;
  __chkstk_darwin(v17);
  v110 = (char *)&v92 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A630((uint64_t *)&unk_100838080);
  v115 = *(_QWORD *)(v19 - 8);
  v116 = v19;
  __chkstk_darwin(v19);
  v114 = (char *)&v92 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A630(&qword_10083A970);
  __chkstk_darwin(v21);
  v118 = (char *)&v92 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_10001A630(&qword_10084D828);
  v96 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v95 = (char *)&v92 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for UUID(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = (char *)&v92 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = &v9[OBJC_IVAR___RDAccountPersonIDSaltObserver_propertyName];
  *(_QWORD *)v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("personIDSalt_v1"));
  *((_QWORD *)v28 + 1) = v29;
  v30 = v119;
  v31 = v9;
  UUID.init()(v31);
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(&v31[OBJC_IVAR___RDAccountPersonIDSaltObserver_uuid], v27, v24);
  v32 = type metadata accessor for RDAccountPersonIDSaltObserver.AccountInfo();
  v33 = swift_allocObject(v32, 32, 7);
  v34 = v104;
  v35 = v105;
  *(_QWORD *)(v33 + 16) = v104;
  *(_QWORD *)(v33 + 24) = v35;
  *(_QWORD *)&v31[OBJC_IVAR___RDAccountPersonIDSaltObserver_account] = v33;
  v36 = &v31[OBJC_IVAR___RDAccountPersonIDSaltObserver_successHandler];
  v101 = a5;
  *(_QWORD *)v36 = a5;
  *((_QWORD *)v36 + 1) = a6;
  v37 = (uint64_t *)&v31[OBJC_IVAR___RDAccountPersonIDSaltObserver_errorHandler];
  v102 = a7;
  *v37 = a7;
  v37[1] = a8;
  *(_QWORD *)&v31[OBJC_IVAR___RDAccountPersonIDSaltObserver_callbackQueue] = a4;
  v100 = v34;
  v120 = a6;
  swift_retain();
  v121 = a8;
  swift_retain();
  v38 = a4;
  if (v30)
  {
    v39 = v30;
    v40 = NSData.startIndex.getter();
    if (v40 != NSData.endIndex.getter())
    {
      v42 = 0;
      v41 = (uint64_t)v30;
      goto LABEL_7;
    }

    v41 = 1;
  }
  else
  {
    v41 = 0;
  }
  v42 = 1;
LABEL_7:
  v123 = v41;
  v124 = v42;
  v105 = (id)v41;
  LODWORD(v104) = v42;
  v43 = sub_10001A630(&qword_10084D830);
  swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
  sub_1004EF1AC((id)v41, v42);
  *(_QWORD *)&v31[OBJC_IVAR___RDAccountPersonIDSaltObserver_currentValueSubject] = CurrentValueSubject.init(_:)(&v123);
  *(_QWORD *)&v31[OBJC_IVAR___RDAccountPersonIDSaltObserver_cancellables] = _swiftEmptyArrayStorage;

  v126.receiver = v31;
  v126.super_class = ObjectType;
  v44 = (char *)objc_msgSendSuper2(&v126, "init");
  v123 = *(_QWORD *)&v44[OBJC_IVAR___RDAccountPersonIDSaltObserver_currentValueSubject];
  v125 = v38;
  v99 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v98 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 56);
  v45 = (uint64_t)v118;
  v98(v118, 1, 1, v99);
  v46 = sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v93 = v46;
  v47 = sub_1000A5F84(&qword_10084D838, &qword_10084D830, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v48 = sub_1000A5E70();
  v94 = v48;
  v49 = v44;
  swift_retain();
  v50 = v95;
  Publisher.receive<A>(on:options:)(&v125, v45, v43, v46, v47, v48);
  sub_10000882C(v45, &qword_10083A970);
  swift_release(v123);
  v51 = (_QWORD *)swift_allocObject(&unk_1007F7D98, 64, 7);
  v52 = v101;
  v51[2] = v38;
  v51[3] = v52;
  v53 = v121;
  v54 = v102;
  v51[4] = v120;
  v51[5] = v54;
  v55 = ObjectType;
  v51[6] = v53;
  v51[7] = v55;
  v56 = sub_1000A5F84(&qword_10084D840, &qword_10084D828, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain();
  swift_retain();
  v101 = v38;
  v57 = v97;
  v58 = Publisher<>.sink(receiveValue:)(sub_1004EF1EC, v51, v97, v56);
  swift_release(v51);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v50, v57);
  v59 = &v49[OBJC_IVAR___RDAccountPersonIDSaltObserver_cancellables];
  swift_beginAccess(&v49[OBJC_IVAR___RDAccountPersonIDSaltObserver_cancellables], &v123, 33, 0);
  v60 = sub_10001A630((uint64_t *)&unk_1008380C0);
  ObjectType = (objc_class *)v60;
  v102 = sub_1000A5F84((unint64_t *)&unk_10083A9F0, (uint64_t *)&unk_1008380C0, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v59, v60, v102);
  swift_endAccess(&v123);
  swift_release(v58);
  v61 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v62 = v103;
  NSNotificationCenter.publisher(for:object:)(CFSTR("RDStoreControllerDidDisableAccountsNotification"), 0);

  v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("RDStoreControllerDidDisableAccountsNotificationAccountStoragesKey"));
  v65 = sub_100398054(v63, v64, (void *)0xD00000000000001DLL, 0x80000001006BFF60, 0);
  v66 = swift_bridgeObjectRelease();
  (*(void (**)(char *, _QWORD *, __n128))(v106 + 8))(v62, v107, v66);
  v67 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v67, v122);
  *(_OWORD *)(inited + 16) = xmmword_1006A7330;
  v69 = v100;
  *(_QWORD *)(inited + 32) = v100;
  v123 = inited;
  specialized Array._endMutation()(inited);
  v70 = v123;
  v107 = v69;
  sub_10011F104(v70);
  v72 = v71;
  swift_bridgeObjectRelease();
  v123 = v65;
  v73 = swift_allocObject(&unk_1007F7DC0, 24, 7);
  *(_QWORD *)(v73 + 16) = v72;
  swift_bridgeObjectRetain(v72);
  v74 = sub_10001A630((uint64_t *)&unk_10084D080);
  v75 = sub_10001A630((uint64_t *)&unk_100838090);
  v76 = sub_1000A5F84(&qword_100847B20, (uint64_t *)&unk_10084D080, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v77 = v108;
  Publisher.map<A>(_:)(sub_1004EF280, v73, v74, v75, v76);
  swift_release(v73);
  v78 = sub_1000A5F84((unint64_t *)&unk_1008380A0, (uint64_t *)&unk_100838070, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v79 = v110;
  v80 = v111;
  Publisher.filter(_:)(sub_1000F27FC, 0, v111, v78);
  (*(void (**)(char *, uint64_t))(v109 + 8))(v77, v80);
  swift_release(v65);
  v81 = swift_bridgeObjectRelease();
  v82 = v101;
  v123 = (uint64_t)v101;
  v83 = (uint64_t)v118;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v98)(v118, 1, 1, v99, v81);
  v84 = sub_1000A5F84(&qword_10083EEE0, (uint64_t *)&unk_10083A960, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v85 = v113;
  v86 = v114;
  Publisher.receive<A>(on:options:)(&v123, v83, v113, v93, v84, v94);
  sub_10000882C(v83, &qword_10083A970);
  (*(void (**)(char *, uint64_t))(v112 + 8))(v79, v85);
  v87 = swift_allocObject(&unk_1007F7DE8, 24, 7);
  swift_unknownObjectWeakInit(v87 + 16, v49);
  v88 = sub_1000A5F84((unint64_t *)&unk_10083AA00, (uint64_t *)&unk_100838080, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v89 = v116;
  v90 = Publisher<>.sink(receiveValue:)(sub_1004EF2AC, v87, v116, v88);
  swift_release(v87);
  (*(void (**)(char *, uint64_t))(v115 + 8))(v86, v89);
  swift_beginAccess(v59, &v123, 33, 0);
  AnyCancellable.store<A>(in:)(v59, ObjectType, v102);
  swift_endAccess(&v123);

  swift_release(v120);
  swift_release(v121);
  sub_1004EF2B4(v105, (char)v104);
  swift_release(v90);

  return v49;
}

void sub_1004EE60C(uint64_t a1, void *a2, void (*a3)(void *))
{
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  char v12;
  id v13;
  uint64_t v14;

  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (uint64_t *)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)a1;
  v12 = *(_BYTE *)(a1 + 8);
  *v10 = a2;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6, v8);
  v13 = a2;
  LOBYTE(a2) = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((a2 & 1) == 0)
  {
    __break(1u);
    JUMPOUT(0x1004EE794);
  }
  if ((v12 & 1) != 0)
    __asm { BR              X10 }
  a3(v11);
  sub_1004EF2B4(v11, 0);
}

uint64_t sub_1004EE804(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _BYTE v9[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v2, v3);
  if (result)
  {
    v5 = (void *)result;
    v6 = *(_QWORD *)(result + OBJC_IVAR___RDAccountPersonIDSaltObserver_currentValueSubject);
    swift_retain(v6);

    v7 = 3;
    v8 = 1;
    CurrentValueSubject.send(_:)(&v7);
    return swift_release(v6);
  }
  return result;
}

void sub_1004EE9E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (uint64_t *)((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v2 + OBJC_IVAR___RDAccountPersonIDSaltObserver_callbackQueue);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4, v6);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    return;
  }
  sub_1000E6B28(a1, (uint64_t)&v18);
  if (!v20)
  {
    sub_10000882C((uint64_t)&v18, (uint64_t *)&unk_10083D5B0);
    goto LABEL_7;
  }
  v11 = sub_1000151B0(0, (unint64_t *)&qword_100847BE0, NSData_ptr);
  if ((swift_dynamicCast(&v17, &v18, (char *)&type metadata for Any + 8, v11, 6) & 1) == 0)
  {
LABEL_7:
    v18 = 2;
    v19 = 1;
    CurrentValueSubject.send(_:)(&v18);
    return;
  }
  v12 = v17;
  v13 = NSData.startIndex.getter();
  v14 = NSData.endIndex.getter();

  if (v13 == v14)
  {
    v18 = 1;
    v19 = 1;
    CurrentValueSubject.send(_:)(&v18);

  }
  else
  {
    v18 = (uint64_t)v12;
    v19 = 0;
    v15 = v12;
    CurrentValueSubject.send(_:)(&v18);

  }
}

uint64_t sub_1004EEC70()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  void *object;
  Swift::String v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;

  _StringGuts.grow(_:)(52);
  v1._object = (void *)0x8000000100706930;
  v1._countAndFlagsBits = 0xD000000000000024;
  String.append(_:)(v1);
  v2._countAndFlagsBits = UUID.uuidString.getter();
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 0x746E756F63636120;
  v4._object = (void *)0xEB000000003A4449;
  String.append(_:)(v4);
  v5 = objc_msgSend(*(id *)(v0 + OBJC_IVAR___RDAccountPersonIDSaltObserver_account), "objectID");
  v6 = objc_msgSend(v5, "description");
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);

  swift_bridgeObjectRelease(v9);
  v11._countAndFlagsBits = 62;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return 0;
}

id sub_1004EED9C()
{
  void *v0;
  objc_class *ObjectType;
  objc_super v3;
  char v4;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v4 = 1;
  CurrentValueSubject.send(completion:)(&v4);
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_1004EEF2C()
{
  return type metadata accessor for RDAccountPersonIDSaltObserver(0);
}

uint64_t type metadata accessor for RDAccountPersonIDSaltObserver(uint64_t a1)
{
  uint64_t result;

  result = qword_10084D768;
  if (!qword_10084D768)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDAccountPersonIDSaltObserver);
  return result;
}

uint64_t sub_1004EEF9C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\b";
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = (char *)&value witness table for () + 64;
    v4[4] = (char *)&value witness table for () + 64;
    v4[5] = &unk_1006BFFC0;
    v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for RDAccountPersonIDSaltObserver.AccountInfo()
{
  return objc_opt_self(_TtCC7remindd29RDAccountPersonIDSaltObserverP33_E6769D87973B1BC8029E74FBB6A323F311AccountInfo);
}

uint64_t storeEnumTagSinglePayload for RDAccountPersonIDSaltObserver.SaltValueError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1004EF0C0 + 4 * byte_1006BFF75[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1004EF0F4 + 4 * byte_1006BFF70[v4]))();
}

uint64_t sub_1004EF0F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004EF0FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1004EF104);
  return result;
}

uint64_t sub_1004EF110(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1004EF118);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1004EF11C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004EF124(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDAccountPersonIDSaltObserver.SaltValueError()
{
  return &type metadata for RDAccountPersonIDSaltObserver.SaltValueError;
}

unint64_t sub_1004EF144()
{
  unint64_t result;

  result = qword_10084D820;
  if (!qword_10084D820)
  {
    result = swift_getWitnessTable(&unk_1006C008C, &type metadata for RDAccountPersonIDSaltObserver.SaltValueError);
    atomic_store(result, (unint64_t *)&qword_10084D820);
  }
  return result;
}

uint64_t sub_1004EF188()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

id sub_1004EF1AC(id result, char a2)
{
  if ((a2 & 1) == 0)
    return result;
  return result;
}

uint64_t sub_1004EF1B8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 64, 7);
}

void sub_1004EF1EC(uint64_t a1)
{
  uint64_t v1;

  sub_1004EE60C(a1, *(void **)(v1 + 16), *(void (**)(void *))(v1 + 24));
}

void sub_1004EF1FC(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *a1;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v5);
  v7 = sub_1004EF5B4(v6, a2);
  swift_bridgeObjectRelease();
  *a3 = v7;
}

uint64_t sub_1004EF25C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1004EF280(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  sub_1004EF1FC(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1004EF288()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004EF2AC(uint64_t a1)
{
  uint64_t v1;

  return sub_1004EE804(a1, v1);
}

void sub_1004EF2B4(id a1, char a2)
{
  if ((a2 & 1) == 0)

}

void sub_1004EF2C0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::Int v23;
  id v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  id v28;
  char v29;
  uint64_t v30;
  id v31;
  char v32;
  uint64_t v35;
  unint64_t v36;
  uint64_t v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;

  v4 = a3;
  v5 = 0;
  v6 = 0;
  v38 = a3 + 56;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a3 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = a4 & 0xFFFFFFFFFFFFFF8;
  if (a4 < 0)
    v11 = a4;
  v40 = v11;
  v41 = a4 & 0xC000000000000001;
  v42 = a4 + 56;
  v36 = (unint64_t)(v7 + 63) >> 6;
LABEL_7:
  v35 = v5;
  while (v9)
  {
    v15 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v16 = v15 | (v6 << 6);
LABEL_23:
    v20 = *(_QWORD *)(v4 + 48) + 24 * v16;
    v21 = *(void **)(v20 + 8);
    v22 = *(void **)(v20 + 16);
    if (v41)
    {
      v12 = v21;
      v13 = v22;
      v14 = __CocoaSet.contains(_:)(v13, v40);

      if ((v14 & 1) != 0)
        goto LABEL_33;
    }
    else if (*(_QWORD *)(a4 + 16))
    {
      v23 = *(_QWORD *)(a4 + 40);
      v39 = v21;
      v24 = v22;
      v25 = NSObject._rawHashValue(seed:)(v23);
      v26 = -1 << *(_BYTE *)(a4 + 32);
      v27 = v25 & ~v26;
      if (((*(_QWORD *)(v42 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) != 0)
      {
        sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
        v28 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v27);
        v29 = static NSObject.== infix(_:_:)(v28);

        if ((v29 & 1) != 0)
        {
LABEL_32:

          v10 = v36;
          v4 = a3;
LABEL_33:
          *(unint64_t *)((char *)a1 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
          v5 = v35 + 1;
          if (!__OFADD__(v35, 1))
            goto LABEL_7;
          __break(1u);
LABEL_36:
          swift_retain();
          sub_1002182CC(a1, a2, v35, v4);
          return;
        }
        v30 = ~v26;
        while (1)
        {
          v27 = (v27 + 1) & v30;
          if (((*(_QWORD *)(v42 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
            break;
          v31 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v27);
          v32 = static NSObject.== infix(_:_:)(v31);

          if ((v32 & 1) != 0)
            goto LABEL_32;
        }
      }

      v10 = v36;
      v4 = a3;
    }
  }
  v17 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v17 >= v10)
    goto LABEL_36;
  v18 = *(_QWORD *)(v38 + 8 * v17);
  ++v6;
  if (v18)
    goto LABEL_22;
  v6 = v17 + 1;
  if (v17 + 1 >= v10)
    goto LABEL_36;
  v18 = *(_QWORD *)(v38 + 8 * v6);
  if (v18)
  {
LABEL_22:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v6 << 6);
    goto LABEL_23;
  }
  v19 = v17 + 2;
  if (v19 >= v10)
    goto LABEL_36;
  v18 = *(_QWORD *)(v38 + 8 * v19);
  if (v18)
  {
    v6 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    v6 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v6 >= v10)
      goto LABEL_36;
    v18 = *(_QWORD *)(v38 + 8 * v6);
    ++v19;
    if (v18)
      goto LABEL_22;
  }
LABEL_38:
  __break(1u);
}

uint64_t sub_1004EF5B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v16;

  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (unint64_t)((1 << v5) + 63) >> 6;
  v8 = 8 * v7;
  swift_bridgeObjectRetain_n(a2, 2);
  if (v6 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v8, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v16 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain(a2);
    sub_1004EF2C0((unint64_t *)((char *)&v16 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    v11 = v10;
    swift_release(a1);
    swift_bridgeObjectRelease();
    if (v2)
      swift_willThrow(v12);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  else
  {
    v13 = (void *)swift_slowAlloc(v8, -1);
    bzero(v13, v8);
    swift_bridgeObjectRetain(a2);
    sub_1004EF2C0((unint64_t *)v13, v7, a1, a2);
    v11 = v14;
    swift_release(a1);
    swift_bridgeObjectRelease();
    swift_slowDealloc(v13, -1, -1);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  return v11;
}

double sub_1004EF780@<D0>(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  unsigned int v4;
  id v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  double result;
  uint64_t v28;
  uint64_t v29;

  v3 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
  v4 = objc_msgSend(v3, "enableHashingUserIdentifiablesWithPersonIDSalt");

  if (!v4)
  {
LABEL_15:
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return result;
  }
  v5 = objc_msgSend(v1, "accountTypeHost");
  v6 = objc_msgSend(v5, "isCloudKit");

  if (!v6)
  {
    if (qword_100837788 != -1)
      swift_once(&qword_100837788, sub_1004EFA84);
    v15 = type metadata accessor for Logger(0);
    sub_10001AAA8(v15, (uint64_t)qword_10084D848);
    v16 = v1;
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v29 = v20;
      *(_DWORD *)v19 = 136446210;
      v21 = objc_msgSend(v16, "remObjectID");
      if (v21)
      {
        v22 = v21;
        v23 = objc_msgSend(v21, "description");

        v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        v26 = v25;

      }
      else
      {
        v26 = 0xE300000000000000;
        v24 = 7104878;
      }
      v28 = sub_10001A820(v24, v26, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);

      swift_bridgeObjectRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "We don't currently support providing hash key other than cloudkit accounts. This log indicates there's some programming errors to pass on an incorrect account object {account: %{public}s}", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

    }
    goto LABEL_15;
  }
  v7 = type metadata accessor for _RDManualSortIDPrimaryCloudKitAccountHashKeyProvider();
  v8 = swift_allocObject(v7, 32, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006BC630;
  v9 = v1;
  v10 = objc_msgSend(v9, "personIDSalt");
  if (v10)
  {
    v11 = v10;
    v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v14 = v13;

  }
  else
  {

    v12 = 0;
    v14 = 0xF000000000000000;
  }
  *(_QWORD *)(v8 + 16) = v12;
  *(_QWORD *)(v8 + 24) = v14;
  sub_1000A71B4(0, 0xF000000000000000);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = &off_1007F7E78;
  *(_QWORD *)a1 = v8;
  return result;
}

uint64_t sub_1004EFA84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084D848);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084D848);
  if (qword_100837628 != -1)
    swift_once(&qword_100837628, sub_1004A1838);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872058);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1004EFB14()
{
  uint64_t v0;

  sub_1000A71B4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for _RDManualSortIDPrimaryCloudKitAccountHashKeyProvider()
{
  return objc_opt_self(_TtC7reminddP33_B5AC59DA85A1771DB62C8FFA793A471252_RDManualSortIDPrimaryCloudKitAccountHashKeyProvider);
}

uint64_t sub_1004EFB58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (v3 >> 60 == 15)
    return 0;
  v7 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  sub_1000A70E4(v7, *(_QWORD *)(*(_QWORD *)v2 + 24));
  v4 = String.base64EncodedHMACString(using:)(v7, v3, a1, a2);
  sub_1000A71B4(v7, v3);
  return v4;
}

id sub_1004EFBE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id result;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __n128 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[2];

  result = objc_msgSend(*(id *)(v2 + 16), "personIDSalt");
  if (result)
  {
    v6 = result;
    v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)(result);
    v9 = v8;

    sub_1000A71C8(v7, v9);
    v14[0] = a1;
    v14[1] = a2;
    v12 = 0x5F444548534148;
    v13 = 0xE700000000000000;
    v12 = String.init<A>(_:)(&v12, &type metadata for String, &protocol witness table for String, &protocol witness table for String, v10);
    v13 = v11;
    String.append<A>(contentsOf:)(v14, &type metadata for String, &protocol witness table for String);
    return (id)v12;
  }
  return result;
}

uint64_t type metadata accessor for RDManualSortIDUnitTestHashKeyProvider()
{
  return objc_opt_self(_TtC7remindd37RDManualSortIDUnitTestHashKeyProvider);
}

id sub_1004EFCE4(uint64_t a1, uint64_t a2)
{
  return sub_1004EFBE8(a1, a2);
}

uint64_t sub_1004EFD04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084D9A0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084D9A0);
  if (qword_100837608 != -1)
    swift_once(&qword_100837608, sub_1004A17C8);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1004EFD9C(char *a1)
{
  sub_1002B574C(*a1);
}

void sub_1004EFDA8()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_1004EFDFC()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x4E79616C70736964, 0xEB00000000656D61);
  swift_bridgeObjectRelease(0xEB00000000656D61);
  return Hasher._finalize()();
}

void sub_1004EFE78()
{
  __asm { BR              X10 }
}

double sub_1004EFEBC(uint64_t a1)
{
  double result;

  String.hash(into:)(a1, 0x4E79616C70736964, 0xEB00000000656D61);
  *(_QWORD *)&result = swift_bridgeObjectRelease(0xEB00000000656D61).n128_u64[0];
  return result;
}

void sub_1004EFF24(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_1004EFF74()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x4E79616C70736964, 0xEB00000000656D61);
  swift_bridgeObjectRelease(0xEB00000000656D61);
  return Hasher._finalize()();
}

unint64_t sub_1004EFFF0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1004F1E14(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1004F001C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1004F0054 + 4 * byte_1006C01A4[*v0]))();
}

void sub_1004F0054(_QWORD *a1@<X8>)
{
  *a1 = 0x4E79616C70736964;
  a1[1] = 0xEB00000000656D61;
}

void sub_1004F0078(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "canonicalName");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_1004F00A0(_QWORD *a1@<X8>)
{
  *a1 = 1953720684;
  a1[1] = 0xE400000000000000;
}

void sub_1004F00B4(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E11A8;
}

_UNKNOWN **static REMCDListSection.recordTypes()()
{
  return &off_1007E11D0;
}

uint64_t static REMCDListSection.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v8;
  id v9;
  id v10;
  NSString v11;
  id v12;
  uint64_t result;

  v8 = type metadata accessor for REMCDListSection();
  v9 = a1;
  swift_bridgeObjectRetain(a3);
  v10 = a4;
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v8), "objectWithRecordID:accountID:context:", v9, v11, v10);

  if (v12)
  {
    result = swift_dynamicCastClass(v12, v4);
    if (result)
      return result;

  }
  return 0;
}

id static REMCDListSection.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v8;
  NSString v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t MetatypeMetadata;
  uint64_t v20;
  unint64_t v21;
  double v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = v3;
  v8 = objc_msgSend(a1, "recordID");
  v9 = objc_msgSend(v8, "recordName");

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "newObjectWithCKRecordName:context:account:", v9, a3, a2);

  if (v10)
  {
    v11 = objc_msgSend(a2, "ckIdentifier");
    if (v11)
    {
      v12 = v11;
      objc_msgSend(v10, "mergeDataFromRecord:accountID:", a1, v11);

      objc_msgSend(v10, "setCkServerRecord:", a1);
      objc_msgSend(v10, "setInCloud:", 1);
      objc_msgSend(v10, "updateParentReferenceIfNecessary");
    }
    else
    {
      if (qword_100837790 != -1)
        swift_once(&qword_100837790, sub_1004EFD04);
      v13 = type metadata accessor for Logger(0);
      sub_10001AAA8(v13, (uint64_t)qword_10084D9A0);
      v14 = a2;
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = swift_slowAlloc(22, -1);
        v18 = swift_slowAlloc(64, -1);
        v30 = v18;
        v31 = v4;
        *(_DWORD *)v17 = 136446466;
        MetatypeMetadata = swift_getMetatypeMetadata(v4);
        v20 = String.init<A>(describing:)(&v31, MetatypeMetadata);
        v31 = sub_10001A820(v20, v21, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
        *(_QWORD *)&v22 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v17 + 12) = 2082;
        v23 = objc_msgSend(v14, "remObjectID", v22, v30);
        if (v23)
        {
          v24 = v23;
          v25 = objc_msgSend(v23, "description");

          v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
          v28 = v27;

        }
        else
        {
          v28 = 0xE300000000000000;
          v26 = 7104878;
        }
        v31 = sub_10001A820(v26, v28, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v18, -1, -1);
        swift_slowDealloc(v17, -1, -1);

      }
      else
      {

      }
      return 0;
    }
  }
  return v10;
}

Swift::String __swiftcall REMCDListSection.recordType()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = 0x746365537473694CLL;
  v1 = (void *)0xEB000000006E6F69;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::Void __swiftcall REMCDListSection.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  void *v2;
  NSString v4;
  id v5;
  NSString v6;
  double v7;
  NSString v8;
  double v9;
  int v10;
  int v11;
  id v12;
  objc_class *v13;
  id v14;
  void *v15;
  char v16;
  objc_super v17;

  v4 = String._bridgeToObjectiveC()();
  v17.receiver = v2;
  v17.super_class = (Class)type metadata accessor for REMCDListSection();
  objc_msgSendSuper2(&v17, "mergeDataFromRecord:accountID:", from.super.isa, v4);

  v5 = -[objc_class recordID](from.super.isa, "recordID");
  v6 = objc_msgSend(v5, "recordName");

  if (!v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v6 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v7 = swift_bridgeObjectRelease().n128_u64[0];
  }
  v8 = objc_msgSend(v2, "ckIdentifierFromRecordName:", v6, v7);

  if (!v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v8 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v9 = swift_bridgeObjectRelease().n128_u64[0];
  }
  objc_msgSend(v2, "setCkIdentifier:", v8, v9);

  v10 = objc_msgSend(v2, "mergeDataRevertedLocallyMarkedForDeletion");
  v11 = objc_msgSend(v2, "mergeDataRefusedToMergeMarkedForDeletion");
  v16 = 0;
  v12 = v2;
  v13 = from.super.isa;
  sub_10044C2B8(v13, v10, v11, v12, v12, (uint64_t)v13, (uint64_t)&v16);

  if (v16 == 1)
  {
    v14 = objc_msgSend(v12, "list");
    if (v14)
    {
      v15 = v14;
      if ((objc_msgSend(v14, "ckNeedsInitialFetchFromCloud") & 1) == 0)
        sub_1002B9248();

    }
  }
}

void sub_1004F0874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[8];

  v15[2] = a4;
  v15[4] = a2;
  v5 = type metadata accessor for UUID(0);
  v15[3] = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v15[0] = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630((uint64_t *)&unk_10083B370);
  __chkstk_darwin(v7);
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v8);
  v15[1] = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  __chkstk_darwin(v11);
  __chkstk_darwin(v12);
  __chkstk_darwin(v13);
  v14 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v14);
  __asm { BR              X10 }
}

void sub_1004F0A20()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Class isa;

  v2 = sub_10011D06C();
  v3 = type metadata accessor for Date(0);
  CKRecordKeyValueSetting.subscript.getter(0x6E6F697461657243, 0xEC00000065746144, v2, v3, &protocol witness table for Date);
  v4 = *(_QWORD *)(v3 - 8);
  isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v0, 1, v3) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v3);
  }
  objc_msgSend(*(id *)(v1 - 112), "setCreationDate:", isa);

}

CKRecord_optional __swiftcall REMCDListSection.newlyCreatedRecord()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::Bool v3;
  objc_class *v4;
  objc_super v5;
  CKRecord_optional result;

  v1 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v1);
  __chkstk_darwin(v2);
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for REMCDListSection();
  if (objc_msgSendSuper2(&v5, "newlyCreatedRecord"))
    JUMPOUT(0x1004F11D0);
  v4 = 0;
  result.value.super.isa = v4;
  result.is_nil = v3;
  return result;
}

Swift::Void __swiftcall REMCDListSection.cleanUpAfterLocalObjectMerge()()
{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t ObjectType;
  uint64_t v11;

  if (qword_100837790 != -1)
    swift_once(&qword_100837790, sub_1004EFD04);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10084D9A0);
  v9 = v0;
  v2 = Logger.logObject.getter(v9);
  v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v11 = v5;
    *(_DWORD *)v4 = 136315138;
    ObjectType = swift_getObjectType();
    v6 = sub_10001A630(&qword_1008471A8);
    v7 = String.init<A>(describing:)(&ObjectType, v6);
    ObjectType = sub_10001A820(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v11);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);

  }
  else
  {

  }
}

Swift::Void __swiftcall REMCDListSection.fixBrokenReferences()()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  void *v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  char **v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  double v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  if (qword_100837790 != -1)
    swift_once(&qword_100837790, sub_1004EFD04);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10084D9A0);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  v5 = &selRef_isConcealed;
  if (!os_log_type_enabled(v3, v4))
  {

    goto LABEL_14;
  }
  v6 = 7104878;
  v7 = swift_slowAlloc(22, -1);
  v8 = swift_slowAlloc(64, -1);
  v48 = v8;
  *(_DWORD *)v7 = 136446466;
  v9 = objc_msgSend(v2, "remObjectID");
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(v9, "description");

    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

  }
  else
  {
    v14 = 0xE300000000000000;
    v12 = 7104878;
  }
  v47 = sub_10001A820(v12, v14, &v48);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);

  *(_QWORD *)&v15 = swift_bridgeObjectRelease().n128_u64[0];
  *(_WORD *)(v7 + 12) = 2082;
  v16 = objc_msgSend(v2, "list", v15);
  if (!v16)
    goto LABEL_12;
  v17 = v16;
  v18 = objc_msgSend(v16, "remObjectID");
  if (!v18)
  {

LABEL_12:
    v22 = 0xE300000000000000;
    goto LABEL_13;
  }
  v19 = v18;
  v20 = objc_msgSend(v18, "description");

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v22 = v21;

LABEL_13:
  v5 = &selRef_isConcealed;
  v47 = sub_10001A820(v6, v22, &v48);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fixing broken references for section in list {listSectionID: %{public}s, listID: %{public}s}", (uint8_t *)v7, 0x16u);
  swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v8, -1, -1);
  swift_slowDealloc(v7, -1, -1);

LABEL_14:
  v23 = objc_msgSend(v2, v5[106]);
  if (!v23)
    return;
  v24 = v23;
  if (objc_msgSend(v23, "markedForDeletion")
    && (objc_msgSend(v2, "markedForDeletion") & 1) == 0)
  {
    v25 = v2;
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (!os_log_type_enabled(v26, v27))
    {

LABEL_28:
      objc_msgSend(v25, "markForDeletion");
      goto LABEL_29;
    }
    v28 = v5;
    v29 = swift_slowAlloc(22, -1);
    v30 = swift_slowAlloc(64, -1);
    v48 = v30;
    *(_DWORD *)v29 = 136446466;
    v31 = objc_msgSend(v25, "remObjectID");
    if (v31)
    {
      v32 = v31;
      v33 = objc_msgSend(v31, "description");

      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      v36 = v35;

    }
    else
    {
      v36 = 0xE300000000000000;
      v34 = 7104878;
    }
    v47 = sub_10001A820(v34, v36, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);

    *(_QWORD *)&v37 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v29 + 12) = 2082;
    v38 = objc_msgSend(v25, v28[106], v37);
    v46 = v30;
    if (v38)
    {
      v39 = v38;
      v40 = objc_msgSend(v38, "remObjectID");
      if (v40)
      {
        v41 = v40;
        v42 = objc_msgSend(v40, "description");

        v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
        v45 = v44;

LABEL_27:
        v47 = sub_10001A820(v43, v45, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "List is marked for deletion but section in list is not {listSectionID: %{public}s, listID: %{public}s}", (uint8_t *)v29, 0x16u);
        swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v46, -1, -1);
        swift_slowDealloc(v29, -1, -1);

        goto LABEL_28;
      }

    }
    v45 = 0xE300000000000000;
    v43 = 7104878;
    goto LABEL_27;
  }
LABEL_29:
  objc_msgSend(v24, "forcePushToCloud");

}

unint64_t sub_1004F1E14(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007E1128, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t _s7remindd16REMCDListSectionC26existingLocalObjectToMerge4withSo11REMCDObjectCSgSo11NSPredicateCSg_tF_0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t ObjectType;
  uint64_t v12;

  if (qword_100837790 != -1)
    swift_once(&qword_100837790, sub_1004EFD04);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10084D9A0);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType();
    v7 = sub_10001A630(&qword_1008471A8);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    ObjectType = sub_10001A820(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t _s7remindd16REMCDListSectionC5merge15withLocalObjectSbSo11REMCDObjectC_tF_0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t ObjectType;
  uint64_t v12;

  if (qword_100837790 != -1)
    swift_once(&qword_100837790, sub_1004EFD04);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10084D9A0);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType();
    v7 = sub_10001A630(&qword_1008471A8);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    ObjectType = sub_10001A820(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t _s6FieldsOwst_5(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1004F2220 + 4 * byte_1006C01AD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1004F2254 + 4 * byte_1006C01A8[v4]))();
}

uint64_t sub_1004F2254(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004F225C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1004F2264);
  return result;
}

uint64_t sub_1004F2270(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1004F2278);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1004F227C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004F2284(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s6FieldsOMa_5()
{
  return &_s6FieldsON_5;
}

unint64_t sub_1004F22A0(uint64_t a1)
{
  unint64_t result;

  result = sub_1004F22C4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1004F22C4()
{
  unint64_t result;

  result = qword_10084D9C0;
  if (!qword_10084D9C0)
  {
    result = swift_getWitnessTable(&unk_1006C01F8, &_s6FieldsON_5);
    atomic_store(result, (unint64_t *)&qword_10084D9C0);
  }
  return result;
}

unint64_t sub_1004F2308(uint64_t a1)
{
  unint64_t result;

  result = sub_1004F232C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1004F232C()
{
  unint64_t result;

  result = qword_10084D9C8;
  if (!qword_10084D9C8)
  {
    result = swift_getWitnessTable(&unk_1006C01C0, &_s6FieldsON_5);
    atomic_store(result, (unint64_t *)&qword_10084D9C8);
  }
  return result;
}

unint64_t sub_1004F2374()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10084D9D0;
  if (!qword_10084D9D0)
  {
    v1 = sub_1000A5A94(&qword_10084D9D8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10084D9D0);
  }
  return result;
}

unint64_t sub_1004F23C4()
{
  unint64_t result;

  result = qword_10084D9E0;
  if (!qword_10084D9E0)
  {
    result = swift_getWitnessTable(&unk_1006C02A8, &_s6FieldsON_5);
    atomic_store(result, (unint64_t *)&qword_10084D9E0);
  }
  return result;
}

uint64_t sub_1004F2408(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_10084DA18, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.SearchInvocation, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.SearchInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_1004F2444(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char *v24;
  id v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v42 = a2;
  v39 = a4;
  v43 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v40 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v34 - v9;
  v11 = type metadata accessor for REMRemindersListDataView.ListsModel(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v34 - v16;
  v18 = v44;
  v19 = sub_1004F3560(a1, a3);
  if (!v18)
  {
    v20 = v19;
    v34 = v14;
    v35 = v7;
    v37 = v11;
    v38 = v17;
    v44 = v12;
    v36 = v10;
    v21 = v43;
    v22 = sub_1004F4380(a1);
    v24 = v38;
    REMRemindersListDataView.ListsModel.init(groups:completedRemindersCount:hasCompletedReminders:prefetchedReminders:prefetchedDueReminders:)(v20, v22, v23 & 1, 2, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
    v25 = objc_msgSend(v41, "fetchResultTokenToDiffAgainst");
    v26 = (uint64_t)v36;
    sub_100493C24(v25, a1, (uint64_t)v36);

    v27 = v34;
    v28 = v24;
    v29 = v37;
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v34, v28, v37);
    v30 = v40;
    v31 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v35, v26, v21);
    v32 = sub_10009FC50(&qword_10084C5C0, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListsModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.ListsModel);
    v33 = sub_10009FC50(&qword_10084C5C8, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListsModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.ListsModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)(v27, v31, v29, v32, v33);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v26, v21);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v38, v29);
  }
}

uint64_t sub_1004F26E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t result;

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v1 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006A7330;
  KeyPath = swift_getKeyPath(&unk_1006C0338);
  *(_QWORD *)(v1 + 32) = KeyPath;
  result = specialized Array._endMutation()(KeyPath);
  qword_10084D9F0 = v1;
  return result;
}

void sub_1004F2758(void **a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  char *v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  char *v50;
  Class isa;
  id v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  id v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  id v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  char *v74;

  v73 = a2;
  v72 = a3;
  v4 = sub_10001A630(&qword_10083FB68);
  __chkstk_darwin(v4);
  v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v74 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v71 = (char *)&v65 - v11;
  __chkstk_darwin(v12);
  v70 = (char *)&v65 - v13;
  v14 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v14);
  v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v22 = __chkstk_darwin(v21).n128_u64[0];
  v69 = (char *)&v65 - v23;
  v24 = *a1;
  v25 = objc_msgSend(v24, "identifier", v22);
  if (!v25)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
    goto LABEL_21;
  }
  v26 = v25;
  v68 = v24;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v25);

  v27 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
  v27(v16, v20, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
LABEL_21:
    sub_10000882C((uint64_t)v16, (uint64_t *)&unk_100839C80);
LABEL_23:
    v47 = type metadata accessor for REMRemindersListDataView.ListsModel.Sublist(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v72, 1, 1, v47);
    return;
  }
  v28 = v18;
  v29 = (uint64_t)v69;
  v27(v69, v16, v17);
  v30 = v73;
  if (!v73[2] || (v31 = sub_1002C65F8(v29), (v32 & 1) == 0))
  {
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v17);
    goto LABEL_23;
  }
  v33 = *(_QWORD *)(v30[7] + 8 * v31);
  if ((unint64_t)v33 >> 62)
  {
    if (v33 < 0)
      v48 = v33;
    else
      v48 = v33 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v33, 2);
    v34 = _CocoaArrayWrapper.endIndex.getter(v48);
    v65 = v28;
    v66 = v17;
    if (v34)
      goto LABEL_7;
LABEL_28:
    v73 = _swiftEmptyArrayStorage;
    goto LABEL_29;
  }
  v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n(v33, 2);
  v65 = v28;
  v66 = v17;
  if (!v34)
    goto LABEL_28;
LABEL_7:
  if (v34 < 1)
  {
    __break(1u);
    return;
  }
  v35 = 0;
  v36 = v33 & 0xC000000000000001;
  v73 = _swiftEmptyArrayStorage;
  v67 = v33 & 0xC000000000000001;
  do
  {
    if (v36)
      v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v35, v33);
    else
      v37 = *(id *)(v33 + 8 * v35 + 32);
    sub_100495DE8(v37, 0, 0, (uint64_t)v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    {
      sub_10000882C((uint64_t)v6, &qword_10083FB68);
    }
    else
    {
      v38 = v34;
      v39 = v33;
      v40 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v41 = v71;
      v40(v71, v6, v7);
      v42 = v70;
      v40(v70, v41, v7);
      v40(v74, v42, v7);
      swift_isUniquelyReferenced_nonNull_native(v73);
      if ((v43 & 1) == 0)
        v73 = (_QWORD *)sub_1002C8478(0, v73[2] + 1, 1, (unint64_t)v73);
      v45 = v73[2];
      v44 = v73[3];
      if (v45 >= v44 >> 1)
        v73 = (_QWORD *)sub_1002C8478(v44 > 1, v45 + 1, 1, (unint64_t)v73);
      v46 = (char *)v73;
      v73[2] = v45 + 1;
      v40(&v46[((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v45], v74, v7);
      v33 = v39;
      v34 = v38;
      v36 = v67;
    }
    ++v35;
  }
  while (v34 != v35);
LABEL_29:
  swift_bridgeObjectRelease_n(v33, 2);
  v49 = (void *)objc_opt_self(REMList);
  v50 = v69;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v52 = objc_msgSend(v49, "objectIDWithUUID:", isa);

  v54 = REMObjectID.codable.getter(v53);
  v55 = objc_msgSend(v68, "displayName");
  if (v55)
  {
    v56 = v55;
    v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
    v59 = v58;

  }
  else
  {
    v57 = 0;
    v59 = 0xE000000000000000;
  }
  v60 = objc_msgSend(v68, "color", v65, v66);
  if (v60)
  {
    v61 = v60;
    v62 = REMColor.codable.getter();

  }
  else
  {
    v62 = 0;
  }
  v63 = v72;
  REMRemindersListDataView.ListsModel.Sublist.init(listID:listName:listColor:reminders:isCustomSmartList:)(v54, v57, v59, v62, v73, 0);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v50, v66);
  v64 = type metadata accessor for REMRemindersListDataView.ListsModel.Sublist(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v63, 0, 1, v64);
}

uint64_t sub_1004F2D00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  Class isa;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  Class v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  Class v38;
  uint64_t v39;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  __int128 v47;
  void *v48;
  _QWORD *v49;

  v44 = a2;
  v4 = type metadata accessor for UUID(0);
  v46 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = _s10PredicatesOMa_1(0);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(_QWORD *)(a1 + 16);
  v12 = _swiftEmptyArrayStorage;
  if (v11)
  {
    v41 = v8;
    v42 = v10;
    v43 = v2;
    *(_QWORD *)&v47 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v11);
    v45 = (id)objc_opt_self(REMList);
    v13 = a1 + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80));
    v14 = *(_QWORD *)(v46 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
    do
    {
      v15(v6, v13, v4);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      v17 = objc_msgSend(v45, "objectIDWithUUID:", isa);

      v18 = (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v6, v4);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v18);
      v19 = *(_QWORD *)(v47 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v19);
      v20 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v17);
      specialized ContiguousArray._endMutation()(v20);
      v13 += v14;
      --v11;
    }
    while (v11);
    v12 = (_QWORD *)v47;
    v10 = v42;
    v8 = v41;
  }
  *v10 = v12;
  swift_storeEnumTagMultiPayload(v10, v8, 4);
  sub_10000A3AC();
  v22 = v21;
  sub_10001C744((uint64_t)v10, _s10PredicatesOMa_1);
  v23 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v24 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v25 = objc_msgSend((id)swift_getObjCClassFromMetadata(v23), "entity");
  objc_msgSend(v24, "setEntity:", v25);

  objc_msgSend(v24, "setAffectedStores:", 0);
  objc_msgSend(v24, "setPredicate:", v22);
  v26 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v27 = swift_allocObject(v26, 40, 7);
  *(_OWORD *)(v27 + 16) = xmmword_1006A7330;
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  KeyPath = swift_getKeyPath(&unk_1006C0308);
  v29 = NSSortDescriptor.init<A, B>(keyPath:ascending:)(KeyPath, 1);
  *(_QWORD *)(v27 + 32) = v29;
  *(_QWORD *)&v47 = v27;
  specialized Array._endMutation()(v29);
  v30 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v24, "setSortDescriptors:", v30, swift_bridgeObjectRelease().n128_f64[0]);

  v49 = _swiftEmptyArrayStorage;
  sub_1001C1C48(0, 3, 0);
  v31 = v49;
  v48 = &type metadata for String;
  *(_QWORD *)&v47 = 0x696669746E656469;
  *((_QWORD *)&v47 + 1) = 0xEA00000000007265;
  v33 = v49[2];
  v32 = v49[3];
  if (v33 >= v32 >> 1)
  {
    sub_1001C1C48(v32 > 1, v33 + 1, 1);
    v31 = v49;
  }
  v31[2] = v33 + 1;
  sub_10001A6CC(&v47, &v31[4 * v33 + 4]);
  v48 = &type metadata for String;
  *(_QWORD *)&v47 = 1701667182;
  *((_QWORD *)&v47 + 1) = 0xE400000000000000;
  v49 = v31;
  v35 = v31[2];
  v34 = v31[3];
  if (v35 >= v34 >> 1)
  {
    sub_1001C1C48(v34 > 1, v35 + 1, 1);
    v31 = v49;
  }
  v31[2] = v35 + 1;
  sub_10001A6CC(&v47, &v31[4 * v35 + 4]);
  v48 = &type metadata for String;
  *(_QWORD *)&v47 = 0x726F6C6F63;
  *((_QWORD *)&v47 + 1) = 0xE500000000000000;
  v49 = v31;
  v37 = v31[2];
  v36 = v31[3];
  if (v37 >= v36 >> 1)
  {
    sub_1001C1C48(v36 > 1, v37 + 1, 1);
    v31 = v49;
  }
  v31[2] = v37 + 1;
  sub_10001A6CC(&v47, &v31[4 * v37 + 4]);
  v38 = Array._bridgeToObjectiveC()().super.isa;
  swift_release(v31);
  objc_msgSend(v24, "setPropertiesToFetch:", v38);

  v39 = NSManagedObjectContext.fetch<A>(_:)(v24, v23);
  return v39;
}

void sub_1004F327C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  char *v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;

  v3 = v2;
  v32 = a2;
  v5 = sub_10001A630(&qword_10084C5D0);
  __chkstk_darwin(v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for REMRemindersListDataView.ListsModel.Sublist(0);
  v9 = *(void **)(v8 - 8);
  __chkstk_darwin(v8);
  v30 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v27 = (char *)&v26 - v12;
  if ((unint64_t)a1 >> 62)
    goto LABEL_20;
  v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v13; v13 = _CocoaArrayWrapper.endIndex.getter(v25))
  {
    v33 = v8;
    v29 = a1 & 0xC000000000000001;
    v31 = _swiftEmptyArrayStorage;
    v14 = 4;
    v28 = v7;
    v26 = a1;
    while (1)
    {
      v8 = (uint64_t)v9;
      v15 = v29 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14 - 4, a1) : *(id *)(a1 + 8 * v14);
      v9 = v15;
      v16 = v14 - 3;
      if (__OFADD__(v14 - 4, 1))
        break;
      v34 = v15;
      sub_1004F2758(&v34, v32, (uint64_t)v7);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return;
      }

      v9 = (void *)v8;
      v17 = v33;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v33) == 1)
      {
        sub_10000882C((uint64_t)v7, &qword_10084C5D0);
      }
      else
      {
        v18 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
        v19 = v27;
        v18(v27, v7, v17);
        v18(v30, v19, v17);
        v20 = (unint64_t)v31;
        swift_isUniquelyReferenced_nonNull_native(v31);
        if ((v21 & 1) == 0)
          v20 = sub_1002C84F0(0, *(_QWORD *)(v20 + 16) + 1, 1, v20);
        v23 = *(_QWORD *)(v20 + 16);
        v22 = *(_QWORD *)(v20 + 24);
        if (v23 >= v22 >> 1)
          v20 = sub_1002C84F0(v22 > 1, v23 + 1, 1, v20);
        *(_QWORD *)(v20 + 16) = v23 + 1;
        v9 = (void *)v8;
        v24 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
        v31 = (_QWORD *)v20;
        v18((char *)(v20 + v24 + *(_QWORD *)(v8 + 72) * v23), v30, v33);
        a1 = v26;
      }
      ++v14;
      v7 = v28;
      if (v16 == v13)
        goto LABEL_24;
    }
    __break(1u);
LABEL_20:
    if (a1 < 0)
      v25 = a1;
    else
      v25 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_24:
  swift_bridgeObjectRelease();
}

uint64_t sub_1004F3560(uint64_t a1, uint64_t a2)
{
  void *v2;
  char **v3;
  id v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __n128 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::Int v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  char v49;
  id v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  Class isa;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  void *v82;
  id v83;
  void *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int (*v89)(uint64_t, uint64_t, uint64_t);
  id v90;
  void *v91;
  id v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  id v116;
  id v117;
  void *v118;
  char *v119;
  _QWORD *v120;
  id v121;
  char *v122;
  uint64_t v123;
  void (*v124)(char *, char *, uint64_t);
  char *v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  unint64_t v129;
  uint64_t v130;
  _BOOL8 v131;
  uint64_t v132;
  unint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  id v137;
  uint64_t v138;
  BOOL v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t result;
  uint64_t v146;
  char **v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  char *v154;
  char *v155;
  void (**v156)(_QWORD, _QWORD);
  uint64_t v157;
  char *v158;
  id v159;
  __int128 v160;
  unint64_t v161;
  char *v162;
  uint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  id v170[2];
  _QWORD *v171;

  v4 = v2;
  v7 = type metadata accessor for UUID(0);
  v167 = *(_QWORD *)(v7 - 8);
  v168 = v7;
  __chkstk_darwin(v7);
  v166 = (char *)&v148 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v164 = (char *)&v148 - v10;
  v11 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v11);
  v162 = (char *)&v148 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v158 = (char *)&v148 - v14;
  __chkstk_darwin(v15);
  *(_QWORD *)&v160 = (char *)&v148 - v16;
  __chkstk_darwin(v17);
  v165 = (char *)&v148 - v18;
  v19 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v156 = *(void (***)(_QWORD, _QWORD))(v19 - 8);
  v157 = v19;
  __chkstk_darwin(v19);
  v155 = (char *)&v148 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  __chkstk_darwin(v21);
  v154 = (char *)&v148 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v153);
  v152 = (char *)&v148 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v26 = (char *)&v148 - v25;
  v161 = _s10PredicatesOMa(0);
  v27 = __chkstk_darwin(v161);
  v29 = (uint64_t *)((char *)&v148 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30 = REMRemindersListDataView.SearchInvocation.Parameters.objectIDs.getter(v27);
  v163 = a1;
  v151 = v26;
  if ((v30 & 0xC000000000000001) != 0)
  {
    v31 = &_swiftEmptySetSingleton;
    v171 = &_swiftEmptySetSingleton;
    if (v30 >= 0)
      v30 &= 0xFFFFFFFFFFFFFF8uLL;
    a1 = __CocoaSet.makeIterator()(v30);
    v32 = __CocoaSet.Iterator.next()(a1);
    if (v32)
    {
      v33 = v32;
      v149 = v29;
      v150 = a2;
      v159 = v2;
      v34 = type metadata accessor for REMObjectID_Codable(0);
      v3 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
      while (1)
      {
        v169 = v33;
        swift_dynamicCast(v170, &v169, (char *)&type metadata for Swift.AnyObject + 8, v34, 7);
        v41 = objc_msgSend(v170[0], "entityName");
        v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
        v44 = v43;

        v45 = objc_msgSend((id)objc_opt_self(REMReminder), "cdEntityName");
        v4 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
        v47 = v46;

        if ((id)v42 == v4 && v44 == v47)
          break;
        v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v44, v4, v47, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v49 & 1) != 0)
          goto LABEL_17;

LABEL_9:
        v33 = __CocoaSet.Iterator.next()(v35);
        if (!v33)
        {
          v31 = v171;
          v26 = v151;
          v4 = v159;
          v29 = v149;
          goto LABEL_29;
        }
      }
      swift_bridgeObjectRelease_n(v44, 2);
LABEL_17:
      v50 = v170[0];
      v26 = (char *)v171;
      v51 = v171[2];
      if (v171[3] <= v51)
      {
        sub_1002DEAB4(v51 + 1);
        v26 = (char *)v171;
      }
      v35 = NSObject._rawHashValue(seed:)(*((_QWORD *)v26 + 5));
      v36 = v26 + 56;
      v37 = -1 << v26[32];
      v38 = v35 & ~v37;
      v39 = v38 >> 6;
      if (((-1 << v38) & ~*(_QWORD *)&v26[8 * (v38 >> 6) + 56]) != 0)
      {
        v40 = __clz(__rbit64((-1 << v38) & ~*(_QWORD *)&v26[8 * (v38 >> 6) + 56])) | v38 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v52 = 0;
        v53 = (unint64_t)(63 - v37) >> 6;
        do
        {
          if (++v39 == v53 && (v52 & 1) != 0)
          {
            __break(1u);
            goto LABEL_62;
          }
          v54 = v39 == v53;
          if (v39 == v53)
            v39 = 0;
          v52 |= v54;
          v55 = *(_QWORD *)&v36[8 * v39];
        }
        while (v55 == -1);
        v40 = __clz(__rbit64(~v55)) + (v39 << 6);
      }
      *(_QWORD *)&v36[(v40 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v40;
      *(_QWORD *)(*((_QWORD *)v26 + 6) + 8 * v40) = v50;
      ++*((_QWORD *)v26 + 2);
      goto LABEL_9;
    }
LABEL_29:
    swift_release(a1);
    a1 = v163;
  }
  else
  {
    v31 = (void *)sub_10019BCD8(v30);
  }
  v56 = (uint64_t)sub_1001E8984((uint64_t)v31);
  swift_release(v31);
  if (v56 < 0 || (v56 & 0x4000000000000000) != 0)
  {
    v105 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    swift_bridgeObjectRetain(v56);
    v58 = _bridgeCocoaArray<A>(_:)(v106, v105);
    swift_release(v56);
  }
  else
  {
    swift_bridgeObjectRetain(v56);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v57);
    sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    v58 = v56;
  }
  v59 = v161;
  swift_release(v56);
  sub_10001A630(&qword_10083E368);
  *v29 = v58;
  ((void (*)(void))REMRemindersListDataView.SearchInvocation.Parameters.showCompleted.getter)();
  swift_storeEnumTagMultiPayload(v29, v59, 19);
  sub_10000D2C0();
  v159 = v60;
  sub_10001C744((uint64_t)v29, _s10PredicatesOMa);
  if (qword_1008375D8 != -1)
LABEL_62:
    swift_once(&qword_1008375D8, sub_100497894);
  v61 = qword_100871F88;
  if (qword_100837798 != -1)
    swift_once(&qword_100837798, sub_1004F26E8);
  v62 = qword_10084D9F0;
  if ((unint64_t)qword_10084D9F0 >> 62)
  {
    if (qword_10084D9F0 < 0)
      v103 = qword_10084D9F0;
    else
      v103 = qword_10084D9F0 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(qword_10084D9F0);
    v104 = sub_10001A630((uint64_t *)&unk_10083AEC0);
    v64 = _bridgeCocoaArray<A>(_:)(v103, v104);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain(qword_10084D9F0);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v63);
    v64 = v62;
  }
  v65 = (void *)sub_100358798(v61, v64, 0, (uint64_t)v159);
  v66 = swift_bridgeObjectRelease();
  v67 = (uint64_t)v154;
  REMRemindersListDataView.SearchInvocation.Parameters.sortingStyle.getter(v66);
  v68 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  v69 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  v70 = (uint64_t)v152;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 104))(v152, v68, v69);
  swift_storeEnumTagMultiPayload(v70, v153, 2);
  v71 = sub_1004957D0(v67, v70, (uint64_t)v26);
  v72 = (uint64_t)v155;
  REMRemindersListDataView.SearchInvocation.Parameters.showCompleted.getter(v71);
  sub_10049ADC0((uint64_t)v26, v72, 0);
  v156[1](v72, v157);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v65, "setSortDescriptors:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v74 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v75 = NSManagedObjectContext.fetch<A>(_:)(v65, v74);
  v157 = (uint64_t)v4;
  if (v4)
  {
    sub_10001C744((uint64_t)v26, _s9UtilitiesO12SortingStyleOMa);

    goto LABEL_102;
  }
  v76 = v75;
  v171 = _swiftEmptyArrayStorage;
  if ((unint64_t)v75 >> 62)
  {
    if (v75 < 0)
      v107 = v75;
    else
      v107 = v75 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v75);
    v77 = _CocoaArrayWrapper.endIndex.getter(v107);
    swift_bridgeObjectRelease();
    v156 = (void (**)(_QWORD, _QWORD))v65;
    if (v77)
      goto LABEL_42;
LABEL_72:
    swift_bridgeObjectRelease();
    v102 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_73;
  }
  v77 = *(_QWORD *)((v75 & 0xFFFFFFFFFFFFF8) + 0x10);
  v156 = (void (**)(_QWORD, _QWORD))v65;
  if (!v77)
    goto LABEL_72;
LABEL_42:
  if (v77 < 1)
  {
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v167 + 56))(v162, 1, 1, v168);
LABEL_108:
    __break(1u);
LABEL_109:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v168);
    __break(1u);
    return result;
  }
  v78 = 0;
  v161 = v76 & 0xC000000000000001;
  do
  {
    if (v161)
      v81 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v78, v76);
    else
      v81 = *(id *)(v76 + 8 * v78 + 32);
    v82 = v81;
    v83 = objc_msgSend(v81, "identifier");
    if (!v83)
    {
      v79 = (uint64_t)v165;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v167 + 56))(v165, 1, 1, v168);
LABEL_45:
      v80 = v79;
LABEL_46:
      sub_10000882C(v80, (uint64_t *)&unk_100839C80);

      goto LABEL_47;
    }
    v84 = v83;
    v85 = v164;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v83);

    v86 = v167;
    v87 = v168;
    v79 = (uint64_t)v165;
    (*(void (**)(char *, char *, uint64_t))(v167 + 32))(v165, v85, v168);
    v88 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v86 + 56);
    v88(v79, 0, 1, v87);
    v89 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v86 + 48);
    if (v89(v79, 1, v87) == 1)
      goto LABEL_45;
    sub_10000882C(v79, (uint64_t *)&unk_100839C80);
    v90 = objc_msgSend(v82, "list");
    if (!v90)
    {
      v95 = v160;
      v88(v160, 1, 1, v168);
      v80 = v95;
      goto LABEL_46;
    }
    v91 = v90;
    v92 = objc_msgSend(v90, "identifier");

    if (v92)
    {
      v93 = v158;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v92);

      v94 = 0;
    }
    else
    {
      v94 = 1;
      v93 = v158;
    }
    v96 = v168;
    v88((uint64_t)v93, v94, 1, v168);
    v97 = (uint64_t)v93;
    v98 = v160;
    sub_1000F2CE4(v97, v160);
    if (v89(v98, 1, v96) == 1)
    {
      v80 = v98;
      goto LABEL_46;
    }
    v99 = sub_10000882C(v98, (uint64_t *)&unk_100839C80);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v99);
    v100 = v171[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v100);
    v101 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v100, v82);
    specialized ContiguousArray._endMutation()(v101);
LABEL_47:
    ++v78;
  }
  while (v77 != v78);
  swift_bridgeObjectRelease();
  v102 = (unint64_t)v171;
  a1 = v163;
LABEL_73:
  v171 = _swiftEmptyDictionarySingleton;
  if ((v102 & 0x8000000000000000) != 0 || (v102 & 0x4000000000000000) != 0)
    goto LABEL_98;
  v108 = *(_QWORD *)(v102 + 16);
  while (v108)
  {
    v161 = v102 & 0xC000000000000001;
    v109 = _swiftEmptyDictionarySingleton;
    v110 = 4;
    v160 = xmmword_1006A7330;
    while (1)
    {
      v116 = v161
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v110 - 4, v102)
           : *(id *)(v102 + 8 * v110);
      a1 = (uint64_t)v116;
      if (__OFADD__(v110 - 4, 1))
        break;
      v117 = objc_msgSend(v116, "list");
      if (!v117)
        goto LABEL_106;
      v118 = v117;
      v165 = (char *)(v110 - 3);
      v119 = (char *)v108;
      v120 = (_QWORD *)v102;
      v121 = objc_msgSend(v117, "identifier");

      if (!v121)
        goto LABEL_107;
      v122 = v164;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v121);

      v123 = v167;
      v124 = *(void (**)(char *, char *, uint64_t))(v167 + 32);
      v102 = (unint64_t)v162;
      v125 = v122;
      v126 = v168;
      v124(v162, v125, v168);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v123 + 56))(v102, 0, 1, v126);
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v123 + 48))(v102, 1, v126) == 1)
        goto LABEL_108;
      v127 = (uint64_t)v166;
      v124(v166, (char *)v102, v126);
      v129 = sub_1002C65F8(v127);
      v130 = v109[2];
      v131 = (v128 & 1) == 0;
      v132 = v130 + v131;
      if (__OFADD__(v130, v131))
        goto LABEL_96;
      v102 = (unint64_t)v128;
      if (v109[3] < v132)
      {
        sub_1002CD598(v132, 1);
        v109 = v171;
        v133 = sub_1002C65F8((uint64_t)v166);
        if ((v102 & 1) != (v134 & 1))
          goto LABEL_109;
        v129 = v133;
      }
      if ((v102 & 1) != 0)
      {
        v111 = (*(uint64_t (**)(char *, uint64_t))(v167 + 8))(v166, v168);
        v109 = v171;
        v112 = (_QWORD *)(v171[7] + 8 * v129);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v111);
        v114 = *(_QWORD *)((*v112 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v113 = *(_QWORD *)((*v112 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v114 >= v113 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v113 > 1);
        v115 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v114, a1);
        specialized Array._endMutation()(v115);
      }
      else
      {
        v135 = sub_10001A630((uint64_t *)&unk_10083AD90);
        v136 = swift_allocObject(v135, 40, 7);
        *(_OWORD *)(v136 + 16) = v160;
        *(_QWORD *)(v136 + 32) = a1;
        v170[0] = (id)v136;
        specialized Array._endMutation()(v136);
        v137 = v170[0];
        v109[(v129 >> 6) + 8] |= 1 << v129;
        v124((char *)(v109[6] + *(_QWORD *)(v167 + 72) * v129), v166, v168);
        *(_QWORD *)(v109[7] + 8 * v129) = v137;
        v138 = v109[2];
        v139 = __OFADD__(v138, 1);
        v140 = v138 + 1;
        if (v139)
          goto LABEL_97;
        v109[2] = v140;
      }
      v102 = (unint64_t)v120;
      v108 = (uint64_t)v119;
      ++v110;
      a1 = v163;
      if (v165 == v119)
        goto LABEL_100;
    }
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    swift_bridgeObjectRetain(v102);
    v108 = _CocoaArrayWrapper.endIndex.getter(v141);
    swift_release(v102);
  }
  v109 = _swiftEmptyDictionarySingleton;
LABEL_100:
  swift_release(v102);
  v142 = swift_retain();
  v3 = (char **)sub_1001E8BC8(v142);
  swift_release(v109);
  v143 = v157;
  v144 = sub_1004F2D00((uint64_t)v3, a1);
  if (v143)
  {
    sub_10001C744((uint64_t)v151, _s9UtilitiesO12SortingStyleOMa);
    swift_release(v109);

    swift_release(v3);
LABEL_102:

  }
  else
  {
    v146 = v144;
    swift_release(v3);
    swift_retain();
    sub_1004F327C(v146, v109);
    v3 = v147;

    swift_release(v109);
    sub_10001C744((uint64_t)v151, _s9UtilitiesO12SortingStyleOMa);
    swift_bridgeObjectRelease();
    swift_release(v109);
  }
  return (uint64_t)v3;
}

uint64_t sub_1004F4380(uint64_t a1)
{
  uint64_t v1;
  char *v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  __n128 v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  uint64_t **v32;
  unint64_t *v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  unint64_t *v58;

  v3 = (char *)_s10PredicatesOMa(0);
  v4 = __chkstk_darwin(v3);
  v6 = (uint64_t)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = REMRemindersListDataView.SearchInvocation.Parameters.countCompleted.getter(v4);
  if ((v7 & 1) == 0)
    return 0;
  v9 = REMRemindersListDataView.SearchInvocation.Parameters.objectIDs.getter(v8);
  if ((v9 & 0xC000000000000001) != 0)
  {
    v10 = &_swiftEmptySetSingleton;
    v58 = (unint64_t *)&_swiftEmptySetSingleton;
    if (v9 >= 0)
      v9 &= 0xFFFFFFFFFFFFFF8uLL;
    v11 = __CocoaSet.makeIterator()(v9);
    v12 = __CocoaSet.Iterator.next()(v11);
    if (v12)
    {
      v13 = v12;
      v51 = v3;
      v52 = v6;
      v53 = a1;
      v54 = v7;
      v55 = v1;
      v14 = type metadata accessor for REMObjectID_Codable(0);
      v3 = (char *)&type metadata for Swift.AnyObject + 8;
      v6 = -1;
      while (1)
      {
        v56 = v13;
        swift_dynamicCast(&v57, &v56, (char *)&type metadata for Swift.AnyObject + 8, v14, 7);
        v22 = objc_msgSend(v57, "entityName");
        v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
        v25 = v24;

        v26 = objc_msgSend((id)objc_opt_self(REMReminder), "cdEntityName");
        v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        v29 = v28;

        if (v23 == v27 && v25 == v29)
          break;
        v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v27, v29, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v31 & 1) != 0)
          goto LABEL_18;

LABEL_10:
        v13 = __CocoaSet.Iterator.next()(v16);
        if (!v13)
        {
          v10 = v58;
          v6 = v52;
          v3 = v51;
          goto LABEL_31;
        }
      }
      swift_bridgeObjectRelease_n(v25, 2);
LABEL_18:
      v32 = (uint64_t **)v57;
      v33 = v58;
      v34 = v58[2];
      if (v58[3] <= v34)
      {
        sub_1002DEAB4(v34 + 1);
        v33 = v58;
      }
      v15 = (uint64_t)v32;
      v16 = NSObject._rawHashValue(seed:)(v33[5]);
      v17 = (char *)(v33 + 7);
      v18 = -1 << *((_BYTE *)v33 + 32);
      v19 = v16 & ~v18;
      v20 = v19 >> 6;
      if (((-1 << v19) & ~v33[(v19 >> 6) + 7]) != 0)
      {
        v21 = __clz(__rbit64((-1 << v19) & ~v33[(v19 >> 6) + 7])) | v19 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v35 = 0;
        v36 = (unint64_t)(63 - v18) >> 6;
        do
        {
          if (++v20 == v36 && (v35 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          v37 = v20 == v36;
          if (v20 == v36)
            v20 = 0;
          v35 |= v37;
          v38 = *(_QWORD *)&v17[8 * v20];
        }
        while (v38 == -1);
        v21 = __clz(__rbit64(~v38)) + (v20 << 6);
      }
      *(_QWORD *)&v17[(v21 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v21;
      *(_QWORD *)(v33[6] + 8 * v21) = v32;
      ++v33[2];
      goto LABEL_10;
    }
LABEL_31:
    swift_release(v11);
  }
  else
  {
    v10 = (void *)sub_10019BCD8(v9);
  }
  v15 = (uint64_t)sub_1001E8984((uint64_t)v10);
  swift_release(v10);
  if (v15 < 0 || (v15 & 0x4000000000000000) != 0)
  {
LABEL_37:
    v48 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    swift_bridgeObjectRetain(v15);
    v41 = _bridgeCocoaArray<A>(_:)(v49, v48);
    swift_release(v15);
  }
  else
  {
    swift_bridgeObjectRetain(v15);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v40);
    sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    v41 = v15;
  }
  swift_release(v15);
  *(_QWORD *)v6 = v41;
  swift_storeEnumTagMultiPayload(v6, v3, 20);
  sub_10000D2C0();
  v43 = v42;
  sub_10001C744(v6, _s10PredicatesOMa);
  v44 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v45 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v46 = objc_msgSend((id)swift_getObjCClassFromMetadata(v44), "entity");
  objc_msgSend(v45, "setEntity:", v46);

  objc_msgSend(v45, "setAffectedStores:", 0);
  objc_msgSend(v45, "setPredicate:", v43);
  v39 = NSManagedObjectContext.count<A>(for:)(v45, v44);

  return v39;
}

uint64_t sub_1004F4824(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_1004F486C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1004F48A8 + 4 * byte_1006C0360[a1]))(0xD000000000000030, 0x80000001006F50D0);
}

uint64_t sub_1004F48A8()
{
  uint64_t v0;

  return v0 + 18;
}

unint64_t sub_1004F48E0()
{
  return 0xD00000000000001BLL;
}

void sub_1004F48FC(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1004F494C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x72656767697274, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

void sub_1004F49C8(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1004F4A1C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6341746E65726170, 0xEF4449746E756F63);
  swift_bridgeObjectRelease(0xEF4449746E756F63);
  return Hasher._finalize()();
}

Swift::Int sub_1004F4AA4(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if ((a1 & 1) != 0)
    v2 = 0xD000000000000032;
  else
    v2 = 0xD000000000000021;
  if ((a1 & 1) != 0)
    v3 = 0x80000001006F4E60;
  else
    v3 = 0x80000001006F4E30;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_1004F4B28(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1004F4B7C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x44497473696CLL, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

Swift::Int sub_1004F4C1C(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if ((a1 & 1) != 0)
    v2 = 0xD000000000000016;
  else
    v2 = 0xD000000000000011;
  if ((a1 & 1) != 0)
    v3 = 0x80000001006F4270;
  else
    v3 = 0x80000001006F4250;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_1004F4CA0(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if ((a1 & 1) != 0)
    v2 = 0xD00000000000001ALL;
  else
    v2 = 0xD000000000000018;
  if ((a1 & 1) != 0)
    v3 = 0x80000001006F42B0;
  else
    v3 = 0x80000001006F4290;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_1004F4D24(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1004F4D74()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x64656E6769737361, 0xEC00000065746144);
  swift_bridgeObjectRelease(0xEC00000065746144);
  return Hasher._finalize()();
}

void sub_1004F4E24(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1004F4E74()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000017, 0x80000001006F4060);
  swift_bridgeObjectRelease(0x80000001006F4060);
  return Hasher._finalize()();
}

void sub_1004F4F20(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1004F4F70()
{
  uint64_t v1;

  String.hash(into:)(&v1, 6911093, 0xE300000000000000);
  swift_bridgeObjectRelease(0xE300000000000000);
  return Hasher._finalize()();
}

void sub_1004F4FF0(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1004F5040()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000017, 0x80000001006F4060);
  swift_bridgeObjectRelease(0x80000001006F4060);
  return Hasher._finalize()();
}

void sub_1004F50C4(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1004F5120()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0 + 18, 0x80000001006F5110);
  swift_bridgeObjectRelease(0x80000001006F5110);
  return Hasher._finalize()();
}

Swift::Int sub_1004F51A0(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v2 = 0xD00000000000001CLL;
  Hasher.init(_seed:)(v5, 0);
  if (a1)
  {
    if (a1 == 1)
    {
      v2 = 0xD00000000000001FLL;
      v3 = 0x80000001006F3F30;
    }
    else
    {
      v3 = 0x80000001006F3F50;
    }
  }
  else
  {
    v3 = 0x80000001006F3F10;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_1004F5244(char a1)
{
  unint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, 0);
  if ((a1 & 1) != 0)
    v2 = 0x80000001006F43A0;
  else
    v2 = 0x80000001006F4360;
  String.hash(into:)(v4, 0xD000000000000012, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

void sub_1004F52C0(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1004F5310()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000012, 0x80000001006F47A0);
  swift_bridgeObjectRelease(0x80000001006F47A0);
  return Hasher._finalize()();
}

uint64_t sub_1004F53D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _DWORD *v14;
  _QWORD v16[4];
  __int128 aBlock;
  uint64_t v18;

  v2 = v1;
  if (qword_1008377A0 != -1)
    swift_once(&qword_1008377A0, sub_1004F6614);
  v4 = type metadata accessor for Logger(0);
  sub_10001AAA8(v4, (uint64_t)qword_10084DA20);
  swift_retain(v1);
  sub_1004FA988(a1);
  swift_retain(v1);
  v5 = sub_1004FA988(a1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (_DWORD *)swift_slowAlloc(22, -1);
    v18 = swift_slowAlloc(64, -1);
    *v8 = 136446466;
    __asm { BR              X10 }
  }
  swift_release_n(v2, 2);
  sub_1004FA9B0(a1);
  sub_1004FA9B0(a1);

  *(_QWORD *)&aBlock = *(_QWORD *)(v2 + 120);
  __chkstk_darwin(v9);
  v16[2] = a1;
  v16[3] = v2;
  v10 = type metadata accessor for UnfairLock(0);
  swift_retain(aBlock);
  Lock.sync<A>(_:)(sub_1004FA9D8, v16, v10, &type metadata for Bool, &protocol witness table for UnfairLock);
  swift_release(aBlock);
  if (v18 == 1)
    __asm { BR              X9 }
  v11 = swift_retain_n(v2, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (_DWORD *)swift_slowAlloc(12, -1);
    *(_QWORD *)&aBlock = swift_slowAlloc(32, -1);
    *v14 = 136446210;
    __asm { BR              X10 }
  }

  return swift_release_n(v2, 2);
}

void sub_1004F5A28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0;
  if (qword_1008377A0 != -1)
    swift_once(&qword_1008377A0, sub_1004F6614);
  v2 = type metadata accessor for Logger(0);
  sub_10001AAA8(v2, (uint64_t)qword_10084DA20);
  v3 = swift_retain_n(v0, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (_DWORD *)swift_slowAlloc(12, -1);
    swift_slowAlloc(32, -1);
    *v6 = 136446210;
    __asm { BR              X10 }
  }

  swift_release_n(v1, 2);
  v7 = *(_QWORD *)(v1 + 120);
  v8 = type metadata accessor for UnfairLock(0);
  swift_retain(v7);
  Lock.sync<A>(_:)(sub_1004FAF00, v1, v8, &type metadata for () + 1, &protocol witness table for UnfairLock);
  swift_release(v7);
  __asm { BR              X10 }
}

void sub_1004F5D30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  char *v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t i;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  int64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[9];

  v4 = type metadata accessor for RDPermanentlyHiddenReminder(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v46 - v9;
  __chkstk_darwin(v11);
  v13 = (char *)&v46 - v12;
  __chkstk_darwin(v14);
  v16 = (char *)&v46 - v15;
  v17 = sub_10001A630((uint64_t *)&unk_100843FD0);
  v19 = __chkstk_darwin(v17);
  v20 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 != a2 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    v21 = 0;
    v22 = a1 + 56;
    v23 = 1 << *(_BYTE *)(a1 + 32);
    if (v23 < 64)
      v24 = ~(-1 << v23);
    else
      v24 = -1;
    v25 = v24 & *(_QWORD *)(a1 + 56);
    v26 = (unint64_t)(v23 + 63) >> 6;
    v53 = a2;
    v54 = a2 + 56;
    v49 = v5;
    v50 = a1;
    v47 = a1 + 56;
    v48 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    v46 = v26;
    if (v25)
      goto LABEL_7;
LABEL_8:
    v29 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
LABEL_36:
      __break(1u);
      return;
    }
    if (v29 < v26)
    {
      v30 = *(_QWORD *)(v22 + 8 * v29);
      v31 = v21 + 1;
      if (v30)
        goto LABEL_21;
      v31 = v21 + 2;
      if (v21 + 2 >= v26)
        goto LABEL_34;
      v30 = *(_QWORD *)(v22 + 8 * v31);
      if (v30)
        goto LABEL_21;
      v31 = v21 + 3;
      if (v21 + 3 >= v26)
        goto LABEL_34;
      v30 = *(_QWORD *)(v22 + 8 * v31);
      if (v30)
      {
LABEL_21:
        v27 = v4;
        v51 = (v30 - 1) & v30;
        v52 = v31;
        for (i = __clz(__rbit64(v30)) + (v31 << 6); ; i = __clz(__rbit64(v25)) | (v21 << 6))
        {
          v33 = *(_QWORD *)(v5 + 72);
          sub_10011FECC(*(_QWORD *)(a1 + 48) + v33 * i, (uint64_t)v20);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v20, 0, 1, v27);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v20, 1, v27) == 1)
            return;
          sub_10011FF10((uint64_t)v20, (uint64_t)v16);
          v34 = v53;
          Hasher.init(_seed:)(v55, *(_QWORD *)(v53 + 40));
          v35 = type metadata accessor for UUID(0);
          v36 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          dispatch thunk of Hashable.hash(into:)(v55, v35, v36);
          v4 = v27;
          v37 = v34;
          v38 = type metadata accessor for Date(0);
          v39 = sub_10009FC50(&qword_100843918, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          dispatch thunk of Hashable.hash(into:)(v55, v38, v39);
          v40 = Hasher._finalize()();
          v41 = -1 << *(_BYTE *)(v34 + 32);
          v42 = v40 & ~v41;
          if (((*(_QWORD *)(v54 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> v42) & 1) == 0)
          {
LABEL_32:
            sub_10011FF54((uint64_t)v16);
            return;
          }
          v43 = ~v41;
          while (1)
          {
            sub_10011FECC(*(_QWORD *)(v37 + 48) + v42 * v33, (uint64_t)v13);
            v44 = static UUID.== infix(_:_:)(v13, v16);
            sub_10011FECC((uint64_t)v13, (uint64_t)v10);
            sub_10011FECC((uint64_t)v16, (uint64_t)v7);
            if ((v44 & 1) != 0)
              break;
            sub_10011FF54((uint64_t)v7);
            sub_10011FF54((uint64_t)v10);
            sub_10011FF54((uint64_t)v13);
LABEL_26:
            v42 = (v42 + 1) & v43;
            if (((*(_QWORD *)(v54 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> v42) & 1) == 0)
              goto LABEL_32;
          }
          v45 = static Date.== infix(_:_:)(&v10[*(int *)(v4 + 20)], &v7[*(int *)(v4 + 20)]);
          sub_10011FF54((uint64_t)v7);
          sub_10011FF54((uint64_t)v10);
          sub_10011FF54((uint64_t)v13);
          if ((v45 & 1) == 0)
            goto LABEL_26;
          sub_10011FF54((uint64_t)v16);
          v5 = v49;
          a1 = v50;
          v22 = v47;
          v20 = v48;
          v26 = v46;
          v25 = v51;
          v21 = v52;
          if (!v51)
            goto LABEL_8;
LABEL_7:
          v27 = v4;
          v51 = (v25 - 1) & v25;
          v52 = v21;
        }
      }
      v32 = v21 + 4;
      if (v21 + 4 < v26)
      {
        v30 = *(_QWORD *)(v22 + 8 * v32);
        if (v30)
        {
          v31 = v21 + 4;
          goto LABEL_21;
        }
        while (1)
        {
          v31 = v32 + 1;
          if (__OFADD__(v32, 1))
            goto LABEL_36;
          if (v31 >= v26)
            break;
          v30 = *(_QWORD *)(v22 + 8 * v31);
          ++v32;
          if (v30)
            goto LABEL_21;
        }
      }
    }
LABEL_34:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56))(v20, 1, 1, v4, v19);
  }
}

Swift::Int sub_1004F6180(Swift::Int result, uint64_t a2)
{
  Swift::Int v3;
  int64_t v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  Swift::UInt v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[9];

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 56;
  v6 = 1 << *(_BYTE *)(result + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(result + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = a2 + 56;
  do
  {
LABEL_7:
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v4 << 6);
      goto LABEL_25;
    }
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      return result;
    }
    if (v13 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v4;
    if (v14)
      goto LABEL_24;
    v4 = v13 + 1;
    if (v13 + 1 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v4 = v13 + 2;
    if (v13 + 2 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v4 = v13 + 3;
    if (v13 + 3 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v15 = v13 + 4;
    if (v15 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        v4 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_35;
        if (v4 >= v9)
          return 1;
        v14 = *(_QWORD *)(v5 + 8 * v4);
        ++v15;
        if (v14)
          goto LABEL_24;
      }
    }
    v4 = v15;
LABEL_24:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_25:
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v12);
    Hasher.init(_seed:)(v21, *(_QWORD *)(a2 + 40));
    Hasher._combine(_:)(v16);
    result = Hasher._finalize()();
    v17 = -1 << *(_BYTE *)(a2 + 32);
    v18 = result & ~v17;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    v19 = *(_QWORD *)(a2 + 48);
  }
  while (*(unsigned __int8 *)(v19 + v18) == (_DWORD)v16);
  v20 = ~v17;
  while (1)
  {
    v18 = (v18 + 1) & v20;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    if (*(unsigned __int8 *)(v19 + v18) == (_DWORD)v16)
      goto LABEL_7;
  }
}

uint64_t sub_1004F6374(uint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t i;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  int64_t v32;
  int64_t v33;
  _QWORD v34[9];

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v31 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(result + 56);
  v32 = (unint64_t)(v4 + 63) >> 6;
  v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v33 = v3;
      v9 = v8 | (v3 << 6);
      goto LABEL_26;
    }
    v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v10 >= v32)
      return 1;
    v11 = *(_QWORD *)(v31 + 8 * v10);
    v12 = v3 + 1;
    if (!v11)
    {
      v12 = v3 + 2;
      if (v3 + 2 >= v32)
        return 1;
      v11 = *(_QWORD *)(v31 + 8 * v12);
      if (!v11)
      {
        v12 = v3 + 3;
        if (v3 + 3 >= v32)
          return 1;
        v11 = *(_QWORD *)(v31 + 8 * v12);
        if (!v11)
        {
          v12 = v3 + 4;
          if (v3 + 4 >= v32)
            return 1;
          v11 = *(_QWORD *)(v31 + 8 * v12);
          if (!v11)
            break;
        }
      }
    }
LABEL_25:
    v6 = (v11 - 1) & v11;
    v33 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_26:
    v14 = result;
    v15 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v9);
    v17 = *v15;
    v16 = v15[1];
    Hasher.init(_seed:)(v34, *(_QWORD *)(a2 + 40));
    swift_bridgeObjectRetain(v16);
    String.hash(into:)(v34, v17, v16);
    v18 = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(a2 + 32);
    v20 = v18 & ~v19;
    if (((*(_QWORD *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      goto LABEL_41;
    v21 = *(_QWORD *)(a2 + 48);
    v22 = (_QWORD *)(v21 + 16 * v20);
    v23 = v22[1];
    v24 = *v22 == v17 && v23 == v16;
    if (!v24 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v22, v23, v17, v16, 0) & 1) == 0)
    {
      v25 = ~v19;
      for (i = v20 + 1; ; i = v27 + 1)
      {
        v27 = i & v25;
        if (((*(_QWORD *)(v7 + (((i & v25) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v25)) & 1) == 0)
          break;
        v28 = (_QWORD *)(v21 + 16 * v27);
        v29 = v28[1];
        v30 = *v28 == v17 && v29 == v16;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v17, v16, 0) & 1) != 0)
          goto LABEL_7;
      }
LABEL_41:
      swift_bridgeObjectRelease(v16);
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease(v16);
    result = v14;
    v3 = v33;
  }
  v13 = v3 + 5;
  if (v3 + 5 >= v32)
    return 1;
  v11 = *(_QWORD *)(v31 + 8 * v13);
  if (v11)
  {
    v12 = v3 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v32)
      return 1;
    v11 = *(_QWORD *)(v31 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_25;
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_1004F6614()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084DA20);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084DA20);
  if (qword_100837628 != -1)
    swift_once(&qword_100837628, sub_1004A1838);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872058);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1004F66A4(char *a1)
{
  sub_1002B5218(*a1);
}

void sub_1004F66B0()
{
  char *v0;

  sub_1004F50C4(*v0);
}

void sub_1004F66B8(uint64_t a1)
{
  char *v1;

  sub_1002B612C(a1, *v1);
}

void sub_1004F66C0(uint64_t a1)
{
  char *v1;

  sub_1002B2000(a1, *v1);
}

unint64_t sub_1004F66C8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1004FAFF8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1004F66F4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1004F486C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1004F671C(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E12F0;
}

uint64_t sub_1004F672C(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_1004F6754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD aBlock[5];
  _QWORD *v28;

  v25 = a3;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (_QWORD *)swift_allocObject(&unk_1007F83F8, 48, 7);
  v16[2] = a4;
  v16[3] = a5;
  v16[4] = a1;
  v16[5] = a2;
  aBlock[4] = sub_1004FAFEC;
  v28 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007F8410;
  v17 = _Block_copy(aBlock);
  swift_retain();
  v18 = swift_retain();
  static DispatchQoS.unspecified.getter(v18);
  v26 = _swiftEmptyArrayStorage;
  v19 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = sub_10001A630((uint64_t *)&unk_100838000);
  v21 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v20, v21, v9, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release(v28);
}

uint64_t sub_1004F695C(void (*a1)(void), uint64_t a2, uint64_t (*a3)(_QWORD))
{
  a1();
  return a3(0);
}

void sub_1004F69CC(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *aBlock;

  v4 = v3;
  v21 = a3;
  v7 = *v3;
  v8 = type metadata accessor for UnfairLock.Options(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v3 + 5) = 0u;
  v12 = v3 + 5;
  *(_OWORD *)(v3 + 11) = 0u;
  *(_OWORD *)(v3 + 13) = 0u;
  *(_OWORD *)(v3 + 7) = 0u;
  *(_OWORD *)(v3 + 9) = 0u;
  if (qword_1008377A8 != -1)
    v9 = swift_once(&qword_1008377A8, sub_1004F990C);
  v13 = qword_10084DA40;
  aBlock = (_QWORD *)qword_10084DA40;
  __chkstk_darwin(v9);
  *((_BYTE *)&v20 - 16) = a1;
  *(&v20 - 1) = v7;
  v14 = type metadata accessor for UnfairLock(0);
  swift_retain(v13);
  Lock.sync<A>(_:)(sub_1004FAF20, &v20 - 4, v14, &type metadata for () + 1, &protocol witness table for UnfairLock);
  swift_release(aBlock);
  *((_BYTE *)v4 + 16) = a1;
  aBlock = _swiftEmptyArrayStorage;
  v15 = sub_10009FC50((unint64_t *)&qword_100838120, (uint64_t (*)(uint64_t))&type metadata accessor for UnfairLock.Options, (uint64_t)&protocol conformance descriptor for UnfairLock.Options);
  v16 = sub_10001A630((uint64_t *)&unk_10083DBB0);
  v17 = sub_1000A5F84((unint64_t *)&qword_100838130, (uint64_t *)&unk_10083DBB0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v16, v17, v8, v15);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v4[15] = UnfairLock.init(options:)(v11);
  *((_BYTE *)v4 + 17) = 0;
  v18 = v21;
  v4[3] = a2;
  v4[4] = v18;
  v19 = v4[14];
  *v12 = 0u;
  v12[1] = 0u;
  v12[2] = 0u;
  v12[3] = 0u;
  v12[4] = 0u;
  swift_retain(v18);
  swift_bridgeObjectRelease(v19);
  __asm { BR              X10 }
}

void sub_1004F6D48(char a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD v10[3];
  _BYTE v11[24];

  if (qword_1008377B0 != -1)
    swift_once(&qword_1008377B0, sub_1004F9A10);
  swift_beginAccess(&qword_10084DA48, v11, 0, 0);
  v2 = qword_10084DA48;
  swift_bridgeObjectRetain(qword_10084DA48);
  v3 = sub_1001B2B08(a1, v2);
  swift_bridgeObjectRelease(v2);
  if ((v3 & 1) != 0)
  {
    if (qword_1008377A0 != -1)
      swift_once(&qword_1008377A0, sub_1004F6614);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001AAA8(v4, (uint64_t)qword_10084DA20);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (_DWORD *)swift_slowAlloc(12, -1);
      v10[0] = swift_slowAlloc(32, -1);
      *v8 = 136446210;
      __asm { BR              X10 }
    }

  }
  else
  {
    swift_beginAccess(&qword_10084DA48, v10, 33, 0);
    sub_1002DD72C((uint64_t)&v9, a1);
    swift_endAccess(v10);
  }
}

void sub_1004F6FD0(_xpc_activity_s *a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t Strong;
  uint64_t v11;
  xpc_activity_state_t state;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  os_log_type_t v35;
  _DWORD *v36;
  uint64_t (*v37)();
  uint64_t v38;
  char v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD aBlock[5];
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[24];

  v6 = type metadata accessor for REM_os_activity.Options(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v53, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v11 = Strong;
    state = xpc_activity_get_state(a1);
    if (state)
    {
      if (state == 2)
      {
        if (qword_1008377A0 != -1)
          swift_once(&qword_1008377A0, sub_1004F6614);
        v28 = type metadata accessor for Logger(0);
        v29 = sub_10001AAA8(v28, (uint64_t)qword_10084DA20);
        v30 = Logger.logObject.getter(v29);
        v31 = static os_log_type_t.default.getter(v30);
        if (os_log_type_enabled(v30, v31))
        {
          v32 = (_DWORD *)swift_slowAlloc(12, -1);
          v49 = swift_slowAlloc(32, -1);
          aBlock[0] = v49;
          *v32 = 136446210;
          __asm { BR              X10 }
        }

        v38 = swift_allocObject(&unk_1007F8380, 32, 7);
        *(_QWORD *)(v38 + 16) = v11;
        *(_QWORD *)(v38 + 24) = a1;
        v40 = swift_allocObject(&unk_1007F83A8, 32, 7);
        v37 = sub_1004FAF8C;
        *(_QWORD *)(v40 + 16) = sub_1004FAF8C;
        *(_QWORD *)(v40 + 24) = v38;
        aBlock[4] = sub_1000A66B8;
        v51 = v40;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_1000098C4;
        aBlock[3] = &unk_1007F83C0;
        v41 = _Block_copy(aBlock);
        v42 = sub_10001A630((uint64_t *)&unk_10084DB90);
        v43 = swift_allocObject(v42, ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72), *(unsigned __int8 *)(v7 + 80) | 7);
        *(_OWORD *)(v43 + 16) = xmmword_1006A3C00;
        swift_retain(v11);
        v44 = swift_unknownObjectRetain(a1);
        static REM_os_activity.Options.ifNonePresent.getter(v44);
        v52 = v43;
        v45 = sub_10009FC50((unint64_t *)&qword_1008406C0, (uint64_t (*)(uint64_t))&type metadata accessor for REM_os_activity.Options, (uint64_t)&protocol conformance descriptor for REM_os_activity.Options);
        v46 = sub_10001A630((uint64_t *)&unk_10084DBA0);
        v47 = sub_1000A5F84((unint64_t *)&qword_1008406C8, (uint64_t *)&unk_10084DBA0, (uint64_t)&protocol conformance descriptor for [A]);
        dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v46, v47, v6, v45);
        static REM_os_activity.initiate(_:dso:options:execute:)("RDDynamicXPCActivity CHECKIN", 28, 2, &_mh_execute_header, v9, v41);
        _Block_release(v41);
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        swift_release(v51);
        goto LABEL_29;
      }
      if (state == 3)
      {
        if (qword_1008377A0 != -1)
          swift_once(&qword_1008377A0, sub_1004F6614);
        v13 = type metadata accessor for Logger(0);
        v14 = sub_10001AAA8(v13, (uint64_t)qword_10084DA20);
        v15 = Logger.logObject.getter(v14);
        v16 = static os_log_type_t.default.getter(v15);
        if (os_log_type_enabled(v15, v16))
        {
          v17 = (_DWORD *)swift_slowAlloc(12, -1);
          aBlock[0] = swift_slowAlloc(32, -1);
          *v17 = 136446210;
          __asm { BR              X10 }
        }

        v37 = 0;
        v38 = 0;
        v39 = 1;
        goto LABEL_30;
      }
      if (qword_1008377A0 != -1)
        swift_once(&qword_1008377A0, sub_1004F6614);
      v33 = type metadata accessor for Logger(0);
      v34 = sub_10001AAA8(v33, (uint64_t)qword_10084DA20);
      v25 = Logger.logObject.getter(v34);
      v35 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v25, v35))
      {
        v36 = (_DWORD *)swift_slowAlloc(22, -1);
        aBlock[0] = swift_slowAlloc(32, -1);
        *v36 = 136446466;
        __asm { BR              X10 }
      }
    }
    else
    {
      if (qword_1008377A0 != -1)
        swift_once(&qword_1008377A0, sub_1004F6614);
      v23 = type metadata accessor for Logger(0);
      v24 = sub_10001AAA8(v23, (uint64_t)qword_10084DA20);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.default.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (_DWORD *)swift_slowAlloc(12, -1);
        aBlock[0] = swift_slowAlloc(32, -1);
        *v27 = 136446210;
        __asm { BR              X10 }
      }
    }

    v37 = 0;
    v38 = 0;
LABEL_29:
    v39 = 0;
LABEL_30:
    *(_BYTE *)(v11 + 17) = v39;
    swift_release(v11);
    sub_1000A5C24((uint64_t)v37, v38);
    return;
  }
  if (qword_1008377A0 != -1)
    swift_once(&qword_1008377A0, sub_1004F6614);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_10001AAA8(v18, (uint64_t)qword_10084DA20);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (_DWORD *)swift_slowAlloc(12, -1);
    aBlock[0] = swift_slowAlloc(32, -1);
    *v22 = 136446210;
    __asm { BR              X10 }
  }

}

uint64_t sub_1004F7AB0(_xpc_activity_s *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _DWORD *v8;
  uint64_t v9;
  char v10;
  Swift::String v11;
  Swift::String v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(void (*), uint64_t);
  uint64_t v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = v1;
  if (qword_1008377A0 != -1)
    swift_once(&qword_1008377A0, sub_1004F6614);
  v4 = type metadata accessor for Logger(0);
  sub_10001AAA8(v4, (uint64_t)qword_10084DA20);
  v5 = swift_retain_n(v1, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (_DWORD *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    *v8 = 136446210;
    __asm { BR              X10 }
  }

  swift_release_n(v2, 2);
  if (xpc_activity_set_state(a1, 4))
  {
    v30 = *(_QWORD *)(v2 + 120);
    v9 = type metadata accessor for UnfairLock(0);
    swift_retain(v30);
    Lock.sync<A>(_:)(sub_1004FAA5C, v2, v9, &type metadata for () + 1, &protocol witness table for UnfairLock);
    swift_release(v30);
    v10 = *(_BYTE *)(v2 + 16);
    v30 = 0;
    v31 = 0xE000000000000000;
    v11._countAndFlagsBits = 0x7669746341637078;
    v11._object = (void *)0xEC0000005B797469;
    String.append(_:)(v11);
    LOBYTE(v32) = v10;
    _print_unlocked<A, B>(_:_:)(&v32, &v30, &type metadata for RDDynamicXPCActivity.Identifier, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v12._countAndFlagsBits = 93;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    v14 = v30;
    v13 = v31;
    v15 = swift_bridgeObjectRetain_n(v31, 2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v30 = v19;
      *(_DWORD *)v18 = 136446210;
      swift_bridgeObjectRetain(v13);
      v32 = sub_10001A820(v14, v13, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
      swift_bridgeObjectRelease_n(v13, 3);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "os_transaction INIT {name: %{public}s}", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v13, 2);
    }
    v24 = String.utf8CString.getter(v14, v13);
    v25 = os_transaction_create(v24 + 32);
    swift_release(v24);
    v27 = *(void (**)(void (*), uint64_t))(v2 + 24);
    v26 = *(_QWORD *)(v2 + 32);
    v28 = swift_allocObject(&unk_1007F8308, 56, 7);
    *(_QWORD *)(v28 + 16) = a1;
    *(_BYTE *)(v28 + 24) = v10;
    *(_QWORD *)(v28 + 32) = v14;
    *(_QWORD *)(v28 + 40) = v13;
    *(_QWORD *)(v28 + 48) = v25;
    swift_retain(v26);
    swift_unknownObjectRetain(a1);
    swift_unknownObjectRetain(v25);
    v27(sub_1004FAA98, v28);
    swift_unknownObjectRelease(v25);
    swift_release(v26);
    return swift_release(v28);
  }
  else
  {
    v20 = swift_retain_n(v2, 2);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (_DWORD *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      *v23 = 136446210;
      __asm { BR              X10 }
    }

    return swift_release_n(v2, 2);
  }
}

Swift::Int sub_1004F8100@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int result;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v5 = a2[5];
  v4 = a2[6];
  v7 = a2[7];
  v6 = a2[8];
  v9 = a2[9];
  v8 = a2[10];
  v11 = a2[11];
  v10 = a2[12];
  v12 = a2[13];
  v13 = a2[14];
  if (v13)
  {
    *(_QWORD *)&v23 = a2[5];
    *((_QWORD *)&v23 + 1) = v4;
    *(_QWORD *)&v24 = v7;
    *((_QWORD *)&v24 + 1) = v6;
    v25 = v9;
    LOWORD(v26) = v8;
    BYTE2(v26) = BYTE2(v8);
    BYTE3(v26) = BYTE3(v8);
    BYTE4(v26) = BYTE4(v8);
    v27 = v11;
    LOWORD(v28) = v10 & 0xFF01;
    BYTE2(v28) = BYTE2(v10);
    BYTE3(v28) = BYTE3(v10);
    BYTE4(v28) = BYTE4(v10);
    BYTE5(v28) = BYTE5(v10);
    BYTE6(v28) = BYTE6(v10);
    HIBYTE(v28) = HIBYTE(v10);
    LOWORD(v29) = v12 & 0xFF01;
    BYTE2(v29) = BYTE2(v12);
    v30 = v13;
    result = sub_1004FAB74(a1, (uint64_t)&v23);
    v15 = result ^ 1;
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 48);
    v17 = *(_QWORD *)(a1 + 32);
    v18 = *(_QWORD *)(a1 + 72);
    v19 = *(unsigned int *)(a1 + 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 44) << 32);
    v20 = ((unint64_t)*(unsigned __int8 *)(a1 + 57) << 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 58) << 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 59) << 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 60) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 61) << 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 62) << 48) | ((unint64_t)*(unsigned __int8 *)(a1 + 63) << 56) | *(_BYTE *)(a1 + 56) & 1;
    v21 = *(_OWORD *)(a1 + 16);
    v22 = *(_BYTE *)(a1 + 64) & 1 | ((unint64_t)*(unsigned __int8 *)(a1 + 66) << 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 65) << 8);
    v23 = *(_OWORD *)a1;
    v24 = v21;
    v25 = v17;
    v26 = v19;
    v27 = v16;
    v28 = v20;
    v29 = v22;
    v30 = v18;
    v31 = v5;
    v32 = v4;
    v33 = v7;
    v34 = v6;
    v35 = v9;
    v36 = v8;
    v37 = v11;
    v38 = v10;
    v39 = v12;
    v40 = 0;
    sub_1004FA988(a1);
    result = sub_1004FAAAC((uint64_t)&v23);
    v15 = 1;
  }
  *a3 = v15 & 1;
  return result;
}

void sub_1004F82B0(_xpc_activity_s *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t Strong;
  uint64_t v13;
  xpc_activity_state_t state;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  os_log_type_t v42;
  _DWORD *v43;
  uint64_t (*v44)();
  uint64_t v45;
  char v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD aBlock[5];
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[24];

  v8 = type metadata accessor for REM_os_activity.Options(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v60, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v13 = Strong;
    state = xpc_activity_get_state(a1);
    if (state)
    {
      if (state == 2)
      {
        if (qword_1008377A0 != -1)
          swift_once(&qword_1008377A0, sub_1004F6614);
        v35 = type metadata accessor for Logger(0);
        v36 = sub_10001AAA8(v35, (uint64_t)qword_10084DA20);
        v37 = Logger.logObject.getter(v36);
        v38 = static os_log_type_t.default.getter(v37);
        if (os_log_type_enabled(v37, v38))
        {
          v39 = (_DWORD *)swift_slowAlloc(12, -1);
          v56 = swift_slowAlloc(32, -1);
          aBlock[0] = v56;
          *v39 = 136446210;
          __asm { BR              X10 }
        }

        v45 = swift_allocObject(&unk_1007F8290, 32, 7);
        *(_QWORD *)(v45 + 16) = v13;
        *(_QWORD *)(v45 + 24) = a1;
        v47 = swift_allocObject(&unk_1007F82B8, 32, 7);
        v44 = sub_1004FB490;
        *(_QWORD *)(v47 + 16) = sub_1004FB490;
        *(_QWORD *)(v47 + 24) = v45;
        aBlock[4] = sub_1000098E4;
        v58 = v47;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_1000098C4;
        aBlock[3] = &unk_1007F82D0;
        v48 = _Block_copy(aBlock);
        v49 = sub_10001A630((uint64_t *)&unk_10084DB90);
        v50 = swift_allocObject(v49, ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72), *(unsigned __int8 *)(v9 + 80) | 7);
        *(_OWORD *)(v50 + 16) = xmmword_1006A3C00;
        swift_retain(v13);
        v51 = swift_unknownObjectRetain(a1);
        static REM_os_activity.Options.ifNonePresent.getter(v51);
        v59 = v50;
        v52 = sub_10009FC50((unint64_t *)&qword_1008406C0, (uint64_t (*)(uint64_t))&type metadata accessor for REM_os_activity.Options, (uint64_t)&protocol conformance descriptor for REM_os_activity.Options);
        v53 = sub_10001A630((uint64_t *)&unk_10084DBA0);
        v54 = sub_1000A5F84((unint64_t *)&qword_1008406C8, (uint64_t *)&unk_10084DBA0, (uint64_t)&protocol conformance descriptor for [A]);
        dispatch thunk of SetAlgebra.init<A>(_:)(&v59, v53, v54, v8, v52);
        static REM_os_activity.initiate(_:dso:options:execute:)("RDDynamicXPCActivity UPDATE", 27, 2, &_mh_execute_header, v11, v48);
        _Block_release(v48);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        swift_release(v58);
        goto LABEL_30;
      }
      if (state == 3)
      {
        if (qword_1008377A0 != -1)
          swift_once(&qword_1008377A0, sub_1004F6614);
        v15 = type metadata accessor for Logger(0);
        v16 = sub_10001AAA8(v15, (uint64_t)qword_10084DA20);
        v17 = Logger.logObject.getter(v16);
        v18 = static os_log_type_t.default.getter(v17);
        if (os_log_type_enabled(v17, v18))
        {
          v19 = (_DWORD *)swift_slowAlloc(12, -1);
          aBlock[0] = swift_slowAlloc(32, -1);
          *v19 = 136446210;
          __asm { BR              X10 }
        }

        v44 = 0;
        v45 = 0;
        v46 = 1;
        goto LABEL_31;
      }
      if (qword_1008377A0 != -1)
        swift_once(&qword_1008377A0, sub_1004F6614);
      v40 = type metadata accessor for Logger(0);
      v41 = sub_10001AAA8(v40, (uint64_t)qword_10084DA20);
      v32 = Logger.logObject.getter(v41);
      v42 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v32, v42))
      {
        v43 = (_DWORD *)swift_slowAlloc(22, -1);
        aBlock[0] = swift_slowAlloc(32, -1);
        *v43 = 136446466;
        __asm { BR              X10 }
      }
    }
    else
    {
      aBlock[0] = *(_QWORD *)(v13 + 120);
      v25 = aBlock[0];
      v26 = __chkstk_darwin(0);
      *(&v55 - 2) = v13;
      *(&v55 - 1) = a4;
      v27 = type metadata accessor for UnfairLock(v26);
      swift_retain(v25);
      Lock.sync<A>(_:)(sub_1004FAA54, &v55 - 4, v27, &type metadata for () + 1, &protocol witness table for UnfairLock);
      swift_release(aBlock[0]);
      sub_1004F8F98();
      v29 = v28;
      xpc_activity_set_criteria(a1, v28);
      swift_unknownObjectRelease(v29);
      if (qword_1008377A0 != -1)
        swift_once(&qword_1008377A0, sub_1004F6614);
      v30 = type metadata accessor for Logger(0);
      sub_10001AAA8(v30, (uint64_t)qword_10084DA20);
      sub_1004FA988(a4);
      v31 = sub_1004FA988(a4);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (_DWORD *)swift_slowAlloc(22, -1);
        v59 = swift_slowAlloc(64, -1);
        *v34 = 136446466;
        __asm { BR              X10 }
      }
      sub_1004FA9B0(a4);
      sub_1004FA9B0(a4);
    }

    v44 = 0;
    v45 = 0;
LABEL_30:
    v46 = 0;
LABEL_31:
    *(_BYTE *)(v13 + 17) = v46;
    swift_release(v13);
    sub_1000A5C24((uint64_t)v44, v45);
    return;
  }
  if (qword_1008377A0 != -1)
    swift_once(&qword_1008377A0, sub_1004F6614);
  v20 = type metadata accessor for Logger(0);
  v21 = sub_10001AAA8(v20, (uint64_t)qword_10084DA20);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (_DWORD *)swift_slowAlloc(12, -1);
    aBlock[0] = swift_slowAlloc(32, -1);
    *v24 = 136446210;
    __asm { BR              X10 }
  }

}

uint64_t sub_1004F8EE0(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_BYTE *)(a2 + 64);
  v7 = *(unsigned __int8 *)(a2 + 65);
  v8 = *(unsigned __int8 *)(a2 + 66);
  v9 = *(_QWORD *)(a2 + 72);
  v10 = *(unsigned int *)(a2 + 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 44) << 32);
  v11 = ((unint64_t)*(unsigned __int8 *)(a2 + 57) << 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 58) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 59) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 60) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 61) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 62) << 48) | ((unint64_t)*(unsigned __int8 *)(a2 + 63) << 56) | *(_BYTE *)(a2 + 56) & 1;
  v12 = *(_QWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 72) = v4;
  *(_QWORD *)(a1 + 80) = v10;
  *(_QWORD *)(a1 + 88) = v5;
  *(_QWORD *)(a1 + 96) = v11;
  *(_QWORD *)(a1 + 104) = (v7 << 8) | (v8 << 16) | v6 & 1;
  *(_QWORD *)(a1 + 112) = v9;
  swift_bridgeObjectRelease(v12);
  return sub_1004FA988(a2);
}

void sub_1004F8F98()
{
  uint64_t v0;
  xpc_object_t v1;
  const char **v2;
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  const char *v19;
  const char *v20;
  const char *v21;
  const char *v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  int v28;
  const char *v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  _BYTE v40[13];
  char v41;
  char v42;
  char v43;
  _BYTE v44[48];
  __int128 v45;
  _OWORD v46[2];
  BOOL value[16];
  _BYTE v48[25];
  char v49;
  char v50;
  char v51;
  double v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  _BYTE v64[16];
  _BYTE v65[16];
  _BYTE v66[16];
  double v67;
  char v68;
  double v69;
  char v70;
  double v71;
  char v72;

  v1 = xpc_dictionary_create(0, 0, 0);
  sub_1000A5CA8(v0, (uint64_t)v44, &qword_10084DBB0);
  sub_1000A5CA8((uint64_t)v44, (uint64_t)&v45, &qword_10084DBB0);
  if ((unint64_t)BYTE9(v45) << 8 != 512)
  {
    *(_OWORD *)value = v45;
    *(_OWORD *)v48 = v46[0];
    *(_OWORD *)&v48[9] = *(_OWORD *)((char *)v46 + 9);
    sub_1000A5CA8((uint64_t)value, (uint64_t)v64, &qword_100842580);
    sub_1000A5CA8((uint64_t)v64, (uint64_t)&v71, &qword_100842580);
    if ((v72 & 1) == 0)
    {
      if ((~*(_QWORD *)&v71 & 0x7FF0000000000000) == 0)
      {
LABEL_93:
        __break(1u);
        goto LABEL_94;
      }
      if (v71 <= -9.22337204e18)
      {
LABEL_94:
        __break(1u);
        goto LABEL_95;
      }
      if (v71 >= 9.22337204e18)
      {
LABEL_96:
        __break(1u);
        goto LABEL_97;
      }
      xpc_dictionary_set_int64(v1, XPC_ACTIVITY_INTERVAL, (uint64_t)v71);
    }
    xpc_dictionary_set_BOOL(v1, XPC_ACTIVITY_REPEATING, value[9]);
    sub_1000A5CA8((uint64_t)v48, (uint64_t)v65, &qword_100842580);
    sub_1000A5CA8((uint64_t)v65, (uint64_t)&v69, &qword_100842580);
    if ((v70 & 1) == 0)
    {
      if ((~*(_QWORD *)&v69 & 0x7FF0000000000000) == 0)
      {
LABEL_95:
        __break(1u);
        goto LABEL_96;
      }
      if (v69 <= -9.22337204e18)
      {
LABEL_97:
        __break(1u);
        goto LABEL_98;
      }
      if (v69 >= 9.22337204e18)
      {
LABEL_99:
        __break(1u);
        goto LABEL_100;
      }
      xpc_dictionary_set_int64(v1, XPC_ACTIVITY_DELAY, (uint64_t)v69);
    }
    sub_1000A5CA8((uint64_t)&v48[16], (uint64_t)v66, &qword_100842580);
    sub_1000A5CA8((uint64_t)v66, (uint64_t)&v67, &qword_100842580);
    if ((v68 & 1) == 0)
    {
      if ((~*(_QWORD *)&v67 & 0x7FF0000000000000) == 0)
      {
LABEL_98:
        __break(1u);
        goto LABEL_99;
      }
      if (v67 <= -9.22337204e18)
      {
LABEL_100:
        __break(1u);
        goto LABEL_101;
      }
      if (v67 >= 9.22337204e18)
      {
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
        goto LABEL_104;
      }
      xpc_dictionary_set_int64(v1, XPC_ACTIVITY_GRACE_PERIOD, (uint64_t)v67);
    }
  }
  sub_1000A5CA8(v0 + 41, (uint64_t)&v43, &qword_10084DBB8);
  sub_1000A5CA8((uint64_t)&v43, (uint64_t)&v49, &qword_10084DBB8);
  if (v49 != 2)
  {
    if ((v49 & 1) != 0)
      v2 = (const char **)&XPC_ACTIVITY_PRIORITY_UTILITY;
    else
      v2 = (const char **)&XPC_ACTIVITY_PRIORITY_MAINTENANCE;
    xpc_dictionary_set_string(v1, XPC_ACTIVITY_PRIORITY, *v2);
  }
  sub_1000A5CA8(v0 + 42, (uint64_t)&v42, (uint64_t *)&unk_10084DBC0);
  sub_1000A5CA8((uint64_t)&v42, (uint64_t)&v50, (uint64_t *)&unk_10084DBC0);
  if (v50 != 2)
    xpc_dictionary_set_BOOL(v1, XPC_ACTIVITY_ALLOW_BATTERY, v50 & 1);
  sub_1000A5CA8(v0 + 43, (uint64_t)&v41, (uint64_t *)&unk_10084DBC0);
  sub_1000A5CA8((uint64_t)&v41, (uint64_t)&v51, (uint64_t *)&unk_10084DBC0);
  if (v51 != 2)
    xpc_dictionary_set_BOOL(v1, XPC_ACTIVITY_REQUIRE_SCREEN_SLEEP, v51 & 1);
  v3 = (const char *)XPC_ACTIVITY_EXPECTED_DURATION;
  if (!XPC_ACTIVITY_EXPECTED_DURATION)
  {
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }
  sub_1000A5CA8(v0 + 48, (uint64_t)v40, &qword_100842580);
  sub_1000A5CA8((uint64_t)v40, (uint64_t)&v52, &qword_100842580);
  if ((v53 & 1) != 0)
    goto LABEL_32;
  if ((~*(_QWORD *)&v52 & 0x7FF0000000000000) == 0)
    goto LABEL_90;
  if (v52 <= -9.22337204e18)
  {
LABEL_91:
    __break(1u);
  }
  else if (v52 < 9.22337204e18)
  {
    xpc_dictionary_set_int64(v1, v3, (uint64_t)v52);
LABEL_32:
    v4 = (const char *)XPC_ACTIVITY_CPU_INTENSIVE;
    if (XPC_ACTIVITY_CPU_INTENSIVE)
    {
      sub_1000A5CA8(v0 + 57, (uint64_t)&v39, (uint64_t *)&unk_10084DBC0);
      sub_1000A5CA8((uint64_t)&v39, (uint64_t)&v54, (uint64_t *)&unk_10084DBC0);
      if (v54 != 2)
        xpc_dictionary_set_BOOL(v1, v4, v54 & 1);
      v5 = (const char *)XPC_ACTIVITY_MEMORY_INTENSIVE;
      if (XPC_ACTIVITY_MEMORY_INTENSIVE)
      {
        sub_1000A5CA8(v0 + 58, (uint64_t)&v38, (uint64_t *)&unk_10084DBC0);
        sub_1000A5CA8((uint64_t)&v38, (uint64_t)&v55, (uint64_t *)&unk_10084DBC0);
        if (v55 != 2)
          xpc_dictionary_set_BOOL(v1, v5, v55 & 1);
        v6 = (const char *)XPC_ACTIVITY_DISK_INTENSIVE;
        if (XPC_ACTIVITY_DISK_INTENSIVE)
        {
          sub_1000A5CA8(v0 + 59, (uint64_t)&v37, (uint64_t *)&unk_10084DBC0);
          sub_1000A5CA8((uint64_t)&v37, (uint64_t)&v56, (uint64_t *)&unk_10084DBC0);
          if (v56 != 2)
            xpc_dictionary_set_BOOL(v1, v6, v56 & 1);
          v7 = (const char *)XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY;
          if (XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
          {
            sub_1000A5CA8(v0 + 62, (uint64_t)&v36, (uint64_t *)&unk_10084DBC0);
            sub_1000A5CA8((uint64_t)&v36, (uint64_t)&v57, (uint64_t *)&unk_10084DBC0);
            if (v57 != 2)
              xpc_dictionary_set_BOOL(v1, v7, v57 & 1);
            v8 = (const char *)XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY;
            if (XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
            {
              sub_1000A5CA8(v0 + 63, (uint64_t)&v35, (uint64_t *)&unk_10084DBC0);
              sub_1000A5CA8((uint64_t)&v35, (uint64_t)&v58, (uint64_t *)&unk_10084DBC0);
              if (v58 != 2)
                xpc_dictionary_set_BOOL(v1, v8, v58 & 1);
              v9 = (const char *)XPC_ACTIVITY_MAY_REBOOT_DEVICE;
              if (XPC_ACTIVITY_MAY_REBOOT_DEVICE)
              {
                sub_1000A5CA8(v0 + 60, (uint64_t)&v34, (uint64_t *)&unk_10084DBC0);
                sub_1000A5CA8((uint64_t)&v34, (uint64_t)&v59, (uint64_t *)&unk_10084DBC0);
                if (v59 != 2)
                  xpc_dictionary_set_BOOL(v1, v9, v59 & 1);
                v10 = (const char *)XPC_ACTIVITY_REQUIRE_SIGNIFICANT_USER_INACTIVITY;
                if (XPC_ACTIVITY_REQUIRE_SIGNIFICANT_USER_INACTIVITY)
                {
                  sub_1000A5CA8(v0 + 61, (uint64_t)&v33, (uint64_t *)&unk_10084DBC0);
                  sub_1000A5CA8((uint64_t)&v33, (uint64_t)&v60, (uint64_t *)&unk_10084DBC0);
                  if (v60 != 2)
                    xpc_dictionary_set_BOOL(v1, v10, v60 & 1);
                  if (XPC_ACTIVITY_POWER_NAP)
                  {
                    xpc_dictionary_set_BOOL(v1, XPC_ACTIVITY_POWER_NAP, *(_BYTE *)(v0 + 64));
                    v11 = (const char *)XPC_ACTIVITY_SHOULD_WAKE_DEVICE;
                    if (XPC_ACTIVITY_SHOULD_WAKE_DEVICE)
                    {
                      sub_1000A5CA8(v0 + 44, (uint64_t)&v32, (uint64_t *)&unk_10084DBC0);
                      sub_1000A5CA8((uint64_t)&v32, (uint64_t)&v61, (uint64_t *)&unk_10084DBC0);
                      if (v61 != 2)
                        xpc_dictionary_set_BOOL(v1, v11, v61 & 1);
                      v12 = *(_QWORD *)(v0 + 72);
                      v13 = v12 + 56;
                      v14 = 1 << *(_BYTE *)(v12 + 32);
                      v15 = -1;
                      if (v14 < 64)
                        v15 = ~(-1 << v14);
                      v16 = v15 & *(_QWORD *)(v12 + 56);
                      sub_1004FA988(v0);
                      v17 = 0;
                      v18 = (unint64_t)(v14 + 63) >> 6;
                      v19 = (const char *)XPC_ACTIVITY_REQUIRES_CLASS_C;
                      v20 = (const char *)XPC_ACTIVITY_REQUIRES_CLASS_B;
                      v21 = (const char *)XPC_ACTIVITY_REQUIRES_CLASS_A;
                      while (1)
                      {
                        if (v16)
                        {
                          v23 = __clz(__rbit64(v16));
                          v16 &= v16 - 1;
                          v24 = v23 | (v17 << 6);
                        }
                        else
                        {
                          v25 = v17 + 1;
                          if (__OFADD__(v17, 1))
                          {
                            __break(1u);
                            goto LABEL_89;
                          }
                          if (v25 >= v18)
                            goto LABEL_84;
                          v26 = *(_QWORD *)(v13 + 8 * v25);
                          ++v17;
                          if (!v26)
                          {
                            v17 = v25 + 1;
                            if (v25 + 1 >= v18)
                              goto LABEL_84;
                            v26 = *(_QWORD *)(v13 + 8 * v17);
                            if (!v26)
                            {
                              v17 = v25 + 2;
                              if (v25 + 2 >= v18)
                                goto LABEL_84;
                              v26 = *(_QWORD *)(v13 + 8 * v17);
                              if (!v26)
                              {
                                v27 = v25 + 3;
                                if (v27 >= v18)
                                  goto LABEL_84;
                                v26 = *(_QWORD *)(v13 + 8 * v27);
                                if (!v26)
                                {
                                  while (1)
                                  {
                                    v17 = v27 + 1;
                                    if (__OFADD__(v27, 1))
                                      break;
                                    if (v17 >= v18)
                                      goto LABEL_84;
                                    v26 = *(_QWORD *)(v13 + 8 * v17);
                                    ++v27;
                                    if (v26)
                                      goto LABEL_77;
                                  }
LABEL_89:
                                  __break(1u);
LABEL_90:
                                  __break(1u);
                                  goto LABEL_91;
                                }
                                v17 = v27;
                              }
                            }
                          }
LABEL_77:
                          v16 = (v26 - 1) & v26;
                          v24 = __clz(__rbit64(v26)) + (v17 << 6);
                        }
                        v28 = *(unsigned __int8 *)(*(_QWORD *)(v12 + 48) + v24);
                        if (v28)
                        {
                          if (v28 == 1)
                          {
                            v22 = v20;
                            if (!v20)
                              goto LABEL_103;
                          }
                          else
                          {
                            v22 = v19;
                            if (!v19)
                            {
                              __break(1u);
LABEL_84:
                              swift_release(v12);
                              v29 = (const char *)XPC_ACTIVITY_COMMUNICATES_WITH_PAIRED_DEVICE;
                              if (XPC_ACTIVITY_COMMUNICATES_WITH_PAIRED_DEVICE)
                              {
                                sub_1000A5CA8(v0 + 65, (uint64_t)&v31, (uint64_t *)&unk_10084DBC0);
                                sub_1000A5CA8((uint64_t)&v31, (uint64_t)&v62, (uint64_t *)&unk_10084DBC0);
                                if (v62 != 2)
                                  xpc_dictionary_set_BOOL(v1, v29, v62 & 1);
                                sub_1000A5CA8(v0 + 66, (uint64_t)&v30, (uint64_t *)&unk_10084DBD0);
                                sub_1000A5CA8((uint64_t)&v30, (uint64_t)&v63, (uint64_t *)&unk_10084DBD0);
                                __asm { BR              X10 }
                              }
LABEL_114:
                              __break(1u);
                              JUMPOUT(0x1004F98D0);
                            }
                          }
                        }
                        else
                        {
                          v22 = v21;
                          if (!v21)
                            goto LABEL_102;
                        }
                        xpc_dictionary_set_BOOL(v1, v22, 1);
                      }
                    }
LABEL_113:
                    __break(1u);
                    goto LABEL_114;
                  }
LABEL_112:
                  __break(1u);
                  goto LABEL_113;
                }
LABEL_111:
                __break(1u);
                goto LABEL_112;
              }
LABEL_110:
              __break(1u);
              goto LABEL_111;
            }
LABEL_109:
            __break(1u);
            goto LABEL_110;
          }
LABEL_108:
          __break(1u);
          goto LABEL_109;
        }
LABEL_107:
        __break(1u);
        goto LABEL_108;
      }
LABEL_106:
      __break(1u);
      goto LABEL_107;
    }
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }
  __break(1u);
  goto LABEL_93;
}

uint64_t sub_1004F98F8@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 112) != 0;
  return result;
}

uint64_t sub_1004F990C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;

  v0 = type metadata accessor for UnfairLock.Options(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = _swiftEmptyArrayStorage;
  v4 = sub_10009FC50((unint64_t *)&qword_100838120, v3, (uint64_t)&protocol conformance descriptor for UnfairLock.Options);
  v5 = sub_10001A630((uint64_t *)&unk_10083DBB0);
  v6 = sub_1000A5F84((unint64_t *)&qword_100838130, (uint64_t *)&unk_10083DBB0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v10, v5, v6, v0, v4);
  v7 = type metadata accessor for UnfairLock(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  result = UnfairLock.init(options:)(v2);
  qword_10084DA40 = result;
  return result;
}

void sub_1004F9A10()
{
  qword_10084DA48 = (uint64_t)&_swiftEmptySetSingleton;
}

double sub_1004F9A24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  double result;

  if (qword_1008377A0 != -1)
    swift_once(&qword_1008377A0, sub_1004F6614);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001AAA8(v2, (uint64_t)qword_10084DA20);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Clearing l_pendingCriteria", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = *(_QWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v7).n128_u64[0];
  return result;
}

void sub_1004F9B10(unsigned __int8 a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (xpc_activity_set_completion_status(a2, a1))
  {
    if (qword_1008377A0 != -1)
      swift_once(&qword_1008377A0, sub_1004F6614);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10001AAA8(v8, (uint64_t)qword_10084DA20);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (_DWORD *)swift_slowAlloc(22, -1);
      v24 = swift_slowAlloc(64, -1);
      *v12 = 136446466;
      __asm { BR              X10 }
    }
  }
  else
  {
    if (qword_1008377A0 != -1)
      swift_once(&qword_1008377A0, sub_1004F6614);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_10001AAA8(v13, (uint64_t)qword_10084DA20);
    v10 = Logger.logObject.getter(v14);
    v15 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v10, v15))
    {
      v16 = (_DWORD *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      *v16 = 136446210;
      __asm { BR              X10 }
    }
  }

  if (qword_1008377A0 != -1)
    swift_once(&qword_1008377A0, sub_1004F6614);
  v17 = type metadata accessor for Logger(0);
  sub_10001AAA8(v17, (uint64_t)qword_10084DA20);
  v18 = swift_bridgeObjectRetain_n(a5, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v24 = v22;
    *(_DWORD *)v21 = 136446210;
    swift_bridgeObjectRetain(a5);
    v23 = sub_10001A820(a4, a5, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
    swift_bridgeObjectRelease_n(a5, 3);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "os_transaction RELEASE {name: %{public}s}", v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a5, 2);
  }
}

uint64_t sub_1004FA0EC()
{
  _QWORD *v0;

  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[14]);
  swift_release(v0[15]);
  return swift_deallocClassInstance(v0, 128, 7);
}

uint64_t type metadata accessor for RDDynamicXPCActivity()
{
  return objc_opt_self(_TtC7remindd20RDDynamicXPCActivity);
}

double destroy for RDDynamicXPCActivity.Criteria(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72)).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for RDDynamicXPCActivity.Criteria(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_DWORD *)(a1 + 41) = *(_DWORD *)(a2 + 41);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 57) = *(_QWORD *)(a2 + 57);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 66);
  v4 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v4;
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for RDDynamicXPCActivity.Criteria(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 41) = *((_BYTE *)a2 + 41);
  *(_BYTE *)(a1 + 42) = *((_BYTE *)a2 + 42);
  *(_BYTE *)(a1 + 43) = *((_BYTE *)a2 + 43);
  *(_BYTE *)(a1 + 44) = *((_BYTE *)a2 + 44);
  v5 = *((_QWORD *)a2 + 6);
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 57) = *((_BYTE *)a2 + 57);
  *(_BYTE *)(a1 + 58) = *((_BYTE *)a2 + 58);
  *(_BYTE *)(a1 + 59) = *((_BYTE *)a2 + 59);
  *(_BYTE *)(a1 + 60) = *((_BYTE *)a2 + 60);
  *(_BYTE *)(a1 + 61) = *((_BYTE *)a2 + 61);
  *(_BYTE *)(a1 + 62) = *((_BYTE *)a2 + 62);
  *(_BYTE *)(a1 + 63) = *((_BYTE *)a2 + 63);
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  *(_BYTE *)(a1 + 65) = *((_BYTE *)a2 + 65);
  *(_BYTE *)(a1 + 66) = *((_BYTE *)a2 + 66);
  v6 = *((_QWORD *)a2 + 9);
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for RDDynamicXPCActivity.Criteria(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for RDDynamicXPCActivity.Criteria(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_DWORD *)(a1 + 41) = *(_DWORD *)(a2 + 41);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_DWORD *)(a1 + 57) = *(_DWORD *)(a2 + 57);
  *(_BYTE *)(a1 + 61) = *(_BYTE *)(a2 + 61);
  *(_BYTE *)(a1 + 62) = *(_BYTE *)(a2 + 62);
  *(_BYTE *)(a1 + 63) = *(_BYTE *)(a2 + 63);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_WORD *)(a1 + 65) = *(_WORD *)(a2 + 65);
  v4 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDDynamicXPCActivity.Criteria(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDDynamicXPCActivity.Criteria(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDDynamicXPCActivity.Criteria()
{
  return &type metadata for RDDynamicXPCActivity.Criteria;
}

uint64_t storeEnumTagSinglePayload for RDDynamicXPCActivity.CompletionStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1004FA418 + 4 * byte_1006C0420[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1004FA44C + 4 * byte_1006C041B[v4]))();
}

uint64_t sub_1004FA44C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004FA454(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1004FA45CLL);
  return result;
}

uint64_t sub_1004FA468(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1004FA470);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1004FA474(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004FA47C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDDynamicXPCActivity.CompletionStatus()
{
  return &type metadata for RDDynamicXPCActivity.CompletionStatus;
}

uint64_t storeEnumTagSinglePayload for RDDynamicXPCActivity.Identifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1004FA4E4 + 4 * byte_1006C042A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1004FA518 + 4 * byte_1006C0425[v4]))();
}

uint64_t sub_1004FA518(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004FA520(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1004FA528);
  return result;
}

uint64_t sub_1004FA534(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1004FA53CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1004FA540(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004FA548(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDDynamicXPCActivity.Identifier()
{
  return &type metadata for RDDynamicXPCActivity.Identifier;
}

uint64_t sub_1004FA564()
{
  return sub_1000A5F84(&qword_10084DB10, &qword_10084DB18, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_1004FA594()
{
  unint64_t result;

  result = qword_10084DB20;
  if (!qword_10084DB20)
  {
    result = swift_getWitnessTable(&unk_1006C05DC, &type metadata for RDDynamicXPCActivity.Identifier);
    atomic_store(result, (unint64_t *)&qword_10084DB20);
  }
  return result;
}

Swift::Int sub_1004FA5D8(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  _OWORD v9[5];

  v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  v3 = a1[4];
  v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return sub_1004FAB74((uint64_t)v8, (uint64_t)v9) & 1;
}

void sub_1004FA630()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_1004FA67C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x57676E69646E6570, 0xEB000000006B726FLL);
  swift_bridgeObjectRelease(0xEB000000006B726FLL);
  return Hasher._finalize()();
}

void sub_1004FA6EC()
{
  __asm { BR              X10 }
}

double sub_1004FA728(uint64_t a1)
{
  double result;

  String.hash(into:)(a1, 0x57676E69646E6570, 0xEB000000006B726FLL);
  *(_QWORD *)&result = swift_bridgeObjectRelease(0xEB000000006B726FLL).n128_u64[0];
  return result;
}

void sub_1004FA784(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_1004FA7CC()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x57676E69646E6570, 0xEB000000006B726FLL);
  swift_bridgeObjectRelease(0xEB000000006B726FLL);
  return Hasher._finalize()();
}

unint64_t sub_1004FA83C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1004FB040(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1004FA868()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1004FA898 + 4 * byte_1006C043B[*v0]))();
}

void sub_1004FA898(_QWORD *a1@<X8>)
{
  *a1 = 0x57676E69646E6570;
  a1[1] = 0xEB000000006B726FLL;
}

void sub_1004FA8BC(_QWORD *a1@<X8>)
{
  *a1 = 0x6B726F576F6ELL;
  a1[1] = 0xE600000000000000;
}

void sub_1004FA8D4(_QWORD *a1@<X8>)
{
  *a1 = 0x726F727265;
  a1[1] = 0xE500000000000000;
}

void sub_1004FA8EC(char *a1)
{
  sub_1002B50BC(*a1);
}

unint64_t sub_1004FA8FC()
{
  unint64_t result;

  result = qword_10084DB28;
  if (!qword_10084DB28)
  {
    result = swift_getWitnessTable(&unk_1006C0604, &type metadata for RDDynamicXPCActivity.CompletionStatus);
    atomic_store(result, (unint64_t *)&qword_10084DB28);
  }
  return result;
}

BOOL sub_1004FA940(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  _OWORD v8[2];

  v2 = a1[1];
  v5 = *a1;
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 9) = *(__int128 *)((char *)a1 + 25);
  v3 = a2[1];
  v7 = *a2;
  v8[0] = v3;
  *(_OWORD *)((char *)v8 + 9) = *(__int128 *)((char *)a2 + 25);
  return sub_1004FAAE0((uint64_t)&v5, (uint64_t)&v7);
}

uint64_t sub_1004FA988(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 72));
  return a1;
}

uint64_t sub_1004FA9B0(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  return a1;
}

Swift::Int sub_1004FA9D8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_1004F8100(*(_QWORD *)(v1 + 16), *(_QWORD **)(v1 + 24), a1);
}

uint64_t sub_1004FA9E0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004FAA04()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  return swift_deallocObject(v0, 112, 7);
}

void sub_1004FAA30(_xpc_activity_s *a1)
{
  uint64_t v1;

  sub_1004F82B0(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), v1 + 32);
}

uint64_t sub_1004FAA44()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004FAA54()
{
  uint64_t v0;

  return sub_1004F8EE0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

double sub_1004FAA5C()
{
  uint64_t v0;

  return sub_1004F9A24(v0);
}

uint64_t sub_1004FAA64()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[5]);
  swift_unknownObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

void sub_1004FAA98(unsigned __int8 a1)
{
  uint64_t v1;

  sub_1004F9B10(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1004FAAAC(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 152);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  swift_bridgeObjectRelease(v2);
  return a1;
}

BOOL sub_1004FAAE0(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  char v4;

  v2 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(double *)a1 != *(double *)a2)
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  if (((*(unsigned __int8 *)(a1 + 9) ^ *(unsigned __int8 *)(a2 + 9)) & 1) == 0)
  {
    v3 = *(_BYTE *)(a2 + 24);
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      if (!*(_BYTE *)(a2 + 24))
        return 0;
    }
    else
    {
      if (*(double *)(a1 + 16) != *(double *)(a2 + 16))
        v3 = 1;
      if ((v3 & 1) != 0)
        return 0;
    }
    v4 = *(_BYTE *)(a2 + 40);
    if ((*(_BYTE *)(a1 + 40) & 1) == 0)
    {
      if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
        v4 = 1;
      return (v4 & 1) == 0;
    }
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
      return 1;
  }
  return 0;
}

Swift::Int sub_1004FAB74(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v8;
  int v9;
  int v10;
  _BOOL4 v11;
  int v12;
  int v13;
  _BOOL4 v14;
  int v15;
  int v16;
  _BOOL4 v17;
  char v18;
  int v19;
  int v20;
  _BOOL4 v21;
  int v22;
  int v23;
  _BOOL4 v24;
  int v25;
  int v26;
  _BOOL4 v27;
  int v28;
  int v29;
  _BOOL4 v30;
  int v31;
  int v32;
  _BOOL4 v33;
  int v34;
  int v35;
  _BOOL4 v36;
  int v37;
  int v38;
  _BOOL4 v39;
  int v40;
  int v41;
  _BOOL4 v42;
  int v43;
  int v44;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (unsigned __int16)v3 & 0xFF00;
  if ((v2 & 0xFF00) == 0x200)
  {
    if (v4 != 512)
      return 0;
  }
  else
  {
    if (v4 == 512)
      return 0;
    v8 = *(_QWORD *)(a2 + 24);
    if ((v2 & 1) != 0)
    {
      if ((v3 & 1) == 0)
        return 0;
    }
    else if ((v3 & 1) != 0 || *(double *)a1 != *(double *)a2)
    {
      return 0;
    }
    if (((v2 >> 8) & 1) != ((v3 >> 8) & 1))
      return 0;
    if ((*(_QWORD *)(a1 + 24) & 1) != 0)
    {
      if ((v8 & 1) == 0)
        return 0;
    }
    else if ((v8 & 1) != 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
    {
      return 0;
    }
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      if ((*(_BYTE *)(a2 + 40) & 1) == 0)
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 40) & 1) != 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
    {
      return 0;
    }
  }
  v5 = *(unsigned __int8 *)(a1 + 41);
  v6 = *(unsigned __int8 *)(a2 + 41);
  if (v5 == 2)
  {
    if (v6 != 2)
      return 0;
  }
  else if (v6 == 2 || ((v6 ^ v5) & 1) != 0)
  {
    return 0;
  }
  v9 = *(unsigned __int8 *)(a1 + 42);
  v10 = *(unsigned __int8 *)(a2 + 42);
  if (v9 == 2)
  {
    if (v10 != 2)
      return 0;
  }
  else
  {
    v11 = (v9 & 1) == 0;
    if (v10 == 2 || ((v11 ^ v10) & 1) == 0)
      return 0;
  }
  v12 = *(unsigned __int8 *)(a1 + 43);
  v13 = *(unsigned __int8 *)(a2 + 43);
  if (v12 == 2)
  {
    if (v13 != 2)
      return 0;
  }
  else
  {
    v14 = (v12 & 1) == 0;
    if (v13 == 2 || ((v14 ^ v13) & 1) == 0)
      return 0;
  }
  v15 = *(unsigned __int8 *)(a1 + 44);
  v16 = *(unsigned __int8 *)(a2 + 44);
  if (v15 == 2)
  {
    if (v16 != 2)
      return 0;
  }
  else
  {
    v17 = (v15 & 1) == 0;
    if (v16 == 2 || ((v17 ^ v16) & 1) == 0)
      return 0;
  }
  v18 = *(_BYTE *)(a2 + 56);
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 56))
      return 0;
  }
  else
  {
    if (*(double *)(a1 + 48) != *(double *)(a2 + 48))
      v18 = 1;
    if ((v18 & 1) != 0)
      return 0;
  }
  v19 = *(unsigned __int8 *)(a1 + 57);
  v20 = *(unsigned __int8 *)(a2 + 57);
  if (v19 == 2)
  {
    if (v20 != 2)
      return 0;
  }
  else
  {
    v21 = (v19 & 1) == 0;
    if (v20 == 2 || ((v21 ^ v20) & 1) == 0)
      return 0;
  }
  v22 = *(unsigned __int8 *)(a1 + 58);
  v23 = *(unsigned __int8 *)(a2 + 58);
  if (v22 == 2)
  {
    if (v23 != 2)
      return 0;
  }
  else
  {
    v24 = (v22 & 1) == 0;
    if (v23 == 2 || ((v24 ^ v23) & 1) == 0)
      return 0;
  }
  v25 = *(unsigned __int8 *)(a1 + 59);
  v26 = *(unsigned __int8 *)(a2 + 59);
  if (v25 == 2)
  {
    if (v26 != 2)
      return 0;
  }
  else
  {
    v27 = (v25 & 1) == 0;
    if (v26 == 2 || ((v27 ^ v26) & 1) == 0)
      return 0;
  }
  v28 = *(unsigned __int8 *)(a1 + 60);
  v29 = *(unsigned __int8 *)(a2 + 60);
  if (v28 == 2)
  {
    if (v29 != 2)
      return 0;
  }
  else
  {
    v30 = (v28 & 1) == 0;
    if (v29 == 2 || ((v30 ^ v29) & 1) == 0)
      return 0;
  }
  v31 = *(unsigned __int8 *)(a1 + 61);
  v32 = *(unsigned __int8 *)(a2 + 61);
  if (v31 == 2)
  {
    if (v32 != 2)
      return 0;
  }
  else
  {
    v33 = (v31 & 1) == 0;
    if (v32 == 2 || ((v33 ^ v32) & 1) == 0)
      return 0;
  }
  v34 = *(unsigned __int8 *)(a1 + 62);
  v35 = *(unsigned __int8 *)(a2 + 62);
  if (v34 == 2)
  {
    if (v35 != 2)
      return 0;
  }
  else
  {
    v36 = (v34 & 1) == 0;
    if (v35 == 2 || ((v36 ^ v35) & 1) == 0)
      return 0;
  }
  v37 = *(unsigned __int8 *)(a1 + 63);
  v38 = *(unsigned __int8 *)(a2 + 63);
  if (v37 == 2)
  {
    if (v38 != 2)
      return 0;
  }
  else
  {
    v39 = (v37 & 1) == 0;
    if (v38 == 2 || ((v39 ^ v38) & 1) == 0)
      return 0;
  }
  if (((*(unsigned __int8 *)(a1 + 64) ^ *(unsigned __int8 *)(a2 + 64)) & 1) != 0)
    return 0;
  v40 = *(unsigned __int8 *)(a1 + 65);
  v41 = *(unsigned __int8 *)(a2 + 65);
  if (v40 == 2)
  {
    if (v41 != 2)
      return 0;
  }
  else
  {
    v42 = (v40 & 1) == 0;
    if (v41 == 2 || ((v42 ^ v41) & 1) == 0)
      return 0;
  }
  v43 = *(unsigned __int8 *)(a1 + 66);
  v44 = *(unsigned __int8 *)(a2 + 66);
  if (v43 != 7)
  {
    if (v44 != 7 && v43 == v44)
      return sub_1004F6180(*(_QWORD *)(a1 + 72), *(_QWORD *)(a2 + 72));
    return 0;
  }
  if (v44 != 7)
    return 0;
  return sub_1004F6180(*(_QWORD *)(a1 + 72), *(_QWORD *)(a2 + 72));
}

double sub_1004FAF00()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v1).n128_u64[0];
  return result;
}

void sub_1004FAF20()
{
  uint64_t v0;

  sub_1004F6D48(*(_BYTE *)(v0 + 16));
}

uint64_t sub_1004FAF2C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

void sub_1004FAF50(_xpc_activity_s *a1)
{
  uint64_t v1;

  sub_1004F6FD0(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t sub_1004FAF60()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004FAF8C()
{
  uint64_t v0;

  return sub_1004F7AB0(*(_xpc_activity_s **)(v0 + 24));
}

uint64_t sub_1004FAFB0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004FAFC0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1004FAFEC()
{
  uint64_t v0;

  return sub_1004F695C(*(void (**)(void))(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t (**)(_QWORD))(v0 + 32));
}

unint64_t sub_1004FAFF8(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007E1258, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

unint64_t sub_1004FB040(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007E1318, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t storeEnumTagSinglePayload for RDDynamicXPCActivity.ProtectionClass(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1004FB0D4 + 4 * byte_1006C0444[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1004FB108 + 4 * byte_1006C043F[v4]))();
}

uint64_t sub_1004FB108(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004FB110(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1004FB118);
  return result;
}

uint64_t sub_1004FB124(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1004FB12CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1004FB130(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004FB138(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDDynamicXPCActivity.ProtectionClass()
{
  return &type metadata for RDDynamicXPCActivity.ProtectionClass;
}

uint64_t storeEnumTagSinglePayload for RDDynamicXPCActivity.MotionState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1004FB1A0 + 4 * byte_1006C044E[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1004FB1D4 + 4 * byte_1006C0449[v4]))();
}

uint64_t sub_1004FB1D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004FB1DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1004FB1E4);
  return result;
}

uint64_t sub_1004FB1F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1004FB1F8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1004FB1FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004FB204(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDDynamicXPCActivity.MotionState()
{
  return &type metadata for RDDynamicXPCActivity.MotionState;
}

uint64_t storeEnumTagSinglePayload for RDDynamicXPCActivity.Priority(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1004FB26C + 4 * byte_1006C0458[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1004FB2A0 + 4 * byte_1006C0453[v4]))();
}

uint64_t sub_1004FB2A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004FB2A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1004FB2B0);
  return result;
}

uint64_t sub_1004FB2BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1004FB2C4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1004FB2C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004FB2D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDDynamicXPCActivity.Priority()
{
  return &type metadata for RDDynamicXPCActivity.Priority;
}

uint64_t getEnumTagSinglePayload for RDDynamicXPCActivity.IntervalInfo(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 9);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RDDynamicXPCActivity.IntervalInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 9) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDDynamicXPCActivity.IntervalInfo()
{
  return &type metadata for RDDynamicXPCActivity.IntervalInfo;
}

unint64_t sub_1004FB3A4()
{
  unint64_t result;

  result = qword_10084DBE0;
  if (!qword_10084DBE0)
  {
    result = swift_getWitnessTable(&unk_1006C073C, &type metadata for RDDynamicXPCActivity.Priority);
    atomic_store(result, (unint64_t *)&qword_10084DBE0);
  }
  return result;
}

unint64_t sub_1004FB3EC()
{
  unint64_t result;

  result = qword_10084DBE8;
  if (!qword_10084DBE8)
  {
    result = swift_getWitnessTable(&unk_1006C07A4, &type metadata for RDDynamicXPCActivity.MotionState);
    atomic_store(result, (unint64_t *)&qword_10084DBE8);
  }
  return result;
}

unint64_t sub_1004FB434()
{
  unint64_t result;

  result = qword_10084DBF0;
  if (!qword_10084DBF0)
  {
    result = swift_getWitnessTable(&unk_1006C080C, &type metadata for RDDynamicXPCActivity.ProtectionClass);
    atomic_store(result, (unint64_t *)&qword_10084DBF0);
  }
  return result;
}

uint64_t sub_1004FB494(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, double a4)
{
  _QWORD *v4;
  _QWORD *v5;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  _BOOL4 v59;
  uint64_t v60;
  double v61;
  double *v62;
  uint64_t MetatypeMetadata;
  uint64_t v64;
  _BYTE *v65;
  unint64_t v66;
  unint64_t v67;
  void *v68;
  id v69;
  void *v70;
  id v71;
  double v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t KeyPath;
  unint64_t v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  void *v103;
  id v104;
  void *v105;
  id v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  void *v113;
  _BYTE *v114;
  uint64_t v115;
  void (*v116)(uint64_t, uint64_t, uint64_t, uint64_t);
  _BOOL8 v117;
  id v118;
  void *v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE *v123;
  void (*v124)(NSObject **, _BYTE *, uint64_t);
  uint64_t v125;
  NSObject **v126;
  uint64_t v127;
  _BYTE *v128;
  Class isa;
  unsigned int v130;
  double v131;
  id v132;
  void *v133;
  objc_class *v134;
  objc_class *v135;
  _BYTE *v136;
  id v137;
  uint64_t v138;
  uint64_t v139;
  id v140;
  uint64_t v141;
  uint64_t v142;
  double v143;
  NSObject *v144;
  _BYTE *v145;
  NSObject *v146;
  double v147;
  uint64_t v148;
  NSObject *v149;
  os_log_type_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  id v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  _BYTE *v165;
  double v166;
  double v167;
  _BYTE *v168;
  double v169;
  double v170;
  uint64_t v171;
  uint64_t v172;
  double v173;
  uint64_t v174;
  uint64_t v175;
  void (*v176)(uint64_t, uint64_t);
  uint64_t v177;
  _BYTE *v178;
  uint64_t v179;
  uint64_t result;
  void *v181;
  os_log_t *v182;
  uint64_t *v183;
  _BYTE *v184;
  NSObject *v185;
  NSObject *v186;
  uint64_t v187;
  NSObject *v188;
  os_log_type_t v189;
  int v190;
  _BOOL8 v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  NSObject *v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  _BYTE *v206;
  _BYTE *v207;
  double v208;
  _BYTE *v209;
  double v210;
  uint64_t v211;
  _QWORD *v212;
  NSObject *v213;
  _BYTE *v214;
  NSObject *v215;
  NSObject *v216;
  id v217;
  NSObject *v218;
  void *v219;
  NSURL *v220;
  unsigned __int8 v221;
  double v222;
  _BYTE *v223;
  double v224;
  NSObject *v225;
  os_log_type_t v226;
  int v227;
  uint64_t v228;
  NSObject *v229;
  NSObject *v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  _BYTE *v238;
  uint64_t v239;
  _BYTE *v240;
  double v241;
  _BYTE *v242;
  double v243;
  uint64_t v244;
  os_log_t v245;
  double v246;
  uint64_t v247;
  os_log_t v248;
  double v249;
  id v250;
  uint64_t v251;
  double v252;
  NSObject *v253;
  os_log_type_t v254;
  uint64_t v255;
  uint64_t v256;
  _QWORD *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  id v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  _BYTE *v267;
  uint64_t v268;
  _BYTE *v269;
  double v270;
  _BYTE *v271;
  double v272;
  os_log_type_t v273;
  uint64_t v274;
  _BYTE *v275;
  double v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  void (*v281)(uint64_t, uint64_t);
  uint64_t v282;
  _BYTE *v283;
  _BYTE *v284;
  _BYTE *v285;
  uint64_t v286;
  NSObject *v287;
  os_log_type_t v288;
  int v289;
  uint64_t v290;
  NSObject **v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  NSObject *v295;
  NSObject *v296;
  Class v297;
  id v298;
  uint64_t v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  _BYTE *v306;
  uint64_t v307;
  _BYTE *v308;
  double v309;
  _BYTE *v310;
  double v311;
  uint64_t v312;
  NSObject **v313;
  os_log_t v314;
  NSObject *v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  _QWORD *v319;
  void (*v320)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  double v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;
  NSObject *v336;
  void (*v337)(uint64_t, _BYTE *, uint64_t);
  uint64_t v338;
  void *v339;
  void *v340;
  uint64_t v341;
  void (**v342)(uint64_t, uint64_t);
  void (*v343)(uint64_t, uint64_t);
  NSObject **v344;
  NSObject *v345;
  NSObject *v346;
  id v347;
  id v348;
  double v349;
  Swift::String v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  _BYTE v355[4];
  int v356;
  _BYTE *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  _BYTE *v364;
  unint64_t v365;
  _BYTE *v366;
  _BYTE *v367;
  _BYTE *v368;
  _BYTE *v369;
  uint64_t *v370;
  _BYTE *v371;
  _BYTE *v372;
  _BYTE *v373;
  NSObject **v374;
  NSObject **v375;
  _BYTE *v376;
  _BYTE *v377;
  _BYTE *v378;
  _BYTE *v379;
  uint64_t v380;
  uint64_t v381;
  void (*v382)(uint64_t, uint64_t);
  uint64_t v383;
  _BYTE *v384;
  void *v385;
  double v386;
  double v387;
  _QWORD *v388;
  double v389;
  uint64_t v390;
  NSObject *v391;
  double v392;
  _BYTE *v393;
  uint64_t v394;
  double v395;
  _BYTE *v396;
  _QWORD *v397;
  char v398[8];
  uint64_t v399;
  uint64_t v400;
  char v401[8];
  _QWORD v402[3];
  char v403[8];
  uint64_t v404;
  double v405;
  _QWORD v406[4];
  double v407;
  char v408[8];

  v5 = v4;
  v383 = a3;
  v9 = *(double *)v4;
  v365 = type metadata accessor for RDPublicTemplate(0);
  v362 = *(_QWORD *)(v365 - 8);
  __chkstk_darwin(v365);
  v369 = &v355[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v357 = &v355[-v12];
  v363 = v13;
  __chkstk_darwin(v14);
  v370 = (uint64_t *)&v355[-v15];
  v16 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v16);
  v375 = &v355[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v18);
  v377 = &v355[-v19];
  v20 = type metadata accessor for UUID(0);
  v390 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v374 = (NSObject **)&v355[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v22);
  v376 = &v355[-v23];
  v361 = v24;
  __chkstk_darwin(v25);
  v379 = &v355[-v26];
  v27 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v359 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v368 = &v355[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v29);
  v373 = &v355[-v30];
  v360 = v31;
  __chkstk_darwin(v32);
  v378 = &v355[-v33];
  v34 = type metadata accessor for Date(0);
  v395 = *(double *)(v34 - 8);
  __chkstk_darwin(v34);
  v371 = &v355[-((v35 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v36);
  v366 = &v355[-v37];
  __chkstk_darwin(v38);
  *(_QWORD *)&v389 = &v355[-v39];
  __chkstk_darwin(v40);
  v367 = &v355[-v41];
  __chkstk_darwin(v42);
  v372 = &v355[-v43];
  __chkstk_darwin(v44);
  v364 = &v355[-v45];
  __chkstk_darwin(v46);
  v48 = &v355[-v47];
  __chkstk_darwin(v49);
  v393 = &v355[-v50];
  v358 = v51;
  __chkstk_darwin(v52);
  v396 = &v355[-v53];
  if (qword_1008377B8 != -1)
    swift_once(&qword_1008377B8, sub_1004FD900);
  v54 = type metadata accessor for Logger(0);
  *(double *)&v55 = COERCE_DOUBLE(sub_10001AAA8(v54, (uint64_t)qword_10084DC00));
  v56 = swift_retain_n(v5, 6);
  v387 = *(double *)&v55;
  v57 = Logger.logObject.getter(v56);
  v58 = static os_log_type_t.default.getter(v57);
  v59 = os_log_type_enabled(v57, v58);
  v380 = v20;
  v397 = v5;
  v394 = v34;
  v388 = (_QWORD *)a1;
  v382 = a2;
  v386 = v9;
  if (v59)
  {
    v60 = swift_slowAlloc(42, -1);
    v61 = v9;
    v62 = (double *)swift_slowAlloc(16, -1);
    v392 = COERCE_DOUBLE(swift_slowAlloc(32, -1));
    v407 = v392;
    *(_DWORD *)v60 = 136446978;
    v405 = v61;
    MetatypeMetadata = swift_getMetatypeMetadata(*(_QWORD *)&v61);
    v64 = String.init<A>(describing:)(&v405, MetatypeMetadata);
    v65 = v48;
    v67 = v66;
    v405 = COERCE_DOUBLE(sub_10001A820(v64, v66, (uint64_t *)&v407));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
    swift_bridgeObjectRelease(v67);
    *(_WORD *)(v60 + 12) = 2114;
    v68 = *((void **)v397 + 2);
    v405 = *(double *)&v68;
    v69 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
    *v62 = *(double *)&v68;
    swift_release_n(v397, 2);
    *(_WORD *)(v60 + 22) = 2114;
    v70 = *((void **)v397 + 3);
    v405 = *(double *)&v70;
    v71 = v70;
    v48 = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
    v62[1] = *(double *)&v70;
    swift_release_n(v397, 2);
    *(_WORD *)(v60 + 32) = 2048;
    v72 = *((double *)v397 + 10);
    swift_release(v397);
    v405 = v72;
    v20 = v380;
    v5 = v397;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
    swift_release(v5);
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "%{public}s: Start execution {templateObjectID: %{public}@, templatePublicLinkConfiguration: %{public}@, remindersCountLimit: %ld}", (uint8_t *)v60, 0x2Au);
    v73 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v62, 2, v73);
    v34 = v394;
    swift_slowDealloc(v62, -1, -1);
    v74 = v392;
    swift_arrayDestroy(*(_QWORD *)&v392, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(*(_QWORD *)&v74, -1, -1);
    swift_slowDealloc(v60, -1, -1);

  }
  else
  {

    v75 = swift_release_n(v5, 6);
  }
  v76 = Date.init()(v75);
  v391 = *((NSObject **)v5 + 2);
  v385 = (void *)v5[3];
  v77 = static Date.now.getter(v76);
  Date.addingTimeInterval(_:)(v77, *((double *)v5 + 11));
  v78 = *(_QWORD **)(*(_QWORD *)&v395 + 8);
  v384 = v48;
  ((void (*)(_BYTE *, uint64_t))v78)(v48, v34);
  v79 = *((unsigned __int8 *)v5 + 72);
  v80 = swift_allocObject(&unk_1007F86F8, 17, 7);
  *(_BYTE *)(v80 + 16) = 0;
  v81 = sub_10001A630((uint64_t *)&unk_10083AD90);
  *(double *)&v82 = COERCE_DOUBLE(swift_initStackObject(v81, v408));
  *(_OWORD *)(v82 + 16) = xmmword_1006A8550;
  *(_QWORD *)(v82 + 32) = swift_getKeyPath(&unk_1006C0918);
  KeyPath = swift_getKeyPath(&unk_1006C0958);
  *(_QWORD *)(v82 + 40) = KeyPath;
  v405 = *(double *)&v82;
  specialized Array._endMutation()(KeyPath);
  v84 = *(_QWORD *)&v405;
  v407 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  sub_1001C1B0C(0, 2, 0);
  v85 = v407;
  v392 = *(double *)&v78;
  v356 = v79;
  if ((v84 & 0xC000000000000001) != 0)
  {
    v86 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v84);
    v87 = v86;
  }
  else
  {
    v87 = *(_QWORD *)(v84 + 32);
    v86 = swift_retain();
  }
  v88 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v86);
  if (v89)
  {
    v90 = v88;
    v91 = v89;
    swift_release(v87);
    v93 = *(_QWORD *)(*(_QWORD *)&v85 + 16);
    v92 = *(_QWORD *)(*(_QWORD *)&v85 + 24);
    if (v93 >= v92 >> 1)
    {
      sub_1001C1B0C(v92 > 1, v93 + 1, 1);
      v85 = v407;
    }
    *(_QWORD *)(*(_QWORD *)&v85 + 16) = v93 + 1;
    v94 = (_QWORD *)(*(_QWORD *)&v85 + 16 * v93);
    v94[4] = v90;
    v94[5] = v91;
    if ((v84 & 0xC000000000000001) != 0)
    {
      v95 = specialized _ArrayBuffer._getElementSlowPath(_:)(1, v84);
      v87 = v95;
    }
    else
    {
      v87 = *(_QWORD *)(v84 + 40);
      v95 = swift_retain();
    }
    v96 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v95);
    if (v97)
    {
      v98 = v96;
      v99 = v97;
      swift_release(v87);
      v407 = v85;
      v101 = *(_QWORD *)(*(_QWORD *)&v85 + 16);
      v100 = *(_QWORD *)(*(_QWORD *)&v85 + 24);
      if (v101 >= v100 >> 1)
      {
        sub_1001C1B0C(v100 > 1, v101 + 1, 1);
        v85 = v407;
      }
      *(_QWORD *)(*(_QWORD *)&v85 + 16) = v101 + 1;
      v102 = (_QWORD *)(*(_QWORD *)&v85 + 16 * v101);
      v102[4] = v98;
      v102[5] = v99;
      swift_bridgeObjectRelease(v84);
      v103 = v388;
      v104 = sub_1002A6E28(v391, (uint64_t)v388, *(Class *)&v85, 0);
      v381 = v80;
      v105 = v104;
      swift_release(*(_QWORD *)&v85);
      v106 = objc_msgSend(v105, "mostRecentPublicLinkUpdateRequestDate");
      if (v106)
      {
        v107 = v106;
        v108 = (uint64_t)v373;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v106);

        v109 = 0;
        v110 = v394;
        v111 = (uint64_t)v377;
      }
      else
      {
        v109 = 1;
        v110 = v394;
        v111 = (uint64_t)v377;
        v108 = (uint64_t)v373;
      }
      v377 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)&v395 + 56))(v108, v109, 1, v110);
      sub_1000CDA74(v108, (uint64_t)v378);
      v112 = objc_msgSend(v105, "publicLinkURLUUID");
      if (v112)
      {
        v113 = v112;
        v114 = v376;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v112);

        v115 = v390;
        (*(void (**)(uint64_t, _BYTE *, uint64_t))(v390 + 32))(v111, v114, v20);
        v116 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v115 + 56);
        v116(v111, 0, 1, v20);
        v117 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v115 + 48))(v111, 1, v20) != 1;
      }
      else
      {
        v116 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v390 + 56);
        v116(v111, 1, 1, v20);
        v117 = 0;
      }
      sub_10000882C(v111, (uint64_t *)&unk_100839C80);
      v118 = objc_msgSend(v105, "publicLinkURLUUID");
      if (v118)
      {
        v119 = v118;
        v120 = v376;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v118);

        v121 = v390;
        v122 = (uint64_t)v375;
        v123 = v120;
        v124 = *(void (**)(NSObject **, _BYTE *, uint64_t))(v390 + 32);
        v124((NSObject **)v375, v123, v20);
        v116(v122, 0, 1, v20);
        v125 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v121 + 48))(v122, 1, v20);
        if ((_DWORD)v125 != 1)
        {
          v126 = v374;
          v124(v374, (_BYTE *)v122, v20);
          goto LABEL_29;
        }
      }
      else
      {
        v122 = (uint64_t)v375;
        v125 = ((uint64_t (*)(NSObject **, uint64_t, uint64_t, uint64_t))v116)((NSObject **)v375, 1, 1, v20);
      }
      v126 = v374;
      UUID.init()(v125);
      sub_10000882C(v122, (uint64_t *)&unk_100839C80);
      v124 = *(void (**)(NSObject **, _BYTE *, uint64_t))(v390 + 32);
LABEL_29:
      v127 = ((uint64_t (*)(_BYTE *, NSObject **, uint64_t))v124)(v379, v126, v20);
      v128 = v384;
      static Date.now.getter(v127);
      isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(_BYTE *, uint64_t))&v392)(v128, v110);
      objc_msgSend(v105, "setMostRecentPublicLinkUpdateRequestDate:", isa);

      v405 = 0.0;
      v130 = objc_msgSend(v103, "save:", &v405);
      v131 = v405;
      if (!v130)
      {
        v140 = *(id *)&v405;
        v141 = _convertNSErrorToError(_:)(*(_QWORD *)&v131);

        swift_willThrow(v142);
        v143 = v389;
        v144 = v391;
        v145 = v377;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)&v395 + 16))(*(_BYTE **)&v389, v396, v110);
        v146 = v144;
        swift_errorRetain(v141);
        v147 = COERCE_DOUBLE(v146);
        v148 = swift_errorRetain(v141);
        v149 = Logger.logObject.getter(v148);
        v150 = static os_log_type_t.error.getter();
        v151 = v150;
        if (os_log_type_enabled(v149, v150))
        {
          v152 = swift_slowAlloc(42, -1);
          v377 = v145;
          v153 = v152;
          v154 = (_QWORD *)swift_slowAlloc(8, -1);
          v388 = v154;
          v395 = COERCE_DOUBLE(swift_slowAlloc(64, -1));
          v407 = v395;
          *(_DWORD *)v153 = 136446978;
          LODWORD(v391) = v151;
          v155 = *(_QWORD *)&v386;
          v405 = v386;
          v156 = swift_getMetatypeMetadata(*(_QWORD *)&v386);
          v157 = String.init<A>(describing:)(&v405, v156);
          v159 = v158;
          v405 = COERCE_DOUBLE(sub_10001A820(v157, v158, (uint64_t *)&v407));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
          swift_bridgeObjectRelease(v159);
          *(_WORD *)(v153 + 12) = 2114;
          v405 = v147;
          v160 = *(id *)&v147;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
          *(double *)v154 = v147;

          v110 = v394;
          *(_WORD *)(v153 + 22) = 2082;
          swift_getErrorValue(v141, v403, v402);
          v161 = Error.rem_errorDescription.getter(v402[1], v402[2]);
          v163 = v162;
          v405 = COERCE_DOUBLE(sub_10001A820(v161, v162, (uint64_t *)&v407));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
          swift_bridgeObjectRelease(v163);
          swift_errorRelease(v141);
          v164 = swift_errorRelease(v141);
          *(_WORD *)(v153 + 32) = 2048;
          v165 = v384;
          Date.init()(v164);
          v166 = v389;
          v167 = Date.timeIntervalSince(_:)(*(_QWORD *)&v389);
          v168 = v165;
          v169 = v392;
          (*(void (**)(_BYTE *, uint64_t))&v392)(v168, v110);
          v405 = v167;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
          (*(void (**)(_QWORD, uint64_t))&v169)(*(_QWORD *)&v166, v110);
          v170 = v169;
          _os_log_impl((void *)&_mh_execute_header, v149, (os_log_type_t)v391, "%{public}s: Failed to fetch template {templateObjectID: %{public}@, error: %{public}s, elapsedSeconds: %f}", (uint8_t *)v153, 0x2Au);
          v171 = sub_10001A630((uint64_t *)&unk_100839E70);
          v172 = (uint64_t)v388;
          swift_arrayDestroy(v388, 1, v171);
          swift_slowDealloc(v172, -1, -1);
          v173 = v395;
          swift_arrayDestroy(*(_QWORD *)&v395, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(*(_QWORD *)&v173, -1, -1);
          v174 = v153;
          v145 = v377;
          swift_slowDealloc(v174, -1, -1);

          v175 = v383;
          v176 = v382;
        }
        else
        {

          swift_errorRelease(v141);
          swift_errorRelease(v141);
          v170 = v392;
          (*(void (**)(double, uint64_t))&v392)(COERCE_DOUBLE(*(_QWORD *)&v143), v110);

          v175 = v383;
          v176 = v382;
          v155 = *(_QWORD *)&v386;
        }
        swift_errorRetain(v141);
        v352 = v175;
        v177 = v381;
        v178 = v396;
        sub_1004FD990(v141, 1, v381, *(void **)&v147, v385, (uint64_t)v397, (uint64_t)v396, v176, v352, v155);
        swift_errorRelease(v141);
        swift_errorRelease(v141);
        (*(void (**)(_BYTE *, uint64_t))&v170)(v178, v110);
        (*(void (**)(_BYTE *, uint64_t))&v170)(v393, v110);
        if (!v145)
        {
          (*(void (**)(_BYTE *, uint64_t))(v390 + 8))(v379, v380);
          sub_10000882C((uint64_t)v378, (uint64_t *)&unk_1008380D0);
        }
        v179 = v177;
        return swift_release(v179);
      }
      v389 = *(double *)&v124;
      v132 = *(id *)&v405;

      v133 = objc_autoreleasePoolPush();
      sub_1002A76C4();
      v135 = v134;
      v136 = v377;
      v137 = sub_1002A6E28(v391, (uint64_t)v103, v134, 0);
      v138 = (uint64_t)v136;
      LODWORD(v373) = v117;
      if (!v136)
      {
        v181 = v137;
        swift_bridgeObjectRelease(v135);
        v182 = (os_log_t *)v397;
        v183 = v370;
        sub_1004902E0((uint64_t)v379, (uint64_t)v393, v385, v397[10], v370);

        objc_autoreleasePoolPop(v133);
        v284 = v357;
        sub_100378738((uint64_t)v183, (uint64_t)v357);
        v285 = v364;
        v286 = v394;
        v377 = *(_BYTE **)(*(_QWORD *)&v395 + 16);
        ((void (*)(_BYTE *, _BYTE *, uint64_t))v377)(v364, v396, v394);
        *(double *)&v391 = COERCE_DOUBLE(v391);
        v287 = Logger.logObject.getter(v391);
        v288 = static os_log_type_t.default.getter(v287);
        v289 = v288;
        if (os_log_type_enabled(v287, v288))
        {
          v290 = swift_slowAlloc(52, -1);
          v291 = (NSObject **)swift_slowAlloc(8, -1);
          v374 = v291;
          v387 = COERCE_DOUBLE(swift_slowAlloc(96, -1));
          v405 = v387;
          *(_DWORD *)v290 = 136447234;
          LODWORD(v375) = v289;
          v292 = sub_1000D92EC(*(uint64_t *)&v386);
          v294 = v293;
          v407 = COERCE_DOUBLE(sub_10001A820(v292, v293, (uint64_t *)&v405));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v407, v408);
          swift_bridgeObjectRelease(v294);
          *(_WORD *)(v290 + 12) = 2114;
          v295 = v391;
          v407 = *(double *)&v391;
          v296 = v391;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v407, v408);
          *v291 = v295;

          *(_WORD *)(v290 + 22) = 2082;
          v297 = sub_1000D6C38((uint64_t)&v284[*(int *)(v365 + 32)]);
          v298 = -[objc_class recordName](v297, "recordName");

          v299 = static String._unconditionallyBridgeFromObjectiveC(_:)(v298);
          v301 = v300;

          v407 = COERCE_DOUBLE(sub_10001A820(v299, v301, (uint64_t *)&v405));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v407, v408);
          v302 = v301;
          v183 = v370;
          v182 = (os_log_t *)v397;
          swift_bridgeObjectRelease(v302);
          sub_10030DBA4((uint64_t)v284);
          *(_WORD *)(v290 + 32) = 2082;
          v103 = v388;
          v303 = Bool.yesno.getter(v373);
          v305 = v304;
          v407 = COERCE_DOUBLE(sub_10001A820(v303, v304, (uint64_t *)&v405));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v407, v408);
          swift_bridgeObjectRelease(v305);
          *(_WORD *)(v290 + 42) = 2048;
          v306 = v384;
          Date.init()(v307);
          v308 = v364;
          v309 = Date.timeIntervalSince(_:)(v364);
          v310 = v306;
          v311 = v392;
          (*(void (**)(_BYTE *, uint64_t))&v392)(v310, v394);
          v407 = v309;
          v286 = v394;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v407, v408);
          (*(void (**)(_BYTE *, uint64_t))&v311)(v308, v286);
          _os_log_impl((void *)&_mh_execute_header, v287, (os_log_type_t)v375, "%{public}s: Generated content for template's public link {templateObjectID: %{public}@, recordName: %{public}s, hasPublicLinkPriorToTemplateOperation: %{public}s, elapsedSeconds: %f}", (uint8_t *)v290, 0x34u);
          v312 = sub_10001A630((uint64_t *)&unk_100839E70);
          v313 = v374;
          swift_arrayDestroy(v374, 1, v312);
          swift_slowDealloc(v313, -1, -1);
          v314 = *(os_log_t *)&v387;
          swift_arrayDestroy(*(_QWORD *)&v387, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v314, -1, -1);
          swift_slowDealloc(v290, -1, -1);
        }
        else
        {
          v315 = v391;

          sub_10030DBA4((uint64_t)v284);
          (*(void (**)(_BYTE *, uint64_t))&v392)(v285, v286);
        }

        v316 = v363;
        v317 = v362;
        v318 = v361;
        objc_msgSend(v103, "reset");
        v387 = *((double *)v182 + 7);
        v374 = (NSObject **)v182[8];
        v375 = sub_10000A388(v182 + 4, *(uint64_t *)&v387);
        v406[2] = v365;
        v406[3] = &off_1007E3118;
        v319 = sub_1000087F0(&v405);
        sub_100378738((uint64_t)v183, (uint64_t)v319);
        sub_100378738((uint64_t)v183, (uint64_t)v369);
        v320 = (void (*)(_BYTE *, _BYTE *, uint64_t))v377;
        ((void (*)(_BYTE *, _BYTE *, uint64_t))v377)(v384, v396, v286);
        v321 = v390;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v390 + 16))(v376, v379, v20);
        v320(v367, v393, v286);
        sub_1000CDA2C((uint64_t)v378, (uint64_t)v368);
        v322 = *(unsigned __int8 *)(v317 + 80);
        v323 = (v322 + 24) & ~v322;
        v324 = v323 + v316;
        v325 = v395;
        v326 = *(unsigned __int8 *)(*(_QWORD *)&v395 + 80);
        v327 = (v326 + v324 + 1) & ~v326;
        v364 = (_BYTE *)((v358 + 7 + v327) & 0xFFFFFFFFFFFFFFF8);
        v328 = *(unsigned __int8 *)(v321 + 80);
        v329 = (unint64_t)&v364[v328 + 8] & ~v328;
        v330 = (v318 + v326 + v329) & ~v326;
        v377 = (_BYTE *)((v358 + 7 + v330) & 0xFFFFFFFFFFFFFFF8);
        v372 = (_BYTE *)((unint64_t)(v377 + 15) & 0xFFFFFFFFFFFFFFF8);
        v371 = (_BYTE *)((unint64_t)(v372 + 15) & 0xFFFFFFFFFFFFFFF8);
        v365 = (unint64_t)(v371 + 15) & 0xFFFFFFFFFFFFFFF8;
        v331 = *(unsigned __int8 *)(v359 + 80);
        v332 = (v331 + v365 + 16) & ~v331;
        v366 = (_BYTE *)(v332 + v360);
        v333 = (v332 + v360) & 0xFFFFFFFFFFFFFFF8;
        v334 = v20;
        v335 = swift_allocObject(&unk_1007F8720, v333 + 16, v322 | v326 | v328 | v331 | 7);
        v363 = v333 + v335;
        v336 = v391;
        *(double *)(v335 + 16) = *(double *)&v391;
        sub_1003786F4((uint64_t)v369, v335 + v323);
        *(_BYTE *)(v335 + v324) = (_BYTE)v373;
        v337 = *(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)&v325 + 32);
        v338 = v394;
        v337(v335 + v327, v384, v394);
        v339 = v388;
        *(_QWORD *)&v364[v335] = v388;
        (*(void (**)(uint64_t, _BYTE *, uint64_t))&v389)(v335 + v329, v376, v334);
        v337(v335 + v330, v367, v338);
        v340 = v385;
        *(_QWORD *)&v377[v335] = v385;
        v341 = v381;
        *(_QWORD *)&v372[v335] = v381;
        *(_QWORD *)&v371[v335] = v397;
        v342 = (void (**)(uint64_t, uint64_t))(v335 + v365);
        v343 = (void (*)(uint64_t, uint64_t))v383;
        *v342 = v382;
        v342[1] = v343;
        sub_1000CDA74((uint64_t)v368, v335 + v332);
        v366[v335] = v356;
        *(double *)(v363 + 8) = v386;
        v344 = v374;
        v345 = v374[1];
        swift_retain();
        v346 = v336;
        v347 = v339;
        v348 = v340;
        swift_retain();
        swift_retain();
        ((void (*)(double *, uint64_t (*)(uint64_t, char), uint64_t, _QWORD, NSObject **, double))v345)(&v405, sub_1005004C0, v335, *(_QWORD *)&v387, v344, a4);
        swift_release(v335);
        sub_10030DBA4((uint64_t)v370);
        sub_10000882C((uint64_t)v378, (uint64_t *)&unk_1008380D0);
        v349 = v392;
        (*(void (**)(_BYTE *, uint64_t))&v392)(v396, v338);
        (*(void (**)(_BYTE *, uint64_t))(v390 + 8))(v379, v380);
        (*(void (**)(_BYTE *, uint64_t))&v349)(v393, v338);
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v405);
        v179 = v341;
        return swift_release(v179);
      }
      swift_bridgeObjectRelease(v135);
      v389 = 0.0;
      v139 = v394;
      objc_autoreleasePoolPop(v133);
      v184 = v372;
      v395 = *(double *)(*(_QWORD *)&v395 + 16);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))&v395)(v372, v396, v139);
      v185 = v391;
      swift_errorRetain(v138);
      *(double *)&v186 = COERCE_DOUBLE(v185);
      v187 = swift_errorRetain(v138);
      v188 = Logger.logObject.getter(v187);
      v189 = static os_log_type_t.error.getter();
      v190 = v189;
      if (os_log_type_enabled(v188, v189))
      {
        v191 = v117;
        v192 = swift_slowAlloc(52, -1);
        v193 = (_QWORD *)swift_slowAlloc(8, -1);
        *(double *)&v391 = COERCE_DOUBLE(swift_slowAlloc(96, -1));
        v407 = *(double *)&v391;
        *(_DWORD *)v192 = 136447234;
        v405 = v386;
        v194 = swift_getMetatypeMetadata(*(_QWORD *)&v386);
        LODWORD(v377) = v190;
        v195 = String.init<A>(describing:)(&v405, v194);
        v197 = v196;
        v405 = COERCE_DOUBLE(sub_10001A820(v195, v196, (uint64_t *)&v407));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
        swift_bridgeObjectRelease(v197);
        *(_WORD *)(v192 + 12) = 2114;
        v405 = *(double *)&v186;
        v198 = v186;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
        *(double *)v193 = *(double *)&v186;

        *(_WORD *)(v192 + 22) = 2082;
        v199 = Bool.yesno.getter(v191);
        v201 = v200;
        v405 = COERCE_DOUBLE(sub_10001A820(v199, v200, (uint64_t *)&v407));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
        swift_bridgeObjectRelease(v201);
        *(_WORD *)(v192 + 32) = 2082;
        v139 = v394;
        swift_getErrorValue(v138, v401, v398);
        v202 = Error.rem_errorDescription.getter(v399, v400);
        v204 = v203;
        v405 = COERCE_DOUBLE(sub_10001A820(v202, v203, (uint64_t *)&v407));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
        swift_bridgeObjectRelease(v204);
        swift_errorRelease(v138);
        v205 = swift_errorRelease(v138);
        *(_WORD *)(v192 + 42) = 2048;
        v206 = v384;
        Date.init()(v205);
        v207 = v372;
        v208 = Date.timeIntervalSince(_:)(v372);
        v209 = v206;
        v210 = v392;
        (*(void (**)(_BYTE *, uint64_t))&v392)(v209, v139);
        v405 = v208;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
        (*(void (**)(_BYTE *, uint64_t))&v210)(v207, v139);
        _os_log_impl((void *)&_mh_execute_header, v188, (os_log_type_t)v377, "%{public}s: Failed to generate content for template's public link. {templateObjectID: %{public}@, hasPublicLinkPriorToTemplateOperation: %{public}s, error: %{public}s, elapsedSeconds: %f}", (uint8_t *)v192, 0x34u);
        v211 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v193, 1, v211);
        v212 = v193;
        v103 = v388;
        swift_slowDealloc(v212, -1, -1);
        v213 = v391;
        swift_arrayDestroy(v391, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v213, -1, -1);
        swift_slowDealloc(v192, -1, -1);
      }
      else
      {

        swift_errorRelease(v138);
        swift_errorRelease(v138);
        (*(void (**)(_BYTE *, uint64_t))&v392)(v184, v139);
      }

      v214 = v371;
      v215 = v186;
      v216 = *(NSObject **)&v389;
      v217 = sub_1002A6E28(v186, (uint64_t)v103, (Class)&off_1007DCF08, 0);
      if (v216)
      {
        v218 = v216;
        swift_arrayDestroy(&unk_1007DCF28, 1, &type metadata for String);
      }
      else
      {
        v219 = v217;
        swift_arrayDestroy(&unk_1007DCF28, 1, &type metadata for String);
        v220 = (NSURL *)swift_getKeyPath(&unk_1006C0918);
        sub_10015087C(v220, (uint64_t)v378);
        swift_release(v220);
        objc_msgSend(v219, "updateChangeCount");

        v405 = 0.0;
        v221 = objc_msgSend(v103, "save:", &v405);
        v222 = v405;
        if ((v221 & 1) != 0)
        {
          v223 = v366;
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))&v395)(v366, v396, v139);
          v224 = COERCE_DOUBLE(v186);
          *(double *)&v225 = COERCE_DOUBLE(Logger.logObject.getter(*(id *)&v222));
          v226 = static os_log_type_t.default.getter(v225);
          v227 = v226;
          if (os_log_type_enabled(v225, v226))
          {
            v228 = swift_slowAlloc(42, -1);
            *(double *)&v229 = COERCE_DOUBLE(swift_slowAlloc(8, -1));
            v391 = v225;
            v230 = v229;
            v387 = *(double *)&v229;
            v395 = COERCE_DOUBLE(swift_slowAlloc(64, -1));
            v405 = v395;
            *(_DWORD *)v228 = 136446978;
            LODWORD(v389) = v227;
            v231 = sub_1000D92EC(*(uint64_t *)&v386);
            v233 = v232;
            v407 = COERCE_DOUBLE(sub_10001A820(v231, v232, (uint64_t *)&v405));
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v407, v408);
            swift_bridgeObjectRelease(v233);
            *(_WORD *)(v228 + 12) = 2114;
            v407 = v224;
            v234 = *(id *)&v224;
            v103 = v388;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v407, v408);
            *(double *)&v230->isa = v224;

            v215 = v186;
            *(_WORD *)(v228 + 22) = 2082;
            v235 = Bool.yesno.getter(v373);
            v237 = v236;
            v407 = COERCE_DOUBLE(sub_10001A820(v235, v236, (uint64_t *)&v405));
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v407, v408);
            swift_bridgeObjectRelease(v237);
            *(_WORD *)(v228 + 32) = 2048;
            v238 = v384;
            Date.init()(v239);
            v240 = v366;
            v241 = Date.timeIntervalSince(_:)(v366);
            v242 = v238;
            v243 = v392;
            (*(void (**)(_BYTE *, uint64_t))&v392)(v242, v139);
            v407 = v241;
            v244 = *(_QWORD *)&v386;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v407, v408);
            (*(void (**)(_BYTE *, uint64_t))&v243)(v240, v139);
            v245 = v391;
            v246 = v243;
            _os_log_impl((void *)&_mh_execute_header, v391, LOBYTE(v389), "%{public}s: Reverted template's mostRecentPublicLinkUpdateRequestDate {templateObjectID: %{public}@, hasPublicLinkPriorToTemplateOperation: %{public}s, elapsedSeconds: %f}", (uint8_t *)v228, 0x2Au);
            v247 = sub_10001A630((uint64_t *)&unk_100839E70);
            v248 = *(os_log_t *)&v387;
            swift_arrayDestroy(*(_QWORD *)&v387, 1, v247);
            swift_slowDealloc(v248, -1, -1);
            v249 = v395;
            swift_arrayDestroy(*(_QWORD *)&v395, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(*(_QWORD *)&v249, -1, -1);
            swift_slowDealloc(v228, -1, -1);
LABEL_51:

            v278 = v380;
            v279 = v383;
            v280 = v397;
            v281 = v382;
LABEL_54:
            objc_msgSend(v103, "reset");
            swift_errorRetain(v138);
            v353 = v279;
            v354 = v244;
            v282 = v381;
            v283 = v396;
            sub_1004FD990(v138, 1, v381, v215, v385, (uint64_t)v280, (uint64_t)v396, v281, v353, v354);
            swift_errorRelease(v138);
            swift_errorRelease(v138);
            sub_10000882C((uint64_t)v378, (uint64_t *)&unk_1008380D0);
            (*(void (**)(_BYTE *, uint64_t))&v246)(v283, v139);
            (*(void (**)(_BYTE *, uint64_t))(v390 + 8))(v379, v278);
            (*(void (**)(_BYTE *, uint64_t))&v246)(v393, v139);
            v179 = v282;
            return swift_release(v179);
          }

          v246 = v392;
          (*(void (**)(_BYTE *, uint64_t))&v392)(v223, v139);

LABEL_53:
          v278 = v380;
          v279 = v383;
          v280 = v397;
          v281 = v382;
          v244 = *(_QWORD *)&v386;
          goto LABEL_54;
        }
        v250 = *(id *)&v405;
        *(double *)&v218 = COERCE_DOUBLE(_convertNSErrorToError(_:)(*(_QWORD *)&v222));

        swift_willThrow(v251);
      }
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))&v395)(v214, v396, v139);
      v252 = COERCE_DOUBLE(v186);
      *(double *)&v253 = COERCE_DOUBLE(Logger.logObject.getter(*(_QWORD *)&v252));
      v254 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v253, v254))
      {
        v255 = swift_slowAlloc(42, -1);
        v395 = *(double *)&v215;
        v256 = v255;
        v257 = (_QWORD *)swift_slowAlloc(8, -1);
        v377 = v257;
        v389 = COERCE_DOUBLE(swift_slowAlloc(64, -1));
        v407 = v389;
        *(_DWORD *)v256 = 136446978;
        v387 = *(double *)&v253;
        v391 = v218;
        v258 = *(_QWORD *)&v386;
        v405 = v386;
        v259 = swift_getMetatypeMetadata(*(_QWORD *)&v386);
        v260 = String.init<A>(describing:)(&v405, v259);
        v262 = v261;
        v405 = COERCE_DOUBLE(sub_10001A820(v260, v261, (uint64_t *)&v407));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
        swift_bridgeObjectRelease(v262);
        *(_WORD *)(v256 + 12) = 2114;
        v405 = v252;
        v263 = *(id *)&v252;
        v139 = v394;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
        *(double *)v257 = v252;

        v103 = v388;
        *(_WORD *)(v256 + 22) = 2082;
        v264 = Bool.yesno.getter(v373);
        v266 = v265;
        v405 = COERCE_DOUBLE(sub_10001A820(v264, v265, (uint64_t *)&v407));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
        swift_bridgeObjectRelease(v266);
        *(_WORD *)(v256 + 32) = 2048;
        v267 = v384;
        Date.init()(v268);
        v269 = v371;
        v270 = Date.timeIntervalSince(_:)(v371);
        v271 = v267;
        v272 = v392;
        (*(void (**)(_BYTE *, uint64_t))&v392)(v271, v139);
        v405 = v270;
        v244 = v258;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
        (*(void (**)(_BYTE *, uint64_t))&v272)(v269, v139);
        v245 = *(os_log_t *)&v387;
        v273 = v254;
        v246 = v272;
        _os_log_impl((void *)&_mh_execute_header, *(os_log_t *)&v387, v273, "%{public}s: Failed to revert template's mostRecentPublicLinkUpdateRequestDate {templateObjectID: %{public}@, hasPublicLinkPriorToTemplateOperation: %{public}s, elapsedSeconds: %f}", (uint8_t *)v256, 0x2Au);
        v274 = sub_10001A630((uint64_t *)&unk_100839E70);
        v275 = v377;
        swift_arrayDestroy(v377, 1, v274);
        swift_slowDealloc(v275, -1, -1);
        v276 = v389;
        swift_arrayDestroy(*(_QWORD *)&v389, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(*(_QWORD *)&v276, -1, -1);
        v277 = v256;
        *(double *)&v215 = v395;
        swift_slowDealloc(v277, -1, -1);
        swift_errorRelease(v391);
        goto LABEL_51;
      }

      v246 = v392;
      (*(void (**)(_BYTE *, uint64_t))&v392)(v214, v139);
      swift_errorRelease(v218);

      goto LABEL_53;
    }
  }
  v405 = 0.0;
  v406[0] = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v350._object = (void *)0x80000001006F8C10;
  v350._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v350);
  v404 = v87;
  v351 = sub_10001A630(&qword_10083FD70);
  _print_unlocked<A, B>(_:_:)(&v404, &v405, v351, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *(_QWORD *)&v405, v406[0], "remindd/TypedPredicate.swift", 28, 2, 19, 0);
  __break(1u);
  return result;
}

uint64_t sub_1004FD900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084DC00);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084DC00);
  if (qword_100837670 != -1)
    swift_once(&qword_100837670, sub_1004A1934);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872130);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1004FD990(uint64_t a1, char a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t), uint64_t a9, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t MetatypeMetadata;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  char *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  NSObject *v41;
  os_log_type_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  id v50;
  uint64_t v51;
  char *v52;
  id v53;
  _QWORD *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  double v59;
  void (*v60)(char *, uint64_t);
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  os_log_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80[24];
  double v81;
  uint64_t v82;

  v75 = a1;
  v76 = a8;
  v74 = a10;
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v73 = (char *)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v66 - v20;
  v22 = (_BYTE *)(a3 + 16);
  swift_beginAccess(a3 + 16, v80, 0, 0);
  if ((*(_BYTE *)(a3 + 16) & 1) != 0)
  {
    if (qword_1008377B8 != -1)
      swift_once(&qword_1008377B8, sub_1004FD900);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_10001AAA8(v23, (uint64_t)qword_10084DC00);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      v81 = *(double *)&v28;
      *(_DWORD *)v27 = 136446210;
      v78 = v74;
      MetatypeMetadata = swift_getMetatypeMetadata(v74);
      v30 = String.init<A>(describing:)(&v78, MetatypeMetadata);
      v32 = v31;
      v78 = sub_10001A820(v30, v31, (uint64_t *)&v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79);
      swift_bridgeObjectRelease(v32);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s: Attempted to call completion more than once", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }

  }
  else
  {
    v72 = a9;
    v33 = a2 & 1;
    swift_beginAccess(v22, &v78, 1, 0);
    *v22 = 1;
    if (qword_1008377B8 != -1)
      swift_once(&qword_1008377B8, sub_1004FD900);
    v34 = type metadata accessor for Logger(0);
    sub_10001AAA8(v34, (uint64_t)qword_10084DC00);
    v71 = v17;
    v35 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
    v36 = v21;
    v35(v21, a7, v16);
    v37 = a4;
    v38 = a5;
    swift_retain_n(a6, 2);
    v39 = v37;
    v40 = v38;
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.default.getter(v41);
    v43 = v42;
    if (os_log_type_enabled(v41, v42))
    {
      v44 = swift_slowAlloc(52, -1);
      v70 = v33;
      v45 = v44;
      v66 = (_QWORD *)swift_slowAlloc(16, -1);
      v69 = swift_slowAlloc(32, -1);
      v77 = v69;
      *(_DWORD *)v45 = 136447234;
      v68 = v41;
      v81 = *(double *)&v74;
      v46 = swift_getMetatypeMetadata(v74);
      v47 = String.init<A>(describing:)(&v81, v46);
      LODWORD(v74) = v43;
      v49 = v48;
      v81 = COERCE_DOUBLE(sub_10001A820(v47, v48, &v77));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82);
      swift_bridgeObjectRelease(v49);
      *(_WORD *)(v45 + 12) = 2114;
      v81 = *(double *)&v39;
      v50 = v39;
      v67 = v16;
      v51 = a6;
      v52 = v36;
      v53 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82);
      v54 = v66;
      *v66 = v39;

      *(_WORD *)(v45 + 22) = 2114;
      v81 = *(double *)&v40;
      v55 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82);
      v54[1] = v40;

      *(_WORD *)(v45 + 32) = 2048;
      v56 = *(_QWORD *)(v51 + 80);
      swift_release(v51);
      v81 = *(double *)&v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82);
      v57 = swift_release(v51);
      *(_WORD *)(v45 + 42) = 2048;
      v58 = v73;
      Date.init()(v57);
      v59 = Date.timeIntervalSince(_:)(v52);
      v60 = *(void (**)(char *, uint64_t))(v71 + 8);
      v61 = v58;
      v62 = v67;
      v60(v61, v67);
      v81 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82);
      v60(v52, v62);
      v41 = v68;
      _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v74, "%{public}s: Finished execution {templateObjectID: %{public}@, templatePublicLinkConfiguration: %{public}@, remindersCountLimit: %ld, elapsedSeconds: %f}", (uint8_t *)v45, 0x34u);
      v63 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v54, 2, v63);
      swift_slowDealloc(v54, -1, -1);
      v64 = v69;
      swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1, -1);
      v65 = v45;
      v33 = v70;
      swift_slowDealloc(v65, -1, -1);
    }
    else
    {

      swift_release_n(a6, 2);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v21, v16);
    }

    v76(v75, v33);
  }
}

uint64_t sub_1004FDF2C(uint64_t a1, int a2, void *a3, uint64_t a4, int a5, unint64_t a6, void *a7, unint64_t a8, unint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, unsigned __int8 a16, uint64_t a17)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  void (*v33)(char *, unint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void (*v51)(uint64_t, char *, uint64_t);
  uint64_t v52;
  void *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  id v60;
  id v61;
  id v62;
  uint64_t result;
  void *v64;
  uint64_t v65;
  id v66;
  id v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  int v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  void **aBlock;
  uint64_t v99;
  uint64_t (*v100)(uint64_t);
  void *v101;
  void *v102;
  uint64_t v103;

  v81 = a8;
  v89 = a7;
  v79 = a6;
  v88 = a5;
  v96 = a1;
  v97 = a3;
  v84 = a2;
  v85 = a12;
  v86 = a11;
  v93 = a16;
  v91 = a14;
  v92 = a17;
  v90 = a13;
  v80 = a15;
  v87 = a10;
  v78 = a9;
  v18 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v82 = *(_QWORD *)(v18 - 8);
  v83 = *(_QWORD *)(v82 + 64);
  __chkstk_darwin(v18);
  v95 = (uint64_t)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for UUID(0);
  v20 = *(_QWORD *)(v94 - 8);
  v77 = *(_QWORD *)(v20 + 64);
  __chkstk_darwin(v94);
  v22 = (char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = v22;
  v23 = type metadata accessor for Date(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(_QWORD *)(v24 + 64);
  __chkstk_darwin(v23);
  v76 = (char *)&v69 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v28 = (char *)&v69 - v27;
  v74 = (char *)&v69 - v27;
  v29 = type metadata accessor for RDPublicTemplate(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(_QWORD *)(v30 + 64);
  __chkstk_darwin(v29);
  v73 = (uint64_t)&v69 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100378738(a4, v73);
  v70 = v24;
  v32 = *(void (**)(char *, unint64_t, uint64_t))(v24 + 16);
  v72 = v23;
  v32(v28, v79, v23);
  v33 = *(void (**)(char *, unint64_t, uint64_t))(v20 + 16);
  v71 = v20;
  v33(v22, v81, v94);
  v32((char *)&v69 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0), v78, v23);
  sub_1000CDA2C(v80, v95);
  v34 = *(unsigned __int8 *)(v30 + 80);
  v35 = (v34 + 40) & ~v34;
  v36 = v35 + v31;
  v37 = *(unsigned __int8 *)(v24 + 80);
  v38 = (v37 + v36 + 1) & ~v37;
  v39 = v25 + 7;
  v40 = (v25 + 7 + v38) & 0xFFFFFFFFFFFFFFF8;
  v41 = *(unsigned __int8 *)(v20 + 80);
  v42 = (v41 + v40 + 8) & ~v41;
  v77 = (v77 + v37 + v42) & ~v37;
  v81 = (v39 + v77) & 0xFFFFFFFFFFFFFFF8;
  v80 = (v81 + 15) & 0xFFFFFFFFFFFFFFF8;
  v79 = (v80 + 15) & 0xFFFFFFFFFFFFFFF8;
  v78 = (v79 + 15) & 0xFFFFFFFFFFFFFFF8;
  v43 = *(unsigned __int8 *)(v82 + 80);
  v44 = (v43 + v78 + 16) & ~v43;
  v45 = (v83 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
  v46 = swift_allocObject(&unk_1007F8748, v45 + 8, v34 | v37 | v41 | v43 | 7);
  *(_QWORD *)(v46 + 16) = v96;
  v84 &= 1u;
  *(_BYTE *)(v46 + 24) = v84;
  *(_QWORD *)(v46 + 32) = v97;
  v47 = v85;
  sub_1003786F4(v73, v46 + v35);
  *(_BYTE *)(v46 + v36) = v88;
  v48 = v86;
  v49 = v46 + v38;
  v50 = v89;
  v51 = *(void (**)(uint64_t, char *, uint64_t))(v70 + 32);
  v52 = v72;
  v51(v49, v74, v72);
  *(_QWORD *)(v46 + v40) = v50;
  v53 = v87;
  (*(void (**)(uint64_t, char *, uint64_t))(v71 + 32))(v46 + v42, v75, v94);
  v51(v46 + v77, v76, v52);
  *(_QWORD *)(v46 + v81) = v53;
  *(_QWORD *)(v46 + v80) = v48;
  *(_QWORD *)(v46 + v79) = v47;
  v54 = (_QWORD *)(v46 + v78);
  v55 = v46 + v44;
  v56 = v91;
  *v54 = v90;
  v54[1] = v56;
  sub_1000CDA74(v95, v55);
  *(_QWORD *)(v46 + v45) = v92;
  if ((v93 & 1) != 0)
  {
    v57 = swift_allocObject(&unk_1007F8798, 32, 7);
    *(_QWORD *)(v57 + 16) = sub_1005008FC;
    *(_QWORD *)(v57 + 24) = v46;
    v102 = sub_1000098E4;
    v103 = v57;
    aBlock = _NSConcreteStackBlock;
    v99 = 1107296256;
    v100 = sub_1000098C4;
    v101 = &unk_1007F87B0;
    v58 = _Block_copy(&aBlock);
    v59 = v103;
    sub_1000D026C(v96, v84);
    v60 = v97;
    v61 = v50;
    v62 = v53;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release(v59);
    objc_msgSend(v61, "performBlockAndWait:", v58);
    _Block_release(v58);
    LOBYTE(v58) = swift_isEscapingClosureAtFileLocation(v57, "", 153, 148, 57, 1);
    swift_release_n(v46, 2);
    result = swift_release(v57);
    if ((v58 & 1) == 0)
      return result;
    __break(1u);
  }
  v102 = sub_1005008FC;
  v103 = v46;
  aBlock = _NSConcreteStackBlock;
  v99 = 1107296256;
  v100 = sub_1000094C8;
  v101 = &unk_1007F8760;
  v64 = _Block_copy(&aBlock);
  v65 = v103;
  sub_1000D026C(v96, v84);
  v66 = v97;
  v67 = v50;
  v68 = v53;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release(v65);
  objc_msgSend(v67, "performBlock:", v64);
  _Block_release(v64);
  return swift_release(v46);
}

id sub_1004FE538(uint64_t a1, char a2, void *a3, void *a4, int a5, uint64_t a6, void *a7, NSObject *a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, char *a17, void *a18, uint64_t a19, uint64_t a20,void (*a21)(uint64_t, uint64_t),uint64_t a22,uint64_t a23,double a24)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  NSObject *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  id v59;
  Class v60;
  id v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  NSObject *v65;
  char v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  double v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  id v82;
  double v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  int v87;
  _BOOL4 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t MetatypeMetadata;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  double v98;
  id v99;
  Class v100;
  id v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  double v115;
  void (*v116)(char *, uint64_t);
  uint64_t v117;
  uint64_t v118;
  os_log_t v119;
  uint64_t v120;
  _QWORD *v121;
  double v122;
  id v123;
  NSObject *v124;
  char *v125;
  unsigned __int8 v126;
  double v127;
  uint64_t v128;
  char *v129;
  id v130;
  char *v131;
  double v132;
  NSObject *v133;
  NSObject *v134;
  os_log_type_t v135;
  int v136;
  uint64_t v137;
  char *v138;
  char *v139;
  double v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  id v146;
  Class v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  double v156;
  id v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  char *v162;
  uint64_t v163;
  char *v164;
  double v165;
  void (*v166)(char *, uint64_t);
  os_log_t v167;
  uint64_t v168;
  char *v169;
  double v170;
  void *v171;
  NSURL *KeyPath;
  unsigned __int8 v173;
  double v174;
  double v175;
  char *v176;
  double v177;
  NSObject *v178;
  os_log_type_t v179;
  int v180;
  uint64_t v181;
  double *v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  id v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  char *v191;
  uint64_t v192;
  char *v193;
  double v194;
  uint64_t v195;
  uint64_t v196;
  id v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  NSObject *v201;
  id v202;
  double v203;
  uint64_t v204;
  NSObject *v205;
  os_log_type_t v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  NSObject *v210;
  double v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  id v217;
  Class v218;
  id v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  char *v230;
  NSObject *v231;
  double v232;
  void (*v233)(char *, uint64_t);
  char *v234;
  uint64_t v235;
  os_log_t v236;
  uint64_t v237;
  os_log_t v238;
  double v239;
  id v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  id v244;
  double v245;
  uint64_t v246;
  NSObject *v247;
  os_log_type_t v248;
  int v249;
  uint64_t v250;
  NSObject *v251;
  double v252;
  NSObject *v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  id v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  uint64_t v265;
  char *v266;
  NSObject *v267;
  double v268;
  void (*v269)(char *, uint64_t);
  uint64_t v270;
  NSObject *v271;
  double v272;
  uint64_t v273;
  NSObject *v275;
  _QWORD *v276;
  uint64_t v277;
  _QWORD *v278;
  char *v279;
  uint64_t v280;
  char *v281;
  char *v282;
  os_log_t v283;
  NSObject *v284;
  NSObject *v285;
  uint64_t v286;
  uint64_t v287;
  double v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  void (*v293)(uint64_t, uint64_t);
  uint64_t v294;
  int v295;
  double v296;
  void *v297;
  double v298;
  uint64_t v299;
  id v300;
  _QWORD v301[3];
  char v302[8];
  _QWORD v303[3];
  char v304[8];
  _QWORD v305[3];
  char v306[8];
  double v307;
  uint64_t v308;

  v283 = a8;
  v300 = a7;
  v295 = a5;
  v296 = *(double *)&a4;
  v288 = *(double *)&a3;
  v298 = a24;
  v290 = a22;
  v293 = a21;
  v292 = a20;
  v291 = a19;
  v19 = type metadata accessor for Date(0);
  v299 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v285 = ((char *)&v276 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21);
  v284 = ((char *)&v276 - v22);
  __chkstk_darwin(v23);
  v281 = (char *)&v276 - v24;
  __chkstk_darwin(v25);
  v27 = (char *)&v276 - v26;
  __chkstk_darwin(v28);
  v282 = (char *)&v276 - v29;
  __chkstk_darwin(v30);
  v289 = (char *)&v276 - v31;
  __chkstk_darwin(v32);
  v34 = (char *)&v276 - v33;
  v287 = type metadata accessor for RDPublicTemplate(0);
  __chkstk_darwin(v287);
  __chkstk_darwin(v35);
  v37 = (char *)&v276 - v36;
  __chkstk_darwin(v38);
  __chkstk_darwin(v39);
  v43 = (char *)&v276 - v42;
  v44 = a6;
  v294 = a6;
  v297 = a18;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    v78 = a1;
    if (qword_1008377B8 != -1)
      swift_once(&qword_1008377B8, sub_1004FD900);
    v79 = type metadata accessor for Logger(0);
    v80 = COERCE_DOUBLE(sub_10001AAA8(v79, (uint64_t)qword_10084DC00));
    sub_100378738(*(uint64_t *)&v296, (uint64_t)v37);
    v81 = v299;
    v284 = *(NSObject **)(v299 + 16);
    ((void (*)(char *, uint64_t, uint64_t))v284)(v27, a6, v19);
    v82 = *(id *)&v288;
    sub_1000D026C(a1, 1);
    v83 = COERCE_DOUBLE(v82);
    v84 = sub_1000D026C(v78, 1);
    v296 = v80;
    v85 = Logger.logObject.getter(v84);
    v86 = static os_log_type_t.error.getter();
    v87 = v86;
    v88 = os_log_type_enabled(v85, v86);
    v89 = v19;
    v280 = v78;
    if (v88)
    {
      v90 = swift_slowAlloc(62, -1);
      v286 = v19;
      v91 = v90;
      v92 = (_QWORD *)swift_slowAlloc(8, -1);
      v278 = v92;
      v288 = COERCE_DOUBLE(swift_slowAlloc(128, -1));
      v308 = *(_QWORD *)&v288;
      *(_DWORD *)v91 = 136447490;
      v283 = v85;
      v279 = v27;
      v307 = v298;
      MetatypeMetadata = swift_getMetatypeMetadata(*(_QWORD *)&v298);
      v94 = v78;
      v95 = String.init<A>(describing:)(&v307, MetatypeMetadata);
      v97 = v96;
      v307 = COERCE_DOUBLE(sub_10001A820(v95, v96, &v308));
      LODWORD(v282) = v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
      swift_bridgeObjectRelease(v97);
      *(_WORD *)(v91 + 12) = 2114;
      v307 = v83;
      v98 = v83;
      v99 = *(id *)&v83;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
      *(double *)v92 = v98;

      *(_WORD *)(v91 + 22) = 2082;
      v100 = sub_1000D6C38((uint64_t)&v37[*(int *)(v287 + 32)]);
      v101 = -[objc_class recordName](v100, "recordName");

      v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(v101);
      v104 = v103;

      v105 = v102;
      v83 = v98;
      v307 = COERCE_DOUBLE(sub_10001A820(v105, v104, &v308));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
      swift_bridgeObjectRelease(v104);
      sub_10030DBA4((uint64_t)v37);
      *(_WORD *)(v91 + 32) = 2082;
      v106 = Bool.yesno.getter(v295 & 1);
      v108 = v107;
      v307 = COERCE_DOUBLE(sub_10001A820(v106, v107, &v308));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
      swift_bridgeObjectRelease(v108);
      *(_WORD *)(v91 + 42) = 2082;
      swift_getErrorValue(v94, v304, v303);
      v109 = Error.rem_errorDescription.getter(v303[1], v303[2]);
      v111 = v110;
      v307 = COERCE_DOUBLE(sub_10001A820(v109, v110, &v308));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
      swift_bridgeObjectRelease(v111);
      sub_1000D0278(v94, 1);
      v112 = sub_1000D0278(v94, 1);
      *(_WORD *)(v91 + 52) = 2048;
      v113 = v289;
      Date.init()(v112);
      v114 = (uint64_t)v279;
      v115 = Date.timeIntervalSince(_:)(v279);
      v116 = *(void (**)(char *, uint64_t))(v299 + 8);
      v117 = v286;
      v116(v113, v286);
      v307 = v115;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
      v118 = v117;
      v116((char *)v114, v117);
      v119 = v283;
      _os_log_impl((void *)&_mh_execute_header, v283, (os_log_type_t)v282, "%{public}s: Failed to upload content of template's public link {templateObjectID: %{public}@, recordName: %{public}s, hasPublicLinkPriorToTemplateOperation: %{public}s, error: %{public}s, elapsedSeconds: %f}", (uint8_t *)v91, 0x3Eu);
      v120 = sub_10001A630((uint64_t *)&unk_100839E70);
      v121 = v278;
      swift_arrayDestroy(v278, 1, v120);
      swift_slowDealloc(v121, -1, -1);
      v122 = v288;
      swift_arrayDestroy(*(_QWORD *)&v288, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(*(_QWORD *)&v122, -1, -1);
      v44 = v294;
      swift_slowDealloc(v91, -1, -1);

    }
    else
    {

      sub_10030DBA4((uint64_t)v37);
      sub_1000D0278(v78, 1);
      sub_1000D0278(v78, 1);
      v116 = *(void (**)(char *, uint64_t))(v81 + 8);
      v118 = v89;
      v116(v27, v89);

    }
    v123 = sub_1002A6E28(*(void **)&v83, (uint64_t)v300, (Class)&off_1007E1398, 0);
    v124 = v285;
    v171 = v123;
    swift_arrayDestroy(&unk_1007E13B8, 1, &type metadata for String);
    KeyPath = (NSURL *)swift_getKeyPath(&unk_1006C0918);
    sub_10015087C(KeyPath, a23);
    swift_release(KeyPath);
    objc_msgSend(v171, "updateChangeCount");

    v307 = 0.0;
    v173 = objc_msgSend(v300, "save:", &v307);
    v174 = v307;
    if ((v173 & 1) != 0)
    {
      v175 = v298;
      v176 = v281;
      ((void (*)(char *, uint64_t, uint64_t))v284)(v281, v44, v118);
      v288 = v83;
      v177 = COERCE_DOUBLE(*(id *)&v83);
      v178 = Logger.logObject.getter(*(id *)&v174);
      v179 = static os_log_type_t.default.getter(v178);
      v180 = v179;
      if (os_log_type_enabled(v178, v179))
      {
        v181 = swift_slowAlloc(42, -1);
        v182 = (double *)swift_slowAlloc(8, -1);
        v299 = swift_slowAlloc(64, -1);
        v307 = v175;
        v308 = v299;
        *(_DWORD *)v181 = 136446978;
        LODWORD(v296) = v180;
        v183 = swift_getMetatypeMetadata(*(_QWORD *)&v175);
        v184 = String.init<A>(describing:)(&v307, v183);
        v186 = v185;
        v307 = COERCE_DOUBLE(sub_10001A820(v184, v185, &v308));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
        swift_bridgeObjectRelease(v186);
        *(_WORD *)(v181 + 12) = 2114;
        v307 = v177;
        v187 = *(id *)&v177;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
        *v182 = v177;

        *(_WORD *)(v181 + 22) = 2082;
        v188 = Bool.yesno.getter(v295 & 1);
        v190 = v189;
        v307 = COERCE_DOUBLE(sub_10001A820(v188, v189, &v308));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
        swift_bridgeObjectRelease(v190);
        *(_WORD *)(v181 + 32) = 2048;
        v191 = v289;
        Date.init()(v192);
        v193 = v281;
        v194 = Date.timeIntervalSince(_:)(v281);
        v116(v191, v118);
        v307 = v194;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
        v116(v193, v118);
        _os_log_impl((void *)&_mh_execute_header, v178, LOBYTE(v296), "%{public}s: Reverted template's mostRecentPublicLinkUpdateRequestDate {templateObjectID: %{public}@, hasPublicLinkPriorToTemplateOperation: %{public}s, elapsedSeconds: %f}", (uint8_t *)v181, 0x2Au);
        v195 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v182, 1, v195);
        swift_slowDealloc(v182, -1, -1);
        v196 = v299;
        swift_arrayDestroy(v299, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v196, -1, -1);
        swift_slowDealloc(v181, -1, -1);
      }
      else
      {

        v116(v176, v118);
      }

      v243 = v294;
      v273 = v280;
      v83 = v288;
    }
    else
    {
      v240 = *(id *)&v307;
      v241 = _convertNSErrorToError(_:)(*(_QWORD *)&v174);

      swift_willThrow(v242);
      v243 = v44;
      ((void (*)(NSObject *, uint64_t, uint64_t))v284)(v124, v44, v118);
      v244 = *(id *)&v83;
      swift_errorRetain(v241);
      v245 = COERCE_DOUBLE(v244);
      v246 = swift_errorRetain(v241);
      v247 = Logger.logObject.getter(v246);
      v248 = static os_log_type_t.error.getter();
      v249 = v248;
      if (os_log_type_enabled(v247, v248))
      {
        v250 = swift_slowAlloc(52, -1);
        v251 = swift_slowAlloc(8, -1);
        v252 = v298;
        v253 = v251;
        v284 = v251;
        v296 = COERCE_DOUBLE(swift_slowAlloc(96, -1));
        v307 = v252;
        v308 = *(_QWORD *)&v296;
        *(_DWORD *)v250 = 136447234;
        LODWORD(v287) = v249;
        v254 = swift_getMetatypeMetadata(*(_QWORD *)&v252);
        v288 = v83;
        v255 = String.init<A>(describing:)(&v307, v254);
        v257 = v256;
        v307 = COERCE_DOUBLE(sub_10001A820(v255, v256, &v308));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
        swift_bridgeObjectRelease(v257);
        *(_WORD *)(v250 + 12) = 2114;
        v307 = v245;
        v258 = *(id *)&v245;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
        *(double *)&v253->isa = v245;

        *(_WORD *)(v250 + 22) = 2082;
        v259 = Bool.yesno.getter(v295 & 1);
        v261 = v260;
        v307 = COERCE_DOUBLE(sub_10001A820(v259, v260, &v308));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
        swift_bridgeObjectRelease(v261);
        *(_WORD *)(v250 + 32) = 2082;
        v83 = v288;
        swift_getErrorValue(v241, v306, v305);
        v262 = Error.rem_errorDescription.getter(v305[1], v305[2]);
        v264 = v263;
        v307 = COERCE_DOUBLE(sub_10001A820(v262, v263, &v308));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
        swift_bridgeObjectRelease(v264);
        swift_errorRelease(v241);
        v265 = swift_errorRelease(v241);
        *(_WORD *)(v250 + 42) = 2048;
        v266 = v289;
        Date.init()(v265);
        v267 = v285;
        v268 = Date.timeIntervalSince(_:)(v285);
        v269 = *(void (**)(char *, uint64_t))(v299 + 8);
        v269(v266, v118);
        v307 = v268;
        v243 = v294;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
        v269((char *)v267, v118);
        _os_log_impl((void *)&_mh_execute_header, v247, (os_log_type_t)v287, "%{public}s: Failed to revert template's mostRecentPublicLinkUpdateRequestDate {templateObjectID: %{public}@, hasPublicLinkPriorToTemplateOperation: %{public}s, error: %{public}s, elapsedSeconds: %f}", (uint8_t *)v250, 0x34u);
        v270 = sub_10001A630((uint64_t *)&unk_100839E70);
        v271 = v284;
        swift_arrayDestroy(v284, 1, v270);
        swift_slowDealloc(v271, -1, -1);
        v272 = v296;
        swift_arrayDestroy(*(_QWORD *)&v296, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(*(_QWORD *)&v272, -1, -1);
        swift_slowDealloc(v250, -1, -1);

        swift_errorRelease(v241);
      }
      else
      {
        swift_errorRelease(v241);

        swift_errorRelease(v241);
        swift_errorRelease(v241);
        v116((char *)v124, v118);

      }
      v273 = v280;
    }
    swift_errorRetain(v273);
    sub_1004FD990(v273, 1, v291, *(void **)&v83, v297, v292, v243, v293, v290, *(uint64_t *)&v298);
    sub_1000D0278(v273, 1);
    sub_1000D0278(v273, 1);
  }
  else
  {
    v279 = (char *)v41;
    v280 = v40;
    v281 = a17;
    if (qword_1008377B8 != -1)
      swift_once(&qword_1008377B8, sub_1004FD900);
    v45 = type metadata accessor for Logger(0);
    v46 = sub_10001AAA8(v45, (uint64_t)qword_10084DC00);
    sub_100378738(*(uint64_t *)&v296, (uint64_t)v43);
    v47 = v299;
    v285 = *(NSObject **)(v299 + 16);
    ((void (*)(char *, uint64_t, uint64_t))v285)(v34, v44, v19);
    v48 = COERCE_DOUBLE(*(id *)&v288);
    v49 = Logger.logObject.getter(*(_QWORD *)&v48);
    v50 = static os_log_type_t.default.getter(v49);
    LODWORD(v288) = v50;
    v51 = os_log_type_enabled(v49, v50);
    v286 = v19;
    if (v51)
    {
      v52 = swift_slowAlloc(52, -1);
      v278 = (_QWORD *)v46;
      v53 = v52;
      v54 = (_QWORD *)swift_slowAlloc(8, -1);
      v276 = v54;
      v277 = swift_slowAlloc(96, -1);
      v308 = v277;
      *(_DWORD *)v53 = 136447234;
      v307 = v298;
      v55 = swift_getMetatypeMetadata(*(_QWORD *)&v298);
      v56 = String.init<A>(describing:)(&v307, v55);
      v58 = v57;
      v307 = COERCE_DOUBLE(sub_10001A820(v56, v57, &v308));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
      swift_bridgeObjectRelease(v58);
      *(_WORD *)(v53 + 12) = 2114;
      v307 = v48;
      v59 = *(id *)&v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
      *(double *)v54 = v48;

      *(_WORD *)(v53 + 22) = 2082;
      v60 = sub_1000D6C38((uint64_t)&v43[*(int *)(v287 + 32)]);
      v61 = -[objc_class recordName](v60, "recordName");

      v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
      v64 = v63;

      v307 = COERCE_DOUBLE(sub_10001A820(v62, v64, &v308));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
      swift_bridgeObjectRelease(v64);
      sub_10030DBA4((uint64_t)v43);
      *(_WORD *)(v53 + 32) = 2082;
      v65 = v49;
      v66 = v295;
      v67 = Bool.yesno.getter(v295 & 1);
      v69 = v68;
      v307 = COERCE_DOUBLE(sub_10001A820(v67, v68, &v308));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
      swift_bridgeObjectRelease(v69);
      *(_WORD *)(v53 + 42) = 2048;
      v70 = v289;
      Date.init()(v71);
      v72 = Date.timeIntervalSince(_:)(v34);
      v73 = *(void (**)(char *, uint64_t))(v299 + 8);
      v73(v70, v286);
      v307 = v72;
      v19 = v286;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
      v73(v34, v19);
      _os_log_impl((void *)&_mh_execute_header, v65, LOBYTE(v288), "%{public}s: Uploaded content of template's public link {templateObjectID: %{public}@, recordName: %{public}s, hasPublicLinkPriorToTemplateOperation: %{public}s, elapsedSeconds: %f}", (uint8_t *)v53, 0x34u);
      v74 = sub_10001A630((uint64_t *)&unk_100839E70);
      v75 = v276;
      swift_arrayDestroy(v276, 1, v74);
      swift_slowDealloc(v75, -1, -1);
      v76 = v277;
      swift_arrayDestroy(v277, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1, -1);
      v77 = v53;
      v44 = v294;
      swift_slowDealloc(v77, -1, -1);

    }
    else
    {

      sub_10030DBA4((uint64_t)v43);
      v73 = *(void (**)(char *, uint64_t))(v47 + 8);
      v73(v34, v19);

      v66 = v295;
    }
    v125 = sub_100500A70(*(void **)&v48, (uint64_t)v300, (uint64_t)v283, v281, v297, (v66 & 1) == 0);
    v307 = 0.0;
    v126 = objc_msgSend(v300, "save:", &v307);
    v127 = v307;
    if ((v126 & 1) != 0)
    {
      v128 = (uint64_t)v279;
      sub_100378738(*(uint64_t *)&v296, (uint64_t)v279);
      v129 = v282;
      ((void (*)(char *, uint64_t, uint64_t))v285)(v282, v44, v19);
      v130 = *(id *)&v48;
      v131 = v125;
      v132 = COERCE_DOUBLE(v130);
      v133 = v131;
      v134 = Logger.logObject.getter(*(id *)&v127);
      v135 = static os_log_type_t.default.getter(v134);
      v136 = v135;
      if (os_log_type_enabled(v134, v135))
      {
        v137 = swift_slowAlloc(62, -1);
        v138 = (char *)swift_slowAlloc(8, -1);
        v285 = v133;
        v139 = v138;
        v281 = v138;
        v140 = COERCE_DOUBLE(swift_slowAlloc(128, -1));
        v288 = v140;
        *(_DWORD *)v137 = 136447490;
        v284 = v134;
        v141 = *(_QWORD *)&v298;
        v307 = v298;
        v308 = *(_QWORD *)&v140;
        v142 = swift_getMetatypeMetadata(*(_QWORD *)&v298);
        LODWORD(v283) = v136;
        v143 = String.init<A>(describing:)(&v307, v142);
        v296 = v132;
        v145 = v144;
        v307 = COERCE_DOUBLE(sub_10001A820(v143, v144, &v308));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
        swift_bridgeObjectRelease(v145);
        *(_WORD *)(v137 + 12) = 2114;
        v307 = v296;
        v146 = *(id *)&v296;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
        *(double *)v139 = v296;
        v133 = v285;

        *(_WORD *)(v137 + 22) = 2082;
        v147 = sub_1000D6C38(v128 + *(int *)(v287 + 32));
        v148 = -[objc_class recordName](v147, "recordName");

        v149 = static String._unconditionallyBridgeFromObjectiveC(_:)(v148);
        v150 = v19;
        v152 = v151;

        v307 = COERCE_DOUBLE(sub_10001A820(v149, v152, &v308));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
        swift_bridgeObjectRelease(v152);
        sub_10030DBA4(v128);
        *(_WORD *)(v137 + 32) = 2082;
        v153 = Bool.yesno.getter(v295 & 1);
        v155 = v154;
        v307 = COERCE_DOUBLE(sub_10001A820(v153, v154, &v308));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
        *(_QWORD *)&v156 = swift_bridgeObjectRelease(v155).n128_u64[0];
        *(_WORD *)(v137 + 42) = 2082;
        v157 = -[NSObject description](v133, "description", v156);
        v158 = static String._unconditionallyBridgeFromObjectiveC(_:)(v157);
        v160 = v159;

        v307 = COERCE_DOUBLE(sub_10001A820(v158, v160, &v308));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);

        v161 = v160;
        v132 = v296;
        swift_bridgeObjectRelease(v161);
        *(_WORD *)(v137 + 52) = 2048;
        v162 = v289;
        Date.init()(v163);
        v164 = v282;
        v165 = Date.timeIntervalSince(_:)(v282);
        v166 = *(void (**)(char *, uint64_t))(v299 + 8);
        v166(v162, v150);
        v307 = v165;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
        v166(v164, v150);
        v167 = v284;
        _os_log_impl((void *)&_mh_execute_header, v284, (os_log_type_t)v283, "%{public}s: Saved template's public link {templateObjectID: %{public}@, recordName: %{public}s, hasPublicLinkPriorToTemplateOperation: %{public}s, publicLink: %{public}s, elapsedSeconds: %f}", (uint8_t *)v137, 0x3Eu);
        v168 = sub_10001A630((uint64_t *)&unk_100839E70);
        v169 = v281;
        swift_arrayDestroy(v281, 1, v168);
        swift_slowDealloc(v169, -1, -1);
        v170 = v288;
        swift_arrayDestroy(*(_QWORD *)&v288, 4, (char *)&type metadata for Any + 8);
        swift_slowDealloc(*(_QWORD *)&v170, -1, -1);
        swift_slowDealloc(v137, -1, -1);

      }
      else
      {

        sub_10030DBA4(v128);
        v73(v129, v19);

        v141 = *(_QWORD *)&v298;
      }
      v275 = v133;
      sub_1004FD990((uint64_t)v133, 0, v291, *(void **)&v132, v297, v292, v294, v293, v290, v141);

    }
    else
    {
      v197 = *(id *)&v307;
      v198 = _convertNSErrorToError(_:)(*(_QWORD *)&v127);

      swift_willThrow(v199);
      v200 = v280;
      sub_100378738(*(uint64_t *)&v296, v280);
      v201 = v284;
      ((void (*)(NSObject *, uint64_t, uint64_t))v285)(v284, v44, v19);
      v202 = *(id *)&v48;
      swift_errorRetain(v198);
      v203 = COERCE_DOUBLE(v202);
      v204 = swift_errorRetain(v198);
      v205 = Logger.logObject.getter(v204);
      v206 = static os_log_type_t.error.getter();
      v207 = v206;
      if (os_log_type_enabled(v205, v206))
      {
        v208 = swift_slowAlloc(62, -1);
        LODWORD(v288) = v207;
        v209 = v208;
        v210 = swift_slowAlloc(8, -1);
        v283 = v210;
        v211 = COERCE_DOUBLE(swift_slowAlloc(128, -1));
        v296 = v211;
        *(_DWORD *)v209 = 136447490;
        v285 = v205;
        v212 = *(_QWORD *)&v298;
        v307 = v298;
        v308 = *(_QWORD *)&v211;
        v213 = swift_getMetatypeMetadata(*(_QWORD *)&v298);
        v214 = String.init<A>(describing:)(&v307, v213);
        v216 = v215;
        v307 = COERCE_DOUBLE(sub_10001A820(v214, v215, &v308));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
        swift_bridgeObjectRelease(v216);
        *(_WORD *)(v209 + 12) = 2114;
        v307 = v203;
        v217 = *(id *)&v203;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
        *(double *)&v210->isa = v203;

        *(_WORD *)(v209 + 22) = 2082;
        v218 = sub_1000D6C38(v200 + *(int *)(v287 + 32));
        v219 = -[objc_class recordName](v218, "recordName");

        v220 = static String._unconditionallyBridgeFromObjectiveC(_:)(v219);
        v222 = v221;

        v307 = COERCE_DOUBLE(sub_10001A820(v220, v222, &v308));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
        swift_bridgeObjectRelease(v222);
        sub_10030DBA4(v200);
        *(_WORD *)(v209 + 32) = 2082;
        v223 = Bool.yesno.getter(v295 & 1);
        v225 = v224;
        v307 = COERCE_DOUBLE(sub_10001A820(v223, v224, &v308));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
        swift_bridgeObjectRelease(v225);
        *(_WORD *)(v209 + 42) = 2082;
        swift_getErrorValue(v198, v302, v301);
        v226 = Error.rem_errorDescription.getter(v301[1], v301[2]);
        v228 = v227;
        v307 = COERCE_DOUBLE(sub_10001A820(v226, v227, &v308));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
        swift_bridgeObjectRelease(v228);
        swift_errorRelease(v198);
        v229 = swift_errorRelease(v198);
        *(_WORD *)(v209 + 52) = 2048;
        v230 = v289;
        Date.init()(v229);
        v231 = v284;
        v232 = Date.timeIntervalSince(_:)(v284);
        v233 = *(void (**)(char *, uint64_t))(v299 + 8);
        v234 = v230;
        v235 = v286;
        v233(v234, v286);
        v307 = v232;
        v44 = v294;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
        v233((char *)v231, v235);
        v236 = v285;
        _os_log_impl((void *)&_mh_execute_header, v285, LOBYTE(v288), "%{public}s: Failed to save template's public link {templateObjectID: %{public}@, recordName: %{public}s, hasPublicLinkPriorToTemplateOperation: %{public}s, error: %{public}s, elapsedSeconds: %f}", (uint8_t *)v209, 0x3Eu);
        v237 = sub_10001A630((uint64_t *)&unk_100839E70);
        v238 = v283;
        swift_arrayDestroy(v283, 1, v237);
        swift_slowDealloc(v238, -1, -1);
        v239 = v296;
        swift_arrayDestroy(*(_QWORD *)&v296, 4, (char *)&type metadata for Any + 8);
        swift_slowDealloc(*(_QWORD *)&v239, -1, -1);
        swift_slowDealloc(v209, -1, -1);

      }
      else
      {

        sub_10030DBA4(v200);
        swift_errorRelease(v198);
        swift_errorRelease(v198);
        v73((char *)v201, v19);

        v212 = *(_QWORD *)&v298;
      }
      swift_errorRetain(v198);
      sub_1004FD990(v198, 1, v291, *(void **)&v203, v297, v292, v44, v293, v290, v212);
      swift_errorRelease(v198);
      swift_errorRelease(v198);
    }
  }
  return objc_msgSend(v300, "reset");
}

uint64_t sub_1005000E8()
{
  uint64_t v0;

  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t type metadata accessor for RDTemplateOperationCreateOrUpdateTemplatePublicLink()
{
  return objc_opt_self(_TtC7remindd51RDTemplateOperationCreateOrUpdateTemplatePublicLink);
}

uint64_t sub_10050013C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10050015C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  _QWORD *v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a7;
  v22 = a8;
  v17 = sub_1000087F0(&v20);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(v17, a3, a7);
  v18 = swift_allocObject(a6, 96, 7);
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  sub_10001BCA8(&v20, v18 + 32);
  *(_BYTE *)(v18 + 72) = a4;
  *(_QWORD *)(v18 + 80) = a5;
  *(double *)(v18 + 88) = a9;
  return v18;
}

uint64_t sub_100500210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  void (*v15)(uint64_t, uint64_t, __n128);
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  __n128 v18;
  void (*v19)(uint64_t, uint64_t, __n128);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = type metadata accessor for RDPublicTemplate(0);
  v2 = *(_QWORD *)(v1 - 8);
  v32 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v32 + 24) & ~v32;
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64) + 7;
  v23 = (v4 + v7 + v3 + 1) & ~v7;
  v9 = (v8 + v23) & 0xFFFFFFFFFFFFFFF8;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v31 = *(unsigned __int8 *)(v11 + 80);
  v21 = (v9 + v31 + 8) & ~v31;
  v22 = (*(_QWORD *)(v11 + 64) + v7 + v21) & ~v7;
  v24 = (v8 + v22) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF8;
  v26 = v9;
  v27 = (v25 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_QWORD *)(sub_10001A630((uint64_t *)&unk_1008380D0) - 8);
  v28 = (*(unsigned __int8 *)(v12 + 80) + ((v27 + 15) & 0xFFFFFFFFFFFFFFF8) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v29 = *(_QWORD *)(v12 + 64);
  v30 = *(unsigned __int8 *)(v12 + 80);

  v13 = v0 + v3;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  v14 = swift_bridgeObjectRelease();
  v15 = *(void (**)(uint64_t, uint64_t, __n128))(v11 + 8);
  v15(v0 + v3 + *(int *)(v1 + 32), v10, v14);
  v16 = v0 + v3 + *(int *)(v1 + 36);
  v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v17(v13 + *(int *)(v1 + 36), 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v16, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = swift_bridgeObjectRelease();
  v19 = *(void (**)(uint64_t, uint64_t, __n128))(v6 + 8);
  v19(v0 + v23, v5, v18);

  ((void (*)(uint64_t, uint64_t))v15)(v0 + v21, v10);
  ((void (*)(uint64_t, uint64_t))v19)(v0 + v22, v5);

  swift_release(*(_QWORD *)(v0 + v25));
  swift_release(*(_QWORD *)(v0 + v27));
  swift_release(*(_QWORD *)(v0 + ((v27 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
  if (!v17(v0 + v28, 1, v5))
    ((void (*)(unint64_t, uint64_t))v19)(v0 + v28, v5);
  return swift_deallocObject(v0, ((v28 + v29) & 0xFFFFFFFFFFFFFFF8) + 16, v32 | v7 | v31 | v30 | 7);
}

uint64_t sub_1005004C0(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v20;
  int v21;

  v21 = a2 & 1;
  v3 = *(_QWORD *)(type metadata accessor for RDPublicTemplate(0) - 8);
  v20 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v4 = v20 + *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v4 + v6 + 1) & ~v6;
  v8 = *(_QWORD *)(v5 + 64) + 7;
  v9 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v11 = (v9 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = (*(_QWORD *)(v10 + 64) + v6 + v11) & ~v6;
  v13 = (v8 + v12) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_QWORD *)(sub_10001A630((uint64_t *)&unk_1008380D0) - 8);
  v18 = (*(unsigned __int8 *)(v17 + 80) + v16 + 16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  return sub_1004FDF2C(a1, v21, *(void **)(v2 + 16), v2 + v20, *(unsigned __int8 *)(v2 + v4), v2 + v7, *(void **)(v2 + v9), v2 + v11, v2 + v12, *(void **)(v2 + v13), *(_QWORD *)(v2 + v14), *(_QWORD *)(v2 + v15), *(_QWORD *)(v2 + v16), *(_QWORD *)(v2 + v16 + 8), v2 + v18, *(_BYTE *)(v2 + v18 + *(_QWORD *)(v17 + 64)), *(_QWORD *)(((v18 + *(_QWORD *)(v17 + 64)) & 0xFFFFFFFFFFFFF8) + v2 + 8));
}

uint64_t sub_10050063C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  void (*v15)(uint64_t, uint64_t, __n128);
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  __n128 v18;
  void (*v19)(uint64_t, uint64_t, __n128);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = type metadata accessor for RDPublicTemplate(0);
  v2 = *(_QWORD *)(v1 - 8);
  v32 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v32 + 40) & ~v32;
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64) + 7;
  v23 = (v4 + v7 + v3 + 1) & ~v7;
  v9 = (v8 + v23) & 0xFFFFFFFFFFFFFFF8;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v31 = *(unsigned __int8 *)(v11 + 80);
  v21 = (v9 + v31 + 8) & ~v31;
  v22 = (*(_QWORD *)(v11 + 64) + v7 + v21) & ~v7;
  v24 = (v8 + v22) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF8;
  v26 = v9;
  v27 = (v25 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_QWORD *)(sub_10001A630((uint64_t *)&unk_1008380D0) - 8);
  v28 = (*(unsigned __int8 *)(v12 + 80) + ((v27 + 15) & 0xFFFFFFFFFFFFFFF8) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v29 = *(_QWORD *)(v12 + 64);
  v30 = *(unsigned __int8 *)(v12 + 80);
  sub_1000D0278(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));

  v13 = v0 + v3;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  v14 = swift_bridgeObjectRelease();
  v15 = *(void (**)(uint64_t, uint64_t, __n128))(v11 + 8);
  v15(v0 + v3 + *(int *)(v1 + 32), v10, v14);
  v16 = v0 + v3 + *(int *)(v1 + 36);
  v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v17(v13 + *(int *)(v1 + 36), 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v16, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = swift_bridgeObjectRelease();
  v19 = *(void (**)(uint64_t, uint64_t, __n128))(v6 + 8);
  v19(v0 + v23, v5, v18);

  ((void (*)(uint64_t, uint64_t))v15)(v0 + v21, v10);
  ((void (*)(uint64_t, uint64_t))v19)(v0 + v22, v5);

  swift_release(*(_QWORD *)(v0 + v25));
  swift_release(*(_QWORD *)(v0 + v27));
  swift_release(*(_QWORD *)(v0 + ((v27 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
  if (!v17(v0 + v28, 1, v5))
    ((void (*)(unint64_t, uint64_t))v19)(v0 + v28, v5);
  return swift_deallocObject(v0, ((v29 + v28 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v32 | v7 | v31 | v30 | 7);
}

id sub_1005008FC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  unint64_t v26;

  v1 = *(_QWORD *)(type metadata accessor for RDPublicTemplate(0) - 8);
  v26 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v2 = v26 + *(_QWORD *)(v1 + 64);
  v3 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v2 + v4 + 1) & ~v4;
  v6 = *(_QWORD *)(v3 + 64) + 7;
  v7 = (v6 + v5) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v9 = (v7 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = (*(_QWORD *)(v8 + 64) + v4 + v9) & ~v4;
  v11 = (v6 + v10) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)(sub_10001A630((uint64_t *)&unk_1008380D0) - 8);
  v16 = (*(unsigned __int8 *)(v15 + 80) + v14 + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  return sub_1004FE538(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(void **)(v0 + 32), (void *)(v0 + v26), *(unsigned __int8 *)(v0 + v2), v0 + v5, *(void **)(v0 + v7), (v0 + v9), v17, v18, v19, v20, v21, v22, v23, v24, (char *)(v0 + v10), *(void **)(v0 + v11), *(_QWORD *)(v0 + v12),
           *(_QWORD *)(v0 + v13),
           *(void (**)(uint64_t, uint64_t))(v0 + v14),
           *(_QWORD *)(v0 + v14 + 8),
           v0 + v16,
           *(double *)(v0 + ((*(_QWORD *)(v15 + 64) + v16 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100500A60()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

char *sub_100500A70(void *a1, uint64_t a2, uint64_t a3, char *a4, void *a5, int a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v26;
  NSURL *KeyPath;
  id v28;
  id v29;
  id v30;
  NSString v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  void (*v34)(char *, _QWORD, uint64_t, uint64_t);
  NSURL *v35;
  NSURL *v36;
  NSURL *v37;
  char *v38;
  uint64_t v40;
  uint64_t ObjCClassFromMetadata;
  NSString v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  id v46;
  int v47;
  uint64_t v48;

  v47 = a6;
  v46 = a5;
  v11 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v11);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v17);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1002A6E28(a1, a2, 0, 0);
  if (!v6)
  {
    v21 = v20;
    v44 = 0;
    v45 = a4;
    v22 = type metadata accessor for UUID(0);
    v23 = v14;
    v24 = *(_QWORD *)(v22 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v19, a3, v22);
    v25 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56);
    v26 = v23;
    v25(v19, 0, 1, v22);
    KeyPath = (NSURL *)swift_getKeyPath(&unk_1006C0958);
    sub_1001527B0(KeyPath, (uint64_t)v19);
    swift_release(KeyPath);
    sub_10000882C((uint64_t)v19, (uint64_t *)&unk_100839C80);
    v28 = v46;
    v29 = v46;
    REMCDTemplate.publicLinkConfiguration.setter(v28);
    v30 = objc_msgSend(v21, "createResolutionTokenMapIfNecessary");
    v31 = String._bridgeToObjectiveC()();
    objc_msgSend(v30, "updateForKey:", v31);

    static Date.now.getter();
    v32 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
    v33 = v48;
    v32(v13, v16, v48);
    v34 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56);
    v34(v13, 0, 1, v33);
    v35 = (NSURL *)swift_getKeyPath(&unk_1006C09A0);
    sub_10015087C(v35, (uint64_t)v13);
    swift_release(v35);
    sub_10000882C((uint64_t)v13, (uint64_t *)&unk_1008380D0);
    if ((v47 & 1) != 0)
    {
      v32(v13, v16, v33);
      v34(v13, 0, 1, v33);
      v36 = (NSURL *)swift_getKeyPath(&unk_1006C0A38);
      sub_10015087C(v36, (uint64_t)v13);
      swift_release(v36);
      sub_10000882C((uint64_t)v13, (uint64_t *)&unk_1008380D0);
    }
    v32(v13, v45, v33);
    v34(v13, 0, 1, v33);
    v37 = (NSURL *)swift_getKeyPath(&unk_1006C09F0);
    sub_10015087C(v37, (uint64_t)v13);
    swift_release(v37);
    sub_10000882C((uint64_t)v13, (uint64_t *)&unk_1008380D0);
    objc_msgSend(v21, "updateChangeCount");
    v38 = (char *)REMCDTemplate.publicLink.getter();
    if (v38)
    {
      v13 = v38;
      (*(void (**)(char *, uint64_t))(v26 + 8))(v16, v33);

    }
    else
    {
      v40 = type metadata accessor for REMCDTemplate();
      v13 = (char *)objc_opt_self(REMError);
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v40);
      v42 = String._bridgeToObjectiveC()();
      objc_msgSend(v13, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v42);

      swift_willThrow(v43);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v16, v33);
    }
  }
  return v13;
}

id sub_100500E7C(void *a1)
{
  void *v1;
  void *v2;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  void *v16;
  NSString v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  _QWORD *v47;
  id v48;
  id v49;
  void *v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  id v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  os_log_type_t v60;
  void *v61;
  NSObject *log;
  void *v63;
  uint64_t v64;
  _QWORD v65[3];
  char v66[8];
  _QWORD v67[3];
  char v68[8];
  uint64_t v69;
  uint64_t v70;
  id v71;

  v2 = v1;
  v71 = 0;
  v4 = objc_msgSend(v2, "existingObjectWithID:error:", a1, &v71);
  v5 = v71;
  if (!v4)
  {
    v6 = v5;
    v7 = _convertNSErrorToError(_:)(v5);

    swift_willThrow(v8);
    v9 = objc_msgSend(a1, "persistentStore");
    if (v9)
    {
      v10 = v9;
      v11 = objc_msgSend(v9, "identifier");

      if (v11)
      {
        v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
        v14 = v13;

        v15 = objc_msgSend(v2, "persistentStoreCoordinator");
        if (v15)
        {
          v16 = v15;
          v17 = String._bridgeToObjectiveC()();
          v18 = objc_msgSend(v16, "persistentStoreForIdentifier:", v17);

          if (!v18)
          {
            if (qword_1008377C0 != -1)
              swift_once(&qword_1008377C0, sub_10050164C);
            v36 = type metadata accessor for Logger(0);
            sub_10001AAA8(v36, (uint64_t)qword_10084DCE0);
            v37 = v2;
            v38 = a1;
            swift_errorRetain(v7);
            v39 = v37;
            v40 = v7;
            v41 = v39;
            v42 = v38;
            swift_errorRetain(v40);
            swift_bridgeObjectRetain(v14);
            v44 = Logger.logObject.getter(v43);
            v45 = static os_log_type_t.error.getter(v44);
            if (!os_log_type_enabled(v44, v45))
            {
              swift_errorRelease(v40);

              swift_bridgeObjectRelease_n(v14, 2);
              swift_errorRelease(v40);
              swift_errorRelease(v40);

              return 0;
            }
            v59 = v42;
            v60 = v45;
            log = v44;
            v64 = v40;
            v46 = swift_slowAlloc(52, -1);
            v47 = (_QWORD *)swift_slowAlloc(16, -1);
            v61 = (void *)swift_slowAlloc(96, -1);
            v71 = v61;
            *(_DWORD *)v46 = 138413314;
            v69 = (uint64_t)v41;
            v48 = v41;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70);
            *v47 = v41;

            *(_WORD *)(v46 + 12) = 2080;
            v49 = objc_msgSend(v48, "persistentStoreCoordinator");
            if (v49)
            {
              v50 = v49;
              v51 = objc_msgSend(v49, "description");

              v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
              v54 = v53;

            }
            else
            {
              v54 = 0xE300000000000000;
              v52 = 7104878;
            }
            v69 = sub_10001A820(v52, v54, (uint64_t *)&v71);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70);

            swift_bridgeObjectRelease();
            *(_WORD *)(v46 + 22) = 2080;
            swift_bridgeObjectRetain(v14);
            v69 = sub_10001A820(v12, v14, (uint64_t *)&v71);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70);
            swift_bridgeObjectRelease_n(v14, 3);
            *(_WORD *)(v46 + 32) = 2112;
            v69 = (uint64_t)v59;
            v55 = v59;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70);
            v47[1] = v59;

            *(_WORD *)(v46 + 42) = 2080;
            swift_getErrorValue(v64, v66, v65);
            v56 = Error.localizedDescription.getter(v65[1], v65[2]);
            v69 = sub_10001A820(v56, v57, (uint64_t *)&v71);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70);
            swift_bridgeObjectRelease();
            swift_errorRelease(v64);
            swift_errorRelease(v64);
            _os_log_impl((void *)&_mh_execute_header, log, v60, "The objectID's store does not exist in the PSC of MOC. This is an account store just got removed? {moc: %@, psc: %s, storeID: %s, objectID: %@, error: %s}", (uint8_t *)v46, 0x34u);
            v58 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v47, 2, v58);
            swift_slowDealloc(v47, -1, -1);
            swift_arrayDestroy(v61, 3, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v61, -1, -1);
            swift_slowDealloc(v46, -1, -1);

            v34 = v64;
            goto LABEL_12;
          }
          swift_bridgeObjectRelease();

        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
    }
    if (qword_1008377C0 != -1)
      swift_once(&qword_1008377C0, sub_10050164C);
    v19 = type metadata accessor for Logger(0);
    sub_10001AAA8(v19, (uint64_t)qword_10084DCE0);
    v20 = v2;
    v21 = a1;
    swift_errorRetain(v7);
    v22 = v20;
    v23 = v21;
    v24 = swift_errorRetain(v7);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v25, v26))
    {
      swift_errorRelease(v7);

      swift_errorRelease(v7);
      swift_errorRelease(v7);

      return 0;
    }
    v27 = swift_slowAlloc(32, -1);
    v28 = (_QWORD *)swift_slowAlloc(16, -1);
    v63 = (void *)swift_slowAlloc(32, -1);
    v71 = v63;
    *(_DWORD *)v27 = 138412802;
    v69 = (uint64_t)v22;
    v29 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70);
    *v28 = v22;

    *(_WORD *)(v27 + 12) = 2112;
    v69 = (uint64_t)v23;
    v30 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70);
    v28[1] = v23;

    *(_WORD *)(v27 + 22) = 2080;
    swift_getErrorValue(v7, v68, v67);
    v31 = Error.localizedDescription.getter(v67[1], v67[2]);
    v69 = sub_10001A820(v31, v32, (uint64_t *)&v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to fetch object with ID {moc: %@, objectID: %@, error: %s}", (uint8_t *)v27, 0x20u);
    v33 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v28, 2, v33);
    swift_slowDealloc(v28, -1, -1);
    swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v63, -1, -1);
    swift_slowDealloc(v27, -1, -1);

    v34 = v7;
LABEL_12:
    swift_errorRelease(v34);
    return 0;
  }
  return v4;
}

uint64_t sub_10050164C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084DCE0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084DCE0);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_QWORD *sub_1005016DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;
  id v9;
  _QWORD *v10;

  v10 = _swiftEmptyDictionarySingleton;
  if ((unint64_t)a1 >> 62)
    goto LABEL_11;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter(v8))
  {
    for (i = 4; ; ++i)
    {
      v4 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1)
         : *(id *)(a1 + 8 * i);
      v5 = v4;
      v6 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v9 = v4;
      sub_100501804(&v10, &v9);

      if (v6 == v2)
      {
        swift_bridgeObjectRelease();
        return v10;
      }
    }
    __break(1u);
LABEL_11:
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyDictionarySingleton;
}

void sub_100501804(_QWORD *a1, id *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;

  v3 = *a2;
  v4 = objc_msgSend(*a2, "entityName");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8 = sub_100501B84();
  if (v8[2] && (v9 = sub_10001A6DC(v5, v7), (v10 & 1) != 0))
  {
    v11 = (uint64_t *)(v8[7] + 16 * v9);
    v13 = *v11;
    v12 = v11[1];
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = v3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
    v38 = (_QWORD *)*a1;
    v16 = v38;
    *a1 = 0x8000000000000000;
    v18 = sub_10001A6DC(v13, v12);
    v19 = v16[2];
    v20 = (v17 & 1) == 0;
    v21 = v19 + v20;
    if (__OFADD__(v19, v20))
    {
      __break(1u);
LABEL_19:
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1);
LABEL_17:
      v37 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(a1, v14);
      specialized Array._endMutation()(v37);
      swift_bridgeObjectRelease();
      return;
    }
    v22 = v17;
    if (v16[3] >= v21)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1002DA910();
        v16 = v38;
      }
LABEL_14:
      *a1 = v16;
      swift_bridgeObjectRelease();
      v33 = (_QWORD *)*a1;
      swift_bridgeObjectRetain(*a1);
      if ((v22 & 1) == 0)
      {
        sub_10028F274(v18, v13, v12, (uint64_t)_swiftEmptyArrayStorage, v33);
        swift_bridgeObjectRetain(v12);
      }
      v34 = v33[7];
      swift_bridgeObjectRelease();
      v35 = (_QWORD *)(v34 + 8 * v18);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v36);
      a1 = *(_QWORD **)((*v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v19 = *(_QWORD *)((*v35 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if ((unint64_t)a1 < v19 >> 1)
        goto LABEL_17;
      goto LABEL_19;
    }
    sub_1002D4BDC(v21, isUniquelyReferenced_nonNull_native);
    v16 = v38;
    v23 = sub_10001A6DC(v13, v12);
    if ((v22 & 1) == (v24 & 1))
    {
      v18 = v23;
      goto LABEL_14;
    }
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1008377C0 != -1)
      swift_once(&qword_1008377C0, sub_10050164C);
    v25 = type metadata accessor for Logger(0);
    sub_10001AAA8(v25, (uint64_t)qword_10084DCE0);
    v26 = v3;
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v29 = 138412290;
      v38 = v26;
      v31 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      *v30 = v26;

      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Unknown root entity name for managed object ID {moid: %@}", v29, 0xCu);
      v32 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v30, 1, v32);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {

    }
  }
}

void *sub_100501B84()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t, __n128);
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _BYTE v25[24];

  v1 = v0;
  v2 = sub_10001A630(&qword_10084DD68);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1008377C8 != -1)
    swift_once(&qword_1008377C8, sub_10050260C);
  v6 = qword_10084DCF8;
  v7 = swift_allocObject(&unk_1007F87E8, 24, 7);
  *(_QWORD *)(v7 + 16) = 0;
  v8 = enum case for REMCache.ExecutionMode.synchronously<A, B>(_:);
  v9 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 104);
  ((void (*)(char *, _QWORD, uint64_t))v9)(v5, enum case for REMCache.ExecutionMode.synchronously<A, B>(_:), v2);
  v10 = swift_allocObject(&unk_1007F8810, 32, 7);
  *(_QWORD *)(v10 + 16) = v7;
  *(_QWORD *)(v10 + 24) = v6;
  swift_retain();
  swift_retain();
  dispatch thunk of REMCache.performReadOnly(_:operations:)(v5, sub_100502B40, v10);
  swift_release(v10);
  v11 = *(void (**)(char *, uint64_t))(v3 + 8);
  v11(v5, v2);
  swift_beginAccess(v7 + 16, v25, 0, 0);
  v12 = *(void **)(v7 + 16);
  swift_bridgeObjectRetain(v12);
  swift_release(v7);
  if (!v12)
  {
    v13 = objc_msgSend((id)objc_opt_self(REMCDObject), "subclassesOfREMCDObjectRepresentingRootCoreDataEntities");
    v14 = sub_10001A630(&qword_100847A00);
    v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

    v24 = &_swiftEmptyDictionarySingleton;
    v16 = *(_QWORD *)(v15 + 16);
    if (v16)
    {
      swift_bridgeObjectRetain(v15);
      for (i = 0; i != v16; ++i)
      {
        v23 = *(_QWORD *)(v15 + 8 * i + 32);
        sub_100502084((uint64_t *)&v24, &v23, v1);
      }
      v18 = swift_bridgeObjectRelease_n(v15, 2);
      v12 = v24;
    }
    else
    {
      v18 = swift_bridgeObjectRelease(v15);
      v12 = &_swiftEmptyDictionarySingleton;
    }
    v19 = qword_10084DCF8;
    v9(v5, v8, v2, v18);
    v20 = swift_allocObject(&unk_1007F8838, 32, 7);
    *(_QWORD *)(v20 + 16) = v12;
    *(_QWORD *)(v20 + 24) = v19;
    swift_bridgeObjectRetain(v12);
    swift_retain();
    dispatch thunk of REMCache.performReadAndWrite(_:operations:)(v5, sub_100502B84, v20);
    swift_release(v20);
    v11(v5, v2);
  }
  return v12;
}

uint64_t sub_100501EE0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = sub_100501B84();
  if (v4[2])
  {
    swift_bridgeObjectRetain(a2);
    v5 = sub_10001A6DC(a1, a2);
    if ((v6 & 1) != 0)
    {
      v7 = (uint64_t *)(v4[7] + 16 * v5);
      v8 = *v7;
      swift_bridgeObjectRetain(v7[1]);
    }
    else
    {
      v8 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = 0;
  }
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t type metadata accessor for RDRootEntityNameByEntityNameCache(uint64_t a1)
{
  uint64_t result;

  result = qword_10084DD18;
  if (!qword_10084DD18)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDRootEntityNameByEntityNameCache);
  return result;
}

uint64_t sub_100502038(uint64_t a1)
{
  char *v2;

  v2 = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + qword_10084DD08);
}

uint64_t sub_100502084(uint64_t *a1, _QWORD *a2, void *a3)
{
  void *ObjCClassFromMetadata;
  uint32_t *p_ivar_base_size;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t i;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  _BOOL8 v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  char v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t result;
  void *v71;
  uint64_t v73;
  int64_t v74;
  uint64_t v75;
  int64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;

  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(*a2);
  p_ivar_base_size = &RDDataAccess.ivar_base_size;
  if ((objc_msgSend(ObjCClassFromMetadata, "respondsToSelector:", "cdEntityName") & 1) != 0)
  {
    v6 = objc_msgSend(ObjCClassFromMetadata, "cdEntityName");
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = v8;

    if ((objc_msgSend(ObjCClassFromMetadata, "respondsToSelector:", "cdEntityName") & 1) != 0)
    {
      v10 = objc_msgSend(ObjCClassFromMetadata, "cdEntityName");
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v13 = v12;

      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
      v77 = *a1;
      *a1 = 0x8000000000000000;
      v15 = v13;
      p_ivar_base_size = (_DWORD *)(&RDDataAccess + 8);
      sub_10028B8BC(v11, v15, v7, v9, isUniquelyReferenced_nonNull_native);
      v16 = *a1;
      *a1 = v77;
    }
    else
    {
      sub_1002CAEAC(v7, v9);
      v16 = v17;
    }
    swift_bridgeObjectRelease(v9);
    v18 = objc_msgSend(ObjCClassFromMetadata, "entity", swift_bridgeObjectRelease(v16).n128_f64[0]);
    v19 = objc_msgSend(v18, "subentities");
    v20 = sub_1000151B0(0, (unint64_t *)&unk_1008479F0, NSEntityDescription_ptr);
    v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, v20);

    v22 = a3;
    v23 = sub_100503E84((uint64_t)&_swiftEmptySetSingleton, v21, v22);

    swift_bridgeObjectRelease(v21);
    v24 = 0;
    v25 = *(_QWORD *)(v23 + 56);
    v73 = v23 + 56;
    v75 = v23;
    v26 = 1 << *(_BYTE *)(v23 + 32);
    v27 = -1;
    if (v26 < 64)
      v27 = ~(-1 << v26);
    v28 = v27 & v25;
    v74 = (unint64_t)(v26 + 63) >> 6;
    v29 = a1;
    v71 = ObjCClassFromMetadata;
    if ((v27 & v25) != 0)
      goto LABEL_11;
LABEL_12:
    while (2)
    {
      v33 = v24 + 1;
      if (__OFADD__(v24, 1))
      {
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
        break;
      }
      if (v33 < v74)
      {
        v34 = *(_QWORD *)(v73 + 8 * v33);
        v35 = v24 + 1;
        if (v34)
          goto LABEL_25;
        v35 = v24 + 2;
        if (v24 + 2 >= v74)
          return swift_release(v75);
        v34 = *(_QWORD *)(v73 + 8 * v35);
        if (v34)
          goto LABEL_25;
        v35 = v24 + 3;
        if (v24 + 3 >= v74)
          return swift_release(v75);
        v34 = *(_QWORD *)(v73 + 8 * v35);
        if (v34)
        {
LABEL_25:
          v28 = (v34 - 1) & v34;
          v76 = v35;
          for (i = __clz(__rbit64(v34)) + (v35 << 6); ; i = v31 | (v24 << 6))
          {
            v37 = (uint64_t *)(*(_QWORD *)(v75 + 48) + 16 * i);
            v39 = *v37;
            v38 = v37[1];
            if ((objc_msgSend(ObjCClassFromMetadata, "respondsToSelector:", *((_QWORD *)p_ivar_base_size + 478)) & 1) != 0)break;
            v55 = *v29;
            swift_bridgeObjectRetain(v38);
            swift_bridgeObjectRetain(v55);
            v56 = sub_10001A6DC(v39, v38);
            v58 = v57;
            swift_bridgeObjectRelease(v55);
            if ((v58 & 1) != 0)
            {
              v59 = swift_isUniquelyReferenced_nonNull_native(*v29);
              v60 = *v29;
              v79 = *v29;
              *v29 = 0x8000000000000000;
              if ((v59 & 1) == 0)
              {
                sub_1002D6574();
                v60 = v79;
              }
              swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v60 + 48) + 16 * v56 + 8));
              v61 = *(_QWORD *)(*(_QWORD *)(v60 + 56) + 16 * v56 + 8);
              sub_100289B9C(v56, v60);
              v62 = *v29;
              *v29 = v60;
              swift_bridgeObjectRelease(v61);
              swift_bridgeObjectRelease(v38);
              v30 = v62;
            }
            else
            {
              v30 = v38;
            }
            swift_bridgeObjectRelease(v30);
            v24 = v76;
            if (!v28)
              goto LABEL_12;
LABEL_11:
            v31 = __clz(__rbit64(v28));
            v28 &= v28 - 1;
            v76 = v24;
          }
          v40 = objc_msgSend(ObjCClassFromMetadata, *((SEL *)p_ivar_base_size + 478), swift_bridgeObjectRetain(v38).n128_f64[0]);
          v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
          v43 = v42;

          v44 = swift_isUniquelyReferenced_nonNull_native(*v29);
          v45 = *v29;
          v78 = (_QWORD *)*v29;
          *v29 = 0x8000000000000000;
          v47 = sub_10001A6DC(v39, v38);
          v48 = *(_QWORD *)(v45 + 16);
          v49 = (v46 & 1) == 0;
          v50 = v48 + v49;
          if (__OFADD__(v48, v49))
          {
            __break(1u);
            goto LABEL_46;
          }
          v51 = v46;
          if (*(_QWORD *)(v45 + 24) < v50)
          {
            sub_1002CCF14(v50, v44);
            v52 = sub_10001A6DC(v39, v38);
            if ((v51 & 1) != (v53 & 1))
              goto LABEL_50;
            v47 = v52;
            v54 = v78;
            if ((v51 & 1) == 0)
              goto LABEL_40;
LABEL_38:
            v63 = (uint64_t *)(v54[7] + 16 * v47);
            swift_bridgeObjectRelease(v63[1]);
            *v63 = v41;
            v63[1] = v43;
            goto LABEL_42;
          }
          if ((v44 & 1) != 0)
          {
            v54 = v78;
            if ((v46 & 1) != 0)
              goto LABEL_38;
          }
          else
          {
            sub_1002D6574();
            v54 = v78;
            if ((v51 & 1) != 0)
              goto LABEL_38;
          }
LABEL_40:
          v54[(v47 >> 6) + 8] |= 1 << v47;
          v64 = (uint64_t *)(v54[6] + 16 * v47);
          *v64 = v39;
          v64[1] = v38;
          v65 = (uint64_t *)(v54[7] + 16 * v47);
          *v65 = v41;
          v65[1] = v43;
          v66 = v54[2];
          v67 = __OFADD__(v66, 1);
          v68 = v66 + 1;
          if (v67)
            goto LABEL_47;
          v54[2] = v68;
          swift_bridgeObjectRetain(v38);
LABEL_42:
          v29 = a1;
          v69 = *a1;
          *a1 = (uint64_t)v54;
          swift_bridgeObjectRelease(v38);
          swift_bridgeObjectRelease(v69);
          ObjCClassFromMetadata = v71;
          p_ivar_base_size = (_DWORD *)(&RDDataAccess + 8);
          v24 = v76;
          if (!v28)
            continue;
          goto LABEL_11;
        }
        v36 = v24 + 4;
        if (v24 + 4 < v74)
        {
          v34 = *(_QWORD *)(v73 + 8 * v36);
          if (v34)
          {
            v35 = v24 + 4;
            goto LABEL_25;
          }
          while (1)
          {
            v35 = v36 + 1;
            if (__OFADD__(v36, 1))
              goto LABEL_48;
            if (v35 >= v74)
              return swift_release(v75);
            v34 = *(_QWORD *)(v73 + 8 * v35);
            ++v36;
            if (v34)
              goto LABEL_25;
          }
        }
      }
      return swift_release(v75);
    }
  }
  __break(1u);
LABEL_50:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10050260C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  NSString v27;
  id v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v35 = *(_QWORD *)(v0 - 8);
  v36 = v0;
  __chkstk_darwin(v0);
  v34 = (char *)&v30 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS.QoSClass(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v12 = type metadata accessor for RDRootEntityNameByEntityNameCache(0);
  v37 = (_QWORD *)v12;
  v33 = sub_10001A630(&qword_10084DD70);
  v13 = String.init<A>(reflecting:)(&v37, v33);
  v31 = v14;
  v32 = v13;
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v8);
  v15 = static OS_dispatch_queue.global(qos:)(v11);
  v16 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  static DispatchQoS.unspecified.getter(v16);
  v37 = _swiftEmptyArrayStorage;
  v17 = sub_1001BAB10();
  v18 = sub_10001A630((uint64_t *)&unk_10083DBD0);
  v19 = sub_1001BAB58();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v18, v19, v2, v17);
  v20 = v34;
  (*(void (**)(char *, _QWORD, uint64_t))(v35 + 104))(v34, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v36);
  v21 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v32, v31, v7, v4, v20, v15);
  v22 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v23 = qword_10084DD00;
  v37 = (_QWORD *)v12;
  swift_retain();
  String.init<A>(reflecting:)(&v37, v33);
  v25 = v24;
  v26 = objc_allocWithZone((Class)NSString);
  v27 = String._bridgeToObjectiveC()();
  v28 = objc_msgSend(v26, "initWithString:", v27, swift_bridgeObjectRelease(v25).n128_f64[0]);

  *(_QWORD *)(v22 + v23) = v28;
  swift_release(v22);
  result = REMCache.init(cacheQueue:countLimit:)(v21, 1);
  qword_10084DCF8 = result;
  return result;
}

uint64_t sub_1005028E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;
  id v11;
  uint64_t v13;

  v3 = v2;
  v6 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v7 = qword_10084DD00;
  v13 = v3;
  swift_retain();
  v8 = sub_10001A630(&qword_10084DD70);
  String.init<A>(reflecting:)(&v13, v8);
  v9 = objc_allocWithZone((Class)NSString);
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v9, "initWithString:", v10, swift_bridgeObjectRelease().n128_f64[0]);

  *(_QWORD *)(v6 + v7) = v11;
  swift_release(v6);
  return REMCache.init(cacheQueue:countLimit:)(a1, a2);
}

double sub_1005029C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  double result;
  _QWORD v8[3];

  v4 = REMCacheContext.object(forKey:)(*(_QWORD *)(a3 + qword_10084DD00));
  v5 = (void *)v4;
  if (v4)
  {
    v8[0] = 0;
    static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(v4, v8, &type metadata for String, &type metadata for String, &protocol witness table for String);

    v5 = (void *)v8[0];
  }
  swift_beginAccess(a2 + 16, v8, 1, 0);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v6).n128_u64[0];
  return result;
}

void sub_100502A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSDictionary v4;
  Class isa;

  if (a2)
    v4.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  else
    v4.super.isa = 0;
  isa = v4.super.isa;
  REMCacheContext.setObject(_:forKey:)(v4.super.isa, *(_QWORD *)(a3 + qword_10084DD00));

}

void sub_100502ABC()
{
  uint64_t v0;

}

uint64_t sub_100502ACC()
{
  uint64_t v0;

  v0 = REMCache.deinit();

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_100502B08()
{
  return type metadata accessor for RDRootEntityNameByEntityNameCache(0);
}

uint64_t sub_100502B10()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100502B34()
{
  return sub_100502B54((void (*)(_QWORD))&_swift_release);
}

double sub_100502B40(uint64_t a1)
{
  uint64_t v1;

  return sub_1005029C8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100502B48()
{
  return sub_100502B54((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_100502B54(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 24));
  return swift_deallocObject(v1, 32, 7);
}

void sub_100502B84(uint64_t a1)
{
  uint64_t v1;

  sub_100502A54(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_100502B8C(id a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (**v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  char *v15;
  double v16;
  uint64_t v17;
  id v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __n128 v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  id v37;
  id v38;
  void *v39;
  char *v40;
  Class isa;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  Class v46;
  id v47;
  void *v48;
  void *v49;
  uint64_t v50;
  id v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (**v60)(char *, uint64_t, uint64_t);
  char *v61;
  id v62;
  id v63;
  id v64;
  id v65;
  NSObject *v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  double v70;
  id v71;
  void *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  double v76;
  id v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  __int128 *v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  os_log_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  _QWORD *v102;
  id v103;
  uint64_t v104;
  void *v105;
  Swift::String v106;
  id v107;
  uint64_t v108;
  void *v109;
  void *v110;
  Swift::String v111;
  NSString v112;
  uint64_t v113;
  void *v114;
  id v115;
  uint64_t v116;
  NSObject *v117;
  NSObject *v118;
  os_log_type_t v119;
  uint8_t *v120;
  NSObject *v121;
  _QWORD *v122;
  uint64_t v123;
  void *v124;
  Swift::String v125;
  id v126;
  uint64_t v127;
  void *v128;
  void *v129;
  Swift::String v130;
  Swift::String v131;
  NSString v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  id v136;
  NSObject *v137;
  os_log_type_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  id v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  char *v146;
  char *v147;
  uint64_t v148;
  __int128 v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  os_log_t v154;
  uint64_t v155;
  id v156;
  void (**v157)(char *, uint64_t, uint64_t);
  __int128 *v158;
  uint64_t v159;
  id v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  __int128 v165;
  unint64_t v166;
  uint64_t v167;
  int v168;
  id v169;
  uint64_t v170;
  void (**v171)(char *, uint64_t, uint64_t);
  id v172;
  char *v173;
  id v174;
  id v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  id v179;
  _QWORD *v180;
  uint64_t v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;

  v3 = v2;
  v4 = v1;
  v6 = type metadata accessor for URL(0);
  v151 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v146 = (char *)&v145 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v8);
  v150 = (char *)&v145 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v152 = (uint64_t)&v145 - v11;
  v12 = type metadata accessor for Logger(0);
  v13 = *(void (***)(char *, uint64_t, uint64_t))(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v145 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = type metadata accessor for Date(0);
  v162 = *(_QWORD *)(v163 - 8);
  *(_QWORD *)&v16 = __chkstk_darwin(v163).n128_u64[0];
  v161 = (char *)&v145 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = v4;
  v18 = objc_msgSend(v4, "persistentStoreCoordinator", v16);
  if (v18)
  {
    v173 = v15;
    v180 = _swiftEmptyArrayStorage;
    v145 = v18;
    v19 = objc_msgSend(v18, "persistentStores");
    v167 = sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
    v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, v167);

    v21 = v20;
    if (v20 >> 62)
      goto LABEL_52;
    v22 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v22)
    {
      v148 = v6;
      v166 = v21 & 0xC000000000000001;
      v158 = &v182;
      v23 = 4;
      *((_QWORD *)&v24 + 1) = 3;
      v165 = xmmword_1006A7330;
      *(_QWORD *)&v24 = 134218754;
      v149 = v24;
      v147 = (char *)&type metadata for Any + 8;
      v170 = v12;
      v164 = v21;
      v171 = v13;
      v160 = a1;
      v159 = v22;
      while (1)
      {
        v6 = v23 - 4;
        v26 = v166
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23 - 4, v21)
            : *(id *)(v21 + 8 * v23);
        v21 = (uint64_t)v26;
        if (__OFADD__(v6, 1))
          break;
        v177 = v23 - 3;
        v178 = (_QWORD *)v23;
        v27 = objc_msgSend(a1, "persistentHistoryTokens");
        v28 = sub_1000151B0(0, &qword_10084DD78, NSPersistentHistoryToken_ptr);
        v29 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v27, &type metadata for String, v28, &protocol witness table for String);

        v30 = objc_msgSend((id)v21, "identifier");
        if (!v30)
        {
          __break(1u);
LABEL_69:

          __break(1u);
        }
        v31 = v30;
        v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
        v34 = v33;

        if (*(_QWORD *)(v29 + 16) && (v35 = sub_10001A6DC(v32, v34), (v36 & 1) != 0))
        {
          v179 = *(id *)(*(_QWORD *)(v29 + 56) + 8 * v35);
          v37 = v179;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v38 = objc_msgSend((id)objc_opt_self(NSPersistentHistoryChangeRequest), "fetchHistoryAfterToken:", v37);
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v39 = (void *)objc_opt_self(NSPersistentHistoryChangeRequest);
          v40 = v161;
          static Date.distantPast.getter(v39);
          isa = Date._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v162 + 8))(v40, v163);
          v38 = objc_msgSend(v39, "fetchHistoryAfterDate:", isa);

          v179 = 0;
        }
        objc_msgSend(v38, "setResultType:", 5);
        v42 = sub_10001A630((uint64_t *)&unk_10083AD90);
        v43 = swift_allocObject(v42, 40, 7);
        *(_OWORD *)(v43 + 16) = v165;
        *(_QWORD *)(v43 + 32) = v21;
        *(_QWORD *)&v183 = v43;
        specialized Array._endMutation()(v43);
        v44 = v38;
        v45 = (id)v21;
        v46 = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v44, "setAffectedStores:", v46, swift_bridgeObjectRelease().n128_f64[0]);

        *(_QWORD *)&v183 = 0;
        v47 = objc_msgSend(v172, "executeRequest:error:", v44, &v183);
        v48 = (void *)v183;
        if (!v47)
        {
          v114 = v44;
          v115 = (id)v183;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _convertNSErrorToError(_:)(v48);

          swift_willThrow(v116);
LABEL_50:

          return;
        }
        v49 = v47;
        v184 = sub_1000151B0(0, (unint64_t *)&unk_100846CA0, NSPersistentStoreResult_ptr);
        *(_QWORD *)&v183 = v49;
        v50 = sub_1000151B0(0, &qword_10084DD80, NSPersistentHistoryResult_ptr);
        v51 = v48;
        v52 = v49;
        throwingCast<A>(_:as:failureMessage:)(&v182, &v183, v50, 0, 0, v50);
        if (v3)
        {
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v183);
          return;
        }
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v183);
        v13 = (void (**)(char *, uint64_t, uint64_t))v182;
        v53 = objc_msgSend((id)v182, "result");
        v174 = v52;
        v175 = v44;
        if (!v53)
        {
          v157 = v13;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (qword_1008377C0 != -1)
            swift_once(&qword_1008377C0, sub_10050164C);
          sub_10001AAA8(v12, (uint64_t)qword_10084DCE0);
          v117 = v172;
          v118 = Logger.logObject.getter(v117);
          v119 = static os_log_type_t.error.getter(v118);
          if (os_log_type_enabled(v118, v119))
          {
            v120 = (uint8_t *)swift_slowAlloc(12, -1);
            v178 = (_QWORD *)swift_slowAlloc(8, -1);
            *(_DWORD *)v120 = 138412290;
            *(_QWORD *)&v183 = v117;
            v121 = v117;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, (char *)&v183 + 8);
            v122 = v178;
            *v178 = v117;

            _os_log_impl((void *)&_mh_execute_header, v118, v119, "Failed to get transaction from CoreData. No error. {invocation: %@}", v120, 0xCu);
            v123 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v122, 1, v123);
            swift_slowDealloc(v122, -1, -1);
            swift_slowDealloc(v120, -1, -1);
          }
          else
          {

            v118 = v117;
          }

          v124 = (void *)objc_opt_self(REMError);
          *(_QWORD *)&v183 = 0;
          *((_QWORD *)&v183 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(67);
          v125._object = (void *)0x8000000100706C20;
          v125._countAndFlagsBits = 0xD000000000000040;
          String.append(_:)(v125);
          v126 = -[NSObject description](v117, "description");
          v127 = static String._unconditionallyBridgeFromObjectiveC(_:)(v126);
          v129 = v128;

          v130._countAndFlagsBits = v127;
          v130._object = v129;
          String.append(_:)(v130);
          swift_bridgeObjectRelease();
          v131._countAndFlagsBits = 125;
          v131._object = (void *)0xE100000000000000;
          String.append(_:)(v131);
          v132 = String._bridgeToObjectiveC()();
          objc_msgSend(v124, "internalErrorWithDebugDescription:", v132, swift_bridgeObjectRelease().n128_f64[0]);

          swift_willThrow(v133);
          goto LABEL_50;
        }
        v54 = v53;
        _bridgeAnyObjectToAny(_:)(&v182, v53);
        swift_unknownObjectRelease(v54);
        sub_10001A6CC(&v182, &v183);
        v55 = sub_10001A630(&qword_10083FF30);
        throwingCast<A>(_:as:failureMessage:)(&v182, &v183, v55, 0, 0, v55);
        v56 = v45;
        v176 = 0;
        v57 = v182;
        if (qword_1008377C0 != -1)
          swift_once(&qword_1008377C0, sub_10050164C);
        v58 = v12;
        v59 = sub_10001AAA8(v12, (uint64_t)qword_10084DCE0);
        v60 = v171;
        v61 = v173;
        v171[2](v173, v59, v58);
        v62 = v179;
        v63 = v56;
        swift_bridgeObjectRetain_n(v57, 2);
        v64 = v62;
        v65 = v63;
        v66 = Logger.logObject.getter(v65);
        v168 = static os_log_type_t.info.getter(v66);
        if (os_log_type_enabled(v66, (os_log_type_t)v168))
        {
          v154 = v66;
          v169 = v65;
          v157 = v13;
          v67 = swift_slowAlloc(42, -1);
          v153 = swift_slowAlloc(96, -1);
          *(_QWORD *)&v182 = v153;
          *(_DWORD *)v67 = v149;
          v156 = v64;
          if ((unint64_t)v57 >> 62)
          {
            if (v57 < 0)
              v97 = v57;
            else
              v97 = v57 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v57);
            v68 = _CocoaArrayWrapper.endIndex.getter(v97);
            swift_bridgeObjectRelease();
          }
          else
          {
            v68 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          v69 = v158;
          swift_bridgeObjectRelease();
          v181 = v68;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, v69);
          v155 = v57;
          *(_QWORD *)&v70 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v67 + 12) = 2080;
          a1 = v169;
          v71 = objc_msgSend(v169, "identifier", v70);
          if (!v71)
            goto LABEL_69;
          v72 = v71;
          v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
          v75 = v74;

          v181 = sub_10001A820(v73, v75, (uint64_t *)&v182);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, v69);

          *(_QWORD *)&v76 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v67 + 22) = 2080;
          v77 = objc_msgSend(a1, "URL", v76);
          if (v77)
          {
            v78 = v77;
            v79 = (uint64_t)v150;
            static URL._unconditionallyBridgeFromObjectiveC(_:)(v77);

            v80 = 0;
            v81 = v151;
          }
          else
          {
            v80 = 1;
            v81 = v151;
            v79 = (uint64_t)v150;
          }
          v64 = v156;
          v82 = v148;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56))(v79, v80, 1, v148);
          v83 = v152;
          sub_10031E6C0(v79, v152);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v83, 1, v82))
          {
            sub_10015CFD4(v83);
            v84 = 0xE500000000000000;
            v85 = 0x296C696E28;
          }
          else
          {
            v86 = v146;
            (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v146, v83, v82);
            v87 = sub_10015CFD4(v83);
            v85 = URL.absoluteString.getter(v87);
            v84 = v88;
            (*(void (**)(char *, uint64_t))(v81 + 8))(v86, v82);
          }
          v21 = v164;
          v181 = sub_10001A820(v85, v84, (uint64_t *)&v182);
          v89 = v158;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, v158);
          v90 = v169;

          swift_bridgeObjectRelease();
          *(_WORD *)(v67 + 32) = 2080;
          v181 = (uint64_t)v179;
          v91 = sub_10001A630(&qword_10084DD88);
          v92 = Optional.descriptionOrNil.getter(v91);
          v181 = sub_10001A820(v92, v93, (uint64_t *)&v182);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, v89);

          swift_bridgeObjectRelease();
          v94 = v154;
          _os_log_impl((void *)&_mh_execute_header, v154, (os_log_type_t)v168, "Fetched transactions for store {transactions.count: %ld, store.identifier: %s, store.url: %s, historyToken: %s}", (uint8_t *)v67, 0x2Au);
          v95 = v153;
          swift_arrayDestroy(v153, 3, v147);
          swift_slowDealloc(v95, -1, -1);
          v96 = v67;
          v65 = v90;
          swift_slowDealloc(v96, -1, -1);

          ((void (*)(char *, uint64_t))v171[1])(v173, v170);
          v3 = v176;
          v13 = v157;
          v57 = v155;
        }
        else
        {

          v25 = swift_bridgeObjectRelease_n(v57, 2);
          ((void (*)(char *, uint64_t, __n128))v60[1])(v61, v58, v25);
          v21 = v164;
          v3 = v176;
        }
        sub_1001E1900(v57);

        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v183);
        v23 = (uint64_t)v178 + 1;
        v12 = v170;
        a1 = v160;
        if (v177 == v159)
          goto LABEL_56;
      }
      __break(1u);
LABEL_52:
      if (v21 < 0)
        v134 = v21;
      else
        v134 = v21 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v21);
      v22 = _CocoaArrayWrapper.endIndex.getter(v134);
      swift_bridgeObjectRelease();
    }
LABEL_56:
    swift_bridgeObjectRelease();
    if (qword_1008377C0 != -1)
      swift_once(&qword_1008377C0, sub_10050164C);
    sub_10001AAA8(v12, (uint64_t)qword_10084DCE0);
    v135 = (uint64_t)v180;
    swift_bridgeObjectRetain_n(v180, 2);
    v136 = a1;
    v137 = Logger.logObject.getter(v136);
    v138 = static os_log_type_t.info.getter(v137);
    if (os_log_type_enabled(v137, v138))
    {
      v139 = swift_slowAlloc(22, -1);
      v140 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v139 = 134218242;
      v176 = v3;
      if ((unint64_t)v135 >> 62)
      {
        if (v135 < 0)
          v144 = v135;
        else
          v144 = v135 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v135);
        v141 = _CocoaArrayWrapper.endIndex.getter(v144);
        swift_bridgeObjectRelease();
      }
      else
      {
        v141 = *(_QWORD *)((v135 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      *(_QWORD *)&v183 = v141;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, (char *)&v183 + 8);
      swift_bridgeObjectRelease();
      *(_WORD *)(v139 + 12) = 2112;
      *(_QWORD *)&v183 = v136;
      v142 = v136;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, (char *)&v183 + 8);
      *v140 = v136;

      _os_log_impl((void *)&_mh_execute_header, v137, v138, "Fetched all transactions {allTransactions.count: %ld, sourceToken: %@}", (uint8_t *)v139, 0x16u);
      v143 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v140, 1, v143);
      swift_slowDealloc(v140, -1, -1);
      swift_slowDealloc(v139, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v135, 2);
    }
    swift_beginAccess(&v180, &v183, 0, 0);
  }
  else
  {
    if (qword_1008377C0 != -1)
      swift_once(&qword_1008377C0, sub_10050164C);
    sub_10001AAA8(v12, (uint64_t)qword_10084DCE0);
    v98 = v172;
    v99 = Logger.logObject.getter(v98);
    v100 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v99, v100))
    {
      v101 = (uint8_t *)swift_slowAlloc(12, -1);
      v102 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v101 = 138412290;
      *(_QWORD *)&v183 = v98;
      v103 = v98;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, (char *)&v183 + 8);
      *v102 = v98;

      _os_log_impl((void *)&_mh_execute_header, v99, v100, "Tried to fetch transactions from managedObjectContext without persistentStoreCoordinator {managedObjectContext: %@}", v101, 0xCu);
      v104 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v102, 1, v104);
      swift_slowDealloc(v102, -1, -1);
      swift_slowDealloc(v101, -1, -1);

    }
    else
    {

    }
    v105 = (void *)objc_opt_self(REMError);
    *(_QWORD *)&v183 = 0;
    *((_QWORD *)&v183 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(114);
    v106._countAndFlagsBits = 0xD000000000000070;
    v106._object = (void *)0x8000000100706BA0;
    String.append(_:)(v106);
    v107 = objc_msgSend(v98, "description");
    v108 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
    v110 = v109;

    v111._countAndFlagsBits = v108;
    v111._object = v110;
    String.append(_:)(v111);
    swift_bridgeObjectRelease();
    v112 = String._bridgeToObjectiveC()();
    objc_msgSend(v105, "internalErrorWithDebugDescription:", v112, swift_bridgeObjectRelease().n128_f64[0]);

    swift_willThrow(v113);
  }
}

uint64_t sub_100503E84(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v22;
  uint64_t v24[2];
  uint64_t v25;

  v25 = a1;
  v4 = a1;
  if ((unint64_t)a2 >> 62)
    goto LABEL_13;
  v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v5; v5 = _CocoaArrayWrapper.endIndex.getter(v20))
  {
    v22 = a2 & 0xC000000000000001;
    for (i = 4; ; ++i)
    {
      v4 = i - 4;
      v12 = v22 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a2) : *(id *)(a2 + 8 * i);
      v13 = v12;
      v14 = i - 3;
      if (__OFADD__(v4, 1))
        break;
      v15 = objc_msgSend(v12, "name");
      if (v15)
      {
        v16 = v15;
        v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        v19 = v18;

        sub_1002DB0E4(v24, v17, v19);
        swift_bridgeObjectRelease(v24[1]);
      }
      v7 = objc_msgSend(v13, "subentities", v22);
      v8 = sub_1000151B0(0, (unint64_t *)&unk_1008479F0, NSEntityDescription_ptr);
      v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

      v10 = a3;
      v11 = sub_100503E84(&_swiftEmptySetSingleton, v9, v10);
      swift_bridgeObjectRelease(v9);

      sub_1002B74D0(v11);
      if (v14 == v5)
      {
        swift_bridgeObjectRelease(a2);
        return v25;
      }
    }
    __break(1u);
LABEL_13:
    if (a2 < 0)
      v20 = a2;
    else
      v20 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
  swift_bridgeObjectRelease(a2);
  return v4;
}

uint64_t sub_100504064(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_10084DDC8, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListSectionsInvocation, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.ListSectionsInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1005040A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084DD90);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084DD90);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_100504130(void (*a1)(char *, uint64_t, uint64_t)@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t Configuration;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  void *v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  void *v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  double (*v68)(char *, uint64_t);
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  objc_class *v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  uint64_t (*v80)(uint64_t, uint64_t);
  uint64_t v81;
  void *v82;
  id v83;
  uint64_t v84;
  id v85;
  objc_class *v86;
  objc_class *v87;
  objc_class *v88;
  objc_class *v89;
  uint64_t v90;
  _QWORD *v91;
  void *v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  char *v98;
  __n128 v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __n128 v124;
  uint64_t v125;
  void *v126;
  id v127;
  uint64_t v128;
  void *v129;
  void *v130;
  char *v131;
  __n128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(char *, uint64_t, uint64_t);
  char *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  NSObject *v150;
  os_log_type_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void (*v157)(char *, uint64_t);
  uint64_t v158;
  __n128 v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  __n128 v163;
  void (*v164)(char *, uint64_t, __n128);
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  __n128 v168;
  char *v169;
  char *v170;
  id v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  objc_class *v179;
  char *v180;
  char *v181;
  uint64_t v182;
  char *v183;
  id v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  _QWORD *Subtasks;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  void *v221;
  void (*v222)(char *, uint64_t, uint64_t);
  uint64_t v223;
  uint64_t v224;

  v221 = a3;
  v208 = a2;
  v222 = a1;
  v195 = a5;
  v194 = type metadata accessor for REMRemindersListDataView.ListSectionsModel(0);
  v6 = __chkstk_darwin(v194);
  v192 = (char *)&v176 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v193 = type metadata accessor for REMRemindersListDataView.SectionsModel(0, v6);
  v198 = *(_QWORD *)(v193 - 8);
  __chkstk_darwin(v193);
  v191 = (char *)&v176 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v197 = (char *)&v176 - v10;
  v200 = _s10PredicatesOMa(0);
  __chkstk_darwin(v200);
  v201 = (uint64_t *)((char *)&v176 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_10001A630(&qword_100839A98);
  __chkstk_darwin(v12);
  v187 = (uint64_t)&v176 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v202 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch(0);
  v206 = *(_QWORD *)(v202 - 8);
  __chkstk_darwin(v202);
  v205 = (char *)&v176 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v207 = (char *)&v176 - v16;
  v17 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v203 = *(_QWORD *)(v17 - 8);
  v204 = v17;
  __chkstk_darwin(v17);
  v190 = (char *)&v176 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v189 = (char *)&v176 - v20;
  __chkstk_darwin(v21);
  v196 = (char *)&v176 - v22;
  __chkstk_darwin(v23);
  v209 = (uint64_t)&v176 - v24;
  v25 = sub_10001A630(&qword_100839AA0);
  __chkstk_darwin(v25);
  v188 = (uint64_t)&v176 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v211 = (uint64_t)&v176 - v28;
  v218 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v216 = *(_QWORD *)(v218 - 8);
  __chkstk_darwin(v218);
  v215 = (char *)&v176 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  Subtasks = (_QWORD *)type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v214 = *(Subtasks - 1);
  __chkstk_darwin(Subtasks);
  v213 = (char *)&v176 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v219 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v212 = *(_QWORD *)(v219 - 8);
  __chkstk_darwin(v219);
  v199 = (char *)&v176 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v34 = (char *)&v176 - v33;
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v36 = *(_QWORD *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  v38 = (char *)&v176 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v41 = (char *)&v176 - v40;
  __chkstk_darwin(v42);
  v44 = (char *)&v176 - v43;
  __chkstk_darwin(v45);
  v47 = (char *)&v176 - v46;
  __chkstk_darwin(v48);
  v50 = (char *)&v176 - v49;
  v51 = v220;
  v52 = sub_100505338(a4, v222, v221);
  if (v51)
    return;
  v180 = v50;
  v181 = v47;
  v182 = v36;
  v183 = v34;
  v177 = v41;
  v178 = v38;
  v185 = Configuration;
  v220 = a4;
  v186 = 0;
  v184 = v52;
  v53 = objc_msgSend(v52, "accountID");
  v54 = objc_msgSend(v222, "persistentStoreOfAccountWithAccountID:", v53);

  if (v54)
  {
    v56 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v57 = swift_allocObject(v56, 40, 7);
    *(_OWORD *)(v57 + 16) = xmmword_1006A7330;
    *(_QWORD *)(v57 + 32) = v54;
    v223 = v57;
    v55 = specialized Array._endMutation()(v57);
    v179 = (objc_class *)v223;
  }
  else
  {
    v179 = 0;
  }
  v58 = v185;
  v59 = v44;
  v60 = v182;
  v61 = v181;
  v62 = v180;
  v63 = (void *)REMRemindersListDataView.ListSectionsInvocation.Parameters.list.getter(v55);
  v65 = REMRemindersListDataView.ListSectionsInvocation.Parameters.configuration.getter(v64);
  v66 = (uint64_t)v183;
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v65);
  v67 = v62;
  v68 = *(double (**)(char *, uint64_t))(v60 + 8);
  v69.n128_f64[0] = v68(v67, v58);
  v70 = REMRemindersListDataView.ListSectionsInvocation.Parameters.configuration.getter(v69);
  v71 = (uint64_t)v213;
  REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter(v70);
  v72.n128_f64[0] = v68(v61, v58);
  v73 = REMRemindersListDataView.ListSectionsInvocation.Parameters.configuration.getter(v72);
  v74 = v59;
  v75 = (uint64_t)v215;
  REMRemindersListDataView.FetchConfiguration.sortingStyle.getter(v73);
  v68(v74, v58);
  v76 = v179;
  v77 = v186;
  v78 = sub_1003A27EC(v63, (uint64_t)v222, v66, v71, v75, (uint64_t)v179);
  if (v77)
  {

    v79 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, __n128))(v216 + 8))(v75, v218, v79);
    (*(void (**)(uint64_t, _QWORD *))(v214 + 8))(v71, Subtasks);
    (*(void (**)(uint64_t, uint64_t))(v212 + 8))(v66, v219);
    return;
  }
  v182 = v78;

  (*(void (**)(uint64_t, uint64_t))(v216 + 8))(v75, v218);
  (*(void (**)(uint64_t, _QWORD *))(v214 + 8))(v71, Subtasks);
  v80 = *(uint64_t (**)(uint64_t, uint64_t))(v212 + 8);
  v81 = v80(v66, v219);
  v82 = (void *)REMRemindersListDataView.ListSectionsInvocation.Parameters.list.getter(v81);
  v83 = objc_msgSend(v82, "objectID");

  v84 = qword_100837750;
  v85 = v83;
  if (v84 != -1)
    swift_once(&qword_100837750, sub_1004E80E4);
  v86 = (objc_class *)qword_1008721E8;
  sub_1004E8204();
  v88 = v87;
  v89 = (objc_class *)sub_1004E8694();
  v90 = sub_1004E892C((uint64_t)v83, 1, (uint64_t)v222, v86, v88, v89);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v91 = (_QWORD *)sub_1001DFD2C(v90);
  swift_bridgeObjectRelease();
  v218 = sub_1001327A0(v91, v182);
  swift_bridgeObjectRelease();
  v92 = v210;
  v93 = (uint64_t)v222;
  sub_100505190((uint64_t)v222, v211);
  v94 = objc_msgSend(v92, "fetchResultTokenToDiffAgainst");
  v95 = v93;
  v96 = v94;
  v97 = v209;
  sub_100493C24(v94, v95, v209);
  v186 = 0;

  v98 = v177;
  v100 = REMRemindersListDataView.ListSectionsInvocation.Parameters.configuration.getter(v99);
  v101 = v207;
  REMRemindersListDataView.FetchConfiguration.remindersPrefetch.getter(v100);
  v102 = v101;
  v68(v98, v185);
  v104 = (uint64_t *)v205;
  v103 = v206;
  v105 = v202;
  (*(void (**)(char *, char *, uint64_t))(v206 + 16))(v205, v102, v202);
  v106 = (*(uint64_t (**)(uint64_t *, uint64_t))(v103 + 88))(v104, v105);
  v107 = v218;
  if (v106 == enum case for REMRemindersListDataView.RemindersPrefetch.initial(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v103 + 96))(v104, v105);
    v108 = *v104;
    swift_bridgeObjectRetain(v107);
    v110 = Array<A>.reminders.getter(v109);
    v111 = v108;
    v103 = v206;
    Subtasks = sub_10049BB18(v111, v110, (uint64_t)v222, v221, v76);
    swift_bridgeObjectRelease();
    v112 = _swiftEmptyArrayStorage;
  }
  else if (v106 == enum case for REMRemindersListDataView.RemindersPrefetch.updatedInserted(_:))
  {
    v113 = (uint64_t *)v205;
    (*(void (**)(char *, uint64_t))(v103 + 96))(v205, v105);
    v114 = *v113;
    swift_bridgeObjectRetain(v107);
    Subtasks = sub_10049C4C8(v114, v97, (uint64_t)v222, v221, v76);
    v112 = _swiftEmptyArrayStorage;
  }
  else
  {
    if (v106 != enum case for REMRemindersListDataView.RemindersPrefetch.initialAndDateRange(_:))
    {
      if (v106 != enum case for REMRemindersListDataView.RemindersPrefetch.none(_:))
      {
        _diagnoseUnexpectedEnumCase<A>(type:)(v105, v105);
        __break(1u);
        return;
      }
      v112 = _swiftEmptyArrayStorage;
      Subtasks = _swiftEmptyArrayStorage;
      goto LABEL_18;
    }
    v115 = (uint64_t *)v205;
    (*(void (**)(char *, uint64_t))(v103 + 96))(v205, v105);
    v116 = *v115;
    v117 = sub_10001A630(&qword_100839AA8);
    v118 = v187;
    sub_100128FE0((uint64_t)v115 + *(int *)(v117 + 48), v187);
    swift_bridgeObjectRetain(v107);
    v120 = Array<A>.reminders.getter(v119);
    v121 = v116;
    v103 = v206;
    v122 = (uint64_t)v222;
    Subtasks = sub_10049BB18(v121, v120, (uint64_t)v222, v221, v76);
    v123 = v122;
    v105 = v202;
    v112 = sub_10049CB18(v118, v120, v123, v221, (uint64_t)v76);
    swift_bridgeObjectRelease();
    sub_10000882C(v187, &qword_100839A98);
  }
  swift_bridgeObjectRelease();
  v102 = v207;
LABEL_18:
  v124 = swift_bridgeObjectRelease();
  v125 = (*(uint64_t (**)(char *, uint64_t, __n128))(v103 + 8))(v102, v105, v124);
  v126 = (void *)REMRemindersListDataView.ListSectionsInvocation.Parameters.list.getter(v125);
  v127 = objc_msgSend(v126, "objectID");

  v128 = (uint64_t)v201;
  *v201 = v127;
  swift_storeEnumTagMultiPayload(v128, v200, 6);
  sub_10000D2C0();
  v130 = v129;
  sub_1000CACA8(v128);
  v131 = v178;
  v133 = REMRemindersListDataView.ListSectionsInvocation.Parameters.configuration.getter(v132);
  v134 = (uint64_t)v199;
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v133);
  v68(v131, v185);
  v135 = v211;
  v136 = v186;
  v137 = sub_10049E524((uint64_t)v222, (uint64_t)v130, v211, v134, v182);
  v186 = v136;
  if (v136)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v80(v134, v219);
    (*(void (**)(uint64_t, uint64_t))(v203 + 8))(v209, v204);
    v138 = v135;
  }
  else
  {
    v139 = v137;
    v80(v134, v219);

    v140 = v188;
    sub_100129028(v135, v188);
    REMRemindersListDataView.SectionsModel.init(sections:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)(v107, v140, v139 & 1, Subtasks, v112);
    if (qword_1008377D0 != -1)
      swift_once(&qword_1008377D0, sub_1005040A0);
    v141 = type metadata accessor for Logger(0);
    sub_10001AAA8(v141, (uint64_t)qword_10084DD90);
    v142 = v203;
    v143 = v204;
    v144 = *(void (**)(char *, uint64_t, uint64_t))(v203 + 16);
    v145 = v196;
    v146 = v209;
    v144(v196, v209, v204);
    v147 = v189;
    v222 = v144;
    v144(v189, v146, v143);
    v148 = v182;
    swift_bridgeObjectRetain(v182);
    v150 = Logger.logObject.getter(v149);
    v151 = static os_log_type_t.default.getter(v150);
    if (os_log_type_enabled(v150, v151))
    {
      v152 = swift_slowAlloc(32, -1);
      *(_DWORD *)v152 = 134218496;
      v153 = *(_QWORD *)(v148 + 16);
      swift_bridgeObjectRelease();
      v223 = v153;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, &v224);
      swift_bridgeObjectRelease();
      *(_WORD *)(v152 + 12) = 2048;
      v155 = REMRemindersListDataView.Diff.updatedReminderObjectIDs.getter(v154);
      if ((v155 & 0xC000000000000001) != 0)
      {
        if (v155 >= 0)
          v155 &= 0xFFFFFFFFFFFFFF8uLL;
        v156 = __CocoaSet.count.getter(v155);
      }
      else
      {
        v156 = *(_QWORD *)(v155 + 16);
      }
      v163 = swift_bridgeObjectRelease();
      v164 = *(void (**)(char *, uint64_t, __n128))(v203 + 8);
      v164(v196, v204, v163);
      v223 = v156;
      v165 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, &v224);
      *(_WORD *)(v152 + 22) = 2048;
      v166 = REMRemindersListDataView.Diff.insertedReminderObjectIDs.getter(v165);
      if ((v166 & 0xC000000000000001) != 0)
      {
        if (v166 >= 0)
          v166 &= 0xFFFFFFFFFFFFFF8uLL;
        v167 = __CocoaSet.count.getter(v166);
      }
      else
      {
        v167 = *(_QWORD *)(v166 + 16);
      }
      v168 = swift_bridgeObjectRelease();
      v143 = v204;
      ((void (*)(char *, __n128))v164)(v147, v168);
      v223 = v167;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, &v224);
      _os_log_impl((void *)&_mh_execute_header, v150, v151, "reminders %ld updated %ld inserted %ld", (uint8_t *)v152, 0x20u);
      swift_slowDealloc(v152, -1, -1);

      v161 = v193;
      v160 = v198;
      v162 = v190;
      v221 = v164;
    }
    else
    {
      v157 = *(void (**)(char *, uint64_t))(v142 + 8);
      v158 = v198;
      v157(v147, v143);
      v221 = v157;
      v157(v145, v143);

      v159 = swift_bridgeObjectRelease_n(v148, 2);
      v160 = v158;
      v161 = v193;
      v162 = v190;
    }
    v169 = v191;
    v170 = v197;
    (*(void (**)(char *, char *, uint64_t, __n128))(v160 + 16))(v191, v197, v161, v159);
    v171 = v184;
    v172 = v192;
    REMRemindersListDataView.ListSectionsModel.init(sectionsModel:list:)(v169, v171);
    v173 = v209;
    v222(v162, v209, v143);
    v174 = sub_10009FC50(&qword_10084DDD0, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListSectionsModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.ListSectionsModel);
    v175 = sub_10009FC50(&qword_10084DDD8, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListSectionsModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.ListSectionsModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)(v172, v162, v194, v174, v175);

    (*(void (**)(char *, uint64_t))(v198 + 8))(v170, v161);
    ((void (*)(uint64_t, uint64_t))v221)(v173, v143);
    v138 = v211;
  }
  sub_10000882C(v138, &qword_100839AA0);
}

void sub_100505190(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t Configuration;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = a1;
  v4 = _s10PredicatesOMa(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v8 = *(_QWORD *)(Configuration - 8);
  v9 = __chkstk_darwin(Configuration);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = REMRemindersListDataView.ListSectionsInvocation.Parameters.configuration.getter(v9);
  v13 = REMRemindersListDataView.FetchConfiguration.countCompleted.getter(v12);
  v14 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, Configuration);
  if ((v13 & 1) != 0)
  {
    v15 = (void *)REMRemindersListDataView.ListSectionsInvocation.Parameters.list.getter(v14);
    v16 = objc_msgSend(v15, "objectID");

    *v6 = v16;
    swift_storeEnumTagMultiPayload(v6, v4, 6);
    sub_10000D2C0();
    v18 = v17;
    sub_1000CACA8((uint64_t)v6);
    sub_1004934D8(v22, (uint64_t)v18);
    if (!v2)
    {
      v19 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a2, 0, 1, v19);
    }

  }
  else
  {
    v20 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a2, 1, 1, v20);
  }
}

void *sub_100505338(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v26;
  _BYTE v27[40];
  uint64_t v28;

  v6 = (void *)REMRemindersListDataView.ListSectionsInvocation.Parameters.list.getter(a1);
  v7 = objc_msgSend(v6, "objectID");

  v9 = (void *)REMObjectID.codable.getter(v8);
  v10 = type metadata accessor for REMListStableSortingDataView.Invocation(0);
  v11 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v10)), "init");
  v12 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v12, v27);
  *(_OWORD *)(inited + 16) = xmmword_1006A7330;
  *(_QWORD *)(inited + 32) = v9;
  v28 = inited;
  specialized Array._endMutation()(inited);
  v14 = v28;
  if ((unint64_t)v28 >> 62)
  {
    if (v28 < 0)
      v19 = v28;
    else
      v19 = v28 & 0xFFFFFFFFFFFFFF8;
    v20 = v9;
    swift_bridgeObjectRetain(v14);
    v21 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease();
    if (v21)
      goto LABEL_3;
  }
  else
  {
    v15 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
    v16 = v9;
    if (v15)
    {
LABEL_3:
      sub_1002E7B70(v14);
      v18 = v17;
      goto LABEL_9;
    }
  }
  v18 = &_swiftEmptySetSingleton;
LABEL_9:
  swift_bridgeObjectRelease();
  sub_1001DDFA4((uint64_t)a2, a3, (uint64_t)v18);
  if (v3)
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    v23 = v22;

    swift_bridgeObjectRelease();
    v24 = v9;
    a2 = sub_1002B1944(v24, v23);

    swift_bridgeObjectRelease();
    if (!a2)
    {
      v26 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v24);
      swift_willThrow(v26);
    }

  }
  return a2;
}

uint64_t sub_100505518(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v3 = swift_allocObject(&unk_1007F89A8, 32, 7);
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = sub_10001A630(&qword_10083A9B8);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = a1;
  return Future.init(_:)(sub_100505E80, v3);
}

uint64_t sub_100505588()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  _BYTE v7[24];

  v1 = swift_allocObject(&unk_1007F8890, 24, 7);
  *(_QWORD *)(v1 + 16) = 0;
  v2 = swift_allocObject(&unk_1007F88B8, 32, 7);
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = v0;
  v3 = sub_10001A630(&qword_10083A9B8);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  swift_retain(v1);
  v4 = Future.init(_:)(sub_100505D0C, v2);
  swift_beginAccess(v1 + 16, v7, 0, 0);
  v5 = *(id *)(v1 + 16);
  swift_release(v1);
  return v4;
}

uint64_t sub_100505650()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100505674()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084DDE0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084DDE0);
  if (qword_100837628 != -1)
    swift_once(&qword_100837628, sub_1004A1838);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872058);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_100505704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *ObjCClassFromMetadata;
  void *v14;
  uint64_t v15;
  void *v16;
  _QWORD aBlock[5];
  uint64_t v18;

  v8 = type metadata accessor for DispatchQoS.QoSClass(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_allocObject(&unk_1007F89D0, 32, 7);
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = a2;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(a4);
  sub_1000D30A4();
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchQoS.QoSClass.utility(_:), v8);
  swift_retain(a2);
  v14 = (void *)static OS_dispatch_queue.global(qos:)(v11);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v15 = swift_allocObject(&unk_1007F89F8, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_100505D14;
  *(_QWORD *)(v15 + 24) = v12;
  aBlock[4] = sub_100505EE0;
  v18 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007F8A10;
  v16 = _Block_copy(aBlock);
  swift_release(v18);
  objc_msgSend(ObjCClassFromMetadata, "waitForSyncEngineSystemAvailabilityBlockingQueue:completionQueue:completionBlock:", a3, v14, v16);
  _Block_release(v16);

}

uint64_t sub_10050588C(uint64_t (*a1)(_QWORD))
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  if (qword_1008377D8 != -1)
    swift_once(&qword_1008377D8, sub_100505674);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001AAA8(v2, (uint64_t)qword_10084DDE0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DADSystemAvailabilityChecker(Swift extension) systemAvailableFuture fulfilled", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  return a1(0);
}

void sub_100505974(void (*a1)(void ***), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *ObjCClassFromMetadata;
  void *v20;
  id v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  id v25;
  uint64_t v26;
  void *v27;
  id v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void **aBlock;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  void *v43;
  void *v44;
  _QWORD *v45;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v37 = *(_QWORD *)(v8 - 8);
  v38 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v11 - 8);
  v36 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS.QoSClass(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = swift_allocObject(&unk_1007F88E0, 32, 7);
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(a4);
  swift_retain(a2);
  if ((objc_msgSend(ObjCClassFromMetadata, "hasPassedBuddy") & 1) != 0)
  {
    swift_release(v18);
    LOBYTE(aBlock) = 0;
    a1(&aBlock);
  }
  else
  {
    sub_1000D30A4();
    (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DispatchQoS.QoSClass.utility(_:), v14);
    v20 = (void *)static OS_dispatch_queue.global(qos:)(v17);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    v21 = objc_msgSend(objc_allocWithZone((Class)DADBuddyStateObserver), "initWithQueue:", v20);
    v22 = (_QWORD *)swift_allocObject(&unk_1007F8908, 40, 7);
    v22[2] = v21;
    v22[3] = sub_100505D14;
    v22[4] = v18;
    v44 = sub_100505E40;
    v45 = v22;
    aBlock = _NSConcreteStackBlock;
    v41 = 1107296256;
    v42 = sub_1000094C8;
    v43 = &unk_1007F8920;
    v23 = _Block_copy(&aBlock);
    v24 = v45;
    v25 = v21;
    swift_release(v24);
    objc_msgSend(v25, "setBuddyDidFinishHandler:", v23);
    _Block_release(v23);
    v26 = swift_allocObject(&unk_1007F8958, 24, 7);
    *(_QWORD *)(v26 + 16) = v25;
    v44 = sub_100505E4C;
    v45 = (_QWORD *)v26;
    aBlock = _NSConcreteStackBlock;
    v41 = 1107296256;
    v42 = sub_1000094C8;
    v43 = &unk_1007F8970;
    v27 = _Block_copy(&aBlock);
    v28 = v25;
    static DispatchQoS.unspecified.getter(v28);
    v39 = _swiftEmptyArrayStorage;
    v29 = sub_1000D3124();
    v30 = sub_10001A630((uint64_t *)&unk_100838000);
    v31 = sub_1000D316C();
    v32 = v38;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v30, v31, v38, v29);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v27);
    _Block_release(v27);

    (*(void (**)(char *, uint64_t))(v37 + 8))(v10, v32);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v36);
    swift_release(v45);
    swift_beginAccess(a3 + 16, &aBlock, 1, 0);
    v33 = *(void **)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v28;

  }
}

uint64_t sub_100505CE8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100505D0C(void (*a1)(void ***), uint64_t a2)
{
  uint64_t v2;

  sub_100505974(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100505D18(void *a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  if (qword_1008377D8 != -1)
    swift_once(&qword_1008377D8, sub_100505674);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001AAA8(v4, (uint64_t)qword_10084DDE0);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "DADBuddyStateObserver(Swift extension) hasPassedBuddyFuture fulfilled", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  objc_msgSend(a1, "stop");
  return a2(0);
}

uint64_t sub_100505E14()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100505E40()
{
  uint64_t v0;

  return sub_100505D18(*(void **)(v0 + 16), *(uint64_t (**)(_QWORD))(v0 + 24));
}

id sub_100505E4C()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "start");
}

uint64_t sub_100505E5C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100505E80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100505704(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100505E88()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100505EAC(char a1)
{
  uint64_t v1;
  uint64_t (*v2)(char *);
  char v4;

  v2 = *(uint64_t (**)(char *))(v1 + 16);
  v4 = a1 & 1;
  return v2(&v4);
}

uint64_t sub_100505EE0()
{
  uint64_t v0;

  return sub_10050588C(*(uint64_t (**)(_QWORD))(v0 + 16));
}

uint64_t sub_100505EFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084DDF8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084DDF8);
  if (qword_100837628 != -1)
    swift_once(&qword_100837628, sub_1004A1838);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872058);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t RDSynchronizedKeyValueStore.lastDismissedDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  NSString v7;
  id v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[2];
  _OWORD v32[2];

  v3 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void **)(v1 + 16);
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v6, "objectForKey:", v7);

  if (!v8)
  {
    v15 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a1, 1, 1, v15);
  }
  _bridgeAnyObjectToAny(_:)(v31, v8);
  swift_unknownObjectRelease(v8);
  sub_10001A6CC(v31, v32);
  sub_10001A670((uint64_t)v32, (uint64_t)v31);
  v9 = type metadata accessor for Date(0);
  v10 = swift_dynamicCast(v5, v31, (char *)&type metadata for Any + 8, v9, 6);
  v11 = *(_QWORD *)(v9 - 8);
  v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (!v10)
  {
    v12(v5, 1, 1, v9);
    goto LABEL_7;
  }
  v12(v5, 0, 1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v5, 1, v9) == 1)
  {
LABEL_7:
    sub_1000EA320((uint64_t)v5);
    if (qword_1008377E0 != -1)
      swift_once(&qword_1008377E0, sub_100505EFC);
    v17 = type metadata accessor for Logger(0);
    sub_10001AAA8(v17, (uint64_t)qword_10084DDF8);
    v18 = sub_10001A670((uint64_t)v32, (uint64_t)v31);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v27 = a1;
      v23 = v22;
      v30 = v22;
      *(_DWORD *)v21 = 136315138;
      sub_10001A670((uint64_t)v31, (uint64_t)&v28);
      v24 = String.init<A>(describing:)(&v28, (char *)&type metadata for Any + 8);
      v28 = sub_10001A820(v24, v25, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v31);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      v26 = v23;
      a1 = v27;
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v21, -1, -1);

    }
    else
    {

      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v31);
    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v32);
    v13 = a1;
    v14 = 1;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v12)(v13, v14, 1, v9);
  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v32);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a1, v5, v9);
  v13 = a1;
  v14 = 0;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v12)(v13, v14, 1, v9);
}

uint64_t RDSynchronizedKeyValueStore.lastDismissedDate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  Class isa;
  NSString v10;
  uint64_t v12;

  v3 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void **)(v1 + 16);
  sub_1000CDA2C(a1, (uint64_t)v5);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v5, v7);
  }
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "setObject:forKey:", isa, v10);
  swift_unknownObjectRelease(isa);

  return sub_1000EA320(a1);
}

void (*RDSynchronizedKeyValueStore.lastDismissedDate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  size_t v3;
  void *v4;

  *a1 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(sub_10001A630((uint64_t *)&unk_1008380D0) - 8) + 64);
  a1[1] = malloc(v3);
  v4 = malloc(v3);
  a1[2] = v4;
  RDSynchronizedKeyValueStore.lastDismissedDate.getter((uint64_t)v4);
  return sub_100506478;
}

void sub_100506478(uint64_t a1, char a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    sub_1000CDA2C((uint64_t)v3, (uint64_t)v2);
    RDSynchronizedKeyValueStore.lastDismissedDate.setter((uint64_t)v2);
    sub_1000EA320((uint64_t)v3);
  }
  else
  {
    RDSynchronizedKeyValueStore.lastDismissedDate.setter((uint64_t)v3);
  }
  free(v3);
  free(v2);
}

uint64_t RDSynchronizedKeyValueStore.lastDismissedDateDidChangeExternally()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v0 = sub_10001A630(&qword_10084DE10);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = RDSynchronizedKeyValueStore.storeDidChangeExternally(label:)(0xD00000000000002ELL, 0x80000001006C0AC0);
  v10[1] = v4;
  v5 = sub_10001A630(&qword_10084DE18);
  v6 = sub_1000A5F84(&qword_10084DE20, &qword_10084DE18, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.filter(_:)(sub_100506604, 0, v5, v6);
  swift_release(v4);
  v7 = sub_1000A5F84(&qword_10084DE28, &qword_10084DE10, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v8 = Publisher.eraseToAnyPublisher()(v0, v7);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v8;
}

uint64_t sub_100506604(unsigned __int8 *a1)
{
  unsigned int v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = a1[8];
  if (v1 >= 2)
    return v1 == 3;
  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v3)
    return 0;
  v4 = v2[4];
  v5 = v2[5];
  if (v4 == 0xD000000000000023 && v5 == 0x8000000100706C70)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, 0xD000000000000023, 0x8000000100706C70, 0);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v7 = v2 + 7;
  for (i = 1; ; ++i)
  {
    v9 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v10 = *(v7 - 1);
    v11 = *v7;
    if (v10 == 0xD000000000000023 && v11 == 0x8000000100706C70
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, 0xD000000000000023, 0x8000000100706C70, 0) & 1) != 0)
    {
      return 1;
    }
    result = 0;
    v7 += 2;
    if (v9 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_100506714@<X0>(uint64_t a1@<X8>)
{
  return RDSynchronizedKeyValueStore.lastDismissedDate.getter(a1);
}

uint64_t sub_100506734(uint64_t a1)
{
  return RDSynchronizedKeyValueStore.lastDismissedDate.setter(a1);
}

void (*sub_100506754(void **a1))(uint64_t a1, char a2)
{
  void **v1;
  size_t v3;
  void *v4;
  void *v5;

  v3 = *(_QWORD *)(*(_QWORD *)(sub_10001A630((uint64_t *)&unk_1008380D0) - 8) + 64);
  *a1 = malloc(v3);
  v4 = malloc(v3);
  v5 = *v1;
  a1[1] = v4;
  a1[2] = v5;
  RDSynchronizedKeyValueStore.lastDismissedDate.getter((uint64_t)v4);
  return sub_1005067C0;
}

void sub_1005067C0(uint64_t a1, char a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)a1;
  if ((a2 & 1) != 0)
  {
    sub_1000CDA2C((uint64_t)v2, (uint64_t)v3);
    RDSynchronizedKeyValueStore.lastDismissedDate.setter((uint64_t)v3);
    sub_1000EA320((uint64_t)v2);
  }
  else
  {
    RDSynchronizedKeyValueStore.lastDismissedDate.setter((uint64_t)v2);
  }
  free(v2);
  free(v3);
}

uint64_t sub_10050681C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v0 = sub_10001A630(&qword_10084DE10);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = RDSynchronizedKeyValueStore.storeDidChangeExternally(label:)(0xD00000000000002ELL, 0x80000001006C0AC0);
  v10[1] = v4;
  v5 = sub_10001A630(&qword_10084DE18);
  v6 = sub_1000A5F84(&qword_10084DE20, &qword_10084DE18, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.filter(_:)(sub_100506604, 0, v5, v6);
  swift_release(v4);
  v7 = sub_1000A5F84(&qword_10084DE28, &qword_10084DE10, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v8 = Publisher.eraseToAnyPublisher()(v0, v7);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v8;
}

uint64_t sub_100506950()
{
  uint64_t v0;
  uint64_t ObjectType;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *Strong;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  ObjectType = swift_getObjectType(v0);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd20RDDisplayDateUpdater_significantTimeNotificationStream);
  v3 = swift_allocObject(&unk_1007F8AE8, 24, 7);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC7remindd20RDDisplayDateUpdater_storeController, v4);
  swift_unknownObjectWeakInit(v3 + 16, Strong);

  v6 = swift_allocObject(&unk_1007F8B10, 32, 7);
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = ObjectType;
  v8 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 16) = sub_100507EF4;
  *(_QWORD *)(v2 + 24) = v6;
  return sub_1000A5C24(v8, v7);
}

void sub_1005069FC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, "displayDateTimeZone");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_100506A60(uint64_t a1, void **a2)
{
  void *v2;
  NSString v3;
  id v4;

  v2 = *a2;
  if (*(_QWORD *)(a1 + 8))
    v3 = String._bridgeToObjectiveC()();
  else
    v3 = 0;
  v4 = v3;
  objc_msgSend(v2, "setDisplayDateTimeZone:");

}

uint64_t sub_100506ABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084DE30);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084DE30);
  if (qword_1008375E8 != -1)
    swift_once(&qword_1008375E8, sub_1004A1758);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871F98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_100506B4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  id v16;
  void *v17;
  uint64_t v18;
  _BYTE v19[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v19, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    if (qword_1008377E8 != -1)
      swift_once(&qword_1008377E8, sub_100506ABC);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10001AAA8(v5, (uint64_t)qword_10084DE30);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Updating display dates in all stores due to significant time change…", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    v10 = objc_msgSend(v4, "persistentStoreCoordinator");
    v11 = objc_msgSend(v10, "persistentStores");

    v12 = sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
    v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

    if ((unint64_t)v13 >> 62)
    {
      if (v13 < 0)
        v18 = v13;
      else
        v18 = v13 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v13);
      v14 = _CocoaArrayWrapper.endIndex.getter(v18);
      if (v14)
        goto LABEL_8;
    }
    else
    {
      v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v13);
      if (v14)
      {
LABEL_8:
        if (v14 < 1)
        {
          __break(1u);
          return;
        }
        for (i = 0; i != v14; ++i)
        {
          if ((v13 & 0xC000000000000001) != 0)
            v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v13);
          else
            v16 = *(id *)(v13 + 8 * i + 32);
          v17 = v16;
          sub_100506D64(v16);

        }
      }
    }

    swift_bridgeObjectRelease_n(v13, 2);
  }
}

void sub_100506D64(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void **v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void ***v9;
  void **v10;
  uint64_t v11;
  void ***v12;
  id v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void **v19;
  NSObject *v20;
  void **p_isa;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  void ***v25;
  void **v26;
  uint64_t v27;
  NSObject *v28;
  void **aBlock;
  _QWORD v30[4];
  uint64_t v31;

  v2 = v1;
  if (qword_1008377E8 != -1)
    swift_once(&qword_1008377E8, sub_100506ABC);
  v4 = type metadata accessor for Logger(0);
  sub_10001AAA8(v4, (uint64_t)qword_10084DE30);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    aBlock = v5;
    v9 = (void ***)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v30);
    *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "UpdateDisplayDates BEGIN {store: %@}", v8, 0xCu);
    v11 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v9, 1, v11);
    v12 = v9;
    v2 = v1;
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v13 = objc_msgSend(objc_allocWithZone((Class)NSManagedObjectContext), "initWithConcurrencyType:", 1);
  v14 = objc_msgSend(v5, "persistentStoreCoordinator");
  objc_msgSend(v13, "setPersistentStoreCoordinator:", v14);

  objc_msgSend(v13, "setTransactionAuthor:", RDStoreControllerDisplayDateUpdaterAuthor);
  v15 = (_QWORD *)swift_allocObject(&unk_1007F8A70, 40, 7);
  v15[2] = v2;
  v15[3] = v5;
  v15[4] = v13;
  v16 = swift_allocObject(&unk_1007F8A98, 32, 7);
  *(_QWORD *)(v16 + 16) = sub_100507478;
  *(_QWORD *)(v16 + 24) = v15;
  v30[3] = sub_1000098E4;
  v31 = v16;
  aBlock = _NSConcreteStackBlock;
  v30[0] = 1107296256;
  v30[1] = sub_1000098C4;
  v30[2] = &unk_1007F8AB0;
  v17 = _Block_copy(&aBlock);
  v18 = v31;
  v19 = v5;
  v20 = v13;
  swift_retain();
  swift_release(v18);
  -[NSObject performBlockAndWait:](v20, "performBlockAndWait:", v17);
  _Block_release(v17);
  LOBYTE(v13) = swift_isEscapingClosureAtFileLocation(v16, "", 92, 37, 45, 1);
  swift_release(v16);
  if ((v13 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    p_isa = v19;
    v22 = Logger.logObject.getter(p_isa);
    v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v28 = v20;
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = (void ***)swift_slowAlloc(8, -1);
      *(_DWORD *)v24 = 138412290;
      aBlock = p_isa;
      v26 = p_isa;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v30);
      *v25 = p_isa;

      _os_log_impl((void *)&_mh_execute_header, v22, v23, "UpdateDisplayDates END {store: %@}", v24, 0xCu);
      v27 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v25, 1, v27);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
      swift_release(v15);
      p_isa = (void **)&v28->isa;
    }
    else
    {
      swift_release(v15);

      v22 = v20;
    }

  }
}

double sub_100507190(uint64_t a1, void *a2, void *a3)
{
  return sub_100507494(a2, a3);
}

uint64_t type metadata accessor for RDDisplayDateUpdater()
{
  return objc_opt_self(_TtC7remindd20RDDisplayDateUpdater);
}

uint64_t sub_10050744C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

double sub_100507478()
{
  uint64_t v0;

  return sub_100507190(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100507484()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

double sub_100507494(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  Class isa;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  id v35;
  double result;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  __n128 v41;
  char **v42;
  id v43;
  void *v44;
  uint64_t v45;
  NSObject *v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  id v57;
  id v58;
  uint64_t v59;
  id v60;
  id v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  void *v77;
  double v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  unsigned int v85;
  id v86;
  id v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  _QWORD v92[2];
  id v93;
  void *v94;
  __n128 v95;
  uint64_t v96;
  unint64_t v97;
  id v98;
  uint64_t v99;
  id v100;
  _BYTE v101[48];

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TimeZone(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static TimeZone.current.getter(v10);
  Date.init()(v13);
  v14 = TimeZone.secondsFromGMT(for:)(v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v15 = sub_10001A630(&qword_10083C4C0);
  inited = swift_initStackObject(v15, v101);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
  KeyPath = swift_getKeyPath(&unk_1006C0B68);
  v18 = sub_10033DA6C(KeyPath);
  swift_release(KeyPath);
  *(_QWORD *)(inited + 32) = v18;
  v19 = swift_getKeyPath(&unk_1006C0BB8);
  v20 = sub_100342C04(v19, v14);
  v21 = swift_release(v19);
  *(_QWORD *)(inited + 40) = v20;
  v100 = (id)inited;
  specialized Array._endMutation()(v21);
  v22 = (void *)sub_10000D2BC(v100);
  v23 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v24 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v25 = objc_msgSend((id)swift_getObjCClassFromMetadata(v23), "entity");
  objc_msgSend(v24, "setEntity:", v25);

  objc_msgSend(v24, "setAffectedStores:", 0);
  v98 = v22;
  objc_msgSend(v24, "setPredicate:", v22);
  v26 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v27 = swift_allocObject(v26, 40, 7);
  *(_OWORD *)(v27 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v27 + 32) = a1;
  v100 = (id)v27;
  specialized Array._endMutation()(v27);
  v28 = v100;
  sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
  v29 = a1;
  isa = Array._bridgeToObjectiveC()().super.isa;
  v31 = a2;
  objc_msgSend(v24, "setAffectedStores:", isa, swift_bridgeObjectRelease(v28).n128_f64[0]);

  objc_msgSend(v24, "setFetchBatchSize:", 64);
  v32 = v99;
  v33 = NSManagedObjectContext.fetch<A>(_:)(v24, v23);
  v34 = v32;
  if (v32)
  {
    v35 = v98;
LABEL_3:

    return result;
  }
  v37 = v33;
  v38 = v33 >> 62;
  if (v33 >> 62)
  {
LABEL_62:
    if (v37 < 0)
      v90 = v37;
    else
      v90 = v37 & 0xFFFFFFFFFFFFFF8;
    v91 = v38;
    swift_bridgeObjectRetain(v37);
    v39 = _CocoaArrayWrapper.endIndex.getter(v90);
    swift_bridgeObjectRelease(v37);
    v38 = v91;
    if (v39)
    {
LABEL_6:
      v92[0] = v38;
      v92[1] = v34;
      v93 = v24;
      v40 = v37 & 0xC000000000000001;
      v41 = swift_bridgeObjectRetain(v37);
      v34 = 4;
      v42 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
      v41.n128_u64[0] = 134218240;
      v95 = v41;
      v96 = v37;
      v97 = v37 & 0xC000000000000001;
      v94 = v31;
      v99 = v39;
      do
      {
        if (v40)
          v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34 - 4, v37);
        else
          v43 = *(id *)(v37 + 8 * v34);
        v44 = v43;
        v24 = (id)(v34 - 3);
        if (__OFADD__(v34 - 4, 1))
        {
          __break(1u);
          goto LABEL_62;
        }
        objc_msgSend(v43, "updateDisplayDate");
        if ((v24 & 0x3F) == 0 && (objc_msgSend(v31, v42[336]) & 1) != 0)
        {
          if (qword_1008377E8 != -1)
            swift_once(&qword_1008377E8, sub_100506ABC);
          v45 = type metadata accessor for Logger(0);
          sub_10001AAA8(v45, (uint64_t)qword_10084DE30);
          v46 = v31;
          v47 = Logger.logObject.getter(v46);
          v48 = static os_log_type_t.default.getter(v47);
          if (os_log_type_enabled(v47, v48))
          {
            v49 = swift_slowAlloc(22, -1);
            *(_DWORD *)v49 = v95.n128_u32[0];
            v50 = -[NSObject updatedObjects](v46, "updatedObjects");
            v51 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
            v52 = sub_100332AC0();
            v53 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v50, v51, v52);

            if ((v53 & 0xC000000000000001) != 0)
            {
              if (v53 < 0)
                v54 = v53;
              else
                v54 = v53 & 0xFFFFFFFFFFFFFF8;
              v55 = __CocoaSet.count.getter(v54);
            }
            else
            {
              v55 = *(_QWORD *)(v53 + 16);
            }

            swift_bridgeObjectRelease(v53);
            *(_QWORD *)(v49 + 4) = v55;

            *(_WORD *)(v49 + 12) = 2048;
            *(_QWORD *)(v49 + 14) = v24;
            _os_log_impl((void *)&_mh_execute_header, v47, v48, "UpdateDisplayDates: Saving batch {updatedObjectsCount: %ld, totalUpdatedCount: %ld}", (uint8_t *)v49, 0x16u);
            swift_slowDealloc(v49, -1, -1);
            v37 = v96;
            v31 = v94;
          }
          else
          {

            v47 = v46;
          }

          v100 = 0;
          v56 = -[NSObject save:](v46, "save:", &v100);
          v57 = v100;
          v42 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
          if (!v56)
          {
            v79 = v100;
            swift_bridgeObjectRelease_n(v37, 2);
            _convertNSErrorToError(_:)(v57);

            swift_willThrow(v80);
            v35 = v93;
            v24 = v44;
            goto LABEL_3;
          }
          v58 = v100;
          v39 = v99;
          v40 = v97;
        }

        ++v34;
      }
      while (v24 != (id)v39);
      if (!objc_msgSend(v31, v42[336], swift_bridgeObjectRelease(v37).n128_f64[0]))
      {
        if (qword_1008377E8 != -1)
          swift_once(&qword_1008377E8, sub_100506ABC);
        v71 = type metadata accessor for Logger(0);
        sub_10001AAA8(v71, (uint64_t)qword_10084DE30);
        swift_bridgeObjectRetain(v37);
        v73 = Logger.logObject.getter(v72);
        v74 = static os_log_type_t.info.getter(v73);
        if (!os_log_type_enabled(v73, v74))
        {

          *(_QWORD *)&result = swift_bridgeObjectRelease_n(v37, 2).n128_u64[0];
          return result;
        }
        v75 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v75 = 134217984;
        if (v92[0])
        {
          v76 = v96;
          if (v96 < 0)
            v81 = v96;
          else
            v81 = v96 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v96);
          v77 = (void *)_CocoaArrayWrapper.endIndex.getter(v81);
          swift_bridgeObjectRelease(v76);
        }
        else
        {
          v76 = v96;
          v77 = *(void **)((v96 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease(v76);
        v100 = v77;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101);
        swift_bridgeObjectRelease(v76);
        _os_log_impl((void *)&_mh_execute_header, v73, v74, "Not saving since there are no changes {totalUpdatedCount: %ld}", v75, 0xCu);
        swift_slowDealloc(v75, -1, -1);

        goto LABEL_59;
      }
      if (qword_1008377E8 != -1)
        swift_once(&qword_1008377E8, sub_100506ABC);
      v59 = type metadata accessor for Logger(0);
      sub_10001AAA8(v59, (uint64_t)qword_10084DE30);
      v60 = v31;
      swift_bridgeObjectRetain(v37);
      v61 = v60;
      v62 = Logger.logObject.getter(v61);
      v63 = static os_log_type_t.default.getter(v62);
      if (os_log_type_enabled(v62, v63))
      {
        v64 = swift_slowAlloc(22, -1);
        *(_DWORD *)v64 = v95.n128_u32[0];
        v65 = objc_msgSend(v61, "updatedObjects");
        v66 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
        v67 = sub_100332AC0();
        v68 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v65, v66, v67);

        if ((v68 & 0xC000000000000001) != 0)
        {
          if (v68 < 0)
            v69 = v68;
          else
            v69 = v68 & 0xFFFFFFFFFFFFFF8;
          v70 = (void *)__CocoaSet.count.getter(v69);
        }
        else
        {
          v70 = *(void **)(v68 + 16);
        }

        swift_bridgeObjectRelease(v68);
        v100 = v70;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101);

        *(_WORD *)(v64 + 12) = 2048;
        if (v92[0])
        {
          v82 = v96;
          if (v96 < 0)
            v84 = v96;
          else
            v84 = v96 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v96);
          v83 = (void *)_CocoaArrayWrapper.endIndex.getter(v84);
          swift_bridgeObjectRelease(v82);
        }
        else
        {
          v82 = v96;
          v83 = *(void **)((v96 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease(v82);
        v100 = v83;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101);
        swift_bridgeObjectRelease(v82);
        _os_log_impl((void *)&_mh_execute_header, v62, v63, "UpdateDisplayDates: Saving last objects {updatedObjectsCount: %ld, totalUpdatedCount: %ld}", (uint8_t *)v64, 0x16u);
        swift_slowDealloc(v64, -1, -1);

      }
      else
      {

        *(_QWORD *)&v78 = swift_bridgeObjectRelease_n(v37, 2).n128_u64[0];
      }
      v100 = 0;
      v85 = objc_msgSend(v61, "save:", &v100, v78);
      v86 = v100;
      if (v85)
      {
        v87 = v100;
LABEL_59:

        return result;
      }
      v88 = v100;
      _convertNSErrorToError(_:)(v86);

      swift_willThrow(v89);
      v35 = v98;
      v24 = v93;
      goto LABEL_3;
    }
  }
  else
  {
    v39 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v39)
      goto LABEL_6;
  }

  *(_QWORD *)&result = swift_bridgeObjectRelease(v37).n128_u64[0];
  return result;
}

const char *sub_100507E5C()
{
  return "displayDateUpdatedForSecondsFromGMT";
}

id sub_100507E68@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "displayDateUpdatedForSecondsFromGMT");
  *a2 = result;
  return result;
}

id sub_100507E98(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setDisplayDateUpdatedForSecondsFromGMT:", *a1);
}

uint64_t sub_100507EAC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100507ED0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100507EF4()
{
  uint64_t v0;

  sub_100506B4C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100507EFC(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_10084DEB8, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.CustomSmartListInvocation, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.CustomSmartListInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_100507F38(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  char *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  id v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  id v46;
  __int128 v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  id v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[5];
  _OWORD v82[2];
  uint64_t v83;
  uint64_t v84;

  *(_QWORD *)&v73 = a5;
  v78 = a2;
  v79 = a4;
  v84 = a3;
  v7 = type metadata accessor for REMCustomSmartListFilterDescriptor.Operation(0);
  v75 = *(_QWORD *)(v7 - 8);
  v76 = v7;
  __chkstk_darwin(v7);
  v74 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for UUID(0);
  v69 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v68 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v72 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v10 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v80);
  v14 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v66 - v16;
  __chkstk_darwin(v18);
  v77 = (uint64_t)&v66 - v19;
  v20 = _s10PredicatesOMa(0);
  *(_QWORD *)&v21 = __chkstk_darwin(v20).n128_u64[0];
  v23 = (void **)((char *)&v66 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = a1;
  v25 = objc_msgSend(a1, "customContext", v21);
  if (v25)
  {
    v26 = v25;
    v71 = v5;
    v27 = (void *)REMSmartListCustomContext.filter.getter();

    if (v27)
    {
      v28 = (char *)v23 + *(int *)(sub_10001A630(&qword_100846698) + 64);
      *v23 = v27;
      v67 = v27;
      v29 = v24;
      v23[1] = objc_msgSend(v24, "accountID");
      v30 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v84, v30);
      swift_storeEnumTagMultiPayload(v23, v20, 18);
      sub_10000D2C0();
      v66 = v31;
      sub_10001C744((uint64_t)v23, _s10PredicatesOMa);
      (*(void (**)(char *, _QWORD, _QWORD))(v10 + 16))(v12, v73, v72);
      v32 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
      v33 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v17, v32, v33);
      v34 = v80;
      swift_storeEnumTagMultiPayload(v17, v80, 2);
      v35 = v77;
      sub_1004957D0((uint64_t)v12, (uint64_t)v17, v77);
      sub_1001D8AD8(v35, (uint64_t)v14);
      LODWORD(v32) = swift_getEnumCaseMultiPayload(v14, v34);
      sub_10001C744((uint64_t)v14, _s9UtilitiesO12SortingStyleOMa);
      v36 = v78;
      if ((_DWORD)v32 == 5)
      {
        v37 = objc_msgSend(v29, "objectID");
        v38 = objc_msgSend(v37, "uuid");

        v39 = v68;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v38);

        v41 = UUID.uuidString.getter(v40);
        v43 = v42;
        (*(void (**)(char *, uint64_t))(v69 + 8))(v39, v70);
        v44 = objc_msgSend(v29, "accountID");
        sub_10049A714(v36, 2, v41, v43, v44, (uint64_t)v82);
        v72 = v82[1];
        v73 = v82[0];
        v45 = v83;
        swift_bridgeObjectRelease(v43);

        v46 = objc_msgSend(v29, "accountID");
        sub_10001C744(v35, _s9UtilitiesO12SortingStyleOMa);
        v47 = v72;
        *(_OWORD *)v17 = v73;
        *((_OWORD *)v17 + 1) = v47;
        *((_QWORD *)v17 + 4) = v45;
        *((_QWORD *)v17 + 5) = v46;
        swift_storeEnumTagMultiPayload(v17, v80, 4);
        sub_1003BFBD0((uint64_t)v17, v35);
      }
      v48 = objc_msgSend(v29, "accountID");
      v49 = objc_msgSend(v36, "persistentStoreOfAccountWithAccountID:", v48);

      if (v49)
      {
        v51 = sub_10001A630((uint64_t *)&unk_10083AD90);
        v52 = swift_allocObject(v51, 40, 7);
        *(_OWORD *)(v52 + 16) = xmmword_1006A7330;
        *(_QWORD *)(v52 + 32) = v49;
        v81[0] = v52;
        v50 = specialized Array._endMutation()(v52);
        v49 = (id)v81[0];
      }
      v53 = v71;
      v54 = v67;
      v55 = v66;
      v56 = v74;
      REMCustomSmartListFilterDescriptor.operation.getter(v50);
      v57 = v56;
      v58 = v76;
      v59 = (*(uint64_t (**)(char *, uint64_t))(v75 + 88))(v57, v76);
      if (v59 == enum case for REMCustomSmartListFilterDescriptor.Operation.and(_:))
      {
        v60 = static Set<>.typesSupportedByCustomSmartList.getter();
        v61 = static Set<>.typesIndescribableByNSPredicate.getter();
        v62 = sub_10050A4EC(v61, v60, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_10050A678);
        swift_bridgeObjectRelease(v61);
      }
      else
      {
        if (v59 != enum case for REMCustomSmartListFilterDescriptor.Operation.or(_:))
        {
          _diagnoseUnexpectedEnumCase<A>(type:)(v58, v58);
          __break(1u);
          return;
        }
        v62 = static Set<>.typesSupportedByCustomSmartList.getter();
      }
      v81[3] = &type metadata for ReminderIDsWithMatchingHashtagsProvider;
      v81[4] = sub_1003F66EC();
      v81[0] = v36;
      v63 = v36;
      v64 = REMCustomSmartListFilterDescriptor.postFetchPredicates(for:reminderIDsWithMatchingHashtagsProvider:)(v62, v81);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v81);
      swift_bridgeObjectRelease(v62);
      sub_100496780((uint64_t)v63, (uint64_t)v55, v35, 0, 0, v84, v79, v64, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)v49, 0);
      if (!v53)
        swift_bridgeObjectRelease(v65);
      sub_10001C744(v35, _s9UtilitiesO12SortingStyleOMa);
      swift_bridgeObjectRelease(v64);

      swift_bridgeObjectRelease(v49);
    }
  }
}

void sub_1005085CC(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  id v20;
  void *v21;
  void *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  id v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[5];
  uint64_t v60;

  v52 = a3;
  v55 = a1;
  v58 = a5;
  v7 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v53 = *(_QWORD *)(v7 - 8);
  v54 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v56 = *(_QWORD *)(v10 - 8);
  v57 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = _s10PredicatesOMa(0);
  __chkstk_darwin(v51);
  v14 = (id *)((char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for REMCustomSmartListFilterDescriptor.Operation(0);
  v16 = *(_QWORD *)(v15 - 8);
  *(_QWORD *)&v17 = __chkstk_darwin(v15).n128_u64[0];
  v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0
    && (v20 = objc_msgSend(a4, "customContext", v17)) != 0
    && (v21 = v20, v22 = (void *)REMSmartListCustomContext.filter.getter(), v21, v22))
  {
    v50 = v22;
    REMCustomSmartListFilterDescriptor.operation.getter(v23);
    v24 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v19, v15);
    if (v24 == enum case for REMCustomSmartListFilterDescriptor.Operation.and(_:))
    {
      v25 = static Set<>.typesSupportedByCustomSmartList.getter();
      v26 = static Set<>.typesIndescribableByNSPredicate.getter();
      v27 = sub_10050A4EC(v26, v25, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_10050A678);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (v24 != enum case for REMCustomSmartListFilterDescriptor.Operation.or(_:))
      {
        _diagnoseUnexpectedEnumCase<A>(type:)(v15, v15);
        __break(1u);
        return;
      }
      v27 = static Set<>.typesSupportedByCustomSmartList.getter();
    }
    v29 = v50;
    v59[3] = &type metadata for ReminderIDsWithMatchingHashtagsProvider;
    v59[4] = sub_1003F66EC();
    v59[0] = v55;
    v30 = v55;
    v31 = REMCustomSmartListFilterDescriptor.postFetchPredicates(for:reminderIDsWithMatchingHashtagsProvider:)(v27, v59);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v59);
    swift_bridgeObjectRelease();
    v32 = *(_QWORD *)(v31 + 16);
    v33 = swift_bridgeObjectRelease();
    if (v32)
    {
      v35 = v56;
      v34 = v57;
      (*(void (**)(char *, _QWORD, uint64_t, __n128))(v56 + 104))(v12, enum case for REMRemindersListDataView.ShowCompleted.on(_:), v57, v33);
      v37 = v53;
      v36 = v54;
      (*(void (**)(char *, _QWORD, uint64_t))(v53 + 104))(v9, enum case for REMRemindersListDataView.SortingStyle.default(_:), v54);
      v38 = v60;
      sub_100507F38(a4, v30, (uint64_t)v12, v52, (uint64_t)v9);
      if (v38)
      {

        (*(void (**)(char *, uint64_t))(v37 + 8))(v9, v36);
        (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v34);
      }
      else
      {
        v47 = v39;
        (*(void (**)(char *, uint64_t))(v37 + 8))(v9, v36);
        (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v34);
        v48 = v58;
        REMRemindersListDataView.CountByCompleted.init(reminders:)(v47);

        v49 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v48, 0, 1, v49);
      }
    }
    else
    {
      v40 = (char *)v14 + *(int *)(sub_10001A630(&qword_100846698) + 64);
      *v14 = v29;
      v41 = v29;
      v14[1] = objc_msgSend(a4, "accountID");
      (*(void (**)(char *, _QWORD, uint64_t))(v56 + 104))(v40, enum case for REMRemindersListDataView.ShowCompleted.on(_:), v57);
      swift_storeEnumTagMultiPayload(v14, v51, 18);
      sub_10000D2C0();
      v43 = v42;
      sub_10001C744((uint64_t)v14, _s10PredicatesOMa);
      v44 = v58;
      v45 = v60;
      sub_1004934D8((uint64_t)v30, (uint64_t)v43);
      if (!v45)
      {
        v46 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v44, 0, 1, v46);
      }

    }
  }
  else
  {
    v28 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v58, 1, 1, v28);
  }
}

uint64_t sub_100508A14(void *a1, void *a2, void (*a3)(char *, char *, uint64_t), uint64_t a4, _QWORD *a5)
{
  uint64_t Subtasks;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  uint64_t v36;
  void (**v37)(char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t);
  char *v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  void (**v55)(char *, uint64_t);
  int v56;
  double v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t);
  id v60;
  void *v61;
  void *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __n128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (**v78)(char *, char *);
  uint64_t v79;
  uint64_t v80;
  id v81;
  char *v82;
  void *v83;
  void *v84;
  unint64_t v85;
  id v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t result;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  __n128 v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  char *v111;
  void *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(char *, char *, uint64_t);
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  _QWORD v121[6];
  _QWORD *v122;

  v122 = a5;
  v116 = a3;
  v117 = (char *)a4;
  v112 = a2;
  v110 = a1;
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v105 = *(_QWORD *)(Subtasks - 8);
  v106 = Subtasks;
  __chkstk_darwin(Subtasks);
  v104 = (char *)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = _s10PredicatesOMa(0);
  __chkstk_darwin(v101);
  v102 = (char **)((char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for REMCustomSmartListFilterDescriptor.Operation(0);
  v108 = *(_QWORD *)(v8 - 8);
  v109 = v8;
  __chkstk_darwin(v8);
  v107 = (char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
  v118 = *(_QWORD *)(v10 - 8);
  v119 = v10;
  __chkstk_darwin(v10);
  v100 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v113 = (char *)&v99 - v13;
  v14 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v15 = *(char **)(v14 - 8);
  __chkstk_darwin(v14);
  v111 = (char *)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v120 = (char *)&v99 - v18;
  v19 = sub_10001A630(&qword_100839AA0);
  __chkstk_darwin(v19);
  v103 = (uint64_t)&v99 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v115 = (uint64_t)&v99 - v22;
  __chkstk_darwin(v23);
  v25 = (char *)&v99 - v24;
  v26 = sub_10001A630(&qword_10084C288);
  __chkstk_darwin(v26);
  v28 = (char *)&v99 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v31 = (char *)&v99 - v30;
  v33 = (char *)&v99 + *(int *)(v32 + 48) - v30;
  sub_100008868((uint64_t)v116, (uint64_t)&v99 - v30, &qword_100839AA0);
  v34 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v15 + 2);
  v34(v33, v117, v14);
  *(_QWORD *)&v31[*(int *)(v26 + 64)] = v122;
  v35 = &v28[*(int *)(v26 + 48)];
  v117 = v31;
  sub_100008868((uint64_t)v31, (uint64_t)v28, &qword_100839AA0);
  v36 = v118;
  v116 = v34;
  v34(v35, v33, v14);
  sub_1000A5CA8((uint64_t)v28, (uint64_t)v25, &qword_100839AA0);
  v37 = (void (**)(char *, uint64_t))v15;
  v38 = v120;
  v39 = v119;
  (*((void (**)(void))v15 + 4))();
  v40 = v115;
  sub_100008868((uint64_t)v25, v115, &qword_100839AA0);
  v41 = v36;
  v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
  if (v42(v40, 1, v39) != 1)
  {
    v45 = v41;
    v46 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 32);
    v47 = v113;
    v46(v113, v40, v39);
    v48 = swift_bridgeObjectRetain(v122);
    v49 = v45;
    v50 = v39;
    v51 = REMRemindersListDataView.CountByCompleted.incomplete.getter(v48);
    v44 = REMRemindersListDataView.CountByCompleted.completed.getter();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v47, v50);
    v37[1](v38, v14);
    sub_10000882C((uint64_t)v25, &qword_100839AA0);
    sub_10000882C((uint64_t)v117, &qword_10084C288);
    if (!__OFADD__(v51, v44))
    {
      LOBYTE(v44) = v51 + v44 > 0;
      return v44 & 1;
    }
    __break(1u);
    goto LABEL_34;
  }
  v113 = v15;
  v43 = v122;
  swift_bridgeObjectRetain(v122);
  sub_10000882C(v40, &qword_100839AA0);
  if (v43[2])
  {
    (*((void (**)(char *, uint64_t))v113 + 1))(v120, v14);
    sub_10000882C((uint64_t)v25, &qword_100839AA0);
    sub_10000882C((uint64_t)v117, &qword_10084C288);
    LOBYTE(v44) = 1;
    return v44 & 1;
  }
  v52 = v111;
  v53 = v120;
  v116(v111, v120, v14);
  v54 = v52;
  v55 = (void (**)(char *, uint64_t))v113;
  v56 = (*((uint64_t (**)(char *, uint64_t))v113 + 11))(v54, v14);
  v99 = v25;
  if (v56 == enum case for REMRemindersListDataView.ShowCompleted.after(_:))
  {
    v25 = (char *)v14;
    v55[1](v54, v14);
LABEL_10:
    v58 = v114;
LABEL_11:
    v59 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v42;
    v60 = objc_msgSend(v112, "customContext", v57, v99);
    if (v60)
    {
      v61 = v60;
      v62 = (void *)REMSmartListCustomContext.filter.getter();

      if (v62)
      {
        v64 = v107;
        REMCustomSmartListFilterDescriptor.operation.getter(v63);
        v65 = v64;
        v44 = v109;
        v66 = (*(uint64_t (**)(char *, uint64_t))(v108 + 88))(v65, v109);
        if (v66 == enum case for REMCustomSmartListFilterDescriptor.Operation.and(_:))
        {
          v67 = static Set<>.typesSupportedByCustomSmartList.getter();
          v68 = static Set<>.typesIndescribableByNSPredicate.getter();
          v69 = sub_10050A4EC(v68, v67, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_10050A678);
          swift_bridgeObjectRelease();
        }
        else
        {
          if (v66 != enum case for REMCustomSmartListFilterDescriptor.Operation.or(_:))
          {
LABEL_35:
            _diagnoseUnexpectedEnumCase<A>(type:)(v44, v44);
            __break(1u);
            goto LABEL_36;
          }
          v69 = static Set<>.typesSupportedByCustomSmartList.getter();
        }
        v121[3] = &type metadata for ReminderIDsWithMatchingHashtagsProvider;
        v121[4] = sub_1003F66EC();
        v121[0] = v110;
        v122 = v110;
        v72 = REMCustomSmartListFilterDescriptor.postFetchPredicates(for:reminderIDsWithMatchingHashtagsProvider:)(v69, v121);
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v121);
        swift_bridgeObjectRelease();
        v73 = *(_QWORD *)(v72 + 16);
        v74 = swift_bridgeObjectRelease();
        if (!v73)
        {
          v79 = sub_10001A630(&qword_100846698);
          v80 = (uint64_t)v102;
          v44 = (uint64_t)v102 + *(int *)(v79 + 64);
          *v102 = v62;
          v81 = v62;
          *(_QWORD *)(v80 + 8) = objc_msgSend(v112, "accountID");
          v82 = v113;
          (*((void (**)(uint64_t, _QWORD, char *))v113 + 13))(v44, enum case for REMRemindersListDataView.ShowCompleted.on(_:), v25);
          swift_storeEnumTagMultiPayload(v80, v101, 18);
          sub_10000D2C0();
          v84 = v83;
          sub_10001C744(v80, _s10PredicatesOMa);
          v85 = sub_1000EDE5C();
          v86 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
          v87 = objc_msgSend((id)swift_getObjCClassFromMetadata(v85), "entity");
          objc_msgSend(v86, "setEntity:", v87);

          objc_msgSend(v86, "setAffectedStores:", 0);
          objc_msgSend(v86, "setPredicate:", v84);
          objc_msgSend(v86, "setFetchLimit:", 1);
          objc_msgSend(v86, "setAffectedStores:", 0);
          v88 = NSManagedObjectContext.count<A>(for:)(v86, v85);
          v78 = (void (**)(char *, char *))(v82 + 8);
          if (!v58)
          {
            v44 = v88;

            LOBYTE(v44) = v44 > 0;
            (*v78)(v120, v25);
            sub_10000882C((uint64_t)v99, &qword_100839AA0);
            sub_10000882C((uint64_t)v117, &qword_10084C288);
            return v44 & 1;
          }

          goto LABEL_26;
        }
        v76 = v105;
        v75 = v106;
        v77 = (uint64_t)v104;
        (*(void (**)(char *, _QWORD, uint64_t, __n128))(v105 + 104))(v104, enum case for REMRemindersListDataView.FetchSubtasks.off(_:), v106, v74);
        v44 = v103;
        sub_1005085CC(v122, 1, v77, v112, v103);
        if (v58)
        {

          (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v77, v75);
          v78 = (void (**)(char *, char *))(v113 + 8);
LABEL_26:
          v89 = (uint64_t)v117;
          (*v78)(v120, v25);
          sub_10000882C((uint64_t)v99, &qword_100839AA0);
          sub_10000882C(v89, &qword_10084C288);
          return v44 & 1;
        }
        (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v77, v75);
        v91 = v119;
        v92 = v59(v44, 1, v119);
        v93 = (uint64_t)v117;
        v94 = v44;
        if (v92 == 1)
        {

          (*((void (**)(char *, char *))v113 + 1))(v120, v25);
          sub_10000882C((uint64_t)v99, &qword_100839AA0);
          sub_10000882C(v93, &qword_10084C288);
          v71 = v44;
          v70 = &qword_100839AA0;
          goto LABEL_18;
        }
        v44 = v118;
        v95 = v100;
        (*(void (**)(char *, uint64_t, uint64_t))(v118 + 32))(v100, v94, v91);
        v97 = REMRemindersListDataView.CountByCompleted.incomplete.getter(v96);
        v98 = REMRemindersListDataView.CountByCompleted.completed.getter();

        (*(void (**)(char *, uint64_t))(v44 + 8))(v95, v91);
        (*((void (**)(char *, char *))v113 + 1))(v120, v25);
        sub_10000882C((uint64_t)v99, &qword_100839AA0);
        sub_10000882C(v93, &qword_10084C288);
        if (!__OFADD__(v97, v98))
        {
          LOBYTE(v44) = v97 + v98 > 0;
          return v44 & 1;
        }
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
    }
LABEL_17:
    v55[1](v53, (uint64_t)v25);
    sub_10000882C((uint64_t)v99, &qword_100839AA0);
    v70 = &qword_10084C288;
    v71 = (uint64_t)v117;
LABEL_18:
    sub_10000882C(v71, v70);
    LOBYTE(v44) = 0;
    return v44 & 1;
  }
  if (v56 == enum case for REMRemindersListDataView.ShowCompleted.allowlist(_:))
  {
    v25 = (char *)v14;
    v55[12](v54, v14);
    *(_QWORD *)&v57 = swift_bridgeObjectRelease().n128_u64[0];
    goto LABEL_10;
  }
  v25 = (char *)v14;
  v58 = v114;
  if (v56 == enum case for REMRemindersListDataView.ShowCompleted.off(_:))
    goto LABEL_11;
  if (v56 == enum case for REMRemindersListDataView.ShowCompleted.on(_:))
    goto LABEL_17;
LABEL_36:
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v25, v25);
  __break(1u);
  return result;
}

uint64_t sub_100509454@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)&v12 = __chkstk_darwin(v10).n128_u64[0];
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a4 & 1) != 0)
  {
    v15 = objc_msgSend(a1, "uuid", v12);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v15);

    v17 = UUID.uuidString.getter(v16);
    v19 = v18;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    v20 = sub_10049D5F4((void *)2, v17, v19, a2, a3);
    if (!v20)
      v20 = objc_msgSend((id)objc_opt_self(REMManualOrdering), "newObjectID");
    v21 = v20;
    v22 = REMObjectID.codable.getter(v20);
    REMManualOrdering.ManualOrderingID.init(objectID:listType:listID:)(v22, 2, v17, v19);

    v23 = type metadata accessor for REMManualOrdering.ManualOrderingID(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a5, 0, 1, v23);
  }
  else
  {
    v25 = type metadata accessor for REMManualOrdering.ManualOrderingID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a5, 1, 1, v25);
  }
}

void sub_1005095D0(void *a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  _QWORD *v66;
  void (*v67)(uint64_t, void (*)(char *, uint64_t, uint64_t));
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char v75;
  char *v76;
  uint64_t (*v77)(char *, uint64_t);
  uint64_t v78;
  void (*v79)(char *, char *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  id v87;
  void *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  int v92;
  __n128 v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  void *v97;
  void (*v98)(uint64_t *, uint64_t);
  uint64_t v99;
  uint64_t v100;
  void *v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  void *v107;
  char v108;
  char v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  id v114;
  char ManualOrdering;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(char *, uint64_t, uint64_t);
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  NSObject *v124;
  os_log_type_t v125;
  _BOOL4 v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  void (*v137)(char *, uint64_t);
  __n128 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __n128 v143;
  char *v144;
  void (*v145)(char *, uint64_t, __n128);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __n128 v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  char *v154;
  void *v155;
  _QWORD *v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  id v179;
  uint64_t v180;
  void (*v181)(char *, char *, uint64_t);
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t (*v190)(uint64_t, uint64_t);
  void *v191;
  void (*Subtasks)(char *, uint64_t, uint64_t);
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;

  v180 = a2;
  v167 = a4;
  v6 = sub_10001A630(&qword_100839A90);
  __chkstk_darwin(v6);
  v168 = (char *)&v154 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v8);
  v172 = (uint64_t)&v154 - v10;
  v166 = type metadata accessor for REMRemindersListDataView.FlatModel(0, v9);
  v163 = *(_QWORD *)(v166 - 8);
  __chkstk_darwin(v166);
  v165 = (char *)&v154 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v171 = (char *)&v154 - v13;
  v14 = sub_10001A630(&qword_100839A98);
  __chkstk_darwin(v14);
  v161 = (uint64_t)&v154 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch(0);
  v178 = *(_QWORD *)(v176 - 8);
  __chkstk_darwin(v176);
  v173 = (uint64_t *)((char *)&v154 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17);
  v177 = (char *)&v154 - v18;
  v19 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v174 = *(_QWORD *)(v19 - 8);
  v175 = v19;
  __chkstk_darwin(v19);
  v169 = (char *)&v154 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v170 = (char *)&v154 - v22;
  __chkstk_darwin(v23);
  v164 = (char *)&v154 - v24;
  __chkstk_darwin(v25);
  v184 = (uint64_t)&v154 - v26;
  v27 = sub_10001A630(&qword_100839AA0);
  __chkstk_darwin(v27);
  v162 = (uint64_t)&v154 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v182 = (uint64_t)&v154 - v30;
  __chkstk_darwin(v31);
  v181 = (void (*)(char *, char *, uint64_t))((char *)&v154 - v32);
  v33 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v185 = *(_QWORD *)(v33 - 8);
  v186 = v33;
  __chkstk_darwin(v33);
  v190 = (uint64_t (*)(uint64_t, uint64_t))((char *)&v154 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  Subtasks = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v189 = *((_QWORD *)Subtasks - 1);
  __chkstk_darwin(Subtasks);
  v183 = (char *)&v154 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v188 = (char *)&v154 - v37;
  v38 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v39 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v41 = (char *)&v154 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v44 = (char *)&v154 - v43;
  __chkstk_darwin(v45);
  v47 = (char *)&v154 - v46;
  v49 = __chkstk_darwin(v48);
  v187 = (char *)&v154 - v50;
  v51 = (void *)REMRemindersListDataView.CustomSmartListInvocation.Parameters.smartList.getter(v49);
  v191 = a1;
  v52 = a1;
  v53 = a3;
  v54 = v194;
  sub_10050B244(v52, a3, v51);
  v193 = v55;

  v194 = v54;
  if (v54)
    return;
  v157 = v47;
  v158 = v44;
  v57 = v185;
  v56 = v186;
  v159 = v39;
  v154 = v41;
  v160 = v38;
  v155 = v53;
  v58 = (uint64_t)v187;
  v59 = ((uint64_t (*)(void))REMRemindersListDataView.CustomSmartListInvocation.Parameters.showCompleted.getter)();
  v60 = (uint64_t)v188;
  v61 = REMRemindersListDataView.CustomSmartListInvocation.Parameters.fetchSubtasks.getter(v59);
  v62 = (uint64_t)v190;
  REMRemindersListDataView.CustomSmartListInvocation.Parameters.sortingStyle.getter(v61);
  v64 = v193;
  v63 = v194;
  v65 = v191;
  sub_100507F38(v193, v191, v58, v60, v62);
  if (v63)
  {
    v194 = v63;

    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v62, v56);
    (*(void (**)(uint64_t, void (*)(char *, uint64_t, uint64_t)))(v189 + 8))(v60, Subtasks);
    (*(void (**)(uint64_t, uint64_t))(v159 + 8))(v58, v160);
    return;
  }
  v156 = v66;
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v62, v56);
  v67 = *(void (**)(uint64_t, void (*)(char *, uint64_t, uint64_t)))(v189 + 8);
  v67(v60, Subtasks);
  v68 = v159;
  v69 = v58;
  v70 = v160;
  v190 = *(uint64_t (**)(uint64_t, uint64_t))(v159 + 8);
  v71 = v190(v69, v160);
  v72 = REMRemindersListDataView.CustomSmartListInvocation.Parameters.countCompleted.getter(v71);
  if ((v72 & 1) == 0)
    goto LABEL_7;
  v73 = v157;
  ((void (*)(void))REMRemindersListDataView.CustomSmartListInvocation.Parameters.showCompleted.getter)();
  v74 = v158;
  (*(void (**)(char *, _QWORD, uint64_t))(v68 + 104))(v158, enum case for REMRemindersListDataView.ShowCompleted.on(_:), v70);
  v75 = static REMRemindersListDataView.ShowCompleted.== infix(_:_:)(v73, v74);
  v76 = v74;
  v77 = (uint64_t (*)(char *, uint64_t))v190;
  v190((uint64_t)v76, v70);
  v72 = v77(v73, v70);
  if ((v75 & 1) != 0)
  {
    v78 = (uint64_t)v65;
    swift_bridgeObjectRetain(v156);
    v79 = v181;
    REMRemindersListDataView.CountByCompleted.init(reminders:)(v80);
    v81 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
    (*(void (**)(void (*)(char *, char *, uint64_t), _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v79, 0, 1, v81);
  }
  else
  {
LABEL_7:
    v82 = REMRemindersListDataView.CustomSmartListInvocation.Parameters.countCompleted.getter(v72);
    v83 = v82;
    v84 = (uint64_t)v183;
    REMRemindersListDataView.CustomSmartListInvocation.Parameters.fetchSubtasks.getter(v82);
    v85 = v83 & 1;
    v86 = v182;
    sub_1005085CC(v65, v85, v84, v193, v182);
    v78 = (uint64_t)v65;
    v67(v84, Subtasks);
    v79 = v181;
    sub_1000A5CA8(v86, (uint64_t)v181, &qword_100839AA0);
  }
  v87 = objc_msgSend(v179, "fetchResultTokenToDiffAgainst");
  sub_100493C24(v87, v78, v184);
  v88 = (void *)v78;

  REMRemindersListDataView.CustomSmartListInvocation.Parameters.remindersPrefetch.getter();
  v89 = v178;
  v90 = v173;
  v91 = v176;
  (*(void (**)(void))(v178 + 16))();
  v92 = (*(uint64_t (**)(uint64_t *, uint64_t))(v89 + 88))(v90, v91);
  v94 = v156;
  if (v92 == enum case for REMRemindersListDataView.RemindersPrefetch.initial(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v89 + 96))(v90, v91);
    v95 = *v90;
    swift_bridgeObjectRetain(v94);
    v96 = sub_10049BB18(v95, (uint64_t)v94, (uint64_t)v88, v155, 0);
LABEL_12:
    v102 = v96;
    v103 = _swiftEmptyArrayStorage;
    goto LABEL_13;
  }
  v97 = v155;
  if (v92 == enum case for REMRemindersListDataView.RemindersPrefetch.updatedInserted(_:))
  {
    v98 = *(void (**)(uint64_t *, uint64_t))(v89 + 96);
    v99 = v176;
    v98(v90, v176);
    v100 = *v90;
    swift_bridgeObjectRetain(v94);
    v101 = v97;
    v91 = v99;
    v96 = sub_10049C4C8(v100, v184, (uint64_t)v88, v101, 0);
    goto LABEL_12;
  }
  if (v92 != enum case for REMRemindersListDataView.RemindersPrefetch.initialAndDateRange(_:))
  {
    if (v92 != enum case for REMRemindersListDataView.RemindersPrefetch.none(_:))
    {
      _diagnoseUnexpectedEnumCase<A>(type:)(v176, v176);
      __break(1u);
      return;
    }
    v103 = _swiftEmptyArrayStorage;
    v102 = _swiftEmptyArrayStorage;
    v91 = v176;
    goto LABEL_14;
  }
  (*(void (**)(uint64_t *, uint64_t))(v89 + 96))(v90, v176);
  v133 = *v90;
  v134 = sub_10001A630(&qword_100839AA8);
  v135 = v161;
  sub_1000A5CA8((uint64_t)v90 + *(int *)(v134 + 48), v161, &qword_100839A98);
  swift_bridgeObjectRetain(v156);
  v102 = sub_10049BB18(v133, (uint64_t)v156, (uint64_t)v88, v97, 0);
  v136 = v97;
  v91 = v176;
  v103 = sub_10049CB18(v135, (uint64_t)v156, (uint64_t)v88, v136, 0);
  sub_10000882C(v135, &qword_100839A98);
LABEL_13:
  v93 = swift_bridgeObjectRelease();
LABEL_14:
  v104 = (*(uint64_t (**)(char *, uint64_t, __n128))(v178 + 8))(v177, v91, v93);
  v105 = (uint64_t)v154;
  REMRemindersListDataView.CustomSmartListInvocation.Parameters.showCompleted.getter(v104);
  v106 = v88;
  v107 = v193;
  v108 = sub_100508A14(v88, v193, v79, v105, v156);
  v194 = 0;
  v109 = v108;
  v190(v105, v160);
  v110 = v102;
  v111 = v162;
  sub_100008868((uint64_t)v79, v162, &qword_100839AA0);
  swift_bridgeObjectRetain(v156);
  REMRemindersListDataView.FlatModel.init(reminders:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)(v112, v111, v109 & 1, v110, v103);
  v113 = objc_msgSend(v107, "objectID");
  v114 = objc_msgSend(v107, "accountID");
  ManualOrdering = REMRemindersListDataView.CustomSmartListInvocation.Parameters.shouldFetchManualOrderingID.getter();
  sub_100509454(v113, v114, v106, ManualOrdering & 1, v172);

  if (qword_1008377F0 != -1)
    swift_once(&qword_1008377F0, sub_10050A3C4);
  v116 = type metadata accessor for Logger(0);
  sub_10001AAA8(v116, (uint64_t)qword_10084DE80);
  v118 = v174;
  v117 = v175;
  v119 = *(void (**)(char *, uint64_t, uint64_t))(v174 + 16);
  v120 = v164;
  v121 = v184;
  v119(v164, v184, v175);
  v122 = v170;
  Subtasks = v119;
  v119(v170, v121, v117);
  swift_bridgeObjectRetain(v156);
  v124 = Logger.logObject.getter(v123);
  v125 = static os_log_type_t.default.getter(v124);
  v126 = os_log_type_enabled(v124, v125);
  v127 = v169;
  if (v126)
  {
    v128 = swift_slowAlloc(32, -1);
    *(_DWORD *)v128 = 134218496;
    v129 = v156[2];
    swift_bridgeObjectRelease();
    v195 = v129;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v195, &v196);
    swift_bridgeObjectRelease();
    *(_WORD *)(v128 + 12) = 2048;
    v131 = REMRemindersListDataView.Diff.updatedReminderObjectIDs.getter(v130);
    if ((v131 & 0xC000000000000001) != 0)
    {
      if (v131 >= 0)
        v131 &= 0xFFFFFFFFFFFFFF8uLL;
      v132 = __CocoaSet.count.getter(v131);
    }
    else
    {
      v132 = *(_QWORD *)(v131 + 16);
    }
    v143 = swift_bridgeObjectRelease();
    v144 = v120;
    v145 = *(void (**)(char *, uint64_t, __n128))(v118 + 8);
    v145(v144, v175, v143);
    v195 = v132;
    v146 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v195, &v196);
    *(_WORD *)(v128 + 22) = 2048;
    v147 = REMRemindersListDataView.Diff.insertedReminderObjectIDs.getter(v146);
    v127 = v169;
    if ((v147 & 0xC000000000000001) != 0)
    {
      if (v147 >= 0)
        v147 &= 0xFFFFFFFFFFFFFF8uLL;
      v148 = __CocoaSet.count.getter(v147);
    }
    else
    {
      v148 = *(_QWORD *)(v147 + 16);
    }
    v149 = swift_bridgeObjectRelease();
    v141 = v175;
    v145(v170, v175, v149);
    v195 = v148;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v195, &v196);
    _os_log_impl((void *)&_mh_execute_header, v124, v125, "reminders %ld updated %ld inserted %ld", (uint8_t *)v128, 0x20u);
    swift_slowDealloc(v128, -1, -1);

    v139 = (uint64_t)v168;
    v142 = v172;
    v140 = v166;
    v191 = v145;
  }
  else
  {
    v137 = *(void (**)(char *, uint64_t))(v118 + 8);
    v137(v122, v117);
    v191 = v137;
    v137(v120, v117);

    v138 = swift_bridgeObjectRelease_n(v156, 2);
    v139 = (uint64_t)v168;
    v140 = v166;
    v141 = v117;
    v142 = v172;
  }
  v150 = v163;
  v151 = v165;
  v152 = v171;
  (*(void (**)(char *, char *, uint64_t, __n128))(v163 + 16))(v165, v171, v140, v138);
  v153 = v184;
  Subtasks(v127, v184, v141);
  sub_100008868(v142, v139, &qword_100839A90);
  REMRemindersListDataView.CustomSmartListInvocation.Result.init(model:diff:smartList:manualOrderingID:)(v151, v127, v193, v139);
  sub_10000882C(v142, &qword_100839A90);
  (*(void (**)(char *, uint64_t))(v150 + 8))(v152, v140);
  ((void (*)(uint64_t, uint64_t))v191)(v153, v141);
  sub_10000882C((uint64_t)v181, &qword_100839AA0);
}

uint64_t sub_10050A3C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084DE80);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084DE80);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10050A454(uint64_t a1, uint64_t a2)
{
  return sub_10050A4EC(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_10050A678);
}

uint64_t sub_10050A4A0(uint64_t a1, uint64_t a2)
{
  return sub_10050A4EC(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_10050AD30);
}

uint64_t sub_10050A4EC(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  v5 = isStackAllocationSafe;
  v6 = *(_BYTE *)(a2 + 32);
  v7 = v6 & 0x3F;
  v8 = (1 << v6) + 63;
  v9 = v8 >> 6;
  v10 = 8 * (v8 >> 6);
  if (v7 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v8 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    v11 = a3((char *)&v14 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v9, a2, v5);
    swift_release(a2);
  }
  else
  {
    v12 = (void *)swift_slowAlloc(v10, -1);
    bzero(v12, v10);
    v11 = a3((char *)v12, v9, a2, v5);
    swift_release(a2);
    swift_slowDealloc(v12, -1, -1);
  }
  return v11;
}

void sub_10050A678(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t PredicateType;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(unint64_t, unint64_t, uint64_t, __n128);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  void (*v45)(char *, uint64_t);
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t i;
  int64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, unint64_t, uint64_t, __n128);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v72 = a2;
  v75 = a1;
  PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType(0);
  v7 = *(_QWORD *)(PredicateType - 8);
  __chkstk_darwin(PredicateType);
  v9 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v72 - v11;
  __chkstk_darwin(v13);
  v15 = (char *)&v72 - v14;
  v18 = __chkstk_darwin(v16);
  v19 = *(_QWORD *)(a3 + 16);
  v20 = *(_QWORD *)(a4 + 16);
  v81 = a4;
  v82 = a3;
  v83 = v7;
  if (v20 >= v19)
  {
    v77 = 0;
    v46 = 0;
    v47 = *(_QWORD *)(a3 + 56);
    v73 = a3 + 56;
    v48 = 1 << *(_BYTE *)(a3 + 32);
    if (v48 < 64)
      v49 = ~(-1 << v48);
    else
      v49 = -1;
    v50 = v49 & v47;
    v74 = (unint64_t)(v48 + 63) >> 6;
    v80 = a4 + 56;
    if (v50)
      goto LABEL_38;
LABEL_39:
    v52 = v46 + 1;
    if (__OFADD__(v46, 1))
    {
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    if (v52 < v74)
    {
      v53 = *(_QWORD *)(v73 + 8 * v52);
      v54 = v46 + 1;
      if (v53)
        goto LABEL_52;
      v54 = v46 + 2;
      if (v46 + 2 < v74)
      {
        v53 = *(_QWORD *)(v73 + 8 * v54);
        if (v53)
          goto LABEL_52;
        v54 = v46 + 3;
        if (v46 + 3 < v74)
        {
          v53 = *(_QWORD *)(v73 + 8 * v54);
          if (v53)
            goto LABEL_52;
          v55 = v46 + 4;
          if (v46 + 4 < v74)
          {
            v53 = *(_QWORD *)(v73 + 8 * v55);
            if (!v53)
            {
              while (1)
              {
                v54 = v55 + 1;
                if (__OFADD__(v55, 1))
                  goto LABEL_67;
                if (v54 >= v74)
                  goto LABEL_61;
                v53 = *(_QWORD *)(v73 + 8 * v54);
                ++v55;
                if (v53)
                  goto LABEL_52;
              }
            }
            v54 = v46 + 4;
LABEL_52:
            v78 = (v53 - 1) & v53;
            v79 = v54;
            for (i = __clz(__rbit64(v53)) + (v54 << 6); ; i = __clz(__rbit64(v50)) | (v46 << 6))
            {
              v56 = *(_QWORD *)(a3 + 48);
              v57 = *(_QWORD *)(v7 + 72);
              v76 = i;
              v58 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16);
              v58(v9, v56 + v57 * i, PredicateType, v18);
              v59 = *(_QWORD *)(a4 + 40);
              v60 = sub_10009FC50(&qword_100840EB0, (uint64_t (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType, (uint64_t)&protocol conformance descriptor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
              v61 = v7;
              v62 = v9;
              v63 = dispatch thunk of Hashable._rawHashValue(seed:)(v59, PredicateType, v60);
              v64 = -1 << *(_BYTE *)(a4 + 32);
              v65 = v63 & ~v64;
              if (((*(_QWORD *)(v80 + ((v65 >> 3) & 0xFFFFFFFFFFFFF8)) >> v65) & 1) != 0)
              {
                v66 = ~v64;
                while (1)
                {
                  ((void (*)(char *, unint64_t, uint64_t))v58)(v12, *(_QWORD *)(v81 + 48) + v65 * v57, PredicateType);
                  v67 = sub_10009FC50((unint64_t *)&qword_100844470, (uint64_t (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType, (uint64_t)&protocol conformance descriptor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
                  v68 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v62, PredicateType, v67);
                  v69 = *(void (**)(char *, uint64_t))(v83 + 8);
                  v69(v12, PredicateType);
                  if ((v68 & 1) != 0)
                    break;
                  v65 = (v65 + 1) & v66;
                  if (((*(_QWORD *)(v80 + ((v65 >> 3) & 0xFFFFFFFFFFFFF8)) >> v65) & 1) == 0)
                    goto LABEL_59;
                }
                v9 = v62;
                v69(v62, PredicateType);
                *(unint64_t *)((char *)v75 + ((v76 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v76;
                v50 = v78;
                v26 = __OFADD__(v77++, 1);
                a4 = v81;
                a3 = v82;
                v7 = v83;
                v46 = v79;
                if (v26)
                  goto LABEL_65;
                if (!v78)
                  goto LABEL_39;
              }
              else
              {
                v69 = *(void (**)(char *, uint64_t))(v61 + 8);
LABEL_59:
                v9 = v62;
                v69(v62, PredicateType);
                a4 = v81;
                a3 = v82;
                v7 = v83;
                v50 = v78;
                v46 = v79;
                if (!v78)
                  goto LABEL_39;
              }
LABEL_38:
              v78 = (v50 - 1) & v50;
              v79 = v46;
            }
          }
        }
      }
    }
LABEL_61:
    v70 = v72;
    v71 = v77;
    swift_retain();
    sub_1002185A4(v75, v70, v71, a3);
    return;
  }
  v76 = (unint64_t)&v72 - v17;
  v77 = 0;
  v21 = 0;
  v22 = *(_QWORD *)(a4 + 56);
  v73 = a4 + 56;
  v23 = 1 << *(_BYTE *)(a4 + 32);
  if (v23 < 64)
    v24 = ~(-1 << v23);
  else
    v24 = -1;
  v25 = v24 & v22;
  v74 = (unint64_t)(v23 + 63) >> 6;
  v80 = a3 + 56;
  do
  {
    v27 = v76;
    if (v25)
    {
LABEL_8:
      v78 = (v25 - 1) & v25;
      v79 = v21;
      v28 = __clz(__rbit64(v25)) | (v21 << 6);
      goto LABEL_23;
    }
    while (1)
    {
      v29 = v21 + 1;
      if (__OFADD__(v21, 1))
      {
        __break(1u);
        goto LABEL_63;
      }
      if (v29 >= v74)
        goto LABEL_61;
      v30 = *(_QWORD *)(v73 + 8 * v29);
      v31 = v21 + 1;
      if (!v30)
      {
        v31 = v21 + 2;
        if (v21 + 2 >= v74)
          goto LABEL_61;
        v30 = *(_QWORD *)(v73 + 8 * v31);
        if (!v30)
        {
          v31 = v21 + 3;
          if (v21 + 3 >= v74)
            goto LABEL_61;
          v30 = *(_QWORD *)(v73 + 8 * v31);
          if (!v30)
          {
            v32 = v21 + 4;
            if (v21 + 4 >= v74)
              goto LABEL_61;
            v30 = *(_QWORD *)(v73 + 8 * v32);
            if (!v30)
            {
              while (1)
              {
                v31 = v32 + 1;
                if (__OFADD__(v32, 1))
                  goto LABEL_66;
                if (v31 >= v74)
                  goto LABEL_61;
                v30 = *(_QWORD *)(v73 + 8 * v31);
                ++v32;
                if (v30)
                  goto LABEL_22;
              }
            }
            v31 = v21 + 4;
          }
        }
      }
LABEL_22:
      v78 = (v30 - 1) & v30;
      v79 = v31;
      v28 = __clz(__rbit64(v30)) + (v31 << 6);
LABEL_23:
      v33 = *(_QWORD *)(v7 + 72);
      v34 = *(void (**)(unint64_t, unint64_t, uint64_t, __n128))(v7 + 16);
      v34(v27, *(_QWORD *)(a4 + 48) + v33 * v28, PredicateType, v18);
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v15, v27, PredicateType);
      v35 = *(_QWORD *)(v82 + 40);
      v36 = sub_10009FC50(&qword_100840EB0, (uint64_t (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType, (uint64_t)&protocol conformance descriptor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
      v37 = v7;
      v38 = v15;
      v39 = dispatch thunk of Hashable._rawHashValue(seed:)(v35, PredicateType, v36);
      a3 = v82;
      v40 = -1 << *(_BYTE *)(v82 + 32);
      v41 = v39 & ~v40;
      if (((*(_QWORD *)(v80 + ((v41 >> 3) & 0xFFFFFFFFFFFFF8)) >> v41) & 1) != 0)
        break;
      v45 = *(void (**)(char *, uint64_t))(v37 + 8);
LABEL_29:
      v15 = v38;
      v45(v38, PredicateType);
      a4 = v81;
      v7 = v83;
      v27 = v76;
      v25 = v78;
      v21 = v79;
      if (v78)
        goto LABEL_8;
    }
    v42 = ~v40;
    while (1)
    {
      ((void (*)(char *, unint64_t, uint64_t))v34)(v12, *(_QWORD *)(a3 + 48) + v41 * v33, PredicateType);
      v43 = sub_10009FC50((unint64_t *)&qword_100844470, (uint64_t (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType, (uint64_t)&protocol conformance descriptor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
      v44 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v38, PredicateType, v43);
      v45 = *(void (**)(char *, uint64_t))(v83 + 8);
      v45(v12, PredicateType);
      if ((v44 & 1) != 0)
        break;
      v41 = (v41 + 1) & v42;
      a3 = v82;
      if (((*(_QWORD *)(v80 + ((v41 >> 3) & 0xFFFFFFFFFFFFF8)) >> v41) & 1) == 0)
        goto LABEL_29;
    }
    v15 = v38;
    v45(v38, PredicateType);
    *(unint64_t *)((char *)v75 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v41;
    v25 = v78;
    v26 = __OFADD__(v77++, 1);
    a4 = v81;
    a3 = v82;
    v7 = v83;
    v21 = v79;
  }
  while (!v26);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
}

void sub_10050AD30(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  Swift::Int v16;
  id v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  char v24;
  uint64_t v25;
  unint64_t i;
  unint64_t v27;
  id v28;
  char v29;
  BOOL v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  Swift::Int v43;
  id v44;
  Swift::Int v45;
  uint64_t v46;
  unint64_t v47;
  id v48;
  uint64_t v49;
  id v50;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  int64_t v59;
  unint64_t v60;

  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) < *(_QWORD *)(a3 + 16))
  {
    v6 = 0;
    v53 = a4 + 56;
    v7 = 1 << *(_BYTE *)(a4 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(a4 + 56);
    v54 = (unint64_t)(v7 + 63) >> 6;
    v56 = 0;
    v10 = a3 + 56;
    while (1)
    {
      while (1)
      {
        if (v9)
        {
          v57 = (v9 - 1) & v9;
          v59 = v6;
          v11 = __clz(__rbit64(v9)) | (v6 << 6);
        }
        else
        {
          v12 = v6 + 1;
          if (__OFADD__(v6, 1))
          {
            __break(1u);
            goto LABEL_65;
          }
          if (v12 >= v54)
            goto LABEL_63;
          v13 = *(_QWORD *)(v53 + 8 * v12);
          v14 = v6 + 1;
          if (!v13)
          {
            v14 = v6 + 2;
            if (v6 + 2 >= v54)
              goto LABEL_63;
            v13 = *(_QWORD *)(v53 + 8 * v14);
            if (!v13)
            {
              v14 = v6 + 3;
              if (v6 + 3 >= v54)
                goto LABEL_63;
              v13 = *(_QWORD *)(v53 + 8 * v14);
              if (!v13)
              {
                v15 = v6 + 4;
                if (v6 + 4 >= v54)
                  goto LABEL_63;
                v13 = *(_QWORD *)(v53 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    v14 = v15 + 1;
                    if (__OFADD__(v15, 1))
                      goto LABEL_67;
                    if (v14 >= v54)
                      goto LABEL_63;
                    v13 = *(_QWORD *)(v53 + 8 * v14);
                    ++v15;
                    if (v13)
                      goto LABEL_22;
                  }
                }
                v14 = v6 + 4;
              }
            }
          }
LABEL_22:
          v57 = (v13 - 1) & v13;
          v59 = v14;
          v11 = __clz(__rbit64(v13)) + (v14 << 6);
        }
        v16 = *(_QWORD *)(v5 + 40);
        v17 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v11);
        v18 = NSObject._rawHashValue(seed:)(v16);
        v19 = -1 << *(_BYTE *)(v5 + 32);
        v20 = v18 & ~v19;
        v21 = v20 >> 6;
        v22 = 1 << v20;
        if (((1 << v20) & *(_QWORD *)(v10 + 8 * (v20 >> 6))) != 0)
          break;
LABEL_6:

        v4 = a4;
        v9 = v57;
        v6 = v59;
      }
      type metadata accessor for REMObjectID_Codable(0);
      v23 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v20);
      v24 = static NSObject.== infix(_:_:)(v23);

      if ((v24 & 1) == 0)
      {
        v25 = ~v19;
        for (i = v20 + 1; ; i = v27 + 1)
        {
          v27 = i & v25;
          v5 = a3;
          if (((*(_QWORD *)(v10 + (((i & v25) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v25)) & 1) == 0)
            break;
          v28 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v27);
          v29 = static NSObject.== infix(_:_:)(v28);

          if ((v29 & 1) != 0)
          {

            v21 = v27 >> 6;
            v22 = 1 << v27;
            goto LABEL_30;
          }
        }
        goto LABEL_6;
      }

LABEL_30:
      v6 = v59;
      v5 = a3;
      a1[v21] |= v22;
      v9 = v57;
      v30 = __OFADD__(v56++, 1);
      v4 = a4;
      if (v30)
        goto LABEL_66;
    }
  }
  v31 = 0;
  v55 = a3 + 56;
  v56 = 0;
  v32 = 1 << *(_BYTE *)(a3 + 32);
  if (v32 < 64)
    v33 = ~(-1 << v32);
  else
    v33 = -1;
  v34 = v33 & *(_QWORD *)(a3 + 56);
  v58 = (unint64_t)(v32 + 63) >> 6;
  v35 = a4 + 56;
  while (1)
  {
    if (v34)
    {
      v36 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      v37 = v31;
      v38 = v36 | (v31 << 6);
      v5 = a3;
      goto LABEL_55;
    }
    v39 = v31 + 1;
    v5 = a3;
    if (__OFADD__(v31, 1))
    {
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    if (v39 >= v58)
      goto LABEL_63;
    v40 = *(_QWORD *)(v55 + 8 * v39);
    v41 = v31 + 1;
    if (!v40)
    {
      v41 = v31 + 2;
      if (v31 + 2 >= v58)
        goto LABEL_63;
      v40 = *(_QWORD *)(v55 + 8 * v41);
      if (!v40)
      {
        v41 = v31 + 3;
        if (v31 + 3 >= v58)
          goto LABEL_63;
        v40 = *(_QWORD *)(v55 + 8 * v41);
        if (!v40)
          break;
      }
    }
LABEL_54:
    v34 = (v40 - 1) & v40;
    v37 = v41;
    v38 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_55:
    v60 = v38;
    v43 = *(_QWORD *)(v4 + 40);
    v44 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v38);
    v45 = NSObject._rawHashValue(seed:)(v43);
    v46 = -1 << *(_BYTE *)(v4 + 32);
    v47 = v45 & ~v46;
    if (((*(_QWORD *)(v35 + ((v47 >> 3) & 0xFFFFFFFFFFFFF8)) >> v47) & 1) == 0)
      goto LABEL_38;
    type metadata accessor for REMObjectID_Codable(0);
    v48 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v47);
    v5 = static NSObject.== infix(_:_:)(v48);

    if ((v5 & 1) != 0)
    {
LABEL_60:

      *(unint64_t *)((char *)a1 + ((v60 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v60;
      v30 = __OFADD__(v56++, 1);
      v4 = a4;
      v31 = v37;
      if (v30)
      {
        __break(1u);
LABEL_63:
        swift_retain();
        sub_10021885C(a1, a2, v56, v5);
        return;
      }
    }
    else
    {
      v49 = ~v46;
      while (1)
      {
        v47 = (v47 + 1) & v49;
        if (((*(_QWORD *)(v35 + ((v47 >> 3) & 0xFFFFFFFFFFFFF8)) >> v47) & 1) == 0)
          break;
        v50 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v47);
        v5 = static NSObject.== infix(_:_:)(v50);

        if ((v5 & 1) != 0)
          goto LABEL_60;
      }
LABEL_38:

      v4 = a4;
      v31 = v37;
    }
  }
  v42 = v31 + 4;
  if (v31 + 4 >= v58)
    goto LABEL_63;
  v40 = *(_QWORD *)(v55 + 8 * v42);
  if (v40)
  {
    v41 = v31 + 4;
    goto LABEL_54;
  }
  while (1)
  {
    v41 = v42 + 1;
    if (__OFADD__(v42, 1))
      break;
    if (v41 >= v58)
      goto LABEL_63;
    v40 = *(_QWORD *)(v55 + 8 * v41);
    ++v42;
    if (v40)
      goto LABEL_54;
  }
LABEL_68:
  __break(1u);
}

void sub_10050B244(void *a1, void *a2, id a3)
{
  uint64_t v3;
  NSObject *v7;
  id v8;
  uint64_t v9;
  __n128 v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  unint64_t v20;

  v7 = REMSmartListTypeCustom;
  v8 = objc_msgSend(a3, "objectID");
  if (qword_100837960 != -1)
    swift_once(&qword_100837960, sub_1005B8A54);
  v9 = qword_100872290;
  swift_retain();
  v11 = sub_10058E6E0(v7, v8, a1, v9, v10);

  swift_release(v9);
  if (v3)
    return;
  v12 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v13 = swift_allocObject(v12, 40, 7);
  *(_OWORD *)(v13 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v13 + 32) = v11;
  v20 = v13;
  specialized Array._endMutation()(v13);
  v14 = v11;
  v15 = (uint64_t)sub_10058CE80(v20, a2);
  swift_bridgeObjectRelease();
  if ((unint64_t)v15 >> 62)
  {
    if (v15 < 0)
      v17 = v15;
    else
      v17 = v15 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v15);
    v18 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease();
    if (v18)
      goto LABEL_6;
LABEL_14:
    swift_bridgeObjectRelease();

    v19 = a3;
    return;
  }
  if (!*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_14;
LABEL_6:
  if ((v15 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0, v15);
    goto LABEL_9;
  }
  if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v16 = *(id *)(v15 + 32);
LABEL_9:
    swift_bridgeObjectRelease();

    return;
  }
  __break(1u);
}

uint64_t sub_10050B424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084DEC0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084DEC0);
  if (qword_100837608 != -1)
    swift_once(&qword_100837608, sub_1004A17C8);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_UNKNOWN **static REMCDSavedAttachment.recordTypes()()
{
  return &off_1007E13F0;
}

uint64_t static REMCDSavedAttachment.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  id v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t result;

  v7 = a1;
  swift_bridgeObjectRetain(a3);
  v8 = a4;
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "objectWithRecordID:accountID:context:", v7, v9, v8);

  if (v10)
  {
    result = swift_dynamicCastClass(v10, v4);
    if (result)
      return result;

  }
  return 0;
}

id static REMCDSavedAttachment.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v8;
  NSString v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t MetatypeMetadata;
  uint64_t v24;
  unint64_t v25;
  double v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = v3;
  v8 = objc_msgSend(a1, "recordID");
  v9 = objc_msgSend(v8, "recordName");

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "newObjectWithCKRecordName:context:account:", v9, a3, a2);

  if (v10)
  {
    v11 = objc_msgSend(a2, "ckIdentifier");
    if (v11)
    {
      v12 = v11;
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v15 = v14;

      objc_msgSend(v10, "setAccount:", a2);
      v16._countAndFlagsBits = v13;
      v16._object = v15;
      REMCDSavedAttachment.mergeData(from:accountID:)((CKRecord)a1, v16);
      objc_msgSend(v10, "setCkServerRecord:", a1, swift_bridgeObjectRelease().n128_f64[0]);
      objc_msgSend(v10, "setInCloud:", 1);
      objc_msgSend(v10, "updateParentReferenceIfNecessary");
    }
    else
    {
      if (qword_1008377F8 != -1)
        swift_once(&qword_1008377F8, sub_10050B424);
      v17 = type metadata accessor for Logger(0);
      sub_10001AAA8(v17, (uint64_t)qword_10084DEC0);
      v18 = a2;
      v19 = Logger.logObject.getter(v18);
      v20 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v19, v20))
      {
        v21 = swift_slowAlloc(22, -1);
        v22 = swift_slowAlloc(64, -1);
        v34 = v22;
        v35 = v4;
        *(_DWORD *)v21 = 136446466;
        MetatypeMetadata = swift_getMetatypeMetadata(v4);
        v24 = String.init<A>(describing:)(&v35, MetatypeMetadata);
        v35 = sub_10001A820(v24, v25, &v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
        *(_QWORD *)&v26 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v21 + 12) = 2082;
        v27 = objc_msgSend(v18, "remObjectID", v26, v34);
        if (v27)
        {
          v28 = v27;
          v29 = objc_msgSend(v27, "description");

          v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
          v32 = v31;

        }
        else
        {
          v32 = 0xE300000000000000;
          v30 = 7104878;
        }
        v35 = sub_10001A820(v30, v32, &v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v21, 0x16u);
        swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v22, -1, -1);
        swift_slowDealloc(v21, -1, -1);

      }
      else
      {

      }
      return 0;
    }
  }
  return v10;
}

Swift::Void __swiftcall REMCDSavedAttachment.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  void *v2;
  void *v3;
  objc_class *ObjectType;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  id v18;
  NSString v19;
  double v20;
  NSString v21;
  double v22;
  _QWORD v23[8];
  objc_super v24;

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType();
  v6 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v6);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v23[2] = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)v23 - v13;
  v15 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v15);
  v23[7] = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = String._bridgeToObjectiveC()();
  v24.receiver = v2;
  v24.super_class = ObjectType;
  objc_msgSendSuper2(&v24, "mergeDataFromRecord:accountID:", from.super.isa, v17);

  v18 = -[objc_class recordID](from.super.isa, "recordID");
  v19 = objc_msgSend(v18, "recordName");

  if (!v19)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v19 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v20 = swift_bridgeObjectRelease().n128_u64[0];
  }
  v23[3] = v8;
  v23[4] = v10;
  v23[1] = v14;
  v23[5] = v9;
  v21 = objc_msgSend(v3, "ckIdentifierFromRecordName:", v19, v20);

  if (!v21)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v21 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v22 = swift_bridgeObjectRelease().n128_u64[0];
  }
  objc_msgSend(v3, "setCkIdentifier:", v21, v22);

  v23[6] = 0x80000001006FC7B0;
  JUMPOUT(0x10050BC48);
}

Swift::String __swiftcall REMCDSavedAttachment.recordType()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = 0x7474416465766153;
  v1 = (void *)0xEF746E656D686361;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

CKRecord_optional __swiftcall REMCDSavedAttachment.newlyCreatedRecord()()
{
  void *v0;
  void *v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  id v16;
  Swift::Bool v17;
  __int128 v18;
  objc_class *v19;
  _QWORD v20[2];
  __int128 v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  char *v28;
  id v29;
  char *v30;
  char *v31;
  objc_super v32;
  CKRecord_optional result;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  v3 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v3);
  v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v31 = (char *)v20 - v7;
  v8 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v8);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)&v13 = __chkstk_darwin(v11).n128_u64[0];
  v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32.receiver = v1;
  v32.super_class = ObjectType;
  v16 = objc_msgSendSuper2(&v32, "newlyCreatedRecord", v13);
  if (v16)
  {
    v22 = v15;
    v24 = v12;
    v25 = v11;
    v28 = v10;
    *(_QWORD *)&v18 = 136446466;
    v21 = v18;
    v20[1] = (char *)&type metadata for Any + 8;
    v27 = 0x80000001006FC7B0;
    *(_QWORD *)&v18 = 136446210;
    v23 = v18;
    v29 = v16;
    v30 = v5;
    v26 = v1;
    JUMPOUT(0x10050C738);
  }
  v19 = 0;
  result.value.super.isa = v19;
  result.is_nil = v17;
  return result;
}

Swift::Void __swiftcall REMCDSavedAttachment.cleanUpAfterLocalObjectMerge()()
{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t ObjectType;
  uint64_t v11;

  if (qword_1008377F8 != -1)
    swift_once(&qword_1008377F8, sub_10050B424);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10084DEC0);
  v9 = v0;
  v2 = Logger.logObject.getter(v9);
  v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v11 = v5;
    *(_DWORD *)v4 = 136315138;
    ObjectType = swift_getObjectType();
    v6 = sub_10001A630(&qword_100847170);
    v7 = String.init<A>(describing:)(&ObjectType, v6);
    ObjectType = sub_10001A820(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v11);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);

  }
  else
  {

  }
}

Swift::Void __swiftcall REMCDSavedAttachment.fixBrokenReferences()()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  double v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  if (qword_1008377F8 != -1)
    swift_once(&qword_1008377F8, sub_10050B424);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10084DEC0);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  v5 = &selRef_isConcealed;
  if (!os_log_type_enabled(v3, v4))
  {

    goto LABEL_14;
  }
  v6 = swift_slowAlloc(22, -1);
  v7 = swift_slowAlloc(64, -1);
  v50 = v7;
  *(_DWORD *)v6 = 136446466;
  v8 = objc_msgSend(v2, "remObjectID");
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(v8, "description");

    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

  }
  else
  {
    v13 = 0xE300000000000000;
    v11 = 7104878;
  }
  v49 = sub_10001A820(v11, v13, &v50);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

  *(_QWORD *)&v14 = swift_bridgeObjectRelease().n128_u64[0];
  *(_WORD *)(v6 + 12) = 2082;
  v15 = objc_msgSend(v2, "reminder", v14);
  if (!v15)
    goto LABEL_12;
  v16 = v15;
  v17 = objc_msgSend(v15, "remObjectID");
  if (!v17)
  {

LABEL_12:
    v24 = 0xE300000000000000;
    v5 = &selRef_isConcealed;
    v25 = 7104878;
    goto LABEL_13;
  }
  v18 = v17;
  v19 = objc_msgSend(v17, "description");

  v20 = v4;
  v21 = v7;
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v24 = v23;

  v25 = v22;
  v7 = v21;
  v4 = v20;
  v5 = &selRef_isConcealed;
LABEL_13:
  v49 = sub_10001A820(v25, v24, &v50);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fixing broken references for saved attachment {savedAttachmentID: %{public}s, savedReminderID: %{public}s}", (uint8_t *)v6, 0x16u);
  swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v7, -1, -1);
  swift_slowDealloc(v6, -1, -1);

LABEL_14:
  v26 = objc_msgSend(v2, v5[453]);
  if (v26)
  {
    v27 = v26;
    if (objc_msgSend(v26, "markedForDeletion")
      && (objc_msgSend(v2, "markedForDeletion") & 1) == 0)
    {
      v28 = v2;
      v29 = v27;
      v30 = v28;
      v31 = v29;
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.error.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        v34 = swift_slowAlloc(22, -1);
        v48 = swift_slowAlloc(64, -1);
        v50 = v48;
        *(_DWORD *)v34 = 136446466;
        v35 = objc_msgSend(v30, "remObjectID");
        if (v35)
        {
          v36 = v35;
          v37 = objc_msgSend(v35, "description");

          v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
          v40 = v39;

        }
        else
        {
          v40 = 0xE300000000000000;
          v38 = 7104878;
        }
        v49 = sub_10001A820(v38, v40, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

        *(_QWORD *)&v41 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v34 + 12) = 2082;
        v42 = objc_msgSend(v31, "remObjectID", v41);
        if (v42)
        {
          v43 = v42;
          v44 = objc_msgSend(v42, "description");

          v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
          v47 = v46;

        }
        else
        {
          v47 = 0xE300000000000000;
          v45 = 7104878;
        }
        v49 = sub_10001A820(v45, v47, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Saved reminder is marked for deletion but saved attachment is not {savedAttachmentID: %{public}s, savedReminderID: %{public}s}", (uint8_t *)v34, 0x16u);
        swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v48, -1, -1);
        swift_slowDealloc(v34, -1, -1);

      }
      else
      {

      }
      objc_msgSend(v30, "markForDeletion");
    }
    objc_msgSend(v27, "forcePushToCloud");

  }
}

uint64_t _s7remindd20REMCDSavedAttachmentC26existingLocalObjectToMerge4withSo11REMCDObjectCSgSo11NSPredicateCSg_tF_0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t ObjectType;
  uint64_t v12;

  if (qword_1008377F8 != -1)
    swift_once(&qword_1008377F8, sub_10050B424);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10084DEC0);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType();
    v7 = sub_10001A630(&qword_100847170);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    ObjectType = sub_10001A820(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t _s7remindd20REMCDSavedAttachmentC5merge15withLocalObjectSbSo11REMCDObjectC_tF_0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t ObjectType;
  uint64_t v12;

  if (qword_1008377F8 != -1)
    swift_once(&qword_1008377F8, sub_10050B424);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10084DEC0);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType();
    v7 = sub_10001A630(&qword_100847170);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    ObjectType = sub_10001A820(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

void sub_10050DEE8(uint64_t a1, char a2)
{
  uint64_t v3;

  v3 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v3);
  __asm { BR              X10 }
}

uint64_t sub_10050DF6C()
{
  void *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  KeyPath = swift_getKeyPath(&unk_1006C0C58);
  v5 = objc_msgSend(v0, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v5);

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v2, 0, 1, v6);
  v7 = sub_1002E893C(KeyPath, v2);
  v8 = swift_release(KeyPath);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v8);
  v9 = *(_QWORD *)(v3 - 72);
  v11 = *(_QWORD *)(v9 + 16);
  v10 = *(_QWORD *)(v9 + 24);
  if (v11 >= v10 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1);
  v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v7);
  specialized Array._endMutation()(v12);
  sub_10050EF48(v0, v1);
  v13 = sub_1000153F4(0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
  v14 = *(_QWORD *)(v3 - 72);
  v16 = *(_QWORD *)(v14 + 16);
  v15 = *(_QWORD *)(v14 + 24);
  if (v16 >= v15 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1);
  v17 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v13);
  specialized Array._endMutation()(v17);
  return sub_10000D2BC(*(_QWORD *)(v3 - 72));
}

void sub_10050E4D4(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, "attachmentTypeRawValue");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_10050E538(uint64_t a1, void **a2)
{
  void *v2;
  NSString v3;
  id v4;

  v2 = *a2;
  if (*(_QWORD *)(a1 + 8))
    v3 = String._bridgeToObjectiveC()();
  else
    v3 = 0;
  v4 = v3;
  objc_msgSend(v2, "setAttachmentTypeRawValue:");

}

uint64_t sub_10050E594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t result;

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v1 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006A7330;
  sub_1001A54DC();
  KeyPath = swift_getKeyPath(&unk_1006C0CB8);
  v3 = NSSortDescriptor.init<A, B>(keyPath:ascending:)(KeyPath, 1);
  *(_QWORD *)(v1 + 32) = v3;
  result = specialized Array._endMutation()(v3);
  qword_100872240 = v1;
  return result;
}

void sub_10050E618()
{
  sub_1001C1B0C(0, 5, 0);
  __asm { BR              X10; loc_10050E6E4 }
}

uint64_t sub_10050EA48(void *a1, uint64_t a2, Class a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t KeyPath;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  Class isa;
  double v26;
  uint64_t v27;
  uint64_t v29;
  _QWORD *v30;

  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = _swiftEmptyArrayStorage;
  KeyPath = swift_getKeyPath(&unk_1006C0C58);
  v9 = a1;
  v10 = objc_msgSend(v9, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v10);

  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v7, 0, 1, v11);
  v12 = sub_1002E893C(KeyPath, (uint64_t)v7);
  v13 = swift_release(KeyPath);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
  v15 = v30[2];
  v14 = v30[3];
  if (v15 >= v14 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1);
  v16 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v12);
  specialized Array._endMutation()(v16);

  v17 = sub_1000153F4(0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v17);
  v19 = v30[2];
  v18 = v30[3];
  if (v19 >= v18 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1);
  v20 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v17);
  specialized Array._endMutation()(v20);
  v21 = (void *)sub_10000D2BC(v30);
  v22 = type metadata accessor for REMCDSavedAttachment();
  v23 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v24 = objc_msgSend((id)swift_getObjCClassFromMetadata(v22), "entity");
  objc_msgSend(v23, "setEntity:", v24);

  objc_msgSend(v23, "setAffectedStores:", 0);
  objc_msgSend(v23, "setPredicate:", v21);

  if (qword_100837800 != -1)
    swift_once(&qword_100837800, sub_10050E594);
  sub_1001A54DC();
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v23, "setSortDescriptors:", isa);

  if (a3)
  {
    sub_1001DFBD0((uint64_t)a3);
    a3 = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v26 = swift_bridgeObjectRelease().n128_u64[0];
  }
  objc_msgSend(v23, "setPropertiesToFetch:", a3, v26);

  v27 = NSManagedObjectContext.fetch<A>(_:)(v23, v22);
  return v27;
}

id sub_10050ED44@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "reminder");
  *a2 = result;
  return result;
}

id sub_10050ED7C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setReminder:", *a1);
}

uint64_t sub_10050ED90@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_identifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_10050EDBC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_100839C80, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(void))&UUID._bridgeToObjectiveC(), (SEL *)&selRef_setIdentifier_);
}

uint64_t sub_10050EDF0@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_lastModifiedDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_10050EE1C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_1008380D0, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t (*)(void))&Date._bridgeToObjectiveC(), (SEL *)&selRef_setLastModifiedDate_);
}

const char *sub_10050EE50()
{
  return "attachmentTypeRawValue";
}

uint64_t sub_10050EE64@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_identifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_10050EE90(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_100839C80, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(void))&UUID._bridgeToObjectiveC(), (SEL *)&selRef_setIdentifier_);
}

id sub_10050EEC4(id result, unsigned __int8 a2)
{
  switch(a2 >> 5)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      result = result;
      break;
    case 4:
      result = (id)swift_bridgeObjectRetain(result);
      break;
    default:
      return result;
  }
  return result;
}

id sub_10050EEF4@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "account");
  *a2 = result;
  return result;
}

id sub_10050EF2C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setAccount:", *a1);
}

double sub_10050EF48(id a1, unsigned __int8 a2)
{
  double result;

  switch(a2 >> 5)
  {
    case 0:
    case 1:
    case 2:
    case 3:

      break;
    case 4:
      *(_QWORD *)&result = swift_bridgeObjectRelease(a1).n128_u64[0];
      break;
    default:
      return result;
  }
  return result;
}

id sub_10050EF78@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "template");
  *a2 = result;
  return result;
}

id sub_10050EFB0(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setTemplate:", *a1);
}

uint64_t sub_10050EFCC(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_10084DF18, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListBatchDeleteInvocation.CountInvocation, (uint64_t)&protocol conformance descriptor for REMRemindersListBatchDeleteInvocation.CountInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10050F008()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084DEE0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084DEE0);
  if (qword_100837690 != -1)
    swift_once(&qword_100837690, sub_1004A19A4);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872190);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void *sub_10050F098(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t ***v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = _s10PredicatesOMa(0);
  __chkstk_darwin(v5);
  v7 = (uint64_t ***)((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_10051142C(v7, a1, a2);
  if (!v2)
  {
    v9 = (uint64_t)v8;
    if (qword_100837260 != -1)
      swift_once(&qword_100837260, sub_10033CFDC);
    a1 = (void *)sub_100340EC0((uint64_t)v7, (objc_class *)qword_100871E48, (uint64_t)a1, v9, 0, 0, 0, (uint64_t)&off_1007DB4E8, 0);
    sub_10001C744((uint64_t)v7, _s10PredicatesOMa);
    swift_arrayDestroy(&unk_1007DB508, 2, &type metadata for String);
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t sub_10050F1C8(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_10084DF40, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListBatchDeleteInvocation.DeleteInvocation, (uint64_t)&protocol conformance descriptor for REMRemindersListBatchDeleteInvocation.DeleteInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_10050F204(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  id v13;
  uint64_t v14;
  uint64_t i;
  id v16;
  void *v17;
  uint64_t v18;
  Swift::Int v19;
  unsigned __int8 v20;
  id v21;
  id v22;
  __n128 v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  _BYTE v29[32];

  sub_100512700(a1, a3);
  if (v4)
    return;
  v10 = v8;
  v26 = a4;
  v27 = v9;
  v11 = type metadata accessor for ReminderIDsMergeableOrderingHelper();
  inited = swift_initStackObject(v11, v29);
  *(_QWORD *)(inited + 16) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)(inited + 24) = _swiftEmptyArrayStorage;
  sub_100512CAC(a1, v10);
  v13 = objc_msgSend(objc_allocWithZone((Class)NSMutableDictionary), "init");
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v14 = _CocoaArrayWrapper.endIndex.getter(v18);
    if (v14)
      goto LABEL_4;
  }
  else
  {
    v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v14)
    {
LABEL_4:
      if (v14 < 1)
        __break(1u);
      for (i = 0; i != v14; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
          v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        else
          v16 = *(id *)(a1 + 8 * i + 32);
        v17 = v16;
        objc_msgSend(v16, "updateDeletedFlagAccordingToOrphanState:", v13, v26);

      }
    }
  }
  swift_bridgeObjectRelease();
  v19 = sub_1002EBC10(v10);
  sub_10050F478(v19);
  swift_bridgeObjectRelease();
  v28 = 0;
  v20 = objc_msgSend(a2, "save:", &v28, sub_10050F80C());
  v21 = v28;
  if ((v20 & 1) != 0)
  {
    v22 = v28;
    REMRemindersListBatchDeleteInvocation.DeleteInvocation.Result.init(deletedReminderIDs:accounts:)(v10, v27, v23);
  }
  else
  {
    v24 = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)(v21);

    swift_willThrow(v25);
  }

  swift_setDeallocating(inited);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void sub_10050F478(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  NSObject *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  Class isa;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int64_t v34;
  id v35;
  _BYTE v36[24];

  swift_beginAccess(v1 + 16, v36, 0, 0);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = v3 + 64;
  v5 = 1 << *(_BYTE *)(v3 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v3 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = a1 & 0xC000000000000001;
  v10 = a1 & 0xFFFFFFFFFFFFFF8;
  if (a1 < 0)
    v10 = a1;
  v33 = v10;
  v34 = v8;
  swift_bridgeObjectRetain(v3);
  v11 = 0;
  v31 = v3;
  v32 = a1 & 0xC000000000000001;
  v30 = v3 + 64;
  while (1)
  {
    if (v7)
    {
      v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_27;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v15 >= v34)
      goto LABEL_36;
    v16 = *(_QWORD *)(v4 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v34)
        goto LABEL_36;
      v16 = *(_QWORD *)(v4 + 8 * v11);
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v34)
          goto LABEL_36;
        v16 = *(_QWORD *)(v4 + 8 * v11);
        if (!v16)
        {
          v11 = v15 + 3;
          if (v15 + 3 >= v34)
            goto LABEL_36;
          v16 = *(_QWORD *)(v4 + 8 * v11);
          if (!v16)
            break;
        }
      }
    }
LABEL_26:
    v7 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_27:
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v14);
    if (v9)
    {
      swift_retain();
      if (!__CocoaSet.count.getter(v33))
        goto LABEL_8;
    }
    else
    {
      v19 = *(_QWORD *)(a1 + 16);
      swift_retain();
      if (!v19)
        goto LABEL_8;
    }
    v20 = sub_100512304();
    if (v20)
    {
      v21 = v20;
      v22 = objc_msgSend(v20, "count");
      sub_1002EC46C(a1);
      isa = Set._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v21, "minusSet:", isa, swift_bridgeObjectRelease().n128_f64[0]);

      if (qword_100837808 != -1)
        swift_once(&qword_100837808, sub_10050F008);
      v24 = type metadata accessor for Logger(0);
      sub_10001AAA8(v24, (uint64_t)qword_10084DEE0);
      v25 = v21;
      v12 = Logger.logObject.getter(v25);
      v26 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v12, v26))
      {
        v27 = a1;
        v28 = swift_slowAlloc(22, -1);
        *(_DWORD *)v28 = 134218240;
        v35 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36);
        *(_WORD *)(v28 + 12) = 2048;
        v35 = -[NSObject count](v25, "count");
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36);

        _os_log_impl((void *)&_mh_execute_header, v12, v26, "ReminderIDsMergeableOrderingHelper orderedSet count: %ld -> %ld", (uint8_t *)v28, 0x16u);
        v29 = v28;
        a1 = v27;
        v4 = v30;
        v3 = v31;
        swift_slowDealloc(v29, -1, -1);
      }
      else
      {

        v12 = v25;
      }
      v9 = v32;

      *(_BYTE *)(v18 + 16) = 1;
    }
LABEL_8:
    swift_release(v18);
  }
  v17 = v15 + 4;
  if (v17 >= v34)
  {
LABEL_36:
    swift_release(v3);
    return;
  }
  v16 = *(_QWORD *)(v4 + 8 * v17);
  if (v16)
  {
    v11 = v17;
    goto LABEL_26;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v34)
      goto LABEL_36;
    v16 = *(_QWORD *)(v4 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_26;
  }
LABEL_38:
  __break(1u);
}

double sub_10050F80C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  void *v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double result;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE v34[24];
  char v35[24];
  uint64_t v36;

  v1 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v1);
  v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v36 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v28 - v8;
  swift_beginAccess(v0 + 24, v35, 0, 0);
  v10 = *(_QWORD *)(v0 + 24);
  if ((unint64_t)v10 >> 62)
    goto LABEL_20;
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  while (v11)
  {
    v30 = (uint64_t *)(v0 + 16);
    v31 = v9;
    v32 = v11;
    v33 = v10 & 0xC000000000000001;
    v12 = 4;
    v29 = v10;
    v13 = v36;
    while (1)
    {
      v0 = v12 - 4;
      v14 = v33
          ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, v10)
          : (char *)*(id *)(v10 + 8 * v12);
      v9 = v14;
      v15 = v12 - 3;
      if (__OFADD__(v0, 1))
        break;
      v16 = objc_msgSend(v14, "identifier");
      if (!v16)
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56))(v3, 1, 1, v4);
LABEL_5:

        sub_10000882C((uint64_t)v3, (uint64_t *)&unk_100839C80);
        goto LABEL_6;
      }
      v17 = v16;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v16);

      v18 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
      v18(v3, v6, v4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v3, 0, 1, v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v3, 1, v4) == 1)
        goto LABEL_5;
      v19 = (uint64_t)v31;
      v18(v31, v3, v4);
      v20 = v30;
      swift_beginAccess(v30, v34, 32, 0);
      v21 = *v20;
      if (*(_QWORD *)(v21 + 16) && (v22 = sub_1002C65F8(v19), (v23 & 1) != 0))
      {
        v24 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v22);
        swift_endAccess(v34);
        swift_retain();
        v25 = v28;
        sub_10051394C(v9, v24);
        v28 = v25;
        if (v25)
        {

          swift_release(v24);
          (*(void (**)(char *, uint64_t))(v36 + 8))(v31, v4);
          goto LABEL_24;
        }
        (*(void (**)(char *, uint64_t))(v36 + 8))(v31, v4);
        swift_release(v24);

        v10 = v29;
      }
      else
      {
        swift_endAccess(v34);

        (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v19, v4);
        v10 = v29;
      }
LABEL_6:
      ++v12;
      if (v15 == v32)
        goto LABEL_24;
    }
    __break(1u);
LABEL_20:
    if (v10 < 0)
      v26 = v10;
    else
      v26 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v11 = _CocoaArrayWrapper.endIndex.getter(v26);
  }
LABEL_24:
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_10050FB38(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  _BYTE *v14;
  id v15;
  void *v16;
  void (*v17)(_BYTE *, _BYTE *, uint64_t);
  char v18;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __n128 v28;
  void (*v29)(_BYTE *, uint64_t, __n128);
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[24];

  v2 = v1;
  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v4);
  v6 = &v36[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v36[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  *(_QWORD *)&v12 = __chkstk_darwin(v11).n128_u64[0];
  v14 = &v36[-v13 - 8];
  v15 = objc_msgSend(a1, "identifier", v12);
  if (!v15)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    return sub_10000882C((uint64_t)v6, (uint64_t *)&unk_100839C80);
  }
  v16 = v15;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v15);

  v17 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32);
  v17(v6, v10, v7);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    return sub_10000882C((uint64_t)v6, (uint64_t *)&unk_100839C80);
  v17(v14, v6, v7);
  swift_beginAccess(v2 + 16, v36, 32, 0);
  if (*(_QWORD *)(*(_QWORD *)(v2 + 16) + 16) && (sub_1002C65F8((uint64_t)v14), (v18 & 1) != 0))
  {
    swift_endAccess(v36);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v14, v7);
  }
  else
  {
    swift_endAccess(v36);
    v20 = objc_msgSend(a1, "reminderIDsMergeableOrdering");
    if (v20)
    {
      v21 = v20;
      v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v24 = v23;

    }
    else
    {
      v22 = 0;
      v24 = 0xF000000000000000;
    }
    v25 = type metadata accessor for ReminderIDsMergeableOrdering();
    v26 = swift_allocObject(v25, 48, 7);
    *(_WORD *)(v26 + 16) = 0;
    *(_QWORD *)(v26 + 32) = v24;
    *(_QWORD *)(v26 + 40) = 1;
    *(_QWORD *)(v26 + 24) = v22;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v10, v14, v7);
    swift_beginAccess(v2 + 16, v36, 33, 0);
    swift_retain();
    swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v2 + 16));
    v35 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0x8000000000000000;
    sub_10028BD1C(v26, (uint64_t)v10, v27);
    *(_QWORD *)(v2 + 16) = v35;
    v28 = swift_bridgeObjectRelease();
    v29 = *(void (**)(_BYTE *, uint64_t, __n128))(v8 + 8);
    v29(v10, v7, v28);
    swift_endAccess(v36);
    swift_beginAccess(v2 + 24, v36, 33, 0);
    v30 = a1;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v30);
    v31 = *(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFFF8;
    v33 = *(_QWORD *)(v31 + 0x10);
    v32 = *(_QWORD *)(v31 + 24);
    if (v33 >= v32 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1);
    v34 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, v30);
    specialized Array._endMutation()(v34);
    swift_endAccess(v36);
    swift_release(v26);
    return ((uint64_t (*)(_BYTE *, uint64_t))v29)(v14, v7);
  }
}

uint64_t sub_10050FE74(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  _BYTE *v13;
  id v14;
  void *v15;
  void (*v16)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  _BYTE v23[24];

  v3 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v3);
  v5 = &v23[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v23[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  *(_QWORD *)&v11 = __chkstk_darwin(v10).n128_u64[0];
  v13 = &v23[-v12 - 8];
  v14 = objc_msgSend(a1, "identifier", v11);
  if (!v14)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
    goto LABEL_7;
  }
  v15 = v14;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v14);

  v16 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32);
  v16(v5, v9, v6);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
LABEL_7:
    sub_10000882C((uint64_t)v5, (uint64_t *)&unk_100839C80);
    return 0;
  }
  v16(v13, v5, v6);
  swift_beginAccess(v1 + 16, v23, 32, 0);
  v17 = *(_QWORD *)(v1 + 16);
  if (*(_QWORD *)(v17 + 16) && (v18 = sub_1002C65F8((uint64_t)v13), (v19 & 1) != 0))
  {
    v20 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18);
    swift_retain();
  }
  else
  {
    v20 = 0;
  }
  swift_endAccess(v23);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v13, v6);
  return v20;
}

void sub_100510050(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  char *v11;
  uint64_t i;
  id v13;
  void *v14;
  id v15;
  __n128 v16;
  NSIndexSet *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  id v24;

  v5 = type metadata accessor for IndexSet(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!((unint64_t)a1 >> 62))
  {
    v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v9)
      return;
LABEL_3:
    v10 = sub_100512304();
    if (!v10)
      return;
    v24 = v10;
    v11 = (char *)objc_msgSend(v10, "indexOfObject:", a2);
    if (v11 == (char *)NSNotFound.getter())
    {

      return;
    }
    v22 = v2;
    v23 = v11;
    IndexSet.init()();
    if (v9 < 1)
    {
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRetain(a1);
      for (i = 0; i != v9; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
          v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        else
          v13 = *(id *)(a1 + 8 * i + 32);
        v14 = v13;
        v15 = objc_msgSend(v24, "indexOfObject:", v13);
        if (v15 != (id)NSNotFound.getter())
          IndexSet.insert(_:)((Swift::Int)v15);

      }
      v16 = swift_bridgeObjectRelease();
      if ((IndexSet.isEmpty.getter(v16) & 1) != 0)
      {
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);

        return;
      }
      IndexSet._bridgeToObjectiveC()(v17);
      if (!__OFADD__(v23, 1))
      {
        v19 = v18;
        objc_msgSend(v24, "moveObjectsAtIndexes:toIndex:", v18, v23 + 1);

        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        *(_WORD *)(v22 + 16) = 257;
        return;
      }
    }
    __break(1u);
    return;
  }
  if (a1 < 0)
    v20 = a1;
  else
    v20 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v9 = _CocoaArrayWrapper.endIndex.getter(v20);
  swift_bridgeObjectRelease();
  if (v9)
    goto LABEL_3;
}

uint64_t sub_10051027C(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_10084DF68, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListBatchDeleteInvocation.OldestCompletionDateInvocation, (uint64_t)&protocol conformance descriptor for REMRemindersListBatchDeleteInvocation.OldestCompletionDateInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_1005102B8(void *a1@<X1>, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t ***v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t Predicate;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t KeyPath;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  NSString v73;
  Class isa;
  id v75;
  id v76;
  NSString v77;
  uint64_t v78;
  void *v79;
  void *v80;
  id v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  id v85;
  Class v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  Class v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  Class v112;
  double v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  id v121;
  void *v122;
  id v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (**v130)(char *, __n128);
  void (*v131)(char *, uint64_t, uint64_t);
  char *v132;
  char v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  __n128 v138;
  uint64_t v139;
  void (**v140)(char *, __n128);
  uint64_t v141;
  void (*v142)(char *, __n128);
  uint64_t v143;
  void (*v144)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v145)(uint64_t, uint64_t, uint64_t);
  void (*v146)(char *, uint64_t, uint64_t);
  __n128 v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  void (**v151)(char *, __n128);
  char *v152;
  char *v153;
  char *v154;
  char v155;
  void (*v156)(char *, uint64_t);
  Swift::String v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  id v164;
  uint64_t v165;
  char *v166;
  char *v167;
  void *v168;
  char *v169;
  uint64_t ***v170;
  uint64_t v171;
  char *v172;
  char *v173;
  char *v174;
  char *v175;
  _QWORD *v176;
  void (*v177)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v178;
  __int128 v179;
  uint64_t v180;
  void (**v181)(char *, __n128);
  unint64_t v182;
  uint64_t v183;
  __int128 v184;
  void *v185;
  _QWORD v186[2];
  uint64_t v187;

  v177 = a2;
  v171 = a3;
  v4 = type metadata accessor for Date(0);
  v5 = *(unsigned __int8 **)(v4 - 8);
  __chkstk_darwin(v4);
  v167 = (char *)&v161 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v175 = (char *)&v161 - v8;
  __chkstk_darwin(v9);
  v174 = (char *)&v161 - v10;
  __chkstk_darwin(v11);
  v173 = (char *)&v161 - v12;
  v13 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v13);
  v172 = (char *)&v161 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  *(_QWORD *)&v179 = (char *)&v161 - v16;
  __chkstk_darwin(v17);
  v178 = (uint64_t)&v161 - v18;
  __chkstk_darwin(v19);
  v169 = (char *)&v161 - v20;
  __chkstk_darwin(v21);
  v23 = (char *)&v161 - v22;
  __chkstk_darwin(v24);
  v26 = (char *)&v161 - v25;
  __chkstk_darwin(v27);
  v29 = (uint64_t *)((char *)&v161 - v28);
  __chkstk_darwin(v30);
  v32 = (char *)&v161 - v31;
  v33 = _s10PredicatesOMa(0);
  v34 = __chkstk_darwin(v33);
  v36 = (uint64_t ***)((char *)&v161 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  v181 = (void (**)(char *, __n128))v5;
  v37 = (void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))*((_QWORD *)v5 + 7);
  v37(v32, 1, 1, v4, v34);
  v38 = v182;
  v39 = sub_10051142C(v36, a1, (uint64_t)v32);
  if (v38)
  {
    sub_10000882C((uint64_t)v32, (uint64_t *)&unk_1008380D0);
    return;
  }
  v182 = (unint64_t)v26;
  v168 = a1;
  v177 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v37;
  v162 = v23;
  v170 = v36;
  v165 = 0;
  v166 = v39;
  sub_10000882C((uint64_t)v32, (uint64_t *)&unk_1008380D0);
  v40 = *((_QWORD *)v166 + 2);
  v180 = v4;
  v176 = v29;
  if (!v40)
  {
    swift_bridgeObjectRelease();
    v68 = sub_1000151B0(0, &qword_10083AEE8, NSExpression_ptr);
    KeyPath = swift_getKeyPath(&unk_1006C0F60);
    v70 = (void *)NSExpression.init<A, B>(forKeyPath:)(KeyPath);
    v71 = sub_10001A630((uint64_t *)&unk_100839E80);
    v72 = swift_allocObject(v71, 64, 7);
    v179 = xmmword_1006A3C00;
    *(_OWORD *)(v72 + 16) = xmmword_1006A3C00;
    *(_QWORD *)(v72 + 56) = v68;
    *(_QWORD *)(v72 + 32) = v70;
    v181 = v70;
    v73 = String._bridgeToObjectiveC()();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v75 = objc_msgSend((id)objc_opt_self(NSExpression), "expressionForFunction:arguments:", v73, isa);

    v76 = objc_msgSend(objc_allocWithZone((Class)NSExpressionDescription), "init");
    v77 = String._bridgeToObjectiveC()();
    objc_msgSend(v76, "setName:", v77);

    objc_msgSend(v76, "setExpression:", v75);
    objc_msgSend(v76, "setExpressionResultType:", 900);
    v78 = (uint64_t)v170;
    sub_10000D2C0();
    v80 = v79;
    v81 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    v82 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    v83 = objc_msgSend((id)swift_getObjCClassFromMetadata(v82), "entity");
    objc_msgSend(v81, "setEntity:", v83);

    objc_msgSend(v81, "setAffectedStores:", 0);
    objc_msgSend(v81, "setPredicate:", v80);
    objc_msgSend(v81, "setResultType:", 2);

    v84 = swift_allocObject(v71, 64, 7);
    *(_OWORD *)(v84 + 16) = v179;
    *(_QWORD *)(v84 + 56) = sub_1000151B0(0, (unint64_t *)&unk_10083AEF0, NSExpressionDescription_ptr);
    *(_QWORD *)(v84 + 32) = v76;
    v85 = v76;
    v86 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v81, "setPropertiesToFetch:", v86, swift_bridgeObjectRelease().n128_f64[0]);

    v87 = sub_1000151B0(0, &qword_10083E320, NSDictionary_ptr);
    v88 = v165;
    v89 = NSManagedObjectContext.fetch<A>(_:)(v81, v87);
    if (v88)
    {
      sub_10001C744(v78, _s10PredicatesOMa);

    }
    else
    {
      v103 = v89;
      v104 = v75;
      v185 = (void *)sub_10001A630(&qword_10084E0D0);
      *(_QWORD *)&v184 = v103;
      v105 = sub_10001A630(&qword_10084E0D8);
      throwingCast<A>(_:as:failureMessage:)(&v187, &v184, v105, 0, 0, v105);
      v106 = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v184);
      *(_QWORD *)&v184 = v187;
      __chkstk_darwin(v106);
      v159 = 0xD000000000000011;
      v160 = 0x8000000100706E60;
      v107 = sub_1000C4C0C(&qword_10084E0E0, &qword_10084E0D8);
      v108 = v176;
      Sequence.firstMap<A>(_:)(v176, sub_1005126A4, &v161 - 4, v105, v180, v107);
      swift_bridgeObjectRelease();
      v109 = v182;
      sub_1000CDA2C((uint64_t)v108, v182);
      REMRemindersListBatchDeleteInvocation.OldestCompletionDateInvocation.Result.init(oldestCompletionDate:)(v109);

      sub_10000882C((uint64_t)v108, (uint64_t *)&unk_1008380D0);
      sub_10001C744((uint64_t)v170, _s10PredicatesOMa);
    }
    return;
  }
  v41 = (uint64_t)v166;
  sub_10000D2C0();
  v43 = v42;
  v44 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v45 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v163 = v44;
  v46 = objc_msgSend((id)swift_getObjCClassFromMetadata(v44), "entity");
  objc_msgSend(v45, "setEntity:", v46);

  objc_msgSend(v45, "setAffectedStores:", 0);
  v164 = v45;
  objc_msgSend(v45, "setPredicate:", v43);

  *(_QWORD *)&v184 = v41;
  v47 = sub_10001A630(&qword_100846700);
  v48 = sub_1000C4C0C(&qword_100846708, &qword_100846700);
  Predicate = Sequence<>.postFetchPredicateTypes.getter(v47, v48);
  sub_1001A8790(Predicate);
  v187 = v50;
  v51 = swift_getKeyPath(&unk_1006C0F60);
  sub_1002DB2B8((uint64_t *)&v184, v51);
  swift_release(v184);
  v52 = v187;
  swift_bridgeObjectRetain(v187);
  v54 = (uint64_t)sub_1001E8AA8(v53);
  v161 = v52;
  swift_bridgeObjectRelease();
  if (v54 < 0 || (v54 & 0x4000000000000000) != 0)
    goto LABEL_39;
  v55 = *(_QWORD *)(v54 + 16);
  while (1)
  {
    v56 = v175;
    if (v55)
    {
      v182 = Predicate;
      v186[0] = _swiftEmptyArrayStorage;
      v57 = (uint64_t)v186;
      sub_1001C1C48(0, v55 & ~(v55 >> 63), 0);
      if ((v55 & 0x8000000000000000) == 0)
      {
        v58 = 0;
        v59 = v186[0];
        v29 = (_QWORD *)(v54 & 0xC000000000000001);
        while (v55 != v58)
        {
          if (v29)
          {
            v60 = specialized _ArrayBuffer._getElementSlowPath(_:)(v58, v54);
            v61 = v60;
          }
          else
          {
            v61 = *(_QWORD *)(v54 + 8 * v58 + 32);
            v60 = swift_retain();
          }
          v62 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v60);
          if (!v63)
            goto LABEL_86;
          v64 = v62;
          v65 = v63;
          v185 = &type metadata for String;
          swift_release(v61);
          *(_QWORD *)&v184 = v64;
          *((_QWORD *)&v184 + 1) = v65;
          v186[0] = v59;
          v67 = *(_QWORD *)(v59 + 16);
          v66 = *(_QWORD *)(v59 + 24);
          Predicate = v67 + 1;
          if (v67 >= v66 >> 1)
          {
            sub_1001C1C48(v66 > 1, v67 + 1, 1);
            v59 = v186[0];
          }
          ++v58;
          *(_QWORD *)(v59 + 16) = Predicate;
          sub_10001A6CC(&v184, (_OWORD *)(v59 + 32 * v67 + 32));
          if (v55 == v58)
          {
            swift_release(v54);
            v56 = v175;
            v29 = v176;
            Predicate = v182;
            goto LABEL_22;
          }
        }
        __break(1u);
        goto LABEL_38;
      }
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      if (v57 < 0)
        v137 = v57;
      else
        v137 = v57 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v57);
      v61 = _CocoaArrayWrapper.endIndex.getter(v137);
      if (!v61)
        goto LABEL_68;
LABEL_46:
      if (v61 >= 1)
      {
        v118 = 0;
        v182 = v57 & 0xC000000000000001;
        v119 = _swiftEmptyArrayStorage;
        v120 = v57;
        do
        {
          if (v182)
            v121 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v118, v57);
          else
            v121 = *(id *)(v57 + 8 * v118 + 32);
          v122 = v121;
          v123 = objc_msgSend(v121, "completionDate");
          if (v123)
          {
            v124 = v123;
            v125 = v179;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v123);

            v126 = v125;
            v127 = 0;
          }
          else
          {
            v127 = 1;
            v126 = v179;
          }
          v128 = v180;
          v177(v126, v127, 1, v180);
          v129 = v178;
          sub_1000CDA74(v126, v178);

          v130 = v181;
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v181[6])(v129, 1, v128) == 1)
          {
            sub_10000882C(v129, (uint64_t *)&unk_1008380D0);
            v57 = v120;
          }
          else
          {
            v131 = (void (*)(char *, uint64_t, uint64_t))v130[4];
            v132 = v174;
            v131(v174, v129, v128);
            v131(v56, (uint64_t)v132, v128);
            swift_isUniquelyReferenced_nonNull_native(v119);
            if ((v133 & 1) == 0)
              v119 = (_QWORD *)sub_1002C87C4(0, v119[2] + 1, 1, (unint64_t)v119);
            v135 = v119[2];
            v134 = v119[3];
            v57 = v120;
            if (v135 >= v134 >> 1)
              v119 = (_QWORD *)sub_1002C87C4(v134 > 1, v135 + 1, 1, (unint64_t)v119);
            v119[2] = v135 + 1;
            v136 = (unint64_t)v119
                 + ((*((unsigned __int8 *)v181 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v181 + 80))
                 + (_QWORD)v181[9] * v135;
            v56 = v175;
            v131((char *)v136, (uint64_t)v175, v180);
          }
          ++v118;
          v29 = v176;
        }
        while (v61 != v118);
        goto LABEL_69;
      }
      goto LABEL_85;
    }
    swift_release(v54);
LABEL_22:
    v90 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v164, "setPropertiesToFetch:", v90, swift_bridgeObjectRelease().n128_f64[0]);

    sub_1001A879C(Predicate);
    v92 = v91;
    swift_bridgeObjectRelease();
    Predicate = (uint64_t)sub_1001E8AA8(v92);
    swift_bridgeObjectRelease();
    if ((Predicate & 0x8000000000000000) == 0 && (Predicate & 0x4000000000000000) == 0)
    {
      v54 = *(_QWORD *)(Predicate + 16);
      if (!v54)
        break;
      goto LABEL_25;
    }
    swift_bridgeObjectRetain(Predicate);
    v54 = _CocoaArrayWrapper.endIndex.getter(v111);
    swift_release(Predicate);
    if (!v54)
      break;
LABEL_25:
    v186[0] = _swiftEmptyArrayStorage;
    v57 = (uint64_t)v186;
    sub_1001C1B0C(0, v54 & ~(v54 >> 63), 0);
    if (v54 < 0)
      goto LABEL_63;
    v93 = 0;
    v94 = v186[0];
    v182 = Predicate & 0xC000000000000001;
    v95 = Predicate;
    while (v54 != v93)
    {
      if (v182)
      {
        v96 = specialized _ArrayBuffer._getElementSlowPath(_:)(v93, Predicate);
        v61 = v96;
      }
      else
      {
        v61 = *(_QWORD *)(Predicate + 8 * v93 + 32);
        v96 = swift_retain();
      }
      v97 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v96);
      if (!v98)
        goto LABEL_86;
      v99 = v97;
      v29 = v98;
      swift_release(v61);
      v186[0] = v94;
      v101 = *(_QWORD *)(v94 + 16);
      v100 = *(_QWORD *)(v94 + 24);
      if (v101 >= v100 >> 1)
      {
        sub_1001C1B0C(v100 > 1, v101 + 1, 1);
        v94 = v186[0];
      }
      ++v93;
      *(_QWORD *)(v94 + 16) = v101 + 1;
      v102 = v94 + 16 * v101;
      *(_QWORD *)(v102 + 32) = v99;
      *(_QWORD *)(v102 + 40) = v29;
      Predicate = v95;
      if (v54 == v93)
      {
        swift_release(v95);
        v56 = v175;
        v29 = v176;
        goto LABEL_42;
      }
    }
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain(v54);
    v55 = _CocoaArrayWrapper.endIndex.getter(v110);
    swift_release(v54);
  }
  swift_release(Predicate);
LABEL_42:
  v112 = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v113 = swift_bridgeObjectRelease().n128_u64[0];
  v114 = v164;
  objc_msgSend(v164, "setRelationshipKeyPathsForPrefetching:", v112, v113);

  v115 = v165;
  v116 = NSManagedObjectContext.fetch<A>(_:)(v114, v163);
  v117 = (uint64_t)v170;
  if (v115)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_10001C744(v117, _s10PredicatesOMa);
    return;
  }
  v57 = (uint64_t)sub_10033F168(v116, &_swiftEmptySetSingleton, (uint64_t)v166);
  v165 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((unint64_t)v57 >> 62)
    goto LABEL_64;
  v61 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v57);
  if (v61)
    goto LABEL_46;
LABEL_68:
  v119 = _swiftEmptyArrayStorage;
LABEL_69:
  v138 = swift_bridgeObjectRelease_n(v57, 2);
  v139 = v119[2];
  if (!v139)
  {
    v143 = (uint64_t)v169;
    v141 = v180;
    v144 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v177;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v177)(v169, 1, 1, v180, v138);
    goto LABEL_75;
  }
  v141 = v180;
  v140 = v181;
  v142 = v181[2];
  v143 = (uint64_t)v169;
  v182 = (unint64_t)v119
       + ((*((unsigned __int8 *)v181 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v181 + 80));
  *(_QWORD *)&v179 = v142;
  v142(v169, v138);
  v144 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v177;
  v177(v143, 0, 1, v141);
  v145 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v140[6];
  if (v145(v143, 1, v141) == 1)
  {
LABEL_75:
    sub_10000882C(v143, (uint64_t *)&unk_1008380D0);
    v149 = (uint64_t)v162;
    v144(v162, 1, 1, v141);
LABEL_76:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000CDA2C(v149, (uint64_t)v29);
    REMRemindersListBatchDeleteInvocation.OldestCompletionDateInvocation.Result.init(oldestCompletionDate:)(v29);

    sub_10000882C(v149, (uint64_t *)&unk_1008380D0);
    sub_10001C744((uint64_t)v170, _s10PredicatesOMa);
    return;
  }
  v146 = (void (*)(char *, uint64_t, uint64_t))v140[4];
  v146(v173, v143, v141);
  v147 = swift_bridgeObjectRetain(v119);
  v148 = v167;
  v61 = (uint64_t)v172;
  if (v139 == 1)
  {
LABEL_72:
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))v177)(v61, 1, 1, v141, v147);
LABEL_73:
    swift_bridgeObjectRelease();
    sub_10000882C(v61, (uint64_t *)&unk_1008380D0);
    v149 = (uint64_t)v162;
    v146(v162, (uint64_t)v173, v141);
    v29 = v176;
    v177(v149, 0, 1, v141);
    goto LABEL_76;
  }
  v150 = 1;
  v151 = v181;
  while (v150 < v119[2])
  {
    ((void (*)(uint64_t, unint64_t, uint64_t, __n128))v179)(v61, v182 + (_QWORD)v151[9] * v150, v141, v147);
    v177(v61, 0, 1, v141);
    if (v145(v61, 1, v141) == 1)
      goto LABEL_73;
    v146(v148, v61, v141);
    v152 = v148;
    v153 = v148;
    v154 = v173;
    v155 = static Date.< infix(_:_:)(v152, v173);
    v156 = (void (*)(char *, uint64_t))v151[1];
    if ((v155 & 1) != 0)
    {
      v156(v154, v141);
      v146(v154, (uint64_t)v153, v141);
    }
    else
    {
      v156(v153, v141);
    }
    v148 = v153;
    ++v150;
    v61 = (uint64_t)v172;
    if (v139 == v150)
      goto LABEL_72;
  }
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  *(_QWORD *)&v184 = 0;
  *((_QWORD *)&v184 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v157._countAndFlagsBits = 0xD00000000000002CLL;
  v157._object = (void *)0x80000001006F8C10;
  String.append(_:)(v157);
  v183 = v61;
  v158 = sub_10001A630((uint64_t *)&unk_10083AEC0);
  _print_unlocked<A, B>(_:_:)(&v183, &v184, v158, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v184, *((_QWORD *)&v184 + 1), "remindd/TypedPredicate.swift", 28, 2, 19, 0);
  __break(1u);
}

char *sub_10051142C(uint64_t ***a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t v24;
  uint64_t ***v25;
  id v26;
  uint64_t v27;
  void *v28;
  NSObject *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  __n128 v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t ***v39;
  uint64_t v40;
  uint64_t **v41;
  void *v42;
  id v43;
  char *v44;
  char *v45;
  uint64_t v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  Class isa;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  id v65;
  id v66;
  uint64_t v67;
  Class v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  NSString v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *result;
  void *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  id v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t i;
  uint64_t v94;
  void *v95;
  double v96;
  id v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t j;
  uint64_t v103;
  void *v104;
  double v105;
  id v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t **v110;
  uint64_t **v111;
  uint64_t v112;
  uint64_t ***v113;
  uint64_t v114;
  uint64_t ***v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t ***v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t ***v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD v131[3];
  ValueMetadata *v132;
  unint64_t v133;
  uint64_t v134;

  v129 = a3;
  v128 = a2;
  v5 = type metadata accessor for REMCustomSmartListFilterDescriptor.Operation(0);
  v125 = *(_QWORD *)(v5 - 8);
  v126 = (char *)v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v122 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (char *)_s10PredicatesOMa(0);
  __chkstk_darwin(v8);
  v127 = (char *)&v122 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = _s10PredicatesOMa_1(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v122 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for REMRemindersListBatchDeleteInvocation.ListType(0, v11);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (uint64_t *)((char *)&v122 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v15 + 16))(v18, v3, v14, v16);
  v19 = (*(uint64_t (**)(uint64_t *, uint64_t))(v15 + 88))(v18, v14);
  if (v19 == enum case for REMRemindersListBatchDeleteInvocation.ListType.list(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v15 + 96))(v18, v14);
    v20 = *v18;
    v21 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v22 = swift_allocObject(v21, 40, 7);
    *(_OWORD *)(v22 + 16) = xmmword_1006A7330;
    *(_QWORD *)(v22 + 32) = v20;
    v131[0] = v22;
    specialized Array._endMutation()(v22);
    v23 = (uint64_t **)v131[0];
    v24 = (uint64_t)a1 + *(int *)(sub_10001A630(&qword_100846670) + 48);
    *a1 = v23;
    sub_1000CDA2C(v129, v24);
    v25 = a1;
    v26 = v8;
    v27 = 39;
LABEL_3:
    swift_storeEnumTagMultiPayload(v25, v26, v27);
    return (char *)_swiftEmptyArrayStorage;
  }
  v123 = a1;
  v124 = v8;
  if (v19 != enum case for REMRemindersListBatchDeleteInvocation.ListType.customSmartList(_:))
  {
    if (v19 == enum case for REMRemindersListBatchDeleteInvocation.ListType.reminders(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v15 + 96))(v18, v14);
      v37 = *v18;
      v38 = sub_10001A630(&qword_100846660);
      v39 = v123;
      v40 = (uint64_t)v123 + *(int *)(v38 + 48);
      v41 = sub_1001E9108(v37);
      swift_bridgeObjectRelease();
      *v39 = v41;
      sub_1000CDA2C(v129, v40);
      v25 = v39;
      v26 = v124;
      v27 = 41;
      goto LABEL_3;
    }
    if (v19 == enum case for REMRemindersListBatchDeleteInvocation.ListType.group(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v15 + 96))(v18, v14);
      v42 = (void *)*v18;
      *(_QWORD *)v13 = *v18;
      v13[8] = 0;
      swift_storeEnumTagMultiPayload(v13, v10, 3);
      v43 = v42;
      sub_10000A3AC();
      v45 = v44;
      sub_10001C744((uint64_t)v13, _s10PredicatesOMa_1);
      v46 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
      v47 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
      v48 = objc_msgSend((id)swift_getObjCClassFromMetadata(v46), "entity");
      objc_msgSend(v47, "setEntity:", v48);

      objc_msgSend(v47, "setAffectedStores:", 0);
      objc_msgSend(v47, "setPredicate:", v45);
      v49 = sub_10001A630((uint64_t *)&unk_100839E80);
      v50 = swift_allocObject(v49, 64, 7);
      *(_OWORD *)(v50 + 16) = xmmword_1006A3C00;
      *(_QWORD *)(v50 + 56) = &type metadata for String;
      *(_QWORD *)(v50 + 32) = 0x696669746E656469;
      *(_QWORD *)(v50 + 40) = 0xEA00000000007265;
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v47, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease().n128_f64[0]);

      v52 = v130;
      v53 = NSManagedObjectContext.fetch<A>(_:)(v47, v46);
      if (v52)
      {

        return v8;
      }
      v74 = v53;
      v132 = (ValueMetadata *)sub_10001A630(&qword_10083FF50);
      v131[0] = v74;
      v75 = sub_10001A630(&qword_10084B3F0);
      throwingCast<A>(_:as:failureMessage:)(&v134, v131, v75, 0, 0, v75);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v131);
      v91 = v134;
      v131[0] = _swiftEmptyArrayStorage;
      if ((unint64_t)v134 >> 62)
      {
        if (v134 < 0)
          v117 = v134;
        else
          v117 = v134 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v134);
        v14 = _CocoaArrayWrapper.endIndex.getter(v117);
      }
      else
      {
        v14 = *(_QWORD *)((v134 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v134);
      }
      v13 = v124;
      v92 = v129;
      v127 = v45;
      if (!v14)
      {
        swift_bridgeObjectRelease();
        v110 = (uint64_t **)_swiftEmptyArrayStorage;
LABEL_59:
        swift_bridgeObjectRelease();

        v112 = sub_10001A630(&qword_100846670);
        v113 = v123;
        v114 = (uint64_t)v123 + *(int *)(v112 + 48);
        *v123 = v110;
        sub_1000CDA2C(v92, v114);
        v115 = v113;
        v116 = v13;
LABEL_70:
        swift_storeEnumTagMultiPayload(v115, v116, 39);
        return (char *)_swiftEmptyArrayStorage;
      }
      v128 = v43;
      v130 = 0;
      if (v14 >= 1)
      {
        for (i = 0; i != v14; ++i)
        {
          if ((v91 & 0xC000000000000001) != 0)
          {
            v95 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v91);
          }
          else
          {
            v95 = *(void **)(v91 + 8 * i + 32);
            *(_QWORD *)&v96 = swift_unknownObjectRetain(v95).n128_u64[0];
          }
          v97 = objc_msgSend(v95, "remObjectID", v96);
          v98 = swift_unknownObjectRelease(v95);
          if (v97)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v98);
            v100 = *(_QWORD *)((v131[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
            v99 = *(_QWORD *)((v131[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v100 >= v99 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v99 > 1);
            v94 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v100, v97);
            specialized Array._endMutation()(v94);
          }
        }
        swift_bridgeObjectRelease();
        v110 = (uint64_t **)v131[0];
        v13 = v124;
        v43 = v128;
        v92 = v129;
        goto LABEL_59;
      }
      __break(1u);
      goto LABEL_72;
    }
    if (v19 != enum case for REMRemindersListBatchDeleteInvocation.ListType.all(_:))
    {
LABEL_73:
      _diagnoseUnexpectedEnumCase<A>(type:)(v14, v14);
      __break(1u);
      goto LABEL_74;
    }
    swift_storeEnumTagMultiPayload(v13, v10, 35);
    sub_10000A3AC();
    v63 = v62;
    sub_10001C744((uint64_t)v13, _s10PredicatesOMa_1);
    v64 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
    v65 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    v66 = objc_msgSend((id)swift_getObjCClassFromMetadata(v64), "entity");
    objc_msgSend(v65, "setEntity:", v66);

    objc_msgSend(v65, "setAffectedStores:", 0);
    objc_msgSend(v65, "setPredicate:", v63);
    v67 = sub_10001A630((uint64_t *)&unk_100839E80);
    v13 = (char *)swift_allocObject(v67, 64, 7);
    *((_OWORD *)v13 + 1) = xmmword_1006A3C00;
    *((_QWORD *)v13 + 7) = &type metadata for String;
    *((_QWORD *)v13 + 4) = 0x696669746E656469;
    *((_QWORD *)v13 + 5) = 0xEA00000000007265;
    v68 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v65, "setPropertiesToFetch:", v68, swift_bridgeObjectRelease().n128_f64[0]);

    v69 = v130;
    v70 = NSManagedObjectContext.fetch<A>(_:)(v65, v64);
    if (v69)
    {

      return v8;
    }
    v76 = v70;
    v132 = (ValueMetadata *)sub_10001A630(&qword_10083FF50);
    v131[0] = v76;
    v77 = sub_10001A630(&qword_10084B3F0);
    throwingCast<A>(_:as:failureMessage:)(&v134, v131, v77, 0, 0, v77);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v131);
    v101 = v134;
    v131[0] = _swiftEmptyArrayStorage;
    if ((unint64_t)v134 >> 62)
    {
      if (v134 < 0)
        v118 = v134;
      else
        v118 = v134 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v134);
      v14 = _CocoaArrayWrapper.endIndex.getter(v118);
      if (v14)
        goto LABEL_46;
    }
    else
    {
      v14 = *(_QWORD *)((v134 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v134);
      if (v14)
      {
LABEL_46:
        v128 = v63;
        v130 = 0;
        if (v14 < 1)
        {
LABEL_72:
          __break(1u);
          goto LABEL_73;
        }
        for (j = 0; j != v14; ++j)
        {
          if ((v101 & 0xC000000000000001) != 0)
          {
            v104 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v101);
          }
          else
          {
            v104 = *(void **)(v101 + 8 * j + 32);
            *(_QWORD *)&v105 = swift_unknownObjectRetain(v104).n128_u64[0];
          }
          v106 = objc_msgSend(v104, "remObjectID", v105);
          v107 = swift_unknownObjectRelease(v104);
          if (v106)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v107);
            v109 = *(_QWORD *)((v131[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
            v108 = *(_QWORD *)((v131[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v109 >= v108 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v108 > 1);
            v103 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v109, v106);
            specialized Array._endMutation()(v103);
          }
        }
        swift_bridgeObjectRelease();
        v111 = (uint64_t **)v131[0];
        v63 = v128;
LABEL_69:
        swift_bridgeObjectRelease();

        v119 = sub_10001A630(&qword_100846670);
        v120 = v123;
        v121 = (uint64_t)v123 + *(int *)(v119 + 48);
        *v123 = v111;
        sub_1000CDA2C(v129, v121);
        v115 = v120;
        v116 = v124;
        goto LABEL_70;
      }
    }
    swift_bridgeObjectRelease();
    v111 = (uint64_t **)_swiftEmptyArrayStorage;
    goto LABEL_69;
  }
  (*(void (**)(uint64_t *, uint64_t))(v15 + 96))(v18, v14);
  v28 = (void *)*v18;
  v29 = REMSmartListTypeCustom;
  v30 = qword_100837960;
  v31 = v28;
  if (v30 != -1)
    swift_once(&qword_100837960, sub_1005B8A54);
  v32 = qword_100872290;
  swift_retain();
  v33 = v128;
  v34 = v130;
  v36 = sub_10058E6E0(v29, v28, v128, v32, v35);

  if (v34)
  {

    swift_release(v32);
    return v8;
  }
  swift_release(v32);
  v54 = -[NSObject parentAccount](v36, "parentAccount");
  if (!v54
    || (v55 = v54,
        v8 = (char *)objc_msgSend(v54, "remObjectID"),
        v55,
        !v8))
  {
    v71 = (void *)objc_opt_self(REMError);
    v72 = String._bridgeToObjectiveC()();
    objc_msgSend(v71, "internalErrorWithDebugDescription:", v72);

    swift_willThrow(v73);
    return v8;
  }
  v56 = -[NSObject filterData](v36, "filterData");
  if (v56)
  {
    v57 = v56;
    v58 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v56);
    v60 = v59;

    type metadata accessor for REMCustomSmartListFilterDescriptor(0);
    v61 = REMCustomSmartListFilterDescriptor.__allocating_init(data:minimumSupportedVersion:)(v58, v60, -[NSObject minimumSupportedVersion](v36, "minimumSupportedVersion"));
  }
  else
  {
    type metadata accessor for REMCustomSmartListFilterDescriptor(0);
    v61 = REMCustomSmartListFilterDescriptor.__allocating_init()();
  }
  v79 = (void *)v61;
  v80 = sub_10001A630(&qword_100846668);
  v81 = v127;
  v82 = &v127[*(int *)(v80 + 64)];
  *(_QWORD *)v127 = v79;
  *((_QWORD *)v81 + 1) = v8;
  sub_1000CDA2C(v129, (uint64_t)v82);
  swift_storeEnumTagMultiPayload(v81, v124, 40);
  v83 = v79;
  v84 = v8;
  REMCustomSmartListFilterDescriptor.operation.getter(v84);
  v13 = v126;
  v85 = (*(uint64_t (**)(char *, char *))(v125 + 88))(v7, v126);
  if ((_DWORD)v85 == enum case for REMCustomSmartListFilterDescriptor.Operation.and(_:))
  {
    v86 = static Set<>.typesSupportedByCustomSmartList.getter(v85);
    v87 = static Set<>.typesIndescribableByNSPredicate.getter();
    v88 = sub_10050A454(v87, v86);
    swift_bridgeObjectRelease();
    v89 = (uint64_t)v123;
LABEL_30:
    v132 = &type metadata for ReminderIDsWithMatchingHashtagsProvider;
    v133 = sub_1003F66EC();
    v131[0] = v33;
    v90 = v33;
    v8 = (char *)REMCustomSmartListFilterDescriptor.postFetchPredicates(for:reminderIDsWithMatchingHashtagsProvider:)(v88, v131);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v131);

    swift_bridgeObjectRelease();
    sub_1005126BC((uint64_t)v127, v89);
    return v8;
  }
  v89 = (uint64_t)v123;
  if ((_DWORD)v85 == enum case for REMCustomSmartListFilterDescriptor.Operation.or(_:))
  {
    v88 = static Set<>.typesSupportedByCustomSmartList.getter(v85);
    goto LABEL_30;
  }
LABEL_74:
  result = (char *)_diagnoseUnexpectedEnumCase<A>(type:)(v13, v13);
  __break(1u);
  return result;
}

void sub_1005120BC(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    swift_bridgeObjectRetain(a3);
    v8 = sub_10001A6DC(a2, a3);
    if ((v9 & 1) != 0)
    {
      v10 = v8;
      v11 = *(_QWORD *)(v5 + 56);
      v12 = type metadata accessor for Date(0);
      v13 = *(_QWORD *)(v12 - 8);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v13 + 16))(a4, v11 + *(_QWORD *)(v13 + 72) * v10, v12);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a4, 0, 1, v12);
    }
    else
    {
      v15 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a4, 1, 1, v15);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a4, 1, 1, v14);
  }
}

void *sub_1005121C0()
{
  id v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v7;

  v0 = sub_100512304();
  if (!v0)
    return 0;
  v1 = v0;
  v7 = 0;
  v2 = objc_msgSend((id)objc_opt_self(REMListStorage), "reminderIDUUIDStringsJSONDataFromReminderIDsMergeableOrdering:error:", v0, &v7);
  v3 = v7;
  if (v2)
  {
    v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);

  }
  else
  {
    v4 = v3;
    _convertNSErrorToError(_:)(v3);

    swift_willThrow(v5);
  }

  return v4;
}

uint64_t sub_1005122B8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for ReminderIDsMergeableOrderingHelper()
{
  return objc_opt_self(_TtC7reminddP33_D24FF474DB5580E044D1611A227FBE0734ReminderIDsMergeableOrderingHelper);
}

id sub_100512304()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;

  v1 = *(void **)(v0 + 40);
  v2 = v1;
  if (v1 == (void *)1)
  {
    v2 = sub_100512360(v0);
    v3 = *(void **)(v0 + 40);
    *(_QWORD *)(v0 + 40) = v2;
    v4 = v2;
    sub_10051268C(v3);
  }
  sub_100513D38(v1);
  return v2;
}

id sub_100512360(uint64_t a1)
{
  unint64_t v1;
  id v2;
  uint64_t v3;
  void *v4;
  Class isa;
  id v6;
  id v7;
  id v8;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  _BYTE v23[16];
  id v24;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1 >> 60 != 15)
  {
    v3 = *(_QWORD *)(a1 + 24);
    v4 = (void *)objc_opt_self(REMListStorage);
    sub_1000A70E4(v3, v1);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v24 = 0;
    v6 = objc_msgSend(v4, "reminderIDsMergeableOrderingFromReminderIDUUIDStringsJSONData:error:", isa, &v24);

    v7 = v24;
    if (v6)
    {
      v8 = v24;
      v2 = objc_msgSend(v6, "mutableCopy");
      sub_1000A71B4(v3, v1);

      return v2;
    }
    v10 = v24;
    v11 = _convertNSErrorToError(_:)(v7);

    swift_willThrow(v12);
    if (qword_100837808 != -1)
      swift_once(&qword_100837808, sub_10050F008);
    v13 = type metadata accessor for Logger(0);
    sub_10001AAA8(v13, (uint64_t)qword_10084DEE0);
    swift_errorRetain(v11);
    v14 = swift_errorRetain(v11);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = (void *)swift_slowAlloc(32, -1);
      v24 = v18;
      *(_DWORD *)v17 = 136315138;
      swift_getErrorValue(v11, v23, v22);
      v19 = Error.rem_errorDescription.getter(v22[1], v22[2]);
      v21 = sub_10001A820(v19, v20, (uint64_t *)&v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22);
      swift_bridgeObjectRelease();
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to decode reminderIDsMergeableOrdering {error: %s}", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
      sub_1000A71B4(v3, v1);

      swift_errorRelease(v11);
    }
    else
    {
      sub_1000A71B4(v3, v1);
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      swift_errorRelease(v11);

    }
  }
  return 0;
}

uint64_t sub_100512640()
{
  uint64_t v0;

  sub_1000A71B4(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  sub_10051268C(*(id *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for ReminderIDsMergeableOrdering()
{
  return objc_opt_self(_TtC7reminddP33_D24FF474DB5580E044D1611A227FBE0728ReminderIDsMergeableOrdering);
}

void sub_10051268C(id a1)
{
  if (a1 != (id)1)

}

void sub_1005126A4(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_1005120BC(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1005126BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s10PredicatesOMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100512700(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  id v25;
  unint64_t v26;
  char v27;
  id v28;
  id v29;
  uint64_t v30;
  id v31;
  id v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t inited;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  char v64[16];
  void *v65;

  v4 = type metadata accessor for Logger(0);
  v57 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v56 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = &_swiftEmptySetSingleton;
  v6 = (id)((unint64_t)a1 >> 62);
  v61 = a1;
  if ((unint64_t)a1 >> 62)
    goto LABEL_55;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  v55 = v4;
  sub_10001A630(&qword_10084C260);
  Set.reserveCapacity(_:)(v7);
  if (v6)
  {
    v8 = v61;
    if (v61 < 0)
      v34 = v61;
    else
      v34 = v61 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v61);
    v9 = _CocoaArrayWrapper.endIndex.getter(v34);
    if (v9)
      goto LABEL_5;
LABEL_47:
    swift_bridgeObjectRelease();
    v11 = (uint64_t)_swiftEmptyDictionarySingleton;
LABEL_48:
    swift_bridgeObjectRetain(v11);
    v36 = sub_1001E8EE8(v35);
    v61 = v11;
    swift_bridgeObjectRelease();
    v37 = type metadata accessor for REMAccountStorageCDIngestor();
    inited = swift_initStackObject(v37, v64);
    v39 = v55;
    if (qword_100837278 != -1)
      swift_once(&qword_100837278, sub_10034C0CC);
    v40 = sub_10001AAA8(v39, (uint64_t)qword_100846A10);
    v41 = v56;
    v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 16))(v56, v40, v39);
    v63 = v36;
    __chkstk_darwin(v42);
    *(&v51 - 2) = (uint64_t)v41;
    v43 = sub_10001A630(&qword_10083FE60);
    v44 = sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
    v45 = sub_1000C4C0C((unint64_t *)&qword_100843190, &qword_10083FE60);
    v46 = v54;
    v47 = Sequence.map<A>(skippingError:_:)(sub_1002A7AD0, &v51 - 4, sub_1003F6730, inited, v43, v44, v45);
    if (v46)
    {
      swift_errorRelease(v46);
      v48 = _swiftEmptyArrayStorage;
    }
    else
    {
      v48 = (_QWORD *)v47;
    }
    (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v39);
    v49 = a2;
    sub_1003F2100((uint64_t)v48, (uint64_t)v49);
    swift_bridgeObjectRelease();
    swift_release(inited);

    swift_release(v36);
    swift_bridgeObjectRelease();
    return;
  }
  v8 = v61;
  v9 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v61);
  if (!v9)
    goto LABEL_47;
LABEL_5:
  if (v9 >= 1)
  {
    v52 = a2;
    a2 = 0;
    v10 = v8 & 0xC000000000000001;
    v11 = (uint64_t)_swiftEmptyDictionarySingleton;
    v53 = (char *)&type metadata for Swift.AnyObject + 8;
    v58 = v9;
    v60 = v8 & 0xC000000000000001;
    while (1)
    {
      if (v10)
        v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, v8);
      else
        v12 = *(id *)(v8 + 8 * (_QWORD)a2 + 32);
      v13 = v12;
      v14 = objc_msgSend(v12, "remObjectID");
      if (v14)
      {
        v15 = v14;
        v16 = (void *)REMObjectID.codable.getter(v14);
        sub_1002DB304((Swift::Int *)&v63, v16);

        v17 = objc_msgSend(v13, "list");
        if (v17)
        {
          v18 = v17;
          v6 = objc_msgSend(v17, "account");

          if (v6)
          {
            v19 = objc_msgSend(v6, "remObjectID");
            if (v19)
            {
              a1 = (uint64_t)v19;
              v59 = v11 & 0xC000000000000001;
              if ((v11 & 0xC000000000000001) != 0)
              {
                if (v11 < 0)
                  v20 = v11;
                else
                  v20 = v11 & 0xFFFFFFFFFFFFFF8;
                v21 = __CocoaDictionary.lookup(_:)(v19, v20);
                if (v21)
                {
                  v22 = v21;
                  v23 = v11;
                  v62 = v21;
                  v24 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
                  swift_unknownObjectRetain(v22);
                  swift_dynamicCast(&v63, &v62, v53, v24, 7);
                  v25 = v63;
                  swift_unknownObjectRelease(v22);
                  goto LABEL_28;
                }
LABEL_30:
                v23 = v11;

                goto LABEL_31;
              }
              v23 = v11;
              if (!*(_QWORD *)(v11 + 16))
                goto LABEL_31;
              v26 = sub_1002C66DC((uint64_t)v19);
              if ((v27 & 1) == 0)
                goto LABEL_30;
              v25 = *(id *)(*(_QWORD *)(v11 + 56) + 8 * v26);
LABEL_28:

              if (v25)
              {

                v11 = v23;
              }
              else
              {
LABEL_31:
                if (v59)
                {
                  if (v23 < 0)
                    v4 = v23;
                  else
                    v4 = v23 & 0xFFFFFFFFFFFFFF8;
                  v28 = (id)a1;
                  v29 = v6;
                  v30 = __CocoaDictionary.count.getter(v4);
                  if (__OFADD__(v30, 1))
                  {
                    __break(1u);
LABEL_55:
                    if (a1 < 0)
                      v50 = a1;
                    else
                      v50 = a1 & 0xFFFFFFFFFFFFFF8;
                    swift_bridgeObjectRetain(a1);
                    v7 = _CocoaArrayWrapper.endIndex.getter(v50);
                    swift_bridgeObjectRelease();
                    goto LABEL_3;
                  }
                  v23 = sub_100191988(v4, v30 + 1);
                }
                else
                {
                  v31 = (id)a1;
                  v32 = v6;
                }
                swift_isUniquelyReferenced_nonNull_native(v23);
                v63 = (id)v23;
                sub_10028BBBC((uint64_t)v6, (void *)a1, v33);
                v11 = (uint64_t)v63;

                swift_bridgeObjectRelease();
              }
              v9 = v58;
            }
            else
            {

            }
            v10 = v60;
          }
          else
          {

          }
          v8 = v61;
          goto LABEL_8;
        }

      }
      else
      {

      }
LABEL_8:
      a2 = (char *)a2 + 1;
      if ((void *)v9 == a2)
      {
        swift_bridgeObjectRelease();
        a2 = v52;
        goto LABEL_48;
      }
    }
  }
  __break(1u);
}

double sub_100512CAC(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v11;
  id v12;
  id v13;
  id v14;
  NSString v15;
  id v16;
  id v17;
  NSString v18;
  id v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char **v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  int64_t v41;
  unint64_t v42;
  uint64_t v43;
  id v44;
  void *v45;
  id v46;
  id v47;
  char v48;
  Swift::Int v49;
  uint64_t v50;
  unint64_t v51;
  id v52;
  char v53;
  uint64_t v54;
  id v55;
  char v56;
  uint64_t v57;
  id v58;
  id v59;
  id v60;
  id v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  _QWORD *v65;
  id v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  NSString v71;
  id v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  double v91;
  id v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double result;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  int64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122[3];
  uint64_t v123;
  _BYTE v124[24];
  uint64_t v125;
  _QWORD v126[6];

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_109;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (v4)
  {
    while (1)
    {
      v5 = 0;
      v6 = v3 & 0xC000000000000001;
      v101 = v3 + 32;
      v102 = v3 & 0xFFFFFFFFFFFFFF8;
      v117 = a2 & 0xC000000000000001;
      v7 = a2 & 0xFFFFFFFFFFFFFF8;
      if (a2 < 0)
        v7 = a2;
      v111 = v7;
      v109 = a2 + 56;
      v107 = a2;
      v103 = v4;
      v104 = v3;
      v105 = v3 & 0xC000000000000001;
LABEL_9:
      if (v6)
      {
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
      }
      else
      {
        if (v5 >= *(_QWORD *)(v102 + 16))
          goto LABEL_108;
        v8 = *(id *)(v101 + 8 * v5);
      }
      v9 = v8;
      if (__OFADD__(v5++, 1))
        goto LABEL_107;
      v11 = objc_msgSend(v8, "list");
      v12 = v11;
      if (v11)
      {
        v13 = v11;
        sub_10050FB38(v13);
        objc_msgSend(v9, "setList:", 0);
        v14 = objc_msgSend(v9, "createResolutionTokenMapIfNecessary");
        v15 = String._bridgeToObjectiveC()();
        objc_msgSend(v14, "updateForKey:", v15);

      }
      v108 = v12;
      v16 = objc_msgSend(v9, "parentReminder");

      if (v16)
      {
        objc_msgSend(v9, "setParentReminder:", 0);
        v17 = objc_msgSend(v9, "createResolutionTokenMapIfNecessary");
        v18 = String._bridgeToObjectiveC()();
        objc_msgSend(v17, "updateForKey:", v18);

      }
      v19 = objc_msgSend(v9, "children");
      if (!v19)
        goto LABEL_7;
      v20 = v19;
      v21 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
      v22 = sub_1002564FC();
      v114 = v21;
      v23 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v20, v21, v22);

      if ((v23 & 0xC000000000000001) != 0)
      {
        if (v23 < 0)
          v24 = v23;
        else
          v24 = v23 & 0xFFFFFFFFFFFFFF8;
        if (!__CocoaSet.count.getter(v24))
        {
LABEL_6:
          swift_bridgeObjectRelease();
LABEL_7:

          goto LABEL_8;
        }
      }
      else if (!*(_QWORD *)(v23 + 16))
      {
        goto LABEL_6;
      }
      v106 = v5;
      v25 = &selRef_isConcealed;
      v26 = objc_msgSend(v9, "remObjectID");
      v112 = v26;
      v125 = (uint64_t)_swiftEmptyArrayStorage;
      if ((v23 & 0xC000000000000001) != 0)
      {
        v27 = v23 < 0 ? v23 : v23 & 0xFFFFFFFFFFFFFF8;
        v28 = __CocoaSet.makeIterator()(v27);
        v26 = Set.Iterator.init(_cocoa:)(v126, v28, v21, v22);
        v23 = v126[0];
        v116 = v126[1];
        v29 = v126[2];
        v30 = v126[3];
        v31 = v126[4];
      }
      else
      {
        v30 = 0;
        v32 = -1 << *(_BYTE *)(v23 + 32);
        v116 = v23 + 56;
        v33 = ~v32;
        v34 = -v32;
        v35 = v34 < 64 ? ~(-1 << v34) : -1;
        v31 = v35 & *(_QWORD *)(v23 + 56);
        v29 = v33;
      }
      v113 = (unint64_t)(v29 + 64) >> 6;
      v115 = v9;
      v118 = v23;
      while (v23 < 0)
      {
        v38 = __CocoaSet.Iterator.next()(v26);
        if (!v38)
          goto LABEL_82;
        v39 = v38;
        v123 = v38;
        swift_unknownObjectRetain(v38);
        swift_dynamicCast(v122, &v123, (char *)&type metadata for Swift.AnyObject + 8, v114, 7);
        v40 = (id)v122[0];
        swift_unknownObjectRelease(v39);
        v37 = v30;
        v3 = v31;
        if (!v40)
          goto LABEL_82;
LABEL_58:
        v44 = objc_msgSend(v40, v25[432]);
        if (!v44)
          goto LABEL_36;
        v45 = v44;
        v119 = v3;
        v120 = v37;
        v46 = (id)REMObjectID.codable.getter(v44);

        if (v117)
        {
          v47 = v46;
          v48 = __CocoaSet.contains(_:)(v47, v111);

          if ((v48 & 1) == 0)
            goto LABEL_70;
          v46 = v47;
        }
        else
        {
          if (!*(_QWORD *)(a2 + 16))
            goto LABEL_70;
          v49 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
          v50 = -1 << *(_BYTE *)(a2 + 32);
          v51 = v49 & ~v50;
          if (((*(_QWORD *)(v109 + ((v51 >> 3) & 0xFFFFFFFFFFFFF8)) >> v51) & 1) == 0)
            goto LABEL_70;
          type metadata accessor for REMObjectID_Codable(0);
          v52 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v51);
          v53 = static NSObject.== infix(_:_:)(v52);

          if ((v53 & 1) == 0)
          {
            v54 = ~v50;
            while (1)
            {
              v51 = (v51 + 1) & v54;
              v9 = v115;
              if (((*(_QWORD *)(v109 + ((v51 >> 3) & 0xFFFFFFFFFFFFF8)) >> v51) & 1) == 0)
                break;
              v55 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v51);
              v56 = static NSObject.== infix(_:_:)(v55);

              if ((v56 & 1) != 0)
                goto LABEL_68;
            }
LABEL_70:
            if (qword_100837808 != -1)
              swift_once(&qword_100837808, sub_10050F008);
            v57 = type metadata accessor for Logger(0);
            sub_10001AAA8(v57, (uint64_t)qword_10084DEE0);
            v58 = v46;
            v59 = v112;
            v60 = v58;
            v61 = v59;
            v62 = Logger.logObject.getter(v61);
            v63 = static os_log_type_t.default.getter(v62);
            if (os_log_type_enabled(v62, v63))
            {
              v64 = swift_slowAlloc(22, -1);
              v65 = (_QWORD *)swift_slowAlloc(8, -1);
              v110 = swift_slowAlloc(32, -1);
              v122[0] = v110;
              *(_DWORD *)v64 = 138412546;
              *(_QWORD *)(v64 + 4) = v60;
              *v65 = v60;

              *(_WORD *)(v64 + 12) = 2080;
              if (v112)
              {
                v66 = objc_msgSend(v61, "description");
                v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
                v69 = v68;

              }
              else
              {
                v69 = 0xE300000000000000;
                v67 = 7104878;
              }
              v23 = v118;
              *(_QWORD *)(v64 + 14) = sub_10001A820(v67, v69, v122);

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v62, v63, "Found subtasks not to be deleted; make them top level instead. {subtaskID: %@, parentID: %s}",
                (uint8_t *)v64,
                0x16u);
              v70 = sub_10001A630((uint64_t *)&unk_100839E70);
              swift_arrayDestroy(v65, 1, v70);
              swift_slowDealloc(v65, -1, -1);
              swift_arrayDestroy(v110, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v110, -1, -1);
              swift_slowDealloc(v64, -1, -1);

              a2 = v107;
              v9 = v115;
            }
            else
            {

              v23 = v118;
            }
            objc_msgSend(v40, "setParentReminder:", 0);
            v46 = objc_msgSend(v40, "createResolutionTokenMapIfNecessary");
            v71 = String._bridgeToObjectiveC()();
            objc_msgSend(v46, "updateForKey:", v71);

            objc_msgSend(v40, "updateChangeCount");
            swift_beginAccess(&v125, v122, 33, 0);
            v72 = v60;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v72);
            v74 = *(_QWORD *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v73 = *(_QWORD *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x18);
            v25 = &selRef_isConcealed;
            if (v74 >= v73 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v73 > 1);
            v75 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v74, v72);
            specialized Array._endMutation()(v75);
            swift_endAccess(v122);

            v40 = v72;
            goto LABEL_81;
          }
LABEL_68:
          v9 = v115;
        }
        v23 = v118;
LABEL_81:
        v3 = v119;
        v37 = v120;

LABEL_36:
        v30 = v37;
        v31 = v3;
      }
      if (v31)
        break;
      v41 = v30 + 1;
      if (!__OFADD__(v30, 1))
      {
        if (v41 >= v113)
          goto LABEL_82;
        v42 = *(_QWORD *)(v116 + 8 * v41);
        v37 = v30 + 1;
        if (!v42)
        {
          v37 = v30 + 2;
          if (v30 + 2 >= v113)
            goto LABEL_82;
          v42 = *(_QWORD *)(v116 + 8 * v37);
          if (!v42)
          {
            v37 = v30 + 3;
            if (v30 + 3 >= v113)
              goto LABEL_82;
            v42 = *(_QWORD *)(v116 + 8 * v37);
            if (!v42)
            {
              v37 = v30 + 4;
              if (v30 + 4 >= v113)
                goto LABEL_82;
              v42 = *(_QWORD *)(v116 + 8 * v37);
              if (!v42)
              {
                v43 = v30 + 5;
                while (v113 != v43)
                {
                  v42 = *(_QWORD *)(v116 + 8 * v43++);
                  if (v42)
                  {
                    v37 = v43 - 1;
                    goto LABEL_56;
                  }
                }
LABEL_82:
                sub_1000C6560(v23);
                swift_beginAccess(&v125, v124, 0, 0);
                if ((unint64_t)v125 >> 62)
                {
                  if (v125 < 0)
                    v98 = v125;
                  else
                    v98 = v125 & 0xFFFFFFFFFFFFFF8;
                  swift_bridgeObjectRetain(v125);
                  v76 = _CocoaArrayWrapper.endIndex.getter(v98);
                  swift_bridgeObjectRelease();
                }
                else
                {
                  v76 = *(_QWORD *)((v125 & 0xFFFFFFFFFFFFF8) + 0x10);
                }
                v4 = v103;
                v3 = v104;
                v5 = v106;
                v6 = v105;
                if (!v76)
                {

                  goto LABEL_94;
                }
                if (!v112)
                {

LABEL_94:
LABEL_95:
                  swift_bridgeObjectRelease();
                  goto LABEL_8;
                }
                if (!v108)
                {

                  goto LABEL_95;
                }
                v77 = v108;
                v78 = v112;
                v79 = sub_10050FE74(v77);
                if (v79)
                {
                  v80 = v79;
                  if (qword_100837808 != -1)
                    swift_once(&qword_100837808, sub_10050F008);
                  v81 = type metadata accessor for Logger(0);
                  sub_10001AAA8(v81, (uint64_t)qword_10084DEE0);
                  v78 = v78;
                  v82 = Logger.logObject.getter(v78);
                  v83 = static os_log_type_t.debug.getter();
                  if (os_log_type_enabled(v82, v83))
                  {
                    v84 = swift_slowAlloc(22, -1);
                    v121 = swift_slowAlloc(64, -1);
                    v122[0] = v121;
                    *(_DWORD *)v84 = 136315394;
                    v85 = v125;
                    v86 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
                    swift_bridgeObjectRetain(v85);
                    v88 = Array.description.getter(v87, v86);
                    v90 = v89;
                    swift_bridgeObjectRelease();
                    v123 = sub_10001A820(v88, v90, v122);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124);
                    *(_QWORD *)&v91 = swift_bridgeObjectRelease().n128_u64[0];
                    *(_WORD *)(v84 + 12) = 2080;
                    v92 = objc_msgSend(v78, "description", v91);
                    v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
                    v95 = v94;

                    v96 = v93;
                    a2 = v107;
                    v123 = sub_10001A820(v96, v95, v122);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124);

                    v5 = v106;
                    v4 = v103;
                    v3 = v104;
                    swift_bridgeObjectRelease();
                    _os_log_impl((void *)&_mh_execute_header, v82, v83, "Moving subtask IDs to reflect top level ordering. {subtaskIDs: %s, parentID: %s}", (uint8_t *)v84, 0x16u);
                    swift_arrayDestroy(v121, 2, (char *)&type metadata for Any + 8);
                    swift_slowDealloc(v121, -1, -1);
                    swift_slowDealloc(v84, -1, -1);

                  }
                  else
                  {

                  }
                  swift_bridgeObjectRetain(v125);
                  sub_100510050(v97, (uint64_t)v78);
                  swift_release(v80);
                  swift_bridgeObjectRelease();

                }
                else
                {

                }
                swift_bridgeObjectRelease();
                v6 = v105;
LABEL_8:
                if (v5 == v4)
                  goto LABEL_113;
                goto LABEL_9;
              }
            }
          }
        }
LABEL_56:
        v3 = (v42 - 1) & v42;
        v36 = __clz(__rbit64(v42)) + (v37 << 6);
        goto LABEL_57;
      }
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      if (v3 < 0)
        v99 = v3;
      else
        v99 = v3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v3);
      v4 = _CocoaArrayWrapper.endIndex.getter(v99);
      if (!v4)
        goto LABEL_113;
    }
    v3 = (v31 - 1) & v31;
    v36 = __clz(__rbit64(v31)) | (v30 << 6);
    v37 = v30;
LABEL_57:
    v40 = *(id *)(*(_QWORD *)(v23 + 48) + 8 * v36);
    if (!v40)
      goto LABEL_82;
    goto LABEL_58;
  }
LABEL_113:
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_10051394C(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  Class isa;
  id v27;
  NSString v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = v2;
  if (qword_100837808 != -1)
    swift_once(&qword_100837808, sub_10050F008);
  v6 = type metadata accessor for Logger(0);
  sub_10001AAA8(v6, (uint64_t)qword_10084DEE0);
  swift_retain_n(a2);
  v7 = a1;
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(32, -1);
    v11 = swift_slowAlloc(96, -1);
    v32 = v11;
    *(_DWORD *)v10 = 136315650;
    v12 = objc_msgSend(v7, "remObjectID");
    v29 = v9;
    if (v12)
    {
      v13 = v12;
      v14 = objc_msgSend(v12, "description");

      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

    }
    else
    {
      v17 = 0xE300000000000000;
      v15 = 7104878;
    }
    v30 = sub_10001A820(v15, v17, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);

    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    if (*(_BYTE *)(a2 + 16))
      v18 = 1702195828;
    else
      v18 = 0x65736C6166;
    if (*(_BYTE *)(a2 + 16))
      v19 = 0xE400000000000000;
    else
      v19 = 0xE500000000000000;
    v30 = sub_10001A820(v18, v19, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
    swift_release_n(a2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 22) = 2080;
    if (*(_BYTE *)(a2 + 17))
      v20 = 1702195828;
    else
      v20 = 0x65736C6166;
    if (*(_BYTE *)(a2 + 17))
      v21 = 0xE400000000000000;
    else
      v21 = 0xE500000000000000;
    v30 = sub_10001A820(v20, v21, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
    swift_release_n(a2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v29, "REMRemindersListBatchDeleteInvocation: updating REMCDList ordering {listID: %s, orderingChanged: %s, needsSortReminders: %s}", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy(v11, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    v3 = v2;
  }
  else
  {

    swift_release_n(a2);
  }
  if (*(_BYTE *)(a2 + 16) == 1)
  {
    v22 = sub_1005121C0();
    if (v3)
      return;
    v24 = v23;
    if (v23 >> 60 != 15)
    {
      v25 = (uint64_t)v22;
      isa = Data._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v7, "setReminderIDsMergeableOrdering:", isa);

      v27 = objc_msgSend(v7, "createResolutionTokenMapIfNecessary");
      v28 = String._bridgeToObjectiveC()();
      objc_msgSend(v27, "updateForKey:", v28);

      objc_msgSend(v7, "updateChangeCount");
      sub_1000A71B4(v25, v24);
    }
  }
  if (*(_BYTE *)(a2 + 17) == 1)
    sub_1002B8DB8();
}

id sub_100513D38(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

uint64_t sub_100513D48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084E0E8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084E0E8);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_100513DD8(uint64_t a1)
{
  sub_100514070(a1);
}

id sub_100513DEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  Class isa;
  uint64_t v20;

  v0 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = _s10PredicatesOMa(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload(v9, v10, 56);
  sub_10000D2C0();
  v12 = v11;
  sub_10001C744((uint64_t)v9, _s10PredicatesOMa);
  v13 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v14 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v15 = objc_msgSend((id)swift_getObjCClassFromMetadata(v13), "entity");
  objc_msgSend(v14, "setEntity:", v15);

  objc_msgSend(v14, "setAffectedStores:", 0);
  objc_msgSend(v14, "setPredicate:", v12);

  v16 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  v17 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v6, v16, v17);
  swift_storeEnumTagMultiPayload(v6, v4, 0);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for REMRemindersListDataView.ShowCompleted.off(_:), v0);
  sub_10049ADC0((uint64_t)v6, (uint64_t)v3, 0);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_10001C744((uint64_t)v6, _s9UtilitiesO12SortingStyleOMa);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v14, "setSortDescriptors:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  return v14;
}

void sub_100514070(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t inited;
  _BYTE v36[16];
  _QWORD *v37;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100513DEC();
  v8 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v9 = NSManagedObjectContext.fetch<A>(_:)(v7, v8);

  if (v1)
    return;
  v10 = objc_msgSend((id)objc_opt_self(REMReminderFetchOptions), "defaultFetchOptions");
  sub_10033F8B0(v9, v10, a1);
  v32 = v12;
  v33 = v11;

  swift_bridgeObjectRelease();
  v13 = type metadata accessor for REMReminderStorageCDIngestor();
  inited = swift_initStackObject(v13, v36);
  if (qword_100837810 != -1)
    swift_once(&qword_100837810, sub_100513D48);
  v14 = sub_10001AAA8(v3, (uint64_t)qword_10084E0E8);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v14, v3);
  v34 = &v32;
  v37 = (_QWORD *)v9;
  __chkstk_darwin(v15);
  *(&v32 - 2) = (uint64_t)v6;
  v16 = sub_10001A630(&qword_10083D590);
  v17 = sub_1000151B0(0, &qword_10083FEE8, REMReminderStorage_ptr);
  v19 = _swiftEmptyArrayStorage;
  v18 = sub_10031FFA8();
  v20 = Sequence.map<A>(skippingError:_:)(sub_100343838, &v32 - 4, sub_10033D070, inited, v16, v17, v18);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_bridgeObjectRelease();
  v37 = _swiftEmptyArrayStorage;
  if ((unint64_t)v20 >> 62)
  {
    if (v20 < 0)
      v30 = v20;
    else
      v30 = v20 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v20);
    v21 = _CocoaArrayWrapper.endIndex.getter(v30);
    swift_bridgeObjectRelease();
    if (v21)
      goto LABEL_8;
LABEL_22:
    v29 = swift_bridgeObjectRelease();
LABEL_23:
    v31 = objc_allocWithZone((Class)type metadata accessor for REMComplicationDataView.FetchModelInvocation.Result(0, v29));
    REMComplicationDataView.FetchModelInvocation.Result.init(accountStorages:listStorages:reminderStorages:)(v33, v32, v19);
    return;
  }
  v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v21)
    goto LABEL_22;
LABEL_8:
  if (v21 >= 1)
  {
    for (i = 0; i != v21; ++i)
    {
      if ((v20 & 0xC000000000000001) != 0)
        v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v20);
      else
        v25 = *(id *)(v20 + 8 * i + 32);
      v26 = v25;
      v27 = objc_msgSend(v25, "displayDate");

      if (v27)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v28);
        v23 = v37[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
        v24 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v26);
        specialized ContiguousArray._endMutation()(v24);
      }
      else
      {

      }
    }
    v29 = swift_bridgeObjectRelease();
    v19 = v37;
    goto LABEL_23;
  }
  __break(1u);
}

uint64_t sub_1005143E4(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_10084E138, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ScheduledByDateBucketsInvocation, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.ScheduledByDateBucketsInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *sub_100514420(uint64_t a1, void (*a2)(uint64_t *__return_ptr, char *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  char *v18;
  unsigned __int8 v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  _QWORD *result;
  _QWORD v39[2];
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  char *v49;
  void (*v50)(uint64_t *__return_ptr, char *);
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;

  v4 = v3;
  v50 = a2;
  v52 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
  __chkstk_darwin(v52);
  v49 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v51 = (char *)v39 - v10;
  v54 = _swiftEmptyDictionarySingleton;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v12 = *(unsigned __int8 *)(v9 + 80);
    v13 = (v12 + 32) & ~v12;
    v39[1] = a1;
    v14 = a1 + v13;
    v15 = *(_QWORD *)(v9 + 72);
    v46 = v13;
    v41 = v12 | 7;
    v42 = v15 + v13;
    v16 = _swiftEmptyDictionarySingleton;
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v47 = v9;
    v48 = v17;
    v40 = xmmword_1006A3C00;
    v43 = a3;
    while (1)
    {
      v18 = v51;
      v48(v51, v14, v52);
      v50(&v53, v18);
      if (v4)
      {
        (*(void (**)(char *, uint64_t))(v47 + 8))(v51, v52);
        swift_bridgeObjectRelease();
        swift_release(v54);
        return v16;
      }
      v19 = v53;
      v21 = sub_1002C67EC(v53);
      v22 = v16[2];
      v23 = (v20 & 1) == 0;
      v24 = v22 + v23;
      if (__OFADD__(v22, v23))
        break;
      v25 = v20;
      if (v16[3] < v24)
      {
        sub_1002CD5E0(v24, 1);
        v16 = v54;
        v26 = sub_1002C67EC(v19);
        if ((v25 & 1) != (v27 & 1))
          goto LABEL_23;
        v21 = v26;
      }
      if ((v25 & 1) != 0)
      {
        v28 = v16[7];
        v44 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
        v45 = 0;
        v44(v49, v51, v52);
        v29 = *(_QWORD *)(v28 + 8 * v21);
        swift_isUniquelyReferenced_nonNull_native(v29);
        *(_QWORD *)(v28 + 8 * v21) = v29;
        if ((v30 & 1) == 0)
        {
          v29 = sub_1002C8478(0, *(_QWORD *)(v29 + 16) + 1, 1, v29);
          *(_QWORD *)(v28 + 8 * v21) = v29;
        }
        v32 = *(_QWORD *)(v29 + 16);
        v31 = *(_QWORD *)(v29 + 24);
        if (v32 >= v31 >> 1)
        {
          v29 = sub_1002C8478(v31 > 1, v32 + 1, 1, v29);
          *(_QWORD *)(v28 + 8 * v21) = v29;
        }
        *(_QWORD *)(v29 + 16) = v32 + 1;
        v44((char *)(v29 + v46 + v32 * v15), v49, v52);
        v4 = v45;
      }
      else
      {
        v33 = sub_10001A630(&qword_10083BFA0);
        v34 = swift_allocObject(v33, v42, v41);
        *(_OWORD *)(v34 + 16) = v40;
        (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v34 + v46, v51, v52);
        v16[(v21 >> 6) + 8] |= 1 << v21;
        *(_BYTE *)(v16[6] + v21) = v19;
        *(_QWORD *)(v16[7] + 8 * v21) = v34;
        v35 = v16[2];
        v36 = __OFADD__(v35, 1);
        v37 = v35 + 1;
        if (v36)
          goto LABEL_22;
        v16[2] = v37;
      }
      v14 += v15;
      if (!--v11)
      {
        swift_bridgeObjectRelease();
        return v16;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&_s3BinON);
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t sub_100514764(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(Swift::UInt *__return_ptr, id *))
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  Swift::UInt v15;
  Swift::UInt v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  int64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  Swift::UInt *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v34;
  Swift::UInt v35;
  Swift::UInt v36;
  id v37;
  _QWORD *v38;

  v6 = v5;
  v7 = _swiftEmptyDictionarySingleton;
  v38 = _swiftEmptyDictionarySingleton;
  v8 = a4 >> 1;
  if (a4 >> 1 == a3)
  {
LABEL_2:
    swift_unknownObjectRelease(a1);
    return (uint64_t)v7;
  }
  else
  {
    v9 = a3;
    while (v9 < v8)
    {
      v37 = *(id *)(a2 + 8 * v9);
      v14 = v37;
      a5(&v35, &v37);
      if (v6)
      {
        swift_release(v7);
        swift_unknownObjectRelease(a1);

        return (uint64_t)v7;
      }
      v16 = v35;
      v15 = v36;
      v18 = sub_1002C699C(v35, v36);
      v19 = v7[2];
      v20 = (v17 & 1) == 0;
      v21 = v19 + v20;
      if (__OFADD__(v19, v20))
        goto LABEL_20;
      v22 = v17;
      if (v7[3] < v21)
      {
        sub_1002CE21C(v21, 1);
        v7 = v38;
        v21 = sub_1002C699C(v16, v15);
        if ((v22 & 1) != (v23 & 1))
          goto LABEL_22;
        v18 = v21;
      }
      if ((v22 & 1) != 0)
      {
        v10 = (_QWORD *)(v7[7] + 8 * v18);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v21);
        v12 = *(_QWORD *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v11 = *(_QWORD *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v12 >= v11 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1);
        v13 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v14);
        specialized Array._endMutation()(v13);
      }
      else
      {
        v24 = sub_10001A630((uint64_t *)&unk_10083AD90);
        v25 = swift_allocObject(v24, 40, 7);
        *(_OWORD *)(v25 + 16) = xmmword_1006A7330;
        *(_QWORD *)(v25 + 32) = v14;
        v34 = v25;
        specialized Array._endMutation()(v25);
        v7[(v18 >> 6) + 8] |= 1 << v18;
        v26 = (Swift::UInt *)(v7[6] + 16 * v18);
        *v26 = v16;
        v26[1] = v15;
        *(_QWORD *)(v7[7] + 8 * v18) = v34;
        v27 = v7[2];
        v28 = __OFADD__(v27, 1);
        v29 = v27 + 1;
        if (v28)
          goto LABEL_21;
        v7[2] = v29;
      }
      v6 = 0;
      if (v8 == ++v9)
        goto LABEL_2;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for EraAndYear);
    __break(1u);
  }
  return result;
}

uint64_t sub_1005149A4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t *__return_ptr, id *))
{
  uint64_t v5;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  int64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  id v34;
  _QWORD *v35;

  v6 = _swiftEmptyDictionarySingleton;
  v35 = _swiftEmptyDictionarySingleton;
  v7 = a4 >> 1;
  if (a4 >> 1 == a3)
  {
LABEL_2:
    swift_unknownObjectRelease(a1);
    return (uint64_t)v6;
  }
  else
  {
    v8 = a3;
    while (v8 < v7)
    {
      v34 = *(id *)(a2 + 8 * v8);
      v13 = v34;
      a5(&v33, &v34);
      if (v5)
      {
        swift_release(v6);
        swift_unknownObjectRelease(a1);

        return (uint64_t)v6;
      }
      v14 = v33;
      v16 = sub_1002C6A08(v33);
      v17 = v6[2];
      v18 = (v15 & 1) == 0;
      v19 = v17 + v18;
      if (__OFADD__(v17, v18))
        goto LABEL_20;
      v20 = v15;
      if (v6[3] < v19)
      {
        sub_1002CE504(v19, 1);
        v6 = v35;
        v19 = sub_1002C6A08(v14);
        if ((v20 & 1) != (v21 & 1))
          goto LABEL_22;
        v16 = v19;
      }
      if ((v20 & 1) != 0)
      {
        v9 = (_QWORD *)(v6[7] + 8 * v16);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v19);
        v11 = *(_QWORD *)((*v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v10 = *(_QWORD *)((*v9 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v11 >= v10 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1);
        v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v13);
        specialized Array._endMutation()(v12);
      }
      else
      {
        v22 = sub_10001A630((uint64_t *)&unk_10083AD90);
        v23 = swift_allocObject(v22, 40, 7);
        *(_OWORD *)(v23 + 16) = xmmword_1006A7330;
        *(_QWORD *)(v23 + 32) = v13;
        v32 = v23;
        specialized Array._endMutation()(v23);
        v6[(v16 >> 6) + 8] |= 1 << v16;
        v24 = 8 * v16;
        *(_QWORD *)(v6[6] + v24) = v14;
        *(_QWORD *)(v6[7] + v24) = v32;
        v25 = v6[2];
        v26 = __OFADD__(v25, 1);
        v27 = v25 + 1;
        if (v26)
          goto LABEL_21;
        v6[2] = v27;
      }
      if (v7 == ++v8)
        goto LABEL_2;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
    __break(1u);
  }
  return result;
}

void sub_100514BD4(_QWORD *a1)
{
  _QWORD *v2;
  char v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = (_QWORD *)*a1;
  swift_isUniquelyReferenced_nonNull_native(*a1);
  if ((v3 & 1) == 0)
    v2 = (_QWORD *)sub_1001D60C0(v2);
  v4 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v4;
  sub_100516898(v5);
  *a1 = v2;
}

void sub_100514C3C(unint64_t a1@<X1>, unint64_t a2@<X2>, void *a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  char *v53;
  __n128 v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t *v58;
  _QWORD *v59;
  int v60;
  __n128 v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  __n128 v65;
  char *v66;
  char *v67;
  __n128 v68;
  char *v69;
  BOOL v70;
  char *v71;
  uint64_t v72;
  uint64_t *v73;
  int v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  __n128 v79;
  uint64_t v80;
  void *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int64_t v86;
  int64_t v87;
  int v88;
  int64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  BOOL v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(char *, uint64_t);
  char *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __n128 v121;
  unint64_t v122;
  char *v123;
  __n128 v124;
  _QWORD *v125;
  uint64_t *v126;
  uint64_t *v127;
  int v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  __n128 v138;
  uint64_t (*v139)(char *, uint64_t, uint64_t, __n128);
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int64_t v143;
  int64_t v144;
  int v145;
  int64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  uint64_t Configuration;
  uint64_t *v191;
  char *v192;
  char *v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  char *v197;
  char *v198;
  unint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  char *v203;
  char *v204;
  char *v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;

  v208 = a4;
  v189 = a3;
  v199 = a2;
  v187 = a5;
  v188 = type metadata accessor for REMRemindersListDataView.ScheduledDateBucketsModel(0);
  v196 = *(_QWORD *)(v188 - 8);
  __chkstk_darwin(v188);
  v203 = (char *)&v175 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v204 = (char *)&v175 - v8;
  v9 = sub_10001A630(&qword_100839A98);
  v10 = __chkstk_darwin(v9);
  v186 = (uint64_t)&v175 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for REMRemindersListDataView.ScheduledDateBucketsModel.Day(0, v10);
  v13 = *(_QWORD *)(v12 - 8);
  v212 = v12;
  v213 = v13;
  __chkstk_darwin(v12);
  v210 = (char *)&v175 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v211 = (char *)&v175 - v16;
  v18 = __chkstk_darwin(v17);
  v192 = (char *)&v175 - v19;
  v202 = type metadata accessor for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket(0, v18);
  v207 = *(_QWORD *)(v202 - 8);
  __chkstk_darwin(v202);
  v193 = (char *)&v175 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v195 = (char *)&v175 - v22;
  __chkstk_darwin(v23);
  v200 = (char *)&v175 - v24;
  __chkstk_darwin(v25);
  v201 = (char *)&v175 - v26;
  v194 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch(0);
  v198 = *(char **)(v194 - 8);
  __chkstk_darwin(v194);
  v191 = (uint64_t *)((char *)&v175 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v28);
  v197 = (char *)&v175 - v29;
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v30 = *(_QWORD *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  v32 = (char *)&v175 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v34 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v36 = (char *)&v175 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v39 = (char *)&v175 - v38;
  v40 = sub_10001A630(&qword_100839AA0);
  __chkstk_darwin(v40);
  v42 = (char *)&v175 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v45 = (char *)&v175 - v44;
  v206 = a1;
  v46 = v209;
  v47 = sub_100517D5C(a1, v208);
  if (v46)
    return;
  v182 = v32;
  v183 = v30;
  v180 = v42;
  v185 = v36;
  v184 = v39;
  v181 = v34;
  v209 = v33;
  v48 = v47;
  swift_bridgeObjectRetain(v47);
  v49 = v205;
  v50 = v206;
  sub_100515D54(v206, v48, (uint64_t)v45);
  v179 = v48;
  v51 = objc_msgSend(v49, "fetchResultTokenToDiffAgainst");
  v52 = (uint64_t)v184;
  sub_100493C24(v51, v50, (uint64_t)v184);
  v178 = 0;

  v53 = v182;
  v55 = REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.configuration.getter(v54);
  v56 = v197;
  REMRemindersListDataView.FetchConfiguration.remindersPrefetch.getter(v55);
  (*(void (**)(char *, uint64_t))(v183 + 8))(v53, Configuration);
  v57 = v198;
  v58 = v191;
  v59 = (_QWORD *)v194;
  (*((void (**)(uint64_t *, char *, uint64_t))v198 + 2))(v191, v56, v194);
  v60 = (*((uint64_t (**)(uint64_t *, _QWORD *))v57 + 11))(v58, v59);
  v177 = v45;
  if (v60 != enum case for REMRemindersListDataView.RemindersPrefetch.initial(_:))
  {
LABEL_38:
    v114 = v202;
    if (v60 == enum case for REMRemindersListDataView.RemindersPrefetch.updatedInserted(_:))
    {
      (*((void (**)(uint64_t *, _QWORD *))v57 + 12))(v58, v59);
      v115 = sub_10049C4C8(*v58, v52, v50, v189, 0);
      v116 = _swiftEmptyArrayStorage;
      v117 = v188;
      v118 = v196;
LABEL_83:
      v50 = (uint64_t)v203;
      v71 = v204;
      v72 = v209;
LABEL_84:
      v52 = (uint64_t)v185;
      goto LABEL_85;
    }
    v81 = v189;
    if (v60 != enum case for REMRemindersListDataView.RemindersPrefetch.initialAndDateRange(_:))
    {
      v117 = v188;
      v118 = v196;
      if (v60 != enum case for REMRemindersListDataView.RemindersPrefetch.none(_:))
        goto LABEL_99;
      v116 = _swiftEmptyArrayStorage;
      v115 = _swiftEmptyArrayStorage;
      goto LABEL_83;
    }
    (*((void (**)(uint64_t *, _QWORD *))v57 + 12))(v58, v59);
    v80 = *v58;
    v119 = sub_10001A630(&qword_100839AA8);
    sub_100128FE0((uint64_t)v58 + *(int *)(v119 + 48), v186);
    v59 = _swiftEmptyArrayStorage;
    v214 = _swiftEmptyArrayStorage;
    v205 = *(char **)(v179 + 16);
    if (!v205)
    {
LABEL_89:
      v50 = (uint64_t)v203;
      v71 = v204;
      v72 = v209;
LABEL_91:
      v173 = v206;
      v115 = sub_10049BB18(v80, (uint64_t)v59, v206, v81, 0);
      v174 = v186;
      v116 = sub_10049CB18(v186, (uint64_t)v59, v173, v81, 0);
      swift_bridgeObjectRelease();
      sub_10000882C(v174, &qword_100839A98);
      v117 = v188;
      v118 = v196;
      v59 = (_QWORD *)v194;
      goto LABEL_84;
    }
    v175 = v80;
    v120 = v207;
    v201 = (char *)(v179
                  + ((*(unsigned __int8 *)(v120 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80)));
    LODWORD(v200) = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.pastDue(_:);
    LODWORD(Configuration) = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.nextFiveDays(_:);
    LODWORD(v183) = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.day(_:);
    LODWORD(v182) = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.month(_:);
    LODWORD(v176) = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.year(_:);
    v199 = *(_QWORD *)(v207 + 72);
    v191 = *(uint64_t **)(v207 + 16);
    v121 = swift_bridgeObjectRetain(v179);
    v122 = 0;
    v50 = (uint64_t)v203;
    v71 = v204;
    v72 = v209;
    v123 = v195;
    while (1)
    {
      v208 = v122;
      v126 = v191;
      ((void (*)(char *, char *, uint64_t, __n128))v191)(v123, &v201[v199 * v122], v114, v121);
      v127 = (uint64_t *)v193;
      ((void (*)(char *, char *, uint64_t))v126)(v193, v123, v114);
      v128 = (*(uint64_t (**)(uint64_t *, uint64_t))(v120 + 88))(v127, v114);
      if (v128 == (_DWORD)v200)
        break;
      v132 = v212;
      v131 = v213;
      v133 = v192;
      if (v128 == (_DWORD)Configuration)
        goto LABEL_48;
      if (v128 != (_DWORD)v183)
      {
        if (v128 == (_DWORD)v182)
        {
LABEL_48:
          v120 = v207;
          (*(void (**)(uint64_t *, uint64_t))(v207 + 96))(v127, v202);
          v130 = *(uint64_t *)((char *)v127 + *(int *)(sub_10001A630(&qword_10084E150) + 48));
          v134 = type metadata accessor for Date(0);
          (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v134 - 8) + 8))(v127, v134);
          v129 = v195;
        }
        else
        {
          v120 = v207;
          v129 = v195;
          if (v128 != (_DWORD)v176)
            goto LABEL_100;
          (*(void (**)(uint64_t *, uint64_t))(v207 + 96))(v127, v202);
          v130 = *(uint64_t *)((char *)v127 + *(int *)(sub_10001A630(&qword_10084E150) + 48));
          v165 = type metadata accessor for Date(0);
          (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v165 - 8) + 8))(v127, v165);
        }
LABEL_49:
        v135 = *(_QWORD *)(v130 + 16);
        v136 = v210;
        if (v135)
        {
          v137 = v130 + ((*(unsigned __int8 *)(v131 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80));
          v138 = swift_bridgeObjectRetain(v130);
          v211 = *(char **)(v131 + 72);
          v139 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v131 + 16);
          v125 = _swiftEmptyArrayStorage;
          while (1)
          {
            v140 = v212;
            v141 = v139(v136, v137, v212, v138);
            v59 = (_QWORD *)REMRemindersListDataView.ScheduledDateBucketsModel.Day.reminders.getter(v141);
            (*(void (**)(char *, uint64_t))(v213 + 8))(v136, v140);
            v142 = v59[2];
            v143 = v125[2];
            v144 = v143 + v142;
            if (__OFADD__(v143, v142))
              goto LABEL_94;
            swift_isUniquelyReferenced_nonNull_native(v125);
            if (v145 && v144 <= v125[3] >> 1)
            {
              if (v59[2])
                goto LABEL_62;
            }
            else
            {
              if (v143 <= v144)
                v146 = v143 + v142;
              else
                v146 = v143;
              v125 = (_QWORD *)sub_1002C8478(v145, v146, 1, (unint64_t)v125);
              if (v59[2])
              {
LABEL_62:
                v147 = v125[2];
                v148 = (v125[3] >> 1) - v147;
                v149 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
                if (v148 < v142)
                  goto LABEL_96;
                v150 = *(_QWORD *)(v149 - 8);
                v151 = (*(unsigned __int8 *)(v150 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v150 + 80);
                v152 = *(_QWORD *)(v150 + 72);
                v153 = (char *)v125 + v151 + v152 * v147;
                v154 = (char *)v59 + v151;
                v155 = v152 * v142;
                v156 = &v153[v155];
                v157 = &v154[v155];
                if (v154 < v156 && v153 < v157)
                  goto LABEL_98;
                swift_arrayInitWithCopy(v153);
                if (v142)
                {
                  v159 = v125[2];
                  v103 = __OFADD__(v159, v142);
                  v160 = v159 + v142;
                  if (v103)
                    goto LABEL_97;
                  v125[2] = v160;
                }
                goto LABEL_52;
              }
            }
            if (v142)
              goto LABEL_95;
LABEL_52:
            v138 = swift_bridgeObjectRelease();
            v136 = v210;
            v137 += (uint64_t)v211;
            if (!--v135)
            {
              v124 = swift_bridgeObjectRelease_n(v130, 2);
              v50 = (uint64_t)v203;
              v71 = v204;
              v72 = v209;
              v120 = v207;
              goto LABEL_72;
            }
          }
        }
        v124 = swift_bridgeObjectRelease();
        v125 = _swiftEmptyArrayStorage;
        goto LABEL_44;
      }
      v161 = v207;
      (*(void (**)(uint64_t *, uint64_t))(v207 + 96))(v127, v202);
      v162 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v131 + 32))(v133, v127, v132);
      v163 = REMRemindersListDataView.ScheduledDateBucketsModel.Day.reminders.getter(v162);
      v164 = v132;
      v125 = (_QWORD *)v163;
      v120 = v161;
      (*(void (**)(char *, uint64_t))(v131 + 8))(v133, v164);
LABEL_72:
      v129 = v195;
LABEL_44:
      v122 = v208 + 1;
      v114 = v202;
      (*(void (**)(char *, uint64_t, __n128))(v120 + 8))(v129, v202, v124);
      v123 = v129;
      sub_1001E23F0((uint64_t)v125);
      v120 = v207;
      if ((char *)v122 == v205)
      {
        swift_bridgeObjectRelease();
        v59 = v214;
        v81 = v189;
        v80 = v175;
        goto LABEL_91;
      }
    }
    v129 = v123;
    (*(void (**)(uint64_t *, uint64_t))(v120 + 96))(v127, v114);
    v130 = *v127;
    v131 = v213;
    goto LABEL_49;
  }
  (*((void (**)(uint64_t *, _QWORD *))v57 + 12))(v58, v59);
  v62 = *v58;
  v63 = _swiftEmptyArrayStorage;
  v214 = _swiftEmptyArrayStorage;
  v64 = v202;
  v205 = *(char **)(v179 + 16);
  if (!v205)
  {
    v117 = v188;
    v118 = v196;
    v50 = (uint64_t)v203;
    v71 = v204;
    v72 = v209;
    v52 = (uint64_t)v185;
LABEL_80:
    v115 = sub_10049BB18(v62, (uint64_t)v63, v206, v189, 0);
    v61 = swift_bridgeObjectRelease();
    v116 = _swiftEmptyArrayStorage;
    v59 = (_QWORD *)v194;
LABEL_85:
    (*((void (**)(char *, _QWORD *, __n128))v198 + 1))(v197, v59, v61);
    v166 = (uint64_t)v180;
    sub_100008868((uint64_t)v177, (uint64_t)v180, &qword_100839AA0);
    REMRemindersListDataView.ScheduledDateBucketsModel.init(buckets:remindersCount:prefetchedReminders:prefetchedDueReminders:)(v179, v166, v115, v116);
    (*(void (**)(uint64_t, char *, uint64_t))(v118 + 16))(v50, v71, v117);
    v167 = v181;
    v168 = v52;
    v169 = v52;
    v170 = (uint64_t)v184;
    (*(void (**)(uint64_t, char *, uint64_t))(v181 + 16))(v168, v184, v72);
    v171 = sub_10009FC50(&qword_10084E140, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ScheduledDateBucketsModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.ScheduledDateBucketsModel);
    v172 = sub_10009FC50(&qword_10084E148, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ScheduledDateBucketsModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.ScheduledDateBucketsModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)(v50, v169, v117, v171, v172);
    (*(void (**)(char *, uint64_t))(v196 + 8))(v71, v117);
    (*(void (**)(uint64_t, uint64_t))(v167 + 8))(v170, v72);
    sub_10000882C((uint64_t)v177, &qword_100839AA0);
    swift_bridgeObjectRelease();
    return;
  }
  v176 = v62;
  v59 = (_QWORD *)v207;
  v199 = v179 + ((*((unsigned __int8 *)v59 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v59 + 80));
  LODWORD(v195) = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.pastDue(_:);
  LODWORD(Configuration) = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.nextFiveDays(_:);
  LODWORD(v186) = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.day(_:);
  LODWORD(v183) = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.month(_:);
  LODWORD(v182) = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.year(_:);
  v193 = *(char **)(v207 + 72);
  v191 = *(uint64_t **)(v207 + 16);
  v65 = swift_bridgeObjectRetain(v179);
  v66 = 0;
  v52 = (uint64_t)v185;
  v57 = v200;
  v67 = v201;
  while (1)
  {
    v210 = v66;
    v73 = v191;
    ((void (*)(char *, unint64_t, uint64_t, __n128))v191)(v67, v199 + (_QWORD)v193 * (_QWORD)v66, v64, v65);
    ((void (*)(char *, char *, uint64_t))v73)(v57, v67, v64);
    v74 = ((uint64_t (*)(char *, uint64_t))v59[11])(v57, v64);
    if (v74 == (_DWORD)v195)
    {
      ((void (*)(char *, uint64_t))v59[12])(v57, v64);
      v75 = *(_QWORD *)v57;
      v76 = v211;
      v58 = *(uint64_t **)(*(_QWORD *)v57 + 16);
      if (v58)
        break;
      goto LABEL_32;
    }
    v76 = v211;
    if (v74 != (_DWORD)Configuration)
    {
      if (v74 == (_DWORD)v186)
      {
        ((void (*)(char *, uint64_t))v59[12])(v57, v64);
        v106 = v213;
        v107 = v192;
        v108 = v57;
        v109 = v212;
        v110 = (*(uint64_t (**)(char *, char *, uint64_t))(v213 + 32))(v192, v108, v212);
        v82 = (_QWORD *)REMRemindersListDataView.ScheduledDateBucketsModel.Day.reminders.getter(v110);
        v111 = *(void (**)(char *, uint64_t))(v106 + 8);
        v64 = v202;
        v112 = v107;
        v59 = (_QWORD *)v207;
        v113 = v109;
        v57 = v200;
        v111(v112, v113);
        goto LABEL_6;
      }
      if (v74 != (_DWORD)v183 && v74 != (_DWORD)v182)
      {
        v60 = _diagnoseUnexpectedEnumCase<A>(type:)(v64, v64);
        __break(1u);
        goto LABEL_38;
      }
    }
    ((void (*)(char *, uint64_t))v59[12])(v57, v64);
    v75 = *(_QWORD *)&v57[*(int *)(sub_10001A630(&qword_10084E150) + 48)];
    v105 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v105 - 8) + 8))(v57, v105);
    v58 = *(uint64_t **)(v75 + 16);
    if (v58)
      break;
LABEL_32:
    v68 = swift_bridgeObjectRelease();
    v82 = _swiftEmptyArrayStorage;
LABEL_6:
    v69 = v210 + 1;
    v67 = v201;
    ((void (*)(char *, uint64_t, __n128))v59[1])(v201, v64, v68);
    sub_1001E23F0((uint64_t)v82);
    v66 = v69;
    v59 = (_QWORD *)v207;
    v70 = v69 == v205;
    v50 = (uint64_t)v203;
    v71 = v204;
    v72 = v209;
    if (v70)
    {
      swift_bridgeObjectRelease();
      v63 = v214;
      v62 = v176;
      v117 = v188;
      v118 = v196;
      goto LABEL_80;
    }
  }
  v77 = v213;
  v78 = v75 + ((*(unsigned __int8 *)(v213 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v213 + 80));
  v208 = v75;
  v79 = swift_bridgeObjectRetain(v75);
  v80 = *(_QWORD *)(v77 + 72);
  v81 = *(void **)(v77 + 16);
  v82 = _swiftEmptyArrayStorage;
  while (1)
  {
    v83 = v212;
    v84 = ((uint64_t (*)(char *, unint64_t, uint64_t, __n128))v81)(v76, v78, v212, v79);
    v59 = (_QWORD *)REMRemindersListDataView.ScheduledDateBucketsModel.Day.reminders.getter(v84);
    (*(void (**)(char *, uint64_t))(v213 + 8))(v76, v83);
    v85 = v59[2];
    v86 = v82[2];
    v87 = v86 + v85;
    if (__OFADD__(v86, v85))
    {
      __break(1u);
LABEL_88:
      __break(1u);
      goto LABEL_89;
    }
    swift_isUniquelyReferenced_nonNull_native(v82);
    if (v88 && v87 <= v82[3] >> 1)
    {
      if (!v59[2])
        goto LABEL_10;
    }
    else
    {
      if (v86 <= v87)
        v89 = v86 + v85;
      else
        v89 = v86;
      v82 = (_QWORD *)sub_1002C8478(v88, v89, 1, (unint64_t)v82);
      if (!v59[2])
      {
LABEL_10:
        v76 = v211;
        if (v85)
          goto LABEL_88;
        goto LABEL_11;
      }
    }
    v90 = v82[2];
    v91 = (v82[3] >> 1) - v90;
    v92 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
    if (v91 < v85)
      break;
    v93 = *(_QWORD *)(v92 - 8);
    v94 = (*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80);
    v95 = *(_QWORD *)(v93 + 72);
    v96 = (char *)v82 + v94 + v95 * v90;
    v97 = (char *)v59 + v94;
    v98 = v95 * v85;
    v99 = &v96[v98];
    v100 = &v97[v98];
    v101 = v97 >= v99 || v96 >= v100;
    v76 = v211;
    if (!v101)
      goto LABEL_98;
    swift_arrayInitWithCopy(v96);
    if (v85)
    {
      v102 = v82[2];
      v103 = __OFADD__(v102, v85);
      v104 = v102 + v85;
      if (v103)
        goto LABEL_93;
      v82[2] = v104;
    }
LABEL_11:
    v79 = swift_bridgeObjectRelease();
    v78 += v80;
    v58 = (uint64_t *)((char *)v58 - 1);
    if (!v58)
    {
      v68 = swift_bridgeObjectRelease_n(v208, 2);
      v52 = (uint64_t)v185;
      v64 = v202;
      v59 = (_QWORD *)v207;
      v57 = v200;
      goto LABEL_6;
    }
  }
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
LABEL_99:
  swift_bridgeObjectRelease();
  _diagnoseUnexpectedEnumCase<A>(type:)(v59, v59);
  __break(1u);
LABEL_100:
  _diagnoseUnexpectedEnumCase<A>(type:)(v202, v202);
  __break(1u);
}

void sub_100515D54(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Configuration;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(char *, unint64_t, uint64_t);
  uint64_t i;
  char v58;
  BOOL v59;
  __n128 v60;
  void (*v61)(char *, uint64_t);
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(char *, unint64_t, uint64_t);
  char *v71;
  uint64_t v72;
  char v73;
  char *v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  id v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *, char *, uint64_t);
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t (*v115)(char *, uint64_t, uint64_t, __n128);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  v97 = a1;
  v5 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
  v122 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v111 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v90 - v9;
  v113 = type metadata accessor for REMRemindersListDataView.ScheduledDateBucketsModel.Day(0, v8);
  v119 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v98 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v12);
  v112 = (char *)&v90 - v14;
  v15 = type metadata accessor for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket(0, v13);
  v109 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v108 = (char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v114 = (char *)&v90 - v18;
  v95 = _s10PredicatesOMa(0);
  __chkstk_darwin(v95);
  v96 = (char *)&v90 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v21 = *(_QWORD *)(Configuration - 8);
  v22 = __chkstk_darwin(Configuration);
  v24 = (char *)&v90 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.configuration.getter(v22);
  v26 = REMRemindersListDataView.FetchConfiguration.countCompleted.getter(v25);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v24, Configuration);
  if ((v26 & 1) == 0)
  {
    v77 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(a3, 1, 1, v77);
    return;
  }
  v93 = a3;
  v102 = *(_QWORD *)(a2 + 16);
  if (!v102)
  {
LABEL_43:
    v30 = 0;
LABEL_45:
    v78 = (uint64_t)v96;
    swift_storeEnumTagMultiPayload(v96, v95, 47);
    sub_10000D2C0();
    v80 = v79;
    sub_1000CACA8(v78);
    v81 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    v82 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    v83 = objc_msgSend((id)swift_getObjCClassFromMetadata(v81), "entity");
    objc_msgSend(v82, "setEntity:", v83);

    objc_msgSend(v82, "setAffectedStores:", 0);
    objc_msgSend(v82, "setPredicate:", v80);
    v84 = v100;
    v85 = NSManagedObjectContext.count<A>(for:)(v82, v81);
    v86 = v93;
    if (v84)
    {

    }
    else
    {
      v87 = v85;

      REMRemindersListDataView.CountByCompleted.init(completed:incomplete:)(v87, v30, v88);
      v89 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 56))(v86, 0, 1, v89);
    }
    return;
  }
  v106 = a2 + ((*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80));
  v105 = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.pastDue(_:);
  v99 = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.nextFiveDays(_:);
  v94 = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.day(_:);
  v92 = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.month(_:);
  v91 = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.year(_:);
  v27 = *(_QWORD *)(v109 + 72);
  v103 = *(void (**)(char *, char *, uint64_t))(v109 + 16);
  v104 = v27;
  v90 = a2;
  v28 = swift_bridgeObjectRetain(a2);
  v29 = 0;
  v30 = 0;
  v32 = v112;
  v31 = v113;
  v33 = v15;
  v107 = v15;
  v34 = v114;
  while (1)
  {
    v110 = v29;
    v37 = v106 + v104 * v29;
    v38 = v103;
    ((void (*)(char *, uint64_t, uint64_t, __n128))v103)(v34, v37, v33, v28);
    v39 = v108;
    v38(v108, v34, v33);
    v40 = v109;
    v41 = (*(uint64_t (**)(char *, uint64_t))(v109 + 88))(v39, v33);
    if (v41 != v105)
      break;
    (*(void (**)(char *, uint64_t))(v40 + 96))(v39, v33);
    v42 = *(_QWORD *)v39;
LABEL_10:
    v45 = v110;
LABEL_11:
    v118 = *(_QWORD *)(v42 + 16);
    if (v118)
    {
      v46 = v119;
      v117 = v42 + ((*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80));
      v101 = v42;
      v47 = swift_bridgeObjectRetain(v42);
      v48 = 0;
      v49 = *(_QWORD *)(v46 + 72);
      v115 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v46 + 16);
      v116 = v49;
      while (1)
      {
        v50 = v115(v32, v117 + v116 * v48, v31, v47);
        v51 = REMRemindersListDataView.ScheduledDateBucketsModel.Day.reminders.getter(v50);
        v52 = *(_QWORD *)(v51 + 16);
        if (v52)
        {
          v120 = v51;
          v121 = v30;
          v53 = 0;
          v54 = v51 + ((*(unsigned __int8 *)(v122 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80));
          v55 = *(_QWORD *)(v122 + 72);
          v56 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v122 + 16);
          for (i = v56(v10, v54, v5); ; i = v56(v10, v54, v5))
          {
            v58 = REMRemindersListDataView.ReminderLite.isCompleted.getter(i);
            (*(void (**)(char *, uint64_t))(v122 + 8))(v10, v5);
            if ((v58 & 1) == 0)
            {
              v59 = __OFADD__(v53++, 1);
              if (v59)
              {
                __break(1u);
                goto LABEL_43;
              }
            }
            v54 += v55;
            if (!--v52)
              break;
          }
          v60 = swift_bridgeObjectRelease();
          v32 = v112;
          v31 = v113;
          v30 = v121;
        }
        else
        {
          v60 = swift_bridgeObjectRelease();
          v53 = 0;
        }
        v59 = __OFADD__(v30, v53);
        v30 += v53;
        v34 = v114;
        if (v59)
          break;
        ++v48;
        (*(void (**)(char *, uint64_t, __n128))(v119 + 8))(v32, v31, v60);
        if (v48 == v118)
        {
          v35 = swift_bridgeObjectRelease_n(v101, 2);
          v33 = v107;
          goto LABEL_41;
        }
      }
      __break(1u);
      goto LABEL_50;
    }
    v35 = swift_bridgeObjectRelease();
    v36 = v109;
    v33 = v107;
LABEL_5:
    v29 = v45 + 1;
    (*(void (**)(char *, uint64_t, __n128))(v36 + 8))(v34, v33, v35);
    if (v29 == v102)
    {
      swift_bridgeObjectRelease();
      goto LABEL_45;
    }
  }
  if (v41 == v99)
  {
LABEL_9:
    v43 = v108;
    (*(void (**)(char *, uint64_t))(v40 + 96))(v108, v107);
    v42 = *(_QWORD *)&v43[*(int *)(sub_10001A630(&qword_10084E150) + 48)];
    v44 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v43, v44);
    goto LABEL_10;
  }
  if (v41 != v94)
  {
    if (v41 != v92)
    {
      v45 = v110;
      if (v41 != v91)
        goto LABEL_52;
      v74 = v108;
      (*(void (**)(char *, uint64_t))(v109 + 96))(v108, v107);
      v42 = *(_QWORD *)&v74[*(int *)(sub_10001A630(&qword_10084E150) + 48)];
      v75 = type metadata accessor for Date(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v75 - 8) + 8))(v74, v75);
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  v61 = *(void (**)(char *, uint64_t))(v40 + 96);
  v63 = v107;
  v62 = v108;
  v61(v108, v107);
  v64 = (*(uint64_t (**)(char *, char *, uint64_t))(v119 + 32))(v98, v62, v31);
  v65 = REMRemindersListDataView.ScheduledDateBucketsModel.Day.reminders.getter(v64);
  v66 = *(_QWORD *)(v65 + 16);
  if (!v66)
  {
    v76 = swift_bridgeObjectRelease();
    v67 = 0;
    v33 = v63;
LABEL_39:
    v59 = __OFADD__(v30, v67);
    v30 += v67;
    v34 = v114;
    if (v59)
      goto LABEL_51;
    (*(void (**)(char *, uint64_t, __n128))(v119 + 8))(v98, v31, v76);
LABEL_41:
    v36 = v109;
    v45 = v110;
    goto LABEL_5;
  }
  v120 = v65;
  v121 = v30;
  v67 = 0;
  v68 = v65 + ((*(unsigned __int8 *)(v122 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80));
  v69 = *(_QWORD *)(v122 + 72);
  v70 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v122 + 16);
  while (1)
  {
    v71 = v111;
    v72 = v70(v111, v68, v5);
    v73 = REMRemindersListDataView.ReminderLite.isCompleted.getter(v72);
    (*(void (**)(char *, uint64_t))(v122 + 8))(v71, v5);
    if ((v73 & 1) == 0)
    {
      v59 = __OFADD__(v67++, 1);
      if (v59)
        break;
    }
    v68 += v69;
    if (!--v66)
    {
      v76 = swift_bridgeObjectRelease();
      v32 = v112;
      v31 = v113;
      v30 = v121;
      v33 = v107;
      goto LABEL_39;
    }
  }
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  _diagnoseUnexpectedEnumCase<A>(type:)(v107, v107);
  __break(1u);
}

uint64_t sub_10051658C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = _s9UtilitiesO12SortingStyleOMa(0);
  sub_10009EF3C(v0, qword_10084E100);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084E100);
  v2 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  v3 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(v1, v2, v3);
  return swift_storeEnumTagMultiPayload(v1, v0, 0);
}

uint64_t sub_100516610@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  id v20;
  void *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;

  v28 = a3;
  v29 = a2;
  v30 = a4;
  v5 = type metadata accessor for Calendar.Component(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v17 = __chkstk_darwin(v16).n128_u64[0];
  v19 = (char *)&v27 - v18;
  v20 = objc_msgSend(*a1, "displayDateDate", v17);
  if (!v20)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    goto LABEL_5;
  }
  v21 = v20;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v20);

  v22 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v22(v11, v15, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
LABEL_5:
    sub_10000882C((uint64_t)v11, (uint64_t *)&unk_1008380D0);
    v26 = v5;
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for Calendar.Component.year(_:), v5);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v28, v12);
    v24 = Calendar.component(_:from:)(v8, v15);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v26);
    goto LABEL_6;
  }
  v22(v19, v11, v12);
  v23 = v5;
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for Calendar.Component.year(_:), v5);
  v24 = Calendar.component(_:from:)(v8, v19);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v23);
  result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v19, v12);
LABEL_6:
  *v30 = v24;
  return result;
}

void sub_100516898(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  Swift::Int v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  char v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t i;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  _QWORD *v106;
  Swift::Int v107;
  Swift::Int v108;
  uint64_t v109;
  char *__dst;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_136;
    if ((unint64_t)v3 >= 2)
    {
      v87 = 0;
      v88 = *a1;
      for (i = 1; i != v3; ++i)
      {
        v90 = *(_QWORD *)(v88 + 16 * i);
        v91 = v87;
        do
        {
          if (v90 >= *(_QWORD *)(v88 + v91))
            break;
          if (!v88)
            goto LABEL_140;
          v92 = (_QWORD *)(v88 + v91);
          v93 = *(_QWORD *)(v88 + v91 + 24);
          *(_OWORD *)(v88 + v91 + 16) = *(_OWORD *)(v88 + v91);
          *v92 = v90;
          v92[1] = v93;
          v91 -= 16;
        }
        while (v91 != -16);
        v87 += 16;
      }
    }
    return;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_145;
  v6 = v4;
  v104 = a1;
  if (v3 < 2)
  {
    v10 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v14 = _swiftEmptyArrayStorage[2];
      v13 = (char *)_swiftEmptyArrayStorage;
LABEL_102:
      v94 = v13;
      v106 = v10;
      if (v14 >= 2)
      {
        v95 = *v104;
        do
        {
          v96 = v14 - 2;
          if (v14 < 2)
            goto LABEL_131;
          if (!v95)
            goto LABEL_144;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v14 + 24];
          sub_100516F68((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(_QWORD *)&v94[16 * v14 + 16]), v95 + 16 * v99, __dst);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_132;
          swift_isUniquelyReferenced_nonNull_native(v97);
          if ((v100 & 1) == 0)
            v97 = sub_1001D52E4((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_133;
          v101 = &v97[16 * v96 + 32];
          *(_QWORD *)v101 = v98;
          *((_QWORD *)v101 + 1) = v99;
          v102 = *((_QWORD *)v97 + 2);
          if (v14 > v102)
            goto LABEL_134;
          memmove(&v97[16 * v14 + 16], &v97[16 * v14 + 32], 16 * (v102 - v14));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v102 - 1;
          v14 = v102 - 1;
        }
        while (v102 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      v106[2] = 0;
      swift_bridgeObjectRelease();
      return;
    }
    v106 = _swiftEmptyArrayStorage;
  }
  else
  {
    v7 = v5 >> 1;
    v8 = sub_10001A630(&qword_10083F560);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(_QWORD *)(v9 + 16) = v7;
    v106 = (_QWORD *)v9;
    __dst = (char *)(v9 + 32);
  }
  v11 = 0;
  v12 = *a1;
  v105 = *a1 + 32;
  v103 = *a1 - 16;
  v13 = (char *)_swiftEmptyArrayStorage;
  v107 = v6;
  v108 = v3;
  v109 = v12;
  while (1)
  {
    v15 = v11++;
    if (v11 < v3)
    {
      v16 = *(_QWORD *)(v12 + 16 * v11);
      v17 = 16 * v15;
      v18 = *(_QWORD *)(v12 + 16 * v15);
      v11 = v15 + 2;
      if (v15 + 2 < v3)
      {
        v19 = (uint64_t *)(v105 + 16 * v15);
        v20 = v16;
        while (1)
        {
          v22 = *v19;
          v19 += 2;
          v21 = v22;
          if (v16 < v18 == v22 >= v20)
            break;
          ++v11;
          v20 = v21;
          if (v3 == v11)
          {
            v11 = v3;
            break;
          }
        }
      }
      if (v16 < v18)
      {
        if (v11 < v15)
          goto LABEL_137;
        if (v15 < v11)
        {
          v23 = 16 * v11;
          v24 = v11;
          v25 = v15;
          do
          {
            if (v25 != --v24)
            {
              if (!v12)
                goto LABEL_143;
              v26 = v12 + v23;
              v27 = *(_QWORD *)(v12 + v17);
              v28 = *(_QWORD *)(v12 + v17 + 8);
              *(_OWORD *)(v12 + v17) = *(_OWORD *)(v12 + v23 - 16);
              *(_QWORD *)(v26 - 16) = v27;
              *(_QWORD *)(v26 - 8) = v28;
            }
            ++v25;
            v23 -= 16;
            v17 += 16;
          }
          while (v25 < v24);
        }
      }
    }
    if (v11 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v11, v15))
      goto LABEL_135;
    if (v11 - v15 >= v6)
      goto LABEL_46;
    v29 = v15 + v6;
    if (__OFADD__(v15, v6))
      goto LABEL_138;
    if (v29 >= v3)
      v29 = v3;
    if (v29 < v15)
      break;
    if (v11 != v29)
    {
      v30 = v103 + 16 * v11;
      do
      {
        v31 = *(_QWORD *)(v12 + 16 * v11);
        v32 = v15;
        v33 = v30;
        do
        {
          if (v31 >= *(_QWORD *)v33)
            break;
          if (!v12)
            goto LABEL_141;
          v34 = *(_QWORD *)(v33 + 24);
          *(_OWORD *)(v33 + 16) = *(_OWORD *)v33;
          *(_QWORD *)v33 = v31;
          *(_QWORD *)(v33 + 8) = v34;
          v33 -= 16;
          ++v32;
        }
        while (v11 != v32);
        ++v11;
        v30 += 16;
      }
      while (v11 != v29);
      v11 = v29;
    }
LABEL_46:
    if (v11 < v15)
      goto LABEL_130;
    swift_isUniquelyReferenced_nonNull_native(v13);
    if ((v35 & 1) == 0)
      v13 = sub_1001D4DF0(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    v37 = *((_QWORD *)v13 + 2);
    v36 = *((_QWORD *)v13 + 3);
    v14 = v37 + 1;
    v12 = v109;
    if (v37 >= v36 >> 1)
    {
      v86 = sub_1001D4DF0((char *)(v36 > 1), v37 + 1, 1, v13);
      v12 = v109;
      v13 = v86;
    }
    *((_QWORD *)v13 + 2) = v14;
    v38 = v13 + 32;
    v39 = &v13[16 * v37 + 32];
    *(_QWORD *)v39 = v15;
    *((_QWORD *)v39 + 1) = v11;
    if (v37)
    {
      while (1)
      {
        v40 = v14 - 1;
        if (v14 >= 4)
        {
          v45 = &v38[16 * v14];
          v46 = *((_QWORD *)v45 - 8);
          v47 = *((_QWORD *)v45 - 7);
          v51 = __OFSUB__(v47, v46);
          v48 = v47 - v46;
          if (v51)
            goto LABEL_119;
          v50 = *((_QWORD *)v45 - 6);
          v49 = *((_QWORD *)v45 - 5);
          v51 = __OFSUB__(v49, v50);
          v43 = v49 - v50;
          v44 = v51;
          if (v51)
            goto LABEL_120;
          v52 = v14 - 2;
          v53 = &v38[16 * v14 - 32];
          v55 = *(_QWORD *)v53;
          v54 = *((_QWORD *)v53 + 1);
          v51 = __OFSUB__(v54, v55);
          v56 = v54 - v55;
          if (v51)
            goto LABEL_122;
          v51 = __OFADD__(v43, v56);
          v57 = v43 + v56;
          if (v51)
            goto LABEL_125;
          if (v57 >= v48)
          {
            v75 = &v38[16 * v40];
            v77 = *(_QWORD *)v75;
            v76 = *((_QWORD *)v75 + 1);
            v51 = __OFSUB__(v76, v77);
            v78 = v76 - v77;
            if (v51)
              goto LABEL_129;
            v68 = v43 < v78;
            goto LABEL_83;
          }
        }
        else
        {
          if (v14 != 3)
          {
            v69 = *((_QWORD *)v13 + 4);
            v70 = *((_QWORD *)v13 + 5);
            v51 = __OFSUB__(v70, v69);
            v62 = v70 - v69;
            v63 = v51;
            goto LABEL_77;
          }
          v42 = *((_QWORD *)v13 + 4);
          v41 = *((_QWORD *)v13 + 5);
          v51 = __OFSUB__(v41, v42);
          v43 = v41 - v42;
          v44 = v51;
        }
        if ((v44 & 1) != 0)
          goto LABEL_121;
        v52 = v14 - 2;
        v58 = &v38[16 * v14 - 32];
        v60 = *(_QWORD *)v58;
        v59 = *((_QWORD *)v58 + 1);
        v61 = __OFSUB__(v59, v60);
        v62 = v59 - v60;
        v63 = v61;
        if (v61)
          goto LABEL_124;
        v64 = &v38[16 * v40];
        v66 = *(_QWORD *)v64;
        v65 = *((_QWORD *)v64 + 1);
        v51 = __OFSUB__(v65, v66);
        v67 = v65 - v66;
        if (v51)
          goto LABEL_127;
        if (__OFADD__(v62, v67))
          goto LABEL_128;
        if (v62 + v67 >= v43)
        {
          v68 = v43 < v67;
LABEL_83:
          if (v68)
            v40 = v52;
          goto LABEL_85;
        }
LABEL_77:
        if ((v63 & 1) != 0)
          goto LABEL_123;
        v71 = &v38[16 * v40];
        v73 = *(_QWORD *)v71;
        v72 = *((_QWORD *)v71 + 1);
        v51 = __OFSUB__(v72, v73);
        v74 = v72 - v73;
        if (v51)
          goto LABEL_126;
        if (v74 < v62)
          goto LABEL_15;
LABEL_85:
        v79 = v40 - 1;
        if (v40 - 1 >= v14)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v12)
          goto LABEL_142;
        v80 = v13;
        v81 = &v38[16 * v79];
        v82 = *(_QWORD *)v81;
        v83 = &v38[16 * v40];
        v84 = *((_QWORD *)v83 + 1);
        sub_100516F68((char *)(v12 + 16 * *(_QWORD *)v81), (char *)(v12 + 16 * *(_QWORD *)v83), v12 + 16 * v84, __dst);
        if (v1)
          goto LABEL_93;
        if (v84 < v82)
          goto LABEL_116;
        if (v40 > *((_QWORD *)v80 + 2))
          goto LABEL_117;
        *(_QWORD *)v81 = v82;
        *(_QWORD *)&v38[16 * v79 + 8] = v84;
        v85 = *((_QWORD *)v80 + 2);
        if (v40 >= v85)
          goto LABEL_118;
        v13 = v80;
        v14 = v85 - 1;
        memmove(&v38[16 * v40], v83 + 16, 16 * (v85 - 1 - v40));
        *((_QWORD *)v80 + 2) = v85 - 1;
        v12 = v109;
        if (v85 <= 2)
          goto LABEL_15;
      }
    }
    v14 = 1;
LABEL_15:
    v6 = v107;
    v3 = v108;
    if (v11 >= v108)
    {
      v10 = v106;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

uint64_t sub_100516F68(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v16 = &v4[16 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v17 = (char *)(a3 - 16);
        v18 = v6;
        while (1)
        {
          v19 = v17 + 16;
          v20 = *((_QWORD *)v18 - 2);
          v18 -= 16;
          if (*((_QWORD *)v16 - 2) >= v20)
          {
            v22 = v16 - 16;
            if (v19 < v16 || v17 >= v16 || v19 != v16)
              *(_OWORD *)v17 = *((_OWORD *)v16 - 1);
            v18 = v6;
            v16 -= 16;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v19 != v6 || v17 >= v6)
              *(_OWORD *)v17 = *(_OWORD *)v18;
            v24 = v18;
            if (v18 <= v7)
              goto LABEL_42;
          }
          v17 -= 16;
          v6 = v18;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        if (*(_QWORD *)v6 >= *(_QWORD *)v4)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v23 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 16;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    sub_1001D4FB4((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_1005171E0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char v24;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v28 = a5;
  v29 = a2;
  v26 = a1;
  v7 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v7);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)v25 - v15;
  v17 = a4 >> 1;
  v27 = a3;
  if (a4 >> 1 != a3)
  {
    v25[1] = a4;
    v18 = a4 & 1 | (2 * a3);
    while (1)
    {
      if (a3 >= v17)
      {
        __break(1u);
        return;
      }
      v19 = *(id *)(v29 + 8 * a3);
      v20 = objc_msgSend(v19, "displayDateDate");
      if (!v20)
        break;
      v21 = v20;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v20);

      v22 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
      v22(v9, v13, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
        goto LABEL_4;
      v22(v16, v9, v10);
      v23 = sub_10009FC50((unint64_t *)&qword_100842190, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v24 = dispatch thunk of static Comparable.< infix(_:_:)(v16, v28, v10, v23);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);

      if ((v24 & 1) == 0)
      {
        if (a3 <= v27)
        {
          v29 = 0;
          return;
        }
        if (a3 < 0)
          __break(1u);
        goto LABEL_13;
      }
LABEL_5:
      ++a3;
      v18 += 2;
      if (v17 == a3)
        goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
LABEL_4:
    sub_10000882C((uint64_t)v9, (uint64_t *)&unk_1008380D0);

    goto LABEL_5;
  }
LABEL_13:
  swift_unknownObjectRetain(v26);
}

_QWORD *sub_10051743C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, __n128 a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t, uint64_t);
  char *v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  int64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  void *v45;
  char *v46;
  char *v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  unsigned int (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t, uint64_t);
  char *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  void *v59;
  char *v60;
  char *v61;
  char v62;
  void (*v63)(char *, uint64_t);
  int64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v73;
  char *v74;
  char v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  __n128 v89;
  char *v90;
  char v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v96;
  char *v97;
  char *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  char *v121;
  void (*v122)(char *, uint64_t, uint64_t);
  id v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;

  v105 = a7;
  v108 = a2;
  v114 = a1;
  v9 = type metadata accessor for REMRemindersListDataView.ScheduledDateBucketsModel.Day(0, a5);
  v106 = *(_QWORD *)(v9 - 8);
  v107 = v9;
  __chkstk_darwin(v9);
  v98 = (char *)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v111 = (char *)&v96 - v12;
  v13 = type metadata accessor for Date(0);
  v14 = *(char **)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v96 - v18;
  __chkstk_darwin(v20);
  v124 = (char *)&v96 - v21;
  __chkstk_darwin(v22);
  v127 = (char *)&v96 - v23;
  v24 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v24);
  v103 = (uint64_t)&v96 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v119 = (uint64_t)&v96 - v27;
  __chkstk_darwin(v28);
  v118 = (uint64_t)&v96 - v29;
  __chkstk_darwin(v30);
  v32 = (char *)&v96 - v31;
  __chkstk_darwin(v33);
  v35 = (char *)&v96 - v34;
  v102 = type metadata accessor for Calendar(0);
  v101 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v113 = (char *)&v96 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter(v37);
  v38 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((_QWORD *)v14 + 7);
  v121 = v35;
  v39 = v35;
  v40 = v38;
  v38(v39, 1, 1, v13);
  v100 = a4;
  v41 = a4 >> 1;
  v126 = (a4 >> 1) - a3;
  v109 = a3;
  if (a4 >> 1 == a3)
  {
    v120 = _swiftEmptyArrayStorage;
LABEL_29:
    v32 = v121;
    v81 = v103;
    if (a3 >= v41)
      goto LABEL_37;
    v40 = (void (*)(char *, uint64_t, uint64_t, uint64_t))a3;
    sub_100008868((uint64_t)v121, v103, (uint64_t *)&unk_1008380D0);
    if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v14 + 6))(v81, 1, v13) != 1)
    {
      (*((void (**)(char *, uint64_t, uint64_t))v14 + 4))(v16, v81, v13);
      if (a3 < v109)
        goto LABEL_47;
      v82 = v114;
      swift_unknownObjectRetain(v114);
      v83 = v105;
      swift_bridgeObjectRetain(v105);
      v84 = v82;
      v85 = v115;
      sub_1004B7430(v84, v108, a3, v100, v83);
      v86 = v16;
      v88 = v87;
      v115 = v85;
      v89 = swift_bridgeObjectRelease();
      v90 = v124;
      v40 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v86;
      (*((void (**)(char *, char *, uint64_t, __n128))v14 + 2))(v124, v86, v13, v89);
      REMRemindersListDataView.ScheduledDateBucketsModel.Day.init(date:reminders:)(v90, v88);
      swift_isUniquelyReferenced_nonNull_native(v120);
      if ((v91 & 1) == 0)
        goto LABEL_48;
      goto LABEL_34;
    }
    sub_10000882C((uint64_t)v32, (uint64_t *)&unk_1008380D0);
    (*(void (**)(char *, uint64_t))(v101 + 8))(v113, v102);
    sub_10000882C(v81, (uint64_t *)&unk_1008380D0);
    return v120;
  }
  if ((uint64_t)(a4 >> 1) <= a3)
    goto LABEL_46;
  v104 = a4 >> 1;
  v97 = v16;
  v99 = v100 & 1;
  swift_unknownObjectRetain(v114);
  v42 = 0;
  v125 = v108 + 8 * v109;
  v120 = _swiftEmptyArrayStorage;
  v110 = v109;
  v112 = v14;
  v116 = v19;
  v117 = v32;
  while (!__OFADD__(v42, 1))
  {
    v43 = *(id *)(v125 + 8 * v42);
    v44 = objc_msgSend(v43, "displayDateDate");
    if (!v44)
    {
      v40(v32, 1, 1, v13);
LABEL_6:

      sub_10000882C((uint64_t)v32, (uint64_t *)&unk_1008380D0);
      goto LABEL_7;
    }
    v45 = v44;
    v46 = v124;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v44);

    v47 = v46;
    v48 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v14 + 4);
    v49 = v127;
    v48(v32, v47, v13);
    v40(v32, 0, 1, v13);
    v50 = (unsigned int (*)(char *, uint64_t, uint64_t))*((_QWORD *)v14 + 6);
    if (v50(v32, 1, v13) == 1)
      goto LABEL_6;
    v122 = (void (*)(char *, uint64_t, uint64_t))v48;
    v123 = v43;
    v48(v49, v32, v13);
    v51 = (uint64_t)v121;
    v52 = v40;
    v53 = v14;
    v54 = v118;
    sub_100008868((uint64_t)v121, v118, (uint64_t *)&unk_1008380D0);
    v55 = v50((char *)v54, 1, v13);
    v56 = v54;
    v14 = v53;
    v40 = v52;
    sub_10000882C(v56, (uint64_t *)&unk_1008380D0);
    if (v55 == 1)
    {
      sub_10000882C(v51, (uint64_t *)&unk_1008380D0);
      (*((void (**)(uint64_t, char *, uint64_t))v14 + 2))(v51, v127, v13);
      v52((char *)v51, 0, 1, v13);
    }
    v57 = v119;
    sub_100008868(v51, v119, (uint64_t *)&unk_1008380D0);
    v58 = v50((char *)v57, 1, v13);
    v59 = v123;
    if (v58 == 1)
    {
      (*((void (**)(char *, uint64_t))v14 + 1))(v127, v13);

      sub_10000882C(v57, (uint64_t *)&unk_1008380D0);
      v32 = v117;
    }
    else
    {
      v60 = v116;
      v122(v116, v57, v13);
      v61 = v127;
      v14 = v113;
      v62 = Calendar.isDate(_:inSameDayAs:)(v127, v60);
      v32 = v117;
      if ((v62 & 1) != 0)
      {

        v14 = v112;
        v63 = (void (*)(char *, uint64_t))*((_QWORD *)v112 + 1);
        v63(v60, v13);
        v63(v61, v13);
      }
      else
      {
        v64 = v109 + v42;
        if (__OFADD__(v109, v42))
          goto LABEL_40;
        v65 = v110;
        if (v64 < v110)
          goto LABEL_41;
        if (v104 < v110)
          goto LABEL_42;
        if (v110 < v109)
          goto LABEL_43;
        if (v104 < v64)
          goto LABEL_44;
        if (v64 < 0)
          goto LABEL_45;
        v66 = v99 | (2 * v64);
        v67 = v114;
        swift_unknownObjectRetain(v114);
        v68 = v105;
        swift_bridgeObjectRetain(v105);
        v69 = v65;
        v70 = v115;
        sub_1004B7430(v67, v108, v69, v66, v68);
        v72 = v71;
        v73 = swift_bridgeObjectRelease();
        v74 = v124;
        (*((void (**)(char *, char *, uint64_t, __n128))v112 + 2))(v124, v116, v13, v73);
        REMRemindersListDataView.ScheduledDateBucketsModel.Day.init(date:reminders:)(v74, v72);
        swift_isUniquelyReferenced_nonNull_native(v120);
        if ((v75 & 1) == 0)
          v120 = (_QWORD *)sub_1002C8788(0, v120[2] + 1, 1, (unint64_t)v120);
        v77 = v120[2];
        v76 = v120[3];
        if (v77 >= v76 >> 1)
          v120 = (_QWORD *)sub_1002C8788(v76 > 1, v77 + 1, 1, (unint64_t)v120);
        v78 = v120;
        v120[2] = v77 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v106 + 32))((unint64_t)v78+ ((*(unsigned __int8 *)(v106 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80))+ *(_QWORD *)(v106 + 72) * v77, v111, v107);
        swift_unknownObjectRelease(v114);

        v79 = v112;
        (*((void (**)(char *, uint64_t))v112 + 1))(v116, v13);
        v80 = (uint64_t)v121;
        sub_10000882C((uint64_t)v121, (uint64_t *)&unk_1008380D0);
        v122((char *)v80, (uint64_t)v127, v13);
        v40((char *)v80, 0, 1, v13);
        v110 = v64;
        v115 = v70;
        v14 = v79;
      }
    }
LABEL_7:
    if (v126 == ++v42)
    {
      swift_unknownObjectRelease(v114);
      v16 = v97;
      v41 = v104;
      a3 = v110;
      goto LABEL_29;
    }
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  v120 = (_QWORD *)sub_1002C8788(0, v120[2] + 1, 1, (unint64_t)v120);
LABEL_34:
  v93 = v120[2];
  v92 = v120[3];
  if (v93 >= v92 >> 1)
    v120 = (_QWORD *)sub_1002C8788(v92 > 1, v93 + 1, 1, (unint64_t)v120);
  v94 = v120;
  v120[2] = v93 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v106 + 32))((unint64_t)v94+ ((*(unsigned __int8 *)(v106 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80))+ *(_QWORD *)(v106 + 72) * v93, v98, v107);
  swift_unknownObjectRelease(v114);
  (*((void (**)(void (*)(char *, uint64_t, uint64_t, uint64_t), uint64_t))v14 + 1))(v40, v13);
LABEL_37:
  sub_10000882C((uint64_t)v32, (uint64_t *)&unk_1008380D0);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v113, v102);
  return v120;
}

int64_t sub_100517D5C(unint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t Configuration;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __n128 v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  void (*v98)(char *, uint64_t);
  void (*v99)(int64_t, _QWORD, uint64_t);
  char v100;
  void (*v101)(int64_t, uint64_t);
  void (*v102)(char *);
  char *v103;
  unint64_t v104;
  _QWORD *v105;
  __n128 v106;
  __n128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(char *, uint64_t);
  int v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  char *v120;
  __n128 v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  void (*v132)(uint64_t, unint64_t);
  Class isa;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  __n128 v137;
  void *v138;
  NSString v139;
  uint64_t v140;
  char *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  void (*v147)(char *, uint64_t);
  __n128 v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  int v156;
  char *v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __n128 v164;
  char *v165;
  Swift::Int v166;
  Swift::Int v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  int v177;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int64_t v187;
  __n128 v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  __n128 v193;
  char *v194;
  char *v195;
  BOOL v196;
  _QWORD *v197;
  __n128 v198;
  unint64_t v199;
  id v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  void (*v204)(char *, uint64_t, uint64_t);
  uint64_t v205;
  char *v206;
  uint64_t v207;
  char v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  _QWORD *v212;
  _QWORD *v213;
  __n128 v214;
  uint64_t v215;
  unint64_t v216;
  Swift::Int v217;
  Swift::Int v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  char v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  int v238;
  char *v239;
  uint64_t v240;
  __n128 v241;
  unint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  __n128 v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  __n128 v259;
  uint64_t v260;
  char *v261;
  _QWORD *v262;
  uint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  Swift::Int v273;
  uint64_t v274;
  Swift::Int v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  Swift::Int v281;
  uint64_t v282;
  Swift::Int v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  char v289;
  unint64_t v290;
  unint64_t v291;
  uint64_t v292;
  __n128 v293;
  char *v294;
  uint64_t v295;
  char *v296;
  char *v297;
  char *v298;
  char *v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  char *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  int64_t v320;
  __n128 v321;
  uint64_t v322;
  uint64_t v323;
  __n128 v324;
  char *v325;
  _QWORD *v326;
  _QWORD *v327;
  uint64_t v328;
  Swift::Int v329;
  uint64_t v330;
  Swift::Int v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  char *v338;
  char v339;
  unint64_t v340;
  unint64_t v341;
  uint64_t v342;
  __n128 v343;
  uint64_t v344;
  void (*v345)(char *, uint64_t);
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  __n128 v349;
  uint64_t v350;
  char *v351;
  id v352;
  unint64_t *v353;
  uint64_t v354;
  char *v355;
  uint64_t v356;
  uint64_t v357;
  char *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t *v361;
  char *v362;
  char *v363;
  __n128 v364;
  unsigned int v365;
  __n128 v366;
  Swift::Int v367;
  Swift::Int v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  __n128 v377;
  char *v378;
  _QWORD *v379;
  _QWORD *v380;
  uint64_t v381;
  char *v382;
  char *v383;
  char v384;
  unint64_t v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  int v393;
  int v394;
  int v395;
  int v396;
  int v397;
  int v398;
  int v399;
  int v400;
  int v401;
  int v402;
  id v403;
  char *v404;
  char *v405;
  char *v406;
  char *v407;
  char *v408;
  char *v409;
  void (*v410)(char *, char *, uint64_t);
  char *v411;
  char *v412;
  char *v413;
  id v414;
  char *v415;
  char *v416;
  uint64_t v417;
  char *v418;
  char *v419;
  uint64_t v420;
  uint64_t v421;
  char *v422;
  char *v423;
  uint64_t v424;
  char *v425;
  char *v426;
  uint64_t v427;
  char *v428;
  char *v429;
  char *v430;
  char *v431;
  uint64_t v432;
  char *v433;
  char *v434;
  uint64_t v435;
  char *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  char *v440;
  char *v441;
  uint64_t v442;
  char *v443;
  uint64_t v444;
  char *v445;
  char *v446;
  char *v447;
  char *v448;
  unint64_t v449;
  char *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  void (*v454)(uint64_t, unint64_t);
  uint64_t v455;
  char *v456;
  uint64_t v457;
  char *v458;
  void (*v459)(char *, char *, uint64_t);
  char *v460;
  uint64_t v461;
  char *v462;
  unint64_t v463;
  char *v464;
  unint64_t v465;
  void (*v466)(char *, uint64_t);
  unint64_t v467;
  uint64_t v468;
  uint64_t v469;
  char *v470;
  char *v471;
  unint64_t v472;
  uint64_t v473;
  char *v474;
  _QWORD *v475;
  char *v476;
  Swift::Int Subtasks;
  char *v478;
  char *v479;
  char *v480;
  uint64_t v481;
  char *v482;
  uint64_t v483;
  char *v484;
  uint64_t v485;

  v467 = a1;
  v438 = type metadata accessor for Calendar.SearchDirection(0);
  v437 = *(_QWORD *)(v438 - 8);
  __chkstk_darwin(v438);
  v436 = (char *)&v403 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v435 = type metadata accessor for Calendar.RepeatedTimePolicy(0);
  v453 = *(_QWORD *)(v435 - 8);
  __chkstk_darwin(v435);
  v434 = (char *)&v403 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v452 = type metadata accessor for Calendar.MatchingPolicy(0);
  v451 = *(_QWORD *)(v452 - 8);
  __chkstk_darwin(v452);
  v433 = (char *)&v403 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630(&qword_1008401F8);
  __chkstk_darwin(v6);
  v441 = (char *)&v403 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630(&qword_1008466E0);
  __chkstk_darwin(v8);
  v440 = (char *)&v403 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v439 = type metadata accessor for DateComponents(0);
  v432 = *(_QWORD *)(v439 - 8);
  __chkstk_darwin(v439);
  v413 = (char *)&v403 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v431 = (char *)&v403 - v12;
  v421 = type metadata accessor for Calendar.Component(0);
  v420 = *(_QWORD *)(v421 - 8);
  __chkstk_darwin(v421);
  v419 = (char *)&v403 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v14);
  v412 = (char *)&v403 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v430 = (char *)&v403 - v17;
  __chkstk_darwin(v18);
  v410 = (void (*)(char *, char *, uint64_t))((char *)&v403 - v19);
  v21 = __chkstk_darwin(v20);
  v482 = (char *)&v403 - v22;
  v455 = type metadata accessor for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket(0, v21);
  v469 = *(_QWORD *)(v455 - 8);
  __chkstk_darwin(v455);
  v422 = (char *)&v403 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v445 = (char *)&v403 - v25;
  __chkstk_darwin(v26);
  v404 = (char *)&v403 - v27;
  __chkstk_darwin(v28);
  v462 = (char *)&v403 - v29;
  v31 = __chkstk_darwin(v30);
  v428 = (char *)&v403 - v32;
  v427 = type metadata accessor for REMRemindersListDataView.ScheduledByDateBucketsStyle(0, v31);
  v424 = *(_QWORD *)(v427 - 8);
  __chkstk_darwin(v427);
  v423 = (char *)&v403 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v483 = type metadata accessor for Date(0);
  v481 = *(_QWORD *)(v483 - 8);
  __chkstk_darwin(v483);
  v418 = (char *)&v403 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v429 = (char *)&v403 - v36;
  __chkstk_darwin(v37);
  v450 = (char *)&v403 - v38;
  __chkstk_darwin(v39);
  v409 = (char *)&v403 - v40;
  __chkstk_darwin(v41);
  v411 = (char *)&v403 - v42;
  __chkstk_darwin(v43);
  v476 = (char *)&v403 - v44;
  __chkstk_darwin(v45);
  v479 = (char *)&v403 - v46;
  __chkstk_darwin(v47);
  v480 = (char *)&v403 - v48;
  __chkstk_darwin(v49);
  v471 = (char *)&v403 - v50;
  v442 = type metadata accessor for Calendar(0);
  v417 = *(_QWORD *)(v442 - 8);
  __chkstk_darwin(v442);
  v464 = (char *)&v403 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v461 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v460 = *(char **)(v461 - 8);
  __chkstk_darwin(v461);
  v416 = (char *)&v403 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v53);
  v426 = (char *)&v403 - v54;
  __chkstk_darwin(v55);
  v406 = (char *)&v403 - v56;
  __chkstk_darwin(v57);
  v408 = (char *)&v403 - v58;
  __chkstk_darwin(v59);
  v456 = (char *)&v403 - v60;
  __chkstk_darwin(v61);
  v458 = (char *)&v403 - v62;
  v457 = _s10PredicatesOMa(0);
  __chkstk_darwin(v457);
  v459 = (void (*)(char *, char *, uint64_t))((char *)&v403 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0));
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v473 = *(_QWORD *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  v449 = (unint64_t)&v403 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v65);
  v448 = (char *)&v403 - v66;
  __chkstk_darwin(v67);
  v472 = (unint64_t)&v403 - v68;
  v70 = __chkstk_darwin(v69);
  v470 = (char *)&v403 - v71;
  v475 = (_QWORD *)type metadata accessor for REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters(0, v70);
  v478 = (char *)*(v475 - 1);
  __chkstk_darwin(v475);
  v474 = (char *)&v403 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v74 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v76 = (int64_t)&v403 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v77);
  v79 = (char *)&v403 - v78;
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v81 = *(_QWORD *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  v415 = (char *)&v403 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v83);
  v425 = (char *)&v403 - v84;
  __chkstk_darwin(v85);
  v405 = (char *)&v403 - v86;
  __chkstk_darwin(v87);
  v407 = (char *)&v403 - v88;
  __chkstk_darwin(v89);
  v447 = (char *)&v403 - v90;
  __chkstk_darwin(v91);
  v446 = (char *)&v403 - v92;
  v94 = __chkstk_darwin(v93);
  v96 = (char *)&v403 - v95;
  v97 = REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.configuration.getter(v94);
  REMRemindersListDataView.FetchConfiguration.sortingStyle.getter(v97);
  v98 = *(void (**)(char *, uint64_t))(v81 + 8);
  v468 = Configuration;
  v466 = v98;
  v98(v96, Configuration);
  v99 = *(void (**)(int64_t, _QWORD, uint64_t))(v74 + 104);
  v99(v76, enum case for REMRemindersListDataView.SortingStyle.default(_:), v73);
  v100 = static REMRemindersListDataView.SortingStyle.== infix(_:_:)(v79, v76);
  v101 = *(void (**)(int64_t, uint64_t))(v74 + 8);
  v101(v76, v73);
  v101((int64_t)v79, v73);
  v102 = (void (*)(char *))*((_QWORD *)v478 + 2);
  v103 = v474;
  v104 = a2;
  v105 = v475;
  v465 = v104;
  v102(v474);
  if ((v100 & 1) != 0)
  {
    (*((void (**)(char *, _QWORD *))v478 + 1))(v103, v105);
    v108 = v468;
  }
  else
  {
    v109 = REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.configuration.getter(v106);
    REMRemindersListDataView.FetchConfiguration.sortingStyle.getter(v109);
    v466(v96, v468);
    v110 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
    v111 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
    (*(void (**)(int64_t, uint64_t, uint64_t))(*(_QWORD *)(v111 - 8) + 104))(v76, v110, v111);
    v99(v76, enum case for REMRemindersListDataView.SortingStyle.displayDate(_:), v73);
    LOBYTE(v110) = static REMRemindersListDataView.SortingStyle.== infix(_:_:)(v79, v76);
    v101(v76, v73);
    v101((int64_t)v79, v73);
    (*((void (**)(char *, _QWORD *))v478 + 1))(v103, v105);
    v108 = v468;
    if ((v110 & 1) == 0)
    {
LABEL_12:
      v138 = (void *)objc_opt_self(REMError);
      v139 = String._bridgeToObjectiveC()();
      objc_msgSend(v138, "internalErrorWithDebugDescription:", v139);

      swift_willThrow(v140);
      return v76;
    }
  }
  v112 = REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.configuration.getter(v107);
  v76 = (int64_t)v470;
  REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter(v112);
  v113 = v466;
  v466(v96, v108);
  v114 = enum case for REMRemindersListDataView.FetchSubtasks.on(_:);
  v116 = v472;
  v115 = v473;
  v117 = Subtasks;
  (*(void (**)(unint64_t, _QWORD, Swift::Int))(v473 + 104))(v472, enum case for REMRemindersListDataView.FetchSubtasks.on(_:), Subtasks);
  v118 = sub_10009FC50(&qword_100841010, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FetchSubtasks, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.FetchSubtasks);
  v119 = dispatch thunk of static Equatable.== infix(_:_:)(v76, v116, v117, v118);
  v120 = *(char **)(v115 + 8);
  ((void (*)(unint64_t, uint64_t))v120)(v116, v117);
  ((void (*)(int64_t, uint64_t))v120)(v76, v117);
  if ((v119 & 1) != 0)
    goto LABEL_12;
  LODWORD(v478) = v114;
  v122 = REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.configuration.getter(v121);
  v123 = (uint64_t)v459;
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v122);
  v113(v96, v108);
  swift_storeEnumTagMultiPayload(v123, v457, 11);
  sub_10000D2C0();
  v414 = v124;
  sub_1000CACA8(v123);
  if (qword_1008375D8 == -1)
    goto LABEL_6;
  while (2)
  {
    swift_once(&qword_1008375D8, sub_100497894);
LABEL_6:
    v443 = v96;
    v125 = qword_100871F88;
    v126 = v461;
    if (qword_1008375E0 != -1)
      swift_once(&qword_1008375E0, sub_100497914);
    v127 = qword_100871F90;
    v484 = (char *)v125;
    swift_bridgeObjectRetain(v125);
    swift_bridgeObjectRetain(v127);
    sub_1001E12FC(v127);
    v76 = sub_100358798((uint64_t)v484, 0, 0, (uint64_t)v414);
    swift_bridgeObjectRelease();
    v96 = (char *)v467;
    if (qword_100837818 != -1)
      swift_once(&qword_100837818, sub_10051658C);
    v128 = _s9UtilitiesO12SortingStyleOMa(0);
    v129 = sub_10001AAA8(v128, (uint64_t)qword_10084E100);
    v130 = v460;
    v131 = (uint64_t)v458;
    (*((void (**)(char *, _QWORD, unint64_t))v460 + 13))(v458, enum case for REMRemindersListDataView.ShowCompleted.off(_:), v126);
    sub_10049ADC0(v129, v131, 0);
    v132 = (void (*)(uint64_t, unint64_t))*((_QWORD *)v130 + 1);
    v132(v131, v126);
    sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend((id)v76, "setSortDescriptors:", isa, swift_bridgeObjectRelease().n128_f64[0]);

    v134 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    v135 = v463;
    v136 = NSManagedObjectContext.fetch<A>(_:)(v76, v134);
    v474 = (char *)v135;
    if (v135)
    {

      return v76;
    }
    v463 = v136;
    v444 = v134;
    v454 = v132;
    v403 = (id)v76;
    v142 = v446;
    v143 = REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.configuration.getter(v137);
    v144 = v448;
    REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter(v143);
    v145 = v142;
    v146 = v468;
    v147 = v466;
    v148.n128_f64[0] = ((double (*)(char *, uint64_t))v466)(v145, v468);
    v149 = v447;
    v150 = REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.configuration.getter(v148);
    v151 = (uint64_t)v456;
    REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v150);
    v152 = v146;
    v76 = (int64_t)v144;
    v147(v149, v152);
    v153 = v473;
    v154 = v449;
    v155 = Subtasks;
    (*(void (**)(unint64_t, char *, Swift::Int))(v473 + 16))(v449, v144, Subtasks);
    v156 = (*(uint64_t (**)(unint64_t, uint64_t))(v153 + 88))(v154, v155);
    if (v156 == enum case for REMRemindersListDataView.FetchSubtasks.off(_:) || v156 == (_DWORD)v478)
    {
      v449 = sub_1002AF838((uint64_t)_swiftEmptyArrayStorage);
      v159 = v465;
    }
    else
    {
      if (v156 != enum case for REMRemindersListDataView.FetchSubtasks.count(_:))
        goto LABEL_245;
      v157 = v474;
      sub_100498430(v463, (id)v151, v96, 0);
      v474 = v157;
      v159 = v465;
      if (v157)
      {

        v454(v151, v126);
        ((void (*)(int64_t, Swift::Int))v120)(v76, Subtasks);
        swift_bridgeObjectRelease();
        return v76;
      }
      v449 = v158;
    }
    v454(v151, v126);
    v160 = ((uint64_t (*)(int64_t, Swift::Int))v120)(v76, Subtasks);
    v161 = static Calendar.current.getter(v160);
    v162 = (uint64_t)v480;
    REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.today.getter(v161);
    Calendar.startOfDay(for:)(v162);
    v475 = *(_QWORD **)(v481 + 8);
    ((void (*)(uint64_t, uint64_t))v475)(v162, v483);
    v163 = v463;
    v467 = v463 >> 62;
    if (v463 >> 62)
    {
LABEL_226:
      v153 = (uint64_t)v428;
      if (v163 < 0)
        v176 = v163;
      else
        v176 = v163 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v163, 2);
      v389 = _CocoaArrayWrapper.endIndex.getter(v176);
      swift_bridgeObjectRelease();
      if ((v389 & 0x8000000000000000) == 0)
      {
        v151 = v389;
        v230 = v463;
        swift_bridgeObjectRetain(v463);
        v390 = _CocoaArrayWrapper.endIndex.getter(v176);
        swift_bridgeObjectRelease();
        if ((v390 & 0x8000000000000000) == 0)
        {
          swift_bridgeObjectRetain(v463);
          v391 = _CocoaArrayWrapper.endIndex.getter(v176);
          v164 = swift_bridgeObjectRelease();
          if (v391 >= v151)
            goto LABEL_247;
          __break(1u);
LABEL_233:
          v76 = sub_1002C879C(0, *(_QWORD *)(v76 + 16) + 1, 1, v76);
LABEL_136:
          v291 = *(_QWORD *)(v76 + 16);
          v290 = *(_QWORD *)(v76 + 24);
          if (v291 >= v290 >> 1)
            v76 = sub_1002C879C(v290 > 1, v291 + 1, 1, v76);
          *(_QWORD *)(v76 + 16) = v291 + 1;
          (*(void (**)(unint64_t, uint64_t, unint64_t))(v469 + 32))(v76+ ((*(unsigned __int8 *)(v469 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v469 + 80))+ *(_QWORD *)(v469 + 72) * v291, v153, v159);
LABEL_140:
          v480 = (char *)v126;
          v194 = v476;
          ((void (*)(char *, char *, uint64_t))v476)(v96, v411, v483);
LABEL_141:
          v479 = *(char **)(v417 + 56);
          LODWORD(v428) = enum case for Calendar.MatchingPolicy.nextTime(_:);
          LODWORD(v427) = enum case for Calendar.RepeatedTimePolicy.first(_:);
          LODWORD(v411) = enum case for Calendar.SearchDirection.forward(_:);
          LODWORD(v409) = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.month(_:);
          v292 = 1;
          v476 = v194;
          do
          {
            v482 = (char *)v292;
            v472 = v230;
            v470 = (char *)v76;
            v474 = (char *)v151;
            v294 = v440;
            ((void (*)(char *, uint64_t, uint64_t, uint64_t))v479)(v440, 1, 1, v442);
            v295 = type metadata accessor for TimeZone(0);
            v296 = *(char **)(*(_QWORD *)(v295 - 8) + 56);
            v297 = v441;
            v462 = (char *)v295;
            v460 = v296;
            ((void (*)(char *, uint64_t, uint64_t))v296)(v441, 1, 1);
            LOBYTE(v402) = 1;
            LOBYTE(v401) = 1;
            LOBYTE(v400) = 1;
            LOBYTE(v399) = 1;
            LOBYTE(v398) = 1;
            LOBYTE(v397) = 1;
            LOBYTE(v396) = 1;
            LOBYTE(v395) = 0;
            LOBYTE(v394) = 0;
            LOBYTE(v393) = 0;
            LOBYTE(v392) = 0;
            v298 = v431;
            DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v294, v297, 0, 1, 0, 1, 0, 1, 1, v392, 0, v393, 0, v394, 0, v395, 0, v396, 0,
              v397,
              0,
              v398,
              0,
              v399,
              0,
              v400,
              0,
              v401,
              0,
              v402);
            v299 = v433;
            (*(void (**)(char *, _QWORD, uint64_t))(v451 + 104))(v433, v428, v452);
            v300 = v434;
            v301 = v435;
            (*(void (**)(char *, _QWORD, uint64_t))(v453 + 104))(v434, v427, v435);
            v302 = v437;
            v303 = v436;
            v304 = v438;
            (*(void (**)(char *, _QWORD, uint64_t))(v437 + 104))(v436, v411, v438);
            v305 = (uint64_t)v430;
            Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)(v471, v298, v299, v300, v303);
            (*(void (**)(char *, uint64_t))(v302 + 8))(v303, v304);
            (*(void (**)(char *, uint64_t))(v453 + 8))(v300, v301);
            v306 = v299;
            v307 = v483;
            (*(void (**)(char *, uint64_t))(v451 + 8))(v306, v452);
            v458 = *(char **)(v432 + 8);
            ((void (*)(char *, uint64_t))v458)(v298, v439);
            v308 = v429;
            v459(v429, v471, v307);
            v309 = v481;
            v443 = *(char **)(v481 + 48);
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v443)(v305, 1, v307) == 1)
            {
              v120 = v450;
              v410 = *(void (**)(char *, char *, uint64_t))(v309 + 32);
              v410(v450, v308, v483);
              sub_10000882C(v305, (uint64_t *)&unk_1008380D0);
            }
            else
            {
              v310 = v483;
              ((void (*)(char *, uint64_t))v475)(v308, v483);
              v120 = v450;
              v410 = *(void (**)(char *, char *, uint64_t))(v309 + 32);
              v410(v450, (char *)v305, v310);
            }
            v312 = Subtasks;
            v311 = (uint64_t)v478;
            v96 = v480;
            v313 = v472;
            swift_unknownObjectRetain(v478);
            sub_1005171E0(v314, (uint64_t)v96, v312, v313, (uint64_t)v120);
            v159 = v315;
            v317 = v316;
            v319 = v318;
            v76 = v320;
            swift_unknownObjectRelease(v311);
            if (v159)
            {
              v126 = (unint64_t)v425;
              v322 = REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.configuration.getter(v321);
              v323 = (uint64_t)v426;
              REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v322);
              v324.n128_f64[0] = ((double (*)(unint64_t, uint64_t))v466)(v126, v468);
              v325 = v474;
              v326 = sub_10051743C(v159, v317, v319, v76, v324, v323, v449);
              if (v325)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                swift_unknownObjectRelease(v159);
                v263 = v323;
                goto LABEL_175;
              }
              v327 = v326;
              v454(v323, v461);
              if (v473 < (uint64_t)((unint64_t)v76 >> 1))
                goto LABEL_220;
              Subtasks = (unint64_t)v76 >> 1;
              v474 = 0;
              if (v467)
              {
                swift_bridgeObjectRetain_n(v463, 2);
                v163 = _CocoaArrayWrapper.endIndex.getter(v446);
                swift_bridgeObjectRelease();
              }
              else
              {
                v163 = *((_QWORD *)v447 + 2);
                swift_bridgeObjectRetain(v463);
              }
              v151 = v455;
              v76 = (int64_t)v470;
              if (v163 < Subtasks)
                goto LABEL_221;
              if (v448 && Subtasks != v473)
              {
                if (Subtasks >= v473)
                {
                  __break(1u);
LABEL_223:
                  __break(1u);
LABEL_224:
                  __break(1u);
LABEL_225:
                  __break(1u);
                  goto LABEL_226;
                }
                v329 = Subtasks;
                v330 = v473;
                do
                {
                  v331 = v329 + 1;
                  _ArrayBuffer._typeCheckSlowPath(_:)(v329);
                  v329 = v331;
                }
                while (v330 != v331);
              }
              if (v467)
              {
                v332 = v463;
                swift_bridgeObjectRetain(v463);
                v333 = _CocoaArrayWrapper.subscript.getter(Subtasks, v473, v446);
                v480 = (char *)v334;
                Subtasks = v335;
                v230 = v336;
                swift_unknownObjectRelease(v478);
                swift_unknownObjectRelease(v159);
                swift_bridgeObjectRelease_n(v332, 2);
                v478 = (char *)v333;
              }
              else
              {
                swift_unknownObjectRelease(v478);
                swift_unknownObjectRelease(v159);
                v478 = v447;
                v480 = (char *)v424;
                v230 = (unint64_t)v423;
              }
              v328 = (uint64_t)v471;
            }
            else
            {
              v327 = _swiftEmptyArrayStorage;
              v76 = (int64_t)v470;
              v328 = (uint64_t)v471;
              v151 = v455;
              v230 = v313;
            }
            if ((_DWORD)v457 == (_DWORD)v456 || v327[2])
            {
              v337 = *(int *)(sub_10001A630(&qword_10084E150) + 48);
              v338 = v445;
              v459(v445, (char *)v328, v483);
              *(_QWORD *)&v338[v337] = v327;
              (*(void (**)(char *, _QWORD, uint64_t))(v469 + 104))(v338, v409, v151);
              swift_isUniquelyReferenced_nonNull_native(v76);
              if ((v339 & 1) == 0)
                v76 = sub_1002C879C(0, *(_QWORD *)(v76 + 16) + 1, 1, v76);
              v341 = *(_QWORD *)(v76 + 16);
              v340 = *(_QWORD *)(v76 + 24);
              if (v341 >= v340 >> 1)
                v76 = sub_1002C879C(v340 > 1, v341 + 1, 1, v76);
              *(_QWORD *)(v76 + 16) = v341 + 1;
              (*(void (**)(unint64_t, char *, uint64_t))(v469 + 32))(v76+ ((*(unsigned __int8 *)(v469 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v469 + 80))+ *(_QWORD *)(v469 + 72) * v341, v445, v151);
            }
            else
            {
              v293 = swift_bridgeObjectRelease();
            }
            ((void (*)(uint64_t, char *, uint64_t, __n128))v476)(v328, v450, v483, v293);
            v292 = (uint64_t)(v482 + 1);
            v151 = (uint64_t)v474;
          }
          while (v482 != (char *)12);
          v159 = v328;
          swift_bridgeObjectRelease();
          v96 = (char *)Subtasks;
          if (Subtasks == v230 >> 1)
          {
            swift_bridgeObjectRelease();

            swift_unknownObjectRelease(v478);
            v96 = (char *)v159;
            goto LABEL_214;
          }
          __chkstk_darwin(v342);
          v402 = v159;
          swift_unknownObjectRetain(v478);
          v347 = sub_1005149A4(v346, (uint64_t)v480, (uint64_t)v96, v230, (void (*)(uint64_t *__return_ptr, id *))sub_10051AC3C);
          v163 = v151;
          swift_bridgeObjectRetain(v347);
          v153 = (uint64_t)sub_1001E9004(v348);
          swift_bridgeObjectRelease();
          v484 = (char *)v153;
          sub_100514BD4(&v484);
          if (!v151)
          {
            v151 = 0;
            v349 = swift_bridgeObjectRelease();
            v350 = (uint64_t)v484;
            v481 = *((_QWORD *)v484 + 2);
            if (!v481)
            {
              v352 = v403;
              v96 = (char *)v159;
LABEL_213:

              swift_unknownObjectRelease(v478);
              swift_release(v350);
              v343 = swift_bridgeObjectRelease();
LABEL_214:
              (*(void (**)(char *, uint64_t, __n128))(v417 + 8))(v464, v442, v343);
              ((void (*)(char *, uint64_t))v475)(v96, v483);
              return v76;
            }
            v126 = 0;
            v480 = v484 + 32;
            LODWORD(Subtasks) = enum case for Calendar.Component.year(_:);
            LODWORD(v473) = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.year(_:);
            v476 = v484;
            while (2)
            {
              v470 = (char *)v76;
              v474 = (char *)v151;
              if (v126 >= *(_QWORD *)(v350 + 16))
                goto LABEL_223;
              v482 = (char *)v126;
              v353 = (unint64_t *)&v480[16 * v126];
              v159 = *v353;
              v76 = v353[1];
              v354 = v420;
              v355 = v419;
              v151 = v421;
              (*(void (**)(char *, _QWORD, uint64_t, __n128))(v420 + 104))(v419, Subtasks, v421, v349);
              swift_bridgeObjectRetain(v76);
              v356 = (uint64_t)v471;
              v357 = Calendar.component(_:from:)(v355, v471);
              (*(void (**)(char *, uint64_t))(v354 + 8))(v355, v151);
              if (v159 == v357)
              {
                v153 = (uint64_t)v418;
                v358 = v418;
                v359 = v356;
                v360 = v483;
                v361 = &v485;
                goto LABEL_187;
              }
              v362 = v440;
              ((void (*)(char *, uint64_t, uint64_t, uint64_t))v479)(v440, 1, 1, v442);
              v363 = v441;
              ((void (*)(char *, uint64_t, uint64_t, char *))v460)(v441, 1, 1, v462);
              LOBYTE(v402) = 1;
              LOBYTE(v401) = 1;
              LOBYTE(v400) = 1;
              LOBYTE(v399) = 1;
              LOBYTE(v398) = 1;
              LOBYTE(v397) = 1;
              LOBYTE(v396) = 1;
              LOBYTE(v395) = 0;
              LOBYTE(v394) = 0;
              LOBYTE(v393) = 0;
              LOBYTE(v392) = 0;
              v151 = (uint64_t)v413;
              DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v362, v363, 0, 1, v159, 0, 1, 0, 1, v392, 0, v393, 0, v394, 0, v395, 0, v396, 0,
                v397,
                0,
                v398,
                0,
                v399,
                0,
                v400,
                0,
                v401,
                0,
                v402);
              v163 = (uint64_t)v412;
              Calendar.date(from:)(v151, v364);
              ((void (*)(uint64_t, uint64_t))v458)(v151, v439);
              v365 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v443)(v163, 1, v483);
              v153 = (uint64_t)v418;
              if (v365 == 1)
              {
                swift_bridgeObjectRelease();
                sub_10000882C(v163, (uint64_t *)&unk_1008380D0);
                v76 = (int64_t)v470;
                v96 = v471;
                v151 = (uint64_t)v474;
                v350 = (uint64_t)v476;
                v351 = v482;
              }
              else
              {
                v358 = v418;
                v359 = v163;
                v360 = v483;
                v361 = &v442;
LABEL_187:
                ((void (*)(char *, uint64_t, uint64_t))*(v361 - 32))(v358, v359, v360);
                v159 = (unint64_t)v76 >> 62;
                v163 = (uint64_t)v416;
                if ((unint64_t)v76 >> 62)
                {
                  if (v76 < 0)
                    v387 = v76;
                  else
                    v387 = v76 & 0xFFFFFFFFFFFFFF8;
                  swift_bridgeObjectRetain(v76);
                  v176 = _CocoaArrayWrapper.endIndex.getter(v387);
                  swift_bridgeObjectRelease();
                  if (v176 < 0)
                    goto LABEL_240;
                  swift_bridgeObjectRetain(v76);
                  v126 = _CocoaArrayWrapper.endIndex.getter(v387);
                  swift_bridgeObjectRelease();
                  if ((v126 & 0x8000000000000000) != 0)
                    goto LABEL_241;
                  swift_bridgeObjectRetain(v76);
                  v388 = _CocoaArrayWrapper.endIndex.getter(v387);
                  v366 = swift_bridgeObjectRelease();
                  if (v388 < v176)
                    goto LABEL_224;
                  v153 = (uint64_t)v418;
                  v163 = (uint64_t)v416;
                  if ((v76 & 0xC000000000000001) != 0)
                  {
LABEL_189:
                    if (v176)
                    {
                      v367 = 0;
                      do
                      {
                        v368 = v367 + 1;
                        _ArrayBuffer._typeCheckSlowPath(_:)(v367);
                        v367 = v368;
                      }
                      while (v176 != v368);
                    }
                  }
                }
                else
                {
                  v176 = *(_QWORD *)((v76 & 0xFFFFFFFFFFFFF8) + 0x10);
                  if ((v76 & 0xC000000000000001) != 0)
                    goto LABEL_189;
                }
                if (v159)
                {
                  if (v76 < 0)
                    v372 = v76;
                  else
                    v372 = v76 & 0xFFFFFFFFFFFFFF8;
                  swift_bridgeObjectRetain(v76);
                  v159 = _CocoaArrayWrapper.subscript.getter(0, v176, v372);
                  v370 = v373;
                  v369 = v374;
                  v371 = v375;
                  v366 = swift_bridgeObjectRelease_n(v76, 2);
                }
                else
                {
                  v369 = 0;
                  v159 = v76 & 0xFFFFFFFFFFFFFF8;
                  v370 = (v76 & 0xFFFFFFFFFFFFFF8) + 32;
                  v371 = (2 * v176) | 1;
                }
                v76 = (int64_t)v415;
                v376 = REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.configuration.getter(v366);
                REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v376);
                v377.n128_f64[0] = ((double (*)(int64_t, uint64_t))v466)(v76, v468);
                v378 = v474;
                v379 = sub_10051743C(v159, v370, v369, v371, v377, v163, v449);
                v151 = (uint64_t)v378;
                if (v378)
                {
                  swift_bridgeObjectRelease();

                  swift_unknownObjectRelease(v159);
                  v454(v163, v461);
                  v344 = v483;
                  v345 = (void (*)(char *, uint64_t))v475;
                  ((void (*)(uint64_t, uint64_t))v475)(v153, v483);
                  swift_bridgeObjectRelease();
                  swift_unknownObjectRelease(v478);
                  swift_release(v476);
                  goto LABEL_176;
                }
                v380 = v379;
                v454(v163, v461);
                swift_unknownObjectRelease(v159);
                v381 = *(int *)(sub_10001A630(&qword_10084E150) + 48);
                v382 = v422;
                v459(v422, (char *)v153, v483);
                *(_QWORD *)&v382[v381] = v380;
                v383 = v382;
                v163 = v455;
                (*(void (**)(char *, _QWORD, uint64_t))(v469 + 104))(v383, v473, v455);
                v76 = (int64_t)v470;
                swift_isUniquelyReferenced_nonNull_native(v470);
                if ((v384 & 1) == 0)
                  v76 = sub_1002C879C(0, *(_QWORD *)(v76 + 16) + 1, 1, v76);
                v96 = v471;
                v351 = v482;
                v386 = *(_QWORD *)(v76 + 16);
                v385 = *(_QWORD *)(v76 + 24);
                if (v386 >= v385 >> 1)
                  v76 = sub_1002C879C(v385 > 1, v386 + 1, 1, v76);
                *(_QWORD *)(v76 + 16) = v386 + 1;
                (*(void (**)(unint64_t, char *, uint64_t))(v469 + 32))(v76+ ((*(unsigned __int8 *)(v469 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v469 + 80))+ *(_QWORD *)(v469 + 72) * v386, v422, v163);
                ((void (*)(uint64_t, uint64_t))v475)(v153, v483);
                v350 = (uint64_t)v476;
              }
              v126 = (unint64_t)(v351 + 1);
              v352 = v403;
              if (v126 == v481)
                goto LABEL_213;
              continue;
            }
          }
          goto LABEL_246;
        }
        goto LABEL_243;
      }
      goto LABEL_242;
    }
    v151 = *(_QWORD *)((v463 & 0xFFFFFFFFFFFFF8) + 0x10);
    v164 = swift_bridgeObjectRetain(v463);
    v165 = v474;
    v153 = (uint64_t)v428;
    while (1)
    {
      v448 = (char *)(v163 & 0xC000000000000001);
      if ((v163 & 0xC000000000000001) != 0 && v151)
      {
        v166 = 0;
        do
        {
          v167 = v166 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v166);
          v166 = v167;
        }
        while (v151 != v167);
      }
      v126 = v153;
      if (v467)
      {
        v170 = v463;
        if ((v463 & 0x8000000000000000) != 0)
          v171 = v463;
        else
          v171 = v463 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v463);
        v478 = (char *)_CocoaArrayWrapper.subscript.getter(0, v151, v171);
        v169 = v172;
        v168 = v173;
        v153 = v174;
        v164 = swift_bridgeObjectRelease_n(v170, 2);
      }
      else
      {
        v168 = 0;
        v478 = (char *)(v463 & 0xFFFFFFFFFFFFFF8);
        v169 = (v463 & 0xFFFFFFFFFFFFFF8) + 32;
        v153 = (2 * v151) | 1;
      }
      v473 = v151;
      v474 = v165;
      v175 = v423;
      REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.style.getter(v164);
      v176 = v427;
      v177 = (*(uint64_t (**)(char *, uint64_t))(v424 + 88))(v175, v427);
      LODWORD(v456) = enum case for REMRemindersListDataView.ScheduledByDateBucketsStyle.regular(_:);
      LODWORD(v457) = v177;
      if (v177 != enum case for REMRemindersListDataView.ScheduledByDateBucketsStyle.regular(_:)
        && v177 != enum case for REMRemindersListDataView.ScheduledByDateBucketsStyle.compact(_:))
      {
        goto LABEL_244;
      }
      v179 = (uint64_t)v478;
      swift_unknownObjectRetain(v478);
      Subtasks = v168;
      sub_1005171E0(v180, v169, v168, v153, (uint64_t)v471);
      v182 = v181;
      v184 = v183;
      v186 = v185;
      v76 = v187;
      swift_unknownObjectRelease(v179);
      v120 = v482;
      v472 = v182;
      if (!v182)
        goto LABEL_41;
      if (v186 == (unint64_t)v76 >> 1)
      {
        swift_unknownObjectRelease(v472);
LABEL_41:
        v76 = (int64_t)_swiftEmptyArrayStorage;
        v151 = (uint64_t)v471;
        v189 = v463;
        v159 = v153;
        v153 = v455;
        goto LABEL_42;
      }
      Subtasks = (unint64_t)v76 >> 1;
      v239 = v407;
      v240 = REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.configuration.getter(v188);
      v96 = v408;
      REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v240);
      v241.n128_f64[0] = ((double (*)(char *, uint64_t))v466)(v239, v468);
      v242 = v472;
      v243 = v474;
      v197 = sub_10051743C(v472, v184, v186, v76, v241, (uint64_t)v96, v449);
      v151 = (uint64_t)v243;
      if (v243)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease(v242);
        swift_bridgeObjectRelease();

        v454((uint64_t)v96, v461);
        swift_unknownObjectRelease(v478);
        (*(void (**)(char *, uint64_t))(v417 + 8))(v464, v442);
        ((void (*)(char *, uint64_t))v475)(v471, v483);
        return v76;
      }
LABEL_99:
      v265 = v197;
      v474 = (char *)v151;
      v454((uint64_t)v96, v461);
      v266 = v126;
      *(_QWORD *)v126 = v265;
      v153 = v455;
      (*(void (**)(unint64_t, _QWORD, uint64_t))(v469 + 104))(v126, enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.pastDue(_:), v455);
      v76 = sub_1002C879C(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
      v268 = *(_QWORD *)(v76 + 16);
      v267 = *(_QWORD *)(v76 + 24);
      v176 = v268 + 1;
      v151 = (uint64_t)v471;
      v189 = v463;
      if (v268 >= v267 >> 1)
        v76 = sub_1002C879C(v267 > 1, v268 + 1, 1, v76);
      *(_QWORD *)(v76 + 16) = v176;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v469 + 32))(v76+ ((*(unsigned __int8 *)(v469 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v469 + 80))+ *(_QWORD *)(v469 + 72) * v268, v266, v153);
      v269 = Subtasks;
      if (v473 >= Subtasks)
        break;
      __break(1u);
LABEL_235:
      __break(1u);
LABEL_236:
      __break(1u);
LABEL_237:
      __break(1u);
LABEL_238:
      __break(1u);
LABEL_239:
      __break(1u);
LABEL_240:
      __break(1u);
LABEL_241:
      __break(1u);
LABEL_242:
      __break(1u);
LABEL_243:
      __break(1u);
LABEL_244:
      _diagnoseUnexpectedEnumCase<A>(type:)(v176, v176);
      __break(1u);
LABEL_245:
      _diagnoseUnexpectedEnumCase<A>(type:)(Subtasks, Subtasks);
      __break(1u);
LABEL_246:
      swift_release(v484);
      __break(1u);
LABEL_247:
      v165 = v474;
      v163 = v463;
    }
    if (v467)
    {
      if (v189 < 0)
        v272 = v189;
      else
        v272 = v189 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v189, 2);
      v176 = _CocoaArrayWrapper.endIndex.getter(v272);
      swift_bridgeObjectRelease();
    }
    else
    {
      v176 = *(_QWORD *)((v189 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v189);
    }
    if (v176 < v269)
      goto LABEL_235;
    if (!v448 || v269 == v473)
      goto LABEL_117;
    if (v269 >= v473)
      goto LABEL_238;
    v273 = v269;
    v274 = v473;
    do
    {
      v275 = v273 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v273);
      v273 = v275;
    }
    while (v274 != v275);
LABEL_117:
    if (v467)
    {
      if (v189 < 0)
        v276 = v189;
      else
        v276 = v189 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v189);
      v277 = _CocoaArrayWrapper.subscript.getter(v269, v473, v276);
      v169 = v278;
      Subtasks = v279;
      v159 = v280;
      swift_unknownObjectRelease(v478);
      swift_unknownObjectRelease(v472);
      swift_bridgeObjectRelease_n(v189, 2);
      v478 = (char *)v277;
      v120 = v482;
    }
    else
    {
      swift_unknownObjectRelease(v478);
      swift_unknownObjectRelease(v472);
      Subtasks = v269;
      v478 = (char *)(v189 & 0xFFFFFFFFFFFFFF8);
      v169 = (v189 & 0xFFFFFFFFFFFFFF8) + 32;
      v159 = (2 * v473) | 1;
      v120 = v482;
    }
LABEL_42:
    v190 = 2;
    if ((_DWORD)v457 == (_DWORD)v456)
      v190 = 7;
    v428 = (char *)v190;
    if (v189 < 0)
      v191 = v189;
    else
      v191 = v189 & 0xFFFFFFFFFFFFFF8;
    v446 = (char *)v191;
    v447 = (char *)(v189 & 0xFFFFFFFFFFFFFF8);
    v424 = (v189 & 0xFFFFFFFFFFFFFF8) + 32;
    v192 = 1;
    v423 = (char *)((2 * v473) | 1);
    LODWORD(v427) = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.day(_:);
    v126 = v169;
    v96 = (char *)v151;
LABEL_50:
    v460 = (char *)v192;
    v470 = (char *)v76;
    Calendar.beginningOfNextDay(_:)(v96);
    v163 = v159 >> 1;
    v198 = swift_unknownObjectRetain(v478);
    v76 = Subtasks;
    if (Subtasks == v159 >> 1)
    {
      v76 = v159 >> 1;
      goto LABEL_64;
    }
    v472 = v159;
    v159 = v159 & 1 | (2 * Subtasks);
    while (2)
    {
      if (v76 >= v163)
      {
        __break(1u);
        goto LABEL_99;
      }
      v199 = v126;
      v151 = (uint64_t)*(id *)(v126 + 8 * v76);
      v200 = objc_msgSend((id)v151, "displayDateDate");
      if (!v200)
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v481 + 56))(v120, 1, 1, v483);
LABEL_54:
        sub_10000882C((uint64_t)v120, (uint64_t *)&unk_1008380D0);

        goto LABEL_55;
      }
      v201 = v200;
      v202 = (uint64_t)v480;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v200);

      v203 = v481;
      v204 = *(void (**)(char *, uint64_t, uint64_t))(v481 + 32);
      v205 = v202;
      v120 = v482;
      v96 = (char *)v483;
      v204(v482, v205, v483);
      (*(void (**)(char *, _QWORD, uint64_t, char *))(v203 + 56))(v120, 0, 1, v96);
      if ((*(unsigned int (**)(char *, uint64_t, char *))(v203 + 48))(v120, 1, v96) == 1)
        goto LABEL_54;
      v206 = v476;
      v96 = (char *)v483;
      v204(v476, (uint64_t)v120, v483);
      v207 = sub_10009FC50((unint64_t *)&qword_100842190, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v208 = dispatch thunk of static Comparable.< infix(_:_:)(v206, v479, v96, v207);
      ((void (*)(char *, char *))v475)(v206, v96);

      if ((v208 & 1) != 0)
      {
LABEL_55:
        ++v76;
        v159 += 2;
        v126 = v199;
        if (v163 == v76)
        {
          v76 = v163;
          v159 = v472;
          v153 = v455;
          goto LABEL_64;
        }
        continue;
      }
      break;
    }
    v126 = v199;
    if (Subtasks >= v76)
    {
      swift_unknownObjectRelease(v478);
      v213 = _swiftEmptyArrayStorage;
      v96 = v471;
      v153 = v455;
      goto LABEL_78;
    }
    v153 = v455;
    if (v76 < 0)
      goto LABEL_225;
LABEL_64:
    v96 = v443;
    v209 = REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.configuration.getter(v198);
    v120 = v458;
    REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v209);
    v466(v96, v468);
    v210 = v449;
    swift_bridgeObjectRetain(v449);
    v211 = v474;
    sub_1004B7430((uint64_t)v478, v126, Subtasks, v159, v210);
    v213 = v212;
    v474 = v211;
    v214 = swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t, __n128))v454)(v120, v461, v214);
    if (v473 < v76)
      goto LABEL_217;
    if (v467)
    {
      v216 = v463;
      swift_bridgeObjectRetain_n(v463, 2);
      v215 = _CocoaArrayWrapper.endIndex.getter(v446);
      swift_bridgeObjectRelease();
    }
    else
    {
      v215 = *((_QWORD *)v447 + 2);
      v216 = v463;
      swift_bridgeObjectRetain(v463);
    }
    v120 = v482;
    if (v215 < v76)
      goto LABEL_218;
    if (!v448 || v76 == v473)
      goto LABEL_74;
    if (v76 >= v473)
      goto LABEL_219;
    v217 = v76;
    v151 = v473;
    do
    {
      v218 = v217 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v217);
      v217 = v218;
    }
    while (v151 != v218);
LABEL_74:
    if (v467)
    {
      swift_bridgeObjectRetain(v216);
      v219 = v216;
      v220 = _CocoaArrayWrapper.subscript.getter(v76, v473, v446);
      v126 = v221;
      Subtasks = v222;
      v472 = v223;
      swift_unknownObjectRelease_n(v478, 2);
      swift_bridgeObjectRelease_n(v219, 2);
      v478 = (char *)v220;
    }
    else
    {
      swift_unknownObjectRelease_n(v478, 2);
      v478 = v447;
      v126 = v424;
      Subtasks = v76;
      v472 = (unint64_t)v423;
    }
    v96 = v471;
LABEL_78:
    v224 = v481;
    v76 = (int64_t)v470;
    if ((_DWORD)v457 != (_DWORD)v456 && !v213[2])
    {
      v193 = swift_bridgeObjectRelease();
      v194 = *(char **)(v224 + 40);
      ((void (*)(char *, char *, uint64_t, __n128))v194)(v96, v479, v483, v193);
      v195 = v460;
      if (v460 == (char *)2)
        goto LABEL_89;
LABEL_49:
      v196 = __OFADD__(v195, 1);
      v192 = (uint64_t)(v195 + 1);
      v159 = v472;
      if (v196)
      {
        __break(1u);
LABEL_217:
        __break(1u);
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
LABEL_221:
        __break(1u);
        continue;
      }
      goto LABEL_50;
    }
    break;
  }
  v225 = (uint64_t)v480;
  v459 = *(void (**)(char *, char *, uint64_t))(v481 + 16);
  v459(v480, v96, v483);
  v226 = v462;
  REMRemindersListDataView.ScheduledDateBucketsModel.Day.init(date:reminders:)(v225, v213);
  (*(void (**)(char *, _QWORD, uint64_t))(v469 + 104))(v226, v427, v153);
  swift_isUniquelyReferenced_nonNull_native(v76);
  if ((v227 & 1) == 0)
    v76 = sub_1002C879C(0, *(_QWORD *)(v76 + 16) + 1, 1, v76);
  v229 = *(_QWORD *)(v76 + 16);
  v228 = *(_QWORD *)(v76 + 24);
  v120 = v482;
  if (v229 >= v228 >> 1)
    v76 = sub_1002C879C(v228 > 1, v229 + 1, 1, v76);
  *(_QWORD *)(v76 + 16) = v229 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v469 + 32))(v76+ ((*(unsigned __int8 *)(v469 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v469 + 80))+ *(_QWORD *)(v469 + 72) * v229, v462, v153);
  v194 = *(char **)(v224 + 40);
  ((void (*)(char *, char *, uint64_t))v194)(v96, v479, v483);
  v195 = v460;
  if (v460 != v428)
    goto LABEL_49;
  if ((_DWORD)v457 == (_DWORD)v456)
  {
    v480 = (char *)v126;
    v151 = (uint64_t)v474;
    v230 = v472;
    goto LABEL_141;
  }
LABEL_89:
  v476 = v194;
  v231 = v420;
  v232 = v419;
  v233 = v421;
  (*(void (**)(char *, _QWORD, uint64_t))(v420 + 104))(v419, enum case for Calendar.Component.day(_:), v421);
  v234 = (uint64_t)v410;
  Calendar.date(byAdding:value:to:wrappingComponents:)(v232, 5, v96, 0);
  (*(void (**)(char *, uint64_t))(v231 + 8))(v232, v233);
  v235 = v409;
  v236 = v96;
  v237 = v483;
  v459 = *(void (**)(char *, char *, uint64_t))(v224 + 16);
  v459(v409, v236, v483);
  v238 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v224 + 48))(v234, 1, v237);
  v470 = (char *)v76;
  if (v238 == 1)
  {
    v120 = v411;
    (*(void (**)(char *, char *, uint64_t))(v224 + 32))(v411, v235, v483);
    sub_10000882C(v234, (uint64_t *)&unk_1008380D0);
  }
  else
  {
    v244 = v483;
    ((void (*)(char *, uint64_t))v475)(v235, v483);
    v120 = v411;
    (*(void (**)(char *, uint64_t, uint64_t))(v224 + 32))(v411, v234, v244);
  }
  v245 = (uint64_t)v478;
  swift_unknownObjectRetain(v478);
  v246 = v472;
  sub_1005171E0(v247, v126, Subtasks, v472, (uint64_t)v120);
  v153 = v248;
  v250 = v249;
  v252 = v251;
  v254 = v253;
  swift_unknownObjectRelease(v245);
  if (!v153)
  {
    v176 = (uint64_t)_swiftEmptyArrayStorage;
    v76 = (int64_t)v470;
    v264 = (uint64_t)v471;
    v151 = (uint64_t)v474;
    v230 = v246;
LABEL_134:
    v153 = (uint64_t)v404;
    if (!*(_QWORD *)(v176 + 16))
    {
      swift_bridgeObjectRelease();
      v96 = (char *)v264;
      goto LABEL_140;
    }
    v288 = *(int *)(sub_10001A630(&qword_10084E150) + 48);
    v96 = (char *)v264;
    v459((char *)v153, (char *)v264, v483);
    *(_QWORD *)(v153 + v288) = v176;
    v159 = v455;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v469 + 104))(v153, enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.nextFiveDays(_:), v455);
    swift_isUniquelyReferenced_nonNull_native(v76);
    if ((v289 & 1) == 0)
      goto LABEL_233;
    goto LABEL_136;
  }
  v256 = v405;
  v257 = REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.configuration.getter(v255);
  v258 = (uint64_t)v406;
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v257);
  v259.n128_f64[0] = ((double (*)(char *, uint64_t))v466)(v256, v468);
  v260 = v252;
  v76 = v258;
  v261 = v474;
  v262 = sub_10051743C(v153, v250, v260, v254, v259, v258, v449);
  v151 = (uint64_t)v261;
  if (!v261)
  {
    v176 = (uint64_t)v262;
    v454(v258, v461);
    Subtasks = v254 >> 1;
    v76 = (int64_t)v470;
    if (v473 < (uint64_t)(v254 >> 1))
      goto LABEL_236;
    v270 = v463;
    if (v467)
    {
      swift_bridgeObjectRetain_n(v463, 2);
      v271 = _CocoaArrayWrapper.endIndex.getter(v446);
      swift_bridgeObjectRelease();
    }
    else
    {
      v271 = *((_QWORD *)v447 + 2);
      swift_bridgeObjectRetain(v463);
    }
    if (v271 < Subtasks)
      goto LABEL_237;
    if (v448 && Subtasks != v473)
    {
      if (Subtasks >= v473)
        goto LABEL_239;
      v281 = Subtasks;
      v282 = v473;
      do
      {
        v283 = v281 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v281);
        v281 = v283;
      }
      while (v282 != v283);
    }
    if (v467)
    {
      swift_bridgeObjectRetain(v270);
      v284 = _CocoaArrayWrapper.subscript.getter(Subtasks, v473, v446);
      v126 = v285;
      Subtasks = v286;
      v230 = v287;
      swift_unknownObjectRelease(v478);
      swift_unknownObjectRelease(v153);
      swift_bridgeObjectRelease_n(v463, 2);
      v478 = (char *)v284;
    }
    else
    {
      swift_unknownObjectRelease(v478);
      swift_unknownObjectRelease(v153);
      v478 = v447;
      v126 = v424;
      v230 = (unint64_t)v423;
    }
    v264 = (uint64_t)v471;
    goto LABEL_134;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease(v153);
  v263 = v258;
LABEL_175:
  v454(v263, v461);
  v344 = v483;
  v345 = (void (*)(char *, uint64_t))v475;
  ((void (*)(char *, uint64_t))v475)(v120, v483);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease(v478);
LABEL_176:
  (*(void (**)(char *, uint64_t))(v417 + 8))(v464, v442);
  v345(v471, v344);
  return v76;
}

uint64_t sub_10051AC3C@<X0>(id *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_100516610(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_10051AC54(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2[31] = a1;
  v2[32] = v1;
  v2[33] = *v1;
  v3 = type metadata accessor for Locale(0);
  v2[34] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[35] = v4;
  v2[36] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v2[37] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[38] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[39] = swift_task_alloc(v7);
  v2[40] = swift_task_alloc(v7);
  v2[41] = swift_task_alloc(v7);
  v8 = type metadata accessor for Date(0);
  v2[42] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[43] = v9;
  v2[44] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10051AD28, 0, 0);
}

uint64_t sub_10051AD28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t MetatypeMetadata;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  id v24;
  id v25;
  _QWORD *v26;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;

  if (qword_100837820 != -1)
    swift_once(&qword_100837820, sub_10051BDE8);
  v1 = *(_QWORD *)(v0 + 256);
  v2 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 360) = sub_10001AAA8(v2, (uint64_t)qword_10084E158);
  v3 = swift_retain_n(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 256);
    v7 = *(_QWORD *)(v0 + 264);
    v8 = swift_slowAlloc(22, -1);
    v28 = (_QWORD *)swift_slowAlloc(8, -1);
    v29 = swift_slowAlloc(32, -1);
    v30 = v29;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 152) = v7;
    MetatypeMetadata = swift_getMetatypeMetadata(v7);
    v10 = String.init<A>(describing:)(v0 + 152, MetatypeMetadata);
    *(_QWORD *)(v0 + 232) = sub_10001A820(v10, v11, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240);
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2114;
    v12 = *(void **)(v6 + 24);
    *(_QWORD *)(v0 + 240) = v12;
    v13 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248);
    *v28 = v12;
    swift_release_n(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s: Start execution {listObjectID: %{public}@}", (uint8_t *)v8, 0x16u);
    v14 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v28, 1, v14);
    swift_slowDealloc(v28, -1, -1);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_release_n(*(_QWORD *)(v0 + 256));
  }

  v15 = *(_QWORD *)(v0 + 328);
  v16 = *(_QWORD *)(v0 + 304);
  v18 = *(void **)(v0 + 248);
  v17 = *(_QWORD *)(v0 + 256);
  Date.init()(v19);
  v20 = *(void **)(v17 + 24);
  *(_QWORD *)(v0 + 368) = v20;
  v21 = swift_allocObject(&unk_1007F8BE8, 32, 7);
  *(_QWORD *)(v0 + 376) = v21;
  *(_QWORD *)(v21 + 16) = v20;
  *(_QWORD *)(v21 + 24) = v18;
  *(_DWORD *)(v0 + 504) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v22 = *(void (**)(uint64_t))(v16 + 104);
  *(_QWORD *)(v0 + 384) = v22;
  v22(v15);
  v23 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  v24 = v20;
  v25 = v18;
  v26 = (_QWORD *)swift_task_alloc(v23);
  *(_QWORD *)(v0 + 392) = v26;
  *v26 = v0;
  v26[1] = sub_10051B020;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 16, *(_QWORD *)(v0 + 328), sub_10051CF20, v21, &_s31ThreadSafePartialRepresentationVN_1);
}

uint64_t sub_10051B020()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t (*v9)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 392);
  v4 = *(_QWORD *)(*v1 + 376);
  v5 = *(_QWORD *)(*v1 + 328);
  v6 = *(_QWORD *)(*v1 + 296);
  v7 = *(_QWORD *)(*v1 + 304);
  *(_QWORD *)(*v1 + 400) = v0;
  swift_task_dealloc(v3);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  *(_QWORD *)(v2 + 408) = v8;
  v8(v5, v6);
  swift_release(v4);
  if (v0)
    v9 = sub_10051B428;
  else
    v9 = sub_10051B0BC;
  return swift_task_switch(v9, 0, 0);
}

uint64_t sub_10051B0BC()
{
  uint64_t v0;
  __int128 v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t MetatypeMetadata;
  uint64_t v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 104) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 72) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 88) = v1;
  *(_QWORD *)(v0 + 120) = *(_QWORD *)(v0 + 64);
  if ((*(_BYTE *)(v0 + 104) & 1) != 0 || (*(_BYTE *)(v0 + 105) & 1) != 0)
  {
    v15 = swift_retain_n(*(_QWORD *)(v0 + 256));
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = *(void **)(v0 + 368);
      v19 = *(_QWORD *)(v0 + 264);
      v36 = *(_QWORD *)(v0 + 256);
      v20 = swift_slowAlloc(22, -1);
      v21 = (_QWORD *)swift_slowAlloc(8, -1);
      v35 = swift_slowAlloc(32, -1);
      v37 = v35;
      *(_DWORD *)v20 = 136446466;
      *(_QWORD *)(v0 + 200) = v19;
      MetatypeMetadata = swift_getMetatypeMetadata(v19);
      v23 = String.init<A>(describing:)(v0 + 200, MetatypeMetadata);
      *(_QWORD *)(v0 + 216) = sub_10001A820(v23, v24, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224);
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2114;
      *(_QWORD *)(v0 + 224) = v18;
      v25 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232);
      *v21 = v18;
      swift_release_n(v36);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s: Skipped suggesting conversion to grocery list because we already determined that we should suggest the conversion or it is already a grocery list {listObjectID: %{public}@}", (uint8_t *)v20, 0x16u);
      v26 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v21, 1, v26);
      swift_slowDealloc(v21, -1, -1);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      sub_10051CF50(v0 + 72);
    }
    else
    {
      v27 = *(_QWORD *)(v0 + 256);
      sub_10051CF50(v0 + 72);
      swift_release_n(v27);

    }
    v29 = *(_QWORD *)(v0 + 344);
    v28 = *(_QWORD *)(v0 + 352);
    v31 = *(_QWORD *)(v0 + 328);
    v30 = *(_QWORD *)(v0 + 336);
    v33 = *(_QWORD *)(v0 + 312);
    v32 = *(_QWORD *)(v0 + 320);
    v34 = *(_QWORD *)(v0 + 288);
    sub_10051BE78(*(_QWORD *)(v0 + 256), v28, *(_QWORD *)(v0 + 264));
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
    swift_task_dealloc(v28);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  else
  {
    v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 384);
    v3 = *(unsigned int *)(v0 + 504);
    v4 = *(void **)(v0 + 368);
    v5 = *(_QWORD *)(v0 + 320);
    v6 = *(_QWORD *)(v0 + 296);
    v7 = *(void **)(v0 + 248);
    v8 = swift_allocObject(&unk_1007F8C10, 32, 7);
    *(_QWORD *)(v0 + 416) = v8;
    *(_QWORD *)(v8 + 16) = v4;
    *(_QWORD *)(v8 + 24) = v7;
    v2(v5, v3, v6);
    v9 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
    v10 = v4;
    v11 = v7;
    v12 = (_QWORD *)swift_task_alloc(v9);
    *(_QWORD *)(v0 + 424) = v12;
    v13 = sub_10001A630((uint64_t *)&unk_10083AE10);
    *v12 = v0;
    v12[1] = sub_10051B4C4;
    return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 160, *(_QWORD *)(v0 + 320), sub_10051CF38, v8, v13);
  }
}

uint64_t sub_10051B428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v0 + 344);
  v1 = *(_QWORD *)(v0 + 352);
  v4 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 320);
  v7 = *(_QWORD *)(v0 + 288);
  sub_10051BE78(*(_QWORD *)(v0 + 256), v1, *(_QWORD *)(v0 + 264));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10051B4C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 416);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 424);
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 408);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 320);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  *(_QWORD *)(*(_QWORD *)v1 + 432) = v0;
  swift_task_dealloc(v2);
  v4(v5, v6);
  swift_release(v3);
  if (v0)
    v7 = sub_10051B6A4;
  else
    v7 = sub_10051B558;
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_10051B558(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *(_QWORD *)(v1 + 280);
  v2 = *(_QWORD *)(v1 + 288);
  v4 = *(_QWORD *)(v1 + 272);
  v5 = *(_QWORD *)(v1 + 160);
  *(_QWORD *)(v1 + 440) = v5;
  v6 = static Locale.current.getter(a1);
  v7 = Locale.identifier.getter(v6);
  v9 = v8;
  *(_QWORD *)(v1 + 448) = v7;
  *(_QWORD *)(v1 + 456) = v8;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (*(_QWORD *)(v5 + 16))
  {
    v10 = (_QWORD *)swift_task_alloc(dword_10084E23C);
    *(_QWORD *)(v1 + 464) = v10;
    *v10 = v1;
    v10[1] = sub_10051B748;
    return sub_10051C148(v5, v1 + 72, v7, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10051CF50(v1 + 72);
    v13 = *(_QWORD *)(v1 + 344);
    v12 = *(_QWORD *)(v1 + 352);
    v15 = *(_QWORD *)(v1 + 328);
    v14 = *(_QWORD *)(v1 + 336);
    v17 = *(_QWORD *)(v1 + 312);
    v16 = *(_QWORD *)(v1 + 320);
    v18 = *(_QWORD *)(v1 + 288);
    sub_10051BE78(*(_QWORD *)(v1 + 256), v12, *(_QWORD *)(v1 + 264));
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    swift_task_dealloc(v12);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(_QWORD))(v1 + 8))(0);
  }
}

uint64_t sub_10051B6A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10051CF50(v0 + 72);
  v2 = *(_QWORD *)(v0 + 344);
  v1 = *(_QWORD *)(v0 + 352);
  v4 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 320);
  v7 = *(_QWORD *)(v0 + 288);
  sub_10051BE78(*(_QWORD *)(v0 + 256), v1, *(_QWORD *)(v0 + 264));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10051B748(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 464);
  *(_QWORD *)(*v2 + 472) = v1;
  swift_task_dealloc(v5);
  swift_bridgeObjectRelease();
  if (v1)
  {
    v6 = sub_10051BAB8;
  }
  else
  {
    swift_bridgeObjectRelease();
    *(_BYTE *)(v4 + 508) = a1 & 1;
    v6 = sub_10051B7DC;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10051B7DC()
{
  uint64_t v0;
  char v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;

  v1 = *(_BYTE *)(v0 + 508);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 384);
  v3 = *(unsigned int *)(v0 + 504);
  v4 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 296);
  v6 = *(void **)(v0 + 248);
  v7 = swift_allocObject(&unk_1007F8C38, 81, 7);
  *(_QWORD *)(v0 + 480) = v7;
  *(_QWORD *)(v7 + 16) = v6;
  *(_OWORD *)(v7 + 24) = *(_OWORD *)(v0 + 72);
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(v0 + 88);
  *(_OWORD *)(v7 + 56) = *(_OWORD *)(v0 + 104);
  *(_QWORD *)(v7 + 72) = *(_QWORD *)(v0 + 120);
  *(_BYTE *)(v7 + 80) = v1;
  v2(v4, v3, v5);
  v8 = v6;
  sub_10051D4E0(v0 + 72);
  v9 = (_QWORD *)swift_task_alloc(async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1]);
  *(_QWORD *)(v0 + 488) = v9;
  *v9 = v0;
  v9[1] = sub_10051B8D8;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v9, *(_QWORD *)(v0 + 312), sub_10051D4C0, v7, &type metadata for () + 1);
}

uint64_t sub_10051B8D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 480);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 488);
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 408);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 312);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  *(_QWORD *)(*(_QWORD *)v1 + 496) = v0;
  swift_task_dealloc(v2);
  v4(v5, v6);
  swift_release(v3);
  if (v0)
    v7 = sub_10051BA14;
  else
    v7 = sub_10051B96C;
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_10051B96C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10051CF50(v0 + 72);
  v1 = *(unsigned __int8 *)(v0 + 508);
  v3 = *(_QWORD *)(v0 + 344);
  v2 = *(_QWORD *)(v0 + 352);
  v5 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 336);
  v7 = *(_QWORD *)(v0 + 312);
  v6 = *(_QWORD *)(v0 + 320);
  v8 = *(_QWORD *)(v0 + 288);
  sub_10051BE78(*(_QWORD *)(v0 + 256), v2, *(_QWORD *)(v0 + 264));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_10051BA14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10051CF50(v0 + 72);
  v2 = *(_QWORD *)(v0 + 344);
  v1 = *(_QWORD *)(v0 + 352);
  v4 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 320);
  v7 = *(_QWORD *)(v0 + 288);
  sub_10051BE78(*(_QWORD *)(v0 + 256), v1, *(_QWORD *)(v0 + 264));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10051BAB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t MetatypeMetadata;
  uint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 472);
  v2 = *(_QWORD *)(v0 + 456);
  swift_retain();
  swift_errorRetain(v1);
  swift_retain();
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v24 = *(_QWORD *)(v0 + 472);
    v6 = *(_QWORD *)(v0 + 456);
    v7 = *(void **)(v0 + 368);
    v8 = *(_QWORD *)(v0 + 264);
    v22 = *(_QWORD *)(v0 + 256);
    v23 = *(_QWORD *)(v0 + 448);
    v9 = swift_slowAlloc(42, -1);
    v21 = (_QWORD *)swift_slowAlloc(8, -1);
    v25 = swift_slowAlloc(96, -1);
    v26 = v25;
    *(_DWORD *)v9 = 136446978;
    v27 = v8;
    MetatypeMetadata = swift_getMetatypeMetadata(v8);
    v11 = String.init<A>(describing:)(&v27, MetatypeMetadata);
    *(_QWORD *)(v0 + 168) = sub_10001A820(v11, v12, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176);
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2114;
    *(_QWORD *)(v0 + 176) = v7;
    v13 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184);
    *v21 = v7;
    swift_release_n(v22);
    *(_WORD *)(v9 + 22) = 2082;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v0 + 184) = sub_10001A820(v23, v6, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192);
    swift_bridgeObjectRelease_n(v6, 3);
    *(_WORD *)(v9 + 32) = 2082;
    swift_getErrorValue(v24, v0 + 192, v0 + 128);
    v14 = Error.rem_errorDescription.getter(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
    *(_QWORD *)(v0 + 208) = sub_10001A820(v14, v15, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216);
    swift_bridgeObjectRelease();
    swift_errorRelease(v24);
    swift_errorRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s: Failed to predict whether to suggest conversion to grocery list {listObjectID: %{public}@, groceryLocaleID: %{public}s, error: %{public}s}", (uint8_t *)v9, 0x2Au);
    v16 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v21, 1, v16);
    swift_slowDealloc(v21, -1, -1);
    swift_arrayDestroy(v25, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v24);
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 472);
    v18 = *(_QWORD *)(v0 + 456);
    v19 = *(_QWORD *)(v0 + 256);
    swift_errorRelease(v17);
    swift_bridgeObjectRelease_n(v18, 2);
    swift_release_n(v19);
    swift_errorRelease(v17);
    swift_errorRelease(v17);

  }
  *(_BYTE *)(v0 + 508) = 0;
  return swift_task_switch(sub_10051B7DC, 0, 0);
}

uint64_t sub_10051BDE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084E158);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084E158);
  if (qword_100837638 != -1)
    swift_once(&qword_100837638, sub_1004A1870);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872088);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_10051BE78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t MetatypeMetadata;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  os_log_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_log_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100837820 != -1)
    swift_once(&qword_100837820, sub_10051BDE8);
  v10 = type metadata accessor for Logger(0);
  sub_10001AAA8(v10, (uint64_t)qword_10084E158);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  v11 = swift_retain_n(a1);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(32, -1);
    v27 = (_QWORD *)swift_slowAlloc(8, -1);
    v28 = swift_slowAlloc(32, -1);
    v29 = v28;
    *(_DWORD *)v14 = 136446722;
    v30 = a3;
    MetatypeMetadata = swift_getMetatypeMetadata(a3);
    v16 = String.init<A>(describing:)(&v30, MetatypeMetadata);
    v30 = sub_10001A820(v16, v17, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2114;
    v26 = v12;
    v18 = *(void **)(a1 + 24);
    v30 = (uint64_t)v18;
    v19 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
    v20 = v27;
    *v27 = v18;
    v21 = swift_release_n(a1);
    *(_WORD *)(v14 + 22) = 2048;
    v30 = Date.rem_elapsedInMilliseconds.getter(v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v22 = v26;
    _os_log_impl((void *)&_mh_execute_header, v26, v13, "%{public}s: Finished execution {listObjectID: %{public}@, elapsedSeconds: %f ms}", (uint8_t *)v14, 0x20u);
    v23 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v20, 1, v23);
    swift_slowDealloc(v20, -1, -1);
    v24 = v28;
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {
    swift_release_n(a1);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);

  }
}

uint64_t sub_10051C148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = sub_10001A630(&qword_100839A10);
  v5[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10051C1AC, 0, 0);
}

uint64_t sub_10051C1AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v2 = v0[6];
  v1 = v0[7];
  v4 = v0[4];
  v3 = v0[5];
  v6 = v0[2];
  v5 = v0[3];
  static TaskPriority.high.getter();
  v7 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v1, 0, 1, v7);
  v8 = swift_allocObject(&unk_1007F8C60, 120, 7);
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = v2;
  *(_QWORD *)(v8 + 40) = v4;
  *(_QWORD *)(v8 + 48) = v3;
  *(_QWORD *)(v8 + 56) = v6;
  v9 = *(_OWORD *)v5;
  v10 = *(_OWORD *)(v5 + 16);
  v11 = *(_OWORD *)(v5 + 32);
  *(_QWORD *)(v8 + 112) = *(_QWORD *)(v5 + 48);
  *(_OWORD *)(v8 + 80) = v10;
  *(_OWORD *)(v8 + 96) = v11;
  *(_OWORD *)(v8 + 64) = v9;
  swift_retain();
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  sub_10051D4E0(v5);
  v12 = sub_1002846F0(v1, (uint64_t)&unk_10084E248, v8);
  v0[8] = v12;
  v13 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
  v0[9] = v13;
  v14 = sub_10001A630((uint64_t *)&unk_10083AA20);
  *v13 = v0;
  v13[1] = sub_10051C2EC;
  return Task.value.getter(v0 + 11, v12, &type metadata for Bool, v14, &protocol self-conformance witness table for Error);
}

uint64_t sub_10051C2EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v2);
  swift_release(v3);
  if (v0)
    v4 = sub_10051C394;
  else
    v4 = sub_10051C358;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10051C358()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_10051C394()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

void sub_10051C3CC(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Class isa;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  char v32[56];
  _OWORD v33[3];
  uint64_t v34;
  uint64_t v35;

  v5 = _s10PredicatesOMa_1(0);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v9 = swift_allocObject(v8, 40, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v9 + 32) = a1;
  v35 = v9;
  specialized Array._endMutation()(v9);
  *v7 = v35;
  swift_storeEnumTagMultiPayload(v7, v5, 4);
  inited = swift_initStackObject(v8, v32);
  *(_OWORD *)(inited + 16) = xmmword_1006AAD80;
  *(_QWORD *)(inited + 32) = swift_getKeyPath(&unk_1006C1040);
  *(_QWORD *)(inited + 40) = swift_getKeyPath(&unk_1006C1070);
  KeyPath = swift_getKeyPath(&unk_1006C10A8);
  *(_QWORD *)(inited + 48) = KeyPath;
  v35 = inited;
  specialized Array._endMutation()(KeyPath);
  v12 = v35;
  v13 = a1;
  sub_10000A3AC();
  v15 = (void *)v14;
  v16 = (void *)sub_100358F8C(v12, 0, 0, v14);

  if (qword_1008376D0 != -1)
    swift_once(&qword_1008376D0, sub_1004A7024);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v16, "setSortDescriptors:", isa);

  v18 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v19 = NSManagedObjectContext.fetch<A>(_:)(v16, v18);
  if (v2)
  {

    sub_10001C744((uint64_t)v7, _s10PredicatesOMa_1);
    swift_bridgeObjectRelease();
    return;
  }
  v31 = a2;
  v20 = v13;
  v35 = v19;
  v21 = sub_10001A630(&qword_10083FF50);
  v22 = sub_1000EC4D8();
  v23 = Sequence.elements<A>(ofType:)(v18, v21, v18, v22);
  swift_bridgeObjectRelease();

  sub_10001C744((uint64_t)v7, _s10PredicatesOMa_1);
  swift_bridgeObjectRelease();
  if ((unint64_t)v23 >> 62)
  {
    if (v23 < 0)
      v27 = v23;
    else
      v27 = v23 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v23);
    v28 = _CocoaArrayWrapper.endIndex.getter(v27);
    swift_bridgeObjectRelease();
    if (v28)
      goto LABEL_7;
LABEL_15:
    swift_bridgeObjectRelease();
    v29 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v20);
    swift_willThrow(v29);
    return;
  }
  if (!*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_15;
LABEL_7:
  if ((v23 & 0xC000000000000001) != 0)
  {
    v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v23);
    v24 = v31;
    goto LABEL_10;
  }
  v24 = v31;
  if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v25 = *(id *)(v23 + 32);
LABEL_10:
    swift_bridgeObjectRelease();
    sub_10051D624(v25, (uint64_t)v33);
    v26 = v33[1];
    *(_OWORD *)v24 = v33[0];
    *(_OWORD *)(v24 + 16) = v26;
    *(_OWORD *)(v24 + 32) = v33[2];
    *(_QWORD *)(v24 + 48) = v34;
    return;
  }
  __break(1u);
}

void sub_10051C74C(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  Class isa;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  id v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  id v35;
  _QWORD *v36;
  _OWORD v37[2];
  _BYTE v38[24];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;

  v5 = _s10PredicatesOMa(0);
  __chkstk_darwin(v5);
  v7 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v7 = a1;
  v7[8] = 1;
  swift_storeEnumTagMultiPayload(v7, v8, 2);
  v9 = a1;
  sub_10000D2C0();
  v11 = v10;
  sub_10001C744((uint64_t)v7, _s10PredicatesOMa);
  v12 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v13 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v14 = objc_msgSend((id)swift_getObjCClassFromMetadata(v13), "entity");
  objc_msgSend(v12, "setEntity:", v14);

  objc_msgSend(v12, "setAffectedStores:", 0);
  objc_msgSend(v12, "setPredicate:", v11);
  objc_msgSend(v12, "setResultType:", 2);

  objc_msgSend(v12, "setReturnsDistinctResults:", 0);
  v15 = sub_10001A630((uint64_t *)&unk_100839E80);
  v16 = swift_allocObject(v15, 96, 7);
  *(_OWORD *)(v16 + 16) = xmmword_1006A3C40;
  *(_QWORD *)(v16 + 32) = 0x696669746E656469;
  *(_QWORD *)(v16 + 40) = 0xEA00000000007265;
  *(_QWORD *)(v16 + 88) = &type metadata for String;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = 0x656C746974;
  *(_QWORD *)(v16 + 72) = 0xE500000000000000;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v12, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v18 = sub_1000151B0(0, &qword_10083E320, NSDictionary_ptr);
  v19 = NSManagedObjectContext.fetch<A>(_:)(v12, v18);
  if (v2)
  {

    return;
  }
  v20 = v19;
  v34[1] = 0;
  v35 = v12;
  if ((unint64_t)v19 >> 62)
  {
    if (v19 < 0)
      v33 = v19;
    else
      v33 = v19 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v19);
    v21 = _CocoaArrayWrapper.endIndex.getter(v33);
    v36 = a2;
    if (v21)
      goto LABEL_5;
LABEL_29:
    v23 = _swiftEmptyArrayStorage;
LABEL_30:

    swift_bridgeObjectRelease_n(v20, 2);
    *v36 = v23;
    return;
  }
  v21 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v19);
  v36 = a2;
  if (!v21)
    goto LABEL_29;
LABEL_5:
  if (v21 >= 1)
  {
    v22 = 0;
    v23 = _swiftEmptyArrayStorage;
    v42 = (char *)&type metadata for Any + 8;
    while (1)
    {
      if ((v20 & 0xC000000000000001) != 0)
        v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v20);
      else
        v25 = *(id *)(v20 + 8 * v22 + 32);
      v26 = v25;
      *(_QWORD *)&v37[0] = 0x656C746974;
      *((_QWORD *)&v37[0] + 1) = 0xE500000000000000;
      v27 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v37, &type metadata for String);
      v28 = objc_msgSend(v26, "__swift_objectForKeyedSubscript:", v27);
      swift_unknownObjectRelease(v27);
      if (v28)
      {
        _bridgeAnyObjectToAny(_:)(v37, v28);
        swift_unknownObjectRelease(v28);
      }
      else
      {
        memset(v37, 0, sizeof(v37));
      }
      sub_1000A5CA8((uint64_t)v37, (uint64_t)v38, (uint64_t *)&unk_10083D5B0);
      if (v39)
      {
        if ((swift_dynamicCast(&v40, v38, v42, &type metadata for String, 6) & 1) != 0)
          goto LABEL_20;
      }
      else
      {
        sub_1000F4294((uint64_t)v38);
      }
      v40 = 0;
      v41 = 0;
LABEL_20:

      v29 = v41;
      if (v41)
      {
        v30 = v40;
        if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0)
          v23 = sub_1002C8224(0, v23[2] + 1, 1, v23);
        v32 = v23[2];
        v31 = v23[3];
        if (v32 >= v31 >> 1)
          v23 = sub_1002C8224((_QWORD *)(v31 > 1), v32 + 1, 1, v23);
        v23[2] = v32 + 1;
        v24 = &v23[2 * v32];
        v24[4] = v30;
        v24[5] = v29;
      }
      if (v21 == ++v22)
        goto LABEL_30;
    }
  }
  __break(1u);
}

uint64_t sub_10051CBAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[6] = a7;
  v8[7] = a8;
  v8[4] = a5;
  v8[5] = a6;
  v8[2] = a1;
  v8[3] = a4;
  return swift_task_switch(sub_10051CBCC, 0, 0);
}

uint64_t sub_10051CBCC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v0[8] = (*(uint64_t (**)(_QWORD, _QWORD))(v0[3] + 40))(v0[4], v0[5]);
  v1 = v0[7];
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_10083F36C);
  v0[9] = v4;
  *v4 = v0;
  v4[1] = sub_10051CC70;
  return REMGroceryClassifier.shouldSuggestConvertToGrocery(titles:listName:)(v0[6], v2, v3);
}

uint64_t sub_10051CC70(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 72);
  *(_QWORD *)(*v2 + 80) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10051CD28;
  }
  else
  {
    *(_BYTE *)(v4 + 88) = a1 & 1;
    v6 = sub_10051CCE8;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10051CCE8()
{
  uint64_t v0;
  char v1;
  _BYTE *v2;

  v1 = *(_BYTE *)(v0 + 88);
  v2 = *(_BYTE **)(v0 + 16);

  *v2 = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10051CD28()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10051CD5C(void *a1, uint64_t *a2, char a3)
{
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;

  v4 = *a2;
  v13 = 0;
  v5 = objc_msgSend(a1, "existingObjectWithID:error:", v4, &v13);
  v6 = v13;
  if (v5)
  {
    v7 = v5;
    v8 = objc_opt_self(REMCDList);
    v9 = (void *)swift_dynamicCastObjCClass(v7, v8);
    v10 = v6;
    if (v9)
      objc_msgSend(v9, "setShouldSuggestConversionToGroceryList:", a3 & 1);

  }
  else
  {
    v11 = v13;
    _convertNSErrorToError(_:)(v6);

    swift_willThrow(v12);
  }
}

uint64_t sub_10051CE50()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for RDGroceryOperationSuggestConversionToGroceryList()
{
  return objc_opt_self(_TtC7remindd48RDGroceryOperationSuggestConversionToGroceryList);
}

uint64_t sub_10051CEA4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_10084E234);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000CAD70;
  return sub_10051AC54(a1);
}

uint64_t sub_10051CEF4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10051CF20(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_10051C3CC(*(void **)(v1 + 16), a1);
}

void sub_10051CF38(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_10051C74C(*(void **)(v1 + 16), a1);
}

uint64_t sub_10051CF50(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(void **)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 48);

  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

unint64_t sub_10051CF9C()
{
  id *v0;
  id *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  unint64_t v15;
  unint64_t v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  void *v20;
  Swift::String v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  Swift::String v27;
  uint64_t v28;
  void *v29;
  Swift::String v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  Swift::String v36;
  uint64_t v37;
  void *v38;
  Swift::String v39;
  unint64_t v40;
  unint64_t v41;
  Swift::String v42;
  uint64_t v43;
  void *v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v48;
  _BYTE v49[16];
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD v54[2];
  _BYTE v55[8];

  v1 = v0;
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  v54[0] = 0xD00000000000002BLL;
  v54[1] = 0x80000001006FE900;
  v2 = *v0;
  v3 = objc_msgSend(v2, "description");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);

  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8069182;
  v8._object = (void *)0xE300000000000000;
  String.append(_:)(v8);
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  strcpy((char *)v54, "remObjectID: ");
  HIWORD(v54[1]) = -4864;
  sub_1000A5CA8((uint64_t)(v1 + 1), (uint64_t)v55, (uint64_t *)&unk_100844910);
  sub_1000A5CA8((uint64_t)v55, (uint64_t)&v52, (uint64_t *)&unk_100844910);
  v9 = sub_10001A630((uint64_t *)&unk_100844910);
  v10._countAndFlagsBits = Optional.descriptionOrNil.getter(v9);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 8236;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  v12 = v54[0];
  v13 = (void *)v54[1];
  v54[0] = 0xD00000000000002BLL;
  v54[1] = 0x80000001006FE900;
  swift_bridgeObjectRetain(0x80000001006FE900);
  v14._countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = v54[0];
  v16 = v54[1];
  v52 = 0x203A656D616ELL;
  v53 = 0xE600000000000000;
  sub_1000A5CA8((uint64_t)(v1 + 2), (uint64_t)v54, (uint64_t *)&unk_10083A370);
  sub_1000A5CA8((uint64_t)v54, (uint64_t)&v50, (uint64_t *)&unk_10083A370);
  v48 = sub_10001A630((uint64_t *)&unk_10083A370);
  v17._countAndFlagsBits = Optional.descriptionOrNil.getter(v48);
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 8236;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  v19 = v52;
  v20 = (void *)v53;
  v52 = v15;
  v53 = v16;
  swift_bridgeObjectRetain(v16);
  v21._countAndFlagsBits = v19;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = v52;
  v23 = v53;
  v52 = 0;
  v53 = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v52 = 0xD00000000000001ELL;
  v53 = 0x80000001006FE930;
  if (((_BYTE)v1[4] & 1) != 0)
    v24 = 1702195828;
  else
    v24 = 0x65736C6166;
  if (((_BYTE)v1[4] & 1) != 0)
    v25 = 0xE400000000000000;
  else
    v25 = 0xE500000000000000;
  v26 = v25;
  String.append(_:)(*(Swift::String *)&v24);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 8236;
  v27._object = (void *)0xE200000000000000;
  String.append(_:)(v27);
  v28 = v52;
  v29 = (void *)v53;
  v52 = v22;
  v53 = v23;
  swift_bridgeObjectRetain(v23);
  v30._countAndFlagsBits = v28;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v31 = v52;
  v32 = v53;
  v52 = 0;
  v53 = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  v52 = 0xD000000000000026;
  v53 = 0x8000000100706F10;
  if ((*((_BYTE *)v1 + 33) & 1) != 0)
    v33 = 1702195828;
  else
    v33 = 0x65736C6166;
  if ((*((_BYTE *)v1 + 33) & 1) != 0)
    v34 = 0xE400000000000000;
  else
    v34 = 0xE500000000000000;
  v35 = v34;
  String.append(_:)(*(Swift::String *)&v33);
  swift_bridgeObjectRelease();
  v36._countAndFlagsBits = 8236;
  v36._object = (void *)0xE200000000000000;
  String.append(_:)(v36);
  v37 = v52;
  v38 = (void *)v53;
  v52 = v31;
  v53 = v32;
  swift_bridgeObjectRetain(v32);
  v39._countAndFlagsBits = v37;
  v39._object = v38;
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v40 = v52;
  v41 = v53;
  v52 = 0;
  v53 = 0xE000000000000000;
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v50 = 0xD000000000000011;
  v51 = 0x80000001006FE950;
  sub_1000A5CA8((uint64_t)(v1 + 5), (uint64_t)&v52, (uint64_t *)&unk_10083A370);
  sub_1000A5CA8((uint64_t)&v52, (uint64_t)v49, (uint64_t *)&unk_10083A370);
  v42._countAndFlagsBits = Optional.descriptionOrNil.getter(v48);
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  v43 = v50;
  v44 = (void *)v51;
  v50 = v40;
  v51 = v41;
  swift_bridgeObjectRetain(v41);
  v45._countAndFlagsBits = v43;
  v45._object = v44;
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(v51);
  v46._countAndFlagsBits = 125;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  return v50;
}

unint64_t sub_10051D43C()
{
  return sub_10051CF9C();
}

uint64_t sub_10051D47C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 81, 7);
}

void sub_10051D4C0()
{
  uint64_t v0;

  sub_10051CD5C(*(void **)(v0 + 16), (uint64_t *)(v0 + 24), *(_BYTE *)(v0 + 80));
}

uint64_t sub_10051D4E0(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;

  v2 = *(void **)a1;
  v3 = *(void **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 48));
  v5 = v2;
  v6 = v3;
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_10051D528()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  return swift_deallocObject(v0, 120, 7);
}

uint64_t sub_10051D584(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = swift_task_alloc(dword_10084E244);
  v7 = *(_OWORD *)(v1 + 48);
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = sub_1000CAD70;
  *(_QWORD *)(v6 + 56) = v1 + 64;
  *(_OWORD *)(v6 + 40) = v7;
  *(_QWORD *)(v6 + 24) = v4;
  *(_QWORD *)(v6 + 32) = v5;
  *(_QWORD *)(v6 + 16) = a1;
  return swift_task_switch(sub_10051CBCC, 0, 0);
}

void sub_10051D624(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = objc_msgSend(a1, "name");
  if (v4)
  {
    v5 = v4;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

  }
  else
  {
    v17 = 0;
    v7 = 0;
  }
  v8 = objc_msgSend(a1, "objectID");
  v9 = objc_msgSend(a1, "remObjectID");
  v10 = objc_msgSend(a1, "shouldCategorizeGroceryItems");
  v11 = objc_msgSend(a1, "shouldSuggestConversionToGroceryList");
  v12 = objc_msgSend(a1, "groceryLocaleID");
  if (v12)
  {
    v13 = v12;
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v16 = v15;

  }
  else
  {

    v14 = 0;
    v16 = 0;
  }
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = v17;
  *(_QWORD *)(a2 + 24) = v7;
  *(_BYTE *)(a2 + 32) = v10;
  *(_BYTE *)(a2 + 33) = v11;
  *(_QWORD *)(a2 + 40) = v14;
  *(_QWORD *)(a2 + 48) = v16;
}

double _s31ThreadSafePartialRepresentationVwxx_1(uint64_t a1)
{
  double result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48)).n128_u64[0];
  return result;
}

uint64_t _s31ThreadSafePartialRepresentationVwcp_0(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = v3;
  v8 = v4;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t _s31ThreadSafePartialRepresentationVwca_1(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

__n128 _s31ThreadSafePartialRepresentationVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s31ThreadSafePartialRepresentationVwta_1(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t _s31ThreadSafePartialRepresentationVwet_0(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s31ThreadSafePartialRepresentationVwst_0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s31ThreadSafePartialRepresentationVMa_2()
{
  return &_s31ThreadSafePartialRepresentationVN_1;
}

uint64_t sub_10051D9CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084E250);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084E250);
  if (qword_100837678 != -1)
    swift_once(&qword_100837678, sub_1004A1950);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872148);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

Swift::Void __swiftcall RDStoreControllerMigrator_IsPinnedByCurrentUser.migrateStoreIfNeeded(_:metadata:)(NSPersistentStore _, NSMutableDictionary metadata)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  Class isa;
  uint64_t v10;
  id v11;
  _OWORD v12[2];
  _QWORD v13[4];

  *(_QWORD *)&v12[0] = 0xD00000000000002FLL;
  *((_QWORD *)&v12[0] + 1) = 0x80000001006C1100;
  v4 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v12, &type metadata for String);
  v5 = -[objc_class __swift_objectForKeyedSubscript:](metadata.super.super.isa, "__swift_objectForKeyedSubscript:", v4);
  swift_unknownObjectRelease(v4);
  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(v12, v5);
    swift_unknownObjectRelease(v5);
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  sub_10001A5E8((uint64_t)v12, (uint64_t)v13);
  if (!v13[3])
  {
    sub_1000F4294((uint64_t)v13);
LABEL_9:
    sub_10051DC54(_.super.isa);
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    v13[0] = 0xD00000000000002FLL;
    v13[1] = 0x80000001006C1100;
    v10 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v13, &type metadata for String);
    -[objc_class __swift_setObject:forKeyedSubscript:](metadata.super.super.isa, "__swift_setObject:forKeyedSubscript:", isa, v10);

    swift_unknownObjectRelease(v10);
    return;
  }
  v6 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  if ((swift_dynamicCast(&v11, v13, (char *)&type metadata for Any + 8, v6, 6) & 1) == 0)
    goto LABEL_9;
  v7 = v11;
  v8 = objc_msgSend(v11, "integerValue");

  if ((uint64_t)v8 <= 0)
    goto LABEL_9;
}

uint64_t sub_10051DC54(void *a1)
{
  uint64_t ObjectType;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t MetatypeMetadata;
  uint64_t v10;
  unint64_t v11;
  id v12;
  unint64_t v13;
  id v14;
  id v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t result;
  uint64_t v23;
  uint64_t aBlock;
  _QWORD v25[4];
  uint64_t v26;

  ObjectType = swift_getObjectType();
  if (qword_100837828 != -1)
    swift_once(&qword_100837828, sub_10051D9CC);
  v3 = type metadata accessor for Logger(0);
  sub_10001AAA8(v3, (uint64_t)qword_10084E250);
  v4 = a1;
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc(22, -1);
    v8 = swift_slowAlloc(64, -1);
    v23 = v8;
    aBlock = ObjectType;
    *(_DWORD *)v7 = 136315394;
    MetatypeMetadata = swift_getMetatypeMetadata(ObjectType);
    v10 = String.init<A>(describing:)(&aBlock, MetatypeMetadata);
    aBlock = sub_10001A820(v10, v11, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v25);
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2082;
    v12 = sub_1002AEF14();
    aBlock = sub_10001A820((uint64_t)v12, v13, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v25);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s: BEGIN {store: %{public}s}", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

  }
  v14 = objc_msgSend(objc_allocWithZone((Class)NSManagedObjectContext), "initWithConcurrencyType:", 1);
  v15 = objc_msgSend(v4, "persistentStoreCoordinator");
  objc_msgSend(v14, "setPersistentStoreCoordinator:", v15);

  objc_msgSend(v14, "setTransactionAuthor:", RDStoreControllerIsPinnedByCurrentUserMigrationAuthor);
  v16 = (_QWORD *)swift_allocObject(&unk_1007F8D30, 40, 7);
  v16[2] = v14;
  v16[3] = v4;
  v16[4] = ObjectType;
  v17 = swift_allocObject(&unk_1007F8D58, 32, 7);
  *(_QWORD *)(v17 + 16) = sub_10051E93C;
  *(_QWORD *)(v17 + 24) = v16;
  v25[3] = sub_1000098E4;
  v26 = v17;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v25[0] = 1107296256;
  v25[1] = sub_1000098C4;
  v25[2] = &unk_1007F8D70;
  v18 = _Block_copy(&aBlock);
  v19 = v26;
  v20 = v4;
  v21 = v14;
  swift_retain();
  swift_release(v19);
  objc_msgSend(v21, "performBlockAndWait:", v18);

  _Block_release(v18);
  LOBYTE(v21) = swift_isEscapingClosureAtFileLocation(v17, "", 119, 57, 45, 1);
  swift_release(v16);
  result = swift_release(v17);
  if ((v21 & 1) != 0)
    __break(1u);
  return result;
}

void sub_10051DFC0(void *a1, NSObject *a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  void *v45;
  BOOL v46;
  double v47;
  id v48;
  unsigned __int8 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  double v53;
  unsigned int v54;
  double v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  NSObject *v60;
  NSObject *v61;
  os_log_type_t v62;
  int v63;
  uint64_t v64;
  uint64_t MetatypeMetadata;
  uint64_t v66;
  unint64_t v67;
  id v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  double v72;
  void (*v73)(char *, uint64_t);
  NSObject *v74;
  id v75;
  void (*v76)(char *, uint64_t);
  id v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  double v87;
  NSObject *v88;
  _QWORD v89[3];
  char v90[16];
  double v91;
  uint64_t v92;
  char v93[48];

  v87 = *(double *)&a3;
  v88 = a2;
  v4 = _s10PredicatesOMa_1(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v86 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v80 - v11;
  __chkstk_darwin(v13);
  v15 = (char *)&v80 - v14;
  Date.init()(v16);
  v17 = sub_10001A630((uint64_t *)&unk_10083AD90);
  *(double *)&v18 = COERCE_DOUBLE(swift_initStackObject(v17, v93));
  *(_OWORD *)(v18 + 16) = xmmword_1006A8550;
  *(_QWORD *)(v18 + 32) = swift_getKeyPath(&unk_1006C1168);
  KeyPath = swift_getKeyPath(&unk_1006C11A8);
  *(_QWORD *)(v18 + 40) = KeyPath;
  v91 = *(double *)&v18;
  specialized Array._endMutation()(KeyPath);
  v20 = *(_QWORD *)&v91;
  swift_storeEnumTagMultiPayload(v6, v4, 24);
  sub_10000A3AC();
  v22 = v21;
  sub_1000EC49C((uint64_t)v6);
  v23 = (void *)sub_100358F8C(v20, 0, 0, (uint64_t)v22);
  swift_bridgeObjectRelease();

  v24 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v25 = NSManagedObjectContext.fetch<A>(_:)(v23, v24);
  v41 = v25;
  v80 = a1;
  v84 = v12;
  if ((unint64_t)v25 >> 62)
  {
    if (v25 < 0)
      v79 = v25;
    else
      v79 = v25 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v25);
    v42 = _CocoaArrayWrapper.endIndex.getter(v79);
    swift_bridgeObjectRelease();
  }
  else
  {
    v42 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v83 = v7;
  v85 = v15;
  v82 = v8;
  v81 = v23;
  if (v42)
  {
    if (v42 < 1)
      __break(1u);
    *(double *)&v28 = 0.0;
    v43 = 0;
    v30 = &selRef_rd_isExcludedFromBackup;
    while (1)
    {
      if ((v41 & 0xC000000000000001) != 0)
        v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v43, v41);
      else
        v44 = *(id *)(v41 + 8 * v43 + 32);
      v45 = v44;
      if ((objc_msgSend(v44, "isPinnedByCurrentUser", v80, v81) & 1) != 0
        || objc_msgSend(v45, "sharingStatus") > 1)
      {

      }
      else
      {
        objc_msgSend(v45, "setIsPinnedByCurrentUser:", 1);

        v46 = __OFADD__(v28, 1);
        v28 = ((char *)v28 + 1);
        if (v46)
        {
          __break(1u);
          goto LABEL_21;
        }
      }
      if (v42 == ++v43)
        goto LABEL_23;
    }
  }
  *(double *)&v28 = 0.0;
LABEL_23:
  *(_QWORD *)&v47 = swift_bridgeObjectRelease().n128_u64[0];
  v48 = v80;
  v49 = objc_msgSend(v80, "hasChanges", v47);
  v50 = v83;
  v51 = v85;
  v52 = v86;
  v53 = v87;
  if ((v49 & 1) == 0)
    goto LABEL_26;
  v91 = 0.0;
  v54 = objc_msgSend(v48, "save:", &v91);
  v55 = v91;
  if (v54)
  {
    v56 = *(id *)&v91;
LABEL_26:
    if (qword_100837828 != -1)
      swift_once(&qword_100837828, sub_10051D9CC);
    v57 = type metadata accessor for Logger(0);
    sub_10001AAA8(v57, (uint64_t)qword_10084E250);
    v58 = v82;
    v59 = v84;
    (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v84, v51, v50);
    v60 = v88;
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.default.getter(v61);
    v63 = v62;
    v88 = v61;
    if (os_log_type_enabled(v61, v62))
    {
      v64 = swift_slowAlloc(42, -1);
      v80 = (id)swift_slowAlloc(64, -1);
      v91 = v53;
      v92 = (uint64_t)v80;
      *(_DWORD *)v64 = 136315906;
      MetatypeMetadata = swift_getMetatypeMetadata(*(_QWORD *)&v53);
      v66 = String.init<A>(describing:)(&v91, MetatypeMetadata);
      v91 = COERCE_DOUBLE(sub_10001A820(v66, v67, &v92));
      LODWORD(v87) = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);
      swift_bridgeObjectRelease();
      *(_WORD *)(v64 + 12) = 2082;
      v68 = sub_1002AEF14();
      v91 = COERCE_DOUBLE(sub_10001A820((uint64_t)v68, v69, &v92));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);

      swift_bridgeObjectRelease();
      *(_WORD *)(v64 + 22) = 2050;
      v91 = *(double *)&v28;
      v70 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);
      *(_WORD *)(v64 + 32) = 2050;
      Date.init()(v70);
      v71 = v84;
      v72 = Date.timeIntervalSince(_:)(v84);
      v73 = *(void (**)(char *, uint64_t))(v58 + 8);
      v73(v52, v50);
      v91 = v72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);
      v73(v71, v50);
      v74 = v88;
      _os_log_impl((void *)&_mh_execute_header, v88, LOBYTE(v87), "%s: END {store: %{public}s, updateCount = %{public}ld, elapsedSeconds: %{public}f}", (uint8_t *)v64, 0x2Au);
      v75 = v80;
      swift_arrayDestroy(v80, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v75, -1, -1);
      swift_slowDealloc(v64, -1, -1);

      v73(v85, v50);
    }
    else
    {

      v76 = *(void (**)(char *, uint64_t))(v58 + 8);
      v76(v59, v50);

      v76(v51, v50);
    }
    return;
  }
  v77 = *(id *)&v91;
  v43 = _convertNSErrorToError(_:)(*(_QWORD *)&v55);

  swift_willThrow(v78);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v51, v50);
  if (qword_100837828 != -1)
    swift_once(&qword_100837828, sub_10051D9CC);
  v26 = type metadata accessor for Logger(0);
  sub_10001AAA8(v26, (uint64_t)qword_10084E250);
  v27 = v88;
  swift_errorRetain(v43);
  *(double *)&v28 = COERCE_DOUBLE(v27);
  v29 = swift_errorRetain(v43);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter(v30);
  if (os_log_type_enabled(v30, v31))
  {
    v32 = swift_slowAlloc(32, -1);
    v33 = swift_slowAlloc(96, -1);
    v92 = v33;
    *(_DWORD *)v32 = 136315650;
    v91 = v87;
    v34 = swift_getMetatypeMetadata(*(_QWORD *)&v87);
    v35 = String.init<A>(describing:)(&v91, v34);
    v91 = COERCE_DOUBLE(sub_10001A820(v35, v36, &v92));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 12) = 2082;
    v37 = sub_1002AEF14();
    v91 = COERCE_DOUBLE(sub_10001A820((uint64_t)v37, v38, &v92));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);

    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 22) = 2082;
    swift_getErrorValue(v43, v90, v89);
    v39 = Error.rem_errorDescription.getter(v89[1], v89[2]);
    v91 = COERCE_DOUBLE(sub_10001A820(v39, v40, &v92));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);
    swift_bridgeObjectRelease();
    swift_errorRelease(v43);
    swift_errorRelease(v43);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "%s: FAILED {store: %{public}s, error: %{public}s}", (uint8_t *)v32, 0x20u);
    swift_arrayDestroy(v33, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v32, -1, -1);

    swift_errorRelease(v43);
  }
  else
  {
LABEL_21:
    swift_errorRelease(v43);

    swift_errorRelease(v43);
    swift_errorRelease(v43);

  }
}

id RDStoreControllerMigrator_IsPinnedByCurrentUser.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerMigrator_IsPinnedByCurrentUser();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for RDStoreControllerMigrator_IsPinnedByCurrentUser()
{
  return objc_opt_self(_TtC7remindd47RDStoreControllerMigrator_IsPinnedByCurrentUser);
}

id RDStoreControllerMigrator_IsPinnedByCurrentUser.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerMigrator_IsPinnedByCurrentUser();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10051E910()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_10051E93C()
{
  uint64_t v0;

  sub_10051DFC0(*(void **)(v0 + 16), *(NSObject **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_10051E948()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10051E968()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084E290);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084E290);
  if (qword_1008375E8 != -1)
    swift_once(&qword_1008375E8, sub_1004A1758);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871F98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_10051E9F8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 16), "synchronize");
}

void sub_10051EA08()
{
  sub_10016EF80();
}

id sub_10051EA28()
{
  return objc_msgSend((id)objc_opt_self(ICUtilities), "isInternetReachable");
}

uint64_t sub_10051EA50()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100837830 != -1)
    swift_once(&qword_100837830, sub_10051E968);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10001AAA8(v9, (uint64_t)qword_10084E290);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.info.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Reminder daemon started", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = *(_QWORD *)&v1[OBJC_IVAR____TtC7remindd8RDDaemon_xpcClientConnectionListener];
  objc_msgSend(*(id *)(v14 + OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcListener), "resume");
  objc_msgSend(*(id *)(v14 + OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcListenerUserInteractive), "resume");
  if (qword_100836F30 != -1)
    swift_once(&qword_100836F30, sub_1001BA924);
  v15 = swift_allocObject(&unk_1007F8DD8, 24, 7);
  *(_QWORD *)(v15 + 16) = v1;
  aBlock[4] = sub_10051FBC8;
  v24 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007F8DF0;
  v16 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v1);
  v22 = _swiftEmptyArrayStorage;
  v17 = sub_1000D3124();
  v18 = sub_10001A630((uint64_t *)&unk_100838000);
  v19 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v2, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v24);
}

void sub_10051ED38(uint64_t a1)
{
  _QWORD *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD **)(a1 + OBJC_IVAR____TtC7remindd8RDDaemon_disabledAccountsEventHandler);
  v3 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
  v4 = objc_msgSend((id)objc_opt_self(ICCloudContext), "babysittableWaiterID");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8 = objc_msgSend((id)objc_opt_self(DABabysitter), "sharedBabysitter");
  if (v8)
  {
    v9 = v8;
    sub_10051FBD0(v3, v5, v7, v8, v2);

    swift_bridgeObjectRelease(v7);
    if (*(_QWORD *)(a1 + OBJC_IVAR____TtC7remindd8RDDaemon_suggestedAttributesAutoTrainer))
      sub_100576F70();
    sub_10051FED8(a1 + OBJC_IVAR____TtC7remindd8RDDaemon_housekeepingActivityScheduler, (uint64_t)v14);
    v10 = v15;
    if (v15)
    {
      v11 = v16;
      sub_10000A388(v14, v15);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v14);
    }
    else
    {
      sub_10000882C((uint64_t)v14, &qword_100838048);
    }
    sub_10051FED8(a1 + OBJC_IVAR____TtC7remindd8RDDaemon_cloudConfigurationUpdater, (uint64_t)v14);
    v12 = v15;
    if (v15)
    {
      v13 = v16;
      sub_10000A388(v14, v15);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v14);
    }
    else
    {
      sub_10000882C((uint64_t)v14, &qword_100838048);
    }
    if (*(_QWORD *)(a1 + OBJC_IVAR____TtC7remindd8RDDaemon_extraneousAlarmsCollector))
      sub_100206AD8();
  }
  else
  {
    __break(1u);
  }
}

_QWORD *sub_10051EF04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *result;
  uint64_t v22;

  v0 = sub_10011AB04();
  v1 = v0;
  v2 = *(_QWORD *)(v0 + 16);
  if (!v2)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return _swiftEmptyDictionarySingleton;
  }
  swift_bridgeObjectRetain(v0);
  v3 = (_QWORD *)(v1 + 40);
  while (1)
  {
    v5 = *v3;
    v22 = *(v3 - 1);
    swift_bridgeObjectRetain(*v3);
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v9 = sub_10001A6DC(0xD00000000000001CLL, 0x8000000100707280);
    v10 = _swiftEmptyDictionarySingleton[2];
    v11 = (v8 & 1) == 0;
    v12 = v10 + v11;
    if (__OFADD__(v10, v11))
      break;
    v13 = v8;
    if (_swiftEmptyDictionarySingleton[3] >= v12)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v8 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        sub_1002D6574();
        if ((v13 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      sub_1002CCF14(v12, isUniquelyReferenced_nonNull_native);
      v14 = sub_10001A6DC(0xD00000000000001CLL, 0x8000000100707280);
      if ((v13 & 1) != (v15 & 1))
        goto LABEL_20;
      v9 = v14;
      if ((v13 & 1) != 0)
      {
LABEL_3:
        v4 = (_QWORD *)(_swiftEmptyDictionarySingleton[7] + 16 * v9);
        swift_bridgeObjectRelease();
        *v4 = v22;
        v4[1] = v5;
        goto LABEL_4;
      }
    }
    _swiftEmptyDictionarySingleton[(v9 >> 6) + 8] |= 1 << v9;
    v16 = (_QWORD *)(_swiftEmptyDictionarySingleton[6] + 16 * v9);
    *v16 = 0xD00000000000001CLL;
    v16[1] = 0x8000000100707280;
    v17 = (_QWORD *)(_swiftEmptyDictionarySingleton[7] + 16 * v9);
    *v17 = v22;
    v17[1] = v5;
    v18 = _swiftEmptyDictionarySingleton[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_19;
    _swiftEmptyDictionarySingleton[2] = v20;
    swift_bridgeObjectRetain(0x8000000100707280);
LABEL_4:
    v3 += 2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

id sub_10051F19C()
{
  return sub_1000E67EC(type metadata accessor for RDDaemon);
}

uint64_t type metadata accessor for RDDaemon()
{
  return objc_opt_self(_TtC7remindd8RDDaemon);
}

id sub_10051F47C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;

  v1 = v0;
  if (qword_100837830 != -1)
    swift_once(&qword_100837830, sub_10051E968);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001AAA8(v2, (uint64_t)qword_10084E290);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Reminder barebones daemon started", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd17RDBarebonesDaemon_xpcClientConnectionListener);
  objc_msgSend(*(id *)(v7 + OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcListener), "resume");
  return objc_msgSend(*(id *)(v7 + OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcListenerUserInteractive), "resume");
}

id sub_10051F588()
{
  return sub_1000E67EC(type metadata accessor for RDBarebonesDaemon);
}

uint64_t type metadata accessor for RDBarebonesDaemon()
{
  return objc_opt_self(_TtC7remindd17RDBarebonesDaemon);
}

uint64_t sub_10051F5EC(void *a1, void *a2, char *a3)
{
  uint64_t v6;
  char *v7;
  uint64_t result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  NSString v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  void *v28;
  char *v29;
  id v30;
  id v31;
  objc_super v32;
  uint64_t v33;

  *(_QWORD *)&a3[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_clientConnections] = &_swiftEmptySetSingleton;
  sub_100017004();
  v6 = qword_100836F08;
  v7 = a3;
  if (v6 != -1)
    swift_once(&qword_100836F08, sub_1001BA588);
  result = static NSObject.== infix(_:_:)(a2);
  if ((result & 1) != 0)
  {
    v9 = &v7[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcDaemon];
    *(_QWORD *)v9 = a1;
    *((_QWORD *)v9 + 1) = &off_1007EF200;
    v10 = OBJC_IVAR____TtC7remindd26RDClientConnectionListener_listenerQueue;
    *(_QWORD *)&v7[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_listenerQueue] = a2;
    static String._unconditionallyBridgeFromObjectiveC(_:)(REMDaemonMachServiceName);
    v12 = v11;
    v13 = objc_allocWithZone((Class)NSXPCListener);
    v31 = a1;
    v14 = a2;
    v15 = String._bridgeToObjectiveC()();
    v16 = objc_msgSend(v13, "initWithMachServiceName:", v15, swift_bridgeObjectRelease(v12).n128_f64[0]);

    *(_QWORD *)&v7[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcListener] = v16;
    objc_msgSend(v16, "_setQueue:", *(_QWORD *)&v7[v10]);
    static String._unconditionallyBridgeFromObjectiveC(_:)(REMDaemonMachServiceName_userInteractive);
    v18 = v17;
    v19 = objc_allocWithZone((Class)NSXPCListener);
    v20 = String._bridgeToObjectiveC()();
    v21 = objc_msgSend(v19, "initWithMachServiceName:", v20, swift_bridgeObjectRelease(v18).n128_f64[0]);

    *(_QWORD *)&v7[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcListenerUserInteractive] = v21;
    objc_msgSend(v21, "_setQueue:", *(_QWORD *)&v7[v10]);
    v22 = sub_10001A630(&qword_10084E3C8);
    swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    v23 = PassthroughSubject.init()();
    *(_QWORD *)&v7[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_clientConnectionDidClosePassthroughSubject] = v23;
    v33 = v23;
    v24 = sub_1000A5F84(&qword_10084E3D0, &qword_10084E3C8, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    *(_QWORD *)&v7[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_clientConnectionDidClosePublisher] = Publisher.eraseToAnyPublisher()(v22, v24);

    v32.receiver = v7;
    v32.super_class = (Class)type metadata accessor for RDClientConnectionListener();
    v25 = (char *)objc_msgSendSuper2(&v32, "init");
    v26 = *(void **)&v25[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcListener];
    v27 = v25;
    objc_msgSend(v26, "setDelegate:", v27);
    v28 = *(void **)&v27[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcListenerUserInteractive];
    v29 = v27;
    v30 = v28;
    objc_msgSend(v30, "setDelegate:", v29);

    return (uint64_t)v29;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10051F8C8(void *a1, void *a2, char *a3)
{
  uint64_t v6;
  char *v7;
  uint64_t result;
  char *v9;
  uint64_t v10;
  id v11;
  id v12;
  NSString v13;
  id v14;
  id v15;
  NSString v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  char *v23;
  void *v24;
  char *v25;
  id v26;
  id v27;
  objc_super v28;
  uint64_t v29;

  *(_QWORD *)&a3[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_clientConnections] = &_swiftEmptySetSingleton;
  sub_100017004();
  v6 = qword_100836F08;
  v7 = a3;
  if (v6 != -1)
    swift_once(&qword_100836F08, sub_1001BA588);
  result = static NSObject.== infix(_:_:)(a2);
  if ((result & 1) != 0)
  {
    v9 = &v7[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcDaemon];
    *(_QWORD *)v9 = a1;
    *((_QWORD *)v9 + 1) = &off_1007F52E0;
    v10 = OBJC_IVAR____TtC7remindd26RDClientConnectionListener_listenerQueue;
    *(_QWORD *)&v7[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_listenerQueue] = a2;
    static String._unconditionallyBridgeFromObjectiveC(_:)(REMDaemonMachServiceName);
    v11 = objc_allocWithZone((Class)NSXPCListener);
    v27 = a1;
    v12 = a2;
    v13 = String._bridgeToObjectiveC()();
    v14 = objc_msgSend(v11, "initWithMachServiceName:", v13, swift_bridgeObjectRelease().n128_f64[0]);

    *(_QWORD *)&v7[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcListener] = v14;
    objc_msgSend(v14, "_setQueue:", *(_QWORD *)&v7[v10]);
    static String._unconditionallyBridgeFromObjectiveC(_:)(REMDaemonMachServiceName_userInteractive);
    v15 = objc_allocWithZone((Class)NSXPCListener);
    v16 = String._bridgeToObjectiveC()();
    v17 = objc_msgSend(v15, "initWithMachServiceName:", v16, swift_bridgeObjectRelease().n128_f64[0]);

    *(_QWORD *)&v7[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcListenerUserInteractive] = v17;
    objc_msgSend(v17, "_setQueue:", *(_QWORD *)&v7[v10]);
    v18 = sub_10001A630(&qword_10084E3C8);
    swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    v19 = PassthroughSubject.init()();
    *(_QWORD *)&v7[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_clientConnectionDidClosePassthroughSubject] = v19;
    v29 = v19;
    v20 = sub_1000A5F84(&qword_10084E3D0, &qword_10084E3C8, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    *(_QWORD *)&v7[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_clientConnectionDidClosePublisher] = Publisher.eraseToAnyPublisher()(v18, v20);

    v28.receiver = v7;
    v28.super_class = (Class)type metadata accessor for RDClientConnectionListener();
    v21 = (char *)objc_msgSendSuper2(&v28, "init");
    v22 = *(void **)&v21[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcListener];
    v23 = v21;
    objc_msgSend(v22, "setDelegate:", v23);
    v24 = *(void **)&v23[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcListenerUserInteractive];
    v25 = v23;
    v26 = v24;
    objc_msgSend(v26, "setDelegate:", v25);

    return (uint64_t)v25;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10051FBA4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10051FBC8()
{
  uint64_t v0;

  sub_10051ED38(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10051FBD0(void *a1, uint64_t a2, uint64_t a3, void *a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _BYTE v40[24];
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;

  v37 = a2;
  v38 = a5;
  v8 = a5 + 4;
  v39 = *a5;
  v9 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  NSNotificationCenter.publisher(for:object:)(CFSTR("RDStoreControllerDidDisableAccountsNotification"), 0);

  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("RDStoreControllerDidDisableAccountsNotificationAccountStoragesKey"));
  v16 = v15;
  v17 = sub_100398054(v14, v15, (void *)0xD00000000000001ELL, 0x80000001007072A0, 0);
  v18 = swift_bridgeObjectRelease(v16);
  (*(void (**)(char *, uint64_t, __n128))(v10 + 8))(v12, v9, v18);
  v41[0] = v17;
  v19 = sub_10001A630((uint64_t *)&unk_10084D080);
  v20 = sub_10001A630(&qword_10084AC30);
  v21 = sub_1000A5F84(&qword_100847B20, (uint64_t *)&unk_10084D080, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v22 = sub_1000A5F84(&qword_10084E3D8, &qword_10084AC30, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v23 = Publisher.multicast<A>(_:)(sub_10044EC24, 0, v19, v20, v21, v22);
  swift_release(v17);
  v41[0] = v23;
  v24 = sub_10001A630(&qword_10084E3E0);
  v25 = sub_1000A5F84(&qword_10084E3E8, &qword_10084E3E0, (uint64_t)&protocol conformance descriptor for Publishers.Multicast<A, B>);
  v41[0] = Publisher.eraseToAnyPublisher()(v24, v25);
  v26 = (_QWORD *)swift_allocObject(&unk_1007F8E28, 64, 7);
  v26[2] = a1;
  v26[3] = &off_1007F2BA8;
  v27 = v37;
  v26[4] = &off_1007F7278;
  v26[5] = v27;
  v26[6] = a3;
  v26[7] = a4;
  v28 = a1;
  swift_bridgeObjectRetain(a3);
  v29 = a4;
  v30 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)(v38, sub_10051FF54, v26, 0, 0, v19, v39);
  swift_release(v26);
  swift_release(v41[0]);
  swift_beginAccess(v8, v41, 33, 0);
  AnyCancellable.store(in:)(v8);
  swift_endAccess(v41);
  v31 = swift_release(v30);
  Publishers.Multicast.connect()(v41, v31);
  v32 = v42;
  v33 = v43;
  sub_10000A388(v41, v42);
  v34 = swift_beginAccess(v8, v40, 33, 0);
  Cancellable.store(in:)(v8, v32, v33, v34);
  swift_endAccess(v40);
  swift_release(v23);
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v41);
}

uint64_t sub_10051FED8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_100838048);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10051FF20()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));

  return swift_deallocObject(v0, 64, 7);
}

void sub_10051FF54(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_10044EC5C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(void **)(v2 + 56));
}

uint64_t sub_10051FF64(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  Swift::Int v22;
  char *v23;
  uint64_t result;
  char *v25;
  char *v26;
  void (*v27)(_BYTE *, _QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  _BYTE v43[32];
  uint64_t v44;

  v32 = a5;
  v33 = a8;
  v38 = a1;
  v39 = a2;
  v31 = *(_QWORD *)(a5 - 8);
  __chkstk_darwin(a1);
  v40 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v12 + 8));
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = __chkstk_darwin(AssociatedTypeWitness);
  v36 = (char *)&v29 - v16;
  v41 = a4;
  __chkstk_darwin(v15);
  v35 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = swift_getAssociatedTypeWitness(0, a6);
  v34 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v20 = (char *)&v29 - v19;
  v21 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v21)
    return static Array._allocateUninitialized(_:)(0, v41);
  v22 = v21;
  v30 = v18;
  v23 = v41;
  v44 = ContiguousArray.init()(v41);
  v37 = type metadata accessor for ContiguousArray(0, v23);
  ContiguousArray.reserveCapacity(_:)(v22);
  v41 = v20;
  result = dispatch thunk of Collection.startIndex.getter(a3);
  if (v22 < 0)
  {
    __break(1u);
  }
  else
  {
    v26 = v35;
    v25 = v36;
    while (1)
    {
      v27 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v43, v41, a3, a6);
      (*(void (**)(char *))(v14 + 16))(v25);
      v27(v43, 0);
      v28 = v42;
      v38(v25, v40);
      if (v28)
        break;
      v42 = 0;
      (*(void (**)(char *, uint64_t))(v14 + 8))(v25, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v26, v37);
      dispatch thunk of Collection.formIndex(after:)(v41, a3, a6);
      if (!--v22)
      {
        (*(void (**)(char *, uint64_t))(v34 + 8))(v41, v30);
        return v44;
      }
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v25, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v41, v30);
    swift_release(v44);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v31 + 32))(v33, v40, v32);
  }
  return result;
}

void sub_100520240(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, "sha512Sum");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_1005202A4(uint64_t a1, void **a2)
{
  void *v2;
  NSString v3;
  id v4;

  v2 = *a2;
  if (*(_QWORD *)(a1 + 8))
    v3 = String._bridgeToObjectiveC()();
  else
    v3 = 0;
  v4 = v3;
  objc_msgSend(v2, "setSha512Sum:");

}

uint64_t sub_100520300@<X0>(void (*a1)(_BYTE *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE v14[16];

  __chkstk_darwin(a1);
  v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Result(0, v6, v7, v8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v14[-v11];
  a1(v5);
  swift_storeEnumTagMultiPayload(v12, v9, 0);
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v10 + 32))(a2, v12, v9);
}

uint64_t sub_10052041C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084E3F0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084E3F0);
  if (qword_100837600 != -1)
    swift_once(&qword_100837600, sub_1004A17AC);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FE0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_1005204AC()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(REMLog), "housekeepingingActivityScheduler");
  qword_10084E408 = (uint64_t)result;
  return result;
}

uint64_t sub_1005204E4@<X0>(uint64_t a1@<X8>)
{
  return sub_10052A648((SEL *)&selRef_identifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a1);
}

void sub_100520500(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10052C468(a1, a2, a3, a4);
}

_QWORD *sub_100520514(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10052C8C4(a1, a2, a3, a4);
}

id sub_100520528()
{
  void *v0;

  return objc_msgSend(v0, "account");
}

id sub_10052054C()
{
  void *v0;

  return objc_msgSend(v0, "objectID");
}

void *sub_100520570(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_10052CBC8(a1, a2, a3, a4);
}

_QWORD *sub_100520584(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10052D0C4(a1, a2, a3, a4);
}

uint64_t sub_100520598()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];
  int v31;
  __int16 v32;
  uint64_t v33;

  v2 = v0;
  v3 = type metadata accessor for OSSignpostID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = static os_signpost_type_t.begin.getter(v7);
  if (qword_100837840 != -1)
    swift_once(&qword_100837840, sub_1005204AC);
  v9 = qword_10084E408;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v8, &_mh_execute_header, v9, "RDDeduplicationActivity.execute", 31, 2, v6);
  v10 = *(void (**)(char *, uint64_t))(v4 + 8);
  v10(v6, v3);
  if (qword_100837838 != -1)
    swift_once(&qword_100837838, sub_10052041C);
  v11 = type metadata accessor for Logger(0);
  sub_10001AAA8(v11, (uint64_t)qword_10084E3F0);
  v12 = swift_retain();
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v27 = v10;
    v17 = v16;
    v33 = v16;
    v26 = v1;
    *(_DWORD *)v15 = 136446210;
    v28 = v3;
    v19 = v2[18];
    v18 = v2[19];
    swift_bridgeObjectRetain(v18);
    v29 = sub_10001A820(v19, v18, &v33);
    v3 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30);
    swift_release(v2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "[%{public}s] start execute()", v15, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    v20 = v17;
    v10 = v27;
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

    swift_release(v2);
  }
  sub_1005208B8();
  v30[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(RDStoreControllerDeduplicationActivityAuthor);
  v30[1] = v21;
  memset(&v30[2], 0, 24);
  v32 = 0x4000;
  v31 = 0;
  sub_10035288C((uint64_t)v30, (uint64_t)sub_10052BF00, (uint64_t)v2);
  swift_bridgeObjectRelease();
  sub_1005209E0(v2);
  v23 = static os_signpost_type_t.end.getter(v22);
  v24 = qword_10084E408;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v23, &_mh_execute_header, v24, "RDDeduplicationActivity.execute", 31, 2, v6);
  return ((uint64_t (*)(char *, uint64_t))v10)(v6, v3);
}

uint64_t sub_1005208B8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v13[24];
  _BYTE v14[24];
  _BYTE v15[24];

  v1 = *v0;
  v2 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v2);
  v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_beginAccess(v0 + 5, v15, 1, 0);
  v0[5] = (uint64_t)_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  v6 = type metadata accessor for RDDeduplicationActivity.Executable.DeduplicationError(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v5);
  v7 = static Array._allocateUninitialized(_:)(0, v6);
  swift_beginAccess(v0 + 6, v14, 1, 0);
  v0[6] = v7;
  swift_bridgeObjectRelease();
  static Date.now.getter(v8);
  v9 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 0, 1, v9);
  v10 = (uint64_t)v0 + qword_10084E678;
  swift_beginAccess(v10, v13, 33, 0);
  sub_100130F48((uint64_t)v4, v10);
  return swift_endAccess(v13);
}

void sub_1005209E0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_100526F7C(a1 + 12);
  if (qword_100837838 != -1)
    swift_once(&qword_100837838, sub_10052041C);
  v2 = type metadata accessor for Logger(0);
  sub_10001AAA8(v2, (uint64_t)qword_10084E3F0);
  v3 = swift_retain();
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v11 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = a1[18];
    v9 = a1[19];
    swift_bridgeObjectRetain(v9);
    v10 = sub_10001A820(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
    swift_release(a1);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%{public}s] finish execute()", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_release(a1);
  }
}

void sub_100520BA4(void *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  uint64_t v20;
  id v21;
  char **v22;
  id v23;
  void (*v24)(char *, uint64_t);
  id v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD v65[2];
  __n128 v66;
  __n128 v67;
  uint64_t v68;
  char *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  id v82;
  _QWORD *v83;
  uint64_t v84;
  _BYTE v85[16];
  char v86[8];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)v65 - v10;
  v78 = a1;
  v83 = a2;
  sub_100521E40();
  if (v2)
    return;
  v13 = v12;
  v73 = v11;
  if (!(v12 >> 62))
  {
    v14 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v14)
      goto LABEL_4;
LABEL_31:
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
LABEL_27:
  if (v13 < 0)
    v41 = v13;
  else
    v41 = v13 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v13);
  v14 = _CocoaArrayWrapper.endIndex.getter(v41);
  swift_bridgeObjectRelease();
  if (!v14)
    goto LABEL_31;
LABEL_4:
  v77 = v13 & 0xC000000000000001;
  v69 = v8;
  if ((v13 & 0xC000000000000001) != 0)
  {
    v82 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v13);
    v8 = v73;
  }
  else
  {
    v8 = v73;
    if (!*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_47:
      swift_once(&qword_100837838, sub_10052041C);
      goto LABEL_19;
    }
    v82 = *(id *)(v13 + 32);
  }
  v15 = v83[17];
  v76 = v15 + 40;
  v16 = swift_beginAccess(v15 + 40, v85, 0, 0);
  v17 = *(_QWORD *)(*(_QWORD *)(v15 + 40) + 16);
  v79 = v15;
  if (v17 < *(_QWORD *)(v15 + 16))
  {
    v75 = v6;
    v18 = 0;
    v6 = 0;
    v70 = &v89;
    v68 = v13 & 0xFFFFFFFFFFFFFF8;
    v74 = v14 - 1;
    v19 = &selRef_subscriptionOwnerUserRecordID;
    v16.n128_u64[0] = 136446722;
    v67 = v16;
    v65[1] = (char *)&type metadata for Any + 8;
    v16.n128_u64[0] = 136446466;
    v66 = v16;
    v71 = v13;
    v72 = v5;
    while (1)
    {
      v20 = v6;
      v81 = v18;
      v80 = v18 + 1;
      v21 = v82;
      v22 = v19;
      v23 = objc_msgSend(v82, v19[121]);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v23);

      sub_1005220F8();
      v24 = *(void (**)(char *, uint64_t))(v75 + 8);
      v24(v8, v5);
      v25 = objc_msgSend(v21, v22[121]);
      v26 = v69;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v25);

      v27 = (*(uint64_t (**)(_QWORD, void *, char *, _QWORD))(*(_QWORD *)(*v83 + 88) + 64))(v83[4], v78, v26, v83[11]);
      v24(v26, v5);
      sub_100522320(v27, v21, v78);

      swift_bridgeObjectRelease();
      v28 = v81;
      v13 = v71;
      v8 = v73;
      if (v74 == v81)
        goto LABEL_31;
      v29 = v80;
      v6 = v20;
      if (v77)
      {
        v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v80, v71);
      }
      else
      {
        if (v80 >= *(_QWORD *)(v68 + 16))
          goto LABEL_26;
        v30 = *(id *)(v71 + 8 * v81 + 40);
      }
      v82 = v30;
      if (__OFADD__(v29, 1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      swift_beginAccess(v76, v86, 0, 0);
      v18 = v28 + 1;
      v19 = &selRef_subscriptionOwnerUserRecordID;
      if (*(_QWORD *)(*(_QWORD *)(v79 + 40) + 16) >= *(_QWORD *)(v79 + 16))
        goto LABEL_18;
    }
  }
  LOBYTE(v6) = 0;
LABEL_18:
  swift_bridgeObjectRelease();
  if (qword_100837838 != -1)
    goto LABEL_47;
LABEL_19:
  v31 = type metadata accessor for Logger(0);
  sub_10001AAA8(v31, (uint64_t)qword_10084E3F0);
  v32 = swift_retain_n(v83);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter(v33);
  if (os_log_type_enabled(v33, v34))
  {
    v35 = swift_slowAlloc(22, -1);
    v36 = swift_slowAlloc(32, -1);
    v87 = v36;
    *(_DWORD *)v35 = 136446466;
    v37 = v83[18];
    v38 = v83[19];
    swift_bridgeObjectRetain(v38);
    v88 = sub_10001A820(v37, v38, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
    swift_release(v83);
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 12) = 2050;
    v39 = v83[11];
    swift_release(v83);
    v88 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
    swift_release(v83);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "[%{public}s] no delete limit left {perRunDeleteLimit: %{public}ld}", (uint8_t *)v35, 0x16u);
    v40 = 1;
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v35, -1, -1);

    if ((v6 & 1) != 0)
      goto LABEL_38;
  }
  else
  {

    swift_release_n(v83);
    if ((v6 & 1) != 0)
    {
      v40 = 1;
LABEL_38:
      if (qword_100837838 != -1)
        swift_once(&qword_100837838, sub_10052041C);
      v56 = type metadata accessor for Logger(0);
      sub_10001AAA8(v56, (uint64_t)qword_10084E3F0);
      v57 = swift_retain();
      v58 = Logger.logObject.getter(v57);
      v59 = static os_log_type_t.default.getter(v58);
      if (os_log_type_enabled(v58, v59))
      {
        v60 = swift_slowAlloc(28, -1);
        v61 = swift_slowAlloc(32, -1);
        v82 = (id)v40;
        v62 = v61;
        v88 = v61;
        *(_DWORD *)v60 = 136446722;
        v63 = v83[18];
        v64 = v83[19];
        swift_bridgeObjectRetain(v64);
        v84 = sub_10001A820(v63, v64, &v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85);
        swift_bridgeObjectRelease();
        *(_WORD *)(v60 + 12) = 1026;
        LODWORD(v84) = (_DWORD)v82;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, (char *)&v84 + 4);
        *(_WORD *)(v60 + 18) = 2050;
        v84 = sub_100522E80();
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85);
        swift_release(v83);
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "[%{public}s] finished without deeming complete {errorEncountered: %{BOOL,public}d, quota remaining: %{public}ld}", (uint8_t *)v60, 0x1Cu);
        swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v62, -1, -1);
        swift_slowDealloc(v60, -1, -1);

      }
      else
      {

        swift_release(v83);
      }
      return;
    }
  }
LABEL_32:
  v42 = v83[17];
  swift_beginAccess(v42 + 40, &v87, 0, 0);
  v43 = *(_QWORD *)(*(_QWORD *)(v42 + 40) + 16);
  v79 = v42;
  if (v43 >= *(_QWORD *)(v42 + 16))
  {
    v40 = 0;
    goto LABEL_38;
  }
  if (qword_100837838 != -1)
    swift_once(&qword_100837838, sub_10052041C);
  v44 = type metadata accessor for Logger(0);
  sub_10001AAA8(v44, (uint64_t)qword_10084E3F0);
  v45 = swift_retain();
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.default.getter(v46);
  if (os_log_type_enabled(v46, v47))
  {
    v48 = (uint8_t *)swift_slowAlloc(12, -1);
    v49 = swift_slowAlloc(32, -1);
    v88 = v49;
    *(_DWORD *)v48 = 136446210;
    v50 = v83;
    v51 = v83[18];
    v52 = v83[19];
    swift_bridgeObjectRetain(v52);
    v84 = sub_10001A820(v51, v52, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85);
    swift_release(v50);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "[%{public}s] finished with some delete quota remaining: container deemed clean", v48, 0xCu);
    swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1, -1);
    swift_slowDealloc(v48, -1, -1);

  }
  else
  {

    swift_release(v83);
  }
  sub_1005224E0(v78, v53, v54, v55);
}

void sub_100521E40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v1 = sub_1005255BC();
  if (!v0)
  {
    v2 = v1;
    if ((unint64_t)v1 >> 62)
    {
      if (v1 < 0)
        v12 = v1;
      else
        v12 = v1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v1);
      v3 = _CocoaArrayWrapper.endIndex.getter(v12);
      swift_bridgeObjectRelease();
      if (v3)
      {
LABEL_4:
        if (v3 < 1)
        {
          __break(1u);
          goto LABEL_37;
        }
        for (i = 0; i != v3; ++i)
        {
          if ((v2 & 0xC000000000000001) != 0)
            v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v2);
          else
            v7 = *(id *)(v2 + 8 * i + 32);
          v8 = v7;
          v9 = objc_msgSend(objc_allocWithZone((Class)REMAccountCapabilities), "initWithAccountType:", (int)objc_msgSend(v7, "type"));
          v10 = objc_msgSend(v9, "supportsAttachments");

          if (v10)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
            v5 = _swiftEmptyArrayStorage[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v5);
            v6 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5, v8);
            specialized ContiguousArray._endMutation()(v6);
          }
          else
          {

          }
        }
        swift_bridgeObjectRelease();
        if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
          goto LABEL_33;
LABEL_20:
        if (((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) == 0)
        {
          v13 = _swiftEmptyArrayStorage[2];
          swift_retain();
          if (!v13)
          {
LABEL_34:
            swift_release(_swiftEmptyArrayStorage);
            swift_release(_swiftEmptyArrayStorage);
            return;
          }
          goto LABEL_22;
        }
LABEL_33:
        v22 = swift_retain();
        v13 = _CocoaArrayWrapper.endIndex.getter(v22);
        if (!v13)
          goto LABEL_34;
LABEL_22:
        if (v13 >= 1)
        {
          for (j = 0; j != v13; ++j)
          {
            if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
              v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, _swiftEmptyArrayStorage);
            else
              v16 = (id)_swiftEmptyArrayStorage[j + 4];
            v17 = v16;
            v18 = objc_msgSend(v16, "remObjectID");

            if (v18)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v19);
              v21 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
              v20 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v21 >= v20 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1);
              v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v18);
              specialized Array._endMutation()(v15);
            }
          }
          goto LABEL_34;
        }
LABEL_37:
        __break(1u);
        return;
      }
    }
    else
    {
      v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v3)
        goto LABEL_4;
    }
    swift_bridgeObjectRelease();
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
      goto LABEL_33;
    goto LABEL_20;
  }
}

uint64_t sub_1005220F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  Class isa;
  id v7;
  void *v8;
  id v9;
  void *object;
  NSString v11;
  id v13;
  NSURL *v14;
  void *v15;
  void *v16;
  unsigned int v17;
  id v18;
  uint64_t (*v19)(char *, uint64_t);
  id v20;
  id v21;
  uint64_t v22;
  id v23;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend(*(id *)(v0 + 32), "attachmentFileManager");
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend(v5, "URLForHashedAttachmentDirectory:", isa);

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v8 = (void *)objc_opt_self(NSFileManager);
  v9 = objc_msgSend(v8, "defaultManager");
  object = URL.path(percentEncoded:)(0)._object;
  v11 = String._bridgeToObjectiveC()();
  LOBYTE(object) = objc_msgSend(v9, "fileExistsAtPath:", v11, swift_bridgeObjectRelease(object).n128_f64[0]);

  if ((object & 1) != 0)
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v13 = objc_msgSend(v8, "defaultManager");
  URL._bridgeToObjectiveC()(v14);
  v16 = v15;
  v23 = 0;
  v17 = objc_msgSend(v13, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v15, 1, 0, &v23);

  v18 = v23;
  if (v17)
  {
    v19 = *(uint64_t (**)(char *, uint64_t))(v2 + 8);
    v20 = v23;
    return v19(v4, v1);
  }
  else
  {
    v21 = v23;
    _convertNSErrorToError(_:)(v18);

    swift_willThrow(v22);
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
}

void sub_100522320(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_QWORD *__return_ptr, uint64_t *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v25)(_QWORD *__return_ptr, uint64_t *);
  uint64_t v26;
  _QWORD v27[4];
  _BYTE v28[24];
  uint64_t v29;

  v5 = v4;
  v27[0] = a1;
  v6 = *(_QWORD *)(v3 + 88);
  v7 = sub_10001A630(&qword_10084EF18);
  v8 = sub_1000A5F84(&qword_10084EF20, &qword_10084EF18, (uint64_t)&protocol conformance descriptor for [A]);
  v9 = BidirectionalCollection<>.lazySlices(by:)(v6, v7, v8);
  v10 = v9;
  v25 = v11;
  v13 = v12;
  v21 = *(_QWORD *)(v9 + 16);
  if (v21)
  {
    v14 = 0;
    v22 = *(_QWORD *)(v3 + 136);
    v20 = v9;
    while (1)
    {
      v26 = v5;
      v29 = *(_QWORD *)(v10 + 8 * v14 + 32);
      v25(v27, &v29);
      v15 = (void *)v27[0];
      v16 = (void *)v27[1];
      v18 = (void *)v27[2];
      v17 = (void *)v27[3];
      swift_beginAccess(v22 + 40, v28, 0, 0);
      if (*(_QWORD *)(*(_QWORD *)(v22 + 40) + 16) >= *(_QWORD *)(v22 + 16))
      {
        swift_unknownObjectRelease(v15);
        swift_release(v13);
        swift_bridgeObjectRelease();
        return;
      }
      v19 = objc_autoreleasePoolPush();
      sub_100523E38(v15, v16, v18, v17, a2, a3);
      v5 = v26;
      if (v26)
        break;
      ++v14;
      objc_autoreleasePoolPop(v19);
      swift_unknownObjectRelease(v15);
      v10 = v20;
      if (v21 == v14)
        goto LABEL_6;
    }
    objc_autoreleasePoolPop(v19);
    swift_unknownObjectRelease(v15);
    swift_release(v13);
  }
  else
  {
LABEL_6:
    swift_release(v13);
  }
  swift_bridgeObjectRelease();
}

void sub_1005224E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  __int128 v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  void (*v51)(uint64_t, uint64_t, __n128);
  __n128 v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void (*v61)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v69;
  void (*v70)(uint64_t, char *, uint64_t);
  _QWORD *v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  __n128 v81;
  uint64_t v82;
  unint64_t v83;
  __n128 v84;
  uint64_t v85;
  uint64_t v86;
  __n128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  __n128 v96;
  Swift::Bool IsNativeType;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  char *v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  uint64_t *v130;
  char *v131;
  _QWORD *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;

  v6 = v4;
  v9 = *v4;
  v8 = v4 + 5;
  v10 = *(_QWORD *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 88);
  v119 = type metadata accessor for RDDeduplicationActivity.CrashCleanError(0, v10, v11, a4);
  v118 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119);
  v126 = (char *)&v115 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = v12;
  __chkstk_darwin(v13);
  v133 = (char *)&v115 - v14;
  v15 = type metadata accessor for UUID(0);
  v132 = *(_QWORD **)(v15 - 8);
  __chkstk_darwin(v15);
  v135 = (uint64_t)&v115 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v134 = (uint64_t)&v115 - v18;
  __chkstk_darwin(v19);
  v131 = (char *)&v115 - v20;
  __chkstk_darwin(v21);
  v136 = (char *)&v115 - v22;
  v23 = sub_10001A630(&qword_10084EF40);
  __chkstk_darwin(v23);
  v137 = (uint64_t)&v115 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v130 = (uint64_t *)((char *)&v115 - v26);
  swift_beginAccess(v8, &v139, 32, 0);
  v27 = v6[8];
  v28 = v6[9];
  v121 = v8;
  sub_10000A388(v8, v27);
  v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 32))(v27, v28);
  if (!v29)
  {
    swift_endAccess(&v139);
    v39 = v121;
    goto LABEL_32;
  }
  v30 = v29;
  swift_endAccess(&v139);
  v32 = type metadata accessor for RDDeduplicationActivity.Executable.CrashCleaner(0, v10, v11, v31);
  v33 = (void *)v6[4];
  v34 = swift_allocObject(v32, 32, 7);
  *(_QWORD *)(v34 + 16) = v33;
  *(_QWORD *)(v34 + 24) = a1;
  v35 = v33;
  v36 = a1;
  v37 = sub_100522F0C(v30);
  v120 = v5;
  if (v5)
  {
    swift_bridgeObjectRelease();
    swift_release(v34);
    return;
  }
  v40 = v37;
  v41 = v38;
  v116 = v30;
  v115 = v34;
  v42 = Set.init(minimumCapacity:)(*(_QWORD *)(v37 + 16), &type metadata for String, &protocol witness table for String);
  v138 = 0;
  v140 = v42;
  v124 = v40;
  v43 = *(_QWORD *)(v40 + 16);
  *(_QWORD *)&v44 = 136446722;
  v123 = v44;
  v122 = (char *)&type metadata for Any + 8;
  v128 = v43;
  v129 = v6;
  v125 = v41;
  v46 = v131;
  v45 = v132;
  v48 = v134;
  v47 = v135;
  v49 = v137;
  while (1)
  {
    v53 = v136;
    if (v138 == v43)
    {
      v54 = v43;
      v55 = sub_10001A630(&qword_10084EF48);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v49, 1, 1, v55);
      v138 = v54;
    }
    else
    {
      v56 = v124;
      if (v138 >= *(_QWORD *)(v124 + 16))
      {
        __break(1u);
LABEL_39:
        __break(1u);
        return;
      }
      v57 = sub_10001A630(&qword_10084EF48);
      v58 = v56;
      v59 = *(_QWORD *)(v57 - 8);
      v60 = v138;
      sub_100008868(v58+ ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80))+ *(_QWORD *)(v59 + 72) * v138, v137, &qword_10084EF48);
      v138 = v60 + 1;
      v61 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v59 + 56);
      v49 = v137;
      v61(v137, 0, 1, v57);
    }
    v62 = v49;
    v63 = v130;
    sub_1000A5CA8(v62, (uint64_t)v130, &qword_10084EF40);
    v64 = sub_10001A630(&qword_10084EF48);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 48))(v63, 1, v64) == 1)
      break;
    v65 = *v63;
    v134 = v63[1];
    v135 = v65;
    v66 = (char *)v63 + *(int *)(v64 + 48);
    v67 = (char *)v63 + *(int *)(v64 + 64);
    v68 = (void (*)(char *, char *, uint64_t))v45[4];
    v68(v53, v66, v15);
    v68(v46, v67, v15);
    if (qword_100837838 != -1)
      swift_once(&qword_100837838, sub_10052041C);
    v69 = type metadata accessor for Logger(0);
    sub_10001AAA8(v69, (uint64_t)qword_10084E3F0);
    v70 = (void (*)(uint64_t, char *, uint64_t))v45[2];
    v70(v48, v53, v15);
    v70(v47, v46, v15);
    v71 = v129;
    v72 = swift_retain();
    v73 = Logger.logObject.getter(v72);
    v74 = static os_log_type_t.info.getter(v73);
    if (os_log_type_enabled(v73, v74))
    {
      v75 = swift_slowAlloc(32, -1);
      v127 = swift_slowAlloc(96, -1);
      v139 = (void *)v127;
      *(_DWORD *)v75 = v123;
      v77 = v71[18];
      v76 = v71[19];
      swift_bridgeObjectRetain(v76);
      *(_QWORD *)(v75 + 4) = sub_10001A820(v77, v76, (uint64_t *)&v139);
      swift_release(v71);
      swift_bridgeObjectRelease();
      *(_WORD *)(v75 + 12) = 2082;
      v78 = sub_10009FC50((unint64_t *)&qword_10083FA40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v79 = dispatch thunk of CustomStringConvertible.description.getter(v15, v78);
      *(_QWORD *)(v75 + 14) = sub_10001A820(v79, v80, (uint64_t *)&v139);
      v81 = swift_bridgeObjectRelease();
      v51 = (void (*)(uint64_t, uint64_t, __n128))v132[1];
      v51(v48, v15, v81);
      *(_WORD *)(v75 + 22) = 2082;
      v82 = dispatch thunk of CustomStringConvertible.description.getter(v15, v78);
      *(_QWORD *)(v75 + 24) = sub_10001A820(v82, v83, (uint64_t *)&v139);
      v84 = swift_bridgeObjectRelease();
      v51(v47, v15, v84);
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "[%{public}s] Cleaned after crash {accountID: %{public}s, attachmentID: %{public}s", (uint8_t *)v75, 0x20u);
      v85 = v127;
      swift_arrayDestroy(v127, 3, v122);
      swift_slowDealloc(v85, -1, -1);
      v86 = v75;
      v50 = v132;
      swift_slowDealloc(v86, -1, -1);
    }
    else
    {
      swift_release(v71);
      v50 = v45;
      v51 = (void (*)(uint64_t, uint64_t, __n128))v45[1];
      ((void (*)(uint64_t, uint64_t))v51)(v48, v15);
      ((void (*)(uint64_t, uint64_t))v51)(v47, v15);
    }

    sub_1002DB0E4((uint64_t *)&v139, v135, v134);
    v52 = swift_bridgeObjectRelease();
    v46 = v131;
    v51((uint64_t)v131, v15, v52);
    ((void (*)(char *, uint64_t))v51)(v136, v15);
    v49 = v137;
    v43 = v128;
    v45 = v50;
  }
  v87 = swift_bridgeObjectRelease();
  v88 = v125;
  v89 = v119;
  v90 = Array.endIndex.getter(v125, v119, v87);
  v91 = v118;
  if (!v90)
    goto LABEL_28;
  v92 = 0;
  v93 = v129[18];
  v94 = (char *)v129[19];
  v95 = v126;
  while (1)
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)(v92, IsNativeType, v88, v89);
    if (!IsNativeType)
      break;
    (*(void (**)(char *, unint64_t, uint64_t))(v91 + 16))(v133, v88+ ((*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80))+ *(_QWORD *)(v91 + 72) * v92, v89);
    v98 = v92 + 1;
    if (__OFADD__(v92, 1))
      goto LABEL_27;
LABEL_22:
    (*(void (**)(char *, char *, uint64_t))(v91 + 32))(v95, v133, v89);
    sub_100523168(v93, v94, v89);
    if ((sub_100523BAC(v89) & 1) != 0)
    {
      v99 = sub_100523CFC(v89);
      sub_1002DB0E4((uint64_t *)&v139, v99, v100);
      swift_bridgeObjectRelease();
    }
    v96.n128_f64[0] = (*(double (**)(char *, uint64_t))(v91 + 8))(v95, v89);
    v88 = v125;
    ++v92;
    if (v98 == Array.endIndex.getter(v125, v89, v96))
      goto LABEL_28;
  }
  v101 = _ArrayBuffer._getElementSlowPath(_:)(v92, v88, v89);
  if (v117 != 8)
    goto LABEL_39;
  v102 = v101;
  v139 = (void *)v101;
  (*(void (**)(char *, void **, uint64_t))(v91 + 16))(v133, &v139, v89);
  swift_unknownObjectRelease(v102);
  v98 = v92 + 1;
  if (!__OFADD__(v92, 1))
    goto LABEL_22;
LABEL_27:
  __break(1u);
LABEL_28:
  swift_bridgeObjectRelease();
  v103 = sub_10011EE40(v116);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v140 + 16) <= *(_QWORD *)(v103 + 16) >> 3)
  {
    v139 = (void *)v103;
    sub_10059B880(v140);
    swift_bridgeObjectRelease();
    v104 = v139;
  }
  else
  {
    v104 = sub_100215890(v140, v103);
    swift_bridgeObjectRelease();
  }
  v6 = v129;
  v105 = v115;
  v39 = v121;
  v106 = sub_1001E8BAC((uint64_t)v104);
  swift_bridgeObjectRelease();
  swift_beginAccess(v39, &v139, 33, 0);
  v107 = v6[8];
  v108 = v6[9];
  sub_10001BA38((uint64_t)v39, v107);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v108 + 40))(v106, v107, v108);
  swift_endAccess(&v139);
  swift_release(v105);
LABEL_32:
  swift_beginAccess(v39, &v139, 32, 0);
  v109 = v6[8];
  v110 = v6[9];
  sub_10000A388(v39, v109);
  v111 = (*(uint64_t (**)(uint64_t, uint64_t))(v110 + 32))(v109, v110);
  swift_endAccess(&v139);
  if (v111)
    v112 = (_QWORD *)v111;
  else
    v112 = _swiftEmptyArrayStorage;
  v113 = v112[2];
  swift_bridgeObjectRelease();
  if (!v113)
  {
    v114 = v6[10];
    swift_retain();
    sub_1003D861C();
    swift_release(v114);
  }
}

uint64_t sub_100522E80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  _BYTE v6[24];

  v1 = *(_QWORD *)(v0 + 16);
  result = swift_beginAccess(v0 + 40, v6, 0, 0);
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 16);
  v4 = __OFSUB__(v1, v3);
  v5 = v1 - v3;
  if (!v4)
    return v5 & ~(v5 >> 63);
  __break(1u);
  return result;
}

uint64_t sub_100522ED0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_allocObject(v2, 32, 7);
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_100522F0C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t WitnessTable;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = *v1;
  v28 = a1;
  v4 = sub_10001A630((uint64_t *)&unk_10083AE10);
  v5 = sub_1000A5A94(&qword_10084EF48);
  v6 = *(_QWORD *)(v3 + 80);
  v7 = *(_QWORD *)(v3 + 88);
  v9 = type metadata accessor for RDDeduplicationActivity.CrashCleanError(255, v6, v7, v8);
  WitnessTable = swift_getWitnessTable(&unk_1006C1DB8, v9);
  v27 = v5;
  v11 = (char *)type metadata accessor for Result(0, v5, v9, WitnessTable);
  v12 = sub_1000A5F84(&qword_10084EF60, (uint64_t *)&unk_10083AE10, (uint64_t)&protocol conformance descriptor for [A]);
  v14 = (_QWORD *)sub_10051FF64((void (*)(char *, char *))sub_10052BFC4, (uint64_t)v1, v4, v11, (uint64_t)&type metadata for Never, v12, (uint64_t)&protocol witness table for Never, v13);
  v15 = sub_10052800C(v14);
  swift_bridgeObjectRelease();
  if (!v2)
  {
    v16 = type metadata accessor for Array(0, v11);
    v17 = swift_getWitnessTable(&protocol conformance descriptor for [A], v16);
    v19 = sub_10051FF64((void (*)(char *, char *))sub_10052BFF0, (uint64_t)v1, v16, v11, (uint64_t)&type metadata for Never, v17, (uint64_t)&protocol witness table for Never, v18);
    swift_bridgeObjectRelease();
    v26 = (uint64_t)&v26;
    v28 = v19;
    __chkstk_darwin(v20);
    v24 = v6;
    v25 = v7;
    v21 = swift_getWitnessTable(&protocol conformance descriptor for [A], v16);
    v15 = Sequence.compactMap<A>(_:)(sub_10052DE84, v23, v16, v27, v21);
    v28 = v19;
    __chkstk_darwin(v15);
    v24 = v6;
    v25 = v7;
    Sequence.compactMap<A>(_:)(sub_10052C00C, v23, v16, v9, v21);
    swift_bridgeObjectRelease();
  }
  return v15;
}

void sub_100523168(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int EnumCaseMultiPayload;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  unint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  __n128 v54;
  void (*v55)(char *, uint64_t, __n128);
  uint64_t v56;
  unint64_t v57;
  __n128 v58;
  os_log_t v59;
  NSObject *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  char *v76;
  uint64_t v77;
  void (*v78)(NSObject *, char *, uint64_t);
  NSObject *v79;
  NSObject *v80;
  unint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  __n128 v92;
  void (*v93)(NSObject *, uint64_t, __n128);
  uint64_t v94;
  unint64_t v95;
  __n128 v96;
  uint64_t v97;
  uint64_t *v98;
  os_log_t v99;
  uint64_t v100;
  os_log_t v101;
  void (*v102)(char *, uint64_t);
  __n128 v103;
  char *v104;
  os_log_t v105;
  uint64_t *v106;
  os_log_t v107;
  char *v108;
  NSObject *v109;
  NSObject *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  os_log_t v114;

  v4 = v3;
  v111 = (char *)a1;
  v112 = a2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v110 = ((char *)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  v109 = ((char *)&v105 - v10);
  __chkstk_darwin(v11);
  v13 = (char *)&v105 - v12;
  __chkstk_darwin(v14);
  v16 = (char *)&v105 - v15;
  __chkstk_darwin(v17);
  v108 = (char *)&v105 - v18;
  __chkstk_darwin(v19);
  v21 = (char *)&v105 - v20;
  __chkstk_darwin(v22);
  v24 = (char *)&v105 - v23;
  __chkstk_darwin(v25);
  v27 = (char *)&v105 - v26;
  v29 = __chkstk_darwin(v28);
  v31 = (uint64_t *)((char *)&v105 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v32 + 16))(v31, v4, a3, v29);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v31, a3);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      v34 = sub_10001A630(&qword_10084EF48);
      v35 = (char *)v31 + *(int *)(v34 + 48);
      v36 = (char *)v31 + *(int *)(v34 + 64);
      v37 = v7;
      v38 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v38(v27, v35, v6);
      v38(v24, v36, v6);
      if (qword_100837838 != -1)
        swift_once(&qword_100837838, sub_10052041C);
      v39 = type metadata accessor for Logger(0);
      sub_10001AAA8(v39, (uint64_t)qword_10084E3F0);
      v40 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      v40(v21, v27, v6);
      v41 = v108;
      v40(v108, v24, v6);
      v42 = (unint64_t)v112;
      swift_bridgeObjectRetain_n(v112, 2);
      v44 = Logger.logObject.getter(v43);
      v45 = static os_log_type_t.error.getter(v44);
      v46 = v45;
      if (os_log_type_enabled(v44, v45))
      {
        v47 = swift_slowAlloc(32, -1);
        LODWORD(v110) = v46;
        v48 = v47;
        v109 = swift_slowAlloc(96, -1);
        v114 = v109;
        *(_DWORD *)v48 = 136446722;
        v107 = v44;
        swift_bridgeObjectRetain(v42);
        v113 = sub_10001A820((uint64_t)v111, v42, (uint64_t *)&v114);
        v111 = v27;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114);
        swift_bridgeObjectRelease_n(v42, 3);
        *(_WORD *)(v48 + 12) = 2082;
        v49 = sub_10009FC50((unint64_t *)&qword_10083FA40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v112 = v24;
        v50 = v37;
        v51 = v49;
        v52 = dispatch thunk of CustomStringConvertible.description.getter(v6, v49);
        v113 = sub_10001A820(v52, v53, (uint64_t *)&v114);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114);
        v54 = swift_bridgeObjectRelease();
        v55 = *(void (**)(char *, uint64_t, __n128))(v50 + 8);
        v55(v21, v6, v54);
        *(_WORD *)(v48 + 22) = 2082;
        v56 = dispatch thunk of CustomStringConvertible.description.getter(v6, v51);
        v113 = sub_10001A820(v56, v57, (uint64_t *)&v114);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114);
        v58 = swift_bridgeObjectRelease();
        v55(v41, v6, v58);
        v59 = v107;
        _os_log_impl((void *)&_mh_execute_header, v107, (os_log_type_t)v110, "[%{public}s] Attachment was not migrated {accountID: %{public}s, attachmentID: %{public}s}", (uint8_t *)v48, 0x20u);
        v60 = v109;
        swift_arrayDestroy(v109, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v60, -1, -1);
        swift_slowDealloc(v48, -1, -1);

        ((void (*)(char *, uint64_t))v55)(v112, v6);
        ((void (*)(char *, uint64_t))v55)(v111, v6);
        return;
      }

      v102 = *(void (**)(char *, uint64_t))(v37 + 8);
      v102(v41, v6);
      v102(v21, v6);
      v103 = swift_bridgeObjectRelease_n(v42, 2);
      v104 = v24;
    }
    else
    {
      swift_bridgeObjectRelease();
      v70 = (int *)sub_10001A630((uint64_t *)&unk_10084EF50);
      v71 = (char *)v31 + v70[12];
      v72 = (char *)v31 + v70[16];
      v73 = *(uint64_t *)((char *)v31 + v70[20]);
      v74 = v7;
      v75 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v27 = v16;
      v75(v16, v71, v6);
      v76 = v13;
      v75(v13, v72, v6);
      if (qword_100837838 != -1)
        swift_once(&qword_100837838, sub_10052041C);
      v77 = type metadata accessor for Logger(0);
      sub_10001AAA8(v77, (uint64_t)qword_10084E3F0);
      v78 = *(void (**)(NSObject *, char *, uint64_t))(v7 + 16);
      v79 = v109;
      v78(v109, v27, v6);
      v80 = v110;
      v78(v110, v76, v6);
      v81 = (unint64_t)v112;
      swift_bridgeObjectRetain(v112);
      swift_errorRetain(v73);
      swift_bridgeObjectRetain(v81);
      v82 = swift_errorRetain(v73);
      v83 = Logger.logObject.getter(v82);
      v84 = static os_log_type_t.error.getter(v83);
      v85 = v84;
      if (os_log_type_enabled(v83, v84))
      {
        v86 = swift_slowAlloc(42, -1);
        v108 = v27;
        v87 = v86;
        v106 = (uint64_t *)swift_slowAlloc(8, -1);
        v107 = (os_log_t)swift_slowAlloc(96, -1);
        v114 = v107;
        *(_DWORD *)v87 = 136446978;
        v105 = v83;
        swift_bridgeObjectRetain(v81);
        v113 = sub_10001A820((uint64_t)v111, v81, (uint64_t *)&v114);
        LODWORD(v111) = v85;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114);
        swift_bridgeObjectRelease_n(v81, 3);
        *(_WORD *)(v87 + 12) = 2082;
        v88 = sub_10009FC50((unint64_t *)&qword_10083FA40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v112 = v76;
        v89 = v88;
        v90 = dispatch thunk of CustomStringConvertible.description.getter(v6, v88);
        v113 = sub_10001A820(v90, v91, (uint64_t *)&v114);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114);
        v92 = swift_bridgeObjectRelease();
        v93 = *(void (**)(NSObject *, uint64_t, __n128))(v74 + 8);
        v93(v79, v6, v92);
        *(_WORD *)(v87 + 22) = 2082;
        v94 = dispatch thunk of CustomStringConvertible.description.getter(v6, v89);
        v113 = sub_10001A820(v94, v95, (uint64_t *)&v114);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114);
        v96 = swift_bridgeObjectRelease();
        v93(v80, v6, v96);
        *(_WORD *)(v87 + 32) = 2112;
        swift_errorRetain(v73);
        v97 = _swift_stdlib_bridgeErrorToNSError(v73);
        v113 = v97;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114);
        v98 = v106;
        *v106 = v97;
        swift_errorRelease(v73);
        swift_errorRelease(v73);
        v99 = v105;
        _os_log_impl((void *)&_mh_execute_header, v105, (os_log_type_t)v111, "[%{public}s] Purging attachment failed {accountID: %{public}s, attachmentID: %{public}s, error: %@}", (uint8_t *)v87, 0x2Au);
        v100 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v98, 1, v100);
        swift_slowDealloc(v98, -1, -1);
        v101 = v107;
        swift_arrayDestroy(v107, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v101, -1, -1);
        swift_slowDealloc(v87, -1, -1);

        swift_errorRelease(v73);
        ((void (*)(char *, uint64_t))v93)(v112, v6);
        ((void (*)(char *, uint64_t))v93)(v108, v6);
        return;
      }

      swift_errorRelease(v73);
      swift_errorRelease(v73);
      v102 = *(void (**)(char *, uint64_t))(v74 + 8);
      v102((char *)v80, v6);
      v102((char *)v79, v6);
      swift_bridgeObjectRelease_n(v81, 2);
      swift_errorRelease(v73);
      v104 = v76;
    }
    ((void (*)(char *, uint64_t, __n128))v102)(v104, v6, v103);
    v102(v27, v6);
  }
  else
  {
    v62 = *v31;
    v61 = v31[1];
    if (qword_100837838 != -1)
      swift_once(&qword_100837838, sub_10052041C);
    v63 = type metadata accessor for Logger(0);
    sub_10001AAA8(v63, (uint64_t)qword_10084E3F0);
    v64 = (unint64_t)v112;
    swift_bridgeObjectRetain_n(v112, 2);
    swift_bridgeObjectRetain(v61);
    v66 = Logger.logObject.getter(v65);
    v67 = static os_log_type_t.error.getter(v66);
    if (os_log_type_enabled(v66, v67))
    {
      v68 = swift_slowAlloc(22, -1);
      v69 = swift_slowAlloc(64, -1);
      v114 = (os_log_t)v69;
      *(_DWORD *)v68 = 136446466;
      swift_bridgeObjectRetain(v64);
      v113 = sub_10001A820((uint64_t)v111, v64, (uint64_t *)&v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114);
      swift_bridgeObjectRelease_n(v64, 3);
      *(_WORD *)(v68 + 12) = 2082;
      swift_bridgeObjectRetain(v61);
      v113 = sub_10001A820(v62, v61, (uint64_t *)&v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114);
      swift_bridgeObjectRelease_n(v61, 3);
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "[%{public}s] Invalid cache key {cacheKey: %{public}s", (uint8_t *)v68, 0x16u);
      swift_arrayDestroy(v69, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1, -1);
      swift_slowDealloc(v68, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v61, 2);
      swift_bridgeObjectRelease_n(v64, 2);
    }
  }
}

uint64_t sub_100523BAC(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  int *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;

  v2 = *(_QWORD *)(a1 - 8);
  v3 = __chkstk_darwin(a1);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v2 + 16))(v5, v3);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v5, a1);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      v7 = sub_10001A630(&qword_10084EF48);
      v8 = &v5[*(int *)(v7 + 48)];
      v9 = &v5[*(int *)(v7 + 64)];
      v10 = type metadata accessor for UUID(0);
      v11 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
      v11(v9, v10);
      v11(v8, v10);
      return 1;
    }
    else
    {
      swift_bridgeObjectRelease();
      v13 = (int *)sub_10001A630((uint64_t *)&unk_10084EF50);
      v14 = &v5[v13[12]];
      v15 = &v5[v13[16]];
      swift_errorRelease(*(_QWORD *)&v5[v13[20]]);
      v16 = type metadata accessor for UUID(0);
      v17 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
      v17(v15, v16);
      v17(v14, v16);
      return 0;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
    return 1;
  }
}

uint64_t sub_100523CFC(uint64_t a1)
{
  __n128 v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  int *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v2 = __chkstk_darwin(a1);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v5 + 16))(v4, v2);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, a1);
  if (!EnumCaseMultiPayload)
    return *(_QWORD *)v4;
  if (EnumCaseMultiPayload == 1)
  {
    v7 = *(_QWORD *)v4;
    v8 = sub_10001A630(&qword_10084EF48);
    v9 = &v4[*(int *)(v8 + 48)];
    v10 = &v4[*(int *)(v8 + 64)];
    v11 = type metadata accessor for UUID(0);
    v12 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
    v12(v10, v11);
    v12(v9, v11);
  }
  else
  {
    v7 = *(_QWORD *)v4;
    v13 = (int *)sub_10001A630((uint64_t *)&unk_10084EF50);
    v14 = &v4[v13[12]];
    v15 = &v4[v13[16]];
    swift_errorRelease(*(_QWORD *)&v4[v13[20]]);
    v16 = type metadata accessor for UUID(0);
    v17 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
    v17(v15, v16);
    v17(v14, v16);
  }
  return v7;
}

uint64_t sub_100523E38(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t WitnessTable;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  uint64_t v70;
  Swift::Bool IsNativeType;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  Swift::String v88;
  Swift::String v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  os_log_t v95;
  void *v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  __int128 v110;
  uint64_t *v111;
  os_log_t v112;
  int v113;
  void *v114;
  uint64_t v115;
  void *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  char v125[16];
  uint64_t v126;
  uint64_t v127;
  char v128[16];
  _QWORD *v129;
  void *v130;
  char v131[16];
  _QWORD *v132;
  void *v133;
  id v134[4];

  v122 = a6;
  v13 = *(_QWORD *)(*v6 + 80);
  v14 = *(_QWORD *)(*v6 + 88);
  v119 = type metadata accessor for RDDeduplicationActivity.Executable.DeduplicationError(0, v13, v14, (uint64_t)a4);
  v118 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119);
  v117 = (uint64_t *)((char *)&v108 - v15);
  v134[0] = a1;
  v134[1] = a2;
  v16 = v6;
  v134[2] = a3;
  v134[3] = a4;
  v132 = v6;
  v133 = a5;
  v17 = sub_10001A630(&qword_10084EF28);
  v19 = type metadata accessor for RDDeduplicationActivity.Executable.PreprocessedAttachment(0, v13, v14, v18);
  v20 = sub_1000A5F84((unint64_t *)&unk_10084EF30, &qword_10084EF28, (uint64_t)&protocol conformance descriptor for ArraySlice<A>);
  v134[0] = (id)Sequence.compactMap<A>(_:)(sub_10052BF24, v131, v17, v19, v20);
  v129 = v6;
  v130 = a5;
  v120 = a5;
  v21 = type metadata accessor for Array(0, v19);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v21);
  v23 = (void *)Sequence.compactMap<A>(_:)(sub_10052BF68, v128, v21, v19, WitnessTable);
  swift_bridgeObjectRelease();
  v134[0] = v23;
  v126 = v13;
  v127 = v14;
  v24 = swift_getWitnessTable(&protocol conformance descriptor for [A], v21);
  v26 = sub_10051FF64((void (*)(char *, char *))sub_10052BF80, (uint64_t)v125, v21, (char *)&type metadata for String, (uint64_t)&type metadata for Never, v24, (uint64_t)&protocol witness table for Never, v25);
  v27 = v7;
  v28 = v6 + 5;
  swift_beginAccess(v6 + 5, v134, 32, 0);
  v29 = v6[8];
  v30 = v6[9];
  sub_10000A388(v16 + 5, v16[8]);
  v31 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v30 + 32))(v29, v30);
  swift_endAccess(v134);
  if (!v31)
    v31 = _swiftEmptyArrayStorage;
  v134[0] = v31;
  swift_bridgeObjectRetain(v31);
  sub_1001E190C(v26);
  v32 = v134[0];
  swift_beginAccess(v16 + 5, v134, 33, 0);
  v33 = v16[8];
  v34 = v16[9];
  sub_10001BA38((uint64_t)(v16 + 5), v33);
  (*(void (**)(id, uint64_t, uint64_t))(v34 + 40))(v32, v33, v34);
  swift_endAccess(v134);
  v134[0] = 0;
  v35 = objc_msgSend(v122, "save:", v134);
  v36 = v134[0];
  if (v35)
  {
    v37 = v134[0];
    swift_bridgeObjectRelease();
    swift_beginAccess(v16 + 5, v134, 32, 0);
    v38 = v16[8];
    v39 = v16[9];
    sub_10000A388(v16 + 5, v38);
    v40 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v39 + 32))(v38, v39);
    swift_endAccess(v134);
    if (!v40)
      v40 = _swiftEmptyArrayStorage;
    v41 = sub_10011EE40((uint64_t)v40);
    v42 = swift_bridgeObjectRelease();
    v124 = v41;
    v43 = Array.endIndex.getter(v23, v19, v42);
    v108 = (uint64_t)v28;
    if (v43)
    {
      v111 = &v124;
      v45 = 4;
      *(_QWORD *)&v44 = 136447234;
      v110 = v44;
      v109 = (char *)&type metadata for Any + 8;
      v116 = v23;
      v115 = v19;
      do
      {
        v70 = v45 - 4;
        IsNativeType = Array._hoistableIsNativeTypeChecked()();
        Array._checkSubscript(_:wasNativeTypeChecked:)(v45 - 4, IsNativeType, v23, v19);
        if (IsNativeType)
        {
          v72 = swift_retain();
          v73 = v45 - 3;
          if (__OFADD__(v70, 1))
            goto LABEL_24;
        }
        else
        {
          v72 = _ArrayBuffer._getElementSlowPath(_:)(v45 - 4, v23, v19);
          v73 = v45 - 3;
          if (__OFADD__(v70, 1))
LABEL_24:
            __break(1u);
        }
        v74 = v72;
        sub_1005252E4();
        if (v27)
        {
          v121 = v16[17];
          v46 = (int *)sub_10001A630(qword_10084EE70);
          v47 = (uint64_t)v117;
          v48 = v74;
          v49 = (char *)v117 + v46[12];
          v50 = v46[16];
          v122 = (id)v45;
          v51 = (char *)v117 + v50;
          v52 = v16;
          v53 = v46[20];
          *v117 = v27;
          v54 = v73;
          v55 = v48 + qword_10084E5E0;
          v56 = type metadata accessor for URL(0);
          v57 = v55;
          v58 = v54;
          (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v49, v57, v56);
          v59 = v48 + qword_10084E5C8;
          v60 = type metadata accessor for UUID(0);
          (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v51, v59, v60);
          v61 = v120;
          *(_QWORD *)(v47 + v53) = v120;
          v16 = v52;
          v19 = v115;
          v62 = v119;
          swift_storeEnumTagMultiPayload(v47, v119, 4);
          swift_errorRetain(v27);
          v63 = v61;
          sub_10052511C(v47, v64, v65, v66);
          swift_release(v48);
          swift_errorRelease(v27);
          v67 = v47;
          v23 = v116;
          v68 = v62;
          v45 = (uint64_t)v122;
          (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v67, v68);
          v27 = 0;
        }
        else
        {
          v121 = v73;
          v75 = sub_1005251E8();
          v76 = v74;
          sub_10059BE6C(v75, v77);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (qword_100837838 != -1)
            swift_once(&qword_100837838, sub_10052041C);
          v78 = type metadata accessor for Logger(0);
          sub_10001AAA8(v78, (uint64_t)qword_10084E3F0);
          swift_retain_n(v74);
          v79 = swift_retain();
          v80 = Logger.logObject.getter(v79);
          v81 = static os_log_type_t.default.getter(v80);
          v82 = v81;
          if (os_log_type_enabled(v80, v81))
          {
            v83 = swift_slowAlloc(52, -1);
            v122 = (id)v45;
            v84 = v83;
            v114 = (void *)swift_slowAlloc(160, -1);
            v134[0] = v114;
            *(_DWORD *)v84 = v110;
            v113 = v82;
            v112 = v80;
            v86 = v16[18];
            v85 = v16[19];
            swift_bridgeObjectRetain(v85);
            v123 = sub_10001A820(v86, v85, (uint64_t *)v134);
            v87 = v111;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v111);
            swift_release(v16);
            swift_bridgeObjectRelease();
            *(_WORD *)(v84 + 12) = 2080;
            v88 = URL.path(percentEncoded:)(1);
            v123 = sub_10001A820(v88._countAndFlagsBits, (unint64_t)v88._object, (uint64_t *)v134);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v87);
            swift_release_n(v76);
            swift_bridgeObjectRelease();
            *(_WORD *)(v84 + 22) = 2080;
            v89 = URL.path(percentEncoded:)(1);
            v123 = sub_10001A820(v89._countAndFlagsBits, (unint64_t)v89._object, (uint64_t *)v134);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v87);
            swift_release_n(v76);
            swift_bridgeObjectRelease();
            *(_WORD *)(v84 + 32) = 2082;
            v91 = *(_QWORD *)(v76 + qword_10084E5D0);
            v90 = *(_QWORD *)(v76 + qword_10084E5D0 + 8);
            swift_bridgeObjectRetain(v90);
            v123 = sub_10001A820(v91, v90, (uint64_t *)v134);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v87);
            swift_release_n(v76);
            swift_bridgeObjectRelease();
            *(_WORD *)(v84 + 42) = 2082;
            v93 = UUID.uuidString.getter(v92);
            v123 = sub_10001A820(v93, v94, (uint64_t *)v134);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v87);
            swift_release_n(v76);
            swift_bridgeObjectRelease();
            v95 = v112;
            _os_log_impl((void *)&_mh_execute_header, v112, (os_log_type_t)v113, "[%{public}s] Migrated from {%s} to {%s} with sha512sum '%{public}s' {attachmentID: %{public}s}", (uint8_t *)v84, 0x34u);
            v96 = v114;
            swift_arrayDestroy(v114, 5, v109);
            swift_slowDealloc(v96, -1, -1);
            v97 = v84;
            v45 = (uint64_t)v122;
            swift_slowDealloc(v97, -1, -1);

          }
          else
          {

            swift_release_n(v76);
            swift_release(v16);
          }
          sub_100525444(*(_QWORD *)(v76 + qword_10084E5D8), (*(_BYTE *)(v76 + qword_10084E5F0) & 1) == 0);
          swift_release(v76);
          v58 = v121;
        }
        ++v45;
      }
      while (v58 != Array.endIndex.getter(v23, v19, v69));
    }
    swift_bridgeObjectRelease();
    v104 = sub_1001E8BAC(v124);
    swift_bridgeObjectRelease();
    v105 = v108;
    swift_beginAccess(v108, v134, 33, 0);
    v106 = v16[8];
    v107 = v16[9];
    sub_10001BA38(v105, v106);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v107 + 40))(v104, v106, v107);
    return swift_endAccess(v134);
  }
  else
  {
    v98 = v134[0];
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)(v36);

    swift_willThrow(v99);
    swift_beginAccess(v16 + 5, v134, 33, 0);
    v100 = v16[8];
    v101 = v16[9];
    sub_10001BA38((uint64_t)(v16 + 5), v100);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v101 + 40))(v31, v100, v101);
    v102 = swift_endAccess(v134);
    return swift_willThrow(v102);
  }
}

_QWORD *sub_1005247FC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ObjectType;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  void *v37;
  Class isa;
  id v39;
  uint64_t v40;
  Class v41;
  NSString v42;
  id v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Class v50;
  id v51;
  Class v52;
  uint64_t v53;
  NSString v54;
  NSString v55;
  void *v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  id v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, char *, uint64_t);
  char *v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  id v89;
  uint64_t v90;
  void (*v91)(uint64_t, char *, uint64_t);
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  void *v106;
  uint64_t v107;
  char *v108;

  v5 = v4;
  v106 = a3;
  v8 = *(_QWORD *)(*v5 + 80);
  v99 = *(_QWORD *)(*v5 + 88);
  v100 = v8;
  v9 = type metadata accessor for RDDeduplicationActivity.Executable.DeduplicationError(0, v8, v99, a4);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v88 - v11);
  v13 = type metadata accessor for URL(0);
  v102 = *(_QWORD *)(v13 - 8);
  v103 = v13;
  __chkstk_darwin(v13);
  v101 = (char *)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v98 = (char *)&v88 - v16;
  __chkstk_darwin(v17);
  v105 = (char *)&v88 - v18;
  v19 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v19);
  v21 = (char *)&v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for UUID(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v104 = (char *)&v88 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v108 = (char *)&v88 - v26;
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(a2 + 8))(ObjectType, a2);
  v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v107 = v22;
  if (v28(v21, 1, v22) == 1)
  {
    sub_10000882C((uint64_t)v21, (uint64_t *)&unk_100839C80);
    *v12 = a1;
    v12[1] = a2;
    v29 = v106;
    v12[2] = (uint64_t)v106;
    swift_storeEnumTagMultiPayload(v12, v9, 0);
    swift_unknownObjectRetain(a1);
    v30 = v29;
    sub_10052511C((uint64_t)v12, v31, v32, v33);
    (*(void (**)(uint64_t *, uint64_t))(v10 + 8))(v12, v9);
    return 0;
  }
  v34 = v106;
  v94 = v10;
  v95 = v9;
  v35 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  v35(v108, v21, v107);
  v96 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(ObjectType, a2);
  v97 = v36;
  if (!v36)
  {
    v66 = *(int *)(sub_10001A630(&qword_10084EE58) + 48);
    v68 = v107;
    v67 = v108;
    (*(void (**)(uint64_t *, char *, uint64_t))(v23 + 16))(v12, v108, v107);
    *(uint64_t *)((char *)v12 + v66) = (uint64_t)v34;
    v69 = v95;
    swift_storeEnumTagMultiPayload(v12, v95, 1);
    v70 = v34;
    sub_10052511C((uint64_t)v12, v71, v72, v73);
    (*(void (**)(uint64_t *, uint64_t))(v94 + 8))(v12, v69);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v67, v68);
    return 0;
  }
  v90 = a1;
  v91 = (void (*)(uint64_t, char *, uint64_t))v35;
  v92 = a2;
  v37 = (void *)v5[4];
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v39 = objc_msgSend(v34, "uuid");
  v40 = (uint64_t)v104;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v39);

  v41 = UUID._bridgeToObjectiveC()().super.isa;
  v93 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
  v93(v40, v107);
  v42 = String._bridgeToObjectiveC()();
  v89 = v37;
  v43 = objc_msgSend(v37, "URLForAttachmentFile:accountID:fileName:sha512Sum:", isa, v41, v42, 0);

  v44 = v105;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v43);

  v45 = static REMFileDigester.sha512SumWithFileSize(url:)(v44);
  if (!v46)
  {
    swift_bridgeObjectRelease();
    v74 = sub_10001A630(&qword_10084EE60);
    v75 = (char *)v12 + *(int *)(v74 + 48);
    v76 = *(int *)(v74 + 64);
    v78 = v102;
    v77 = v103;
    (*(void (**)(uint64_t *, char *, uint64_t))(v102 + 16))(v12, v44, v103);
    v79 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
    v81 = v107;
    v80 = v108;
    v79(v75, v108, v107);
    *(uint64_t *)((char *)v12 + v76) = (uint64_t)v34;
    v82 = v95;
    swift_storeEnumTagMultiPayload(v12, v95, 2);
    v83 = v34;
    sub_10052511C((uint64_t)v12, v84, v85, v86);
    (*(void (**)(uint64_t *, uint64_t))(v94 + 8))(v12, v82);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v44, v77);
    v93((uint64_t)v80, v81);
    return 0;
  }
  v48 = v45;
  v49 = v46;
  v95 = v47;
  v50 = UUID._bridgeToObjectiveC()().super.isa;
  v51 = objc_msgSend(v34, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v51);

  v52 = UUID._bridgeToObjectiveC()().super.isa;
  v53 = v107;
  v93(v40, v107);
  v54 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v55 = String._bridgeToObjectiveC()();
  v97 = v48;
  v56 = v55;
  v57 = objc_msgSend(v89, "URLForAttachmentFile:accountID:fileName:sha512Sum:", v50, v52, v54, v55);
  v96 = v49;
  v58 = v57;

  v59 = (uint64_t)v98;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v58);

  v61 = type metadata accessor for RDDeduplicationActivity.Executable.PreprocessedAttachment(0, v100, v99, v60);
  v91(v40, v108, v53);
  v62 = (uint64_t)v101;
  (*(void (**)(char *, char *, uint64_t))(v102 + 32))(v101, v44, v103);
  swift_allocObject(v61, *(unsigned int *)(v61 + 48), *(unsigned __int16 *)(v61 + 52));
  v63 = v90;
  v64 = sub_100526DD0(v90, v92, (uint64_t)v34, v40, v97, v96, v95, v62, v59);
  swift_unknownObjectRetain(v63);
  v65 = v34;
  return v64;
}

uint64_t sub_100524DC4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  _QWORD v26[2];

  v10 = type metadata accessor for RDDeduplicationActivity.Executable.DeduplicationError(0, *(_QWORD *)(*a2 + 80), *(_QWORD *)(*a2 + 88), a4);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (_QWORD *)((char *)v26 - v12);
  v14 = *a1;
  sub_100524F20();
  if (v5)
  {
    v26[1] = a2[17];
    v15 = sub_10001A630(&qword_10084EE68);
    v16 = (char *)v13 + *(int *)(v15 + 48);
    v17 = a5;
    v18 = *(int *)(v15 + 64);
    *v13 = v5;
    v19 = v14 + qword_10084E5C8;
    v20 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v16, v19, v20);
    *(_QWORD *)((char *)v13 + v18) = a3;
    a5 = v17;
    swift_storeEnumTagMultiPayload(v13, v10, 3);
    swift_errorRetain(v5);
    v21 = a3;
    sub_10052511C((uint64_t)v13, v22, v23, v24);
    swift_errorRelease(v5);
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
    v14 = 0;
  }
  else
  {
    sub_1005250B0();
    result = swift_retain();
  }
  *a5 = v14;
  return result;
}

void sub_100524F20()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *object;
  NSString v5;
  id v6;
  void *v7;
  void *v8;
  NSURL *v9;
  void *v10;
  void *v11;
  unsigned int v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;

  v1 = v0;
  v2 = (void *)objc_opt_self(NSFileManager);
  v3 = objc_msgSend(v2, "defaultManager");
  object = URL.path(percentEncoded:)(0)._object;
  v5 = String._bridgeToObjectiveC()();
  LOBYTE(object) = objc_msgSend(v3, "fileExistsAtPath:", v5, swift_bridgeObjectRelease(object).n128_f64[0]);

  if ((object & 1) == 0)
  {
    v6 = objc_msgSend(v2, "defaultManager");
    URL._bridgeToObjectiveC()((NSURL *)qword_10084E5E0);
    v8 = v7;
    URL._bridgeToObjectiveC()(v9);
    v11 = v10;
    v17 = 0;
    v12 = objc_msgSend(v6, "copyItemAtURL:toURL:error:", v8, v10, &v17);

    v13 = v17;
    if (v12)
    {
      *(_BYTE *)(v1 + qword_10084E5F0) = 1;
      v14 = v13;
    }
    else
    {
      v15 = v17;
      _convertNSErrorToError(_:)(v13);

      swift_willThrow(v16);
    }
  }
}

uint64_t sub_1005250B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 24);
  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 16));
  v3 = v0 + qword_10084E5D0;
  v4 = *(_QWORD *)(v0 + qword_10084E5D0);
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 32);
  swift_bridgeObjectRetain(v5);
  return v6(v4, v5, ObjectType, v1);
}

uint64_t sub_10052511C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE v14[24];

  v5 = v4;
  v7 = type metadata accessor for RDDeduplicationActivity.Executable.DeduplicationError(0, *(_QWORD *)(*v5 + 80), *(_QWORD *)(*v5 + 88), a4);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v14[-v9 - 8];
  sub_100525968(v5[3], v5[4], v7);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  swift_beginAccess(v5 + 6, v14, 33, 0);
  v11 = type metadata accessor for Array(0, v7);
  Array.append(_:)(v10, v11);
  return swift_endAccess(v14);
}

uint64_t sub_1005251E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::String v10;
  Swift::String v11;
  void *object;
  uint64_t v14;
  unint64_t v15;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = 0;
  v15 = 0xE000000000000000;
  v6 = objc_msgSend(*(id *)(v1 + 32), "uuid", 0);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v6);

  v7 = UUID.uuidString.getter();
  v9 = v8;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_bridgeObjectRelease(v15);
  v14 = v7;
  v15 = v9;
  v10._countAndFlagsBits = 124;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = UUID.uuidString.getter();
  object = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(object);
  return v14;
}

uint64_t sub_1005252E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  NSURL *v6;
  void *v7;
  void *v8;
  unsigned __int8 v9;
  id v10;
  uint64_t (*v11)(char *, uint64_t);
  id v12;
  id v14;
  uint64_t v15;
  id v16;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.deletingLastPathComponent()(v2);
  v5 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v6);
  v8 = v7;
  v16 = 0;
  v9 = objc_msgSend(v5, "removeItemAtURL:error:", v7, &v16);

  v10 = v16;
  if ((v9 & 1) != 0)
  {
    v11 = *(uint64_t (**)(char *, uint64_t))(v1 + 8);
    v12 = v16;
    return v11(v4, v0);
  }
  else
  {
    v14 = v16;
    _convertNSErrorToError(_:)(v10);

    swift_willThrow(v15);
    return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  }
}

uint64_t sub_100525444(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _BYTE v12[24];

  v5 = (_QWORD *)(v2 + 40);
  swift_beginAccess(v2 + 40, v12, 33, 0);
  v6 = *(_QWORD **)(v2 + 40);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
  *(_QWORD *)(v2 + 40) = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v6 = sub_1002CAA2C(0, v6[2] + 1, 1, v6);
    *v5 = v6;
  }
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    v6 = sub_1002CAA2C((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
    *v5 = v6;
  }
  v6[2] = v9 + 1;
  v10 = &v6[2 * v9];
  v10[4] = a1;
  *((_BYTE *)v10 + 40) = a2 & 1;
  return swift_endAccess(v12);
}

_QWORD *sub_10052551C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  return sub_100526DD0(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1005255BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t KeyPath;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  void *v28;
  _QWORD v29[3];
  _BYTE v30[8];
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;

  v2 = v0;
  sub_10034B07C(3, 0, 7);
  v4 = v3;
  v5 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v5, v32);
  *(_OWORD *)(inited + 16) = xmmword_1006A8550;
  *(_QWORD *)(inited + 32) = swift_getKeyPath(&unk_1006C1BC8);
  KeyPath = swift_getKeyPath(&unk_1006C1BF8);
  *(_QWORD *)(inited + 40) = KeyPath;
  v33 = inited;
  specialized Array._endMutation()(KeyPath);
  v8 = (void *)sub_100357FC0(v33, 0, 0, (uint64_t)v4);
  swift_bridgeObjectRelease();
  v9 = swift_allocObject(v5, 40, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1006A7330;
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  v10 = swift_getKeyPath(&unk_1006C1BF8);
  v11 = NSSortDescriptor.init<A, B>(keyPath:ascending:)(v10, 1);
  *(_QWORD *)(v9 + 32) = v11;
  v33 = v9;
  specialized Array._endMutation()(v11);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v8, "setSortDescriptors:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v13 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
  v14 = NSManagedObjectContext.fetch<A>(_:)(v8, v13);
  v15 = v1;
  if (v1)
  {
    if (qword_100837838 != -1)
      swift_once(&qword_100837838, sub_10052041C);
    v16 = type metadata accessor for Logger(0);
    sub_10001AAA8(v16, (uint64_t)qword_10084E3F0);
    swift_errorRetain(v1);
    swift_errorRetain(v1);
    v17 = swift_retain();
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc(22, -1);
      v27 = swift_slowAlloc(64, -1);
      v33 = v27;
      *(_DWORD *)v20 = 136446466;
      v28 = v4;
      v22 = *(_QWORD *)(v2 + 144);
      v21 = *(_QWORD *)(v2 + 152);
      swift_bridgeObjectRetain(v21);
      v31 = sub_10001A820(v22, v21, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32);
      swift_release(v2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2082;
      swift_getErrorValue(v15, v30, v29);
      v23 = Error.rem_errorDescription.getter(v29[1], v29[2]);
      v31 = sub_10001A820(v23, v24, &v33);
      v4 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32);
      swift_bridgeObjectRelease();
      swift_errorRelease(v15);
      swift_errorRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "[%{public}s] failed to fetch accounts from database {error: %{public}s}", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {
      swift_release(v2);
      swift_errorRelease(v1);
      swift_errorRelease(v1);
    }

    swift_willThrow(v25);
  }

  return v14;
}

void sub_100525968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  _QWORD v31[26];

  v4 = v3;
  v31[14] = a2;
  v31[9] = a1;
  v6 = type metadata accessor for UUID(0);
  v31[12] = *(_QWORD *)(v6 - 8);
  v31[13] = v6;
  v7 = __chkstk_darwin(v6);
  v31[6] = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v31[8] = (char *)v31 - v10;
  v11 = __chkstk_darwin(v9);
  v31[5] = (char *)v31 - v12;
  v13 = __chkstk_darwin(v11);
  v31[7] = (char *)v31 - v14;
  v15 = __chkstk_darwin(v13);
  v31[4] = (char *)v31 - v16;
  v17 = __chkstk_darwin(v15);
  v18 = __chkstk_darwin(v17);
  v31[3] = (char *)v31 - v19;
  __chkstk_darwin(v18);
  v20 = type metadata accessor for URL(0);
  v21 = *(_QWORD *)(v20 - 8);
  v31[10] = v20;
  v31[11] = v21;
  v22 = __chkstk_darwin(v20);
  v23 = __chkstk_darwin(v22);
  v24 = __chkstk_darwin(v23);
  v25 = __chkstk_darwin(v24);
  v26 = __chkstk_darwin(v25);
  __chkstk_darwin(v26);
  v28 = (char *)v31 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v28, v4, a3);
  v30 = (char *)&loc_100525BC4 + dword_100526DBC[swift_getEnumCaseMultiPayload(v28, a3)];
  __asm { BR              X10 }
}

void sub_100525BD4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *v0;
  v4 = v0[1];
  v5 = (void *)v0[2];
  if (qword_100837838 != -1)
    swift_once(&qword_100837838, sub_10052041C);
  v6 = type metadata accessor for Logger(0);
  sub_10001AAA8(v6, (uint64_t)qword_10084E3F0);
  v7 = *(_QWORD *)(v2 - 176);
  swift_bridgeObjectRetain_n(v7, 2);
  swift_unknownObjectRetain_n(v3, 2);
  v8 = v5;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v2 - 192) = swift_slowAlloc(8, -1);
    v12 = swift_slowAlloc(64, -1);
    *(_QWORD *)(v2 - 184) = v12;
    *(_QWORD *)(v2 - 96) = v12;
    *(_DWORD *)v11 = 136446722;
    swift_bridgeObjectRetain(v7);
    *(_QWORD *)(v2 - 104) = sub_10001A820(*(_QWORD *)(v2 - 216), v7, (uint64_t *)(v2 - 96));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 104, v2 - 96);
    swift_bridgeObjectRelease_n(v7, 3);
    *(_WORD *)(v11 + 12) = 2082;
    *(_QWORD *)(v2 - 176) = v11 + 14;
    ObjectType = swift_getObjectType();
    v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 56))(ObjectType, v4);
    v15 = objc_msgSend(v14, "URIRepresentation");

    static URL._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v16 = sub_10009FC50((unint64_t *)&qword_100845D78, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v17 = *(_QWORD *)(v2 - 208);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v17, v16);
    v20 = v19;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 200) + 8))(v1, v17);
    *(_QWORD *)(v2 - 104) = sub_10001A820(v18, v20, (uint64_t *)(v2 - 96));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 104, v2 - 96);
    swift_unknownObjectRelease_n(v3, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 22) = 2114;
    *(_QWORD *)(v2 - 104) = v8;
    v21 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 104, v2 - 96);
    v22 = *(_QWORD **)(v2 - 192);
    *v22 = v8;

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "[%{public}s] Attachment had null identifier {managedObjectID: %{public}s, accountID: %{public}@}", (uint8_t *)v11, 0x20u);
    v23 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v22, 1, v23);
    swift_slowDealloc(v22, -1, -1);
    v24 = *(_QWORD *)(v2 - 184);
    swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v11, -1, -1);
    swift_unknownObjectRelease(v3);

  }
  else
  {

    swift_bridgeObjectRelease_n(v7, 2);
    swift_unknownObjectRelease_n(v3, 3);
  }
}

_QWORD *sub_100526DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);

  *((_BYTE *)v9 + qword_10084E5F0) = 0;
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v15 = (char *)v9 + qword_10084E5C8;
  v16 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v15, a4, v16);
  v17 = (_QWORD *)((char *)v9 + qword_10084E5D0);
  *v17 = a5;
  v17[1] = a6;
  *(_QWORD *)((char *)v9 + qword_10084E5D8) = a7;
  v18 = (char *)v9 + qword_10084E5E0;
  v19 = type metadata accessor for URL(0);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
  v20(v18, a8, v19);
  v20((char *)v9 + qword_10084E5E8, a9, v19);
  return v9;
}

uint64_t sub_100526EC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  v1 = v0 + qword_10084E5C8;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_10084E5D0 + 8));
  v3 = v0 + qword_10084E5E0;
  v4 = type metadata accessor for URL(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(v3, v4);
  v5(v0 + qword_10084E5E8, v4);
  return v0;
}

uint64_t sub_100526F70()
{
  return sub_100527CA0(sub_100526EC0);
}

uint64_t sub_100526F7C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  double v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v40;
  uint64_t inited;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t WitnessTable;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  id v66;
  Class isa;
  id v68;
  uint64_t v69;
  void *v70;
  void *v71;
  Swift::String v72;
  Swift::String v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  void *v82;
  id v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  double v91;
  _QWORD *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  _QWORD v102[3];
  char v103[128];
  char v104[8];
  char v105[8];

  v92 = a1;
  v2 = *v1;
  v3 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v3);
  v5 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v89 - v11;
  static Date.now.getter(v13);
  v98 = (uint64_t)v1;
  v14 = (uint64_t)v1 + qword_10084E678;
  swift_beginAccess((char *)v1 + qword_10084E678, v105, 0, 0);
  sub_100008868(v14, (uint64_t)v5, (uint64_t *)&unk_1008380D0);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  v96 = v6;
  v95 = v7;
  v94 = v12;
  LODWORD(v93) = v15;
  if (v15 == 1)
  {
    sub_10000882C((uint64_t)v5, (uint64_t *)&unk_1008380D0);
    v91 = 0.0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    v16 = Date.timeIntervalSince(_:)(v9);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v91 = v16;
  }
  v17 = (_QWORD *)v98;
  v18 = v98 + 40;
  swift_beginAccess(v98 + 40, v104, 0, 0);
  v19 = v17[5];
  v20 = *(_QWORD *)(v19 + 16);
  v21 = _swiftEmptyArrayStorage;
  if (v20)
  {
    v102[0] = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v19);
    sub_1001C2038(0, v20, 0);
    v21 = (_QWORD *)v102[0];
    v22 = *(_QWORD *)(v102[0] + 16);
    v23 = (_BYTE *)(v19 + 40);
    do
    {
      if (*v23)
        v24 = *((_QWORD *)v23 - 1);
      else
        v24 = 0;
      v102[0] = v21;
      v25 = v21[3];
      if (v22 >= v25 >> 1)
      {
        sub_1001C2038(v25 > 1, v22 + 1, 1);
        v21 = (_QWORD *)v102[0];
      }
      v23 += 16;
      v21[2] = v22 + 1;
      v21[v22++ + 4] = v24;
      --v20;
    }
    while (v20);
    swift_bridgeObjectRelease();
    v17 = (_QWORD *)v98;
  }
  v99 = v21;
  v26 = sub_10001A630(&qword_10084EF00);
  v27 = sub_1000A5F84(&qword_10084EF08, &qword_10084EF00, (uint64_t)&protocol conformance descriptor for [A]);
  Sequence<>.sum()(v102, v26, v27, &protocol witness table for Int);
  swift_bridgeObjectRelease();
  v97 = v102[0];
  v28 = *(_QWORD *)v18;
  v29 = *(_QWORD *)(*(_QWORD *)v18 + 16);
  v30 = _swiftEmptyArrayStorage;
  if (v29)
  {
    v89 = v18;
    v90 = v2;
    v102[0] = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v28);
    sub_1001C2038(0, v29, 0);
    v30 = (_QWORD *)v102[0];
    v31 = *(_QWORD *)(v102[0] + 16);
    v32 = 32;
    do
    {
      v33 = *(_QWORD *)(v28 + v32);
      v102[0] = v30;
      v34 = v30[3];
      if (v31 >= v34 >> 1)
      {
        sub_1001C2038(v34 > 1, v31 + 1, 1);
        v30 = (_QWORD *)v102[0];
      }
      v30[2] = v31 + 1;
      v30[v31 + 4] = v33;
      v32 += 16;
      ++v31;
      --v29;
    }
    while (v29);
    swift_bridgeObjectRelease();
    v17 = (_QWORD *)v98;
    v2 = v90;
    v18 = v89;
  }
  v99 = v30;
  Sequence<>.sum()(v102, v26, v27, &protocol witness table for Int);
  swift_bridgeObjectRelease();
  v35 = *(_QWORD *)v18;
  v36 = *(_QWORD *)(*(_QWORD *)v18 + 16);
  if (v36)
  {
    v37 = 0;
    v38 = (_BYTE *)(v35 + 40);
    while (*v38 != 1 || !__OFADD__(v37++, 1))
    {
      v38 += 16;
      if (!--v36)
        goto LABEL_27;
    }
    __break(1u);
  }
  v37 = 0;
LABEL_27:
  v40 = sub_10001A630(&qword_10084EF10);
  inited = swift_initStackObject(v40, v103);
  *(_OWORD *)(inited + 16) = xmmword_1006A5140;
  *(_QWORD *)(inited + 32) = 0x6564656563637573;
  *(_QWORD *)(inited + 40) = 0xE900000000000064;
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 56) = 0x64656C696166;
  *(_QWORD *)(inited + 64) = 0xE600000000000000;
  v42 = v17 + 6;
  swift_beginAccess(v17 + 6, v102, 0, 0);
  v43 = v17[6];
  v44 = *(_QWORD *)(v2 + 80);
  v45 = *(_QWORD *)(v2 + 88);
  v47 = type metadata accessor for RDDeduplicationActivity.Executable.DeduplicationError(0, v44, v45, v46);
  v48 = swift_bridgeObjectRetain(v43);
  Array.count.getter(v48);
  swift_bridgeObjectRelease();
  *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
  strcpy((char *)(inited + 80), "dedupedCount");
  *(_BYTE *)(inited + 93) = 0;
  *(_WORD *)(inited + 94) = -5120;
  *(NSNumber *)(inited + 96) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 104) = 0xD000000000000018;
  *(_QWORD *)(inited + 112) = 0x80000001007075E0;
  *(NSNumber *)(inited + 120) = Int._bridgeToObjectiveC()();
  strcpy((char *)(inited + 128), "bytesRecovered");
  *(_BYTE *)(inited + 143) = -18;
  *(NSNumber *)(inited + 144) = Int._bridgeToObjectiveC()();
  v49 = sub_1002B083C(inited);
  v99 = (_QWORD *)v17[6];
  v50 = type metadata accessor for Array(0, v47);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v50);
  v52 = 0;
  if ((Collection.isEmpty.getter(v50, WitnessTable) & 1) == 0)
  {
    v53 = *v42;
    swift_bridgeObjectRetain(*v42);
    v54 = sub_10001A630((uint64_t *)&unk_10083AA20);
    v52 = _arrayForceCast<A, B>(_:)(v53, v47, v54);
    swift_bridgeObjectRelease();
  }
  v55 = v92[3];
  v56 = v92[4];
  sub_10000A388(v92, v55);
  v57 = sub_1003B0B84(v49);
  swift_bridgeObjectRelease();
  if (v52)
  {
    v59 = type metadata accessor for RDDeduplicationActivity.Executable.LocalAnalytics.CompositeError(0, v44, v45, v58);
    v60 = swift_getWitnessTable(&unk_1006C1DF8, v59);
    v61 = swift_allocError(v59, v60, 0, 0);
    *v62 = v52;
  }
  else
  {
    v61 = 0;
  }
  v63 = v93;
  dispatch thunk of AnalyticsType.postEvent(_:payload:duration:error:performAutoBugCaptureOnError:)(0xD000000000000026, 0x8000000100707600, v57, *(_QWORD *)&v91, (_DWORD)v93 == 1, v61, 0, v55, v56);
  swift_errorRelease(v61);
  swift_bridgeObjectRelease();
  if (v63 == 1)
  {
    v64 = 0xE400000000000000;
    v65 = 1936539455;
  }
  else
  {
    v66 = objc_msgSend(objc_allocWithZone((Class)NSNumberFormatter), "init");
    objc_msgSend(v66, "setUsesSignificantDigits:", 1);
    objc_msgSend(v66, "setMinimumSignificantDigits:", 3);
    objc_msgSend(v66, "setMaximumSignificantDigits:", 4);
    v99 = 0;
    v100 = 0xE000000000000000;
    isa = Double._bridgeToObjectiveC()().super.super.isa;
    v68 = objc_msgSend(v66, "stringForObjectValue:", isa);

    if (v68)
    {
      v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
      v71 = v70;

    }
    else
    {
      v71 = (void *)0xE200000000000000;
      v69 = 16191;
    }
    v72._countAndFlagsBits = v69;
    v72._object = v71;
    String.append(_:)(v72);
    swift_bridgeObjectRelease();
    v73._countAndFlagsBits = 29549;
    v73._object = (void *)0xE200000000000000;
    String.append(_:)(v73);

    v65 = (uint64_t)v99;
    v64 = v100;
  }
  if (qword_100837838 != -1)
    swift_once(&qword_100837838, sub_10052041C);
  v74 = type metadata accessor for Logger(0);
  sub_10001AAA8(v74, (uint64_t)qword_10084E3F0);
  swift_retain_n(v17);
  swift_bridgeObjectRetain(v64);
  v76 = Logger.logObject.getter(v75);
  v77 = static os_log_type_t.info.getter(v76);
  if (os_log_type_enabled(v76, v77))
  {
    v78 = swift_slowAlloc(52, -1);
    v98 = swift_slowAlloc(96, -1);
    v99 = (_QWORD *)v98;
    *(_DWORD *)v78 = 136447234;
    v93 = v65;
    v79 = v17[3];
    v80 = v17[4];
    swift_bridgeObjectRetain(v80);
    v101 = sub_10001A820(v79, v80, (uint64_t *)&v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102);
    swift_release_n(v17);
    swift_bridgeObjectRelease();
    *(_WORD *)(v78 + 12) = 2050;
    v81 = *(_QWORD *)(v17[5] + 16);
    swift_release(v17);
    v101 = v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102);
    swift_release(v17);
    *(_WORD *)(v78 + 22) = 2050;
    v101 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102);
    *(_WORD *)(v78 + 32) = 2082;
    v82 = (void *)objc_opt_self(NSByteCountFormatter);
    v83 = objc_msgSend(v82, "stringFromByteCount:countStyle:", v97, 0);
    v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
    v86 = v85;

    v101 = sub_10001A820(v84, v86, (uint64_t *)&v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102);
    swift_bridgeObjectRelease();
    *(_WORD *)(v78 + 42) = 2080;
    swift_bridgeObjectRetain(v64);
    v101 = sub_10001A820(v93, v64, (uint64_t *)&v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102);
    swift_bridgeObjectRelease_n(v64, 3);
    _os_log_impl((void *)&_mh_execute_header, v76, v77, "[%{public}s] Successfully migrated %{public}ld attachments, finding %{public}ld duplicates, saving %{public}s. Took %s", (uint8_t *)v78, 0x34u);
    v87 = v98;
    swift_arrayDestroy(v98, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v87, -1, -1);
    swift_slowDealloc(v78, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n(v64, 2);

    swift_release_n(v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v94, v96);
}

uint64_t sub_100527A78(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  _QWORD v22[3];
  _BYTE v23[8];
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;

  v25 = 0x203A73726F727245;
  v26 = 0xE800000000000000;
  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v24 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(a1);
    sub_1001C1B0C(0, v1, 0);
    v4 = 0;
    v2 = _swiftEmptyArrayStorage;
    do
    {
      v5 = *(_QWORD *)(a1 + 8 * v4 + 32);
      swift_getErrorValue(v5, v23, v22);
      v6 = v22[1];
      v7 = v22[2];
      swift_errorRetain(v5);
      v8 = Error.rem_errorDescription.getter(v6, v7);
      v10 = v9;
      swift_errorRelease(v5);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
      v24 = v2;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1001C1B0C(0, v2[2] + 1, 1);
        v2 = v24;
      }
      v13 = v2[2];
      v12 = v2[3];
      if (v13 >= v12 >> 1)
      {
        sub_1001C1B0C(v12 > 1, v13 + 1, 1);
        v2 = v24;
      }
      ++v4;
      v2[2] = v13 + 1;
      v14 = &v2[2 * v13];
      v14[4] = v8;
      v14[5] = v10;
    }
    while (v1 != v4);
    swift_bridgeObjectRelease();
  }
  v24 = v2;
  v15 = sub_10001A630((uint64_t *)&unk_10083AE10);
  v16 = sub_1000A5F84((unint64_t *)&qword_10083B050, (uint64_t *)&unk_10083AE10, (uint64_t)&protocol conformance descriptor for [A]);
  v17 = BidirectionalCollection<>.joined(separator:)(8251, 0xE200000000000000, v15, v16);
  v19 = v18;
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t sub_100527C40()
{
  uint64_t *v0;

  return sub_100527A78(*v0);
}

uint64_t sub_100527C50()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000882C(v0 + qword_10084E678, (uint64_t *)&unk_1008380D0);
  return v0;
}

uint64_t sub_100527C94()
{
  return sub_100527CA0(sub_100527C50);
}

uint64_t sub_100527CA0(uint64_t (*a1)(void))
{
  uint64_t v1;

  v1 = a1();
  return swift_deallocClassInstance(v1, *(unsigned int *)(*(_QWORD *)v1 + 48), *(unsigned __int16 *)(*(_QWORD *)v1 + 52));
}

void sub_100527CC0(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t, __n128);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t WitnessTable;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  _QWORD v49[4];

  v7 = *v3;
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v8);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v45 - v12;
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v47 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v45 - v18;
  v49[2] = a1;
  v49[3] = a2;
  v48 = a1;
  v49[0] = 124;
  v49[1] = 0xE100000000000000;
  v20 = sub_1000E525C();
  v21 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(v49, &type metadata for String, &type metadata for String, v20, v20);
  v22 = v21;
  if (v21[2] != 2)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    *a3 = v48;
    a3[1] = a2;
    v33 = type metadata accessor for RDDeduplicationActivity.CrashCleanError(0, *(_QWORD *)(v7 + 80), *(_QWORD *)(v7 + 88), v28);
    swift_storeEnumTagMultiPayload(a3, v33, 0);
    v34 = sub_1000A5A94(&qword_10084EF48);
    WitnessTable = swift_getWitnessTable(&unk_1006C1DB8, v33);
    v36 = type metadata accessor for Result(0, v34, v33, WitnessTable);
    v37 = 1;
LABEL_10:
    swift_storeEnumTagMultiPayload(a3, v36, v37);
    swift_bridgeObjectRetain(a2);
    return;
  }
  v45 = v7;
  v46 = a2;
  v24 = v21[4];
  v23 = v21[5];
  swift_bridgeObjectRetain(v23);
  UUID.init(uuidString:)(v24, v23);
  v25 = swift_bridgeObjectRelease();
  v26 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v15 + 48);
  if (v26(v13, 1, v14, v25) == 1)
  {
    swift_bridgeObjectRelease();
    v27 = (uint64_t)v13;
LABEL_8:
    sub_10000882C(v27, (uint64_t *)&unk_100839C80);
    v7 = v45;
    a2 = v46;
    goto LABEL_9;
  }
  v29 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v29(v19, v13, v14);
  if (v22[2] >= 2uLL)
  {
    v30 = v22[6];
    v31 = v22[7];
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRelease();
    UUID.init(uuidString:)(v30, v31);
    v32 = swift_bridgeObjectRelease();
    if (v26(v10, 1, v14, v32) != 1)
    {
      v38 = v47;
      v29(v47, v10, v14);
      v39 = sub_10001A630(&qword_10084EF48);
      v40 = (char *)a3 + *(int *)(v39 + 48);
      v41 = (char *)a3 + *(int *)(v39 + 64);
      a2 = v46;
      *a3 = v48;
      a3[1] = a2;
      v29(v40, v19, v14);
      v29(v41, v38, v14);
      v43 = type metadata accessor for RDDeduplicationActivity.CrashCleanError(255, *(_QWORD *)(v45 + 80), *(_QWORD *)(v45 + 88), v42);
      v44 = swift_getWitnessTable(&unk_1006C1DB8, v43);
      v36 = type metadata accessor for Result(0, v39, v43, v44);
      v37 = 0;
      goto LABEL_10;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v14);
    v27 = (uint64_t)v10;
    goto LABEL_8;
  }
  __break(1u);
}

uint64_t sub_10052800C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t WitnessTable;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t ObjectType;
  uint64_t (*v44)(uint64_t, uint64_t, __n128);
  __n128 v45;
  void *v46;
  void *v47;
  id v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int (*v52)(uint64_t, uint64_t, uint64_t);
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  char *v55;
  char *v56;
  void (*v57)(uint64_t, char *, uint64_t);
  uint64_t v58;
  _QWORD *v59;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v61;
  unint64_t v62;
  uint64_t v63;
  _BOOL8 v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  unint64_t v70;
  __n128 v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t result;
  _QWORD v82[2];
  char *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  char *v87;
  void (*v88)(_QWORD *@<X8>);
  uint64_t v89;
  char *v90;
  void (*v91)(char *, uint64_t, uint64_t);
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99[16];
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;

  v3 = *v1;
  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v4);
  v90 = (char *)v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v93 = (char *)v82 - v7;
  __chkstk_darwin(v8);
  v98 = (uint64_t)v82 - v9;
  v10 = type metadata accessor for UUID(0);
  v95 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v89 = (uint64_t)v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v92 = (uint64_t)v82 - v13;
  __chkstk_darwin(v14);
  v86 = (uint64_t)v82 - v15;
  __chkstk_darwin(v16);
  v18 = (char *)v82 - v17;
  __chkstk_darwin(v19);
  v21 = (char *)v82 - v20;
  v85 = a1;
  v103 = a1;
  v23 = *(_QWORD *)(v3 + 88);
  v100 = *(_QWORD *)(v3 + 80);
  v22 = v100;
  v101 = v23;
  v24 = sub_1000A5A94(&qword_10084EF48);
  v26 = type metadata accessor for RDDeduplicationActivity.CrashCleanError(255, v22, v23, v25);
  WitnessTable = swift_getWitnessTable(&unk_1006C1DB8, v26);
  v28 = (char *)type metadata accessor for Result(255, v24, v26, WitnessTable);
  v29 = type metadata accessor for Array(0, v28);
  v30 = swift_getWitnessTable(&protocol conformance descriptor for [A], v29);
  v31 = v96;
  v32 = Sequence.compactMap<A>(_:)(sub_10052C064, v99, v29, v24, v30);
  v103 = _swiftEmptyDictionarySingleton;
  v33 = sub_100528DB0();
  if (v31)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v32;
  }
  v94 = v21;
  v87 = v18;
  v82[0] = v29;
  v82[1] = 0;
  v83 = v28;
  v84 = v33;
  v96 = v23;
  v97 = v22;
  swift_bridgeObjectRelease();
  v34 = *(_QWORD *)(v84 + 16);
  if (!v34)
  {
    v88 = 0;
    v40 = v96;
    v39 = v97;
LABEL_28:
    swift_bridgeObjectRelease();
    v102 = v85;
    __chkstk_darwin(v77);
    v82[-4] = v39;
    v82[-3] = v40;
    v82[-2] = &v103;
    v78 = v82[0];
    v79 = swift_getWitnessTable(&protocol conformance descriptor for [A], v82[0]);
    v32 = sub_10051FF64((void (*)(char *, char *))sub_10052C084, (uint64_t)&v82[-6], v78, v83, (uint64_t)&type metadata for Never, v79, (uint64_t)&protocol witness table for Never, v80);
    swift_bridgeObjectRelease();
    sub_1000A5C24((uint64_t)v88, 0);
    return v32;
  }
  v88 = 0;
  v35 = (uint64_t *)(v84 + 40);
  v36 = v95;
  while (1)
  {
    v42 = *(v35 - 1);
    v41 = *v35;
    ObjectType = swift_getObjectType();
    v44 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v41 + 48);
    v45 = swift_unknownObjectRetain(v42);
    v46 = (void *)v44(ObjectType, v41, v45);
    if (!v46)
    {
      v37 = v98;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v98, 1, 1, v10);
LABEL_6:
      swift_unknownObjectRelease(v42);
      v38 = v37;
LABEL_7:
      sub_10000882C(v38, (uint64_t *)&unk_100839C80);
      goto LABEL_8;
    }
    v47 = v46;
    v48 = objc_msgSend(v46, "identifier");

    if (v48)
    {
      v49 = v93;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v48);

      v50 = 0;
    }
    else
    {
      v50 = 1;
      v49 = v93;
    }
    v36 = v95;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v95 + 56))(v49, v50, 1, v10);
    v51 = (uint64_t)v49;
    v37 = v98;
    sub_1000A5CA8(v51, v98, (uint64_t *)&unk_100839C80);
    v52 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
    if (v52(v37, 1, v10) == 1)
      goto LABEL_6;
    v91 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 32);
    v91(v94, v37, v10);
    v53 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v54 = v41;
    v55 = v90;
    v53(ObjectType, v54);
    if (v52((uint64_t)v55, 1, v10) == 1)
    {
      swift_unknownObjectRelease(v42);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v94, v10);
      v38 = (uint64_t)v55;
      goto LABEL_7;
    }
    v56 = v87;
    v91(v87, (uint64_t)v55, v10);
    v57 = *(void (**)(uint64_t, char *, uint64_t))(v36 + 16);
    v58 = v92;
    v57(v92, v94, v10);
    v57(v89, v56, v10);
    sub_1000A5C24((uint64_t)v88, 0);
    v59 = v103;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v103);
    v102 = v59;
    v103 = (_QWORD *)0x8000000000000000;
    v62 = sub_1002C65F8(v58);
    v63 = v59[2];
    v64 = (v61 & 1) == 0;
    v65 = v63 + v64;
    if (__OFADD__(v63, v64))
      break;
    v66 = v61;
    if (v59[3] >= v65)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1002D6EE4();
        v59 = v102;
      }
    }
    else
    {
      sub_1002CEB54(v65, isUniquelyReferenced_nonNull_native);
      v59 = v102;
      v67 = sub_1002C65F8(v92);
      if ((v66 & 1) != (v68 & 1))
        goto LABEL_32;
      v62 = v67;
    }
    v36 = v95;
    v103 = v59;
    swift_bridgeObjectRelease();
    if ((v66 & 1) != 0)
    {
      swift_bridgeObjectRetain(v59);
      v69 = v92;
    }
    else
    {
      v59[(v62 >> 6) + 8] |= 1 << v62;
      v70 = v59[6] + *(_QWORD *)(v36 + 72) * v62;
      v71 = swift_bridgeObjectRetain(v59);
      v69 = v92;
      ((void (*)(unint64_t, uint64_t, uint64_t, __n128))v57)(v70, v92, v10, v71);
      *(_QWORD *)(v59[7] + 8 * v62) = &_swiftEmptySetSingleton;
      v72 = v59[2];
      v73 = __OFADD__(v72, 1);
      v74 = v72 + 1;
      if (v73)
        goto LABEL_31;
      v59[2] = v74;
    }
    swift_bridgeObjectRelease();
    v75 = v86;
    sub_1002DB318(v86, v89);
    v76 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v76(v75, v10);
    swift_unknownObjectRelease(v42);
    v76(v69, v10);
    v76((uint64_t)v87, v10);
    v76((uint64_t)v94, v10);
    v88 = sub_1000D92DC;
LABEL_8:
    v35 += 2;
    --v34;
    v40 = v96;
    v39 = v97;
    if (!v34)
      goto LABEL_28;
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
  __break(1u);
  return result;
}

uint64_t sub_1005286BC@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  _QWORD *v8;

  v3 = *a1;
  v4 = sub_1000A5A94(&qword_10084EF48);
  v6 = type metadata accessor for RDDeduplicationActivity.CrashCleanError(255, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v5);
  WitnessTable = swift_getWitnessTable(&unk_1006C1DB8, v6);
  v8 = (_QWORD *)type metadata accessor for Result(0, v4, v6, WitnessTable);
  return sub_100528BC4((void (*)(char *))sub_10052C02C, v8, v4, a2);
}

uint64_t sub_100528760@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, char *, uint64_t);
  __n128 v20;
  void (*v21)(uint64_t, uint64_t, __n128);
  _QWORD v23[2];

  v23[1] = a2;
  v5 = sub_10001A630(&qword_10084EF48);
  __chkstk_darwin(v5);
  v7 = (_QWORD *)((char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(int *)(v8 + 48);
  v10 = (uint64_t)v7 + v9;
  v11 = *(int *)(v8 + 64);
  v12 = (uint64_t)v7 + v11;
  v13 = (char *)a1 + v9;
  v14 = (char *)a1 + v11;
  v16 = *a1;
  v15 = a1[1];
  *v7 = v16;
  v7[1] = v15;
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(void (**)(uint64_t, char *, uint64_t))(v18 + 16);
  v19(v10, v13, v17);
  v19(v12, v14, v17);
  swift_bridgeObjectRetain(v15);
  sub_100528880(v16, v15, v10, v12, a3);
  v20 = swift_bridgeObjectRelease();
  v21 = *(void (**)(uint64_t, uint64_t, __n128))(v18 + 8);
  v21(v12, v17, v20);
  return ((uint64_t (*)(uint64_t, uint64_t))v21)(v10, v17);
}

uint64_t sub_100528880@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void (*v26)(char *, uint64_t, uint64_t, __n128);
  uint64_t v27;
  char *v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t WitnessTable;
  void (*v41)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  _QWORD *v64;

  v44 = a2;
  v53 = a5;
  v54 = a1;
  v51 = *v5;
  v52 = sub_10001A630(&qword_10084EF68);
  __chkstk_darwin(v52);
  v50 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v46 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v45 = (char *)&v43 - v15;
  v16 = sub_10001A630(&qword_10084EF48);
  __chkstk_darwin(v16);
  v18 = (uint64_t *)((char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = __chkstk_darwin(v19);
  v22 = (uint64_t *)((char *)&v43 - v21);
  v48 = (uint64_t)&v43 - v21;
  v24 = (char *)&v43 + *(int *)(v23 + 48) - v21;
  v25 = (char *)&v43 + *(int *)(v23 + 64) - v21;
  *v22 = a1;
  v22[1] = a2;
  v26 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16);
  v27 = v12;
  v47 = v12;
  v26(v24, a3, v11, v20);
  ((void (*)(char *, uint64_t, uint64_t))v26)(v25, a4, v11);
  v28 = (char *)v18 + *(int *)(v16 + 48);
  v29 = (char *)v18 + *(int *)(v16 + 64);
  ((void (*)(char *, char *, uint64_t))v26)(v28, v24, v11);
  ((void (*)(char *, char *, uint64_t))v26)(v29, v25, v11);
  v30 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
  v31 = v45;
  v30(v45, v28, v11);
  v32 = v46;
  v30(v46, v29, v11);
  v33 = (char *)v18 + *(int *)(v16 + 48);
  v34 = (char *)v18 + *(int *)(v16 + 64);
  v35 = v44;
  *v18 = v54;
  v18[1] = v35;
  ((void (*)(char *, char *, uint64_t))v26)(v33, v24, v11);
  ((void (*)(char *, char *, uint64_t))v26)(v34, v25, v11);
  v61 = v49;
  v62 = v32;
  v63 = v31;
  v64 = v18;
  swift_bridgeObjectRetain_n(v35, 2);
  sub_10001A630((uint64_t *)&unk_10083AA20);
  sub_100520300((void (*)(_BYTE *))sub_10052C034, v50);
  sub_10000882C((uint64_t)v18, &qword_10084EF48);
  v36 = *(_QWORD *)(v51 + 88);
  v55 = *(_QWORD *)(v51 + 80);
  v56 = v36;
  v57 = v54;
  v58 = v35;
  v59 = v31;
  v60 = v32;
  v37 = v31;
  v39 = type metadata accessor for RDDeduplicationActivity.CrashCleanError(0, v55, v36, v38);
  WitnessTable = swift_getWitnessTable(&unk_1006C1DB8, v39);
  sub_10052965C((void (*)(char *))sub_10052C054, v52, v39, WitnessTable, v53);
  sub_10000882C(v48, &qword_10084EF48);
  v41 = *(void (**)(char *, uint64_t))(v47 + 8);
  v41(v32, v11);
  return ((uint64_t (*)(char *, uint64_t))v41)(v37, v11);
}

uint64_t sub_100528BC4@<X0>(void (*a1)(char *)@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v8 = a2[2];
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(a1);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v15 + 16))(v14, v16);
  if (swift_getEnumCaseMultiPayload(v14, a2) == 1)
  {
    v17 = a2[3];
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(a4, v14, v17);
    v18 = type metadata accessor for Result(0, a3, v17, a2[4]);
    return swift_storeEnumTagMultiPayload(a4, v18, 1);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v14, v8);
    a1(v12);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
}

uint64_t sub_100528D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t WitnessTable;
  uint64_t v11;

  v7 = sub_1000A5A94(&qword_10084EF48);
  v9 = type metadata accessor for RDDeduplicationActivity.CrashCleanError(255, a2, a3, v8);
  WitnessTable = swift_getWitnessTable(&unk_1006C1DB8, v9);
  v11 = type metadata accessor for Result(0, v7, v9, WitnessTable);
  return a4(v11);
}

uint64_t sub_100528DB0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t WitnessTable;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *v0;
  v2 = sub_10001A630(&qword_10084EF70);
  v3 = (char *)type metadata accessor for UUID(0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v2);
  v6 = sub_10051FF64((void (*)(char *, char *))sub_1005291A8, 0, v2, v3, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v5);
  v7 = swift_getWitnessTable(&protocol conformance descriptor for [A], v2);
  v8 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v9 = Sequence.mapToSet<A>(_:)(sub_1005292A4, 0, v2, v3, v7, v8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 + 88) + 72))(v0[2], v0[3], v6, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100528F04@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t WitnessTable;
  _QWORD *v10;

  v6 = sub_1000A5A94(&qword_10084EF48);
  v8 = type metadata accessor for RDDeduplicationActivity.CrashCleanError(255, a1, a2, v7);
  WitnessTable = swift_getWitnessTable(&unk_1006C1DB8, v8);
  v10 = (_QWORD *)type metadata accessor for Result(0, v6, v8, WitnessTable);
  return sub_100528BC4((void (*)(char *))sub_10052C0B0, v10, v6, a3);
}

void sub_100528FD0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v13;
  unint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t WitnessTable;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;

  v13 = *a5;
  if (*(_QWORD *)(*a5 + 16)
    && (v18 = sub_1002C65F8(a3), (v19 & 1) != 0)
    && (v20 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v18),
        swift_bridgeObjectRetain(v20),
        v21 = sub_1001B23C0(a4, v20),
        swift_bridgeObjectRelease(),
        (v21 & 1) != 0))
  {
    v22 = sub_10001A630(&qword_10084EF48);
    v23 = (char *)a9 + *(int *)(v22 + 48);
    v35 = (char *)a9 + *(int *)(v22 + 64);
    *a9 = a1;
    a9[1] = a2;
    v24 = type metadata accessor for UUID(0);
    v25 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
    v25(v23, a3, v24);
    v25(v35, a4, v24);
    v27 = type metadata accessor for RDDeduplicationActivity.CrashCleanError(0, a7, a8, v26);
    swift_storeEnumTagMultiPayload(a9, v27, 1);
    WitnessTable = swift_getWitnessTable(&unk_1006C1DB8, v27);
    v29 = type metadata accessor for Result(0, v22, v27, WitnessTable);
    swift_storeEnumTagMultiPayload(a9, v29, 1);
    swift_bridgeObjectRetain(a2);
  }
  else
  {
    v30 = sub_1000A5A94(&qword_10084EF48);
    v32 = type metadata accessor for RDDeduplicationActivity.CrashCleanError(255, a7, a8, v31);
    v33 = swift_getWitnessTable(&unk_1006C1DB8, v32);
    v34 = type metadata accessor for Result(0, v30, v32, v33);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(a9, a6, v34);
  }
}

uint64_t sub_1005291A8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v19;

  v4 = sub_10001A630(&qword_10084EF48);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(int *)(v7 + 48);
  v9 = (char *)v6 + v8;
  v10 = *(int *)(v7 + 64);
  v11 = (char *)v6 + v10;
  v12 = (char *)a1 + v8;
  v13 = (char *)a1 + v10;
  v14 = a1[1];
  *v6 = *a1;
  v6[1] = v14;
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v17(v9, v12, v15);
  v17(v11, v13, v15);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a2, v11, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v9, v15);
}

uint64_t sub_1005292A4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v19;

  v4 = sub_10001A630(&qword_10084EF48);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(int *)(v7 + 48);
  v9 = (char *)v6 + v8;
  v10 = *(int *)(v7 + 64);
  v11 = (char *)v6 + v10;
  v12 = (char *)a1 + v8;
  v13 = (char *)a1 + v10;
  v14 = a1[1];
  *v6 = *a1;
  v6[1] = v14;
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v17(v9, v12, v15);
  v17(v11, v13, v15);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a2, v9, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v11, v15);
}

uint64_t sub_1005293A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  Class isa;
  Class v12;
  id v13;
  id v14;
  NSURL *v15;
  void *v16;
  void *v17;
  id v18;
  void (*v19)(char *, uint64_t);
  id v20;
  uint64_t result;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  id v27;

  v25 = a2;
  v26 = a3;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)(a1 + 16);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v12 = UUID._bridgeToObjectiveC()().super.isa;
  v13 = objc_msgSend(v10, "URLForAttachmentDirectory:accountID:", isa, v12);

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v14 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v15);
  v17 = v16;
  v27 = 0;
  LOBYTE(v13) = objc_msgSend(v14, "removeItemAtURL:error:", v16, &v27);

  v18 = v27;
  if ((v13 & 1) != 0)
  {
    v19 = *(void (**)(char *, uint64_t))(v7 + 8);
    v20 = v27;
    v19(v9, v6);
    return sub_100008868(v25, a4, &qword_10084EF48);
  }
  else
  {
    v22 = v27;
    v23 = _convertNSErrorToError(_:)(v18);

    swift_willThrow(v24);
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *v26 = v23;
  }
  return result;
}

uint64_t sub_10052957C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v13;
  int *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;

  v13 = *a1;
  v14 = (int *)sub_10001A630((uint64_t *)&unk_10084EF50);
  v15 = (char *)a8 + v14[12];
  v16 = (char *)a8 + v14[16];
  v17 = v14[20];
  *a8 = a2;
  a8[1] = a3;
  v18 = type metadata accessor for UUID(0);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
  v19(v15, a4, v18);
  v19(v16, a5, v18);
  *(_QWORD *)((char *)a8 + v17) = v13;
  v21 = type metadata accessor for RDDeduplicationActivity.CrashCleanError(0, a6, a7, v20);
  swift_storeEnumTagMultiPayload(a8, v21, 2);
  swift_bridgeObjectRetain(a3);
  return swift_errorRetain(v13);
}

uint64_t sub_10052965C@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(a1);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_getEnumCaseMultiPayload(v5, v15) == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v14, v5, v11);
    a1(v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v16 = type metadata accessor for Result(0, *(_QWORD *)(a2 + 16), a3, a4);
    return swift_storeEnumTagMultiPayload(a5, v16, 1);
  }
  else
  {
    v18 = *(_QWORD *)(a2 + 16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a5, v5, v18);
    v19 = type metadata accessor for Result(0, v18, a3, a4);
    return swift_storeEnumTagMultiPayload(a5, v19, 0);
  }
}

uint64_t sub_1005297A8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 80));
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 96));
  swift_release(*(_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1005297F4()
{
  uint64_t v0;

  v0 = sub_1005297A8();
  return swift_deallocClassInstance(v0, 160, 7);
}

uint64_t sub_100529810()
{
  return sub_100520598();
}

uint64_t sub_100529830@<X0>(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = swift_isaMask & *v2;
  v5 = *(_QWORD *)((char *)v2 + qword_10084E4C0);
  a2[3] = type metadata accessor for RDDeduplicationActivity.Executable(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), a1);
  a2[4] = &off_1007F95F8;
  a2[5] = &off_1007F9608;
  *a2 = v5;
  return swift_retain();
}

uint64_t sub_100529898()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0;
  v2 = (_QWORD *)(*(_QWORD *)(v0 + qword_10084E4B8) + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_fileManager);
  v3 = v2[4];
  sub_10000A388(v2, v2[3]);
  v4 = sub_1003D8E44();
  v5 = (*(uint64_t (**)(uint64_t))(v3 + 8))(v4);
  swift_bridgeObjectRelease();
  v6 = (_QWORD *)(v1 + qword_10084E4A8);
  v7 = *(_QWORD *)(v1 + qword_10084E4A8 + 24);
  v8 = v6[4];
  sub_10000A388(v6, v7);
  v9 = 8;
  if ((v5 & 1) != 0)
    v9 = 16;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 24) + v9))(v7);
}

uint64_t sub_100529950()
{
  char *v0;
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v1 = v0;
  v2 = &v0[qword_10084E4A8];
  v4 = *(_QWORD *)&v0[qword_10084E4A8 + 24];
  v3 = *(_QWORD *)&v0[qword_10084E4A8 + 32];
  sub_10000A388(v2, v4);
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 8))(v4))
  {
    if (qword_100837838 != -1)
      swift_once(&qword_100837838, sub_10052041C);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_10084E3F0);
    v10 = v1;
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v23 = v14;
      *(_DWORD *)v13 = 136446210;
      v19 = sub_100529C84();
      v22 = sub_10001A820(v19, v20, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);

      swift_bridgeObjectRelease();
      v17 = "[%{public}s] configuration validation fail - cannot execute because configurations.approximatePerRunDeleteLimit is 0";
      goto LABEL_11;
    }
LABEL_12:

    return 0;
  }
  v5 = (_QWORD *)(*(_QWORD *)&v1[qword_10084E4B8] + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_fileManager);
  v6 = v5[4];
  sub_10000A388(v5, v5[3]);
  v7 = sub_1003D8E44();
  v8 = (*(uint64_t (**)(uint64_t))(v6 + 8))(v7);
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    if (qword_100837838 != -1)
      swift_once(&qword_100837838, sub_10052041C);
    v9 = type metadata accessor for Logger(0);
    sub_10001AAA8(v9, (uint64_t)qword_10084E3F0);
    v10 = v1;
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v23 = v14;
      *(_DWORD *)v13 = 136446210;
      v15 = sub_100529C84();
      v22 = sub_10001A820(v15, v16, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);

      swift_bridgeObjectRelease();
      v17 = "[%{public}s] skipping execute because sentinel file exists";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v11, v12, v17, v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

      return 0;
    }
    goto LABEL_12;
  }
  return 1;
}

uint64_t sub_100529C70@<X0>(uint64_t a1@<X8>)
{
  return sub_100529D90(&qword_10084E488, (uint64_t *)&unk_10083ECE0, a1);
}

uint64_t sub_100529C84()
{
  uint64_t v0;
  uint64_t MetatypeMetadata;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(v0);
  MetatypeMetadata = swift_getMetatypeMetadata();
  return String.init<A>(reflecting:)(&ObjectType, MetatypeMetadata);
}

uint64_t sub_100529CB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100018618(v1 + qword_10084E490, a1);
}

uint64_t sub_100529CDC@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;

  v3 = swift_isaMask & *v1;
  v4 = type metadata accessor for RDExecutionIntervalThrottlingPolicy();
  v5 = v1;
  sub_100529898();
  v7 = v6;
  v11 = v5;
  v9 = type metadata accessor for RDDeduplicationActivity(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v8);
  result = sub_1004804FC((uint64_t)&v11, v4, v9, (uint64_t)&off_1007F9648, v7);
  a1[3] = v4;
  a1[4] = (uint64_t)&off_1007F54C8;
  *a1 = result;
  return result;
}

uint64_t sub_100529D7C@<X0>(uint64_t a1@<X8>)
{
  return sub_100529D90(&qword_10084E498, (uint64_t *)&unk_10083E300, a1);
}

uint64_t sub_100529D90@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  _BYTE v8[24];

  v6 = v3 + *a1;
  swift_beginAccess(v6, v8, 0, 0);
  return sub_100008868(v6, a3, a2);
}

uint64_t sub_100529DEC()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = sub_100529C84();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 0x746973796261622ELL;
  v1._object = (void *)0xEB00000000726574;
  String.append(_:)(v1);
  return 0x6C7070612E6D6F63;
}

id sub_100529E8C(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  NSString v4;

  v1 = a1;
  sub_100529DEC();
  v3 = v2;

  if (v3)
  {
    v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = 0;
  }
  return v4;
}

uint64_t sub_100529EF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[5];
  _QWORD v25[5];

  v5 = *v2;
  sub_100018618(a1, (uint64_t)v25);
  v6 = sub_10001A630((uint64_t *)&unk_10083E310);
  v8 = type metadata accessor for RDDeduplicationActivity(0, *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88), v7);
  if (swift_dynamicCast(&v21, v25, v6, v8, 0))
  {

    swift_beginAccess(v2 + 2, v24, 32, 0);
    v9 = v2[5];
    v10 = v2[6];
    sub_10000A388(v2 + 2, v9);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
    swift_endAccess(v24);
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v25);
  }
  else
  {
    if (qword_100837838 != -1)
      swift_once(&qword_100837838, sub_10052041C);
    v12 = type metadata accessor for Logger(0);
    sub_10001AAA8(v12, (uint64_t)qword_10084E3F0);
    v13 = sub_100018618(a1, (uint64_t)v24);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v23 = v17;
      *(_DWORD *)v16 = 136446210;
      sub_100018618((uint64_t)v24, (uint64_t)&v21);
      v18 = String.init<A>(describing:)(&v21, v6);
      v21 = (id)sub_10001A820(v18, v19, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v24);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "[RDDeduplicationActivity.ExecutionDateStorage] lastExecutedDate(for:) must work with RDDeduplicationActivity only {executable: %{public}s}", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v24);
    }

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v25);
    v20 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a2, 1, 1, v20);
  }
}

uint64_t sub_10052A16C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[5];
  _QWORD v29[5];

  v5 = *v2;
  v6 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100018618(a1, (uint64_t)v29);
  v9 = sub_10001A630((uint64_t *)&unk_10083E310);
  v11 = type metadata accessor for RDDeduplicationActivity(0, *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88), v10);
  if (swift_dynamicCast(&v25, v29, v9, v11, 0))
  {

    v12 = type metadata accessor for Date(0);
    v13 = *(_QWORD *)(v12 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v8, a2, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, v12);
    swift_beginAccess(v2 + 2, v28, 33, 0);
    v14 = v2[5];
    v15 = v2[6];
    sub_10001BA38((uint64_t)(v2 + 2), v14);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v8, v14, v15);
    swift_endAccess(v28);
  }
  else
  {
    if (qword_100837838 != -1)
      swift_once(&qword_100837838, sub_10052041C);
    v16 = type metadata accessor for Logger(0);
    sub_10001AAA8(v16, (uint64_t)qword_10084E3F0);
    v17 = sub_100018618(a1, (uint64_t)v28);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v27 = v21;
      *(_DWORD *)v20 = 136446210;
      sub_100018618((uint64_t)v28, (uint64_t)&v25);
      v22 = String.init<A>(describing:)(&v25, v9);
      v25 = (id)sub_10001A820(v22, v23, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v28);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "[RDDeduplicationActivity.ExecutionDateStorage] updateLastExecutedDate(for:) must work with RDDeduplicationActivity only {executable: %{public}s}", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v28);
    }

  }
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v29);
}

uint64_t sub_10052A428@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100529EF4(a1, a2);
}

uint64_t sub_10052A448(uint64_t a1, uint64_t a2)
{
  return sub_10052A16C(a1, a2);
}

void sub_10052A468()
{
  sub_10052D470();
}

id sub_10052A484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for RDDeduplicationActivity(0, *(_QWORD *)((swift_isaMask & *v4) + 0x50), *(_QWORD *)((swift_isaMask & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "dealloc");
}

uint64_t sub_10052A4D0(uint64_t a1)
{
  sub_10000882C(a1 + qword_10084E488, (uint64_t *)&unk_10083ECE0);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(a1 + qword_10084E490));
  sub_10000882C(a1 + qword_10084E498, (uint64_t *)&unk_10083E300);

  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(a1 + qword_10084E4A8));
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(a1 + qword_10084E4B0));
  swift_release(*(_QWORD *)(a1 + qword_10084E4B8));
  return swift_release(*(_QWORD *)(a1 + qword_10084E4C0));
}

uint64_t sub_10052A58C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100529CDC(a1);
}

uint64_t sub_10052A5AC()
{
  return sub_100529C84();
}

uint64_t sub_10052A5CC@<X0>(uint64_t a1@<X8>)
{
  return sub_100529CB8(a1);
}

uint64_t sub_10052A5EC@<X0>(uint64_t a1@<X8>)
{
  return sub_10052A648((SEL *)&selRef_imageDeduplicationLastExecutionDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a1);
}

void sub_10052A608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10052A6E4(a1, a2, a3, (SEL *)&selRef_setImageDeduplicationLastExecutionDate_);
}

uint64_t sub_10052A614(uint64_t a1, uint64_t a2)
{
  return sub_10052A78C(a1, a2, (SEL *)&selRef_imageDeduplicationLegacyAttachmentsMarkedForDeletion);
}

void sub_10052A620(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  sub_10052A7EC(a1, a4, a2, a3, (SEL *)&selRef_setImageDeduplicationLegacyAttachmentsMarkedForDeletion_);
}

uint64_t sub_10052A62C@<X0>(uint64_t a1@<X8>)
{
  return sub_10052A648((SEL *)&selRef_savedImageDeduplicationLastExecutionDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a1);
}

uint64_t sub_10052A648@<X0>(SEL *a1@<X2>, void (*a2)(void)@<X3>, uint64_t (*a3)(void)@<X4>, uint64_t a4@<X8>)
{
  void *v4;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;

  v8 = objc_msgSend(v4, *a1);
  if (v8)
  {
    v9 = v8;
    a2();

    v10 = ((uint64_t (*)(_QWORD))a3)(0);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
    v12 = a4;
    v13 = 0;
  }
  else
  {
    v10 = a3();
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
    v12 = a4;
    v13 = 1;
  }
  return v11(v12, v13, 1, v10);
}

void sub_10052A6D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10052A6E4(a1, a2, a3, (SEL *)&selRef_setSavedImageDeduplicationLastExecutionDate_);
}

void sub_10052A6E4(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  void *v4;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  Class v11;
  Class isa;
  Class v13;

  v6 = v4;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1, v8);
  v11 = 0;
  if (v10 != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    v11 = isa;
  }
  v13 = v11;
  objc_msgSend(v6, *a4);

}

uint64_t sub_10052A780(uint64_t a1, uint64_t a2)
{
  return sub_10052A78C(a1, a2, (SEL *)&selRef_savedImageDeduplicationLegacyAttachmentsMarkedForDeletion);
}

uint64_t sub_10052A78C(uint64_t a1, uint64_t a2, SEL *a3)
{
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;

  v4 = objc_msgSend(v3, *a3);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, &type metadata for String);

  return v6;
}

void sub_10052A7E0(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  sub_10052A7EC(a1, a4, a2, a3, (SEL *)&selRef_setSavedImageDeduplicationLegacyAttachmentsMarkedForDeletion_);
}

void sub_10052A7EC(uint64_t a1, double a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  void *v5;
  Class isa;

  if (a1)
  {
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&a2 = swift_bridgeObjectRelease(a1).n128_u64[0];
  }
  else
  {
    isa = 0;
  }
  objc_msgSend(v5, *a5, isa, a2);

}

id sub_10052A854()
{
  id *v0;

  return objc_msgSend(*v0, "imageDeduplicationDefaultThrottleInterval");
}

id sub_10052A864()
{
  id *v0;

  return objc_msgSend(*v0, "imageDeduplicationBackoffThrottleInterval");
}

id sub_10052A874()
{
  id *v0;

  return objc_msgSend(*v0, "imageDeduplicationRateReduceFactor");
}

id sub_10052A898()
{
  id *v0;

  return objc_msgSend(*v0, "imageDeduplicationApproximatePerRunDeleteLimit");
}

id sub_10052A8A8()
{
  id *v0;

  return objc_msgSend(*v0, "savedImageDeduplicationDefaultThrottleInterval");
}

id sub_10052A8B8()
{
  id *v0;

  return objc_msgSend(*v0, "savedImageDeduplicationBackoffThrottleInterval");
}

id sub_10052A8C8()
{
  id *v0;

  return objc_msgSend(*v0, "savedImageDeduplicationRateReduceFactor");
}

id sub_10052A8EC()
{
  id *v0;

  return objc_msgSend(*v0, "savedImageDeduplicationApproximatePerRunDeleteLimit");
}

uint64_t sub_10052A8FC(uint64_t a1)
{
  _QWORD v2[11];

  v2[0] = &unk_1006C16A8;
  v2[1] = &unk_1006C16A8;
  v2[2] = &unk_1006C16A8;
  v2[3] = &unk_1006C16C0;
  v2[4] = &unk_1006C16D8;
  v2[5] = &unk_1006C16C0;
  v2[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[7] = &unk_1006C16D8;
  v2[8] = &unk_1006C16D8;
  v2[9] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[10] = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 0, 11, v2, a1 + 96);
}

uint64_t type metadata accessor for RDDeduplicationActivity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6C78(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RDDeduplicationActivity);
}

uint64_t sub_10052A984(uint64_t a1)
{
  _QWORD v2[8];

  v2[0] = &unk_1006C1768;
  v2[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[2] = &unk_1006C16D8;
  v2[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[5] = &unk_1006C16D8;
  v2[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[7] = &unk_1006C1768;
  return swift_initClassMetadata2(a1, 0, 8, v2, a1 + 96);
}

uint64_t type metadata accessor for RDDeduplicationActivity.Executable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6C78(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RDDeduplicationActivity.Executable);
}

uint64_t sub_10052AA08(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v5[0] = &unk_1006C1768;
  v5[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[2] = *(_QWORD *)(result - 8) + 64;
    v5[3] = &unk_1006C1768;
    v5[4] = (char *)&value witness table for Builtin.Int64 + 64;
    result = type metadata accessor for URL(319);
    if (v4 <= 0x3F)
    {
      v6 = *(_QWORD *)(result - 8) + 64;
      v7 = v6;
      v8 = &unk_1006C16A8;
      result = swift_initClassMetadata2(a1, 0, 8, v5, a1 + 96);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for RDDeduplicationActivity.Executable.PreprocessedAttachment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6C78(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RDDeduplicationActivity.Executable.PreprocessedAttachment);
}

void sub_10052AAD0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = &unk_1006C1768;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_1000D7B50(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    swift_initClassMetadata2(a1, 0, 5, v4, a1 + 96);
  }
}

uint64_t type metadata accessor for RDDeduplicationActivity.Executable.LocalAnalytics(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6C78(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RDDeduplicationActivity.Executable.LocalAnalytics);
}

uint64_t sub_10052AB70(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 0, 2, v2, a1 + 96);
}

uint64_t type metadata accessor for RDDeduplicationActivity.Executable.CrashCleaner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6C78(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RDDeduplicationActivity.Executable.CrashCleaner);
}

uint64_t sub_10052ABC0(uint64_t a1)
{
  void *v2;

  v2 = &unk_1006C16D8;
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + 96);
}

uint64_t type metadata accessor for RDDeduplicationActivity.ExecutionDateStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6C78(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RDDeduplicationActivity.ExecutionDateStorage);
}

uint64_t type metadata accessor for RDImageDeduplicationActivityObjC()
{
  return objc_opt_self(_TtC7remindd32RDImageDeduplicationActivityObjC);
}

uint64_t type metadata accessor for RDImageDeduplicationActivity(uint64_t a1)
{
  return sub_10001522C(a1, qword_10084E858, (uint64_t)&nominal type descriptor for RDImageDeduplicationActivity);
}

uint64_t sub_10052ACA0()
{
  return type metadata accessor for RDImageDeduplicationActivity(0);
}

uint64_t type metadata accessor for RDImageDeduplicationActivity.Configurations()
{
  return objc_opt_self(_TtCC7remindd28RDImageDeduplicationActivity14Configurations);
}

uint64_t type metadata accessor for RDImageDeduplicationActivity.States()
{
  return objc_opt_self(_TtCC7remindd28RDImageDeduplicationActivity6States);
}

uint64_t type metadata accessor for RDSavedImageDeduplicationActivityObjC()
{
  return objc_opt_self(_TtC7remindd37RDSavedImageDeduplicationActivityObjC);
}

uint64_t sub_10052AD78()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*(_QWORD *)v0 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  sub_10000A388(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 24) + 8))(v2);
}

uint64_t sub_10052ADB8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*(_QWORD *)v0 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  sub_10000A388(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 24) + 16))(v2);
}

uint64_t sub_10052ADF8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*(_QWORD *)v0 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  sub_10000A388(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(v2);
}

uint64_t sub_10052AE38()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*(_QWORD *)v0 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  sub_10000A388(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 8))(v2);
}

uint64_t sub_10052AE78()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_10052AE9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  ObjectType = swift_getObjectType(*(_QWORD *)(*(_QWORD *)v0 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(ObjectType, v1);
}

uint64_t sub_10052AEE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v9;

  v3 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  ObjectType = swift_getObjectType();
  sub_100008868(a1, (uint64_t)v5, (uint64_t *)&unk_1008380D0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v5, ObjectType, v6);
  return sub_10000882C(a1, (uint64_t *)&unk_1008380D0);
}

uint64_t sub_10052AF90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  ObjectType = swift_getObjectType(*(_QWORD *)(*(_QWORD *)v0 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 32))(ObjectType, v1);
}

uint64_t sub_10052AFC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t ObjectType;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  ObjectType = swift_getObjectType(*(_QWORD *)(*(_QWORD *)v1 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 40))(a1, ObjectType, v3);
}

uint64_t type metadata accessor for RDSavedImageDeduplicationActivity(uint64_t a1)
{
  return sub_10001522C(a1, qword_10084EB80, (uint64_t)&nominal type descriptor for RDSavedImageDeduplicationActivity);
}

uint64_t sub_10052B024(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 256, 0, v2, a1 + 336);
}

uint64_t sub_10052B058()
{
  return type metadata accessor for RDSavedImageDeduplicationActivity(0);
}

uint64_t type metadata accessor for RDSavedImageDeduplicationActivity.Configurations()
{
  return objc_opt_self(_TtCC7remindd33RDSavedImageDeduplicationActivity14Configurations);
}

uint64_t type metadata accessor for RDSavedImageDeduplicationActivity.States()
{
  return objc_opt_self(_TtCC7remindd33RDSavedImageDeduplicationActivity6States);
}

uint64_t sub_10052B0A0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];
  _BYTE v8[32];
  _BYTE v9[32];
  _BYTE v10[32];
  _BYTE v11[32];
  _QWORD v12[5];

  v12[0] = &unk_1006C1A08;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout2(v11, v4, (char *)&value witness table for Builtin.UnknownObject + 64);
    v12[1] = v11;
    result = type metadata accessor for URL(319);
    if (v5 <= 0x3F)
    {
      v6 = *(_QWORD *)(result - 8) + 64;
      swift_getTupleTypeLayout3(v10, v6, v4, (char *)&value witness table for Builtin.UnknownObject + 64);
      v12[2] = v10;
      swift_getTupleTypeLayout3(v9, &unk_1006C1A20, v4, (char *)&value witness table for Builtin.UnknownObject + 64);
      v12[3] = v9;
      v7[0] = &unk_1006C1A20;
      v7[1] = v6;
      v7[2] = v4;
      v7[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
      swift_getTupleTypeLayout(v8, 0, 4, v7);
      v12[4] = v8;
      swift_initEnumMetadataMultiPayload(a1, 0, 5, v12);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10052B1C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_10052B218 + 4 * byte_1006C1230[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

void sub_10052B448(_QWORD *a1, uint64_t a2)
{
  id *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
      v4 = *a1;
      v3 = (id *)(a1 + 2);
      swift_unknownObjectRelease(v4);
      goto LABEL_9;
    case 1u:
      v5 = type metadata accessor for UUID(0);
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      v6 = *(int *)(sub_10001A630(&qword_10084EE58) + 48);
      goto LABEL_8;
    case 2u:
      v7 = type metadata accessor for URL(0);
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
      v8 = &qword_10084EE60;
      goto LABEL_6;
    case 3u:
      swift_errorRelease(*a1);
      v8 = &qword_10084EE68;
LABEL_6:
      v9 = sub_10001A630(v8);
      v10 = (char *)a1 + *(int *)(v9 + 48);
      v11 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
      v6 = *(int *)(v9 + 64);
      goto LABEL_8;
    case 4u:
      swift_errorRelease(*a1);
      v12 = (int *)sub_10001A630(qword_10084EE70);
      v13 = (char *)a1 + v12[12];
      v14 = type metadata accessor for URL(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
      v15 = (char *)a1 + v12[16];
      v16 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
      v6 = v12[20];
LABEL_8:
      v3 = (id *)((char *)a1 + v6);
LABEL_9:

      break;
    default:
      return;
  }
}

void sub_10052B5B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;

  v3 = (char *)sub_10052B600 + 4 * byte_1006C123A[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }
}

uint64_t sub_10052B600()
{
  uint64_t v0;
  uint64_t v1;
  __int128 *v2;
  __int128 v3;
  void *v4;
  id v5;

  v3 = *v2;
  *(_OWORD *)v0 = *v2;
  v4 = (void *)*((_QWORD *)v2 + 2);
  *(_QWORD *)(v0 + 16) = v4;
  swift_unknownObjectRetain(v3);
  v5 = v4;
  swift_storeEnumTagMultiPayload(v0, v1, 0);
  return v0;
}

uint64_t sub_10052B810(uint64_t result, uint64_t a2, uint64_t a3)
{
  char *v5;

  if (result != a2)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(result, a3);
    v5 = (char *)&loc_10052B874 + 4 * byte_1006C123F[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  return result;
}

_QWORD *sub_10052BA84(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 1u:
      v6 = type metadata accessor for UUID(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = sub_10001A630(&qword_10084EE58);
      *(_QWORD *)((char *)a1 + *(int *)(v7 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v7 + 48));
      v8 = a1;
      v9 = a3;
      v10 = 1;
      goto LABEL_7;
    case 2u:
      v11 = type metadata accessor for URL(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      v12 = sub_10001A630(&qword_10084EE60);
      v13 = *(int *)(v12 + 48);
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v16 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      *(_QWORD *)((char *)a1 + *(int *)(v12 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v12 + 64));
      v8 = a1;
      v9 = a3;
      v10 = 2;
      goto LABEL_7;
    case 3u:
      *a1 = *a2;
      v17 = sub_10001A630(&qword_10084EE68);
      v18 = *(int *)(v17 + 48);
      v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      v21 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
      *(_QWORD *)((char *)a1 + *(int *)(v17 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v17 + 64));
      v8 = a1;
      v9 = a3;
      v10 = 3;
      goto LABEL_7;
    case 4u:
      *a1 = *a2;
      v22 = (int *)sub_10001A630(qword_10084EE70);
      v23 = v22[12];
      v24 = (char *)a1 + v23;
      v25 = (char *)a2 + v23;
      v26 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
      v27 = v22[16];
      v28 = (char *)a1 + v27;
      v29 = (char *)a2 + v27;
      v30 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
      *(_QWORD *)((char *)a1 + v22[20]) = *(_QWORD *)((char *)a2 + v22[20]);
      v8 = a1;
      v9 = a3;
      v10 = 4;
LABEL_7:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *sub_10052BCB0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;

  if (a1 != a2)
  {
    v6 = *(_QWORD *)(a3 - 8);
    (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(a1, a3);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 1u:
        v7 = type metadata accessor for UUID(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
        v8 = sub_10001A630(&qword_10084EE58);
        *(_QWORD *)((char *)a1 + *(int *)(v8 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v8 + 48));
        v9 = a1;
        v10 = a3;
        v11 = 1;
        goto LABEL_8;
      case 2u:
        v12 = type metadata accessor for URL(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
        v13 = sub_10001A630(&qword_10084EE60);
        v14 = *(int *)(v13 + 48);
        v15 = (char *)a1 + v14;
        v16 = (char *)a2 + v14;
        v17 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
        *(_QWORD *)((char *)a1 + *(int *)(v13 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v13 + 64));
        v9 = a1;
        v10 = a3;
        v11 = 2;
        goto LABEL_8;
      case 3u:
        *a1 = *a2;
        v18 = sub_10001A630(&qword_10084EE68);
        v19 = *(int *)(v18 + 48);
        v20 = (char *)a1 + v19;
        v21 = (char *)a2 + v19;
        v22 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
        *(_QWORD *)((char *)a1 + *(int *)(v18 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v18 + 64));
        v9 = a1;
        v10 = a3;
        v11 = 3;
        goto LABEL_8;
      case 4u:
        *a1 = *a2;
        v23 = (int *)sub_10001A630(qword_10084EE70);
        v24 = v23[12];
        v25 = (char *)a1 + v24;
        v26 = (char *)a2 + v24;
        v27 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
        v28 = v23[16];
        v29 = (char *)a1 + v28;
        v30 = (char *)a2 + v28;
        v31 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
        *(_QWORD *)((char *)a1 + v23[20]) = *(_QWORD *)((char *)a2 + v23[20]);
        v9 = a1;
        v10 = a3;
        v11 = 4;
LABEL_8:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t type metadata accessor for RDDeduplicationActivity.Executable.DeduplicationError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6C78(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RDDeduplicationActivity.Executable.DeduplicationError);
}

void sub_10052BF00(void *a1)
{
  _QWORD *v1;

  sub_100520BA4(a1, v1);
}

uint64_t type metadata accessor for RDDeduplicationActivity.Executable.LocalAnalytics.CompositeError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6C78(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RDDeduplicationActivity.Executable.LocalAnalytics.CompositeError);
}

_QWORD *sub_10052BF24@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *result;

  result = sub_1005247FC(*a1, a1[1], *(void **)(v3 + 24), a2);
  *a3 = result;
  return result;
}

uint64_t sub_10052BF68@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  return sub_100524DC4(a1, *(_QWORD **)(v3 + 16), *(void **)(v3 + 24), a2, a3);
}

uint64_t sub_10052BF80@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1005251E8();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t type metadata accessor for RDDeduplicationActivity.CrashCleanError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6C78(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RDDeduplicationActivity.CrashCleanError);
}

void sub_10052BFC4(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_100527CC0(*a1, a1[1], a2);
}

uint64_t sub_10052BFF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1005286BC(v1, a1);
}

uint64_t sub_10052C00C(uint64_t a1)
{
  uint64_t v1;

  return sub_100528D10(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(uint64_t))&Result.failureOrNil());
}

uint64_t sub_10052C02C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100528760(a1, v2, a2);
}

uint64_t sub_10052C034@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1005293A0(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 40), a1, a2);
}

uint64_t sub_10052C054@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return sub_10052957C(a1, v2[4], v2[5], v2[6], v2[7], v2[2], v2[3], a2);
}

uint64_t sub_10052C064(uint64_t a1)
{
  uint64_t v1;

  return sub_100528D10(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(uint64_t))&Result.valueOrNil());
}

uint64_t sub_10052C084@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100528F04(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void sub_10052C0A4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;

  sub_100528FD0(a1, a2, a3, a4, *(uint64_t **)(v5 + 32), *(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), a5);
}

uint64_t sub_10052C0B0(char *a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, uint64_t, char *, char *);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(uint64_t (**)(uint64_t, uint64_t, char *, char *))(v1 + 32);
  v4 = *(_QWORD *)a1;
  v5 = *((_QWORD *)a1 + 1);
  v6 = sub_10001A630(&qword_10084EF48);
  return v3(v4, v5, &a1[*(int *)(v6 + 48)], &a1[*(int *)(v6 + 64)]);
}

void sub_10052C124(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __n128 v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  NSString v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;

  v31 = a2;
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = (unint64_t)_swiftEmptyArrayStorage;
  v10 = *(_QWORD *)(a1 + 56);
  v29 = a1 + 56;
  v11 = 1 << *(_BYTE *)(a1 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v30 = (unint64_t)(v11 + 63) >> 6;
  v32 = a1;
  v14 = swift_bridgeObjectRetain(a1);
  v15 = 0;
  while (1)
  {
    if (v13)
    {
      v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v17 = v16 | (v15 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v15++, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v15 >= v30)
      goto LABEL_29;
    v19 = *(_QWORD *)(v29 + 8 * v15);
    if (!v19)
      break;
LABEL_18:
    v13 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v15 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v4 + 16))(v9, *(_QWORD *)(v32 + 48) + *(_QWORD *)(v4 + 72) * v17, v3, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v9, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
    {
      swift_release(v32);
      return;
    }
    v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
    UUID.uuidString.getter(v21);
    v22 = String._bridgeToObjectiveC()();
    v23 = objc_msgSend(v31, "storeForAccountIdentifier:", v22, swift_bridgeObjectRelease().n128_f64[0]);

    v24 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (v23)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v24);
      v26 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v25 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v26 >= v25 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1);
      v27 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v26, v23);
      specialized Array._endMutation()(v27);
    }
  }
  v20 = v15 + 1;
  if (v15 + 1 >= v30)
    goto LABEL_29;
  v19 = *(_QWORD *)(v29 + 8 * v20);
  if (v19)
    goto LABEL_17;
  v20 = v15 + 2;
  if (v15 + 2 >= v30)
    goto LABEL_29;
  v19 = *(_QWORD *)(v29 + 8 * v20);
  if (v19)
    goto LABEL_17;
  v20 = v15 + 3;
  if (v15 + 3 >= v30)
    goto LABEL_29;
  v19 = *(_QWORD *)(v29 + 8 * v20);
  if (v19)
    goto LABEL_17;
  v20 = v15 + 4;
  if (v15 + 4 >= v30)
  {
LABEL_29:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56))(v9, 1, 1, v3, v14);
    swift_release(v32);
    return;
  }
  v19 = *(_QWORD *)(v29 + 8 * v20);
  if (v19)
  {
LABEL_17:
    v15 = v20;
    goto LABEL_18;
  }
  while (1)
  {
    v15 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v15 >= v30)
      goto LABEL_29;
    v19 = *(_QWORD *)(v29 + 8 * v15);
    ++v20;
    if (v19)
      goto LABEL_18;
  }
LABEL_31:
  __break(1u);
}

void sub_10052C468(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  NSString v7;
  id v8;
  uint64_t KeyPath;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  Class isa;
  uint64_t v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Class v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t inited;
  uint64_t v29;
  Class v30;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;

  UUID.uuidString.getter(a1);
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(a1, "storeForAccountIdentifier:", v7, swift_bridgeObjectRelease().n128_f64[0]);

  if (v8)
  {
    KeyPath = swift_getKeyPath(&unk_1006C1CB0);
    v10 = (void *)sub_100342B94(KeyPath);
    swift_release(KeyPath);
    v11 = sub_1000151B0(0, (unint64_t *)&unk_10083AE00, off_1007D66C0);
    v12 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    v13 = objc_msgSend((id)swift_getObjCClassFromMetadata(v11), "entity");
    objc_msgSend(v12, "setEntity:", v13);

    objc_msgSend(v12, "setAffectedStores:", 0);
    objc_msgSend(v12, "setPredicate:", v10);

    v14 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v15 = swift_allocObject(v14, 40, 7);
    *(_OWORD *)(v15 + 16) = xmmword_1006A7330;
    *(_QWORD *)(v15 + 32) = v8;
    specialized Array._endMutation()(v15);
    sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
    v16 = v8;
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v12, "setAffectedStores:", isa, swift_bridgeObjectRelease().n128_f64[0]);

    objc_msgSend(v12, "setFetchBatchSize:", a4);
    v18 = sub_10001A630((uint64_t *)&unk_100839E80);
    v19 = swift_allocObject(v18, 128, 7);
    *(_OWORD *)(v19 + 16) = xmmword_1006A3C20;
    *(_QWORD *)(v19 + 32) = 0x656D614E656C6966;
    *(_QWORD *)(v19 + 40) = 0xE800000000000000;
    *(_QWORD *)(v19 + 56) = &type metadata for String;
    *(_QWORD *)(v19 + 64) = 0x696669746E656469;
    *(_QWORD *)(v19 + 72) = 0xEA00000000007265;
    *(_QWORD *)(v19 + 120) = &type metadata for String;
    *(_QWORD *)(v19 + 88) = &type metadata for String;
    *(_QWORD *)(v19 + 96) = 0x7553323135616873;
    *(_QWORD *)(v19 + 104) = 0xE90000000000006DLL;
    v20 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v12, "setPropertiesToFetch:", v20, swift_bridgeObjectRelease().n128_f64[0]);

    v21 = swift_allocObject(v14, 40, 7);
    *(_OWORD *)(v21 + 16) = xmmword_1006A7330;
    sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
    v22 = swift_getKeyPath(&unk_1006C1CD8);
    v23 = NSSortDescriptor.init<A, B>(keyPath:ascending:)(v22, 1);
    *(_QWORD *)(v21 + 32) = v23;
    v33 = v21;
    specialized Array._endMutation()(v23);
    v24 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v12, "setSortDescriptors:", v24, swift_bridgeObjectRelease().n128_f64[0]);

    v25 = NSManagedObjectContext.fetch<A>(_:)(v12, v11);
    if (v4)
    {

    }
    else
    {
      sub_1001E0688(v25);

      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v26 = (void *)objc_opt_self(REMError);
    v27 = sub_10001A630((uint64_t *)&unk_10083A340);
    inited = swift_initStackObject(v27, v32);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
    *(_QWORD *)(inited + 32) = UUID.uuidString.getter(inited);
    *(_QWORD *)(inited + 40) = v29;
    sub_10011EE40(inited);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, 1, &type metadata for String);
    v30 = Set._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v26, "accountStoreMissingError:", v30, swift_bridgeObjectRelease().n128_f64[0]);

    swift_willThrow(v31);
  }
}

_QWORD *sub_10052C8C4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t KeyPath;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  Class isa;
  uint64_t v24;
  uint64_t v25;
  Class v26;
  Class v27;
  uint64_t v28;
  id v30;
  char v31[48];
  uint64_t v32;

  v5 = v4;
  KeyPath = swift_getKeyPath(&unk_1006C1CB0);
  v10 = (void *)sub_100342B94(KeyPath);
  swift_release(KeyPath);
  v11 = swift_getKeyPath(&unk_1006C1CD8);
  v12 = sub_1001DF8D0(a3);
  v13 = (void *)sub_1003428A0(v11, (uint64_t)v12);
  swift_release(v11);
  v14 = sub_10001A630(qword_10084EF78);
  inited = swift_initStackObject(v14, v31);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
  *(_QWORD *)(inited + 32) = v10;
  *(_QWORD *)(inited + 40) = v13;
  v32 = inited;
  specialized Array._endMutation()(inited);
  v16 = v32;
  v30 = v13;
  v17 = v10;
  v18 = (void *)sub_10000D2BC(v16);
  v19 = sub_1000151B0(0, (unint64_t *)&unk_10083AE00, off_1007D66C0);
  v20 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v21 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "entity");
  objc_msgSend(v20, "setEntity:", v21);

  objc_msgSend(v20, "setAffectedStores:", 0);
  objc_msgSend(v20, "setPredicate:", v18);

  v22 = a1;
  sub_10052C124(a4, v22);

  sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v20, "setAffectedStores:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v24 = sub_10001A630((uint64_t *)&unk_100839E80);
  v25 = swift_allocObject(v24, 64, 7);
  *(_OWORD *)(v25 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v25 + 56) = &type metadata for String;
  *(_QWORD *)(v25 + 32) = 0x696669746E656469;
  *(_QWORD *)(v25 + 40) = 0xEA00000000007265;
  v26 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v20, "setPropertiesToFetch:", v26, swift_bridgeObjectRelease().n128_f64[0]);

  v27 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v20, "setRelationshipKeyPathsForPrefetching:", v27);

  v28 = NSManagedObjectContext.fetch<A>(_:)(v20, v19);
  if (v4)
  {

  }
  else
  {
    v5 = sub_1001E0688(v28);

    swift_bridgeObjectRelease();
  }
  return v5;
}

void *sub_10052CBC8(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  NSString v8;
  id v9;
  void *v10;
  Class isa;
  id v12;
  uint64_t v13;
  uint64_t inited;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  Class v28;
  uint64_t v29;
  uint64_t v30;
  Class v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Class v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v44[48];
  _BYTE v45[48];
  uint64_t v46;

  UUID.uuidString.getter(a1);
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(a1, "storeForAccountIdentifier:", v8, swift_bridgeObjectRelease().n128_f64[0]);

  if (v9)
  {
    v10 = (void *)objc_opt_self(REMAccount);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v12 = objc_msgSend(v10, "objectIDWithUUID:", isa);

    v13 = sub_10001A630(&qword_10084DED8);
    inited = swift_initStackObject(v13, v44);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
    v15 = v12;
    sub_10050DEE8((uint64_t)v12, 96);
    v17 = v16;

    *(_QWORD *)(inited + 32) = v17;
    KeyPath = swift_getKeyPath(&unk_1006C1C60);
    v19 = sub_100342BB8(KeyPath);
    v20 = swift_release(KeyPath);
    *(_QWORD *)(inited + 40) = v19;
    v46 = inited;
    specialized Array._endMutation()(v20);
    v21 = (void *)sub_10000D2BC(v46);
    v22 = type metadata accessor for REMCDSavedAttachment();
    v23 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    v24 = objc_msgSend((id)swift_getObjCClassFromMetadata(v22), "entity");
    objc_msgSend(v23, "setEntity:", v24);

    objc_msgSend(v23, "setAffectedStores:", 0);
    objc_msgSend(v23, "setPredicate:", v21);

    v25 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v26 = swift_allocObject(v25, 40, 7);
    *(_OWORD *)(v26 + 16) = xmmword_1006A7330;
    *(_QWORD *)(v26 + 32) = v9;
    v46 = v26;
    specialized Array._endMutation()(v26);
    sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
    v27 = v9;
    v28 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v23, "setAffectedStores:", v28, swift_bridgeObjectRelease().n128_f64[0]);

    objc_msgSend(v23, "setFetchBatchSize:", a4);
    v29 = sub_10001A630((uint64_t *)&unk_100839E80);
    v30 = swift_allocObject(v29, 128, 7);
    *(_OWORD *)(v30 + 16) = xmmword_1006A3C20;
    *(_QWORD *)(v30 + 32) = 0x656D614E656C6966;
    *(_QWORD *)(v30 + 40) = 0xE800000000000000;
    *(_QWORD *)(v30 + 56) = &type metadata for String;
    *(_QWORD *)(v30 + 64) = 0x696669746E656469;
    *(_QWORD *)(v30 + 72) = 0xEA00000000007265;
    *(_QWORD *)(v30 + 120) = &type metadata for String;
    *(_QWORD *)(v30 + 88) = &type metadata for String;
    *(_QWORD *)(v30 + 96) = 0x7553323135616873;
    *(_QWORD *)(v30 + 104) = 0xE90000000000006DLL;
    v31 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v23, "setPropertiesToFetch:", v31, swift_bridgeObjectRelease().n128_f64[0]);

    v32 = swift_allocObject(v25, 40, 7);
    *(_OWORD *)(v32 + 16) = xmmword_1006A7330;
    sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
    v33 = swift_getKeyPath(&unk_1006C1C88);
    v34 = NSSortDescriptor.init<A, B>(keyPath:ascending:)(v33, 1);
    *(_QWORD *)(v32 + 32) = v34;
    v46 = v32;
    specialized Array._endMutation()(v34);
    v35 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v23, "setSortDescriptors:", v35, swift_bridgeObjectRelease().n128_f64[0]);

    v36 = a2;
    v37 = NSManagedObjectContext.fetch<A>(_:)(v23, v22);
    if (v4)
    {

    }
    else
    {
      v36 = sub_1001E0694(v37);

      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v38 = (void *)objc_opt_self(REMError);
    v39 = sub_10001A630((uint64_t *)&unk_10083A340);
    v40 = swift_initStackObject(v39, v45);
    *(_OWORD *)(v40 + 16) = xmmword_1006A3C00;
    *(_QWORD *)(v40 + 32) = UUID.uuidString.getter(v40);
    *(_QWORD *)(v40 + 40) = v41;
    sub_10011EE40(v40);
    swift_setDeallocating(v40);
    swift_arrayDestroy(v40 + 32, 1, &type metadata for String);
    v36 = Set._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v38, "accountStoreMissingError:", v36, swift_bridgeObjectRelease().n128_f64[0]);

    swift_willThrow(v42);
  }
  return v36;
}

_QWORD *sub_10052D0C4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v9;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  Class isa;
  uint64_t v31;
  uint64_t v32;
  Class v33;
  Class v34;
  uint64_t v35;
  id v37;
  id v38;
  char v39[56];
  char v40[48];
  uint64_t v41;

  v5 = v4;
  v9 = sub_10001A630(&qword_10084DED8);
  inited = swift_initStackObject(v9, v40);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
  KeyPath = swift_getKeyPath(&unk_1006C1C38);
  v12 = sub_1002E8930(KeyPath, 1701603686, 0xE400000000000000);
  swift_release(KeyPath);
  *(_QWORD *)(inited + 32) = v12;
  v13 = swift_getKeyPath(&unk_1006C1C38);
  v14 = sub_1002E8930(v13, 0x6567616D69, 0xE500000000000000);
  v15 = swift_release(v13);
  *(_QWORD *)(inited + 40) = v14;
  v41 = inited;
  specialized Array._endMutation()(v15);
  v16 = (void *)sub_10001CC54(v41);
  v17 = swift_getKeyPath(&unk_1006C1C60);
  v18 = (void *)sub_100342BB8(v17);
  swift_release(v17);
  v19 = swift_getKeyPath(&unk_1006C1C88);
  v20 = sub_1001DF8D0(a3);
  v21 = (void *)sub_10034288C(v19, (uint64_t)v20);
  swift_release(v19);
  v22 = swift_initStackObject(v9, v39);
  *(_OWORD *)(v22 + 16) = xmmword_1006A3C20;
  *(_QWORD *)(v22 + 32) = v16;
  *(_QWORD *)(v22 + 40) = v18;
  *(_QWORD *)(v22 + 48) = v21;
  v41 = v22;
  specialized Array._endMutation()(v22);
  v23 = v41;
  v38 = v21;
  v24 = v16;
  v37 = v18;
  v25 = (void *)sub_10000D2BC(v23);
  v26 = type metadata accessor for REMCDSavedAttachment();
  v27 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v28 = objc_msgSend((id)swift_getObjCClassFromMetadata(v26), "entity");
  objc_msgSend(v27, "setEntity:", v28);

  objc_msgSend(v27, "setAffectedStores:", 0);
  objc_msgSend(v27, "setPredicate:", v25);

  v29 = a1;
  sub_10052C124(a4, v29);

  sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v27, "setAffectedStores:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v31 = sub_10001A630((uint64_t *)&unk_100839E80);
  v32 = swift_allocObject(v31, 64, 7);
  *(_OWORD *)(v32 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v32 + 56) = &type metadata for String;
  *(_QWORD *)(v32 + 32) = 0x696669746E656469;
  *(_QWORD *)(v32 + 40) = 0xEA00000000007265;
  v33 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v27, "setPropertiesToFetch:", v33, swift_bridgeObjectRelease().n128_f64[0]);

  v34 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v27, "setRelationshipKeyPathsForPrefetching:", v34);

  v35 = NSManagedObjectContext.fetch<A>(_:)(v27, v26);
  if (v4)
  {

  }
  else
  {
    v5 = sub_1001E0694(v35);

    swift_bridgeObjectRelease();
  }
  return v5;
}

void sub_10052D470()
{
  _swift_stdlib_reportUnimplementedInitializer("remindd.RDDeduplicationActivity", 31, "init()", 6, 0);
  __break(1u);
}

const char *sub_10052D4A4()
{
  return "sha512Sum";
}

void sub_10052D4B0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100520240(a1, a2);
}

void sub_10052D4C4(uint64_t a1, void **a2)
{
  sub_1005202A4(a1, a2);
}

void sub_10052D4E0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100520240(a1, a2);
}

void sub_10052D4F4(uint64_t a1, void **a2)
{
  sub_1005202A4(a1, a2);
}

uint64_t type metadata accessor for RDDeduplicationActivity.RateReducer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6C78(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RDDeduplicationActivity.RateReducer);
}

uint64_t sub_10052D51C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[4];
  _BYTE v6[32];
  _BYTE v7[32];
  _QWORD v8[3];

  v8[0] = &unk_1006C1768;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout3(v7, &unk_1006C1768, v4, v4);
    v8[1] = v7;
    v5[0] = &unk_1006C1768;
    v5[1] = v4;
    v5[2] = v4;
    v5[3] = &unk_1006C1A20;
    swift_getTupleTypeLayout(v6, 0, 4, v5);
    v8[2] = v6;
    swift_initEnumMetadataMultiPayload(a1, 0, 3, v8);
    return 0;
  }
  return result;
}

char *sub_10052D5D8(char *a1, char *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v19 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v19;
      swift_bridgeObjectRetain(v19);
      v20 = (int *)sub_10001A630((uint64_t *)&unk_10084EF50);
      v21 = v20[12];
      v22 = &a1[v21];
      v23 = &a2[v21];
      v24 = type metadata accessor for UUID(0);
      v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
      v25(v22, v23, v24);
      v25(&a1[v20[16]], &a2[v20[16]], v24);
      v26 = v20[20];
      v27 = *(_QWORD *)&a2[v26];
      swift_errorRetain(v27);
      *(_QWORD *)&a1[v26] = v27;
      v15 = a1;
      v16 = a3;
      v17 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v8 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v8;
      swift_bridgeObjectRetain(v8);
      v9 = sub_10001A630(&qword_10084EF48);
      v10 = *(int *)(v9 + 48);
      v11 = &a1[v10];
      v12 = &a2[v10];
      v13 = type metadata accessor for UUID(0);
      v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
      v14(v11, v12, v13);
      v14(&a1[*(int *)(v9 + 64)], &a2[*(int *)(v9 + 64)], v13);
      v15 = a1;
      v16 = a3;
      v17 = 1;
    }
    else
    {
      v28 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v28;
      swift_bridgeObjectRetain(v28);
      v15 = a1;
      v16 = a3;
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v16, v17);
  }
  return a1;
}

void sub_10052D770(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_bridgeObjectRelease();
      v4 = (int *)sub_10001A630((uint64_t *)&unk_10084EF50);
      v5 = a1 + v4[12];
      v6 = type metadata accessor for UUID(0);
      v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v7(v5, v6);
      v7(a1 + v4[16], v6);
      swift_errorRelease(*(_QWORD *)(a1 + v4[20]));
      break;
    case 1:
      swift_bridgeObjectRelease();
      v8 = sub_10001A630(&qword_10084EF48);
      v9 = a1 + *(int *)(v8 + 48);
      v10 = type metadata accessor for UUID(0);
      v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
      v11(v9, v10);
      v11(a1 + *(int *)(v8 + 64), v10);
      break;
    case 0:
      swift_bridgeObjectRelease();
      break;
  }
}

char *sub_10052D8B8(char *a1, char *a2, uint64_t a3)
{
  uint64_t EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  v7 = EnumCaseMultiPayload;
  if ((_DWORD)EnumCaseMultiPayload == 2)
  {
    v15 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *((_QWORD *)a1 + 1) = v15;
    swift_bridgeObjectRetain(v15);
    v16 = (int *)sub_10001A630((uint64_t *)&unk_10084EF50);
    v17 = v16[12];
    v18 = &a1[v17];
    v19 = &a2[v17];
    v20 = type metadata accessor for UUID(0);
    v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
    v21(v18, v19, v20);
    v21(&a1[v16[16]], &a2[v16[16]], v20);
    v22 = v16[20];
    v23 = *(_QWORD *)&a2[v22];
    swift_errorRetain(v23);
    *(_QWORD *)&a1[v22] = v23;
  }
  else if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v8 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *((_QWORD *)a1 + 1) = v8;
    swift_bridgeObjectRetain(v8);
    v9 = sub_10001A630(&qword_10084EF48);
    v10 = *(int *)(v9 + 48);
    v11 = &a1[v10];
    v12 = &a2[v10];
    v13 = type metadata accessor for UUID(0);
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    v14(v11, v12, v13);
    v14(&a1[*(int *)(v9 + 64)], &a2[*(int *)(v9 + 64)], v13);
  }
  else
  {
    v24 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *((_QWORD *)a1 + 1) = v24;
    swift_bridgeObjectRetain(v24);
  }
  swift_storeEnumTagMultiPayload(a1, a3, v7);
  return a1;
}

char *sub_10052DA18(char *a1, char *a2, uint64_t a3)
{
  uint64_t EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (a1 != a2)
  {
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    v7 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v15 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a1 + 1) = v15;
      swift_bridgeObjectRetain(v15);
      v16 = (int *)sub_10001A630((uint64_t *)&unk_10084EF50);
      v17 = v16[12];
      v18 = &a1[v17];
      v19 = &a2[v17];
      v20 = type metadata accessor for UUID(0);
      v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
      v21(v18, v19, v20);
      v21(&a1[v16[16]], &a2[v16[16]], v20);
      v22 = v16[20];
      v23 = *(_QWORD *)&a2[v22];
      swift_errorRetain(v23);
      *(_QWORD *)&a1[v22] = v23;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      if ((_DWORD)EnumCaseMultiPayload == 1)
      {
        v8 = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 1) = v8;
        swift_bridgeObjectRetain(v8);
        v9 = sub_10001A630(&qword_10084EF48);
        v10 = *(int *)(v9 + 48);
        v11 = &a1[v10];
        v12 = &a2[v10];
        v13 = type metadata accessor for UUID(0);
        v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
        v14(v11, v12, v13);
        v14(&a1[*(int *)(v9 + 64)], &a2[*(int *)(v9 + 64)], v13);
      }
      else
      {
        v24 = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 1) = v24;
        swift_bridgeObjectRetain(v24);
      }
    }
    swift_storeEnumTagMultiPayload(a1, a3, v7);
  }
  return a1;
}

char *sub_10052DBAC(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v13 = (int *)sub_10001A630((uint64_t *)&unk_10084EF50);
    v14 = v13[12];
    v15 = &a1[v14];
    v16 = &a2[v14];
    v17 = type metadata accessor for UUID(0);
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32);
    v18(v15, v16, v17);
    v18(&a1[v13[16]], &a2[v13[16]], v17);
    *(_QWORD *)&a1[v13[20]] = *(_QWORD *)&a2[v13[20]];
    swift_storeEnumTagMultiPayload(a1, a3, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = sub_10001A630(&qword_10084EF48);
    v8 = *(int *)(v7 + 48);
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = type metadata accessor for UUID(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
    v12(v9, v10, v11);
    v12(&a1[*(int *)(v7 + 64)], &a2[*(int *)(v7 + 64)], v11);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_10052DD08(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);

  if (a1 != a2)
  {
    v6 = *(_QWORD *)(a3 - 8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, a3);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v14 = (int *)sub_10001A630((uint64_t *)&unk_10084EF50);
      v15 = v14[12];
      v16 = &a1[v15];
      v17 = &a2[v15];
      v18 = type metadata accessor for UUID(0);
      v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32);
      v19(v16, v17, v18);
      v19(&a1[v14[16]], &a2[v14[16]], v18);
      *(_QWORD *)&a1[v14[20]] = *(_QWORD *)&a2[v14[20]];
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v8 = sub_10001A630(&qword_10084EF48);
      v9 = *(int *)(v8 + 48);
      v10 = &a1[v9];
      v11 = &a2[v9];
      v12 = type metadata accessor for UUID(0);
      v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
      v13(v10, v11, v12);
      v13(&a1[*(int *)(v8 + 64)], &a2[*(int *)(v8 + 64)], v12);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(v6 + 64));
    }
  }
  return a1;
}

uint64_t sub_10052DE84(uint64_t a1)
{
  return sub_10052C064(a1);
}

uint64_t sub_10052DEA0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  int64_t v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  void *v31;
  id v32;
  _QWORD *v33;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v35;
  unint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  id v47;
  uint64_t result;
  uint64_t v49;
  char *v50;
  int64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;

  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v4 = a2;
    else
      v4 = a2 & 0xFFFFFFFFFFFFFF8;
    v52 = 0;
    v5 = 0;
    v6 = 0;
    v7 = __CocoaDictionary.makeIterator()(v4) | 0x8000000000000000;
  }
  else
  {
    v8 = -1 << *(_BYTE *)(a2 + 32);
    v5 = ~v8;
    v52 = a2 + 64;
    v9 = -v8;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v6 = v10 & *(_QWORD *)(a2 + 64);
    v7 = a2;
  }
  swift_bridgeObjectRetain(a2);
  v12 = 0;
  v51 = (unint64_t)(v5 + 64) >> 6;
  v50 = (char *)&type metadata for Swift.AnyObject + 8;
  v53 = v7;
  while (1)
  {
    if ((v7 & 0x8000000000000000) != 0)
    {
      v13 = a1;
      v15 = __CocoaDictionary.Iterator.next()(v11);
      if (!v15)
        goto LABEL_48;
      v17 = v15;
      v18 = v16;
      v55 = v15;
      v19 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      swift_unknownObjectRetain(v17);
      swift_dynamicCast(&v56, &v55, v50, v19, 7);
      v20 = v56;
      swift_unknownObjectRelease(v17);
      v55 = v18;
      v21 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
      swift_unknownObjectRetain(v18);
      swift_dynamicCast(&v56, &v55, v50, v21, 7);
      v22 = v56;
      swift_unknownObjectRelease(v18);
      v54 = v6;
      if (!v20)
        goto LABEL_48;
    }
    else
    {
      if (v6)
      {
        v13 = a1;
        v54 = (v6 - 1) & v6;
        v14 = __clz(__rbit64(v6)) | (v12 << 6);
      }
      else
      {
        v23 = v12 + 1;
        if (__OFADD__(v12, 1))
          goto LABEL_51;
        v24 = v12;
        if (v23 >= v51)
          goto LABEL_47;
        v25 = *(_QWORD *)(v52 + 8 * v23);
        ++v12;
        if (!v25)
        {
          v12 = v23 + 1;
          if (v23 + 1 >= v51)
            goto LABEL_47;
          v25 = *(_QWORD *)(v52 + 8 * v12);
          if (!v25)
          {
            v12 = v23 + 2;
            if (v23 + 2 >= v51)
              goto LABEL_47;
            v25 = *(_QWORD *)(v52 + 8 * v12);
            if (!v25)
            {
              v12 = v23 + 3;
              if (v23 + 3 >= v51)
                goto LABEL_47;
              v25 = *(_QWORD *)(v52 + 8 * v12);
              if (!v25)
              {
                v12 = v23 + 4;
                if (v23 + 4 >= v51)
                  goto LABEL_47;
                v25 = *(_QWORD *)(v52 + 8 * v12);
                if (!v25)
                {
                  v26 = v24 + 6;
                  while (v51 != v26)
                  {
                    v25 = *(_QWORD *)(v52 + 8 * v26++);
                    if (v25)
                    {
                      v12 = v26 - 1;
                      goto LABEL_34;
                    }
                  }
LABEL_47:
                  v13 = a1;
LABEL_48:
                  sub_1000C6560(v7);
                  return (uint64_t)v13;
                }
              }
            }
          }
        }
LABEL_34:
        v13 = a1;
        v54 = (v25 - 1) & v25;
        v14 = __clz(__rbit64(v25)) + (v12 << 6);
      }
      v27 = 8 * v14;
      v28 = *(void **)(*(_QWORD *)(v7 + 56) + v27);
      v20 = *(id *)(*(_QWORD *)(v7 + 48) + v27);
      v22 = v28;
      if (!v20)
        goto LABEL_48;
    }
    v29 = v5;
    v30 = v20;
    v31 = v22;
    v32 = objc_msgSend(v22, "integerValue");
    v33 = v13;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
    v56 = v13;
    v36 = sub_1002C66DC((uint64_t)v30);
    v37 = v13[2];
    v38 = (v35 & 1) == 0;
    v39 = v37 + v38;
    if (__OFADD__(v37, v38))
      break;
    v40 = v35;
    if (v33[3] >= v39)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        a1 = v56;
        if ((v35 & 1) != 0)
          goto LABEL_11;
      }
      else
      {
        sub_1002DA3BC();
        a1 = v56;
        if ((v40 & 1) != 0)
          goto LABEL_11;
      }
    }
    else
    {
      sub_1002D426C(v39, isUniquelyReferenced_nonNull_native);
      v41 = sub_1002C66DC((uint64_t)v30);
      if ((v40 & 1) != (v42 & 1))
        goto LABEL_52;
      v36 = v41;
      a1 = v56;
      if ((v40 & 1) != 0)
      {
LABEL_11:
        *(_QWORD *)(a1[7] + 8 * v36) = v32;
        goto LABEL_12;
      }
    }
    a1[(v36 >> 6) + 8] |= 1 << v36;
    v43 = 8 * v36;
    *(_QWORD *)(a1[6] + v43) = v30;
    *(_QWORD *)(a1[7] + v43) = v32;
    v44 = a1[2];
    v45 = __OFADD__(v44, 1);
    v46 = v44 + 1;
    if (v45)
      goto LABEL_50;
    a1[2] = v46;
    v47 = v30;
LABEL_12:

    swift_bridgeObjectRelease();
    v5 = v29;
    v7 = v53;
    v6 = v54;
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  v49 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v49);
  __break(1u);
  return result;
}

id sub_10052E2F8(id a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, unint64_t a6, char a7)
{
  void *v7;
  void *v8;
  id v15;
  NSString v16;
  unsigned int v17;
  NSString v18;
  id v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v30;
  _QWORD v31[2];
  _OWORD v32[2];
  id v33[4];

  v8 = v7;
  v15 = objc_msgSend(v7, "createResolutionTokenMapIfNecessary");
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend(v15, "mergeWithMap:forKey:", a4, v16);

  if ((a7 & 1) != 0)
  {

    if (v17)
      sub_1000A70D0((uint64_t)a1, a2);
    else
      return 0;
  }
  else
  {
    v18 = String._bridgeToObjectiveC()();
    v19 = objc_msgSend(v8, "valueForKey:", v18);

    if (v19)
    {
      _bridgeAnyObjectToAny(_:)(v32, v19);
      swift_unknownObjectRelease(v19);
    }
    else
    {
      memset(v32, 0, sizeof(v32));
    }
    sub_1000A5CA8((uint64_t)v32, (uint64_t)v33, (uint64_t *)&unk_10083D5B0);
    if (v33[3])
    {
      v20 = swift_dynamicCast(v31, v33, (char *)&type metadata for Any + 8, &type metadata for Data, 6);
      if (v20)
        v21 = v31[0];
      else
        v21 = 0;
      if (v20)
        v22 = v31[1];
      else
        v22 = 0xF000000000000000;
    }
    else
    {
      sub_10000882C((uint64_t)v33, (uint64_t *)&unk_10083D5B0);
      v21 = 0;
      v22 = 0xF000000000000000;
    }
    v33[0] = 0;
    v23 = objc_msgSend(v8, "remObjectIDWithError:", v33);
    a1 = v33[0];
    if (v23)
    {
      v24 = v23;
      v25 = v33[0];
      a1 = (id)sub_100536818(a3, v21, v22, a5, a6, v24);

      if (!v30)
      {
        sub_1000A71B4(v21, v22);

        return a1;
      }
      sub_1000A71B4(v21, v22);
    }
    else
    {
      v26 = v33[0];
      sub_1000A71B4(v21, v22);
      _convertNSErrorToError(_:)(a1);

      swift_willThrow(v27);
    }

  }
  return a1;
}

uint64_t sub_10052E580(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10052E5B4 + 4 * byte_1006C1E40[a1]))(0x44497463656A626FLL, 0xE800000000000000);
}

unint64_t sub_10052E5B4()
{
  return 0xD000000000000012;
}

uint64_t sub_10052E8C0()
{
  return 0x53676E6972616873;
}

uint64_t sub_10052E92C()
{
  return 0x614464656E6E6970;
}

unint64_t sub_10052E948()
{
  return 0xD00000000000001CLL;
}

unint64_t sub_10052E960()
{
  return 0xD000000000000019;
}

void sub_10052E978()
{
  JUMPOUT(0x10052E98CLL);
}

uint64_t sub_10052E998(uint64_t a1)
{
  return sub_1001489A4(a1, qword_10084F108, &qword_100837690, (uint64_t)qword_100872190, (uint64_t)sub_1004A19A4);
}

uint64_t sub_10052E9BC(uint64_t a1)
{
  return sub_1001489A4(a1, qword_10084F120, &qword_100837688, (uint64_t)qword_100872178, (uint64_t)sub_1004A1988);
}

uint64_t sub_10052E9E0(uint64_t a1)
{
  return sub_1001489A4(a1, qword_10084F138, &qword_100837690, (uint64_t)qword_100872190, (uint64_t)sub_1004A19A4);
}

uint64_t sub_10052EA04(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10052EA3C + 4 * byte_1006C1E66[a1]))(0x49746E756F636361, 0xE900000000000044);
}

unint64_t sub_10052EA3C()
{
  return 0xD000000000000016;
}

unint64_t sub_10052EAD0()
{
  return 0xD000000000000014;
}

uint64_t sub_10052EAEC()
{
  return 0x774F646572616873;
}

unint64_t sub_10052EB10(char a1)
{
  unint64_t result;

  result = 0xD00000000000001CLL;
  if (a1 == 1)
    return 0xD00000000000001FLL;
  return result;
}

uint64_t sub_10052EB6C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = sub_10052E580(*a1);
  v5 = v4;
  v6 = sub_10052E580(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_10052EBF4()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  v2 = sub_10052E580(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

double sub_10052EC54(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = sub_10052E580(*v1);
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

Swift::Int sub_10052EC94(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  v3 = sub_10052E580(v2);
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10052ECF0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1005367C8(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_10052ED1C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10052E580(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10052ED44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1005367C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10052ED68()
{
  unsigned __int8 *v0;

  return sub_10052E580(*v0);
}

void sub_10052ED70(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DF820;
}

void sub_10052ED80(char *a1)
{
  sub_1002B4690(*a1);
}

void sub_10052ED8C()
{
  char *v0;

  sub_1002B2254(0, *v0);
}

void sub_10052ED98(uint64_t a1)
{
  char *v1;

  sub_1002B5F24(a1, *v1);
}

void sub_10052EDA0(uint64_t a1)
{
  char *v1;

  sub_1002B2254(a1, *v1);
}

unint64_t sub_10052EDA8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100536738(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10052EDD4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10052EA04(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10052EDFC@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100536738(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10052EE20()
{
  unsigned __int8 *v0;

  return sub_10052EA04(*v0);
}

void sub_10052EE28(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DF868;
}

uint64_t sub_10052EE38(char *a1, char *a2)
{
  return sub_1002B45E8(*a1, *a2);
}

Swift::Int sub_10052EE44()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x736E6F6974636573;
  else
    v2 = 0x7265646E696D6572;
  if (v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xE900000000000073;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

double sub_10052EEC8(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;
  double result;

  if (*v1)
    v2 = 0x736E6F6974636573;
  else
    v2 = 0x7265646E696D6572;
  if (*v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xE900000000000073;
  String.hash(into:)(a1, v2, v3);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v3).n128_u64[0];
  return result;
}

Swift::Int sub_10052EF28(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x736E6F6974636573;
  else
    v3 = 0x7265646E696D6572;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xE900000000000073;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_10052EFA8(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  char v6;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DEE28, v3);
  swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v6 = 1;
  else
    v6 = 2;
  if (!v5)
    v6 = 0;
  *a2 = v6;
}

void sub_10052F004(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x7265646E696D6572;
  if (*v1)
    v2 = 0x736E6F6974636573;
  v3 = 0xE900000000000073;
  if (*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

void sub_10052F048(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  char v6;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DEE28, v3);
  swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v6 = 1;
  else
    v6 = 2;
  if (!v5)
    v6 = 0;
  *a2 = v6;
}

uint64_t sub_10052F0A8()
{
  _BYTE *v0;

  if (*v0)
    return 0x736E6F6974636573;
  else
    return 0x7265646E696D6572;
}

void sub_10052F0E8(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E14D8;
}

uint64_t sub_10052F0F8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1002B44F4(*a1, *a2);
}

Swift::Int sub_10052F104()
{
  char *v0;

  return sub_1004F51A0(*v0);
}

uint64_t sub_10052F10C(uint64_t a1)
{
  char *v1;

  return sub_1002B5EA8(a1, *v1);
}

Swift::Int sub_10052F114(uint64_t a1)
{
  char *v1;

  return sub_1002B23A0(a1, *v1);
}

unint64_t sub_10052F11C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100536780(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_10052F148@<X0>(unint64_t *a1@<X8>)
{
  char *v1;
  unint64_t result;
  unint64_t v4;

  result = sub_10052EB10(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10052F170@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100536780(a1);
  *a2 = result;
  return result;
}

unint64_t sub_10052F194()
{
  char *v0;

  return sub_10052EB10(*v0);
}

void sub_10052F19C(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E1500;
}

void sub_10052F1AC()
{
  uint64_t v0;

  sub_10052F1C8();
  qword_100872248 = v0;
}

void sub_10052F1C8()
{
  uint64_t v0;
  char *v1;
  uint64_t *v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v0 = 38;
  v1 = &byte_1007DF840;
  while (1)
  {
    v4 = *v1++;
    v3 = v4;
    if (((1 << v4) & 0x7FFDFFFFFLL) == 0)
      goto LABEL_4;
    v5 = sub_10052E580(v3);
    v7 = v6;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v10 = sub_10001A6DC(v5, v7);
    v11 = _swiftEmptyDictionarySingleton[2];
    v12 = (v9 & 1) == 0;
    v13 = v11 + v12;
    if (__OFADD__(v11, v12))
    {
      __break(1u);
      JUMPOUT(0x10052F610);
    }
    v14 = v9;
    if (_swiftEmptyDictionarySingleton[3] >= v13)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v9 & 1) == 0)
          goto LABEL_13;
      }
      else
      {
        sub_1002D6574();
        if ((v14 & 1) == 0)
          goto LABEL_13;
      }
    }
    else
    {
      sub_1002CCF14(v13, isUniquelyReferenced_nonNull_native);
      v15 = sub_10001A6DC(v5, v7);
      if ((v14 & 1) != (v16 & 1))
        goto LABEL_20;
      v10 = v15;
      if ((v14 & 1) == 0)
      {
LABEL_13:
        _swiftEmptyDictionarySingleton[(v10 >> 6) + 8] |= 1 << v10;
        v17 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v10);
        *v17 = v5;
        v17[1] = v7;
        v18 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v10);
        *v18 = v5;
        v18[1] = v7;
        v19 = _swiftEmptyDictionarySingleton[2];
        v20 = __OFADD__(v19, 1);
        v21 = v19 + 1;
        if (v20)
        {
          __break(1u);
LABEL_20:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
          __break(1u);
          JUMPOUT(0x10052F628);
        }
        _swiftEmptyDictionarySingleton[2] = v21;
        swift_bridgeObjectRetain(v7);
        goto LABEL_3;
      }
    }
    v2 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v10);
    swift_bridgeObjectRelease();
    *v2 = v5;
    v2[1] = v7;
LABEL_3:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_4:
    if (!--v0)
      JUMPOUT(0x10052F4F0);
  }
}

void sub_10052F648(NSObject *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  id v22;
  id v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  int64_t v34;
  _QWORD *v35;
  unsigned __int8 *v36;
  unint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t ObjCClassFromMetadata;
  NSString v54;
  uint64_t v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  NSObject *v62;
  NSObject *v63;
  uint64_t v64;
  NSObject *v65;
  NSObject *v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t MetatypeMetadata;
  uint64_t v74;
  unint64_t v75;
  double v76;
  id v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  os_log_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD v90[3];
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  char *v100;
  id v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  id v108;
  os_log_t v109;
  _QWORD *v110;
  _QWORD *v111;
  NSObject *v112;
  uint64_t *v113;
  NSObject *v114;
  _QWORD v115[3];
  char v116[4];
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;

  v106 = a4;
  v9 = *v4;
  v105 = type metadata accessor for Date(0);
  v109 = *(os_log_t *)(v105 - 8);
  __chkstk_darwin(v105);
  v104 = (char *)v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v11);
  v100 = (char *)v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v103 = (char *)v90 - v14;
  __chkstk_darwin(v15);
  v102 = (char *)v90 - v16;
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  *(_QWORD *)&v19 = __chkstk_darwin(v17).n128_u64[0];
  v21 = (char *)v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = a2;
  v22 = objc_msgSend(a2, "createResolutionTokenMapIfNecessary", v19);
  v114 = a1;
  v23 = -[NSObject resolutionTokenMap](a1, "resolutionTokenMap");
  if (v23)
  {
    v24 = v23;
    v95 = v21;
    v96 = v18;
    v97 = v17;
    v92 = v9;
    v113 = v5;
    v112 = sub_1004062E8(v23, a3);
    v25 = *(_QWORD **)(a3 + 16);
    if (v25)
    {
      v101 = v24;
      swift_bridgeObjectRetain(a3);
      v98 = 0;
      v94 = 0;
      v91 = 0;
      v90[2] = (char *)v25 - 1;
      v99 = a3;
      v93 = a3 + 33;
      v107 = v25;
      v111 = (_QWORD *)(a3 + 32);
      v108 = v22;
      __asm { BR              X10 }
    }
    v45 = v113;
    v46 = v22;
    v56 = -[NSObject unsavedReminderIDsToCategorizeAsGroceryItems](v114, "unsavedReminderIDsToCategorizeAsGroceryItems");
    if (v56)
    {
      v57 = v56;
      v58 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v59 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v57, v58);
      v60 = v110;
      v61 = v59;

      v62 = objc_msgSend(v60, "account");
      if (v62)
      {
        v63 = v62;
        sub_1005384CC(v61, v60, v62);
        if (v45)
        {
          if (qword_100837848 != -1)
            swift_once(&qword_100837848, sub_10052E998);
          v64 = type metadata accessor for Logger(0);
          sub_10001AAA8(v64, (uint64_t)qword_10084F108);
          v65 = v114;
          swift_errorRetain(v45);
          v66 = v65;
          swift_errorRetain(v45);
          swift_bridgeObjectRetain(v61);
          v68 = Logger.logObject.getter(v67);
          v69 = static os_log_type_t.error.getter(v68);
          v70 = v69;
          if (os_log_type_enabled(v68, v69))
          {
            v71 = swift_slowAlloc(42, -1);
            v113 = v45;
            v72 = v71;
            v107 = (_QWORD *)swift_slowAlloc(8, -1);
            v111 = (_QWORD *)swift_slowAlloc(96, -1);
            v119 = v111;
            *(_DWORD *)v72 = 136446978;
            LODWORD(v110) = v70;
            v117 = v92;
            MetatypeMetadata = swift_getMetatypeMetadata(v92);
            v108 = v46;
            v114 = v63;
            v74 = String.init<A>(describing:)(&v117, MetatypeMetadata);
            v109 = v68;
            v117 = sub_10001A820(v74, v75, (uint64_t *)&v119);
            v101 = v24;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118);
            *(_QWORD *)&v76 = swift_bridgeObjectRelease().n128_u64[0];
            *(_WORD *)(v72 + 12) = 2112;
            v77 = -[NSObject objectID](v66, "objectID", v76);
            v117 = (uint64_t)v77;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118);
            v78 = v107;
            *v107 = v77;

            *(_WORD *)(v72 + 22) = 2080;
            swift_bridgeObjectRetain(v61);
            v80 = Array.description.getter(v79, v58);
            v82 = v81;
            swift_bridgeObjectRelease();
            v117 = sub_10001A820(v80, v82, (uint64_t *)&v119);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118);
            swift_bridgeObjectRelease_n(v61, 2);
            swift_bridgeObjectRelease();
            *(_WORD *)(v72 + 32) = 2080;
            v83 = v113;
            swift_getErrorValue(v113, v116, v115);
            v84 = Error.rem_errorDescription.getter(v115[1], v115[2]);
            v117 = sub_10001A820(v84, v85, (uint64_t *)&v119);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118);
            swift_bridgeObjectRelease();
            swift_errorRelease(v83);
            v86 = v83;
            swift_errorRelease(v83);
            v87 = v109;
            _os_log_impl((void *)&_mh_execute_header, v109, (os_log_type_t)v110, "%{public}s: Failed to auto-categorize specific reminders in list {listObjectID: %@, reminderIDsToCategorizeAsGroceryItems: %s, error: %s}", (uint8_t *)v72, 0x2Au);
            v88 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v78, 1, v88);
            swift_slowDealloc(v78, -1, -1);
            v89 = v111;
            swift_arrayDestroy(v111, 3, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v89, -1, -1);
            swift_slowDealloc(v72, -1, -1);

            swift_errorRelease(v86);
          }
          else
          {

            swift_errorRelease(v45);
            swift_bridgeObjectRelease_n(v61, 2);

            swift_errorRelease(v45);
            swift_errorRelease(v45);

          }
          return;
        }
        swift_bridgeObjectRelease();

      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }

    return;
  }
  if (qword_100837848 != -1)
    swift_once(&qword_100837848, sub_10052E998);
  v26 = type metadata accessor for Logger(0);
  sub_10001AAA8(v26, (uint64_t)qword_10084F108);
  swift_bridgeObjectRetain_n(a3, 2);
  v27 = v114;
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v28, (os_log_type_t)v29))
  {
    LODWORD(v114) = v29;
    v108 = v22;
    v30 = swift_slowAlloc(22, -1);
    v31 = (_QWORD *)swift_slowAlloc(8, -1);
    v32 = swift_slowAlloc(32, -1);
    v117 = v32;
    *(_DWORD *)v30 = 138543618;
    v33 = -[NSObject objectID](v27, "objectID");
    v119 = v33;
    v113 = &v120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120);
    *v31 = v33;

    *(_WORD *)(v30 + 12) = 2082;
    v34 = *(_QWORD *)(a3 + 16);
    v35 = _swiftEmptyArrayStorage;
    if (v34)
    {
      v110 = v31;
      v111 = (_QWORD *)v32;
      v112 = v28;
      v119 = _swiftEmptyArrayStorage;
      sub_1001C1B0C(0, v34, 0);
      v35 = v119;
      v99 = a3;
      v36 = (unsigned __int8 *)(a3 + 32);
      v37 = v119[2];
      v38 = 2 * v37;
      do
      {
        v39 = *v36++;
        v40 = sub_10052E580(v39);
        v42 = v41;
        v119 = v35;
        v43 = v35[3];
        if (v37 >= v43 >> 1)
        {
          sub_1001C1B0C(v43 > 1, v37 + 1, 1);
          v35 = v119;
        }
        v35[2] = v37 + 1;
        v44 = &v35[v38];
        v44[4] = v40;
        v44[5] = v42;
        v38 += 2;
        ++v37;
        --v34;
      }
      while (v34);
      a3 = v99;
      v28 = v112;
      v32 = (uint64_t)v111;
      v31 = v110;
    }
    v47 = Array.description.getter(v35, &type metadata for String);
    v49 = v48;
    swift_bridgeObjectRelease();
    v119 = (_QWORD *)sub_10001A820(v47, v49, &v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v113);
    swift_bridgeObjectRelease_n(a3, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v114, "REMListStorageCDIngestor: merge(storage:into cdList:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}s}", (uint8_t *)v30, 0x16u);
    v50 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v31, 1, v50);
    swift_slowDealloc(v31, -1, -1);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v30, -1, -1);

    v22 = v108;
  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
  }
  v51 = (void *)objc_opt_self(REMError);
  v52 = sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v52);
  v54 = String._bridgeToObjectiveC()();
  objc_msgSend(v51, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v54);

  swift_willThrow(v55);
}

NSString sub_100533078(char a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  NSString v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t ObjCClassFromMetadata;
  uint64_t v20;
  uint64_t v21;
  void *v23;
  _QWORD *v24;
  id v25;
  uint64_t v26;

  if ((a1 & 1) != 0)
  {
    if (objc_msgSend(v1, "hasDeserializedReminderIDsMergeableOrdering")
      && (v2 = objc_msgSend(v1, "reminderIDsMergeableOrdering")) != 0)
    {
      v3 = v2;
      v25 = 0;
      v4 = objc_msgSend((id)objc_opt_self(REMListStorage), "reminderIDUUIDStringsJSONDataFromReminderIDsMergeableOrdering:error:", v2, &v25);
      v5 = v25;
      if (v4)
      {
        v6 = (NSString)static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);

        if (qword_100837848 != -1)
          swift_once(&qword_100837848, sub_10052E998);
        v7 = type metadata accessor for Logger(0);
        sub_10001AAA8(v7, (uint64_t)qword_10084F108);
        v8 = v1;
        v9 = Logger.logObject.getter(v8);
        v10 = static os_log_type_t.info.getter(v9);
        if (os_log_type_enabled(v9, v10))
        {
          v23 = v8;
          v11 = (uint8_t *)swift_slowAlloc(12, -1);
          v24 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v11 = 138412290;
          v12 = objc_msgSend(v8, "objectID");
          v25 = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
          *v24 = v12;

          _os_log_impl((void *)&_mh_execute_header, v9, v10, "Serialized to json data from REMListStorage.reminderIDsMergeableOrdering during ingesting. {objectID: %@}", v11, 0xCu);
          v13 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v24, 1, v13);
          swift_slowDealloc(v24, -1, -1);
          swift_slowDealloc(v11, -1, -1);

        }
        else
        {

        }
      }
      else
      {
        v6 = v5;
        _convertNSErrorToError(_:)(v5);

        swift_willThrow(v21);
      }
    }
    else
    {
      v15 = objc_msgSend(v1, "reminderIDsMergeableOrderingData");
      if (v15)
      {
        v16 = v15;
        v6 = (NSString)static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);

      }
      else
      {
        v17 = (void *)objc_opt_self(REMError);
        v18 = sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
        ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v18);
        v6 = String._bridgeToObjectiveC()();
        objc_msgSend(v17, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v6);

        swift_willThrow(v20);
      }
    }
  }
  else
  {
    v14 = objc_msgSend(v1, "reminderIDsMergeableOrdering");
    return 0;
  }
  return v6;
}

void sub_1005333EC(void *a1, char a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char **v36;
  uint64_t v37;
  NSObject *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  _QWORD *v42;
  id v43;
  uint64_t v44;
  uint8_t *v45;
  id v46;
  void *v47;
  char v48;
  void *v49;
  NSObject *v50;
  NSObject *v51;
  os_log_type_t v52;
  id v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  id v59;
  void *v60;
  NSObject *v61;
  NSString v62;
  id v63;
  id v64;
  void *v65;
  uint64_t v66;
  NSObject *v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  _QWORD *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  NSObject *v77;
  NSObject *v78;
  void *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  NSString v83;
  uint64_t v84;
  uint64_t v85;
  os_log_type_t v86;
  uint8_t *v87;
  id v88;
  void *v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  id v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t ObjCClassFromMetadata;
  NSString v111;
  uint64_t v112;
  id v113;
  Class isa;
  id v115;
  uint64_t v116;
  NSObject *v117;
  uint64_t v118;
  void *v119;
  void *v120;
  unsigned int v121;
  uint64_t v122;
  NSObject *v123;
  uint64_t v125;
  void *v126;
  void *v127;
  uint64_t v128;
  id v129;
  _OWORD v130[2];
  id v131;
  _QWORD v132[3];
  uint64_t v133;

  v6 = v5;
  v11 = type metadata accessor for REMJSONDeserializationError(0);
  *(_QWORD *)&v12 = __chkstk_darwin(v11).n128_u64[0];
  if ((a2 & 1) != 0)
  {
    if (objc_msgSend(a4, "shouldUpdateSectionsOrdering", v12))
    {
      v21 = objc_msgSend(a3, "storeControllerManagedObjectContext");
      if (v21)
      {
        v22 = v21;
        v23 = objc_msgSend(a4, "objectID");
        if (qword_100837758 != -1)
          swift_once(&qword_100837758, sub_1004E8168);
        v24 = sub_1004E892C((uint64_t)v23, 0, (uint64_t)v22, (Class)qword_1008721F0, 0, 0);
        if (v5)
        {

        }
        else
        {
          v120 = v23;
          v122 = v24;
          v53 = objc_msgSend(a3, "sectionIDsOrderingAsData");
          if (v53)
          {
            v54 = v53;
            v55 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v53);
            v57 = v56;

            sub_1000151B0(0, (unint64_t *)&qword_10083D440, REMOrderedIdentifierMap_ptr);
            static REMJSONRepresentable.fromJSONData(_:)(&v131, v55, v57);
            sub_1000A71C8(v55, v57);
            v65 = v131;
            v66 = type metadata accessor for REMCDListSection();
            v85 = REMOrderedIdentifierMap.reorder<A>(objects:)(v122, v66);

            swift_bridgeObjectRelease();
          }
          else
          {
            v85 = v122;
          }
          sub_1001E0620(v85);
          swift_bridgeObjectRelease();
          v113 = objc_allocWithZone((Class)NSMutableOrderedSet);
          isa = Array._bridgeToObjectiveC()().super.isa;
          v115 = objc_msgSend(v113, "initWithArray:", isa, swift_bridgeObjectRelease().n128_f64[0]);

          objc_msgSend(a3, "setSections:", v115);
        }
      }
    }
    return;
  }
  v119 = a1;
  v126 = a4;
  v13 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v14 = swift_allocObject(v13, 48, 7);
  *(_OWORD *)(v14 + 16) = xmmword_1006A8550;
  *(_QWORD *)(v14 + 32) = swift_getKeyPath(&unk_1006C1F18);
  KeyPath = swift_getKeyPath(&unk_1006C1F50);
  *(_QWORD *)(v14 + 40) = KeyPath;
  v131 = (id)v14;
  specialized Array._endMutation()(KeyPath);
  v16 = v14;
  v133 = v14;
  v17 = objc_msgSend(a3, "parentAccount");
  if (!v17
    || (v18 = v17,
        v19 = objc_msgSend(v17, "accountTypeHost"),
        v18,
        !v19))
  {
    v19 = objc_msgSend(objc_allocWithZone((Class)REMAccountTypeHost), "initWithType:", 0);
  }
  if ((*(_BYTE *)(a5 + 17) & 1) != 0)
  {
    v121 = 0;
    v20 = v126;
  }
  else
  {
    v20 = v126;
    if (objc_msgSend(v19, "isLocal"))
    {
      objc_msgSend(v126, "remindersICSDisplayOrderChanged");
      v121 = 1;
      goto LABEL_19;
    }
    v121 = objc_msgSend(v19, "isCalDav");
  }
  if ((objc_msgSend(v20, "remindersICSDisplayOrderChanged") & 1) != 0 || v121)
  {
LABEL_19:
    v25 = swift_getKeyPath(&unk_1006C1F88);
    v26 = swift_getKeyPath(&unk_1006C1FC0);
    if ((unint64_t)v16 >> 62)
    {
      if (v16 < 0)
        v116 = v16;
      else
        v116 = v16 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v16);
      v28 = _CocoaArrayWrapper.endIndex.getter(v116);
      swift_bridgeObjectRelease();
      if (!__OFADD__(v28, 2))
      {
LABEL_21:
        v29 = sub_100191218();
        specialized Array._endMutation()(v29);
        v30 = swift_retain();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v30);
        v28 = *(_QWORD *)((v133 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v27 = *(_QWORD *)((v133 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v28 < v27 >> 1)
        {
LABEL_22:
          v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v25);
          specialized Array._endMutation()(v31);
          v32 = swift_retain();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v32);
          v34 = *(_QWORD *)((v133 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v33 = *(_QWORD *)((v133 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v34 >= v33 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1);
          v35 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v34, v26);
          specialized Array._endMutation()(v35);
          swift_release(v25);
          swift_release(v26);
          v16 = v133;
          v20 = v126;
          goto LABEL_25;
        }
LABEL_86:
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1);
        goto LABEL_22;
      }
    }
    else
    {
      v27 = v16 & 0xFFFFFFFFFFFFF8;
      v28 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!__OFADD__(v28, 2))
        goto LABEL_21;
    }
    __break(1u);
    goto LABEL_86;
  }
  v121 = 0;
LABEL_25:
  swift_bridgeObjectRetain(v16);
  sub_100342188(a3, v16);
  v36 = &selRef_rd_isExcludedFromBackup;
  if (!objc_msgSend(v20, "remindersICSDisplayOrderChanged", swift_bridgeObjectRelease().n128_f64[0]))
    goto LABEL_59;
  v118 = v6;
  if (qword_100837848 != -1)
    swift_once(&qword_100837848, sub_10052E998);
  v37 = type metadata accessor for Logger(0);
  sub_10001AAA8(v37, (uint64_t)qword_10084F108);
  v38 = v20;
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.info.getter(v39);
  if (os_log_type_enabled(v39, v40))
  {
    v117 = v38;
    v41 = (uint8_t *)swift_slowAlloc(12, -1);
    v42 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v41 = 138412290;
    v43 = -[NSObject remObjectID](v117, "remObjectID");
    v131 = v43;
    v36 = &selRef_rd_isExcludedFromBackup;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v132);
    *v42 = v43;

    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Some reminders have changes in .icsDisplayOrder so ICS display orders is taking precedence as the true sort hint - {list: %@}", v41, 0xCu);
    v44 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v42, 1, v44);
    swift_slowDealloc(v42, -1, -1);
    v45 = v41;
    v38 = v117;
    swift_slowDealloc(v45, -1, -1);

  }
  else
  {

  }
  v46 = objc_msgSend(v38, v36[217]);
  v20 = v126;
  if (!v46)
  {
    swift_bridgeObjectRelease();
    v50 = v38;
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v51, v52))
    {

LABEL_75:
      v108 = (void *)objc_opt_self(REMError);
      v109 = sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v109);
      v111 = String._bridgeToObjectiveC()();
      objc_msgSend(v108, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v111);

      swift_willThrow(v112);
LABEL_76:

      return;
    }
LABEL_67:
    v102 = swift_slowAlloc(22, -1);
    v103 = (_QWORD *)swift_slowAlloc(8, -1);
    v128 = swift_slowAlloc(32, -1);
    v131 = (id)v128;
    *(_DWORD *)v102 = 138543618;
    v104 = v19;
    v105 = -[NSObject objectID](v50, "objectID");
    *(_QWORD *)&v130[0] = v105;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v130, (char *)v130 + 8);
    *v103 = v105;
    v19 = v104;

    *(_WORD *)(v102 + 12) = 2082;
    *(_QWORD *)&v130[0] = sub_10001A820(0x7265646E696D6572, 0xE900000000000073, (uint64_t *)&v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v130, (char *)v130 + 8);
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "REMListStorageCDIngestor: mutateOrdering(...) cannot proceed because storage.reminderIDsMergeableOrdering is nil {objectID: %{public}@, key: %{public}s}", (uint8_t *)v102, 0x16u);
    v106 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v103, 1, v106);
    swift_slowDealloc(v103, -1, -1);
    swift_arrayDestroy(v128, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v128, -1, -1);
    swift_slowDealloc(v102, -1, -1);

    goto LABEL_75;
  }
  v47 = v46;
  sub_10053A930(v46, v119);
  if (v118)
  {

    swift_bridgeObjectRelease();
    return;
  }
  v58 = v49;
  if ((v48 & 1) == 0)
  {
LABEL_58:
    -[NSObject setRemindersICSDisplayOrderChanged:](v38, "setRemindersICSDisplayOrderChanged:", 0);

LABEL_59:
    v88 = objc_msgSend(v20, v36[217]);
    if (v88)
    {
      v89 = v88;
      v90 = objc_msgSend(v20, "reminderIDsOrderingHints");
      v91 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v92 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
      v93 = sub_1000EC524((unint64_t *)&qword_10083A1F0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v94 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v90, v91, v92, v93);

      v95 = sub_10052DEA0(_swiftEmptyDictionarySingleton, v94);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_100837848 != -1)
        swift_once(&qword_100837848, sub_10052E998);
      v96 = type metadata accessor for Logger(0);
      sub_10001AAA8(v96, (uint64_t)qword_10084F108);
      swift_bridgeObjectRetain(v95);
      v98 = Logger.logObject.getter(v97);
      v99 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v98, v99))
      {
        v100 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v100 = 134217984;
        v131 = *(id *)(v95 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v132);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v98, v99, "REMListStorageCDIngestor:mutateOrdering - number of reminderIDsOrderingHints {count: %ld}", v100, 0xCu);
        swift_slowDealloc(v100, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease();
      }
      v107 = *(_QWORD *)(v95 + 16);
      if (v107 == 1)
        sub_1000A90FC(v119, v95);
      swift_bridgeObjectRelease();
      sub_1000A7610((void **)v119, v107 == 1);
      if (v121)
        sub_10053AC7C(v119);

      goto LABEL_76;
    }
    swift_bridgeObjectRelease();
    if (qword_100837848 != -1)
      swift_once(&qword_100837848, sub_10052E998);
    v101 = type metadata accessor for Logger(0);
    sub_10001AAA8(v101, (uint64_t)qword_10084F108);
    v50 = v126;
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v51, v52))
    {

      goto LABEL_75;
    }
    goto LABEL_67;
  }
  v59 = -[NSObject resolutionTokenMap](v38, "resolutionTokenMap");
  if (v59)
  {
    v60 = v59;
    sub_1004046A0(23);
    v61 = v38;
    v62 = String._bridgeToObjectiveC()();
    objc_msgSend(v60, "updateForKey:", v62, swift_bridgeObjectRelease().n128_f64[0]);

    -[NSObject setReminderIDsMergeableOrdering:](v61, "setReminderIDsMergeableOrdering:", v58);
    v63 = objc_msgSend(v119, "firstObject");
    if (v63)
    {
      v64 = v63;
      _bridgeAnyObjectToAny(_:)(v130, v63);
      swift_unknownObjectRelease(v64);
    }
    else
    {
      memset(v130, 0, sizeof(v130));
    }
    sub_1000A5CA8((uint64_t)v130, (uint64_t)&v131, (uint64_t *)&unk_10083D5B0);
    if (v132[2])
    {
      v74 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
      v75 = swift_dynamicCast(&v129, &v131, (char *)&type metadata for Any + 8, v74, 6);
      if ((v75 & 1) != 0)
      {
        v76 = v129;
        v77 = objc_msgSend(v129, "list");
        if (v77)
        {
          v78 = v77;
          v79 = v60;
          sub_10052F648(v61, v77, (uint64_t)&off_1007E0818, a5);

LABEL_57:
          v20 = v126;

          v36 = &selRef_rd_isExcludedFromBackup;
          v38 = v61;
          goto LABEL_58;
        }
        v79 = v60;

      }
      else
      {
        v79 = v60;
      }
    }
    else
    {
      v79 = v60;
      v75 = sub_10000882C((uint64_t)&v131, (uint64_t *)&unk_10083D5B0);
    }
    v78 = Logger.logObject.getter(v75);
    v86 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v78, v86))
    {
      v87 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v87 = 0;
      _os_log_impl((void *)&_mh_execute_header, v78, v86, "Cannot get any REMCDList from the ordered set of reminders in the list.", v87, 2u);
      swift_slowDealloc(v87, -1, -1);
    }
    goto LABEL_57;
  }
  v127 = v58;
  swift_bridgeObjectRelease();
  v67 = v38;
  v68 = Logger.logObject.getter(v67);
  v69 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v68, v69))
  {
    v70 = swift_slowAlloc(22, -1);
    v123 = v68;
    v71 = (_QWORD *)swift_slowAlloc(8, -1);
    v125 = swift_slowAlloc(32, -1);
    v131 = (id)v125;
    *(_DWORD *)v70 = 138543618;
    v72 = -[NSObject objectID](v67, "objectID");
    *(_QWORD *)&v130[0] = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v130, (char *)v130 + 8);
    *v71 = v72;

    *(_WORD *)(v70 + 12) = 2082;
    *(_QWORD *)&v130[0] = sub_10001A820(0x7265646E696D6572, 0xE900000000000073, (uint64_t *)&v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v130, (char *)v130 + 8);
    _os_log_impl((void *)&_mh_execute_header, v123, v69, "REMListStorageCDIngestor: mutateOrdering(...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}", (uint8_t *)v70, 0x16u);
    v73 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v71, 1, v73);
    swift_slowDealloc(v71, -1, -1);
    swift_arrayDestroy(v125, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v125, -1, -1);
    swift_slowDealloc(v70, -1, -1);

  }
  else
  {

  }
  v80 = (void *)objc_opt_self(REMError);
  v81 = sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
  v82 = swift_getObjCClassFromMetadata(v81);
  v83 = String._bridgeToObjectiveC()();
  objc_msgSend(v80, "unexpectedNilPropertyWithClass:property:", v82, v83);

  swift_willThrow(v84);
}

uint64_t sub_100534BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v9;
  _BYTE v10[32];

  sub_10001A670(a1, (uint64_t)v10);
  v3 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  if ((swift_dynamicCast(&v9, v10, (char *)&type metadata for Any + 8, v3, 6) & 1) == 0)
    return 0;
  v4 = v9;
  sub_10001A670(a2, (uint64_t)v10);
  if ((swift_dynamicCast(&v9, v10, (char *)&type metadata for Any + 8, v3, 6) & 1) != 0)
  {
    v5 = v9;
    v6 = objc_msgSend(v4, "displayOrder");
    v7 = objc_msgSend(v5, "displayOrder");

    if (v6 == v7)
      return 0;
    if (v6 < v7)
      return -1;
    else
      return 1;
  }
  else
  {

    return 0;
  }
}

uint64_t type metadata accessor for REMListStorageCDIngestor()
{
  return objc_opt_self(_TtC7remindd24REMListStorageCDIngestor);
}

_UNKNOWN **sub_100534CC0()
{
  return &off_1007F98D8;
}

_UNKNOWN **sub_100534CCC()
{
  return &off_1007F98A8;
}

_UNKNOWN **sub_100534CD8()
{
  return &off_1007F9878;
}

_UNKNOWN **sub_100534CE4()
{
  return &off_1007F9848;
}

NSObject *sub_100534CF0(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  NSObject *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  _QWORD *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t ObjCClassFromMetadata;
  NSString v42;
  uint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  id v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  id v53;
  _QWORD *v54;
  uint64_t v55;
  id v56;
  id v57;
  id v58;
  id v59;
  NSString v60;
  Class isa;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  uint64_t v69;
  uint64_t inited;
  uint64_t v71;
  uint64_t v72;
  id v73;
  id v74;
  id v75;
  double v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  Class v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  void *v100;
  id v101;
  id v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  Class v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  id v124;
  objc_class *v125;
  Class v126;
  char *v127;
  char *v128;
  void (*v129)(char *, uint64_t, uint64_t, uint64_t);
  NSDate v130;
  char *v131;
  id v132;
  void *v133;
  id v134;
  id v135;
  void *v136;
  id v137;
  id v138;
  objc_class *v139;
  Class v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  id v144;
  void *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  void *v149;
  Class v150;
  id v151;
  id v152;
  uint64_t v153;
  id v154;
  Class v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  id v159;
  double v160;
  NSString v161;
  uint64_t v162;
  uint64_t v163;
  void *object;
  id v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  id v170;
  void *v171;
  uint64_t v172;
  id v173;
  char *v174;
  id v175;
  void *v176;
  char *v177;
  NSDate v178;
  id v179;
  os_log_type_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  id v185;
  uint64_t v186;
  uint64_t v187;
  objc_class *v188;
  Class v189;
  char *v190;
  uint64_t v191;
  char *v192;
  int v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v197;
  NSObject *v198;
  id v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  id v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  char *v213;
  char *v214;
  char *v215;
  char *v216;
  id v217;
  uint64_t v218;
  uint64_t v219;
  id v220;
  char v221[32];
  char v222[32];
  __int128 v223;
  __int128 v224;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = ((char *)&v197 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v7);
  v9 = (char *)&v197 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v213 = (char *)&v197 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v14 = __chkstk_darwin(v13);
  v211 = (char *)&v197 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v214 = (char *)&v197 - v16;
  v17 = type metadata accessor for Logger(0);
  v218 = *(_QWORD *)(v17 - 8);
  v219 = v17;
  v18 = __chkstk_darwin(v17);
  v216 = (char *)&v197 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v215 = (char *)&v197 - v20;
  *(_QWORD *)&v224 = 0;
  v21 = objc_msgSend(a1, "remObjectIDWithError:", &v224);
  v22 = v224;
  if (!v21)
  {
    v37 = (id)v224;
    _convertNSErrorToError(_:)(v22);

    swift_willThrow(v38);
    return v6;
  }
  v210 = v11;
  v217 = v21;
  v23 = (id)v224;
  v24 = objc_msgSend(a1, "account");
  if (v24)
  {
    v25 = v24;
    v26 = objc_msgSend(v24, "remObjectID");

    if (v26)
    {
      v206 = v3;
      v27 = objc_msgSend(a1, "name");
      if (v27)
      {
        v28 = v27;
        v209 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
        v30 = v29;

      }
      else
      {
        v209 = 0;
        v30 = 0;
      }
      v44 = objc_msgSend(a1, "reminderIDsMergeableOrdering");
      v212 = v1;
      v204 = v4;
      v203 = v9;
      v198 = v6;
      v200 = v10;
      if (v44)
      {
        v45 = v44;
        v46 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v44);
        v48 = v47;

      }
      else
      {
        if (qword_100837850 != -1)
          swift_once(&qword_100837850, sub_10052E9BC);
        sub_10001AAA8(v219, (uint64_t)qword_10084F120);
        v49 = v217;
        v50 = Logger.logObject.getter(v49);
        v51 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v50, v51))
        {
          v52 = (uint8_t *)swift_slowAlloc(12, -1);
          v208 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v52 = 138412290;
          v207 = v52 + 4;
          *(_QWORD *)&v224 = v49;
          v53 = v49;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v224, (char *)&v224 + 8);
          v54 = v208;
          *v208 = v217;

          v55 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v54, 1, v55);
          swift_slowDealloc(v54, -1, -1);
          swift_slowDealloc(v52, -1, -1);

        }
        else
        {

        }
        v46 = 0;
        v48 = 0xC000000000000000;
      }
      if (!v30)
        v30 = 0xE000000000000000;
      v56 = objc_msgSend(a1, "isGroup");
      v57 = objc_allocWithZone((Class)REMListStorage);
      v58 = v217;
      sub_1000A70E4(v46, v48);
      v59 = v26;
      v60 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v30);
      isa = Data._bridgeToObjectiveC()().super.isa;
      v202 = v46;
      v201 = v48;
      sub_1000A71C8(v46, v48);
      v6 = objc_msgSend(v57, "initWithObjectID:accountID:name:isGroup:reminderIDsMergeableOrderingData:", v58, v59, v60, v56, isa);

      -[NSObject setReminderIDsMergeableOrdering:](v6, "setReminderIDsMergeableOrdering:", 0);
      v62 = objc_msgSend(a1, "externalIdentifier");
      -[NSObject setExternalIdentifier:](v6, "setExternalIdentifier:", v62);

      v63 = objc_msgSend(a1, "externalModificationTag");
      -[NSObject setExternalModificationTag:](v6, "setExternalModificationTag:", v63);

      v64 = objc_msgSend(a1, "daSyncToken");
      -[NSObject setDaSyncToken:](v6, "setDaSyncToken:", v64);

      v65 = objc_msgSend(a1, "daPushKey");
      -[NSObject setDaPushKey:](v6, "setDaPushKey:", v65);

      v66 = objc_msgSend(a1, "daExternalIdentificationTag");
      -[NSObject setDaExternalIdentificationTag:](v6, "setDaExternalIdentificationTag:", v66);

      -[NSObject setDaDisplayOrder:](v6, "setDaDisplayOrder:", objc_msgSend(a1, "daDisplayOrder"));
      -[NSObject setDaIsEventOnlyContainer:](v6, "setDaIsEventOnlyContainer:", objc_msgSend(a1, "daIsEventOnlyContainer"));
      -[NSObject setDaIsReadOnly:](v6, "setDaIsReadOnly:", objc_msgSend(a1, "daIsReadOnly"));
      -[NSObject setDaIsImmutable:](v6, "setDaIsImmutable:", objc_msgSend(a1, "daIsImmutable"));
      -[NSObject setDaIsNotificationsCollection:](v6, "setDaIsNotificationsCollection:", objc_msgSend(a1, "daIsNotificationsCollection"));
      -[NSObject setMinimumSupportedVersion:](v6, "setMinimumSupportedVersion:", objc_msgSend(a1, "minimumSupportedVersion"));
      -[NSObject setEffectiveMinimumSupportedVersion:](v6, "setEffectiveMinimumSupportedVersion:", objc_msgSend(a1, "effectiveMinimumSupportedVersion"));
      v67 = objc_msgSend(a1, "sharedOwnerName");
      -[NSObject setSharedOwnerName:](v6, "setSharedOwnerName:", v67);

      v68 = objc_msgSend(a1, "sharedOwnerAddress");
      -[NSObject setSharedOwnerAddress:](v6, "setSharedOwnerAddress:", v68);

      v205 = (int)objc_msgSend(a1, "sharingStatus");
      -[NSObject setSharingStatus:](v6, "setSharingStatus:");
      v69 = type metadata accessor for REMShareeCDIngestor();
      inited = swift_initStackObject(v69, v222);
      *(_QWORD *)(inited + 16) = v59;
      *(_QWORD *)(inited + 24) = v58;
      v208 = (_QWORD *)inited;
      v71 = type metadata accessor for REMCalDAVNotificationCDIngestor();
      v72 = swift_initStackObject(v71, v221);
      *(_QWORD *)(v72 + 16) = v59;
      *(_QWORD *)(v72 + 24) = v58;
      v209 = v72;
      v73 = v58;
      v74 = v59;
      v207 = v73;
      v199 = v74;
      v75 = objc_msgSend(a1, "sharees");
      if (!v75)
      {
        v84 = v200;
        goto LABEL_39;
      }
      v77 = v75;
      v78 = sub_1000151B0(0, (unint64_t *)&qword_100839928, off_1007D6718);
      v79 = sub_1000EC524((unint64_t *)&unk_100843650, (unint64_t *)&qword_100839928, off_1007D6718);
      v80 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v77, v78, v79);

      *(_QWORD *)&v224 = v80;
      v81 = sub_10001A630(&qword_10084F388);
      v82 = sub_1000A5F84(&qword_10084F390, &qword_10084F388, (uint64_t)&protocol conformance descriptor for Set<A>);
      v83 = Sequence.elements<A>(ofType:)(v78, v81, v78, v82);
      swift_bridgeObjectRelease(v80);
      v84 = v200;
      if (qword_100837850 != -1)
        swift_once(&qword_100837850, sub_10052E9BC);
      v85 = v219;
      v86 = sub_10001AAA8(v219, (uint64_t)qword_10084F120);
      v87 = v215;
      v88 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v218 + 16))(v215, v86, v85);
      *(_QWORD *)&v224 = v83;
      __chkstk_darwin(v88);
      *(&v197 - 2) = (uint64_t)v87;
      v89 = sub_10001A630(&qword_100851C90);
      v90 = sub_1000151B0(0, &qword_10083A228, REMSharee_ptr);
      v91 = sub_1000A5F84(&qword_10084F3C8, &qword_100851C90, (uint64_t)&protocol conformance descriptor for [A]);
      v92 = v212;
      v93 = Sequence.map<A>(skippingError:_:)(sub_10053C4E4, &v197 - 4, sub_10053C49C, v208, v89, v90, v91);
      if (v92)
      {
        swift_errorRelease(v92);
        v212 = 0;
        v94 = (uint64_t)_swiftEmptyArrayStorage;
      }
      else
      {
        v94 = v93;
        v212 = 0;
      }
      (*(void (**)(char *, uint64_t))(v218 + 8))(v215, v219);
      swift_bridgeObjectRelease(v83);
      if ((unint64_t)v94 >> 62)
      {
        if (v94 < 0)
          v96 = v94;
        else
          v96 = v94 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v94);
        v97 = _CocoaArrayWrapper.endIndex.getter(v96);
        swift_bridgeObjectRelease(v94);
        if (v97)
          goto LABEL_33;
      }
      else if (*(_QWORD *)((v94 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_33:
        v95 = Array._bridgeToObjectiveC()().super.isa;
        -[NSObject setSharees:](v6, "setSharees:", v95, swift_bridgeObjectRelease(v94).n128_f64[0]);

        goto LABEL_39;
      }
      *(_QWORD *)&v76 = swift_bridgeObjectRelease(v94).n128_u64[0];
LABEL_39:
      v98 = v210;
      v99 = objc_msgSend(a1, "sharedOwner", v76);
      if (v99)
      {
        v100 = v99;
        v101 = objc_msgSend(v99, "remObjectID");

      }
      else
      {
        v101 = 0;
      }
      -[NSObject setSharedOwnerID:](v6, "setSharedOwnerID:", v101);

      v102 = objc_msgSend(a1, "calDAVNotifications");
      if (!v102)
      {
LABEL_57:
        v123 = objc_msgSend(a1, "color");
        -[NSObject setColor:](v6, "setColor:", v123);

        v124 = objc_msgSend(a1, "badgeEmblem");
        -[NSObject setBadgeEmblem:](v6, "setBadgeEmblem:", v124);

        v125 = (objc_class *)objc_msgSend(a1, "lastUserAccessDate");
        v126 = v125;
        if (v125)
        {
          v127 = v213;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v125);

          v128 = v214;
          (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v214, v127, v84);
          v129 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v98 + 56);
          v129(v128, 0, 1, v84);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v128, 1, v84) == 1)
          {
            v126 = 0;
          }
          else
          {
            v130.super.isa = Date._bridgeToObjectiveC()().super.isa;
            v131 = v128;
            v126 = v130.super.isa;
            (*(void (**)(char *, uint64_t))(v98 + 8))(v131, v84);
          }
        }
        else
        {
          v129 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v98 + 56);
          v129(v214, 1, 1, v84);
        }
        -[NSObject setLastUserAccessDate:](v6, "setLastUserAccessDate:", v126);

        -[NSObject setShowingLargeAttachments:](v6, "setShowingLargeAttachments:", objc_msgSend(a1, "showingLargeAttachments"));
        v132 = objc_msgSend(a1, "parentAccount");
        if (v132)
        {
          v133 = v132;
          v134 = objc_msgSend(v132, "remObjectID");

        }
        else
        {
          v134 = 0;
        }
        -[NSObject setParentAccountID:](v6, "setParentAccountID:", v134);

        v135 = objc_msgSend(a1, "parentList");
        if (v135)
        {
          v136 = v135;
          v137 = objc_msgSend(v135, "remObjectID");

        }
        else
        {
          v137 = 0;
        }
        -[NSObject setParentListID:](v6, "setParentListID:", v137);

        -[NSObject setShouldCategorizeGroceryItems:](v6, "setShouldCategorizeGroceryItems:", objc_msgSend(a1, "shouldCategorizeGroceryItems"));
        -[NSObject setShouldSuggestConversionToGroceryList:](v6, "setShouldSuggestConversionToGroceryList:", objc_msgSend(a1, "shouldSuggestConversionToGroceryList"));
        v138 = objc_msgSend(a1, "groceryLocaleID");
        -[NSObject setGroceryLocaleID:](v6, "setGroceryLocaleID:", v138);

        -[NSObject setResolutionTokenMap:](v6, "setResolutionTokenMap:", 0);
        v139 = (objc_class *)objc_msgSend(a1, "resolutionTokenMapData");
        v140 = v139;
        if (v139)
        {
          v141 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v139);
          v143 = v142;

          v140 = Data._bridgeToObjectiveC()().super.isa;
          sub_1000A71C8(v141, v143);
        }
        -[NSObject setResolutionTokenMapData:](v6, "setResolutionTokenMapData:", v140);

        v144 = objc_msgSend(a1, "daBulkRequests");
        if (v144)
        {
          v145 = v144;
          v146 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v144);
          v148 = v147;

          v149 = (void *)objc_opt_self(NSPropertyListSerialization);
          v150 = Data._bridgeToObjectiveC()().super.isa;
          v220 = 0;
          v151 = objc_msgSend(v149, "propertyListWithData:options:format:error:", v150, 0, 0, &v220);

          v152 = v220;
          if (v151)
          {
            _bridgeAnyObjectToAny(_:)(&v223, v151);
            swift_unknownObjectRelease(v151);
            sub_10001A6CC(&v223, &v224);
            sub_10001A670((uint64_t)&v224, (uint64_t)&v223);
            v153 = sub_10001A630(&qword_10084F3B0);
            if ((swift_dynamicCast(&v220, &v223, (char *)&type metadata for Any + 8, v153, 6) & 1) != 0)
            {
              v154 = v220;
              v155 = Dictionary._bridgeToObjectiveC()().super.isa;
              -[NSObject setDaBulkRequests:](v6, "setDaBulkRequests:", v155, swift_bridgeObjectRelease(v154).n128_f64[0]);
              sub_1000A71C8(v146, v148);

            }
            else
            {
              sub_1000A71C8(v146, v148);
            }
            _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v224);
          }
          else
          {
            v156 = v152;
            v157 = _convertNSErrorToError(_:)(v152);

            swift_willThrow(v158);
            swift_errorRelease(v157);
            sub_1000A71C8(v146, v148);
            v212 = 0;
          }
        }
        -[NSObject setIsPlaceholder:](v6, "setIsPlaceholder:", objc_msgSend(a1, "isPlaceholder"));
        v159 = objc_msgSend(a1, "currentUserShareParticipantID");
        v161 = v159;
        if (v159)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(v159);
          v163 = v162;

          object = String.uppercased()()._object;
          swift_bridgeObjectRelease(v163);
          v161 = String._bridgeToObjectiveC()();
          *(_QWORD *)&v160 = swift_bridgeObjectRelease(object).n128_u64[0];
        }
        -[NSObject setCurrentUserShareParticipantID:](v6, "setCurrentUserShareParticipantID:", v161, v160);

        v165 = objc_msgSend(a1, "sortingStyle");
        if (v165)
        {
          v166 = v165;
          v167 = static String._unconditionallyBridgeFromObjectiveC(_:)(v165);
          v169 = v168;

          v170 = (id)REMSortingStyle.init(stringValue:)(v167, v169);
          if (!v170)
            v170 = REMSortingStyleDefault;
          v171 = v170;
          v172 = v206;
          -[NSObject setSortingStyle:](v6, "setSortingStyle:", v170);

        }
        else
        {
          -[NSObject setSortingStyle:](v6, "setSortingStyle:", REMSortingStyleDefault);
          v172 = v206;
        }
        v173 = objc_msgSend(a1, "isPinnedByCurrentUser");
        if (!(_DWORD)v173)
          goto LABEL_100;
        if (v205 >= 2)
        {
          if (v205 - 3 < 2)
          {
LABEL_100:
            v188 = (objc_class *)objc_msgSend(a1, "mostRecentTargetTemplateIdentifierByCurrentUser");
            v189 = v188;
            if (v188)
            {
              v190 = (char *)v198;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)(v188);

              v191 = v204;
              v192 = v203;
              (*(void (**)(char *, char *, uint64_t))(v204 + 32))(v203, v190, v172);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v191 + 56))(v192, 0, 1, v172);
              v193 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v191 + 48))(v192, 1, v172);
              v194 = v201;
              if (v193 == 1)
              {
                v189 = 0;
              }
              else
              {
                v189 = UUID._bridgeToObjectiveC()().super.isa;
                (*(void (**)(char *, uint64_t))(v191 + 8))(v192, v172);
              }
            }
            else
            {
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v204 + 56))(v203, 1, 1, v172);
              v194 = v201;
            }
            -[NSObject setMostRecentTargetTemplateIdentifier:](v6, "setMostRecentTargetTemplateIdentifier:", v189);

            -[NSObject setShouldUpdateSectionsOrdering:](v6, "setShouldUpdateSectionsOrdering:", 0);
            -[NSObject setUnsavedSectionIDsOrdering:](v6, "setUnsavedSectionIDsOrdering:", 0);
            -[NSObject setUnsavedMembershipsOfRemindersInSections:](v6, "setUnsavedMembershipsOfRemindersInSections:", 0);
            -[NSObject setUnsavedReminderIDsToCategorizeAsGroceryItems:](v6, "setUnsavedReminderIDsToCategorizeAsGroceryItems:", 0);
            sub_1000A71C8(v202, v194);
            swift_release(v208);

            v195 = v209;
            swift_setDeallocating(v209);

            return v6;
          }
          if (v205 != 2)
          {
            if (qword_100837848 != -1)
              swift_once(&qword_100837848, sub_10052E998);
            sub_10001AAA8(v219, (uint64_t)qword_10084F108);
            v179 = v207;
            v178.super.isa = (Class)Logger.logObject.getter(v179);
            v180 = static os_log_type_t.fault.getter();
            v181 = v180;
            if (os_log_type_enabled((os_log_t)v178.super.isa, v180))
            {
              v182 = swift_slowAlloc(22, -1);
              v183 = swift_slowAlloc(8, -1);
              LODWORD(v219) = v181;
              v184 = (_QWORD *)v183;
              *(_DWORD *)v182 = 138543618;
              *(_QWORD *)&v224 = v179;
              v185 = v179;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v224, (char *)&v224 + 8);
              *v184 = v217;

              *(_WORD *)(v182 + 12) = 2050;
              *(_QWORD *)&v224 = v205;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v224, (char *)&v224 + 8);
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)v178.super.isa, (os_log_type_t)v219, "REMListStorageCDIngestor: storage(from:) Unhandled sharingStatus {objectID: %{public}@, sharingStatus.rawValue: %{public}ld}", (uint8_t *)v182, 0x16u);
              v186 = sub_10001A630((uint64_t *)&unk_100839E70);
              swift_arrayDestroy(v184, 1, v186);
              swift_slowDealloc(v184, -1, -1);
              v187 = v182;
              v172 = v206;
              swift_slowDealloc(v187, -1, -1);
            }
            else
            {

              v178.super.isa = (Class)v179;
            }
            goto LABEL_99;
          }
          v174 = v213;
          static Date.distantPast.getter(v173);
          goto LABEL_91;
        }
        v175 = objc_msgSend(a1, "pinnedDate");
        if (v175)
        {
          v176 = v175;
          v177 = v213;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v175);

          v174 = v211;
          (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v211, v177, v84);
          v129(v174, 0, 1, v84);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v174, 1, v84) != 1)
          {
LABEL_91:
            v178.super.isa = Date._bridgeToObjectiveC()().super.isa;
            (*(void (**)(char *, uint64_t))(v98 + 8))(v174, v84);
LABEL_98:
            -[NSObject setPinnedDate:](v6, "setPinnedDate:", v178.super.isa);
LABEL_99:

            goto LABEL_100;
          }
        }
        else
        {
          v129(v211, 1, 1, v84);
        }
        v178.super.isa = 0;
        goto LABEL_98;
      }
      v103 = v102;
      v104 = sub_1000151B0(0, (unint64_t *)&qword_100851CB0, off_1007D66B0);
      v105 = sub_1000EC524(&qword_10084F398, (unint64_t *)&qword_100851CB0, off_1007D66B0);
      v106 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v103, v104, v105);

      *(_QWORD *)&v224 = v106;
      v107 = sub_10001A630(&qword_10084F3A0);
      v108 = sub_1000A5F84(&qword_10084F3A8, &qword_10084F3A0, (uint64_t)&protocol conformance descriptor for Set<A>);
      v109 = Sequence.elements<A>(ofType:)(v104, v107, v104, v108);
      swift_bridgeObjectRelease(v106);
      if (qword_100837850 != -1)
        swift_once(&qword_100837850, sub_10052E9BC);
      v110 = v219;
      v111 = sub_10001AAA8(v219, (uint64_t)qword_10084F120);
      v112 = v216;
      v113 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v218 + 16))(v216, v111, v110);
      *(_QWORD *)&v224 = v109;
      __chkstk_darwin(v113);
      *(&v197 - 2) = (uint64_t)v112;
      v114 = sub_10001A630(&qword_10084F3B8);
      v115 = sub_1000151B0(0, &qword_100847110, REMCalDAVNotification_ptr);
      v116 = sub_1000A5F84(&qword_10084F3C0, &qword_10084F3B8, (uint64_t)&protocol conformance descriptor for [A]);
      v117 = v212;
      v118 = Sequence.map<A>(skippingError:_:)(sub_10053C490, &v197 - 4, sub_10053C474, v209, v114, v115, v116);
      if (v117)
      {
        swift_errorRelease(v117);
        v212 = 0;
        v119 = (uint64_t)_swiftEmptyArrayStorage;
      }
      else
      {
        v119 = v118;
        v212 = 0;
      }
      (*(void (**)(char *, uint64_t))(v218 + 8))(v216, v219);
      swift_bridgeObjectRelease(v109);
      if ((unint64_t)v119 >> 62)
      {
        if (v119 < 0)
          v121 = v119;
        else
          v121 = v119 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v119);
        v122 = _CocoaArrayWrapper.endIndex.getter(v121);
        swift_bridgeObjectRelease(v119);
        if (v122)
          goto LABEL_50;
      }
      else if (*(_QWORD *)((v119 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_50:
        v120 = Array._bridgeToObjectiveC()().super.isa;
        -[NSObject setCalDAVNotifications:](v6, "setCalDAVNotifications:", v120, swift_bridgeObjectRelease(v119).n128_f64[0]);

LABEL_56:
        v98 = v210;
        goto LABEL_57;
      }
      swift_bridgeObjectRelease(v119);
      goto LABEL_56;
    }
  }
  if (qword_100837850 != -1)
    swift_once(&qword_100837850, sub_10052E9BC);
  sub_10001AAA8(v219, (uint64_t)qword_10084F120);
  v31 = v217;
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(12, -1);
    v35 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v34 = 138412290;
    *(_QWORD *)&v224 = v31;
    v6 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v224, (char *)&v224 + 8);
    *v35 = v217;

    _os_log_impl((void *)&_mh_execute_header, v32, v33, "REMListStorageCDIngestor: cdList.account is nil {cdList.remObjectID: %@}", v34, 0xCu);
    v36 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v35, 1, v36);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);
  }
  else
  {

    v32 = v31;
  }

  v39 = (void *)objc_opt_self(REMError);
  v40 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v40);
  v42 = String._bridgeToObjectiveC()();
  objc_msgSend(v39, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v42);

  swift_willThrow(v43);
  return v6;
}

unint64_t sub_100536738(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DB5F0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 8)
    return 8;
  else
    return v3;
}

unint64_t sub_100536780(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DB6D0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_1005367C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1007DB738, a1, a2, &unk_100837A20);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x26)
    return 38;
  else
    return v3;
}

uint64_t sub_100536818(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, void *a6)
{
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  id v30;
  id v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  _QWORD *v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  _QWORD *v59;
  unint64_t v60;
  void *v61;
  _QWORD v62[3];
  _BYTE v63[8];
  uint64_t v64;
  id v65;
  uint64_t v66;

  if (a1)
  {
    v10 = qword_100837848;
    v11 = a1;
    if (a3 >> 60 == 15)
    {
      if (v10 != -1)
        swift_once(&qword_100837848, sub_10052E998);
      v12 = type metadata accessor for Logger(0);
      sub_10001AAA8(v12, (uint64_t)qword_10084F108);
      v13 = a6;
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.error.getter(v14);
      v16 = v15;
      if (os_log_type_enabled(v14, v15))
      {
        v17 = (uint8_t *)swift_slowAlloc(12, -1);
        v59 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v17 = 138412290;
        v65 = v13;
        v18 = v13;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
        *v59 = v13;

        _os_log_impl((void *)&_mh_execute_header, v14, (os_log_type_t)v16, "mergeOrderedSet(): REMCDList.reminderIDsMergeableOrdering data is nil. Serializing from inutput orderedSet directly. {objectID: %@}", v17, 0xCu);
        v19 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v59, 1, v19);
        swift_slowDealloc(v59, -1, -1);
        swift_slowDealloc(v17, -1, -1);

      }
      else
      {

      }
      v33 = (void *)objc_opt_self(REMListStorage);
      v65 = 0;
      v34 = objc_msgSend(v33, "reminderIDUUIDStringsJSONDataFromReminderIDsMergeableOrdering:error:", v11, &v65);
      v35 = v65;
      if (v34)
      {
        v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v34);

      }
      else
      {
        v39 = v35;
        _convertNSErrorToError(_:)(v35);

        swift_willThrow(v40);
      }

    }
    else
    {
      v57 = a4;
      v60 = a5;
      if (v10 != -1)
        swift_once(&qword_100837848, sub_10052E998);
      v20 = type metadata accessor for Logger(0);
      sub_10001AAA8(v20, (uint64_t)qword_10084F108);
      v21 = v11;
      v22 = a6;
      v23 = v21;
      v24 = v22;
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.info.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        v27 = swift_slowAlloc(22, -1);
        v28 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v27 = 138412546;
        v65 = v24;
        v29 = v23;
        v30 = v24;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
        *v28 = v24;

        v23 = v29;
        *(_WORD *)(v27 + 12) = 2048;
        v31 = objc_msgSend(v29, "count");

        v65 = v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);

        _os_log_impl((void *)&_mh_execute_header, v25, v26, "mergeOrderedSet(): Merge not supported for REMCDList.reminderIDsMergeableOrdering for now, directly serializing from input orderedSet. {objectID: %@, count: %ld}", (uint8_t *)v27, 0x16u);
        v32 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v28, 1, v32);
        swift_slowDealloc(v28, -1, -1);
        swift_slowDealloc(v27, -1, -1);

      }
      else
      {

      }
      v36 = (void *)objc_opt_self(REMListStorage);
      v65 = 0;
      v37 = objc_msgSend(v36, "reminderIDUUIDStringsJSONDataFromReminderIDsMergeableOrdering:error:", v23, &v65);
      v38 = v65;
      if (v37)
      {
        v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v37);

      }
      else
      {
        v41 = v38;
        v61 = v23;
        v42 = _convertNSErrorToError(_:)(v38);

        swift_willThrow(v43);
        v44 = v24;
        swift_bridgeObjectRetain(v60);
        swift_errorRetain(v42);
        v45 = v44;
        swift_bridgeObjectRetain(v60);
        v46 = swift_errorRetain(v42);
        v47 = Logger.logObject.getter(v46);
        v48 = static os_log_type_t.error.getter(v47);
        if (os_log_type_enabled(v47, v48))
        {
          v49 = swift_slowAlloc(32, -1);
          v56 = v42;
          v50 = (_QWORD *)swift_slowAlloc(8, -1);
          v58 = (void *)swift_slowAlloc(64, -1);
          v64 = (uint64_t)v45;
          v65 = v58;
          *(_DWORD *)v49 = 138412802;
          v51 = v45;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
          *v50 = v45;

          *(_WORD *)(v49 + 12) = 2080;
          swift_bridgeObjectRetain(v60);
          v64 = sub_10001A820(v57, v60, (uint64_t *)&v65);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
          swift_bridgeObjectRelease_n(v60, 3);
          *(_WORD *)(v49 + 22) = 2080;
          swift_getErrorValue(v56, v63, v62);
          v52 = Error.localizedDescription.getter(v62[1], v62[2]);
          v64 = sub_10001A820(v52, v53, (uint64_t *)&v65);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
          swift_bridgeObjectRelease();
          swift_errorRelease(v56);
          swift_errorRelease(v56);
          _os_log_impl((void *)&_mh_execute_header, v47, v48, "mergeOrderedSet(): Failed to merge ordered set for list {list.objectID: %@, key: %s}: %s", (uint8_t *)v49, 0x20u);
          v54 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v50, 1, v54);
          swift_slowDealloc(v50, -1, -1);
          swift_arrayDestroy(v58, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v58, -1, -1);
          swift_slowDealloc(v49, -1, -1);

          swift_errorRelease(v56);
        }
        else
        {

          swift_errorRelease(v42);
          swift_bridgeObjectRelease_n(v60, 2);

          swift_errorRelease(v42);
          swift_errorRelease(v42);

        }
        return 0;
      }
    }
  }
  else
  {
    v16 = a2;
    sub_1000A70D0(a2, a3);
  }
  return v16;
}

double sub_100536F54(void *a1, void *a2)
{
  char **v4;
  id v5;
  double v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v39;
  _QWORD *v40;
  void *v41;
  _QWORD *v42;
  id v43;
  char v44;
  Swift::Int v45;
  _QWORD *v46;
  Swift::Int v47;
  uint64_t v48;
  unint64_t v49;
  id v50;
  char v51;
  uint64_t v52;
  id v53;
  char v54;
  _QWORD *v55;
  uint64_t v56;
  id v57;
  NSObject *v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  _QWORD *v62;
  id v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  double result;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;

  v4 = &selRef_saveServerShare_accountID_completionHandler_;
  v5 = objc_msgSend(a1, "sharees");
  v72 = a1;
  if (!v5)
  {
    v23 = (uint64_t)&_swiftEmptySetSingleton;
    goto LABEL_18;
  }
  v7 = v5;
  v8 = sub_1000151B0(0, &qword_10083A228, REMSharee_ptr);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

  v10 = objc_msgSend(a1, "accountID");
  v11 = objc_msgSend(a1, "objectID");
  v12 = type metadata accessor for REMShareeCDIngestor();
  v13 = swift_allocObject(v12, 32, 7);
  *(_QWORD *)(v13 + 16) = v10;
  *(_QWORD *)(v13 + 24) = v11;
  sub_1005D8C58(v9, v13);
  swift_release(v13);
  if ((unint64_t)v9 >> 62)
  {
    if (v9 < 0)
      v24 = v9;
    else
      v24 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v14 = _CocoaArrayWrapper.endIndex.getter(v24);
    swift_bridgeObjectRelease();
    if (v14)
      goto LABEL_4;
  }
  else
  {
    v14 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v14)
    {
LABEL_4:
      v78 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v14);
      if (v14 < 0)
        __break(1u);
      v15 = 0;
      do
      {
        if ((v9 & 0xC000000000000001) != 0)
          v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v9);
        else
          v16 = *(id *)(v9 + 8 * v15 + 32);
        v17 = v16;
        ++v15;
        v18 = objc_msgSend(v16, "objectID");

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v19);
        v20 = v78[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v20);
        v21 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v18);
        specialized ContiguousArray._endMutation()(v21);
      }
      while (v14 != v15);
      v22 = v78;
      swift_bridgeObjectRelease();
      v4 = &selRef_saveServerShare_accountID_completionHandler_;
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease();
  v22 = _swiftEmptyArrayStorage;
LABEL_17:
  sub_10011F104((uint64_t)v22);
  v23 = v25;
  *(_QWORD *)&v6 = swift_bridgeObjectRelease().n128_u64[0];
LABEL_18:
  v26 = objc_msgSend(a2, v4[429], v6);
  if (v26)
  {
    v27 = v26;
    v28 = sub_1000151B0(0, (unint64_t *)&qword_100839928, off_1007D6718);
    v29 = sub_1000EC524((unint64_t *)&unk_100843650, (unint64_t *)&qword_100839928, off_1007D6718);
    v30 = (_QWORD *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v27, v28, v29);

    v78 = v30;
    v31 = sub_10001A630(&qword_10084F388);
    v32 = sub_1000A5F84(&qword_10084F390, &qword_10084F388, (uint64_t)&protocol conformance descriptor for Set<A>);
    v33 = Sequence.elements<A>(ofType:)(v28, v31, v28, v32);
    swift_bridgeObjectRelease();
    if ((unint64_t)v33 >> 62)
      goto LABEL_52;
    v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v34)
    {
      v35 = 0;
      v69 = v33 + 32;
      v73 = v33;
      v74 = v23 & 0xC000000000000001;
      v36 = v23 & 0xFFFFFFFFFFFFFF8;
      if (v23 < 0)
        v36 = v23;
      v71 = v36;
      v76 = v23 + 56;
      v77 = v33 & 0xC000000000000001;
      v75 = v34;
      v70 = v23;
      while (1)
      {
        v37 = v77 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v35, v73) : *(id *)(v69 + 8 * v35);
        v33 = (uint64_t)v37;
        if (__OFADD__(v35++, 1))
          break;
        v78 = 0;
        v39 = objc_msgSend(v37, "remObjectIDWithError:", &v78);
        v40 = v78;
        if (!v39)
        {
          v65 = v78;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _convertNSErrorToError(_:)(v40);

          swift_willThrow(v66);
          return result;
        }
        v41 = v39;
        if (v74)
        {
          v42 = v78;
          v43 = v41;
          v44 = __CocoaSet.contains(_:)(v43, v71);

          if ((v44 & 1) == 0)
            goto LABEL_41;
LABEL_24:

          if (v35 == v75)
            goto LABEL_56;
        }
        else
        {
          if (*(_QWORD *)(v23 + 16))
          {
            v45 = *(_QWORD *)(v23 + 40);
            v46 = v78;
            v47 = NSObject._rawHashValue(seed:)(v45);
            v48 = -1 << *(_BYTE *)(v23 + 32);
            v49 = v47 & ~v48;
            if (((*(_QWORD *)(v76 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) != 0)
            {
              sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
              v50 = *(id *)(*(_QWORD *)(v23 + 48) + 8 * v49);
              v51 = static NSObject.== infix(_:_:)(v50);

              if ((v51 & 1) == 0)
              {
                v52 = ~v48;
                while (1)
                {
                  v49 = (v49 + 1) & v52;
                  if (((*(_QWORD *)(v76 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) == 0)
                    goto LABEL_41;
                  v53 = *(id *)(*(_QWORD *)(v23 + 48) + 8 * v49);
                  v54 = static NSObject.== infix(_:_:)(v53);

                  if ((v54 & 1) != 0)
                    goto LABEL_24;
                }
              }
              goto LABEL_24;
            }
          }
          else
          {
            v55 = v78;
          }
LABEL_41:
          if (qword_100837848 != -1)
            swift_once(&qword_100837848, sub_10052E998);
          v56 = type metadata accessor for Logger(0);
          sub_10001AAA8(v56, (uint64_t)qword_10084F108);
          v57 = v41;
          v58 = v72;
          v59 = Logger.logObject.getter(v58);
          v60 = static os_log_type_t.info.getter(v59);
          if (os_log_type_enabled(v59, v60))
          {
            v61 = swift_slowAlloc(22, -1);
            v62 = (_QWORD *)swift_slowAlloc(16, -1);
            *(_DWORD *)v61 = 138412546;
            v63 = -[NSObject objectID](v58, "objectID");
            *(_QWORD *)(v61 + 4) = v63;
            *v62 = v63;

            *(_WORD *)(v61 + 12) = 2112;
            *(_QWORD *)(v61 + 14) = v57;
            v62[1] = v41;
            _os_log_impl((void *)&_mh_execute_header, v59, v60, "Removing sharee from list {list.objectID: %@, shareeobjectID: %@}", (uint8_t *)v61, 0x16u);
            v64 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v62, 2, v64);
            swift_slowDealloc(v62, -1, -1);
            swift_slowDealloc(v61, -1, -1);
          }
          else
          {

            v59 = v58;
          }

          objc_msgSend((id)v33, "setList:", 0);
          v23 = v70;
          if (v35 == v75)
            goto LABEL_56;
        }
      }
      __break(1u);
LABEL_52:
      if (v33 < 0)
        v68 = v33;
      else
        v68 = v33 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v33);
      v34 = _CocoaArrayWrapper.endIndex.getter(v68);
      swift_bridgeObjectRelease();
    }
LABEL_56:
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

double sub_100537648(void *a1, void *a2)
{
  char **v4;
  id v5;
  double v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v39;
  _QWORD *v40;
  void *v41;
  _QWORD *v42;
  id v43;
  char v44;
  Swift::Int v45;
  _QWORD *v46;
  Swift::Int v47;
  uint64_t v48;
  unint64_t v49;
  id v50;
  char v51;
  uint64_t v52;
  id v53;
  char v54;
  _QWORD *v55;
  uint64_t v56;
  id v57;
  NSObject *v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  _QWORD *v62;
  id v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  double result;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;

  v4 = &selRef_rd_isExcludedFromBackup;
  v5 = objc_msgSend(a1, "calDAVNotifications");
  v72 = a1;
  if (!v5)
  {
    v23 = (uint64_t)&_swiftEmptySetSingleton;
    goto LABEL_18;
  }
  v7 = v5;
  v8 = sub_1000151B0(0, &qword_100847110, REMCalDAVNotification_ptr);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

  v10 = objc_msgSend(a1, "accountID");
  v11 = objc_msgSend(a1, "objectID");
  v12 = type metadata accessor for REMCalDAVNotificationCDIngestor();
  v13 = swift_allocObject(v12, 32, 7);
  *(_QWORD *)(v13 + 16) = v10;
  *(_QWORD *)(v13 + 24) = v11;
  sub_1005D9460(v9, v13);
  swift_release(v13);
  if ((unint64_t)v9 >> 62)
  {
    if (v9 < 0)
      v24 = v9;
    else
      v24 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v14 = _CocoaArrayWrapper.endIndex.getter(v24);
    swift_bridgeObjectRelease();
    if (v14)
      goto LABEL_4;
  }
  else
  {
    v14 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v14)
    {
LABEL_4:
      v78 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v14);
      if (v14 < 0)
        __break(1u);
      v15 = 0;
      do
      {
        if ((v9 & 0xC000000000000001) != 0)
          v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v9);
        else
          v16 = *(id *)(v9 + 8 * v15 + 32);
        v17 = v16;
        ++v15;
        v18 = objc_msgSend(v16, "objectID");

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v19);
        v20 = v78[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v20);
        v21 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v18);
        specialized ContiguousArray._endMutation()(v21);
      }
      while (v14 != v15);
      v22 = v78;
      swift_bridgeObjectRelease();
      v4 = &selRef_rd_isExcludedFromBackup;
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease();
  v22 = _swiftEmptyArrayStorage;
LABEL_17:
  sub_10011F104((uint64_t)v22);
  v23 = v25;
  *(_QWORD *)&v6 = swift_bridgeObjectRelease().n128_u64[0];
LABEL_18:
  v26 = objc_msgSend(a2, v4[457], v6);
  if (v26)
  {
    v27 = v26;
    v28 = sub_1000151B0(0, (unint64_t *)&qword_100851CB0, off_1007D66B0);
    v29 = sub_1000EC524(&qword_10084F398, (unint64_t *)&qword_100851CB0, off_1007D66B0);
    v30 = (_QWORD *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v27, v28, v29);

    v78 = v30;
    v31 = sub_10001A630(&qword_10084F3A0);
    v32 = sub_1000A5F84(&qword_10084F3A8, &qword_10084F3A0, (uint64_t)&protocol conformance descriptor for Set<A>);
    v33 = Sequence.elements<A>(ofType:)(v28, v31, v28, v32);
    swift_bridgeObjectRelease();
    if ((unint64_t)v33 >> 62)
      goto LABEL_52;
    v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v34)
    {
      v35 = 0;
      v69 = v33 + 32;
      v73 = v33;
      v74 = v23 & 0xC000000000000001;
      v36 = v23 & 0xFFFFFFFFFFFFFF8;
      if (v23 < 0)
        v36 = v23;
      v71 = v36;
      v76 = v23 + 56;
      v77 = v33 & 0xC000000000000001;
      v75 = v34;
      v70 = v23;
      while (1)
      {
        v37 = v77 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v35, v73) : *(id *)(v69 + 8 * v35);
        v33 = (uint64_t)v37;
        if (__OFADD__(v35++, 1))
          break;
        v78 = 0;
        v39 = objc_msgSend(v37, "remObjectIDWithError:", &v78);
        v40 = v78;
        if (!v39)
        {
          v65 = v78;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _convertNSErrorToError(_:)(v40);

          swift_willThrow(v66);
          return result;
        }
        v41 = v39;
        if (v74)
        {
          v42 = v78;
          v43 = v41;
          v44 = __CocoaSet.contains(_:)(v43, v71);

          if ((v44 & 1) == 0)
            goto LABEL_41;
LABEL_24:

          if (v35 == v75)
            goto LABEL_56;
        }
        else
        {
          if (*(_QWORD *)(v23 + 16))
          {
            v45 = *(_QWORD *)(v23 + 40);
            v46 = v78;
            v47 = NSObject._rawHashValue(seed:)(v45);
            v48 = -1 << *(_BYTE *)(v23 + 32);
            v49 = v47 & ~v48;
            if (((*(_QWORD *)(v76 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) != 0)
            {
              sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
              v50 = *(id *)(*(_QWORD *)(v23 + 48) + 8 * v49);
              v51 = static NSObject.== infix(_:_:)(v50);

              if ((v51 & 1) == 0)
              {
                v52 = ~v48;
                while (1)
                {
                  v49 = (v49 + 1) & v52;
                  if (((*(_QWORD *)(v76 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) == 0)
                    goto LABEL_41;
                  v53 = *(id *)(*(_QWORD *)(v23 + 48) + 8 * v49);
                  v54 = static NSObject.== infix(_:_:)(v53);

                  if ((v54 & 1) != 0)
                    goto LABEL_24;
                }
              }
              goto LABEL_24;
            }
          }
          else
          {
            v55 = v78;
          }
LABEL_41:
          if (qword_100837848 != -1)
            swift_once(&qword_100837848, sub_10052E998);
          v56 = type metadata accessor for Logger(0);
          sub_10001AAA8(v56, (uint64_t)qword_10084F108);
          v57 = v41;
          v58 = v72;
          v59 = Logger.logObject.getter(v58);
          v60 = static os_log_type_t.info.getter(v59);
          if (os_log_type_enabled(v59, v60))
          {
            v61 = swift_slowAlloc(22, -1);
            v62 = (_QWORD *)swift_slowAlloc(16, -1);
            *(_DWORD *)v61 = 138412546;
            v63 = -[NSObject objectID](v58, "objectID");
            *(_QWORD *)(v61 + 4) = v63;
            *v62 = v63;

            *(_WORD *)(v61 + 12) = 2112;
            *(_QWORD *)(v61 + 14) = v57;
            v62[1] = v41;
            _os_log_impl((void *)&_mh_execute_header, v59, v60, "Removing calDAVNotification from list {list.objectID: %@, calDAVNotificationobjectID: %@}", (uint8_t *)v61, 0x16u);
            v64 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v62, 2, v64);
            swift_slowDealloc(v62, -1, -1);
            swift_slowDealloc(v61, -1, -1);
          }
          else
          {

            v59 = v58;
          }

          objc_msgSend((id)v33, "setOwner:", 0);
          v23 = v70;
          if (v35 == v75)
            goto LABEL_56;
        }
      }
      __break(1u);
LABEL_52:
      if (v33 < 0)
        v68 = v33;
      else
        v68 = v33 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v33);
      v34 = _CocoaArrayWrapper.endIndex.getter(v68);
      swift_bridgeObjectRelease();
    }
LABEL_56:
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_100537D3C(void *a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  void *v34;
  void *v35;
  char v36;
  void *v37;
  id v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  id v44;
  void *v45;
  uint64_t v46;
  void *v47;
  Swift::String v48;
  Swift::String v49;
  NSString v50;
  uint64_t v51;
  char v52;
  void *v53;
  Swift::String v54;
  id v55;
  uint64_t v56;
  void *v57;
  void *v58;
  Swift::String v59;
  Swift::String v60;
  NSString v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  Class isa;
  id v67;
  id v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  void (*v72)(char *, _QWORD, uint64_t, uint64_t);
  unsigned int (*v73)(char *, uint64_t, uint64_t);
  Class v74;
  id v75;
  id v76;
  char *v77;
  char *v78;
  char *v79;
  Class v80;
  id v81;
  _QWORD v82[2];
  id v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  id v93;

  v7 = type metadata accessor for UUID(0);
  v90 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v10);
  v12 = (char *)v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)v82 - v14;
  v16 = type metadata accessor for Date(0);
  v86 = *(_QWORD *)(v16 - 8);
  v87 = v16;
  *(_QWORD *)&v17 = __chkstk_darwin(v16).n128_u64[0];
  v19 = (char *)v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = objc_msgSend(a1, "storeControllerManagedObjectContext", v17);
  if (!v20)
  {
    v91 = 0;
    v92 = 0xE000000000000000;
    _StringGuts.grow(_:)(137);
    v29._countAndFlagsBits = 0xD000000000000086;
    v29._object = (void *)0x8000000100707730;
    String.append(_:)(v29);
    v30 = objc_msgSend(a1, "remObjectID");
    if (v30)
    {
      v31 = v30;
      v32 = objc_msgSend(v30, "description");

      v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      v35 = v34;

    }
    else
    {
      v35 = (void *)0xE300000000000000;
      v33 = 7104878;
    }
    v47 = (void *)objc_opt_self(REMError);
    v48._countAndFlagsBits = v33;
    v48._object = v35;
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    v49._countAndFlagsBits = 125;
    v49._object = (void *)0xE100000000000000;
    String.append(_:)(v49);
    v50 = String._bridgeToObjectiveC()();
    objc_msgSend(v47, "invalidParameterErrorWithDescription:", v50, swift_bridgeObjectRelease().n128_f64[0]);

    swift_willThrow(v51);
    return;
  }
  v88 = a1;
  v89 = a2;
  v83 = a3;
  v84 = v12;
  v85 = v9;
  v93 = v20;
  v21 = objc_msgSend(a2, "entityName");
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v24 = v23;

  v25 = objc_msgSend((id)objc_opt_self(REMTemplate), "cdEntityName");
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v28 = v27;

  if (v26 == v22 && v28 == v24)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v28, v22, v24, 0);
    swift_bridgeObjectRelease();
    if ((v36 & 1) == 0)
    {
      v40 = v88;
      if (v22 == 0xD000000000000013 && v24 == 0x80000001006F67F0)
      {
        swift_bridgeObjectRelease();
        v46 = 2;
        v38 = v93;
        v37 = v89;
      }
      else
      {
        v52 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001006F67F0, v22, v24, 0);
        swift_bridgeObjectRelease();
        v37 = v89;
        if ((v52 & 1) == 0)
        {
          v53 = (void *)objc_opt_self(REMError);
          v91 = 0;
          v92 = 0xE000000000000000;
          _StringGuts.grow(_:)(100);
          v54._countAndFlagsBits = 0xD000000000000061;
          v54._object = (void *)0x80000001007077C0;
          String.append(_:)(v54);
          v55 = objc_msgSend(v37, "description");
          v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
          v58 = v57;

          v59._countAndFlagsBits = v56;
          v59._object = v58;
          String.append(_:)(v59);
          swift_bridgeObjectRelease();
          v60._countAndFlagsBits = 125;
          v60._object = (void *)0xE100000000000000;
          String.append(_:)(v60);
          v61 = String._bridgeToObjectiveC()();
          objc_msgSend(v53, "invalidParameterErrorWithDescription:", v61, swift_bridgeObjectRelease().n128_f64[0]);

          swift_willThrow(v62);
          return;
        }
        v46 = 2;
        v38 = v93;
      }
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRelease();
  v37 = v89;
  v38 = v93;
  v39 = sub_100375C74((uint64_t)&off_1007E07F0, v89);
  v40 = v88;
  if (v3)
  {

    return;
  }
  v41 = v39;
  if ((unint64_t)v39 >> 62)
  {
    if (v39 < 0)
      v63 = v39;
    else
      v63 = v39 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v39);
    v42 = _CocoaArrayWrapper.endIndex.getter(v63);
    if (v42)
      goto LABEL_12;
  }
  else
  {
    v42 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v39);
    if (v42)
    {
LABEL_12:
      v82[1] = 0;
      if (v42 < 1)
      {
        __break(1u);
        return;
      }
      for (i = 0; i != v42; ++i)
      {
        if ((v41 & 0xC000000000000001) != 0)
          v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v41);
        else
          v44 = *(id *)(v41 + 8 * i + 32);
        v45 = v44;
        objc_msgSend(v44, "setPriorityRawValue:", 30);

      }
      swift_bridgeObjectRelease_n(v41, 2);
      v46 = 1;
      v38 = v93;
      v40 = v88;
      v37 = v89;
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRelease_n(v41, 2);
  v46 = 1;
LABEL_32:
  v64 = type metadata accessor for REMCDTemplateOperationQueueItem();
  v65 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v64)), "initWithContext:", v38);
  objc_msgSend(v65, "setAccount:", v40);
  objc_msgSend(v65, "setOperationTypeRawValue:", v46);
  Date.init()(objc_msgSend(v65, "setPriorityRawValue:", 20));
  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v86 + 8))(v19, v87);
  objc_msgSend(v65, "setCreationDate:", isa);

  v67 = v37;
  v68 = objc_msgSend(v67, "uuid");
  v69 = v85;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v68);

  v70 = v90;
  v71 = *(void (**)(char *, char *, uint64_t))(v90 + 32);
  v71(v15, v69, v7);
  v72 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56);
  v72(v15, 0, 1, v7);
  v73 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48);
  v74 = 0;
  if (v73(v15, 1, v7) != 1)
  {
    v74 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v90 + 8))(v15, v7);
  }
  objc_msgSend(v65, "setTemplateIdentifier:", v74);

  v75 = v83;
  v76 = objc_msgSend(v75, "uuid");
  v77 = v85;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v76);

  v78 = v84;
  v71(v84, v77, v7);
  v72(v78, 0, 1, v7);
  v79 = v78;
  if (v73(v78, 1, v7) == 1)
  {
    v80 = 0;
  }
  else
  {
    v80 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v90 + 8))(v79, v7);
  }
  v81 = v93;
  objc_msgSend(v65, "setListIdentifier:", v80);

}

void sub_1005384CC(uint64_t a1, id a2, NSObject *a3)
{
  uint64_t v3;
  uint64_t v4;
  id v8;
  void *v9;
  char **v10;
  char **v11;
  char **v12;
  uint64_t v13;
  uint64_t v14;

  v4 = v3;
  if (objc_msgSend(a2, "shouldCategorizeGroceryItems"))
  {
    v8 = objc_msgSend(a2, "storeControllerManagedObjectContext");
    if (v8)
    {
      v9 = v8;
      v10 = (char **)objc_msgSend(a2, "remObjectID");
      if (v10)
      {
        v11 = v10;
        if ((unint64_t)a1 >> 62)
        {
          if (a1 < 0)
            v13 = a1;
          else
            v13 = a1 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(a1);
          v14 = _CocoaArrayWrapper.endIndex.getter(v13);
          swift_bridgeObjectRelease();
          if (v14)
          {
LABEL_6:
            type metadata accessor for RDGroceryOperationQueue();
            swift_bridgeObjectRetain(a1);
            v12 = v11;
            v11 = sub_10053F65C(v11, a1, 0, a3, (uint64_t)v9);

            swift_bridgeObjectRelease();
            if (v4)
              return;
            goto LABEL_14;
          }
        }
        else if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_6;
        }

      }
      else
      {
        v11 = (char **)v9;
      }
LABEL_14:

    }
  }
}

void sub_100538614(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  double v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  objc_class *v17;
  uint64_t v18;
  uint64_t inited;
  uint64_t KeyPath;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  NSObject *v33;
  void *v34;
  id v35;
  char v36[40];
  uint64_t v37;

  v3 = _s10PredicatesOMa(0);
  *(_QWORD *)&v4 = __chkstk_darwin(v3).n128_u64[0];
  v6 = (NSObject **)((char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (objc_msgSend(a1, "shouldCategorizeGroceryItems", v4))
  {
    v7 = objc_msgSend(a1, "storeControllerManagedObjectContext");
    if (v7)
    {
      v8 = v7;
      v9 = objc_msgSend(a1, "remObjectID");
      if (!v9)
      {

        return;
      }
      v10 = v9;
      v11 = objc_msgSend(a1, "account");
      if (!v11)
      {

        return;
      }
      v12 = v11;
      v13 = (char *)v6 + *(int *)(sub_10001A630(&qword_100846690) + 48);
      *v6 = v10;
      v14 = enum case for REMRemindersListDataView.ShowCompleted.on(_:);
      v15 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v13, v14, v15);
      swift_storeEnumTagMultiPayload(v6, v3, 8);
      v16 = qword_100837260;
      v35 = v10;
      if (v16 != -1)
        swift_once(&qword_100837260, sub_10033CFDC);
      v17 = (objc_class *)qword_100871E48;
      v18 = sub_10001A630((uint64_t *)&unk_10083AD90);
      inited = swift_initStackObject(v18, v36);
      *(_OWORD *)(inited + 16) = xmmword_1006A7330;
      KeyPath = swift_getKeyPath(&unk_1006C1F18);
      *(_QWORD *)(inited + 32) = KeyPath;
      v37 = inited;
      specialized Array._endMutation()(KeyPath);
      v21 = _swiftEmptyArrayStorage;
      v22 = sub_100340EC0((uint64_t)v6, v17, (uint64_t)v8, (uint64_t)_swiftEmptyArrayStorage, 0, 0, v37, (uint64_t)_swiftEmptyArrayStorage, 0);
      swift_bridgeObjectRelease();
      if (v1)
      {

        sub_1000CACA8((uint64_t)v6);
        return;
      }
      sub_1000CACA8((uint64_t)v6);
      v37 = (uint64_t)_swiftEmptyArrayStorage;
      if ((unint64_t)v22 >> 62)
      {
        if (v22 < 0)
          v32 = v22;
        else
          v32 = v22 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v22);
        v23 = _CocoaArrayWrapper.endIndex.getter(v32);
        if (v23)
          goto LABEL_13;
      }
      else
      {
        v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v22);
        if (v23)
        {
LABEL_13:
          v33 = v12;
          v34 = v8;
          if (v23 < 1)
          {
            __break(1u);
            return;
          }
          for (i = 0; i != v23; ++i)
          {
            if ((v22 & 0xC000000000000001) != 0)
              v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v22);
            else
              v26 = *(id *)(v22 + 8 * i + 32);
            v27 = v26;
            v28 = objc_msgSend(v26, "remObjectID", v33, v34, v35);

            if (v28)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
              v31 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
              v30 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v31 >= v30 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1);
              v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v28);
              specialized Array._endMutation()(v25);
            }
          }
          swift_bridgeObjectRelease();
          v21 = (_QWORD *)v37;
          v12 = v33;
          v8 = v34;
          goto LABEL_29;
        }
      }
      swift_bridgeObjectRelease();
LABEL_29:
      swift_bridgeObjectRelease();
      sub_1005384CC((uint64_t)v21, a1, v12);

      swift_bridgeObjectRelease();
    }
  }
}

void sub_1005389AC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1005389E0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v2 = swift_allocObject(v1, 40, 7);
  *(_OWORD *)(v2 + 16) = xmmword_1006A7330;
  v3 = objc_msgSend(v0, "accountID");
  *(_QWORD *)(v2 + 32) = v3;
  specialized Array._endMutation()(v3);
  return v2;
}

void sub_100538C04(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

void sub_100538C54(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, int a11, uint64_t a12, os_log_t a13, os_log_t log, os_log_t a15, int a16, id a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v63;
  void *v64;
  char v65;
  uint64_t v66;
  id v67;
  id v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t inited;
  id v73;
  NSString v74;
  id v75;
  id v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  id v80;
  NSObject *v81;
  os_log_type_t v82;
  uint64_t v83;
  _QWORD *v84;
  id v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t ObjCClassFromMetadata;
  NSString v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  id v98;
  id v99;
  id v100;
  NSObject *v101;
  os_log_type_t v102;
  void *v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  double v109;
  id v110;
  void *v111;
  uint64_t v112;
  id v113;
  id v114;
  id v115;
  NSObject *v116;
  os_log_type_t v117;
  void *v118;
  uint64_t v119;
  id v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  double v124;
  id v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  void *v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  os_log_type_t v138;
  os_log_type_t v139;
  NSObject *v140;
  NSObject *v141;
  void *v142;
  id v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _BYTE v148[264];

  v67 = objc_msgSend(v144, "createResolutionTokenMapIfNecessary");
  v68 = objc_msgSend(v64, "resolutionTokenMap");
  if (v68)
  {
    v69 = v68;
    v70 = v63;
    v71 = sub_10001A630(&qword_100843E60);
    inited = swift_initStackObject(v71, &v146);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
    *(_BYTE *)(inited + 32) = v65;
    v73 = sub_100406700((uint64_t)v69, inited);
    swift_setDeallocating(inited);
    sub_100403B54(v65);
    v74 = String._bridgeToObjectiveC()();
    LODWORD(inited) = objc_msgSend(v67, "mergeWithMap:forKey:", v73, v74, swift_bridgeObjectRelease().n128_f64[0]);

    if (!(_DWORD)inited)
    {

      return;
    }
    if (v65 == 3)
    {
      v75 = objc_msgSend(v64, "parentAccountID");
      if (!v75)
      {
        v142 = v67;
        v78 = 0;
        goto LABEL_24;
      }
      v76 = v75;
      v77 = ((uint64_t (*)(uint64_t, id))sub_1003FE16C)(3, v76);
      if (!v70)
      {
        v78 = (void *)v77;
        v142 = v67;

LABEL_24:
        if (qword_100837848 != -1)
          swift_once(&qword_100837848, sub_10052E998);
        v96 = type metadata accessor for Logger(0);
        sub_10001AAA8(v96, (uint64_t)qword_10084F108);
        v97 = v78;
        v98 = v144;
        v99 = v97;
        v100 = v98;
        v101 = Logger.logObject.getter(v100);
        v102 = static os_log_type_t.info.getter(v101);
        if (os_log_type_enabled(v101, v102))
        {
          v138 = v102;
          v140 = v101;
          v132 = v99;
          v103 = v78;
          v104 = swift_slowAlloc(22, -1);
          v136 = swift_slowAlloc(64, -1);
          *(_QWORD *)(v66 - 72) = v136;
          *(_DWORD *)v104 = 136315394;
          v105 = objc_msgSend(v100, "remObjectID");
          v147 = (uint64_t)v105;
          v134 = sub_10001A630((uint64_t *)&unk_100844910);
          v106 = Optional.descriptionOrNil.getter(v134);
          v108 = v107;

          v147 = sub_10001A820(v106, v108, (uint64_t *)(v66 - 72));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148);

          *(_QWORD *)&v109 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v104 + 12) = 2080;
          if (v103)
          {
            v99 = v132;
            v110 = objc_msgSend(v132, "remObjectID", v109);
          }
          else
          {
            v110 = 0;
            v99 = v132;
          }
          v147 = (uint64_t)v110;
          v126 = Optional.descriptionOrNil.getter(v134);
          v128 = v127;

          v147 = sub_10001A820(v126, v128, (uint64_t *)(v66 - 72));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v140, v138, "Updating list.parentAccount {list: %s, account: %s}", (uint8_t *)v104, 0x16u);
          swift_arrayDestroy(v136, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v136, -1, -1);
          swift_slowDealloc(v104, -1, -1);

        }
        else
        {

        }
        objc_msgSend(v100, "setParentAccount:", v99);
LABEL_44:

        return;
      }
LABEL_22:

      return;
    }
    v94 = objc_msgSend(v64, "parentListID");
    if (v94)
    {
      v76 = v94;
      v95 = ((uint64_t (*)(uint64_t, id))sub_1003FE190)(4, v76);
      if (v70)
        goto LABEL_22;
      v111 = (void *)v95;
      v142 = v67;

    }
    else
    {
      v142 = v67;
      v111 = 0;
    }
    if (qword_100837848 != -1)
      swift_once(&qword_100837848, sub_10052E998);
    v112 = type metadata accessor for Logger(0);
    sub_10001AAA8(v112, (uint64_t)qword_10084F108);
    v113 = v111;
    v114 = v144;
    v99 = v113;
    v115 = v114;
    v116 = Logger.logObject.getter(v115);
    v117 = static os_log_type_t.info.getter(v116);
    if (os_log_type_enabled(v116, v117))
    {
      v139 = v117;
      v141 = v116;
      v133 = v99;
      v118 = v111;
      v119 = swift_slowAlloc(22, -1);
      v137 = swift_slowAlloc(64, -1);
      *(_QWORD *)(v66 - 72) = v137;
      *(_DWORD *)v119 = 136315394;
      v120 = objc_msgSend(v115, "remObjectID");
      v147 = (uint64_t)v120;
      v135 = sub_10001A630((uint64_t *)&unk_100844910);
      v121 = Optional.descriptionOrNil.getter(v135);
      v123 = v122;

      v147 = sub_10001A820(v121, v123, (uint64_t *)(v66 - 72));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148);

      *(_QWORD *)&v124 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v119 + 12) = 2080;
      if (v118)
      {
        v99 = v133;
        v125 = objc_msgSend(v133, "remObjectID", v124);
      }
      else
      {
        v125 = 0;
        v99 = v133;
      }
      v147 = (uint64_t)v125;
      v129 = Optional.descriptionOrNil.getter(v135);
      v131 = v130;

      v147 = sub_10001A820(v129, v131, (uint64_t *)(v66 - 72));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v141, v139, "Updating list.parentList {list: %s, parentList: %s}", (uint8_t *)v119, 0x16u);
      swift_arrayDestroy(v137, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v137, -1, -1);
      swift_slowDealloc(v119, -1, -1);

    }
    else
    {

    }
    objc_msgSend(v115, "setParentList:", v99);
    goto LABEL_44;
  }
  if (qword_100837848 != -1)
    swift_once(&qword_100837848, sub_10052E998);
  v79 = type metadata accessor for Logger(0);
  sub_10001AAA8(v79, (uint64_t)qword_10084F108);
  v80 = v64;
  v81 = Logger.logObject.getter(v80);
  v82 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v81, v82))
  {
    v83 = swift_slowAlloc(22, -1);
    v84 = (_QWORD *)swift_slowAlloc(8, -1);
    v145 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v66 - 72) = v145;
    *(_DWORD *)v83 = 138543618;
    v143 = v67;
    v85 = objc_msgSend(v80, "objectID");
    v147 = (uint64_t)v85;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148);
    *v84 = v85;

    *(_WORD *)(v83 + 12) = 2082;
    if (v65 == 4)
      v86 = 0x694C746E65726170;
    else
      v86 = 0x6341746E65726170;
    if (v65 == 4)
      v87 = 0xEC00000044497473;
    else
      v87 = 0xEF4449746E756F63;
    v147 = sub_10001A820(v86, v87, (uint64_t *)(v66 - 72));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148);
    v67 = v143;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v81, v82, "REMListStorageCDIngestor: establishRelationship(onStorage:into cdList:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}", (uint8_t *)v83, 0x16u);
    v88 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v84, 1, v88);
    swift_slowDealloc(v84, -1, -1);
    swift_arrayDestroy(v145, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v145, -1, -1);
    swift_slowDealloc(v83, -1, -1);

  }
  else
  {

  }
  v89 = (void *)objc_opt_self(REMError);
  v90 = sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v90);
  v92 = String._bridgeToObjectiveC()();
  objc_msgSend(v89, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v92);

  swift_willThrow(v93);
}

void sub_10053A930(void *a1, void *a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  id v21;
  Class isa;
  id v23;
  _QWORD v24[6];
  void *v25;

  v24[4] = sub_10052DE9C;
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 1107296256;
  v24[2] = sub_100256CD4;
  v24[3] = &unk_1007F9908;
  v4 = (uint64_t)_Block_copy(v24);
  swift_release(v24[5]);
  v5 = objc_msgSend(a2, "sortedArrayWithOptions:usingComparator:", 16, v4);
  _Block_release((const void *)v4);
  if ((swift_isEscapingClosureAtFileLocation(0, "", 139, 900, 108, 1) & 1) != 0)
  {
    __break(1u);
LABEL_16:
    if (v4 < 0)
      v20 = v4;
    else
      v20 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v10 = _CocoaArrayWrapper.endIndex.getter(v20);
    if (v10)
      goto LABEL_4;
LABEL_20:
    swift_bridgeObjectRelease();
    v19 = _swiftEmptyArrayStorage;
    goto LABEL_21;
  }
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, (char *)&type metadata for Any + 8);

  v24[0] = v6;
  v7 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v8 = sub_10001A630(&qword_1008442B0);
  v9 = sub_1000A5F84(&qword_100842038, &qword_1008442B0, (uint64_t)&protocol conformance descriptor for [A]);
  v4 = Sequence.elements<A>(ofType:)(v7, v8, v7, v9);
  swift_bridgeObjectRelease();
  v24[0] = _swiftEmptyArrayStorage;
  if ((unint64_t)v4 >> 62)
    goto LABEL_16;
  v10 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v4);
  if (!v10)
    goto LABEL_20;
LABEL_4:
  if (v10 < 1)
  {
    __break(1u);
    return;
  }
  v25 = a1;
  for (i = 0; i != v10; ++i)
  {
    if ((v4 & 0xC000000000000001) != 0)
      v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v4);
    else
      v13 = *(id *)(v4 + 8 * i + 32);
    v14 = v13;
    v15 = objc_msgSend(v13, "remObjectID", v24[0]);

    if (v15)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v16);
      v18 = *(_QWORD *)((v24[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
      v17 = *(_QWORD *)((v24[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v18 >= v17 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1);
      v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v15);
      specialized Array._endMutation()(v12);
    }
  }
  swift_bridgeObjectRelease();
  v19 = (_QWORD *)v24[0];
  a1 = v25;
LABEL_21:
  swift_bridgeObjectRelease();
  sub_1001DFD18((uint64_t)v19);
  swift_bridgeObjectRelease();
  v21 = objc_allocWithZone((Class)NSOrderedSet);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v23 = objc_msgSend(v21, "initWithArray:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  if ((objc_msgSend(a1, "isEqual:", v23) & 1) != 0)
  {
    a1;

  }
}

void sub_10053AC7C(void *a1)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  __n128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  BOOL v36;
  unint64_t v37;
  int64_t v38;
  id v39;
  void *v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t *v44;
  id v45;
  void *v46;
  uint64_t *v47;
  id v48;
  void *v49;
  uint8_t *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  os_log_t v54;
  double v55;
  char *v56;
  uint64_t v57;
  double v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  os_log_type_t v63;
  char *v64;
  char *v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  unint64_t v73;
  void *v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  id v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  NSObject *v84;
  os_log_type_t v85;
  _BOOL4 v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  id v90;
  void *v91;
  id v92;
  id v93;
  id v94;
  char *v95;
  unint64_t v96;
  char *v97;
  unint64_t v98;
  char *v99;
  id v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  id v104;
  void *v105;
  id v106;
  id v107;
  id v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  id v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  double v116;
  char *v117;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  __n128 v121;
  void *v122;
  uint64_t v123;
  id v124;
  id v125;
  uint64_t v126;
  NSObject *v127;
  os_log_type_t v128;
  uint8_t *v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  double v134;
  uint64_t *v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  NSObject *v139;
  int v140;
  uint8_t *v141;
  int64_t v142;
  _QWORD *v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  id v147;
  id v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  _QWORD *v165;
  uint8_t *v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  os_log_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  unint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint8_t *v185;
  os_log_t v186;
  __int128 v187;
  uint64_t v188;
  _BYTE v189[32];
  _OWORD v190[2];
  _QWORD *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  __int128 v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;

  v179 = type metadata accessor for UUID(0);
  v180 = *(_QWORD *)(v179 - 8);
  __chkstk_darwin(v179);
  v176 = (char *)&v175 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v4);
  v6 = (uint64_t)&v175 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v178 = (uint64_t)&v175 - v8;
  v9 = (char *)type metadata accessor for Date(0);
  v175 = (char *)*((_QWORD *)v9 - 1);
  __chkstk_darwin(v9);
  v181 = (char *)&v175 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v11);
  v185 = (uint8_t *)&v175 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v186 = (os_log_t)((char *)&v175 - v14);
  v15 = type metadata accessor for NSFastEnumerationIterator(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v175 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = (unint64_t)_swiftEmptyArrayStorage;
  v198 = (unint64_t)_swiftEmptyArrayStorage;
  v19 = a1;
  NSOrderedSet.makeIterator()(v20);

  v21 = sub_10025F8F0();
  dispatch thunk of IteratorProtocol.next()(&v195, v15, v21);
  if (v196)
  {
    v1 = (unint64_t)&type metadata for Any + 8;
    do
    {
      sub_10001A6CC(&v195, v190);
      sub_10001A670((uint64_t)v190, (uint64_t)v189);
      v23 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
      if ((swift_dynamicCast(&v194, v189, (char *)&type metadata for Any + 8, v23, 6) & 1) == 0)
        v194 = 0;
      v24 = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v190);
      v25 = v194;
      if (v194)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v24);
        v27 = *(_QWORD *)((v197 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v26 = *(_QWORD *)((v197 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v27 >= v26 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1);
        v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v25);
        specialized Array._endMutation()(v22);
      }
      dispatch thunk of IteratorProtocol.next()(&v195, v15, v21);
    }
    while (v196);
  }
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v28 = v197;
  if (v197 >> 62)
    goto LABEL_188;
  v197 = *(_QWORD *)((v197 & 0xFFFFFFFFFFFFF8) + 0x10);
  v29 = v197;
  swift_bridgeObjectRetain(v28);
  *(_QWORD *)&v187 = v29;
  while (1)
  {
    v177 = v6;
    v188 = v28;
    if (!v29)
    {
      v30 = 0;
LABEL_56:
      swift_bridgeObjectRelease();
      v9 = (char *)(v30 + 1);
      if (v30 == -1)
        goto LABEL_196;
      v30 = v187;
      v197 = v187;
      v1 = v180;
      while (1)
      {
        if (qword_100837848 != -1)
          swift_once(&qword_100837848, sub_10052E998);
        v60 = type metadata accessor for Logger(0);
        v61 = sub_10001AAA8(v60, (uint64_t)qword_10084F108);
        swift_bridgeObjectRetain(v28);
        v181 = (char *)v61;
        v37 = Logger.logObject.getter(v62);
        v63 = static os_log_type_t.info.getter(v37);
        if (os_log_type_enabled((os_log_t)v37, v63))
        {
          v6 = swift_slowAlloc(32, -1);
          *(_DWORD *)v6 = 134218496;
          *(_QWORD *)&v195 = v30;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v195, (char *)&v195 + 8);
          swift_bridgeObjectRelease();
          *(_WORD *)(v6 + 12) = 2048;
          swift_beginAccess(&v197, v189, 0, 0);
          *(_QWORD *)&v195 = v197;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v195, (char *)&v195 + 8);
          *(_WORD *)(v6 + 22) = 2048;
          *(_QWORD *)&v195 = v9;
          v30 = v187;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v195, (char *)&v195 + 8);
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v37, v63, "Going to back propagate ordering changes to CD reminders {remindersCount: %ld, startIndexToKeepUntouched: %ld, maxDisplayOrder: %lu}", (uint8_t *)v6, 0x20u);
          swift_slowDealloc(v6, -1, -1);

          v194 = 0;
          if (!v29)
            goto LABEL_71;
        }
        else
        {

          swift_bridgeObjectRelease();
          v194 = 0;
          if (!v29)
          {
LABEL_71:
            v64 = 0;
            goto LABEL_72;
          }
        }
        if ((v28 & 0xC000000000000001) != 0)
          goto LABEL_197;
        if (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v37 = (unint64_t)*(id *)(v28 + 32);
          goto LABEL_69;
        }
        __break(1u);
LABEL_199:
        __break(1u);
LABEL_200:
        v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v37, v28);
LABEL_33:
        v40 = v39;
        v41 = objc_msgSend(v39, "displayOrder", v175);

        if (!v41)
          goto LABEL_36;
        if (v1)
        {
          v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v37, v28);
          v1 = v180;
          v30 = v187;
        }
        else
        {
          v30 = v187;
          if ((v37 & 0x8000000000000000) != 0)
            goto LABEL_206;
          v1 = v180;
          if (v37 >= *(_QWORD *)(v183 + 16))
            goto LABEL_207;
          v42 = *(id *)(v182 + 8 * v37);
        }
        v59 = (char *)objc_msgSend(v42, "displayOrder");

        v9 = v59 - 1;
        if (!v59)
          goto LABEL_203;
      }
    }
    v184 = v9;
    v30 = 0;
    v1 = v28 & 0xC000000000000001;
    v183 = v28 & 0xFFFFFFFFFFFFFF8;
    v182 = v28 + 32;
    v6 = -1;
    v28 = (uint64_t)&selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
    v9 = (char *)v29;
    while (1)
    {
      v31 = v29 + v30 - 1;
      if (__OFSUB__(v29 + v30, 1))
      {
        __break(1u);
LABEL_175:
        __break(1u);
        goto LABEL_176;
      }
      if (v1)
      {
        v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v29 + v30 - 1, v188);
      }
      else
      {
        if ((v31 & 0x8000000000000000) != 0)
          goto LABEL_180;
        if (v31 >= *(_QWORD *)(v183 + 16))
          goto LABEL_181;
        v32 = *(id *)(v182 + 8 * v31);
      }
      v33 = v32;
      v34 = objc_msgSend(v32, "displayOrder", v175);
      v35 = objc_msgSend(v33, "icsDisplayOrder");

      v36 = (uint64_t)v35 > 0 || (unint64_t)v34 >= v6;
      if (v36)
        break;
      v37 = v187 + v30 - 1;
      if (__OFSUB__(v187 + v30, 1))
        goto LABEL_175;
      v29 = (uint64_t)v9;
      v197 = v187 + v30-- - 1;
      v6 = (uint64_t)v34;
      if (!v31)
      {
        v38 = v187;
        goto LABEL_28;
      }
    }
    v38 = v187;
    v37 = v187 + v30;
    v29 = (uint64_t)v9;
LABEL_28:
    v28 = v188;
    swift_bridgeObjectRelease();
    v6 = (uint64_t)v175;
    if ((uint64_t)v37 < v38)
    {
      if (v1)
        goto LABEL_200;
      if ((v37 & 0x8000000000000000) == 0)
      {
        if (v37 >= *(_QWORD *)(v183 + 16))
          goto LABEL_202;
        v39 = *(id *)(v182 + 8 * v37);
        goto LABEL_33;
      }
      __break(1u);
LABEL_202:
      __break(1u);
LABEL_203:
      __break(1u);
LABEL_204:
      __break(1u);
      goto LABEL_205;
    }
LABEL_36:
    if (v29 < 1)
      break;
    swift_bridgeObjectRetain(v28);
    v43 = 0;
    v30 = 0;
    v44 = (uint64_t *)&unk_1008380D0;
    while (1)
    {
      v45 = v1
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v43, v28)
          : *(id *)(v28 + 8 * v43 + 32);
      v46 = v45;
      v47 = v44;
      v48 = objc_msgSend(v45, "creationDate");
      if (v48)
      {
        v49 = v48;
        v50 = v185;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v48);

        v51 = 0;
      }
      else
      {
        v51 = 1;
        v50 = v185;
      }
      v52 = v184;
      (*(void (**)(uint8_t *, uint64_t, uint64_t, _QWORD *))(v6 + 56))(v50, v51, 1, v184);
      v53 = (uint64_t)v50;
      v44 = v47;
      v54 = v186;
      sub_1000A5CA8(v53, (uint64_t)v186, v44);
      if ((*(unsigned int (**)(os_log_t, uint64_t, _QWORD *))(v6 + 48))(v54, 1, v52))
      {
        sub_10000882C((uint64_t)v54, v44);

        v55 = 0.0;
      }
      else
      {
        v56 = v181;
        (*(void (**)(char *, os_log_t, _QWORD *))(v6 + 16))(v181, v54, v52);
        v57 = sub_10000882C((uint64_t)v54, v44);
        v58 = Date.timeIntervalSince1970.getter(v57);
        (*(void (**)(char *, _QWORD *))(v6 + 8))(v56, v52);

        v55 = 1.84467441e19;
        if (v58 <= 1.84467441e19)
          v55 = v58;
        if (v58 <= 0.0)
          v55 = 0.0;
      }
      v28 = v188;
      if ((~*(_QWORD *)&v55 & 0x7FF0000000000000) == 0)
        break;
      if (v55 <= -1.0)
        goto LABEL_177;
      if (v55 >= 1.84467441e19)
        goto LABEL_178;
      v29 = (uint64_t)v9;
      if (v30 <= (unint64_t)v55)
        v30 = (unint64_t)v55;
      if (v9 == (char *)++v43)
        goto LABEL_56;
    }
LABEL_176:
    __break(1u);
LABEL_177:
    __break(1u);
LABEL_178:
    __break(1u);
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
LABEL_181:
    __break(1u);
LABEL_182:
    __break(1u);
LABEL_183:
    __break(1u);
LABEL_184:
    __break(1u);
LABEL_185:
    __break(1u);
LABEL_186:
    __break(1u);
LABEL_187:
    __break(1u);
LABEL_188:
    if (v28 < 0)
      v173 = v28;
    else
      v173 = v28 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v28);
    v174 = _CocoaArrayWrapper.endIndex.getter(v173);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v187 = v174;
    v197 = v174;
    swift_bridgeObjectRetain(v28);
    v29 = _CocoaArrayWrapper.endIndex.getter(v173);
  }
  while (1)
  {
    __break(1u);
LABEL_196:
    __break(1u);
LABEL_197:
    swift_bridgeObjectRetain(v28);
    v37 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v28);
    swift_bridgeObjectRelease();
LABEL_69:
    v64 = (char *)objc_msgSend((id)v37, "displayOrder", v175);

LABEL_72:
    swift_beginAccess(&v197, &v195, 0, 0);
    v29 = v197;
    if ((v197 & 0x8000000000000000) == 0)
      break;
    __break(1u);
LABEL_194:
    __break(1u);
  }
  if (!v197)
  {
    v9 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_144;
  }
  v186 = (os_log_t)(v30 - 1);
  if (__OFSUB__(v30, 1))
    goto LABEL_199;
  v175 = v9;
  v65 = 0;
  v6 = 0;
  v66 = v28 & 0xC000000000000001;
  v183 = v28 & 0xFFFFFFFFFFFFFF8;
  v185 = (uint8_t *)(v197 - 1);
  v9 = (char *)(v28 + 40);
  v184 = _swiftEmptyArrayStorage;
  v182 = v28 & 0xC000000000000001;
  while (1)
  {
    v69 = v6 + 1;
    if (!v66)
      break;
    v70 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v28);
    v71 = v28;
    v28 = v70;
    if (v6 >= (uint64_t)v186)
      goto LABEL_89;
    v72 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 + 1, v71);
LABEL_86:
    v74 = v72;
    v1 = (unint64_t)objc_msgSend(v72, "displayOrder", v175);

    if (v65 < v64 && (unint64_t)v64 < v1)
      goto LABEL_76;
LABEL_93:
    v36 = __CFADD__(v65, 1);
    v67 = v65 + 1;
    if (v36)
      goto LABEL_182;
    if (v67 == v64)
    {
LABEL_76:
      v67 = v64;
      goto LABEL_77;
    }
    v28 = (uint64_t)(id)v28;
    if ((swift_isUniquelyReferenced_nonNull_native(v184) & 1) == 0)
      v184 = sub_1002CA600(0, v184[2] + 1, 1, v184);
    v76 = v184[2];
    v75 = v184[3];
    if (v76 >= v75 >> 1)
      v184 = sub_1002CA600((_QWORD *)(v75 > 1), v76 + 1, 1, v184);
    v77 = v184;
    v184[2] = v76 + 1;
    v78 = &v77[3 * v76];
    v78[4] = v28;
    v78[5] = v64;
    v78[6] = v67;
    v79 = objc_msgSend((id)v28, "objectID", v175);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v79);
    v81 = *(_QWORD *)((v198 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v80 = *(_QWORD *)((v198 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v81 >= v80 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1);
    v82 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v81, v79);
    specialized Array._endMutation()(v82);
    v66 = v182;
LABEL_77:

    v64 = v67;
    v28 = v188;
    if (v185 == (uint8_t *)v6)
      goto LABEL_104;
LABEL_78:
    v9 += 8;
    v65 = v64;
    ++v6;
    v64 = (char *)v1;
    if (v29 == v69)
      goto LABEL_179;
  }
  v73 = *(_QWORD *)(v183 + 16);
  if (v6 >= v73)
    goto LABEL_183;
  v28 = (uint64_t)*((id *)v9 - 1);
  if (v6 < (uint64_t)v186)
  {
    if (v69 >= v73)
      goto LABEL_185;
    v72 = *(id *)v9;
    goto LABEL_86;
  }
LABEL_89:
  v1 = -1;
  if (v64 == (char *)-1 || v65 >= v64)
    goto LABEL_93;

  if (v185 != (uint8_t *)v6)
  {
    v28 = v188;
    goto LABEL_78;
  }
  v67 = v64;
  v28 = v188;
LABEL_104:
  v194 = (uint64_t)v67;
  v83 = v175;
  if (v175 >= v67)
  {
    v1 = v180;
    v9 = (char *)v184;
    goto LABEL_144;
  }
  v84 = Logger.logObject.getter(v68);
  v85 = static os_log_type_t.info.getter(v84);
  v86 = os_log_type_enabled(v84, v85);
  v1 = v180;
  if (v86)
  {
    v87 = swift_slowAlloc(22, -1);
    *(_DWORD *)v87 = 134218240;
    *(_QWORD *)&v190[0] = v83;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v190, (char *)v190 + 8);
    *(_WORD *)(v87 + 12) = 2048;
    swift_beginAccess(&v194, v190, 0, 0);
    v192 = v194;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, &v193);
    _os_log_impl((void *)&_mh_execute_header, v84, v85, "Back propagating ordering changes: display order has gone too large in first try. Going to reset from 1 {maxDisplayOrder: %lu, largestDisplayOrder: %lu}", (uint8_t *)v87, 0x16u);
    swift_slowDealloc(v87, -1, -1);
  }
  swift_bridgeObjectRelease();

  v198 = (unint64_t)_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  v6 = v197;
  if ((v197 & 0x8000000000000000) != 0)
    goto LABEL_204;
  if (v197)
  {
    v88 = 0;
    v9 = (char *)_swiftEmptyArrayStorage;
    while (v6 != v88)
    {
      if (v66)
      {
        v90 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v88, v28);
      }
      else
      {
        if (v88 >= *(_QWORD *)(v183 + 16))
          goto LABEL_187;
        v90 = *(id *)(v28 + 8 * v88 + 32);
      }
      v91 = v90;
      ++v88;
      v92 = objc_msgSend(v90, "displayOrder", v175);
      if ((id)v88 != v92)
      {
        v93 = v92;
        v94 = v91;
        if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
          v9 = (char *)sub_1002CA600(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
        v95 = v9;
        v96 = *((_QWORD *)v9 + 2);
        v97 = v95;
        v98 = *((_QWORD *)v95 + 3);
        if (v96 >= v98 >> 1)
          v97 = (char *)sub_1002CA600((_QWORD *)(v98 > 1), v96 + 1, 1, v97);
        *((_QWORD *)v97 + 2) = v96 + 1;
        v99 = &v97[24 * v96];
        v9 = v97;
        *((_QWORD *)v99 + 4) = v94;
        *((_QWORD *)v99 + 5) = v93;
        *((_QWORD *)v99 + 6) = v88;
        v100 = objc_msgSend(v94, "objectID");
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v100);
        v102 = *(_QWORD *)((v198 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v101 = *(_QWORD *)((v198 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v102 >= v101 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v101 > 1);
        v89 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v102, v100);
        specialized Array._endMutation()(v89);
        v66 = v182;
      }

      if (v6 == v88)
        goto LABEL_126;
    }
    goto LABEL_184;
  }
  v9 = (char *)_swiftEmptyArrayStorage;
LABEL_126:
  v103 = v187;
  if ((uint64_t)v187 < v6)
  {
LABEL_205:
    __break(1u);
LABEL_206:
    __break(1u);
LABEL_207:
    __break(1u);
    return;
  }
  if (v6 != (_QWORD)v187)
  {
    v30 = 24;
    while (v6 < v103)
    {
      if (v66)
      {
        v104 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v28);
      }
      else
      {
        if (v6 >= *(_QWORD *)(v183 + 16))
          goto LABEL_194;
        v104 = *(id *)(v28 + 8 * v6 + 32);
      }
      v105 = v104;
      ++v6;
      v106 = objc_msgSend(v104, "displayOrder", v175);
      if ((unint64_t)v106 >= v6)
      {

        goto LABEL_144;
      }
      v107 = v106;
      v108 = v105;
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
        v9 = (char *)sub_1002CA600(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
      v110 = *((_QWORD *)v9 + 2);
      v109 = *((_QWORD *)v9 + 3);
      if (v110 >= v109 >> 1)
        v9 = (char *)sub_1002CA600((_QWORD *)(v109 > 1), v110 + 1, 1, v9);
      *((_QWORD *)v9 + 2) = v110 + 1;
      v111 = &v9[24 * v110];
      *((_QWORD *)v111 + 4) = v108;
      *((_QWORD *)v111 + 5) = v107;
      *((_QWORD *)v111 + 6) = v6;
      v112 = objc_msgSend(v108, "objectID");
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v112);
      v114 = *(_QWORD *)((v198 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v113 = *(_QWORD *)((v198 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v114 >= v113 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v113 > 1);
      v115 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v114, v112);
      specialized Array._endMutation()(v115);

      v103 = v187;
      v66 = v182;
      if ((_QWORD)v187 == v6)
        goto LABEL_144;
    }
    goto LABEL_186;
  }
LABEL_144:
  *(_QWORD *)&v116 = swift_bridgeObjectRelease().n128_u64[0];
  if (!*((_QWORD *)v9 + 2))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v127 = Logger.logObject.getter(v126);
    v128 = static os_log_type_t.error.getter(v127);
    if (os_log_type_enabled(v127, v128))
    {
      v129 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v129 = 0;
      v130 = "Produced empty change logs when trying to back propagated ordering changes to CD reminders, maybe a bug or "
             "should shortcut earlier.";
LABEL_151:
      _os_log_impl((void *)&_mh_execute_header, v127, v128, v130, v129, 2u);
      swift_slowDealloc(v129, -1, -1);
    }
LABEL_152:

    return;
  }
  v117 = (char *)objc_msgSend(*((id *)v9 + 4), "managedObjectContext", v116);
  v118 = v198;
  if (!v117)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v127 = Logger.logObject.getter(v131);
    v128 = static os_log_type_t.error.getter(v127);
    if (os_log_type_enabled(v127, v128))
    {
      v129 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v129 = 0;
      v130 = "backPropagateOrderingChangesToICSDisplayOrder: Failed to obtain an managedObjextContext from a changed reminder";
      goto LABEL_151;
    }
    goto LABEL_152;
  }
  v119 = v117;
  sub_1000151B0(0, (unint64_t *)&unk_100839910, NSPredicate_ptr);
  v188 = sub_10001A630((uint64_t *)&unk_10083A270);
  v120 = swift_allocObject(v188, 72, 7);
  *(_OWORD *)(v120 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v120 + 56) = sub_10001A630((uint64_t *)&unk_100846CB0);
  *(_QWORD *)(v120 + 64) = sub_1000A5F84(&qword_10084C270, (uint64_t *)&unk_100846CB0, (uint64_t)&protocol conformance descriptor for [A]);
  *(_QWORD *)(v120 + 32) = v118;
  v122 = (void *)NSPredicate.init(format:_:)(0x204E4920464C4553, 0xEA00000000004025, v120, v121);
  v123 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v124 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v125 = objc_msgSend((id)swift_getObjCClassFromMetadata(v123), "entity");
  objc_msgSend(v124, "setEntity:", v125);

  objc_msgSend(v124, "setAffectedStores:", 0);
  objc_msgSend(v124, "setPredicate:", v122);
  NSManagedObjectContext.fetch<A>(_:)(v124, v123);

  swift_bridgeObjectRelease();
  v132 = v179;
  v133 = *((_QWORD *)v9 + 2);
  if (v133)
  {
    *(_QWORD *)&v134 = swift_bridgeObjectRetain(v9).n128_u64[0];
    v135 = (uint64_t *)(v9 + 48);
    do
    {
      v136 = (void *)*(v135 - 2);
      v137 = *v135;
      v135 += 3;
      objc_msgSend(v136, "setDisplayOrder:", v137, v134, v175);
      --v133;
    }
    while (v133);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain(v9);
  v139 = Logger.logObject.getter(v138);
  v140 = static os_log_type_t.info.getter(v139);
  if (os_log_type_enabled(v139, (os_log_type_t)v140))
  {
    LODWORD(v183) = v140;
    v186 = v139;
    v141 = (uint8_t *)swift_slowAlloc(12, -1);
    v182 = swift_slowAlloc(32, -1);
    v192 = v182;
    v185 = v141;
    *(_DWORD *)v141 = 136315138;
    v142 = *((_QWORD *)v9 + 2);
    v143 = _swiftEmptyArrayStorage;
    if (v142)
    {
      v181 = v119;
      v191 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v9);
      sub_1001C225C(0, v142, 0);
      v184 = v9;
      v144 = (uint64_t *)(v9 + 48);
      v187 = xmmword_1006A3C40;
      do
      {
        v145 = *(v144 - 1);
        v146 = *v144;
        v147 = (id)*(v144 - 2);
        v148 = objc_msgSend(v147, "identifier");
        if (v148)
        {
          v149 = v148;
          v150 = v177;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v148);

          v151 = 0;
        }
        else
        {
          v151 = 1;
          v150 = v177;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56))(v150, v151, 1, v132);
        v152 = v150;
        v153 = v178;
        sub_1000A5CA8(v152, v178, (uint64_t *)&unk_100839C80);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v153, 1, v132))
        {
          sub_10000882C(v153, (uint64_t *)&unk_100839C80);
          v154 = 0;
          v155 = 0;
        }
        else
        {
          v156 = v176;
          (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v176, v153, v132);
          v157 = sub_10000882C(v153, (uint64_t *)&unk_100839C80);
          v154 = UUID.uuidString.getter(v157);
          v155 = v158;
          (*(void (**)(char *, uint64_t))(v1 + 8))(v156, v132);
        }
        v159 = swift_allocObject(v188, 112, 7);
        *(_OWORD *)(v159 + 16) = v187;
        *(_QWORD *)(v159 + 56) = &type metadata for UInt;
        *(_QWORD *)(v159 + 64) = &protocol witness table for UInt;
        *(_QWORD *)(v159 + 72) = v146;
        *(_QWORD *)(v159 + 32) = v145;
        *(_QWORD *)(v159 + 96) = &type metadata for UInt;
        *(_QWORD *)(v159 + 104) = &protocol witness table for UInt;
        v160 = String.init(format:_:)(0x203E2D2D20756C25, 0xEB00000000756C25, v159);
        v162 = v161;

        v143 = v191;
        if ((swift_isUniquelyReferenced_nonNull_native(v191) & 1) == 0)
        {
          sub_1001C225C(0, v143[2] + 1, 1);
          v143 = v191;
        }
        v164 = v143[2];
        v163 = v143[3];
        if (v164 >= v163 >> 1)
        {
          sub_1001C225C(v163 > 1, v164 + 1, 1);
          v143 = v191;
        }
        v144 += 3;
        v143[2] = v164 + 1;
        v165 = &v143[4 * v164];
        v165[4] = v154;
        v165[5] = v155;
        v165[6] = v160;
        v165[7] = v162;
        --v142;
        v132 = v179;
        v1 = v180;
      }
      while (v142);
      v9 = (char *)v184;
      swift_bridgeObjectRelease();
      v119 = v181;
    }
    v166 = v185;
    v167 = sub_10001A630(&qword_10083F4B8);
    v168 = Array.description.getter(v143, v167);
    v170 = v169;
    swift_bridgeObjectRelease();
    v191 = (_QWORD *)sub_10001A820(v168, v170, (uint64_t *)&v192);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, &v192);
    swift_bridgeObjectRelease_n(v9, 2);
    swift_bridgeObjectRelease();
    v171 = v186;
    _os_log_impl((void *)&_mh_execute_header, v186, (os_log_type_t)v183, "Back propagated ordering changes to CD reminders - {changes: %s}", v166, 0xCu);
    v172 = v182;
    swift_arrayDestroy(v182, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v172, -1, -1);
    swift_slowDealloc(v166, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v9, 2);
  }
}

const char *sub_10053C424()
{
  return "icsDisplayOrder";
}

id sub_10053C430@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "icsDisplayOrder");
  *a2 = result;
  return result;
}

id sub_10053C460(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setIcsDisplayOrder:", *a1);
}

uint64_t sub_10053C474@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10053C4B8(a1, (uint64_t (*)(_QWORD))sub_10038C550, a2);
}

uint64_t sub_10053C490(uint64_t a1, uint64_t a2)
{
  return sub_10037FBA0(a2);
}

uint64_t sub_10053C49C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10053C4B8(a1, (uint64_t (*)(_QWORD))sub_1003CD720, a2);
}

uint64_t sub_10053C4B8@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = a2(*a1);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t sub_10053C4E4(uint64_t a1, uint64_t a2)
{
  return sub_10037FDF8(a2);
}

uint64_t storeEnumTagSinglePayload for REMListStorageCDIngestor.RelationshipOrderingValueKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10053C53C + 4 * byte_1006C1E73[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10053C570 + 4 * byte_1006C1E6E[v4]))();
}

uint64_t sub_10053C570(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10053C578(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10053C580);
  return result;
}

uint64_t sub_10053C58C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10053C594);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10053C598(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10053C5A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMListStorageCDIngestor.RelationshipOrderingValueKey()
{
  return &type metadata for REMListStorageCDIngestor.RelationshipOrderingValueKey;
}

uint64_t storeEnumTagSinglePayload for REMListStorageCDIngestor.OrderableRelationshipKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10053C608 + 4 * byte_1006C1E7D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10053C63C + 4 * byte_1006C1E78[v4]))();
}

uint64_t sub_10053C63C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10053C644(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10053C64CLL);
  return result;
}

uint64_t sub_10053C658(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10053C660);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10053C664(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10053C66C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMListStorageCDIngestor.OrderableRelationshipKey()
{
  return &type metadata for REMListStorageCDIngestor.OrderableRelationshipKey;
}

uint64_t getEnumTagSinglePayload for REMListStorageCDIngestor.RelationshipKey(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for REMListStorageCDIngestor.RelationshipKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_10053C764 + 4 * byte_1006C1E87[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10053C798 + 4 * byte_1006C1E82[v4]))();
}

uint64_t sub_10053C798(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10053C7A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10053C7A8);
  return result;
}

uint64_t sub_10053C7B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10053C7BCLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_10053C7C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10053C7C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMListStorageCDIngestor.RelationshipKey()
{
  return &type metadata for REMListStorageCDIngestor.RelationshipKey;
}

uint64_t storeEnumTagSinglePayload for REMListStorageCDIngestor.ValueKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 37 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 37) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xDB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xDA)
    return ((uint64_t (*)(void))((char *)&loc_10053C830 + 4 * byte_1006C1E91[v4]))();
  *a1 = a2 + 37;
  return ((uint64_t (*)(void))((char *)sub_10053C864 + 4 * byte_1006C1E8C[v4]))();
}

uint64_t sub_10053C864(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10053C86C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10053C874);
  return result;
}

uint64_t sub_10053C880(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10053C888);
  *(_BYTE *)result = a2 + 37;
  return result;
}

uint64_t sub_10053C88C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10053C894(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMListStorageCDIngestor.ValueKey()
{
  return &type metadata for REMListStorageCDIngestor.ValueKey;
}

uint64_t sub_10053C8B0()
{
  return sub_1000A5F84(&qword_10084F3D0, &qword_10084F3D8, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_10053C8E0()
{
  unint64_t result;

  result = qword_10084F3E0;
  if (!qword_10084F3E0)
  {
    result = swift_getWitnessTable(&unk_1006C20F4, &type metadata for REMListStorageCDIngestor.ValueKey);
    atomic_store(result, (unint64_t *)&qword_10084F3E0);
  }
  return result;
}

uint64_t sub_10053C924()
{
  return sub_1000A5F84(&qword_10084F3E8, &qword_10084F3F0, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_10053C954()
{
  unint64_t result;

  result = qword_10084F3F8;
  if (!qword_10084F3F8)
  {
    result = swift_getWitnessTable(&unk_1006C21CC, &type metadata for REMListStorageCDIngestor.RelationshipKey);
    atomic_store(result, (unint64_t *)&qword_10084F3F8);
  }
  return result;
}

uint64_t sub_10053C998()
{
  return sub_1000A5F84(&qword_10084F400, &qword_10084F408, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_10053C9C8()
{
  unint64_t result;

  result = qword_10084F410;
  if (!qword_10084F410)
  {
    result = swift_getWitnessTable(&unk_1006C22A4, &type metadata for REMListStorageCDIngestor.OrderableRelationshipKey);
    atomic_store(result, (unint64_t *)&qword_10084F410);
  }
  return result;
}

uint64_t sub_10053CA0C()
{
  return sub_1000A5F84(&qword_10084F418, &qword_10084F420, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_10053CA3C()
{
  unint64_t result;

  result = qword_10084F428;
  if (!qword_10084F428)
  {
    result = swift_getWitnessTable(&unk_1006C237C, &type metadata for REMListStorageCDIngestor.RelationshipOrderingValueKey);
    atomic_store(result, (unint64_t *)&qword_10084F428);
  }
  return result;
}

_QWORD *sub_10053CA80()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  _QWORD *v21;
  _BYTE v24[40];

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v24[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  v7 = __chkstk_darwin(v6);
  v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v7);
  v11 = &v24[-v10 - 8];
  v12 = objc_msgSend(v1, "identifier");
  if (v12)
  {
    v13 = v12;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v12);

    v14 = 0;
  }
  else
  {
    v14 = 1;
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v9, v14, 1, v2);
  sub_1000A5CA8((uint64_t)v9, (uint64_t)v11, (uint64_t *)&unk_100839C80);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2))
  {
    sub_10000882C((uint64_t)v11, (uint64_t *)&unk_100839C80);
    v15 = 0;
    v16 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 16))(v5, v11, v2);
    v17 = sub_10000882C((uint64_t)v11, (uint64_t *)&unk_100839C80);
    v15 = UUID.uuidString.getter(v17);
    v16 = v18;
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  }
  v19 = objc_msgSend(v1, "accountTypeHost");
  sub_1004EF780((uint64_t)v24);
  v20 = type metadata accessor for RDManualSortIDPersistenceHost();
  v21 = (_QWORD *)swift_allocObject(v20, 80, 7);
  v21[2] = v15;
  v21[3] = v16;
  v21[4] = v19;
  sub_1000A5CA8((uint64_t)v24, (uint64_t)(v21 + 5), &qword_1008484C0);
  return v21;
}

uint64_t sub_10053CC78()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  sub_10000882C(v0 + 40, &qword_1008484C0);
  return swift_deallocClassInstance(v0, 80, 7);
}

uint64_t type metadata accessor for RDManualSortIDPersistenceHost()
{
  return objc_opt_self(_TtC7remindd29RDManualSortIDPersistenceHost);
}

Swift::Int sub_10053CCD4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 16);
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v2);
    String.hash(into:)(v5, v3, v2);
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void sub_10053CD5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v3);
    String.hash(into:)(a1, v4, v3);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_10053CDD4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 16);
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v3);
    String.hash(into:)(v6, v4, v3);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t sub_10053CE58(uint64_t *a1, uint64_t *a2)
{
  return sub_10053CEAC(*a1, *a2);
}

unint64_t sub_10053CE68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10084F4E0;
  if (!qword_10084F4E0)
  {
    v1 = type metadata accessor for RDManualSortIDPersistenceHost();
    result = swift_getWitnessTable(&unk_1006C23F0, v1);
    atomic_store(result, (unint64_t *)&qword_10084F4E0);
  }
  return result;
}

uint64_t sub_10053CEAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a2 + 24);
  result = (v4 | v5) == 0;
  if (v4)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(_QWORD *)(a2 + 16);
    if (v8 == v9 && v4 == v5)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)(v8, v4, v9, v5, 0);
  }
  return result;
}

uint64_t sub_10053CEF8(void *a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v21;

  v4 = swift_allocObject(&unk_1007F9C40, 32, 7);
  *(_QWORD *)(v4 + 16) = a2;
  *(_QWORD *)(v4 + 24) = a1;
  v5 = objc_allocWithZone((Class)REMAccountTypeHost);
  v6 = a1;
  v7 = objc_msgSend(v5, "initWithType:", a2);
  v8 = swift_allocObject(&unk_1007F9C68, 32, 7);
  *(_QWORD *)(v8 + 16) = sub_10053D698;
  *(_QWORD *)(v8 + 24) = v4;
  v9 = swift_allocObject(&unk_1007F9C90, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_10053D6A0;
  *(_QWORD *)(v9 + 24) = v8;
  v10 = swift_allocObject(&unk_1007F9CB8, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_10053D698;
  *(_QWORD *)(v10 + 24) = v4;
  v11 = swift_allocObject(&unk_1007F9CE0, 32, 7);
  *(_QWORD *)(v11 + 16) = sub_10053DB74;
  *(_QWORD *)(v11 + 24) = v10;
  v12 = swift_allocObject(&unk_1007F9D08, 32, 7);
  *(_QWORD *)(v12 + 16) = sub_10053D698;
  *(_QWORD *)(v12 + 24) = v4;
  v13 = swift_allocObject(&unk_1007F9D30, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_10053DB74;
  *(_QWORD *)(v13 + 24) = v12;
  v14 = swift_allocObject(&unk_1007F9D58, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_10053D698;
  *(_QWORD *)(v14 + 24) = v4;
  v15 = swift_allocObject(&unk_1007F9D80, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_10053DB74;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = swift_allocObject(&unk_1007F9DA8, 32, 7);
  *(_QWORD *)(v16 + 16) = sub_10053D698;
  *(_QWORD *)(v16 + 24) = v4;
  v17 = swift_allocObject(&unk_1007F9DD0, 32, 7);
  *(_QWORD *)(v17 + 16) = sub_10053DB74;
  *(_QWORD *)(v17 + 24) = v16;
  v18 = swift_allocObject(&unk_1007F9DF8, 24, 7);
  *(_QWORD *)(v18 + 16) = v6;
  swift_retain_n(v4);
  v19 = v6;
  REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)(&v21, sub_10053D6CC, v9, sub_10053D6CC, v11, sub_10053D6CC, v13, sub_10053D6CC, v15, sub_10053D6CC, v17, sub_10053DB38, v18, 0, 0, 0, 0, &type metadata for Bool);

  swift_release(v9);
  swift_release(v11);
  swift_release(v13);
  swift_release(v15);
  swift_release(v17);
  swift_release(v18);
  swift_release(v4);
  return v21 & 1;
}

uint64_t sub_10053D1FC(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;

  v3 = objc_msgSend(objc_allocWithZone((Class)REMAccountCapabilities), "initWithAccountType:", a1);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMSmartListTypeToday);
  v6 = v5;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v4 == v7 && v6 == v8)
    goto LABEL_13;
  v10 = v8;
  v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 0);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v10);
  if ((v11 & 1) != 0)
    goto LABEL_14;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMSmartListTypeScheduled);
  v6 = v13;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v12 == v14 && v6 == v15)
  {
LABEL_13:
    swift_bridgeObjectRelease_n(v6, 2);
    goto LABEL_14;
  }
  v17 = v15;
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v6, v14, v15, 0);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v17);
  if ((v18 & 1) == 0)
  {
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMSmartListTypeAll);
    v6 = v20;
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
    v23 = v21;
    if (v19 != v22 || v6 != v21)
    {
      v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v6, v22, v21, 0);
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v23);
      if ((v26 & 1) != 0)
        goto LABEL_14;
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMSmartListTypeCompleted);
      v6 = v28;
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
      v31 = v29;
      if (v27 != v30 || v6 != v29)
      {
        v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v6, v30, v29, 0);
        swift_bridgeObjectRelease(v6);
        swift_bridgeObjectRelease(v31);
        if ((v32 & 1) != 0)
          goto LABEL_14;
        v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMSmartListTypeFlagged);
        v35 = v34;
        v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
        v38 = v36;
        if (v33 == v37 && v35 == v36)
        {
          swift_bridgeObjectRelease_n(v35, 2);
        }
        else
        {
          v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v37, v36, 0);
          swift_bridgeObjectRelease(v35);
          swift_bridgeObjectRelease(v38);
          if ((v39 & 1) == 0)
          {
            v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMSmartListTypeAssigned);
            v43 = v42;
            v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
            v46 = v44;
            if (v41 == v45 && v43 == v44)
            {
              swift_bridgeObjectRelease_n(v43, 2);
            }
            else
            {
              v47 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v43, v45, v44, 0);
              swift_bridgeObjectRelease(v43);
              swift_bridgeObjectRelease(v46);
              if ((v47 & 1) == 0)
              {
                v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMSmartListTypeSiriFoundInApps);
                v50 = v49;
                v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
                v53 = v51;
                if (v48 == v52 && v50 == v51)
                {
                  swift_bridgeObjectRelease_n(v50, 2);
                  v24 = 0;
                  goto LABEL_15;
                }
                v54 = _stringCompareWithSmolCheck(_:_:expecting:)(v48, v50, v52, v51, 0);
                swift_bridgeObjectRelease(v50);
                swift_bridgeObjectRelease(v53);
                v24 = 0;
                if ((v54 & 1) != 0)
                  goto LABEL_15;
                v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMSmartListTypeCustom);
                v57 = v56;
                v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
                v60 = v58;
                if (v55 == v59 && v57 == v58)
                {
                  swift_bridgeObjectRelease_n(v57, 2);
                }
                else
                {
                  v61 = _stringCompareWithSmolCheck(_:_:expecting:)(v55, v57, v59, v58, 0);
                  swift_bridgeObjectRelease(v57);
                  swift_bridgeObjectRelease(v60);
                  if ((v61 & 1) == 0)
                  {
                    v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMSmartListTypeTagged);
                    v64 = v63;
                    v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
                    v67 = v65;
                    if (v62 == v66 && v64 == v65)
                    {
                      swift_bridgeObjectRelease_n(v64, 2);
                    }
                    else
                    {
                      v68 = _stringCompareWithSmolCheck(_:_:expecting:)(v62, v64, v66, v65, 0);
                      swift_bridgeObjectRelease(v64);
                      swift_bridgeObjectRelease(v67);
                      if ((v68 & 1) == 0)
                        goto LABEL_14;
                    }
                    v40 = objc_msgSend(v3, "supportsHashtags");
LABEL_25:
                    v24 = (uint64_t)v40;
                    goto LABEL_15;
                  }
                }
                v40 = objc_msgSend(v3, "supportsCustomSmartLists");
                goto LABEL_25;
              }
            }
            v40 = objc_msgSend(v3, "supportsAssignments");
            goto LABEL_25;
          }
        }
        v40 = objc_msgSend(v3, "supportsFlagged");
        goto LABEL_25;
      }
    }
    goto LABEL_13;
  }
LABEL_14:
  v24 = 1;
LABEL_15:

  return v24;
}

uint64_t sub_10053D674()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10053D698()
{
  uint64_t v0;

  return sub_10053D1FC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10053D6A0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_10053D6CC@<X0>(_BYTE *a1@<X8>)
{
  return sub_10053D704(a1);
}

uint64_t sub_10053D6E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10053D704@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2)
    *a1 = result;
  return result;
}

void sub_10053D730(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMSmartListTypeToday);
  v6 = v5;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v4 == v7 && v6 == v8)
    goto LABEL_13;
  v10 = v8;
  v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 0);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v10);
  if ((v11 & 1) != 0)
    goto LABEL_14;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMSmartListTypeFlagged);
  v6 = v13;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v12 == v14 && v6 == v15)
    goto LABEL_13;
  v17 = v15;
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v6, v14, v15, 0);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v17);
  if ((v18 & 1) != 0)
    goto LABEL_14;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMSmartListTypeScheduled);
  v6 = v20;
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v23 = v21;
  if (v19 == v22 && v6 == v21)
    goto LABEL_13;
  v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v6, v22, v21, 0);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v23);
  if ((v25 & 1) != 0)
    goto LABEL_14;
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMSmartListTypeAll);
  v6 = v27;
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v30 = v28;
  if (v26 == v29 && v6 == v28)
    goto LABEL_13;
  v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v6, v29, v28, 0);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v30);
  if ((v31 & 1) != 0)
    goto LABEL_14;
  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMSmartListTypeAssigned);
  v6 = v33;
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v36 = v34;
  if (v32 == v35 && v6 == v34)
    goto LABEL_13;
  v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v6, v35, v34, 0);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v36);
  if ((v37 & 1) != 0)
    goto LABEL_14;
  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMSmartListTypeCustom);
  v6 = v39;
  v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v42 = v40;
  if (v38 == v41 && v6 == v40)
    goto LABEL_13;
  v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v6, v41, v40, 0);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v42);
  if ((v43 & 1) != 0)
    goto LABEL_14;
  v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMSmartListTypeTagged);
  v6 = v45;
  v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v48 = v46;
  if (v44 == v47 && v6 == v46)
    goto LABEL_13;
  v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v44, v6, v47, v46, 0);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v48);
  if ((v49 & 1) != 0)
    goto LABEL_14;
  v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMSmartListTypeCompleted);
  v6 = v51;
  v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v54 = v52;
  if (v50 == v53 && v6 == v52)
  {
LABEL_13:
    swift_bridgeObjectRelease_n(v6, 2);
    goto LABEL_14;
  }
  v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v6, v53, v52, 0);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v54);
  if ((v55 & 1) == 0)
  {
    v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMSmartListTypeSiriFoundInApps);
    v58 = v57;
    v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    v61 = v59;
    if (v56 == v60 && v58 == v59)
    {
      swift_bridgeObjectRelease_n(v58, 2);
      v24 = 1;
      goto LABEL_15;
    }
    v62 = _stringCompareWithSmolCheck(_:_:expecting:)(v56, v58, v60, v59, 0);
    swift_bridgeObjectRelease(v58);
    swift_bridgeObjectRelease(v61);
    if ((v62 & 1) != 0)
    {
      v24 = 1;
      goto LABEL_15;
    }
  }
LABEL_14:
  v24 = 0;
LABEL_15:
  *a2 = v24;
}

uint64_t sub_10053DB14()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10053DB38(char *a1@<X8>)
{
  uint64_t v1;

  sub_10053D730(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10053DB74()
{
  return sub_10053D6A0();
}

uint64_t sub_10053DB88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084F4E8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084F4E8);
  if (qword_100837668 != -1)
    swift_once(&qword_100837668, sub_1004A1918);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872118);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10053DC18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t AssociatedConformanceWitness;
  void *v15;
  uint64_t v17;
  void *v18;

  v4 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v7 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v8);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = __chkstk_darwin(AssociatedTypeWitness);
  v13 = (char *)&v17 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16))(v6, a1, a2, v11);
  dispatch thunk of Sequence.makeIterator()(a2, v8);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, a2, AssociatedTypeWitness, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()(&v18, AssociatedTypeWitness, AssociatedConformanceWitness);
    v15 = v18;
    if (!v18)
      break;
    sub_10053DD6C(v18);

  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

id sub_10053DD6C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t i;
  unint64_t v22;
  uint64_t v23;
  id v24;
  BOOL v25;
  unint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  objc_class *v33;
  _BYTE *v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t *v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  char *v44;
  id v45;
  id v46;
  void *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;
  int v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  id v61;
  void *v62;
  id v63;
  id v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  os_log_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  id v79;
  void *v80;
  uint64_t v81;
  double v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  __int128 v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  os_log_t v106;
  int v107;
  int v108;
  Class v109;
  void *v110;
  uint64_t v111;
  id v112;
  uint64_t v113[2];
  char v114;
  objc_super v115;
  uint64_t v116;
  uint64_t v117;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v7);
  v9 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v11 = __chkstk_darwin(v10).n128_u64[0];
  v13 = (char *)&v90 - v12;
  v14 = objc_msgSend(a1, "ckIdentifier", v11);
  v96 = a1;
  v97 = v1;
  if (v14)
  {
    v15 = v14;
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v18 = v17;

    v111 = v16;
    v19 = sub_10053E650(v16, v18);
    if ((unint64_t)v19 >> 62)
      goto LABEL_44;
    for (i = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter(v88))
    {
      v22 = 0;
      v23 = 0;
      v95 = v19 & 0xC000000000000001;
      v92 = v19 & 0xFFFFFFFFFFFFFF8;
      v91 = v19 + 32;
      *(_QWORD *)&v20 = 136446722;
      v102 = v20;
      v101 = (char *)&type metadata for Any + 8;
      v103 = v18;
      v94 = v19;
      v93 = i;
      while (1)
      {
        if (v95)
        {
          v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v19);
          v25 = __OFADD__(v22, 1);
          v26 = v22 + 1;
          if (v25)
            break;
          goto LABEL_12;
        }
        if (v22 >= *(_QWORD *)(v92 + 16))
          goto LABEL_43;
        v24 = *(id *)(v91 + 8 * v22);
        v25 = __OFADD__(v22, 1);
        v26 = v22 + 1;
        if (v25)
          break;
LABEL_12:
        v99 = v26;
        v27 = v24;
        swift_bridgeObjectRetain(v18);
        sub_10053EA10((uint64_t)&off_1007DE330, v27, v111, v18);
        v29 = v28;
        v98 = v23;
        v112 = v27;

        swift_bridgeObjectRelease(v18);
        v100 = v29;
        v30 = *(_QWORD *)(v29 + 16);
        if (v30)
        {
          v110 = *(void **)(v97 + 16);
          v31 = (unsigned __int8 *)(v100 + 32);
          v109 = (Class)type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter();
          while (1)
          {
            v32 = *v31;
            v33 = v109;
            v34 = objc_allocWithZone(v109);
            v35 = v111;
            v36 = v112;
            *(_QWORD *)&v34[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_reminder] = v112;
            v34[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_field] = v32;
            v37 = v110;
            *(_QWORD *)&v34[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_storeObjectContext] = v110;
            v38 = (uint64_t *)&v34[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_onlySpecificCanonicalName];
            *v38 = v35;
            v38[1] = v18;
            v39 = objc_allocWithZone((Class)RDPersistentStoreLookupForREMCDObject);
            v40 = v36;
            v41 = v37;
            v42 = v40;
            swift_bridgeObjectRetain(v18);
            v43 = v41;
            v44 = v34;
            v45 = objc_msgSend(v39, "init:", v42);
            *(_QWORD *)&v44[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_persistentStoreLookup] = v45;

            v115.receiver = v44;
            v115.super_class = v33;
            v46 = objc_msgSendSuper2(&v115, "init");

            v47 = v46;
            v49 = sub_10012B28C();
            v51 = v50;
            v52 = v48;
            v53 = v48;
            if (!(v48 >> 6))
              goto LABEL_19;
            if (v48 >> 6 == 1)
              break;

LABEL_15:
            ++v31;
            if (!--v30)
              goto LABEL_5;
          }
          v53 = v48 & 0x3F;
LABEL_19:
          v108 = v53;
          if (qword_100837868 != -1)
            swift_once(&qword_100837868, sub_10053DB88);
          v54 = type metadata accessor for Logger(0);
          sub_10001AAA8(v54, (uint64_t)qword_10084F4E8);
          v55 = v42;
          v56 = sub_100166470(v49, v51, v52);
          v57 = Logger.logObject.getter(v56);
          v107 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v57, (os_log_type_t)v107))
          {
            v106 = v57;
            v58 = swift_slowAlloc(32, -1);
            v105 = swift_slowAlloc(96, -1);
            v116 = v105;
            *(_DWORD *)v58 = v102;
            if (v32)
              v59 = 0x7365746F6ELL;
            else
              v59 = 0x656C746974;
            *(_QWORD *)(v58 + 4) = sub_10001A820(v59, 0xE500000000000000, &v116);
            *(_QWORD *)&v60 = swift_bridgeObjectRelease(0xE500000000000000).n128_u64[0];
            *(_WORD *)(v58 + 12) = 2082;
            v61 = objc_msgSend(v55, "remObjectID", v60);
            if (v61)
            {
              v62 = v61;
              v63 = objc_msgSend(v61, "description");
              v104 = v47;
              v64 = v63;

              v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
              v67 = v66;

              v47 = v104;
            }
            else
            {
              v67 = 0xE300000000000000;
              v65 = 7104878;
            }
            *(_QWORD *)(v58 + 14) = sub_10001A820(v65, v67, &v116);

            swift_bridgeObjectRelease(v67);
            *(_WORD *)(v58 + 22) = 2082;
            v113[0] = v49;
            v113[1] = v51;
            v114 = v108;
            v68 = sub_1001664A8();
            v69 = Error.rem_errorDescription.getter(&type metadata for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.AutoConversionError, v68);
            v71 = v70;
            *(_QWORD *)(v58 + 24) = sub_10001A820(v69, v70, &v116);
            swift_bridgeObjectRelease(v71);
            sub_10016648C(v49, v51, v52);
            sub_10016648C(v49, v51, v52);
            v72 = v106;
            _os_log_impl((void *)&_mh_execute_header, v106, (os_log_type_t)v107, "#️⃣ RDUserInitiatedHashtagLabelApprovalTagAutoConvertRunner: Error autoConverting %{public}s on reminder[%{public}s] {error: %{public}s}", (uint8_t *)v58, 0x20u);
            v73 = v105;
            swift_arrayDestroy(v105, 3, v101);
            swift_slowDealloc(v73, -1, -1);
            swift_slowDealloc(v58, -1, -1);

            v18 = v103;
          }
          else
          {

            sub_10016648C(v49, v51, v52);
            sub_10016648C(v49, v51, v52);

          }
          goto LABEL_15;
        }
LABEL_5:

        swift_bridgeObjectRelease(v100);
        v22 = v99;
        a1 = v96;
        v1 = v97;
        v19 = v94;
        v23 = v98;
        if (v99 == v93)
          goto LABEL_48;
      }
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      if (v19 < 0)
        v88 = v19;
      else
        v88 = v19 & 0xFFFFFFFFFFFFFF8;
    }
LABEL_48:
    swift_bridgeObjectRelease(v18);
    *(_QWORD *)&v82 = swift_bridgeObjectRelease(v19).n128_u64[0];
  }
  else
  {
    if (qword_100837868 != -1)
      swift_once(&qword_100837868, sub_10053DB88);
    v74 = type metadata accessor for Logger(0);
    sub_10001AAA8(v74, (uint64_t)qword_10084F4E8);
    v75 = a1;
    v76 = Logger.logObject.getter(v75);
    v77 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v76, v77))
    {
      v78 = (uint8_t *)swift_slowAlloc(12, -1);
      v112 = (id)swift_slowAlloc(32, -1);
      v113[0] = (uint64_t)v112;
      *(_DWORD *)v78 = 136446210;
      v79 = objc_msgSend(v75, "uuidForChangeTracking");
      if (v79)
      {
        v80 = v79;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v79);

        v81 = 0;
      }
      else
      {
        v81 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, v81, 1, v3);
      sub_1000F2CE4((uint64_t)v9, (uint64_t)v13);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v13, 1, v3))
      {
        sub_10000882C((uint64_t)v13, (uint64_t *)&unk_100839C80);
        v83 = 0xE90000000000003ELL;
        v84 = 0x646975752D6F6E3CLL;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v13, v3);
        v85 = sub_10000882C((uint64_t)v13, (uint64_t *)&unk_100839C80);
        v84 = UUID.uuidString.getter(v85);
        v83 = v86;
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      }
      v87 = v112;
      v116 = sub_10001A820(v84, v83, v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117);

      swift_bridgeObjectRelease(v83);
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "#️⃣ RDUserInitiatedHashtagLabelApprovalTagAutoConvertRunner: activity[%{public}s] has nil ckIdentifier. Deleting without further action", v78, 0xCu);
      swift_arrayDestroy(v87, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v87, -1, -1);
      swift_slowDealloc(v78, -1, -1);

      a1 = v96;
    }
    else
    {

    }
    v1 = v97;
  }
  return objc_msgSend(*(id *)(v1 + 16), "deleteObject:", a1, v82);
}

uint64_t sub_10053E650(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  unint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v15;

  v4 = _s10PredicatesOMa(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  v6[16] = 1;
  swift_storeEnumTagMultiPayload(v6, v7, 44);
  swift_bridgeObjectRetain(a2);
  sub_10000D2C0();
  v9 = v8;
  sub_1000CACA8((uint64_t)v6);
  v10 = sub_1000EDE5C();
  v11 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v10), "entity");
  objc_msgSend(v11, "setEntity:", v12);

  objc_msgSend(v11, "setAffectedStores:", 0);
  objc_msgSend(v11, "setPredicate:", v9);

  v13 = NSManagedObjectContext.fetch<A>(_:)(v11, v10);
  return v13;
}

uint64_t sub_10053E9AC()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 25, 7);
}

uint64_t type metadata accessor for RDUserInitiatedHashtagLabelApprovalTagAutoConvertRunner()
{
  return objc_opt_self(_TtC7remindd55RDUserInitiatedHashtagLabelApprovalTagAutoConvertRunner);
}

uint64_t sub_10053E9F0(uint64_t a1, uint64_t a2)
{
  return sub_10053DC18(a1, a2);
}

void sub_10053EA10(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  id v45;
  unint64_t v46;
  _QWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;

  v42 = a3;
  v43 = a4;
  v45 = a2;
  v6 = sub_10001A630((uint64_t *)&unk_10083FBE0);
  v7 = __chkstk_darwin(v6).n128_u64[0];
  v41 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v10 = 0;
    v11 = a1 + 32;
    v12 = _swiftEmptyArrayStorage;
    v37 = *(_QWORD *)(a1 + 16);
    v38 = v4;
    v36 = a1 + 32;
    v13 = (uint64_t)v41;
    do
    {
      v39 = v12;
      v40 = v10;
      v14 = 0;
      if (v10 <= v9)
        v15 = v9;
      else
        v15 = v10;
      v46 = v10 - v15;
      while (1)
      {
        if (!(v46 + v14))
        {
          __break(1u);
          return;
        }
        v44 = *(unsigned __int8 *)(v11 + v10);
        v16 = (v44 & 1) != 0 ? objc_msgSend(v45, "notes", *(double *)&v7) : objc_msgSend(v45, "title", *(double *)&v7);
        v17 = v16;
        v18 = v17;
        if (v17)
        {
          v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
          v21 = v20;

          v48 = v19;
          v49 = v21;
          static Locale.current.getter(v22);
          v23 = type metadata accessor for Locale(0);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v13, 0, 1, v23);
          v24 = sub_1000E525C();
          v25 = StringProtocol.foldedStringForWriting(locale:)(v13, &type metadata for String, v24);
          v27 = v26;
          sub_10000882C(v13, (uint64_t *)&unk_10083FBE0);
          swift_bridgeObjectRelease(v21);
          v48 = v25;
          v49 = v27;
          v47[0] = v42;
          v47[1] = v43;
          LOBYTE(v24) = StringProtocol.contains<A>(_:)(v47, &type metadata for String, &type metadata for String, v24, v24);
          v28 = v27;
          v10 = v40;
          v7 = swift_bridgeObjectRelease(v28).n128_u64[0];
          if ((v24 & 1) != 0)
            break;
        }
        ++v14;
        ++v11;
        if (v10 == --v9)
          return;
      }
      v29 = v39;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v39);
      v12 = v29;
      v50 = v29;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1001C1FF8(0, v29[2] + 1, 1);
        v12 = v50;
      }
      v32 = v12[2];
      v31 = v12[3];
      if (v32 >= v31 >> 1)
      {
        sub_1001C1FF8(v31 > 1, v32 + 1, 1);
        v12 = v50;
      }
      v33 = v10 + 1;
      v10 += 1 + v14;
      v12[2] = v32 + 1;
      *((_BYTE *)v12 + v32 + 32) = v44;
      v34 = v33 == v9;
      v9 = v37;
      v11 = v36;
    }
    while (!v34);
  }
}

uint64_t sub_10053ECB4(_QWORD **a1)
{
  return sub_100466618(*a1);
}

void sub_10053ECCC(void (***a1)(uint64_t, char *, uint64_t))
{
  uint64_t v1;
  void (**v2)(uint64_t, char *, uint64_t);

  v2 = *a1;
  sub_1003BFDF4(*a1);
  if (!v1)
    sub_1003C03A8(v2);
}

double sub_10053ECFC(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  double result;
  ValueMetadata *v8;

  v8 = &_s34PersistentHistoryTruncationHandlerON;
  v4 = sub_10001A630((uint64_t *)&unk_10084F5E0);
  v5 = String.init<A>(describing:)(&v8, v4);
  sub_1005A1B90(a1, v5, v6, a2);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_10053ED84(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  ValueMetadata *v9;

  v9 = &_s34PersistentHistoryTruncationHandlerON_0;
  v5 = sub_10001A630(&qword_10084F5D8);
  v6 = String.init<A>(describing:)(&v9, v5);
  sub_1005A1B90(a1, v6, v7, a2);
  swift_bridgeObjectRelease();
  if (!v2)
  {
    v8 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
    objc_msgSend(v8, "deletePreferredDefaultListObjectIDUrl");

  }
}

void sub_10053EEA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t ObjCClassFromMetadata;
  _BYTE v10[168];

  v2 = sub_10001A630(&qword_10084F5C8);
  inited = swift_initStackObject(v2, v10);
  *(_OWORD *)(inited + 16) = xmmword_1006A5130;
  *(_QWORD *)(inited + 32) = 0xD00000000000001ELL;
  *(_QWORD *)(inited + 40) = 0x8000000100707910;
  *(_QWORD *)(inited + 48) = sub_10053ECB4;
  *(_QWORD *)(inited + 56) = 0;
  v4 = swift_allocObject(&unk_1007F9E38, 24, 7);
  *(_QWORD *)(v4 + 16) = a1;
  v5 = swift_allocObject(&unk_1007F9E60, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_10053F324;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(inited + 64) = 0xD00000000000001DLL;
  *(_QWORD *)(inited + 72) = 0x8000000100707930;
  *(_QWORD *)(inited + 80) = sub_10053F360;
  *(_QWORD *)(inited + 88) = v5;
  *(_QWORD *)(inited + 96) = 0xD000000000000028;
  *(_QWORD *)(inited + 104) = 0x8000000100707950;
  *(_QWORD *)(inited + 112) = sub_10053ECCC;
  *(_QWORD *)(inited + 120) = 0;
  v6 = swift_allocObject(&unk_1007F9E88, 24, 7);
  *(_QWORD *)(v6 + 16) = a1;
  v7 = swift_allocObject(&unk_1007F9EB0, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_10053F384;
  *(_QWORD *)(v7 + 24) = v6;
  *(_QWORD *)(inited + 128) = 0xD000000000000027;
  *(_QWORD *)(inited + 136) = 0x8000000100707980;
  *(_QWORD *)(inited + 144) = sub_10053F3E0;
  *(_QWORD *)(inited + 152) = v7;
  swift_bridgeObjectRetain_n(a1, 2);
  sub_1002B1610(inited);
  v8 = sub_10053F39C();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v8);
  objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  sub_1001C1B0C(0, 13, 0);
  JUMPOUT(0x10053F0D8);
}

uint64_t sub_10053F300()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

double sub_10053F324(void *a1)
{
  uint64_t v1;

  return sub_10053ECFC(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10053F33C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10053F360(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

void sub_10053F384(void *a1)
{
  uint64_t v1;

  sub_10053ED84(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_10053F39C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10084F5D0;
  if (!qword_10084F5D0)
  {
    v1 = objc_opt_self(REMLog);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10084F5D0);
  }
  return result;
}

uint64_t sub_10053F3E0(_QWORD *a1)
{
  return sub_10053F360(a1);
}

uint64_t sub_10053F3F4(void *a1, void *a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  NSObject *v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  id v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  double v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v33 = type metadata accessor for DispatchTimeInterval(0);
  v7 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v9 = (uint64_t *)((char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v34 = type metadata accessor for DispatchTime(0);
  v32 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - v13;
  v15 = sub_10001A630(&qword_100839A10);
  __chkstk_darwin(v15);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = dispatch_group_create();
  dispatch_group_enter(v18);
  v19 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v17, 1, 1, v19);
  v20 = (_QWORD *)swift_allocObject(&unk_1007F9EE8, 64, 7);
  v20[2] = 0;
  v20[3] = 0;
  v20[4] = a1;
  v20[5] = a2;
  v20[6] = v18;
  v20[7] = v3;
  v21 = a1;
  v22 = a2;
  v23 = v18;
  v24 = sub_1000CAAE0((uint64_t)v17, (uint64_t)&unk_10084F698, (uint64_t)v20);
  v25 = swift_release(v24);
  result = static DispatchTime.now()(v25);
  v27 = a3 * 1000.0;
  if ((~COERCE__INT64(a3 * 1000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v27 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v27 < 9.22337204e18)
  {
    *v9 = (uint64_t)v27;
    v28 = v33;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchTimeInterval.milliseconds(_:), v33);
    + infix(_:_:)(v11, v9);
    (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v28);
    v29 = *(void (**)(char *, uint64_t))(v32 + 8);
    v30 = v34;
    v29(v11, v34);
    OS_dispatch_group.wait(timeout:)(v14);

    return ((uint64_t (*)(char *, uint64_t))v29)(v14, v30);
  }
LABEL_7:
  __break(1u);
  return result;
}

char **sub_10053F65C(void *a1, uint64_t a2, char a3, NSObject *a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  char **v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  _QWORD *v21;
  id v22;
  id v23;
  id v24;
  _QWORD *v25;
  id v26;
  char *v27;
  void (**v28)(_QWORD, _QWORD, _QWORD);
  Class isa;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  char **v34;
  unint64_t v35;
  uint64_t i;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t ObjCClassFromMetadata;
  id v46;
  Class v47;
  uint64_t v48;
  uint64_t v49;
  char **v50;
  unint64_t v51;
  id v52;
  id v53;
  uint64_t j;
  id v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  void *v69;
  uint64_t v70;
  id v71;
  unsigned int v72;
  id v73;
  void *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  Class v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  double v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  id v125;
  char *v126;
  void (**v127)(_QWORD, _QWORD, _QWORD);
  char *v128;
  char *v129;
  _QWORD *v130;
  Class v131;
  unint64_t v132;
  Class v133;
  id v134;
  char *v135;
  Class v136;
  uint64_t v137;
  NSObject *v138;
  os_log_type_t v139;
  uint64_t v140;
  uint64_t MetatypeMetadata;
  uint64_t v142;
  unint64_t v143;
  double v144;
  unsigned int v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  id v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  id v157;
  uint64_t v158;
  char *v159;
  _QWORD *v160;
  char **v161;
  uint64_t v162;
  char *v163;
  void (**v164)(_QWORD, _QWORD, _QWORD);
  char *v165;
  os_log_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;

  v6 = v5;
  v169 = a5;
  v166 = a4;
  v10 = (char **)type metadata accessor for Date(0);
  v167 = (unint64_t)*(v10 - 1);
  __chkstk_darwin(v10);
  v165 = (char *)&v157 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)type metadata accessor for UUID(0);
  v164 = (void (**)(_QWORD, _QWORD, _QWORD))*(v12 - 1);
  __chkstk_darwin(v12);
  v163 = (char *)&v157 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v14);
  v16 = (char *)&v157 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  if (a3)
  {
    if (a3 == 1)
    {
      v168 = v5;
      v19 = type metadata accessor for REMCDGroceryOperationQueueItem();
      v20 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v19));
      v21 = v12;
      v22 = a1;
      v23 = objc_msgSend(v20, "initWithContext:", v169);
      objc_msgSend(v23, "setOperationTypeRawValue:", 3);
      v24 = v22;
      v25 = v21;
      v26 = objc_msgSend(v24, "uuid");
      v27 = v163;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

      v28 = v164;
      ((void (**)(char *, char *, _QWORD *))v164)[4](v16, v27, v25);
      ((void (*)(char *, _QWORD, uint64_t, _QWORD *))v28[7])(v16, 0, 1, v25);
      isa = 0;
      if (((unsigned int (*)(char *, uint64_t, _QWORD *))v28[6])(v16, 1, v25) != 1)
      {
        isa = UUID._bridgeToObjectiveC()().super.isa;
        ((void (*)(char *, _QWORD *))v28[1])(v16, v25);
      }
      objc_msgSend(v23, "setListIdentifier:", isa);
      sub_1005455F4(a1, a2, 1);

      sub_1005455F4(a1, a2, 1);
      v30 = v168;
      goto LABEL_84;
    }
    v161 = v10;
    v43 = type metadata accessor for REMCDGroceryOperationQueueItem();
    v44 = (void *)sub_1002A878C((uint64_t)&off_1007DD638, 0, 1);
    v10 = (char **)objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v43);
    v46 = objc_msgSend((id)ObjCClassFromMetadata, "entity");
    objc_msgSend(v10, "setEntity:", v46);

    objc_msgSend(v10, "setAffectedStores:", 0);
    objc_msgSend(v10, "setPredicate:", v44);

    if (qword_1008370F0 != -1)
LABEL_66:
      swift_once(&qword_1008370F0, sub_1002A8F2C);
    sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
    v47 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v10, "setSortDescriptors:", v47);

    objc_msgSend(v10, "setReturnsObjectsAsFaults:", 0);
    v48 = NSManagedObjectContext.fetch<A>(_:)(v10, v43);
    if (v6)
    {

      return v10;
    }
    v32 = v48;
    v164 = (void (**)(_QWORD, _QWORD, _QWORD))ObjCClassFromMetadata;

    v168 = 0;
    if ((unint64_t)v32 >> 62)
      goto LABEL_68;
    v49 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v32);
    if (!v49)
    {
LABEL_27:
      swift_bridgeObjectRelease_n(v32, 2);
      v53 = objc_allocWithZone((Class)v164);
      v23 = objc_msgSend(v53, "initWithContext:", v169);
      objc_msgSend(v23, "setOperationTypeRawValue:", 2);
      objc_msgSend(v23, "setPriorityRawValue:", 30);
      objc_msgSend(v23, "setListIdentifier:", 0);
      objc_msgSend(v23, "setConfigurationData:", 0);

      v30 = v168;
      v10 = v161;
LABEL_84:
      v134 = objc_msgSend(v23, "setAccount:", v166, v157);
      v135 = v165;
      Date.init()(v134);
      v136 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, char **))(v167 + 8))(v135, v10);
      objc_msgSend(v23, "setCreationDate:", v136);

      if (qword_100837870 != -1)
        swift_once(&qword_100837870, sub_100540D80);
      v137 = type metadata accessor for Logger(0);
      sub_10001AAA8(v137, (uint64_t)qword_10084F5F0);
      v10 = (char **)v23;
      v138 = Logger.logObject.getter(v10);
      v139 = static os_log_type_t.default.getter(v138);
      if (os_log_type_enabled(v138, v139))
      {
        v140 = swift_slowAlloc(32, -1);
        v169 = swift_slowAlloc(96, -1);
        v170 = v169;
        *(_DWORD *)v140 = 136446722;
        v172 = v162;
        MetatypeMetadata = swift_getMetatypeMetadata(v162);
        v168 = v30;
        v142 = String.init<A>(describing:)(&v172, MetatypeMetadata);
        v172 = sub_10001A820(v142, v143, &v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173);
        *(_QWORD *)&v144 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v140 + 12) = 2082;
        v145 = objc_msgSend(v10, "operationTypeRawValue", v144);
        v146 = 0x2010003u >> (8 * v145);
        if (v145 >= 4)
          LOBYTE(v146) = 3;
        LOBYTE(v172) = v146;
        v147 = sub_10001A630(&qword_10084F670);
        v148 = Optional.descriptionOrNil.getter(v147);
        v172 = sub_10001A820(v148, v149, &v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173);

        swift_bridgeObjectRelease();
        *(_WORD *)(v140 + 22) = 2082;
        v150 = sub_100126D48();
        v172 = (uint64_t)v150;
        v151 = sub_10001A630((uint64_t *)&unk_100844910);
        v152 = Optional.descriptionOrNil.getter(v151);
        v154 = v153;

        v172 = sub_10001A820(v152, v154, &v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v138, v139, "%{public}s: Inserted grocery operation queue item {operationType: %{public}s, listObjectID: %{public}s}", (uint8_t *)v140, 0x20u);
        v155 = v169;
        swift_arrayDestroy(v169, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v155, -1, -1);
        swift_slowDealloc(v140, -1, -1);

      }
      else
      {

      }
      return v10;
    }
    while (1)
    {
      v6 = 4;
      a2 = (uint64_t)&selRef_isConcealed;
      while (1)
      {
        a1 = (void *)(v6 - 4);
        v50 = (v32 & 0xC000000000000001) != 0
            ? (char **)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, v32)
            : (char **)*(id *)(v32 + 8 * v6);
        v10 = v50;
        v51 = v6 - 3;
        if (__OFADD__(a1, 1))
          break;
        v52 = objc_msgSend(v50, "objectID");
        v12 = objc_msgSend(v52, "isTemporaryID");

        if ((_DWORD)v12)
        {
          swift_bridgeObjectRelease_n(v32, 2);
          return v10;
        }

        ++v6;
        if (v51 == v49)
          goto LABEL_27;
      }
      __break(1u);
LABEL_35:
      v61 = a2 >= 0 ? v31 : a2;
      v62 = a1;
      swift_bridgeObjectRetain(a2);
      v32 = _CocoaArrayWrapper.endIndex.getter(v61);
      v160 = v12;
      if (!v32)
        break;
LABEL_8:
      if (v32 >= 1)
      {
        v34 = v10;
        if ((a2 & 0xC000000000000001) != 0)
        {
          v35 = v6;
          for (i = 0; i != v32; ++i)
          {
            v37 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a2);
            v38 = REMObjectID.codable.getter(v37);
            v39 = swift_unknownObjectRelease(v37);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v39);
            v41 = *(_QWORD *)((v172 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v40 = *(_QWORD *)((v172 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v41 >= v40 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1);
            v42 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v41, v38);
            specialized Array._endMutation()(v42);
          }
          swift_bridgeObjectRelease();
          v6 = v35;
          v10 = v34;
        }
        else
        {
          for (j = 0; j != v32; ++j)
          {
            v55 = *(id *)(a2 + 8 * j + 32);
            v56 = REMObjectID.codable.getter(v55);

            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v57);
            v59 = *(_QWORD *)((v172 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v58 = *(_QWORD *)((v172 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v59 >= v58 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1);
            v60 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v59, v56);
            specialized Array._endMutation()(v60);
          }
          swift_bridgeObjectRelease();
          v10 = v34;
        }
        goto LABEL_40;
      }
      __break(1u);
LABEL_68:
      if (v32 < 0)
        v113 = v32;
      else
        v113 = v32 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v32);
      v49 = _CocoaArrayWrapper.endIndex.getter(v113);
      if (!v49)
        goto LABEL_27;
    }
  }
  else
  {
    v159 = (char *)&v157 - v18;
    v172 = (uint64_t)_swiftEmptyArrayStorage;
    v31 = a2 & 0xFFFFFFFFFFFFFF8;
    if ((unint64_t)a2 >> 62)
      goto LABEL_35;
    v32 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v33 = a1;
    swift_bridgeObjectRetain(a2);
    v160 = v12;
    if (v32)
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
LABEL_40:
  v63 = v172;
  v64 = a1;
  v65 = v169;
  v66 = sub_1002A8FD8((uint64_t)&off_1007DD610, a1);
  if (v6)
  {
    swift_bridgeObjectRelease();

    goto LABEL_80;
  }
  v43 = v66;
  v158 = v63;

  v168 = 0;
  if (!((unint64_t)v43 >> 62))
  {
    v67 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v43);
    if (v67)
      goto LABEL_44;
LABEL_77:
    swift_bridgeObjectRelease_n(v43, 2);
LABEL_78:
    v115 = objc_autoreleasePoolPush();
    v116 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v116, *(unsigned int *)(v116 + 48), *(unsigned __int16 *)(v116 + 52));
    v117 = JSONEncoder.init()();
    v172 = v158;
    v118 = sub_100545760();
    v119 = v168;
    v120 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v172, &type metadata for RDGroceryOperationCategorizeRemindersInList.Configuration, v118);
    v30 = v119;
    if (!v119)
    {
      v122 = v120;
      v169 = v121;
      swift_release(v117);
      v123 = type metadata accessor for REMCDGroceryOperationQueueItem();
      objc_autoreleasePoolPop(v115);
      swift_bridgeObjectRelease();
      v23 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v123)), "initWithContext:", v65);
      objc_msgSend(v23, "setOperationTypeRawValue:", 1);
      objc_msgSend(v23, "setPriorityRawValue:", 20);
      v124 = v64;
      v125 = objc_msgSend(v124, "uuid");
      v126 = v163;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v125);

      v127 = v164;
      v128 = v159;
      v129 = v126;
      v130 = v160;
      ((void (**)(char *, char *, _QWORD *))v164)[4](v159, v129, v160);
      ((void (*)(char *, _QWORD, uint64_t, _QWORD *))v127[7])(v128, 0, 1, v130);
      v131 = 0;
      if (((unsigned int (*)(char *, uint64_t, _QWORD *))v127[6])(v128, 1, v130) != 1)
      {
        v131 = UUID._bridgeToObjectiveC()().super.isa;
        ((void (*)(char *, _QWORD *))v127[1])(v128, v130);
      }
      objc_msgSend(v23, "setListIdentifier:", v131, v157);

      v132 = v169;
      v133 = Data._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v23, "setConfigurationData:", v133);

      sub_1000A71C8(v122, v132);
      goto LABEL_84;
    }
    swift_release(v117);
    objc_autoreleasePoolPop(v115);
    swift_bridgeObjectRelease();
LABEL_80:

    return v10;
  }
  if (v43 < 0)
    v114 = v43;
  else
    v114 = v43 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v43);
  v67 = _CocoaArrayWrapper.endIndex.getter(v114);
  if (!v67)
    goto LABEL_77;
LABEL_44:
  v157 = v64;
  v161 = v10;
  v6 = v43 & 0xC000000000000001;
  ObjCClassFromMetadata = 4;
  v10 = &selRef_isConcealed;
  while (1)
  {
    v12 = (_QWORD *)(ObjCClassFromMetadata - 4);
    if (v6)
      v68 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(ObjCClassFromMetadata - 4, v43);
    else
      v68 = *(id *)(v43 + 8 * ObjCClassFromMetadata);
    v69 = v68;
    v70 = ObjCClassFromMetadata - 3;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_66;
    }
    v71 = objc_msgSend(v68, "objectID");
    v72 = objc_msgSend(v71, "isTemporaryID");

    if (v72)
      break;

    ++ObjCClassFromMetadata;
    if (v70 == v67)
    {
      swift_bridgeObjectRelease_n(v43, 2);
      v10 = v161;
      v65 = v169;
LABEL_56:
      v64 = v157;
      goto LABEL_78;
    }
  }
  v73 = objc_msgSend(v69, "configurationData", swift_bridgeObjectRelease_n(v43, 2).n128_f64[0]);
  v10 = v161;
  v65 = v169;
  if (!v73)
  {

    goto LABEL_56;
  }
  v74 = v73;
  v75 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v73);
  v77 = v76;

  v78 = objc_autoreleasePoolPush();
  v79 = type metadata accessor for JSONDecoder(0);
  v80 = swift_allocObject(v79, *(unsigned int *)(v79 + 48), *(unsigned __int16 *)(v79 + 52));
  v81 = JSONDecoder.init()(v80);
  v82 = sub_1005457A4();
  v83 = v168;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for RDGroceryOperationCategorizeRemindersInList.Configuration, v75, v77, &type metadata for RDGroceryOperationCategorizeRemindersInList.Configuration, v82);
  if (v83)
  {
    swift_release(v81);
    objc_autoreleasePoolPop(v78);
    swift_bridgeObjectRelease();

    sub_1000A71C8(v75, v77);
  }
  else
  {
    swift_release(v81);
    objc_autoreleasePoolPop(v78);
    sub_1001E1C20(v158);
    v84 = v172;
    v85 = objc_autoreleasePoolPush();
    v86 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v86, *(unsigned int *)(v86 + 48), *(unsigned __int16 *)(v86 + 52));
    v87 = JSONEncoder.init()();
    v172 = v84;
    v88 = sub_100545760();
    v89 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v172, &type metadata for RDGroceryOperationCategorizeRemindersInList.Configuration, v88);
    v168 = 0;
    v90 = v89;
    v92 = v91;
    swift_release(v87);
    objc_autoreleasePoolPop(v85);
    swift_bridgeObjectRelease();
    v93 = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v69, "setConfigurationData:", v93);

    if (qword_100837870 != -1)
      swift_once(&qword_100837870, sub_100540D80);
    v94 = type metadata accessor for Logger(0);
    sub_10001AAA8(v94, (uint64_t)qword_10084F5F0);
    v10 = v69;
    v95 = Logger.logObject.getter(v10);
    v96 = static os_log_type_t.default.getter(v95);
    v97 = v96;
    if (os_log_type_enabled(v95, v96))
    {
      v98 = swift_slowAlloc(32, -1);
      v169 = swift_slowAlloc(96, -1);
      v172 = v169;
      *(_DWORD *)v98 = 136446722;
      v166 = v95;
      v99 = sub_1000D92EC(v162);
      LODWORD(v165) = v97;
      v170 = sub_10001A820(v99, v100, &v172);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &v171);
      *(_QWORD *)&v101 = swift_bridgeObjectRelease().n128_u64[0];
      v167 = v92;
      *(_WORD *)(v98 + 12) = 2080;
      v102 = objc_msgSend(v10, "operationTypeRawValue", v101);
      v103 = 0x2010003u >> (8 * v102);
      if (v102 >= 4)
        LOBYTE(v103) = 3;
      LOBYTE(v170) = v103;
      v104 = sub_10001A630(&qword_10084F670);
      v105 = Optional.descriptionOrNil.getter(v104);
      v170 = sub_10001A820(v105, v106, &v172);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &v171);

      swift_bridgeObjectRelease();
      *(_WORD *)(v98 + 22) = 2080;
      v107 = sub_100126D48();
      v170 = (uint64_t)v107;
      v108 = sub_10001A630((uint64_t *)&unk_100844910);
      v109 = Optional.descriptionOrNil.getter(v108);
      v111 = v110;

      v170 = sub_10001A820(v109, v111, &v172);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &v171);

      swift_bridgeObjectRelease();
      v95 = v166;
      _os_log_impl((void *)&_mh_execute_header, v166, (os_log_type_t)v165, "%{public}s: Updated unsaved grocery operation queue item {operationType: %s, listObjectID: %s}", (uint8_t *)v98, 0x20u);
      v112 = v169;
      swift_arrayDestroy(v169, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v112, -1, -1);
      swift_slowDealloc(v98, -1, -1);
      sub_1000A71C8(v75, v77);
      sub_1000A71C8(v90, v167);

    }
    else
    {

      sub_1000A71C8(v75, v77);
      sub_1000A71C8(v90, v92);
    }

  }
  return v10;
}

void sub_100540780(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  _UNKNOWN **v36;
  _QWORD v37[5];

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend((id)objc_opt_self(DABabysitter), "sharedBabysitter");
  if (v10)
  {
    v11 = v10;
    v35 = sub_1000151B0(0, (unint64_t *)&qword_10083EFE8, DABabysitter_ptr);
    v36 = &off_1007F4EC0;
    *(_QWORD *)&v34 = v11;
    sub_10001BCA8(&v34, (uint64_t)v37);
    sub_10000A388(v37, v37[3]);
    sub_100470180(v3);
    if (qword_100837558 != -1)
      swift_once(&qword_100837558, sub_10046FB38);
    v12 = sub_10001AAA8(v6, (uint64_t)qword_10084B820);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v12, v6);
    swift_bridgeObjectRetain_n(a2, 2);
    v13 = v3;
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v30 = a1;
      v31 = v7;
      v32 = a2;
      v16 = swift_slowAlloc(22, -1);
      v29 = swift_slowAlloc(64, -1);
      v33 = v29;
      *(_DWORD *)v16 = 136446466;
      v17 = objc_msgSend(v13, "waiterID");
      if (!v17)
      {

        swift_bridgeObjectRelease(v32);
        __break(1u);
        return;
      }
      v18 = v17;
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v21 = v20;

      *(_QWORD *)&v34 = sub_10001A820(v19, v21, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, (char *)&v34 + 8);

      swift_bridgeObjectRelease(v21);
      *(_WORD *)(v16 + 12) = 2082;
      v22 = v32;
      *(_QWORD *)&v34 = v30;
      *((_QWORD *)&v34 + 1) = v32;
      v23 = sub_10001A630((uint64_t *)&unk_10083A370);
      v24 = Optional.descriptionOrNil.getter(v23);
      v26 = v25;
      *(_QWORD *)&v34 = sub_10001A820(v24, v25, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, (char *)&v34 + 8);
      swift_bridgeObjectRelease_n(v22, 2);
      swift_bridgeObjectRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Reset babysitter for {waiterID: %{public}s, event: %{public}s}", (uint8_t *)v16, 0x16u);
      v27 = v29;
      swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v6);
    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v37);
  }
}

uint64_t sub_100540AD0(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v27 = *(_QWORD *)(v6 - 8);
  v28 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v25 - v15;
  v25 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_scheduler);
  static DispatchTime.now()(v14);
  + infix(_:_:)(v13, a1);
  v26 = *(void (**)(char *, uint64_t))(v10 + 8);
  v26(v13, v9);
  v17 = swift_allocObject(&unk_1007F9F60, 24, 7);
  swift_unknownObjectWeakInit(v17 + 16, v1);
  aBlock[4] = sub_1005459F0;
  v32 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007F9F78;
  v18 = _Block_copy(aBlock);
  v19 = swift_retain(v17);
  static DispatchQoS.unspecified.getter(v19);
  v30 = _swiftEmptyArrayStorage;
  v20 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_10001A630((uint64_t *)&unk_100838000);
  v22 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v21, v22, v3, v20);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v16, v8, v5, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v28);
  v26(v16, v9);
  v23 = v32;
  swift_release(v17);
  return swift_release(v23);
}

uint64_t sub_100540D80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084F5F0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084F5F0);
  if (qword_100837638 != -1)
    swift_once(&qword_100837638, sub_1004A1870);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872088);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_100540E10()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(REMLog), "intelligentGrocery");
  qword_10084F608 = (uint64_t)result;
  return result;
}

void sub_100540E48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    v5 = (uint64_t *)(Strong + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_cancellables);
    swift_beginAccess(Strong + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_cancellables, &v9, 0, 0);
    v6 = *v5;
    if ((v6 & 0xC000000000000001) != 0)
    {
      if (v6 < 0)
        v7 = v6;
      else
        v7 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v6);
      v8 = __CocoaSet.count.getter(v7);
      swift_bridgeObjectRelease(v6);
      if (v8)
        goto LABEL_8;
    }
    else if (*(_QWORD *)(v6 + 16))
    {
      goto LABEL_8;
    }
    sub_100540F0C();
    sub_100541808(1);
LABEL_8:

  }
}

void sub_100540F0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  Swift::Int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(_QWORD, _QWORD, _QWORD, _QWORD);
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t MetatypeMetadata;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  void (*v81)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  id v98;
  uint64_t v99;

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  v3 = sub_10001A630((uint64_t *)&unk_100838070);
  v87 = *(_QWORD *)(v3 - 8);
  v88 = v3;
  __chkstk_darwin(v3);
  v86 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A630((uint64_t *)&unk_10083A960);
  v90 = *(_QWORD *)(v5 - 8);
  v91 = v5;
  __chkstk_darwin(v5);
  v89 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630((uint64_t *)&unk_100838080);
  v93 = *(_QWORD *)(v7 - 8);
  v94 = v7;
  __chkstk_darwin(v7);
  v92 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630(&qword_10083A970);
  __chkstk_darwin(v9);
  v11 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A630((uint64_t *)&unk_10084D060);
  v80 = *(_QWORD *)(v12 - 8);
  v81 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A630((uint64_t *)&unk_10083DB50);
  v82 = *(_QWORD *)(v15 - 8);
  v83 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A630((uint64_t *)&unk_10084D070);
  v84 = *(_QWORD *)(v18 - 8);
  v85 = v18;
  __chkstk_darwin(v18);
  v20 = (char *)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DispatchPredicate(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (uint64_t *)((char *)&v78 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = *(void **)(v1 + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_scheduler);
  *v24 = v25;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v22 + 104))(v24, enum case for DispatchPredicate.onQueue(_:), v21);
  v79 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)(v24);
  (*(void (**)(_QWORD *, uint64_t))(v22 + 8))(v24, v21);
  if ((v25 & 1) != 0)
  {
    v26 = *(void **)(v1 + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_storeController);
    v27 = RDGroceryOperationAuthor;
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(RDGroceryOperationAuthor);
    v95 = v1;
    v30 = v29;
    v31 = sub_10001A630((uint64_t *)&unk_10083A340);
    v32 = swift_allocObject(v31, 48, 7);
    v96 = (char *)ObjectType;
    v33 = v32;
    *(_OWORD *)(v32 + 16) = xmmword_1006A3C00;
    *(_QWORD *)(v32 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    *(_QWORD *)(v33 + 40) = v34;
    v35 = (void *)sub_100399F04(v26, v28, v30, v33);
    swift_bridgeObjectRelease(v30);
    swift_bridgeObjectRelease(v33);
    v36 = sub_1002E6C54((uint64_t)&off_1007E1558);
    swift_arrayDestroy(&unk_1007E1578, 1, &type metadata for String);
    v98 = v35;
    v37 = swift_allocObject(&unk_1007FA050, 24, 7);
    *(_QWORD *)(v37 + 16) = v36;
    swift_bridgeObjectRetain(v36);
    v38 = sub_10001A630((uint64_t *)&unk_10083EF50);
    v39 = sub_10001A630((uint64_t *)&unk_10083DB60);
    v40 = sub_1000A5F84((unint64_t *)&unk_10083EF60, (uint64_t *)&unk_10083EF50, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.map<A>(_:)(sub_100188E48, v37, v38, v39, v40);
    swift_release(v37);
    v41 = sub_1000A5F84((unint64_t *)&unk_10083DB70, (uint64_t *)&unk_10084D060, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v42 = v81;
    Publisher.filter(_:)(sub_1000F27FC, 0, v81, v41);
    (*(void (**)(char *, void (*)(_QWORD, _QWORD, _QWORD, _QWORD)))(v80 + 8))(v14, v42);
    swift_release(v35);
    swift_bridgeObjectRelease(v36);
    v43 = v79;
    v98 = v79;
    v44 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v81 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(v44 - 8) + 56);
    v81(v11, 1, 1, v44);
    v45 = sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
    v80 = v45;
    v46 = sub_1000A5F84(&qword_10083EF70, (uint64_t *)&unk_10083DB50, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
    v47 = sub_1000A5E70();
    v48 = v43;
    v49 = v83;
    Publisher.receive<A>(on:options:)(&v98, v11, v83, v45, v46, v47);
    sub_10000882C((uint64_t)v11, &qword_10083A970);

    (*(void (**)(char *, uint64_t))(v82 + 8))(v17, v49);
    sub_1000A5F84(&qword_10084F6F0, (uint64_t *)&unk_10084D070, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v50 = v95;
    v51 = v85;
    v52 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)(v95, sub_100543550, 0, 0, 0, v85, v96);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v20, v51);
    v53 = v50 + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_cancellables;
    swift_beginAccess(v50 + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_cancellables, &v98, 33, 0);
    AnyCancellable.store(in:)(v53);
    swift_endAccess(&v98);
    swift_release(v52);
    v54 = (void *)sub_100399C74((void *)0xD000000000000015, 0x80000001006F56C0, 0);
    v98 = v54;
    v55 = sub_10001A630((uint64_t *)&unk_10084D080);
    v56 = sub_10001A630((uint64_t *)&unk_100838090);
    v57 = sub_1000A5F84(&qword_100847B20, (uint64_t *)&unk_10084D080, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v58 = v86;
    Publisher.map<A>(_:)(sub_1004A4448, 0, v55, v56, v57);
    v59 = sub_1000A5F84((unint64_t *)&unk_1008380A0, (uint64_t *)&unk_100838070, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v61 = v88;
    v60 = v89;
    Publisher.filter(_:)(sub_1000F27FC, 0, v88, v59);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v58, v61);
    swift_release(v54);
    v98 = v48;
    v81(v11, 1, 1, v44);
    v62 = sub_1000A5F84(&qword_10083EEE0, (uint64_t *)&unk_10083A960, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
    v63 = v48;
    v14 = v96;
    v65 = v91;
    v64 = v92;
    Publisher.receive<A>(on:options:)(&v98, v11, v91, v80, v62, v47);
    sub_10000882C((uint64_t)v11, &qword_10083A970);

    (*(void (**)(char *, uint64_t))(v90 + 8))(v60, v65);
    sub_1000A5F84((unint64_t *)&unk_10083AA00, (uint64_t *)&unk_100838080, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v66 = v94;
    v67 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)(v95, sub_100543574, 0, 0, 0, v94, v14);
    (*(void (**)(char *, uint64_t))(v93 + 8))(v64, v66);
    swift_beginAccess(v53, &v98, 33, 0);
    AnyCancellable.store(in:)(v53);
    swift_endAccess(&v98);
    swift_release(v67);
    if (qword_100837870 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100837870, sub_100540D80);
LABEL_3:
  v68 = type metadata accessor for Logger(0);
  v69 = sub_10001AAA8(v68, (uint64_t)qword_10084F5F0);
  v70 = Logger.logObject.getter(v69);
  v71 = static os_log_type_t.default.getter(v70);
  if (os_log_type_enabled(v70, v71))
  {
    v72 = (uint8_t *)swift_slowAlloc(12, -1);
    v73 = swift_slowAlloc(32, -1);
    v97 = v73;
    v98 = v14;
    *(_DWORD *)v72 = 136446210;
    MetatypeMetadata = swift_getMetatypeMetadata(v14);
    v75 = String.init<A>(describing:)(&v98, MetatypeMetadata);
    v77 = v76;
    v98 = (id)sub_10001A820(v75, v76, &v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99);
    swift_bridgeObjectRelease(v77);
    _os_log_impl((void *)&_mh_execute_header, v70, v71, "%{public}s: Did set up subscriptions", v72, 0xCu);
    swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v73, -1, -1);
    swift_slowDealloc(v72, -1, -1);
  }

}

uint64_t sub_100541808(int a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t MetatypeMetadata;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  int v46;
  uint64_t ObjectType;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v2 = v1;
  v46 = a1;
  ObjectType = swift_getObjectType(v1);
  v3 = sub_10001A630(&qword_100839A10);
  __chkstk_darwin(v3);
  v45 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v5);
  v44 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v42 - v9;
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = *(void **)&v2[OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_scheduler];
  *v14 = v15;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v14);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    swift_once(&qword_100837870, sub_100540D80);
    goto LABEL_4;
  }
  if ((v2[OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_isHandlingOperationQueueItems] & 1) != 0)
    return result;
  v2[OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_isHandlingOperationQueueItems] = 1;
  sub_100543274(0);
  if (qword_100837870 != -1)
    goto LABEL_15;
LABEL_4:
  v18 = type metadata accessor for Logger(0);
  v19 = sub_10001AAA8(v18, (uint64_t)qword_10084F5F0);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc(22, -1);
    v43 = v5;
    v23 = v22;
    v42 = swift_slowAlloc(64, -1);
    v48 = v42;
    *(_DWORD *)v23 = 136446466;
    v49 = ObjectType;
    MetatypeMetadata = swift_getMetatypeMetadata(ObjectType);
    v25 = String.init<A>(describing:)(&v49, MetatypeMetadata);
    v27 = v26;
    v49 = sub_10001A820(v25, v26, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
    swift_bridgeObjectRelease(v27);
    *(_WORD *)(v23 + 12) = 2082;
    if ((v46 & 1) != 0)
      v28 = 1702195828;
    else
      v28 = 0x65736C6166;
    if ((v46 & 1) != 0)
      v29 = 0xE400000000000000;
    else
      v29 = 0xE500000000000000;
    v49 = sub_10001A820(v28, v29, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
    swift_bridgeObjectRelease(v29);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "%{public}s: Began handling grocery operation queue items {isOnLaunch: %{public}s}", (uint8_t *)v23, 0x16u);
    v30 = v42;
    swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    v31 = v23;
    v5 = v43;
    swift_slowDealloc(v31, -1, -1);
  }

  Date.init()(v32);
  v33 = type metadata accessor for TaskPriority(0);
  v34 = (uint64_t)v45;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v45, 1, 1, v33);
  v35 = v44;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v44, v10, v5);
  v36 = *(unsigned __int8 *)(v6 + 80);
  v37 = (v36 + 41) & ~v36;
  v38 = (v7 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
  v39 = swift_allocObject(&unk_1007F9FB0, v38 + 8, v36 | 7);
  *(_QWORD *)(v39 + 16) = 0;
  *(_QWORD *)(v39 + 24) = 0;
  *(_QWORD *)(v39 + 32) = v2;
  *(_BYTE *)(v39 + 40) = v46 & 1;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v39 + v37, v35, v5);
  *(_QWORD *)(v39 + v38) = ObjectType;
  v40 = v2;
  v41 = sub_1000CAAE0(v34, (uint64_t)&unk_10084F6D0, v39);
  swift_release(v41);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, v5);
}

uint64_t sub_100541C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v10;

  v7[9] = a6;
  v7[10] = a7;
  v10 = (_QWORD *)swift_task_alloc(dword_10084F6A4);
  v7[11] = v10;
  *v10 = v7;
  v10[1] = sub_100541CB4;
  return sub_100541F98(a4, a5);
}

uint64_t sub_100541CB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100541D48;
  else
    v3 = sub_100541D18;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100541D18()
{
  uint64_t v0;

  dispatch_group_leave(*(dispatch_group_t *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100541D48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t MetatypeMetadata;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;

  if (qword_100837870 != -1)
    swift_once(&qword_100837870, sub_100540D80);
  v1 = *(_QWORD *)(v0 + 96);
  v2 = type metadata accessor for Logger(0);
  sub_10001AAA8(v2, (uint64_t)qword_10084F5F0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 96);
  if (v6)
  {
    v8 = *(_QWORD *)(v0 + 80);
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(64, -1);
    v17 = v10;
    *(_DWORD *)v9 = 136446466;
    *(_QWORD *)(v0 + 40) = v8;
    MetatypeMetadata = swift_getMetatypeMetadata(v8);
    v12 = String.init<A>(describing:)(v0 + 40, MetatypeMetadata);
    *(_QWORD *)(v0 + 48) = sub_10001A820(v12, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56);
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2082;
    swift_getErrorValue(v7, v0 + 56, v0 + 16);
    v14 = Error.rem_errorDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    *(_QWORD *)(v0 + 64) = sub_10001A820(v14, v15, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s: Failed to handle incomplete grocery operation queue items during unit test {error: %{public}s}", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 96));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  dispatch_group_leave(*(dispatch_group_t *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100541F98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(v3 + 344) = a2;
  *(_QWORD *)(v3 + 352) = v2;
  *(_QWORD *)(v3 + 336) = a1;
  v4 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  *(_QWORD *)(v3 + 360) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 368) = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 376) = swift_task_alloc(v6);
  *(_QWORD *)(v3 + 384) = swift_task_alloc(v6);
  v7 = sub_10001A630(&qword_10084F6A8);
  *(_QWORD *)(v3 + 392) = v7;
  *(_QWORD *)(v3 + 400) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for REMCDGroceryOperationQueueItem.ThreadSafeRepresentation(0);
  *(_QWORD *)(v3 + 408) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 416) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 424) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 432) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 440) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 448) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 456) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 464) = swift_task_alloc(v10);
  *(_DWORD *)(v3 + 568) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  *(_BYTE *)(v3 + 572) = 0;
  return swift_task_switch(sub_1005420B0, 0, 0);
}

uint64_t sub_1005420B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  id v9;
  _QWORD *v10;

  v1 = *(unsigned int *)(v0 + 568);
  v2 = *(_QWORD *)(v0 + 384);
  v3 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 368);
  v5 = *(void **)(v0 + 336);
  v6 = swift_allocObject(&unk_1007F9F10, 24, 7);
  *(_QWORD *)(v0 + 472) = v6;
  *(_QWORD *)(v6 + 16) = v5;
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104);
  *(_QWORD *)(v0 + 480) = v7;
  v7(v2, v1, v3);
  v8 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  v9 = v5;
  v10 = (_QWORD *)swift_task_alloc(v8);
  *(_QWORD *)(v0 + 488) = v10;
  *v10 = v0;
  v10[1] = sub_100542174;
  return NSManagedObjectContext.perform<A>(schedule:_:)(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 384), sub_1005458AC, v6, *(_QWORD *)(v0 + 392));
}

uint64_t sub_100542174()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 488);
  *(_QWORD *)(*(_QWORD *)v1 + 496) = v0;
  swift_task_dealloc(v3);
  v4 = v2[59];
  v5 = v2[48];
  v6 = v2[45];
  v7 = *(void (**)(uint64_t, uint64_t))(v2[46] + 8);
  if (v0)
  {
    v7(v5, v6);
    swift_release(v4);
    v8 = sub_1005427CC;
  }
  else
  {
    v2[63] = v7;
    v7(v5, v6);
    swift_release(v4);
    v8 = sub_10054220C;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_10054220C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t MetatypeMetadata;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  void **v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  id v59;
  id v60;
  _QWORD *v61;
  int *v62;
  uint64_t v63;

  v1 = *(_QWORD *)(v0 + 400);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 416) + 48))(v1, 1, *(_QWORD *)(v0 + 408));
  v3 = *(_QWORD *)(v0 + 464);
  if (v2 == 1)
  {
    v5 = *(_QWORD *)(v0 + 448);
    v4 = *(_QWORD *)(v0 + 456);
    v7 = *(_QWORD *)(v0 + 432);
    v6 = *(_QWORD *)(v0 + 440);
    v8 = *(_QWORD *)(v0 + 424);
    v10 = *(_QWORD *)(v0 + 376);
    v9 = *(_QWORD *)(v0 + 384);
    sub_10000882C(v1, &qword_10084F6A8);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v1);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 572));
  }
  else
  {
    v12 = (__int128 *)(v0 + 16);
    v13 = v0 + 96;
    sub_1005458C4(v1, *(_QWORD *)(v0 + 464));
    if (qword_100837870 != -1)
      swift_once(&qword_100837870, sub_100540D80);
    v15 = *(_QWORD *)(v0 + 456);
    v14 = *(_QWORD *)(v0 + 464);
    v16 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 512) = sub_10001AAA8(v16, (uint64_t)qword_10084F5F0);
    v17 = sub_100545908(v14, v15);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter(v18);
    v20 = os_log_type_enabled(v18, v19);
    v21 = *(_QWORD *)(v0 + 456);
    if (v20)
    {
      v22 = *(_QWORD *)(v0 + 352);
      v23 = swift_slowAlloc(22, -1);
      v24 = swift_slowAlloc(64, -1);
      v63 = v24;
      *(_DWORD *)v23 = 136446466;
      *(_QWORD *)(v0 + 184) = v22;
      MetatypeMetadata = swift_getMetatypeMetadata(v22);
      v26 = String.init<A>(describing:)(v0 + 184, MetatypeMetadata);
      *(_QWORD *)(v0 + 320) = sub_10001A820(v26, v27, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328);
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2082;
      sub_1001270E0();
      *(_QWORD *)(v0 + 328) = sub_10001A820(v28, v29, &v63);
      v13 = v0 + 96;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336);
      v12 = (__int128 *)(v0 + 16);
      swift_bridgeObjectRelease();
      sub_10054594C(v21);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s: Handling incomplete grocery operation queue item with top priority. {groceryOperationQueueItem: %{public}s}", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      sub_10054594C(*(_QWORD *)(v0 + 456));
    }

    sub_100544B00(*(_QWORD *)(v0 + 464));
    sub_100008868(v13, (uint64_t)v12, (uint64_t *)&unk_10084F6B0);
    if (*(_QWORD *)(v0 + 40))
    {
      sub_10001BCA8(v12, v0 + 56);
      v30 = *(_QWORD *)(v0 + 80);
      v31 = *(_QWORD *)(v0 + 88);
      sub_10000A388((_QWORD *)(v0 + 56), v30);
      v32 = *(int **)(v31 + 16);
      v62 = (int *)((char *)v32 + *v32);
      v33 = (_QWORD *)swift_task_alloc(v32[1]);
      *(_QWORD *)(v0 + 520) = v33;
      *v33 = v0;
      v33[1] = sub_10054286C;
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v62)(*(_QWORD *)(v0 + 336), v30, v31);
    }
    else
    {
      v34 = *(_QWORD *)(v0 + 464);
      v35 = *(_QWORD *)(v0 + 448);
      sub_10000882C((uint64_t)v12, (uint64_t *)&unk_10084F6B0);
      v36 = sub_100545908(v34, v35);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.fault.getter();
      v39 = os_log_type_enabled(v37, v38);
      v40 = *(_QWORD *)(v0 + 448);
      if (v39)
      {
        v41 = *(_QWORD *)(v0 + 352);
        v42 = swift_slowAlloc(22, -1);
        v43 = swift_slowAlloc(64, -1);
        v63 = v43;
        *(_DWORD *)v42 = 136446466;
        *(_QWORD *)(v0 + 192) = v41;
        v44 = swift_getMetatypeMetadata(v41);
        v45 = String.init<A>(describing:)(v0 + 192, v44);
        *(_QWORD *)(v0 + 264) = sub_10001A820(v45, v46, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272);
        swift_bridgeObjectRelease();
        *(_WORD *)(v42 + 12) = 2082;
        sub_1001270E0();
        *(_QWORD *)(v0 + 272) = sub_10001A820(v47, v48, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280);
        swift_bridgeObjectRelease();
        sub_10054594C(v40);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "%{public}s: Failed to create grocery operation for grocery operation queue item. {groceryOperationQueueItem: %{public}s}", (uint8_t *)v42, 0x16u);
        swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v42, -1, -1);
      }
      else
      {
        sub_10054594C(*(_QWORD *)(v0 + 448));
      }

      v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 480);
      v50 = *(unsigned int *)(v0 + 568);
      v51 = *(void ***)(v0 + 464);
      v52 = *(_QWORD *)(v0 + 376);
      v53 = *(_QWORD *)(v0 + 360);
      v54 = *(void **)(v0 + 336);
      v55 = *v51;
      *(_QWORD *)(v0 + 536) = *v51;
      v56 = swift_allocObject(&unk_1007F9F38, 32, 7);
      *(_QWORD *)(v0 + 544) = v56;
      *(_QWORD *)(v56 + 16) = v54;
      *(_QWORD *)(v56 + 24) = v55;
      v57 = v55;
      v49(v52, v50, v53);
      v58 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
      v59 = v54;
      v60 = v57;
      v61 = (_QWORD *)swift_task_alloc(v58);
      *(_QWORD *)(v0 + 552) = v61;
      *v61 = v0;
      v61[1] = sub_1005429BC;
      return NSManagedObjectContext.perform<A>(schedule:_:)(v61, *(_QWORD *)(v0 + 376), sub_1005459B4, v56, &type metadata for () + 1);
    }
  }
}

uint64_t sub_1005427CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 456);
  v3 = *(_QWORD *)(v0 + 440);
  v2 = *(_QWORD *)(v0 + 448);
  v5 = *(_QWORD *)(v0 + 424);
  v4 = *(_QWORD *)(v0 + 432);
  v6 = *(_QWORD *)(v0 + 400);
  v8 = *(_QWORD *)(v0 + 376);
  v7 = *(_QWORD *)(v0 + 384);
  swift_task_dealloc(*(_QWORD *)(v0 + 464));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10054286C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 520);
  *(_QWORD *)(*(_QWORD *)v1 + 528) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100542C7C;
  else
    v3 = sub_1005428D0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1005428D0()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  _QWORD *v13;

  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 56));
  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 480);
  v2 = *(unsigned int *)(v0 + 568);
  v3 = *(void ***)(v0 + 464);
  v4 = *(_QWORD *)(v0 + 376);
  v5 = *(_QWORD *)(v0 + 360);
  v6 = *(void **)(v0 + 336);
  v7 = *v3;
  *(_QWORD *)(v0 + 536) = *v3;
  v8 = swift_allocObject(&unk_1007F9F38, 32, 7);
  *(_QWORD *)(v0 + 544) = v8;
  *(_QWORD *)(v8 + 16) = v6;
  *(_QWORD *)(v8 + 24) = v7;
  v9 = v7;
  v1(v4, v2, v5);
  v10 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  v11 = v6;
  v12 = v9;
  v13 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 552) = v13;
  *v13 = v0;
  v13[1] = sub_1005429BC;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v13, *(_QWORD *)(v0 + 376), sub_1005459B4, v8, &type metadata for () + 1);
}

uint64_t sub_1005429BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 552);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 544);
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 504);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 376);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 360);
  *(_QWORD *)(*(_QWORD *)v1 + 560) = v0;
  swift_task_dealloc(v2);
  v4(v5, v6);
  swift_release(v3);
  if (v0)
    v7 = sub_100542FAC;
  else
    v7 = sub_100542A54;
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_100542A54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t MetatypeMetadata;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 464);
  v2 = *(_QWORD *)(v0 + 440);

  v3 = sub_100545908(v1, v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v19 = *(_QWORD *)(v0 + 464);
    v6 = *(_QWORD *)(v0 + 440);
    v7 = *(_QWORD *)(v0 + 352);
    v8 = swift_slowAlloc(22, -1);
    v18 = swift_slowAlloc(64, -1);
    v20 = v18;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 200) = v7;
    MetatypeMetadata = swift_getMetatypeMetadata(v7);
    v10 = String.init<A>(describing:)(v0 + 200, MetatypeMetadata);
    *(_QWORD *)(v0 + 248) = sub_10001A820(v10, v11, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256);
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2082;
    sub_1001270E0();
    *(_QWORD *)(v0 + 256) = sub_10001A820(v12, v13, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264);
    swift_bridgeObjectRelease();
    sub_10054594C(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s: Completed grocery operation queue item with top priority. {groceryOperationQueueItem: %{public}s}", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    sub_10000882C(v0 + 96, (uint64_t *)&unk_10084F6B0);
    v14 = v19;
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 464);
    v16 = *(_QWORD *)(v0 + 440);

    sub_10054594C(v16);
    sub_10000882C(v0 + 96, (uint64_t *)&unk_10084F6B0);
    v14 = v15;
  }
  sub_10054594C(v14);
  *(_BYTE *)(v0 + 572) = 1;
  return swift_task_switch(sub_1005420B0, 0, 0);
}

uint64_t sub_100542C7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t MetatypeMetadata;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  _QWORD *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 528);
  sub_100545908(*(_QWORD *)(v0 + 464), *(_QWORD *)(v0 + 432));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v32 = *(_QWORD *)(v0 + 528);
    v31 = *(_QWORD *)(v0 + 432);
    v5 = *(_QWORD *)(v0 + 352);
    v6 = swift_slowAlloc(32, -1);
    v7 = swift_slowAlloc(96, -1);
    *(_QWORD *)(v0 + 232) = v5;
    v33 = v7;
    v34 = v7;
    *(_DWORD *)v6 = 136446722;
    MetatypeMetadata = swift_getMetatypeMetadata(v5);
    v9 = String.init<A>(describing:)(v0 + 232, MetatypeMetadata);
    *(_QWORD *)(v0 + 280) = sub_10001A820(v9, v10, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288);
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2082;
    sub_1001270E0();
    *(_QWORD *)(v0 + 288) = sub_10001A820(v11, v12, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296);
    swift_bridgeObjectRelease();
    sub_10054594C(v31);
    *(_WORD *)(v6 + 22) = 2082;
    swift_getErrorValue(v32, v0 + 296, v0 + 136);
    v13 = Error.rem_errorDescription.getter(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
    *(_QWORD *)(v0 + 312) = sub_10001A820(v13, v14, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320);
    swift_bridgeObjectRelease();
    swift_errorRelease(v32);
    swift_errorRelease(v32);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s: Failed to complete grocery operation queue item. {groceryOperationQueueItem: %{public}s, error: %{public}s}", (uint8_t *)v6, 0x20u);
    swift_arrayDestroy(v33, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v32);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 528);
    v16 = *(_QWORD *)(v0 + 432);
    swift_errorRelease(v15);
    sub_10054594C(v16);
    swift_errorRelease(v15);
    swift_errorRelease(v15);

  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 56));
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 480);
  v18 = *(unsigned int *)(v0 + 568);
  v19 = *(void ***)(v0 + 464);
  v20 = *(_QWORD *)(v0 + 376);
  v21 = *(_QWORD *)(v0 + 360);
  v22 = *(void **)(v0 + 336);
  v23 = *v19;
  *(_QWORD *)(v0 + 536) = *v19;
  v24 = swift_allocObject(&unk_1007F9F38, 32, 7);
  *(_QWORD *)(v0 + 544) = v24;
  *(_QWORD *)(v24 + 16) = v22;
  *(_QWORD *)(v24 + 24) = v23;
  v25 = v23;
  v17(v20, v18, v21);
  v26 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  v27 = v22;
  v28 = v25;
  v29 = (_QWORD *)swift_task_alloc(v26);
  *(_QWORD *)(v0 + 552) = v29;
  *v29 = v0;
  v29[1] = sub_1005429BC;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v29, *(_QWORD *)(v0 + 376), sub_1005459B4, v24, &type metadata for () + 1);
}

uint64_t sub_100542FAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t MetatypeMetadata;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 560);
  v2 = *(_QWORD *)(v0 + 464);
  v3 = *(_QWORD *)(v0 + 424);

  sub_100545908(v2, v3);
  swift_errorRetain(v1);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(_QWORD *)(v0 + 560);
    v24 = *(_QWORD *)(v0 + 464);
    v8 = *(_QWORD *)(v0 + 424);
    v9 = *(_QWORD *)(v0 + 352);
    v10 = swift_slowAlloc(32, -1);
    v23 = swift_slowAlloc(96, -1);
    v25 = v23;
    *(_DWORD *)v10 = 136446722;
    *(_QWORD *)(v0 + 304) = v9;
    MetatypeMetadata = swift_getMetatypeMetadata(v9);
    v12 = String.init<A>(describing:)(v0 + 304, MetatypeMetadata);
    *(_QWORD *)(v0 + 208) = sub_10001A820(v12, v13, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216);
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2082;
    sub_1001270E0();
    *(_QWORD *)(v0 + 216) = sub_10001A820(v14, v15, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224);
    swift_bridgeObjectRelease();
    sub_10054594C(v8);
    *(_WORD *)(v10 + 22) = 2082;
    swift_getErrorValue(v7, v0 + 224, v0 + 160);
    v16 = Error.rem_errorDescription.getter(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176));
    *(_QWORD *)(v0 + 240) = sub_10001A820(v16, v17, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s: Failed to mark grocery operation queue item as completed. {groceryOperationQueueItem: %{public}s, error: %{public}s}", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy(v23, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v7);
    sub_10000882C(v0 + 96, (uint64_t *)&unk_10084F6B0);
    v18 = v24;
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 560);
    v20 = *(_QWORD *)(v0 + 464);
    v21 = *(_QWORD *)(v0 + 424);

    swift_errorRelease(v19);
    swift_errorRelease(v19);
    sub_10054594C(v21);
    swift_errorRelease(v19);
    sub_10000882C(v0 + 96, (uint64_t *)&unk_10084F6B0);
    v18 = v20;
  }
  sub_10054594C(v18);
  return swift_task_switch(sub_1005420B0, 0, 0);
}

void sub_100543274(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;

  v3 = type metadata accessor for OSSignpostID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100837870 != -1)
    swift_once(&qword_100837870, sub_100540D80);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10001AAA8(v7, (uint64_t)qword_10084F5F0);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "os_transaction INIT {name: com.apple.remindd.RDGroceryOperationQueue.handleIncompleteOperationQueueItems}", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_isHandlingOperationQueueItems) != (a1 & 1))
  {
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_isHandlingOperationQueueItems))
    {
      v12 = os_transaction_create("com.apple.remindd.RDGroceryOperationQueue");
      v13 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_osTransaction);
      *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_osTransaction) = v12;
      v14 = swift_unknownObjectRelease(v13);
      v15 = static os_signpost_type_t.begin.getter(v14);
      if (qword_100837878 != -1)
        swift_once(&qword_100837878, sub_100540E10);
      v16 = qword_10084F608;
      static OSSignpostID.exclusive.getter();
      os_signpost(_:dso:log:name:signpostID:)(v15, &_mh_execute_header, v16, "RDGroceryOperationQueue.handleIncompleteOperationQueueItems", 59, 2, v6);
      v17 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
    else
    {
      v18 = static os_signpost_type_t.end.getter();
      if (qword_100837878 != -1)
        swift_once(&qword_100837878, sub_100540E10);
      v19 = qword_10084F608;
      static OSSignpostID.exclusive.getter();
      os_signpost(_:dso:log:name:signpostID:)(v18, &_mh_execute_header, v19, "RDGroceryOperationQueue.handleIncompleteOperationQueueItems", 59, 2, v6);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      v20 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_osTransaction);
      *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_osTransaction) = 0;
      v17 = swift_unknownObjectRelease(v20);
    }
    v21 = Logger.logObject.getter(v17);
    v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "os_transaction RELEASE {name: com.apple.remindd.RDGroceryOperationQueue.handleIncompleteOperationQueueItems}", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

  }
}

uint64_t sub_100543550()
{
  return sub_100541808(0);
}

void sub_100543574(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = objc_autoreleasePoolPush();
  sub_100540780(0xD00000000000001ALL, 0x8000000100707AD0);
  v3 = objc_msgSend(objc_allocWithZone((Class)REMStore), "initWithDaemonController:", *(_QWORD *)(a1 + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_daemonController));
  objc_msgSend(v3, "requestDownloadGroceryModelAssetsFromTrial");

  objc_autoreleasePoolPop(v2);
}

uint64_t sub_1005435F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v7 + 272) = a6;
  *(_QWORD *)(v7 + 280) = a7;
  *(_BYTE *)(v7 + 368) = a5;
  *(_QWORD *)(v7 + 264) = a4;
  v8 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  *(_QWORD *)(v7 + 288) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 296) = v9;
  *(_QWORD *)(v7 + 304) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10054365C, 0, 0);
}

uint64_t sub_10054365C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  id v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t);

  v1 = *(_QWORD *)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(unsigned __int8 *)(v0 + 368);
  v4 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_storeController), "newBackgroundContextWithAuthor:", RDGroceryOperationAuthor);
  *(_QWORD *)(v0 + 312) = v4;
  if (v3)
    v5 = 0xD00000000000002BLL;
  else
    v5 = 0xD000000000000023;
  if (v3)
    v6 = 0x80000001006F5630;
  else
    v6 = 0x80000001006F5600;
  v7 = swift_allocObject(&unk_1007F9F60, 24, 7);
  swift_unknownObjectWeakInit(v7 + 16, v2);
  v8 = (_QWORD *)swift_allocObject(&unk_1007F9FD8, 40, 7);
  v8[2] = v7;
  v8[3] = v4;
  v8[4] = v1;
  v9 = type metadata accessor for RDSimpleExecutable();
  v10 = (_QWORD *)swift_allocObject(v9, 48, 7);
  *(_QWORD *)(v0 + 320) = v10;
  v10[2] = v5;
  v10[3] = v6;
  v10[4] = &unk_10084F6E0;
  v10[5] = v8;
  *(_QWORD *)(v0 + 40) = v9;
  *(_QWORD *)(v0 + 48) = &off_1007F4EF0;
  *(_QWORD *)(v0 + 16) = v10;
  *(_QWORD *)(v0 + 56) = &off_1007F4EE0;
  v11 = unk_1008473FC;
  v15 = (uint64_t (*)(uint64_t))((char *)&dword_1008473F8 + dword_1008473F8);
  v12 = v4;
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v11);
  *(_QWORD *)(v0 + 328) = v13;
  *v13 = v0;
  v13[1] = sub_1005437E4;
  return v15(v0 + 16);
}

uint64_t sub_1005437E4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 328);
  *(_QWORD *)(*v1 + 336) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100543BC8;
  }
  else
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v2 + 16));
    v4 = sub_100543850;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100543850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 320);

  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 304);
  sub_1005442C0(*(_QWORD *)(v0 + 264), *(_BYTE *)(v0 + 368), *(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005438A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 344);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 352);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 304);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 288);
  *(_QWORD *)(*(_QWORD *)v1 + 360) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_release(v3);
  if (v0)
    v7 = sub_100543FB0;
  else
    v7 = sub_100543938;
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_100543938()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t MetatypeMetadata;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 192);
  if (qword_100837870 != -1)
    swift_once(&qword_100837870, sub_100540D80);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001AAA8(v2, (uint64_t)qword_10084F5F0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 336);
  v8 = *(_QWORD *)(v0 + 320);
  if (v6)
  {
    v23 = *(_QWORD *)(v0 + 320);
    v24 = *(_QWORD *)(v0 + 336);
    v21 = v0 + 256;
    v22 = *(void **)(v0 + 312);
    v9 = *(_QWORD *)(v0 + 280);
    v19 = *(unsigned __int8 *)(v0 + 368);
    v20 = v1;
    v10 = swift_slowAlloc(32, -1);
    v11 = swift_slowAlloc(64, -1);
    v25 = v11;
    *(_DWORD *)v10 = 136446722;
    *(_QWORD *)(v0 + 144) = v9;
    MetatypeMetadata = swift_getMetatypeMetadata(v9);
    v13 = String.init<A>(describing:)(v0 + 144, MetatypeMetadata);
    *(_QWORD *)(v0 + 240) = sub_10001A820(v13, v14, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248);
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2082;
    if (v19)
      v15 = 1702195828;
    else
      v15 = 0x65736C6166;
    if (v19)
      v16 = 0xE400000000000000;
    else
      v16 = 0xE500000000000000;
    *(_QWORD *)(v0 + 248) = sub_10001A820(v15, v16, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v21);
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 22) = 2048;
    *(_QWORD *)(v0 + 256) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v21, v0 + 264);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s: Blocked by babysitter. Batch completed all incomplete grocery operation queue items. {isOnLaunch: %{public}s, affectedCount: %ld}", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v24);
    swift_release(v23);

  }
  else
  {

    swift_release(v8);
    swift_errorRelease(v7);

  }
  v17 = *(_QWORD *)(v0 + 304);
  sub_1005442C0(*(_QWORD *)(v0 + 264), *(_BYTE *)(v0 + 368), *(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280));
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100543BC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t MetatypeMetadata;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 336);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 16));
  swift_getErrorValue(v1, v0 + 136, v0 + 112);
  if ((Error.isREMError(withErrorCode:)(-1003, *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128)) & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 304);
    v3 = *(void **)(v0 + 312);
    v4 = *(_QWORD *)(v0 + 288);
    v5 = *(_QWORD *)(v0 + 296);
    v6 = swift_allocObject(&unk_1007FA000, 24, 7);
    *(_QWORD *)(v0 + 344) = v6;
    *(_QWORD *)(v6 + 16) = v3;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v2, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v4);
    v7 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
    v8 = v3;
    v9 = (_QWORD *)swift_task_alloc(v7);
    *(_QWORD *)(v0 + 352) = v9;
    *v9 = v0;
    v9[1] = sub_1005438A4;
    return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 192, *(_QWORD *)(v0 + 304), sub_100545BEC, v6, &type metadata for Int);
  }
  else
  {
    if (qword_100837870 != -1)
      swift_once(&qword_100837870, sub_100540D80);
    v11 = *(_QWORD *)(v0 + 336);
    v12 = type metadata accessor for Logger(0);
    sub_10001AAA8(v12, (uint64_t)qword_10084F5F0);
    swift_errorRetain(v11);
    v13 = swift_errorRetain(v11);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.fault.getter();
    v16 = os_log_type_enabled(v14, v15);
    v17 = *(_QWORD *)(v0 + 336);
    v18 = *(void **)(v0 + 312);
    if (v16)
    {
      v31 = v0 + 168;
      v19 = *(_QWORD *)(v0 + 280);
      v32 = *(_QWORD *)(v0 + 320);
      v33 = *(void **)(v0 + 312);
      v30 = *(unsigned __int8 *)(v0 + 368);
      v20 = swift_slowAlloc(32, -1);
      v21 = swift_slowAlloc(96, -1);
      v34 = v21;
      *(_DWORD *)v20 = 136446722;
      *(_QWORD *)(v0 + 176) = v19;
      MetatypeMetadata = swift_getMetatypeMetadata(v19);
      v23 = String.init<A>(describing:)(v0 + 176, MetatypeMetadata);
      *(_QWORD *)(v0 + 152) = sub_10001A820(v23, v24, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160);
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2082;
      if (v30)
        v25 = 1702195828;
      else
        v25 = 0x65736C6166;
      if (v30)
        v26 = 0xE400000000000000;
      else
        v26 = 0xE500000000000000;
      *(_QWORD *)(v0 + 160) = sub_10001A820(v25, v26, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v31);
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 22) = 2082;
      swift_getErrorValue(v17, v31, v0 + 88);
      v27 = Error.rem_errorDescription.getter(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
      *(_QWORD *)(v0 + 184) = sub_10001A820(v27, v28, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192);
      swift_bridgeObjectRelease();
      swift_errorRelease(v17);
      swift_errorRelease(v17);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s: Failed to handle incomplete grocery operation queue items. {isOnLaunch: %{public}s, error: %{public}s}", (uint8_t *)v20, 0x20u);
      swift_arrayDestroy(v21, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      swift_errorRelease(v17);
      swift_release(v32);
    }
    else
    {
      swift_release(*(_QWORD *)(v0 + 320));

      swift_errorRelease(v17);
      swift_errorRelease(v17);
      swift_errorRelease(v17);

    }
    v29 = *(_QWORD *)(v0 + 304);
    sub_1005442C0(*(_QWORD *)(v0 + 264), *(_BYTE *)(v0 + 368), *(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280));
    swift_task_dealloc(v29);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100543FB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t MetatypeMetadata;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;

  if (qword_100837870 != -1)
    swift_once(&qword_100837870, sub_100540D80);
  v1 = *(_QWORD *)(v0 + 360);
  v2 = type metadata accessor for Logger(0);
  sub_10001AAA8(v2, (uint64_t)qword_10084F5F0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.fault.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 360);
  v8 = *(_QWORD *)(v0 + 336);
  v9 = *(_QWORD *)(v0 + 320);
  if (v6)
  {
    v25 = *(_QWORD *)(v0 + 320);
    v23 = v0 + 216;
    v10 = *(_QWORD *)(v0 + 280);
    v22 = *(unsigned __int8 *)(v0 + 368);
    v24 = *(void **)(v0 + 312);
    v11 = swift_slowAlloc(32, -1);
    v12 = swift_slowAlloc(96, -1);
    v26 = v12;
    *(_DWORD *)v11 = 136446722;
    *(_QWORD *)(v0 + 224) = v10;
    MetatypeMetadata = swift_getMetatypeMetadata(v10);
    v14 = String.init<A>(describing:)(v0 + 224, MetatypeMetadata);
    *(_QWORD *)(v0 + 200) = sub_10001A820(v14, v15, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208);
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2082;
    if (v22)
      v16 = 1702195828;
    else
      v16 = 0x65736C6166;
    if (v22)
      v17 = 0xE400000000000000;
    else
      v17 = 0xE500000000000000;
    *(_QWORD *)(v0 + 208) = sub_10001A820(v16, v17, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v23);
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 22) = 2082;
    swift_getErrorValue(v7, v23, v0 + 64);
    v18 = Error.rem_errorDescription.getter(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
    *(_QWORD *)(v0 + 232) = sub_10001A820(v18, v19, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s: Failed to batch complete all incomplete grocery operation queue items. {isOnLaunch: %{public}s, error: %{public}s}", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy(v12, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    swift_errorRelease(v7);
    swift_errorRelease(v8);
    swift_release(v25);

  }
  else
  {

    swift_release(v9);
    swift_errorRelease(v8);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  v20 = *(_QWORD *)(v0 + 304);
  sub_1005442C0(*(_QWORD *)(v0 + 264), *(_BYTE *)(v0 + 368), *(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280));
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1005442C0(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t MetatypeMetadata;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_BYTE *)(a1 + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_isHandlingOperationQueueItems);
  *(_BYTE *)(a1 + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_isHandlingOperationQueueItems) = 0;
  sub_100543274(v12);
  if (qword_100837870 != -1)
    swift_once(&qword_100837870, sub_100540D80);
  v13 = type metadata accessor for Logger(0);
  sub_10001AAA8(v13, (uint64_t)qword_10084F5F0);
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(32, -1);
    v26 = swift_slowAlloc(64, -1);
    v27 = v26;
    *(_DWORD *)v17 = 136446722;
    v28 = a4;
    MetatypeMetadata = swift_getMetatypeMetadata(a4);
    v19 = String.init<A>(describing:)(&v28, MetatypeMetadata);
    v28 = sub_10001A820(v19, v20, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2082;
    if ((a2 & 1) != 0)
      v21 = 1702195828;
    else
      v21 = 0x65736C6166;
    if ((a2 & 1) != 0)
      v22 = 0xE400000000000000;
    else
      v22 = 0xE500000000000000;
    v28 = sub_10001A820(v21, v22, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 22) = 2048;
    v28 = Date.rem_elapsedInMilliseconds.getter(v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s: Finished handling grocery operation queue items {isOnLaunch: %{public}s, elapsedSeconds: %f}", (uint8_t *)v17, 0x20u);
    v24 = v26;
    swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

}

uint64_t sub_100544560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[10] = a2;
  v3[11] = a3;
  v3[9] = a1;
  v4 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v3[12] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[13] = v5;
  v3[14] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1005445C4, 0, 0);
}

uint64_t sub_1005445C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  id v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 72) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  *(_QWORD *)(v0 + 120) = Strong;
  if (Strong)
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)REMStore), "initWithDaemonController:", *(_QWORD *)(Strong + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_daemonController));
    *(_QWORD *)(v0 + 128) = v4;
    v5 = (_QWORD *)swift_task_alloc(dword_10084F6A4);
    *(_QWORD *)(v0 + 136) = v5;
    *v5 = v0;
    v5[1] = sub_100544690;
    return sub_100541F98(*(_QWORD *)(v0 + 80), (uint64_t)v4);
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v0 + 112));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100544690(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 136);
  *(_QWORD *)(*v2 + 144) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100544AC0;
  }
  else
  {

    *(_BYTE *)(v4 + 176) = a1 & 1;
    v6 = sub_100544710;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100544710()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;

  if (*(_BYTE *)(v0 + 176) == 1)
  {
    v2 = *(_QWORD *)(v0 + 104);
    v1 = *(_QWORD *)(v0 + 112);
    v3 = *(_QWORD *)(v0 + 96);
    v4 = *(void **)(v0 + 80);
    v5 = swift_allocObject(&unk_1007FA028, 24, 7);
    *(_QWORD *)(v0 + 152) = v5;
    *(_QWORD *)(v5 + 16) = v4;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v3);
    v6 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
    v7 = v4;
    v8 = (_QWORD *)swift_task_alloc(v6);
    *(_QWORD *)(v0 + 160) = v8;
    *v8 = v0;
    v8[1] = sub_10054481C;
    return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 48, *(_QWORD *)(v0 + 112), sub_100545C04, v5, &type metadata for Int);
  }
  else
  {

    swift_task_dealloc(*(_QWORD *)(v0 + 112));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10054481C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_release(v3);
  if (v0)
    v7 = sub_1005448B0;
  else
    v7 = sub_1005448EC;
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_1005448B0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005448EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t MetatypeMetadata;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 48);
  if (qword_100837870 != -1)
    swift_once(&qword_100837870, sub_100540D80);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001AAA8(v2, (uint64_t)qword_10084F5F0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(void **)(v0 + 120);
  if (v6)
  {
    v8 = *(_QWORD *)(v0 + 88);
    v15 = v1;
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    v16 = v10;
    *(_DWORD *)v9 = 136446466;
    *(_QWORD *)(v0 + 40) = v8;
    MetatypeMetadata = swift_getMetatypeMetadata(v8);
    v12 = String.init<A>(describing:)(v0 + 40, MetatypeMetadata);
    *(_QWORD *)(v0 + 56) = sub_10001A820(v12, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64);
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2048;
    *(_QWORD *)(v0 + 64) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s: Batch deleted completed grocery operation queue items. {deletionCount: %ld}", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }

  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100544AC0()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 120);

  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100544B00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = type metadata accessor for REMCDGroceryOperationQueueItem.ThreadSafeRepresentation(0);
  __chkstk_darwin(v2);
  v3 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v3);
  v4 = type metadata accessor for Date(0);
  __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  __chkstk_darwin(v6);
  __asm { BR              X10 }
}

uint64_t sub_100544C24(uint64_t result)
{
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v27;
  id v28;
  id v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  void *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;

  *(_QWORD *)(v11 - 160) = v5;
  v12 = *(void **)(v8 + v2[9]);
  if (!v12)
    goto LABEL_7;
  *(_QWORD *)(v11 - 152) = v1;
  *(_QWORD *)(v11 - 144) = v6;
  *(_QWORD *)(v11 - 168) = v3;
  v13 = result;
  sub_100008868(v8 + v2[7], v4, (uint64_t *)&unk_1008380D0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v4, 1, v13) == 1)
  {
    result = sub_10000882C(v4, (uint64_t *)&unk_1008380D0);
LABEL_6:
    v6 = *(_QWORD *)(v11 - 144);
LABEL_7:
    *(_QWORD *)(v6 + 32) = 0;
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    return result;
  }
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  v15 = v7;
  v16 = *(_QWORD *)(v11 - 152);
  v14(v16, v4, v13);
  v17 = (uint64_t *)(v8 + v2[10]);
  v18 = v17[1];
  if (v18 >> 60 == 15)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v16, v13);
    goto LABEL_6;
  }
  *(_QWORD *)(v11 - 184) = v15;
  *(_QWORD *)(v11 - 176) = v13;
  v19 = *v17;
  v20 = v12;
  sub_1000A70D0(v19, v18);
  v21 = objc_autoreleasePoolPush();
  v22 = type metadata accessor for JSONDecoder(0);
  v23 = swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v24 = JSONDecoder.init()(v23);
  v25 = sub_1005457A4();
  *(_QWORD *)(v11 - 200) = v19;
  *(_QWORD *)(v11 - 192) = v18;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for RDGroceryOperationCategorizeRemindersInList.Configuration, v19, v18, &type metadata for RDGroceryOperationCategorizeRemindersInList.Configuration, v25);
  swift_release(v24);
  objc_autoreleasePoolPop(v21);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v11 - 184) + 16);
  v27 = *(_QWORD *)(v11 - 152);
  ((void (*)(uint64_t, uint64_t, _QWORD))v26)(v10, v27, *(_QWORD *)(v11 - 176));
  type metadata accessor for REMObjectID_Codable(0);
  sub_10009FC50((unint64_t *)&unk_100840EC0, (uint64_t (*)(uint64_t))&type metadata accessor for REMObjectID_Codable, (uint64_t)&protocol conformance descriptor for NSObject);
  v28 = v20;
  v29 = *(id *)(v11 - 160);
  v31 = Array<A>.removingDuplicates()(v30);
  swift_bridgeObjectRelease();
  if ((unint64_t)v31 >> 62)
  {
    if (v31 < 0)
      v43 = v31;
    else
      v43 = v31 & 0xFFFFFFFFFFFFFF8;
    v44 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    swift_bridgeObjectRetain(v31);
    v33 = _bridgeCocoaArray<A>(_:)(v43, v44);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain(v31);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v32);
    sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    v33 = v31;
  }
  v34 = swift_bridgeObjectRelease();
  v35 = *(_QWORD *)(v11 - 176);
  v26(v9, v10, v35, v34);
  v36 = objc_msgSend((id)objc_opt_self(ICCloudConfiguration), "sharedConfiguration");
  v37 = type metadata accessor for RDGroceryOperationCategorizeRemindersInList(0);
  v38 = swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
  v39 = sub_100545630((uint64_t)v28, v33, v9, (uint64_t)v29, (uint64_t)v36, (uint64_t)&unk_10084F6C0, 0, v38);
  v40 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 184) + 8);
  v40(v10, v35);
  v41 = v28;
  v42 = *(uint64_t **)(v11 - 144);
  v42[3] = v37;
  v42[4] = (uint64_t)&off_1007EBAA0;
  sub_1000A71B4(*(_QWORD *)(v11 - 200), *(_QWORD *)(v11 - 192));

  *v42 = v39;
  return ((uint64_t (*)(uint64_t, uint64_t))v40)(v27, v35);
}

uint64_t sub_100545298(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_1005452B0, 0, 0);
}

uint64_t sub_1005452B0(__n128 a1)
{
  uint64_t v1;
  char *v2;

  v2 = sub_100673B80(*(_QWORD *)(v1 + 16), *(void (**)(char *, uint64_t))(v1 + 24), 0xD000000000000019, 0x80000001006F9290, a1);
  return (*(uint64_t (**)(char *))(v1 + 8))(v2);
}

char *sub_100545314(uint64_t a1, void (*a2)(char *, uint64_t), __n128 a3)
{
  return sub_100673B80(a1, a2, 0xD00000000000001ALL, 0x8000000100707A40, a3);
}

void sub_100545340(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  sub_1002A937C();
  if (!v1)
  {
    if (v3)
    {
      sub_100126F00(v3, a1);
      v4 = type metadata accessor for REMCDGroceryOperationQueueItem.ThreadSafeRepresentation(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, 0, 1, v4);
    }
    else
    {
      v5 = type metadata accessor for REMCDGroceryOperationQueueItem.ThreadSafeRepresentation(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, 1, 1, v5);
    }
  }
}

void sub_1005453B8(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  unsigned int v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;

  v16 = 0;
  v3 = objc_msgSend(a1, "existingObjectWithID:error:", a2, &v16);
  v4 = v16;
  if (v3)
  {
    v5 = v3;
    v6 = type metadata accessor for REMCDGroceryOperationQueueItem();
    v7 = (void *)swift_dynamicCastClass(v5, v6);
    v8 = v4;
    if (v7)
    {
      objc_msgSend(v7, "setIsCompleted:", 1);
      v16 = 0;
      v9 = objc_msgSend(a1, "save:", &v16);
      v10 = v16;
      if (v9)
      {
        v11 = v16;
      }
      else
      {
        v14 = v16;
        _convertNSErrorToError(_:)(v10);

        swift_willThrow(v15);
      }
    }

  }
  else
  {
    v12 = v16;
    _convertNSErrorToError(_:)(v4);

    swift_willThrow(v13);
  }
}

id sub_1005454F0@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id result;

  type metadata accessor for REMCDGroceryOperationQueueItem();
  result = sub_1002A8A00(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t type metadata accessor for RDGroceryOperationQueue()
{
  return objc_opt_self(_TtC7remindd23RDGroceryOperationQueue);
}

void sub_1005455F4(void *a1, uint64_t a2, char a3)
{
  if (a3 == 1)
  {

  }
  else if (!a3)
  {

    swift_bridgeObjectRelease(a2);
  }
}

uint64_t sub_100545630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[5];

  v23[3] = sub_1000151B0(0, &qword_100838058, off_1007D6260);
  v23[4] = &off_1007E2D20;
  v23[0] = a5;
  *(_BYTE *)(a8 + 16) = 0;
  *(_QWORD *)(a8 + 24) = a1;
  *(_QWORD *)(a8 + 32) = a2;
  v16 = a8 + OBJC_IVAR____TtC7remindd43RDGroceryOperationCategorizeRemindersInList_queuedAt;
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v16, a3, v17);
  *(_QWORD *)(a8 + 40) = a4;
  sub_100018618((uint64_t)v23, a8 + OBJC_IVAR____TtC7remindd43RDGroceryOperationCategorizeRemindersInList_classifierConfiguration);
  *(_QWORD *)(a8 + 48) = a6;
  *(_QWORD *)(a8 + 56) = a7;
  v19 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v23);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a3, v17);
  v20 = type metadata accessor for RDFeedbackProvider();
  v21 = swift_allocObject(v20, 24, 7);
  *(_QWORD *)(v21 + 16) = v19;
  *(_QWORD *)(a8 + 64) = v21;
  return a8;
}

unint64_t sub_100545760()
{
  unint64_t result;

  result = qword_10084F678;
  if (!qword_10084F678)
  {
    result = swift_getWitnessTable(&unk_1006B2248, &type metadata for RDGroceryOperationCategorizeRemindersInList.Configuration);
    atomic_store(result, (unint64_t *)&qword_10084F678);
  }
  return result;
}

unint64_t sub_1005457A4()
{
  unint64_t result;

  result = qword_10084F680;
  if (!qword_10084F680)
  {
    result = swift_getWitnessTable(&unk_1006B2220, &type metadata for RDGroceryOperationCategorizeRemindersInList.Configuration);
    atomic_store(result, (unint64_t *)&qword_10084F680);
  }
  return result;
}

uint64_t sub_1005457E8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100545824()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = v0[4];
  v3 = v0[5];
  v5 = v0[6];
  v4 = v0[7];
  v6 = (_QWORD *)swift_task_alloc(dword_10084F694);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_1000CB064;
  v6[9] = v5;
  v6[10] = v4;
  v7 = (_QWORD *)swift_task_alloc(dword_10084F6A4);
  v6[11] = v7;
  *v7 = v6;
  v7[1] = sub_100541CB4;
  return sub_100541F98(v2, v3);
}

void sub_1005458AC(uint64_t a1@<X8>)
{
  sub_100545340(a1);
}

uint64_t sub_1005458C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for REMCDGroceryOperationQueueItem.ThreadSafeRepresentation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100545908(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for REMCDGroceryOperationQueueItem.ThreadSafeRepresentation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10054594C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for REMCDGroceryOperationQueueItem.ThreadSafeRepresentation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100545988()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1005459B4()
{
  uint64_t v0;

  sub_1005453B8(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1005459CC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1005459F0()
{
  uint64_t v0;

  sub_100540E48(v0);
}

uint64_t sub_1005459F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 41) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100545A80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = *(_QWORD *)(v1 + 32);
  v9 = *(_BYTE *)(v1 + 40);
  v10 = v1 + v5;
  v11 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc(dword_10084F6CC);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_1000CAD70;
  return sub_1005435F4(a1, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_100545B3C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100545B68()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_10084F6DC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1000CAD70;
  return sub_100544560(v2, v3, v4);
}

uint64_t sub_100545BC8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_100545BEC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1005454F0(*(void **)(v1 + 16), a1);
}

id sub_100545C04@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  id result;

  result = sub_1002A9610(*(void **)(v1 + 16));
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t sub_100545C30()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100545C5C(uint64_t a1, void *a2, char a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint8_t *v19;
  _QWORD *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  NSString v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  _QWORD *v31;
  id v32;
  id v33;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  unint64_t v37;
  NSString v38;
  id v39;
  void *v40;
  Swift::String v41;
  Swift::String v42;
  unint64_t v43;
  NSString v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;

  v7 = v6;
  if (qword_100837880 != -1)
    swift_once(&qword_100837880, sub_100547F80);
  v13 = type metadata accessor for Logger(0);
  sub_10001AAA8(v13, (uint64_t)qword_10084F6F8);
  v14 = swift_bridgeObjectRetain_n(a2, 2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v45 = v7;
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v48 = v18;
    *(_DWORD *)v17 = 136446210;
    swift_bridgeObjectRetain(a2);
    v47 = sub_10001A820(a1, (unint64_t)a2, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "RDAccountUtils: Updating account {accountID: %{public}s}", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    v19 = v17;
    v7 = v45;
    swift_slowDealloc(v19, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v20 = (_QWORD *)swift_allocObject(&unk_1007FA6C0, 40, 7);
  v20[2] = a4;
  v20[3] = a5;
  v20[4] = a6;
  v21 = (void *)objc_opt_self(REMAppleAccountUtilities);
  swift_retain();
  v22 = a4;
  v23 = objc_msgSend(v21, "sharedInstance");
  v24 = objc_msgSend(v23, "accountStore");

  v25 = String._bridgeToObjectiveC()();
  v26 = objc_msgSend(v24, "accountWithIdentifier:", v25);

  if (v26)
  {
    v29 = sub_10054C1C0(v27, v28);
    if (v29)
    {
      v30 = v29;
      v31 = (_QWORD *)swift_allocObject(&unk_1007FA6E8, 56, 7);
      v31[2] = v7;
      v31[3] = v26;
      v31[4] = v30;
      v31[5] = sub_10056813C;
      v31[6] = v20;
      swift_retain();
      v32 = v26;
      v33 = v30;
      swift_retain();
      sub_10055381C(a3 & 1, (uint64_t)sub_100568180, (uint64_t)v31);
      swift_release(v20);

      swift_release(v31);
      return;
    }
    v40 = (void *)objc_opt_self(REMError);
    v48 = 0;
    v49 = 0xE000000000000000;
    _StringGuts.grow(_:)(70);
    v41._countAndFlagsBits = 0xD000000000000044;
    v41._object = (void *)0x8000000100707E40;
    String.append(_:)(v41);
    v42._countAndFlagsBits = a1;
    v42._object = a2;
    String.append(_:)(v42);
    v43 = v49;
    v44 = String._bridgeToObjectiveC()();
    v39 = objc_msgSend(v40, "internalErrorWithDebugDescription:", v44, swift_bridgeObjectRelease(v43).n128_f64[0]);

    sub_10054D66C(0, 0, (uint64_t)v39, (uint64_t)v22, a5, a6, (uint64_t)&unk_1007FA990, (uint64_t)sub_1005682BC, (uint64_t)&unk_1007FA9A8);
    swift_release(v20);

  }
  else
  {
    v34 = (void *)objc_opt_self(REMError);
    v48 = 0;
    v49 = 0xE000000000000000;
    _StringGuts.grow(_:)(66);
    v35._object = (void *)0x8000000100707DF0;
    v35._countAndFlagsBits = 0xD000000000000040;
    String.append(_:)(v35);
    v36._countAndFlagsBits = a1;
    v36._object = a2;
    String.append(_:)(v36);
    v37 = v49;
    v38 = String._bridgeToObjectiveC()();
    v39 = objc_msgSend(v34, "internalErrorWithDebugDescription:", v38, swift_bridgeObjectRelease(v37).n128_f64[0]);

    sub_10054D66C(0, 0, (uint64_t)v39, (uint64_t)v22, a5, a6, (uint64_t)&unk_1007FA990, (uint64_t)sub_1005682BC, (uint64_t)&unk_1007FA9A8);
    swift_release(v20);

  }
}

void sub_100546138(uint64_t a1, unint64_t a2, char a3, char a4, char a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  NSString v24;
  id v25;
  char v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  char v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  id v52;
  char v53;
  uint64_t v55;
  uint64_t aBlock[5];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  if (qword_100837880 != -1)
    swift_once(&qword_100837880, sub_100547F80);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10001AAA8(v14, (uint64_t)qword_10084F6F8);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "RDAccountUtils: Process migration state change", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = (_QWORD *)swift_allocObject(&unk_1007FAE90, 40, 7);
  v19[2] = a6;
  v19[3] = a7;
  v19[4] = a8;
  v20 = (void *)objc_opt_self(REMAppleAccountUtilities);
  v21 = a6;
  swift_retain();
  v22 = objc_msgSend(v20, "sharedInstance");
  v23 = objc_msgSend(v22, "accountStore");

  v24 = String._bridgeToObjectiveC()();
  v25 = objc_msgSend(v23, "accountWithIdentifier:", v24);

  if (!v25)
    goto LABEL_14;
  v53 = a3;
  v26 = a4;
  v27 = objc_msgSend(v25, "accountType");
  if (!v27)
  {
    __break(1u);
    return;
  }
  v28 = v27;
  v29 = objc_msgSend(v27, "identifier");

  if (!v29)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierAppleAccount);
    v35 = v38;
    goto LABEL_13;
  }
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v32 = v31;

  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierAppleAccount);
  v35 = v34;
  if (!v32)
  {
LABEL_13:

    swift_bridgeObjectRelease(v35);
    goto LABEL_14;
  }
  if (v30 == v33 && v32 == v34)
  {
    swift_bridgeObjectRelease_n(v32, 2);
    v37 = v26;
    goto LABEL_18;
  }
  v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v32, v33, v34, 0);
  swift_bridgeObjectRelease(v32);
  v36 = swift_bridgeObjectRelease(v35).n128_u64[0];
  v37 = v26;
  if ((v44 & 1) == 0)
  {

LABEL_14:
    v39 = swift_bridgeObjectRetain_n(a2, 2);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = swift_slowAlloc(32, -1);
      aBlock[0] = v43;
      *(_DWORD *)v42 = 136446210;
      swift_bridgeObjectRetain(a2);
      v59 = sub_10001A820(a1, a2, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "RDAccountUtils: No ACAccount is found for updating migration state {acAccountID: %{public}s}", v42, 0xCu);
      swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);
      swift_release(v19);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
      swift_release(v19);
    }
    return;
  }
LABEL_18:
  if ((v53 & 1) != 0 && (objc_msgSend(v25, "rem_didChooseToMigrate") & 1) == 0)
  {
    v45 = sub_100552370(v25);
    if (v46)
    {
      v47 = v46;
      sub_10054EA18((uint64_t)v45, v46);
      v36 = swift_bridgeObjectRelease(v47).n128_u64[0];
    }
  }
  v48 = objc_msgSend(v20, "sharedInstance", *(double *)&v36);
  v49 = swift_allocObject(&unk_1007FAEB8, 56, 7);
  *(_QWORD *)(v49 + 16) = v25;
  *(_BYTE *)(v49 + 24) = a5 & 1;
  *(_QWORD *)(v49 + 32) = v55;
  *(_QWORD *)(v49 + 40) = sub_100568694;
  *(_QWORD *)(v49 + 48) = v19;
  aBlock[4] = (uint64_t)sub_1005686FC;
  v58 = v49;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1001BCC34;
  aBlock[3] = (uint64_t)&unk_1007FAED0;
  v50 = _Block_copy(aBlock);
  v51 = v58;
  v52 = v25;
  swift_retain();
  swift_retain();
  swift_release(v51);
  objc_msgSend(v48, "saveDidChooseToMigrate:didFinishMigration:toACAccount:inStore:completionHandler:", v53 & 1, v37 & 1, v52, v23, v50);
  _Block_release(v50);
  swift_release(v19);

}

void sub_100546670(char a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  void *v22;
  NSString v23;
  id v24;

  v5 = v4;
  if (qword_100837880 != -1)
    swift_once(&qword_100837880, sub_100547F80);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_10001AAA8(v10, (uint64_t)qword_10084F6F8);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "RDAccountUtils: Updating system accounts", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  v15 = (_QWORD *)swift_allocObject(&unk_1007FA9E0, 40, 7);
  v15[2] = a2;
  v15[3] = a3;
  v15[4] = a4;
  swift_retain();
  v16 = a2;
  v18 = sub_10054C1C0((uint64_t)v16, v17);
  if (v18)
  {
    v19 = v18;
    v20 = swift_allocObject(&unk_1007FAA08, 49, 7);
    *(_QWORD *)(v20 + 16) = v5;
    *(_QWORD *)(v20 + 24) = v19;
    *(_QWORD *)(v20 + 32) = sub_1005682C4;
    *(_QWORD *)(v20 + 40) = v15;
    *(_BYTE *)(v20 + 48) = a1 & 1;
    swift_retain();
    v21 = v19;
    swift_retain();
    sub_10055381C(1, (uint64_t)sub_10056834C, v20);
    swift_release(v15);

    swift_release(v20);
  }
  else
  {
    v22 = (void *)objc_opt_self(REMError);
    v23 = String._bridgeToObjectiveC()();
    v24 = objc_msgSend(v22, "internalErrorWithDebugDescription:", v23);

    sub_10054D66C(0, 0, (uint64_t)v24, (uint64_t)v16, a3, a4, (uint64_t)&unk_1007FADA0, (uint64_t)sub_1005682BC, (uint64_t)&unk_1007FADB8);
    swift_release(v15);

  }
}

void sub_1005468C8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  id v16;
  void *v17;
  _QWORD *v18;
  id v19;
  void *v20;
  NSString v21;
  id v22;

  v4 = v3;
  if (qword_100837880 != -1)
    swift_once(&qword_100837880, sub_100547F80);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_10001AAA8(v8, (uint64_t)qword_10084F6F8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDAccountUtils: Remove orphaned accounts", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = (_QWORD *)swift_allocObject(&unk_1007FA378, 40, 7);
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = a3;
  swift_retain();
  v14 = a1;
  v16 = sub_10054C1C0((uint64_t)v14, v15);
  if (v16)
  {
    v17 = v16;
    v18 = (_QWORD *)swift_allocObject(&unk_1007FA3A0, 48, 7);
    v18[2] = v4;
    v18[3] = v17;
    v18[4] = sub_100565930;
    v18[5] = v13;
    swift_retain();
    v19 = v17;
    swift_retain();
    sub_10055381C(1, (uint64_t)sub_100565944, (uint64_t)v18);
    swift_release(v13);

    swift_release(v18);
  }
  else
  {
    v20 = (void *)objc_opt_self(REMError);
    v21 = String._bridgeToObjectiveC()();
    v22 = objc_msgSend(v20, "internalErrorWithDebugDescription:", v21);

    sub_10054FBF4(0, (uint64_t)v22, (uint64_t)v14, a2, a3);
    swift_release(v13);

  }
}

void sub_100546AF4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  unint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  NSString v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  NSString v35;
  id v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  unint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[24];
  uint64_t v56;
  uint64_t v57;

  if (qword_100837880 != -1)
    swift_once(&qword_100837880, sub_100547F80);
  v53 = a1;
  v10 = type metadata accessor for Logger(0);
  sub_10001AAA8(v10, (uint64_t)qword_10084F6F8);
  swift_bridgeObjectRetain_n(a2, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = a2;
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v54 = v16;
    *(_DWORD *)v15 = 136446210;
    swift_bridgeObjectRetain(v14);
    v56 = sub_10001A820(v53, v14, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
    swift_bridgeObjectRelease_n(v14, 3);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "RDAccountUtils: requestToMergeLocalDataIntoSyncData {acAccountIdentifier: %{public}s}", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    v17 = v15;
    a2 = v14;
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v20 = sub_10054C1C0(v18, v19);
  if (!v20)
  {
    v34 = (void *)objc_opt_self(REMError);
    v35 = String._bridgeToObjectiveC()();
    v36 = objc_msgSend(v34, "internalErrorWithDebugDescription:", v35);

    sub_10055199C((uint64_t)v36, a3, a4, a5, (uint64_t)&unk_1007FA328, (uint64_t)sub_10056591C, (uint64_t)&unk_1007FA340);
    return;
  }
  v21 = v20;
  v22 = objc_msgSend((id)objc_opt_self(REMAppleAccountUtilities), "sharedInstance");
  v23 = objc_msgSend(v22, "accountStore");

  v24 = String._bridgeToObjectiveC()();
  v52 = v23;
  v25 = objc_msgSend(v23, "accountWithIdentifier:", v24);

  if (!v25)
    goto LABEL_18;
  v26 = objc_msgSend(v25, "accountType");
  if (!v26)
  {
    __break(1u);
    return;
  }
  v27 = v26;
  v28 = objc_msgSend(v26, "identifier");

  if (!v28)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierAppleAccount);
LABEL_17:

    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  v51 = v25;
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  v31 = v30;

  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierAppleAccount);
  if (!v31)
  {
    v25 = v51;
    goto LABEL_17;
  }
  if (v29 != v32 || v31 != v33)
  {
    v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, v32, v33, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v42 & 1) != 0)
      goto LABEL_22;

LABEL_18:
    swift_bridgeObjectRetain_n(a2, 2);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = swift_slowAlloc(32, -1);
      v54 = v41;
      *(_DWORD *)v40 = 136446210;
      swift_bridgeObjectRetain(a2);
      v56 = sub_10001A820(v53, a2, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "RDAccountUtils: requestToMergeLocalDataIntoSyncData: Could not find an Apple ACAccount for {acAccountIdentifier: %{public}s}", v40, 0xCu);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    return;
  }
  swift_bridgeObjectRelease_n(v31, 2);
LABEL_22:
  swift_bridgeObjectRetain_n(a2, 2);
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.default.getter(v44);
  if (os_log_type_enabled(v44, v45))
  {
    v46 = a2;
    v47 = (uint8_t *)swift_slowAlloc(12, -1);
    v48 = swift_slowAlloc(32, -1);
    v54 = v48;
    *(_DWORD *)v47 = 136446210;
    swift_bridgeObjectRetain(v46);
    v56 = sub_10001A820(v53, v46, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
    swift_bridgeObjectRelease_n(v46, 3);
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "RDAccountUtils: requestToMergeLocalDataIntoSyncData: icloud account store already exists, move local data now {acAccountIdentifier: %{public}s}", v47, 0xCu);
    swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v47, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v49 = type metadata accessor for RDAccountUtils.LocalDataToICloudMover();
  *(_QWORD *)(swift_initStackObject(v49, v55) + 16) = v21;
  v50 = v21;
  sub_100551364(v51);

  sub_10055199C(0, a3, a4, a5, (uint64_t)&unk_1007FA328, (uint64_t)sub_10056591C, (uint64_t)&unk_1007FA340);
}

void sub_100547930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  id v41;
  uint64_t v43;
  _QWORD v44[3];
  _BYTE v45[8];
  _QWORD v46[3];
  _BYTE v47[16];
  _BYTE v48[96];
  id v49[2];

  v5 = sub_10054C1C0(a1, a2);
  if (v5)
  {
    v6 = v5;
    v7 = objc_msgSend((id)objc_opt_self(REMAccount), "localAccountID");
    v49[0] = 0;
    v8 = objc_msgSend(v6, "fetchAccountWithObjectID:error:", v7, v49);

    v9 = v49[0];
    if (v8)
    {
      v10 = type metadata accessor for RDAccountDataMover();
      swift_initStackObject(v10, v48);
      v11 = v9;
      v12 = v6;
      v13 = sub_1004506B8(v12);
      sub_100452528((uint64_t)v8);
      if (qword_100837880 != -1)
        swift_once(&qword_100837880, sub_100547F80);
      v33 = type metadata accessor for Logger(0);
      sub_10001AAA8(v33, (uint64_t)qword_10084F6F8);
      v34 = swift_retain_n(v13);
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.default.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc(12, -1);
        v38 = (void *)swift_slowAlloc(32, -1);
        v49[0] = v38;
        *(_DWORD *)v37 = 136446210;
        v39 = sub_1004505B0();
        v43 = sub_10001A820(v39, v40, (uint64_t *)v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44);
        swift_release_n(v13);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "RDAccountUtils: requestToDeleteLocalData: Local account emptied {stats: %{public}s}.", v37, 0xCu);
        swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v38, -1, -1);
        swift_slowDealloc(v37, -1, -1);
        swift_release(v13);

      }
      else
      {

        swift_release_n(v13);
      }
      sub_10055199C(0, a1, a2, a3, (uint64_t)&unk_1007FA2D8, (uint64_t)sub_10056591C, (uint64_t)&unk_1007FA2F0);

    }
    else
    {
      v16 = v49[0];
      v17 = _convertNSErrorToError(_:)(v9);

      swift_willThrow(v18);
      if (qword_100837880 != -1)
        swift_once(&qword_100837880, sub_100547F80);
      v19 = type metadata accessor for Logger(0);
      sub_10001AAA8(v19, (uint64_t)qword_10084F6F8);
      swift_errorRetain(v17);
      v20 = swift_errorRetain(v17);
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.error.getter(v21);
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc(12, -1);
        v24 = (void *)swift_slowAlloc(32, -1);
        v49[0] = v24;
        *(_DWORD *)v23 = 136446210;
        swift_getErrorValue(v17, v45, v44);
        v25 = Error.localizedDescription.getter(v44[1], v44[2]);
        v43 = sub_10001A820(v25, v26, (uint64_t *)v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44);
        swift_bridgeObjectRelease();
        swift_errorRelease(v17);
        swift_errorRelease(v17);
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "RDAccountUtils: requestToDeleteLocalData: Error occurred when trying to delete local data {error: %{public}s}", v23, 0xCu);
        swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v24, -1, -1);
        swift_slowDealloc(v23, -1, -1);
      }
      else
      {
        swift_errorRelease(v17);
        swift_errorRelease(v17);
      }

      v27 = (void *)objc_opt_self(REMError);
      v49[0] = 0;
      v49[1] = (id)0xE000000000000000;
      _StringGuts.grow(_:)(59);
      v28._object = (void *)0x8000000100707C30;
      v28._countAndFlagsBits = 0xD000000000000038;
      String.append(_:)(v28);
      swift_getErrorValue(v17, v47, v46);
      v29._countAndFlagsBits = Error.localizedDescription.getter(v46[1], v46[2]);
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      v30._countAndFlagsBits = 125;
      v30._object = (void *)0xE100000000000000;
      String.append(_:)(v30);
      v31 = String._bridgeToObjectiveC()();
      v32 = objc_msgSend(v27, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      sub_10055199C((uint64_t)v32, a1, a2, a3, (uint64_t)&unk_1007FA2D8, (uint64_t)sub_10056591C, (uint64_t)&unk_1007FA2F0);
      swift_errorRelease(v17);

    }
  }
  else
  {
    v14 = (void *)objc_opt_self(REMError);
    v15 = String._bridgeToObjectiveC()();
    v41 = objc_msgSend(v14, "internalErrorWithDebugDescription:", v15);

    sub_10055199C((uint64_t)v41, a1, a2, a3, (uint64_t)&unk_1007FA2D8, (uint64_t)sub_10056591C, (uint64_t)&unk_1007FA2F0);
  }
}

uint64_t sub_100547F80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084F6F8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084F6F8);
  if (qword_100837640 != -1)
    swift_once(&qword_100837640, sub_1004A188C);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_1008720A0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100548010(char *a1, char *a2)
{
  return sub_1002B5A74(*a1, *a2);
}

Swift::Int sub_10054801C()
{
  char *v0;

  return sub_1004F5244(*v0);
}

double sub_100548024(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  double result;

  if (*v1)
    v2 = 0x80000001006F43A0;
  else
    v2 = 0x80000001006F4360;
  String.hash(into:)(a1, 0xD000000000000012, v2);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v2).n128_u64[0];
  return result;
}

Swift::Int sub_10054807C(uint64_t a1)
{
  char *v1;

  return sub_1002B1DC8(a1, *v1);
}

void sub_100548084(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  char v6;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007E1588, v3);
  swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v6 = 1;
  else
    v6 = 2;
  if (!v5)
    v6 = 0;
  *a2 = v6;
}

void sub_1005480E0(_QWORD *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;

  v2 = 0x80000001006F4360;
  if (*v1)
    v2 = 0x80000001006F43A0;
  *a1 = 0xD000000000000012;
  a1[1] = v2;
}

uint64_t sub_10054811C()
{
  uint64_t v0;
  uint64_t inited;
  void *v2;
  uint64_t result;
  uint64_t v4;

  v0 = sub_10001A630(&qword_10084F9D8);
  inited = swift_initStackObject(v0, &v4);
  *(_OWORD *)(inited + 16) = xmmword_1006A5130;
  *(_QWORD *)(inited + 32) = _auto_REMAccountTypeForPrimaryCloudKit(inited);
  *(_OWORD *)(inited + 40) = xmmword_1006C2520;
  *(_QWORD *)(inited + 56) = 4;
  v2 = (void *)sub_1002EB0E4(inited);
  result = swift_setDeallocating(inited);
  off_10084F710 = v2;
  return result;
}

void sub_100548198(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6, void *a7, char a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  sub_10055E80C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);

  swift_release(a10);
  swift_release(a11);
  swift_release(a12);

}

uint64_t sub_1005481FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  a15(a1, a2, a3, a4, a5, a6);
  swift_release(a9);

  return swift_release(a14);
}

uint64_t sub_100548260(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6, void *a7, char a8, uint64_t a9, uint64_t a10)
{
  sub_10056533C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  swift_bridgeObjectRelease();
  swift_release(a5);

  return swift_release(a10);
}

void sub_1005482C8(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(_QWORD, _QWORD), uint64_t a6, void *a7)
{
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void (*v17)(_QWORD, _QWORD);
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  NSString v24;
  id v25;
  uint64_t v26;
  id v27;
  int v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  int v37;
  void *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  int v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint8_t *v52;
  id v53;
  _QWORD *v54;
  void *v55;
  _QWORD *v56;
  id v57;
  void *v58;
  unsigned int v59;
  unsigned int v60;
  void *v61;
  id v62;
  id v63;
  void (*v64)(_QWORD, _QWORD);
  void *v66;
  uint64_t aBlock[3];
  void *v68;
  uint64_t (*v69)(char, uint64_t);
  _QWORD *v70;
  __int128 v71;
  __int128 v72;

  if (qword_100837880 != -1)
    swift_once(&qword_100837880, sub_100547F80);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_10084F6F8);
  swift_bridgeObjectRetain_n(a4, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v62 = a1;
    v17 = a5;
    v18 = a7;
    v19 = swift_slowAlloc(32, -1);
    aBlock[0] = v19;
    *(_DWORD *)v16 = 136446210;
    swift_bridgeObjectRetain(a4);
    *(_QWORD *)&v71 = sub_10001A820(a3, a4, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, (char *)&v71 + 8);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Received migration state from user record {accountID: %{public}s}", v16, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    v20 = v19;
    a7 = v18;
    a5 = v17;
    a1 = v62;
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
  }
  v21 = (void *)objc_opt_self(REMAppleAccountUtilities);
  v22 = objc_msgSend(v21, "sharedInstance");
  v23 = objc_msgSend(v22, "accountStore");

  v24 = String._bridgeToObjectiveC()();
  v25 = objc_msgSend(v23, "accountWithIdentifier:", v24);

  if (v25)
  {
    v61 = a7;
    if (a1)
    {
      v26 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
      v27 = a1;
      CKRecordKeyValueSetting.subscript.getter(0xD000000000000012, 0x80000001007043B0, v26, &type metadata for Bool, &protocol witness table for Bool);
      v60 = aBlock[0] & 1;
      CKRecordKeyValueSetting.subscript.getter(0xD000000000000012, 0x8000000100704390, v26, &type metadata for Bool, &protocol witness table for Bool);

      v28 = aBlock[0] & 1;
    }
    else
    {
      swift_bridgeObjectRetain_n(a4, 2);
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.error.getter(v30);
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc(12, -1);
        v33 = swift_slowAlloc(32, -1);
        aBlock[0] = v33;
        *(_DWORD *)v32 = 136446210;
        swift_bridgeObjectRetain(a4);
        *(_QWORD *)&v71 = sub_10001A820(a3, a4, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, (char *)&v71 + 8);
        swift_bridgeObjectRelease_n(a4, 3);
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Failed to fetch user record. Let's assume the account is not migrated {accountID: %{public}s}", v32, 0xCu);
        swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v33, -1, -1);
        swift_slowDealloc(v32, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a4, 2);
      }
      v28 = 0;
      v60 = 0;
      a7 = v61;
    }
    LOBYTE(aBlock[0]) = 0;
    v34 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(aBlock, &type metadata for RDAccountUtils.ACAccountProperty);
    v35 = objc_msgSend(a7, "objectForKeyedSubscript:", v34);
    swift_unknownObjectRelease(v34);
    if (v35)
    {
      _bridgeAnyObjectToAny(_:)(&v71, v35);
      swift_unknownObjectRelease(v35);
    }
    else
    {
      v71 = 0u;
      v72 = 0u;
    }
    sub_10001A5E8((uint64_t)&v71, (uint64_t)aBlock);
    if (v68)
    {
      v36 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
      v37 = swift_dynamicCast(&v66, aBlock, (char *)&type metadata for Any + 8, v36, 6);
      v38 = v66;
      if (!v37)
        v38 = 0;
      v63 = v38;
    }
    else
    {
      sub_10000882C((uint64_t)aBlock, (uint64_t *)&unk_10083D5B0);
      v63 = 0;
    }
    LOBYTE(v71) = 1;
    v39 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v71, &type metadata for RDAccountUtils.ACAccountProperty);
    v40 = objc_msgSend(a7, "objectForKeyedSubscript:", v39);
    swift_unknownObjectRelease(v39);
    if (v40)
    {
      _bridgeAnyObjectToAny(_:)(&v71, v40);
      swift_unknownObjectRelease(v40);
    }
    else
    {
      v71 = 0u;
      v72 = 0u;
    }
    sub_10001A5E8((uint64_t)&v71, (uint64_t)aBlock);
    if (v68)
    {
      v41 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
      v42 = swift_dynamicCast(&v66, aBlock, (char *)&type metadata for Any + 8, v41, 6);
      v43 = v66;
      if (v42)
        v44 = v66;
      else
        v44 = 0;
      v45 = v63;
      if (v63 && v44)
      {
        if (v60 == objc_msgSend(v63, "BOOLValue") && v28 == objc_msgSend(v44, "BOOLValue"))
        {
          a5(1, 0);

          goto LABEL_40;
        }
      }
      else
      {
        v43 = v44;
      }
    }
    else
    {
      sub_10000882C((uint64_t)aBlock, (uint64_t *)&unk_10083D5B0);
      v43 = 0;
      v45 = v63;
    }
    v58 = v43;
    v59 = v28;
    swift_bridgeObjectRetain_n(a4, 2);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.default.getter(v47);
    if (os_log_type_enabled(v47, v48))
    {
      v64 = a5;
      v49 = (uint8_t *)swift_slowAlloc(12, -1);
      v50 = swift_slowAlloc(32, -1);
      aBlock[0] = v50;
      *(_DWORD *)v49 = 136446210;
      swift_bridgeObjectRetain(a4);
      v51 = a3;
      *(_QWORD *)&v71 = sub_10001A820(a3, a4, aBlock);
      v45 = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, (char *)&v71 + 8);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Cache migration state in ACAccount object {accountID: %{public}s}", v49, 0xCu);
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      v52 = v49;
      a5 = v64;
      swift_slowDealloc(v52, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a4, 2);
      v51 = a3;
    }
    v53 = objc_msgSend(v21, "sharedInstance");
    v54 = (_QWORD *)swift_allocObject(&unk_1007FA210, 56, 7);
    v54[2] = v51;
    v54[3] = a4;
    v54[4] = v61;
    v54[5] = a5;
    v54[6] = a6;
    v69 = sub_1005658E8;
    v70 = v54;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1001BCC34;
    v68 = &unk_1007FA228;
    v55 = _Block_copy(aBlock);
    v56 = v70;
    swift_bridgeObjectRetain(a4);
    v57 = v61;
    swift_retain();
    swift_release(v56);
    objc_msgSend(v53, "saveDidChooseToMigrate:didFinishMigration:toACAccount:inStore:completionHandler:", v60, v59, v57, v23, v55);

    _Block_release(v55);
    v23 = v53;
  }
  else
  {
    a5(0, 0);
  }
LABEL_40:

}

uint64_t sub_100548B5C(char a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, uint64_t (*a6)(_QWORD, _QWORD, __n128))
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  os_log_type_t v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t (*v34)(_QWORD, _QWORD, __n128);
  _QWORD v35[3];
  _BYTE v36[8];
  uint64_t v37;
  uint64_t v38;

  if ((a1 & 1) != 0)
  {
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v11 = type metadata accessor for Logger(0);
    sub_10001AAA8(v11, (uint64_t)qword_10084F6F8);
    swift_bridgeObjectRetain_n(a4, 2);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = a6;
      v16 = swift_slowAlloc(32, -1);
      v38 = v16;
      *(_DWORD *)v15 = 136446210;
      swift_bridgeObjectRetain(a4);
      v37 = sub_10001A820(a3, a4, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Migration state cache saved {accountID: %{public}s}", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      v17 = v16;
      a6 = v34;
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v15, -1, -1);
LABEL_13:

      return a6(a1 & 1, a2, v30);
    }

    v30 = swift_bridgeObjectRelease_n(a4, 2);
  }
  else
  {
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v19 = type metadata accessor for Logger(0);
    sub_10001AAA8(v19, (uint64_t)qword_10084F6F8);
    v20 = a5;
    swift_errorRetain(a2);
    v21 = v20;
    v22 = swift_errorRetain(a2);
    v13 = Logger.logObject.getter(v22);
    v23 = static os_log_type_t.error.getter(v13);
    if (!os_log_type_enabled(v13, v23))
    {

      swift_errorRelease(a2);
      swift_errorRelease(a2);
      goto LABEL_13;
    }
    v24 = swift_slowAlloc(22, -1);
    v25 = (_QWORD *)swift_slowAlloc(8, -1);
    v33 = swift_slowAlloc(32, -1);
    v37 = (uint64_t)v21;
    v38 = v33;
    *(_DWORD *)v24 = 138412546;
    v26 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
    *v25 = v21;

    *(_WORD *)(v24 + 12) = 2080;
    if (a2)
    {
      swift_getErrorValue(a2, v36, v35);
      v27 = Error.localizedDescription.getter(v35[1], v35[2]);
      v29 = v28;
    }
    else
    {
      v29 = 0xE300000000000000;
      v27 = 7104878;
    }
    v37 = sub_10001A820(v27, v29, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
    swift_bridgeObjectRelease();
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v13, v23, "Error updating migration flags for ACAccount {acAccount: %@, error: %s}", (uint8_t *)v24, 0x16u);
    v31 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v25, 1, v31);
    swift_slowDealloc(v25, -1, -1);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v24, -1, -1);

  }
  return a6(a1 & 1, a2, v30);
}

uint64_t sub_100548F7C(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD, _QWORD), uint64_t a3, char a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v27)(_QWORD, _QWORD, _QWORD);
  uint64_t v28;
  _QWORD v29[3];
  _BYTE v30[8];
  uint64_t v31;

  if (a1)
  {
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v9 = type metadata accessor for Logger(0);
    sub_10001AAA8(v9, (uint64_t)qword_10084F6F8);
    swift_errorRetain(a1);
    v10 = swift_errorRetain(a1);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v27 = a2;
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v31 = v14;
      *(_DWORD *)v13 = 136315138;
      swift_getErrorValue(a1, v30, v29);
      v15 = Error.localizedDescription.getter(v29[1], v29[2]);
      v28 = sub_10001A820(v15, v16, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "UpdateAccountsWithAccountInfos: Error saving context after adding account {error: %s}", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      v17 = v13;
      a2 = v27;
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    v23 = a4 & 1;
    v24 = a5 & 1;
    v25 = a1;
  }
  else
  {
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_10001AAA8(v18, (uint64_t)qword_10084F6F8);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "UpdateAccountsWithAccountInfos: Account object changes saved", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    v23 = a4 & 1;
    v24 = a5 & 1;
    v25 = 0;
  }
  return a2(v23, v24, v25);
}

void sub_100549238(void *a1, void *a2, int a3, int a4, void (*a5)(_QWORD, _QWORD, _QWORD *, _QWORD), uint64_t a6)
{
  _QWORD *v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  NSObject *v18;
  id v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  void *v24;
  id v25;
  char **v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  id v33;
  unsigned __int8 v34;
  void *v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  void (**v40)(_QWORD, _QWORD, _QWORD);
  id v41;
  NSObject *v42;
  NSObject *v43;
  NSObject *v44;
  int v45;
  id v46;
  void *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  double v51;
  id v52;
  void *v53;
  id v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  char v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  void (**v63)(_QWORD, _QWORD, _QWORD);
  id v64;
  NSObject *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  void *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  double v75;
  id v76;
  void *v77;
  id v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  os_log_type_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  unsigned __int8 v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  id v94;
  void *v95;
  char *v96;
  char v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  NSObject *v101;
  os_log_type_t v102;
  _BOOL4 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  uint8_t *v113;
  uint64_t v114;
  void (**v115)(_QWORD, _QWORD, _QWORD);
  char *v116;
  NSObject *v117;
  os_log_type_t v118;
  uint8_t *v119;
  char *v120;
  id v121;
  void *v122;
  os_log_type_t v123;
  id v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  _QWORD *v129;
  uint64_t v130;
  void (*v131)(_QWORD, _QWORD, _QWORD, _QWORD);
  void *v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  NSObject *v137;
  os_log_type_t v138;
  _BOOL4 v139;
  uint8_t *v140;
  uint64_t v141;
  id v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  NSObject *v146;
  NSObject *v147;
  NSObject *v148;
  os_log_type_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  double v153;
  id v154;
  id v155;
  uint64_t v156;
  uint64_t v157;
  id v158;
  int v159;
  void *Strong;
  void *v161;
  NSObject *v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  id v168;
  id v169;
  void *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  double v176;
  id v177;
  uint64_t v178;
  void *v179;
  id v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  NSObject *v186;
  os_log_type_t v187;
  uint8_t *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  NSObject *v194;
  os_log_type_t v195;
  uint8_t *v196;
  NSObject *v197;
  uint64_t v198;
  id v199;
  void *v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  NSObject *v208;
  os_log_type_t v209;
  uint8_t *v210;
  uint64_t v211;
  uint64_t v212;
  NSObject *v213;
  os_log_type_t v214;
  uint8_t *v215;
  uint64_t v216;
  id v217;
  int v218;
  id v219;
  id v220;
  NSObject *v221;
  unint64_t v222;
  os_log_type_t v223;
  _BOOL4 v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unsigned __int8 v229;
  uint32_t *p_ivar_base_size;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  char *v234;
  char *v235;
  id v236;
  void *v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  double v241;
  char v242;
  unsigned __int8 v243;
  unsigned __int8 v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  _QWORD *v248;
  unint64_t v249;
  void *v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  NSObject *v255;
  os_log_type_t v256;
  uint64_t v257;
  uint64_t v258;
  double v259;
  uint64_t v260;
  id v261;
  void *v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  char v266;
  unint64_t v267;
  unint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  uint64_t v271;
  NSObject *v272;
  os_log_type_t v273;
  uint8_t *v274;
  uint64_t v275;
  void *v276;
  id v277;
  id v278;
  id v279;
  uint64_t v280;
  char *v281;
  void *v282;
  uint64_t v283;
  void *v284;
  uint64_t v285;
  NSObject *v286;
  id v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  NSObject *v291;
  unint64_t v292;
  int v293;
  int v294;
  char *v295;
  char *v296;
  void *v297;
  uint64_t v298;
  void (*v299)(_QWORD, _QWORD, _QWORD *, _QWORD);
  uint64_t v300;
  void (**v301)(_QWORD, _QWORD, _QWORD);
  uint64_t v302;
  id v303;
  uint64_t v304;
  __int128 aBlock;
  __int128 v306;
  uint64_t (*v307)();
  uint64_t v308;
  __int128 v309;
  __int128 v310;

  v299 = a5;
  v300 = a6;
  v293 = a4;
  v294 = a3;
  v297 = a2;
  v7 = (_QWORD *)type metadata accessor for Logger(0);
  v8 = (void (**)(_QWORD, _QWORD, _QWORD))*(v7 - 1);
  __chkstk_darwin(v7);
  v10 = (char *)&v288 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v288 - v12;
  *(_QWORD *)&v15 = __chkstk_darwin(v14).n128_u64[0];
  v17 = (char *)&v288 - v16;
  v18 = objc_msgSend(a1, "displayAccount", v15);
  if (!v18)
    v18 = a1;
  v19 = -[NSObject identifier](v18, "identifier");
  if (!v19)
  {
    __break(1u);
LABEL_166:
    __break(1u);
  }
  v20 = v19;
  v296 = v13;
  v301 = v8;
  v302 = (uint64_t)v7;
  v298 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  v23 = -[NSObject accountType](v18, "accountType");
  if (!v23)
    goto LABEL_166;
  v24 = v23;
  v25 = objc_msgSend(v23, "identifier");

  v26 = &selRef_isConcealed;
  if (!v25)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierAppleAccount);
    v33 = v35;
    goto LABEL_13;
  }
  v27 = v22;
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v30 = v29;

  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierAppleAccount);
  v33 = v32;
  if (!v30)
  {
    v22 = v27;
LABEL_13:
    if ((-[NSObject isEnabledForDataclass:](v18, "isEnabledForDataclass:", ACAccountDataclassReminders, swift_bridgeObjectRelease().n128_f64[0]) & 1) == 0)goto LABEL_25;
    goto LABEL_14;
  }
  if (v28 == v31 && v30 == v32)
  {
    v34 = -[NSObject isEnabledForDataclass:](v18, "isEnabledForDataclass:", ACAccountDataclassReminders, swift_bridgeObjectRelease_n(v30, 2).n128_f64[0]);
    v22 = v27;
    if ((v34 & 1) == 0)
    {
LABEL_25:
      if (qword_100837880 != -1)
        swift_once(&qword_100837880, sub_100547F80);
      v61 = v302;
      v62 = sub_10001AAA8(v302, (uint64_t)qword_10084F6F8);
      v63 = v301;
      ((void (**)(char *, uint64_t, uint64_t))v301)[2](v10, v62, v61);
      v64 = a1;
      v65 = v18;
      v66 = v64;
      v43 = v65;
      swift_bridgeObjectRetain(v22);
      v26 = (char **)Logger.logObject.getter(v67);
      v33 = (id)static os_log_type_t.error.getter(v26);
      if (!os_log_type_enabled((os_log_t)v26, (os_log_type_t)v33))
      {

        swift_bridgeObjectRelease_n(v22, 2);
        ((void (*)(char *, uint64_t))v63[1])(v10, v61);
        goto LABEL_48;
      }
      v292 = v22;
      v68 = swift_slowAlloc(32, -1);
      v297 = (void *)swift_slowAlloc(96, -1);
      *(_QWORD *)&aBlock = v297;
      *(_DWORD *)v68 = 136446722;
      v69 = objc_msgSend(v66, "identifier");
      if (v69)
      {
        v70 = v69;
        v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
        v73 = v72;

        *(_QWORD *)&v309 = sub_10001A820(v71, v73, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, (char *)&v309 + 8);

        swift_bridgeObjectRelease();
        *(_WORD *)(v68 + 12) = 2082;
        v74 = v292;
        swift_bridgeObjectRetain(v292);
        *(_QWORD *)&v309 = sub_10001A820(v298, v74, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, (char *)&v309 + 8);
        *(_QWORD *)&v75 = swift_bridgeObjectRelease_n(v74, 3).n128_u64[0];
        *(_WORD *)(v68 + 22) = 2082;
        v76 = -[NSObject accountType](v43, "accountType", v75);
        if (v76)
        {
          v77 = v76;
          v78 = objc_msgSend(v76, "identifier");

          if (v78)
          {
            v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
            v81 = v80;

            *(_QWORD *)&v309 = sub_10001A820(v79, v81, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, (char *)&v309 + 8);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)v26, (os_log_type_t)v33, "UpdateAccountWithACAccount: ACAccount type is not supported or reminders dataclass is not enabled {accountID: %{public}s, displayAccountID: %{public}s, accountType: %{public}s}", (uint8_t *)v68, 0x20u);
            v82 = v297;
            swift_arrayDestroy(v297, 3, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v82, -1, -1);
            swift_slowDealloc(v68, -1, -1);

            ((void (*)(char *, uint64_t))v301[1])(v10, v302);
            goto LABEL_48;
          }
          goto LABEL_169;
        }
      }
      else
      {

        swift_bridgeObjectRelease();
        __break(1u);
      }

      __break(1u);
LABEL_169:

      __break(1u);
      goto LABEL_170;
    }
LABEL_24:
    v60 = 1;
    goto LABEL_34;
  }
  v59 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, v31, v32, 0);
  swift_bridgeObjectRelease();
  v22 = v27;
  if ((-[NSObject isEnabledForDataclass:](v18, "isEnabledForDataclass:", ACAccountDataclassReminders, swift_bridgeObjectRelease().n128_f64[0]) & 1) == 0)goto LABEL_25;
  if ((v59 & 1) != 0)
    goto LABEL_24;
LABEL_14:
  v36 = objc_msgSend(a1, "accountPropertyForKey:", REMDA_kCalDAVMobileAccountDelegatePrincipalPath);
  if (v36)
  {
    v37 = v36;
    _bridgeAnyObjectToAny(_:)(&aBlock, v36);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease(v37);
    sub_10000882C((uint64_t)&aBlock, (uint64_t *)&unk_10083D5B0);
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v38 = v302;
    v39 = sub_10001AAA8(v302, (uint64_t)qword_10084F6F8);
    v40 = v301;
    ((void (**)(char *, uint64_t, uint64_t))v301)[2](v17, v39, v38);
    v41 = a1;
    v42 = v18;
    v33 = v41;
    v43 = v42;
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.default.getter(v44);
    if (!os_log_type_enabled(v44, (os_log_type_t)v45))
    {

      ((void (*)(char *, uint64_t))v40[1])(v17, v38);
      goto LABEL_48;
    }
    LODWORD(v298) = v45;
    v26 = (char **)swift_slowAlloc(22, -1);
    v297 = (void *)swift_slowAlloc(64, -1);
    *(_QWORD *)&aBlock = v297;
    *(_DWORD *)v26 = 136446466;
    v46 = objc_msgSend(v33, "identifier");
    if (v46)
    {
      v47 = v46;
      v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      v50 = v49;

      *(_QWORD *)&v309 = sub_10001A820(v48, v50, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, (char *)&v309 + 8);

      *(_QWORD *)&v51 = swift_bridgeObjectRelease().n128_u64[0];
      *((_WORD *)v26 + 6) = 2082;
      v52 = -[NSObject accountType](v43, "accountType", v51);
      if (v52)
      {
        v53 = v52;
        v54 = objc_msgSend(v52, "identifier");

        if (v54)
        {
          v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
          v57 = v56;

          *(_QWORD *)&v309 = sub_10001A820(v55, v57, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, (char *)&v309 + 8);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v44, (os_log_type_t)v298, "UpdateAccountWithACAccount: Skip handling CalDAV delegate account {accountID: %{public}s, displayAccountType: %{public}s}", (uint8_t *)v26, 0x16u);
          v58 = v297;
          swift_arrayDestroy(v297, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v58, -1, -1);
          swift_slowDealloc(v26, -1, -1);

          ((void (*)(char *, uint64_t))v301[1])(v17, v38);
LABEL_48:
          v299(0, 0, _swiftEmptyArrayStorage, 0);

          return;
        }
        goto LABEL_173;
      }
LABEL_172:

      __break(1u);
LABEL_173:

      __break(1u);
      goto LABEL_174;
    }
LABEL_171:

    __break(1u);
    goto LABEL_172;
  }
  aBlock = 0u;
  v306 = 0u;
  sub_10000882C((uint64_t)&aBlock, (uint64_t *)&unk_10083D5B0);
  v60 = 0;
LABEL_34:
  v291 = v18;
  if (qword_100837880 != -1)
    swift_once(&qword_100837880, sub_100547F80);
  v83 = sub_10001AAA8(v302, (uint64_t)qword_10084F6F8);
  swift_bridgeObjectRetain_n(v22, 2);
  v43 = Logger.logObject.getter(v84);
  v85 = static os_log_type_t.default.getter(v43);
  if (os_log_type_enabled(v43, v85))
  {
    v86 = (uint8_t *)swift_slowAlloc(12, -1);
    v87 = swift_slowAlloc(32, -1);
    *(_QWORD *)&aBlock = v87;
    *(_DWORD *)v86 = 136446210;
    v33 = v86 + 12;
    v26 = (char **)(v86 + 4);
    swift_bridgeObjectRetain(v22);
    *(_QWORD *)&v309 = sub_10001A820(v298, v22, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, (char *)&v309 + 8);
    swift_bridgeObjectRelease_n(v22, 3);
    _os_log_impl((void *)&_mh_execute_header, v43, v85, "UpdateAccountWithACAccount: Try to update account object {accountID: %{public}s}", v86, 0xCu);
    swift_arrayDestroy(v87, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v87, -1, -1);
    swift_slowDealloc(v86, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v22, 2);
  }
  v88 = swift_allocObject(&unk_1007FA120, 17, 7);
  *(_BYTE *)(v88 + 16) = 0;
  v89 = v291;
  v90 = -[NSObject rem_isEligibleForCloudKitReminders](v291, "rem_isEligibleForCloudKitReminders");
  if (!v60)
  {
    v94 = -[NSObject accountType](v89, "accountType");
    if (!v94)
    {
LABEL_170:
      __break(1u);
      goto LABEL_171;
    }
    v95 = v94;
    v96 = (char *)sub_100555EA8(v94);
    v98 = v97;

    v99 = v302;
    if ((v98 & 1) != 0)
    {
      v115 = v301;
      v116 = v296;
      ((void (**)(char *, uint64_t, uint64_t))v301)[2](v296, v83, v302);
      v26 = v89;
      v117 = Logger.logObject.getter(v26);
      v118 = static os_log_type_t.error.getter(v117);
      if (os_log_type_enabled(v117, v118))
      {
        v292 = v22;
        v119 = (uint8_t *)swift_slowAlloc(12, -1);
        v120 = (char *)swift_slowAlloc(32, -1);
        *(_QWORD *)&aBlock = v120;
        *(_DWORD *)v119 = 136446210;
        v121 = objc_msgSend(v26, "accountType");
        if (!v121)
        {
LABEL_174:

          __break(1u);
          goto LABEL_175;
        }
        v122 = v121;
        v295 = v120;
        v123 = v118;
        v124 = objc_msgSend(v121, "identifier");

        if (!v124)
        {
LABEL_175:

          __break(1u);
          return;
        }
        v125 = static String._unconditionallyBridgeFromObjectiveC(_:)(v124);
        v127 = v126;

        *(_QWORD *)&v309 = sub_10001A820(v125, v127, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, (char *)&v309 + 8);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v117, v123, "UpdateAccountWithACAccount: Can't figure out REMAccountType for ACAccountType {acAccountType: %{public}s}", v119, 0xCu);
        v128 = v295;
        swift_arrayDestroy(v295, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v128, -1, -1);
        swift_slowDealloc(v119, -1, -1);

        ((void (*)(char *, uint64_t))v301[1])(v296, v99);
        v129 = _swiftEmptyArrayStorage;
        v131 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v299;
        v130 = v300;
        v22 = v292;
        v89 = v291;
LABEL_155:
        swift_bridgeObjectRetain(v22);
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain(v129);
        sub_100563E98(v270, v297, v88, v298, v22, (uint64_t)v129, v131, v130);
        swift_release(v130);
        swift_bridgeObjectRelease_n(v129, 2);
        swift_release_n(v88);

        swift_bridgeObjectRelease_n(v22, 2);
        return;
      }

      ((void (*)(char *, uint64_t))v115[1])(v116, v99);
    }
    else
    {
      swift_bridgeObjectRetain_n(v22, 2);
      v289 = v83;
      v101 = Logger.logObject.getter(v100);
      v102 = static os_log_type_t.default.getter(v101);
      v103 = os_log_type_enabled(v101, v102);
      v295 = v96;
      if (v103)
      {
        v104 = swift_slowAlloc(22, -1);
        v105 = v88;
        v106 = swift_slowAlloc(64, -1);
        *(_QWORD *)&aBlock = v106;
        *(_DWORD *)v104 = 136446466;
        swift_bridgeObjectRetain(v22);
        *(_QWORD *)&v309 = sub_10001A820(v298, v22, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, (char *)&v309 + 8);
        swift_bridgeObjectRelease_n(v22, 3);
        *(_WORD *)(v104 + 12) = 2082;
        v107 = REMAccountType.loggableDescription.getter(v96);
        *(_QWORD *)&v309 = sub_10001A820(v107, v108, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, (char *)&v309 + 8);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v101, v102, "UpdateAccountWithACAccount: Will process non-Apple account {displayAccountID: %{public}s, accountType: %{public}s}", (uint8_t *)v104, 0x16u);
        swift_arrayDestroy(v106, 2, (char *)&type metadata for Any + 8);
        v109 = v106;
        v88 = v105;
        swift_slowDealloc(v109, -1, -1);
        swift_slowDealloc(v104, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v22, 2);
      }
      v142 = sub_10055647C(v89);
      if (v143)
      {
        v144 = (uint64_t)v142;
        v145 = v143;
        v146 = v89;
        swift_bridgeObjectRetain_n(v145, 2);
        v147 = v146;
        v148 = Logger.logObject.getter(v147);
        v149 = static os_log_type_t.default.getter(v148);
        if (os_log_type_enabled(v148, v149))
        {
          v290 = v88;
          v292 = v22;
          v150 = swift_slowAlloc(22, -1);
          v151 = (_QWORD *)swift_slowAlloc(8, -1);
          v152 = swift_slowAlloc(32, -1);
          *(_QWORD *)&aBlock = v152;
          *(_DWORD *)v150 = 136446466;
          swift_bridgeObjectRetain(v145);
          v302 = v144;
          *(_QWORD *)&v309 = sub_10001A820(v144, v145, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, (char *)&v309 + 8);
          *(_QWORD *)&v153 = swift_bridgeObjectRelease_n(v145, 3).n128_u64[0];
          *(_WORD *)(v150 + 12) = 2114;
          v154 = -[NSObject identifier](v147, "identifier", v153);
          v155 = v154;
          if (v154)
            *(_QWORD *)&v309 = v154;
          else
            *(_QWORD *)&v309 = 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, (char *)&v309 + 8);
          *v151 = v155;

          _os_log_impl((void *)&_mh_execute_header, v148, v149, "UpdateAccountWithACAccount: Resolved non-Apple account identifier enabled for Reminders from displayACAccount: {resolved: %{public}s, displayACAccount: %{public}@}.", (uint8_t *)v150, 0x16u);
          v198 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v151, 1, v198);
          swift_slowDealloc(v151, -1, -1);
          swift_arrayDestroy(v152, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v152, -1, -1);
          swift_slowDealloc(v150, -1, -1);

          v22 = v292;
          v89 = v291;
          v88 = v290;
          v144 = v302;
        }
        else
        {

          swift_bridgeObjectRelease_n(v145, 2);
        }
        v199 = objc_msgSend((id)objc_opt_self(REMAppleAccountUtilities), "accountDescriptionWithACAccount:", v147);
        if (v199)
        {
          v200 = v199;
          v201 = static String._unconditionallyBridgeFromObjectiveC(_:)(v199);
          v203 = v202;

        }
        else
        {
          v201 = 0;
          v203 = 0xE000000000000000;
        }
        v129 = sub_1002CAB38(0, 1, 1, _swiftEmptyArrayStorage);
        v205 = v129[2];
        v204 = v129[3];
        if (v205 >= v204 >> 1)
          v129 = sub_1002CAB38((_QWORD *)(v204 > 1), v205 + 1, 1, v129);
        v129[2] = v205 + 1;
        v206 = &v129[6 * v205];
        v206[4] = v144;
        v206[5] = v145;
        v206[6] = v201;
        v206[7] = v203;
        v206[8] = v295;
        *((_DWORD *)v206 + 18) = 33685505;
        *((_BYTE *)v206 + 76) = 2;
        goto LABEL_154;
      }
    }
    goto LABEL_65;
  }
  if ((v90 & 1) == 0)
  {
    swift_bridgeObjectRetain_n(v22, 2);
    v111 = Logger.logObject.getter(v110);
    v112 = static os_log_type_t.default.getter(v111);
    if (os_log_type_enabled(v111, v112))
    {
      v113 = (uint8_t *)swift_slowAlloc(12, -1);
      v114 = swift_slowAlloc(32, -1);
      *(_QWORD *)&aBlock = v114;
      *(_DWORD *)v113 = 136446210;
      swift_bridgeObjectRetain(v22);
      *(_QWORD *)&v309 = sub_10001A820(v298, v22, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, (char *)&v309 + 8);
      swift_bridgeObjectRelease_n(v22, 3);
      _os_log_impl((void *)&_mh_execute_header, v111, v112, "UpdateAccountWithACAccount: Got an Apple ID, not eligible for CloudKit reminders. Will only process iCloud CalDAV account for it {accountID: %{public}s}", v113, 0xCu);
      swift_arrayDestroy(v114, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v114, -1, -1);
      swift_slowDealloc(v113, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v22, 2);
    }
    v132 = sub_100552370(v89);
    if (v133)
    {
      v134 = (uint64_t)v132;
      v135 = v133;
      swift_bridgeObjectRetain_n(v133, 2);
      v137 = Logger.logObject.getter(v136);
      v138 = static os_log_type_t.default.getter(v137);
      v139 = os_log_type_enabled(v137, v138);
      v290 = v88;
      if (v139)
      {
        v140 = (uint8_t *)swift_slowAlloc(12, -1);
        v141 = swift_slowAlloc(32, -1);
        *(_QWORD *)&aBlock = v141;
        *(_DWORD *)v140 = 136446210;
        swift_bridgeObjectRetain(v135);
        *(_QWORD *)&v309 = sub_10001A820(v134, v135, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, (char *)&v309 + 8);
        swift_bridgeObjectRelease_n(v135, 3);
        _os_log_impl((void *)&_mh_execute_header, v137, v138, "UpdateAccountWithACAccount: AppleAccount {accountID: %{public}s} is ineligible for CloudKit Reminders, will process it as iCloud CalDAV", v140, 0xCu);
        swift_arrayDestroy(v141, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v141, -1, -1);
        swift_slowDealloc(v140, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v135, 2);
      }
      v169 = objc_msgSend((id)objc_opt_self(REMAppleAccountUtilities), "accountDescriptionWithACAccount:", v89);
      if (v169)
      {
        v170 = v169;
        v171 = static String._unconditionallyBridgeFromObjectiveC(_:)(v169);
        v173 = v172;

      }
      else
      {
        v171 = 0x64756F6C4369;
        v173 = 0xE600000000000000;
      }
      v129 = sub_1002CAB38(0, 1, 1, _swiftEmptyArrayStorage);
      v191 = v129[2];
      v190 = v129[3];
      if (v191 >= v190 >> 1)
        v129 = sub_1002CAB38((_QWORD *)(v190 > 1), v191 + 1, 1, v129);
      v129[2] = v191 + 1;
      v192 = &v129[6 * v191];
      v192[4] = v134;
      v192[5] = v135;
      v192[6] = v171;
      v192[7] = v173;
      v192[8] = 3;
      *((_DWORD *)v192 + 18) = 33685505;
      *((_BYTE *)v192 + 76) = 2;
      v131 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v299;
      v130 = v300;
      v88 = v290;
      goto LABEL_155;
    }
LABEL_65:
    v129 = _swiftEmptyArrayStorage;
LABEL_154:
    v131 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v299;
    v130 = v300;
    goto LABEL_155;
  }
  *(_QWORD *)&v309 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMACAccountPropertyDidChooseToMigrate);
  *((_QWORD *)&v309 + 1) = v91;
  v92 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v309, &type metadata for String);
  v93 = -[NSObject objectForKeyedSubscript:](v89, "objectForKeyedSubscript:", v92);
  swift_unknownObjectRelease(v92);
  if (v93)
  {
    _bridgeAnyObjectToAny(_:)(&v309, v93);
    swift_unknownObjectRelease(v93);
  }
  else
  {
    v309 = 0u;
    v310 = 0u;
  }
  sub_10001A5E8((uint64_t)&v309, (uint64_t)&aBlock);
  if (*((_QWORD *)&v306 + 1))
  {
    v156 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
    if ((swift_dynamicCast(&v303, &aBlock, (char *)&type metadata for Any + 8, v156, 6) & 1) != 0)
    {
      v158 = v303;
      v159 = objc_msgSend(v303, "BOOLValue");

      goto LABEL_77;
    }
  }
  else
  {
    sub_10000882C((uint64_t)&aBlock, (uint64_t *)&unk_10083D5B0);
  }
  if (v294 == 2)
  {
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v295 + 32, v157);
    if (Strong)
    {
      v161 = Strong;
      if ((objc_msgSend(Strong, "hasPassedBuddyAndSystemDataMigrator") & 1) != 0)
      {

        if ((v293 & 1) != 0)
        {
          v162 = v89;
          swift_bridgeObjectRetain(v22);
          v163 = (uint64_t)v295;
          swift_retain();
          v164 = v297;
          v165 = swift_retain();
          sub_100548260(v162, v163, v298, v22, v163, v162, v164, 1, (uint64_t)v299, v165);
          swift_release(v88);

          swift_bridgeObjectRelease();
          return;
        }
      }
      else
      {
        v290 = v88;
        swift_bridgeObjectRetain_n(v22, 2);
        v208 = Logger.logObject.getter(v207);
        v209 = static os_log_type_t.default.getter(v208);
        if (os_log_type_enabled(v208, v209))
        {
          v210 = (uint8_t *)swift_slowAlloc(12, -1);
          v211 = swift_slowAlloc(32, -1);
          *(_QWORD *)&aBlock = v211;
          *(_DWORD *)v210 = 136446210;
          swift_bridgeObjectRetain(v22);
          *(_QWORD *)&v309 = sub_10001A820(v298, v22, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, (char *)&v309 + 8);
          swift_bridgeObjectRelease_n(v22, 3);
          _os_log_impl((void *)&_mh_execute_header, v208, v209, "UpdateAccountWithACAccount: hasPassedBuddyAndSystemDataMigrator != true, setting shouldFetchMigrationState to false {accountID: %{public}s}", v210, 0xCu);
          swift_arrayDestroy(v211, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v211, -1, -1);
          swift_slowDealloc(v210, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v22, 2);
        }
        v88 = v290;
      }
    }
    swift_bridgeObjectRetain(v22);
    v272 = Logger.logObject.getter(v271);
    v273 = static os_log_type_t.default.getter(v272);
    if (os_log_type_enabled(v272, v273))
    {
      v274 = (uint8_t *)swift_slowAlloc(12, -1);
      v275 = swift_slowAlloc(32, -1);
      *(_QWORD *)&aBlock = v275;
      *(_DWORD *)v274 = 136446210;
      swift_bridgeObjectRetain(v22);
      *(_QWORD *)&v309 = sub_10001A820(v298, v22, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, (char *)&v309 + 8);
      swift_bridgeObjectRelease_n(v22, 3);
      _os_log_impl((void *)&_mh_execute_header, v272, v273, "UpdateAccountWithACAccount: Will not fetch migration state {accountID: %{public}s}", v274, 0xCu);
      swift_arrayDestroy(v275, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v275, -1, -1);
      swift_slowDealloc(v274, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v22, 2);
    }
    v276 = (void *)objc_opt_self(REMAppleAccountUtilities);
    v277 = objc_msgSend(v276, "sharedInstance");
    v278 = objc_msgSend(v277, "accountStore");

    v279 = objc_msgSend(v276, "sharedInstance");
    v280 = swift_allocObject(&unk_1007FA148, 64, 7);
    v281 = v295;
    *(_QWORD *)(v280 + 16) = v89;
    *(_QWORD *)(v280 + 24) = v281;
    v282 = v297;
    *(_QWORD *)(v280 + 32) = v297;
    *(_BYTE *)(v280 + 40) = v293 & 1;
    v283 = v300;
    *(_QWORD *)(v280 + 48) = v299;
    *(_QWORD *)(v280 + 56) = v283;
    v307 = sub_100565338;
    v308 = v280;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v306 = sub_1001BCC34;
    *((_QWORD *)&v306 + 1) = &unk_1007FA160;
    v284 = _Block_copy(&aBlock);
    v285 = v308;
    v286 = v89;
    swift_retain();
    v287 = v282;
    swift_retain();
    swift_release(v285);
    objc_msgSend(v279, "saveDidChooseToMigrate:didFinishMigration:toACAccount:inStore:completionHandler:", 0, 0, v286, v278, v284);

    _Block_release(v284);
    swift_release(v88);

    return;
  }
  v159 = v294 & 1;
LABEL_77:
  *(_QWORD *)&aBlock = static String._unconditionallyBridgeFromObjectiveC(_:)(REMACAccountPropertyDidFinishMigration);
  *((_QWORD *)&aBlock + 1) = v166;
  v167 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&aBlock, &type metadata for String);
  v168 = -[NSObject objectForKeyedSubscript:](v89, "objectForKeyedSubscript:", v167);
  swift_unknownObjectRelease(v167);
  if (v168)
  {
    _bridgeAnyObjectToAny(_:)(&v309, v168);
    swift_unknownObjectRelease(v168);
  }
  else
  {
    v309 = 0u;
    v310 = 0u;
  }
  sub_10001A5E8((uint64_t)&v309, (uint64_t)&aBlock);
  if (!*((_QWORD *)&v306 + 1))
  {
    sub_10000882C((uint64_t)&aBlock, (uint64_t *)&unk_10083D5B0);
    v177 = 0;
    HIBYTE(v304) = 0;
    if (v159)
      goto LABEL_89;
LABEL_93:
    v184 = 1;
LABEL_94:
    v290 = v88;
    v289 = v83;
    if (v177 && ((v184 | objc_msgSend(v177, "BOOLValue") ^ 1) & 1) == 0)
    {
      *(_BYTE *)(v88 + 16) = 1;
      swift_bridgeObjectRetain_n(v22, 2);
      v186 = Logger.logObject.getter(v185);
      v187 = static os_log_type_t.default.getter(v186);
      if (os_log_type_enabled(v186, v187))
      {
        v188 = (uint8_t *)swift_slowAlloc(12, -1);
        v189 = swift_slowAlloc(32, -1);
        *(_QWORD *)&aBlock = v189;
        *(_DWORD *)v188 = 136446210;
        swift_bridgeObjectRetain(v22);
        *(_QWORD *)&v309 = sub_10001A820(v298, v22, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, (char *)&v309 + 8);
        swift_bridgeObjectRelease_n(v22, 3);
        _os_log_impl((void *)&_mh_execute_header, v186, v187, "UpdateAccountWithACAccount: setting shouldMigrateInactivatedICloudCalDavData to true {displayAccountID: %{public}s}", v188, 0xCu);
        swift_arrayDestroy(v189, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v189, -1, -1);
        swift_slowDealloc(v188, -1, -1);

      }
      else
      {

        *(_QWORD *)&v176 = swift_bridgeObjectRelease_n(v22, 2).n128_u64[0];
      }
    }
    v217 = -[NSObject aa_isAccountClass:](v89, "aa_isAccountClass:", AAAccountClassPrimary, v176);
    if ((_DWORD)v217)
      v302 = _auto_REMAccountTypeForPrimaryCloudKit(v217);
    else
      v302 = 6;
    v218 = HIBYTE(v304);
    v219 = v177;
    swift_bridgeObjectRetain_n(v22, 2);
    v220 = v219;
    v221 = Logger.logObject.getter(v220);
    v222 = v22;
    v223 = static os_log_type_t.default.getter(v221);
    v224 = os_log_type_enabled(v221, v223);
    v292 = v222;
    LODWORD(v296) = v159;
    v301 = (void (**)(_QWORD, _QWORD, _QWORD))v220;
    if (v224)
    {
      v225 = v159;
      v226 = swift_slowAlloc(44, -1);
      v295 = (char *)swift_slowAlloc(96, -1);
      *(_QWORD *)&aBlock = v295;
      *(_DWORD *)v226 = 136447234;
      v294 = v218;
      swift_bridgeObjectRetain(v222);
      *(_QWORD *)&v309 = sub_10001A820(v298, v222, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, (char *)&v309 + 8);
      swift_bridgeObjectRelease_n(v222, 3);
      *(_WORD *)(v226 + 12) = 2082;
      v227 = REMAccountType.loggableDescription.getter(v302);
      *(_QWORD *)&v309 = sub_10001A820(v227, v228, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, (char *)&v309 + 8);
      swift_bridgeObjectRelease();
      *(_WORD *)(v226 + 22) = 1024;
      LODWORD(v309) = v225;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, (char *)&v309 + 4);
      *(_WORD *)(v226 + 28) = 1024;
      LODWORD(v309) = v294;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, (char *)&v309 + 4);
      *(_WORD *)(v226 + 34) = 2082;
      if (v177)
      {
        v220 = v301;
        v229 = objc_msgSend(v301, "BOOLValue");
      }
      else
      {
        v229 = 2;
        v220 = v301;
      }
      p_ivar_base_size = &RDDataAccess.ivar_base_size;
      LOBYTE(v309) = v229;
      v231 = sub_10001A630((uint64_t *)&unk_10084DBC0);
      v232 = String.init<A>(describing:)(&v309, v231);
      *(_QWORD *)&v309 = sub_10001A820(v232, v233, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, (char *)&v309 + 8);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v221, v223, "UpdateAccountWithACAccount: Will process CloudKit account {accountID: %{public}s, type: %{public}s, didChooseToMigrate: %{BOOL}d, shouldShowCloudKitAccount: %{BOOL}d, didFinishMigration: %{public}s}", (uint8_t *)v226, 0x2Cu);
      v234 = v295;
      swift_arrayDestroy(v295, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v234, -1, -1);
      swift_slowDealloc(v226, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v222, 2);
      p_ivar_base_size = (_DWORD *)(&RDDataAccess + 8);
    }
    v235 = (char *)objc_opt_self(REMAppleAccountUtilities);
    v236 = objc_msgSend(v235, "accountDescriptionWithACAccount:", v89);
    if (v236)
    {
      v237 = v236;
      v238 = static String._unconditionallyBridgeFromObjectiveC(_:)(v236);
      v240 = v239;

    }
    else
    {
      v238 = 0;
      v240 = 0;
    }
    *(_QWORD *)&v241 = swift_beginAccess((char *)&v304 + 7, &aBlock, 0, 0).n128_u64[0];
    v242 = HIBYTE(v304);
    v295 = v235;
    if (v177)
      v243 = objc_msgSend(v220, "BOOLValue", v241);
    else
      v243 = 2;
    v244 = objc_msgSend(v89, *((SEL *)p_ivar_base_size + 317), AAAccountClassBasic);
    if (v240)
      v245 = v238;
    else
      v245 = 0x64756F6C4369;
    if (!v240)
      v240 = 0xE600000000000000;
    swift_bridgeObjectRetain(v292);
    v129 = sub_1002CAB38(0, 1, 1, _swiftEmptyArrayStorage);
    v247 = v129[2];
    v246 = v129[3];
    if (v247 >= v246 >> 1)
      v129 = sub_1002CAB38((_QWORD *)(v246 > 1), v247 + 1, 1, v129);
    v129[2] = v247 + 1;
    v248 = &v129[6 * v247];
    v249 = v292;
    v248[4] = v298;
    v248[5] = v249;
    v248[6] = v245;
    v248[7] = v240;
    v248[8] = v302;
    *((_BYTE *)v248 + 72) = v242;
    *((_BYTE *)v248 + 73) = 0;
    *((_BYTE *)v248 + 74) = (_BYTE)v296;
    *((_BYTE *)v248 + 75) = v243;
    *((_BYTE *)v248 + 76) = v244;
    v250 = sub_100552370(v89);
    if (v251)
    {
      v252 = (uint64_t)v250;
      v253 = v251;
      swift_bridgeObjectRetain_n(v251, 2);
      v255 = Logger.logObject.getter(v254);
      v256 = static os_log_type_t.default.getter(v255);
      if (os_log_type_enabled(v255, v256))
      {
        v257 = swift_slowAlloc(18, -1);
        v258 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v309 = v258;
        *(_DWORD *)v257 = 136446466;
        swift_bridgeObjectRetain(v253);
        v303 = (id)sub_10001A820(v252, v253, (uint64_t *)&v309);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v303, &v304);
        swift_bridgeObjectRelease_n(v253, 3);
        *(_WORD *)(v257 + 12) = 1024;
        LODWORD(v303) = (_DWORD)v296;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v303, (char *)&v303 + 4);
        _os_log_impl((void *)&_mh_execute_header, v255, v256, "UpdateAccountWithACAccount: Will process iCloud CalDAV account {accountID: %{public}s, didChooseToMigrate: %{BOOL}d}", (uint8_t *)v257, 0x12u);
        swift_arrayDestroy(v258, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v258, -1, -1);
        swift_slowDealloc(v257, -1, -1);

      }
      else
      {

        *(_QWORD *)&v259 = swift_bridgeObjectRelease_n(v253, 2).n128_u64[0];
      }
      v22 = v292;
      v260 = 0x64756F6C4369;
      v261 = objc_msgSend(v295, "accountDescriptionWithACAccount:", v89, v259);
      if (v261)
      {
        v262 = v261;
        v263 = static String._unconditionallyBridgeFromObjectiveC(_:)(v261);
        v265 = v264;

      }
      else
      {
        v263 = 0;
        v265 = 0;
      }
      v266 = HIBYTE(v304) ^ 1;
      if (v265)
        v260 = v263;
      else
        v265 = 0xE600000000000000;
      v268 = v129[2];
      v267 = v129[3];
      if (v268 >= v267 >> 1)
        v129 = sub_1002CAB38((_QWORD *)(v267 > 1), v268 + 1, 1, v129);
      v129[2] = v268 + 1;
      v269 = &v129[6 * v268];
      v269[4] = v252;
      v269[5] = v253;
      v269[6] = v260;
      v269[7] = v265;
      v269[8] = 3;
      *((_BYTE *)v269 + 72) = v266 & 1;
      *(_DWORD *)((char *)v269 + 73) = 33686016;
    }
    else
    {
      v22 = v292;
    }
    v88 = v290;

    goto LABEL_154;
  }
  v174 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  if (swift_dynamicCast(&v303, &aBlock, (char *)&type metadata for Any + 8, v174, 6))
    v177 = v303;
  else
    v177 = 0;
  HIBYTE(v304) = 0;
  if (!v159)
    goto LABEL_93;
LABEL_89:
  v178 = swift_unknownObjectWeakLoadStrong(v295 + 32, v175);
  if (v178)
  {
    v179 = (void *)v178;
    v180 = sub_1005520BC(v298, v22);
    if (v180)
    {
      v181 = v180;
      sub_10027A4DC(v180, v179);
      v183 = v182;

      v184 = *(unsigned __int8 *)(v183 + 88);
      swift_release(v183);
      HIBYTE(v304) = v184 ^ 1;
      goto LABEL_94;
    }
    swift_bridgeObjectRetain(v22);
    v213 = Logger.logObject.getter(v212);
    v214 = static os_log_type_t.error.getter(v213);
    if (os_log_type_enabled(v213, v214))
    {
      v302 = (uint64_t)v177;
      v215 = (uint8_t *)swift_slowAlloc(12, -1);
      v216 = swift_slowAlloc(32, -1);
      *(_QWORD *)&aBlock = v216;
      *(_DWORD *)v215 = 136315138;
      swift_bridgeObjectRetain(v22);
      *(_QWORD *)&v309 = sub_10001A820(v298, v22, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, (char *)&v309 + 8);
      swift_bridgeObjectRelease_n(v22, 3);
      _os_log_impl((void *)&_mh_execute_header, v213, v214, "Display ACAccount ID is not an UUID {displayACAccountID: %s}", v215, 0xCu);
      swift_arrayDestroy(v216, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v216, -1, -1);
      swift_slowDealloc(v215, -1, -1);
      swift_release(v88);

    }
    else
    {
      swift_release(v88);

      swift_bridgeObjectRelease_n(v22, 2);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v194 = Logger.logObject.getter(v193);
    v195 = static os_log_type_t.error.getter(v194);
    if (os_log_type_enabled(v194, v195))
    {
      v196 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v196 = 0;
      _os_log_impl((void *)&_mh_execute_header, v194, v195, "Store controller missing for checking whether migration has failed", v196, 2u);
      swift_slowDealloc(v196, -1, -1);
      v197 = v89;
    }
    else
    {
      v197 = v194;
      v194 = v89;
    }
    swift_release(v88);

  }
}

uint64_t sub_10054B6C8(char a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v32;
  _QWORD v35[3];
  _BYTE v36[8];
  uint64_t v37;
  uint64_t v38;

  v14 = a9;
  if ((a1 & 1) != 0)
  {
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v15 = type metadata accessor for Logger(0);
    sub_10001AAA8(v15, (uint64_t)qword_10084F6F8);
    swift_bridgeObjectRetain_n(a4, 2);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v38 = v20;
      *(_DWORD *)v19 = 136446210;
      swift_bridgeObjectRetain(a4);
      v37 = sub_10001A820(a3, a4, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "UpdateAccountWithACAccount: Migration state fetched {accountID: %{public}s}", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a4, 2);
    }
    v14 = a9;
  }
  else
  {
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v22 = type metadata accessor for Logger(0);
    sub_10001AAA8(v22, (uint64_t)qword_10084F6F8);
    swift_bridgeObjectRetain(a4);
    swift_errorRetain(a2);
    swift_bridgeObjectRetain(a4);
    v23 = swift_errorRetain(a2);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v32 = a6;
      v26 = swift_slowAlloc(22, -1);
      v27 = swift_slowAlloc(64, -1);
      v38 = v27;
      *(_DWORD *)v26 = 136315394;
      if (a2)
      {
        swift_getErrorValue(a2, v36, v35);
        v28 = Error.localizedDescription.getter(v35[1], v35[2]);
        v30 = v29;
      }
      else
      {
        v30 = 0xE300000000000000;
        v28 = 7104878;
      }
      v37 = sub_10001A820(v28, v30, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
      swift_bridgeObjectRelease();
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      *(_WORD *)(v26 + 12) = 2082;
      swift_bridgeObjectRetain(a4);
      v37 = sub_10001A820(a3, a4, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "UpdateAccountWithACAccount: Failed to fetch migration status. Assume the account is un-migrated {error: %s, accountID: %{public}s}", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      a6 = v32;
      v14 = a9;
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);

      swift_bridgeObjectRelease_n(a4, 2);
    }
  }
  return sub_100549238(a6, a7, 0, a8 & 1, v14, a10);
}

void sub_10054BAE0(char a1, uint64_t a2, void *a3, uint64_t a4, void *a5, char a6, void (*a7)(_QWORD, _QWORD, _QWORD *, _QWORD), uint64_t a8)
{
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  void (*v27)(_QWORD, _QWORD, _QWORD *, _QWORD);
  uint64_t v28;
  void *v29;
  char v30;
  _QWORD v31[3];
  _BYTE v32[8];
  uint64_t v33;
  uint64_t v34;

  if ((a1 & 1) == 0)
  {
    v30 = a6;
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v13 = type metadata accessor for Logger(0);
    sub_10001AAA8(v13, (uint64_t)qword_10084F6F8);
    v14 = a3;
    swift_errorRetain(a2);
    v15 = v14;
    v16 = swift_errorRetain(a2);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v26 = v17;
      v27 = a7;
      v29 = a5;
      v19 = swift_slowAlloc(22, -1);
      v20 = (_QWORD *)swift_slowAlloc(8, -1);
      v28 = swift_slowAlloc(32, -1);
      v34 = v28;
      *(_DWORD *)v19 = 138543618;
      v33 = (uint64_t)v15;
      v21 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);
      *v20 = v15;

      *(_WORD *)(v19 + 12) = 2080;
      if (a2)
      {
        swift_getErrorValue(a2, v32, v31);
        v22 = Error.localizedDescription.getter(v31[1], v31[2]);
        v24 = v23;
      }
      else
      {
        v24 = 0xE300000000000000;
        v22 = 7104878;
      }
      a7 = v27;
      v33 = sub_10001A820(v22, v24, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);
      swift_bridgeObjectRelease();
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v26, v18, "UpdateAccountWithACAccount: Error updating migration flags for ACAccount {acAccount: %{public}@, error: %s}", (uint8_t *)v19, 0x16u);
      v25 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v20, 1, v25);
      swift_slowDealloc(v20, -1, -1);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v19, -1, -1);

      a5 = v29;
    }
    else
    {

      swift_errorRelease(a2);
      swift_errorRelease(a2);

    }
    a6 = v30;
  }
  sub_100549238(a3, a5, 0, a6 & 1, a7, a8);
}

double sub_10054BDAC(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, void (*a8)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  char v15;
  void *v16;
  id v17;
  id v18;
  _QWORD *v19;
  uint64_t v20;
  id v21;
  _QWORD *v22;
  Class isa;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  void (*v28)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint8_t *v29;
  _QWORD *v30;
  uint8_t *v31;
  int64_t v32;
  _QWORD *v33;
  void (*v34)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  double result;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _BYTE v49[24];

  v15 = a1;
  if ((a1 & 1) != 0 || (a2 & 1) != 0)
  {
    swift_beginAccess(a4 + 16, v49, 0, 0);
    if (*(_BYTE *)(a4 + 16) == 1)
    {
      v43 = a7;
      v44 = v15;
      v16 = (void *)objc_opt_self(REMUserDefaults);
      v17 = objc_msgSend(v16, "daemonUserDefaults");
      v18 = objc_msgSend(v17, "acAccountIdentifiersToMigrateInactivatedCalDavData");

      if (v18)
      {
        v19 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, &type metadata for String);

      }
      else
      {
        v19 = _swiftEmptyArrayStorage;
      }
      v20 = sub_10011EE40((uint64_t)v19);
      swift_bridgeObjectRelease();
      v48 = v20;
      swift_bridgeObjectRetain(a6);
      sub_1002DB0E4((uint64_t *)&v47, a5, a6);
      v21 = objc_msgSend(v16, "daemonUserDefaults", swift_bridgeObjectRelease().n128_f64[0]);
      v22 = sub_1001E8BAC(v48);
      swift_bridgeObjectRelease();
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_release(v22);
      objc_msgSend(v21, "setAcAccountIdentifiersToMigrateInactivatedCalDavData:", isa);

      if (qword_100837880 != -1)
        swift_once(&qword_100837880, sub_100547F80);
      v24 = type metadata accessor for Logger(0);
      sub_10001AAA8(v24, (uint64_t)qword_10084F6F8);
      swift_bridgeObjectRetain_n(a6, 2);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.default.getter(v26);
      if (os_log_type_enabled(v26, v27))
      {
        v28 = a8;
        v29 = (uint8_t *)swift_slowAlloc(12, -1);
        v30 = (_QWORD *)swift_slowAlloc(32, -1);
        v47 = v30;
        *(_DWORD *)v29 = 136446210;
        swift_bridgeObjectRetain(a6);
        v46 = sub_10001A820(a5, a6, (uint64_t *)&v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47);
        swift_bridgeObjectRelease_n(a6, 3);
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "UpdateAccountWithACAccount: inserting to daemonUserDefaults.acAccountIdentifiersToMigrateInactivatedCalDavData {displayAccountID: %{public}s}", v29, 0xCu);
        swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v30, -1, -1);
        v31 = v29;
        a8 = v28;
        swift_slowDealloc(v31, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a6, 2);
      }
      a7 = v43;
      v15 = v44;
    }
  }
  v32 = *(_QWORD *)(a7 + 16);
  v33 = _swiftEmptyArrayStorage;
  if (v32)
  {
    v45 = v15;
    v42 = a3;
    v34 = a8;
    v47 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(a7);
    sub_1001C1B0C(0, v32, 0);
    v33 = v47;
    v35 = (uint64_t *)(a7 + 40);
    do
    {
      v37 = *(v35 - 1);
      v36 = *v35;
      v47 = v33;
      v39 = v33[2];
      v38 = v33[3];
      swift_bridgeObjectRetain(v36);
      if (v39 >= v38 >> 1)
      {
        sub_1001C1B0C(v38 > 1, v39 + 1, 1);
        v33 = v47;
      }
      v35 += 6;
      v33[2] = v39 + 1;
      v40 = &v33[2 * v39];
      v40[4] = v37;
      v40[5] = v36;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease();
    a8 = v34;
    a3 = v42;
    v15 = v45;
  }
  a8(v15 & 1, a2 & 1, v33, a3);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

id sub_10054C1C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  unsigned int v9;
  objc_class *v10;
  void *v11;
  uint64_t ObjectType;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;

  Strong = swift_unknownObjectWeakLoadStrong(v2 + 16, a2);
  if (!Strong)
  {
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_10001AAA8(v23, (uint64_t)qword_10084F6F8);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to create store because the XPC daemon is gone", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    return 0;
  }
  v5 = Strong;
  v6 = *(_QWORD *)(v2 + 24);
  v7 = (void *)swift_unknownObjectWeakLoadStrong(v2 + 32, v4);
  if (!v7 || (v8 = v7, v9 = objc_msgSend(v7, "supportsAccountUtils"), v8, !v9))
  {
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_10001AAA8(v18, (uint64_t)qword_10084F6F8);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed to create store because storeController does not support accountUtils", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
      swift_unknownObjectRelease(v5);

    }
    else
    {

      swift_unknownObjectRelease(v5);
    }
    return 0;
  }
  v10 = (objc_class *)type metadata accessor for RDDaemonController();
  v29 = xmmword_1006C2530;
  v31 = 0;
  *(_QWORD *)&v32 = 0;
  v30 = 0;
  *(_QWORD *)((char *)&v32 + 6) = 0;
  v11 = *(void **)(v2 + 40);
  ObjectType = swift_getObjectType(v5);
  v13 = v11;
  v14 = swift_unknownObjectRetain(v5);
  v15 = sub_1004AD610(v14, (uint64_t)&v29, (uint64_t)v11, v10, ObjectType, v6);
  v16 = objc_allocWithZone((Class)REMStore);
  v17 = objc_msgSend(v16, "initWithDaemonController:", v15, v29, v30, v31, (_QWORD)v32, *((_QWORD *)&v32 + 1));
  swift_unknownObjectRelease(v5);

  return v17;
}

void sub_10054C434(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  double v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  id v16;
  id v17;
  uint64_t v18;
  Swift::String v19;
  __n128 v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  id v28;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  v26 = 0;
  v27 = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  *(_QWORD *)&v9 = swift_bridgeObjectRelease().n128_u64[0];
  v26 = 0x203A656D616E3CLL;
  v27 = 0xE700000000000000;
  v10 = objc_msgSend(v8, "name", v9);
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0x6E756F636361202CLL;
  v15._object = (void *)0xED0000203A444974;
  String.append(_:)(v15);
  v16 = objc_msgSend(v8, "objectID");
  v17 = objc_msgSend(v16, "uuid");

  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v18 = sub_10009FC50((unint64_t *)&qword_10083FA40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v4, v18);
  String.append(_:)(v19);
  v20 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v20);
  v21._countAndFlagsBits = 0x203A65707974202CLL;
  v21._object = (void *)0xE800000000000000;
  String.append(_:)(v21);
  v28 = objc_msgSend(v8, "type");
  v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 62;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  v24 = v27;
  *a2 = v26;
  a2[1] = v24;
}

uint64_t sub_10054C664(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  if (qword_100837880 != -1)
    swift_once(&qword_100837880, sub_100547F80);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001AAA8(v4, (uint64_t)qword_10084F6F8);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Orphaned accounts removed", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  return a2(1, a1);
}

void sub_10054C754(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t Strong;
  void *v16;
  _QWORD *v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  _QWORD v29[2];
  NSObject *v30;
  _QWORD *v31;
  _QWORD aBlock[5];
  _QWORD *v33;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(NSObject **)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Strong = swift_unknownObjectWeakLoadStrong(v3 + 32, v14);
  if (Strong)
  {
    v16 = (void *)Strong;
    if (qword_100836F10 != -1)
      swift_once(&qword_100836F10, sub_1001BA718);
    v29[1] = qword_100871CD0;
    v17 = (_QWORD *)swift_allocObject(&unk_1007FA0D0, 48, 7);
    v17[2] = a1;
    v17[3] = v16;
    v17[4] = a2;
    v17[5] = a3;
    aBlock[4] = sub_100553800;
    v33 = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000094C8;
    aBlock[3] = &unk_1007FA0E8;
    v18 = _Block_copy(aBlock);
    v19 = a1;
    v20 = v16;
    v21 = swift_retain(a3);
    static DispatchQoS.unspecified.getter(v21);
    v31 = _swiftEmptyArrayStorage;
    v22 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v23 = sub_10001A630((uint64_t *)&unk_100838000);
    v24 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v23, v24, v7, v22);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v18);
    _Block_release(v18);

    ((void (*)(char *, uint64_t))v30[1].isa)(v9, v7);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    swift_release(v33);
  }
  else
  {
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_10001AAA8(v25, (uint64_t)qword_10084F6F8);
    v30 = Logger.logObject.getter(v26);
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v27, "RDAccountUtils: _initializeAllAccounts: Missing store controller.", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

  }
}

uint64_t sub_10054CA68(void *a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  objc_class *v16;
  char *v17;
  id v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  objc_super v24;

  if (qword_100837880 != -1)
    swift_once(&qword_100837880, sub_100547F80);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001AAA8(v6, (uint64_t)qword_10084F6F8);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDAccountUtils: _initializeAllAccounts: Calling RDAccountInitializer.initializeAllAccounts()", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = (void *)objc_opt_self(REMAppleAccountUtilities);
  v12 = a1;
  v13 = a2;
  v14 = objc_msgSend(v11, "sharedInstance");
  v15 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
  v16 = (objc_class *)type metadata accessor for RDAccountInitializer();
  v17 = (char *)objc_allocWithZone(v16);
  *(_QWORD *)&v17[OBJC_IVAR____TtC7remindd20RDAccountInitializer_store] = v12;
  *(_QWORD *)&v17[OBJC_IVAR____TtC7remindd20RDAccountInitializer_storeController] = v13;
  *(_QWORD *)&v17[OBJC_IVAR____TtC7remindd20RDAccountInitializer_appleAccountUtilities] = v14;
  *(_QWORD *)&v17[OBJC_IVAR____TtC7remindd20RDAccountInitializer_userDefaults] = v15;
  v24.receiver = v17;
  v24.super_class = v16;
  v18 = objc_msgSendSuper2(&v24, "init");
  sub_1003AA80C();

  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.info.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "RDAccountUtils: _initializeAllAccounts: RDAccountInitializer.initializeAllAccounts() finished, calling completion.", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }

  return a3();
}

void sub_10054CCA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *Strong;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  NSObject *oslog;

  Strong = swift_unknownObjectWeakLoadStrong(v2 + 32, a2);
  if (!Strong)
  {
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10001AAA8(v11, (uint64_t)qword_10084F6F8);
    oslog = Logger.logObject.getter(v12);
    v13 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v13, "RDAccountUtils: Missing store controller, can't start ICCC.", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }
    goto LABEL_12;
  }
  v4 = Strong;
  v5 = -[NSObject cloudContext](Strong, "cloudContext");
  if (v5)
  {
    oslog = v5;
    -[NSObject setDisabled:](v5, "setDisabled:", 0);
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10001AAA8(v6, (uint64_t)qword_10084F6F8);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDAccountUtils: Enabled ICCC", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

LABEL_12:
    v15 = oslog;
    goto LABEL_18;
  }
  if (qword_100837880 != -1)
    swift_once(&qword_100837880, sub_100547F80);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10001AAA8(v16, (uint64_t)qword_10084F6F8);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.error.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "RDAccountUtils: Missing ICCC, can't start ICCC.", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

  v15 = v4;
LABEL_18:

}

void sub_10054CF20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *Strong;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  NSObject *v20;
  _QWORD aBlock[5];
  uint64_t v22;

  Strong = swift_unknownObjectWeakLoadStrong(v2 + 32, a2);
  if (Strong)
  {
    v20 = Strong;
    v6 = -[NSObject cloudContext](Strong, "cloudContext");
    if (v6)
    {
      v7 = v6;
      objc_msgSend(v6, "setDisabled:", 1);
      v8 = swift_allocObject(&unk_1007FA080, 32, 7);
      *(_QWORD *)(v8 + 16) = a1;
      *(_QWORD *)(v8 + 24) = a2;
      aBlock[4] = sub_1005537C4;
      v22 = v8;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000094C8;
      aBlock[3] = &unk_1007FA098;
      v9 = _Block_copy(aBlock);
      v10 = v22;
      swift_retain(a2);
      swift_release(v10);
      objc_msgSend(v7, "cancelEverythingWithCompletionHandler:", v9);
      _Block_release(v9);

      return;
    }
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_10001AAA8(v15, (uint64_t)qword_10084F6F8);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "RDAccountUtils: Missing ICCC, can't stop ICCC.", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

  }
  else
  {
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10001AAA8(v11, (uint64_t)qword_10084F6F8);
    v20 = Logger.logObject.getter(v12);
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v13, "RDAccountUtils: Missing store controller, can't stop ICCC.", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }
  }

}

uint64_t sub_10054D194(uint64_t (*a1)(void))
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  if (qword_100837880 != -1)
    swift_once(&qword_100837880, sub_100547F80);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001AAA8(v2, (uint64_t)qword_10084F6F8);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "RDAccountUtils: Disabled ICCC", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  return a1();
}

void sub_10054D278(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend((id)objc_opt_self(DADAgentManager), "sharedManager");
  objc_msgSend(v2, "enableMonitoringAgentsWithToken:", a1);

}

uint64_t sub_10054D2D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[5];
  _QWORD *v25;
  _BYTE v26[24];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend((id)objc_opt_self(DADAgentManager), "sharedManager");
  v13 = objc_msgSend(v12, "disableMonitoringAgents");
  swift_beginAccess(a1 + 16, v26, 1, 0);
  *(_QWORD *)(a1 + 16) = v13;
  *(_BYTE *)(a1 + 24) = 0;
  if (qword_100836F10 != -1)
    swift_once(&qword_100836F10, sub_1001BA718);
  v14 = (_QWORD *)swift_allocObject(&unk_1007FA490, 40, 7);
  v14[2] = a2;
  v14[3] = a3;
  v14[4] = a1;
  aBlock[4] = sub_1005659A8;
  v25 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007FA4A8;
  v15 = _Block_copy(aBlock);
  swift_retain(a3);
  v16 = swift_retain(a1);
  static DispatchQoS.unspecified.getter(v16);
  v23 = _swiftEmptyArrayStorage;
  v17 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10001A630((uint64_t *)&unk_100838000);
  v19 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v18, v19, v6, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v21);
  return swift_release(v25);
}

uint64_t sub_10054D558()
{
  uint64_t v0;

  sub_100008EFC(v0 + 16);
  swift_unknownObjectWeakDestroy(v0 + 32);

  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for RDAccountUtils()
{
  return objc_opt_self(_TtC7remindd14RDAccountUtils);
}

uint64_t sub_10054D5AC(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;

  v17 = swift_allocObject(&unk_1007FA968, 72, 7);
  *(_QWORD *)(v17 + 16) = a5;
  *(_QWORD *)(v17 + 24) = a7;
  *(_BYTE *)(v17 + 32) = a8 & 1;
  *(_QWORD *)(v17 + 40) = a9;
  *(_QWORD *)(v17 + 48) = a10;
  *(_BYTE *)(v17 + 56) = a1;
  *(_BYTE *)(v17 + 57) = a2;
  *(_QWORD *)(v17 + 64) = a4;
  swift_retain();
  swift_retain();
  swift_errorRetain(a4);
  sub_10054C754(a6, (uint64_t)sub_1005681C0, v17);
  return swift_release(v17);
}

uint64_t sub_10054D66C(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD aBlock[5];
  uint64_t v36;

  v33 = a4;
  v29 = a9;
  v16 = type metadata accessor for DispatchWorkItemFlags(0);
  v32 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS(0);
  v30 = *(_QWORD *)(v19 - 8);
  v31 = v19;
  __chkstk_darwin(v19);
  v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = swift_allocObject(a7, 48, 7);
  *(_QWORD *)(v22 + 16) = a5;
  *(_QWORD *)(v22 + 24) = a6;
  *(_BYTE *)(v22 + 32) = a1;
  *(_BYTE *)(v22 + 33) = a2;
  *(_QWORD *)(v22 + 40) = a3;
  aBlock[4] = a8;
  v36 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = v29;
  v23 = _Block_copy(aBlock);
  swift_retain();
  v24 = swift_errorRetain(a3);
  static DispatchQoS.unspecified.getter(v24);
  v34 = _swiftEmptyArrayStorage;
  v25 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_10001A630((uint64_t *)&unk_100838000);
  v27 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v26, v27, v16, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v21, v18, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v18, v16);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v21, v31);
  return swift_release(v36);
}

uint64_t sub_10054D87C(uint64_t a1, char a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v14;
  id v15;

  v14 = swift_allocObject(&unk_1007FAA30, 65, 7);
  *(_QWORD *)(v14 + 16) = a3;
  *(_QWORD *)(v14 + 24) = a4;
  *(_QWORD *)(v14 + 32) = a1;
  *(_BYTE *)(v14 + 40) = a2 & 1;
  *(_QWORD *)(v14 + 48) = a5;
  *(_QWORD *)(v14 + 56) = a6;
  *(_BYTE *)(v14 + 64) = a7;
  swift_retain();
  v15 = a4;
  swift_retain();
  sub_10054CF20((uint64_t)sub_100568368, v14);
  return swift_release(v14);
}

uint64_t sub_10054D924(uint64_t a1, void *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  id v29;
  void *v30;
  dispatch_group_t v31;
  id v32;
  NSObject *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint8_t *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  dispatch_group_t v59;
  _QWORD *v60;
  id v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  dispatch_group_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  _QWORD *v75;
  _QWORD aBlock[5];
  _QWORD *v77;

  v69 = a7;
  LOBYTE(v12) = a4 & 1;
  v13 = type metadata accessor for DispatchWorkItemFlags(0);
  v67 = *(_QWORD *)(v13 - 8);
  v68 = v13;
  __chkstk_darwin(v13);
  v66 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v64 = *(_QWORD *)(v15 - 8);
  v65 = v15;
  __chkstk_darwin(v15);
  v63 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_allocObject(&unk_1007FA120, 17, 7);
  *(_BYTE *)(v17 + 16) = 0;
  v18 = swift_allocObject(&unk_1007FA120, 17, 7);
  *(_BYTE *)(v18 + 16) = 0;
  v19 = swift_allocObject(&unk_1007FAA58, 80, 7);
  *(_QWORD *)(v19 + 16) = a1;
  *(_QWORD *)(v19 + 24) = a2;
  *(_QWORD *)(v19 + 32) = v17;
  *(_QWORD *)(v19 + 40) = v18;
  *(_QWORD *)(v19 + 48) = a3;
  *(_BYTE *)(v19 + 56) = v12;
  *(_QWORD *)(v19 + 64) = a5;
  *(_QWORD *)(v19 + 72) = a6;
  v20 = (void *)objc_opt_self(REMAppleAccountUtilities);
  swift_retain();
  v71 = a2;
  v72 = a1;
  swift_retain();
  v73 = v18;
  swift_retain();
  v74 = v17;
  swift_retain();
  v21 = objc_msgSend(v20, "sharedInstance");
  v22 = objc_msgSend(v21, "accountStore");

  v23 = objc_msgSend(v22, "aa_accountsEnabledForDataclass:", kAccountDataclassReminders);
  if (v23)
  {
    v24 = v23;
    v25 = sub_1000151B0(0, &qword_100847FA0, ACAccount_ptr);
    v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v24, v25);

    v70 = dispatch_group_create();
    a6 = swift_allocObject(&unk_1007FAA80, 24, 7);
    *(_QWORD *)(a6 + 16) = 0;
    v61 = v22;
    v62 = v19;
    if ((unint64_t)v12 >> 62)
    {
      if (v12 < 0)
        v47 = v12;
      else
        v47 = v12 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v12);
      a5 = _CocoaArrayWrapper.endIndex.getter(v47);
      swift_bridgeObjectRelease();
      if (a5)
        goto LABEL_4;
    }
    else
    {
      a5 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (a5)
      {
LABEL_4:
        if (a5 >= 1)
        {
          v26 = 0;
          v69 &= 1u;
          v27 = v73;
          v28 = v74;
          do
          {
            if ((v12 & 0xC000000000000001) != 0)
              v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v26, v12);
            else
              v29 = *(id *)(v12 + 8 * v26 + 32);
            v30 = v29;
            if ((objc_msgSend(v29, "isActive", v61) & 1) != 0)
            {
              v31 = v70;
              dispatch_group_enter(v70);
              swift_retain();
              swift_retain();
              swift_retain();
              v32 = v30;
              v33 = v31;
              sub_10055B888(v32, v71, 2, v69, v72, v32, a6, v28, v27, v33);

              swift_release(v27);
              swift_release(a6);

              swift_release(v28);
            }
            else
            {

            }
            ++v26;
          }
          while (a5 != v26);
          goto LABEL_21;
        }
        __break(1u);
        goto LABEL_25;
      }
    }
LABEL_21:
    swift_bridgeObjectRelease();
    if (qword_100836F28 != -1)
      swift_once(&qword_100836F28, sub_1001BA8F8);
    v48 = qword_100871CE8;
    v49 = (_QWORD *)swift_allocObject(&unk_1007FAAA8, 40, 7);
    v49[2] = a6;
    v49[3] = sub_1005683C4;
    v50 = v62;
    v49[4] = v62;
    aBlock[4] = sub_100568420;
    v77 = v49;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000094C8;
    aBlock[3] = &unk_1007FAAC0;
    v51 = _Block_copy(aBlock);
    swift_retain();
    v52 = swift_retain();
    v53 = v63;
    static DispatchQoS.unspecified.getter(v52);
    v75 = _swiftEmptyArrayStorage;
    v54 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v55 = sub_10001A630((uint64_t *)&unk_100838000);
    v56 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
    v57 = v66;
    v58 = v68;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v75, v55, v56, v68, v54);
    v59 = v70;
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v53, v57, v48, v51);
    _Block_release(v51);
    swift_release(v50);

    (*(void (**)(char *, uint64_t))(v67 + 8))(v57, v58);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v53, v65);
    v60 = v77;
    swift_release(v74);
    swift_release(v73);
    swift_release(a6);
    return swift_release(v60);
  }
  if (qword_100837880 != -1)
LABEL_25:
    swift_once(&qword_100837880, sub_100547F80);
  v34 = v22;
  v35 = type metadata accessor for Logger(0);
  v36 = sub_10001AAA8(v35, (uint64_t)qword_10084F6F8);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.default.getter(v37);
  if (os_log_type_enabled(v37, v38))
  {
    v39 = v19;
    v40 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v40 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "RDAccountUtils: No reminders accounts is found", v40, 2u);
    v41 = v40;
    v19 = v39;
    swift_slowDealloc(v41, -1, -1);
  }

  swift_retain();
  v42 = v71;
  v43 = v72;
  swift_retain();
  v44 = v73;
  swift_retain();
  v45 = (uint64_t)v74;
  swift_retain();
  sub_100565A18(v42, v45, v44, 0, v43, (char *)v42, a3, v12, a5, a6);

  swift_release(v19);
  swift_release_n(v45);
  swift_release_n(v44);
  swift_release(v43);

  return swift_release(a6);
}

uint64_t sub_10054DFB0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  char v16;
  id v17;

  v16 = a7 & 1;
  swift_retain();
  swift_retain();
  swift_errorRetain(a1);
  swift_retain();
  v17 = a3;
  swift_retain();
  sub_100565A18(v17, a4, a5, a1, a2, (char *)v17, a6, v16, a8, a9);
  swift_release(a2);

  swift_release(a9);
  swift_errorRelease(a1);
  swift_release(a4);
  return swift_release(a5);
}

uint64_t sub_10054E094(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  Class isa;
  id v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v33[24];
  _BYTE v34[24];
  _BYTE v35[24];
  _BYTE v36[24];

  v17 = a3 + 16;
  v18 = a4 + 16;
  swift_beginAccess(a3 + 16, v36, 0, 0);
  v19 = *(_BYTE *)(a3 + 16) | a1;
  swift_beginAccess(v17, v35, 1, 0);
  *(_BYTE *)(a3 + 16) = v19 & 1;
  swift_beginAccess(v18, v34, 0, 0);
  v20 = *(_BYTE *)(a4 + 16) | a1;
  swift_beginAccess(v18, v33, 1, 0);
  *(_BYTE *)(a4 + 16) = v20 & 1;
  v21 = swift_allocObject(&unk_1007FAA80, 24, 7);
  v22 = v21;
  *(_QWORD *)(v21 + 16) = a2;
  if (!a5)
  {
    v28 = a2;
LABEL_6:
    swift_errorRetain(v28);
    goto LABEL_7;
  }
  if (!a2)
  {
    *(_QWORD *)(v21 + 16) = a5;
    v28 = a5;
    goto LABEL_6;
  }
  v23 = (void *)objc_opt_self(REMError);
  v24 = sub_10001A630(&qword_10084F9E0);
  v25 = swift_allocObject(v24, 48, 7);
  *(_OWORD *)(v25 + 16) = xmmword_1006A3C40;
  *(_QWORD *)(v25 + 32) = a5;
  *(_QWORD *)(v25 + 40) = a2;
  swift_errorRetain(a2);
  swift_errorRetain(a2);
  swift_errorRetain(a5);
  sub_10001A630((uint64_t *)&unk_10083AA20);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v27 = objc_msgSend(v23, "errorFromErrors:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  *(_QWORD *)(v22 + 16) = v27;
  swift_errorRelease(a2);
LABEL_7:
  v29 = swift_allocObject(&unk_1007FAD78, 80, 7);
  *(_QWORD *)(v29 + 16) = a6;
  *(_QWORD *)(v29 + 24) = a8;
  *(_BYTE *)(v29 + 32) = a9 & 1;
  *(_QWORD *)(v29 + 40) = a3;
  *(_QWORD *)(v29 + 48) = a4;
  *(_QWORD *)(v29 + 56) = v22;
  *(_QWORD *)(v29 + 64) = a10;
  *(_QWORD *)(v29 + 72) = a11;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10054C754(a7, (uint64_t)sub_1005685CC, v29);
  swift_release(v22);
  return swift_release(v29);
}

uint64_t sub_10054E2E4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v36)(_QWORD, _QWORD, _QWORD);
  _BYTE v37[24];
  _BYTE v38[24];
  _BYTE v39[24];
  _BYTE v40[24];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[4];

  sub_10054CCA8(a1, a2);
  if ((a3 & 1) != 0)
  {
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_10001AAA8(v13, (uint64_t)qword_10084F6F8);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to restart DA monitoring agents", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

  }
  else
  {
    sub_100567DA0(a2);
  }
  if (qword_100837880 != -1)
    swift_once(&qword_100837880, sub_100547F80);
  v18 = (unsigned __int8 *)(a4 + 16);
  v19 = (unsigned __int8 *)(a5 + 16);
  v20 = (uint64_t *)(a6 + 16);
  v21 = type metadata accessor for Logger(0);
  sub_10001AAA8(v21, (uint64_t)qword_10084F6F8);
  swift_retain_n(a6);
  swift_retain();
  v22 = swift_retain();
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v36 = a7;
    v25 = swift_slowAlloc(24, -1);
    v26 = swift_slowAlloc(32, -1);
    v43[0] = v26;
    *(_DWORD *)v25 = 67109634;
    swift_beginAccess(a4 + 16, v39, 0, 0);
    LODWORD(v41) = *(unsigned __int8 *)(a4 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, (char *)&v41 + 4);
    swift_release(a4);
    *(_WORD *)(v25 + 8) = 1024;
    swift_beginAccess(a5 + 16, v38, 0, 0);
    LODWORD(v41) = *(unsigned __int8 *)(a5 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, (char *)&v41 + 4);
    swift_release(a5);
    *(_WORD *)(v25 + 14) = 2080;
    swift_beginAccess(a6 + 16, v37, 0, 0);
    v41 = *(_QWORD *)(a6 + 16);
    swift_errorRetain(v41);
    v27 = sub_10001A630(&qword_10083C158);
    v28 = String.init<A>(describing:)(&v41, v27);
    v41 = sub_10001A820(v28, v29, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
    swift_release_n(a6);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "RDAccountUtils: Completed updating system accounts, calling updateAccountsAndFetchMigrationState completion {didAddOrRemoveAccounts: %{BOOL}d, didUpdateAccounts: %{BOOL}d, error: %s}", (uint8_t *)v25, 0x18u);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    v30 = v26;
    v20 = (uint64_t *)(a6 + 16);
    swift_slowDealloc(v30, -1, -1);
    v31 = v25;
    a7 = v36;
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

    swift_release_n(a6);
    swift_release(a5);
    swift_release(a4);
  }
  swift_beginAccess(v18, v43, 0, 0);
  v32 = *v18;
  swift_beginAccess(v19, &v41, 0, 0);
  v33 = *v19;
  swift_beginAccess(v20, v40, 0, 0);
  v34 = *v20;
  swift_errorRetain(v34);
  a7(v32, v33, v34);
  return swift_errorRelease(v34);
}

void sub_10054E6B8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, NSObject *a7)
{
  uint64_t *v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE v19[24];
  _BYTE v20[24];
  _BYTE v21[24];
  _BYTE v22[24];

  if (a1)
  {
    v13 = (uint64_t *)(a2 + 16);
    swift_beginAccess(a2 + 16, v18, 0, 0);
    if (!*v13)
    {
      swift_beginAccess(v13, &v17, 1, 0);
      v14 = *v13;
      *v13 = a1;
      swift_errorRetain(a1);
      swift_errorRelease(v14);
    }
  }
  swift_beginAccess(a3 + 16, v22, 0, 0);
  v15 = *(_BYTE *)(a3 + 16) | a4;
  swift_beginAccess(a3 + 16, v21, 1, 0);
  *(_BYTE *)(a3 + 16) = v15 & 1;
  swift_beginAccess(a5 + 16, v20, 0, 0);
  v16 = *(_BYTE *)(a5 + 16) | a6;
  swift_beginAccess(a5 + 16, v19, 1, 0);
  *(_BYTE *)(a5 + 16) = v16 & 1;
  dispatch_group_leave(a7);
}

uint64_t sub_10054E7D8(uint64_t a1, void (*a2)(_QWORD))
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  void (*v17)(_QWORD);
  uint64_t v18;
  _QWORD v19[3];
  _BYTE v20[8];
  uint64_t v21[3];
  _BYTE v22[24];

  v4 = (_QWORD *)(a1 + 16);
  swift_beginAccess(a1 + 16, v22, 0, 0);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    swift_errorRetain(*(_QWORD *)(a1 + 16));
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v6 = type metadata accessor for Logger(0);
    sub_10001AAA8(v6, (uint64_t)qword_10084F6F8);
    swift_errorRetain(v5);
    v7 = swift_errorRetain(v5);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v17 = a2;
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v21[0] = v11;
      *(_DWORD *)v10 = 136315138;
      swift_getErrorValue(v5, v20, v19);
      v12 = Error.localizedDescription.getter(v19[1], v19[2]);
      v18 = sub_10001A820(v12, v13, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19);
      swift_bridgeObjectRelease();
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDAccountUtils: Failed to update some or all of the system accounts {error: %s}", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      v14 = v10;
      a2 = v17;
      swift_slowDealloc(v14, -1, -1);

      swift_errorRelease(v5);
    }
    else
    {
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      swift_errorRelease(v5);

    }
  }
  swift_beginAccess(v4, v21, 0, 0);
  v15 = *v4;
  swift_errorRetain(*v4);
  a2(v15);
  return swift_errorRelease(v15);
}

void sub_10054EA18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  NSString v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  id v43;
  id v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  unint64_t v59;
  unint64_t v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v73;
  void *v74;
  Swift::String v75;
  __n128 v76;
  Swift::String v77;
  void *v78;
  Swift::String v79;
  unint64_t v80;
  NSString v81;
  uint64_t v82;
  void *v83;
  NSString v84;
  uint64_t v85;
  void *v86;
  Swift::String v87;
  __n128 v88;
  Swift::String v89;
  void *object;
  Swift::String v91;
  unint64_t v92;
  NSString v93;
  __n128 v94;
  id v95;
  void *v96;
  Class isa;
  id v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void (*v102)(char *, uint64_t);
  id v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  unint64_t v107;

  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v4);
  v6 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v99 - v13;
  v16 = sub_10054C1C0(v12, v15);
  if (!v16)
  {
    v22 = (void *)objc_opt_self(REMError);
    v23 = String._bridgeToObjectiveC()();
    v20 = objc_msgSend(v22, "internalErrorWithDebugDescription:", v23);

    swift_willThrow(v24);
    goto LABEL_5;
  }
  v17 = v16;
  v106 = 0;
  v18 = -[NSObject fetchDefaultListWithError:](v16, "fetchDefaultListWithError:", &v106);
  v19 = v18;
  if (v106)
  {
    v20 = v106;

    swift_willThrow(v21);
LABEL_5:
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v25 = type metadata accessor for Logger(0);
    sub_10001AAA8(v25, (uint64_t)qword_10084F6F8);
    swift_errorRetain(v20);
    v26 = swift_errorRetain(v20);
    v17 = Logger.logObject.getter(v26);
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = (void *)swift_slowAlloc(32, -1);
      v106 = v29;
      *(_DWORD *)v28 = 136315138;
      v104 = (uint64_t)v20;
      swift_errorRetain(v20);
      v30 = sub_10001A630((uint64_t *)&unk_10083AA20);
      v31 = String.init<A>(describing:)(&v104, v30);
      v33 = v32;
      v104 = sub_10001A820(v31, v32, (uint64_t *)&v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105);
      swift_bridgeObjectRelease(v33);
      swift_errorRelease(v20);
      swift_errorRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v17, v27, "Can't migrate default list ID {error: %s}", v28, 0xCu);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);

      swift_errorRelease(v20);
      return;
    }
    swift_errorRelease(v20);
    swift_errorRelease(v20);
    swift_errorRelease(v20);
    goto LABEL_10;
  }
  if (!v18)
  {
LABEL_10:

    return;
  }
  v103 = v18;
  v34 = objc_msgSend(v18, "account");
  v35 = objc_msgSend(v34, "objectID");

  v36 = objc_msgSend(v35, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v36);

  v38 = UUID.uuidString.getter(v37);
  v40 = v39;
  v102 = *(void (**)(char *, uint64_t))(v8 + 8);
  v102(v14, v7);
  if (v38 == a1 && v40 == a2)
  {
    v41 = swift_bridgeObjectRelease(a2).n128_u64[0];
    goto LABEL_16;
  }
  v42 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v38, v40, 0);
  v41 = swift_bridgeObjectRelease(v40).n128_u64[0];
  if ((v42 & 1) == 0)
  {

    goto LABEL_10;
  }
LABEL_16:
  v43 = v103;
  v44 = objc_msgSend(v103, "externalIdentifier", *(double *)&v41);
  if (!v44)
  {
    v83 = (void *)objc_opt_self(REMError);
    v84 = String._bridgeToObjectiveC()();
    v20 = objc_msgSend(v83, "internalErrorWithDebugDescription:", v84);

LABEL_24:
    swift_willThrow(v85);

    goto LABEL_5;
  }
  v45 = v44;
  v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
  v48 = v47;

  v49 = sub_1005543E0(1, v46, v48);
  v51 = v50;
  v53 = v52;
  v54 = v48;
  v56 = v55;
  swift_bridgeObjectRelease(v54);
  v57 = sub_10054F7F4(47, 0xE100000000000000, v49, v56, v51, v53);
  if ((v58 & 1) != 0)
  {
    v86 = (void *)objc_opt_self(REMError);
    v106 = 0;
    v107 = 0xE000000000000000;
    _StringGuts.grow(_:)(91);
    v87._countAndFlagsBits = 0xD000000000000058;
    v87._object = (void *)0x8000000100707F50;
    String.append(_:)(v87);
    v89._countAndFlagsBits = static String._fromSubstring(_:)(v49, v56, v51, v53, v88);
    object = v89._object;
    String.append(_:)(v89);
    swift_bridgeObjectRelease(v53);
    swift_bridgeObjectRelease(object);
    v91._countAndFlagsBits = 125;
    v91._object = (void *)0xE100000000000000;
    String.append(_:)(v91);
    v92 = v107;
    v93 = String._bridgeToObjectiveC()();
    v20 = objc_msgSend(v86, "internalErrorWithDebugDescription:", v93, swift_bridgeObjectRelease(v92).n128_f64[0]);

    goto LABEL_24;
  }
  v101 = v49;
  v59 = Substring.index(_:offsetBy:)(v57, 1, v49, v56, v51, v53);
  if (v56 >> 14 < v59 >> 14)
    __break(1u);
  v60 = v59;
  v61 = swift_bridgeObjectRetain(v53);
  v99 = v56;
  v100 = v51;
  v62 = Substring.subscript.getter(v60, v56, v101, v56, v51, v53, v61);
  v64 = v63;
  v66 = v65;
  v68 = v67;
  v69 = swift_bridgeObjectRelease(v53);
  v70 = static String._fromSubstring(_:)(v62, v64, v66, v68, v69);
  v72 = v71;
  swift_bridgeObjectRelease(v68);
  UUID.init(uuidString:)(v70, v72);
  v73 = swift_bridgeObjectRelease(v72);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v8 + 48))(v6, 1, v7, v73) == 1)
  {
    sub_10000882C((uint64_t)v6, (uint64_t *)&unk_100839C80);
    v74 = (void *)objc_opt_self(REMError);
    v106 = 0;
    v107 = 0xE000000000000000;
    _StringGuts.grow(_:)(90);
    v75._countAndFlagsBits = 0xD000000000000057;
    v75._object = (void *)0x8000000100707FB0;
    String.append(_:)(v75);
    v77._countAndFlagsBits = static String._fromSubstring(_:)(v101, v99, v100, v53, v76);
    v78 = v77._object;
    String.append(_:)(v77);
    swift_bridgeObjectRelease(v53);
    swift_bridgeObjectRelease(v78);
    v79._countAndFlagsBits = 125;
    v79._object = (void *)0xE100000000000000;
    String.append(_:)(v79);
    v80 = v107;
    v81 = String._bridgeToObjectiveC()();
    v20 = objc_msgSend(v74, "internalErrorWithDebugDescription:", v81, swift_bridgeObjectRelease(v80).n128_f64[0]);

    swift_willThrow(v82);
    goto LABEL_5;
  }
  v94 = swift_bridgeObjectRelease(v53);
  (*(void (**)(char *, char *, uint64_t, __n128))(v8 + 32))(v11, v6, v7, v94);
  v95 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
  v96 = (void *)objc_opt_self(REMList);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v98 = objc_msgSend(v96, "objectIDWithUUID:", isa);

  objc_msgSend(v95, "setPreferredDefaultListID:", v98);
  v102(v11, v7);
}

void sub_10054F25C(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, void (*a6)(id), uint64_t a7)
{
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  void *v26;
  _QWORD *v27;
  id v28;
  id v29;
  void *v30;
  NSString v31;
  id v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  _QWORD v38[3];
  _BYTE v39[8];
  uint64_t v40;
  uint64_t v41;

  if ((a1 & 1) == 0)
  {
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v13 = type metadata accessor for Logger(0);
    sub_10001AAA8(v13, (uint64_t)qword_10084F6F8);
    v14 = a3;
    swift_errorRetain(a2);
    v15 = v14;
    v16 = swift_errorRetain(a2);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v34 = a4;
      v37 = a3;
      v35 = a7;
      v19 = swift_slowAlloc(22, -1);
      v20 = (_QWORD *)swift_slowAlloc(8, -1);
      v36 = swift_slowAlloc(32, -1);
      v40 = (uint64_t)v15;
      v41 = v36;
      *(_DWORD *)v19 = 138412546;
      v21 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);
      *v20 = v15;

      *(_WORD *)(v19 + 12) = 2080;
      if (a2)
      {
        swift_getErrorValue(a2, v39, v38);
        v22 = Error.localizedDescription.getter(v38[1], v38[2]);
        v24 = v23;
      }
      else
      {
        v24 = 0xE300000000000000;
        v22 = 7104878;
      }
      a7 = v35;
      v40 = sub_10001A820(v22, v24, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);
      swift_bridgeObjectRelease(v24);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "RDAccountUtils: Error updating migration flags for ACAccount {acAccount: %@, error: %s}", (uint8_t *)v19, 0x16u);
      v33 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v20, 1, v33);
      swift_slowDealloc(v20, -1, -1);
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v19, -1, -1);

      a3 = v37;
      if ((v34 & 1) == 0)
        goto LABEL_14;
      goto LABEL_9;
    }

    swift_errorRelease(a2);
    swift_errorRelease(a2);

  }
  if ((a4 & 1) == 0)
  {
LABEL_14:
    a6(0);
    return;
  }
LABEL_9:
  v25 = sub_10054C1C0(a1, a2);
  if (v25)
  {
    v26 = v25;
    v27 = (_QWORD *)swift_allocObject(&unk_1007FAF08, 56, 7);
    v27[2] = a5;
    v27[3] = a3;
    v27[4] = v26;
    v27[5] = a6;
    v27[6] = a7;
    v28 = a3;
    swift_retain(a5);
    v29 = v26;
    swift_retain(a7);
    sub_10055381C(1, (uint64_t)sub_100568750, (uint64_t)v27);

    swift_release(v27);
  }
  else
  {
    v30 = (void *)objc_opt_self(REMError);
    v31 = String._bridgeToObjectiveC()();
    v32 = objc_msgSend(v30, "internalErrorWithDebugDescription:", v31);

    a6(v32);
  }
}

uint64_t sub_10054F5EC(uint64_t a1, char a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16;
  id v17;
  id v18;

  v16 = swift_allocObject(a8, 72, 7);
  *(_QWORD *)(v16 + 16) = a3;
  *(_QWORD *)(v16 + 24) = a4;
  *(_QWORD *)(v16 + 32) = a5;
  *(_QWORD *)(v16 + 40) = a1;
  *(_BYTE *)(v16 + 48) = a2 & 1;
  *(_QWORD *)(v16 + 56) = a6;
  *(_QWORD *)(v16 + 64) = a7;
  swift_retain(a3);
  v17 = a4;
  v18 = a5;
  swift_retain(a7);
  sub_10054CF20(a9, v16);
  return swift_release(v16);
}

uint64_t sub_10054F698(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t, id, uint64_t, uint64_t, uint64_t, uint64_t, id, uint64_t, char, uint64_t, uint64_t))
{
  char v16;
  id v17;
  char v19;

  v16 = a5 & 1;
  swift_retain(a1);
  v17 = a3;
  swift_retain(a7);
  v19 = v16;
  a9(a2, v17, 2, a8, a1, a1, v17, a4, v19, a6, a7);
  swift_release(a1);

  return swift_release(a7);
}

uint64_t sub_10054F74C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15;

  v15 = swift_allocObject(&unk_1007FB188, 64, 7);
  *(_QWORD *)(v15 + 16) = a5;
  *(_QWORD *)(v15 + 24) = a7;
  *(_BYTE *)(v15 + 32) = a8 & 1;
  *(_QWORD *)(v15 + 40) = a9;
  *(_QWORD *)(v15 + 48) = a10;
  *(_QWORD *)(v15 + 56) = a4;
  swift_retain(a5);
  swift_retain(a10);
  swift_errorRetain(a4);
  sub_10054C754(a6, (uint64_t)sub_10056883C, v15);
  return swift_release(v15);
}

unint64_t sub_10054F7F4(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v6 = a3 >> 14;
  if (a3 >> 14 != a4 >> 14)
  {
    v7 = Substring.index(before:)(a4, a3, a4, a5, a6);
    v14 = Substring.subscript.getter(v7, a3, a4, a5, a6);
    v16 = v15;
    if (v14 != a1 || v15 != a2)
    {
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0);
      swift_bridgeObjectRelease(v16);
      if ((v17 & 1) != 0)
        return v7;
      if (v6 == v7 >> 14)
        return 0;
      while (1)
      {
        v7 = Substring.index(before:)(v7, a3, a4, a5, a6);
        v18 = Substring.subscript.getter(v7, a3, a4, a5, a6);
        if (v18 == a1 && v19 == a2)
          break;
        v21 = v19;
        v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, a1, a2, 0);
        swift_bridgeObjectRelease(v21);
        if ((v22 & 1) != 0)
          return v7;
        if (v6 == v7 >> 14)
          return 0;
      }
    }
    swift_bridgeObjectRelease(a2);
    return v7;
  }
  return 0;
}

void sub_10054F95C(char a1, uint64_t a2, uint64_t a3, dispatch_group_t group)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD v18[3];
  _BYTE v19[8];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[3];

  if ((a1 & 1) == 0)
  {
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v7 = type metadata accessor for Logger(0);
    sub_10001AAA8(v7, (uint64_t)qword_10084F6F8);
    swift_errorRetain(a2);
    v8 = swift_errorRetain(a2);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v22[0] = v12;
      *(_DWORD *)v11 = 136315138;
      if (a2)
      {
        swift_getErrorValue(a2, v19, v18);
        v13 = Error.localizedDescription.getter(v18[1], v18[2]);
        v15 = v14;
      }
      else
      {
        v15 = 0xE300000000000000;
        v13 = 7104878;
      }
      v20 = sub_10001A820(v13, v15, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);
      swift_bridgeObjectRelease(v15);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Error saving ACAccount {error: %s}", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

  }
  if (a2)
  {
    v16 = (uint64_t *)(a3 + 16);
    swift_beginAccess(a3 + 16, v22, 0, 0);
    if (!*(_QWORD *)(a3 + 16))
    {
      swift_beginAccess(a3 + 16, &v20, 1, 0);
      v17 = *v16;
      *v16 = a2;
      swift_errorRetain(a2);
      swift_errorRelease(v17);
    }
  }
  dispatch_group_leave(group);
}

uint64_t sub_10054FB90(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE v7[24];

  swift_beginAccess(a3 + 16, v7, 0, 0);
  v5 = *(_QWORD *)(a3 + 16);
  swift_errorRetain(v5);
  a1(v5);
  return swift_errorRelease(v5);
}

uint64_t sub_10054FBF4(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD aBlock[5];
  uint64_t v28;

  v25 = a3;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_allocObject(&unk_1007FA670, 48, 7);
  *(_QWORD *)(v16 + 16) = a4;
  *(_QWORD *)(v16 + 24) = a5;
  *(_BYTE *)(v16 + 32) = a1;
  *(_QWORD *)(v16 + 40) = a2;
  aBlock[4] = sub_10056810C;
  v28 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007FA688;
  v17 = _Block_copy(aBlock);
  swift_retain();
  v18 = swift_errorRetain(a2);
  static DispatchQoS.unspecified.getter(v18);
  v26 = _swiftEmptyArrayStorage;
  v19 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = sub_10001A630((uint64_t *)&unk_100838000);
  v21 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v20, v21, v9, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release(v28);
}

uint64_t sub_10054FE00(uint64_t a1, char a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  id v13;

  v12 = swift_allocObject(&unk_1007FA4E0, 64, 7);
  *(_QWORD *)(v12 + 16) = a3;
  *(_QWORD *)(v12 + 24) = a4;
  *(_QWORD *)(v12 + 32) = a1;
  *(_BYTE *)(v12 + 40) = a2 & 1;
  *(_QWORD *)(v12 + 48) = a5;
  *(_QWORD *)(v12 + 56) = a6;
  swift_retain();
  v13 = a4;
  swift_retain();
  sub_10054CF20((uint64_t)sub_100565A04, v12);
  return swift_release(v12);
}

uint64_t sub_10054FEA0(unint64_t a1, void *a2, NSObject *a3, char a4, uint64_t a5, uint64_t a6)
{
  int v11;
  id v12;

  v11 = a4 & 1;
  swift_retain();
  v12 = a2;
  swift_retain();
  sub_100566BB0(v12, a1, v12, a3, v11, a5, a6);
  swift_release(a1);

  return swift_release(a6);
}

uint64_t sub_10054FF24(char a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;

  v16 = swift_allocObject(&unk_1007FA648, 72, 7);
  *(_QWORD *)(v16 + 16) = a3;
  *(_QWORD *)(v16 + 24) = a5;
  *(_BYTE *)(v16 + 32) = a6 & 1;
  *(_QWORD *)(v16 + 40) = a7;
  *(_QWORD *)(v16 + 48) = a8;
  *(_BYTE *)(v16 + 56) = a1;
  *(_QWORD *)(v16 + 64) = a2;
  swift_retain();
  swift_retain();
  swift_errorRetain(a2);
  sub_10054C754(a4, (uint64_t)sub_100567D8C, v16);
  return swift_release(v16);
}

void sub_10054FFE0(void *a1, char a2)
{
  uint64_t v2;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  unsigned int v9;
  id v10;
  void *v11;
  Swift::Bool v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  ValueMetadata *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  id v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  id v43;
  void *v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  id v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  id v52;
  void *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  id v61;
  id v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  _QWORD *v66;
  id v67;
  id v68;
  id v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  os_log_type_t v83;
  void *v84;
  _QWORD *v85;
  NSObject *v86;
  void *v87;
  uint64_t v88;
  void *v89;
  NSObject *log;
  os_log_t loga;
  NSObject *logb;
  _QWORD *v93;
  uint64_t v94;
  _BYTE v95[96];
  _QWORD *v96;
  _QWORD v97[2];

  v4 = a1;
  v5 = *(void **)(v2 + 16);
  v6 = sub_100552694(a1, v5);
  if (!v6)
    goto LABEL_8;
  v7 = v6;
  v8 = objc_msgSend(v6, "accountTypeHost");
  v9 = objc_msgSend(v8, "isCloudKit");

  if (!v9)
  {

LABEL_8:
    v14 = sub_100552FC8();
    v15 = swift_allocError(&type metadata for RDAccountUtils.InactivatedICloudCalDavDataMover.NoCloudKitREMAccountError, v14, 0, 0);
    swift_willThrow(v15);
    return;
  }
  if (!objc_msgSend(v7, "didChooseToMigrate"))
  {
    v16 = sub_10055300C();
    v17 = &type metadata for RDAccountUtils.InactivatedICloudCalDavDataMover.DidNotChooseToMigrationCloudKitError;
LABEL_11:
    v18 = swift_allocError(v17, v16, 0, 0);
    swift_willThrow(v18);
    goto LABEL_12;
  }
  v10 = sub_100553050(v4, v5);
  if (!v10)
  {
    v16 = sub_100553508();
    v17 = &type metadata for RDAccountUtils.InactivatedICloudCalDavDataMover.NoInactivatedICloudCalDavREMAccountError;
    goto LABEL_11;
  }
  v11 = v10;
  v12 = REMAccount.isConsideredEmpty()();
  if (v13)
  {

    return;
  }
  if (v12)
  {
    if (qword_100837880 == -1)
    {
LABEL_15:
      v19 = type metadata accessor for Logger(0);
      sub_10001AAA8(v19, (uint64_t)qword_10084F6F8);
      v20 = v4;
      v21 = v11;
      v22 = v20;
      v23 = Logger.logObject.getter(v22);
      v24 = static os_log_type_t.default.getter(v23);
      if (os_log_type_enabled(v23, v24))
      {
        v86 = v23;
        v25 = swift_slowAlloc(22, -1);
        v26 = (_QWORD *)swift_slowAlloc(16, -1);
        *(_DWORD *)v25 = 138543618;
        v27 = objc_msgSend(v21, "objectID");
        v96 = v27;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97);
        *v26 = v27;

        *(_WORD *)(v25 + 12) = 2114;
        v28 = objc_msgSend(v22, "identifier");
        v29 = v28;
        if (v28)
          v96 = v28;
        else
          v96 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97);
        v26[1] = v29;

        _os_log_impl((void *)&_mh_execute_header, v86, v24, "RDAccountUtils.InactivatedICloudCalDavDataMover: Found an inactivated iCloud CalDAV account but it is empty, we're done {remObjectID: %{public}@, acAccountIdentifier: %{public}@}", (uint8_t *)v25, 0x16u);
        v40 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v26, 2, v40);
        swift_slowDealloc(v26, -1, -1);
        swift_slowDealloc(v25, -1, -1);

        return;
      }

LABEL_12:
      return;
    }
LABEL_43:
    swift_once(&qword_100837880, sub_100547F80);
    goto LABEL_15;
  }
  if (qword_100837880 != -1)
    swift_once(&qword_100837880, sub_100547F80);
  v30 = type metadata accessor for Logger(0);
  sub_10001AAA8(v30, (uint64_t)qword_10084F6F8);
  v31 = v11;
  v32 = v4;
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter(v33);
  v84 = v32;
  v87 = v31;
  if (os_log_type_enabled(v33, v34))
  {
    v83 = v34;
    log = v33;
    v35 = swift_slowAlloc(22, -1);
    v36 = (_QWORD *)swift_slowAlloc(16, -1);
    *(_DWORD *)v35 = 138543618;
    v37 = objc_msgSend(v31, "objectID");
    v96 = v37;
    v82 = v97;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97);
    *v36 = v37;

    *(_WORD *)(v35 + 12) = 2114;
    v38 = objc_msgSend(v32, "identifier");
    v39 = v38;
    if (v38)
      v96 = v38;
    else
      v96 = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97);
    v36[1] = v39;

    _os_log_impl((void *)&_mh_execute_header, log, v83, "RDAccountUtils.InactivatedICloudCalDavDataMover: Found an inactivated non-empy iCloud CalDAV account, now going to perform data move... {remObjectID: %{public}@, acAccountIdentifier: %{public}@}", (uint8_t *)v35, 0x16u);
    v41 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v36, 2, v41);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v35, -1, -1);

  }
  else
  {

  }
  if (qword_100837348 != -1)
    swift_once(&qword_100837348, sub_10039DAA4);
  v42 = (_QWORD *)qword_100871E90;
  v96 = 0;
  v43 = objc_msgSend(v31, "fetchListsWithError:", &v96, v82);
  v44 = v96;
  if (!v43)
  {
    v54 = v96;
    _convertNSErrorToError(_:)(v44);

    swift_willThrow(v55);
    goto LABEL_12;
  }
  v45 = v43;
  v46 = sub_1000151B0(0, &qword_10083DFC8, REMList_ptr);
  v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v45, v46);
  v48 = v44;

  swift_bridgeObjectRetain(v42);
  v49 = (uint64_t)sub_10055354C(v47, v42, 0x8FB8EFA09AE220, (void *)0xA700000000000000);
  swift_bridgeObjectRelease(v47);
  swift_bridgeObjectRelease(v42);
  v96 = _swiftEmptyArrayStorage;
  if ((unint64_t)v49 >> 62)
  {
    if (v49 < 0)
      v56 = v49;
    else
      v56 = v49 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v49);
    v11 = (void *)_CocoaArrayWrapper.endIndex.getter(v56);
    if (v11)
    {
LABEL_34:
      loga = (os_log_t)(v49 & 0xC000000000000001);
      v50 = _swiftEmptyArrayStorage;
      v51 = 4;
      v88 = v49;
      while (1)
      {
        v52 = loga
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v51 - 4, v49)
            : *(id *)(v49 + 8 * v51);
        v53 = v52;
        v4 = (void *)(v51 - 3);
        if (__OFADD__(v51 - 4, 1))
          break;
        v94 = (uint64_t)v52;
        sub_100550B40((void **)&v96, (void **)&v94, (unint64_t *)&v93);
        swift_bridgeObjectRelease(v50);

        v50 = v93;
        v96 = v93;
        ++v51;
        v49 = v88;
        if (v4 == v11)
          goto LABEL_49;
      }
      __break(1u);
      goto LABEL_43;
    }
  }
  else
  {
    v11 = *(void **)((v49 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v49);
    if (v11)
      goto LABEL_34;
  }
  v50 = _swiftEmptyArrayStorage;
LABEL_49:
  swift_bridgeObjectRelease_n(v49, 2);
  v57 = type metadata accessor for RDAccountDataMover();
  swift_initStackObject(v57, v95);
  v58 = sub_1004506B8(v5);
  v59 = *(_QWORD *)(v58 + 72);
  *(_QWORD *)(v58 + 72) = v50;
  swift_bridgeObjectRelease(v59);
  if ((a2 & 1) != 0)
    *(_BYTE *)(v58 + 80) = 1;
  v60 = v87;
  sub_10045071C(v87, v7);
  swift_retain_n(v58, 2);
  v61 = v84;
  v62 = v7;
  v63 = Logger.logObject.getter(v62);
  v64 = static os_log_type_t.default.getter(v63);
  logb = v63;
  if (os_log_type_enabled(v63, v64))
  {
    v65 = swift_slowAlloc(32, -1);
    v66 = (_QWORD *)swift_slowAlloc(16, -1);
    v85 = (_QWORD *)swift_slowAlloc(32, -1);
    v96 = v85;
    *(_DWORD *)v65 = 138543874;
    v67 = objc_msgSend(v62, "objectID");
    v94 = (uint64_t)v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95);
    *v66 = v67;

    *(_WORD *)(v65 + 12) = 2114;
    v68 = objc_msgSend(v61, "identifier");
    v69 = v68;
    if (v68)
      v94 = (uint64_t)v68;
    else
      v94 = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95);
    v66[1] = v69;

    *(_WORD *)(v65 + 22) = 2082;
    v70 = sub_1004505B0();
    v72 = v71;
    v94 = sub_10001A820(v70, v71, (uint64_t *)&v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95);
    swift_release_n(v58, 2);
    swift_bridgeObjectRelease(v72);
    _os_log_impl((void *)&_mh_execute_header, logb, v64, "RDAccountUtils.InactivatedICloudCalDavDataMover: Completed moving data from the inactivated iCloud CalDAV account to CloudKit {ckAccount: %{public}@, acAccountIdentifier: %{public}@, stats: %{public}s}", (uint8_t *)v65, 0x20u);
    v73 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v66, 2, v73);
    swift_slowDealloc(v66, -1, -1);
    swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v85, -1, -1);
    swift_slowDealloc(v65, -1, -1);

    v60 = v87;
  }
  else
  {

    swift_release_n(v58, 2);
  }
  sub_100452528((uint64_t)v60);
  v74 = swift_retain_n(v58, 2);
  v75 = Logger.logObject.getter(v74);
  v76 = static os_log_type_t.default.getter(v75);
  if (os_log_type_enabled(v75, v76))
  {
    v89 = v62;
    v77 = (uint8_t *)swift_slowAlloc(12, -1);
    v78 = (_QWORD *)swift_slowAlloc(32, -1);
    v96 = v78;
    *(_DWORD *)v77 = 136446210;
    v79 = sub_1004505B0();
    v81 = v80;
    v94 = sub_10001A820(v79, v80, (uint64_t *)&v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95);
    swift_release_n(v58, 2);
    swift_bridgeObjectRelease(v81);
    _os_log_impl((void *)&_mh_execute_header, v75, v76, "RDAccountUtils.InactivatedICloudCalDavDataMover: The inactivated CalDAV account is now emptied after the data move {stats: %{public}s}.", v77, 0xCu);
    swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v78, -1, -1);
    swift_slowDealloc(v77, -1, -1);

    swift_release(v58);
  }
  else
  {

    swift_release_n(v58, 3);
  }
}

uint64_t sub_100550B40@<X0>(void **a1@<X0>, void **a2@<X1>, unint64_t *a3@<X8>)
{
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  void *v16;
  BOOL v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  unint64_t v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  id v63;
  uint64_t v64;
  uint64_t result;
  double v66;
  unint64_t v67;
  uint64_t v68;
  id v69;
  id v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  void *v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  void *v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t *v96;
  id v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;

  v4 = *a1;
  v5 = *a2;
  v105 = 0;
  v6 = objc_msgSend(v5, "fetchRemindersWithError:", &v105);
  v7 = (id)v105;
  if (!v6)
  {
    v63 = (id)v105;
    _convertNSErrorToError(_:)(v7);

    return swift_willThrow(v64);
  }
  v8 = v6;
  v97 = v5;
  v98 = (unint64_t)v4;
  v96 = a3;
  v9 = sub_1000151B0(0, &qword_100846630, REMReminder_ptr);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);
  v11 = v7;

  v105 = (unint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v10 >> 62)
    goto LABEL_83;
  v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v10);
  while (v12)
  {
    v13 = 0;
    v14 = v10 & 0xC000000000000001;
    v100 = v10 + 32;
    v101 = v10 & 0xFFFFFFFFFFFFFF8;
    v102 = v10 & 0xC000000000000001;
    v103 = v10;
    while (1)
    {
      if (v14)
      {
        v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v10);
      }
      else
      {
        if (v13 >= *(_QWORD *)(v101 + 16))
          goto LABEL_79;
        v15 = *(id *)(v100 + 8 * v13);
      }
      v16 = v15;
      v17 = __OFADD__(v13++, 1);
      if (v17)
        break;
      v18 = objc_msgSend(v15, "titleAsString");
      if (v18)
      {
        v19 = v18;
        v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        v22 = v21;

        if (qword_100837350 != -1)
          swift_once(&qword_100837350, sub_10039DAB8);
        v23 = qword_100871E98;
        v24 = *(_QWORD *)(qword_100871E98 + 16);
        if (!v24)
        {

          swift_bridgeObjectRelease(v22);
          goto LABEL_6;
        }
        v25 = *(_QWORD *)(qword_100871E98 + 32);
        v26 = *(_QWORD *)(qword_100871E98 + 40);
        v27 = v25 == v20 && v26 == v22;
        if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, v20, v22, 0) & 1) != 0)
        {
LABEL_21:
          swift_bridgeObjectRelease(v22);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v28);
          v29 = *(_QWORD *)(v105 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v29);
          v30 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v16);
          specialized ContiguousArray._endMutation()(v30);
        }
        else
        {
          if (v24 != 1)
          {
            v31 = *(_QWORD *)(v23 + 48);
            v32 = *(_QWORD *)(v23 + 56);
            if (v31 == v20 && v32 == v22
              || (_stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, v20, v22, 0) & 1) != 0)
            {
              goto LABEL_21;
            }
            if (v24 != 2)
            {
              v33 = (uint64_t *)(v23 + 72);
              v34 = 2;
              do
              {
                v10 = v34 + 1;
                if (__OFADD__(v34, 1))
                  goto LABEL_81;
                v35 = *(v33 - 1);
                v36 = *v33;
                v37 = v35 == v20 && v36 == v22;
                if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, v20, v22, 0) & 1) != 0)
                  goto LABEL_21;
                v33 += 2;
                ++v34;
              }
              while (v10 != v24);
            }
          }

          swift_bridgeObjectRelease(v22);
        }
        v14 = v102;
        v10 = v103;
        goto LABEL_6;
      }

LABEL_6:
      if (v13 == v12)
      {
        swift_bridgeObjectRelease(v10);
        v38 = 0;
        v39 = v105;
        v105 = (unint64_t)_swiftEmptyArrayStorage;
        v99 = v12;
        while (1)
        {
          while (1)
          {
            if (v14)
            {
              v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v10);
            }
            else
            {
              if (v38 >= *(_QWORD *)(v101 + 16))
                goto LABEL_80;
              v40 = *(id *)(v100 + 8 * v38);
            }
            v41 = v40;
            v17 = __OFADD__(v38++, 1);
            if (v17)
              goto LABEL_78;
            v42 = objc_msgSend(v40, "titleAsString");
            if (v42)
              break;

            if (v38 == v12)
              goto LABEL_76;
          }
          v43 = v42;
          v44 = v39;
          v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
          v47 = v46;

          if (qword_100837358 != -1)
            swift_once(&qword_100837358, sub_10039DACC);
          v48 = qword_100871EA0;
          v49 = *(_QWORD *)(qword_100871EA0 + 16);
          if (!v49)
          {

            swift_bridgeObjectRelease(v47);
            goto LABEL_58;
          }
          v50 = *(_QWORD *)(qword_100871EA0 + 32);
          v51 = *(_QWORD *)(qword_100871EA0 + 40);
          v52 = v50 == v45 && v51 == v47;
          if (!v52 && (_stringCompareWithSmolCheck(_:_:expecting:)(v50, v51, v45, v47, 0) & 1) == 0)
          {
            if (v49 == 1)
              goto LABEL_61;
            v56 = *(_QWORD *)(v48 + 48);
            v57 = *(_QWORD *)(v48 + 56);
            if ((v56 != v45 || v57 != v47)
              && (_stringCompareWithSmolCheck(_:_:expecting:)(v56, v57, v45, v47, 0) & 1) == 0)
            {
              break;
            }
          }
LABEL_55:
          swift_bridgeObjectRelease(v47);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v53);
          v54 = *(_QWORD *)(v105 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v54);
          v55 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v54, v41);
          specialized ContiguousArray._endMutation()(v55);
LABEL_56:
          v14 = v102;
          v10 = v103;
LABEL_58:
          v39 = v44;
          v12 = v99;
          if (v38 == v99)
          {
LABEL_76:
            *(_QWORD *)&v66 = swift_bridgeObjectRelease(v10).n128_u64[0];
            v67 = v105;
            goto LABEL_88;
          }
        }
        if (v49 != 2)
        {
          v58 = (uint64_t *)(v48 + 72);
          v59 = 2;
          do
          {
            v10 = v59 + 1;
            if (__OFADD__(v59, 1))
              goto LABEL_82;
            v60 = *(v58 - 1);
            v61 = *v58;
            v62 = v60 == v45 && v61 == v47;
            if (v62 || (_stringCompareWithSmolCheck(_:_:expecting:)(v60, v61, v45, v47, 0) & 1) != 0)
              goto LABEL_55;
            v58 += 2;
            ++v59;
          }
          while (v10 != v49);
        }
LABEL_61:

        swift_bridgeObjectRelease(v47);
        goto LABEL_56;
      }
    }
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    if (v10 < 0)
      v68 = v10;
    else
      v68 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v12 = _CocoaArrayWrapper.endIndex.getter(v68);
  }
  swift_bridgeObjectRelease(v10);
  *(_QWORD *)&v66 = swift_bridgeObjectRelease(v10).n128_u64[0];
  v67 = (unint64_t)_swiftEmptyArrayStorage;
  v39 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_88:
  v69 = objc_msgSend(v97, "objectID", v66);
  v105 = v98;
  swift_bridgeObjectRetain(v98);
  v70 = v69;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v70);
  v72 = *(_QWORD *)((v105 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v71 = *(_QWORD *)((v105 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v72 >= v71 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v71 > 1);
  v73 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v72, v70);
  specialized Array._endMutation()(v73);
  v74 = v105;

  if ((v39 & 0x8000000000000000) != 0 || (v39 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain(v39);
    v75 = _CocoaArrayWrapper.endIndex.getter(v84);
    swift_release(v39);
    if (v75)
      goto LABEL_93;
LABEL_101:
    swift_release(v39);
    v83 = _swiftEmptyArrayStorage;
    goto LABEL_102;
  }
  v75 = *(_QWORD *)(v39 + 16);
  if (!v75)
    goto LABEL_101;
LABEL_93:
  v105 = (unint64_t)_swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v75);
  if (v75 < 0)
  {
    __break(1u);
    goto LABEL_116;
  }
  v104 = v74;
  v76 = 0;
  do
  {
    if ((v39 & 0xC000000000000001) != 0)
      v77 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v76, v39);
    else
      v77 = *(id *)(v39 + 8 * v76 + 32);
    v78 = v77;
    ++v76;
    v79 = objc_msgSend(v77, "objectID");

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v80);
    v81 = *(_QWORD *)(v105 + 16);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v81);
    v82 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v81, v79);
    specialized ContiguousArray._endMutation()(v82);
  }
  while (v75 != v76);
  v83 = (_QWORD *)v105;
  swift_release(v39);
  v74 = v104;
LABEL_102:
  v105 = v74;
  sub_1001E0B58((uint64_t)v83);
  v85 = v105;
  if ((v67 & 0x8000000000000000) != 0 || (v67 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain(v67);
    v86 = _CocoaArrayWrapper.endIndex.getter(v95);
    swift_release(v67);
    if (v86)
    {
LABEL_105:
      v105 = (unint64_t)_swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v86);
      if ((v86 & 0x8000000000000000) == 0)
      {
        v87 = 0;
        do
        {
          if ((v67 & 0xC000000000000001) != 0)
            v88 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v87, v67);
          else
            v88 = *(id *)(v67 + 8 * v87 + 32);
          v89 = v88;
          ++v87;
          v90 = objc_msgSend(v88, "objectID");

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v91);
          v92 = *(_QWORD *)(v105 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v92);
          v93 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v92, v90);
          specialized ContiguousArray._endMutation()(v93);
        }
        while (v86 != v87);
        v94 = (_QWORD *)v105;
        swift_release(v67);
        goto LABEL_114;
      }
LABEL_116:
      __break(1u);
    }
  }
  else
  {
    v86 = *(_QWORD *)(v67 + 16);
    if (v86)
      goto LABEL_105;
  }
  swift_release(v67);
  v94 = _swiftEmptyArrayStorage;
LABEL_114:
  v105 = v85;
  result = sub_1001E0B58((uint64_t)v94);
  *v96 = v105;
  return result;
}

uint64_t type metadata accessor for RDAccountUtils.InactivatedICloudCalDavDataMover()
{
  return objc_opt_self(_TtCC7remindd14RDAccountUtils32InactivatedICloudCalDavDataMover);
}

void sub_100551364(void *a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  Swift::Bool v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  ValueMetadata *v13;
  id v14;
  void *v15;
  Swift::Bool v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  _QWORD *v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  os_log_type_t v48;
  void *v49;
  uint64_t v50;
  _BYTE v51[96];
  id v52;

  v3 = *(void **)(v1 + 16);
  v4 = objc_msgSend((id)objc_opt_self(REMAccount), "localAccountID");
  v52 = 0;
  v5 = objc_msgSend(v3, "fetchAccountWithObjectID:error:", v4, &v52);

  v6 = v52;
  if (!v5)
  {
    v10 = v52;
    _convertNSErrorToError(_:)(v6);

    swift_willThrow(v11);
    return;
  }
  v7 = v52;
  v8 = REMAccount.isConsideredEmpty()();
  if (v9)
  {

    return;
  }
  if (v8)
  {
    v12 = sub_100552F84();
    v13 = &type metadata for RDAccountUtils.LocalDataToICloudMover.LocalAccountIsEmptyError;
LABEL_12:
    v20 = swift_allocError(v13, v12, 0, 0);
    swift_willThrow(v20);

    return;
  }
  v14 = sub_100552694(a1, v3);
  if (!v14)
  {
    v12 = sub_100552EFC();
    v13 = &type metadata for RDAccountUtils.LocalDataToICloudMover.NoICloudREMAccountError;
    goto LABEL_12;
  }
  v15 = v14;
  v16 = REMAccount.isConsideredEmpty()();
  if (v17)
    goto LABEL_14;
  if (!v16)
  {
    v21 = objc_msgSend(v15, "objectID");
    v22 = sub_100552F40();
    v23 = swift_allocError(&type metadata for RDAccountUtils.LocalDataToICloudMover.TargetAccountIsNonEmptyError, v22, 0, 0);
    *v24 = v21;
    swift_willThrow(v23);
LABEL_14:

    return;
  }
  v18 = type metadata accessor for RDAccountDataMover();
  swift_initStackObject(v18, v51);
  v19 = sub_1004506B8(v3);
  sub_100450DD4(v5, v15);
  if (qword_100837880 != -1)
    swift_once(&qword_100837880, sub_100547F80);
  v25 = type metadata accessor for Logger(0);
  sub_10001AAA8(v25, (uint64_t)qword_10084F6F8);
  swift_retain_n(v19, 2);
  v26 = v15;
  v27 = a1;
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v48 = v29;
    v30 = swift_slowAlloc(32, -1);
    v47 = v27;
    v31 = (_QWORD *)swift_slowAlloc(16, -1);
    v49 = (void *)swift_slowAlloc(32, -1);
    v52 = v49;
    *(_DWORD *)v30 = 138543874;
    v32 = objc_msgSend(v26, "objectID");
    v50 = (uint64_t)v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51);
    *v31 = v32;

    *(_WORD *)(v30 + 12) = 2114;
    v33 = objc_msgSend(v47, "identifier");
    v34 = v33;
    if (v33)
      v50 = (uint64_t)v33;
    else
      v50 = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51);
    v31[1] = v34;

    *(_WORD *)(v30 + 22) = 2082;
    v35 = sub_1004505B0();
    v37 = v36;
    v50 = sub_10001A820(v35, v36, (uint64_t *)&v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51);
    swift_release_n(v19, 2);
    swift_bridgeObjectRelease(v37);
    _os_log_impl((void *)&_mh_execute_header, v28, v48, "RDAccountUtils.LocalDataToICloudMover: Completed moving data from local to iCloud {target: %{public}@, acAccountIdentifier: %{public}@, stats: %{public}s}", (uint8_t *)v30, 0x20u);
    v38 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v31, 2, v38);
    swift_slowDealloc(v31, -1, -1);
    swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1, -1);
    swift_slowDealloc(v30, -1, -1);

  }
  else
  {

    swift_release_n(v19, 2);
  }
  sub_100452528((uint64_t)v5);
  v39 = swift_retain_n(v19, 2);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.default.getter(v40);
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(12, -1);
    v43 = (void *)swift_slowAlloc(32, -1);
    v52 = v43;
    *(_DWORD *)v42 = 136446210;
    v44 = sub_1004505B0();
    v46 = v45;
    v50 = sub_10001A820(v44, v45, (uint64_t *)&v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51);
    swift_release_n(v19, 2);
    swift_bridgeObjectRelease(v46);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "RDAccountUtils.LocalDataToICloudMover: Local account emptied {stats: %{public}s}.", v42, 0xCu);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v42, -1, -1);

    swift_release(v19);
  }
  else
  {

    swift_release_n(v19, 3);
  }
}

uint64_t type metadata accessor for RDAccountUtils.LocalDataToICloudMover()
{
  return objc_opt_self(_TtCC7remindd14RDAccountUtils22LocalDataToICloudMover);
}

uint64_t sub_10055199C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD aBlock[5];
  _QWORD *v31;

  v28 = a2;
  v13 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DispatchQoS(0);
  v16 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (_QWORD *)swift_allocObject(a5, 40, 7);
  v19[2] = a3;
  v19[3] = a4;
  v19[4] = a1;
  aBlock[4] = a6;
  v31 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = a7;
  v20 = _Block_copy(aBlock);
  swift_retain(a4);
  v21 = swift_errorRetain(a1);
  static DispatchQoS.unspecified.getter(v21);
  v29 = _swiftEmptyArrayStorage;
  v22 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_10001A630((uint64_t *)&unk_100838000);
  v24 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v23, v24, v13, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v18, v15, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v15, v13);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v26);
  return swift_release(v31);
}

id sub_100551B94(void *a1)
{
  id v2;
  void *v3;
  id result;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  double v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  _QWORD *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  _QWORD *v29;
  id v30;
  id v31;
  uint64_t v32;
  os_log_type_t v33;
  id v34;
  id v35;
  os_log_type_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;

  v2 = objc_msgSend(a1, "displayAccount");
  if (!v2)
  {
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v16 = type metadata accessor for Logger(0);
    sub_10001AAA8(v16, (uint64_t)qword_10084F6F8);
    v17 = a1;
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v18, v19))
    {

      return 0;
    }
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v20 = 138543362;
    v22 = objc_msgSend(v17, "identifier");
    v23 = v22;
    if (v22)
      v40 = v22;
    else
      v40 = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);
    *v21 = v23;

    _os_log_impl((void *)&_mh_execute_header, v18, v19, "RDAccountUtils.fetchAccountWithAppleAccount: Failed to get the display account {accountIdentifier: %{public}@}.", v20, 0xCu);
    v39 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v21, 1, v39);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);
LABEL_37:

    return 0;
  }
  v3 = v2;
  result = objc_msgSend(v2, "accountType");
  if (result)
  {
    v5 = result;
    v6 = objc_msgSend(result, "identifier");

    if (v6)
    {
      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      v9 = v8;

      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierAppleAccount);
      v12 = v11;
      if (v9)
      {
        if (v7 == v10 && v9 == v11)
        {
          swift_bridgeObjectRelease_n(v9, 2);
          goto LABEL_25;
        }
        v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
        swift_bridgeObjectRelease(v9);
        *(_QWORD *)&v15 = swift_bridgeObjectRelease(v12).n128_u64[0];
        if ((v14 & 1) != 0)
        {
LABEL_25:
          if ((objc_msgSend(v3, "isEnabledForDataclass:", ACAccountDataclassReminders, v15) & 1) != 0)
            return v3;
          if (qword_100837880 != -1)
            swift_once(&qword_100837880, sub_100547F80);
          v32 = type metadata accessor for Logger(0);
          sub_10001AAA8(v32, (uint64_t)qword_10084F6F8);
          v18 = v3;
          v26 = Logger.logObject.getter(v18);
          v33 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v26, v33))
          {
            v28 = (uint8_t *)swift_slowAlloc(12, -1);
            v29 = (_QWORD *)swift_slowAlloc(8, -1);
            *(_DWORD *)v28 = 138543362;
            v34 = -[NSObject identifier](v18, "identifier");
            v35 = v34;
            if (v34)
              v40 = v34;
            else
              v40 = 0;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);
            *v29 = v35;

            v36 = v33;
            v37 = "RDAccountUtils.fetchAccountWithAppleAccount: Reminders is not enabled for the given ACAccount {account"
                  "Identifier: %{public}@}.";
LABEL_34:
            _os_log_impl((void *)&_mh_execute_header, v26, v36, v37, v28, 0xCu);
            v38 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v29, 1, v38);
            swift_slowDealloc(v29, -1, -1);
            swift_slowDealloc(v28, -1, -1);

            return 0;
          }
LABEL_31:

          goto LABEL_37;
        }
LABEL_18:
        if (qword_100837880 != -1)
          swift_once(&qword_100837880, sub_100547F80);
        v25 = type metadata accessor for Logger(0);
        sub_10001AAA8(v25, (uint64_t)qword_10084F6F8);
        v18 = v3;
        v26 = Logger.logObject.getter(v18);
        v27 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v26, v27))
        {
          v28 = (uint8_t *)swift_slowAlloc(12, -1);
          v29 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v28 = 138543362;
          v30 = -[NSObject identifier](v18, "identifier");
          v31 = v30;
          if (v30)
            v40 = v30;
          else
            v40 = 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);
          *v29 = v31;

          v36 = v27;
          v37 = "RDAccountUtils.fetchAccountWithAppleAccount: Given ACAccount is not Apple account {accountIdentifier: %{public}@}.";
          goto LABEL_34;
        }
        goto LABEL_31;
      }
    }
    else
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierAppleAccount);
      v12 = v24;
    }
    swift_bridgeObjectRelease(v12);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

id sub_1005520BC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  void *v17;
  Class isa;
  id v19;
  uint64_t v21;
  uint64_t v22;

  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_10000882C((uint64_t)v6, (uint64_t *)&unk_100839C80);
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v11 = type metadata accessor for Logger(0);
    sub_10001AAA8(v11, (uint64_t)qword_10084F6F8);
    v12 = swift_bridgeObjectRetain_n(a2, 2);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v22 = v16;
      *(_DWORD *)v15 = 136446210;
      swift_bridgeObjectRetain(a2);
      v21 = sub_10001A820(a1, a2, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "RDAccountUtils: Not an UUID {uuidString: %{public}s}", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    v17 = (void *)objc_opt_self(REMAccount);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v19 = objc_msgSend(v17, "objectIDWithUUID:", isa);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  return v19;
}

void *sub_100552370(void *a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD *v12;
  id v13;
  id v14;
  uint64_t v15;
  id v17;
  uint64_t v18;

  v2 = objc_msgSend(a1, "displayAccount");
  if (!v2)
  {
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v7 = type metadata accessor for Logger(0);
    sub_10001AAA8(v7, (uint64_t)qword_10084F6F8);
    v8 = a1;
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v11 = 138543362;
      v13 = objc_msgSend(v8, "identifier");
      v14 = v13;
      if (v13)
        v17 = v13;
      else
        v17 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
      *v12 = v14;

      _os_log_impl((void *)&_mh_execute_header, v9, v10, "childCalDAVIdentifierEnabledForReminders: Can't get display account from input {input: %{public}@}", v11, 0xCu);
      v15 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v12, 1, v15);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

    }
    else
    {

    }
    return 0;
  }
  v3 = v2;
  v4 = (void *)ACAccount.rem_childCalDAVAccountEnabledForReminders.getter();
  v5 = v4;
  if (!v4)
  {

    return v5;
  }
  v6 = objc_msgSend(v4, "identifier");

  if (!v6)
  {

    return 0;
  }
  v5 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

  return v5;
}

id sub_1005525B4(void *a1, void *a2)
{
  void *v3;
  unint64_t v4;
  unint64_t v5;
  id v6;
  double v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v14;

  v3 = sub_100552370(a1);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = sub_1005520BC((uint64_t)v3, v4);
  *(_QWORD *)&v7 = swift_bridgeObjectRelease(v5).n128_u64[0];
  if (!v6)
    return 0;
  v14 = 0;
  v8 = objc_msgSend(a2, "fetchAccountWithObjectID:error:", v6, &v14, v7);
  v9 = v14;
  if (!v8)
  {
    v10 = v9;
    v11 = _convertNSErrorToError(_:)(v9);

    swift_willThrow(v12);
    swift_errorRelease(v11);
    return 0;
  }

  return v8;
}

id sub_100552694(void *a1, void *a2)
{
  id v3;
  void *v4;
  id result;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  double v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  _QWORD *v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  id v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  os_log_type_t v47;
  uint8_t *v48;
  _QWORD *v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  id v54;
  id v55;
  id v56;
  os_log_type_t v57;
  uint64_t v58;
  _QWORD *v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  os_log_type_t v67;
  id v68;
  void *v69;
  id v70;
  uint64_t v71;

  v3 = sub_100551B94(a1);
  if (!v3)
    return 0;
  v4 = v3;
  result = objc_msgSend(v3, "identifier");
  if (result)
  {
    v6 = result;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v9 = v8;

    v10 = sub_1005520BC(v7, v9);
    *(_QWORD *)&v11 = swift_bridgeObjectRelease(v9).n128_u64[0];
    if (!v10)
    {

      return 0;
    }
    v70 = 0;
    v12 = objc_msgSend(a2, "fetchAccountWithObjectID:error:", v10, &v70, v11);
    v13 = v70;
    if (v12)
    {
      v14 = v12;
      v15 = v70;
      if ((objc_msgSend(v14, "inactive") & 1) == 0)
      {
        v33 = qword_100837880;
        v34 = v14;
        if (v33 != -1)
          swift_once(&qword_100837880, sub_100547F80);
        v35 = type metadata accessor for Logger(0);
        sub_10001AAA8(v35, (uint64_t)qword_10084F6F8);
        v36 = v34;
        v37 = v4;
        v38 = Logger.logObject.getter(v37);
        v39 = static os_log_type_t.default.getter(v38);
        if (os_log_type_enabled(v38, v39))
        {
          v68 = v10;
          v40 = swift_slowAlloc(22, -1);
          v41 = (_QWORD *)swift_slowAlloc(16, -1);
          *(_DWORD *)v40 = 138543618;
          v42 = v36;
          v43 = objc_msgSend(v36, "objectID");
          v70 = v43;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
          *v41 = v43;
          v69 = v42;

          *(_WORD *)(v40 + 12) = 2114;
          v44 = objc_msgSend(v37, "identifier");
          v45 = v44;
          if (v44)
            v70 = v44;
          else
            v70 = 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
          v10 = v68;
          v41[1] = v45;

          _os_log_impl((void *)&_mh_execute_header, v38, v39, "RDAccountUtils.fetchAccountWithAppleAccount: Found an active CloudKit REMAccount {objectID: %{public}@, accountIdentifier: %{public}@}.", (uint8_t *)v40, 0x16u);
          v63 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v41, 2, v63);
          swift_slowDealloc(v41, -1, -1);
          swift_slowDealloc(v40, -1, -1);

          goto LABEL_48;
        }

        return v14;
      }

    }
    else
    {
      v16 = v70;
      v17 = _convertNSErrorToError(_:)(v13);

      swift_willThrow(v18);
      swift_errorRelease(v17);
    }
    v19 = sub_1005525B4(v4, a2);
    if (!v19)
    {
      if (qword_100837880 != -1)
        swift_once(&qword_100837880, sub_100547F80);
      v46 = type metadata accessor for Logger(0);
      sub_10001AAA8(v46, (uint64_t)qword_10084F6F8);
      v25 = v4;
      v26 = Logger.logObject.getter(v25);
      v47 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v26, v47))
      {
        v48 = (uint8_t *)swift_slowAlloc(12, -1);
        v49 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v48 = 138543362;
        v50 = objc_msgSend(v25, "identifier");
        v51 = v50;
        if (v50)
          v70 = v50;
        else
          v70 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
        *v49 = v51;

        _os_log_impl((void *)&_mh_execute_header, v26, v47, "RDAccountUtils.fetchAccountWithAppleAccount: No .calDav iCloud REMAccount found at all {accountIdentifier: %{public}@}", v48, 0xCu);
        v64 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v49, 1, v64);
        swift_slowDealloc(v49, -1, -1);
        swift_slowDealloc(v48, -1, -1);
        goto LABEL_42;
      }

LABEL_34:
LABEL_43:

      return 0;
    }
    v14 = v19;
    v20 = objc_msgSend(v19, "inactive");
    v21 = qword_100837880;
    if (v20)
    {
      if (qword_100837880 != -1)
        swift_once(&qword_100837880, sub_100547F80);
      v22 = type metadata accessor for Logger(0);
      sub_10001AAA8(v22, (uint64_t)qword_10084F6F8);
      v23 = v14;
      v24 = v4;
      v25 = v23;
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = swift_slowAlloc(22, -1);
        v29 = (_QWORD *)swift_slowAlloc(16, -1);
        *(_DWORD *)v28 = 138543618;
        v30 = objc_msgSend(v25, "objectID");
        v70 = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
        *v29 = v30;

        *(_WORD *)(v28 + 12) = 2114;
        v31 = objc_msgSend(v24, "identifier");
        v32 = v31;
        if (v31)
          v70 = v31;
        else
          v70 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
        v29[1] = v32;

        _os_log_impl((void *)&_mh_execute_header, v26, v27, "RDAccountUtils.fetchAccountWithAppleAccount: Found a .calDav iCloud REMAccount but it is inactive {objectID: %{public}@, accountIdentifier: %{public}@}", (uint8_t *)v28, 0x16u);
        v65 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v29, 2, v65);
        swift_slowDealloc(v29, -1, -1);
        swift_slowDealloc(v28, -1, -1);

LABEL_42:
        goto LABEL_43;
      }

      goto LABEL_34;
    }
    v52 = v14;
    if (v21 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v53 = type metadata accessor for Logger(0);
    sub_10001AAA8(v53, (uint64_t)qword_10084F6F8);
    v54 = v52;
    v55 = v4;
    v56 = v54;
    v38 = Logger.logObject.getter(v56);
    v57 = static os_log_type_t.default.getter(v38);
    if (os_log_type_enabled(v38, v57))
    {
      v67 = v57;
      v58 = swift_slowAlloc(22, -1);
      v59 = (_QWORD *)swift_slowAlloc(16, -1);
      *(_DWORD *)v58 = 138543618;
      v60 = objc_msgSend(v56, "objectID");
      v70 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
      *v59 = v60;

      *(_WORD *)(v58 + 12) = 2114;
      v61 = objc_msgSend(v55, "identifier");
      v62 = v61;
      if (v61)
        v70 = v61;
      else
        v70 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
      v59[1] = v62;

      _os_log_impl((void *)&_mh_execute_header, v38, v67, "RDAccountUtils.fetchAccountWithAppleAccount: Found an active .calDav iCloud REMAccount {objectID: %{public}@, accountIdentifier: %{public}@}.", (uint8_t *)v58, 0x16u);
      v66 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v59, 2, v66);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v58, -1, -1);

LABEL_48:
      return v14;
    }

    return v14;
  }
  __break(1u);
  return result;
}

unint64_t sub_100552EFC()
{
  unint64_t result;

  result = qword_10084F9A8;
  if (!qword_10084F9A8)
  {
    result = swift_getWitnessTable(&unk_1006C28C8, &type metadata for RDAccountUtils.LocalDataToICloudMover.NoICloudREMAccountError);
    atomic_store(result, (unint64_t *)&qword_10084F9A8);
  }
  return result;
}

unint64_t sub_100552F40()
{
  unint64_t result;

  result = qword_10084F9B0;
  if (!qword_10084F9B0)
  {
    result = swift_getWitnessTable(&unk_1006C2888, &type metadata for RDAccountUtils.LocalDataToICloudMover.TargetAccountIsNonEmptyError);
    atomic_store(result, (unint64_t *)&qword_10084F9B0);
  }
  return result;
}

unint64_t sub_100552F84()
{
  unint64_t result;

  result = qword_10084F9B8;
  if (!qword_10084F9B8)
  {
    result = swift_getWitnessTable(&unk_1006C2848, &type metadata for RDAccountUtils.LocalDataToICloudMover.LocalAccountIsEmptyError);
    atomic_store(result, (unint64_t *)&qword_10084F9B8);
  }
  return result;
}

unint64_t sub_100552FC8()
{
  unint64_t result;

  result = qword_10084F9C0;
  if (!qword_10084F9C0)
  {
    result = swift_getWitnessTable(&unk_1006C2808, &type metadata for RDAccountUtils.InactivatedICloudCalDavDataMover.NoCloudKitREMAccountError);
    atomic_store(result, (unint64_t *)&qword_10084F9C0);
  }
  return result;
}

unint64_t sub_10055300C()
{
  unint64_t result;

  result = qword_10084F9C8;
  if (!qword_10084F9C8)
  {
    result = swift_getWitnessTable(&unk_1006C27C8, &type metadata for RDAccountUtils.InactivatedICloudCalDavDataMover.DidNotChooseToMigrationCloudKitError);
    atomic_store(result, (unint64_t *)&qword_10084F9C8);
  }
  return result;
}

id sub_100553050(void *a1, void *a2)
{
  id v3;
  void *v4;
  id result;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = sub_100551B94(a1);
  if (!v3)
    return 0;
  v4 = v3;
  result = objc_msgSend(v3, "identifier");
  if (result)
  {
    v6 = result;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v9 = v8;

    v10 = sub_1005525B4(v4, a2);
    if (v10)
    {
      v11 = v10;
      if (objc_msgSend(v10, "inactive"))
      {
        if (qword_100837880 != -1)
          swift_once(&qword_100837880, sub_100547F80);
        v12 = type metadata accessor for Logger(0);
        sub_10001AAA8(v12, (uint64_t)qword_10084F6F8);
        swift_bridgeObjectRetain(v9);
        v14 = Logger.logObject.getter(v13);
        v15 = static os_log_type_t.info.getter(v14);
        if (os_log_type_enabled(v14, v15))
        {
          v16 = (uint8_t *)swift_slowAlloc(12, -1);
          v17 = swift_slowAlloc(32, -1);
          v31 = v17;
          *(_DWORD *)v16 = 136446210;
          swift_bridgeObjectRetain(v9);
          v30 = sub_10001A820(v7, v9, &v31);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
          swift_bridgeObjectRelease_n(v9, 3);
          _os_log_impl((void *)&_mh_execute_header, v14, v15, "RDAccountUtils.fetchInactiveCalDavAccount: Found an inactive .calDav iCloud REMAccount {appleACAccountID: %{public}s}", v16, 0xCu);
          swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v17, -1, -1);
          swift_slowDealloc(v16, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v9, 2);
        }
        return v11;
      }
      if (qword_100837880 != -1)
        swift_once(&qword_100837880, sub_100547F80);
      v24 = type metadata accessor for Logger(0);
      sub_10001AAA8(v24, (uint64_t)qword_10084F6F8);
      swift_bridgeObjectRetain(v9);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.info.getter(v26);
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc(12, -1);
        v29 = swift_slowAlloc(32, -1);
        v31 = v29;
        *(_DWORD *)v28 = 136446210;
        swift_bridgeObjectRetain(v9);
        v30 = sub_10001A820(v7, v9, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
        swift_bridgeObjectRelease_n(v9, 3);
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "RDAccountUtils.fetchInactiveCalDavAccount: Didn't find an inactve .calDav iCloud REMAccount but found an active one {appleACAccountID: %{public}s}", v28, 0xCu);
        swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v29, -1, -1);
        swift_slowDealloc(v28, -1, -1);

        goto LABEL_21;
      }

    }
    else
    {
      if (qword_100837880 != -1)
        swift_once(&qword_100837880, sub_100547F80);
      v18 = type metadata accessor for Logger(0);
      sub_10001AAA8(v18, (uint64_t)qword_10084F6F8);
      swift_bridgeObjectRetain(v9);
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.info.getter(v20);
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc(12, -1);
        v23 = swift_slowAlloc(32, -1);
        v31 = v23;
        *(_DWORD *)v22 = 136446210;
        swift_bridgeObjectRetain(v9);
        v30 = sub_10001A820(v7, v9, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
        swift_bridgeObjectRelease_n(v9, 3);
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "RDAccountUtils.fetchInactiveCalDavAccount: Didn't find any .calDav iCloud REMAccount {appleACAccountID: %{public}s}", v22, 0xCu);
        swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v23, -1, -1);
        swift_slowDealloc(v22, -1, -1);

LABEL_21:
        return 0;
      }

    }
    swift_bridgeObjectRelease_n(v9, 2);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

unint64_t sub_100553508()
{
  unint64_t result;

  result = qword_10084F9D0;
  if (!qword_10084F9D0)
  {
    result = swift_getWitnessTable(&unk_1006C2788, &type metadata for RDAccountUtils.InactivatedICloudCalDavDataMover.NoInactivatedICloudCalDavREMAccountError);
    atomic_store(result, (unint64_t *)&qword_10084F9D0);
  }
  return result;
}

_QWORD *sub_10055354C(unint64_t a1, _QWORD *a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t i;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v37;

  v32._countAndFlagsBits = a3;
  v32._object = a4;
  v4 = a1;
  v37 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_33;
  for (i = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter(v30))
  {
    v31 = v4;
    v6 = 0;
    v34 = v4 & 0xFFFFFFFFFFFFFF8;
    v35 = v4 & 0xC000000000000001;
    v33 = v4 + 32;
    while (1)
    {
      if (v35)
      {
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v31);
      }
      else
      {
        if (v6 >= *(_QWORD *)(v34 + 16))
        {
          __break(1u);
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
        v10 = *(id *)(v33 + 8 * v6);
      }
      v11 = v10;
      if (__OFADD__(v6++, 1))
        goto LABEL_31;
      v13 = objc_msgSend(v10, "name");
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v4 = v15;

      v16 = a2[2];
      if (v16)
      {
        v17 = a2[4];
        v18 = a2[5];
        v19 = v17 == v14 && v18 == v4;
        if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v14, v4, 0) & 1) != 0)
        {
LABEL_4:
          swift_bridgeObjectRelease(v4);
          goto LABEL_5;
        }
        if (v16 != 1)
          break;
      }
LABEL_26:
      v26 = objc_msgSend(v11, "name", swift_bridgeObjectRelease(v4).n128_f64[0]);
      v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v28 = v27;

      LOBYTE(v26) = String.hasSuffix(_:)(v32);
      swift_bridgeObjectRelease(v28);
      if ((v26 & 1) == 0)
      {

        goto LABEL_6;
      }
LABEL_5:
      v4 = (uint64_t)&v37;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v7);
      v8 = v37[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
      v9 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v11);
      specialized ContiguousArray._endMutation()(v9);
LABEL_6:
      if (v6 == i)
        return v37;
    }
    v20 = a2 + 7;
    v21 = 1;
    while (1)
    {
      v22 = v21 + 1;
      if (__OFADD__(v21, 1))
        break;
      v23 = *(v20 - 1);
      v24 = *v20;
      v25 = v23 == v14 && v24 == v4;
      if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v14, v4, 0) & 1) != 0)
        goto LABEL_4;
      v20 += 2;
      ++v21;
      if (v22 == v16)
        goto LABEL_26;
    }
LABEL_32:
    __break(1u);
LABEL_33:
    if (v4 < 0)
      v30 = v4;
    else
      v30 = v4 & 0xFFFFFFFFFFFFFF8;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1005537A0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1005537C4()
{
  uint64_t v0;

  return sub_10054D194(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1005537CC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100553800()
{
  uint64_t v0;

  return sub_10054CA68(*(void **)(v0 + 16), *(void **)(v0 + 24), *(uint64_t (**)(void))(v0 + 32));
}

uint64_t sub_10055380C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10055381C(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void **aBlock;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  void *v37;
  uint64_t (*v38)();
  _QWORD *v39;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v32 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) == 0)
    goto LABEL_8;
  if (qword_1008379F0 != -1)
    swift_once(&qword_1008379F0, sub_100673F84);
  if (byte_100872349 == 1 && byte_100872348 == 1 && gDADOperationQueue)
  {
    v13 = swift_allocObject(&unk_1007FA418, 32, 7);
    *(_QWORD *)(v13 + 16) = 0;
    *(_BYTE *)(v13 + 24) = 1;
    sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
    v31 = static OS_dispatch_queue.main.getter();
    v14 = (_QWORD *)swift_allocObject(&unk_1007FA440, 40, 7);
    v14[2] = v13;
    v14[3] = a2;
    v14[4] = a3;
    v38 = sub_100565990;
    v39 = v14;
    aBlock = _NSConcreteStackBlock;
    v35 = 1107296256;
    v36 = sub_1000094C8;
    v37 = &unk_1007FA458;
    v15 = _Block_copy(&aBlock);
    v16 = v39;
    swift_retain(v13);
    swift_retain(a3);
    v17 = swift_release(v16);
    static DispatchQoS.unspecified.getter(v17);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v18 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v19 = sub_10001A630((uint64_t *)&unk_100838000);
    v20 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v19, v20, v6, v18);
    v21 = (void *)v31;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v15);
    _Block_release(v15);

    (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v6);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v22 = v13;
  }
  else
  {
LABEL_8:
    if (qword_100836F10 != -1)
      swift_once(&qword_100836F10, sub_1001BA718);
    v23 = swift_allocObject(&unk_1007FA3C8, 32, 7);
    *(_QWORD *)(v23 + 16) = a2;
    *(_QWORD *)(v23 + 24) = a3;
    v38 = sub_100565954;
    v39 = (_QWORD *)v23;
    aBlock = _NSConcreteStackBlock;
    v35 = 1107296256;
    v36 = sub_1000094C8;
    v37 = &unk_1007FA3E0;
    v24 = _Block_copy(&aBlock);
    v25 = swift_retain(a3);
    static DispatchQoS.unspecified.getter(v25);
    v33 = _swiftEmptyArrayStorage;
    v26 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v27 = sub_10001A630((uint64_t *)&unk_100838000);
    v28 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v27, v28, v6, v26);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v24);
    _Block_release(v24);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v6);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v22 = (uint64_t)v39;
  }
  return swift_release(v22);
}

id sub_100553C2C(uint64_t a1, uint64_t a2, uint64_t a3, NSString a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  id v16;
  id v17;
  uint64_t v18;
  NSString v19;
  id v20;
  double (*__ptr32 *v21)();
  id result;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  dispatch_group_t v43;
  uint64_t v44;
  void *v45;
  _QWORD *v46;
  id v47;
  NSObject *v48;
  uint64_t v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  dispatch_group_t v57;
  _QWORD *v58;
  NSString v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  dispatch_group_t v66;
  id v67;
  __int128 v68;
  _QWORD v69[2];
  __int128 v70;
  _QWORD *v71;
  __int128 aBlock;
  __int128 v73;
  void *v74;
  _QWORD *v75;

  v62 = a3;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v65 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v63 = *(_QWORD *)(v8 - 8);
  v64 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100837880 != -1)
    goto LABEL_35;
  while (1)
  {
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10001AAA8(v11, (uint64_t)qword_10084F6F8);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Purge ACAccount migration state cache", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    v16 = objc_msgSend((id)objc_opt_self(REMAppleAccountUtilities), "sharedInstance");
    v17 = objc_msgSend(v16, "accountStore");

    v66 = dispatch_group_create();
    v18 = swift_allocObject(&unk_1007FAA80, 24, 7);
    *(_QWORD *)(v18 + 16) = 0;
    v19 = String._bridgeToObjectiveC()();
    v67 = v17;
    v20 = objc_msgSend(v17, "accountWithIdentifier:", v19);

    v21 = &off_1006A3000;
    if (!v20)
      goto LABEL_31;
    result = objc_msgSend(v20, "accountType");
    if (!result)
    {
      __break(1u);
      return result;
    }
    v23 = result;
    v24 = objc_msgSend(result, "identifier");

    if (!v24)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierAppleAccount);
      v30 = v32;
LABEL_13:

      swift_bridgeObjectRelease(v30);
      goto LABEL_31;
    }
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;

    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierAppleAccount);
    v30 = v29;
    if (!v27)
    {
      v21 = &off_1006A3000;
      goto LABEL_13;
    }
    if (v25 == v28 && v27 == v29)
    {
      v31 = swift_bridgeObjectRelease_n(v27, 2).n128_u64[0];
    }
    else
    {
      v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v27, v28, v29, 0);
      swift_bridgeObjectRelease(v27);
      v31 = swift_bridgeObjectRelease(v30).n128_u64[0];
      if ((v33 & 1) == 0)
        break;
    }
    if (!objc_msgSend(v20, "isActive", *(double *)&v31))
      break;
    v59 = a4;
    v60 = v6;
    v61 = v5;
    v68 = xmmword_1006A3C40;
    v69[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(REMACAccountPropertyDidChooseToMigrate);
    v69[1] = v34;
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMACAccountPropertyDidFinishMigration);
    v36 = 0;
    v37 = 0;
    *(_QWORD *)&v70 = v35;
    *((_QWORD *)&v70 + 1) = v38;
    while (v37 < (unint64_t)v68)
    {
      v39 = &v69[2 * v37];
      v6 = *v39;
      v40 = v39[1];
      v5 = v37 + 1;
      *(_QWORD *)&aBlock = *v39;
      *((_QWORD *)&aBlock + 1) = v40;
      swift_bridgeObjectRetain_n(v40, 2);
      a4 = (NSString)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&aBlock, &type metadata for String);
      v41 = objc_msgSend(v20, "objectForKeyedSubscript:", a4);
      swift_unknownObjectRelease(a4);
      if (!v41)
      {
        aBlock = 0u;
        v73 = 0u;
        sub_10000882C((uint64_t)&aBlock, (uint64_t *)&unk_10083D5B0);
        swift_bridgeObjectRelease(v40);
        if (v5 == 2)
          goto LABEL_25;
        if ((unint64_t)v68 < 2)
          break;
        v40 = *((_QWORD *)&v70 + 1);
        v6 = v70;
        aBlock = v70;
        swift_bridgeObjectRetain_n(*((_QWORD *)&v70 + 1), 2);
        v42 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&aBlock, &type metadata for String);
        v41 = objc_msgSend(v20, "objectForKeyedSubscript:", v42);
        swift_unknownObjectRelease(v42);
        if (!v41)
        {
          aBlock = 0u;
          v73 = 0u;
          sub_10000882C((uint64_t)&aBlock, (uint64_t *)&unk_10083D5B0);
          swift_bridgeObjectRelease(v40);
LABEL_25:
          swift_arrayDestroy(v69, v68, &type metadata for String);
          v5 = v61;
          v6 = v60;
          if ((v36 & 1) == 0)
          {

            a4 = v59;
            goto LABEL_28;
          }
LABEL_30:
          v43 = v66;
          dispatch_group_enter(v66);
          v44 = swift_allocObject(&unk_1007FAE40, 32, 7);
          *(_QWORD *)(v44 + 16) = v18;
          *(_QWORD *)(v44 + 24) = v43;
          v74 = sub_100568688;
          v75 = (_QWORD *)v44;
          *(_QWORD *)&aBlock = _NSConcreteStackBlock;
          *((_QWORD *)&aBlock + 1) = 1107296256;
          *(_QWORD *)&v73 = sub_1001BCC34;
          *((_QWORD *)&v73 + 1) = &unk_1007FAE58;
          v45 = _Block_copy(&aBlock);
          v46 = v75;
          v47 = v20;
          swift_retain();
          v48 = v43;
          v21 = &off_1006A3000;
          swift_release(v46);
          objc_msgSend(v67, "saveAccount:withCompletionHandler:", v47, v45);

          _Block_release(v45);
          a4 = v59;
          goto LABEL_31;
        }
        v5 = 2;
      }
      _bridgeAnyObjectToAny(_:)(&aBlock, v41);
      swift_unknownObjectRelease(v41);
      sub_10000882C((uint64_t)&aBlock, (uint64_t *)&unk_10083D5B0);
      a4 = String._bridgeToObjectiveC()();
      objc_msgSend(v20, "setAccountProperty:forKey:", 0, a4, swift_bridgeObjectRelease(v40).n128_f64[0]);

      v36 = 1;
      v37 = 1;
      if (v5 == 2)
      {
        swift_arrayDestroy(v69, v68, &type metadata for String);
        v5 = v61;
        v6 = v60;
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_35:
    swift_once(&qword_100837880, sub_100547F80);
  }

LABEL_28:
  v21 = &off_1006A3000;
LABEL_31:
  if (qword_100836F28 != -1)
    swift_once(&qword_100836F28, sub_1001BA8F8);
  v49 = qword_100871CE8;
  v50 = (_QWORD *)swift_allocObject(&unk_1007FADF0, 40, 7);
  v50[2] = v62;
  v50[3] = a4;
  v50[4] = v18;
  v74 = sub_100568650;
  v75 = v50;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = *((_QWORD *)v21 + 376);
  *(_QWORD *)&v73 = sub_1000094C8;
  *((_QWORD *)&v73 + 1) = &unk_1007FAE08;
  v51 = _Block_copy(&aBlock);
  swift_retain();
  v52 = swift_retain();
  static DispatchQoS.unspecified.getter(v52);
  v71 = _swiftEmptyArrayStorage;
  v53 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v54 = sub_10001A630((uint64_t *)&unk_100838000);
  v55 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  v56 = v65;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v71, v54, v55, v5, v53);
  v57 = v66;
  OS_dispatch_group.notify(qos:flags:queue:execute:)(v10, v56, v49, v51);
  _Block_release(v51);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v56, v5);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v10, v64);
  v58 = v75;
  swift_release(v18);
  return (id)swift_release(v58);
}

uint64_t sub_1005543E0(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v5 = result;
  result = String.count.getter(a2, a3);
  if (__OFSUB__(result, v5))
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v6 = (result - v5) & ~((result - v5) >> 63);
  v7 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v7 = a2;
  v8 = v7 << 16;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
    v9 = 11;
  else
    v9 = 7;
  v10 = String.index(_:offsetBy:limitedBy:)(15, v6, v9 | (unint64_t)(v7 << 16), a2, a3);
  v12 = v8 | 0xB;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) == 0)
    v12 = v8 | 7;
  if ((v11 & 1) != 0)
    v13 = v12;
  else
    v13 = v10;
  return String.subscript.getter(15, v13, a2, a3);
}

uint64_t sub_100554498(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
  char v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  Class isa;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v54;
  uint64_t v55[2];
  uint64_t v56;
  _BYTE v57[32];

  v19 = a2;
  v20 = a9;
  if ((a1 & 1) != 0 || (a2 & 1) != 0)
  {
    swift_beginAccess(a4 + 16, v57, 0, 0);
    if (*(_BYTE *)(a4 + 16) == 1)
    {
      v50 = a7;
      v21 = (void *)objc_opt_self(REMUserDefaults);
      v22 = objc_msgSend(v21, "daemonUserDefaults");
      v23 = objc_msgSend(v22, "acAccountIdentifiersToMigrateInactivatedCalDavData");

      v52 = v19;
      if (v23)
      {
        v24 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, &type metadata for String);

      }
      else
      {
        v24 = _swiftEmptyArrayStorage;
      }
      v25 = sub_10011EE40((uint64_t)v24);
      swift_bridgeObjectRelease(v24);
      v56 = v25;
      swift_bridgeObjectRetain(a6);
      sub_1002DB0E4(v55, a5, a6);
      v26 = objc_msgSend(v21, "daemonUserDefaults", swift_bridgeObjectRelease(v55[1]).n128_f64[0]);
      v27 = v56;
      v28 = sub_1001E8BAC(v56);
      swift_bridgeObjectRelease(v27);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_release(v28);
      objc_msgSend(v26, "setAcAccountIdentifiersToMigrateInactivatedCalDavData:", isa);

      if (qword_100837880 != -1)
        swift_once(&qword_100837880, sub_100547F80);
      v30 = type metadata accessor for Logger(0);
      sub_10001AAA8(v30, (uint64_t)qword_10084F6F8);
      v31 = swift_bridgeObjectRetain_n(a6, 2);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        v34 = a5;
        v35 = (uint8_t *)swift_slowAlloc(12, -1);
        v36 = swift_slowAlloc(32, -1);
        v55[0] = v36;
        *(_DWORD *)v35 = 136446210;
        swift_bridgeObjectRetain(a6);
        v54 = sub_10001A820(v34, a6, v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55);
        swift_bridgeObjectRelease_n(a6, 3);
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "UpdateAccountWithACAccount: inserting to daemonUserDefaults.acAccountIdentifiersToMigrateInactivatedCalDavData {displayAccountID: %{public}s}", v35, 0xCu);
        swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v36, -1, -1);
        swift_slowDealloc(v35, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a6, 2);
      }
      v19 = v52;
      a7 = v50;
    }
  }
  v37 = a12;
  v38 = *(_QWORD *)(a7 + 16);
  v39 = _swiftEmptyArrayStorage;
  if (v38)
  {
    v48 = a3;
    v49 = a8;
    v55[0] = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(a7);
    sub_1001C1B0C(0, v38, 0);
    v39 = (_QWORD *)v55[0];
    v51 = a7;
    v40 = (uint64_t *)(a7 + 40);
    do
    {
      v42 = *(v40 - 1);
      v41 = *v40;
      v55[0] = (uint64_t)v39;
      v44 = v39[2];
      v43 = v39[3];
      swift_bridgeObjectRetain(v41);
      if (v44 >= v43 >> 1)
      {
        sub_1001C1B0C(v43 > 1, v44 + 1, 1);
        v39 = (_QWORD *)v55[0];
      }
      v40 += 6;
      v39[2] = v44 + 1;
      v45 = &v39[2 * v44];
      v45[4] = v42;
      v45[5] = v41;
      --v38;
    }
    while (v38);
    swift_bridgeObjectRelease(v51);
    v20 = a9;
    a8 = v49;
    v37 = a12;
    a3 = v48;
  }
  v46 = swift_allocObject(&unk_1007FA940, 72, 7);
  *(_QWORD *)(v46 + 16) = a8;
  *(_QWORD *)(v46 + 24) = a10;
  *(_BYTE *)(v46 + 32) = a11 & 1;
  *(_QWORD *)(v46 + 40) = v37;
  *(_QWORD *)(v46 + 48) = a13;
  *(_BYTE *)(v46 + 56) = a1 & 1;
  *(_BYTE *)(v46 + 57) = v19 & 1;
  *(_QWORD *)(v46 + 64) = a3;
  swift_retain();
  swift_retain();
  swift_errorRetain(a3);
  sub_10054C754(v20, (uint64_t)sub_1005681C0, v46);
  swift_bridgeObjectRelease(v39);
  return swift_release(v46);
}

double sub_1005548F4(uint64_t a1, void *a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  double v60;
  id v61;
  id v62;
  NSObject *v63;
  uint64_t v64;
  double v65;
  void *v66;
  id v67;
  uint64_t v68;
  id v69;
  unsigned int v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  id v79;
  id v80;
  id v81;
  NSObject *v82;
  os_log_type_t v83;
  uint64_t v84;
  void *v85;
  double v86;
  id v87;
  NSString v88;
  NSString v89;
  id v90;
  id v91;
  double v92;
  id v93;
  NSObject *v94;
  os_log_type_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  double v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  NSObject *v119;
  os_log_type_t v120;
  uint8_t *v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  double result;
  uint64_t v127;
  unint64_t v128;
  void *v129;
  _QWORD *v130;
  id v131;
  uint64_t v132;
  os_log_t v133;
  NSObject *v134;
  unint64_t v135;
  char type;
  id v138;
  BOOL v139;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  void *v146;
  id v147;
  id v148;
  int v149;
  int v150;
  int v151;
  int v152;
  os_log_type_t v153;
  uint64_t v154;
  void *v155;
  int v156;
  void *v157;
  os_log_type_t v158;
  void *v159;
  void *v160;
  void *v161;
  uint64_t v163;
  uint64_t v164;
  id aBlock[5];
  uint64_t v166;

  v17 = (_QWORD *)swift_allocObject(&unk_1007FA8A0, 64, 7);
  v17[2] = a7;
  v17[3] = a8;
  v17[4] = a9;
  *((_BYTE *)v17 + 40) = a10 & 1;
  v17[6] = a11;
  v17[7] = a12;
  v18 = swift_allocObject(&unk_1007FA8C8, 64, 7);
  *(_QWORD *)(v18 + 16) = a3;
  *(_QWORD *)(v18 + 24) = a4;
  v132 = a4;
  *(_QWORD *)(v18 + 32) = a5;
  *(_QWORD *)(v18 + 40) = a6;
  *(_QWORD *)(v18 + 48) = sub_1005681B0;
  *(_QWORD *)(v18 + 56) = v17;
  v19 = objc_allocWithZone((Class)REMSaveRequest);
  v20 = a7;
  v21 = a12;
  swift_retain();
  v131 = a8;
  swift_retain();
  v22 = a3;
  swift_retain();
  v135 = a5;
  swift_bridgeObjectRetain(a5);
  v23 = a6;
  swift_bridgeObjectRetain(a6);
  swift_retain();
  v24 = a1;
  v138 = objc_msgSend(v19, "initWithStore:", a2);
  v25 = *(_QWORD *)(a1 + 16);
  if (v25)
  {
    v127 = v20;
    v128 = v18;
    v129 = a3;
    v130 = v17;
    swift_bridgeObjectRetain(a1);
    v23 = 0;
    type = 0;
    v139 = 0;
    v26 = 1 - v25;
    while (1)
    {
      v27 = *(_QWORD *)(v24 + v23 + 32);
      v17 = *(_QWORD **)(v24 + v23 + 40);
      v28 = *(_QWORD *)(v24 + v23 + 48);
      v18 = *(_QWORD *)(v24 + v23 + 56);
      v22 = *(id *)(v24 + v23 + 64);
      v156 = *(unsigned __int8 *)(v24 + v23 + 73);
      v149 = *(unsigned __int8 *)(v24 + v23 + 74);
      v150 = *(unsigned __int8 *)(v24 + v23 + 75);
      v151 = *(unsigned __int8 *)(v24 + v23 + 76);
      v152 = *(unsigned __int8 *)(v24 + v23 + 72);
      v29 = qword_100837880;
      swift_bridgeObjectRetain_n(v17, 2);
      swift_bridgeObjectRetain_n(v18, 2);
      if (v29 != -1)
        swift_once(&qword_100837880, sub_100547F80);
      v30 = type metadata accessor for Logger(0);
      sub_10001AAA8(v30, (uint64_t)qword_10084F6F8);
      v31 = swift_bridgeObjectRetain_n(v17, 2);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.default.getter(v32);
      v154 = v28;
      if (os_log_type_enabled(v32, v33))
      {
        v144 = v26;
        v34 = v18;
        v35 = v23;
        v36 = v27;
        v37 = swift_slowAlloc(12, -1);
        v38 = (void *)swift_slowAlloc(32, -1);
        aBlock[0] = v38;
        *(_DWORD *)v37 = 136446210;
        swift_bridgeObjectRetain(v17);
        *(_QWORD *)(v37 + 4) = sub_10001A820(v36, (unint64_t)v17, (uint64_t *)aBlock);
        swift_bridgeObjectRelease_n(v17, 3);
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "UpdateAccountsWithAccountInfos: Updating account object {accountID: %{public}s}", (uint8_t *)v37, 0xCu);
        swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v38, -1, -1);
        v39 = v37;
        v27 = v36;
        v23 = v35;
        v18 = v34;
        v26 = v144;
        swift_slowDealloc(v39, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v17, 2);
      }
      v40 = sub_1005520BC(v27, (unint64_t)v17);
      if (!v40)
      {
        swift_bridgeObjectRelease(v17);
        swift_bridgeObjectRelease_n(v18, 2);
        swift_bridgeObjectRetain(v17);
        v46 = Logger.logObject.getter(v45);
        v47 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v46, v47))
        {
          v18 = v23;
          v48 = v27;
          v49 = swift_slowAlloc(12, -1);
          v50 = (void *)swift_slowAlloc(32, -1);
          aBlock[0] = v50;
          *(_DWORD *)v49 = 136446210;
          swift_bridgeObjectRetain(v17);
          v51 = v48;
          v23 = v18;
          *(_QWORD *)(v49 + 4) = sub_10001A820(v51, (unint64_t)v17, (uint64_t *)aBlock);
          swift_bridgeObjectRelease_n(v17, 3);
          _os_log_impl((void *)&_mh_execute_header, v46, v47, "UpdateAccountsWithAccountInfos: Failed to create UUID object, account ignored {accountID: %{public}s}", (uint8_t *)v49, 0xCu);
          swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v50, -1, -1);
          swift_slowDealloc(v49, -1, -1);

          if (!v26)
            goto LABEL_66;
        }
        else
        {

          swift_bridgeObjectRelease_n(v17, 2);
          if (!v26)
          {
LABEL_66:
            swift_bridgeObjectRelease(v24);
            v23 = a6;
            v22 = v129;
            v17 = v130;
            v20 = v127;
            v18 = v128;
            v21 = a12;
            v117 = v132;
            if (!v139)
              goto LABEL_69;
            goto LABEL_73;
          }
        }
        goto LABEL_5;
      }
      v41 = v40;
      aBlock[0] = 0;
      v42 = objc_msgSend(a2, "fetchAccountWithObjectID:error:", v40, aBlock);
      v43 = aBlock[0];
      if (v42)
      {
        if ((v156 & 1) != 0)
        {
          v44 = v42;
LABEL_19:
          swift_bridgeObjectRelease(v18);
          swift_bridgeObjectRelease(v17);
          if (v44)
          {
            v143 = v27;
            v157 = v41;
            v55 = v42;
            swift_bridgeObjectRetain(v17);
            swift_bridgeObjectRetain(v18);
            v56 = v55;
            v57 = Logger.logObject.getter(v56);
            v58 = static os_log_type_t.default.getter(v57);
            if (os_log_type_enabled(v57, v58))
            {
              v59 = swift_slowAlloc(32, -1);
              v22 = (id)swift_slowAlloc(64, -1);
              aBlock[0] = v22;
              *(_DWORD *)v59 = 136315650;
              swift_bridgeObjectRetain(v18);
              *(_QWORD *)(v59 + 4) = sub_10001A820(v154, v18, (uint64_t *)aBlock);
              swift_bridgeObjectRelease_n(v18, 3);
              *(_WORD *)(v59 + 12) = 2082;
              swift_bridgeObjectRetain(v17);
              *(_QWORD *)(v59 + 14) = sub_10001A820(v143, (unint64_t)v17, (uint64_t *)aBlock);
              *(_QWORD *)&v60 = swift_bridgeObjectRelease_n(v17, 3).n128_u64[0];
              *(_WORD *)(v59 + 22) = 2048;
              v17 = objc_msgSend(v44, "type", v60);

              *(_QWORD *)(v59 + 24) = v17;
              _os_log_impl((void *)&_mh_execute_header, v57, v58, "UpdateAccountsWithAccountInfos is going to delete account {accountName: %s, accountID: %{public}s, type: %ld}.", (uint8_t *)v59, 0x20u);
              swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v22, -1, -1);
              swift_slowDealloc(v59, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n(v17, 2);
              swift_bridgeObjectRelease_n(v18, 2);

            }
            v79 = objc_msgSend(v138, "updateAccount:", v44);
            objc_msgSend(v79, "removeFromStore");

            v24 = a1;
            if (!v26)
            {
              swift_bridgeObjectRelease(a1);
              type = 1;
              goto LABEL_72;
            }
            v139 = 1;
            type = 1;
            goto LABEL_5;
          }

          swift_bridgeObjectRelease(v18);
          swift_bridgeObjectRelease(v17);
          goto LABEL_4;
        }
        v61 = v42;
        if (objc_msgSend(v61, "type") != v22)
        {
          v147 = v22;
          v22 = (id)v27;
          v160 = v41;
          swift_bridgeObjectRelease(v18);
          swift_bridgeObjectRelease(v17);
          v80 = v61;
          swift_bridgeObjectRetain(v17);
          swift_bridgeObjectRetain(v18);
          v81 = v80;
          v82 = Logger.logObject.getter(v81);
          v83 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v82, v83))
          {
            v84 = swift_slowAlloc(42, -1);
            v85 = (void *)swift_slowAlloc(64, -1);
            aBlock[0] = v85;
            *(_DWORD *)v84 = 136315906;
            swift_bridgeObjectRetain(v18);
            *(_QWORD *)(v84 + 4) = sub_10001A820(v154, v18, (uint64_t *)aBlock);
            swift_bridgeObjectRelease_n(v18, 3);
            *(_WORD *)(v84 + 12) = 2082;
            swift_bridgeObjectRetain(v17);
            *(_QWORD *)(v84 + 14) = sub_10001A820((uint64_t)v22, (unint64_t)v17, (uint64_t *)aBlock);
            *(_QWORD *)&v86 = swift_bridgeObjectRelease_n(v17, 3).n128_u64[0];
            v18 = 2048;
            *(_WORD *)(v84 + 22) = 2048;
            v17 = objc_msgSend(v81, "type", v86);

            *(_QWORD *)(v84 + 24) = v17;
            *(_WORD *)(v84 + 32) = 2048;
            *(_QWORD *)(v84 + 34) = v147;
            _os_log_impl((void *)&_mh_execute_header, v82, v83, "UpdateAccountsWithAccountInfos: Unexpected account type, account ignored. {accountName: %s, accountID: %{public}s, expectedType: %ld, actualType: %ld}", (uint8_t *)v84, 0x2Au);
            swift_arrayDestroy(v85, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v85, -1, -1);
            swift_slowDealloc(v84, -1, -1);

            goto LABEL_64;
          }

          swift_bridgeObjectRelease_n(v17, 2);
          swift_bridgeObjectRelease_n(v18, 2);

LABEL_4:
          v24 = a1;
          if (!v26)
            goto LABEL_66;
          goto LABEL_5;
        }
        swift_bridgeObjectRetain_n(v17, 2);
        swift_bridgeObjectRetain_n(v18, 2);
        v62 = v61;
        v63 = Logger.logObject.getter(v62);
        v158 = static os_log_type_t.default.getter(v63);
        v142 = v27;
        if (os_log_type_enabled(v63, v158))
        {
          v145 = v22;
          v64 = swift_slowAlloc(32, -1);
          v133 = (os_log_t)swift_slowAlloc(64, -1);
          aBlock[0] = v133;
          *(_DWORD *)v64 = 136315650;
          swift_bridgeObjectRetain(v18);
          v163 = sub_10001A820(v154, v18, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, &v164);
          swift_bridgeObjectRelease_n(v18, 3);
          *(_WORD *)(v64 + 12) = 2082;
          swift_bridgeObjectRetain(v17);
          v163 = sub_10001A820(v27, (unint64_t)v17, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, &v164);
          *(_QWORD *)&v65 = swift_bridgeObjectRelease_n(v17, 3).n128_u64[0];
          *(_WORD *)(v64 + 22) = 2048;
          v66 = v41;
          v67 = objc_msgSend(v62, "type", v65);

          v163 = (uint64_t)v67;
          v41 = v66;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, &v164);

          _os_log_impl((void *)&_mh_execute_header, v63, v158, "UpdateAccountsWithAccountInfos is updating existing account object {name: %s, accountID: %{public}s, type: %ld}", (uint8_t *)v64, 0x20u);
          swift_arrayDestroy(v133, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v133, -1, -1);
          v68 = v64;
          v22 = v145;
          swift_slowDealloc(v68, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v17, 2);
          swift_bridgeObjectRelease_n(v18, 2);

        }
        v87 = objc_msgSend(v138, "updateAccount:", v62);
        v88 = String._bridgeToObjectiveC()();
        objc_msgSend(v87, "setName:", v88, swift_bridgeObjectRelease(v18).n128_f64[0]);

      }
      else
      {
        v52 = v43;
        v142 = v27;
        v53 = _convertNSErrorToError(_:)(v43);

        swift_willThrow(v54);
        v44 = 0;
        swift_errorRelease(v53);
        if (v156)
          goto LABEL_19;
        if ((v152 & 1) == 0)
        {
          v69 = objc_msgSend(objc_allocWithZone((Class)REMAccountTypeHost), "initWithType:", v22);
          v70 = objc_msgSend(v69, "isCloudKit");

          if (!v70)
          {
            swift_bridgeObjectRelease(v18);
            swift_bridgeObjectRelease(v17);
            swift_bridgeObjectRetain(v17);
            swift_bridgeObjectRetain(v18);
            v109 = Logger.logObject.getter(v108);
            v110 = static os_log_type_t.info.getter(v109);
            if (os_log_type_enabled(v109, v110))
            {
              v111 = swift_slowAlloc(32, -1);
              v160 = v41;
              v112 = (void *)swift_slowAlloc(96, -1);
              aBlock[0] = v112;
              *(_DWORD *)v111 = 136315650;
              swift_bridgeObjectRetain(v18);
              *(_QWORD *)(v111 + 4) = sub_10001A820(v154, v18, (uint64_t *)aBlock);
              swift_bridgeObjectRelease_n(v18, 3);
              *(_WORD *)(v111 + 12) = 2082;
              swift_bridgeObjectRetain(v17);
              *(_QWORD *)(v111 + 14) = sub_10001A820(v142, (unint64_t)v17, (uint64_t *)aBlock);
              swift_bridgeObjectRelease_n(v17, 3);
              *(_WORD *)(v111 + 22) = 2082;
              v113 = REMAccountType.loggableDescription.getter(v22);
              v115 = v114;
              *(_QWORD *)(v111 + 24) = sub_10001A820(v113, v114, (uint64_t *)aBlock);
              swift_bridgeObjectRelease(v115);
              _os_log_impl((void *)&_mh_execute_header, v109, v110, "UpdateAccountsWithAccountInfos won't create inactive accounts unless it is CloudKit {name: %s, accountID: %{public}s, type: %{public}s}", (uint8_t *)v111, 0x20u);
              swift_arrayDestroy(v112, 3, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v112, -1, -1);
              swift_slowDealloc(v111, -1, -1);

LABEL_64:
            }
            else
            {

              swift_bridgeObjectRelease_n(v17, 2);
              swift_bridgeObjectRelease_n(v18, 2);

            }
            goto LABEL_4;
          }
        }
        swift_bridgeObjectRetain_n(v17, 2);
        v71 = swift_bridgeObjectRetain_n(v18, 2);
        v72 = Logger.logObject.getter(v71);
        v73 = static os_log_type_t.default.getter(v72);
        if (os_log_type_enabled(v72, v73))
        {
          v74 = swift_slowAlloc(32, -1);
          v146 = (void *)swift_slowAlloc(96, -1);
          aBlock[0] = v146;
          *(_DWORD *)v74 = 136315650;
          swift_bridgeObjectRetain(v18);
          v163 = sub_10001A820(v154, v18, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, &v164);
          swift_bridgeObjectRelease_n(v18, 3);
          v159 = v41;
          *(_WORD *)(v74 + 12) = 2082;
          swift_bridgeObjectRetain(v17);
          v163 = sub_10001A820(v142, (unint64_t)v17, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, &v164);
          swift_bridgeObjectRelease_n(v17, 3);
          *(_WORD *)(v74 + 22) = 2082;
          v75 = REMAccountType.loggableDescription.getter(v22);
          v77 = v76;
          v163 = sub_10001A820(v75, v76, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, &v164);
          v78 = v77;
          v41 = v159;
          swift_bridgeObjectRelease(v78);
          _os_log_impl((void *)&_mh_execute_header, v72, v73, "UpdateAccountsWithAccountInfos is creating account object {name: %s, accountID: %{public}s, type: %{public}s}", (uint8_t *)v74, 0x20u);
          swift_arrayDestroy(v146, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v146, -1, -1);
          swift_slowDealloc(v74, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v17, 2);
          swift_bridgeObjectRelease_n(v18, 2);
        }
        v89 = String._bridgeToObjectiveC()();
        v90 = objc_msgSend(v138, "__addAccountWithType:name:", v22, v89, swift_bridgeObjectRelease(v18).n128_f64[0]);

        v87 = v90;
        objc_msgSend(v87, "setObjectID:", v41);
        v91 = objc_msgSend(objc_allocWithZone((Class)REMAccountTypeHost), "initWithType:", v22);
        LODWORD(v90) = objc_msgSend(v91, "isCloudKit");

        if ((_DWORD)v90)
        {
          objc_msgSend(v87, "setPersistenceCloudSchemaVersion:", 20240715);
          type = 1;
          v88 = v87;
        }
        else
        {
          v88 = String._bridgeToObjectiveC()();
          objc_msgSend(v87, "setExternalIdentifier:", v88);

          type = 1;
        }
      }

      if (v152 == objc_msgSend(v87, "inactive"))
      {
        v148 = v22;
        objc_msgSend(v87, "setInactive:", v152 ^ 1u);
        v93 = v87;
        swift_bridgeObjectRetain(v17);
        v22 = v93;
        v94 = Logger.logObject.getter(v22);
        v95 = static os_log_type_t.default.getter(v94);
        if (os_log_type_enabled(v94, v95))
        {
          v161 = v41;
          v96 = swift_slowAlloc(32, -1);
          v155 = (void *)swift_slowAlloc(96, -1);
          aBlock[0] = v155;
          *(_DWORD *)v96 = 136446722;
          v153 = v95;
          v97 = Bool.yesno.getter(objc_msgSend(v22, "inactive"));
          v134 = v94;
          v99 = v98;
          v163 = sub_10001A820(v97, v98, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, &v164);

          swift_bridgeObjectRelease(v99);
          *(_WORD *)(v96 + 12) = 2082;
          swift_bridgeObjectRetain(v17);
          v163 = sub_10001A820(v142, (unint64_t)v17, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, &v164);
          swift_bridgeObjectRelease_n(v17, 3);
          *(_WORD *)(v96 + 22) = 2082;
          v100 = REMAccountType.loggableDescription.getter(v148);
          v102 = v101;
          v163 = sub_10001A820(v100, v101, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, &v164);
          swift_bridgeObjectRelease(v102);
          swift_arrayDestroy(v155, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v155, -1, -1);
          v103 = v96;
          v41 = v161;
          swift_slowDealloc(v103, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v17, 2);
        }
      }
      else
      {
        *(_QWORD *)&v92 = swift_bridgeObjectRelease(v17).n128_u64[0];
      }
      if (v149 != 2)
      {
        if (objc_msgSend(v87, "didChooseToMigrateLocally", v92)
          && objc_msgSend(v87, "didChooseToMigrate")
          && (v149 & 1) == 0)
        {
          objc_msgSend(v87, "setDidChooseToMigrateLocally:", 0);
        }
        objc_msgSend(v87, "setDidChooseToMigrate:", v149 & 1);
      }
      if (v150 != 2)
        objc_msgSend(v87, "setDidFinishMigration:", v150 & 1);
      swift_bridgeObjectRelease(v18);
      *(_QWORD *)&v104 = swift_bridgeObjectRelease(v17).n128_u64[0];
      if (v151 != 2)
        objc_msgSend(v87, "setDebugSyncDisabled:", v151 & 1, v104);
      if (!v139)
      {
        v105 = objc_msgSend(v87, "changedKeys");
        v106 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v105, &type metadata for String, &protocol witness table for String);

        v107 = *(_QWORD *)(v106 + 16);
        swift_bridgeObjectRelease(v106);
        v139 = v107 != 0;
        goto LABEL_4;
      }

      if (!v26)
      {
        swift_bridgeObjectRelease(a1);
LABEL_72:
        v23 = a6;
        v22 = v129;
        v17 = v130;
        v18 = v128;
LABEL_73:
        v119 = Logger.logObject.getter(v116);
        v120 = static os_log_type_t.default.getter(v119);
        if (os_log_type_enabled(v119, v120))
        {
          v121 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v121 = 0;
          _os_log_impl((void *)&_mh_execute_header, v119, v120, "UpdateAccountsWithAccountInfos: Saving account object changes", v121, 2u);
          swift_slowDealloc(v121, -1, -1);
        }

        if (qword_100836F28 == -1)
        {
LABEL_76:
          v122 = qword_100871CE8;
          v123 = swift_allocObject(&unk_1007FA8F0, 34, 7);
          *(_QWORD *)(v123 + 16) = sub_1005658FC;
          *(_QWORD *)(v123 + 24) = v18;
          *(_BYTE *)(v123 + 32) = type & 1;
          *(_BYTE *)(v123 + 33) = 1;
          aBlock[4] = sub_100568E9C;
          v166 = v123;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = (id)1107296256;
          aBlock[2] = sub_1000E18E4;
          aBlock[3] = &unk_1007FA908;
          v124 = _Block_copy(aBlock);
          v125 = v166;
          swift_retain();
          swift_release(v125);
          objc_msgSend(v138, "saveWithQueue:completion:", v122, v124);

          _Block_release(v124);
          swift_release(v22);
          goto LABEL_77;
        }
LABEL_79:
        swift_once(&qword_100836F28, sub_1001BA8F8);
        goto LABEL_76;
      }
      v139 = 1;
      v24 = a1;
LABEL_5:
      ++v26;
      v23 += 48;
      if (v26 == 1)
      {
        __break(1u);
        goto LABEL_79;
      }
    }
  }
  type = 0;
  v117 = v132;
LABEL_69:
  swift_retain();
  v118 = v131;
  swift_retain();
  sub_100554498(type & 1, 0, 0, (uint64_t)v22, v117, v135, v23, v20, v118, a9, a10 & 1, a11, v21);
  swift_release(v22);
  swift_release(v18);

  swift_release(v20);
  v18 = v21;
LABEL_77:
  swift_release(v18);
  swift_release(v17);
  swift_bridgeObjectRelease(v23);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v135).n128_u64[0];
  return result;
}

uint64_t sub_100555EA8(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v1 = objc_msgSend(a1, "identifier");
  v2 = v1;
  if (v1)
  {
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v5 = v4;

    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierAppleAccount);
    if (v6 == v3 && v7 == v5)
    {
      swift_bridgeObjectRelease(v5);
    }
    else
    {
      v9 = v7;
      v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v3, v5, 0);
      swift_bridgeObjectRelease(v9);
      if ((v10 & 1) == 0)
      {
        v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierAol);
        if (v11 == v3 && v12 == v5)
          goto LABEL_14;
        v14 = v12;
        v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v3, v5, 0);
        swift_bridgeObjectRelease(v14);
        if ((v15 & 1) != 0)
          goto LABEL_32;
        v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierCalDAV);
        v18 = v17;
        if (v16 == v3 && v17 == v5)
          goto LABEL_14;
        v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v3, v5, 0);
        swift_bridgeObjectRelease(v18);
        if ((v33 & 1) != 0)
          goto LABEL_32;
        v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierYahoo);
        v36 = v35;
        if (v34 == v3 && v35 == v5)
        {
LABEL_14:
          swift_bridgeObjectRelease_n(v5, 2);
          return 3;
        }
        v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, v3, v5, 0);
        swift_bridgeObjectRelease(v36);
        if ((v37 & 1) != 0)
        {
LABEL_32:
          swift_bridgeObjectRelease(v5);
          return 3;
        }
        v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierExchange);
        v40 = v39;
        if (v38 == v3 && v39 == v5)
        {
LABEL_35:
          swift_bridgeObjectRelease_n(v5, 2);
          return 4;
        }
        v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v39, v3, v5, 0);
        swift_bridgeObjectRelease(v40);
        if ((v41 & 1) == 0)
        {
          v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierHotmail);
          v44 = v43;
          if (v42 == v3 && v43 == v5)
            goto LABEL_35;
          v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v43, v3, v5, 0);
          swift_bridgeObjectRelease(v44);
          if ((v45 & 1) == 0)
          {
            if (qword_100837880 != -1)
              swift_once(&qword_100837880, sub_100547F80);
            v46 = type metadata accessor for Logger(0);
            sub_10001AAA8(v46, (uint64_t)qword_10084F6F8);
            swift_bridgeObjectRetain(v5);
            v48 = Logger.logObject.getter(v47);
            v49 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v48, v49))
            {
              v50 = (uint8_t *)swift_slowAlloc(12, -1);
              v51 = swift_slowAlloc(32, -1);
              v53 = v51;
              *(_DWORD *)v50 = 136315138;
              swift_bridgeObjectRetain(v5);
              v52 = sub_10001A820(v3, v5, &v53);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
              v19 = 3;
              swift_bridgeObjectRelease_n(v5, 3);
              _os_log_impl((void *)&_mh_execute_header, v48, v49, "ACAccount type not allowlisted, assume it's CalDAV {typeIdentifier: %s}", v50, 0xCu);
              swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v51, -1, -1);
              swift_slowDealloc(v50, -1, -1);

              return v19;
            }

            goto LABEL_14;
          }
        }
        swift_bridgeObjectRelease(v5);
        return 4;
      }
    }
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v25 = type metadata accessor for Logger(0);
    sub_10001AAA8(v25, (uint64_t)qword_10084F6F8);
    swift_bridgeObjectRetain(v5);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v53 = v30;
      *(_DWORD *)v29 = 136446210;
      swift_bridgeObjectRetain(v5);
      v52 = sub_10001A820(v3, v5, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
      swift_bridgeObjectRelease_n(v5, 3);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "RDAccountUtils: Unexpected call to remAccountType(from:) with ACAccountTypeIdentifierAppleAccount {AC-identifier: %{public}s}", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {

      v31 = swift_bridgeObjectRelease_n(v5, 2);
    }
    return _auto_REMAccountTypeForPrimaryCloudKit(v31);
  }
  else
  {
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_10001AAA8(v20, (uint64_t)qword_10084F6F8);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Found ACAccount without identifier", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    return 0;
  }
}

id sub_10055647C(void *a1)
{
  NSObject *v2;
  NSObject *v3;
  id result;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  double v15;
  uint64_t v16;
  id v17;
  os_log_type_t v18;
  uint8_t *v19;
  _QWORD *v20;
  id v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;

  v2 = objc_msgSend(a1, "displayAccount");
  if (!v2)
  {
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v16 = type metadata accessor for Logger(0);
    sub_10001AAA8(v16, (uint64_t)qword_10084F6F8);
    v17 = a1;
    v3 = Logger.logObject.getter(v17);
    v18 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v3, v18))
    {

      return 0;
    }
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v19 = 138543362;
    v21 = objc_msgSend(v17, "identifier");
    v22 = v21;
    if (v21)
      v29 = v21;
    else
      v29 = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
    *v20 = v22;

    _os_log_impl((void *)&_mh_execute_header, v3, v18, "nonCloudKitAccountIdentifierEnabledForReminders: Can't get display account from input {input: %{public}@}", v19, 0xCu);
    v28 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v20, 1, v28);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);
LABEL_27:

    return 0;
  }
  v3 = v2;
  result = -[NSObject accountType](v2, "accountType");
  if (!result)
  {
    __break(1u);
    goto LABEL_31;
  }
  v5 = result;
  v6 = objc_msgSend(result, "identifier");

  if (!v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierCalDAV);
    v12 = v23;
    goto LABEL_17;
  }
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierCalDAV);
  v12 = v11;
  if (!v9)
  {
LABEL_17:
    swift_bridgeObjectRelease(v12);
LABEL_18:
    v24 = sub_100552370(v3);
    if (v25)
    {
      v26 = (uint64_t)v24;

      return (id)v26;
    }
    goto LABEL_22;
  }
  if (v7 == v10 && v9 == v11)
  {
    swift_bridgeObjectRelease_n(v9, 2);
    goto LABEL_22;
  }
  v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)&v15 = swift_bridgeObjectRelease(v12).n128_u64[0];
  if ((v14 & 1) == 0)
    goto LABEL_18;
LABEL_22:
  if (!-[NSObject isEnabledForDataclass:](v3, "isEnabledForDataclass:", ACAccountDataclassReminders, v15))
    goto LABEL_27;
  result = -[NSObject identifier](v3, "identifier");
  if (result)
  {
    v27 = result;
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);

    return (id)v26;
  }
LABEL_31:
  __break(1u);
  return result;
}

void sub_1005567B0(NSObject *a1, void *a2, int a3, int a4, char *a5, uint64_t a6, void *a7, uint64_t a8, char a9, uint64_t a10, NSObject *a11)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  id v25;
  void *v26;
  unint64_t v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  NSObject *v45;
  NSObject *v46;
  NSObject *v47;
  int v48;
  uint64_t v49;
  id v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  double v55;
  id v56;
  void *v57;
  id v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  NSObject *v63;
  char v64;
  int v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  NSObject *v70;
  NSObject *v71;
  NSObject *v72;
  uint64_t v73;
  os_log_type_t v74;
  BOOL v75;
  uint64_t v76;
  id v77;
  void *v78;
  uint64_t v79;
  NSObject *v80;
  unint64_t v81;
  double v82;
  id v83;
  void *v84;
  id v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  void *v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  uint64_t v98;
  _BYTE *v99;
  unsigned __int8 v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  id v104;
  void *v105;
  _QWORD *v106;
  char v107;
  char v108;
  char *v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  uint64_t v113;
  _BYTE *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  BOOL v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  NSObject *v126;
  os_log_type_t v127;
  uint8_t *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  NSObject *v133;
  int v134;
  uint8_t *v135;
  uint64_t v136;
  id v137;
  void *v138;
  id v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  void *v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  NSObject *v150;
  os_log_type_t v151;
  uint8_t *v152;
  uint64_t v153;
  NSObject *v154;
  id v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  NSObject *v159;
  NSObject *v160;
  NSObject *v161;
  os_log_type_t v162;
  _BOOL4 v163;
  uint64_t v164;
  _QWORD *v165;
  double v166;
  id v167;
  id v168;
  uint64_t v169;
  uint64_t v170;
  id v171;
  unsigned int v172;
  void *Strong;
  void *v174;
  uint64_t v175;
  NSObject *v176;
  NSObject *v177;
  uint64_t v178;
  uint64_t v179;
  id v180;
  uint64_t v181;
  uint64_t v182;
  id v183;
  id v184;
  void *v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  void *v193;
  id v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  NSObject *v199;
  uint64_t v200;
  NSObject *v201;
  os_log_type_t v202;
  uint8_t *v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  NSObject *v209;
  os_log_type_t v210;
  uint8_t *v211;
  NSObject *v212;
  uint64_t v213;
  uint64_t v214;
  id v215;
  void *v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  NSObject *v224;
  os_log_type_t v225;
  uint8_t *v226;
  uint64_t v227;
  uint8_t *v228;
  uint64_t v229;
  NSObject *v230;
  os_log_type_t v231;
  uint8_t *v232;
  uint64_t v233;
  id v234;
  uint64_t v235;
  char *v236;
  char *v237;
  NSObject *v238;
  os_log_type_t v239;
  _BOOL4 v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  char *v245;
  unsigned __int8 v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  id v254;
  void *v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  double v259;
  char v260;
  _BYTE *v261;
  unsigned __int8 v262;
  uint64_t v263;
  unsigned __int8 v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  _QWORD *v268;
  void *v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  NSObject *v274;
  os_log_type_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  double v280;
  uint64_t v281;
  id v282;
  void *v283;
  uint64_t v284;
  unint64_t v285;
  unint64_t v286;
  char v287;
  unint64_t v288;
  unint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  NSObject *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  NSObject *v296;
  os_log_type_t v297;
  uint8_t *v298;
  uint64_t v299;
  void *v300;
  id v301;
  id v302;
  id v303;
  uint64_t v304;
  NSObject *v305;
  char *v306;
  void *v307;
  uint64_t v308;
  void *v309;
  uint64_t v310;
  NSObject *v311;
  id v312;
  NSObject *v313;
  NSObject *v314;
  NSObject *v315;
  NSObject *v316;
  NSObject *v317;
  NSObject *v318;
  NSObject *v319;
  NSObject *v320;
  NSObject *v321;
  uint64_t v322;
  uint64_t v323;
  _BYTE *v324;
  uint64_t v325;
  NSObject *v326;
  int v327;
  uint64_t v328;
  char *v329;
  char *v330;
  void *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  NSObject *v338;
  uint64_t v339;
  NSObject *v340;
  char *v341;
  unint64_t v342;
  char *v343;
  uint64_t v344;
  __int128 aBlock;
  __int128 v346;
  uint64_t (*v347)();
  uint64_t v348;
  __int128 v349;
  __int128 v350;

  v330 = a5;
  v327 = a4;
  LODWORD(v328) = a3;
  v331 = a2;
  v341 = (char *)type metadata accessor for Logger(0);
  v339 = *((_QWORD *)v341 - 1);
  v15 = __chkstk_darwin(v341);
  v17 = (char *)&v323 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v329 = (char *)&v323 - v19;
  __chkstk_darwin(v18);
  v21 = (char *)&v323 - v20;
  v22 = swift_allocObject(&unk_1007FA738, 64, 7);
  *(_QWORD *)(v22 + 16) = a6;
  *(_QWORD *)(v22 + 24) = a7;
  *(_QWORD *)(v22 + 32) = a8;
  v335 = a9 & 1;
  *(_BYTE *)(v22 + 40) = v335;
  *(_QWORD *)(v22 + 48) = a10;
  *(_QWORD *)(v22 + 56) = a11;
  v337 = a6;
  swift_retain_n(a6, 3);
  v23 = a7;
  swift_retain_n(a11, 3);
  v338 = v23;
  v24 = -[NSObject displayAccount](a1, "displayAccount");
  if (!v24)
    v24 = a1;
  v25 = -[NSObject identifier](v24, "identifier");
  if (!v25)
  {
    swift_release_n(a11, 3);
    v313 = v338;

    swift_release_n(v337, 3);
    __break(1u);
LABEL_168:
    swift_release_n(a11, 3);
    v314 = v338;

    swift_release_n(v337, 3);
    __break(1u);
  }
  v26 = v25;
  v332 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v342 = v27;

  v28 = -[NSObject accountType](v24, "accountType");
  if (!v28)
    goto LABEL_168;
  v29 = v28;
  v333 = a10;
  v334 = a8;
  v336 = v22;
  v340 = a11;
  v30 = objc_msgSend(v28, "identifier");

  if (!v30)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierAppleAccount);
    v36 = v38;
LABEL_12:
    v37 = v342;
    if ((-[NSObject isEnabledForDataclass:](v24, "isEnabledForDataclass:", ACAccountDataclassReminders, swift_bridgeObjectRelease(v36).n128_f64[0]) & 1) == 0)goto LABEL_24;
    goto LABEL_13;
  }
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v33 = v32;

  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierAppleAccount);
  v36 = v35;
  if (!v33)
    goto LABEL_12;
  v37 = v342;
  if (v31 == v34 && v33 == v35)
  {
    if ((-[NSObject isEnabledForDataclass:](v24, "isEnabledForDataclass:", ACAccountDataclassReminders, swift_bridgeObjectRelease_n(v33, 2).n128_f64[0]) & 1) == 0)
    {
LABEL_24:
      if (qword_100837880 != -1)
        swift_once(&qword_100837880, sub_100547F80);
      v66 = v341;
      v67 = sub_10001AAA8((uint64_t)v341, (uint64_t)qword_10084F6F8);
      v68 = v339;
      (*(void (**)(char *, uint64_t, char *))(v339 + 16))(v21, v67, v66);
      v69 = a1;
      v70 = v24;
      v71 = v69;
      v72 = v70;
      swift_bridgeObjectRetain(v37);
      a1 = Logger.logObject.getter(v73);
      v74 = static os_log_type_t.error.getter();
      v75 = os_log_type_enabled(a1, v74);
      v46 = v340;
      if (!v75)
      {

        swift_bridgeObjectRelease_n(v37, 2);
        (*(void (**)(char *, char *))(v68 + 8))(v21, v66);
        goto LABEL_32;
      }
      v76 = swift_slowAlloc(32, -1);
      v331 = (void *)swift_slowAlloc(96, -1);
      *(_QWORD *)&aBlock = v331;
      *(_DWORD *)v76 = 136446722;
      v77 = -[NSObject identifier](v71, "identifier");
      if (v77)
      {
        v78 = v77;
        v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
        v46 = v80;

        *(_QWORD *)&v349 = sub_10001A820(v79, (unint64_t)v46, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v349, (char *)&v349 + 8);

        swift_bridgeObjectRelease(v46);
        *(_WORD *)(v76 + 12) = 2082;
        v81 = v342;
        swift_bridgeObjectRetain(v342);
        *(_QWORD *)&v349 = sub_10001A820(v332, v81, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v349, (char *)&v349 + 8);
        *(_QWORD *)&v82 = swift_bridgeObjectRelease_n(v81, 3).n128_u64[0];
        *(_WORD *)(v76 + 22) = 2082;
        v83 = -[NSObject accountType](v72, "accountType", v82);
        if (v83)
        {
          v84 = v83;
          v85 = objc_msgSend(v83, "identifier");

          v46 = v340;
          if (v85)
          {
            v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
            v88 = v87;

            *(_QWORD *)&v349 = sub_10001A820(v86, v88, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v349, (char *)&v349 + 8);

            swift_bridgeObjectRelease(v88);
            _os_log_impl((void *)&_mh_execute_header, a1, v74, "UpdateAccountWithACAccount: ACAccount type is not supported or reminders dataclass is not enabled {accountID: %{public}s, displayAccountID: %{public}s, accountType: %{public}s}", (uint8_t *)v76, 0x20u);
            v89 = v331;
            swift_arrayDestroy(v331, 3, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v89, -1, -1);
            swift_slowDealloc(v76, -1, -1);

            (*(void (**)(char *, char *))(v339 + 8))(v21, v341);
LABEL_32:
            v63 = v338;
            v90 = v335 != 0;
            v91 = swift_allocObject(&unk_1007FA760, 72, 7);
            v92 = v337;
            v93 = v334;
            *(_QWORD *)(v91 + 16) = v337;
            *(_QWORD *)(v91 + 24) = v93;
            *(_BYTE *)(v91 + 32) = v90;
            *(_QWORD *)(v91 + 40) = v333;
            *(_QWORD *)(v91 + 48) = v46;
            *(_WORD *)(v91 + 56) = 0;
            *(_QWORD *)(v91 + 64) = 0;
            swift_retain();
            swift_retain();
            sub_10054C754(v63, (uint64_t)sub_1005681C0, v91);
            swift_release(v46);

            swift_release_n(v92, 2);
            swift_release(v336);

            swift_release(v91);
LABEL_158:
            swift_release(v46);

            return;
          }
          goto LABEL_171;
        }
      }
      else
      {

        swift_bridgeObjectRelease(v342);
        swift_release_n(v340, 3);
        v72 = v338;

        swift_release_n(v337, 3);
        __break(1u);
      }

      swift_release_n(v340, 3);
      v72 = v338;

      swift_release_n(v337, 3);
      __break(1u);
LABEL_171:

      swift_release_n(v46, 3);
      v315 = v338;

      swift_release_n(v337, 3);
      __break(1u);
      goto LABEL_172;
    }
LABEL_23:
    v65 = 1;
    goto LABEL_34;
  }
  v64 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v33, v34, v35, 0);
  swift_bridgeObjectRelease(v33);
  if ((-[NSObject isEnabledForDataclass:](v24, "isEnabledForDataclass:", ACAccountDataclassReminders, swift_bridgeObjectRelease(v36).n128_f64[0]) & 1) == 0)goto LABEL_24;
  if ((v64 & 1) != 0)
    goto LABEL_23;
LABEL_13:
  v39 = -[NSObject accountPropertyForKey:](a1, "accountPropertyForKey:", REMDA_kCalDAVMobileAccountDelegatePrincipalPath);
  if (v39)
  {
    v40 = v39;
    _bridgeAnyObjectToAny(_:)(&aBlock, v39);
    swift_bridgeObjectRelease(v37);
    swift_unknownObjectRelease(v40);
    sub_10000882C((uint64_t)&aBlock, (uint64_t *)&unk_10083D5B0);
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v41 = v341;
    v42 = sub_10001AAA8((uint64_t)v341, (uint64_t)qword_10084F6F8);
    v43 = v339;
    (*(void (**)(char *, uint64_t, char *))(v339 + 16))(v17, v42, v41);
    v44 = a1;
    v45 = v24;
    v46 = v44;
    a1 = v45;
    v47 = Logger.logObject.getter(a1);
    v48 = static os_log_type_t.default.getter(v47);
    if (os_log_type_enabled(v47, (os_log_type_t)v48))
    {
      LODWORD(v342) = v48;
      v49 = swift_slowAlloc(22, -1);
      v332 = swift_slowAlloc(64, -1);
      *(_QWORD *)&aBlock = v332;
      *(_DWORD *)v49 = 136446466;
      v50 = -[NSObject identifier](v46, "identifier");
      if (!v50)
      {
LABEL_173:

        swift_release_n(v340, 3);
        v317 = v338;

        swift_release_n(v337, 3);
        __break(1u);
        goto LABEL_174;
      }
      v51 = v50;
      v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
      v54 = v53;

      *(_QWORD *)&v349 = sub_10001A820(v52, v54, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v349, (char *)&v349 + 8);

      *(_QWORD *)&v55 = swift_bridgeObjectRelease(v54).n128_u64[0];
      *(_WORD *)(v49 + 12) = 2082;
      v56 = -[NSObject accountType](a1, "accountType", v55);
      if (!v56)
      {
LABEL_174:

        swift_release_n(v340, 3);
        v318 = v338;

        swift_release_n(v337, 3);
        __break(1u);
        goto LABEL_175;
      }
      v57 = v56;
      v58 = objc_msgSend(v56, "identifier");

      v46 = v340;
      if (!v58)
      {
LABEL_175:

        swift_release_n(v46, 3);
        v319 = v338;

        swift_release_n(v337, 3);
        __break(1u);
        goto LABEL_176;
      }
      v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
      v61 = v60;

      *(_QWORD *)&v349 = sub_10001A820(v59, v61, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v349, (char *)&v349 + 8);

      swift_bridgeObjectRelease(v61);
      _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v342, "UpdateAccountWithACAccount: Skip handling CalDAV delegate account {accountID: %{public}s, displayAccountType: %{public}s}", (uint8_t *)v49, 0x16u);
      v62 = v332;
      swift_arrayDestroy(v332, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1, -1);
      swift_slowDealloc(v49, -1, -1);

      (*(void (**)(char *, char *))(v339 + 8))(v17, v41);
      v63 = v338;
    }
    else
    {

      (*(void (**)(char *, char *))(v43 + 8))(v17, v41);
      v63 = v338;
      v46 = v340;
    }
    v121 = v335 != 0;
    v122 = swift_allocObject(&unk_1007FA7D8, 72, 7);
    v123 = v337;
    v124 = v334;
    *(_QWORD *)(v122 + 16) = v337;
    *(_QWORD *)(v122 + 24) = v124;
    *(_BYTE *)(v122 + 32) = v121;
    *(_QWORD *)(v122 + 40) = v333;
    *(_QWORD *)(v122 + 48) = v46;
    *(_WORD *)(v122 + 56) = 0;
    *(_QWORD *)(v122 + 64) = 0;
    swift_retain();
    swift_retain();
    sub_10054C754(v63, (uint64_t)sub_1005681C0, v122);
    swift_release(v46);

    swift_release_n(v123, 2);
    swift_release(v336);

    swift_release(v122);
    goto LABEL_158;
  }
  aBlock = 0u;
  v346 = 0u;
  sub_10000882C((uint64_t)&aBlock, (uint64_t *)&unk_10083D5B0);
  v65 = 0;
LABEL_34:
  if (qword_100837880 != -1)
    swift_once(&qword_100837880, sub_100547F80);
  v94 = sub_10001AAA8((uint64_t)v341, (uint64_t)qword_10084F6F8);
  v95 = swift_bridgeObjectRetain_n(v37, 2);
  v325 = v94;
  v96 = Logger.logObject.getter(v95);
  v97 = static os_log_type_t.default.getter(v96);
  if (os_log_type_enabled(v96, v97))
  {
    a1 = swift_slowAlloc(12, -1);
    v98 = swift_slowAlloc(32, -1);
    *(_QWORD *)&aBlock = v98;
    LODWORD(a1->isa) = 136446210;
    swift_bridgeObjectRetain(v342);
    *(_QWORD *)&v349 = sub_10001A820(v332, v342, (uint64_t *)&aBlock);
    v37 = v342;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v349, (char *)&v349 + 8);
    swift_bridgeObjectRelease_n(v37, 3);
    _os_log_impl((void *)&_mh_execute_header, v96, v97, "UpdateAccountWithACAccount: Try to update account object {accountID: %{public}s}", (uint8_t *)a1, 0xCu);
    swift_arrayDestroy(v98, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v98, -1, -1);
    swift_slowDealloc(a1, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v37, 2);
  }
  v46 = v340;
  v99 = (_BYTE *)swift_allocObject(&unk_1007FA120, 17, 7);
  v99[16] = 0;
  v100 = -[NSObject rem_isEligibleForCloudKitReminders](v24, "rem_isEligibleForCloudKitReminders");
  v326 = v24;
  if (v65)
  {
    if ((v100 & 1) == 0)
    {
      v125 = swift_bridgeObjectRetain_n(v37, 2);
      v126 = Logger.logObject.getter(v125);
      v127 = static os_log_type_t.default.getter(v126);
      if (os_log_type_enabled(v126, v127))
      {
        v128 = (uint8_t *)swift_slowAlloc(12, -1);
        v129 = swift_slowAlloc(32, -1);
        *(_QWORD *)&aBlock = v129;
        *(_DWORD *)v128 = 136446210;
        swift_bridgeObjectRetain(v342);
        *(_QWORD *)&v349 = sub_10001A820(v332, v342, (uint64_t *)&aBlock);
        v37 = v342;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v349, (char *)&v349 + 8);
        swift_bridgeObjectRelease_n(v37, 3);
        _os_log_impl((void *)&_mh_execute_header, v126, v127, "UpdateAccountWithACAccount: Got an Apple ID, not eligible for CloudKit reminders. Will only process iCloud CalDAV account for it {accountID: %{public}s}", v128, 0xCu);
        swift_arrayDestroy(v129, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v129, -1, -1);
        swift_slowDealloc(v128, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v37, 2);
      }
      v63 = v338;
      v145 = sub_100552370(v326);
      if (v146)
      {
        v147 = (uint64_t)v145;
        v148 = v146;
        v149 = swift_bridgeObjectRetain_n(v146, 2);
        v150 = Logger.logObject.getter(v149);
        v151 = static os_log_type_t.default.getter(v150);
        if (os_log_type_enabled(v150, v151))
        {
          v152 = (uint8_t *)swift_slowAlloc(12, -1);
          v153 = swift_slowAlloc(32, -1);
          *(_QWORD *)&aBlock = v153;
          *(_DWORD *)v152 = 136446210;
          swift_bridgeObjectRetain(v148);
          *(_QWORD *)&v349 = sub_10001A820(v147, v148, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v349, (char *)&v349 + 8);
          swift_bridgeObjectRelease_n(v148, 3);
          _os_log_impl((void *)&_mh_execute_header, v150, v151, "UpdateAccountWithACAccount: AppleAccount {accountID: %{public}s} is ineligible for CloudKit Reminders, will process it as iCloud CalDAV", v152, 0xCu);
          swift_arrayDestroy(v153, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v153, -1, -1);
          swift_slowDealloc(v152, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v148, 2);
        }
        v184 = objc_msgSend((id)objc_opt_self(REMAppleAccountUtilities), "accountDescriptionWithACAccount:", v326);
        if (v184)
        {
          v185 = v184;
          v186 = static String._unconditionallyBridgeFromObjectiveC(_:)(v184);
          v188 = v187;

        }
        else
        {
          v186 = 0x64756F6C4369;
          v188 = 0xE600000000000000;
        }
        v144 = sub_1002CAB38(0, 1, 1, _swiftEmptyArrayStorage);
        v206 = v144[2];
        v205 = v144[3];
        if (v206 >= v205 >> 1)
          v144 = sub_1002CAB38((_QWORD *)(v205 > 1), v206 + 1, 1, v144);
        v144[2] = v206 + 1;
        v207 = &v144[6 * v206];
        v207[4] = v147;
        v207[5] = v148;
        v207[6] = v186;
        v207[7] = v188;
        v207[8] = 3;
        *((_DWORD *)v207 + 18) = 33685505;
        *((_BYTE *)v207 + 76) = 2;
        v63 = v338;
        v37 = v342;
      }
      else
      {
        v144 = _swiftEmptyArrayStorage;
      }
      goto LABEL_156;
    }
    *(_QWORD *)&v349 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMACAccountPropertyDidChooseToMigrate);
    *((_QWORD *)&v349 + 1) = v101;
    v102 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v349, &type metadata for String);
    v103 = -[NSObject objectForKeyedSubscript:](v24, "objectForKeyedSubscript:", v102);
    swift_unknownObjectRelease(v102);
    if (v103)
    {
      _bridgeAnyObjectToAny(_:)(&v349, v103);
      swift_unknownObjectRelease(v103);
    }
    else
    {
      v349 = 0u;
      v350 = 0u;
    }
    v63 = v338;
    sub_10001A5E8((uint64_t)&v349, (uint64_t)&aBlock);
    if (*((_QWORD *)&v346 + 1))
    {
      v169 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
      if ((swift_dynamicCast(&v343, &aBlock, (char *)&type metadata for Any + 8, v169, 6) & 1) != 0)
      {
        v171 = v343;
        v172 = objc_msgSend(v343, "BOOLValue");

        goto LABEL_78;
      }
    }
    else
    {
      sub_10000882C((uint64_t)&aBlock, (uint64_t *)&unk_10083D5B0);
    }
    if (v328 == 2)
    {
      Strong = (void *)swift_unknownObjectWeakLoadStrong(v330 + 32, v170);
      if (Strong)
      {
        v174 = Strong;
        if (objc_msgSend(Strong, "hasPassedBuddyAndSystemDataMigrator"))
        {

          if ((v327 & 1) != 0)
          {
            v175 = v337;
            swift_retain();
            v176 = v63;
            swift_retain();
            v177 = v326;
            swift_bridgeObjectRetain(v37);
            v178 = v336;
            swift_retain();
            v179 = (uint64_t)v330;
            swift_retain();
            v180 = v331;
            LOBYTE(v322) = v335;
            sub_1005481FC((uint64_t)v177, v179, v332, v37, v179, (uint64_t)v177, (uint64_t)v180, 1, v175, v176, v334, v322, v333, (uint64_t)v46, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100559290);
            swift_release(v46);

            swift_release_n(v175, 2);
            swift_release(v99);
            swift_release_n(v178, 2);

            swift_bridgeObjectRelease(v37);
            goto LABEL_158;
          }
        }
        else
        {
          v223 = swift_bridgeObjectRetain_n(v37, 2);
          v224 = Logger.logObject.getter(v223);
          v225 = static os_log_type_t.default.getter(v224);
          if (os_log_type_enabled(v224, v225))
          {
            v226 = (uint8_t *)swift_slowAlloc(12, -1);
            v227 = swift_slowAlloc(32, -1);
            *(_QWORD *)&aBlock = v227;
            *(_DWORD *)v226 = 136446210;
            swift_bridgeObjectRetain(v342);
            *(_QWORD *)&v349 = sub_10001A820(v332, v342, (uint64_t *)&aBlock);
            v37 = v342;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v349, (char *)&v349 + 8);
            swift_bridgeObjectRelease_n(v37, 3);
            _os_log_impl((void *)&_mh_execute_header, v224, v225, "UpdateAccountWithACAccount: hasPassedBuddyAndSystemDataMigrator != true, setting shouldFetchMigrationState to false {accountID: %{public}s}", v226, 0xCu);
            swift_arrayDestroy(v227, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v227, -1, -1);
            v228 = v226;
            v63 = v338;
            swift_slowDealloc(v228, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v37, 2);
          }
        }
      }
      v324 = v99;
      swift_bridgeObjectRetain(v37);
      v296 = Logger.logObject.getter(v295);
      v297 = static os_log_type_t.default.getter(v296);
      if (os_log_type_enabled(v296, v297))
      {
        v298 = (uint8_t *)swift_slowAlloc(12, -1);
        v299 = swift_slowAlloc(32, -1);
        *(_QWORD *)&aBlock = v299;
        *(_DWORD *)v298 = 136446210;
        swift_bridgeObjectRetain(v37);
        *(_QWORD *)&v349 = sub_10001A820(v332, v37, (uint64_t *)&aBlock);
        v63 = v338;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v349, (char *)&v349 + 8);
        swift_bridgeObjectRelease_n(v37, 3);
        _os_log_impl((void *)&_mh_execute_header, v296, v297, "UpdateAccountWithACAccount: Will not fetch migration state {accountID: %{public}s}", v298, 0xCu);
        swift_arrayDestroy(v299, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v299, -1, -1);
        swift_slowDealloc(v298, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v37, 2);
      }
      v300 = (void *)objc_opt_self(REMAppleAccountUtilities);
      v301 = objc_msgSend(v300, "sharedInstance");
      v302 = objc_msgSend(v301, "accountStore");

      v303 = objc_msgSend(v300, "sharedInstance");
      v304 = swift_allocObject(&unk_1007FA788, 64, 7);
      v305 = v326;
      v306 = v330;
      *(_QWORD *)(v304 + 16) = v326;
      *(_QWORD *)(v304 + 24) = v306;
      v307 = v331;
      *(_QWORD *)(v304 + 32) = v331;
      *(_BYTE *)(v304 + 40) = v327 & 1;
      v308 = v336;
      *(_QWORD *)(v304 + 48) = sub_1005681B0;
      *(_QWORD *)(v304 + 56) = v308;
      v347 = sub_100565338;
      v348 = v304;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      *(_QWORD *)&v346 = sub_1001BCC34;
      *((_QWORD *)&v346 + 1) = &unk_1007FA7A0;
      v309 = _Block_copy(&aBlock);
      v310 = v348;
      v311 = v305;
      swift_retain();
      swift_retain();
      v312 = v307;
      swift_release(v310);
      objc_msgSend(v303, "saveDidChooseToMigrate:didFinishMigration:toACAccount:inStore:completionHandler:", 0, 0, v311, v302, v309);

      _Block_release(v309);
      swift_release(v46);

      swift_release_n(v337, 2);
      swift_release(v308);
      swift_release(v324);

      goto LABEL_158;
    }
    v172 = v328 & 1;
LABEL_78:
    *(_QWORD *)&aBlock = static String._unconditionallyBridgeFromObjectiveC(_:)(REMACAccountPropertyDidFinishMigration);
    *((_QWORD *)&aBlock + 1) = v181;
    v182 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&aBlock, &type metadata for String);
    v183 = -[NSObject objectForKeyedSubscript:](v326, "objectForKeyedSubscript:", v182);
    swift_unknownObjectRelease(v182);
    if (v183)
    {
      _bridgeAnyObjectToAny(_:)(&v349, v183);
      swift_unknownObjectRelease(v183);
    }
    else
    {
      v349 = 0u;
      v350 = 0u;
    }
    sub_10001A5E8((uint64_t)&v349, (uint64_t)&aBlock);
    if (*((_QWORD *)&v346 + 1))
    {
      v189 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
      if (swift_dynamicCast(&v343, &aBlock, (char *)&type metadata for Any + 8, v189, 6))
        v191 = v343;
      else
        v191 = 0;
      HIBYTE(v344) = 0;
      if (v172)
        goto LABEL_90;
    }
    else
    {
      sub_10000882C((uint64_t)&aBlock, (uint64_t *)&unk_10083D5B0);
      v191 = 0;
      HIBYTE(v344) = 0;
      if (v172)
      {
LABEL_90:
        v192 = swift_unknownObjectWeakLoadStrong(v330 + 32, v190);
        if (!v192)
        {
          swift_bridgeObjectRelease(v37);
          v209 = Logger.logObject.getter(v208);
          v210 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v209, v210))
          {
            v211 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v211 = 0;
            _os_log_impl((void *)&_mh_execute_header, v209, v210, "Store controller missing for checking whether migration has failed", v211, 2u);
            swift_slowDealloc(v211, -1, -1);
            v212 = v326;
          }
          else
          {
            v212 = v209;
            v209 = v326;
          }
          swift_release(v336);
          swift_release(v99);

          swift_release(v46);
          v294 = v337;
          goto LABEL_157;
        }
        v193 = (void *)v192;
        v194 = sub_1005520BC(v332, v37);
        if (!v194)
        {
          swift_bridgeObjectRetain(v37);
          v230 = Logger.logObject.getter(v229);
          v231 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v230, v231))
          {
            v324 = v99;
            v232 = (uint8_t *)swift_slowAlloc(12, -1);
            v233 = swift_slowAlloc(32, -1);
            *(_QWORD *)&aBlock = v233;
            *(_DWORD *)v232 = 136315138;
            swift_bridgeObjectRetain(v37);
            *(_QWORD *)&v349 = sub_10001A820(v332, v37, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v349, (char *)&v349 + 8);
            swift_bridgeObjectRelease_n(v37, 3);
            _os_log_impl((void *)&_mh_execute_header, v230, v231, "Display ACAccount ID is not an UUID {displayACAccountID: %s}", v232, 0xCu);
            swift_arrayDestroy(v233, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v233, -1, -1);
            swift_slowDealloc(v232, -1, -1);
            swift_release(v46);
            v63 = v338;

            swift_release_n(v337, 2);
            swift_release(v336);
            swift_release(v324);

          }
          else
          {
            swift_release(v46);
            v63 = v338;

            swift_release_n(v337, 2);
            swift_release(v336);
            swift_release(v99);

            swift_bridgeObjectRelease_n(v37, 2);
          }

          goto LABEL_158;
        }
        v195 = v194;
        sub_10027A4DC(v194, v193);
        v197 = v196;

        v198 = *(unsigned __int8 *)(v197 + 88);
        swift_release(v197);
        HIBYTE(v344) = v198 ^ 1;
        goto LABEL_95;
      }
    }
    v198 = 1;
LABEL_95:
    v199 = v326;
    if (v191 && ((v198 | objc_msgSend(v191, "BOOLValue") ^ 1) & 1) == 0)
    {
      v99[16] = 1;
      v200 = swift_bridgeObjectRetain_n(v37, 2);
      v201 = Logger.logObject.getter(v200);
      v202 = static os_log_type_t.default.getter(v201);
      if (os_log_type_enabled(v201, v202))
      {
        v203 = (uint8_t *)swift_slowAlloc(12, -1);
        v204 = swift_slowAlloc(32, -1);
        *(_QWORD *)&aBlock = v204;
        *(_DWORD *)v203 = 136446210;
        swift_bridgeObjectRetain(v342);
        *(_QWORD *)&v349 = sub_10001A820(v332, v342, (uint64_t *)&aBlock);
        v37 = v342;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v349, (char *)&v349 + 8);
        swift_bridgeObjectRelease_n(v37, 3);
        _os_log_impl((void *)&_mh_execute_header, v201, v202, "UpdateAccountWithACAccount: setting shouldMigrateInactivatedICloudCalDavData to true {displayAccountID: %{public}s}", v203, 0xCu);
        swift_arrayDestroy(v204, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v204, -1, -1);
        swift_slowDealloc(v203, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v37, 2);
      }
      v199 = v326;
    }
    v234 = -[NSObject aa_isAccountClass:](v199, "aa_isAccountClass:", AAAccountClassPrimary);
    if ((_DWORD)v234)
      v235 = _auto_REMAccountTypeForPrimaryCloudKit(v234);
    else
      v235 = 6;
    LODWORD(v330) = HIBYTE(v344);
    v236 = v191;
    swift_bridgeObjectRetain_n(v37, 2);
    v237 = v236;
    v238 = Logger.logObject.getter(v237);
    v239 = static os_log_type_t.default.getter(v238);
    v240 = os_log_type_enabled(v238, v239);
    LODWORD(v339) = v172;
    v329 = v191;
    v341 = v237;
    if (v240)
    {
      v324 = v99;
      v241 = swift_slowAlloc(44, -1);
      v328 = swift_slowAlloc(96, -1);
      *(_QWORD *)&aBlock = v328;
      *(_DWORD *)v241 = 136447234;
      swift_bridgeObjectRetain(v37);
      *(_QWORD *)&v349 = sub_10001A820(v332, v37, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v349, (char *)&v349 + 8);
      swift_bridgeObjectRelease_n(v37, 3);
      *(_WORD *)(v241 + 12) = 2082;
      v242 = REMAccountType.loggableDescription.getter(v235);
      v244 = v243;
      *(_QWORD *)&v349 = sub_10001A820(v242, v243, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v349, (char *)&v349 + 8);
      swift_bridgeObjectRelease(v244);
      *(_WORD *)(v241 + 22) = 1024;
      LODWORD(v349) = v172;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v349, (char *)&v349 + 4);
      *(_WORD *)(v241 + 28) = 1024;
      LODWORD(v349) = (_DWORD)v330;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v349, (char *)&v349 + 4);
      *(_WORD *)(v241 + 34) = 2082;
      if (v191)
      {
        v245 = v341;
        v246 = objc_msgSend(v341, "BOOLValue");
      }
      else
      {
        v246 = 2;
        v245 = v341;
      }
      LOBYTE(v349) = v246;
      v247 = sub_10001A630((uint64_t *)&unk_10084DBC0);
      v248 = String.init<A>(describing:)(&v349, v247);
      v250 = v249;
      *(_QWORD *)&v349 = sub_10001A820(v248, v249, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v349, (char *)&v349 + 8);

      swift_bridgeObjectRelease(v250);
      _os_log_impl((void *)&_mh_execute_header, v238, v239, "UpdateAccountWithACAccount: Will process CloudKit account {accountID: %{public}s, type: %{public}s, didChooseToMigrate: %{BOOL}d, shouldShowCloudKitAccount: %{BOOL}d, didFinishMigration: %{public}s}", (uint8_t *)v241, 0x2Cu);
      v251 = v328;
      swift_arrayDestroy(v328, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v251, -1, -1);
      swift_slowDealloc(v241, -1, -1);

      v199 = v326;
      v37 = v342;
      v99 = v324;
      v237 = v245;
    }
    else
    {

      swift_bridgeObjectRelease_n(v37, 2);
    }
    v252 = v235;
    v253 = (char *)objc_opt_self(REMAppleAccountUtilities);
    v254 = objc_msgSend(v253, "accountDescriptionWithACAccount:", v199);
    if (v254)
    {
      v255 = v254;
      v256 = static String._unconditionallyBridgeFromObjectiveC(_:)(v254);
      v258 = v257;

    }
    else
    {
      v256 = 0;
      v258 = 0;
    }
    v330 = v253;
    *(_QWORD *)&v259 = swift_beginAccess((char *)&v344 + 7, &aBlock, 0, 0).n128_u64[0];
    v260 = HIBYTE(v344);
    v261 = v99;
    if (v329)
      v262 = objc_msgSend(v237, "BOOLValue", v259);
    else
      v262 = 2;
    v263 = 0x64756F6C4369;
    v264 = -[NSObject aa_isAccountClass:](v199, "aa_isAccountClass:", AAAccountClassBasic);
    if (v258)
    {
      v263 = v256;
      v265 = v258;
    }
    else
    {
      v265 = 0xE600000000000000;
    }
    swift_bridgeObjectRetain(v37);
    v144 = sub_1002CAB38(0, 1, 1, _swiftEmptyArrayStorage);
    v267 = v144[2];
    v266 = v144[3];
    if (v267 >= v266 >> 1)
      v144 = sub_1002CAB38((_QWORD *)(v266 > 1), v267 + 1, 1, v144);
    v144[2] = v267 + 1;
    v268 = &v144[6 * v267];
    v37 = v342;
    v268[4] = v332;
    v268[5] = v37;
    v268[6] = v263;
    v268[7] = v265;
    v268[8] = v252;
    *((_BYTE *)v268 + 72) = v260;
    *((_BYTE *)v268 + 73) = 0;
    *((_BYTE *)v268 + 74) = v339;
    *((_BYTE *)v268 + 75) = v262;
    *((_BYTE *)v268 + 76) = v264;
    v269 = sub_100552370(v326);
    if (v270)
    {
      v271 = (uint64_t)v269;
      v272 = v270;
      v273 = swift_bridgeObjectRetain_n(v270, 2);
      v274 = Logger.logObject.getter(v273);
      v275 = static os_log_type_t.default.getter(v274);
      v99 = v261;
      if (os_log_type_enabled(v274, v275))
      {
        v276 = v271;
        v277 = swift_slowAlloc(18, -1);
        v278 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v349 = v278;
        *(_DWORD *)v277 = 136446466;
        swift_bridgeObjectRetain(v272);
        v343 = (char *)sub_10001A820(v276, v272, (uint64_t *)&v349);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v343, &v344);
        swift_bridgeObjectRelease_n(v272, 3);
        *(_WORD *)(v277 + 12) = 1024;
        LODWORD(v343) = v339;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v343, (char *)&v343 + 4);
        _os_log_impl((void *)&_mh_execute_header, v274, v275, "UpdateAccountWithACAccount: Will process iCloud CalDAV account {accountID: %{public}s, didChooseToMigrate: %{BOOL}d}", (uint8_t *)v277, 0x12u);
        swift_arrayDestroy(v278, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v278, -1, -1);
        v279 = v277;
        v271 = v276;
        swift_slowDealloc(v279, -1, -1);

      }
      else
      {

        *(_QWORD *)&v280 = swift_bridgeObjectRelease_n(v272, 2).n128_u64[0];
      }
      v281 = 0x64756F6C4369;
      v282 = objc_msgSend(v330, "accountDescriptionWithACAccount:", v326, v280);
      if (v282)
      {
        v283 = v282;
        v284 = static String._unconditionallyBridgeFromObjectiveC(_:)(v282);
        v286 = v285;

      }
      else
      {
        v284 = 0;
        v286 = 0;
      }
      v46 = v340;
      v287 = HIBYTE(v344) ^ 1;
      if (v286)
        v281 = v284;
      else
        v286 = 0xE600000000000000;
      v289 = v144[2];
      v288 = v144[3];
      if (v289 >= v288 >> 1)
        v144 = sub_1002CAB38((_QWORD *)(v288 > 1), v289 + 1, 1, v144);
      v144[2] = v289 + 1;
      v290 = &v144[6 * v289];
      v290[4] = v271;
      v290[5] = v272;
      v290[6] = v281;
      v290[7] = v286;
      v290[8] = 3;
      *((_BYTE *)v290 + 72) = v287 & 1;
      *(_DWORD *)((char *)v290 + 73) = 33686016;
      v37 = v342;
    }
    else
    {
      v46 = v340;
      v99 = v261;
    }

    goto LABEL_155;
  }
  v104 = -[NSObject accountType](v24, "accountType");
  if (!v104)
  {
LABEL_172:
    swift_release_n(v46, 3);
    v316 = v338;

    swift_release_n(v337, 3);
    __break(1u);
    goto LABEL_173;
  }
  v105 = v104;
  v106 = (_QWORD *)sub_100555EA8(v104);
  v108 = v107;

  v109 = v341;
  if ((v108 & 1) == 0)
  {
    v110 = swift_bridgeObjectRetain_n(v37, 2);
    v111 = Logger.logObject.getter(v110);
    v112 = static os_log_type_t.default.getter(v111);
    if (os_log_type_enabled(v111, v112))
    {
      v113 = swift_slowAlloc(22, -1);
      v114 = v99;
      v115 = v106;
      v116 = swift_slowAlloc(64, -1);
      *(_QWORD *)&aBlock = v116;
      *(_DWORD *)v113 = 136446466;
      swift_bridgeObjectRetain(v37);
      *(_QWORD *)&v349 = sub_10001A820(v332, v37, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v349, (char *)&v349 + 8);
      swift_bridgeObjectRelease_n(v342, 3);
      *(_WORD *)(v113 + 12) = 2082;
      v117 = REMAccountType.loggableDescription.getter(v115);
      v119 = v118;
      *(_QWORD *)&v349 = sub_10001A820(v117, v118, (uint64_t *)&aBlock);
      v37 = v342;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v349, (char *)&v349 + 8);
      swift_bridgeObjectRelease(v119);
      _os_log_impl((void *)&_mh_execute_header, v111, v112, "UpdateAccountWithACAccount: Will process non-Apple account {displayAccountID: %{public}s, accountType: %{public}s}", (uint8_t *)v113, 0x16u);
      swift_arrayDestroy(v116, 2, (char *)&type metadata for Any + 8);
      v120 = v116;
      v106 = v115;
      v99 = v114;
      swift_slowDealloc(v120, -1, -1);
      swift_slowDealloc(v113, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v37, 2);
    }
    v154 = v326;
    v155 = sub_10055647C(v326);
    if (v156)
    {
      v157 = (uint64_t)v155;
      v158 = v156;
      v159 = v154;
      swift_bridgeObjectRetain_n(v158, 2);
      v160 = v159;
      v161 = Logger.logObject.getter(v160);
      v162 = static os_log_type_t.default.getter(v161);
      v163 = os_log_type_enabled(v161, v162);
      v342 = v157;
      if (v163)
      {
        v324 = v99;
        v341 = (char *)v106;
        v164 = swift_slowAlloc(22, -1);
        v165 = (_QWORD *)swift_slowAlloc(8, -1);
        v339 = swift_slowAlloc(32, -1);
        *(_QWORD *)&aBlock = v339;
        *(_DWORD *)v164 = 136446466;
        swift_bridgeObjectRetain(v158);
        *(_QWORD *)&v349 = sub_10001A820(v157, v158, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v349, (char *)&v349 + 8);
        *(_QWORD *)&v166 = swift_bridgeObjectRelease_n(v158, 3).n128_u64[0];
        *(_WORD *)(v164 + 12) = 2114;
        v167 = -[NSObject identifier](v160, "identifier", v166);
        v168 = v167;
        if (v167)
          *(_QWORD *)&v349 = v167;
        else
          *(_QWORD *)&v349 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v349, (char *)&v349 + 8);
        *v165 = v168;

        _os_log_impl((void *)&_mh_execute_header, v161, v162, "UpdateAccountWithACAccount: Resolved non-Apple account identifier enabled for Reminders from displayACAccount: {resolved: %{public}s, displayACAccount: %{public}@}.", (uint8_t *)v164, 0x16u);
        v213 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v165, 1, v213);
        swift_slowDealloc(v165, -1, -1);
        v214 = v339;
        swift_arrayDestroy(v339, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v214, -1, -1);
        swift_slowDealloc(v164, -1, -1);

        v46 = v340;
        v106 = v341;
        v99 = v324;
      }
      else
      {

        swift_bridgeObjectRelease_n(v158, 2);
      }
      v215 = objc_msgSend((id)objc_opt_self(REMAppleAccountUtilities), "accountDescriptionWithACAccount:", v160);
      if (v215)
      {
        v216 = v215;
        v217 = static String._unconditionallyBridgeFromObjectiveC(_:)(v215);
        v219 = v218;

      }
      else
      {
        v217 = 0;
        v219 = 0xE000000000000000;
      }
      v144 = sub_1002CAB38(0, 1, 1, _swiftEmptyArrayStorage);
      v221 = v144[2];
      v220 = v144[3];
      if (v221 >= v220 >> 1)
        v144 = sub_1002CAB38((_QWORD *)(v220 > 1), v221 + 1, 1, v144);
      v144[2] = v221 + 1;
      v222 = &v144[6 * v221];
      v222[4] = v342;
      v222[5] = v158;
      v222[6] = v217;
      v222[7] = v219;
      v222[8] = v106;
      *((_DWORD *)v222 + 18) = 33685505;
      *((_BYTE *)v222 + 76) = 2;
      goto LABEL_155;
    }
    goto LABEL_65;
  }
  v130 = v339;
  v131 = v329;
  (*(void (**)(char *, uint64_t, char *))(v339 + 16))(v329, v325, v341);
  v132 = v131;
  a1 = v24;
  v133 = Logger.logObject.getter(a1);
  v134 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v133, (os_log_type_t)v134))
  {

    (*(void (**)(char *, char *))(v130 + 8))(v132, v109);
LABEL_65:
    v144 = _swiftEmptyArrayStorage;
LABEL_155:
    v63 = v338;
    goto LABEL_156;
  }
  v135 = (uint8_t *)swift_slowAlloc(12, -1);
  v136 = swift_slowAlloc(32, -1);
  *(_QWORD *)&aBlock = v136;
  *(_DWORD *)v135 = 136446210;
  v137 = -[NSObject accountType](a1, "accountType");
  if (!v137)
  {
LABEL_176:

    swift_release_n(v340, 3);
    v320 = v338;

    swift_release_n(v337, 3);
    __break(1u);
    goto LABEL_177;
  }
  v138 = v137;
  v328 = v136;
  LODWORD(v330) = v134;
  v139 = objc_msgSend(v137, "identifier");

  if (v139)
  {
    v140 = static String._unconditionallyBridgeFromObjectiveC(_:)(v139);
    v142 = v141;

    *(_QWORD *)&v349 = sub_10001A820(v140, v142, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v349, (char *)&v349 + 8);

    swift_bridgeObjectRelease(v142);
    _os_log_impl((void *)&_mh_execute_header, v133, (os_log_type_t)v330, "UpdateAccountWithACAccount: Can't figure out REMAccountType for ACAccountType {acAccountType: %{public}s}", v135, 0xCu);
    v143 = v328;
    swift_arrayDestroy(v328, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v143, -1, -1);
    swift_slowDealloc(v135, -1, -1);

    (*(void (**)(char *, char *))(v339 + 8))(v132, v109);
    v144 = _swiftEmptyArrayStorage;
    v63 = v338;
    v46 = v340;
    v37 = v342;
LABEL_156:
    swift_retain_n(v99, 2);
    swift_bridgeObjectRetain_n(v144, 2);
    v291 = v337;
    swift_retain();
    v292 = v63;
    swift_retain();
    swift_bridgeObjectRetain(v37);
    v293 = v336;
    swift_retain();
    sub_1005548F4((uint64_t)v144, v331, v99, v332, v37, (uint64_t)v144, v291, v292, v334, v335, v333, (uint64_t)v46);
    swift_release_n(v293, 2);
    swift_bridgeObjectRelease_n(v144, 2);
    swift_bridgeObjectRelease(v37);
    swift_release_n(v99, 2);

    swift_release_n(v291, 3);
    v294 = (uint64_t)v46;
LABEL_157:
    swift_release_n(v294, 2);
    goto LABEL_158;
  }
LABEL_177:

  swift_release_n(v340, 3);
  v321 = v338;

  swift_release_n(v337, 3);
  __break(1u);
}

void sub_100559290(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6, void *a7, char a8, uint64_t a9, void *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *Strong;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  void *v45;
  NSString v46;
  id v47;
  id v48;
  _QWORD *v49;
  void *v50;
  _QWORD *v51;
  id v52;
  uint64_t v53;
  char v54;
  id v56;
  unint64_t v58;
  unint64_t v59;
  uint64_t v61;
  id v63;
  uint64_t v64;
  uint64_t aBlock[5];
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;

  v18 = swift_allocObject(&unk_1007FA800, 64, 7);
  *(_QWORD *)(v18 + 16) = a9;
  *(_QWORD *)(v18 + 24) = a10;
  *(_QWORD *)(v18 + 32) = a11;
  *(_BYTE *)(v18 + 40) = a12 & 1;
  *(_QWORD *)(v18 + 48) = a13;
  *(_QWORD *)(v18 + 56) = a14;
  v19 = v18;
  v20 = swift_allocObject(&unk_1007FA828, 80, 7);
  v53 = a3;
  *(_QWORD *)(v20 + 16) = a3;
  *(_QWORD *)(v20 + 24) = a4;
  *(_QWORD *)(v20 + 32) = a5;
  *(_QWORD *)(v20 + 40) = a6;
  *(_QWORD *)(v20 + 48) = a7;
  v54 = a8;
  *(_BYTE *)(v20 + 56) = a8;
  *(_QWORD *)(v20 + 64) = sub_1005681B0;
  *(_QWORD *)(v20 + 72) = v19;
  swift_retain();
  v21 = a10;
  swift_retain();
  swift_bridgeObjectRetain(a4);
  v64 = a5;
  swift_retain();
  v22 = a6;
  v23 = a7;
  v61 = v19;
  swift_retain();
  v24 = objc_msgSend(a1, "identifier");
  if (v24)
  {
    v25 = v24;
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v28 = v27;
    Strong = (void *)swift_unknownObjectWeakLoadStrong(a2 + 32, v27);
    if (Strong
      && (v30 = Strong,
          v31 = objc_msgSend(Strong, "cloudContext"),
          v30,
          v31))
    {
      v56 = v23;
      if (qword_100837880 != -1)
        swift_once(&qword_100837880, sub_100547F80);
      v32 = type metadata accessor for Logger(0);
      sub_10001AAA8(v32, (uint64_t)qword_10084F6F8);
      v33 = swift_bridgeObjectRetain_n(v28, 2);
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.default.getter(v34);
      if (os_log_type_enabled(v34, v35))
      {
        v58 = a4;
        v36 = (uint8_t *)swift_slowAlloc(12, -1);
        v37 = swift_slowAlloc(32, -1);
        aBlock[0] = v37;
        *(_DWORD *)v36 = 136446210;
        swift_bridgeObjectRetain(v28);
        v67 = sub_10001A820(v26, v28, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);
        swift_bridgeObjectRelease_n(v28, 3);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Fetch migration state from user record {accountID: %{public}s}", v36, 0xCu);
        swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v37, -1, -1);
        v38 = v36;
        a4 = v58;
        swift_slowDealloc(v38, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v28, 2);
      }
      v23 = v56;
      v49 = (_QWORD *)swift_allocObject(&unk_1007FA850, 56, 7);
      v49[2] = v26;
      v49[3] = v28;
      v49[4] = sub_1005658A8;
      v49[5] = v20;
      v49[6] = a1;
      aBlock[4] = (uint64_t)sub_1005658B0;
      v66 = v49;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1000FF8C4;
      aBlock[3] = (uint64_t)&unk_1007FA868;
      v50 = _Block_copy(aBlock);
      v51 = v66;
      swift_retain();
      v52 = a1;
      swift_release(v51);
      objc_msgSend(v31, "fetchUserRecordWithAccountID:completionHandler:", v25, v50);
      _Block_release(v50);
      swift_bridgeObjectRelease(a4);
      swift_release(v20);

    }
    else
    {
      v59 = a4;

      if (qword_100837880 != -1)
        swift_once(&qword_100837880, sub_100547F80);
      v63 = v21;
      v39 = type metadata accessor for Logger(0);
      sub_10001AAA8(v39, (uint64_t)qword_10084F6F8);
      swift_bridgeObjectRetain(v28);
      v41 = Logger.logObject.getter(v40);
      v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc(12, -1);
        v44 = swift_slowAlloc(32, -1);
        aBlock[0] = v44;
        *(_DWORD *)v43 = 136446210;
        swift_bridgeObjectRetain(v28);
        v67 = sub_10001A820(v26, v28, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);
        swift_bridgeObjectRelease_n(v28, 3);
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Missing cloud context for fetching migration state {accountID: %{public}s}", v43, 0xCu);
        swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1, -1);
        swift_slowDealloc(v43, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v28, 2);
      }
      v45 = (void *)objc_opt_self(REMError);
      v46 = String._bridgeToObjectiveC()();
      v47 = objc_msgSend(v45, "internalErrorWithDebugDescription:", v46);

      swift_retain();
      v48 = v63;
      swift_retain();
      sub_100563370(0, (uint64_t)v47, v53, v59, v64, (uint64_t)v22, (uint64_t)v23, v54 & 1, a9, v48, a11, a12 & 1, a13, a14, (void (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, id, uint64_t, _BYTE, uint64_t, uint64_t))sub_1005567B0);
      swift_bridgeObjectRelease(v59);
      swift_release(v20);

      swift_release(a9);
      swift_release(a14);
    }
    swift_release(v61);

    swift_release(v64);
  }
  else
  {
    swift_release(a14);

    swift_release(a9);
    swift_release(v19);

    swift_release(a5);
    swift_bridgeObjectRelease(a4);
    __break(1u);
  }
}

void sub_100559920(char a1, int a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, NSObject *a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  NSObject *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  int v51;
  _QWORD v52[3];
  char v53[8];
  _QWORD *v54;
  uint64_t aBlock[5];
  uint64_t v56;

  v45 = a5;
  v46 = a6;
  v51 = a2;
  v13 = type metadata accessor for DispatchWorkItemFlags(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v50 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS(0);
  v48 = *(_QWORD *)(v16 - 8);
  v49 = v16;
  __chkstk_darwin(v16);
  v47 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100837880 != -1)
    swift_once(&qword_100837880, sub_100547F80);
  v18 = type metadata accessor for Logger(0);
  sub_10001AAA8(v18, (uint64_t)qword_10084F6F8);
  swift_errorRetain(a3);
  swift_errorRetain(a3);
  v19 = a4;
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v41 = a7;
    v42 = a8;
    v43 = v14;
    v44 = v13;
    v22 = swift_slowAlloc(34, -1);
    v23 = (_QWORD *)swift_slowAlloc(8, -1);
    v24 = swift_slowAlloc(32, -1);
    aBlock[0] = v24;
    *(_DWORD *)v22 = 138544130;
    v25 = objc_msgSend(v19, "identifier");
    v26 = v25;
    if (v25)
      v54 = v25;
    else
      v54 = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, aBlock);
    *v23 = v26;

    *(_WORD *)(v22 + 12) = 1024;
    LODWORD(v54) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, (char *)&v54 + 4);
    *(_WORD *)(v22 + 18) = 1024;
    LODWORD(v54) = v51 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, (char *)&v54 + 4);
    *(_WORD *)(v22 + 24) = 2080;
    if (a3)
    {
      swift_getErrorValue(a3, v53, v52);
      v27 = Error.rem_errorDescription.getter(v52[1], v52[2]);
      v29 = v28;
    }
    else
    {
      v29 = 0xE300000000000000;
      v27 = 7104878;
    }
    v54 = (_QWORD *)sub_10001A820(v27, v29, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, aBlock);
    swift_bridgeObjectRelease();
    swift_errorRelease(a3);
    swift_errorRelease(a3);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "RDAccountUtils: Finished updating account {accountID: %{public}@, didAddAccount: %{BOOL}d, didUpdateAccount: %{BOOL}d, error: %s}", (uint8_t *)v22, 0x22u);
    v30 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v23, 1, v30);
    swift_slowDealloc(v23, -1, -1);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    v14 = v43;
    v13 = v44;
    a8 = v42;
    a7 = v41;
    if ((a1 & 1) != 0)
      goto LABEL_16;
  }
  else
  {

    swift_errorRelease(a3);
    swift_errorRelease(a3);

    if ((a1 & 1) != 0)
      goto LABEL_16;
  }
  if ((v51 & 1) == 0 && !a3)
  {
    dispatch_group_leave(a8);
    return;
  }
LABEL_16:
  if (qword_100836F28 != -1)
    swift_once(&qword_100836F28, sub_1001BA8F8);
  v31 = swift_allocObject(&unk_1007FACB0, 72, 7);
  v33 = v45;
  v32 = v46;
  *(_QWORD *)(v31 + 16) = a3;
  *(_QWORD *)(v31 + 24) = v33;
  *(_QWORD *)(v31 + 32) = v32;
  *(_BYTE *)(v31 + 40) = a1 & 1;
  *(_QWORD *)(v31 + 48) = a7;
  *(_BYTE *)(v31 + 56) = v51 & 1;
  *(_QWORD *)(v31 + 64) = a8;
  aBlock[4] = (uint64_t)sub_1005684E8;
  v56 = v31;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000094C8;
  aBlock[3] = (uint64_t)&unk_1007FACC8;
  v34 = _Block_copy(aBlock);
  swift_errorRetain(a3);
  swift_retain();
  swift_retain();
  swift_retain();
  v35 = a8;
  v36 = v47;
  static DispatchQoS.unspecified.getter(v35);
  v54 = _swiftEmptyArrayStorage;
  v37 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v38 = sub_10001A630((uint64_t *)&unk_100838000);
  v39 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  v40 = v50;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v54, v38, v39, v13, v37);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v36, v40, v34);
  _Block_release(v34);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v40, v13);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v36, v49);
  swift_release(v56);
}

double sub_100559E88(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, NSObject *a12)
{
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  _QWORD *v27;
  Class isa;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint8_t *v36;
  uint64_t v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  double result;
  void *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _BYTE v58[24];

  v16 = a2;
  v17 = a11;
  v18 = a9;
  v19 = a10;
  if ((a1 & 1) != 0 || (a2 & 1) != 0)
  {
    v20 = a8;
    swift_beginAccess(a4 + 16, v58, 0, 0);
    a8 = v20;
    if (*(_BYTE *)(a4 + 16) == 1)
    {
      v52 = v16;
      v21 = (void *)objc_opt_self(REMUserDefaults);
      v22 = objc_msgSend(v21, "daemonUserDefaults");
      v23 = objc_msgSend(v22, "acAccountIdentifiersToMigrateInactivatedCalDavData");

      if (v23)
      {
        v24 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, &type metadata for String);

      }
      else
      {
        v24 = _swiftEmptyArrayStorage;
      }
      v25 = sub_10011EE40((uint64_t)v24);
      swift_bridgeObjectRelease();
      v57 = v25;
      swift_bridgeObjectRetain(a6);
      sub_1002DB0E4((uint64_t *)&v56, a5, a6);
      v26 = objc_msgSend(v21, "daemonUserDefaults", swift_bridgeObjectRelease().n128_f64[0]);
      v27 = sub_1001E8BAC(v57);
      swift_bridgeObjectRelease();
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_release(v27);
      objc_msgSend(v26, "setAcAccountIdentifiersToMigrateInactivatedCalDavData:", isa);

      if (qword_100837880 != -1)
        swift_once(&qword_100837880, sub_100547F80);
      v29 = type metadata accessor for Logger(0);
      sub_10001AAA8(v29, (uint64_t)qword_10084F6F8);
      swift_bridgeObjectRetain_n(a6, 2);
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.default.getter(v31);
      if (os_log_type_enabled(v31, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc(12, -1);
        v34 = (_QWORD *)swift_slowAlloc(32, -1);
        v56 = v34;
        *(_DWORD *)v33 = 136446210;
        swift_bridgeObjectRetain(a6);
        v55 = sub_10001A820(a5, a6, (uint64_t *)&v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
        swift_bridgeObjectRelease_n(a6, 3);
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "UpdateAccountWithACAccount: inserting to daemonUserDefaults.acAccountIdentifiersToMigrateInactivatedCalDavData {displayAccountID: %{public}s}", v33, 0xCu);
        swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
        v35 = v34;
        v17 = a11;
        swift_slowDealloc(v35, -1, -1);
        v36 = v33;
        v19 = a10;
        swift_slowDealloc(v36, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a6, 2);
      }
      v16 = v52;
      v18 = a9;
      a8 = v20;
    }
  }
  v37 = a7;
  v38 = *(_QWORD *)(a7 + 16);
  if (v38)
  {
    v51 = v17;
    v53 = v16;
    v49 = a3;
    v50 = v19;
    v47 = a8;
    v56 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v37);
    sub_1001C1B0C(0, v38, 0);
    v39 = v56;
    v40 = (uint64_t *)(v37 + 40);
    do
    {
      v42 = *(v40 - 1);
      v41 = *v40;
      v56 = v39;
      v44 = v39[2];
      v43 = v39[3];
      swift_bridgeObjectRetain(v41);
      if (v44 >= v43 >> 1)
      {
        sub_1001C1B0C(v43 > 1, v44 + 1, 1);
        v39 = v56;
      }
      v40 += 6;
      v39[2] = v44 + 1;
      v45 = &v39[2 * v44];
      v45[4] = v42;
      v45[5] = v41;
      --v38;
    }
    while (v38);
    swift_bridgeObjectRelease();
    a8 = v47;
    a3 = v49;
    v19 = v50;
    v17 = v51;
    v16 = v53;
  }
  sub_100559920(a1 & 1, v16 & 1, a3, a8, v18, v19, v17, a12);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

double sub_10055A2A8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _QWORD *v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  void *v50;
  double v51;
  id v52;
  void *v53;
  id v54;
  id v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  double v59;
  id v60;
  uint64_t v61;
  id v62;
  unsigned int v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  id v70;
  id v71;
  id v72;
  os_log_type_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  double v77;
  id v78;
  void *v79;
  id v80;
  NSString v81;
  NSString v82;
  id v83;
  id v84;
  unsigned int v85;
  double v86;
  id v87;
  id v88;
  NSObject *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  double v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  id v107;
  NSObject *v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  double result;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  id v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  _QWORD *v126;
  char v127;
  void *v128;
  void *v129;
  id v131;
  BOOL v132;
  void *v134;
  int v135;
  int v136;
  int v137;
  int v138;
  void *v139;
  uint64_t v140;
  os_log_type_t v141;
  id v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  id aBlock[5];
  uint64_t v148;

  v17 = (_QWORD *)swift_allocObject(&unk_1007FAC10, 56, 7);
  v17[2] = a7;
  v17[3] = a8;
  v17[4] = a9;
  v17[5] = a10;
  v17[6] = a11;
  v18 = (_QWORD *)swift_allocObject(&unk_1007FAC38, 64, 7);
  v18[2] = a3;
  v18[3] = a4;
  v123 = a4;
  v18[4] = a5;
  v18[5] = a6;
  v18[6] = sub_100568430;
  v18[7] = v17;
  v19 = objc_allocWithZone((Class)REMSaveRequest);
  v122 = a7;
  v124 = a8;
  swift_retain();
  v20 = a3;
  swift_retain();
  v21 = a1;
  swift_retain();
  v121 = a11;
  swift_retain();
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(a6);
  swift_retain();
  v131 = objc_msgSend(v19, "initWithStore:", a2);
  v22 = *(_QWORD *)(a1 + 16);
  v126 = v17;
  if (v22)
  {
    v117 = v18;
    v118 = a3;
    v119 = a6;
    v120 = a5;
    swift_bridgeObjectRetain(a1);
    v23 = 0;
    v127 = 0;
    v132 = 0;
    v18 = (_QWORD *)(1 - v22);
    while (1)
    {
      v24 = *(_QWORD *)(v21 + v23 + 32);
      v25 = *(_QWORD *)(v21 + v23 + 40);
      v20 = *(_QWORD *)(v21 + v23 + 48);
      v26 = *(_QWORD *)(v21 + v23 + 56);
      v142 = *(id *)(v21 + v23 + 64);
      v27 = *(unsigned __int8 *)(v21 + v23 + 73);
      v135 = *(unsigned __int8 *)(v21 + v23 + 74);
      v136 = *(unsigned __int8 *)(v21 + v23 + 75);
      v137 = *(unsigned __int8 *)(v21 + v23 + 76);
      v138 = *(unsigned __int8 *)(v21 + v23 + 72);
      v28 = qword_100837880;
      swift_bridgeObjectRetain_n(v25, 2);
      swift_bridgeObjectRetain_n(v26, 2);
      if (v28 != -1)
        swift_once(&qword_100837880, sub_100547F80);
      v29 = type metadata accessor for Logger(0);
      sub_10001AAA8(v29, (uint64_t)qword_10084F6F8);
      swift_bridgeObjectRetain_n(v25, 2);
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.default.getter(v31);
      v144 = v24;
      v140 = v20;
      if (os_log_type_enabled(v31, v32))
      {
        v20 = swift_slowAlloc(12, -1);
        v33 = (void *)swift_slowAlloc(32, -1);
        aBlock[0] = v33;
        *(_DWORD *)v20 = 136446210;
        swift_bridgeObjectRetain(v25);
        *(_QWORD *)(v20 + 4) = sub_10001A820(v144, v25, (uint64_t *)aBlock);
        swift_bridgeObjectRelease_n(v25, 3);
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "UpdateAccountsWithAccountInfos: Updating account object {accountID: %{public}s}", (uint8_t *)v20, 0xCu);
        swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
        v34 = v33;
        v24 = v144;
        swift_slowDealloc(v34, -1, -1);
        swift_slowDealloc(v20, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v25, 2);
      }
      v35 = sub_1005520BC(v24, v25);
      if (v35)
      {
        v36 = v35;
        aBlock[0] = 0;
        v20 = (uint64_t)objc_msgSend(a2, "fetchAccountWithObjectID:error:", v35, aBlock);
        v37 = aBlock[0];
        if (v20)
        {
          if ((v27 & 1) != 0)
          {
            v143 = v23;
            v38 = (void *)v20;
            goto LABEL_19;
          }
          v54 = (id)v20;
          v27 = (uint64_t)v142;
          if (objc_msgSend(v54, "type") == v142)
          {
            v134 = (void *)v20;
            swift_bridgeObjectRetain_n(v25, 2);
            swift_bridgeObjectRetain_n(v26, 2);
            v55 = v54;
            v56 = Logger.logObject.getter(v55);
            v57 = static os_log_type_t.default.getter(v56);
            if (os_log_type_enabled(v56, v57))
            {
              v58 = swift_slowAlloc(32, -1);
              v125 = (void *)swift_slowAlloc(64, -1);
              aBlock[0] = v125;
              *(_DWORD *)v58 = 136315650;
              swift_bridgeObjectRetain(v26);
              v145 = sub_10001A820(v140, v26, (uint64_t *)aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &v146);
              swift_bridgeObjectRelease_n(v26, 3);
              *(_WORD *)(v58 + 12) = 2082;
              swift_bridgeObjectRetain(v25);
              v145 = sub_10001A820(v144, v25, (uint64_t *)aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &v146);
              *(_QWORD *)&v59 = swift_bridgeObjectRelease_n(v25, 3).n128_u64[0];
              *(_WORD *)(v58 + 22) = 2048;
              v60 = objc_msgSend(v55, "type", v59);

              v145 = (uint64_t)v60;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &v146);

              _os_log_impl((void *)&_mh_execute_header, v56, v57, "UpdateAccountsWithAccountInfos is updating existing account object {name: %s, accountID: %{public}s, type: %ld}", (uint8_t *)v58, 0x20u);
              v27 = (uint64_t)v125;
              swift_arrayDestroy(v125, 2, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v125, -1, -1);
              v61 = v58;
              v21 = a1;
              swift_slowDealloc(v61, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n(v25, 2);
              swift_bridgeObjectRelease_n(v26, 2);

            }
            v80 = objc_msgSend(v131, "updateAccount:", v55);
            v81 = String._bridgeToObjectiveC()();
            objc_msgSend(v80, "setName:", v81, swift_bridgeObjectRelease().n128_f64[0]);

LABEL_45:
            v20 = (uint64_t)v134;
            if (v138 == objc_msgSend(v80, "inactive"))
            {
              objc_msgSend(v80, "setInactive:", v138 ^ 1u);
              v87 = v80;
              swift_bridgeObjectRetain(v25);
              v88 = v87;
              v89 = Logger.logObject.getter(v88);
              v141 = static os_log_type_t.default.getter(v89);
              if (os_log_type_enabled(v89, v141))
              {
                v27 = swift_slowAlloc(32, -1);
                v139 = (void *)swift_slowAlloc(96, -1);
                aBlock[0] = v139;
                *(_DWORD *)v27 = 136446722;
                v90 = Bool.yesno.getter(objc_msgSend(v88, "inactive"));
                v145 = sub_10001A820(v90, v91, (uint64_t *)aBlock);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &v146);

                swift_bridgeObjectRelease();
                *(_WORD *)(v27 + 12) = 2082;
                swift_bridgeObjectRetain(v25);
                v145 = sub_10001A820(v144, v25, (uint64_t *)aBlock);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &v146);
                swift_bridgeObjectRelease_n(v25, 3);
                *(_WORD *)(v27 + 22) = 2082;
                v92 = REMAccountType.loggableDescription.getter(v142);
                v145 = sub_10001A820(v92, v93, (uint64_t *)aBlock);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &v146);
                swift_bridgeObjectRelease();
                swift_arrayDestroy(v139, 3, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v139, -1, -1);
                swift_slowDealloc(v27, -1, -1);

              }
              else
              {

                swift_bridgeObjectRelease_n(v25, 2);
              }
              v21 = a1;
            }
            else
            {
              *(_QWORD *)&v86 = swift_bridgeObjectRelease().n128_u64[0];
            }
            if (v135 != 2)
            {
              if (objc_msgSend(v80, "didChooseToMigrateLocally", v86)
                && objc_msgSend(v80, "didChooseToMigrate")
                && (v135 & 1) == 0)
              {
                objc_msgSend(v80, "setDidChooseToMigrateLocally:", 0);
              }
              objc_msgSend(v80, "setDidChooseToMigrate:", v135 & 1);
            }
            if (v136 != 2)
              objc_msgSend(v80, "setDidFinishMigration:", v136 & 1);
            swift_bridgeObjectRelease();
            *(_QWORD *)&v94 = swift_bridgeObjectRelease().n128_u64[0];
            if (v137 != 2)
              objc_msgSend(v80, "setDebugSyncDisabled:", v137 & 1, v94);
            if (v132)
            {

              if (!v18)
              {
                swift_bridgeObjectRelease();
                v27 = (uint64_t)v126;
                v18 = v117;
                v20 = v118;
                LOBYTE(v25) = v127;
                goto LABEL_76;
              }
              v132 = 1;
            }
            else
            {
              v95 = objc_msgSend(v80, "changedKeys");
              v96 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v95, &type metadata for String, &protocol witness table for String);

              v97 = *(_QWORD *)(v96 + 16);
              swift_bridgeObjectRelease();
              v132 = v97 != 0;
              if (!v18)
                goto LABEL_70;
            }
            goto LABEL_4;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v71 = v54;
          swift_bridgeObjectRetain(v25);
          swift_bridgeObjectRetain(v26);
          v72 = v71;
          v20 = Logger.logObject.getter(v72);
          v73 = static os_log_type_t.error.getter(v20);
          v27 = v73;
          if (os_log_type_enabled((os_log_t)v20, v73))
          {
            v74 = swift_slowAlloc(42, -1);
            v129 = v36;
            v75 = v23;
            v76 = (void *)swift_slowAlloc(64, -1);
            aBlock[0] = v76;
            *(_DWORD *)v74 = 136315906;
            swift_bridgeObjectRetain(v26);
            *(_QWORD *)(v74 + 4) = sub_10001A820(v140, v26, (uint64_t *)aBlock);
            swift_bridgeObjectRelease_n(v26, 3);
            *(_WORD *)(v74 + 12) = 2082;
            swift_bridgeObjectRetain(v25);
            *(_QWORD *)(v74 + 14) = sub_10001A820(v144, v25, (uint64_t *)aBlock);
            *(_QWORD *)&v77 = swift_bridgeObjectRelease_n(v25, 3).n128_u64[0];
            LOBYTE(v25) = 0;
            *(_WORD *)(v74 + 22) = 2048;
            v78 = objc_msgSend(v72, "type", v77);

            *(_QWORD *)(v74 + 24) = v78;
            *(_WORD *)(v74 + 32) = 2048;
            *(_QWORD *)(v74 + 34) = v142;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)v20, (os_log_type_t)v27, "UpdateAccountsWithAccountInfos: Unexpected account type, account ignored. {accountName: %s, accountID: %{public}s, expectedType: %ld, actualType: %ld}", (uint8_t *)v74, 0x2Au);
            swift_arrayDestroy(v76, 2, (char *)&type metadata for Any + 8);
            v79 = v76;
            v23 = v75;
            swift_slowDealloc(v79, -1, -1);
            swift_slowDealloc(v74, -1, -1);

            if (!v18)
              goto LABEL_70;
          }
          else
          {

            swift_bridgeObjectRelease_n(v25, 2);
            swift_bridgeObjectRelease_n(v26, 2);

            if (!v18)
              goto LABEL_70;
          }
        }
        else
        {
          v43 = v37;
          v134 = 0;
          v44 = _convertNSErrorToError(_:)(v37);

          swift_willThrow(v45);
          v38 = 0;
          swift_errorRelease(v44);
          if ((_DWORD)v27)
          {
            v143 = v23;
            v20 = 0;
LABEL_19:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v38)
            {
              v46 = (id)v20;
              swift_bridgeObjectRetain(v25);
              swift_bridgeObjectRetain(v26);
              v20 = (uint64_t)v46;
              v47 = Logger.logObject.getter(v20);
              v48 = static os_log_type_t.default.getter(v47);
              v27 = v48;
              if (os_log_type_enabled(v47, v48))
              {
                v49 = swift_slowAlloc(32, -1);
                v50 = (void *)swift_slowAlloc(64, -1);
                aBlock[0] = v50;
                *(_DWORD *)v49 = 136315650;
                swift_bridgeObjectRetain(v26);
                *(_QWORD *)(v49 + 4) = sub_10001A820(v140, v26, (uint64_t *)aBlock);
                swift_bridgeObjectRelease_n(v26, 3);
                *(_WORD *)(v49 + 12) = 2082;
                swift_bridgeObjectRetain(v25);
                *(_QWORD *)(v49 + 14) = sub_10001A820(v144, v25, (uint64_t *)aBlock);
                *(_QWORD *)&v51 = swift_bridgeObjectRelease_n(v25, 3).n128_u64[0];
                *(_WORD *)(v49 + 22) = 2048;
                v52 = objc_msgSend(v38, "type", v51);

                *(_QWORD *)(v49 + 24) = v52;
                _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v27, "UpdateAccountsWithAccountInfos is going to delete account {accountName: %s, accountID: %{public}s, type: %ld}.", (uint8_t *)v49, 0x20u);
                swift_arrayDestroy(v50, 2, (char *)&type metadata for Any + 8);
                v53 = v50;
                v21 = a1;
                swift_slowDealloc(v53, -1, -1);
                swift_slowDealloc(v49, -1, -1);

              }
              else
              {

                swift_bridgeObjectRelease_n(v25, 2);
                swift_bridgeObjectRelease_n(v26, 2);

              }
              v70 = objc_msgSend(v131, "updateAccount:", v38);
              objc_msgSend(v70, "removeFromStore");

              v23 = v143;
              if (!v18)
              {
                swift_bridgeObjectRelease();
                LOBYTE(v25) = 1;
                v27 = (uint64_t)v126;
                v18 = v117;
                v20 = v118;
                goto LABEL_76;
              }
              v132 = 1;
              v127 = 1;
            }
            else
            {

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v23 = v143;
              if (!v18)
                goto LABEL_70;
            }
            goto LABEL_4;
          }
          v27 = (uint64_t)v142;
          if ((v138 & 1) != 0
            || (v62 = objc_msgSend(objc_allocWithZone((Class)REMAccountTypeHost), "initWithType:", v142),
                v63 = objc_msgSend(v62, "isCloudKit"),
                v62,
                v63))
          {
            swift_bridgeObjectRetain_n(v25, 2);
            swift_bridgeObjectRetain_n(v26, 2);
            v65 = Logger.logObject.getter(v64);
            v66 = static os_log_type_t.default.getter(v65);
            if (os_log_type_enabled(v65, v66))
            {
              v67 = swift_slowAlloc(32, -1);
              v128 = (void *)swift_slowAlloc(96, -1);
              aBlock[0] = v128;
              *(_DWORD *)v67 = 136315650;
              swift_bridgeObjectRetain(v26);
              v145 = sub_10001A820(v140, v26, (uint64_t *)aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &v146);
              swift_bridgeObjectRelease_n(v26, 3);
              *(_WORD *)(v67 + 12) = 2082;
              swift_bridgeObjectRetain(v25);
              v145 = sub_10001A820(v144, v25, (uint64_t *)aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &v146);
              swift_bridgeObjectRelease_n(v25, 3);
              *(_WORD *)(v67 + 22) = 2082;
              v68 = REMAccountType.loggableDescription.getter(v142);
              v145 = sub_10001A820(v68, v69, (uint64_t *)aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &v146);
              v27 = (uint64_t)v142;
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v65, v66, "UpdateAccountsWithAccountInfos is creating account object {name: %s, accountID: %{public}s, type: %{public}s}", (uint8_t *)v67, 0x20u);
              swift_arrayDestroy(v128, 3, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v128, -1, -1);
              swift_slowDealloc(v67, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n(v25, 2);
              swift_bridgeObjectRelease_n(v26, 2);
            }
            v82 = String._bridgeToObjectiveC()();
            v83 = objc_msgSend(v131, "__addAccountWithType:name:", v27, v82, swift_bridgeObjectRelease().n128_f64[0]);

            v80 = v83;
            objc_msgSend(v80, "setObjectID:", v36);
            v84 = objc_msgSend(objc_allocWithZone((Class)REMAccountTypeHost), "initWithType:", v27);
            v85 = objc_msgSend(v84, "isCloudKit");

            v21 = a1;
            if (v85)
            {
              objc_msgSend(v80, "setPersistenceCloudSchemaVersion:", 20240715);
              v127 = 1;
              v81 = v80;
            }
            else
            {
              v81 = String._bridgeToObjectiveC()();
              objc_msgSend(v80, "setExternalIdentifier:", v81);

              v127 = 1;
            }
            goto LABEL_45;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain(v25);
          swift_bridgeObjectRetain(v26);
          v99 = Logger.logObject.getter(v98);
          v100 = static os_log_type_t.info.getter(v99);
          v20 = v100;
          if (os_log_type_enabled(v99, v100))
          {
            v101 = swift_slowAlloc(32, -1);
            v27 = swift_slowAlloc(96, -1);
            aBlock[0] = (id)v27;
            *(_DWORD *)v101 = 136315650;
            swift_bridgeObjectRetain(v26);
            *(_QWORD *)(v101 + 4) = sub_10001A820(v140, v26, (uint64_t *)aBlock);
            swift_bridgeObjectRelease_n(v26, 3);
            *(_WORD *)(v101 + 12) = 2082;
            swift_bridgeObjectRetain(v25);
            *(_QWORD *)(v101 + 14) = sub_10001A820(v144, v25, (uint64_t *)aBlock);
            swift_bridgeObjectRelease_n(v25, 3);
            *(_WORD *)(v101 + 22) = 2082;
            v102 = REMAccountType.loggableDescription.getter(v142);
            *(_QWORD *)(v101 + 24) = sub_10001A820(v102, v103, (uint64_t *)aBlock);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v99, (os_log_type_t)v20, "UpdateAccountsWithAccountInfos won't create inactive accounts unless it is CloudKit {name: %s, accountID: %{public}s, type: %{public}s}", (uint8_t *)v101, 0x20u);
            swift_arrayDestroy(v27, 3, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v27, -1, -1);
            swift_slowDealloc(v101, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v25, 2);
            swift_bridgeObjectRelease_n(v26, 2);
          }

          if (!v18)
          {
LABEL_70:
            swift_bridgeObjectRelease();
            v106 = v119;
            v105 = v120;
            v27 = (uint64_t)v126;
            v18 = v117;
            v20 = v118;
            LOBYTE(v25) = v127;
            if (!v132)
              goto LABEL_73;
LABEL_76:
            v109 = Logger.logObject.getter(v104);
            v110 = static os_log_type_t.default.getter(v109);
            if (os_log_type_enabled(v109, v110))
            {
              v111 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v111 = 0;
              _os_log_impl((void *)&_mh_execute_header, v109, v110, "UpdateAccountsWithAccountInfos: Saving account object changes", v111, 2u);
              swift_slowDealloc(v111, -1, -1);
            }

            if (qword_100836F28 == -1)
            {
LABEL_79:
              v112 = qword_100871CE8;
              v113 = swift_allocObject(&unk_1007FAC60, 34, 7);
              *(_QWORD *)(v113 + 16) = sub_1005658FC;
              *(_QWORD *)(v113 + 24) = v18;
              *(_BYTE *)(v113 + 32) = v25 & 1;
              *(_BYTE *)(v113 + 33) = 1;
              aBlock[4] = sub_100568E9C;
              v148 = v113;
              aBlock[0] = _NSConcreteStackBlock;
              aBlock[1] = (id)1107296256;
              aBlock[2] = sub_1000E18E4;
              aBlock[3] = &unk_1007FAC78;
              v114 = _Block_copy(aBlock);
              v115 = v148;
              swift_retain();
              swift_release(v115);
              objc_msgSend(v131, "saveWithQueue:completion:", v112, v114);

              _Block_release(v114);
              swift_release(v20);
              swift_release(v18);
              goto LABEL_80;
            }
LABEL_82:
            swift_once(&qword_100836F28, sub_1001BA8F8);
            goto LABEL_79;
          }
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n(v26, 2);
        swift_bridgeObjectRetain(v25);
        v40 = Logger.logObject.getter(v39);
        v41 = static os_log_type_t.error.getter(v40);
        if (os_log_type_enabled(v40, v41))
        {
          v20 = swift_slowAlloc(12, -1);
          v42 = (void *)swift_slowAlloc(32, -1);
          aBlock[0] = v42;
          *(_DWORD *)v20 = 136446210;
          swift_bridgeObjectRetain(v25);
          *(_QWORD *)(v20 + 4) = sub_10001A820(v144, v25, (uint64_t *)aBlock);
          swift_bridgeObjectRelease_n(v25, 3);
          _os_log_impl((void *)&_mh_execute_header, v40, v41, "UpdateAccountsWithAccountInfos: Failed to create UUID object, account ignored {accountID: %{public}s}", (uint8_t *)v20, 0xCu);
          swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v42, -1, -1);
          swift_slowDealloc(v20, -1, -1);

          if (!v18)
            goto LABEL_70;
        }
        else
        {

          swift_bridgeObjectRelease_n(v25, 2);
          if (!v18)
            goto LABEL_70;
        }
      }
LABEL_4:
      v18 = (_QWORD *)((char *)v18 + 1);
      v23 += 48;
      if (v18 == (_QWORD *)1)
      {
        __break(1u);
        goto LABEL_82;
      }
    }
  }
  LOBYTE(v25) = 0;
  v105 = a5;
  v106 = a6;
LABEL_73:
  v107 = v122;
  swift_retain();
  swift_retain();
  swift_retain();
  v108 = v121;
  sub_100559E88(v25 & 1, 0, 0, v20, v123, v105, v106, v107, v124, a9, a10, v108);
  swift_release(v20);
  swift_release(v18);

  swift_release(v124);
  swift_release(a9);
  swift_release(a10);

  v27 = (uint64_t)v126;
LABEL_80:
  swift_release(v27);
  swift_bridgeObjectRelease();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_10055B888(void *a1, void *a2, int a3, int a4, uint64_t a5, void *a6, uint64_t a7, NSObject *a8, uint64_t a9, void *a10)
{
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  NSObject *v28;
  NSObject *v29;
  id v30;
  void *v31;
  NSObject *v32;
  id v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  unint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  id v47;
  NSObject *v48;
  id v49;
  NSObject *v50;
  NSObject *v51;
  int v52;
  uint64_t v53;
  id v54;
  void *v55;
  unint64_t v56;
  unint64_t v57;
  double v58;
  id v59;
  void *v60;
  id v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  int v67;
  NSObject *v68;
  NSObject *v69;
  uint64_t v70;
  NSObject *v71;
  id v72;
  NSObject *v73;
  uint64_t v74;
  os_log_type_t v75;
  uint64_t v76;
  id v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  double v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  os_log_type_t v91;
  uint8_t *v92;
  uint64_t v93;
  unsigned __int8 v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  id v98;
  void *v99;
  uint64_t v100;
  char v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  BOOL v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  NSObject *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  uint8_t *v119;
  uint64_t v120;
  NSObject *v121;
  NSObject *v122;
  int v123;
  uint8_t *v124;
  void *v125;
  id v126;
  void *v127;
  id v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  id v132;
  _QWORD *v133;
  void *v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  NSObject *v139;
  os_log_type_t v140;
  uint8_t *v141;
  uint64_t v142;
  NSObject *v143;
  unint64_t v144;
  unint64_t v145;
  NSObject *v146;
  NSObject *v147;
  NSObject *v148;
  os_log_type_t v149;
  uint64_t v150;
  double v151;
  objc_class *v152;
  objc_class *v153;
  NSObject *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  NSObject *v158;
  int v159;
  void *Strong;
  void *v161;
  NSObject *v162;
  NSObject *v163;
  uint64_t v164;
  NSObject *v165;
  NSObject *v166;
  NSObject *v167;
  _QWORD *v168;
  id v169;
  uint64_t v170;
  uint64_t v171;
  id v172;
  void *v173;
  id v174;
  void *v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  double v181;
  NSObject *v182;
  uint64_t v183;
  void *v184;
  id v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  NSObject *v191;
  os_log_type_t v192;
  uint8_t *v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  NSObject *v202;
  os_log_type_t v203;
  uint8_t *v204;
  NSObject *v205;
  NSObject *v206;
  uint64_t v207;
  uint64_t v208;
  id v209;
  void *v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  NSObject *v216;
  uint64_t v217;
  NSObject *v218;
  os_log_type_t v219;
  uint8_t *v220;
  uint64_t v221;
  uint64_t v222;
  NSObject *v223;
  os_log_type_t v224;
  uint8_t *v225;
  uint64_t v226;
  NSObject *v227;
  id v228;
  int v229;
  NSObject *v230;
  NSObject *v231;
  NSObject *v232;
  os_log_type_t v233;
  _BOOL4 v234;
  NSObject *v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  NSObject *v239;
  unsigned __int8 v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  id v244;
  void *v245;
  id v246;
  void *v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  double v251;
  char v252;
  unsigned __int8 v253;
  unsigned __int8 v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  _QWORD *v258;
  NSObject *v259;
  int v260;
  void *v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  NSObject *v266;
  os_log_type_t v267;
  _BOOL4 v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  double v274;
  uint64_t v275;
  id v276;
  void *v277;
  uint64_t v278;
  unint64_t v279;
  unint64_t v280;
  char v281;
  unint64_t v282;
  unint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  NSObject *v286;
  uint64_t v287;
  unint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  NSObject *v291;
  os_log_type_t v292;
  uint8_t *v293;
  uint64_t v294;
  void *v295;
  id v296;
  id v297;
  id v298;
  uint64_t v299;
  void *v300;
  _QWORD *v301;
  void *v302;
  uint64_t v303;
  NSObject *v304;
  id v305;
  uint64_t v306;
  NSObject *v307;
  NSObject *v308;
  NSObject *v309;
  NSObject *v310;
  NSObject *v311;
  NSObject *v312;
  NSObject *v313;
  NSObject *v314;
  NSObject *v315;
  NSObject *v316;
  NSObject *v317;
  NSObject *v318;
  NSObject *v319;
  NSObject *v320;
  NSObject *v321;
  NSObject *v322;
  NSObject *v323;
  NSObject *v324;
  uint64_t v325;
  _QWORD *v326;
  id v327;
  uint64_t v328;
  void *v329;
  uint64_t v330;
  _QWORD *v331;
  NSObject *v332;
  uint64_t v333;
  uint64_t v334;
  NSObject *v335;
  NSObject *v336;
  uint64_t v337;
  NSObject *v338;
  NSObject *v339;
  NSObject *v340;
  uint64_t v341;
  __int128 aBlock;
  __int128 v343;
  uint64_t (*v344)();
  uint64_t v345;
  __int128 v346;
  __int128 v347;

  v328 = a5;
  LODWORD(v326) = a4;
  LODWORD(v327) = a3;
  v329 = a2;
  v14 = type metadata accessor for Logger(0);
  v336 = *(NSObject **)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = ((char *)&v324 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17);
  v19 = (char *)&v324 - v18;
  __chkstk_darwin(v20);
  v22 = (char *)&v324 - v21;
  v23 = (_QWORD *)swift_allocObject(&unk_1007FAAF8, 56, 7);
  v23[2] = a6;
  v23[3] = a7;
  v23[4] = a8;
  v23[5] = a9;
  v331 = v23;
  v23[6] = a10;
  v24 = a6;
  v334 = a7;
  swift_retain_n(a7);
  v332 = a8;
  swift_retain_n(a8);
  v333 = a9;
  swift_retain_n(a9);
  v25 = a10;
  v26 = v24;
  v27 = v25;
  v335 = v26;
  v28 = v27;
  v29 = objc_msgSend(a1, "displayAccount");
  if (!v29)
    v29 = a1;
  v30 = -[NSObject identifier](v29, "identifier");
  if (!v30)
  {

    swift_release_n(v333);
    swift_release_n(v332);
    swift_release_n(v334);
    v308 = v335;

    __break(1u);
LABEL_170:
    v309 = v338;

    swift_release_n(v333);
    swift_release_n(v332);
    swift_release_n(v334);
    v310 = v335;

    __break(1u);
  }
  v31 = v30;
  v337 = v14;
  v338 = v28;
  v330 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v339 = v32;

  v33 = -[NSObject accountType](v29, "accountType");
  if (!v33)
    goto LABEL_170;
  v34 = v33;
  v35 = objc_msgSend(v33, "identifier");

  if (!v35)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierAppleAccount);
LABEL_12:
    if ((-[NSObject isEnabledForDataclass:](v29, "isEnabledForDataclass:", ACAccountDataclassReminders, swift_bridgeObjectRelease().n128_f64[0]) & 1) == 0)goto LABEL_24;
    goto LABEL_13;
  }
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  v38 = v37;

  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierAppleAccount);
  if (!v38)
    goto LABEL_12;
  if (v36 == v39 && v38 == v40)
  {
    if ((-[NSObject isEnabledForDataclass:](v29, "isEnabledForDataclass:", ACAccountDataclassReminders, swift_bridgeObjectRelease_n(v38, 2).n128_f64[0]) & 1) == 0)
    {
LABEL_24:
      v68 = v339;
      if (qword_100837880 != -1)
        swift_once(&qword_100837880, sub_100547F80);
      v69 = v337;
      v70 = sub_10001AAA8(v337, (uint64_t)qword_10084F6F8);
      v71 = v336;
      ((void (*)(char *, uint64_t, NSObject *))v336[2].isa)(v22, v70, v69);
      v72 = a1;
      v73 = v29;
      v49 = v72;
      v50 = v73;
      swift_bridgeObjectRetain(v68);
      v16 = Logger.logObject.getter(v74);
      v75 = static os_log_type_t.error.getter(v16);
      if (!os_log_type_enabled(v16, v75))
      {

        swift_bridgeObjectRelease_n(v68, 2);
        ((void (*)(char *, NSObject *))v71[1].isa)(v22, v69);
        goto LABEL_47;
      }
      v76 = swift_slowAlloc(32, -1);
      v329 = (void *)swift_slowAlloc(96, -1);
      *(_QWORD *)&aBlock = v329;
      *(_DWORD *)v76 = 136446722;
      v77 = objc_msgSend(v49, "identifier");
      if (v77)
      {
        v78 = v77;
        v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
        v81 = v80;

        *(_QWORD *)&v346 = sub_10001A820(v79, v81, (uint64_t *)&aBlock);
        v69 = &v346 + 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);

        swift_bridgeObjectRelease();
        *(_WORD *)(v76 + 12) = 2082;
        v49 = (id)(v76 + 14);
        v29 = v339;
        swift_bridgeObjectRetain(v339);
        *(_QWORD *)&v346 = sub_10001A820(v330, (unint64_t)v29, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);
        *(_QWORD *)&v82 = swift_bridgeObjectRelease_n(v29, 3).n128_u64[0];
        *(_WORD *)(v76 + 22) = 2082;
        v83 = -[NSObject accountType](v50, "accountType", v82);
        if (v83)
        {
          v49 = v83;
          v69 = objc_msgSend(v83, "identifier");

          v84 = v337;
          if (v69)
          {
            v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
            v87 = v86;

            *(_QWORD *)&v346 = sub_10001A820(v85, v87, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v16, v75, "UpdateAccountWithACAccount: ACAccount type is not supported or reminders dataclass is not enabled {accountID: %{public}s, displayAccountID: %{public}s, accountType: %{public}s}", (uint8_t *)v76, 0x20u);
            v88 = v329;
            swift_arrayDestroy(v329, 3, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v88, -1, -1);
            swift_slowDealloc(v76, -1, -1);

            ((void (*)(char *, uint64_t))v336[1].isa)(v22, v84);
LABEL_47:
            v29 = v332;
            goto LABEL_48;
          }
          goto LABEL_173;
        }
      }
      else
      {

        swift_bridgeObjectRelease();
        v311 = v338;

        swift_release_n(v333);
        swift_release_n(v332);
        swift_release_n(v334);
        v50 = v335;

        __break(1u);
      }

      v312 = v338;
      swift_release_n(v333);
      swift_release_n(v332);
      swift_release_n(v334);
      v50 = v335;

      __break(1u);
LABEL_173:

      v313 = v338;
      swift_release_n(v333);
      swift_release_n(v332);
      swift_release_n(v334);
      v314 = v335;

      __break(1u);
      goto LABEL_174;
    }
LABEL_23:
    v67 = 1;
    v42 = (unint64_t)v339;
    goto LABEL_33;
  }
  v66 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, v39, v40, 0);
  swift_bridgeObjectRelease();
  if ((-[NSObject isEnabledForDataclass:](v29, "isEnabledForDataclass:", ACAccountDataclassReminders, swift_bridgeObjectRelease().n128_f64[0]) & 1) == 0)goto LABEL_24;
  if ((v66 & 1) != 0)
    goto LABEL_23;
LABEL_13:
  v41 = objc_msgSend(a1, "accountPropertyForKey:", REMDA_kCalDAVMobileAccountDelegatePrincipalPath);
  v42 = (unint64_t)v339;
  if (v41)
  {
    v43 = v41;
    _bridgeAnyObjectToAny(_:)(&aBlock, v41);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease(v43);
    sub_10000882C((uint64_t)&aBlock, (uint64_t *)&unk_10083D5B0);
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v44 = v337;
    v45 = sub_10001AAA8(v337, (uint64_t)qword_10084F6F8);
    v46 = v336;
    ((void (*)(NSObject *, uint64_t, uint64_t))v336[2].isa)(v16, v45, v44);
    v47 = a1;
    v48 = v29;
    v49 = v47;
    v50 = v48;
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.default.getter(v51);
    if (!os_log_type_enabled(v51, (os_log_type_t)v52))
    {

      ((void (*)(NSObject *, uint64_t))v46[1].isa)(v16, v44);
      goto LABEL_47;
    }
    LODWORD(v339) = v52;
    v53 = swift_slowAlloc(22, -1);
    v330 = swift_slowAlloc(64, -1);
    *(_QWORD *)&aBlock = v330;
    *(_DWORD *)v53 = 136446466;
    v54 = objc_msgSend(v49, "identifier");
    if (v54)
    {
      v55 = v54;
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
      v57 = v56;

      *(_QWORD *)&v346 = sub_10001A820((uint64_t)v29, v57, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);

      *(_QWORD *)&v58 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v53 + 12) = 2082;
      v59 = -[NSObject accountType](v50, "accountType", v58);
      if (v59)
      {
        v60 = v59;
        v61 = objc_msgSend(v59, "identifier");

        v29 = v332;
        if (v61)
        {
          v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
          v64 = v63;

          *(_QWORD *)&v346 = sub_10001A820(v62, v64, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v51, (os_log_type_t)v339, "UpdateAccountWithACAccount: Skip handling CalDAV delegate account {accountID: %{public}s, displayAccountType: %{public}s}", (uint8_t *)v53, 0x16u);
          v65 = v330;
          swift_arrayDestroy(v330, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v65, -1, -1);
          swift_slowDealloc(v53, -1, -1);

          ((void (*)(NSObject *, uint64_t))v336[1].isa)(v16, v44);
LABEL_48:
          v69 = v338;
          v114 = v334;
          v113 = v335;
          v115 = v333;
          sub_100559920(0, 0, 0, v335, v334, (uint64_t)v29, v333, v338);
          swift_release(v115);
          swift_release(v29);
          swift_release(v114);

          swift_release(v331);
LABEL_158:

          goto LABEL_159;
        }
        goto LABEL_177;
      }
LABEL_176:

      v316 = v338;
      swift_release_n(v333);
      swift_release_n(v332);
      swift_release_n(v334);
      v50 = v335;

      __break(1u);
LABEL_177:

      v317 = v338;
      swift_release_n(v333);
      swift_release_n(v29);
      swift_release_n(v334);
      v318 = v335;

      __break(1u);
      goto LABEL_178;
    }
LABEL_175:

    v315 = v338;
    swift_release_n(v333);
    swift_release_n(v332);
    swift_release_n(v334);
    v50 = v335;

    __break(1u);
    goto LABEL_176;
  }
  aBlock = 0u;
  v343 = 0u;
  sub_10000882C((uint64_t)&aBlock, (uint64_t *)&unk_10083D5B0);
  v67 = 0;
LABEL_33:
  if (qword_100837880 != -1)
    swift_once(&qword_100837880, sub_100547F80);
  v89 = sub_10001AAA8(v337, (uint64_t)qword_10084F6F8);
  swift_bridgeObjectRetain_n(v42, 2);
  v16 = Logger.logObject.getter(v90);
  v91 = static os_log_type_t.default.getter(v16);
  v49 = (id)v91;
  if (os_log_type_enabled(v16, v91))
  {
    v92 = (uint8_t *)swift_slowAlloc(12, -1);
    v93 = swift_slowAlloc(32, -1);
    *(_QWORD *)&aBlock = v93;
    *(_DWORD *)v92 = 136446210;
    swift_bridgeObjectRetain(v339);
    *(_QWORD *)&v346 = sub_10001A820(v330, (unint64_t)v339, (uint64_t *)&aBlock);
    v42 = (unint64_t)v339;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);
    swift_bridgeObjectRelease_n(v42, 3);
    _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v49, "UpdateAccountWithACAccount: Try to update account object {accountID: %{public}s}", v92, 0xCu);
    swift_arrayDestroy(v93, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v93, -1, -1);
    swift_slowDealloc(v92, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v42, 2);
  }
  v69 = v338;
  v325 = swift_allocObject(&unk_1007FA120, 17, 7);
  *(_BYTE *)(v325 + 16) = 0;
  v94 = -[NSObject rem_isEligibleForCloudKitReminders](v29, "rem_isEligibleForCloudKitReminders");
  if (v67)
  {
    if ((v94 & 1) != 0)
    {
      *(_QWORD *)&v346 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMACAccountPropertyDidChooseToMigrate);
      *((_QWORD *)&v346 + 1) = v95;
      v96 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v346, &type metadata for String);
      v97 = -[NSObject objectForKeyedSubscript:](v29, "objectForKeyedSubscript:", v96);
      swift_unknownObjectRelease(v96);
      if (v97)
      {
        _bridgeAnyObjectToAny(_:)(&v346, v97);
        swift_unknownObjectRelease(v97);
      }
      else
      {
        v346 = 0u;
        v347 = 0u;
      }
      v154 = v335;
      v155 = v328;
      sub_10001A5E8((uint64_t)&v346, (uint64_t)&aBlock);
      if (*((_QWORD *)&v343 + 1))
      {
        v156 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
        if ((swift_dynamicCast(&v340, &aBlock, (char *)&type metadata for Any + 8, v156, 6) & 1) != 0)
        {
          v158 = v340;
          v159 = -[NSObject BOOLValue](v340, "BOOLValue");

          goto LABEL_78;
        }
      }
      else
      {
        sub_10000882C((uint64_t)&aBlock, (uint64_t *)&unk_10083D5B0);
      }
      if (v327 == 2)
      {
        Strong = (void *)swift_unknownObjectWeakLoadStrong(v155 + 32, v157);
        v114 = v334;
        if (Strong)
        {
          v161 = Strong;
          if (objc_msgSend(Strong, "hasPassedBuddyAndSystemDataMigrator"))
          {

            if ((v326 & 1) != 0)
            {
              v162 = v154;
              swift_retain();
              v163 = v332;
              swift_retain();
              v164 = v333;
              swift_retain();
              v165 = v69;
              v166 = v29;
              v29 = v163;
              v167 = v166;
              swift_bridgeObjectRetain(v42);
              v168 = v331;
              swift_retain();
              swift_retain();
              v169 = v329;
              v323 = v165;
              v113 = v335;
              sub_100548198(v167, v155, v330, v42, v155, v167, v169, 1, v162, v114, (uint64_t)v29, v164, v323);
              swift_release(v164);
              swift_release(v29);
              swift_release(v114);

              swift_release(v325);
              swift_release_n(v168);

              v115 = v164;
              swift_bridgeObjectRelease();
LABEL_159:
              swift_release(v115);
              swift_release(v29);
              swift_release(v114);

              return;
            }
          }
          else
          {
            swift_bridgeObjectRetain_n(v42, 2);
            v218 = Logger.logObject.getter(v217);
            v219 = static os_log_type_t.default.getter(v218);
            if (os_log_type_enabled(v218, v219))
            {
              v220 = (uint8_t *)swift_slowAlloc(12, -1);
              v221 = swift_slowAlloc(32, -1);
              *(_QWORD *)&aBlock = v221;
              *(_DWORD *)v220 = 136446210;
              swift_bridgeObjectRetain(v339);
              *(_QWORD *)&v346 = sub_10001A820(v330, (unint64_t)v339, (uint64_t *)&aBlock);
              v69 = v338;
              v42 = (unint64_t)v339;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);
              swift_bridgeObjectRelease_n(v42, 3);
              _os_log_impl((void *)&_mh_execute_header, v218, v219, "UpdateAccountWithACAccount: hasPassedBuddyAndSystemDataMigrator != true, setting shouldFetchMigrationState to false {accountID: %{public}s}", v220, 0xCu);
              swift_arrayDestroy(v221, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v221, -1, -1);
              swift_slowDealloc(v220, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n(v42, 2);
            }
          }
        }
        swift_bridgeObjectRetain(v42);
        v291 = Logger.logObject.getter(v290);
        v292 = static os_log_type_t.default.getter(v291);
        if (os_log_type_enabled(v291, v292))
        {
          v293 = (uint8_t *)swift_slowAlloc(12, -1);
          v294 = swift_slowAlloc(32, -1);
          *(_QWORD *)&aBlock = v294;
          *(_DWORD *)v293 = 136446210;
          swift_bridgeObjectRetain(v42);
          *(_QWORD *)&v346 = sub_10001A820(v330, v42, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);
          swift_bridgeObjectRelease_n(v42, 3);
          _os_log_impl((void *)&_mh_execute_header, v291, v292, "UpdateAccountWithACAccount: Will not fetch migration state {accountID: %{public}s}", v293, 0xCu);
          swift_arrayDestroy(v294, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v294, -1, -1);
          swift_slowDealloc(v293, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v42, 2);
        }
        v295 = (void *)objc_opt_self(REMAppleAccountUtilities);
        v296 = objc_msgSend(v295, "sharedInstance");
        v297 = objc_msgSend(v296, "accountStore");

        v298 = objc_msgSend(v295, "sharedInstance");
        v299 = swift_allocObject(&unk_1007FAB20, 64, 7);
        *(_QWORD *)(v299 + 16) = v29;
        *(_QWORD *)(v299 + 24) = v155;
        v300 = v329;
        *(_QWORD *)(v299 + 32) = v329;
        *(_BYTE *)(v299 + 40) = v326 & 1;
        v301 = v331;
        *(_QWORD *)(v299 + 48) = sub_100568430;
        *(_QWORD *)(v299 + 56) = v301;
        v344 = sub_100565338;
        v345 = v299;
        *(_QWORD *)&aBlock = _NSConcreteStackBlock;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v343 = sub_1001BCC34;
        *((_QWORD *)&v343 + 1) = &unk_1007FAB38;
        v302 = _Block_copy(&aBlock);
        v303 = v345;
        v304 = v29;
        swift_retain();
        swift_retain();
        v305 = v300;
        swift_release(v303);
        objc_msgSend(v298, "saveDidChooseToMigrate:didFinishMigration:toACAccount:inStore:completionHandler:", 0, 0, v304, v297, v302);

        _Block_release(v302);
        v306 = v333;
        swift_release(v333);
        v29 = v332;
        swift_release(v332);
        v114 = v334;
        swift_release(v334);
        v113 = v335;

        swift_release(v301);
        swift_release(v325);

        v115 = v306;
        goto LABEL_159;
      }
      v159 = v327 & 1;
LABEL_78:
      *(_QWORD *)&aBlock = static String._unconditionallyBridgeFromObjectiveC(_:)(REMACAccountPropertyDidFinishMigration);
      *((_QWORD *)&aBlock + 1) = v170;
      v171 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&aBlock, &type metadata for String);
      v172 = -[NSObject objectForKeyedSubscript:](v29, "objectForKeyedSubscript:", v171);
      swift_unknownObjectRelease(v171);
      if (v172)
      {
        _bridgeAnyObjectToAny(_:)(&v346, v172);
        swift_unknownObjectRelease(v172);
      }
      else
      {
        v346 = 0u;
        v347 = 0u;
      }
      v114 = v334;
      sub_10001A5E8((uint64_t)&v346, (uint64_t)&aBlock);
      if (*((_QWORD *)&v343 + 1))
      {
        v179 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
        if (swift_dynamicCast(&v340, &aBlock, (char *)&type metadata for Any + 8, v179, 6))
          v182 = v340;
        else
          v182 = 0;
        HIBYTE(v341) = 0;
        if (v159)
          goto LABEL_90;
      }
      else
      {
        sub_10000882C((uint64_t)&aBlock, (uint64_t *)&unk_10083D5B0);
        v182 = 0;
        HIBYTE(v341) = 0;
        if (v159)
        {
LABEL_90:
          v183 = swift_unknownObjectWeakLoadStrong(v155 + 32, v180);
          if (!v183)
          {
            swift_bridgeObjectRelease();
            v202 = Logger.logObject.getter(v201);
            v203 = static os_log_type_t.error.getter(v202);
            if (os_log_type_enabled(v202, v203))
            {
              v204 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v204 = 0;
              _os_log_impl((void *)&_mh_execute_header, v202, v203, "Store controller missing for checking whether migration has failed", v204, 2u);
              swift_slowDealloc(v204, -1, -1);
              v205 = v29;
            }
            else
            {
              v205 = v202;
              v202 = v29;
            }
            v113 = v335;
            swift_release(v331);
            swift_release(v325);

            v115 = v333;
            swift_release(v333);
            v29 = v332;
            swift_release(v332);
            swift_release(v114);

            goto LABEL_159;
          }
          v184 = (void *)v183;
          v185 = sub_1005520BC(v330, v42);
          if (!v185)
          {
            v339 = v182;
            swift_bridgeObjectRetain(v42);
            v223 = Logger.logObject.getter(v222);
            v224 = static os_log_type_t.error.getter(v223);
            if (os_log_type_enabled(v223, v224))
            {
              v225 = (uint8_t *)swift_slowAlloc(12, -1);
              v226 = swift_slowAlloc(32, -1);
              *(_QWORD *)&aBlock = v226;
              *(_DWORD *)v225 = 136315138;
              swift_bridgeObjectRetain(v42);
              *(_QWORD *)&v346 = sub_10001A820(v330, v42, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);
              swift_bridgeObjectRelease_n(v42, 3);
              _os_log_impl((void *)&_mh_execute_header, v223, v224, "Display ACAccount ID is not an UUID {displayACAccountID: %s}", v225, 0xCu);
              swift_arrayDestroy(v226, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v226, -1, -1);
              swift_slowDealloc(v225, -1, -1);
              v115 = v333;
              swift_release(v333);
              v227 = v332;
              swift_release(v332);
              v114 = v334;
              swift_release(v334);
              v113 = v335;

              swift_release(v331);
              swift_release(v325);

              v29 = v227;
            }
            else
            {
              v115 = v333;
              swift_release(v333);
              v307 = v332;
              swift_release(v332);
              v114 = v334;
              swift_release(v334);
              v113 = v335;

              swift_release(v331);
              swift_release(v325);

              swift_bridgeObjectRelease_n(v42, 2);
              v29 = v307;
            }

            goto LABEL_159;
          }
          v186 = v185;
          sub_10027A4DC(v185, v184);
          v188 = v187;

          v189 = *(unsigned __int8 *)(v188 + 88);
          swift_release(v188);
          HIBYTE(v341) = v189 ^ 1;
          goto LABEL_95;
        }
      }
      v189 = 1;
LABEL_95:
      if (v182 && ((v189 | -[NSObject BOOLValue](v182, "BOOLValue") ^ 1) & 1) == 0)
      {
        *(_BYTE *)(v325 + 16) = 1;
        swift_bridgeObjectRetain_n(v42, 2);
        v191 = Logger.logObject.getter(v190);
        v192 = static os_log_type_t.default.getter(v191);
        if (os_log_type_enabled(v191, v192))
        {
          v193 = (uint8_t *)swift_slowAlloc(12, -1);
          v194 = v159;
          v195 = swift_slowAlloc(32, -1);
          *(_QWORD *)&aBlock = v195;
          *(_DWORD *)v193 = 136446210;
          swift_bridgeObjectRetain(v339);
          *(_QWORD *)&v346 = sub_10001A820(v330, (unint64_t)v339, (uint64_t *)&aBlock);
          v42 = (unint64_t)v339;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);
          swift_bridgeObjectRelease_n(v42, 3);
          _os_log_impl((void *)&_mh_execute_header, v191, v192, "UpdateAccountWithACAccount: setting shouldMigrateInactivatedICloudCalDavData to true {displayAccountID: %{public}s}", v193, 0xCu);
          swift_arrayDestroy(v195, 1, (char *)&type metadata for Any + 8);
          v196 = v195;
          v159 = v194;
          swift_slowDealloc(v196, -1, -1);
          swift_slowDealloc(v193, -1, -1);

        }
        else
        {

          *(_QWORD *)&v181 = swift_bridgeObjectRelease_n(v42, 2).n128_u64[0];
        }
      }
      v228 = -[NSObject aa_isAccountClass:](v29, "aa_isAccountClass:", AAAccountClassPrimary, v181);
      if ((_DWORD)v228)
        v337 = _auto_REMAccountTypeForPrimaryCloudKit(v228);
      else
        v337 = 6;
      v229 = HIBYTE(v341);
      v230 = v182;
      swift_bridgeObjectRetain_n(v42, 2);
      v231 = v230;
      v232 = Logger.logObject.getter(v231);
      v233 = static os_log_type_t.default.getter(v232);
      v234 = os_log_type_enabled(v232, v233);
      LODWORD(v328) = v159;
      v336 = v231;
      if (v234)
      {
        v235 = v182;
        v236 = swift_slowAlloc(44, -1);
        v327 = (id)swift_slowAlloc(96, -1);
        *(_QWORD *)&aBlock = v327;
        *(_DWORD *)v236 = 136447234;
        swift_bridgeObjectRetain(v42);
        *(_QWORD *)&v346 = sub_10001A820(v330, v42, (uint64_t *)&aBlock);
        LODWORD(v326) = v229;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);
        swift_bridgeObjectRelease_n(v42, 3);
        *(_WORD *)(v236 + 12) = 2082;
        v237 = REMAccountType.loggableDescription.getter(v337);
        *(_QWORD *)&v346 = sub_10001A820(v237, v238, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);
        swift_bridgeObjectRelease();
        *(_WORD *)(v236 + 22) = 1024;
        LODWORD(v346) = v159;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 4);
        *(_WORD *)(v236 + 28) = 1024;
        LODWORD(v346) = (_DWORD)v326;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 4);
        *(_WORD *)(v236 + 34) = 2082;
        v239 = v235;
        if (v235)
        {
          v231 = v336;
          v240 = -[NSObject BOOLValue](v336, "BOOLValue");
        }
        else
        {
          v240 = 2;
          v231 = v336;
        }
        LOBYTE(v346) = v240;
        v241 = sub_10001A630((uint64_t *)&unk_10084DBC0);
        v242 = String.init<A>(describing:)(&v346, v241);
        *(_QWORD *)&v346 = sub_10001A820(v242, v243, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v232, v233, "UpdateAccountWithACAccount: Will process CloudKit account {accountID: %{public}s, type: %{public}s, didChooseToMigrate: %{BOOL}d, shouldShowCloudKitAccount: %{BOOL}d, didFinishMigration: %{public}s}", (uint8_t *)v236, 0x2Cu);
        v244 = v327;
        swift_arrayDestroy(v327, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v244, -1, -1);
        swift_slowDealloc(v236, -1, -1);

      }
      else
      {
        v239 = v182;

        swift_bridgeObjectRelease_n(v42, 2);
      }
      v245 = (void *)objc_opt_self(REMAppleAccountUtilities);
      v246 = objc_msgSend(v245, "accountDescriptionWithACAccount:", v29);
      if (v246)
      {
        v247 = v246;
        v248 = static String._unconditionallyBridgeFromObjectiveC(_:)(v246);
        v250 = v249;

      }
      else
      {
        v248 = 0;
        v250 = 0;
      }
      v327 = v245;
      *(_QWORD *)&v251 = swift_beginAccess((char *)&v341 + 7, &aBlock, 0, 0).n128_u64[0];
      v252 = HIBYTE(v341);
      if (v239)
        v253 = -[NSObject BOOLValue](v231, "BOOLValue", v251);
      else
        v253 = 2;
      v254 = -[NSObject aa_isAccountClass:](v29, "aa_isAccountClass:", AAAccountClassBasic);
      if (v250)
        v255 = v248;
      else
        v255 = 0x64756F6C4369;
      if (!v250)
        v250 = 0xE600000000000000;
      swift_bridgeObjectRetain(v339);
      v133 = sub_1002CAB38(0, 1, 1, _swiftEmptyArrayStorage);
      v257 = v133[2];
      v256 = v133[3];
      if (v257 >= v256 >> 1)
        v133 = sub_1002CAB38((_QWORD *)(v256 > 1), v257 + 1, 1, v133);
      v133[2] = v257 + 1;
      v258 = &v133[6 * v257];
      v259 = v339;
      v258[4] = v330;
      v258[5] = v259;
      v258[6] = v255;
      v258[7] = v250;
      v258[8] = v337;
      *((_BYTE *)v258 + 72) = v252;
      *((_BYTE *)v258 + 73) = 0;
      v260 = v328;
      *((_BYTE *)v258 + 74) = v328;
      *((_BYTE *)v258 + 75) = v253;
      *((_BYTE *)v258 + 76) = v254;
      v261 = sub_100552370(v29);
      v324 = v29;
      if (v262)
      {
        v263 = (uint64_t)v261;
        v264 = v262;
        swift_bridgeObjectRetain_n(v262, 2);
        v266 = Logger.logObject.getter(v265);
        v267 = static os_log_type_t.default.getter(v266);
        v268 = os_log_type_enabled(v266, v267);
        v69 = v338;
        v337 = v263;
        if (v268)
        {
          v269 = swift_slowAlloc(18, -1);
          v326 = v133;
          v270 = v260;
          v271 = v269;
          v272 = v263;
          v273 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v346 = v273;
          *(_DWORD *)v271 = 136446466;
          swift_bridgeObjectRetain(v264);
          v340 = sub_10001A820(v272, v264, (uint64_t *)&v346);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v340, &v341);
          swift_bridgeObjectRelease_n(v264, 3);
          *(_WORD *)(v271 + 12) = 1024;
          LODWORD(v340) = v270;
          v133 = v326;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v340, (char *)&v340 + 4);
          _os_log_impl((void *)&_mh_execute_header, v266, v267, "UpdateAccountWithACAccount: Will process iCloud CalDAV account {accountID: %{public}s, didChooseToMigrate: %{BOOL}d}", (uint8_t *)v271, 0x12u);
          swift_arrayDestroy(v273, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v273, -1, -1);
          swift_slowDealloc(v271, -1, -1);

        }
        else
        {

          *(_QWORD *)&v274 = swift_bridgeObjectRelease_n(v264, 2).n128_u64[0];
        }
        v42 = (unint64_t)v339;
        v275 = 0x64756F6C4369;
        v276 = objc_msgSend(v327, "accountDescriptionWithACAccount:", v29, v274, v324);
        if (v276)
        {
          v277 = v276;
          v278 = static String._unconditionallyBridgeFromObjectiveC(_:)(v276);
          v280 = v279;

        }
        else
        {
          v278 = 0;
          v280 = 0;
        }
        v281 = HIBYTE(v341) ^ 1;
        if (v280)
          v275 = v278;
        else
          v280 = 0xE600000000000000;
        v283 = v133[2];
        v282 = v133[3];
        if (v283 >= v282 >> 1)
          v133 = sub_1002CAB38((_QWORD *)(v282 > 1), v283 + 1, 1, v133);
        v133[2] = v283 + 1;
        v284 = &v133[6 * v283];
        v284[4] = v337;
        v284[5] = v264;
        v284[6] = v275;
        v284[7] = v280;
        v284[8] = 3;
        *((_BYTE *)v284 + 72) = v281 & 1;
        *(_DWORD *)((char *)v284 + 73) = 33686016;
        v114 = v334;
        v113 = v335;
      }
      else
      {
        v114 = v334;
        v113 = v335;
        v69 = v338;
        v42 = (unint64_t)v339;
      }

      goto LABEL_157;
    }
    swift_bridgeObjectRetain_n(v42, 2);
    v117 = Logger.logObject.getter(v116);
    v118 = static os_log_type_t.default.getter(v117);
    if (os_log_type_enabled(v117, v118))
    {
      v119 = (uint8_t *)swift_slowAlloc(12, -1);
      v120 = swift_slowAlloc(32, -1);
      *(_QWORD *)&aBlock = v120;
      *(_DWORD *)v119 = 136446210;
      swift_bridgeObjectRetain(v339);
      *(_QWORD *)&v346 = sub_10001A820(v330, (unint64_t)v339, (uint64_t *)&aBlock);
      v42 = (unint64_t)v339;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);
      swift_bridgeObjectRelease_n(v42, 3);
      _os_log_impl((void *)&_mh_execute_header, v117, v118, "UpdateAccountWithACAccount: Got an Apple ID, not eligible for CloudKit reminders. Will only process iCloud CalDAV account for it {accountID: %{public}s}", v119, 0xCu);
      swift_arrayDestroy(v120, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v120, -1, -1);
      swift_slowDealloc(v119, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v42, 2);
    }
    v114 = v334;
    v134 = sub_100552370(v29);
    v324 = v29;
    if (v135)
    {
      v136 = (uint64_t)v134;
      v137 = v135;
      swift_bridgeObjectRetain_n(v135, 2);
      v139 = Logger.logObject.getter(v138);
      v140 = static os_log_type_t.default.getter(v139);
      if (os_log_type_enabled(v139, v140))
      {
        v141 = (uint8_t *)swift_slowAlloc(12, -1);
        v142 = swift_slowAlloc(32, -1);
        *(_QWORD *)&aBlock = v142;
        *(_DWORD *)v141 = 136446210;
        swift_bridgeObjectRetain(v137);
        *(_QWORD *)&v346 = sub_10001A820(v136, v137, (uint64_t *)&aBlock);
        v69 = v338;
        v42 = (unint64_t)v339;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);
        swift_bridgeObjectRelease_n(v137, 3);
        _os_log_impl((void *)&_mh_execute_header, v139, v140, "UpdateAccountWithACAccount: AppleAccount {accountID: %{public}s} is ineligible for CloudKit Reminders, will process it as iCloud CalDAV", v141, 0xCu);
        swift_arrayDestroy(v142, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v142, -1, -1);
        swift_slowDealloc(v141, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v137, 2);
      }
      v173 = (void *)objc_opt_self(REMAppleAccountUtilities);
      v174 = objc_msgSend(v173, "accountDescriptionWithACAccount:", v29, v324);
      if (v174)
      {
        v175 = v174;
        v176 = static String._unconditionallyBridgeFromObjectiveC(_:)(v174);
        v178 = v177;

      }
      else
      {
        v176 = 0x64756F6C4369;
        v178 = 0xE600000000000000;
      }
      v133 = sub_1002CAB38(0, 1, 1, _swiftEmptyArrayStorage);
      v198 = v133[2];
      v197 = v133[3];
      if (v198 >= v197 >> 1)
        v133 = sub_1002CAB38((_QWORD *)(v197 > 1), v198 + 1, 1, v133);
      v133[2] = v198 + 1;
      v199 = &v133[6 * v198];
      v199[4] = v136;
      v199[5] = v137;
      v199[6] = v176;
      v199[7] = v178;
      v200 = 3;
LABEL_113:
      v199[8] = v200;
      *((_DWORD *)v199 + 18) = 33685505;
      *((_BYTE *)v199 + 76) = 2;
      goto LABEL_114;
    }
    v133 = _swiftEmptyArrayStorage;
    v113 = v335;
    goto LABEL_157;
  }
  v98 = -[NSObject accountType](v29, "accountType");
  if (!v98)
  {
LABEL_174:

    swift_release_n(v333);
    swift_release_n(v332);
    swift_release_n(v334);
    v50 = v335;

    __break(1u);
    goto LABEL_175;
  }
  v99 = v98;
  v100 = sub_100555EA8(v98);
  v102 = v101;

  v103 = v337;
  v324 = v29;
  if ((v102 & 1) == 0)
  {
    swift_bridgeObjectRetain_n(v42, 2);
    v105 = Logger.logObject.getter(v104);
    v106 = static os_log_type_t.default.getter(v105);
    v107 = os_log_type_enabled(v105, v106);
    v328 = v100;
    if (v107)
    {
      v108 = swift_slowAlloc(22, -1);
      v109 = v100;
      v110 = swift_slowAlloc(64, -1);
      *(_QWORD *)&aBlock = v110;
      *(_DWORD *)v108 = 136446466;
      swift_bridgeObjectRetain(v42);
      *(_QWORD *)&v346 = sub_10001A820(v330, v42, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);
      swift_bridgeObjectRelease_n(v339, 3);
      *(_WORD *)(v108 + 12) = 2082;
      v111 = REMAccountType.loggableDescription.getter(v109);
      *(_QWORD *)&v346 = sub_10001A820(v111, v112, (uint64_t *)&aBlock);
      v42 = (unint64_t)v339;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);
      v69 = v338;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v105, v106, "UpdateAccountWithACAccount: Will process non-Apple account {displayAccountID: %{public}s, accountType: %{public}s}", (uint8_t *)v108, 0x16u);
      swift_arrayDestroy(v110, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v110, -1, -1);
      swift_slowDealloc(v108, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v42, 2);
    }
    v113 = v335;
    v143 = sub_10055647C(v29);
    if (v144)
    {
      v145 = v144;
      v339 = v143;
      v146 = v29;
      swift_bridgeObjectRetain_n(v145, 2);
      v147 = v146;
      v148 = Logger.logObject.getter(v147);
      v149 = static os_log_type_t.default.getter(v148);
      if (os_log_type_enabled(v148, v149))
      {
        v150 = swift_slowAlloc(22, -1);
        v336 = swift_slowAlloc(8, -1);
        v337 = swift_slowAlloc(32, -1);
        *(_QWORD *)&aBlock = v337;
        *(_DWORD *)v150 = 136446466;
        swift_bridgeObjectRetain(v145);
        *(_QWORD *)&v346 = sub_10001A820((uint64_t)v339, v145, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);
        *(_QWORD *)&v151 = swift_bridgeObjectRelease_n(v145, 3).n128_u64[0];
        *(_WORD *)(v150 + 12) = 2114;
        v152 = (objc_class *)-[NSObject identifier](v147, "identifier", v151, v324);
        v153 = v152;
        if (v152)
          *(_QWORD *)&v346 = v152;
        else
          *(_QWORD *)&v346 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);
        v206 = v336;
        v336->isa = v153;

        _os_log_impl((void *)&_mh_execute_header, v148, v149, "UpdateAccountWithACAccount: Resolved non-Apple account identifier enabled for Reminders from displayACAccount: {resolved: %{public}s, displayACAccount: %{public}@}.", (uint8_t *)v150, 0x16u);
        v207 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v206, 1, v207);
        swift_slowDealloc(v206, -1, -1);
        v208 = v337;
        swift_arrayDestroy(v337, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v208, -1, -1);
        swift_slowDealloc(v150, -1, -1);

        v69 = v338;
      }
      else
      {

        swift_bridgeObjectRelease_n(v145, 2);
      }
      v209 = objc_msgSend((id)objc_opt_self(REMAppleAccountUtilities), "accountDescriptionWithACAccount:", v147);
      if (v209)
      {
        v210 = v209;
        v211 = static String._unconditionallyBridgeFromObjectiveC(_:)(v209);
        v213 = v212;

      }
      else
      {
        v211 = 0;
        v213 = 0xE000000000000000;
      }
      v133 = sub_1002CAB38(0, 1, 1, _swiftEmptyArrayStorage);
      v215 = v133[2];
      v214 = v133[3];
      if (v215 >= v214 >> 1)
        v133 = sub_1002CAB38((_QWORD *)(v214 > 1), v215 + 1, 1, v133);
      v216 = v339;
      v133[2] = v215 + 1;
      v199 = &v133[6 * v215];
      v199[4] = v216;
      v199[5] = v145;
      v199[6] = v211;
      v199[7] = v213;
      v200 = v328;
      goto LABEL_113;
    }
    v133 = _swiftEmptyArrayStorage;
    v114 = v334;
LABEL_157:
    v285 = v325;
    swift_retain_n(v325);
    swift_bridgeObjectRetain_n(v133, 2);
    v286 = v113;
    swift_retain();
    v287 = (uint64_t)v332;
    swift_retain();
    v115 = v333;
    swift_retain();
    v50 = v69;
    swift_bridgeObjectRetain(v42);
    v288 = v42;
    v289 = v331;
    swift_retain();
    sub_10055A2A8((uint64_t)v133, v329, v285, v330, v288, (uint64_t)v133, v286, v114, v287, v115, v50);
    swift_release_n(v289);
    swift_bridgeObjectRelease_n(v133, 2);
    v69 = v338;
    swift_bridgeObjectRelease();
    swift_release_n(v285);

    v29 = v287;
    swift_release_n(v114);
    swift_release_n(v287);
    swift_release_n(v115);
    goto LABEL_158;
  }
  v121 = v336;
  ((void (*)(char *, uint64_t, uint64_t))v336[2].isa)(v19, v89, v337);
  v16 = v29;
  v122 = Logger.logObject.getter(v16);
  v123 = static os_log_type_t.error.getter(v122);
  if (!os_log_type_enabled(v122, (os_log_type_t)v123))
  {

    ((void (*)(char *, uint64_t))v121[1].isa)(v19, v103);
    v133 = _swiftEmptyArrayStorage;
LABEL_114:
    v114 = v334;
    v113 = v335;
    goto LABEL_157;
  }
  v124 = (uint8_t *)swift_slowAlloc(12, -1);
  v125 = (void *)swift_slowAlloc(32, -1);
  *(_QWORD *)&aBlock = v125;
  *(_DWORD *)v124 = 136446210;
  v126 = -[NSObject accountType](v16, "accountType", v324);
  if (!v126)
  {
LABEL_178:

    v319 = v338;
    swift_release_n(v333);
    swift_release_n(v332);
    swift_release_n(v334);
    v320 = v335;

    __break(1u);
    goto LABEL_179;
  }
  v127 = v126;
  v327 = v125;
  LODWORD(v328) = v123;
  v128 = objc_msgSend(v126, "identifier");

  if (v128)
  {
    v129 = static String._unconditionallyBridgeFromObjectiveC(_:)(v128);
    v131 = v130;

    *(_QWORD *)&v346 = sub_10001A820(v129, v131, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v122, (os_log_type_t)v328, "UpdateAccountWithACAccount: Can't figure out REMAccountType for ACAccountType {acAccountType: %{public}s}", v124, 0xCu);
    v132 = v327;
    swift_arrayDestroy(v327, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v132, -1, -1);
    swift_slowDealloc(v124, -1, -1);

    ((void (*)(char *, uint64_t))v336[1].isa)(v19, v103);
    v133 = _swiftEmptyArrayStorage;
    v114 = v334;
    v113 = v335;
    v69 = v338;
    v42 = (unint64_t)v339;
    goto LABEL_157;
  }
LABEL_179:

  v321 = v338;
  swift_release_n(v333);
  swift_release_n(v332);
  swift_release_n(v334);
  v322 = v335;

  __break(1u);
}

void sub_10055E34C(char a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  os_log_type_t v40;
  uint64_t v41;
  void *v43;
  id v44;
  id v45;
  _QWORD v48[3];
  _BYTE v49[8];
  uint64_t v50;
  uint64_t v51[2];

  v18 = qword_100837880;
  v45 = a9;
  swift_retain();
  swift_retain();
  swift_retain();
  v19 = a13;
  v20 = v19;
  if ((a1 & 1) != 0)
  {
    if (v18 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v21 = type metadata accessor for Logger(0);
    sub_10001AAA8(v21, (uint64_t)qword_10084F6F8);
    swift_bridgeObjectRetain_n(a4, 2);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = v20;
      v26 = swift_slowAlloc(32, -1);
      v51[0] = v26;
      *(_DWORD *)v25 = 136446210;
      swift_bridgeObjectRetain(a4);
      v50 = sub_10001A820(a3, a4, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "UpdateAccountWithACAccount: Migration state fetched {accountID: %{public}s}", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      v27 = v26;
      v20 = v43;
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a4, 2);
    }
  }
  else
  {
    v44 = v19;
    if (v18 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v28 = type metadata accessor for Logger(0);
    sub_10001AAA8(v28, (uint64_t)qword_10084F6F8);
    swift_bridgeObjectRetain(a4);
    swift_errorRetain(a2);
    swift_bridgeObjectRetain(a4);
    v29 = swift_errorRetain(a2);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v41 = a7;
      v32 = swift_slowAlloc(22, -1);
      v33 = swift_slowAlloc(64, -1);
      v51[0] = v33;
      *(_DWORD *)v32 = 136315394;
      v40 = v31;
      v39 = v33;
      if (a2)
      {
        swift_getErrorValue(a2, v49, v48);
        v34 = Error.localizedDescription.getter(v48[1], v48[2]);
        v36 = v35;
      }
      else
      {
        v36 = 0xE300000000000000;
        v34 = 7104878;
      }
      v50 = sub_10001A820(v34, v36, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51);
      swift_bridgeObjectRelease();
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      *(_WORD *)(v32 + 12) = 2082;
      swift_bridgeObjectRetain(a4);
      v50 = sub_10001A820(a3, a4, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v30, v40, "UpdateAccountWithACAccount: Failed to fetch migration status. Assume the account is un-migrated {error: %s, accountID: %{public}s}", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      a7 = v41;
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);

      swift_bridgeObjectRelease_n(a4, 2);
    }
    v20 = v44;
  }
  v37 = v45;
  swift_retain();
  swift_retain();
  swift_retain();
  v38 = v20;
  sub_10055B888(a6, a7, 0, a8 & 1, a5, v37, a10, a11, a12, v38);

  swift_release_n(a10);
  swift_release_n(a11);
  swift_release_n(a12);

}

void sub_10055E80C(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6, void *a7, char a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *Strong;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  NSString v44;
  id v45;
  id v46;
  void *v47;
  void *v48;
  _QWORD *v49;
  void *v50;
  _QWORD *v51;
  id v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  void *v58;
  _QWORD *v59;
  id v61;
  id v62;
  id v64;
  uint64_t v65;
  uint64_t aBlock[5];
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;

  v17 = (_QWORD *)swift_allocObject(&unk_1007FAB70, 56, 7);
  v17[2] = a9;
  v17[3] = a10;
  v17[4] = a11;
  v17[5] = a12;
  v17[6] = a13;
  v18 = swift_allocObject(&unk_1007FAB98, 80, 7);
  v53 = a3;
  *(_QWORD *)(v18 + 16) = a3;
  *(_QWORD *)(v18 + 24) = a4;
  *(_QWORD *)(v18 + 32) = a5;
  *(_QWORD *)(v18 + 40) = a6;
  *(_QWORD *)(v18 + 48) = a7;
  *(_BYTE *)(v18 + 56) = a8;
  *(_QWORD *)(v18 + 64) = sub_100568430;
  *(_QWORD *)(v18 + 72) = v17;
  v55 = v18;
  v54 = a9;
  swift_retain();
  swift_retain();
  swift_retain();
  v19 = a13;
  swift_bridgeObjectRetain(a4);
  v65 = a5;
  swift_retain();
  v62 = a6;
  v59 = v17;
  v61 = a7;
  swift_retain();
  v20 = objc_msgSend(a1, "identifier");
  if (v20)
  {
    v21 = v20;
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v24 = v23;
    Strong = (void *)swift_unknownObjectWeakLoadStrong(a2 + 32, v23);
    if (Strong
      && (v26 = Strong,
          v27 = objc_msgSend(Strong, "cloudContext"),
          v26,
          v27))
    {
      v64 = v27;
      if (qword_100837880 != -1)
        swift_once(&qword_100837880, sub_100547F80);
      v28 = type metadata accessor for Logger(0);
      sub_10001AAA8(v28, (uint64_t)qword_10084F6F8);
      swift_bridgeObjectRetain_n(v24, 2);
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.default.getter(v30);
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc(12, -1);
        v33 = v22;
        v34 = swift_slowAlloc(32, -1);
        aBlock[0] = v34;
        *(_DWORD *)v32 = 136446210;
        swift_bridgeObjectRetain(v24);
        v68 = sub_10001A820(v33, v24, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);
        swift_bridgeObjectRelease_n(v24, 3);
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Fetch migration state from user record {accountID: %{public}s}", v32, 0xCu);
        swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
        v35 = v34;
        v22 = v33;
        swift_slowDealloc(v35, -1, -1);
        swift_slowDealloc(v32, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v24, 2);
      }
      v47 = v62;
      v49 = (_QWORD *)swift_allocObject(&unk_1007FABC0, 56, 7);
      v49[2] = v22;
      v49[3] = v24;
      v49[4] = sub_1005658A8;
      v49[5] = v55;
      v49[6] = a1;
      aBlock[4] = (uint64_t)sub_1005658B0;
      v67 = v49;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1000FF8C4;
      aBlock[3] = (uint64_t)&unk_1007FABD8;
      v50 = _Block_copy(aBlock);
      v51 = v67;
      swift_retain();
      v52 = a1;
      swift_release(v51);
      objc_msgSend(v64, "fetchUserRecordWithAccountID:completionHandler:", v21, v50);
      _Block_release(v50);
      swift_bridgeObjectRelease();
      swift_release(v55);

      v48 = v61;
    }
    else
    {
      v58 = v19;

      if (qword_100837880 != -1)
        swift_once(&qword_100837880, sub_100547F80);
      v36 = type metadata accessor for Logger(0);
      sub_10001AAA8(v36, (uint64_t)qword_10084F6F8);
      swift_bridgeObjectRetain(v24);
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.error.getter(v38);
      if (os_log_type_enabled(v38, v39))
      {
        v40 = (uint8_t *)swift_slowAlloc(12, -1);
        v41 = swift_slowAlloc(32, -1);
        aBlock[0] = v41;
        *(_DWORD *)v40 = 136446210;
        swift_bridgeObjectRetain(v24);
        v68 = sub_10001A820(v22, v24, aBlock);
        v42 = a4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);
        swift_bridgeObjectRelease_n(v24, 3);
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Missing cloud context for fetching migration state {accountID: %{public}s}", v40, 0xCu);
        swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v41, -1, -1);
        swift_slowDealloc(v40, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v24, 2);
        v42 = a4;
      }
      v43 = (void *)objc_opt_self(REMError);
      v44 = String._bridgeToObjectiveC()();
      v45 = objc_msgSend(v43, "internalErrorWithDebugDescription:", v44);

      v46 = v54;
      swift_retain();
      swift_retain();
      swift_retain();
      v21 = v58;
      v48 = v61;
      v47 = v62;
      sub_10055E34C(0, (uint64_t)v45, v53, v42, v65, (uint64_t)v62, (uint64_t)v61, a8 & 1, v46, a10, a11, a12, v21);
      swift_bridgeObjectRelease();
      swift_release(v55);

      swift_release(a10);
      swift_release(a11);
      swift_release(a12);
    }

    swift_release(v59);
    swift_release(v65);
  }
  else
  {

    swift_release(a12);
    swift_release(a11);
    swift_release(a10);

    swift_release(v17);
    swift_release(a5);
    swift_bridgeObjectRelease();
    __break(1u);
  }
}

uint64_t sub_10055EEA4(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
  void *v19;
  void *v20;
  id v21;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  _QWORD *v27;
  Class isa;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53[2];
  uint64_t v54;
  _BYTE v55[24];

  v19 = a9;
  if ((a1 & 1) != 0 || (a2 & 1) != 0)
  {
    swift_beginAccess(a4 + 16, v55, 0, 0);
    if (*(_BYTE *)(a4 + 16) == 1)
    {
      v50 = a3;
      v20 = (void *)objc_opt_self(REMUserDefaults);
      v21 = objc_msgSend(v20, "daemonUserDefaults");
      v22 = objc_msgSend(v21, "acAccountIdentifiersToMigrateInactivatedCalDavData");

      if (v22)
      {
        v23 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v22, &type metadata for String);

      }
      else
      {
        v23 = _swiftEmptyArrayStorage;
      }
      v24 = sub_10011EE40((uint64_t)v23);
      swift_bridgeObjectRelease(v23);
      v54 = v24;
      swift_bridgeObjectRetain(a6);
      sub_1002DB0E4(v53, a5, a6);
      v25 = objc_msgSend(v20, "daemonUserDefaults", swift_bridgeObjectRelease(v53[1]).n128_f64[0]);
      v26 = v54;
      v27 = sub_1001E8BAC(v54);
      swift_bridgeObjectRelease(v26);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_release(v27);
      objc_msgSend(v25, "setAcAccountIdentifiersToMigrateInactivatedCalDavData:", isa);

      if (qword_100837880 != -1)
        swift_once(&qword_100837880, sub_100547F80);
      v29 = type metadata accessor for Logger(0);
      sub_10001AAA8(v29, (uint64_t)qword_10084F6F8);
      v30 = swift_bridgeObjectRetain_n(a6, 2);
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.default.getter(v31);
      if (os_log_type_enabled(v31, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc(12, -1);
        v34 = swift_slowAlloc(32, -1);
        v53[0] = v34;
        *(_DWORD *)v33 = 136446210;
        swift_bridgeObjectRetain(a6);
        v52 = sub_10001A820(a5, a6, v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53);
        swift_bridgeObjectRelease_n(a6, 3);
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "UpdateAccountWithACAccount: inserting to daemonUserDefaults.acAccountIdentifiersToMigrateInactivatedCalDavData {displayAccountID: %{public}s}", v33, 0xCu);
        swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
        v35 = v34;
        v19 = a9;
        swift_slowDealloc(v35, -1, -1);
        swift_slowDealloc(v33, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a6, 2);
      }
      a3 = v50;
    }
  }
  v36 = a12;
  v37 = a11;
  v38 = *(_QWORD *)(a7 + 16);
  v39 = _swiftEmptyArrayStorage;
  if (v38)
  {
    v51 = a3;
    v49 = a8;
    v53[0] = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(a7);
    sub_1001C1B0C(0, v38, 0);
    v39 = (_QWORD *)v53[0];
    v48 = a7;
    v40 = (uint64_t *)(a7 + 40);
    do
    {
      v41 = *(v40 - 1);
      v42 = *v40;
      v53[0] = (uint64_t)v39;
      v43 = v39[2];
      v44 = v39[3];
      swift_bridgeObjectRetain(v42);
      if (v43 >= v44 >> 1)
      {
        sub_1001C1B0C(v44 > 1, v43 + 1, 1);
        v39 = (_QWORD *)v53[0];
      }
      v40 += 6;
      v39[2] = v43 + 1;
      v45 = &v39[2 * v43];
      v45[4] = v41;
      v45[5] = v42;
      --v38;
    }
    while (v38);
    swift_bridgeObjectRelease(v48);
    a8 = v49;
    a3 = v51;
    v36 = a12;
    v37 = a11;
  }
  v46 = swift_allocObject(&unk_1007FB160, 64, 7);
  *(_QWORD *)(v46 + 16) = a8;
  *(_QWORD *)(v46 + 24) = a10;
  *(_BYTE *)(v46 + 32) = v37 & 1;
  *(_QWORD *)(v46 + 40) = v36;
  *(_QWORD *)(v46 + 48) = a13;
  *(_QWORD *)(v46 + 56) = a3;
  swift_retain(a8);
  swift_retain(a13);
  swift_errorRetain(a3);
  sub_10054C754(v19, (uint64_t)sub_10056883C, v46);
  swift_bridgeObjectRelease(v39);
  return swift_release(v46);
}

double sub_10055F2E4(uint64_t a1, void *a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  void *v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  id v61;
  id v62;
  NSObject *v63;
  uint64_t v64;
  void *v65;
  id v66;
  uint64_t v67;
  id v68;
  unsigned int v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  id v78;
  id v79;
  id v80;
  NSObject *v81;
  os_log_type_t v82;
  uint64_t v83;
  void *v84;
  id v85;
  NSString v86;
  NSString v87;
  id v88;
  id v89;
  double v90;
  id v91;
  NSObject *v92;
  os_log_type_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  double v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  NSObject *v117;
  os_log_type_t v118;
  uint8_t *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  double result;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  _QWORD *v128;
  id v129;
  uint64_t v130;
  os_log_t v131;
  NSObject *v132;
  unint64_t v133;
  char type;
  id v136;
  BOOL v137;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  id v143;
  void *v144;
  id v145;
  id v146;
  int v147;
  int v148;
  int v149;
  int v150;
  os_log_type_t v151;
  uint64_t v152;
  void *v153;
  int v154;
  void *v155;
  os_log_type_t v156;
  void *v157;
  void *v158;
  void *v159;
  uint64_t v161;
  uint64_t v162;
  id aBlock[5];
  uint64_t v164;

  v17 = (_QWORD *)swift_allocObject(&unk_1007FB0C0, 64, 7);
  v17[2] = a7;
  v17[3] = a8;
  v17[4] = a9;
  *((_BYTE *)v17 + 40) = a10 & 1;
  v17[6] = a11;
  v17[7] = a12;
  v18 = swift_allocObject(&unk_1007FB0E8, 64, 7);
  *(_QWORD *)(v18 + 16) = a3;
  *(_QWORD *)(v18 + 24) = a4;
  v130 = a4;
  *(_QWORD *)(v18 + 32) = a5;
  *(_QWORD *)(v18 + 40) = a6;
  *(_QWORD *)(v18 + 48) = sub_10056882C;
  *(_QWORD *)(v18 + 56) = v17;
  v19 = objc_allocWithZone((Class)REMSaveRequest);
  v20 = a7;
  v21 = a7;
  v22 = a12;
  swift_retain(v21);
  v129 = a8;
  swift_retain(a12);
  v23 = a3;
  swift_retain(a3);
  v133 = a5;
  swift_bridgeObjectRetain(a5);
  v24 = a6;
  swift_bridgeObjectRetain(a6);
  swift_retain(v17);
  v25 = a1;
  v136 = objc_msgSend(v19, "initWithStore:", a2);
  v26 = *(_QWORD *)(a1 + 16);
  if (v26)
  {
    v125 = v20;
    v126 = v18;
    v127 = a3;
    v128 = v17;
    swift_bridgeObjectRetain(a1);
    v24 = 0;
    type = 0;
    v137 = 0;
    v27 = 1 - v26;
    while (1)
    {
      v28 = *(_QWORD *)(v25 + v24 + 32);
      v17 = *(_QWORD **)(v25 + v24 + 40);
      v29 = *(_QWORD *)(v25 + v24 + 48);
      v18 = *(_QWORD *)(v25 + v24 + 56);
      v23 = *(id *)(v25 + v24 + 64);
      v154 = *(unsigned __int8 *)(v25 + v24 + 73);
      v147 = *(unsigned __int8 *)(v25 + v24 + 74);
      v148 = *(unsigned __int8 *)(v25 + v24 + 75);
      v149 = *(unsigned __int8 *)(v25 + v24 + 76);
      v150 = *(unsigned __int8 *)(v25 + v24 + 72);
      v30 = qword_100837880;
      swift_bridgeObjectRetain_n(v17, 2);
      swift_bridgeObjectRetain_n(v18, 2);
      if (v30 != -1)
        swift_once(&qword_100837880, sub_100547F80);
      v31 = type metadata accessor for Logger(0);
      sub_10001AAA8(v31, (uint64_t)qword_10084F6F8);
      v32 = swift_bridgeObjectRetain_n(v17, 2);
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.default.getter(v33);
      v152 = v29;
      if (os_log_type_enabled(v33, v34))
      {
        v142 = v27;
        v35 = v18;
        v36 = v24;
        v37 = v28;
        v38 = swift_slowAlloc(12, -1);
        v39 = (void *)swift_slowAlloc(32, -1);
        aBlock[0] = v39;
        *(_DWORD *)v38 = 136446210;
        swift_bridgeObjectRetain(v17);
        *(_QWORD *)(v38 + 4) = sub_10001A820(v37, (unint64_t)v17, (uint64_t *)aBlock);
        swift_bridgeObjectRelease_n(v17, 3);
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "UpdateAccountsWithAccountInfos: Updating account object {accountID: %{public}s}", (uint8_t *)v38, 0xCu);
        swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v39, -1, -1);
        v40 = v38;
        v28 = v37;
        v24 = v36;
        v18 = v35;
        v27 = v142;
        swift_slowDealloc(v40, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v17, 2);
      }
      v41 = sub_1005520BC(v28, (unint64_t)v17);
      if (!v41)
      {
        swift_bridgeObjectRelease(v17);
        swift_bridgeObjectRelease_n(v18, 2);
        swift_bridgeObjectRetain(v17);
        v47 = Logger.logObject.getter(v46);
        v48 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v47, v48))
        {
          v18 = v24;
          v49 = v28;
          v50 = swift_slowAlloc(12, -1);
          v51 = (void *)swift_slowAlloc(32, -1);
          aBlock[0] = v51;
          *(_DWORD *)v50 = 136446210;
          swift_bridgeObjectRetain(v17);
          v52 = v49;
          v24 = v18;
          *(_QWORD *)(v50 + 4) = sub_10001A820(v52, (unint64_t)v17, (uint64_t *)aBlock);
          swift_bridgeObjectRelease_n(v17, 3);
          _os_log_impl((void *)&_mh_execute_header, v47, v48, "UpdateAccountsWithAccountInfos: Failed to create UUID object, account ignored {accountID: %{public}s}", (uint8_t *)v50, 0xCu);
          swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v51, -1, -1);
          swift_slowDealloc(v50, -1, -1);

          if (!v27)
            goto LABEL_66;
        }
        else
        {

          swift_bridgeObjectRelease_n(v17, 2);
          if (!v27)
          {
LABEL_66:
            swift_bridgeObjectRelease(v25);
            v24 = a6;
            v23 = v127;
            v17 = v128;
            v20 = v125;
            v18 = v126;
            v22 = a12;
            v115 = v130;
            if (!v137)
              goto LABEL_69;
            goto LABEL_73;
          }
        }
        goto LABEL_5;
      }
      v42 = v41;
      aBlock[0] = 0;
      v43 = objc_msgSend(a2, "fetchAccountWithObjectID:error:", v41, aBlock);
      v44 = aBlock[0];
      if (v43)
      {
        if ((v154 & 1) != 0)
        {
          v45 = v43;
LABEL_19:
          swift_bridgeObjectRelease(v18);
          swift_bridgeObjectRelease(v17);
          if (v45)
          {
            v141 = v28;
            v155 = v42;
            v56 = v43;
            swift_bridgeObjectRetain(v17);
            swift_bridgeObjectRetain(v18);
            v57 = v56;
            v58 = Logger.logObject.getter(v57);
            v59 = static os_log_type_t.default.getter(v58);
            if (os_log_type_enabled(v58, v59))
            {
              v60 = swift_slowAlloc(32, -1);
              v23 = (id)swift_slowAlloc(64, -1);
              aBlock[0] = v23;
              *(_DWORD *)v60 = 136315650;
              swift_bridgeObjectRetain(v18);
              *(_QWORD *)(v60 + 4) = sub_10001A820(v152, v18, (uint64_t *)aBlock);
              swift_bridgeObjectRelease_n(v18, 3);
              *(_WORD *)(v60 + 12) = 2082;
              swift_bridgeObjectRetain(v17);
              *(_QWORD *)(v60 + 14) = sub_10001A820(v141, (unint64_t)v17, (uint64_t *)aBlock);
              swift_bridgeObjectRelease_n(v17, 3);
              *(_WORD *)(v60 + 22) = 2048;
              v17 = objc_msgSend(v45, "type");

              *(_QWORD *)(v60 + 24) = v17;
              _os_log_impl((void *)&_mh_execute_header, v58, v59, "UpdateAccountsWithAccountInfos is going to delete account {accountName: %s, accountID: %{public}s, type: %ld}.", (uint8_t *)v60, 0x20u);
              swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v23, -1, -1);
              swift_slowDealloc(v60, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n(v17, 2);
              swift_bridgeObjectRelease_n(v18, 2);

            }
            v78 = objc_msgSend(v136, "updateAccount:", v45);
            objc_msgSend(v78, "removeFromStore");

            v25 = a1;
            if (!v27)
            {
              swift_bridgeObjectRelease(a1);
              type = 1;
              goto LABEL_72;
            }
            v137 = 1;
            type = 1;
            goto LABEL_5;
          }

          swift_bridgeObjectRelease(v18);
          swift_bridgeObjectRelease(v17);
          goto LABEL_4;
        }
        v61 = v43;
        if (objc_msgSend(v61, "type") != v23)
        {
          v145 = v23;
          v23 = (id)v28;
          v158 = v42;
          swift_bridgeObjectRelease(v18);
          swift_bridgeObjectRelease(v17);
          v79 = v61;
          swift_bridgeObjectRetain(v17);
          swift_bridgeObjectRetain(v18);
          v80 = v79;
          v81 = Logger.logObject.getter(v80);
          v82 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v81, v82))
          {
            v83 = swift_slowAlloc(42, -1);
            v84 = (void *)swift_slowAlloc(64, -1);
            aBlock[0] = v84;
            *(_DWORD *)v83 = 136315906;
            swift_bridgeObjectRetain(v18);
            *(_QWORD *)(v83 + 4) = sub_10001A820(v152, v18, (uint64_t *)aBlock);
            swift_bridgeObjectRelease_n(v18, 3);
            *(_WORD *)(v83 + 12) = 2082;
            swift_bridgeObjectRetain(v17);
            *(_QWORD *)(v83 + 14) = sub_10001A820((uint64_t)v23, (unint64_t)v17, (uint64_t *)aBlock);
            swift_bridgeObjectRelease_n(v17, 3);
            v18 = 2048;
            *(_WORD *)(v83 + 22) = 2048;
            v17 = objc_msgSend(v80, "type");

            *(_QWORD *)(v83 + 24) = v17;
            *(_WORD *)(v83 + 32) = 2048;
            *(_QWORD *)(v83 + 34) = v145;
            _os_log_impl((void *)&_mh_execute_header, v81, v82, "UpdateAccountsWithAccountInfos: Unexpected account type, account ignored. {accountName: %s, accountID: %{public}s, expectedType: %ld, actualType: %ld}", (uint8_t *)v83, 0x2Au);
            swift_arrayDestroy(v84, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v84, -1, -1);
            swift_slowDealloc(v83, -1, -1);

            goto LABEL_64;
          }

          swift_bridgeObjectRelease_n(v17, 2);
          swift_bridgeObjectRelease_n(v18, 2);

LABEL_4:
          v25 = a1;
          if (!v27)
            goto LABEL_66;
          goto LABEL_5;
        }
        swift_bridgeObjectRetain_n(v17, 2);
        swift_bridgeObjectRetain_n(v18, 2);
        v62 = v61;
        v63 = Logger.logObject.getter(v62);
        v156 = static os_log_type_t.default.getter(v63);
        v140 = v28;
        if (os_log_type_enabled(v63, v156))
        {
          v143 = v23;
          v64 = swift_slowAlloc(32, -1);
          v131 = (os_log_t)swift_slowAlloc(64, -1);
          aBlock[0] = v131;
          *(_DWORD *)v64 = 136315650;
          swift_bridgeObjectRetain(v18);
          v161 = sub_10001A820(v152, v18, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, &v162);
          swift_bridgeObjectRelease_n(v18, 3);
          *(_WORD *)(v64 + 12) = 2082;
          swift_bridgeObjectRetain(v17);
          v161 = sub_10001A820(v28, (unint64_t)v17, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, &v162);
          swift_bridgeObjectRelease_n(v17, 3);
          *(_WORD *)(v64 + 22) = 2048;
          v65 = v42;
          v66 = objc_msgSend(v62, "type");

          v161 = (uint64_t)v66;
          v42 = v65;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, &v162);

          _os_log_impl((void *)&_mh_execute_header, v63, v156, "UpdateAccountsWithAccountInfos is updating existing account object {name: %s, accountID: %{public}s, type: %ld}", (uint8_t *)v64, 0x20u);
          swift_arrayDestroy(v131, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v131, -1, -1);
          v67 = v64;
          v23 = v143;
          swift_slowDealloc(v67, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v17, 2);
          swift_bridgeObjectRelease_n(v18, 2);

        }
        v85 = objc_msgSend(v136, "updateAccount:", v62);
        v86 = String._bridgeToObjectiveC()();
        objc_msgSend(v85, "setName:", v86, swift_bridgeObjectRelease(v18).n128_f64[0]);

      }
      else
      {
        v53 = v44;
        v140 = v28;
        v54 = _convertNSErrorToError(_:)(v44);

        swift_willThrow(v55);
        v45 = 0;
        swift_errorRelease(v54);
        if (v154)
          goto LABEL_19;
        if ((v150 & 1) == 0)
        {
          v68 = objc_msgSend(objc_allocWithZone((Class)REMAccountTypeHost), "initWithType:", v23);
          v69 = objc_msgSend(v68, "isCloudKit");

          if (!v69)
          {
            swift_bridgeObjectRelease(v18);
            swift_bridgeObjectRelease(v17);
            swift_bridgeObjectRetain(v17);
            swift_bridgeObjectRetain(v18);
            v107 = Logger.logObject.getter(v106);
            v108 = static os_log_type_t.info.getter(v107);
            if (os_log_type_enabled(v107, v108))
            {
              v109 = swift_slowAlloc(32, -1);
              v158 = v42;
              v110 = (void *)swift_slowAlloc(96, -1);
              aBlock[0] = v110;
              *(_DWORD *)v109 = 136315650;
              swift_bridgeObjectRetain(v18);
              *(_QWORD *)(v109 + 4) = sub_10001A820(v152, v18, (uint64_t *)aBlock);
              swift_bridgeObjectRelease_n(v18, 3);
              *(_WORD *)(v109 + 12) = 2082;
              swift_bridgeObjectRetain(v17);
              *(_QWORD *)(v109 + 14) = sub_10001A820(v140, (unint64_t)v17, (uint64_t *)aBlock);
              swift_bridgeObjectRelease_n(v17, 3);
              *(_WORD *)(v109 + 22) = 2082;
              v111 = REMAccountType.loggableDescription.getter(v23);
              v113 = v112;
              *(_QWORD *)(v109 + 24) = sub_10001A820(v111, v112, (uint64_t *)aBlock);
              swift_bridgeObjectRelease(v113);
              _os_log_impl((void *)&_mh_execute_header, v107, v108, "UpdateAccountsWithAccountInfos won't create inactive accounts unless it is CloudKit {name: %s, accountID: %{public}s, type: %{public}s}", (uint8_t *)v109, 0x20u);
              swift_arrayDestroy(v110, 3, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v110, -1, -1);
              swift_slowDealloc(v109, -1, -1);

LABEL_64:
            }
            else
            {

              swift_bridgeObjectRelease_n(v17, 2);
              swift_bridgeObjectRelease_n(v18, 2);

            }
            goto LABEL_4;
          }
        }
        swift_bridgeObjectRetain_n(v17, 2);
        v70 = swift_bridgeObjectRetain_n(v18, 2);
        v71 = Logger.logObject.getter(v70);
        v72 = static os_log_type_t.default.getter(v71);
        if (os_log_type_enabled(v71, v72))
        {
          v73 = swift_slowAlloc(32, -1);
          v144 = (void *)swift_slowAlloc(96, -1);
          aBlock[0] = v144;
          *(_DWORD *)v73 = 136315650;
          swift_bridgeObjectRetain(v18);
          v161 = sub_10001A820(v152, v18, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, &v162);
          swift_bridgeObjectRelease_n(v18, 3);
          v157 = v42;
          *(_WORD *)(v73 + 12) = 2082;
          swift_bridgeObjectRetain(v17);
          v161 = sub_10001A820(v140, (unint64_t)v17, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, &v162);
          swift_bridgeObjectRelease_n(v17, 3);
          *(_WORD *)(v73 + 22) = 2082;
          v74 = REMAccountType.loggableDescription.getter(v23);
          v76 = v75;
          v161 = sub_10001A820(v74, v75, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, &v162);
          v77 = v76;
          v42 = v157;
          swift_bridgeObjectRelease(v77);
          _os_log_impl((void *)&_mh_execute_header, v71, v72, "UpdateAccountsWithAccountInfos is creating account object {name: %s, accountID: %{public}s, type: %{public}s}", (uint8_t *)v73, 0x20u);
          swift_arrayDestroy(v144, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v144, -1, -1);
          swift_slowDealloc(v73, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v17, 2);
          swift_bridgeObjectRelease_n(v18, 2);
        }
        v87 = String._bridgeToObjectiveC()();
        v88 = objc_msgSend(v136, "__addAccountWithType:name:", v23, v87, swift_bridgeObjectRelease(v18).n128_f64[0]);

        v85 = v88;
        objc_msgSend(v85, "setObjectID:", v42);
        v89 = objc_msgSend(objc_allocWithZone((Class)REMAccountTypeHost), "initWithType:", v23);
        LODWORD(v88) = objc_msgSend(v89, "isCloudKit");

        if ((_DWORD)v88)
        {
          objc_msgSend(v85, "setPersistenceCloudSchemaVersion:", 20240715);
          type = 1;
          v86 = v85;
        }
        else
        {
          v86 = String._bridgeToObjectiveC()();
          objc_msgSend(v85, "setExternalIdentifier:", v86);

          type = 1;
        }
      }

      if (v150 == objc_msgSend(v85, "inactive"))
      {
        v146 = v23;
        objc_msgSend(v85, "setInactive:", v150 ^ 1u);
        v91 = v85;
        swift_bridgeObjectRetain(v17);
        v23 = v91;
        v92 = Logger.logObject.getter(v23);
        v93 = static os_log_type_t.default.getter(v92);
        if (os_log_type_enabled(v92, v93))
        {
          v159 = v42;
          v94 = swift_slowAlloc(32, -1);
          v153 = (void *)swift_slowAlloc(96, -1);
          aBlock[0] = v153;
          *(_DWORD *)v94 = 136446722;
          v151 = v93;
          v95 = Bool.yesno.getter(objc_msgSend(v23, "inactive"));
          v132 = v92;
          v97 = v96;
          v161 = sub_10001A820(v95, v96, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, &v162);

          swift_bridgeObjectRelease(v97);
          *(_WORD *)(v94 + 12) = 2082;
          swift_bridgeObjectRetain(v17);
          v161 = sub_10001A820(v140, (unint64_t)v17, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, &v162);
          swift_bridgeObjectRelease_n(v17, 3);
          *(_WORD *)(v94 + 22) = 2082;
          v98 = REMAccountType.loggableDescription.getter(v146);
          v100 = v99;
          v161 = sub_10001A820(v98, v99, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, &v162);
          swift_bridgeObjectRelease(v100);
          swift_arrayDestroy(v153, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v153, -1, -1);
          v101 = v94;
          v42 = v159;
          swift_slowDealloc(v101, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v17, 2);
        }
      }
      else
      {
        *(_QWORD *)&v90 = swift_bridgeObjectRelease(v17).n128_u64[0];
      }
      if (v147 != 2)
      {
        if (objc_msgSend(v85, "didChooseToMigrateLocally", v90)
          && objc_msgSend(v85, "didChooseToMigrate")
          && (v147 & 1) == 0)
        {
          objc_msgSend(v85, "setDidChooseToMigrateLocally:", 0);
        }
        objc_msgSend(v85, "setDidChooseToMigrate:", v147 & 1);
      }
      if (v148 != 2)
        objc_msgSend(v85, "setDidFinishMigration:", v148 & 1);
      swift_bridgeObjectRelease(v18);
      *(_QWORD *)&v102 = swift_bridgeObjectRelease(v17).n128_u64[0];
      if (v149 != 2)
        objc_msgSend(v85, "setDebugSyncDisabled:", v149 & 1, v102);
      if (!v137)
      {
        v103 = objc_msgSend(v85, "changedKeys");
        v104 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v103, &type metadata for String, &protocol witness table for String);

        v105 = *(_QWORD *)(v104 + 16);
        swift_bridgeObjectRelease(v104);
        v137 = v105 != 0;
        goto LABEL_4;
      }

      if (!v27)
      {
        swift_bridgeObjectRelease(a1);
LABEL_72:
        v24 = a6;
        v23 = v127;
        v17 = v128;
        v18 = v126;
LABEL_73:
        v117 = Logger.logObject.getter(v114);
        v118 = static os_log_type_t.default.getter(v117);
        if (os_log_type_enabled(v117, v118))
        {
          v119 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v119 = 0;
          _os_log_impl((void *)&_mh_execute_header, v117, v118, "UpdateAccountsWithAccountInfos: Saving account object changes", v119, 2u);
          swift_slowDealloc(v119, -1, -1);
        }

        if (qword_100836F28 == -1)
        {
LABEL_76:
          v120 = qword_100871CE8;
          v121 = swift_allocObject(&unk_1007FB110, 34, 7);
          *(_QWORD *)(v121 + 16) = sub_1005658FC;
          *(_QWORD *)(v121 + 24) = v18;
          *(_BYTE *)(v121 + 32) = type & 1;
          *(_BYTE *)(v121 + 33) = 1;
          aBlock[4] = sub_100568E9C;
          v164 = v121;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = (id)1107296256;
          aBlock[2] = sub_1000E18E4;
          aBlock[3] = &unk_1007FB128;
          v122 = _Block_copy(aBlock);
          v123 = v164;
          swift_retain(v18);
          swift_release(v123);
          objc_msgSend(v136, "saveWithQueue:completion:", v120, v122);

          _Block_release(v122);
          swift_release(v23);
          goto LABEL_77;
        }
LABEL_79:
        swift_once(&qword_100836F28, sub_1001BA8F8);
        goto LABEL_76;
      }
      v137 = 1;
      v25 = a1;
LABEL_5:
      ++v27;
      v24 += 48;
      if (v27 == 1)
      {
        __break(1u);
        goto LABEL_79;
      }
    }
  }
  type = 0;
  v115 = v130;
LABEL_69:
  swift_retain(v20);
  v116 = v129;
  swift_retain(v22);
  sub_10055EEA4(type & 1, 0, 0, (uint64_t)v23, v115, v133, v24, v20, v116, a9, a10 & 1, a11, v22);
  swift_release(v23);
  swift_release(v18);

  swift_release(v20);
  v18 = v22;
LABEL_77:
  swift_release(v18);
  swift_release(v17);
  swift_bridgeObjectRelease(v24);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v133).n128_u64[0];
  return result;
}

void sub_100560898(NSObject *a1, void *a2, int a3, int a4, char *a5, uint64_t a6, void *a7, uint64_t a8, char a9, uint64_t a10, NSObject *a11)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  id v25;
  void *v26;
  unint64_t v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  NSObject *v45;
  NSObject *v46;
  NSObject *v47;
  int v48;
  uint64_t v49;
  id v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  double v55;
  id v56;
  void *v57;
  id v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  NSObject *v63;
  char v64;
  int v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  NSObject *v70;
  NSObject *v71;
  NSObject *v72;
  uint64_t v73;
  os_log_type_t v74;
  BOOL v75;
  uint64_t v76;
  id v77;
  void *v78;
  uint64_t v79;
  NSObject *v80;
  unint64_t v81;
  id v82;
  void *v83;
  id v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  void *v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint64_t v97;
  _BYTE *v98;
  unsigned __int8 v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  id v103;
  void *v104;
  _QWORD *v105;
  char v106;
  char v107;
  char *v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  uint64_t v112;
  _BYTE *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  BOOL v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  NSObject *v125;
  os_log_type_t v126;
  uint8_t *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  NSObject *v132;
  int v133;
  uint8_t *v134;
  uint64_t v135;
  id v136;
  void *v137;
  id v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  void *v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  NSObject *v149;
  os_log_type_t v150;
  uint8_t *v151;
  uint64_t v152;
  NSObject *v153;
  id v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  NSObject *v158;
  NSObject *v159;
  NSObject *v160;
  os_log_type_t v161;
  _BOOL4 v162;
  uint64_t v163;
  _QWORD *v164;
  id v165;
  id v166;
  uint64_t v167;
  uint64_t v168;
  id v169;
  unsigned int v170;
  void *Strong;
  void *v172;
  uint64_t v173;
  NSObject *v174;
  NSObject *v175;
  uint64_t v176;
  uint64_t v177;
  id v178;
  uint64_t v179;
  uint64_t v180;
  id v181;
  id v182;
  void *v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  void *v191;
  id v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  NSObject *v197;
  uint64_t v198;
  NSObject *v199;
  os_log_type_t v200;
  uint8_t *v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  NSObject *v207;
  os_log_type_t v208;
  uint8_t *v209;
  NSObject *v210;
  uint64_t v211;
  uint64_t v212;
  id v213;
  void *v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  NSObject *v222;
  os_log_type_t v223;
  uint8_t *v224;
  uint64_t v225;
  uint8_t *v226;
  uint64_t v227;
  NSObject *v228;
  os_log_type_t v229;
  uint8_t *v230;
  uint64_t v231;
  id v232;
  uint64_t v233;
  char *v234;
  char *v235;
  NSObject *v236;
  os_log_type_t v237;
  _BOOL4 v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  char *v243;
  unsigned __int8 v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  id v252;
  void *v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  double v257;
  char v258;
  _BYTE *v259;
  unsigned __int8 v260;
  uint64_t v261;
  unsigned __int8 v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  _QWORD *v266;
  void *v267;
  unint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  NSObject *v272;
  os_log_type_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  id v279;
  void *v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  char v284;
  unint64_t v285;
  unint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  NSObject *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  NSObject *v293;
  os_log_type_t v294;
  uint8_t *v295;
  uint64_t v296;
  void *v297;
  id v298;
  id v299;
  id v300;
  uint64_t v301;
  NSObject *v302;
  char *v303;
  void *v304;
  uint64_t v305;
  void *v306;
  uint64_t v307;
  NSObject *v308;
  id v309;
  NSObject *v310;
  NSObject *v311;
  NSObject *v312;
  NSObject *v313;
  NSObject *v314;
  NSObject *v315;
  NSObject *v316;
  NSObject *v317;
  NSObject *v318;
  uint64_t v319;
  uint64_t v320;
  _BYTE *v321;
  uint64_t v322;
  NSObject *v323;
  int v324;
  uint64_t v325;
  char *v326;
  char *v327;
  void *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  uint64_t v333;
  uint64_t v334;
  NSObject *v335;
  uint64_t v336;
  NSObject *v337;
  char *v338;
  unint64_t v339;
  char *v340;
  uint64_t v341;
  __int128 aBlock;
  __int128 v343;
  uint64_t (*v344)();
  uint64_t v345;
  __int128 v346;
  __int128 v347;

  v327 = a5;
  v324 = a4;
  LODWORD(v325) = a3;
  v328 = a2;
  v338 = (char *)type metadata accessor for Logger(0);
  v336 = *((_QWORD *)v338 - 1);
  v15 = __chkstk_darwin(v338);
  v17 = (char *)&v320 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v326 = (char *)&v320 - v19;
  __chkstk_darwin(v18);
  v21 = (char *)&v320 - v20;
  v22 = swift_allocObject(&unk_1007FAF58, 64, 7);
  *(_QWORD *)(v22 + 16) = a6;
  *(_QWORD *)(v22 + 24) = a7;
  *(_QWORD *)(v22 + 32) = a8;
  v332 = a9 & 1;
  *(_BYTE *)(v22 + 40) = v332;
  *(_QWORD *)(v22 + 48) = a10;
  *(_QWORD *)(v22 + 56) = a11;
  v334 = a6;
  swift_retain_n(a6, 3);
  v23 = a7;
  swift_retain_n(a11, 3);
  v335 = v23;
  v24 = -[NSObject displayAccount](a1, "displayAccount");
  if (!v24)
    v24 = a1;
  v25 = -[NSObject identifier](v24, "identifier");
  if (!v25)
  {
    swift_release_n(a11, 3);
    v310 = v335;

    swift_release_n(v334, 3);
    __break(1u);
LABEL_168:
    swift_release_n(a11, 3);
    v311 = v335;

    swift_release_n(v334, 3);
    __break(1u);
  }
  v26 = v25;
  v329 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v339 = v27;

  v28 = -[NSObject accountType](v24, "accountType");
  if (!v28)
    goto LABEL_168;
  v29 = v28;
  v330 = a10;
  v331 = a8;
  v333 = v22;
  v337 = a11;
  v30 = objc_msgSend(v28, "identifier");

  if (!v30)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierAppleAccount);
    v36 = v38;
LABEL_12:
    v37 = v339;
    if ((-[NSObject isEnabledForDataclass:](v24, "isEnabledForDataclass:", ACAccountDataclassReminders, swift_bridgeObjectRelease(v36).n128_f64[0]) & 1) == 0)goto LABEL_24;
    goto LABEL_13;
  }
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v33 = v32;

  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierAppleAccount);
  v36 = v35;
  if (!v33)
    goto LABEL_12;
  v37 = v339;
  if (v31 == v34 && v33 == v35)
  {
    swift_bridgeObjectRelease_n(v33, 2);
    if ((-[NSObject isEnabledForDataclass:](v24, "isEnabledForDataclass:", ACAccountDataclassReminders) & 1) == 0)
    {
LABEL_24:
      if (qword_100837880 != -1)
        swift_once(&qword_100837880, sub_100547F80);
      v66 = v338;
      v67 = sub_10001AAA8((uint64_t)v338, (uint64_t)qword_10084F6F8);
      v68 = v336;
      (*(void (**)(char *, uint64_t, char *))(v336 + 16))(v21, v67, v66);
      v69 = a1;
      v70 = v24;
      v71 = v69;
      v72 = v70;
      swift_bridgeObjectRetain(v37);
      a1 = Logger.logObject.getter(v73);
      v74 = static os_log_type_t.error.getter();
      v75 = os_log_type_enabled(a1, v74);
      v46 = v337;
      if (!v75)
      {

        swift_bridgeObjectRelease_n(v37, 2);
        (*(void (**)(char *, char *))(v68 + 8))(v21, v66);
        goto LABEL_32;
      }
      v76 = swift_slowAlloc(32, -1);
      v328 = (void *)swift_slowAlloc(96, -1);
      *(_QWORD *)&aBlock = v328;
      *(_DWORD *)v76 = 136446722;
      v77 = -[NSObject identifier](v71, "identifier");
      if (v77)
      {
        v78 = v77;
        v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
        v46 = v80;

        *(_QWORD *)&v346 = sub_10001A820(v79, (unint64_t)v46, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);

        swift_bridgeObjectRelease(v46);
        *(_WORD *)(v76 + 12) = 2082;
        v81 = v339;
        swift_bridgeObjectRetain(v339);
        *(_QWORD *)&v346 = sub_10001A820(v329, v81, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);
        swift_bridgeObjectRelease_n(v81, 3);
        *(_WORD *)(v76 + 22) = 2082;
        v82 = -[NSObject accountType](v72, "accountType");
        if (v82)
        {
          v83 = v82;
          v84 = objc_msgSend(v82, "identifier");

          v46 = v337;
          if (v84)
          {
            v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
            v87 = v86;

            *(_QWORD *)&v346 = sub_10001A820(v85, v87, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);

            swift_bridgeObjectRelease(v87);
            _os_log_impl((void *)&_mh_execute_header, a1, v74, "UpdateAccountWithACAccount: ACAccount type is not supported or reminders dataclass is not enabled {accountID: %{public}s, displayAccountID: %{public}s, accountType: %{public}s}", (uint8_t *)v76, 0x20u);
            v88 = v328;
            swift_arrayDestroy(v328, 3, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v88, -1, -1);
            swift_slowDealloc(v76, -1, -1);

            (*(void (**)(char *, char *))(v336 + 8))(v21, v338);
LABEL_32:
            v63 = v335;
            v89 = v332 != 0;
            v90 = swift_allocObject(&unk_1007FAF80, 64, 7);
            v91 = v334;
            v92 = v331;
            *(_QWORD *)(v90 + 16) = v334;
            *(_QWORD *)(v90 + 24) = v92;
            *(_BYTE *)(v90 + 32) = v89;
            *(_QWORD *)(v90 + 40) = v330;
            *(_QWORD *)(v90 + 48) = v46;
            *(_QWORD *)(v90 + 56) = 0;
            swift_retain(v91);
            swift_retain(v46);
            sub_10054C754(v63, (uint64_t)sub_10056883C, v90);
            swift_release(v46);

            swift_release_n(v91, 2);
            swift_release(v333);

            swift_release(v90);
LABEL_158:
            swift_release(v46);

            return;
          }
          goto LABEL_171;
        }
      }
      else
      {

        swift_bridgeObjectRelease(v339);
        swift_release_n(v337, 3);
        v72 = v335;

        swift_release_n(v334, 3);
        __break(1u);
      }

      swift_release_n(v337, 3);
      v72 = v335;

      swift_release_n(v334, 3);
      __break(1u);
LABEL_171:

      swift_release_n(v46, 3);
      v312 = v335;

      swift_release_n(v334, 3);
      __break(1u);
      goto LABEL_172;
    }
LABEL_23:
    v65 = 1;
    goto LABEL_34;
  }
  v64 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v33, v34, v35, 0);
  swift_bridgeObjectRelease(v33);
  if ((-[NSObject isEnabledForDataclass:](v24, "isEnabledForDataclass:", ACAccountDataclassReminders, swift_bridgeObjectRelease(v36).n128_f64[0]) & 1) == 0)goto LABEL_24;
  if ((v64 & 1) != 0)
    goto LABEL_23;
LABEL_13:
  v39 = -[NSObject accountPropertyForKey:](a1, "accountPropertyForKey:", REMDA_kCalDAVMobileAccountDelegatePrincipalPath);
  if (v39)
  {
    v40 = v39;
    _bridgeAnyObjectToAny(_:)(&aBlock, v39);
    swift_bridgeObjectRelease(v37);
    swift_unknownObjectRelease(v40);
    sub_10000882C((uint64_t)&aBlock, (uint64_t *)&unk_10083D5B0);
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v41 = v338;
    v42 = sub_10001AAA8((uint64_t)v338, (uint64_t)qword_10084F6F8);
    v43 = v336;
    (*(void (**)(char *, uint64_t, char *))(v336 + 16))(v17, v42, v41);
    v44 = a1;
    v45 = v24;
    v46 = v44;
    a1 = v45;
    v47 = Logger.logObject.getter(a1);
    v48 = static os_log_type_t.default.getter(v47);
    if (os_log_type_enabled(v47, (os_log_type_t)v48))
    {
      LODWORD(v339) = v48;
      v49 = swift_slowAlloc(22, -1);
      v329 = swift_slowAlloc(64, -1);
      *(_QWORD *)&aBlock = v329;
      *(_DWORD *)v49 = 136446466;
      v50 = -[NSObject identifier](v46, "identifier");
      if (!v50)
      {
LABEL_173:

        swift_release_n(v337, 3);
        v314 = v335;

        swift_release_n(v334, 3);
        __break(1u);
        goto LABEL_174;
      }
      v51 = v50;
      v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
      v54 = v53;

      *(_QWORD *)&v346 = sub_10001A820(v52, v54, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);

      *(_QWORD *)&v55 = swift_bridgeObjectRelease(v54).n128_u64[0];
      *(_WORD *)(v49 + 12) = 2082;
      v56 = -[NSObject accountType](a1, "accountType", v55);
      if (!v56)
      {
LABEL_174:

        swift_release_n(v337, 3);
        v315 = v335;

        swift_release_n(v334, 3);
        __break(1u);
        goto LABEL_175;
      }
      v57 = v56;
      v58 = objc_msgSend(v56, "identifier");

      v46 = v337;
      if (!v58)
      {
LABEL_175:

        swift_release_n(v46, 3);
        v316 = v335;

        swift_release_n(v334, 3);
        __break(1u);
        goto LABEL_176;
      }
      v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
      v61 = v60;

      *(_QWORD *)&v346 = sub_10001A820(v59, v61, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);

      swift_bridgeObjectRelease(v61);
      _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v339, "UpdateAccountWithACAccount: Skip handling CalDAV delegate account {accountID: %{public}s, displayAccountType: %{public}s}", (uint8_t *)v49, 0x16u);
      v62 = v329;
      swift_arrayDestroy(v329, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1, -1);
      swift_slowDealloc(v49, -1, -1);

      (*(void (**)(char *, char *))(v336 + 8))(v17, v41);
      v63 = v335;
    }
    else
    {

      (*(void (**)(char *, char *))(v43 + 8))(v17, v41);
      v63 = v335;
      v46 = v337;
    }
    v120 = v332 != 0;
    v121 = swift_allocObject(&unk_1007FAFF8, 64, 7);
    v122 = v334;
    v123 = v331;
    *(_QWORD *)(v121 + 16) = v334;
    *(_QWORD *)(v121 + 24) = v123;
    *(_BYTE *)(v121 + 32) = v120;
    *(_QWORD *)(v121 + 40) = v330;
    *(_QWORD *)(v121 + 48) = v46;
    *(_QWORD *)(v121 + 56) = 0;
    swift_retain(v122);
    swift_retain(v46);
    sub_10054C754(v63, (uint64_t)sub_10056883C, v121);
    swift_release(v46);

    swift_release_n(v122, 2);
    swift_release(v333);

    swift_release(v121);
    goto LABEL_158;
  }
  aBlock = 0u;
  v343 = 0u;
  sub_10000882C((uint64_t)&aBlock, (uint64_t *)&unk_10083D5B0);
  v65 = 0;
LABEL_34:
  if (qword_100837880 != -1)
    swift_once(&qword_100837880, sub_100547F80);
  v93 = sub_10001AAA8((uint64_t)v338, (uint64_t)qword_10084F6F8);
  v94 = swift_bridgeObjectRetain_n(v37, 2);
  v322 = v93;
  v95 = Logger.logObject.getter(v94);
  v96 = static os_log_type_t.default.getter(v95);
  if (os_log_type_enabled(v95, v96))
  {
    a1 = swift_slowAlloc(12, -1);
    v97 = swift_slowAlloc(32, -1);
    *(_QWORD *)&aBlock = v97;
    LODWORD(a1->isa) = 136446210;
    swift_bridgeObjectRetain(v339);
    *(_QWORD *)&v346 = sub_10001A820(v329, v339, (uint64_t *)&aBlock);
    v37 = v339;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);
    swift_bridgeObjectRelease_n(v37, 3);
    _os_log_impl((void *)&_mh_execute_header, v95, v96, "UpdateAccountWithACAccount: Try to update account object {accountID: %{public}s}", (uint8_t *)a1, 0xCu);
    swift_arrayDestroy(v97, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v97, -1, -1);
    swift_slowDealloc(a1, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v37, 2);
  }
  v46 = v337;
  v98 = (_BYTE *)swift_allocObject(&unk_1007FA120, 17, 7);
  v98[16] = 0;
  v99 = -[NSObject rem_isEligibleForCloudKitReminders](v24, "rem_isEligibleForCloudKitReminders");
  v323 = v24;
  if (v65)
  {
    if ((v99 & 1) == 0)
    {
      v124 = swift_bridgeObjectRetain_n(v37, 2);
      v125 = Logger.logObject.getter(v124);
      v126 = static os_log_type_t.default.getter(v125);
      if (os_log_type_enabled(v125, v126))
      {
        v127 = (uint8_t *)swift_slowAlloc(12, -1);
        v128 = swift_slowAlloc(32, -1);
        *(_QWORD *)&aBlock = v128;
        *(_DWORD *)v127 = 136446210;
        swift_bridgeObjectRetain(v339);
        *(_QWORD *)&v346 = sub_10001A820(v329, v339, (uint64_t *)&aBlock);
        v37 = v339;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);
        swift_bridgeObjectRelease_n(v37, 3);
        _os_log_impl((void *)&_mh_execute_header, v125, v126, "UpdateAccountWithACAccount: Got an Apple ID, not eligible for CloudKit reminders. Will only process iCloud CalDAV account for it {accountID: %{public}s}", v127, 0xCu);
        swift_arrayDestroy(v128, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v128, -1, -1);
        swift_slowDealloc(v127, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v37, 2);
      }
      v63 = v335;
      v144 = sub_100552370(v323);
      if (v145)
      {
        v146 = (uint64_t)v144;
        v147 = v145;
        v148 = swift_bridgeObjectRetain_n(v145, 2);
        v149 = Logger.logObject.getter(v148);
        v150 = static os_log_type_t.default.getter(v149);
        if (os_log_type_enabled(v149, v150))
        {
          v151 = (uint8_t *)swift_slowAlloc(12, -1);
          v152 = swift_slowAlloc(32, -1);
          *(_QWORD *)&aBlock = v152;
          *(_DWORD *)v151 = 136446210;
          swift_bridgeObjectRetain(v147);
          *(_QWORD *)&v346 = sub_10001A820(v146, v147, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);
          swift_bridgeObjectRelease_n(v147, 3);
          _os_log_impl((void *)&_mh_execute_header, v149, v150, "UpdateAccountWithACAccount: AppleAccount {accountID: %{public}s} is ineligible for CloudKit Reminders, will process it as iCloud CalDAV", v151, 0xCu);
          swift_arrayDestroy(v152, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v152, -1, -1);
          swift_slowDealloc(v151, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v147, 2);
        }
        v182 = objc_msgSend((id)objc_opt_self(REMAppleAccountUtilities), "accountDescriptionWithACAccount:", v323);
        if (v182)
        {
          v183 = v182;
          v184 = static String._unconditionallyBridgeFromObjectiveC(_:)(v182);
          v186 = v185;

        }
        else
        {
          v184 = 0x64756F6C4369;
          v186 = 0xE600000000000000;
        }
        v143 = sub_1002CAB38(0, 1, 1, _swiftEmptyArrayStorage);
        v204 = v143[2];
        v203 = v143[3];
        if (v204 >= v203 >> 1)
          v143 = sub_1002CAB38((_QWORD *)(v203 > 1), v204 + 1, 1, v143);
        v143[2] = v204 + 1;
        v205 = &v143[6 * v204];
        v205[4] = v146;
        v205[5] = v147;
        v205[6] = v184;
        v205[7] = v186;
        v205[8] = 3;
        *((_DWORD *)v205 + 18) = 33685505;
        *((_BYTE *)v205 + 76) = 2;
        v63 = v335;
        v37 = v339;
      }
      else
      {
        v143 = _swiftEmptyArrayStorage;
      }
      goto LABEL_156;
    }
    *(_QWORD *)&v346 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMACAccountPropertyDidChooseToMigrate);
    *((_QWORD *)&v346 + 1) = v100;
    v101 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v346, &type metadata for String);
    v102 = -[NSObject objectForKeyedSubscript:](v24, "objectForKeyedSubscript:", v101);
    swift_unknownObjectRelease(v101);
    if (v102)
    {
      _bridgeAnyObjectToAny(_:)(&v346, v102);
      swift_unknownObjectRelease(v102);
    }
    else
    {
      v346 = 0u;
      v347 = 0u;
    }
    v63 = v335;
    sub_10001A5E8((uint64_t)&v346, (uint64_t)&aBlock);
    if (*((_QWORD *)&v343 + 1))
    {
      v167 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
      if ((swift_dynamicCast(&v340, &aBlock, (char *)&type metadata for Any + 8, v167, 6) & 1) != 0)
      {
        v169 = v340;
        v170 = objc_msgSend(v340, "BOOLValue");

        goto LABEL_78;
      }
    }
    else
    {
      sub_10000882C((uint64_t)&aBlock, (uint64_t *)&unk_10083D5B0);
    }
    if (v325 == 2)
    {
      Strong = (void *)swift_unknownObjectWeakLoadStrong(v327 + 32, v168);
      if (Strong)
      {
        v172 = Strong;
        if (objc_msgSend(Strong, "hasPassedBuddyAndSystemDataMigrator"))
        {

          if ((v324 & 1) != 0)
          {
            v173 = v334;
            swift_retain(v334);
            v174 = v63;
            swift_retain(v46);
            v175 = v323;
            swift_bridgeObjectRetain(v37);
            v176 = v333;
            swift_retain(v333);
            v177 = (uint64_t)v327;
            swift_retain(v327);
            v178 = v328;
            LOBYTE(v319) = v332;
            sub_1005481FC((uint64_t)v175, v177, v329, v37, v177, (uint64_t)v175, (uint64_t)v178, 1, v173, v174, v331, v319, v330, (uint64_t)v46, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100563808);
            swift_release(v46);

            swift_release_n(v173, 2);
            swift_release(v98);
            swift_release_n(v176, 2);

            swift_bridgeObjectRelease(v37);
            goto LABEL_158;
          }
        }
        else
        {
          v221 = swift_bridgeObjectRetain_n(v37, 2);
          v222 = Logger.logObject.getter(v221);
          v223 = static os_log_type_t.default.getter(v222);
          if (os_log_type_enabled(v222, v223))
          {
            v224 = (uint8_t *)swift_slowAlloc(12, -1);
            v225 = swift_slowAlloc(32, -1);
            *(_QWORD *)&aBlock = v225;
            *(_DWORD *)v224 = 136446210;
            swift_bridgeObjectRetain(v339);
            *(_QWORD *)&v346 = sub_10001A820(v329, v339, (uint64_t *)&aBlock);
            v37 = v339;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);
            swift_bridgeObjectRelease_n(v37, 3);
            _os_log_impl((void *)&_mh_execute_header, v222, v223, "UpdateAccountWithACAccount: hasPassedBuddyAndSystemDataMigrator != true, setting shouldFetchMigrationState to false {accountID: %{public}s}", v224, 0xCu);
            swift_arrayDestroy(v225, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v225, -1, -1);
            v226 = v224;
            v63 = v335;
            swift_slowDealloc(v226, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v37, 2);
          }
        }
      }
      v321 = v98;
      swift_bridgeObjectRetain(v37);
      v293 = Logger.logObject.getter(v292);
      v294 = static os_log_type_t.default.getter(v293);
      if (os_log_type_enabled(v293, v294))
      {
        v295 = (uint8_t *)swift_slowAlloc(12, -1);
        v296 = swift_slowAlloc(32, -1);
        *(_QWORD *)&aBlock = v296;
        *(_DWORD *)v295 = 136446210;
        swift_bridgeObjectRetain(v37);
        *(_QWORD *)&v346 = sub_10001A820(v329, v37, (uint64_t *)&aBlock);
        v63 = v335;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);
        swift_bridgeObjectRelease_n(v37, 3);
        _os_log_impl((void *)&_mh_execute_header, v293, v294, "UpdateAccountWithACAccount: Will not fetch migration state {accountID: %{public}s}", v295, 0xCu);
        swift_arrayDestroy(v296, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v296, -1, -1);
        swift_slowDealloc(v295, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v37, 2);
      }
      v297 = (void *)objc_opt_self(REMAppleAccountUtilities);
      v298 = objc_msgSend(v297, "sharedInstance");
      v299 = objc_msgSend(v298, "accountStore");

      v300 = objc_msgSend(v297, "sharedInstance");
      v301 = swift_allocObject(&unk_1007FAFA8, 64, 7);
      v302 = v323;
      v303 = v327;
      *(_QWORD *)(v301 + 16) = v323;
      *(_QWORD *)(v301 + 24) = v303;
      v304 = v328;
      *(_QWORD *)(v301 + 32) = v328;
      *(_BYTE *)(v301 + 40) = v324 & 1;
      v305 = v333;
      *(_QWORD *)(v301 + 48) = sub_10056882C;
      *(_QWORD *)(v301 + 56) = v305;
      v344 = sub_100565338;
      v345 = v301;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      *(_QWORD *)&v343 = sub_1001BCC34;
      *((_QWORD *)&v343 + 1) = &unk_1007FAFC0;
      v306 = _Block_copy(&aBlock);
      v307 = v345;
      v308 = v302;
      swift_retain(v305);
      swift_retain(v303);
      v309 = v304;
      swift_release(v307);
      objc_msgSend(v300, "saveDidChooseToMigrate:didFinishMigration:toACAccount:inStore:completionHandler:", 0, 0, v308, v299, v306);

      _Block_release(v306);
      swift_release(v46);

      swift_release_n(v334, 2);
      swift_release(v305);
      swift_release(v321);

      goto LABEL_158;
    }
    v170 = v325 & 1;
LABEL_78:
    *(_QWORD *)&aBlock = static String._unconditionallyBridgeFromObjectiveC(_:)(REMACAccountPropertyDidFinishMigration);
    *((_QWORD *)&aBlock + 1) = v179;
    v180 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&aBlock, &type metadata for String);
    v181 = -[NSObject objectForKeyedSubscript:](v323, "objectForKeyedSubscript:", v180);
    swift_unknownObjectRelease(v180);
    if (v181)
    {
      _bridgeAnyObjectToAny(_:)(&v346, v181);
      swift_unknownObjectRelease(v181);
    }
    else
    {
      v346 = 0u;
      v347 = 0u;
    }
    sub_10001A5E8((uint64_t)&v346, (uint64_t)&aBlock);
    if (*((_QWORD *)&v343 + 1))
    {
      v187 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
      if (swift_dynamicCast(&v340, &aBlock, (char *)&type metadata for Any + 8, v187, 6))
        v189 = v340;
      else
        v189 = 0;
      HIBYTE(v341) = 0;
      if (v170)
        goto LABEL_90;
    }
    else
    {
      sub_10000882C((uint64_t)&aBlock, (uint64_t *)&unk_10083D5B0);
      v189 = 0;
      HIBYTE(v341) = 0;
      if (v170)
      {
LABEL_90:
        v190 = swift_unknownObjectWeakLoadStrong(v327 + 32, v188);
        if (!v190)
        {
          swift_bridgeObjectRelease(v37);
          v207 = Logger.logObject.getter(v206);
          v208 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v207, v208))
          {
            v209 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v209 = 0;
            _os_log_impl((void *)&_mh_execute_header, v207, v208, "Store controller missing for checking whether migration has failed", v209, 2u);
            swift_slowDealloc(v209, -1, -1);
            v210 = v323;
          }
          else
          {
            v210 = v207;
            v207 = v323;
          }
          swift_release(v333);
          swift_release(v98);

          swift_release(v46);
          v291 = v334;
          goto LABEL_157;
        }
        v191 = (void *)v190;
        v192 = sub_1005520BC(v329, v37);
        if (!v192)
        {
          swift_bridgeObjectRetain(v37);
          v228 = Logger.logObject.getter(v227);
          v229 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v228, v229))
          {
            v321 = v98;
            v230 = (uint8_t *)swift_slowAlloc(12, -1);
            v231 = swift_slowAlloc(32, -1);
            *(_QWORD *)&aBlock = v231;
            *(_DWORD *)v230 = 136315138;
            swift_bridgeObjectRetain(v37);
            *(_QWORD *)&v346 = sub_10001A820(v329, v37, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);
            swift_bridgeObjectRelease_n(v37, 3);
            _os_log_impl((void *)&_mh_execute_header, v228, v229, "Display ACAccount ID is not an UUID {displayACAccountID: %s}", v230, 0xCu);
            swift_arrayDestroy(v231, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v231, -1, -1);
            swift_slowDealloc(v230, -1, -1);
            swift_release(v46);
            v63 = v335;

            swift_release_n(v334, 2);
            swift_release(v333);
            swift_release(v321);

          }
          else
          {
            swift_release(v46);
            v63 = v335;

            swift_release_n(v334, 2);
            swift_release(v333);
            swift_release(v98);

            swift_bridgeObjectRelease_n(v37, 2);
          }

          goto LABEL_158;
        }
        v193 = v192;
        sub_10027A4DC(v192, v191);
        v195 = v194;

        v196 = *(unsigned __int8 *)(v195 + 88);
        swift_release(v195);
        HIBYTE(v341) = v196 ^ 1;
        goto LABEL_95;
      }
    }
    v196 = 1;
LABEL_95:
    v197 = v323;
    if (v189 && ((v196 | objc_msgSend(v189, "BOOLValue") ^ 1) & 1) == 0)
    {
      v98[16] = 1;
      v198 = swift_bridgeObjectRetain_n(v37, 2);
      v199 = Logger.logObject.getter(v198);
      v200 = static os_log_type_t.default.getter(v199);
      if (os_log_type_enabled(v199, v200))
      {
        v201 = (uint8_t *)swift_slowAlloc(12, -1);
        v202 = swift_slowAlloc(32, -1);
        *(_QWORD *)&aBlock = v202;
        *(_DWORD *)v201 = 136446210;
        swift_bridgeObjectRetain(v339);
        *(_QWORD *)&v346 = sub_10001A820(v329, v339, (uint64_t *)&aBlock);
        v37 = v339;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);
        swift_bridgeObjectRelease_n(v37, 3);
        _os_log_impl((void *)&_mh_execute_header, v199, v200, "UpdateAccountWithACAccount: setting shouldMigrateInactivatedICloudCalDavData to true {displayAccountID: %{public}s}", v201, 0xCu);
        swift_arrayDestroy(v202, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v202, -1, -1);
        swift_slowDealloc(v201, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v37, 2);
      }
      v197 = v323;
    }
    v232 = -[NSObject aa_isAccountClass:](v197, "aa_isAccountClass:", AAAccountClassPrimary);
    if ((_DWORD)v232)
      v233 = _auto_REMAccountTypeForPrimaryCloudKit(v232);
    else
      v233 = 6;
    LODWORD(v327) = HIBYTE(v341);
    v234 = v189;
    swift_bridgeObjectRetain_n(v37, 2);
    v235 = v234;
    v236 = Logger.logObject.getter(v235);
    v237 = static os_log_type_t.default.getter(v236);
    v238 = os_log_type_enabled(v236, v237);
    LODWORD(v336) = v170;
    v326 = v189;
    v338 = v235;
    if (v238)
    {
      v321 = v98;
      v239 = swift_slowAlloc(44, -1);
      v325 = swift_slowAlloc(96, -1);
      *(_QWORD *)&aBlock = v325;
      *(_DWORD *)v239 = 136447234;
      swift_bridgeObjectRetain(v37);
      *(_QWORD *)&v346 = sub_10001A820(v329, v37, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);
      swift_bridgeObjectRelease_n(v37, 3);
      *(_WORD *)(v239 + 12) = 2082;
      v240 = REMAccountType.loggableDescription.getter(v233);
      v242 = v241;
      *(_QWORD *)&v346 = sub_10001A820(v240, v241, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);
      swift_bridgeObjectRelease(v242);
      *(_WORD *)(v239 + 22) = 1024;
      LODWORD(v346) = v170;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 4);
      *(_WORD *)(v239 + 28) = 1024;
      LODWORD(v346) = (_DWORD)v327;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 4);
      *(_WORD *)(v239 + 34) = 2082;
      if (v189)
      {
        v243 = v338;
        v244 = objc_msgSend(v338, "BOOLValue");
      }
      else
      {
        v244 = 2;
        v243 = v338;
      }
      LOBYTE(v346) = v244;
      v245 = sub_10001A630((uint64_t *)&unk_10084DBC0);
      v246 = String.init<A>(describing:)(&v346, v245);
      v248 = v247;
      *(_QWORD *)&v346 = sub_10001A820(v246, v247, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);

      swift_bridgeObjectRelease(v248);
      _os_log_impl((void *)&_mh_execute_header, v236, v237, "UpdateAccountWithACAccount: Will process CloudKit account {accountID: %{public}s, type: %{public}s, didChooseToMigrate: %{BOOL}d, shouldShowCloudKitAccount: %{BOOL}d, didFinishMigration: %{public}s}", (uint8_t *)v239, 0x2Cu);
      v249 = v325;
      swift_arrayDestroy(v325, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v249, -1, -1);
      swift_slowDealloc(v239, -1, -1);

      v197 = v323;
      v37 = v339;
      v98 = v321;
      v235 = v243;
    }
    else
    {

      swift_bridgeObjectRelease_n(v37, 2);
    }
    v250 = v233;
    v251 = (char *)objc_opt_self(REMAppleAccountUtilities);
    v252 = objc_msgSend(v251, "accountDescriptionWithACAccount:", v197);
    if (v252)
    {
      v253 = v252;
      v254 = static String._unconditionallyBridgeFromObjectiveC(_:)(v252);
      v256 = v255;

    }
    else
    {
      v254 = 0;
      v256 = 0;
    }
    v327 = v251;
    *(_QWORD *)&v257 = swift_beginAccess((char *)&v341 + 7, &aBlock, 0, 0).n128_u64[0];
    v258 = HIBYTE(v341);
    v259 = v98;
    if (v326)
      v260 = objc_msgSend(v235, "BOOLValue", v257);
    else
      v260 = 2;
    v261 = 0x64756F6C4369;
    v262 = -[NSObject aa_isAccountClass:](v197, "aa_isAccountClass:", AAAccountClassBasic);
    if (v256)
    {
      v261 = v254;
      v263 = v256;
    }
    else
    {
      v263 = 0xE600000000000000;
    }
    swift_bridgeObjectRetain(v37);
    v143 = sub_1002CAB38(0, 1, 1, _swiftEmptyArrayStorage);
    v265 = v143[2];
    v264 = v143[3];
    if (v265 >= v264 >> 1)
      v143 = sub_1002CAB38((_QWORD *)(v264 > 1), v265 + 1, 1, v143);
    v143[2] = v265 + 1;
    v266 = &v143[6 * v265];
    v37 = v339;
    v266[4] = v329;
    v266[5] = v37;
    v266[6] = v261;
    v266[7] = v263;
    v266[8] = v250;
    *((_BYTE *)v266 + 72) = v258;
    *((_BYTE *)v266 + 73) = 0;
    *((_BYTE *)v266 + 74) = v336;
    *((_BYTE *)v266 + 75) = v260;
    *((_BYTE *)v266 + 76) = v262;
    v267 = sub_100552370(v323);
    if (v268)
    {
      v269 = (uint64_t)v267;
      v270 = v268;
      v271 = swift_bridgeObjectRetain_n(v268, 2);
      v272 = Logger.logObject.getter(v271);
      v273 = static os_log_type_t.default.getter(v272);
      v98 = v259;
      if (os_log_type_enabled(v272, v273))
      {
        v274 = v269;
        v275 = swift_slowAlloc(18, -1);
        v276 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v346 = v276;
        *(_DWORD *)v275 = 136446466;
        swift_bridgeObjectRetain(v270);
        v340 = (char *)sub_10001A820(v274, v270, (uint64_t *)&v346);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v340, &v341);
        swift_bridgeObjectRelease_n(v270, 3);
        *(_WORD *)(v275 + 12) = 1024;
        LODWORD(v340) = v336;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v340, (char *)&v340 + 4);
        _os_log_impl((void *)&_mh_execute_header, v272, v273, "UpdateAccountWithACAccount: Will process iCloud CalDAV account {accountID: %{public}s, didChooseToMigrate: %{BOOL}d}", (uint8_t *)v275, 0x12u);
        swift_arrayDestroy(v276, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v276, -1, -1);
        v277 = v275;
        v269 = v274;
        swift_slowDealloc(v277, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v270, 2);
      }
      v278 = 0x64756F6C4369;
      v279 = objc_msgSend(v327, "accountDescriptionWithACAccount:", v323);
      if (v279)
      {
        v280 = v279;
        v281 = static String._unconditionallyBridgeFromObjectiveC(_:)(v279);
        v283 = v282;

      }
      else
      {
        v281 = 0;
        v283 = 0;
      }
      v46 = v337;
      v284 = HIBYTE(v341) ^ 1;
      if (v283)
        v278 = v281;
      else
        v283 = 0xE600000000000000;
      v286 = v143[2];
      v285 = v143[3];
      if (v286 >= v285 >> 1)
        v143 = sub_1002CAB38((_QWORD *)(v285 > 1), v286 + 1, 1, v143);
      v143[2] = v286 + 1;
      v287 = &v143[6 * v286];
      v287[4] = v269;
      v287[5] = v270;
      v287[6] = v278;
      v287[7] = v283;
      v287[8] = 3;
      *((_BYTE *)v287 + 72) = v284 & 1;
      *(_DWORD *)((char *)v287 + 73) = 33686016;
      v37 = v339;
    }
    else
    {
      v46 = v337;
      v98 = v259;
    }

    goto LABEL_155;
  }
  v103 = -[NSObject accountType](v24, "accountType");
  if (!v103)
  {
LABEL_172:
    swift_release_n(v46, 3);
    v313 = v335;

    swift_release_n(v334, 3);
    __break(1u);
    goto LABEL_173;
  }
  v104 = v103;
  v105 = (_QWORD *)sub_100555EA8(v103);
  v107 = v106;

  v108 = v338;
  if ((v107 & 1) == 0)
  {
    v109 = swift_bridgeObjectRetain_n(v37, 2);
    v110 = Logger.logObject.getter(v109);
    v111 = static os_log_type_t.default.getter(v110);
    if (os_log_type_enabled(v110, v111))
    {
      v112 = swift_slowAlloc(22, -1);
      v113 = v98;
      v114 = v105;
      v115 = swift_slowAlloc(64, -1);
      *(_QWORD *)&aBlock = v115;
      *(_DWORD *)v112 = 136446466;
      swift_bridgeObjectRetain(v37);
      *(_QWORD *)&v346 = sub_10001A820(v329, v37, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);
      swift_bridgeObjectRelease_n(v339, 3);
      *(_WORD *)(v112 + 12) = 2082;
      v116 = REMAccountType.loggableDescription.getter(v114);
      v118 = v117;
      *(_QWORD *)&v346 = sub_10001A820(v116, v117, (uint64_t *)&aBlock);
      v37 = v339;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);
      swift_bridgeObjectRelease(v118);
      _os_log_impl((void *)&_mh_execute_header, v110, v111, "UpdateAccountWithACAccount: Will process non-Apple account {displayAccountID: %{public}s, accountType: %{public}s}", (uint8_t *)v112, 0x16u);
      swift_arrayDestroy(v115, 2, (char *)&type metadata for Any + 8);
      v119 = v115;
      v105 = v114;
      v98 = v113;
      swift_slowDealloc(v119, -1, -1);
      swift_slowDealloc(v112, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v37, 2);
    }
    v153 = v323;
    v154 = sub_10055647C(v323);
    if (v155)
    {
      v156 = (uint64_t)v154;
      v157 = v155;
      v158 = v153;
      swift_bridgeObjectRetain_n(v157, 2);
      v159 = v158;
      v160 = Logger.logObject.getter(v159);
      v161 = static os_log_type_t.default.getter(v160);
      v162 = os_log_type_enabled(v160, v161);
      v339 = v156;
      if (v162)
      {
        v321 = v98;
        v338 = (char *)v105;
        v163 = swift_slowAlloc(22, -1);
        v164 = (_QWORD *)swift_slowAlloc(8, -1);
        v336 = swift_slowAlloc(32, -1);
        *(_QWORD *)&aBlock = v336;
        *(_DWORD *)v163 = 136446466;
        swift_bridgeObjectRetain(v157);
        *(_QWORD *)&v346 = sub_10001A820(v156, v157, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);
        swift_bridgeObjectRelease_n(v157, 3);
        *(_WORD *)(v163 + 12) = 2114;
        v165 = -[NSObject identifier](v159, "identifier");
        v166 = v165;
        if (v165)
          *(_QWORD *)&v346 = v165;
        else
          *(_QWORD *)&v346 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);
        *v164 = v166;

        _os_log_impl((void *)&_mh_execute_header, v160, v161, "UpdateAccountWithACAccount: Resolved non-Apple account identifier enabled for Reminders from displayACAccount: {resolved: %{public}s, displayACAccount: %{public}@}.", (uint8_t *)v163, 0x16u);
        v211 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v164, 1, v211);
        swift_slowDealloc(v164, -1, -1);
        v212 = v336;
        swift_arrayDestroy(v336, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v212, -1, -1);
        swift_slowDealloc(v163, -1, -1);

        v46 = v337;
        v105 = v338;
        v98 = v321;
      }
      else
      {

        swift_bridgeObjectRelease_n(v157, 2);
      }
      v213 = objc_msgSend((id)objc_opt_self(REMAppleAccountUtilities), "accountDescriptionWithACAccount:", v159);
      if (v213)
      {
        v214 = v213;
        v215 = static String._unconditionallyBridgeFromObjectiveC(_:)(v213);
        v217 = v216;

      }
      else
      {
        v215 = 0;
        v217 = 0xE000000000000000;
      }
      v143 = sub_1002CAB38(0, 1, 1, _swiftEmptyArrayStorage);
      v219 = v143[2];
      v218 = v143[3];
      if (v219 >= v218 >> 1)
        v143 = sub_1002CAB38((_QWORD *)(v218 > 1), v219 + 1, 1, v143);
      v143[2] = v219 + 1;
      v220 = &v143[6 * v219];
      v220[4] = v339;
      v220[5] = v157;
      v220[6] = v215;
      v220[7] = v217;
      v220[8] = v105;
      *((_DWORD *)v220 + 18) = 33685505;
      *((_BYTE *)v220 + 76) = 2;
      goto LABEL_155;
    }
    goto LABEL_65;
  }
  v129 = v336;
  v130 = v326;
  (*(void (**)(char *, uint64_t, char *))(v336 + 16))(v326, v322, v338);
  v131 = v130;
  a1 = v24;
  v132 = Logger.logObject.getter(a1);
  v133 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v132, (os_log_type_t)v133))
  {

    (*(void (**)(char *, char *))(v129 + 8))(v131, v108);
LABEL_65:
    v143 = _swiftEmptyArrayStorage;
LABEL_155:
    v63 = v335;
    goto LABEL_156;
  }
  v134 = (uint8_t *)swift_slowAlloc(12, -1);
  v135 = swift_slowAlloc(32, -1);
  *(_QWORD *)&aBlock = v135;
  *(_DWORD *)v134 = 136446210;
  v136 = -[NSObject accountType](a1, "accountType");
  if (!v136)
  {
LABEL_176:

    swift_release_n(v337, 3);
    v317 = v335;

    swift_release_n(v334, 3);
    __break(1u);
    goto LABEL_177;
  }
  v137 = v136;
  v325 = v135;
  LODWORD(v327) = v133;
  v138 = objc_msgSend(v136, "identifier");

  if (v138)
  {
    v139 = static String._unconditionallyBridgeFromObjectiveC(_:)(v138);
    v141 = v140;

    *(_QWORD *)&v346 = sub_10001A820(v139, v141, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8);

    swift_bridgeObjectRelease(v141);
    _os_log_impl((void *)&_mh_execute_header, v132, (os_log_type_t)v327, "UpdateAccountWithACAccount: Can't figure out REMAccountType for ACAccountType {acAccountType: %{public}s}", v134, 0xCu);
    v142 = v325;
    swift_arrayDestroy(v325, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v142, -1, -1);
    swift_slowDealloc(v134, -1, -1);

    (*(void (**)(char *, char *))(v336 + 8))(v131, v108);
    v143 = _swiftEmptyArrayStorage;
    v63 = v335;
    v46 = v337;
    v37 = v339;
LABEL_156:
    swift_retain_n(v98, 2);
    swift_bridgeObjectRetain_n(v143, 2);
    v288 = v334;
    swift_retain(v334);
    v289 = v63;
    swift_retain(v46);
    swift_bridgeObjectRetain(v37);
    v290 = v333;
    swift_retain(v333);
    sub_10055F2E4((uint64_t)v143, v328, v98, v329, v37, (uint64_t)v143, v288, v289, v331, v332, v330, (uint64_t)v46);
    swift_release_n(v290, 2);
    swift_bridgeObjectRelease_n(v143, 2);
    swift_bridgeObjectRelease(v37);
    swift_release_n(v98, 2);

    swift_release_n(v288, 3);
    v291 = (uint64_t)v46;
LABEL_157:
    swift_release_n(v291, 2);
    goto LABEL_158;
  }
LABEL_177:

  swift_release_n(v337, 3);
  v318 = v335;

  swift_release_n(v334, 3);
  __break(1u);
}

uint64_t sub_100563370(char a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, void *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void (*a15)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, id, uint64_t, _BYTE, uint64_t, uint64_t))
{
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, id, uint64_t, _BYTE, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  id v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v44;
  _QWORD v47[3];
  _BYTE v48[8];
  uint64_t v49;
  uint64_t v50[2];

  v20 = a15;
  v21 = qword_100837880;
  swift_retain(a9);
  v44 = a10;
  swift_retain(a14);
  if ((a1 & 1) != 0)
  {
    if (v21 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v22 = type metadata accessor for Logger(0);
    sub_10001AAA8(v22, (uint64_t)qword_10084F6F8);
    v23 = swift_bridgeObjectRetain_n(a4, 2);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = a7;
      v27 = swift_slowAlloc(32, -1);
      v50[0] = v27;
      *(_DWORD *)v26 = 136446210;
      swift_bridgeObjectRetain(a4);
      v49 = sub_10001A820(a3, a4, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "UpdateAccountWithACAccount: Migration state fetched {accountID: %{public}s}", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      v28 = v27;
      a7 = v41;
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a4, 2);
    }
  }
  else
  {
    if (v21 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v29 = type metadata accessor for Logger(0);
    sub_10001AAA8(v29, (uint64_t)qword_10084F6F8);
    swift_bridgeObjectRetain(a4);
    swift_errorRetain(a2);
    swift_bridgeObjectRetain(a4);
    v30 = swift_errorRetain(a2);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v42 = a7;
      v33 = swift_slowAlloc(22, -1);
      v34 = swift_slowAlloc(64, -1);
      v50[0] = v34;
      *(_DWORD *)v33 = 136315394;
      v40 = v34;
      if (a2)
      {
        swift_getErrorValue(a2, v48, v47);
        v35 = Error.localizedDescription.getter(v47[1], v47[2]);
        v37 = v36;
      }
      else
      {
        v37 = 0xE300000000000000;
        v35 = 7104878;
      }
      v49 = sub_10001A820(v35, v37, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50);
      swift_bridgeObjectRelease(v37);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      *(_WORD *)(v33 + 12) = 2082;
      swift_bridgeObjectRetain(a4);
      v49 = sub_10001A820(a3, a4, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "UpdateAccountWithACAccount: Failed to fetch migration status. Assume the account is un-migrated {error: %s, accountID: %{public}s}", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v33, -1, -1);

      v20 = a15;
      a7 = v42;
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);

      swift_bridgeObjectRelease_n(a4, 2);
      v20 = a15;
    }
  }
  swift_retain(a9);
  v38 = v44;
  swift_retain(a14);
  v20(a6, a7, 0, a8 & 1, a5, a9, v38, a11, a12 & 1, a13, a14);
  swift_release_n(a9, 2);

  return swift_release_n(a14, 2);
}

void sub_100563808(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6, void *a7, char a8, uint64_t a9, void *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *Strong;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  void *v45;
  NSString v46;
  id v47;
  id v48;
  _QWORD *v49;
  void *v50;
  _QWORD *v51;
  id v52;
  uint64_t v53;
  char v54;
  id v56;
  unint64_t v58;
  unint64_t v59;
  uint64_t v61;
  id v63;
  uint64_t v64;
  uint64_t aBlock[5];
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;

  v18 = swift_allocObject(&unk_1007FB020, 64, 7);
  *(_QWORD *)(v18 + 16) = a9;
  *(_QWORD *)(v18 + 24) = a10;
  *(_QWORD *)(v18 + 32) = a11;
  *(_BYTE *)(v18 + 40) = a12 & 1;
  *(_QWORD *)(v18 + 48) = a13;
  *(_QWORD *)(v18 + 56) = a14;
  v19 = v18;
  v20 = swift_allocObject(&unk_1007FB048, 80, 7);
  v53 = a3;
  *(_QWORD *)(v20 + 16) = a3;
  *(_QWORD *)(v20 + 24) = a4;
  *(_QWORD *)(v20 + 32) = a5;
  *(_QWORD *)(v20 + 40) = a6;
  *(_QWORD *)(v20 + 48) = a7;
  v54 = a8;
  *(_BYTE *)(v20 + 56) = a8;
  *(_QWORD *)(v20 + 64) = sub_10056882C;
  *(_QWORD *)(v20 + 72) = v19;
  swift_retain(a9);
  v21 = a10;
  swift_retain(a14);
  swift_bridgeObjectRetain(a4);
  v64 = a5;
  swift_retain(a5);
  v22 = a6;
  v23 = a7;
  v61 = v19;
  swift_retain(v19);
  v24 = objc_msgSend(a1, "identifier");
  if (v24)
  {
    v25 = v24;
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v28 = v27;
    Strong = (void *)swift_unknownObjectWeakLoadStrong(a2 + 32, v27);
    if (Strong
      && (v30 = Strong,
          v31 = objc_msgSend(Strong, "cloudContext"),
          v30,
          v31))
    {
      v56 = v23;
      if (qword_100837880 != -1)
        swift_once(&qword_100837880, sub_100547F80);
      v32 = type metadata accessor for Logger(0);
      sub_10001AAA8(v32, (uint64_t)qword_10084F6F8);
      v33 = swift_bridgeObjectRetain_n(v28, 2);
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.default.getter(v34);
      if (os_log_type_enabled(v34, v35))
      {
        v58 = a4;
        v36 = (uint8_t *)swift_slowAlloc(12, -1);
        v37 = swift_slowAlloc(32, -1);
        aBlock[0] = v37;
        *(_DWORD *)v36 = 136446210;
        swift_bridgeObjectRetain(v28);
        v67 = sub_10001A820(v26, v28, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);
        swift_bridgeObjectRelease_n(v28, 3);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Fetch migration state from user record {accountID: %{public}s}", v36, 0xCu);
        swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v37, -1, -1);
        v38 = v36;
        a4 = v58;
        swift_slowDealloc(v38, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v28, 2);
      }
      v23 = v56;
      v49 = (_QWORD *)swift_allocObject(&unk_1007FB070, 56, 7);
      v49[2] = v26;
      v49[3] = v28;
      v49[4] = sub_1005658A8;
      v49[5] = v20;
      v49[6] = a1;
      aBlock[4] = (uint64_t)sub_1005658B0;
      v66 = v49;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1000FF8C4;
      aBlock[3] = (uint64_t)&unk_1007FB088;
      v50 = _Block_copy(aBlock);
      v51 = v66;
      swift_retain(v20);
      v52 = a1;
      swift_release(v51);
      objc_msgSend(v31, "fetchUserRecordWithAccountID:completionHandler:", v25, v50);
      _Block_release(v50);
      swift_bridgeObjectRelease(a4);
      swift_release(v20);

    }
    else
    {
      v59 = a4;

      if (qword_100837880 != -1)
        swift_once(&qword_100837880, sub_100547F80);
      v63 = v21;
      v39 = type metadata accessor for Logger(0);
      sub_10001AAA8(v39, (uint64_t)qword_10084F6F8);
      swift_bridgeObjectRetain(v28);
      v41 = Logger.logObject.getter(v40);
      v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc(12, -1);
        v44 = swift_slowAlloc(32, -1);
        aBlock[0] = v44;
        *(_DWORD *)v43 = 136446210;
        swift_bridgeObjectRetain(v28);
        v67 = sub_10001A820(v26, v28, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);
        swift_bridgeObjectRelease_n(v28, 3);
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Missing cloud context for fetching migration state {accountID: %{public}s}", v43, 0xCu);
        swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1, -1);
        swift_slowDealloc(v43, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v28, 2);
      }
      v45 = (void *)objc_opt_self(REMError);
      v46 = String._bridgeToObjectiveC()();
      v47 = objc_msgSend(v45, "internalErrorWithDebugDescription:", v46);

      swift_retain(a9);
      v48 = v63;
      swift_retain(a14);
      sub_100563370(0, (uint64_t)v47, v53, v59, v64, (uint64_t)v22, (uint64_t)v23, v54 & 1, a9, v48, a11, a12 & 1, a13, a14, (void (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, id, uint64_t, _BYTE, uint64_t, uint64_t))sub_100560898);
      swift_bridgeObjectRelease(v59);
      swift_release(v20);

      swift_release(a9);
      swift_release(a14);
    }
    swift_release(v61);

    swift_release(v64);
  }
  else
  {
    swift_release(a14);

    swift_release(a9);
    swift_release(v19);

    swift_release(a5);
    swift_bridgeObjectRelease(a4);
    __break(1u);
  }
}

void sub_100563E98(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, void (*a7)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a8)
{
  _QWORD *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  void *v31;
  NSObject *v32;
  NSObject *v33;
  id v34;
  id v35;
  void *v36;
  uint64_t v37;
  os_log_type_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  void *v49;
  double v50;
  id v51;
  id v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  double v56;
  id v57;
  uint64_t v58;
  id v59;
  unsigned int v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  id v67;
  id v68;
  id v69;
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  void *v73;
  double v74;
  id v75;
  NSString v76;
  NSString v77;
  id v78;
  id v79;
  unsigned int v80;
  uint64_t v81;
  double v82;
  id v83;
  id v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  double v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  void (*v113)(_QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD *v114;
  char v115;
  id v116;
  id v117;
  id v118;
  BOOL v119;
  id v120;
  os_log_t log;
  uint64_t v122;
  int v123;
  int v124;
  int v125;
  int v126;
  void *v127;
  uint64_t v128;
  os_log_type_t v129;
  int v130;
  NSObject *v131;
  void *v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  id aBlock[5];
  uint64_t v139;

  v16 = (_QWORD *)swift_allocObject(&unk_1007FA260, 64, 7);
  v16[2] = a3;
  v16[3] = a4;
  v16[4] = a5;
  v16[5] = a6;
  v16[6] = a7;
  v16[7] = a8;
  v17 = objc_allocWithZone((Class)REMSaveRequest);
  swift_retain();
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(a6);
  swift_retain();
  v120 = a2;
  v118 = objc_msgSend(v17, "initWithStore:", a2);
  v18 = *(_QWORD *)(a1 + 16);
  if (!v18)
  {
    LOBYTE(v20) = 0;
LABEL_70:
    sub_10054BDAC(v20 & 1, 0, 0, a3, a4, a5, a6, a7);
    swift_release(v16);

    return;
  }
  v109 = a3;
  v110 = a4;
  v111 = a5;
  v112 = a6;
  v113 = a7;
  v114 = v16;
  swift_bridgeObjectRetain(a1);
  v135 = 0;
  v115 = 0;
  v119 = 0;
  v19 = 0;
  v20 = 1 - v18;
  v122 = a1;
  while (1)
  {
    v22 = *(_QWORD *)(v122 + v135 + 32);
    v21 = *(_QWORD *)(v122 + v135 + 40);
    v23 = *(_QWORD *)(v122 + v135 + 48);
    v16 = *(_QWORD **)(v122 + v135 + 56);
    v24 = *(id *)(v122 + v135 + 64);
    v130 = *(unsigned __int8 *)(v122 + v135 + 73);
    v123 = *(unsigned __int8 *)(v122 + v135 + 74);
    v124 = *(unsigned __int8 *)(v122 + v135 + 75);
    v125 = *(unsigned __int8 *)(v122 + v135 + 76);
    v126 = *(unsigned __int8 *)(v122 + v135 + 72);
    v25 = qword_100837880;
    swift_bridgeObjectRetain_n(v21, 2);
    swift_bridgeObjectRetain_n(v16, 2);
    if (v25 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v26 = type metadata accessor for Logger(0);
    sub_10001AAA8(v26, (uint64_t)qword_10084F6F8);
    swift_bridgeObjectRetain_n(v21, 2);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter(v28);
    v134 = v19;
    v128 = v23;
    if (os_log_type_enabled(v28, v29))
    {
      v30 = swift_slowAlloc(12, -1);
      v31 = (void *)swift_slowAlloc(32, -1);
      aBlock[0] = v31;
      *(_DWORD *)v30 = 136446210;
      swift_bridgeObjectRetain(v21);
      *(_QWORD *)(v30 + 4) = sub_10001A820(v22, v21, (uint64_t *)aBlock);
      swift_bridgeObjectRelease_n(v21, 3);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "UpdateAccountsWithAccountInfos: Updating account object {accountID: %{public}s}", (uint8_t *)v30, 0xCu);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v21, 2);
    }
    v32 = sub_1005520BC(v22, v21);
    if (!v32)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n(v16, 2);
      swift_bridgeObjectRetain(v21);
      v33 = Logger.logObject.getter(v37);
      v38 = static os_log_type_t.error.getter(v33);
      if (!os_log_type_enabled(v33, v38))
      {

        swift_bridgeObjectRelease_n(v21, 2);
        goto LABEL_4;
      }
      v39 = swift_slowAlloc(12, -1);
      v16 = (_QWORD *)swift_slowAlloc(32, -1);
      aBlock[0] = v16;
      *(_DWORD *)v39 = 136446210;
      swift_bridgeObjectRetain(v21);
      *(_QWORD *)(v39 + 4) = sub_10001A820(v22, v21, (uint64_t *)aBlock);
      swift_bridgeObjectRelease_n(v21, 3);
      _os_log_impl((void *)&_mh_execute_header, v33, v38, "UpdateAccountsWithAccountInfos: Failed to create UUID object, account ignored {accountID: %{public}s}", (uint8_t *)v39, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v39, -1, -1);
      goto LABEL_66;
    }
    v33 = v32;
    aBlock[0] = 0;
    v34 = objc_msgSend(v120, "fetchAccountWithObjectID:error:", v32, aBlock);
    v35 = aBlock[0];
    if (v34)
    {
      if ((v130 & 1) != 0)
      {
        v36 = v34;
LABEL_18:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v36)
        {
          v131 = v33;
          v43 = v22;
          v44 = v34;
          swift_bridgeObjectRetain(v21);
          swift_bridgeObjectRetain(v16);
          v45 = v44;
          v46 = Logger.logObject.getter(v45);
          v47 = static os_log_type_t.default.getter(v46);
          if (os_log_type_enabled(v46, v47))
          {
            v48 = swift_slowAlloc(32, -1);
            v49 = (void *)swift_slowAlloc(64, -1);
            aBlock[0] = v49;
            *(_DWORD *)v48 = 136315650;
            swift_bridgeObjectRetain(v16);
            *(_QWORD *)(v48 + 4) = sub_10001A820(v128, (unint64_t)v16, (uint64_t *)aBlock);
            swift_bridgeObjectRelease_n(v16, 3);
            *(_WORD *)(v48 + 12) = 2082;
            swift_bridgeObjectRetain(v21);
            *(_QWORD *)(v48 + 14) = sub_10001A820(v43, v21, (uint64_t *)aBlock);
            *(_QWORD *)&v50 = swift_bridgeObjectRelease_n(v21, 3).n128_u64[0];
            *(_WORD *)(v48 + 22) = 2048;
            v16 = objc_msgSend(v36, "type", v50);

            *(_QWORD *)(v48 + 24) = v16;
            _os_log_impl((void *)&_mh_execute_header, v46, v47, "UpdateAccountsWithAccountInfos is going to delete account {accountName: %s, accountID: %{public}s, type: %ld}.", (uint8_t *)v48, 0x20u);
            swift_arrayDestroy(v49, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v49, -1, -1);
            swift_slowDealloc(v48, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v21, 2);
            swift_bridgeObjectRelease_n(v16, 2);

          }
          v67 = objc_msgSend(v118, "updateAccount:", v36);
          objc_msgSend(v67, "removeFromStore");

          if (!v20)
          {
            swift_bridgeObjectRelease();
            LOBYTE(v20) = 1;
            v16 = v114;
            goto LABEL_73;
          }
          v119 = 1;
          v115 = 1;
LABEL_61:
          v19 = v134;
          goto LABEL_5;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_4;
      }
      log = (os_log_t)v22;
      v51 = v34;
      if (objc_msgSend(v51, "type") != v24)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v68 = v51;
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v16);
        v69 = v68;
        v70 = Logger.logObject.getter(v69);
        v71 = static os_log_type_t.error.getter(v70);
        if (!os_log_type_enabled(v70, v71))
        {

          swift_bridgeObjectRelease_n(v21, 2);
          swift_bridgeObjectRelease_n(v16, 2);

          goto LABEL_4;
        }
        v72 = swift_slowAlloc(42, -1);
        v73 = (void *)swift_slowAlloc(64, -1);
        aBlock[0] = v73;
        *(_DWORD *)v72 = 136315906;
        swift_bridgeObjectRetain(v16);
        *(_QWORD *)(v72 + 4) = sub_10001A820(v128, (unint64_t)v16, (uint64_t *)aBlock);
        swift_bridgeObjectRelease_n(v16, 3);
        *(_WORD *)(v72 + 12) = 2082;
        swift_bridgeObjectRetain(v21);
        *(_QWORD *)(v72 + 14) = sub_10001A820((uint64_t)log, v21, (uint64_t *)aBlock);
        *(_QWORD *)&v74 = swift_bridgeObjectRelease_n(v21, 3).n128_u64[0];
        *(_WORD *)(v72 + 22) = 2048;
        v16 = objc_msgSend(v69, "type", v74);

        *(_QWORD *)(v72 + 24) = v16;
        *(_WORD *)(v72 + 32) = 2048;
        *(_QWORD *)(v72 + 34) = v24;
        _os_log_impl((void *)&_mh_execute_header, v70, v71, "UpdateAccountsWithAccountInfos: Unexpected account type, account ignored. {accountName: %s, accountID: %{public}s, expectedType: %ld, actualType: %ld}", (uint8_t *)v72, 0x2Au);
        swift_arrayDestroy(v73, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v73, -1, -1);
        swift_slowDealloc(v72, -1, -1);

        goto LABEL_66;
      }
      swift_bridgeObjectRetain_n(v21, 2);
      swift_bridgeObjectRetain_n(v16, 2);
      v52 = v51;
      v53 = Logger.logObject.getter(v52);
      v54 = static os_log_type_t.default.getter(v53);
      if (os_log_type_enabled(v53, v54))
      {
        v116 = v34;
        v55 = swift_slowAlloc(32, -1);
        v132 = (void *)swift_slowAlloc(64, -1);
        aBlock[0] = v132;
        *(_DWORD *)v55 = 136315650;
        swift_bridgeObjectRetain(v16);
        v136 = sub_10001A820(v128, (unint64_t)v16, (uint64_t *)aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137);
        swift_bridgeObjectRelease_n(v16, 3);
        *(_WORD *)(v55 + 12) = 2082;
        swift_bridgeObjectRetain(v21);
        v136 = sub_10001A820(v22, v21, (uint64_t *)aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137);
        *(_QWORD *)&v56 = swift_bridgeObjectRelease_n(v21, 3).n128_u64[0];
        *(_WORD *)(v55 + 22) = 2048;
        v57 = objc_msgSend(v52, "type", v56);

        v136 = (uint64_t)v57;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137);

        _os_log_impl((void *)&_mh_execute_header, v53, v54, "UpdateAccountsWithAccountInfos is updating existing account object {name: %s, accountID: %{public}s, type: %ld}", (uint8_t *)v55, 0x20u);
        swift_arrayDestroy(v132, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v132, -1, -1);
        v58 = v55;
        v34 = v116;
        swift_slowDealloc(v58, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v21, 2);
        swift_bridgeObjectRelease_n(v16, 2);

      }
      v75 = objc_msgSend(v118, "updateAccount:", v52);
      v76 = String._bridgeToObjectiveC()();
      objc_msgSend(v75, "setName:", v76, swift_bridgeObjectRelease().n128_f64[0]);

    }
    else
    {
      v40 = v35;
      log = (os_log_t)v22;
      v41 = _convertNSErrorToError(_:)(v35);

      swift_willThrow(v42);
      v36 = 0;
      swift_errorRelease(v41);
      v134 = 0;
      if (v130)
        goto LABEL_18;
      if ((v126 & 1) == 0)
      {
        v59 = objc_msgSend(objc_allocWithZone((Class)REMAccountTypeHost), "initWithType:", v24);
        v60 = objc_msgSend(v59, "isCloudKit");

        if (!v60)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain(v21);
          swift_bridgeObjectRetain(v16);
          v95 = Logger.logObject.getter(v94);
          v96 = static os_log_type_t.info.getter(v95);
          if (os_log_type_enabled(v95, v96))
          {
            v97 = swift_slowAlloc(32, -1);
            v98 = (void *)swift_slowAlloc(96, -1);
            aBlock[0] = v98;
            *(_DWORD *)v97 = 136315650;
            swift_bridgeObjectRetain(v16);
            *(_QWORD *)(v97 + 4) = sub_10001A820(v128, (unint64_t)v16, (uint64_t *)aBlock);
            swift_bridgeObjectRelease_n(v16, 3);
            *(_WORD *)(v97 + 12) = 2082;
            swift_bridgeObjectRetain(v21);
            *(_QWORD *)(v97 + 14) = sub_10001A820(v22, v21, (uint64_t *)aBlock);
            swift_bridgeObjectRelease_n(v21, 3);
            *(_WORD *)(v97 + 22) = 2082;
            v99 = REMAccountType.loggableDescription.getter(v24);
            v16 = (_QWORD *)v100;
            *(_QWORD *)(v97 + 24) = sub_10001A820(v99, v100, (uint64_t *)aBlock);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v95, v96, "UpdateAccountsWithAccountInfos won't create inactive accounts unless it is CloudKit {name: %s, accountID: %{public}s, type: %{public}s}", (uint8_t *)v97, 0x20u);
            swift_arrayDestroy(v98, 3, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v98, -1, -1);
            swift_slowDealloc(v97, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v21, 2);
            swift_bridgeObjectRelease_n(v16, 2);
          }
LABEL_66:

          goto LABEL_4;
        }
      }
      swift_bridgeObjectRetain_n(v21, 2);
      swift_bridgeObjectRetain_n(v16, 2);
      v62 = Logger.logObject.getter(v61);
      v63 = static os_log_type_t.default.getter(v62);
      if (os_log_type_enabled(v62, v63))
      {
        v64 = swift_slowAlloc(32, -1);
        v133 = (void *)swift_slowAlloc(96, -1);
        aBlock[0] = v133;
        *(_DWORD *)v64 = 136315650;
        swift_bridgeObjectRetain(v16);
        v136 = sub_10001A820(v128, (unint64_t)v16, (uint64_t *)aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137);
        swift_bridgeObjectRelease_n(v16, 3);
        *(_WORD *)(v64 + 12) = 2082;
        swift_bridgeObjectRetain(v21);
        v136 = sub_10001A820(v22, v21, (uint64_t *)aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137);
        swift_bridgeObjectRelease_n(v21, 3);
        *(_WORD *)(v64 + 22) = 2082;
        v65 = REMAccountType.loggableDescription.getter(v24);
        v136 = sub_10001A820(v65, v66, (uint64_t *)aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v62, v63, "UpdateAccountsWithAccountInfos is creating account object {name: %s, accountID: %{public}s, type: %{public}s}", (uint8_t *)v64, 0x20u);
        swift_arrayDestroy(v133, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v133, -1, -1);
        swift_slowDealloc(v64, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v21, 2);
        swift_bridgeObjectRelease_n(v16, 2);
      }
      v77 = String._bridgeToObjectiveC()();
      v78 = objc_msgSend(v118, "__addAccountWithType:name:", v24, v77, swift_bridgeObjectRelease().n128_f64[0]);

      v75 = v78;
      objc_msgSend(v75, "setObjectID:", v33);
      v79 = objc_msgSend(objc_allocWithZone((Class)REMAccountTypeHost), "initWithType:", v24);
      v80 = objc_msgSend(v79, "isCloudKit");

      v34 = 0;
      if (!v80)
      {
        v81 = v22;
        v76 = String._bridgeToObjectiveC()();
        objc_msgSend(v75, "setExternalIdentifier:", v76);

        v115 = 1;
        goto LABEL_42;
      }
      objc_msgSend(v75, "setPersistenceCloudSchemaVersion:", 20240715);
      v115 = 1;
      v76 = v75;
    }
    v81 = (uint64_t)log;
LABEL_42:

    if (v126 == objc_msgSend(v75, "inactive"))
    {
      v117 = v34;
      objc_msgSend(v75, "setInactive:", v126 ^ 1u);
      v83 = v75;
      swift_bridgeObjectRetain(v21);
      v84 = v83;
      v85 = Logger.logObject.getter(v84);
      v129 = static os_log_type_t.default.getter(v85);
      if (os_log_type_enabled(v85, v129))
      {
        v86 = swift_slowAlloc(32, -1);
        v127 = (void *)swift_slowAlloc(96, -1);
        aBlock[0] = v127;
        *(_DWORD *)v86 = 136446722;
        v87 = Bool.yesno.getter(objc_msgSend(v84, "inactive"));
        v136 = sub_10001A820(v87, v88, (uint64_t *)aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137);

        swift_bridgeObjectRelease();
        *(_WORD *)(v86 + 12) = 2082;
        swift_bridgeObjectRetain(v21);
        v136 = sub_10001A820(v81, v21, (uint64_t *)aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137);
        swift_bridgeObjectRelease_n(v21, 3);
        *(_WORD *)(v86 + 22) = 2082;
        v89 = REMAccountType.loggableDescription.getter(v24);
        v136 = sub_10001A820(v89, v90, (uint64_t *)aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137);
        swift_bridgeObjectRelease();
        swift_arrayDestroy(v127, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v127, -1, -1);
        swift_slowDealloc(v86, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v21, 2);
      }
      v34 = v117;
    }
    else
    {
      *(_QWORD *)&v82 = swift_bridgeObjectRelease().n128_u64[0];
    }
    if (v123 != 2)
    {
      if (objc_msgSend(v75, "didChooseToMigrateLocally", v82)
        && objc_msgSend(v75, "didChooseToMigrate")
        && (v123 & 1) == 0)
      {
        objc_msgSend(v75, "setDidChooseToMigrateLocally:", 0);
      }
      objc_msgSend(v75, "setDidChooseToMigrate:", v123 & 1);
    }
    if (v124 != 2)
      objc_msgSend(v75, "setDidFinishMigration:", v124 & 1);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v91 = swift_bridgeObjectRelease().n128_u64[0];
    if (v125 != 2)
      objc_msgSend(v75, "setDebugSyncDisabled:", v125 & 1, v91);
    if (v119)
    {

      if (!v20)
      {
        swift_bridgeObjectRelease();
        v16 = v114;
        LOBYTE(v20) = v115;
        goto LABEL_73;
      }
      v119 = 1;
      goto LABEL_61;
    }
    v92 = objc_msgSend(v75, "changedKeys");
    v16 = (_QWORD *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v92, &type metadata for String, &protocol witness table for String);

    v93 = v16[2];
    swift_bridgeObjectRelease();
    v119 = v93 != 0;
LABEL_4:
    v19 = v134;
    if (!v20)
      break;
LABEL_5:
    ++v20;
    v135 += 48;
    if (v20 == 1)
    {
      __break(1u);
      goto LABEL_78;
    }
  }
  swift_bridgeObjectRelease();
  a7 = v113;
  v16 = v114;
  a5 = v111;
  a6 = v112;
  a3 = v109;
  a4 = v110;
  LOBYTE(v20) = v115;
  if (!v119)
    goto LABEL_70;
LABEL_73:
  v102 = Logger.logObject.getter(v101);
  v103 = static os_log_type_t.default.getter(v102);
  if (os_log_type_enabled(v102, v103))
  {
    v104 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v104 = 0;
    _os_log_impl((void *)&_mh_execute_header, v102, v103, "UpdateAccountsWithAccountInfos: Saving account object changes", v104, 2u);
    swift_slowDealloc(v104, -1, -1);
  }

  if (qword_100836F28 != -1)
LABEL_78:
    swift_once(&qword_100836F28, sub_1001BA8F8);
  v105 = qword_100871CE8;
  v106 = swift_allocObject(&unk_1007FA288, 34, 7);
  *(_QWORD *)(v106 + 16) = sub_1005658FC;
  *(_QWORD *)(v106 + 24) = v16;
  *(_BYTE *)(v106 + 32) = v20 & 1;
  *(_BYTE *)(v106 + 33) = 1;
  aBlock[4] = sub_100565900;
  v139 = v106;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1000E18E4;
  aBlock[3] = &unk_1007FA2A0;
  v107 = _Block_copy(aBlock);
  v108 = v139;
  swift_retain();
  swift_release(v108);
  objc_msgSend(v118, "saveWithQueue:completion:", v105, v107);

  _Block_release(v107);
  swift_release(v16);
}

void sub_10056533C(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6, void *a7, char a8, uint64_t a9, uint64_t a10)
{
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *Strong;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint8_t *v44;
  void *v45;
  NSString v46;
  _QWORD *v47;
  void *v48;
  _QWORD *v49;
  id v50;
  id v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t aBlock[5];
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;

  v18 = swift_allocObject(&unk_1007FA198, 80, 7);
  v52 = a3;
  *(_QWORD *)(v18 + 16) = a3;
  *(_QWORD *)(v18 + 24) = a4;
  *(_QWORD *)(v18 + 32) = a5;
  *(_QWORD *)(v18 + 40) = a6;
  *(_QWORD *)(v18 + 48) = a7;
  v53 = a8;
  *(_BYTE *)(v18 + 56) = a8;
  v19 = v18;
  *(_QWORD *)(v18 + 64) = a9;
  *(_QWORD *)(v18 + 72) = a10;
  v20 = a1;
  v55 = a4;
  swift_bridgeObjectRetain(a4);
  v54 = a5;
  swift_retain();
  v21 = a6;
  v22 = a7;
  swift_retain();
  v23 = objc_msgSend(a1, "identifier");
  if (v23)
  {
    v24 = v23;
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v27 = v26;
    Strong = (void *)swift_unknownObjectWeakLoadStrong(a2 + 32, v26);
    if (Strong
      && (v29 = Strong,
          v30 = objc_msgSend(Strong, "cloudContext"),
          v29,
          v30))
    {
      if (qword_100837880 != -1)
        swift_once(&qword_100837880, sub_100547F80);
      v31 = type metadata accessor for Logger(0);
      sub_10001AAA8(v31, (uint64_t)qword_10084F6F8);
      swift_bridgeObjectRetain_n(v27, 2);
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.default.getter(v33);
      if (os_log_type_enabled(v33, v34))
      {
        v56 = v25;
        v35 = (uint8_t *)swift_slowAlloc(12, -1);
        v36 = swift_slowAlloc(32, -1);
        aBlock[0] = v36;
        *(_DWORD *)v35 = 136446210;
        swift_bridgeObjectRetain(v27);
        v59 = sub_10001A820(v56, v27, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60);
        swift_bridgeObjectRelease_n(v27, 3);
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Fetch migration state from user record {accountID: %{public}s}", v35, 0xCu);
        swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v36, -1, -1);
        v37 = v35;
        v25 = v56;
        swift_slowDealloc(v37, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v27, 2);
      }
      v47 = (_QWORD *)swift_allocObject(&unk_1007FA1C0, 56, 7);
      v47[2] = v25;
      v47[3] = v27;
      v47[4] = sub_1005658A8;
      v47[5] = v19;
      v47[6] = v20;
      aBlock[4] = (uint64_t)sub_1005658B0;
      v58 = v47;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1000FF8C4;
      aBlock[3] = (uint64_t)&unk_1007FA1D8;
      v48 = _Block_copy(aBlock);
      v49 = v58;
      swift_retain();
      v50 = v20;
      swift_release(v49);
      objc_msgSend(v30, "fetchUserRecordWithAccountID:completionHandler:", v24, v48);
      _Block_release(v48);
      swift_release(v19);

    }
    else
    {

      if (qword_100837880 != -1)
        swift_once(&qword_100837880, sub_100547F80);
      v38 = type metadata accessor for Logger(0);
      sub_10001AAA8(v38, (uint64_t)qword_10084F6F8);
      swift_bridgeObjectRetain(v27);
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.error.getter(v40);
      if (os_log_type_enabled(v40, v41))
      {
        v51 = v22;
        v42 = (uint8_t *)swift_slowAlloc(12, -1);
        v43 = swift_slowAlloc(32, -1);
        aBlock[0] = v43;
        *(_DWORD *)v42 = 136446210;
        swift_bridgeObjectRetain(v27);
        v59 = sub_10001A820(v25, v27, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60);
        swift_bridgeObjectRelease_n(v27, 3);
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Missing cloud context for fetching migration state {accountID: %{public}s}", v42, 0xCu);
        swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v43, -1, -1);
        v44 = v42;
        v22 = v51;
        swift_slowDealloc(v44, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v27, 2);
      }
      v45 = (void *)objc_opt_self(REMError);
      v46 = String._bridgeToObjectiveC()();
      v24 = objc_msgSend(v45, "internalErrorWithDebugDescription:", v46);

      sub_10054B6C8(0, (uint64_t)v24, v52, v55, v54, (uint64_t)v21, (uint64_t)v22, v53 & 1, a9, a10);
      swift_release(v19);
    }

  }
  else
  {
    swift_release(a10);

    swift_release(v54);
    swift_bridgeObjectRelease();
    __break(1u);
  }
}

uint64_t sub_1005658B4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1005658E8(char a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100548B5C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), *(uint64_t (**)(_QWORD, _QWORD, __n128))(v2 + 40));
}

uint64_t sub_100565900(uint64_t a1)
{
  uint64_t v1;

  return sub_100548F7C(a1, *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), *(_BYTE *)(v1 + 33));
}

uint64_t sub_100565910()
{
  return sub_100568AEC((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_100565920()
{
  return sub_100568AEC((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_100565930(char a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_10054FBF4(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_10056593C()
{
  return sub_10056830C(48);
}

uint64_t sub_100565944(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_10054FE00(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_100565954()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 16))(0, 1);
}

uint64_t sub_10056597C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100565990()
{
  uint64_t *v0;

  return sub_10054D2D4(v0[2], v0[3], v0[4]);
}

uint64_t sub_10056599C()
{
  return sub_100568AEC((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1005659A8()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD, _QWORD);
  uint64_t v2;
  _BYTE v4[24];

  v1 = *(uint64_t (**)(_QWORD, _QWORD))(v0 + 16);
  v2 = *(_QWORD *)(v0 + 32);
  swift_beginAccess(v2 + 16, v4, 0, 0);
  return v1(*(_QWORD *)(v2 + 16), *(unsigned __int8 *)(v2 + 24));
}

uint64_t sub_1005659FC()
{
  return sub_10056896C(64);
}

uint64_t sub_100565A04()
{
  uint64_t v0;

  return sub_10054FEA0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(NSObject **)(v0 + 32), *(_BYTE *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

void sub_100565A18(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  int v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  double v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  void *v43;
  NSString v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  _QWORD *v56;
  id v57;
  Swift::UInt v58;
  Swift::Int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  unint64_t v72;
  unint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  void *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  NSString v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  void *v97;
  char *v98;
  unint64_t v99;
  char **v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  uint8_t *v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  id *v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  void *v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  char **v131;
  int v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  id v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  id *v143;
  id v144;
  void *v145;
  char **v146;
  uint64_t v147;
  _QWORD v148[3];
  char v149[16];
  void *v150;
  uint64_t v151;
  id aBlock;
  _QWORD v153[4];
  uint64_t v154;

  v138 = a1;
  v16 = a8 & 1;
  v142 = type metadata accessor for UUID(0);
  v141 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v140 = (char *)&v127 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (char **)swift_allocObject(&unk_1007FAD00, 88, 7);
  v18[2] = (char *)a2;
  v18[3] = (char *)a3;
  v18[4] = (char *)a4;
  v18[5] = (char *)a5;
  v18[6] = a6;
  v18[7] = (char *)a7;
  v132 = v16;
  *((_BYTE *)v18 + 64) = v16;
  v133 = a9;
  v18[9] = (char *)a9;
  v18[10] = (char *)a10;
  v137 = a2;
  swift_retain();
  v136 = a3;
  swift_retain();
  swift_errorRetain(a4);
  v19 = qword_100837880;
  swift_retain();
  v134 = a6;
  v135 = a10;
  swift_retain();
  if (v19 != -1)
    goto LABEL_51;
  while (1)
  {
    v20 = type metadata accessor for Logger(0);
    v139 = sub_10001AAA8(v20, (uint64_t)qword_10084F6F8);
    v21 = Logger.logObject.getter(v139);
    v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "RDAccountUtils: Trying to remove orphaned accounts", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    v24 = objc_msgSend((id)objc_opt_self(REMAppleAccountUtilities), "sharedInstance");
    v25 = objc_msgSend(v24, "accountStore");

    v26 = objc_msgSend(v25, "aa_accountsEnabledForDataclass:", kAccountDataclassReminders);
    if (!v26)
    {
      v40 = Logger.logObject.getter(0);
      v41 = static os_log_type_t.default.getter(v40);
      if (os_log_type_enabled(v40, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "RDAccountUtils: Couldn't fetch accounts from ACAccountStore. Not able to determine orphaned accounts.", v42, 2u);
        swift_slowDealloc(v42, -1, -1);
      }

      v43 = (void *)objc_opt_self(REMError);
      v44 = String._bridgeToObjectiveC()();
      v144 = objc_msgSend(v43, "internalErrorWithDebugDescription:", v44);

      sub_10054E094(0, (uint64_t)v144, v137, v136, a4, a5, v134, a7, v132, v133, v135);
      swift_release(v18);

      return;
    }
    v27 = v26;
    v128 = a4;
    v127 = a7;
    v129 = a5;
    v28 = sub_1000151B0(0, &qword_100847FA0, ACAccount_ptr);
    a5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v28);

    v150 = &_swiftEmptySetSingleton;
    if ((unint64_t)a5 >> 62)
    {
      v90 = a5 < 0 ? a5 : a5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a5);
      a4 = _CocoaArrayWrapper.endIndex.getter(v90);
    }
    else
    {
      a4 = *(_QWORD *)((a5 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a5);
    }
    v131 = v18;
    v130 = v25;
    if (!a4)
      break;
    a7 = 4;
    v18 = &selRef_showRemindersAsOverdue;
    while (1)
    {
      v29 = (a5 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a7 - 4, a5)
          : *(id *)(a5 + 8 * a7);
      v30 = v29;
      v31 = a7 - 3;
      if (__OFADD__(a7 - 4, 1))
        break;
      if (!objc_msgSend(v29, "isActive"))
        goto LABEL_9;
      v32 = objc_msgSend(v30, "identifier");
      if (!v32)
        goto LABEL_110;
      v33 = v32;
      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      v36 = v35;

      sub_1002DB0E4((uint64_t *)&aBlock, v34, v36);
      swift_bridgeObjectRelease();
      v37 = sub_100552370(v30);
      if (v38)
      {
        sub_1002DB0E4((uint64_t *)&aBlock, (uint64_t)v37, v38);

        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_9:

      }
      ++a7;
      if (v31 == a4)
      {
        *(_QWORD *)&v39 = swift_bridgeObjectRelease_n(a5, 2).n128_u64[0];
        v144 = v150;
        v18 = v131;
        v25 = v130;
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_51:
    swift_once(&qword_100837880, sub_100547F80);
  }
  *(_QWORD *)&v39 = swift_bridgeObjectRelease_n(a5, 2).n128_u64[0];
  v144 = &_swiftEmptySetSingleton;
LABEL_24:
  aBlock = 0;
  v45 = objc_msgSend(v138, "fetchAccountsIncludingInactive:error:", 1, &aBlock, v39);
  v46 = aBlock;
  if (!v45)
  {
    v74 = aBlock;
    swift_bridgeObjectRelease();
    v75 = _convertNSErrorToError(_:)(v46);

    swift_willThrow(v76);
    swift_errorRetain(v75);
    v77 = swift_errorRetain(v75);
    v78 = Logger.logObject.getter(v77);
    v79 = static os_log_type_t.error.getter(v78);
    if (os_log_type_enabled(v78, v79))
    {
      v80 = (uint8_t *)swift_slowAlloc(12, -1);
      v81 = (void *)swift_slowAlloc(32, -1);
      aBlock = v81;
      *(_DWORD *)v80 = 136315138;
      v25 = v130;
      swift_getErrorValue(v75, v149, v148);
      v82 = Error.localizedDescription.getter(v148[1], v148[2]);
      v150 = (void *)sub_10001A820(v82, v83, (uint64_t *)&aBlock);
      v18 = v131;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151);
      swift_bridgeObjectRelease();
      swift_errorRelease(v75);
      swift_errorRelease(v75);
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "Failed to fetch accounts which are no longer signed-in {error: %s}", v80, 0xCu);
      swift_arrayDestroy(v81, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v81, -1, -1);
      swift_slowDealloc(v80, -1, -1);
    }
    else
    {
      swift_errorRelease(v75);
      swift_errorRelease(v75);
    }

    v84 = v129;
    v85 = v127;
    v86 = v128;
    v87 = (void *)objc_opt_self(REMError);
    v88 = String._bridgeToObjectiveC()();
    v89 = objc_msgSend(v87, "internalErrorWithDebugDescription:", v88);

    sub_10054E094(0, (uint64_t)v89, v137, v136, v86, v84, v134, v85, v132, v133, v135);
    swift_errorRelease(v75);
    swift_release(v18);
    return;
  }
  v47 = (uint64_t)v45;
  v48 = sub_1000151B0(0, &qword_100844408, REMAccount_ptr);
  v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v47, v48);
  v50 = v46;

  v147 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v49 >> 62)
  {
    if (v49 < 0)
      v91 = v49;
    else
      v91 = v49 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v49);
    v51 = _CocoaArrayWrapper.endIndex.getter(v91);
    swift_bridgeObjectRelease();
    if (v51)
    {
LABEL_27:
      if (v51 < 1)
      {
        __break(1u);
        goto LABEL_86;
      }
      v52 = 0;
      v143 = (id *)(v49 + 32);
      do
      {
        if ((v49 & 0xC000000000000001) != 0)
          v54 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v52, v49);
        else
          v54 = v143[v52];
        v55 = v54;
        if (qword_100837888 != -1)
          swift_once(&qword_100837888, sub_10054811C);
        v56 = off_10084F710;
        v57 = objc_msgSend(v55, "type");
        if (v56[2])
        {
          v58 = (Swift::UInt)v57;
          Hasher.init(_seed:)(&aBlock, v56[5]);
          Hasher._combine(_:)(v58);
          v59 = Hasher._finalize()();
          v60 = -1 << *((_BYTE *)v56 + 32);
          v61 = v59 & ~v60;
          if (((*(_QWORD *)((char *)v56 + ((v61 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v61) & 1) != 0)
          {
            v62 = v56[6];
            if (*(_QWORD *)(v62 + 8 * v61) == v58)
            {
LABEL_42:
              v64 = objc_msgSend(v55, "objectID");
              v65 = objc_msgSend(v64, "uuid");

              v66 = v140;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)(v65);

              v68 = UUID.uuidString.getter(v67);
              v70 = v69;
              (*(void (**)(char *, uint64_t))(v141 + 8))(v66, v142);
              LOBYTE(v68) = sub_1001B2278(v68, v70, (uint64_t)v144);
              swift_bridgeObjectRelease();
              if ((v68 & 1) == 0)
              {
                v71 = v55;
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v71);
                v73 = *(_QWORD *)((v147 & 0xFFFFFFFFFFFFFF8) + 0x10);
                v72 = *(_QWORD *)((v147 & 0xFFFFFFFFFFFFFF8) + 0x18);
                if (v73 >= v72 >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v72 > 1);
                v53 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v73, v71);
                specialized Array._endMutation()(v53);
              }
            }
            else
            {
              v63 = ~v60;
              while (1)
              {
                v61 = (v61 + 1) & v63;
                if (((*(_QWORD *)((char *)v56 + ((v61 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v61) & 1) == 0)
                  break;
                if (*(_QWORD *)(v62 + 8 * v61) == v58)
                  goto LABEL_42;
              }
            }
          }
        }
        ++v52;

      }
      while (v52 != v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v47 = v147;
      v18 = v131;
      goto LABEL_61;
    }
  }
  else
  {
    v51 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v51)
      goto LABEL_27;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v47 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_61:
  v92 = (unint64_t)v47 >> 62;
  a5 = v129;
  a7 = v127;
  v49 = v128;
  if ((unint64_t)v47 >> 62)
    goto LABEL_78;
  if (!*(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_82:
    swift_bridgeObjectRelease();
    v104 = Logger.logObject.getter(v103);
    v105 = static os_log_type_t.default.getter(v104);
    if (os_log_type_enabled(v104, v105))
    {
      v106 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v106 = 0;
      _os_log_impl((void *)&_mh_execute_header, v104, v105, "No orphaned accounts to remove.", v106, 2u);
      swift_slowDealloc(v106, -1, -1);
    }

    sub_10054E094(0, 0, v137, v136, v49, a5, v134, a7, v132, v133, v135);
    v107 = v130;
    goto LABEL_107;
  }
  while (1)
  {
    swift_bridgeObjectRetain_n(v47, 2);
    a5 = Logger.logObject.getter(v93);
    LODWORD(v51) = static os_log_type_t.default.getter(a5);
    if (!os_log_type_enabled((os_log_t)a5, (os_log_type_t)v51))
    {

      swift_bridgeObjectRelease_n(v47, 2);
      goto LABEL_92;
    }
    a7 = swift_slowAlloc(12, -1);
    v143 = (id *)swift_slowAlloc(32, -1);
    v150 = v143;
    *(_DWORD *)a7 = 136315138;
    if (!v92)
    {
      v94 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v47);
      if (!v94)
        break;
      goto LABEL_66;
    }
LABEL_86:
    v108 = v47 < 0 ? v47 : v47 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v47);
    v94 = _CocoaArrayWrapper.endIndex.getter(v108);
    if (!v94)
      break;
LABEL_66:
    LODWORD(v140) = v51;
    v141 = a7;
    v142 = a5;
    v146 = (char **)_swiftEmptyArrayStorage;
    sub_1001C1B0C(0, v94 & ~(v94 >> 63), 0);
    if (v94 < 0)
      goto LABEL_109;
    v95 = 0;
    v18 = v146;
    v144 = (id)(v47 & 0xC000000000000001);
    v92 = v47;
    while (v94 != v95)
    {
      if (v144)
        v96 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v95, v47);
      else
        v96 = *(id *)(v47 + 8 * v95 + 32);
      v97 = v96;
      v145 = v96;
      sub_10054C434(&v145, (uint64_t *)&aBlock);

      a7 = (uint64_t)aBlock;
      v98 = (char *)v153[0];
      v146 = v18;
      a5 = (uint64_t)v18[2];
      v99 = (unint64_t)v18[3];
      v49 = a5 + 1;
      if (a5 >= v99 >> 1)
      {
        sub_1001C1B0C(v99 > 1, a5 + 1, 1);
        v18 = v146;
      }
      ++v95;
      v18[2] = (char *)v49;
      v100 = &v18[2 * a5];
      v100[4] = (char *)a7;
      v100[5] = v98;
      v47 = v92;
      if (v94 == v95)
      {
        swift_bridgeObjectRelease();
        a5 = v142;
        a7 = v141;
        LOBYTE(v51) = (_BYTE)v140;
        goto LABEL_91;
      }
    }
    __break(1u);
LABEL_78:
    if (v47 < 0)
      v101 = v47;
    else
      v101 = v47 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v47);
    v102 = _CocoaArrayWrapper.endIndex.getter(v101);
    swift_bridgeObjectRelease();
    if (!v102)
      goto LABEL_82;
  }
  swift_bridgeObjectRelease();
  v18 = (char **)_swiftEmptyArrayStorage;
LABEL_91:
  aBlock = v18;
  v109 = sub_10001A630((uint64_t *)&unk_10083AE10);
  v110 = sub_1000A5F84((unint64_t *)&qword_10083B050, (uint64_t *)&unk_10083AE10, (uint64_t)&protocol conformance descriptor for [A]);
  v111 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v109, v110);
  v113 = v112;
  swift_bridgeObjectRelease();
  aBlock = (id)sub_10001A820(v111, v113, (uint64_t *)&v150);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v153);
  swift_bridgeObjectRelease_n(v47, 2);
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, (os_log_t)a5, (os_log_type_t)v51, "Removing orphaned accounts {accounts: %s}", (uint8_t *)a7, 0xCu);
  v114 = v143;
  swift_arrayDestroy(v143, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v114, -1, -1);
  swift_slowDealloc(a7, -1, -1);

LABEL_92:
  v115 = objc_allocWithZone((Class)REMSaveRequest);
  v107 = objc_msgSend(v115, "initWithStore:", v138);
  swift_beginAccess(&v147, &v150, 0, 0);
  v116 = v147;
  if ((unint64_t)v147 >> 62)
  {
    if (v147 < 0)
      v122 = v147;
    else
      v122 = v147 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v147);
    v117 = _CocoaArrayWrapper.endIndex.getter(v122);
    swift_bridgeObjectRelease();
    if (!v117)
      goto LABEL_104;
LABEL_94:
    if (v117 >= 1)
    {
      v118 = 0;
      do
      {
        if ((v116 & 0xC000000000000001) != 0)
          v119 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v118, v116);
        else
          v119 = *(id *)(v116 + 8 * v118 + 32);
        v120 = v119;
        ++v118;
        v121 = objc_msgSend(v107, "updateAccount:", v119);
        objc_msgSend(v121, "removeFromStore");

      }
      while (v117 != v118);
      goto LABEL_104;
    }
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    swift_release(v136);
    swift_release(v137);
    swift_errorRelease(v128);
    swift_release(v135);

    swift_release(v129);
    __break(1u);
  }
  v117 = *(_QWORD *)((v147 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v117)
    goto LABEL_94;
LABEL_104:
  swift_bridgeObjectRelease();
  if (qword_100836F28 != -1)
    swift_once(&qword_100836F28, sub_1001BA8F8);
  v123 = qword_100871CE8;
  v124 = swift_allocObject(&unk_1007FAD28, 32, 7);
  v18 = v131;
  *(_QWORD *)(v124 + 16) = sub_100568550;
  *(_QWORD *)(v124 + 24) = v18;
  v153[3] = sub_100568FB0;
  v154 = v124;
  aBlock = _NSConcreteStackBlock;
  v153[0] = 1107296256;
  v153[1] = sub_1000E18E4;
  v153[2] = &unk_1007FAD40;
  v125 = _Block_copy(&aBlock);
  v126 = v154;
  swift_retain();
  swift_release(v126);
  objc_msgSend(v107, "saveWithQueue:completion:", v123, v125);

  _Block_release(v125);
LABEL_107:
  swift_release(v18);

}

void sub_100566BB0(void *a1, unint64_t a2, void *a3, NSObject *a4, int a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  unint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  double v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  void *v44;
  NSString v45;
  id v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  void *v62;
  _QWORD *v63;
  id v64;
  Swift::UInt v65;
  Swift::Int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  id v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  void *v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  NSString v94;
  id v95;
  uint64_t v96;
  NSObject *v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  unint64_t v110;
  id v111;
  void *v112;
  id v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  os_log_type_t v120;
  uint8_t *v121;
  uint64_t v122;
  NSObject *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  id *v131;
  id v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  id v137;
  void *v138;
  id v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  NSObject *v149;
  int v150;
  uint64_t v151;
  id v152;
  uint64_t v153;
  id v154;
  id v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  id *v160;
  unint64_t v161;
  void *v162;
  _QWORD *v163;
  uint64_t v164;
  _QWORD v165[3];
  char v166[16];
  void *v167;
  uint64_t v168;
  id aBlock;
  _QWORD v170[4];
  uint64_t v171;
  uint64_t v172;

  v154 = a1;
  v159 = type metadata accessor for UUID(0);
  v158 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159);
  v157 = (char *)&v146 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_allocObject(&unk_1007FA508, 64, 7);
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  v149 = a4;
  *(_QWORD *)(v15 + 32) = a4;
  v150 = a5;
  *(_BYTE *)(v15 + 40) = a5 & 1;
  v151 = a6;
  *(_QWORD *)(v15 + 48) = a6;
  *(_QWORD *)(v15 + 56) = a7;
  v156 = v15;
  v16 = qword_100837880;
  swift_retain();
  v152 = a3;
  v153 = a7;
  swift_retain();
  if (v16 != -1)
    goto LABEL_53;
  while (1)
  {
    v17 = type metadata accessor for Logger(0);
    v18 = sub_10001AAA8(v17, (uint64_t)qword_10084F6F8);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.default.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "RDAccountUtils: Trying to remove orphaned accounts", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    v22 = objc_msgSend((id)objc_opt_self(REMAppleAccountUtilities), "sharedInstance");
    v23 = objc_msgSend(v22, "accountStore");

    v155 = v23;
    v24 = objc_msgSend(v23, "aa_accountsEnabledForDataclass:", kAccountDataclassReminders);
    if (!v24)
    {
      v41 = Logger.logObject.getter(0);
      v42 = static os_log_type_t.default.getter(v41);
      if (os_log_type_enabled(v41, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "RDAccountUtils: Couldn't fetch accounts from ACAccountStore. Not able to determine orphaned accounts.", v43, 2u);
        swift_slowDealloc(v43, -1, -1);
      }

      v44 = (void *)objc_opt_self(REMError);
      v45 = String._bridgeToObjectiveC()();
      v46 = objc_msgSend(v44, "internalErrorWithDebugDescription:", v45);

      v47 = swift_allocObject(&unk_1007FA530, 72, 7);
      v48 = v149;
      *(_QWORD *)(v47 + 16) = a2;
      *(_QWORD *)(v47 + 24) = v48;
      *(_BYTE *)(v47 + 32) = v150 & 1;
      v49 = v153;
      *(_QWORD *)(v47 + 40) = v151;
      *(_QWORD *)(v47 + 48) = v49;
      *(_BYTE *)(v47 + 56) = 0;
      *(_QWORD *)(v47 + 64) = v46;
      swift_retain();
      swift_retain();
      v50 = v46;
      sub_10054C754(v152, (uint64_t)sub_100567D8C, v47);
      swift_release(v156);

      swift_release(v47);
      return;
    }
    v25 = v24;
    v148 = v18;
    v26 = sub_1000151B0(0, &qword_100847FA0, ACAccount_ptr);
    v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v25, v26);

    v167 = &_swiftEmptySetSingleton;
    if ((unint64_t)v27 >> 62)
    {
      v101 = v27 < 0 ? v27 : v27 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v27);
      v28 = _CocoaArrayWrapper.endIndex.getter(v101);
    }
    else
    {
      v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v27);
    }
    v147 = a2;
    if (!v28)
      break;
    v29 = v27 & 0xC000000000000001;
    a2 = 4;
    a4 = &selRef_showRemindersAsOverdue;
    v161 = v27 & 0xC000000000000001;
    while (1)
    {
      v30 = v29 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2 - 4, v27) : *(id *)(v27 + 8 * a2);
      v7 = v30;
      v31 = a2 - 3;
      if (__OFADD__(a2 - 4, 1))
        break;
      if (objc_msgSend(v30, "isActive"))
      {
        v32 = v28;
        v33 = objc_msgSend(v7, "identifier");
        if (!v33)
          goto LABEL_112;
        v34 = v33;
        v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
        v37 = v36;

        sub_1002DB0E4((uint64_t *)&aBlock, v35, v37);
        swift_bridgeObjectRelease();
        v38 = sub_100552370(v7);
        if (v39)
        {
          sub_1002DB0E4((uint64_t *)&aBlock, (uint64_t)v38, v39);

          swift_bridgeObjectRelease();
        }
        else
        {

        }
        v28 = v32;
        v29 = v161;
      }
      else
      {

      }
      ++a2;
      if (v31 == v28)
      {
        *(_QWORD *)&v40 = swift_bridgeObjectRelease_n(v27, 2).n128_u64[0];
        v161 = (unint64_t)v167;
        a2 = v147;
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_53:
    swift_once(&qword_100837880, sub_100547F80);
  }
  *(_QWORD *)&v40 = swift_bridgeObjectRelease_n(v27, 2).n128_u64[0];
  v161 = (unint64_t)&_swiftEmptySetSingleton;
LABEL_26:
  aBlock = 0;
  v51 = objc_msgSend(v154, "fetchAccountsIncludingInactive:error:", 1, &aBlock, v40);
  v52 = aBlock;
  if (!v51)
  {
    v82 = a2;
    v83 = aBlock;
    swift_bridgeObjectRelease();
    v84 = _convertNSErrorToError(_:)(v52);

    swift_willThrow(v85);
    swift_errorRetain(v84);
    v86 = swift_errorRetain(v84);
    v87 = Logger.logObject.getter(v86);
    v88 = static os_log_type_t.error.getter(v87);
    if (os_log_type_enabled(v87, v88))
    {
      v89 = (uint8_t *)swift_slowAlloc(12, -1);
      v90 = (void *)swift_slowAlloc(32, -1);
      aBlock = v90;
      *(_DWORD *)v89 = 136315138;
      swift_getErrorValue(v84, v166, v165);
      v91 = Error.localizedDescription.getter(v165[1], v165[2]);
      v167 = (void *)sub_10001A820(v91, v92, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, &v168);
      swift_bridgeObjectRelease();
      swift_errorRelease(v84);
      swift_errorRelease(v84);
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "Failed to fetch accounts which are no longer signed-in {error: %s}", v89, 0xCu);
      swift_arrayDestroy(v90, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v90, -1, -1);
      swift_slowDealloc(v89, -1, -1);
    }
    else
    {
      swift_errorRelease(v84);
      swift_errorRelease(v84);
    }

    v93 = (void *)objc_opt_self(REMError);
    v94 = String._bridgeToObjectiveC()();
    v95 = objc_msgSend(v93, "internalErrorWithDebugDescription:", v94);

    v96 = swift_allocObject(&unk_1007FA558, 72, 7);
    v97 = v149;
    *(_QWORD *)(v96 + 16) = v82;
    *(_QWORD *)(v96 + 24) = v97;
    *(_BYTE *)(v96 + 32) = v150 & 1;
    v98 = v153;
    *(_QWORD *)(v96 + 40) = v151;
    *(_QWORD *)(v96 + 48) = v98;
    *(_BYTE *)(v96 + 56) = 0;
    *(_QWORD *)(v96 + 64) = v95;
    swift_retain();
    swift_retain();
    v99 = v95;
    sub_10054C754(v152, (uint64_t)sub_100567D8C, v96);

    swift_release(v96);
    swift_errorRelease(v84);
    v100 = v156;
LABEL_87:
    swift_release(v100);
    return;
  }
  v53 = v51;
  v54 = sub_1000151B0(0, &qword_100844408, REMAccount_ptr);
  v55 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v53, v54);
  v56 = v52;

  v164 = (uint64_t)_swiftEmptyArrayStorage;
  if (!((unint64_t)v55 >> 62))
  {
    v57 = (uint64_t *)(v55 & 0xFFFFFFFFFFFFF8);
    v58 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v58)
      goto LABEL_29;
LABEL_62:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v81 = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_63;
  }
  if (v55 < 0)
    v102 = v55;
  else
    v102 = v55 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v55);
  v58 = _CocoaArrayWrapper.endIndex.getter(v102);
  swift_bridgeObjectRelease();
  if (!v58)
    goto LABEL_62;
LABEL_29:
  if (v58 < 1)
  {
    __break(1u);
    goto LABEL_89;
  }
  v59 = 0;
  v160 = (id *)(v55 + 32);
  do
  {
    if ((v55 & 0xC000000000000001) != 0)
      v61 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v59, v55);
    else
      v61 = v160[v59];
    v62 = v61;
    if (qword_100837888 != -1)
      swift_once(&qword_100837888, sub_10054811C);
    v63 = off_10084F710;
    v64 = objc_msgSend(v62, "type");
    if (v63[2])
    {
      v65 = (Swift::UInt)v64;
      Hasher.init(_seed:)(&aBlock, v63[5]);
      Hasher._combine(_:)(v65);
      v66 = Hasher._finalize()();
      v67 = -1 << *((_BYTE *)v63 + 32);
      v68 = v66 & ~v67;
      if (((*(_QWORD *)((char *)v63 + ((v68 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v68) & 1) != 0)
      {
        v69 = v63[6];
        if (*(_QWORD *)(v69 + 8 * v68) == v65)
        {
LABEL_44:
          v71 = objc_msgSend(v62, "objectID");
          v72 = objc_msgSend(v71, "uuid");

          v73 = v157;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v72);

          v75 = UUID.uuidString.getter(v74);
          v77 = v76;
          (*(void (**)(char *, uint64_t))(v158 + 8))(v73, v159);
          LOBYTE(v75) = sub_1001B2278(v75, v77, v161);
          swift_bridgeObjectRelease();
          if ((v75 & 1) == 0)
          {
            v78 = v62;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v78);
            v80 = *(_QWORD *)((v164 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v79 = *(_QWORD *)((v164 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v80 >= v79 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1);
            v60 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v80, v78);
            specialized Array._endMutation()(v60);
          }
        }
        else
        {
          v70 = ~v67;
          while (1)
          {
            v68 = (v68 + 1) & v70;
            if (((*(_QWORD *)((char *)v63 + ((v68 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v68) & 1) == 0)
              break;
            if (*(_QWORD *)(v69 + 8 * v68) == v65)
              goto LABEL_44;
          }
        }
      }
    }
    ++v59;

  }
  while (v59 != v58);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v81 = v164;
  a2 = v147;
LABEL_63:
  v103 = (unint64_t)v81 >> 62;
  v161 = v81;
  if ((unint64_t)v81 >> 62)
    goto LABEL_80;
  if (!*(_QWORD *)((v81 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_84:
    swift_bridgeObjectRelease();
    v119 = Logger.logObject.getter(v118);
    v120 = static os_log_type_t.default.getter(v119);
    if (os_log_type_enabled(v119, v120))
    {
      v121 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v121 = 0;
      _os_log_impl((void *)&_mh_execute_header, v119, v120, "No orphaned accounts to remove.", v121, 2u);
      swift_slowDealloc(v121, -1, -1);
    }

    v122 = swift_allocObject(&unk_1007FA5D0, 72, 7);
    v123 = v149;
    *(_QWORD *)(v122 + 16) = a2;
    *(_QWORD *)(v122 + 24) = v123;
    *(_BYTE *)(v122 + 32) = v150 & 1;
    v124 = v153;
    *(_QWORD *)(v122 + 40) = v151;
    *(_QWORD *)(v122 + 48) = v124;
    *(_BYTE *)(v122 + 56) = 0;
    *(_QWORD *)(v122 + 64) = 0;
    swift_retain();
    swift_retain();
    sub_10054C754(v152, (uint64_t)sub_100567D8C, v122);
    swift_release(v156);

    v100 = v122;
    goto LABEL_87;
  }
  while (1)
  {
    v104 = v161;
    swift_bridgeObjectRetain_n(v161, 2);
    a4 = Logger.logObject.getter(v105);
    LODWORD(v7) = static os_log_type_t.default.getter(a4);
    if (!os_log_type_enabled(a4, (os_log_type_t)v7))
    {

      swift_bridgeObjectRelease_n(v104, 2);
      goto LABEL_95;
    }
    v27 = swift_slowAlloc(12, -1);
    v160 = (id *)swift_slowAlloc(32, -1);
    v167 = v160;
    *(_DWORD *)v27 = 136315138;
    v57 = &v172;
    if (!v103)
    {
      v81 = v161;
      v106 = *(_QWORD *)((v161 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v161);
      if (!v106)
        break;
      goto LABEL_68;
    }
LABEL_89:
    v81 = *(v57 - 32);
    v125 = v81 < 0 ? *(v57 - 32) : v81 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v81);
    v106 = _CocoaArrayWrapper.endIndex.getter(v125);
    if (!v106)
      break;
LABEL_68:
    LODWORD(v157) = (_DWORD)v7;
    v158 = v27;
    v159 = (uint64_t)a4;
    v163 = _swiftEmptyArrayStorage;
    sub_1001C1B0C(0, v106 & ~(v106 >> 63), 0);
    if (v106 < 0)
      goto LABEL_111;
    v107 = 0;
    v103 = 0;
    v108 = v163;
    v109 = v161;
    v110 = v161 & 0xC000000000000001;
    while (v106 != v107)
    {
      if (v110)
        v111 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v107, v109);
      else
        v111 = *(id *)(v109 + 8 * v107 + 32);
      v112 = v111;
      v162 = v111;
      sub_10054C434(&v162, (uint64_t *)&aBlock);

      v113 = aBlock;
      v81 = v170[0];
      v163 = v108;
      a2 = v108[2];
      v114 = v108[3];
      if (a2 >= v114 >> 1)
      {
        sub_1001C1B0C(v114 > 1, a2 + 1, 1);
        v109 = v161;
        v108 = v163;
      }
      ++v107;
      v108[2] = a2 + 1;
      v115 = &v108[2 * a2];
      v115[4] = v113;
      v115[5] = v81;
      if (v106 == v107)
      {
        swift_bridgeObjectRelease();
        v81 = v109;
        a4 = v159;
        v27 = v158;
        LOBYTE(v7) = (_BYTE)v157;
        goto LABEL_94;
      }
    }
    __break(1u);
LABEL_80:
    if (v81 < 0)
      v116 = v81;
    else
      v116 = v81 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v81);
    v117 = _CocoaArrayWrapper.endIndex.getter(v116);
    swift_bridgeObjectRelease();
    if (!v117)
      goto LABEL_84;
  }
  swift_bridgeObjectRelease();
  v108 = _swiftEmptyArrayStorage;
LABEL_94:
  aBlock = v108;
  v126 = sub_10001A630((uint64_t *)&unk_10083AE10);
  v127 = sub_1000A5F84((unint64_t *)&qword_10083B050, (uint64_t *)&unk_10083AE10, (uint64_t)&protocol conformance descriptor for [A]);
  v128 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v126, v127);
  v130 = v129;
  swift_bridgeObjectRelease();
  aBlock = (id)sub_10001A820(v128, v130, (uint64_t *)&v167);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v170);
  swift_bridgeObjectRelease_n(v81, 2);
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, a4, (os_log_type_t)v7, "Removing orphaned accounts {accounts: %s}", (uint8_t *)v27, 0xCu);
  v131 = v160;
  swift_arrayDestroy(v160, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v131, -1, -1);
  swift_slowDealloc(v27, -1, -1);

LABEL_95:
  v132 = objc_allocWithZone((Class)REMSaveRequest);
  v133 = objc_msgSend(v132, "initWithStore:", v154);
  swift_beginAccess(&v164, &v167, 0, 0);
  v134 = v164;
  if ((unint64_t)v164 >> 62)
  {
    if (v164 < 0)
      v140 = v164;
    else
      v140 = v164 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v164);
    v135 = _CocoaArrayWrapper.endIndex.getter(v140);
    swift_bridgeObjectRelease();
    if (!v135)
      goto LABEL_107;
LABEL_97:
    if (v135 >= 1)
    {
      v136 = 0;
      do
      {
        if ((v134 & 0xC000000000000001) != 0)
          v137 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v136, v134);
        else
          v137 = *(id *)(v134 + 8 * v136 + 32);
        v138 = v137;
        ++v136;
        v139 = objc_msgSend(v133, "updateAccount:", v137);
        objc_msgSend(v139, "removeFromStore");

      }
      while (v135 != v136);
      goto LABEL_107;
    }
    __break(1u);
LABEL_111:
    __break(1u);
LABEL_112:
    swift_release(v153);

    swift_release(v147);
    __break(1u);
  }
  v135 = *(_QWORD *)((v164 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v135)
    goto LABEL_97;
LABEL_107:
  swift_bridgeObjectRelease();
  if (qword_100836F28 != -1)
    swift_once(&qword_100836F28, sub_1001BA8F8);
  v141 = qword_100871CE8;
  v142 = swift_allocObject(&unk_1007FA580, 32, 7);
  v143 = v156;
  *(_QWORD *)(v142 + 16) = sub_100567D74;
  *(_QWORD *)(v142 + 24) = v143;
  v170[3] = sub_100567D94;
  v171 = v142;
  aBlock = _NSConcreteStackBlock;
  v170[0] = 1107296256;
  v170[1] = sub_1000E18E4;
  v170[2] = &unk_1007FA598;
  v144 = _Block_copy(&aBlock);
  v145 = v171;
  swift_retain();
  swift_release(v145);
  objc_msgSend(v133, "saveWithQueue:completion:", v141, v144);

  _Block_release(v144);
  swift_release(v143);

}

uint64_t sub_100567D6C()
{
  return sub_10056896C(64);
}

uint64_t sub_100567D74(char a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10054FF24(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_BYTE *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t sub_100567D94(uint64_t a1)
{
  uint64_t v1;

  return sub_10054C664(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16));
}

void sub_100567DA0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __n128 v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  NSObject *v23;
  _QWORD aBlock[5];
  uint64_t v25;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(NSObject **)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (gDADOperationQueue)
  {
    sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
    v23 = v3;
    v11 = (void *)static OS_dispatch_queue.main.getter(v10);
    v12 = swift_allocObject(&unk_1007FA5F8, 24, 7);
    *(_QWORD *)(v12 + 16) = a1;
    aBlock[4] = sub_100568094;
    v25 = v12;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000094C8;
    aBlock[3] = &unk_1007FA610;
    v13 = _Block_copy(aBlock);
    v14 = swift_release(v25);
    static DispatchQoS.unspecified.getter(v14);
    aBlock[0] = _swiftEmptyArrayStorage;
    v15 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v16 = sub_10001A630((uint64_t *)&unk_100838000);
    v17 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v16, v17, v2, v15);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v13);
    _Block_release(v13);

    ((void (*)(char *, uint64_t))v23[1].isa)(v5, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    if (qword_100837880 != -1)
      swift_once(&qword_100837880, sub_100547F80);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_10001AAA8(v18, (uint64_t)qword_10084F6F8);
    v23 = Logger.logObject.getter(v19);
    v20 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v20, "DADMain is disabled after we stop monitoring agents. Will not try re-starting agents.", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

  }
}

uint64_t sub_100568084()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100568094()
{
  uint64_t v0;

  sub_10054D278(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1005680A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(v2 + 24);
  v4 = *(_BYTE *)(v2 + 32);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 40);
  v6 = *(unsigned __int8 *)(v2 + 56);
  v7 = *(_QWORD *)(v2 + 64);
  sub_10054CCA8(a1, a2);
  if ((v4 & 1) == 0)
    sub_100567DA0(v3);
  return v5(v6, v7);
}

uint64_t sub_10056810C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 16))(*(unsigned __int8 *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_10056813C(char a1, char a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_10054D66C(a1, a2, a3, v3[2], v3[3], v3[4], (uint64_t)&unk_1007FA990, (uint64_t)sub_1005682BC, (uint64_t)&unk_1007FA9A8);
}

uint64_t sub_100568180(uint64_t a1, char a2)
{
  return sub_100568764(a1, a2, (uint64_t)&unk_1007FA710, (uint64_t)sub_100568198);
}

uint64_t sub_100568198()
{
  return sub_1005687EC(1, (void (*)(uint64_t, id, uint64_t, uint64_t, uint64_t, uint64_t, id, uint64_t, char, uint64_t, uint64_t))sub_1005567B0);
}

uint64_t sub_1005681A8()
{
  return sub_10056896C(64);
}

uint64_t sub_1005681B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1005689AC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10054D5AC);
}

uint64_t sub_1005681CC()
{
  return sub_10056896C(64);
}

uint64_t sub_1005681DC()
{
  return sub_10056896C(64);
}

uint64_t sub_1005681E8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 34, 7);
}

uint64_t sub_100568214()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[6]);
  swift_errorRelease(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100568248(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(v2 + 24);
  v4 = *(_BYTE *)(v2 + 32);
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 40);
  v6 = *(unsigned __int8 *)(v2 + 56);
  v7 = *(unsigned __int8 *)(v2 + 57);
  v8 = *(_QWORD *)(v2 + 64);
  sub_10054CCA8(a1, a2);
  if ((v4 & 1) == 0)
    sub_100567DA0(v3);
  return v5(v6, v7, v8);
}

uint64_t sub_1005682C4(char a1, char a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_10054D66C(a1, a2, a3, v3[2], v3[3], v3[4], (uint64_t)&unk_1007FADA0, (uint64_t)sub_1005682BC, (uint64_t)&unk_1007FADB8);
}

uint64_t sub_100568304()
{
  return sub_10056830C(49);
}

uint64_t sub_10056830C(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 16));

  swift_release(*(_QWORD *)(v1 + 40));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10056834C(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_10054D87C(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_BYTE *)(v2 + 48));
}

uint64_t sub_100568360()
{
  return sub_10056896C(65);
}

uint64_t sub_100568368()
{
  uint64_t v0;

  return sub_10054D924(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(unsigned __int8 *)(v0 + 64));
}

uint64_t sub_100568380()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1005683C4(uint64_t a1)
{
  uint64_t v1;

  return sub_10054DFB0(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_BYTE *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t sub_1005683F8()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

